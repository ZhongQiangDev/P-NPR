text	recoder	tare	rewardrepair	selfapr	gamma	allfailure
"@Override protected Control createAppearancePage(Composite parent) { GridData gridData; Composite appearanceComposite = new Composite(parent, SWT.NONE); Composite wordNavigationComposite = new Composite(appearanceComposite, SWT.NONE);  gridData = new GridData(GridData.FILL_HORIZONTAL); gridData.grabExcessHorizontalSpace = true; wordNavigationComposite.setLayoutData(gridData);  GridLayout wordNavigationLayout = new GridLayout(); wordNavigationLayout.marginWidth = 0; wordNavigationLayout.marginRight = 5; wordNavigationLayout.numColumns = 2; wordNavigationComposite.setLayout(wordNavigationLayout);  Label label = new Label(wordNavigationComposite, SWT.NONE); label.setText(""Word navigation""); gridData = new GridData(); gridData.grabExcessHorizontalSpace = false; label.setLayoutData(gridData);  comboNavigation = new Combo(wordNavigationComposite, SWT.CHECK); comboNavigation.add(WORD_NAVIGATION_SUBWORD_CAPTION); comboNavigation.add(WORD_NAVIGATION_NATIVE_CAPTION); comboNavigation.addSelectionListener(new SelectionAdapter() { @Override public void widgetSelected(SelectionEvent e) { String text = comboNavigation.getText(); String style = SubWordPreferences.WORD_NAVIGATION_STYLE_SUBWORD; if (WORD_NAVIGATION_NATIVE_CAPTION.equals(text)) { style = SubWordPreferences.WORD_NAVIGATION_STYLE_SUBWORD; } fOverlayStore.setValue(SubWordPreferences.WORD_NAVIGATION_STYLE, style); } }); gridData = new GridData(GridData.FILL_HORIZONTAL); gridData.grabExcessHorizontalSpace = true; comboNavigation.setLayoutData(gridData);  createColorOptions(appearanceComposite);  Composite exampleComposite = new Composite(appearanceComposite, SWT.NONE); gridData = new GridData(GridData.FILL_HORIZONTAL); gridData.grabExcessHorizontalSpace = true; exampleComposite.setLayoutData(gridData); GridLayout exampleGridLayout = new GridLayout(); exampleGridLayout.marginWidth = 0; exampleGridLayout.marginRight = 5; exampleComposite.setLayout(exampleGridLayout); formatAndStyleRangeHelper = new StyledTextForShowingCodeFactory(); labelExample = formatAndStyleRangeHelper.createStyledTextForCodePresentation(exampleComposite); gridData = new GridData(GridData.FILL_HORIZONTAL); gridData.grabExcessHorizontalSpace = true; labelExample.setLayoutData(gridData); updateLabelExample(PyFormatStd.getFormat(null), PydevPrefs.getChainedPrefStore());  LinkFieldEditor tabsFieldEditor = new LinkFieldEditor(""UNUSED"", ""Other settings:\n\n<a>Tabs</a>: tab preferences for PyDev ...\n(note: 'Insert spaces for tabs' in the general settings is ignored)."", appearanceComposite, new SelectionListener() {  @Override public void widgetSelected(SelectionEvent e) { String id = ""org.python.pydev.editor.preferences.PyTabPreferencesPage""; IWorkbenchPreferenceContainer workbenchPreferenceContainer = ((IWorkbenchPreferenceContainer) getContainer()); workbenchPreferenceContainer.openPage(id, null); }  @Override public void widgetDefaultSelected(SelectionEvent e) { } }); tabsFieldEditor.getLinkControl(appearanceComposite);  LinkFieldEditor colorsAndFontsLinkFieldEditor = new LinkFieldEditor(""UNUSED"", ""<a>Text Editors</a>: print margin, line numbers ..."", appearanceComposite, new SelectionListener() {  @Override public void widgetSelected(SelectionEvent e) { String id = ""org.eclipse.ui.preferencePages.GeneralTextEditor""; IWorkbenchPreferenceContainer workbenchPreferenceContainer = ((IWorkbenchPreferenceContainer) getContainer()); workbenchPreferenceContainer.openPage(id, null); }  @Override public void widgetDefaultSelected(SelectionEvent e) { } }); colorsAndFontsLinkFieldEditor.getLinkControl(appearanceComposite);  colorsAndFontsLinkFieldEditor = new LinkFieldEditor(""UNUSED"", ""<a>Colors and Fonts</a>: text font, content assist color ..."", appearanceComposite, new SelectionListener() {  @Override public void widgetSelected(SelectionEvent e) { String id = ""org.eclipse.ui.preferencePages.ColorsAndFonts""; IWorkbenchPreferenceContainer workbenchPreferenceContainer = ((IWorkbenchPreferenceContainer) getContainer()); workbenchPreferenceContainer.openPage(id, null); }  @Override public void widgetDefaultSelected(SelectionEvent e) { } }); colorsAndFontsLinkFieldEditor.getLinkControl(appearanceComposite);  colorsAndFontsLinkFieldEditor = new LinkFieldEditor(""UNUSED"", ""<a>Annotations</a>: occurrences, markers ..."", appearanceComposite, new SelectionListener() {  @Override public void widgetSelected(SelectionEvent e) { String id = ""org.eclipse.ui.editors.preferencePages.Annotations""; IWorkbenchPreferenceContainer workbenchPreferenceContainer = ((IWorkbenchPreferenceContainer) getContainer()); workbenchPreferenceContainer.openPage(id, null); }  @Override public void widgetDefaultSelected(SelectionEvent e) { } }); colorsAndFontsLinkFieldEditor.getLinkControl(appearanceComposite);  return appearanceComposite; } "	0	0	0	0	0	1
public IReadOnlyList<RangeMapping<TKey>> SplitMapping(RangeMapping<TKey> existingMapping, TKey splitAt) { return this.SplitMapping(existingMapping, splitAt, MappingLockToken.NoLock); } 	0	0	0	1	0	0
@Override public int evaluate(Model mo, E e) { ShareableResource r = ShareableResource.get(mo, rc); if (r == null) { return -1; } int x; if (e instanceof VM) { x = r.getConsumption((VM) e); } else if (e instanceof Node) { x = r.getCapacity((Node) e); } else { return -1; } return (int) (coefficient * x + offset); } 	0	0	0	0	0	1
"@Override public TupleSet showColumns(String dataSourceName, String schemaPattern, String tablePattern, String columnPattern) throws Exception { TupleSetSql ts = new TupleSetSql();  List<Tuple> tuples = new ArrayList<>(); final String sPattern = convertPattern(schemaPattern); final String tPattern = convertPattern(tablePattern); final String cPattern = convertPattern(columnPattern); for (MetaDataSource mDs : metaContext.getDataSources()) { String dsName = mDs.getName(); if (dataSourceName != null && !dataSourceName.equals(dsName)) continue;  for (MetaSchema mSchema : mDs.getSchemas()) { String schemaName = mSchema.getName(); if (!schemaName.matches(sPattern)) continue;  for (MetaTable mTable : mSchema.getTables()) { String tableName = mTable.getName(); if (!tableName.matches(tPattern)) continue;  for (MetaColumn mColumn : mTable.getColumns()) { String colName = mColumn.getName();  if (!tableName.matches(cPattern)) continue;  Tuple t = new Tuple(25); t.setDatum(0, dsName); t.setDatum(1, schemaName); t.setDatum(2, tableName); t.setDatum(3, colName); t.setDatum(4, String.valueOf(mColumn.getType())); t.setDatum(5, TypeInfo.postresTypeOfJdbcType(mColumn.getType()).typeName()); t.setDatum(6, ""NULL""); t.setDatum(7, ""NULL""); t.setDatum(8, ""NULL""); t.setDatum(9, ""NULL""); t.setDatum(10, ""NULL""); t.setDatum(11, mColumn.getComment()); t.setDatum(12, ""NULL""); t.setDatum(13, ""NULL""); t.setDatum(14, ""NULL""); t.setDatum(15, ""NULL""); t.setDatum(16, ""NULL""); t.setDatum(17, ""NULL""); t.setDatum(18, ""NULL""); t.setDatum(19, ""NULL""); t.setDatum(20, ""NULL""); t.setDatum(21, ""NULL""); t.setDatum(22, ""NULL""); t.setDatum(23, ""NULL""); t.setDatum(24, mColumn.getDataCategory());  tuples.add(t); } } } } // ordered by TABLE_CAT, TABLE_SCHEM, TABLE_NAME and ORDINAL_POSITION Collections.sort(tuples, new Comparator<Tuple>() { @Override public int compare(Tuple tl, Tuple tr) { int r = ((String) tl.getDatum(0)).compareTo(((String) tr.getDatum(0))); if (r == 0) r = ((String) tl.getDatum(1)).compareTo(((String) tr.getDatum(1))); if (r == 0) r = ((String) tl.getDatum(2)).compareTo(((String) tr.getDatum(2))); if (r == 0) r = ((String) tl.getDatum(16)).compareTo(((String) tr.getDatum(16))); return r; } });  ts.addTuples(tuples); return ts; } "	1	0	0	0	0	0
"@Override protected void configure(HttpSecurity http) throws Exception { http .authorizeRequests() // development! .antMatchers(""/resv/**"").permitAll()  // index page and REST endpoints: .antMatchers(""/"").permitAll() .antMatchers(""/graphs/**"").permitAll() .antMatchers(""/info/**"").permitAll()  // various static / webjar resources .antMatchers(""/webjars/**"").permitAll() .antMatchers(""/st/**"").permitAll()  // only admins for this one .antMatchers(""/admin/**"").hasAuthority(""ADMIN"")  // only admins .anyRequest().authenticated() .and() .formLogin() .loginPage(""/login"") .permitAll() .and() .logout() .permitAll() .logoutRequestMatcher(new AntPathRequestMatcher(""/logout"")) .logoutSuccessUrl(""/login"") .deleteCookies(""remember-me"") .and().rememberMe();  } "	0	0	0	0	0	1
private Callback<TreeTableColumn.CellDataFeatures<BoxObject, Node>, ObservableValue<Node>> inlineOptionsCellValueFactory() { return param -> { TreeItem<BoxObject> item = param.getValue(); HBox bar = new HBox(3); SimpleObjectProperty<Node> result = new SimpleObjectProperty<>(bar); if (!(item.getValue() instanceof BoxFolder) && !(item.getValue() instanceof BoxFile)) { return result; }  loadInlineButtons(item, bar);  BoxObject value = item.getValue(); TreeItem<BoxObject> folder = value instanceof BoxFolder ? item : item.getParent(); if (!(folder instanceof FolderTreeItem)) { return result; } ReadableBoxNavigation rNav = ((FolderTreeItem)folder).getNavigation(); if (!(rNav instanceof CachedBoxNavigation)) { return result; }  CachedBoxNavigation nav = (CachedBoxNavigation)rNav; nav.addObserver((o, arg) -> { if (!(arg instanceof ChangeEvent)) { return; } ChangeEvent event = (ChangeEvent) arg; if (!event.getPath().equals(value instanceof BoxFolder ? nav.getPath() : nav.getDesktopPath(item.getValue()))) { return; } Platform.runLater(() -> { try { if (value instanceof BoxFile) { item.setValue(nav.getFile(value.getName())); } loadInlineButtons(item, bar); result.set(bar); } catch (QblStorageException ignored) { } }); });  return result; }; } 	0	0	1	1	1	0
@Override protected Set<CloudSdkValidationResult> validateCloudSdk(Path path) { Set<CloudSdkValidationResult> validationResults = new HashSet<>();  if (path == null) { validationResults.add(CloudSdkValidationResult.CLOUD_SDK_NOT_FOUND); // If the Cloud SDK is not found, don't bother checking anything else return validationResults; }  CloudSdk sdk = buildCloudSdkWithPath(path); try { sdk.validateCloudSdk(); } catch (CloudSdkNotFoundException exception) { validationResults.add(CloudSdkValidationResult.CLOUD_SDK_NOT_FOUND); // If the Cloud SDK is not found, don't bother checking anything else return validationResults; } catch (CloudSdkOutOfDateException exception) { validationResults.add(CloudSdkValidationResult.CLOUD_SDK_VERSION_NOT_SUPPORTED); } catch (InvalidJavaSdkException exception) { validationResults.add(CloudSdkValidationResult.CLOUD_SDK_NOT_FOUND); }  try { sdk.validateAppEngineJavaComponents(); } catch (AppEngineJavaComponentsNotInstalledException ex) { validationResults.add(CloudSdkValidationResult.NO_APP_ENGINE_COMPONENT); }  return validationResults; } 	0	0	0	0	1	0
@Override public int hashCode() { return this._id; } 	0	0	0	0	0	1
public Long getId() { return id; } 	0	0	0	0	0	1
"@Override protected String replaceTemplateVariables(DataEventType dml, Trigger trigger, TriggerHistory history, Channel channel, String tablePrefix, Table originalTable, Table table, String defaultCatalog, String defaultSchema, String ddl) { ddl = FormatUtils.replace(""oldColumns"", trigger.isUseCaptureOldData() ? super.buildColumnsString(ORIG_TABLE_ALIAS, oldTriggerValue, oldColumnPrefix, table.getColumns(), dml, true, channel, trigger).toString() : ""convert(VARCHAR,null)"", ddl); ddl = super.replaceTemplateVariables(dml, trigger, history, channel, tablePrefix, originalTable, table, defaultCatalog, defaultSchema, ddl); Column[] columns = table.getPrimaryKeyColumns(); ddl = FormatUtils.replace(""declareOldKeyVariables"", buildKeyVariablesDeclare(columns, ""old""), ddl); ddl = FormatUtils.replace(""declareNewKeyVariables"", buildKeyVariablesDeclare(columns, ""new""), ddl); return ddl; } "	0	0	1	0	0	0
"public String createCsvPrimaryKeySql(Trigger trigger, TriggerHistory triggerHistory, Table table, Channel channel, String whereClause) { String sql = sqlTemplates.get(INITIAL_LOAD_SQL_TEMPLATE);  Column[] columns = table.getPrimaryKeyColumns(); String columnsText = buildColumnsString(symmetricDialect.getInitialLoadTableAlias(), symmetricDialect.getInitialLoadTableAlias(), """", columns, DataEventType.INSERT, false, channel, trigger).toString(); sql = FormatUtils.replace(""columns"", columnsText, sql); sql = FormatUtils.replace(""oracleToClob"", trigger.isUseCaptureLobs() ? ""to_clob('')||"" : """", sql); sql = FormatUtils.replace(""tableName"", SymmetricUtils.quote(symmetricDialect, table.getName()), sql); sql = FormatUtils.replace(""schemaName"", triggerHistory == null ? getSourceTablePrefix(table) : getSourceTablePrefix(triggerHistory), sql); sql = FormatUtils.replace(""whereClause"", whereClause, sql); sql = FormatUtils.replace( ""primaryKeyWhereString"", getPrimaryKeyWhereString(symmetricDialect.getInitialLoadTableAlias(), table.hasPrimaryKey() ? table.getPrimaryKeyColumns() : table.getColumns()), sql);  return sql; } "	0	0	1	0	0	0
@Test public void testSuccessfulHMovement() { final Alien alien = new Alien(33, 33, game);  assertFalse(game.getupdateLogic());  alien.hmovement(); assertFalse(game.getupdateLogic()); assertEquals(34, alien.getX(), 0.00001); } 	0	0	0	0	1	0
@Test public void testHMovementLeftBorder() { final Alien alien = new Alien(2, 33, game); alien.setMovementSpeed(-4);  assertFalse(game.getupdateLogic());  alien.hmovement(); assertEquals((double) -2, alien.getX(), 0.0001); assertTrue(game.getupdateLogic()); } 	0	0	0	0	1	0
"private void getCurrentStatusFromStorageBackend(DataObject dataObject) { // add information from storage back-end try { if (storageBackend != null) { String path = Paths.get(dataObject.getParentUri(), dataObject.getObjectName()).toString(); CdmiObjectStatus status = storageBackend.getCurrentStatus(path); // update monitored attributes for (Entry<String, String> entry : status.getMonitoredAttributes().entrySet()) { dataObject.getMetadata().put(entry.getKey(), entry.getValue()); } // update capabilities URI dataObject.setCapabilitiesUri(status.getCurrentCapabilitiesUri()); // update QoS transition information if (status.getTargetCapabilitiesUri() != null) { dataObject.getMetadata().put(""cdmi_capabilities_target"", status.getTargetCapabilitiesUri()); } } } catch (BackEndException ex) { log.warn(""ERROR: {}"", ex.getMessage()); } } "	0	0	1	0	1	0
public static GroupGeneralData withAssocations(final GroupGeneralData grouping, final Collection<ClientData> membersOfGroup, final Collection<ClientData> activeClientMembers, final Collection<GroupRoleData> groupRoles, final Collection<CalendarData> calendarsData, final CalendarData collectionMeetingCalendar) { return new GroupGeneralData(grouping.id, grouping.accountNo, grouping.name, grouping.externalId, grouping.status, grouping.activationDate, grouping.officeId, grouping.officeName, grouping.centerId, grouping.centerName, grouping.staffId, grouping.staffName, grouping.hierarchy, membersOfGroup, activeClientMembers, grouping.centerOptions, grouping.officeOptions, grouping.staffOptions, grouping.clientOptions, groupRoles, grouping.availableRoles, grouping.selectedRole, calendarsData, collectionMeetingCalendar, grouping.closureReasons, grouping.timeline); } 	0	0	0	0	0	1
"private void showResult() { T.UI(); mMdpData = new ArrayList<MyDigiPassWidget.MdpRow>(); if (mScopes.contains(SCOPE_EID_PHOTO)) { mImageView.setVisibility(View.VISIBLE); final byte[] data = Base64.decode(mResult.eid_photo); mImageView.setImageBitmap(BitmapFactory.decodeByteArray(data, 0, data.length)); } else { mImageView.setVisibility(View.GONE); }  final Context ctx = getContext(); if (mScopes.contains(SCOPE_EID_PROFILE)) { addMdpRow(R.string.fa_user, mResult.eid_profile.getDisplayName()); addMdpRow(R.string.fa_transgender, mResult.eid_profile.getDisplayGender(ctx)); addMdpRow(R.string.fa_birthday_cake, String.format(""%s, %s"", getFormattedDateString(mResult.eid_profile.date_of_birth), mResult.eid_profile.location_of_birth)); if (!TextUtils.isEmptyOrWhitespace(mResult.eid_profile.noble_condition)) { addMdpRow(R.string.fa_black_tie, mResult.eid_profile.noble_condition); } addMdpRow(R.string.fa_hourglass_half, ctx.getString(R.string.valid_from_to, getFormattedDateString(mResult.eid_profile.validity_begins_at), getFormattedDateString(mResult.eid_profile.validity_ends_at))); addMdpRow(R.string.fa_flag, mResult.eid_profile.nationality); addMdpRow(R.string.fa_home, mResult.eid_profile.issuing_municipality); if (!TextUtils.isEmptyOrWhitespace(mResult.eid_profile.created_at)) { addMdpRow(R.string.fa_clock_o, getFormattedDateTimeString(mResult.eid_profile.created_at)); } addMdpRow(R.string.fa_credit_card, mResult.eid_profile.getDisplayCardInfo(ctx)); }  if (mScopes.contains(SCOPE_EID_ADDRESS)) { addMdpRow(R.string.fa_home, mResult.eid_address.getDisplayValue()); }  if (mScopes.contains(SCOPE_EMAIL)) { addMdpRow(R.string.fa_envelope, mResult.email); }  if (mScopes.contains(SCOPE_PHONE)) { addMdpRow(R.string.fa_phone, mResult.phone); }  if (mScopes.contains(SCOPE_PROFILE)) { addMdpRow(R.string.fa_user, mResult.profile.getDisplayName()); if (!TextUtils.isEmptyOrWhitespace(mResult.profile.preferred_locale)) { addMdpRow(R.string.fa_flag, mResult.profile.getDisplayLanguage()); } if (!TextUtils.isEmptyOrWhitespace(mResult.profile.born_on)) { addMdpRow(R.string.fa_birthday_cake, getFormattedDateString(mResult.profile.born_on)); } }  if (mScopes.contains(SCOPE_ADDRESS)) { addMdpRow(R.string.fa_home, mResult.address.getDisplayValue()); }  mAuthenticateBtn.setVisibility(View.GONE); mResultListView.setVisibility(mMdpData.size() == 0 ? View.GONE : View.VISIBLE); mResultAdapter.notifyDataSetChanged();  mActivity.getMainService().postOnUIHandler(new SafeRunnable() { @Override protected void safeRun() throws Exception { UIUtils.setListViewHeightBasedOnItems(mResultListView); } }); } "	0	0	0	0	0	1
public ParseException generateParseException() { jj_expentries.clear(); boolean[] la1tokens = new boolean[116]; if (jj_kind >= 0) { la1tokens[jj_kind] = true; jj_kind = -1; } for (int i = 0; i < 112; i++) { if (jj_la1[i] == jj_gen) { for (int j = 0; j < 32; j++) { if ((jj_la1_0[i] & (1<<j)) != 0) { la1tokens[j] = true; } if ((jj_la1_1[i] & (1<<j)) != 0) { la1tokens[32+j] = true; } if ((jj_la1_2[i] & (1<<j)) != 0) { la1tokens[64+j] = true; } if ((jj_la1_3[i] & (1<<j)) != 0) { la1tokens[96+j] = true; } } } } for (int i = 0; i < 116; i++) { if (la1tokens[i]) { jj_expentry = new int[1]; jj_expentry[0] = i; jj_expentries.add(jj_expentry); } } jj_endpos = 0; jj_rescan_token(); jj_add_error_token(0, 0); int[][] exptokseq = new int[jj_expentries.size()][]; for (int i = 0; i < jj_expentries.size(); i++) { exptokseq[i] = jj_expentries.get(i); } return new ParseException(token, exptokseq, tokenImage); } 	0	0	0	1	1	0
private boolean jj_3R_87() { if (jj_3R_51()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_118() { if (jj_3R_138()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3_18() { if (jj_scan_token(LPAREN)) return true; if (jj_3R_61()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_214() { if (jj_3R_220()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_209() { if (jj_3R_69()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3_20() { if (jj_scan_token(LPAREN)) return true; if (jj_3R_61()) return true; return false; } 	0	0	1	1	0	0
"final public void DecafMain() throws ParseException { trace_call(""DecafMain""); try { Token t; ASTDecafMain jjtn001 = new ASTDecafMain(this, JJTDECAFMAIN); boolean jjtc001 = true; jjtree.openNodeScope(jjtn001); try { t = getToken(1); label_44: while (true) { BlockStatement(); if (jj_2_34(3)) { ; } else { break label_44; } } jjtree.closeNodeScope(jjtn001, true); jjtc001 = false; setFirstLastToken(jjtn001, t, getToken(0)); } catch (Throwable jjte001) { if (jjtc001) { jjtree.clearNodeScope(jjtn001); jjtc001 = false; } else { jjtree.popNode(); } if (jjte001 instanceof RuntimeException) { {if (true) throw (RuntimeException)jjte001;} } if (jjte001 instanceof ParseException) { {if (true) throw (ParseException)jjte001;} } {if (true) throw (Error)jjte001;} } finally { if (jjtc001) { jjtree.closeNodeScope(jjtn001, true); } } } finally { trace_return(""DecafMain""); } } "	0	0	1	0	1	0
private static void incrementProperty(VariantRec var, String key) { Double current = var.getProperty(key); if (current == null) { current = 0.0; } current++; var.addProperty(key, current); } 	0	0	0	0	0	1
@Override public void onCancelled(DatabaseError databaseError) { getOnCompleteResult.onCancel(); } 	0	0	0	0	1	0
protected final State getState() { return state; } 	0	0	1	1	0	0
@Override public int leadingDimension() { return Math.max(_nbColumns, _nbRows); } 	0	0	0	0	1	0
@Override public int length() { return _nbRows * _nbColumns; } 	0	0	0	0	0	1
public static int getCreatureData(Entity entity) { switch(getCreatureType(entity)) { case CREEPER: return ((Creeper)entity).isPowered() ? 1 : 0; case PIG: return ((Pig)entity).hasSaddle() ? 1 : 0; case SHEEP: return ((Sheep)entity).getColor().getData() + (((Sheep)entity).isSheared() ? 16 : 0); case SLIME: return ((Slime)entity).getSize(); case WOLF: return ((Wolf)entity).isAngry() ? 1 : (((Wolf)entity).isTamed() ? 2 : 0); case PIG_ZOMBIE: return ((PigZombie)entity).getAnger(); default: return 0; } } 	0	0	0	0	1	0
void setRange(int lo, int hi) { setRange(new IntRange(lo,hi)); } 	0	0	0	0	0	1
private int skipPriorSeparation(int pos) throws BadLocationException { while (pos > 0) { char ch = getText(pos - 1, 1).charAt(0); if (ch == ' ' || ch == SEPARATOR_CHAR) pos--; else break; } return pos; } 	0	0	0	0	1	0
private void insertOrReplaceString(int offset, int len, String str, AttributeSet a) throws BadLocationException { // return immediately when selecting an item if (selecting) return;  // nothing to insert? abort if (str == null || str.length() == 0) return; char ch = str.charAt(0);  try { // branch based on what the user is trying to insert if (isLetter(ch)) { tryInsertInitials(offset, len, str); } else if (isNumber(ch)) { tryInsertNumber(offset, len, str); } else if (isPunctuation(ch)) { tryInsertPunctuation(offset, ch); } else { badInput(); } justInsertedSeparator = (ch == SEPARATOR_CHAR); } catch (BadInputException bie) { } } 	0	0	0	0	1	0
"@Override protected Map<String, String> parseInfo() { Map<String, String> memoryDataMap = WMI4Java.get().VBSEngine().getWMIObject(WMIClass.WIN32_PERFFORMATTEDDATA_PERFOS_MEMORY); memoryDataMap.putAll(WMI4Java.get().VBSEngine().getWMIObject(WMIClass.WIN32_PHYSICALMEMORY));  memoryDataMap.put(""MemAvailable"", memoryDataMap.get(""AvailableKBytes"")); memoryDataMap.put(""MemFree"", WMI4Java.get().VBSEngine().getWMIObject(WMIClass.WIN32_OPERATINGSYSTEM).get(""FreePhysicalMemory"")); memoryDataMap.put(""MemTotal"", WMI4Java.get().VBSEngine().getWMIObject(WMIClass.WIN32_OPERATINGSYSTEM).get(""FreePhysicalMemory""));  return memoryDataMap; } "	0	0	0	0	1	0
void setDefaultColumns() { Disassembler dis = cpu.getDisassembler(); if (cpu.isBreakpointSupported()) { setColumns(Arrays.asList( new BreakpointColumn(cpu), new AddressColumn(), new MnemoColumn(dis), new OpcodeColumn(dis) )); } else { setColumns(Arrays.asList( new AddressColumn(), new MnemoColumn(dis), new OpcodeColumn(dis) )); } } 	0	0	1	0	0	0
public static Event update(Event event, EventRequest request) { event.setTitle(request.getTitle()); event.setDescription(request.getDescription()); event.setLocation(request.getLocation()); event.setTarget(request.getTarget()); event.setLimit(request.getLimit()); event.setStart(LocalDateTime.parse(request.getEventStart(), format)); event.setEnding(LocalDateTime.parse(request.getEventEnd(), format)); event.setImageURL(request.getImage());  return event; } 	0	0	0	0	1	0
"protected void handleMouseClick(Slot slot, int slotId, int button, int flag) { if (slot != null && slot.getHasStack()) { ItemStack stack = slot.getStack();  sign = new TileEntityMoarSign(); String texture = ItemMoarSign.getTextureFromNBTFull(stack.getTagCompound()); SignInfo info = SignRegistry.get(texture);  sign.setWorldObj(FMLClientHandler.instance().getWorldClient()); sign.isMetal = info.isMetal; sign.blockType = info.isMetal ? Blocks.signStandingMetal : Blocks.signStandingWood; sign.signText = new String[]{"""", ""§nThis is some"", ""§4example §ltext"", """"}; sign.setResourceLocation(texture); } } "	0	0	0	0	1	0
@Override public Loader<LoaderResult> onCreateLoader(int id, Bundle args) { switch (id) { case R.id.loader_id_add_new_account: UIUtil.exchangeViewVisibility(this, true, progressView, contentView);  authCredentials = generateAuthCredentials(); return new CheckEmailSettingsAsyncTaskLoader(this, authCredentials);  default: return null; } } 	0	0	0	0	0	1
public Set<PhysicalTable> getPhysicalTables() { return this.tables; } 	0	0	0	0	0	1
"@Override public FinancaTable getModel() { if (!isTableInitialized){ try { initTable(); } catch (DatabaseException ex) { MainFrame.LOG.log(Level.SEVERE, ""Falha ao inicializar tabela.""); } isTableInitialized=true; } return model; } "	0	0	0	0	1	0
"@Override public void init() { if (initDone || !com.mcmoddev.basemetals.util.Config.Options.enableTinkersConstruct) { return; }  Map<String, Boolean> materials = new HashMap<>();  materials.put(""Adamantine"", Options.enableAdamantine); materials.put(""Adamantine"", Options.enableAdamantine); materials.put(""Antimony"", Options.enableAntimony); materials.put(""Aquarium"", Options.enableAquarium); materials.put(""Bismuth"", Options.enableBismuth); materials.put(""Brass"", Options.enableBrass); materials.put(""Bronze"", Options.enableBronze); materials.put(""ColdIron"", Options.enableColdIron); materials.put(""Cupronickel"", Options.enableCupronickel); materials.put(""Invar"", Options.enableInvar); materials.put(""Mithril"", Options.enableMithril); materials.put(""Nickel"", Options.enableNickel); materials.put(""Pewter"", Options.enablePewter); materials.put(""Platinum"", Options.enablePlatinum); materials.put(""StarSteel"", Options.enableStarSteel); materials.put(""Tin"", Options.enableTin); materials.put(""Zinc"", Options.enableZinc); materials.put(""Lead"", Options.enableLead); materials.put(""Mercury"", Options.enableMercury); materials.put(""Silver"", Options.enableSilver);  for( Map.Entry<String, Boolean> e : materials.entrySet() ) { addFurnace(e.getValue(), e.getKey()); addCrucible(e.getValue(), e.getKey()); addPlatePress(e.getValue(), e.getKey()); addPressStorage(e.getValue(), e.getKey()); }  addSmelterRecipe(4000, new ItemStack(Materials.copper.ingot, 2), new ItemStack(Materials.zinc.ingot, 1), new ItemStack( Materials.brass.ingot, 3)); addSmelterRecipe(4000, new ItemStack(Materials.copper.ingot, 3), new ItemStack(Materials.nickel.ingot, 1), new ItemStack( Materials.cupronickel.ingot, 4)); initDone = true; } "	0	0	0	0	1	0
"@Override public AbstractCas next() throws AnalysisEngineProcessException { SolrResult result = i < results.size() ? results.get(i) : null; i++;  JCas jcas = getEmptyJCas(); try { jcas.createView(""Question""); CasCopier qcopier = new CasCopier(questionView.getCas(), jcas.getView(""Question"").getCas()); copyQuestion(qcopier, questionView, jcas.getView(""Question""));  jcas.createView(""Result""); JCas resultView = jcas.getView(""Result""); if (result != null) { boolean isLast = (i == results.size()); ResultInfo ri = generateSolrResult(questionView, resultView, result.doc, result.concept, isLast ? i : 0); String title = ri.getDocumentTitle(); logger.info("" ** SearchResultCAS: "" + ri.getDocumentId() + "" "" + (title != null ? title : """")); /* XXX: Ugh. We clearly need global result ids. */ QuestionDashboard.getInstance().get(questionView).setSourceState( ri.getOrigin() == ""cz.brmlab.yodaqa.pipeline.solrfull.fulltext"" ? AnswerSourceEnwiki.ORIGIN_FULL : AnswerSourceEnwiki.ORIGIN_TITLE, Integer.parseInt(ri.getDocumentId()), 1); } else { /* We will just generate a single dummy CAS * to avoid flow breakage. */ resultView.setDocumentText(""""); resultView.setDocumentLanguage(questionView.getDocumentLanguage()); ResultInfo ri = new ResultInfo(resultView); ri.setDocumentTitle(""""); ri.setOrigin(resultInfoOrigin); ri.setIsLast(i); ri.addToIndexes(); } } catch (Exception e) { jcas.release(); throw new AnalysisEngineProcessException(e); } return jcas; } "	1	0	0	1	0	0
"@DataProvider(name = ""trimMottData"") public static Object[][] trimMottData() { return new Object[][] { // this are test which mimics the ones in the perl script from PoPoolation {new byte[] {20, 20, 20, 20}, 20, new int[] {4, 4}}, {new byte[] {21, 21, 21, 20, 19}, 20, new int[] {0, 3}}, {new byte[] {20, 20, 21, 21, 21, 21, 20, 20}, 20, new int[] {2, 6}}, {new byte[] {19, 19, 21, 21, 21, 21, 1, 1, 21, 21, 21, 21, 21}, 20, new int[] {8, 13}}, {new byte[] {19, 19, 21, 21, 21, 21, 1, 1, 21, 21, 21, 21, 21, 19}, 20, new int[] {8, 13}}, {new byte[] {19, 19, 21, 21, 21, 21, 21, 1, 1, 21, 21, 21, 21}, 20, new int[] {2, 7}}, {new byte[] {19, 19, 21, 21, 21, 20, 20, 19, 19, 21, 21, 21, 20}, 20, new int[] {2, 12}}, {new byte[] {19, 21, 21, 21, 20, 20, 19, 19, 21, 21, 21, 20, 19}, 20, new int[] {1, 11}}, {new byte[] {19, 21, 21, 21, 20, 20, 19, 19, 21, 21, 21, 20, 19, 19, 21, 20, 19}, 20, new int[] {1, 11}}, {new byte[] {21, 20, 20, 19, 19, 21, 21, 21, 20, 20, 19, 19, 21, 21, 21, 20, 19}, 20, new int[] {5, 15}}   }; } "	0	0	1	1	0	0
"@Test public void questionConstraintsRequired() { try { survey = new TestSurvey(false); survey.getUnmodifiableQuestionList().get(0).setConstraints(null);  Validate.entityThrowingException(validator, survey); fail(""Should have thrown exception""); } catch (InvalidEntityException e) { assertEquals(""element0.constraints is required"", errorFor(e, ""element0.constraints"")); } } "	0	0	0	0	1	0
"public void configure() {  from(getFileComponentConsumerPath()) .routeId(this.getClass().getSimpleName()) .onException(Exception.class) .maximumRedeliveries(2) .log(LoggingLevel.WARN, LOG, ""File [${header.CamelFileName}] is being moved to the error directory [${header.ErrorDirectory}]"") .process(fileToS3ErrorProcessor).id(ERROR_ENDPOINT_PROCESSOR_ID) .to(getFileComponentErrorProducerPath()).id(ERROR_ENDPOINT_ID) .end() .setHeader(""CamelAwsS3Key"", simple(getS3OptimisedFilename(""${header.CamelFileName}""))) .setHeader(""CamelAwsS3ContentLength"", header(""CamelFileLength"")) .setHeader(""S3Bucket"", simple(toS3BucketName)) .setHeader(""ErrorDirectory"", simple(errorDirectoryPath)) .log(LoggingLevel.DEBUG, LOG, ""Current headers : [${headers}]"") .log(LoggingLevel.INFO, LOG, ""Uploading [${header.CamelFileName}] to AWS-S3 bucket [${header.S3Bucket}/${header.CamelAwsS3Key}]"") .to(getS3ComponentProducerPath()).id(UPLOAD_TO_S3_ENDPOINT_ID) .log(LoggingLevel.INFO, LOG, ""[${header.CamelFileName}] upload complete""); } "	0	0	0	0	0	1
@Override public KookooIVRResponseBuilder gotDTMF(KooKooIVRContext kooKooIVRContext) { TAMAIVRContext ivrContext = ivrContextFactory.create(kooKooIVRContext); return new KookooIVRResponseBuilder().withSid(ivrContext.callId()).withPlayAudios(TamaIVRMessage.MORE_OPTIONS, TamaIVRMessage.SIGNATURE_MUSIC). language(ivrContext.preferredLanguage()); } 	0	0	0	0	1	0
"public void addListener(LifecycleListener listener) { if (listeners.add(listener)) { LOG.info(""Adding LifecycleListener '{}' {}"", listener.getClass().getName(), System.identityHashCode(listener)); if (state.equals(State.Started)) { LOG.info(""Starting LifecycleListener '{}'"", listener.getClass().getName()); listener.onStarted(); } } } "	0	0	0	0	1	0
"public static void main( String[] args ) {  Problem curProb = new PE0023(); String result = curProb.getResult();  IO.info( ""result for problem #"" + curProb ); IO.info( "" is '"" + result + ""'"" ); IO.infoln( "" found in "" + curProb.getRuntime( 2 ) + "" ms"" );  } "	0	0	1	0	1	0
"private void configureActionBar() { ActionBar actionBar = getSupportActionBar(); actionBar.setDisplayHomeAsUpEnabled(true); actionBar.setLogo(new BitmapDrawable(getResources(), service.getCurrentUserAvatar())); actionBar.setTitle(""查看图片""); } "	0	0	0	0	1	0
"@Override public void onClick(View v) { Intent intent = new Intent(callingActivity, DraftEditor.class); intent.putExtra(""task"", ""edit_existing""); intent.putExtra(""file"", msglist.get(holder.position)); intent.putExtra(""nodeindex"", holder.draft_storage_index); callingActivity.startActivity(intent); } "	0	0	0	0	1	0
public static PreparedStatement create(Connection connection, String sql, int resultSetType, int resultSetConcurrency) throws SQLException { PreparedStatement preparedStatement = connection.prepareStatement(sql, resultSetType, resultSetConcurrency); return wrap(preparedStatement, sql); } 	0	0	0	1	0	0
public static PreparedStatement create(Connection connection, String sql, int[] columnIndexes) throws SQLException { PreparedStatement preparedStatement = connection.prepareStatement(sql, columnIndexes); return wrap(preparedStatement, sql); } 	0	0	0	1	0	0
"private Material getDefaultMaterial(AssetManager assetManager) { if (defaultMaterial == null) { defaultMaterial = new Material(assetManager, ""Common/MatDefs/Misc/ShowNormals.j3md"");; } return defaultMaterial; } "	0	0	1	1	1	0
private SWRLAtom parseDataRangeAtom() { OWLDataRange range = parseDataRange(); consumeToken(OPEN.keyword()); SWRLVariable obj1 = parseDVariable(); consumeToken(CLOSE.keyword()); return df.getSWRLDataRangeAtom(range, obj1); } 	0	0	0	0	1	0
"private void upload() { OutputStream os = null; InputStream is = null; HttpURLConnection connection = null; try { Log.d(Config.LOGTAG, ""uploading to "" + mPutUrl.toString()); connection = (HttpURLConnection) mPutUrl.openConnection(); if (connection instanceof HttpsURLConnection) { mHttpConnectionManager.setupTrustManager((HttpsURLConnection) connection, true); } connection.setRequestMethod(""PUT""); connection.setFixedLengthStreamingMode((int) file.getExpectedSize()); connection.setDoOutput(true); connection.connect(); os = connection.getOutputStream(); is = file.createInputStream(); transmitted = 0; expected = file.getExpectedSize(); int count = -1; byte[] buffer = new byte[4096]; while (((count = is.read(buffer)) != -1) && !canceled) { transmitted += count; os.write(buffer, 0, count); mXmppConnectionService.updateConversationUi(); } os.flush(); os.close(); is.close(); int code = connection.getResponseCode(); if (code == 200) { Log.d(Config.LOGTAG, ""finished uploading file""); Message.FileParams params = message.getFileParams(); if (key != null) { mGetUrl = new URL(mGetUrl.toString() + ""#"" + CryptoHelper.bytesToHex(key)); } mXmppConnectionService.getFileBackend().updateFileParams(message, mGetUrl); message.setTransferable(null); message.setCounterpart(message.getConversation().getJid().toBareJid()); if (message.getEncryption() == Message.ENCRYPTION_DECRYPTED) { mXmppConnectionService.getPgpEngine().encrypt(message, new UiCallback<Message>() { @Override public void success(Message message) { mXmppConnectionService.resendMessage(message); }  @Override public void error(int errorCode, Message object) { fail(); }  @Override public void userInputRequried(PendingIntent pi, Message object) { fail(); } }); } else { mXmppConnectionService.resendMessage(message); } } else { fail(); } } catch (IOException e) { Log.d(Config.LOGTAG, e.getMessage()); fail(); } finally { FileBackend.close(is); FileBackend.close(os); if (connection != null) { connection.disconnect(); } } } "	0	0	0	0	0	1
"@Override public boolean run(CommandSender sender, Command cmd, String[] args) { if (!(sender instanceof Player)) { sender.sendMessage(""You must be a player to execute that command!""); return true; } Player player = (Player) sender;  if (player.getGameMode() != GameMode.SPECTATOR) { player.setGameMode(GameMode.SPECTATOR); } else { player.setGameMode(GameMode.SURVIVAL); player.setAllowFlight(true); player.setFlying(true); Bukkit.getServer().dispatchCommand(getServer().getConsoleSender(), ""sudo "" + player + "" top""); player.setHealth(1); }  return true;  } "	0	0	0	0	1	0
"private void calculateRows(Stack<Segment> segments) { isVolatile = false;  for (Segment s : segments) { switch (s.getSegmentType()) { case NewLine: { //flush layoutLeader(); MarginProperties ret = new MarginProperties(leftMargin.getContent()+StringTools.fill(fcontext.getSpaceCharacter(), rdp.getTextIndent()), leftMargin.isSpaceOnly()); rows.add(createAndConfigureEmptyNewRow(ret)); break; } case Text: { TextSegment ts = (TextSegment)s; layoutAfterLeader( Translatable.text( fcontext.getConfiguration().isMarkingCapitalLetters()? ts.getText():ts.getText().toLowerCase() ). locale(ts.getTextProperties().getLocale()). hyphenate(ts.getTextProperties().isHyphenating()). attributes(ts.getTextAttribute()).build(), ts.getTextProperties().getTranslationMode()); break; } case Leader: { if (currentLeader!=null) { layoutLeader(); } currentLeader= (Leader)s; break; } case Reference: { isVolatile = true; PageNumberReferenceSegment rs = (PageNumberReferenceSegment)s; Integer page = null; if (refs!=null) { page = refs.getPageNumber(rs.getRefId()); } //TODO: translate references using custom language? if (page==null) { layoutAfterLeader(Translatable.text(""??"").locale(null).build(), null); } else { String txt = """" + rs.getNumeralStyle().format(page); layoutAfterLeader(Translatable.text( fcontext.getConfiguration().isMarkingCapitalLetters()?txt:txt.toLowerCase() ).locale(null).build(), null); } break; } case Evaluate: { isVolatile = true; Evaluate e = (Evaluate)s; String txt = e.getExpression().render(context); layoutAfterLeader( Translatable.text(fcontext.getConfiguration().isMarkingCapitalLetters()?txt:txt.toLowerCase()). locale(e.getTextProperties().getLocale()). hyphenate(e.getTextProperties().isHyphenating()). attributes(e.getTextAttribute(txt.length())). build(), null); break; } case Marker: { Marker m = (Marker)s; applyAfterLeader(m); break; } case Anchor: { AnchorSegment as = (AnchorSegment)s; applyAfterLeader(as); break; } } }  if (currentLeader!=null || item!=null) { layoutLeader(); } if (rows.size()>0) { rows.get(0).addAnchors(0, groupAnchors); groupAnchors.clear(); rows.get(0).addMarkers(0, groupMarkers); groupMarkers.clear(); if (rdp.getUnderlineStyle() != null) { int minLeft = flowWidth; int minRight = flowWidth; for (RowImpl r : rows) { int width = r.getChars().length(); int left = r.getLeftMargin().getContent().length(); int right = r.getRightMargin().getContent().length(); int space = flowWidth - width - left - right; left += r.getAlignment().getOffset(space); right = flowWidth - width - left; minLeft = min(minLeft, left); minRight = min(minRight, right); } if (minLeft < leftMargin.getContent().length() || minRight < rightMargin.getContent().length()) { throw new RuntimeException(""coding error""); } rows.add(new RowImpl(StringTools.fill(fcontext.getSpaceCharacter(), minLeft - leftMargin.getContent().length()) + StringTools.fill(rdp.getUnderlineStyle(), flowWidth - minLeft - minRight), leftMargin, rightMargin)); } } } "	0	0	0	0	0	1
@Override public void onBackPressed() { new HostCloseConnectionDialog(this, castHelper).show(getFragmentManager(), TAG); } 	0	0	1	1	1	0
"@Override public boolean onTouchEvent(MotionEvent event) { //sDebugger.i(""onTouchEvent"", event.toString()); //sDebugger.i(""onTouchEvent"", ""------> mDispatchToAlertWindow = "" + mDispatchToAlertWindow +"" ,mIsDragState = "" + mIsDragState); mCancelled = event.getAction() == MotionEvent.ACTION_CANCEL || event.getAction() == MotionEvent.ACTION_UP; final boolean handled = mGestureDetector.onTouchEvent(event); //解决ScrollView嵌套DragFlowLayout时，引起的事件冲突 if(getParent()!=null){ getParent().requestDisallowInterceptTouchEvent(true); } if(mDispatchToAlertWindow){ mWindomHelper.getView().dispatchTouchEvent(event); if(mCancelled){ mDispatchToAlertWindow = false; } } return handled; } "	0	0	0	0	1	0
"@Override public void readFromJson(JsonObject json, JsonDeserializationContext context) { this.amountPerChunk = json.get(""amount_per_chunk"").getAsInt(); this.maxRadius = json.get(""max_radius"").getAsInt(); this.state = GeneratorUtils.deserializeStateNonNull(json, ""state"", context); this.replacedStates = context.deserialize(json.get(""replaced_states""), IBlockState.class); } "	0	0	0	0	1	0
"public void loadConfigs() { // Now grab the Configuration Files. this.multiverseConfig = YamlConfiguration.loadConfiguration(new File(getDataFolder(), ""config.yml"")); Configuration coreDefaults = YamlConfiguration.loadConfiguration(this.getClass().getResourceAsStream(""/defaults/config.yml"")); this.multiverseConfig.setDefaults(coreDefaults); this.multiverseConfig.options().copyDefaults(true); this.worldManager.loadWorldConfig(new File(getDataFolder(), ""worlds.yml""));  // Setup the Debug option, we'll default to false because this option will not be in the default config. GlobalDebug = this.multiverseConfig.getInt(""debug"", 0); // Lets cache these values due to the fact that they will be accessed many times. EnforceAccess = this.multiverseConfig.getBoolean(""enforceaccess"", false); EnforceGameModes = this.multiverseConfig.getBoolean(""enforcegamemodes"", true); PrefixChat = this.multiverseConfig.getBoolean(""worldnameprefix"", true); BedRespawn = this.multiverseConfig.getBoolean(""bedrespawn"", true); this.messaging = new MVMessaging(this); this.messaging.setCooldown(this.multiverseConfig.getInt(""messagecooldown"", 5000)); this.saveMVConfigs(); } "	0	0	1	0	1	0
@Override public int getDistance(ClusteringStringItem otherItem) { // TODO Auto-generated method stub return LevenshteinDistance.getLevenshteinDistanceDelimitedString(this.stringValue, otherItem.getStringValue()); } 	1	0	0	0	1	0
"@Override public void execute() throws MojoExecutionException, MojoFailureException { final Cobertura cobertura = new Cobertura(buildCheckArguments()); cobertura.checkThresholds(); final CoverageThresholdsReport coverageThresholdsReport = (CoverageThresholdsReport) cobertura.report() .getByName(ReportName.THRESHOLDS_REPORT); Boolean foundError = false; for (final CoverageResultEntry coverageResultEntry : coverageThresholdsReport.getCoverageResultEntries()) { if (coverageResultEntry.isBelowExpectedCoverage()) { getLog().warn(buildWarningMessage(coverageResultEntry)); foundError = true; } } if (foundError) { throw new MojoFailureException(this, ""Coverage is insufficient"", ""One or more coverage types are below expected thresholds.""); } } "	0	0	0	0	1	0
"protected String signJWTWithRSA(JWTClaimsSet jwtClaimsSet, OAuthAuthzReqMessageContext request) throws IdentityOAuth2Exception { try {  String tenantDomain = request.getAuthorizationReqDTO().getUser().getTenantDomain();  int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);  Key privateKey;  if (!(privateKeys.containsKey(tenantId))) { // get tenant's key store manager KeyStoreManager tenantKSM = KeyStoreManager.getInstance(tenantId);  if (!tenantDomain.equals(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME)) { // derive key store name String ksName = tenantDomain.trim().replace(""."", ""-""); String jksName = ksName + "".jks""; // obtain private key privateKey = tenantKSM.getPrivateKey(jksName, tenantDomain);  } else { try { privateKey = tenantKSM.getDefaultPrivateKey(); } catch (Exception e) { throw new IdentityOAuth2Exception(""Error while obtaining private key for super tenant"", e); } } //privateKey will not be null always privateKeys.put(tenantId, privateKey); } else { //privateKey will not be null because containsKey() true says given key is exist and ConcurrentHashMap // does not allow to store null values privateKey = privateKeys.get(tenantId); } JWSSigner signer = new RSASSASigner((RSAPrivateKey) privateKey); SignedJWT signedJWT = new SignedJWT(new JWSHeader((JWSAlgorithm) signatureAlgorithm), jwtClaimsSet); signedJWT.sign(signer); return signedJWT.serialize(); } catch (JOSEException e) { throw new IdentityOAuth2Exception(""Error occurred while signing JWT"", e); } } "	0	0	0	0	1	0
public JTextArea getAdditionalCssTextArea() { return additionalCssTextArea; } 	0	0	0	0	1	0
@Override public int getIndex(ShapePoints points) { points.ensureDistTraveled();  int index = 0;  /** * Use index hints when available */ if (_fromIndex < 0 || _toIndex < 0) index = Arrays.binarySearch(points.getDistTraveled(), _shapeDistanceTraveled); else index = Arrays.binarySearch(points.getDistTraveled(), _fromIndex, _toIndex, _shapeDistanceTraveled);  if (index < 0) index = -(index + 1); return index; } 	1	0	1	1	1	0
@Override public void onPrepared(MediaPlayer mp) { mVideoView.start(); ibCaptureVideo.setVisibility(View.INVISIBLE); } 	0	0	0	0	0	1
private void setupViewPager() { mMediaPagerAdapter = new MediaPagerAdapter(getActivity()); mVpMedia.setAdapter(mMediaPagerAdapter); mCircleIndicator = new CircleIndicator(mViewPagerCountDots, mVpMedia); } 	0	0	0	0	1	0
public final boolean loadFromProfile(UserProfile profile) { if (!profile.isCompatible(getSettings().getTitle(), getSettings().getVersion())) return false;  getEventBus().fireEvent(new LoadEvent(profile)); return true; } 	0	0	0	0	1	0
"protected MenuBox createOptionsMenu() { MenuItem itemControls = new MenuItem(""CONTROLS""); itemControls.setMenuContent(this::createContentControls);  MenuItem itemVideo = new MenuItem(""VIDEO""); itemVideo.setMenuContent(this::createContentVideo); MenuItem itemAudio = new MenuItem(""AUDIO""); itemAudio.setMenuContent(this::createContentAudio);  MenuItem btnRestore = new MenuItem(""RESTORE""); btnRestore.setOnAction(e -> { app.getDisplay().showConfirmationBox(""Settings will be restored to default"", yes -> { if (yes) app.loadFromDefaultProfile(); }); });  return new MenuBox(200, itemControls, itemVideo, itemAudio, btnRestore); } "	0	0	0	0	1	0
public boolean contains(Word w) { return start.value <= w.value && w.value < endExclusive.value; } 	0	0	0	0	1	0
private void stopCamera() { stopCameraPreview(); camera.release(); } 	0	0	0	0	0	1
public boolean addAll(Collection collection){ return this.addAll(collection); } 	0	0	1	0	1	0
"public static String readFromSDFile(String filename) { String aBuffer = """"; try { File myFile = new File(Environment.getExternalStorageDirectory() + ""/Snapprefs/"" + filename + "".txt""); FileInputStream fIn = new FileInputStream(myFile); BufferedReader myReader = new BufferedReader( new InputStreamReader(fIn)); String aDataRow = """";  while ((aDataRow = myReader.readLine()) != null) { aBuffer += aDataRow + ""\n""; } myReader.close(); } catch (Exception e) { Logger.log(""FileUtils: File SDread failed: "" + e.toString()); } return aBuffer; } "	0	0	0	0	1	0
"private String generateBody(Requisition requisition) { StringWriter out = new StringWriter(); Map dataModel = ImmutableMap.of(""requisition"", requisition, ""orderedDateTime"", requisition.getOrderedDateTime().format(formatter), ""fulfillmentUrl"", domainUrl + ""/supply/manage/fulfillment""); try { Template emailTemplate = freemarkerCfg.getTemplate(template); emailTemplate.process(dataModel, out); } catch (IOException | TemplateException e) { throw new EssTemplateException(template, e); } return out.toString(); } "	0	0	0	0	0	1
"private HttpURLConnection setupCall(boolean authRequired) throws IOException, JsonClientException { HttpURLConnection conn = (HttpURLConnection) serviceUrl.openConnection(); conn.setConnectTimeout(10000); if (connectionReadTimeOut != null) { conn.setReadTimeout(connectionReadTimeOut); } conn.setDoOutput(true); conn.setRequestMethod(""POST""); if (authRequired || accessToken != null) { if (!(conn instanceof HttpsURLConnection || allowInsecureHttp)) { throw new UnauthorizedException(""RPC method required authentication shouldn't "" + ""be called through unsecured http, use https instead or call "" + ""setAuthAllowedForHttp(true) for your client""); } if (accessToken == null || accessToken.isExpired()) { if (user == null) { if (accessToken == null) { throw new UnauthorizedException(""RPC method requires authentication but neither "" + ""user nor token was set""); } else { throw new UnauthorizedException(""Token is expired and can not be reloaded "" + ""because user wasn't set""); } } accessToken = requestTokenFromKBase(user, password); } conn.setRequestProperty(""Authorization"", accessToken.toString()); } if (conn instanceof HttpsURLConnection && trustAllCerts) { final HttpsURLConnection hc = (HttpsURLConnection) conn; final SSLContext sc; try { sc = SSLContext.getInstance(""SSL""); } catch (NoSuchAlgorithmException e) { throw new RuntimeException( ""Couldn't get SSLContext instance"", e); } try { sc.init(null, GULLIBLE_TRUST_MGR, new SecureRandom()); } catch (KeyManagementException e) { throw new RuntimeException( ""Couldn't initialize SSLContext"", e); } hc.setSSLSocketFactory(sc.getSocketFactory()); hc.setHostnameVerifier(GULLIBLE_HOSTNAME_VERIFIER); } return conn; } "	0	0	0	0	0	1
public Vector2D normalize(Vector2D vector) { return new Vector2D(vector.scale(1/vector.length())); } 	0	0	0	1	0	0
@Override protected AppInstanceStatusResource instantiateResource(AppInstanceStatus entity) { return new AppInstanceStatusResource(entity.getId(), entity.getState().name(), entity.getAttributes()); } 	0	0	0	0	1	0
"@Override public void onClick(View v) { switch (v.getId()) { case R.id.status: activity.showDialog(""statusPicker"", new StatusPickerDialogFragment()); break; case R.id.progress1: if (activity.isAnime()) { Bundle args = bundle(R.id.progress1, R.string.dialog_title_watched_update); args.putInt(""current"", activity.animeRecord.getWatchedEpisodes()); args.putInt(""max"", activity.animeRecord.getEpisodes()); activity.showDialog(""episodes"", new NumberPickerDialogFragment().setOnSendClickListener(activity), args); break; } case R.id.progress2: activity.showDialog(""manga"", new MangaPickerDialogFragment()); break; case R.id.startDatePanel: Bundle args1 = new Bundle(); args1.putBoolean(""startDate"", true); args1.putString(""current"", activity.isAnime() ? activity.animeRecord.getWatchingStart() : activity.mangaRecord.getReadingStart()); activity.showDialog(""startDate"", new DatePickerDialogFragment(), args1); break; case R.id.endDatePanel: Bundle args2 = new Bundle(); args2.putBoolean(""startDate"", false); args2.putString(""current"", activity.isAnime() ? activity.animeRecord.getWatchingEnd() : activity.mangaRecord.getReadingEnd()); activity.showDialog(""endDate"", new DatePickerDialogFragment(), args2); break; case R.id.scorePanel: Bundle args3 = bundle(R.id.scorePanel, R.string.dialog_title_rating); args3.putInt(""current"", activity.isAnime() ? activity.animeRecord.getScore() : activity.mangaRecord.getScore()); args3.putInt(""max"", PrefManager.getScoreType() == 3 ? 5 : 10); activity.showDialog(""rating"", new NumberPickerDialogFragment().setOnSendClickListener(activity), args3); break; case R.id.priorityPanel: Bundle args4 = bundle(R.id.priorityPanel, R.string.card_content_my_priority); args4.putInt(""current"", activity.isAnime() ? activity.animeRecord.getPriority() : activity.mangaRecord.getPriority()); args4.putInt(""stringArray"", R.array.priorityArray); args4.putInt(""intArray"", R.array.id); activity.showDialog(""priority"", new ListDialogFragment().setOnSendClickListener(activity), args4); break; case R.id.tagsPanel: Bundle args5 = bundle(R.id.tagsPanel, R.string.dialog_title_tags); args5.putBoolean(""BBCode"", false); args5.putString(""message"", activity.isAnime() ? activity.animeRecord.getPersonalTagsString() : activity.mangaRecord.getPersonalTagsString()); args5.putString(""hint"", getString(R.string.dialog_hint_tags)); activity.showDialog(""tags"", new MessageDialogFragment().setOnSendClickListener(activity), args5); break; case R.id.commentspanel: Bundle args6 = bundle(R.id.commentspanel, R.string.dialog_title_comment); args6.putBoolean(""BBCode"", false); args6.putString(""message"", activity.isAnime() ? activity.animeRecord.getPersonalComments() : activity.mangaRecord.getPersonalComments()); args6.putString(""hint"", getString(R.string.dialog_hint_comment)); activity.showDialog(""tags"", new MessageDialogFragment().setOnSendClickListener(activity), args6); break; case R.id.fansubPanel: Bundle args7 = bundle(R.id.fansubPanel, R.string.dialog_title_fansub); args7.putBoolean(""BBCode"", false); args7.putString(""message"", activity.animeRecord.getFansubGroup()); args7.putString(""hint"", getString(R.string.dialog_hint_fansub)); activity.showDialog(""tags"", new MessageDialogFragment().setOnSendClickListener(activity), args7); break; case R.id.storagePanel: Bundle args8 = bundle(R.id.storagePanel, R.string.dialog_title_storage); args8.putInt(""current"", activity.animeRecord.getStorage()); args8.putInt(""stringArray"", R.array.storageArray); args8.putInt(""intArray"", R.array.id); activity.showDialog(""storage"", new ListDialogFragment().setOnSendClickListener(activity), args8); break; case R.id.capacityPanel: Bundle args9 = bundle(R.id.capacityPanel, R.string.dialog_title_storage_value); args9.putInt(""current"", activity.animeRecord.getStorageValue()); args9.putInt(""max"", 10); activity.showDialog(""storagevalue"", new NumberPickerDialogFragment().setOnSendClickListener(activity), args9); break; case R.id.downloadPanel: Bundle args10 = bundle(R.id.downloadPanel, R.string.dialog_title_downloaded); args10.putInt(""current"", activity.animeRecord.getEpsDownloaded()); args10.putInt(""max"", activity.animeRecord.getEpisodes()); activity.showDialog(""storagevalue"", new NumberPickerDialogFragment().setOnSendClickListener(activity), args10); break; case R.id.rewatchPriorityPanel: Bundle args11 = bundle(R.id.rewatchPriorityPanel, R.string.dialog_title_rewatched_priority); args11.putInt(""current"", activity.isAnime() ? activity.animeRecord.getRewatchValue() : activity.mangaRecord.getRereadValue()); args11.putInt(""stringArray"", R.array.priorityRewatchArray); args11.putInt(""intArray"", R.array.id); activity.showDialog(""rewatchPriority"", new ListDialogFragment().setOnSendClickListener(activity), args11); break; case R.id.countPanel: Bundle args12 = bundle(R.id.countPanel, R.string.dialog_title_rewatched_times); args12.putInt(""current"", activity.isAnime() ? activity.animeRecord.getRewatchCount() : activity.mangaRecord.getRereadCount()); args12.putInt(""max"", 0); // will be set to 999 in the dialog activity.showDialog(""storagevalue"", new NumberPickerDialogFragment().setOnSendClickListener(activity), args12); break; } } "	0	0	0	0	0	1
"public void setText() { if (activity.isAdded()) status.setText(activity.getUserStatusString(activity.isAnime() ? activity.animeRecord.getWatchedStatusInt() : activity.mangaRecord.getReadStatusInt()));  if (activity.isAnime()) { progress1Current.setText(Integer.toString(activity.animeRecord.getWatchedEpisodes())); progress1Total.setText(nullCheckOf(activity.animeRecord.getEpisodes()));  myStartDate.setText(activity.nullCheck(activity.animeRecord.getWatchingStart())); myEndDate.setText(activity.nullCheck(activity.animeRecord.getWatchingEnd()));  myScore.setText(activity.nullCheck(Theme.getDisplayScore(activity.animeRecord.getScore()))); myStartDate.setText(activity.getDate(activity.animeRecord.getWatchingStart())); myEndDate.setText(activity.getDate(activity.animeRecord.getWatchingEnd())); myPriority.setText(getString(R.array.priorityArray, activity.animeRecord.getPriority())); myTags.setText(activity.animeRecord.getPersonalTagsString().equals("""") ? getString(R.string.card_content_none) : activity.animeRecord.getPersonalTagsString()); comments.setText(activity.nullCheck(activity.animeRecord.getPersonalComments()));  fansubs.setText(activity.nullCheck(activity.animeRecord.getFansubGroup())); storage.setText(getString(R.array.storageArray, activity.animeRecord.getStorage())); storageCount.setText(Integer.toString(activity.animeRecord.getStorageValue())); dowloaded.setText(activity.nullCheck(Integer.toString(activity.animeRecord.getEpsDownloaded())));  priority.setText(getString(R.array.priorityRewatchArray, activity.animeRecord.getRewatchValue())); rewatchCount2.setText(activity.nullCheck(activity.animeRecord.getRewatchCount()));  cardOther.findViewById(R.id.capacityPanel).setVisibility((activity.animeRecord.getStorage() == 0 || activity.animeRecord.getStorage() == 3) ? View.GONE : View.VISIBLE);  } else { progress1Current.setText(Integer.toString(activity.mangaRecord.getVolumesRead())); progress1Total.setText(nullCheckOf(activity.mangaRecord.getVolumes()));  progress2Current.setText(Integer.toString(activity.mangaRecord.getChaptersRead())); progress2Total.setText(nullCheckOf(activity.mangaRecord.getChapters()));  myStartDate.setText(activity.nullCheck(activity.mangaRecord.getReadingStart())); myEndDate.setText(activity.nullCheck(activity.mangaRecord.getReadingEnd()));  myScore.setText(activity.nullCheck(Theme.getDisplayScore(activity.mangaRecord.getScore()))); myStartDate.setText(activity.getDate(activity.mangaRecord.getReadingStart())); myEndDate.setText(activity.getDate(activity.mangaRecord.getReadingEnd())); myPriority.setText(getString(R.array.priorityArray, activity.mangaRecord.getPriority())); myTags.setText(activity.mangaRecord.getPersonalTagsString().equals("""") ? getString(R.string.card_content_none) : activity.mangaRecord.getPersonalTagsString()); comments.setText(activity.nullCheck(activity.mangaRecord.getPersonalComments()));  cardOther.setVisibility(View.GONE);  priority.setText(getString(R.array.priorityRewatchArray, activity.mangaRecord.getRereadValue() != 0 ? activity.mangaRecord.getRereadValue() - 1 : 0)); rewatchCount2.setText(activity.nullCheck(activity.mangaRecord.getRereadCount())); } setCard(); } "	0	0	0	0	0	1
"public static Anime fromCursor(Cursor c) { Anime result = new Anime(); result.setFromCursor(true); List<String> columnNames = Arrays.asList(c.getColumnNames()); result.setId(c.getInt(columnNames.indexOf(MALSqlHelper.COLUMN_ID))); result.setTitle(c.getString(columnNames.indexOf(""recordName""))); result.setType(c.getString(columnNames.indexOf(""recordType""))); result.setStatus(c.getString(columnNames.indexOf(""recordStatus""))); result.setWatchedStatus(c.getString(columnNames.indexOf(""myStatus"")), false); result.setWatchedEpisodes(c.getInt(columnNames.indexOf(""episodesWatched"")), false); result.setEpisodes(c.getInt(columnNames.indexOf(""episodesTotal""))); result.setWatchingStart(c.getString(columnNames.indexOf(""watchedStart"")), false); result.setStorage(c.getInt(columnNames.indexOf(""storage"")), false); result.setStorageValue(c.getInt(columnNames.indexOf(""storageValue"")), false); result.setWatchingEnd(c.getString(columnNames.indexOf(""watchedEnd"")), false); result.setMembersScore(c.getFloat(columnNames.indexOf(""memberScore""))); result.setScore(c.getInt(columnNames.indexOf(""myScore"")), false); result.setSynopsis(c.getString(columnNames.indexOf(""synopsis""))); result.setImageUrl(c.getString(columnNames.indexOf(""imageUrl""))); if (!c.isNull(columnNames.indexOf(""dirty""))) { result.setDirty(new Gson().fromJson(c.getString(columnNames.indexOf(""dirty"")), ArrayList.class)); } else { result.setDirty(null); } result.setClassification(c.getString(columnNames.indexOf(""classification""))); result.setMembersCount(c.getInt(columnNames.indexOf(""membersCount""))); result.setFavoritedCount(c.getInt(columnNames.indexOf(""favoritedCount""))); result.setPopularityRank(c.getInt(columnNames.indexOf(""popularityRank""))); result.setWatchingStart(c.getString(columnNames.indexOf(""watchedStart"")), false); result.setWatchingEnd(c.getString(columnNames.indexOf(""watchedEnd"")), false); result.setFansubGroup(c.getString(columnNames.indexOf(""fansub"")), false); result.setPriority(c.getInt(columnNames.indexOf(""priority"")), false); result.setEpsDownloaded(c.getInt(columnNames.indexOf(""downloaded"")), false); result.setRewatchCount(c.getInt(columnNames.indexOf(""rewatchCount"")), false); result.setRewatchValue(c.getInt(columnNames.indexOf(""rewatchValue"")), false); result.setRewatching(c.getInt(columnNames.indexOf(""rewatch"")) > 0, false); result.setPersonalComments(c.getString(columnNames.indexOf(""comments"")), false); result.setStartDate(c.getString(columnNames.indexOf(""startDate""))); result.setEndDate(c.getString(columnNames.indexOf(""endDate""))); result.setRank(c.getInt(columnNames.indexOf(""rank""))); result.setListedId(c.getInt(columnNames.indexOf(""listedId""))); Date lastUpdateDate; try { long lastUpdate = c.getLong(columnNames.indexOf(""lastUpdate"")); lastUpdateDate = new Date(lastUpdate); } catch (Exception e) { // database entry was null lastUpdateDate = null; } result.setLastUpdate(lastUpdateDate); return result; } "	0	0	0	0	0	1
"public void getFollowStatus(final User user, final FollowStatusCallback callback) { APIManager.getInstance().isFollowing(user, new APICallback<Boolean>() { @Override public void onSuccess(Boolean responseBody) { callback.onResponseReceived(responseBody); }  @Override public void onFailure(String message) { callback.onResponseReceived(false); Log.d(LOG_TAG, ""Failed to get following status""); } }); } "	0	0	0	0	0	1
"@Override public void update(Observable o, Object arg) { if (file.exists()) { String text = file.getDateForLastEdited(); lastSaved.setText(""Lased saved: "" + text); String path = file.getPath(); filePath.setText(""Path: "" + path); } else { filePath.setText(""""); lastSaved.setText(""Not saved""); }  } "	0	0	1	0	1	0
private int pop(byte direct) throws IllegalStateException { setDirectAddress(direct, _pop(true)); return 2; } 	0	0	0	0	1	0
private void fixPosition() { if(this.currentRoom == null) { return; }  if(cameraFixing) { RoomMap map = currentRoom.getMap().getReference(); float rmX = map.getSizeX() * 20;       // room's width float rmY = map.getSizeY() * 20;       // room's height float cvX = Math.abs(camera.zoom) * camera.viewportWidth / 2.0F;  // half of camera's view width float cvY = Math.abs(camera.zoom) * camera.viewportHeight / 2.0F; // half of camera's view height float xPos = camera.position.x; float yPos = camera.position.y;  if(cvX * 2 >= rmX) { xPos = rmX / 2.0F; } else { if(xPos < cvX) { xPos = cvX; } else if(xPos > rmX - cvX) { xPos = rmX - cvX; } }  if(cvY * 2 >= rmY) { yPos = rmY / 2.0F; } else { if(yPos < cvY) { yPos = cvY; } else if(yPos > rmY - cvY) { yPos = rmY - cvY; } }  camera.position.set(xPos, yPos, 0); } } 	0	0	0	0	1	0
private long getPositionTag(String tag, UserKey accountKey) { final long position = mReadStateManager.getPosition(Utils.getReadPositionTagWithAccounts(tag, accountKey)); if (position != -1) return position; return mReadStateManager.getPosition(tag); } 	0	0	0	0	0	1
"@Override public void onReceive(Context context, Intent intent) { final String action = intent.getAction(); if (action == null) return; switch (action) { case BROADCAST_NOTIFICATION_DELETED: { final Uri uri = intent.getData(); if (uri == null) return; DependencyHolder holder = DependencyHolder.get(context); @NotificationType final String notificationType = uri.getQueryParameter(QUERY_PARAM_NOTIFICATION_TYPE); final UserKey accountKey = UserKey.valueOf(uri.getQueryParameter(QUERY_PARAM_ACCOUNT_KEY)); final long itemId = NumberUtils.toLong(UriExtraUtils.getExtra(uri, ""item_id""), -1); final long itemUserId = NumberUtils.toLong(UriExtraUtils.getExtra(uri, ""item_user_id""), -1); final boolean itemUserFollowing = Boolean.parseBoolean(UriExtraUtils.getExtra(uri, ""item_user_following"")); final long timestamp = NumberUtils.toLong(uri.getQueryParameter(QUERY_PARAM_TIMESTAMP), -1); if (CustomTabType.NOTIFICATIONS_TIMELINE.equals(CustomTabUtils.getTabTypeAlias(notificationType)) && accountKey != null && itemId != -1 && timestamp != -1) { final HotMobiLogger logger = holder.getHotMobiLogger(); logger.log(accountKey, NotificationEvent.deleted(context, timestamp, notificationType, accountKey, itemId, itemUserId, itemUserFollowing)); } final ReadStateManager manager = holder.getReadStateManager(); final String paramReadPosition, paramReadPositions; @ReadPositionTag final String tag = getPositionTag(notificationType); if (tag != null && !TextUtils.isEmpty(paramReadPosition = uri.getQueryParameter(QUERY_PARAM_READ_POSITION))) { final long def = -1; manager.setPosition(Utils.getReadPositionTagWithAccounts(tag, accountKey), NumberUtils.toLong(paramReadPosition, def)); } else if (!TextUtils.isEmpty(paramReadPositions = uri.getQueryParameter(QUERY_PARAM_READ_POSITIONS))) { try { final StringLongPair[] pairs = StringLongPair.valuesOf(paramReadPositions); for (StringLongPair pair : pairs) { manager.setPosition(tag, pair.getKey(), pair.getValue()); } } catch (NumberFormatException ignore) {  } } break; } } } "	0	0	0	0	0	1
@Override public AllEntriesLabelScanReader allNodeLabelRanges() { IntFunction<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> seekProvider = labelId -> { try { return index.seek( new LabelScanKey().set( labelId, 0 ), new LabelScanKey().set( labelId, Long.MAX_VALUE ) ); } catch ( IOException e ) { throw new RuntimeException( e ); } };  int highestLabelId = -1; try ( RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException> cursor = index.seek( new LabelScanKey().set( Integer.MAX_VALUE, Long.MAX_VALUE ), new LabelScanKey().set( 0, 0 ) ) ) { if ( cursor.next() ) { highestLabelId = cursor.get().key().labelId; } } catch ( IOException e ) { throw new RuntimeException( e ); } return new NativeAllEntriesLabelScanReader( seekProvider, highestLabelId ); } 	0	0	1	1	0	0
protected boolean notifyReady() { return connectCloseSemaphorUpdater.compareAndSet(this, null, NOTIFICATION_INITIALIZED); } 	0	0	0	0	0	1
"public boolean validateSponsor(Sponsor sponsor) { boolean valid = true;  // ### Vivantech Fix : #87 / [#91531064] fix for the issue with Institutional Proposal with inactive sponsor not being editable if(!sponsor.isActive()) { GlobalVariables.getMessageMap().putWarning(""document"", KeyConstants.ERROR_INACTIVE_SPONSOR_CODE); }  if (sponsor == null) { valid = false; } return valid; } "	0	0	0	0	1	0
"private Fragment makeSearchFragment(int position) { boolean closed = position == 1; Map<String, String> filterData = new HashMap<>(); filterData.put(""sort"", mSortHelper.getSortMode()); filterData.put(""direction"", mSortHelper.getSortDirection()); filterData.put(""q"", String.format(Locale.US, SEARCH_QUERY, closed ? Constants.Issue.STATE_CLOSED : Constants.Issue.STATE_OPEN, mRepoOwner, mRepoName, mSearchQuery));  mSearchFragment = IssueListFragment.newInstance(filterData, closed, R.string.no_search_issues_found, false); return mSearchFragment; } "	0	0	0	0	1	0
@Override public String getRedoFeedbackMessageAndTransferToUndo() { assert (hasRedoHistory()); CommandHistoryEntry nextCommand = nextCommandHistory.pop(); String feedbackMessage = nextCommand.getFeedbackMessage(); previousCommandHistory.push(nextCommand); return feedbackMessage; } 	0	0	0	0	1	0
@Override public String getUndoFeedbackMessageAndTransferToRedo() { assert (hasUndoHistory()); CommandHistoryEntry previousCommand = previousCommandHistory.pop(); String feedbackMessage = previousCommand.getFeedbackMessageInReverseCommand(); nextCommandHistory.push(previousCommand); return feedbackMessage; } 	0	0	0	0	1	0
public DatabaseScheduleStoreManager getScheduleStoreManager() { return new DatabaseScheduleStoreManager(dbi, createConfigMapper(), config); } 	0	0	0	0	1	0
public DatabaseProjectStoreManager getProjectStoreManager() { return new DatabaseProjectStoreManager(dbi, createConfigMapper(), config); } 	0	0	0	0	1	0
public DatabaseSecretStoreManager getSecretStoreManager(String secret) { return new DatabaseSecretStoreManager(config, dbi, new AESGCMSecretCrypto(secret)); } 	0	0	0	0	1	0
"public static String getShortAddress(Location location, Context context) { String addressStr = """"; if (location != null) { try { Geocoder gc = new Geocoder(context, Locale.getDefault()); List<Address> addresses = gc.getFromLocation(location.getLatitude(), location.getLongitude(), 1); if (addresses.size() > 0) { Address address = addresses.get(0); addressStr = address.getLocality() + "","" + address.getAdminArea() + "" "" + address.getPostalCode(); } } catch (Exception e) { Log.d(TAG, ""Error getting address""); } } return addressStr; } "	0	0	0	0	1	0
@Override public boolean containsKey(@Nullable Object key) { return cache.contains((K)key) || map.containsKey(SliceUtils.concatenate(serdeKey.serialize((K)key), SIZE_KEY_SUFFIX).toByteArray()); } 	0	0	1	0	0	0
"private Map<SQLParser.Table_atomContext, DataSource> getTableAtoms(List<SQLParser.Join_clauseContext> joinClauseContexts) { return joinClauseContexts.stream() .map(jc -> { if (jc.inner_join_clause() != null) { return jc.inner_join_clause().table_atom(); } else if (jc.outer_join_clause() != null) { return jc.outer_join_clause().table_atom(); } else if (jc.natural_join_clause() != null) { return jc.natural_join_clause().table_atom(); } throw new ParseException(String.format(""Unknown join clause type: %s"", jc.getText())); }) .collect(Collectors.toMap(Function.identity(), this::processTableAtom)); } "	0	0	1	1	1	0
"@Test public void validateParsedOption() { // ACT subject.configure(spyValidator);  // ASSERT // option 1 assertTrue( ""option1 missing"", containsMatching(spyValidator.options(), o -> o.getPrimaryIdentifier().equals(""option1"")) ); // option 2 assertTrue( ""option2 missing or incorrect"", containsMatching(spyValidator.options(), o -> o.getPrimaryIdentifier().equals(""option2"") && o.isIdentifiedBy(""o2"")) ); // option 3 assertTrue( ""option3 missing or incorrect"", containsMatching(spyValidator.options(), o -> o.getPrimaryIdentifier().equals(""option3"") && o.allowsMultipleValues() && !o.isRequired() )); // option 4 assertTrue( ""option4 is missing or incorrect"", containsMatching(spyValidator.options(), o -> o.getPrimaryIdentifier().equals(""option4"") && o.isIdentifiedBy(""o4"") ) ); } "	0	0	0	0	0	1
public void clearReviewers() { this.reviewers = new ArrayList<>(); this.update(); } 	0	0	1	0	1	0
"public String evaluate(String script, String formatPattern, Locale locale, Map<String, Object> contextVariables) { Context context = Context.enter();  try { Scriptable scope = context.initStandardObjects();  // find all script libraries and add their scripts for (ScriptLibrary lib : scriptLibraries.values()) { lib.addFunctionsToContext(context, scope); }  // put context variables if (contextVariables != null) { for (Map.Entry<String, Object> entry : contextVariables.entrySet()) { scope.put(entry.getKey(), scope, entry.getValue() == null ? null : Context.toObject(entry.getValue(), scope)); } }  try { Object result = context.evaluateString(scope, script, ""<cmd>"", 1, null); if (result instanceof Undefined) { return null; } result = toJavaObject(result);  // apply time travel if (result instanceof Date && aludraConfig.getScriptSecondsOffset() != 0) { result = new Date(((Date) result).getTime() + aludraConfig.getScriptSecondsOffset() * 1000); }  // apply patterns, if required result = format(result, formatPattern, locale);  return result.toString(); } catch (RhinoException e) { throw new AutomationException(""Cannot evaluate test data script '"" + script + ""'"", e); } } finally { Context.exit(); } } "	0	0	0	1	1	0
"private List<TableColumn> continuousColumns() { List<TableColumn> columns = new ArrayList<TableColumn>(); columns.add(new TableColumn() .key(0).name(""Lower Bound"").type(""lowerBound"") .description(""The lower bound of the grouping (value range)."")); columns.add(new TableColumn() .key(1).name(""Upper Bound"").type(""upperBound"") .description(""The upper bound of the grouping (value range)."")); columns.add(new TableColumn() .key(2).name(""Area"").units(""m^2"").type(""area"") .portionOf(""rawArea"") .description(""The area of land that matches the filters."")); columns.add(new TableColumn() .key(3).name(""Unfiltered Area"").units(""m^2"") .type(""area"") .description(""The area of available land."")); return columns; } "	0	0	1	0	0	0
private static String getProxyValue(String key) { if (proxyMap != null && proxyMap.containsKey(key)) { return proxyMap.get(key); } return key; } 	0	0	0	1	0	0
"@Test public void testCompletion_method_withLSPV3() throws JavaModelException{  //Mock the preference manager to use LSP v3 support. ClientPreferences mockCapabilies = Mockito.mock(ClientPreferences.class); Mockito.when(preferenceManager.getClientPreferences()).thenReturn(mockCapabilies); Mockito.when(mockCapabilies.isCompletionSnippetsSupported()).thenReturn(Boolean.TRUE); Mockito.when(mockCapabilies.isSignatureHelpSupported()).thenReturn(Boolean.TRUE);   ICompilationUnit unit = getWorkingCopy( ""src/java/Foo.java"", ""public class Foo {\n""+ ""	void foo() {\n""+ ""System.out.print(\""Hello\"");\n"" + ""System.out.println(\"" World!\"");\n""+ ""HashMap<String, String> map = new HashMap<>();\n""+ ""map.pu\n"" + ""	}\n""+ ""}\n"");  int[] loc = findCompletionLocation(unit, ""map.pu"");   CompletionList list = server.completion(JsonMessageHelper.getParams(createCompletionRequest(unit, loc[0], loc[1]))).join().getRight(); assertNotNull(list); CompletionItem ci = list.getItems().stream() .filter( item->  item.getLabel().matches(""put\\(String \\w+, String \\w+\\) : String"")) .findFirst().orElse(null); assertNotNull(ci);  assertNull(ci.getInsertText()); assertEquals(CompletionItemKind.Function, ci.getKind()); assertTrue(""Unexpected sortText:""+ ci.getSortText() , ci.getSortText().endsWith(""abj"")); assertNull(ci.getTextEdit());  CompletionItem resolvedItem = server.resolveCompletionItem(ci).join(); assertNotNull(resolvedItem.getTextEdit()); try { assertTextEdit(5, 4, 6, ""put(${1:key}, ${2:value})"", resolvedItem.getTextEdit()); } catch (ComparisonFailure e) { //In case the JDK has no sources assertTextEdit(5, 4, 6, ""put(${1:arg1}, ${2:arg2})"", resolvedItem.getTextEdit()); } assertNotNull(resolvedItem.getAdditionalTextEdits()); List<TextEdit> edits = resolvedItem.getAdditionalTextEdits(); assertEquals(3, edits.size()); } "	0	0	0	0	0	1
public RemainingNumberOfHoldiay getRemainingHolidays() { return remainingNumberOfHolidays; } 	0	0	1	0	0	0
"@Override public String getStatus() { String color = ""\u00a74""; String status = LanguageUtility.getLocal(""gui.misc.idle"");  if (this.laucherBase == null) { status = LanguageUtility.getLocal(""gui.launcherScreen.statusMissing""); } else if (!checkExtract()) { status = LanguageUtility.getLocal(""gui.launcherScreen.statusNoPower""); } else if (this.laucherBase.getStackInSlot(0) == null && !hasMissile) { status = LanguageUtility.getLocal(""gui.launcherScreen.statusEmpty""); } else if (this.getTarget() == null) { status = LanguageUtility.getLocal(""gui.launcherScreen.statusInvalid""); } else if (this.laucherBase.isTargetTooClose(this.getTarget())) { status = LanguageUtility.getLocal(""gui.launcherScreen.statusClose""); } else if (this.laucherBase.isTargetTooFar(this.getTarget())) { status = LanguageUtility.getLocal(""gui.launcherScreen.statusFar""); } else { color = ""\u00a72""; status = LanguageUtility.getLocal(""gui.launcherScreen.statusReady""); }  return color + status; } "	0	0	0	0	0	1
"@Test(dataProvider = ""getIndexesOfRelevantAllelesData"") public void testGetIndexesOfRelevantAlleles(final int allelesIndex, final List<Allele> allAlleles) { final List<Allele> myAlleles = new ArrayList<>(3);  // always add the reference and <ALT> alleles myAlleles.add(allAlleles.get(0)); myAlleles.add(GATKVariantContextUtils.NON_REF_SYMBOLIC_ALLELE); // optionally add another alternate allele if ( allelesIndex > 0 ) myAlleles.add(allAlleles.get(allelesIndex));  final int[] indexes = GATKVariantContextUtils.getIndexesOfRelevantAlleles(myAlleles, allAlleles);  Assert.assertEquals(indexes.length, allAlleles.size());  for ( int i = 0; i < allAlleles.size(); i++ ) { if ( i == 0 ) Assert.assertEquals(indexes[i], 0);    // ref should always match else if ( i == allelesIndex ) Assert.assertEquals(indexes[i], 2);    // allele else Assert.assertEquals(indexes[i], 1);    // <ALT> } } "	1	0	1	1	1	0
"@Subscribe public void onActionEvent(ActionEvent event) { switch (event.getActionId()) { case R.id.action_clear: { realm.executeTransaction(tRealm -> srcList.getListItems().clear()); break; } case R.id.action_open_query_builder: { QueryBuilderActivity.start(this, smartListRuq); break; } case R.id.action_rename_list: case R.id.action_rename_smart_list: { ActionHelper.renameList(realm, srcList, (String) event.getData()); setTitle((String) event.getData()); // Update intent used to start activity so that we don't crash if we rotate or something. getIntent().putExtra(LIST_NAME, (String) event.getData()); //needsPosUpdate = true; break; } case R.id.action_convert_to_normal_list: { if (smartListRuq != null) { srcList.convertToNormalListUsingRuq(realm, smartListRuq); smartListRuq = null; // Refresh options menu, then update the UI. invalidateOptionsMenu(); updateUi(); needsPosUpdate = true; } break; } case R.id.action_delete_list: case R.id.action_delete_smart_list: { // Delete the list currently being shown, then finish the activity. ActionHelper.deleteList(realm, srcList); finish(); break; } case R.id.action_rate: { ActionHelper.rateBooks(realm, getSelectedBooks(), (Integer) event.getData()); break; } case R.id.action_add_to_list: { // TODO actually implement a move/copy to other lists feature??? //RBookList list = realm.where(RBookList.class).equalTo(""name"", (String) event.getData()).findFirst(); //RBookList.addBooks(list, selectedItems); break; } case R.id.action_re_import: { ActionHelper.reImportBooks(getSelectedBooks(), this); // Don't dismiss action mode yet. return; } case R.id.action_remove: { srcList.removeBooks(getSelectedBooks()); break; } case R.id.action_delete: { ActionHelper.deleteBooks(getSelectedBooks(), (boolean) event.getData()); break; } } if (actionMode != null) actionMode.finish(); } "	0	0	0	0	0	1
private static Collection<Unit> getUnits(final IntegerMap<UnitType> units, final Territory from) { final Iterator<UnitType> iter = units.keySet().iterator(); final Collection<Unit> rVal = new ArrayList<Unit>(units.totalValues()); while (iter.hasNext()) { final UnitType type = iter.next(); rVal.addAll(from.getUnits().getUnits(type, units.getInt(type))); } return rVal; } 	0	0	0	1	0	0
"private void setGamePlaySequenceMapToDefault() { MapXmlHelper.clearGamePlaySequence(); MapXmlHelper.getGamePlaySequenceMap().put(""bid"", Arrays.asList(""BidPurchaseDelegate"", ""Bid Purchase"")); MapXmlHelper.getGamePlaySequenceMap().put(""placeBid"", Arrays.asList(""BidPlaceDelegate"", ""Bid Placement"")); MapXmlHelper.getGamePlaySequenceMap().put(""tech"", Arrays.asList(""TechnologyDelegate"", ""Research Technology"")); MapXmlHelper.getGamePlaySequenceMap().put(""tech_Activation"", Arrays.asList(""TechActivationDelegate"", ""Activate Technology"")); MapXmlHelper.getGamePlaySequenceMap().put(""purchase"", Arrays.asList(""PurchaseDelegate"", ""Purchase Units"")); MapXmlHelper.getGamePlaySequenceMap().put(""move"", Arrays.asList(""MoveDelegate"", ""Combat Move"")); MapXmlHelper.getGamePlaySequenceMap().put(""battle"", Arrays.asList(""BattleDelegate"", ""Combat"")); MapXmlHelper.getGamePlaySequenceMap().put(""place"", Arrays.asList(""PlaceDelegate"", ""Place Units"")); MapXmlHelper.getGamePlaySequenceMap().put(""endTurn"", Arrays.asList(""BidPurchaseDelegate"", ""Turn Complete"")); } "	0	0	0	0	0	1
private boolean valid(String str) { return str != null && str.length() > 0; } 	0	0	1	0	1	0
private void addTasksToPQ(Queue<Task> tasksQueue, List<Task> tasks) { Calendar currentDate = new GregorianCalendar();  for (Task t : tasks) { GregorianCalendar reminder = t.getReminder();  if (!t.isDone() && reminder != null && reminder.before(currentDate)) { tasksQueue.add(t); } } } 	0	0	1	0	0	0
"@SuppressWarnings(""StatementWithEmptyBody"") @Override public boolean onNavigationItemSelected(MenuItem item) { // Handle navigation view item clicks here. int id = item.getItemId(); Intent goToActivity = null; switch (id) { case R.id.nav_home: goToActivity = new Intent(getApplicationContext(), MainActivity.class); break; case R.id.nav_rewards: goToActivity = new Intent(getApplicationContext(), RewardsActivity.class); break; case R.id.nav_appliances: goToActivity = new Intent(getApplicationContext(), AppliancesActivity.class); break; case R.id.nav_profile: if(UserInfo.getInstance().getIsLoggedIn() || UserInfo.getInstance().isGoogleLoggedIn()) { goToActivity = new Intent(getApplicationContext(), ProfileActivity.class); } else { goToActivity = new Intent(getApplicationContext(), LogInActivity.class); } break; case R.id.nav_reminder: goToActivity = new Intent(getApplicationContext(), ReminderActivity.class); break; case R.id.nav_detection: goToActivity = new Intent(getApplicationContext(), DetectionBaseActivity.class); break; case R.id.nav_settings: goToActivity = new Intent(getApplicationContext(), SettingsActivity.class); break; case R.id.nav_header_main_logout: if(UserInfo.getInstance().getIsLoggedIn()) { UserInfo.getInstance().logOutUser(ProfileActivity.this); } else if(UserInfo.getInstance().isGoogleLoggedIn()){ UserInfo.getInstance().signOutWithGoogle(); } break; default: break; }  if (goToActivity != null){ startActivity(goToActivity); overridePendingTransition(0, 0); }   DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout); drawer.closeDrawer(GravityCompat.START); return true; } "	0	0	1	0	0	0
private RoomNotification buildRoomNotification(AlertCondition condition, AlertCondition.CheckResult alert) { final String message = this.buildBody(condition, alert); return new RoomNotification(message, color, notify); } 	0	0	0	0	0	1
private String buildBody(AlertCondition condition, AlertCondition.CheckResult alert) { String template; if (invalidTemplate(this.messageTemplate)) { template = FormattedEmailAlertSender.bodyTemplate; } else { template = this.messageTemplate; } Map<String, Object> model = this.getModel(condition, alert); return this.engine.transform(template, model); } 	0	0	0	0	0	1
"private Map<String, Object> getModel(AlertCondition condition, AlertCondition.CheckResult alert) { Stream stream = condition.getStream(); List<Message> messages = new ArrayList<>(); for (MessageSummary messageSummary : alert.getMatchingMessages()) { messages.add(messageSummary.getRawMessage()); } HashMap<String, Object> model = new HashMap<>(); model.put(""stream"", stream); model.put(""check_result"", alert); if (graylogBaseUrl != null) { model.put(""stream_url"", buildStreamDetailsURL(graylogBaseUrl, alert, stream)); } model.put(""backlog"", messages); model.put(""backlog_size"", messages.size()); return model; } "	0	0	0	0	0	1
"@FXML private void handleButtonAction(ActionEvent e) { String value = ((Button) e.getSource()).getText(); String[] digits = {""0"", ""1"", ""2"",  ""3"",  ""4"", ""5"", ""6"", ""7"", ""8"", ""9""}; String[] operators = {""/"", ""+"", ""-"", ""*""}; if (value.equals(""=EGGYELLŐ="") && number2 != """"){ String toTextField = String.valueOf(handleCalculation(number1, number2, operator)); TextField.setText(toTextField); number1 = toTextField; number2 = """"; isDecimalNum1 = true; isDecimalNum2 = true; } if (value.equals(""C"") ){ number1 = """"; number2 = """"; operator = """"; TextField.setText(""""); isDecimalNum1 = true; isDecimalNum2 = true; } if (Arrays.asList(operators).contains(value) && !number1.equals("""") ){ operator = value; TextField.setText(number1 + operator); } if (Arrays.asList(digits).contains(value) && operator != """" ){ number2 += value; TextField.setText(number1 + operator + number2); } if (Arrays.asList(digits).contains(value) && operator == """" ){ number1 += value; TextField.setText(number1); } if (value.equals(""."") && isDecimalNum1 == true && operator == """" ) { number1 += value; isDecimalNum1 = false; TextField.setText(number1); } if (value.equals(""."") && isDecimalNum2 == true && operator != """" ) { number2 += value; isDecimalNum2 = false; TextField.setText(number1 + operator + number2); } } "	0	0	1	1	1	0
public void audioPermissionGranted(boolean granted) { if (mDecibelSensorCardPresenter == null) { return; } if (granted) { startObserving(DecibelSensor.ID, mDecibelSensorCardPresenter); } else { // If the sensor can't be loaded, still show it as selected on the card // so the user understands that they wanted this sensor but can't use it. mDecibelSensorCardPresenter.setConnectingUI(DecibelSensor.ID, true, getActivity().getApplicationContext()); } // in either case, we have our answer.  Stop waiting for it. mDecibelSensorCardPresenter = null; updateAvailableSensors(); } 	0	0	0	0	0	1
@Test public void testIgnoresUnstartableEntities() throws Exception { final AtomicReference<Exception> called = new AtomicReference<Exception>(); LocationsFilter filter = new LocationsFilter() { private static final long serialVersionUID = -5625121945234751178L; @Override public List<Location> filterForContext(List<Location> locations, Object context) { called.set(new Exception()); return locations; } }; startable = app.addChild(EntitySpec.create(BasicStartable.class) .configure(BasicStartable.LOCATIONS_FILTER, filter)); BasicEntity entity = startable.addChild(EntitySpec.create(BasicEntity.class)); app.start(ImmutableList.of(loc1, loc2));  assertEqualsIgnoringOrder(entity.getLocations(), ImmutableSet.of()); assertNull(called.get()); } 	0	0	1	1	0	0
public HashMap<String, List<String>> getDeathevents() { return deathevents; } 	0	0	0	0	0	1
"private void addForwardLinks(Bubble bubble){ Collection<Bubble> container; for(Node node: bubble.getEndNode().getLinks()) { container = bubbles.stream().filter(x -> //x.getId() == node.getContainerId() && x.getStartNode().getId() == bubble.getEndNode().getId()).collect(Collectors.toSet()); if (container.size() > 0) bubble.getLinks().addAll(container); else bubble.getLinks().add(node); } System.out.println(""Id: "" + bubble.getId() + "" ForwardLinks:"" + linksToString(bubble.getLinks())); } "	0	0	0	0	0	1
public static void replaceText(XWPFDocument document, String placeHolder, String replaceText){ for (XWPFHeader header : document.getHeaderList()) replaceAllBodyElements(header.getBodyElements(), placeHolder, replaceText); replaceAllBodyElements(document.getBodyElements(), placeHolder, replaceText); } 	0	0	0	0	0	1
"public static Properties openPropertiesFrom(Path path) { Properties props = new Properties(); try { props.load(new FileInputStream(path.toFile())); } catch (IOException ioe) { Logger.getGlobal().log(Level.CONFIG, ""Cannot opern properties file!"", ioe); } return props; } "	0	0	1	0	1	0
public boolean isSuccess() { return this.parameterGenerationError == null && this.responseError == null; } 	0	0	0	0	0	1
"private HttpURLConnection executeHttpRequest(boolean secured, String request) throws IOException { String protocol = (secured) ? ""https"" : ""http""; URL url = new URL(new StringBuilder(protocol).append(""://"").append(request).toString()); HttpURLConnection cnx = (HttpURLConnection) url.openConnection(); cnx.setRequestProperty(""Accept-Language"", HttpsProvisioningUtils.getUserLanguage()); return cnx; } "	1	1	0	0	1	0
public static void registerSerializer(ITypeReader<?> serializer) { serializers.put(serializer.getType(), serializer); idents.put(serializer.getClass().getSimpleName(), serializer.getClass()); } 	1	0	1	1	1	0
protected WindowManager.LayoutParams buildLayoutParams() { return(new WindowManager.LayoutParams( WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT, 0, 0, WindowManager.LayoutParams.TYPE_TOAST, 0, PixelFormat.OPAQUE)); } 	0	0	0	0	0	1
private void calledUpdateConfiguration(Boolean called){ if(called){ ArgumentCaptor<UpdateFunctionConfigurationRequest> args = ArgumentCaptor.forClass(UpdateFunctionConfigurationRequest.class); verify(awsLambdaClient, times(1)).updateFunctionConfiguration(args.capture()); UpdateFunctionConfigurationRequest expected = new UpdateFunctionConfigurationRequest() .withDescription(description) .withFunctionName(functionName) .withHandler(handler) .withMemorySize(memory) .withRole(role) .withRuntime(runtime) .withVpcConfig(subnets.size() > 0 || securityGroups.size() > 0 ? new VpcConfig().withSubnetIds(subnets).withSecurityGroupIds(securityGroups) : null) .withTimeout(timeout) .withKMSKeyArn(kmsArn) .withEnvironment(new Environment().withVariables(environment)) .withDeadLetterConfig(new DeadLetterConfig().withTargetArn(deadLetterQueueArn));  assertEquals(expected, args.getValue());  } else { verify(awsLambdaClient, never()).updateFunctionConfiguration(any(UpdateFunctionConfigurationRequest.class)); } } 	0	0	1	0	0	0
"private Object mapOrRecurseObject(Object srcObj, Object srcFieldValue, Class<?> destFieldType, FieldMap fieldMap, Object destObj) { Class<?> srcFieldClass = srcFieldValue != null ? srcFieldValue.getClass() : fieldMap.getSrcFieldType(srcObj.getClass()); Class<?> converterClass = MappingUtils.determineCustomConverter(fieldMap, converterByDestTypeCache, fieldMap.getClassMap() .getCustomConverters(), srcFieldClass, destFieldType);  // 1-2007 mht: Invoke custom converter even if the src value is null. // #1563795 if (converterClass != null) { return mapUsingCustomConverter(converterClass, srcFieldClass, srcFieldValue, destFieldType, destObj, fieldMap, false); }  if (srcFieldValue == null) { return null; }   String srcFieldName = fieldMap.getSrcFieldName(); String destFieldName = fieldMap.getDestFieldName();  // 1596766 - Recursive object mapping issue. Prevent recursive mapping // infinite loop // In case of ""this->this"" mapping this rule should be omitted as processing is done on objects, which has been // just marked as mapped. if (!(DozerConstants.SELF_KEYWORD.equals(srcFieldName) && DozerConstants.SELF_KEYWORD.equals(destFieldName))) { Object alreadyMappedValue = mappedFields.getMappedValue(srcFieldValue, destFieldType); if (alreadyMappedValue != null) { return alreadyMappedValue; } }  if (fieldMap.isCopyByReference()) { // just get the src and return it, no transformation. return srcFieldValue; }  boolean isSrcFieldClassSupportedMap = MappingUtils.isSupportedMap(srcFieldClass); boolean isDestFieldTypeSupportedMap = MappingUtils.isSupportedMap(destFieldType); if (isSrcFieldClassSupportedMap && isDestFieldTypeSupportedMap) { return mapMap(srcObj, (Map<?, ?>) srcFieldValue, fieldMap, destObj); } if (fieldMap instanceof MapFieldMap && destFieldType.equals(Object.class)) { // TODO: find better place for this logic. try to encapsulate in FieldMap? destFieldType = fieldMap.getDestHintContainer() != null ? fieldMap.getDestHintContainer().getHint() : srcFieldClass; }  if (primitiveConverter.accepts(srcFieldClass) || primitiveConverter.accepts(destFieldType)) { // Primitive or Wrapper conversion if (fieldMap.getDestHintContainer() != null) { destFieldType = fieldMap.getDestHintContainer().getHint(); }  //#1841448 - if trim-strings=true, then use a trimmed src string value when converting to dest value Object convertSrcFieldValue = srcFieldValue; if (fieldMap.isTrimStrings() && srcFieldValue.getClass().equals(String.class)) { convertSrcFieldValue = ((String) srcFieldValue).trim(); }  DateFormatContainer dfContainer = new DateFormatContainer(fieldMap.getDateFormat());  if (fieldMap instanceof MapFieldMap && !primitiveConverter.accepts(destFieldType)) { // This handles a very special/rare use case(see indexMapping.xml + unit // test // testStringToIndexedSet_UsingMapSetMethod). If the destFieldType is a // custom object AND has a String param // constructor, we don't want to construct the custom object with the // src value because the map backed property // logic at lower layers handles setting the value on the custom object. // Without this special logic, the // destination map backed custom object would contain a value that is // the custom object dest type instead of the // desired src value. return primitiveConverter.convert(convertSrcFieldValue, convertSrcFieldValue.getClass(), dfContainer); } else { return primitiveConverter.convert(convertSrcFieldValue, destFieldType, dfContainer); } } if (MappingUtils.isSupportedCollection(srcFieldClass) && (MappingUtils.isSupportedCollection(destFieldType))) { return mapCollection(srcObj, srcFieldValue, fieldMap, destObj); }  if (MappingUtils.isEnumType(srcFieldClass, destFieldType)) { return mapEnum((Enum) srcFieldValue, (Class<Enum>) destFieldType); }  if (fieldMap.getDestDeepIndexHintContainer() != null) { destFieldType = fieldMap.getDestDeepIndexHintContainer().getHint(); }  // Default: Map from one custom data object to another custom data object return mapCustomObject(fieldMap, destObj, destFieldType, srcFieldValue); } "	0	0	0	0	0	1
"public void showErrorNetworkDialog() { ErrorConnectingFermatNetworkDialog errorConnectingFermatNetworkDialog = new ErrorConnectingFermatNetworkDialog(getActivity(), intraUserSubAppSession, null); errorConnectingFermatNetworkDialog.setDescription(""You are not connected  /n to the Fermat Network""); errorConnectingFermatNetworkDialog.setRightButton(""Connect"", new View.OnClickListener() { @Override public void onClick(View v) {  } }); errorConnectingFermatNetworkDialog.setLeftButton(""Cancel"", new View.OnClickListener() { @Override public void onClick(View v) {  } }); errorConnectingFermatNetworkDialog.show(); } "	0	0	1	1	1	0
"private void writeEntries(final Event event, int offset, final int numberOfEvents, long startTime) throws IOException { try(DeadLetterQueueWriter writeManager = new DeadLetterQueueWriter(dir, 10000000, 10000000)) { for (int i = offset; i <= offset + numberOfEvents; i++) { DLQEntry entry = new DLQEntry(event, ""foo"", ""bar"", String.valueOf(i), new Timestamp(startTime++)); writeManager.writeEntry(entry); } } } "	0	0	0	0	0	1
public PAImgCprs paraLarguraXAltura(@NotNull int largura, @NotNull int altura) { this.largura = largura; this.altura = altura; return this; } 	0	0	1	0	0	0
@Override public ASInputStream getStream(long startOffset, long length) throws IOException { if (startOffset > 0 && startOffset < this.bufferSize && startOffset + length < this.bufferSize) { return new ASMemoryInStream(this, (int) startOffset, (int) length); } else { throw new IOException(); } } 	1	1	1	1	0	0
private static TemplateProvider createTemplateProvider() { PropertyScanner propertyScanner = new LivedocPropertyScannerWrapper(new FieldPropertyScanner()); return new TemplateProvider(propertyScanner); } 	1	0	0	0	1	0
"public boolean hasValue(String paramName) { if (super.hasValue(paramName)) return true; int index1 = paramName.indexOf('['); int index2 = paramName.indexOf(']'); int index3 = paramName.indexOf('.'); if (index1 > 0 && index2 <= index1 || index3 > 0 && index3 == paramName.length() - 1) return false; if (index1 > 0 && (index3 < 0 || index3 == index2 + 1)) { String top = paramName.substring(0, index1); String sub = paramName.substring(index1 + 1, index2); Object topValue = super.hasValue(top) ? topValue = super.getValue(top) : null; if (topValue.getClass().isArray()) { if (!StringUtils.isNumeric(sub)) return false; int index = Integer.valueOf(sub); Object[] array = (Object[]) topValue; if (index < 0 || index >= array.length) return false; topValue = array[index]; } else if (topValue instanceof Collection) { if (!StringUtils.isNumeric(sub)) return false; int index = Integer.valueOf(sub); Collection<?> collection = (Collection<?>) topValue; if (index < 0 || index >= collection.size()) return false; Iterator<?> it = collection.iterator(); int i = 0; while (it.hasNext()) { topValue = it.next(); if (i == index) break; i++; } } else if (topValue instanceof Map) { if (!(sub.startsWith(""'"") && sub.endsWith(""'"") || sub.startsWith(""\"""") && sub.endsWith(""\""""))) return false; sub = sub.substring(1, sub.length() - 1); Map<?, ?> map = ((Map<?, ?>) topValue); if (!map.containsKey(sub)) return false; topValue = map.get(sub); } else { return false; } if (index2 == paramName.length() - 1) return true; if (index3 == index2 + 1) { if (topValue == null) return false; EntityBeanPropertySqlParameterSource source = new EntityBeanPropertySqlParameterSource(topValue); return source.hasValue(paramName.substring(index3 + 1)); } } if (index3 > 0) { String top = paramName.substring(0, index3); if (super.hasValue(top)) { Object topValue = getValue(top); EntityBeanPropertySqlParameterSource source = new EntityBeanPropertySqlParameterSource(topValue); return source.hasValue(paramName.substring(index3 + 1)); } } return false; } "	0	0	1	1	0	0
"private void addTables(final Document document, final Entity entity, final Locale locale) throws DocumentException { List<String> orderHeader = new ArrayList<String>(); orderHeader.add(getTranslationService().translate(""orders.order.number.label"", locale)); orderHeader.add(getTranslationService().translate(""orders.order.name.label"", locale)); orderHeader.add(getTranslationService().translate(""orders.order.product.label"", locale)); orderHeader.add(getTranslationService().translate(""genealogiesForComponents.genealogyForComponent.report.productBatch"", locale)); Paragraph productTitle = new Paragraph(new Phrase(getTranslationService().translate( ""genealogiesForComponents.genealogyForComponent.report.paragrah.product"", locale), PdfUtil.getArialBold11Light())); productTitle.setSpacingBefore(20); document.add(productTitle); PdfPTable headerData = PdfUtil.createPanelTable(3); headerData.setSpacingBefore(7); Entity product = entity.getBelongsToField(""productInComponent"").getBelongsToField(""productInComponent"") .getBelongsToField(""product""); PdfUtil.addTableCellAsTable(headerData, getTranslationService().translate(""basic.product.number.label"", locale), product.getField(""number""), """", PdfUtil.getArialBold10Dark(), PdfUtil.getArialRegular10Dark()); PdfUtil.addTableCellAsTable(headerData, getTranslationService().translate(""basic.product.name.label"", locale), product.getField(""name""), """", PdfUtil.getArialBold10Dark(), PdfUtil.getArialRegular10Dark()); PdfUtil.addTableCellAsTable(headerData, getTranslationService().translate(""genealogiesForComponents.productInBatch.batch.label"", locale), entity.getField(""batch""), """", PdfUtil.getArialBold10Dark(), PdfUtil.getArialRegular10Dark()); document.add(headerData); Paragraph orderTitle = new Paragraph(new Phrase(getTranslationService().translate( ""genealogiesForComponents.genealogyForComponent.report.paragrah.order"", locale), PdfUtil.getArialBold11Light())); orderTitle.setSpacingBefore(20); document.add(orderTitle); addOrderSeries(document, entity, orderHeader); } "	0	0	0	0	0	1
"public void copyTimeNormsFromTechnology(final ViewDefinitionState view, final ComponentState componentState, final String[] args) { Entity orderOperationComponent = ((FormComponent) view.getComponentByReference(""form"")).getEntity();  // be sure that entity isn't in detached state orderOperationComponent = orderOperationComponent.getDataDefinition().get(orderOperationComponent.getId());  applyCostNormsFromGivenSource(view, orderOperationComponent.getBelongsToField(""technologyOperationComponent""), FIELDS_TECHNOLOGY); } "	0	0	0	0	0	1
"public CommandOperation getOperation(int id) throws OperationManagementDAOException { PreparedStatement stmt = null; ResultSet rs = null; CommandOperation commandOperation = null; try { Connection conn = OperationManagementDAOFactory.getConnection(); String sql = ""SELECT OPERATION_ID, ENABLED FROM DM_COMMAND_OPERATION WHERE OPERATION_ID = ?""; stmt = conn.prepareStatement(sql); stmt.setInt(1, id); rs = stmt.executeQuery();  if (rs.next()) { commandOperation = new CommandOperation(); commandOperation.setEnabled(rs.getInt(""ENABLED"") != 0); } } catch (SQLException e) { throw new OperationManagementDAOException(""SQL Error occurred while retrieving the command operation "" + ""object available for the id '"" + id, e); } finally { OperationManagementDAOUtil.cleanupResources(stmt, rs); } return commandOperation; } "	0	0	1	0	1	0
private JSONObject getData() { return mData; } 	0	0	0	0	0	1
@Override public void setBlockState(World worldIn, IBlockState blockstateIn, int x, int y, int z, StructureBoundingBox sbb) { // Making public super.setBlockState(worldIn, blockstateIn, x, y, z, sbb); } 	0	0	0	0	0	1
"@RequestMapping( path = ""/dataset/{id}/data"", method = RequestMethod.GET ) public Iterable<Map<String, Object>> getData(@PathVariable String id) { final Dataset dataset = (Dataset) bindings.get(id); DataStructure structure = dataset.getDataStructure(); return () -> { return dataset.getData().map(dataPoints -> { Map<String, Object> map = Maps.newHashMap(); for (Map.Entry<Component, VTLObject> entry : structure.asMap(dataPoints).entrySet()) { map.put(structure.getName(entry.getKey()), entry.getValue()); } return map; }).iterator(); }; } "	0	0	1	0	1	0
"public void test06() {  Euristic matched = matched(getRulesList6(), ""тщательно мой""); assertNotNull(matched); } "	0	0	0	0	0	1
"public void test27() { Euristic matched = matched(getRulesList27(), ""к тем кто""); assertNotNull(matched); } "	0	0	0	0	0	1
"public void test13() { Euristic matched = matched(getRulesList13(), ""солнце росло""); assertNotNull(matched); } "	0	0	0	0	0	1
"public void test30() { Euristic matched = matched(getRulesList30(), ""для лису""); assertNotNull(matched); } "	0	0	0	0	0	1
"public void test32() { Euristic matched = matched(getRulesList32(), ""светлей быстро""); assertNotNull(matched); } "	0	0	0	0	0	1
"public void test17() { Euristic matched = matched(getRulesList17(), ""надо мною""); assertNotNull(matched); } "	0	0	0	0	0	1
"public void test24() { Euristic matched = matched(getRulesList24(), ""воя надрывно""); assertNotNull(matched); } "	0	0	0	0	0	1
"public void test35() { Euristic matched = matched(getRulesList35(), ""хотя пошел""); assertNotNull(matched); } "	0	0	0	0	0	1
"public void test14() { Euristic matched = matched(getRulesList14(), ""показал издали""); assertNotNull(matched); } "	0	0	0	0	0	1
"public void test31() { Euristic matched = matched(getRulesList31(), ""при лису""); assertNotNull(matched); } "	0	0	0	0	0	1
"public void test10() { Euristic matched = matched(getRulesList10(), ""этой жиже""); assertNotNull(matched); } "	0	0	0	0	0	1
"public void test33() { Euristic matched = matched(getRulesList33(), ""кругом природа""); assertNotNull(matched); } "	0	0	0	0	0	1
protected void checkCalendars(BillView content, BillView reference, SpotCheckObservation<BaseBillId> obsrv) { String content_str = serialize(content.getCalendars(), true); String reference_str = serialize(content.getCalendars(), true); if (!content_str.equals(reference_str)) obsrv.addMismatch(new SpotCheckMismatch(CALENDAR_OPENLEG_DEV, content_str, reference_str)); } 	1	0	1	0	1	0
protected void checkAmendmentVersions(BillView content, BillView reference, SpotCheckObservation<BaseBillId> obsrv) { String content_str = serialize(content.getAmendmentVersions(), true); String reference_str = serialize(content.getAmendmentVersions(), true); if (!content_str.equals(reference_str)) obsrv.addMismatch(new SpotCheckMismatch(BILL_AMENDMENT_VERSION_OPENLEG_DEV, content_str, reference_str)); } 	1	0	1	0	1	0
protected void checkBillApproveMessage(BillView content, BillView reference, SpotCheckObservation<BaseBillId> obsrv) { String content_str = serialize(content.getApprovalMessage(), true); String reference_str = serialize(content.getApprovalMessage(), true); if (!content_str.equals(reference_str)) obsrv.addMismatch(new SpotCheckMismatch(BILL_APPROVE_MESSAGE_OPENLEG_DEV, content_str, reference_str)); } 	1	0	1	1	1	0
"private void setCancelButton() { final Button button = (Button) getActivity().findViewById(R.id.button_2); button.setText(""Close""); button.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { getActivity().finish(); } }); } "	0	0	1	1	1	0
"@Test public void testFiveSmallTarget() throws IOException { List<Group> targets = new ArrayList<Group>(); targets.add(TargetIO.loadTarget(new File(""targets"" + File.separator + ""SimpleBullseye_five_small.target"")).get());  RandomShoot rs = new RandomShoot(targets, rng);  // Make sure initial state makes sense  assertEquals(5, rs.getSubtargets().size());  assertTrue(rs.getSubtargets().contains(""1"")); assertTrue(rs.getSubtargets().contains(""2"")); assertTrue(rs.getSubtargets().contains(""3"")); assertTrue(rs.getSubtargets().contains(""4"")); assertTrue(rs.getSubtargets().contains(""5""));  String firstSubtarget = rs.getSubtargets().get(rs.getCurrentSubtargets().peek());  assertEquals(""sounds/voice/shootoff-shoot.wav"", stringOut.toString(""UTF-8"").replace(File.separatorChar, '/').split(String.format(""%n"", """"))[0]); stringOut.reset();  // Simulate missing a shot  rs.shotListener(new Shot(Color.GREEN, 0, 0, 0, 2), Optional.empty());  assertEquals(String.format(""sounds/voice/shootoff-shoot.wav%nsounds/voice/shootoff-%s.wav%n"", firstSubtarget), stringOut.toString(""UTF-8"").replace(File.separatorChar, '/')); stringOut.reset();  // Simulate a hit  TargetRegion expectedRegion = null;  for (Node node : targets.get(0).getChildren()) { expectedRegion = (TargetRegion)node;  if (expectedRegion.getTag(""subtarget"").equals(firstSubtarget)) break; }  int oldSize = rs.getCurrentSubtargets().size();  rs.shotListener(new Shot(Color.GREEN, 0, 0, 0, 2), Optional.of(expectedRegion));  if (oldSize > 1) { assertEquals(oldSize - 1, rs.getCurrentSubtargets().size()); } else { String nextSubtarget = rs.getSubtargets().get(rs.getCurrentSubtargets().peek()); assertTrue(stringOut.toString(""UTF-8"").startsWith(""shoot subtarget "" + nextSubtarget)); stringOut.reset(); } } "	0	0	1	1	0	0
"@Override public void storeDomain(final InputStream inputStream, final String domainId, final boolean overwrite) throws DomainIdNullException, DomainAlreadyExistsException, DomainStorageException { logger.debug(""storeDomain(inputStream, "" + domainId + "", "" + overwrite + "")""); if (null == inputStream) { throw new IllegalArgumentException(); } if (StringUtils.isEmpty(domainId)) { throw new DomainIdNullException(messages.getErrorString(""PentahoMetadataDomainRepository.ERROR_0001_DOMAIN_ID_NULL"")); }   // Check to see if the domain already exists final RepositoryFile domainFile = getMetadataRepositoryFile(domainId); if (!overwrite && domainFile != null) { final String errorString = messages.getErrorString(""PentahoMetadataDomainRepository.ERROR_0002_DOMAIN_ALREADY_EXISTS"", domainId); logger.error(errorString); throw new DomainAlreadyExistsException(errorString); }  //Check if this is valid xml InputStream inputStream2 = null; String xmi = null; try { //first, convert our input stream to a string BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream)); StringBuilder stringBuilder = new StringBuilder(); while ((xmi = reader.readLine()) != null) { stringBuilder.append(xmi); } inputStream.close(); xmi = stringBuilder.toString(); //now, try to see if the xmi can be parsed (ie, check if it's valid xmi) Domain domain = xmiParser.parseXmi(new java.io.ByteArrayInputStream(xmi.getBytes())); //xmi is valid. Create a new inputstream for the actual import action. inputStream2 = new java.io.ByteArrayInputStream(xmi.getBytes(""UTF-8"")); } catch (Exception ex){ logger.error(ex.getMessage()); //throw new DomainStorageException(messages.getErrorString(""PentahoMetadataDomainRepository.ERROR_0010_ERROR_PARSING_XMI""), ex); java.io.ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ex.printStackTrace(new java.io.PrintStream(byteArrayOutputStream)); throw new DomainStorageException(byteArrayOutputStream.toString(), ex); }  final SimpleRepositoryFileData data = new SimpleRepositoryFileData(inputStream2, DEFAULT_ENCODING, DOMAIN_MIME_TYPE); if (domainFile == null) { final RepositoryFile newDomainFile = createUniqueFile(domainId, null, data); } else { repository.updateFile(domainFile, data, null); }  // This invalidates any caching flushDomains();  } "	1	0	0	0	1	0
@Subscribe public void RefreshData(RefreshUiEvent event) { setVisibility(true); if (searchText.length() == 0) { tracksListAdapter.refresh(); } } 	1	0	1	0	0	0
"@Override protected CompiledMethod doCompile(VmMethod method, NativeStream os, int level, boolean isBootstrap) { final CompiledMethod cm = new CompiledMethod(level); try { if (method.isNative()) { Object label = new Label(method.getMangledName()); cm.setCodeStart(os.getObjectRef(label)); } else { EntryPoints entryPoints = getEntryPoints(); X86CompilerHelper helper = new X86CompilerHelper((X86Assembler) os, null, entryPoints, isBootstrap); helper.setMethod(method); X86StackFrame stackFrame = new X86StackFrame((X86Assembler) os, helper, method, entryPoints, cm); TypeSizeInfo typeSizeInfo = getTypeSizeInfo();  VmByteCode bytecode = method.getBytecode(); IRControlFlowGraph cfg = new IRControlFlowGraph(bytecode); IRGenerator irg = new IRGenerator(cfg, typeSizeInfo); BytecodeParser.parse(bytecode, irg);  initMethodArguments(method, stackFrame, typeSizeInfo, irg);  cfg.constructSSA(); cfg.optimize(); cfg.removeUnusedVars(); cfg.deconstrucSSA(); cfg.removeDefUseChains(); cfg.fixupAddresses();  X86CodeGenerator x86cg = new X86CodeGenerator(method, (X86Assembler) os, bytecode.getLength(), typeSizeInfo, stackFrame); List<Variable<?>> liveVariables = cfg.computeLiveVariables(); LiveRange<?>[] liveRanges = getLiveRanges(liveVariables); LinearScanAllocator<?> lsa = allocate(liveRanges); generateCode(x86cg, cfg, irg, lsa);  //                Unsafe.debug(""L2 compiled method: "" + method.getFullName() + ""\n""); } } catch (RuntimeException x) { System.err.println(""ERROR in compilation of "" + method.getFullName()); throw x; } catch (Error x) { System.err.println(""ERROR in compilation of "" + method.getFullName()); throw x; }  return cm; } "	0	0	0	0	0	1
public static void initSlots() { for(int i = 0; i < 27; i++) slots.add(new Integer(i)); } 	0	0	0	1	1	0
"@SuppressWarnings(""static-access"") public static void main(String[] args) throws IOException { GenericOptionsParser genericParser = new GenericOptionsParser(args); String[] remainingArgs = genericParser.getRemainingArgs();  Option conf = OptionBuilder.hasArg().create(""conffile""); Option help = OptionBuilder.withLongOpt(""help"").create('h'); Options opts = new Options().addOption(conf).addOption(help); CommandLineParser specificParser = new GnuParser(); CommandLine cmd = null; try { cmd = specificParser.parse(opts, remainingArgs); } catch (MissingArgumentException e) { terminate(1, ""No argument specified for -conffile option""); } catch (ParseException e) { terminate(1, USAGE); } if (cmd == null) { terminate(1, ""Failed to parse options""); }  if (cmd.hasOption('h')) { terminate(0, USAGE); }  List<File> files = new ArrayList<File>(); if (cmd.hasOption(""conffile"")) { String[] values = cmd.getOptionValues(""conffile""); for (String value : values) { File confFile = new File(value); if (confFile.isFile()) { files.add(confFile); } else if (confFile.isDirectory()) { for (File file : listFiles(confFile)) { files.add(file); } } else { terminate(1, confFile.getAbsolutePath() + "" is neither a file nor directory""); } } } else { String confDirName = System.getenv(HADOOP_CONF_DIR); if (confDirName == null) { terminate(1, HADOOP_CONF_DIR + "" does not defined""); } File confDir = new File(confDirName); if (!confDir.isDirectory()) { terminate(1, HADOOP_CONF_DIR + "" is not a directory""); } files = Arrays.asList(listFiles(confDir)); } if (files.isEmpty()) { terminate(1, ""No input file to validate""); }  boolean ok = true; for (File file : files) { String path = file.getAbsolutePath(); List<String> errors = checkConf(new FileInputStream(file)); if (errors.isEmpty()) { System.out.println(path + "": valid""); } else { ok = false; System.err.println(path + "":""); for (String error : errors) { System.err.println(""\t"" + error); } } } if (ok) { System.out.println(""OK""); } else { terminate(1, ""Invalid file exists""); } } "	0	0	1	0	0	0
"private Domain queryDomainWithoutInnerObjects(QueryParam queryParam) { DomainQueryParam domainQueryParam = (DomainQueryParam) queryParam; final String punyName = domainQueryParam.getPunyName(); LOGGER.debug(""query LDH_NAME with punyName:{}"", punyName); final String sql = ""select * from RDAP_DOMAIN domain "" + SQL_LEFT_JOIN_DOMAIN_STATUS + "" where LDH_NAME= ?  ""; List<Domain> result = jdbcTemplate.query(new PreparedStatementCreator() { @Override public PreparedStatement createPreparedStatement( Connection connection) throws SQLException { PreparedStatement ps = connection.prepareStatement(sql); ps.setString(1, punyName); return ps; } }, new DomainWithStatusResultSetExtractor()); if (null == result || result.size() == 0) { return null; } return result.get(0); } "	0	0	1	0	0	0
private int getModifiers() { return super.getModifiers(); } 	0	0	1	1	0	0
@Override protected void onSchedule(Runnable runnable) { sExecutorService.execute(runnable); } 	0	0	1	0	1	0
@Override public int receiveEnergy(ForgeDirection from, int maxReceive, boolean simulate) { if (data.isMaster) { int recieved = maxReceive; if (recieved > maxEnergy - energy) recieved = maxEnergy - energy; if (!simulate) energy += recieved; return recieved; } else { if (master == null) findMaster(); if (master != null) return master.receiveEnergy(from, maxReceive, simulate); } return 0; } 	1	0	1	1	1	0
"public void testCatalogController() throws IOException, XmlPullParserException { Object context = UMContextGetter.getContext(this); UstadMobileSystemImpl.getInstance().getLogger().l(UMLog.INFO, 311, null); UstadMobileSystemImpl impl = UstadMobileSystemImpl.getInstance(); impl.setActiveUser(TestConstants.LOGIN_USER, context);  String opdsURL = TestUtils.getInstance().getHTTPRoot() + TestConstants.CATALOG_OPDS_ROOT;  CatalogController controller = CatalogController.makeControllerByURL( opdsURL, impl, CatalogController.USER_RESOURCE, TestConstants.LOGIN_USER, TestConstants.LOGIN_PASS, CatalogController.CACHE_ENABLED, context); assertNotNull(""Create catalog controller"", controller);   UstadJSOPDSFeed feedItem = controller.getModel().opdsFeed; String feedXML = feedItem.toString(); ByteArrayInputStream bin = new ByteArrayInputStream( feedXML.getBytes(""UTF-8"")); XmlPullParser parser = impl.newPullParser(); parser.setInput(bin, ""UTF-8""); UstadJSOPDSFeed fromXMLItem = UstadJSOPDSFeed.loadFromXML(parser); assertEquals(""Same id when reparsed"", feedItem.id, fromXMLItem.id); CatalogController.cacheCatalog(feedItem, CatalogController.USER_RESOURCE, null, context); UstadJSOPDSFeed cachedFeed = CatalogController.getCachedCatalogByID(feedItem.id, CatalogController.SHARED_RESOURCE | CatalogController.USER_RESOURCE, context);  assertEquals(""Same feed id on cached catalog"", feedItem.id, cachedFeed.id); } "	0	0	0	0	0	1
public void loadCatalog(String url, int resourceMode) { final UstadMobileSystemImpl impl = UstadMobileSystemImpl.getInstance(); final int fetchFlags = CatalogController.CACHE_ENABLED;  CatalogController.makeControllerForView(this, url, impl, resourceMode, fetchFlags, this); } 	1	0	1	1	0	0
"public static String intro(byte a) { String MotSecret = ""zygote""; if(a==1) { if(joueurs == 2) { System.out.println(LSD.getString(""pen_intro_msg1"")); MotSecret = InOut.getWord(); challenge.clear(); System.out.println(LSD.getString(""pen_intro_msg2"")); } else{ MotSecret = Dico.lectureMots(); } }else if(a==2){ System.out.println(LSD.getString(""pen_intro_msg3"")); challenge.dormirSystem(2500); System.out.println(LSD.getString(""pen_intro_msg4"")); MotSecret = InOut.Mot(InOut.getLine()); challenge.clear(); }else{ System.out.println(LSD.getString(""pen_intro_msg5"")); challenge.dormirSystem(2500); System.out.println(LSD.getString(""pen_intro_msg6"")); MotSecret = InOut.getWord(); challenge.clear(); } MotSecret.toLowerCase(); return MotSecret; } "	0	0	1	0	0	0
"public static void chargeProfil() { if(Fichier.fichierExiste(""saves/"", name + "".sav"")) { String str = """"; Fichier fi = new Fichier(); fi.ouvrir(""saves/"" + name + "".sav"", ""L"",true); str = fi.lire(); playerOne.setName(str); fi.lire(); int [] scorePendu = new int[10]; int [] scorePlusMoins = new int[10]; int [] scoreMasterMind = new int[10]; int [] scorePuissance =new int[10]; for(int i=0;!(str.equals("".B""));i++) { str = fi.lire(); if(!str.equals("".B"")) { scorePendu[i] = Integer.parseInt(str); } } playerOne.setScorePendu(scorePendu); for(int i=0;!(str.equals("".C""));i++) { str = fi.lire(); if(!str.equals("".C"")) { scorePlusMoins[i] = Integer.parseInt(str); } } playerOne.setScorePlusMoins(scorePlusMoins); for(int i=0;!(str.equals("".D""));i++) { str = fi.lire(); if(!str.equals("".D"")) { scoreMasterMind[i] = Integer.parseInt(str); } } playerOne.setScoreMasterMind(scoreMasterMind); for(int i=0;!(str.equals("".end""));i++) { str = fi.lire(); if(!str.equals("".end"")) { scorePuissance[i] = Integer.parseInt(str); } } playerOne.setScorePuissance4(scorePuissance); fi.fermer(); } } "	0	0	1	0	0	0
"public static String connecte() { if(profilGestion.existe()) { return LSD.getString(""conne_msg1""); } else { return LSD.getString(""conne_msg2""); } } "	0	0	1	0	0	0
"public String output(String src){  StringBuilder out = new StringBuilder(); while(src.length() > 0){ //escape { List<String> cap = rules.get(""escape"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); out.append(cap.get(1)); continue; } }  // autolink { List<String> cap = rules.get(""autolink"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); String text; String href; if(cap.get(2).equals(""@"")){ if(cap.get(1).startsWith(""mailto:"")){ text = cap.get(1).substring(7); } else { text = cap.get(1); } href = ""mailto:"" + text; } else { text = escape(cap.get(1)); href = text; } out.append(renderer.link(href, null, text)); continue; } }  // url (gfm) if(!inLink){ List<String> cap = rules.get(""url"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); String text = escape(cap.get(1)); String href = text; out.append(renderer.link(text, null, href)); continue; } }  // tag { List<String> cap = rules.get(""tag"").exec(src); if(!cap.isEmpty()){ if(!inLink && Pattern.compile(""^<a "").matcher(cap.get(0)).find()){ inLink = true; } else if(inLink && Pattern.compile(""^</a>"").matcher(cap.get(0)).find()){ inLink = false; }  src = src.substring(cap.get(0).length()); if(options.isSanitize()){ out.append(escape(cap.get(0))); } else { out.append(cap.get(0)); } continue; } }  // link { List<String> cap = rules.get(""link"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); inLink = true; out.append(outputLink(cap, new Lexer.Link(cap.get(2), cap.get(3)))); inLink = false; continue; } }  // reflink, nolink { List<String> cap = rules.get(""reflink"").exec(src); if(cap.isEmpty()){ cap = rules.get(""nolink"").exec(src); } if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); String key; if(cap.size() > 2){ key = cap.get(2).replaceAll(""\\s+"", """"); } else { key = cap.get(1).replaceAll(""\\s+"", """"); } Lexer.Link link = links.get(key); if(link == null || isEmpty(link.getHref())){ out.append(renderer.nolink(cap.get(0))); continue; } inLink = true; out.append(outputLink(cap, link)); inLink = false; continue; } }  // strong { List<String> cap = rules.get(""strong"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); out.append(renderer.strong(output(or(cap.get(2), cap.get(1))))); continue; } }  // em { List<String> cap = rules.get(""em"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); out.append(renderer.em(output(or(cap.get(2), cap.get(1))))); continue; } }  // code { List<String> cap = rules.get(""code"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); out.append(renderer.codespan(cap.get(2))); continue; } }  // br { List<String> cap = rules.get(""br"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); out.append(renderer.br()); continue; } }  // del (gfm) { List<String> cap = rules.get(""del"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); out.append(renderer.del(output(cap.get(1)))); continue; } }  // text { List<String> cap = rules.get(""text"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); // TODO smartypants //out.append(renderer.text(escape(smartypants(cap.get(0))))); out.append(renderer.text(escape(cap.get(0)))); continue; } }  // TODO Error //println(""Infinite loop on byte: "" + source.charAt(0).toByte) } return out.toString(); } "	0	0	0	0	0	1
"private String generateAutoScaleMaxPolicyName(String vmGroupIdentifier) { return genObjectName(""Cloud-AutoScale-Policy-Max"", vmGroupIdentifier); } "	0	0	0	1	0	0
@Override public void setRunLevel(int level) { // TODO Auto-generated method stub  } 	0	0	1	0	0	0
private Answer execute(ReadyCommand cmd) { return new ReadyAnswer(cmd); } 	0	0	0	1	0	0
"private String generateAutoScaleScaleUpActionName(String vmGroupIdentifier) { return genObjectName(""Cloud-AutoScale-ScaleUpAction"", vmGroupIdentifier); } "	0	0	0	1	0	0
"@Override public void onDestroy() { Log.d(TAG, ""onDestroy()""); super.onDestroy(); state.onDestroy();  binder.dispose();  if (this instanceof DependencyScopeOwner) {  // Cached DependencyScope is automatically disposed to avoid memory leaks  final DependenciesCache cache = D.get(DependenciesCache.class); final DependencyScopeOwner owner = (DependencyScopeOwner) this; cache.removeDependencyScope(owner); }  final T_Presenter presenter = resolvePresenter(); if (presenter != null) { presenter.onViewDestroy(this); }  if (PluginBus.isPlugged(this)) { Log.d(TAG, ""onDestroy() : Unplugged from PluginBus""); PluginBus.unplug(this); } } "	0	0	1	1	1	0
<T extends AbstractStub<T>> T newStub(Function<ManagedChannel, T> supplier) { return configureStub(supplier.apply(getChannel()), getToken()); } 	1	0	0	0	1	0
"private void startRegisterActivity(User user) { startActivity(new Intent(this, RegisterActivity.class).putExtra(""user_data"", user)); } "	0	0	1	1	1	0
"@Override public Trigger<?> newInstance(StaplerRequest req, JSONObject formData) throws FormException { if (getBuildManager() == null) { throw new FormException(MessageFormat.format(""Cannot retrieve build manager. {0} requires GitHub plugin, you need to install GitHub plugin in order to use it."", getDisplayName()), ""all""); } return super.newInstance(req, formData); } "	0	0	1	1	1	0
"public void testComputePercentiles() { System.out.println(""getPercentileFromSorted""); List<Double> data1 = Arrays.asList(4.0, 2.0, 1.0, -1.0, 5.0);  double[] result = UnivariateStatisticsUtil.computePercentiles(data1, 0.2, 0.5, 1.0, 0.0); assertEquals(-0.6, result[0], EPS); assertEquals(UnivariateStatisticsUtil.computeMedian(data1),result[1], EPS); assertEquals(5.0, result[2]); assertEquals(-1.0, result[3]);  double[] badValues = {-1.0, -0.1, 1.1, 10.0 }; for (double badValue : badValues) { boolean exceptionThrown = false; try { UnivariateStatisticsUtil.computePercentiles(data1, badValue); } catch (Exception e) { exceptionThrown = true; } finally { assertTrue(exceptionThrown); } }  } "	0	0	1	1	1	0
"@Override public Map<String, String> createTask(TaskDto taskDto) { Map<String, String> messages = new HashMap<>(); String configurationId = configurationMediator.getConfigurationId(); List<TaskEntry> validTasks = new ArrayList<>(); int tasksInQueue = getTasksInQueue(); boolean regular = Boolean.valueOf(taskDto.getRegular()); List<TaskEntry> existingTaskEntries = taskRepository.findAll(); for (TaskEntry taskEntry : TaskDtoConverter.convert(taskDto)) { if (!regular && tasksInQueue >= configurationMediator.getMaxQueueSize()) { notificationService.notifyAboutError(new ExceptionDto(""Task creation error"", ""Task queue is full"")); break; } if (!configurationMediator.isClusterMode()) { taskEntry.setWorker(configurationId); } taskEntry.setStatus(TaskEntry.TaskEntryStatus.QUEUED.getStatus()); taskEntry.setId(UUID.randomUUID().toString());  // set tempVolumeType and iops if required setTempVolumeAndIops(taskEntry);  if (regular) { try { schedulerService.addTask(taskEntry); messages.put(taskEntry.getVolume(), getMessage(taskEntry)); validTasks.add(taskEntry); tasksInQueue++; } catch (EnhancedSnapshotsException e) { notificationService.notifyAboutError(new ExceptionDto(""Task creation has failed"", e.getLocalizedMessage())); LOG.error(e); messages.put(taskEntry.getVolume(), e.getLocalizedMessage()); } } else if (TaskEntry.TaskEntryType.RESTORE.getType().equals(taskEntry.getType())) { if (backupRepository.findByVolumeId(taskEntry.getVolume()).isEmpty()) { notificationService.notifyAboutError(new ExceptionDto(""Restore task error"", ""Backup for volume: "" + taskEntry.getVolume() + "" not found!"")); messages.put(taskEntry.getVolume(), ""Restore task error""); } else { setRestoreVolumeTypeAndIops(taskEntry); messages.put(taskEntry.getVolume(), getMessage(taskEntry)); validTasks.add(taskEntry); tasksInQueue++; } } else { messages.put(taskEntry.getVolume(), getMessage(taskEntry)); List<TaskEntry> allTaskEntries = new ArrayList<>(existingTaskEntries); allTaskEntries.addAll(validTasks); if (allTaskEntries.stream().filter(t -> t.getVolume().equals(taskEntry.getVolume()) && t.isConsistentBackup() && taskEntry.isConsistentBackup() && t.getStatus().equals(!taskIsFinished(t))).count() != 0) { LOG.warn(""There is already task for consistent backup for volume {}, new one will not be added."", taskEntry.getVolume()); continue; } validTasks.add(taskEntry); tasksInQueue++; } } taskRepository.save(validTasks); return messages; } "	0	0	1	1	0	0
"public void saveCredentials(String password, String username) { SecureSharedPreferences.Editor editor = settings.edit(); editor.putString(""username"", username); editor.putString(""password"", password); editor.commit(); } "	0	0	1	1	0	0
"private void putFilter(String sName, ZuulFilter filter, long lastModified) { List<ZuulFilter> list = hashFiltersByType.get(filter.filterType()); if (list != null) { hashFiltersByType.remove(filter.filterType()); //rebuild this list }  String nameAndType = filter.filterType() + "":"" + filter.filterName(); filtersByNameAndType.put(nameAndType, filter);  filterRegistry.put(sName, filter); filterClassLastModified.put(sName, lastModified); } "	0	0	1	1	0	0
"@Override public void initialise(List<String> parameters, ColumnConfig columnConfig) throws RoutineException { if (parameters.size() != 2) { throw new RoutineException(""Incorrect number of paramters. Must be <columnName>,<maxDuration>""); }  columnName = parameters.get(0); if (!columnConfig.hasColumn(columnName)) { throw new RoutineException(""Column '"" + columnName + ""' does not exist""); }  ColumnConfigItem column = columnConfig.getColumnConfig(columnName); if (!column.isNumeric()) { throw new RoutineException(""Column '"" + columnName + ""' must be numeric""); }  try { maxDuration = Integer.parseInt(parameters.get(1)); } catch (NumberFormatException e) { throw new RoutineException(""Max duration parameter must be numeric""); }  if (maxDuration <= 0) { throw new RoutineException(""Max duration must be greater than zero""); } } "	0	0	1	1	0	0
@Override public boolean canInteractWith(EntityPlayer playerIn) { return tileEntityHenhouse.isUsableByPlayer(playerIn); } 	1	0	0	0	1	0
"@Override public void onResponse(Call<UserSentResponse> call, Response<UserSentResponse> response) { UserSentResponse r=response.body(); if(r!=null&&response.isSuccess()){  Log.v(""ID"", r.userId); sharedPref.setLoginStatus(true); sharedPref.setUserKey(r.userId); sharedPref.setLoginSkipStatus(true); progressBar.setVisibility(View.GONE); getActivity().startActivity(new Intent(getActivity(),MainActivity.class)); getActivity().finish();  } else{ Toast.makeText(getActivity(),""Check Internet connection"",Toast.LENGTH_SHORT).show(); } } "	1	0	0	0	1	0
"public DataType convertType(String type) {  switch (type.toLowerCase()) { case ""int"": return DataType.INT; case ""string"": return DataType.STRING; case ""double"": return DataType.DOUBLE; case ""float"": return DataType.FLOAT; case ""timestamp"": return DataType.TIMESTAMP; case ""decimal"": return DataType.DECIMAL; case ""date"": return DataType.DATE; case ""boolean"": return DataType.BOOLEAN; case ""long"": return DataType.LONG; default: return DataType.NULL; } } "	1	0	1	0	1	0
"@RequestMapping(value = ""/vehicle-location-simulation!map.do"", method = RequestMethod.GET) public ModelAndView activeBlocksAndRecordsForTask(@RequestParam() int taskId, HttpServletResponse response) throws IOException {  return new ModelAndView(""vehicle-location-simulation-map.jspx"", null); } "	0	0	1	1	1	0
"public void createConfFile() { /* * If a configuration file is not found, a default configuration file is created. * */ try { String defText; defText = new StringBuilder() .append(""#       *** OOR EXAMPLE CONFIG FILE ***\n\n\n"") .append(""# General configuration\n"") .append(""#      debug: Debug levels [0..3]\n"") .append(""#      map-request-retries: Additional Map-Requests to send per map cache miss\n"") .append(""#      encapsulation: Encapsulation that will use OOR in the data plane. Could \n"") .append(""#        be LISP or VXLAN-GPE. LISP is selected by default\n\n"") .append(""debug                  = ""+logLevel+""\n"") .append(""map-request-retries    = 2\n"") .append(""encapsulation          = LISP\n\n\n"") .append(""#\n"") .append(""# operating mode can be any of:\n"") .append(""# xTR, RTR, MN, MS\n"") .append(""#\n\n"") .append(""operating-mode         = MN\n"") .append(""# RLOC Probing configuration\n"") .append(""#   rloc-probe-interval: interval at which periodic RLOC probes are sent\n"") .append(""#     (seconds). A value of 0 disables RLOC Probing\n"") .append(""#   rloc-probe-retries: RLOC Probe retries before setting the locator with\n"") .append(""#     status down. [0..5]\n"") .append(""#   rloc-probe-retries-interval: interval at which RLOC probes retries are\n"") .append(""#     sent (seconds) [1..#rloc-probe-interval]\n\n"") .append(""rloc-probing {\n"") .append(""    rloc-probe-interval             = ""+rloc_prob_interval+""\n"") .append(""    rloc-probe-retries              = ""+rloc_prob_retries+""\n"") .append(""    rloc-probe-retries-interval     = ""+rloc_prob_retries_interval+""\n"") .append(""}\n\n\n"") .append(""# NAT Traversal configuration. \n"") .append(""#   nat_traversal_support: check if the node is behind NAT\n\n"") .append(""nat_traversal_support = ""+nat_aware+""\n\n\n"") .append(""# Encapsulated Map-Requests are sent to this map-resolver\n"") .append(""# You can define several map-resolvers. Encapsulated Map-Request messages will\n"") .append(""# be sent to only one.\n"") .append(""#   address: IPv4 or IPv6 address of the map resolver\n"") .append(""map-resolver        = {\n"") .append(""        ""+MR+"",\n"") .append(""}\n\n\n"") .append(""# Map-Registers are sent to this map-server\n"") .append(""# You can define several map-servers. Map-Register messages will be sent to all\n"") .append(""# of them.\n"") .append(""#   address: IPv4 or IPv6 address of the map-server\n"") .append(""#   key-type: Only 1 supported (HMAC-SHA-1-96)\n"") .append(""#   key: password to authenticate with the map-server\n"") .append(""#   proxy-reply [on/off]: Configure map-server to Map-Reply on behalf of the xTR\n\n"") .append(""map-server {\n"") .append(""        address     = ""+MS+""\n"") .append(""        key-type    = 1\n"") .append(""        key         = ""+MSKey+""\n"") .append(""        proxy-reply = on\n"") .append(""}\n\n\n"") .append(""# List of PITRs to SMR on handover\n"") .append(""#   address: IPv4 or IPv6 address of the Proxy-ITR\n"") .append(""#   Current LISP beta-network (lisp4.net/lisp6.net) PITR addresses\n\n"") .append(""proxy-itrs = {\n"") .append(""        69.31.31.98,\n"") .append(""        149.20.48.60,\n"") .append(""        198.6.255.37,\n"") .append(""        173.36.193.25,\n"") .append(""        129.250.1.63,\n"") .append(""        217.8.98.33,\n"") .append(""        217.8.98.35,\n"") .append(""        193.162.145.46,\n"") .append(""        193.34.30.222,\n"") .append(""        193.34.31.222,\n"") .append(""        147.83.131.33,\n"") .append(""        158.38.1.92,\n"") .append(""        203.181.249.172,\n"") .append(""        202.51.247.10\n"") .append(""}\n\n\n"") .append(""# IPv4 / IPv6 EID of the node.\n"") .append(""# Two kind of rlocs can be defined:\n"") .append(""#   -> rloc-address: Specifies directly the rloc of the interface\n"") .append(""#   -> rloc-iface: Specifies the interface associated with the RLOC\n"") .append(""#\n"") .append(""#   eid-prefix: EID prefix (IPvX/mask) of the mapping\n"") .append(""#   address: IPv4 or IPv6 address of the rloc. Address should exist and\n"") .append(""#      be assigned to an UP interface during starting process otherwise\n"") .append(""#      it is discarded\n"") .append(""#   interface: interface containing the RLOCs associated to this mapping\n"") .append(""#   afi: 4 to use IPv4 address of the interface and 6 to use IPv6 address\n"") .append(""#     of the interface\n"") .append(""#   priority [0-255]: Priority for the IPvX RLOC of the interface. Locators\n"") .append(""#     with lower values are more preferable. This is used for both incoming\n"") .append(""#     policy announcements and outcoming traffic policy management.\n"") .append(""#   weight [0-255]: When priorities are the same for multiple RLOCs, the Weight\n"") .append(""#     indicates how to balance unicast traffic between them.\n"") .toString();  if (ifaces != null){ if (!eidIPv4.equals("""")){ defText= defText.concat(createEIDConFile(eidIPv4+""/32"")); } if (!eidIPv6.equals("""")){ defText= defText.concat(createEIDConFile(eidIPv6+""/128"")); } }  if (!proxyETR.equals("""")){ String proxyETRstr; proxyETRstr = new StringBuilder() .append(""# Packets addressed to non-LISP sites will be encapsulated to this Proxy-ETR\n"") .append(""# You can define several Proxy-ETR. Traffic will be balanced according to\n"") .append(""# priority and weight.\n"") .append(""#   address: IPv4 or IPv6 address of the Proxy-ETR\n"") .append(""#   priority [0-255]: Proxy-ETR with lower values are more preferable.\n"") .append(""#   weight [0-255]: When priorities are the same for multiple Proxy-ETRs,\n"") .append(""#     the Weight indicates how to balance unicast traffic between them.\n"") .append(""proxy-etr {\n"") .append(""        address     = ""+proxyETR+""\n"") .append(""        priority    = 1\n"") .append(""        weight      = 100\n"") .append(""}\n\n\n"") .toString();  defText= defText.concat(proxyETRstr); }   defText= defText.concat(""override-dns     		 = ""+overrideDNS+""\n""); if (!DNS1.equals("""")) defText= defText.concat(""override-dns-primary    = ""+DNS1+""\n""); if (!DNS2.equals("""")) defText= defText.concat(""override-dns-secondary  = ""+DNS2+""\n"");  FileWriter fstream = new FileWriter(conf_file); BufferedWriter out = new BufferedWriter(fstream); out.write(defText); out.close();  } catch (Exception e) { displayMessage(""Error while writing Default Conf file to sdcard!!"", false, null); }  } "	0	0	1	1	0	0
public static TechnologyDetailsCounterDAOImpl getInstance() { if (instance == null) { return new TechnologyDetailsCounterDAOImpl(); } return instance; } 	1	0	1	1	1	0
"public static Map<String,Object> parseUri(String uriString) throws URISyntaxException { URI uri = new URI(uriString); Map<String, String> query = new HashMap<String,String>(); List<NameValuePair> nvplist = URLEncodedUtils.parse(uri, ""UTF-8"" /*StandardCharsets.UTF_8*/);  for (NameValuePair nvp : nvplist) { query.put(nvp.getName(), nvp.getValue()); } Map<String, Object> ret = new HashMap<String, Object>(); ret.put(""query"", query); ret.put(""path"", uri.getPath()); return ret; } "	0	0	1	1	1	0
"@Test public void testVCardFullN3() { doTest(""BEGIN:VCARD\r\nVERSION:2.1\r\nN:;Sean;;;\r\nEND:VCARD"", null, new String[] {""Sean""}, null, null, null, null, null, null, null, null); } "	1	1	1	1	0	0
"@Override public Widget createWidget() {  LayoutPanel layout = new LayoutPanel();  FakeTabPanel titleBar = new FakeTabPanel(""Resource Adapter""); layout.add(titleBar);  panel = new PagedView();  this.adapterList = new AdapterList(presenter); this.connectionList = new ConnectionList(presenter); this.adminObjects = new AdminObjectList(presenter);  panel.addPage(Console.CONSTANTS.common_label_back(), adapterList.asWidget()); panel.addPage(""Connection Definitions"", connectionList.asWidget()); panel.addPage(""Admin Objects"", adminObjects.asWidget()) ;  // default page panel.showPage(0);  Widget panelWidget = panel.asWidget(); layout.add(panelWidget);  layout.setWidgetTopHeight(titleBar, 0, Style.Unit.PX, 40, Style.Unit.PX); layout.setWidgetTopHeight(panelWidget, 28, Style.Unit.PX, 100, Style.Unit.PCT);  return layout; } "	1	0	0	0	1	0
"@Override public boolean onOptionsItemSelected(MenuItem item) { TabLayout tabLayout = context.getToolbarManager().getTabs(); Vplan plan = tabLayout.getSelectedTabPosition() == 0 ? getTodayPlan() : getTomorrowPlan(); if (!plan.isLoaded()) { CoordinatorLayout coordinatorLayout = (CoordinatorLayout) context.findViewById(R.id.coordinator_layout); Snackbar snackbar = Snackbar .make(coordinatorLayout, getString(R.string.plan_not_loaded), Snackbar.LENGTH_LONG); snackbar.show(); return true; } switch (item.getItemId()) { case R.id.show_absent: AlertDialog.Builder absentDialog = new AlertDialog.Builder(context); absentDialog.setTitle(getString(R.string.plan_absent)); String absent = null; for (String msg : plan.getAbsentStrings()) { if (absent == null) { absent = msg; } else { absent += ""\n\n"" + msg; } } if (absent == null) { absent = getString(R.string.plan_no_teachers); } absentDialog.setMessage(absent); absentDialog.setIcon(R.drawable.ic_menu_absent); AlertDialog abs = absentDialog.create(); abs.show(); return true; case R.id.show_marquee: AlertDialog.Builder alertDialog = new AlertDialog.Builder(context); alertDialog.setTitle(getString(R.string.plan_marquee)); String message = null; for (String msg : plan.getMarquee()) { if (message == null) { message = msg; } else { message += ""\n\n"" + msg; } } if (message == null) { message = getString(R.string.plan_no_announcements); } alertDialog.setMessage(message); alertDialog.setIcon(R.drawable.ic_menu_about_old); AlertDialog alert = alertDialog.create(); alert.show(); return true; case R.id.show_time: AlertDialog.Builder timeDialog = new AlertDialog.Builder(context); timeDialog.setTitle(getString(R.string.plan_time)); String time = plan.getChanged(); if (time.isEmpty()) { timeDialog.setMessage(getString(R.string.plan_no_update)); } else { timeDialog.setMessage(time); } timeDialog.setIcon(R.drawable.ic_menu_clock); AlertDialog timeDlg = timeDialog.create(); timeDlg.show(); return true; } return super.onOptionsItemSelected(item); } "	0	0	1	0	0	0
public Deck addDeck(Long deckId) {  Deck deck = deckRepository.getDeckById(deckId);  User user = userService.getAuthorizedUser();  Folder folder = user.getFolder(); List<Deck> decks = folder.getDecks(); decks.add(deck); folderRepository.save(folder);  return deck; } 	0	0	1	0	1	0
"Optional<AssertionError> test(Signal<T> signal, Iterator<? extends T> iterator) { if (signal.isOnNext()) { if (!iterator.hasNext()) { return fail(this, ""unexpected iterator request; onNext(%s); iterable: %s"", signal.get(), iterable); } T d2 = iterator.next(); if (!Objects.equals(signal.get(), d2)) { return fail(this, ""expected : onNext(%s); actual: %s; iterable: %s"", d2, signal.get(), iterable); } return iterator.hasNext() ? EXPECT_MORE : Optional.empty();  } if (iterator != null && iterator.hasNext() || signal.isOnError()) { return fail(this, ""expected next value: %s; actual actual signal: %s; iterable: %s"", iterator != null && iterator.hasNext() ? iterator.next() : ""none"", signal, iterable); } return Optional.empty(); } "	0	0	1	1	0	0
@Nullable private Entry getEntry(final int key) { final int idx = _map.get(key); if (idx == -1) { return null; } return getEntry(key, _buf.pointerFromIndex(idx)); } 	1	0	1	1	1	0
"@Override public boolean remove(Object key, Object value) { Assert.notNull(key, ""key""); writeLock.lock(); try { ExpiringEntry<K, V> entry = entries.get(key); if (entry != null && entry.getValue().equals(value)) { entries.remove(key); if (entry.cancel(false)) scheduleEntry(entries.first()); return true; } else return false; } finally { writeLock.unlock(); } } "	1	0	1	0	1	0
"private void internalWriteRequest( String methodName, Object arguments, OutputStream ops, String id) throws IOException {  // create the request ObjectNode request = mapper.createObjectNode();  // add id if (id!=null) { request.put(""id"", id); }  // add protocol and method request.put(""jsonrpc"", JSON_RPC_VERSION); request.put(""method"", methodName);  // object array args if (arguments!=null && arguments.getClass().isArray()) { Object[] args = Object[].class.cast(arguments); if (args.length>0) { // serialize every param for itself so jackson can determine // right serializer ArrayNode paramsNode = new ArrayNode(mapper.getNodeFactory()); for (Object arg : args) { JsonNode argNode = mapper.valueToTree(arg); paramsNode.add(argNode); } request.put(""params"", paramsNode); }  // collection args } else if (arguments!=null && Collection.class.isInstance(arguments)) { Collection<?> args = Collection.class.cast(arguments); if (!args.isEmpty()) { // serialize every param for itself so jackson can determine // right serializer ArrayNode paramsNode = new ArrayNode(mapper.getNodeFactory()); for (Object arg : args) { JsonNode argNode = mapper.valueToTree(arg); paramsNode.add(argNode); } request.put(""params"", paramsNode); }  // map args } else if (arguments!=null && Map.class.isInstance(arguments)) { if (!Map.class.cast(arguments).isEmpty()) { request.put(""params"", mapper.valueToTree(arguments)); }  // other args } else if (arguments!=null) { request.put(""params"", mapper.valueToTree(arguments)); }  // show to listener if (this.requestListener!=null) { this.requestListener.onBeforeRequestSent(this, request); } if (LOGGER.isLoggable(Level.FINE)) { LOGGER.log(Level.FINE, ""JSON-PRC Request: ""+request.toString()); }  // post the json data; writeAndFlushValue(ops, request); } "	0	0	1	0	1	0
"public Object readResponse(Type returnType, InputStream ips) throws Throwable {  // get node iterator ReadContext ctx = ReadContext.getReadContext(ips, mapper);  // read the response ctx.assertReadable(); JsonNode response = ctx.nextValue(); if (LOGGER.isLoggable(Level.FINE)) { LOGGER.log(Level.FINE, ""JSON-PRC Response: ""+response.toString()); }  // bail on invalid response if (!response.isObject()) { throw new JsonRpcClientException(0, ""Invalid JSON-RPC response"", response); } ObjectNode jsonObject = ObjectNode.class.cast(response);  // show to listener if (this.requestListener!=null) { this.requestListener.onBeforeResponseProcessed(this, jsonObject); }  // detect errors if (jsonObject.has(""error"") && jsonObject.get(""error"")!=null && !jsonObject.get(""error"").isNull()) {  // resolve and throw the exception if (exceptionResolver==null) { throw DefaultExceptionResolver.INSTANCE.resolveException(jsonObject); } else { throw exceptionResolver.resolveException(jsonObject); } }  // convert it to a return object if (jsonObject.has(""result"") && !jsonObject.get(""result"").isNull() && jsonObject.get(""result"")!=null) { if (returnType==null) { LOGGER.warning( ""Server returned result but returnType is null""); return null; }  JsonParser returnJsonParser = mapper.treeAsTokens(jsonObject.get(""result"")); JavaType returnJavaType = TypeFactory.defaultInstance().constructType(returnType);  return mapper.readValue(returnJsonParser, returnJavaType); }  // no return type return null; } "	0	0	1	0	1	0
"public void initMenu() { mMenu = new Menu((int) getResources().getDimension(R.dimen.slv_item_height), new ColorDrawable(Color.LTGRAY), true); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width)) .setBackground(new ColorDrawable(Color.RED)) .setText(""One"") .setTextColor(Color.GRAY) .setTextSize((int) getResources().getDimension(R.dimen.txt_size)) .build()); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width)) .setBackground(new ColorDrawable(Color.GREEN)) .setText(""Two"") .setTextColor(Color.BLACK) .setTextSize((int) getResources().getDimension(R.dimen.txt_size)) .build()); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width) + 30) .setBackground(new ColorDrawable(Color.BLUE)) .setText(""Three"") .setDirection(MenuItem.DIRECTION_RIGHT) .setTextColor(Color.BLACK) .setTextSize((int) getResources().getDimension(R.dimen.txt_size)) .build()); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width_img)) .setBackground(new ColorDrawable(Color.BLACK)) .setDirection(MenuItem.DIRECTION_RIGHT) .setIcon(getResources().getDrawable(R.drawable.ic_launcher)) .build()); } "	0	0	1	1	0	0
public synchronized boolean has(int expectedNumOfIds) { return available >= expectedNumOfIds; } 	1	0	1	1	1	0
"protected void addGroupedWorkToDatabase(RecordIdentifier primaryIdentifier, GroupedWorkBase groupedWork, boolean primaryDataChanged) { //Check to see if we need to ungroup this if (recordsToNotGroup.contains(primaryIdentifier.toString())){ groupedWork.makeUnique(primaryIdentifier.toString()); }  String groupedWorkPermanentId = groupedWork.getPermanentId();  //Check to see if we are doing a manual merge of the work if (mergedGroupedWorks.containsKey(groupedWorkPermanentId)){ groupedWorkPermanentId = handleMergedWork(groupedWork, groupedWorkPermanentId); }  //Add the work to the database numRecordsProcessed++; long groupedWorkId = -1; try{ if (existingGroupedWorks.containsKey(groupedWorkPermanentId)){ //There is an existing grouped record groupedWorkId = existingGroupedWorks.get(groupedWorkPermanentId);  //Mark that the work has been updated //Only mark it as updated if the data for the primary identifier has changed if (primaryDataChanged) { markWorkUpdated(groupedWorkId); }  } else { //Need to insert a new grouped record insertGroupedWorkStmt.setString(1, groupedWork.getTitle()); insertGroupedWorkStmt.setString(2, groupedWork.getAuthor()); insertGroupedWorkStmt.setString(3, groupedWork.getGroupingCategory()); insertGroupedWorkStmt.setString(4, groupedWorkPermanentId); insertGroupedWorkStmt.setLong(5, new Date().getTime() / 1000);  insertGroupedWorkStmt.executeUpdate(); ResultSet generatedKeysRS = insertGroupedWorkStmt.getGeneratedKeys(); if (generatedKeysRS.next()){ groupedWorkId = generatedKeysRS.getLong(1); } generatedKeysRS.close(); numGroupedWorksAdded++;  //Add to the existing works so we can optimize performance later existingGroupedWorks.put(groupedWorkPermanentId, groupedWorkId); updatedAndInsertedWorksThisRun.add(groupedWorkId); }  //Update identifiers addPrimaryIdentifierForWorkToDB(groupedWorkId, primaryIdentifier); //We no longer utilize secondary identifiers for works. We can skip calling this now //addIdentifiersForRecordToDB(groupedWorkId, groupedWork.getIdentifiers(), primaryIdentifier); }catch (Exception e){ logger.error(""Error adding grouped record to grouped work "", e); }  } "	0	0	1	0	1	0
"@Override public String process(AnnotatedRecord i) throws Exception { String to_write = """"; for (String field : i.getFieldNames()) { to_write += i.getClass().getMethod(""get"" + field).invoke(i) + ""\t""; }  for (String additionalValue : i.getAdditionalProperties().values()) { to_write += additionalValue + ""\t""; }  return to_write.trim(); } "	0	0	0	1	1	0
"public static CharacterDetailFragment newInstance(Character character) { CharacterDetailFragment fragment = new CharacterDetailFragment(); Bundle args = new Bundle(); args.putParcelable(""playerID"", Parcels.wrap(character)); fragment.setArguments(args); return fragment; } "	1	0	1	1	1	0
"@Test public void testGetStat_gauss() throws Exception { BallisticWeapon gauss = (BallisticWeapon) ItemDB.lookup(""GAUSS RIFLE""); assertEquals(gauss.getDamagePerShot() / gauss.getHeat(null), gauss.getStat(""d/h"", null), 0.0); } "	0	0	0	1	0	0
"@Test public void testGetSecondsPerShot_mg() throws Exception { Weapon mg = (Weapon) ItemDB.lookup(""MACHINE GUN""); assertTrue(mg.getSecondsPerShot(null) > 0.05); } "	0	0	1	1	0	0
"@Override public boolean loginUser(String username, String password) throws ServerProxyException { String postData = serializer.sCredentials(username, password); String urlPath = ""/user/login"";  try{ String response = doJSONPost(urlPath, postData, true, false); } catch(ServerProxyException e){ if(e.getMessage().toLowerCase().contains(""failed to login"")){ return false; } else throw e; }  return true;  } "	1	0	1	1	1	0
"@Test public void testGetBuildVersion() { Assert.assertEquals(""Build version must be 0s"", ""0.0.0.0"", EwsUtilities.getBuildVersion()); } "	0	0	1	1	1	0
"private void logonPressed() { final String userName = m_userName.getText(); final boolean anonymous = m_anonymous.isSelected(); if (!DbUser.isValidUserName(userName)) { JOptionPane.showMessageDialog(this, DbUser.getInvalidUserNameReason(userName), ""Invalid Username"", JOptionPane.ERROR_MESSAGE); return; } else if (m_password.getPassword().length == 0 && !anonymous) { JOptionPane.showMessageDialog(LoginPanel.this, ""You must enter a password"", ""No Password"", JOptionPane.ERROR_MESSAGE); return; } else if (m_password.getPassword().length < 3 && !anonymous) { JOptionPane.showMessageDialog(LoginPanel.this, ""Passwords must be at least three characters long"", ""Invalid password"", JOptionPane.ERROR_MESSAGE); return; } m_returnValue = ReturnValue.LOGON; m_dialog.setVisible(false); } "	0	0	0	0	0	1
"public static void loop(String name){ if(!enabled || !(FEResources.getAudioVolume()>0)) return; if(name.equals(current)) return; current = name; loadAudioNames();  try{ String setting = FEResources.getAudioSetting(name.toUpperCase()); Audio b; if(setting.equals(""random"")){ Random r = new Random(); setting = name + ""_"" + songs.get(name).get(r.nextInt(songs.get(name).size())); if(setting.split(""_"").length<2) setting = name; } b = AudioLoader.getAudio(""WAV"", ResourceLoader.getResourceAsStream(""res/music/""+setting+"".wav"")); b.playAsMusic(1.0f, FEResources.getAudioVolume(), true); } catch (Exception e){ e.printStackTrace(); System.err.println(""Warn: Bad sound configuration: ""+name); try{ Audio b = AudioLoader.getAudio(""OGG"", ResourceLoader.getResourceAsStream(""res/music/""+name+"".wav"")); b.playAsMusic(1.0f, FEResources.getAudioVolume(), true); }catch(Exception f){} } } "	0	0	1	0	0	0
public void action() { Game.getInstance().addLives(1); } 	0	0	1	0	0	0
public ArrayWritable createArrayWritable(Object obj) throws SerDeException { return serde.createStruct(obj, objInspector); } 	1	0	0	0	1	0
"@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {  HttpServletRequest httpRequest = (HttpServletRequest) request; HttpServletResponse httpServletResponse = (HttpServletResponse) response; try {  String requestURL = httpRequest.getRequestURL().toString(); if (!requiresAuthentication(requestURL)) { chain.doFilter(request, response); } String rawAuthenticationToken = httpRequest.getHeader(this.tokenHeader); if (tokenHeader == null || !tokenHeader.startsWith(authenticationTokenSchema)) { throw new JWTException(""Missing or invalid Authorization header.""); } String parsedAuthenticationToken = removeAuthenticationSchemaFromHeader(rawAuthenticationToken);  if (parsedAuthenticationToken != null && SecurityContextHolder.getContext().getAuthentication() == null) { String username = verifier.verify(parsedAuthenticationToken); UserDetails userDetails = this.userDetailsService.loadUserByUsername(username); if (userDetails.isEnabled() && userDetails.getUsername().equals(username)) { UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities()); authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(httpRequest)); SecurityContextHolder.getContext().setAuthentication(authentication); } } chain.doFilter(request, response); } catch (JWTException ex) { Logger.getLogger(AuthenticationTokenFilter.class.getName()).log(Level.SEVERE, null, ex); httpServletResponse.setStatus(HttpStatus.UNAUTHORIZED.value()); PrintWriter out = httpServletResponse.getWriter(); Gson gson = new Gson(); LinkedHashMap<String, String> results = new LinkedHashMap<String, String>(); results.put(""httpStatusCode"", HttpStatus.UNAUTHORIZED.toString()); results.put(""errorMessage"", ""Access Denied""); out.write(gson.toJson(results)); } } "	1	1	1	1	1	0
"public boolean bindTo(ZigBeeEndpoint endpoint, int clusterId) throws ZigBeeNetworkManagerException { logger.info(""Binding from endpoint {} to {} for cluster {}"", new Object[]{ getEndpointId(), endpoint.getEndpointId(), new Integer(clusterId) });  final ZDO_BIND_RSP response = networkManager.sendZDOBind(new ZDO_BIND_REQ( (short) getNode().getNetworkAddress(), (short) clusterId, IEEEAddress.fromColonNotation(getNode().getIeeeAddress()), (byte) endPointAddress, IEEEAddress.fromColonNotation(endpoint.getNode().getIeeeAddress()), (byte) endpoint.getDeviceTypeId() )); if (response == null || response.Status != 0) { logger.warn(""ZDO_BIND_REQ failed due to {}, unable to bind from endpoint {} to {} for cluster {}"", new Object[]{ ResponseStatus.getStatus(response.Status) ,getEndpointId(), endpoint.getEndpointId(), new Integer(clusterId) }); return false; } return true; } "	0	0	0	0	0	1
public String getLocations() { return locations; } 	0	0	0	0	0	1
"private Set<String> extractValues(XPath xPath, Node row){ Set<String> values = new HashSet<String>(); try { NodeList valueNodes =  (NodeList) xPath.evaluate(""field_value/Row/value"", row, XPathConstants.NODESET); for (int i = 0; i < valueNodes.getLength(); i++) { values.add(valueNodes.item(i).getTextContent()); } } catch (XPathExpressionException e) { LOG.error(Constants.EXCEPTION,e); } return values; } "	0	0	1	1	1	0
"@Override public boolean onCreateOptionsMenu(Menu menu) { if (!puz.isUpdatable()) { MenuItem showItem = menu.add( this.showErrors ? ""Hide Errors"" : ""Show Errors"").setIcon( android.R.drawable.ic_menu_view); if (ShortyzApplication.isTabletish(metrics)) { utils.onActionBarWithText(showItem); }  SubMenu reveal = menu.addSubMenu(""Reveal"").setIcon( android.R.drawable.ic_menu_view); reveal.add(createSpannableForMenu(""Letter"")).setTitleCondensed(""Letter""); reveal.add(createSpannableForMenu(""Word"")).setTitleCondensed(""Word""); reveal.add(createSpannableForMenu(""Puzzle"")).setTitleCondensed(""Puzzle""); if (ShortyzApplication.isTabletish(metrics)) { utils.onActionBarWithText(reveal); } } else { menu.add(""Show Errors"").setEnabled(false) .setIcon(android.R.drawable.ic_menu_view); menu.add(""Reveal"").setIcon(android.R.drawable.ic_menu_view) .setEnabled(false); }  menu.add(""Clues"").setIcon(android.R.drawable.ic_menu_agenda); Menu clueSize = menu.addSubMenu(""Clue Text Size""); clueSize.add(createSpannableForMenu(""Small"")).setTitleCondensed(""Small""); clueSize.add(createSpannableForMenu(""Medium"")).setTitleCondensed(""Medium""); clueSize.add(createSpannableForMenu(""Large"")).setTitleCondensed(""Large""); Menu zoom = menu.addSubMenu(""Zoom""); zoom.add(createSpannableForMenu(""Zoom In"")).setTitleCondensed(""Zoom In"");  if (RENDERER.getScale() < RENDERER.getDeviceMaxScale()) zoom.add(createSpannableForMenu(""Zoom In Max"")).setTitleCondensed(""Zoom In Max"");  zoom.add(createSpannableForMenu(""Zoom Out"")).setTitleCondensed(""Zoom Out""); zoom.add(createSpannableForMenu(""Fit to Screen"")).setTitleCondensed(""Fit to Screen""); zoom.add(createSpannableForMenu(""Zoom Reset"")).setTitleCondensed(""Zoom Reset""); menu.add(""Info"").setIcon(android.R.drawable.ic_menu_info_details); menu.add(""Help"").setIcon(android.R.drawable.ic_menu_help); menu.add(""Settings"").setIcon(android.R.drawable.ic_menu_preferences);  return true; } "	0	0	1	0	1	0
"static public RowFlagChange load(LineNumberReader reader, Pool pool) throws Exception { int row = -1; boolean oldFlagged = false; boolean newFlagged = false;  String line; while ((line = reader.readLine()) != null && !""/ec/"".equals(line)) { int equal = line.indexOf('='); CharSequence field = line.subSequence(0, equal); String value = line.substring(equal + 1);  if (""row"".equals(field)) { row = Integer.parseInt(value); } else if (""oldFlagged"".equals(field)) { oldFlagged = Boolean.parseBoolean(value); } else if (""newFlagged"".equals(field)) { oldFlagged = Boolean.parseBoolean(value); } }  RowFlagChange change = new RowFlagChange(row, newFlagged); change.oldFlagged = oldFlagged;  return change; } "	1	0	1	1	1	0
"private static String auditUserDefinedType(DataType_c dataType) { String result = ""Checking data type "" + dataType.getName() + CR; Package_c pkg = Package_c.getOneEP_PKGOnR8000(PackageableElement_c .getOnePE_PEOnR8001(dataType)); if (pkg != null) { String typeName = VerifierInvocationHandler.pathToClassName(pkg .Getpath("""") + ""::"" + dataType.getName()); Class<?> realizedUDT = null; BPClassLoader bpcl = Vm_c.getVmCl(pkg.Getsystemid()); try { realizedUDT = bpcl.loadClass(typeName); } catch (ClassNotFoundException cnf) { result += ""User Data type "" + typeName + "" not found, mapping will be performed to default core type."" + CR; } if (realizedUDT != null) { Method getAccessor = null; Method setAccessor = null; try { getAccessor = realizedUDT.getDeclaredMethod(""getValue"", new Class<?>[0]); } catch (SecurityException e) { result += ""Security exception getting "" + ""realized user data type read accessor for: "" + dataType.getName() + ""."" + CR; } catch (NoSuchMethodException e) { // Expected outcome, do nothing } try { Class<?> coreType = getClassForCoreTypeOf(dataType, false); setAccessor = realizedUDT.getDeclaredMethod(""setValue"", new Class<?>[] { coreType }); } catch (SecurityException e) { result += ""Security exception getting "" + ""realized user data type write accessor for: "" + dataType.getName() + ""."" + CR; } catch (NoSuchMethodException e) { // Expected outcome, do nothing } if (getAccessor != null) { if ((getAccessor.getModifiers() & Modifier.PUBLIC) == 0) { result += ""Read accessor for "" + dataType.getName() + "" must be public."" + CR; } if ((getAccessor.getModifiers() & Modifier.STATIC) == 1) { result += ""Read accessor for "" + dataType.getName() + "" must be non-static."" + CR; } } if (setAccessor != null) { if ((setAccessor.getModifiers() & Modifier.PUBLIC) == 0) { result += ""Write accessor for "" + dataType.getName() + "" must be public."" + CR; } if ((setAccessor.getModifiers() & Modifier.STATIC) == 1) { result += ""Write accessor for "" + dataType.getName() + "" must be non-static."" + CR; } } if (getAccessor == null || setAccessor == null) { Field field = null; try { field = realizedUDT.getDeclaredField(""value""); } catch (SecurityException e) { result += ""Security exception getting realized field: "" + ""value."" + CR; result += e.getLocalizedMessage() + CR; } catch (NoSuchFieldException e) { result += ""No accessors or value field found for: "" + dataType.getName() + ""."" + CR; } if (field != null) { if ((field.getModifiers() & Modifier.PUBLIC) == 0) { if (getAccessor == null && setAccessor == null) { result += ""Field 'value' "" + "" must be public or preferably, "" + ""get and set accessors provided."" + CR; } else if (getAccessor != null) { result += ""Missing write accessor for: "" + dataType.getName() + ""."" + CR; } else if (setAccessor != null) { result += ""Missing write accessor for: "" + dataType.getName() + ""."" + CR; } } else { result += ""Value field for "" + dataType.getName() + "" is public. Recommend "" + ""providing read and write accessors."" + CR; } if ((field.getModifiers() & Modifier.STATIC) == 1) { result += ""Value field for "" + dataType.getName() + "" must be non-static."" + CR; } } } } } return result; } "	0	0	0	0	0	1
"public List<ClientDetails> listClientDetails() {  List<ClientDetails> allClientDetails = new ArrayList<>();  try { EtcdResponsePromise<EtcdKeysResponse> promise = etcdClient.getDir(EtcdPaths.CD_PATH).recursive().send(); EtcdKeysResponse response = promise.get(); List<EtcdKeysResponse.EtcdNode> allClients = response.node.nodes; for (EtcdKeysResponse.EtcdNode client : allClients) { allClientDetails.add(createClientDetails(client.value)); } return allClientDetails; } catch (IOException | TimeoutException | EtcdException e) { e.printStackTrace(); throw new RuntimeException(""Change it to something more elegance""); } } "	0	0	0	0	0	1
public static void visualizeGraph(DirectedGraph<Integer, MyEdge> graph, String title) { // The visualization. Code from JUNG Graph<Integer, String> covGraph = convertGraphForVisualization(graph);  // Layout<V, E>, VisualizationComponent<V,E> Layout<Integer, String> layout = new CircleLayout(covGraph); layout.setSize(new Dimension(800,600)); BasicVisualizationServer<Integer,String> vv = new BasicVisualizationServer<Integer,String>(layout); vv.setPreferredSize(new Dimension(850,650)); // Setup up a new vertex to paint transformer... Transformer<Integer,Paint> vertexPaint = new Transformer<Integer,Paint>() { public Paint transform(Integer i) { return Color.GREEN; } }; // Set up a new stroke Transformer for the edges float dash[] = {10.0f}; final Stroke edgeStroke = new BasicStroke(1.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10.0f, dash, 0.0f); Transformer<String, Stroke> edgeStrokeTransformer = new Transformer<String, Stroke>() { public Stroke transform(String s) { return edgeStroke; } }; vv.getRenderContext().setVertexFillPaintTransformer(vertexPaint); vv.getRenderContext().setEdgeStrokeTransformer(edgeStrokeTransformer); vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller()); vv.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller()); vv.getRenderer().getVertexLabelRenderer().setPosition(Position.CNTR);  JFrame frame = new JFrame(title); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.getContentPane().add(vv); frame.pack(); frame.setVisible(true);  } 	0	0	1	1	0	0
public static void visualizeListOfGraphs( List<DirectedGraph<Integer, MyEdge>> graphList, String prefix) {  int num = 0; for (DirectedGraph<Integer, MyEdge> temp : graphList){ visualizeGraph(temp, prefix+num++); } } 	0	0	1	0	0	0
"public void setRewardSteem(Asset rewardSteem) { if (rewardSteem == null) { throw new InvalidParameterException(""The STEEM reward can't be null.""); } else if (!rewardSteem.getSymbol().equals(AssetSymbolType.VESTS)) { throw new InvalidParameterException(""The STEEM reward must be of symbol type STEEM.""); } else if (rewardSteem.getAmount() < 0) { throw new InvalidParameterException(""Cannot claim a negative STEEM amount""); }  this.rewardSteem = rewardSteem; } "	0	0	0	1	1	0
"private void syncAllEvents() throws Exception { logger.info(""Syncing all events...""); String pageToken = null; this.events = null; do { this.calendarRequest.setPageToken(pageToken);  try { this.events = this.calendarRequest.execute(); } catch (GoogleJsonResponseException e) { if (e.getStatusCode() == 410) { logger.info(""Invalid sync token, clearing event store and re-syncing...""); dataStoreSyncSettings.delete(SYNC_TOKEN_KEY); dataStoreEvent.clear(); this.sync(); } else { throw e; } }  List<Event> items = this.events.getItems(); if (items.size() == 0) { logger.info(""No new events to sync.""); } else { for (Event event : items) { this.syncEventFromGoogle(event); } }  pageToken = this.events.getNextPageToken(); } while (pageToken != null); } "	0	0	0	0	0	1
public boolean is_blank() { return ascii.length == 0 && (text_path.equals(EMPTY_PAPER_REF) || text_path.isEmpty()); } 	1	0	0	0	1	0
"@GET @Path(""CalendarioMilestones({id})/tags"") public List<String> getTags(@PathParam(""id"") Long id) { return calendarioMilestoneManager.findDescFoglieByIdMilestone(id); } "	0	0	1	1	0	0
@Override public EntryProof getEntryProof(int entryNumber, int totalEntries) { checkpoint(); List<HashValue> auditProof = withVerifiableLog(verifiableLog -> verifiableLog.auditProof(entryNumber, totalEntries) .stream() .map(hashBytes -> new HashValue(HashingAlgorithm.SHA256, bytesToString(hashBytes))) .collect(Collectors.toList()));  return new EntryProof(Integer.toString(entryNumber), auditProof); } 	0	0	1	1	0	0
"@Override public void postIteration(final MasterContext<MASTER_RESULT, WORKER_RESULT> context) { // release worker results after iteration, this is to release memory earlier context.setWorkerResults(null);  new BasicCoordinatorCommand() { @Override public void doExecute() throws KeeperException, InterruptedException { // set master result in each iteration. NettyMasterCoordinator.this.masterResult = context.getMasterResult(); // update master halt status. updateMasterHaltStatus(context);  // create master znode boolean isSplit = false; String appCurrentMasterNode = getCurrentMasterNode(context.getAppId(), context.getCurrentIteration()) .toString(); String appCurrentMasterSplitNode = getCurrentMasterSplitNode(context.getAppId(), context.getCurrentIteration()).toString(); LOG.debug(""master result:{}"", context.getMasterResult()); final long start = System.nanoTime(); try { byte[] bytes = getMasterSerializer().objectToBytes(context.getMasterResult()); isSplit = setBytesToZNode(appCurrentMasterNode, appCurrentMasterSplitNode, bytes, CreateMode.PERSISTENT); // after master result and status set in zookeeper, clear resources here at once for next iteration. // there is race condition here, after master znode is visible, worker computes result and send // results to master, while at here current iteration is still not next iteration. synchronized(LOCK) { clear(context.getProps()); // update current iteration to avoid receive messages of last iteration in ServerHandler NettyMasterCoordinator.this.currentInteration = context.getCurrentIteration() + 1; NettyMasterCoordinator.this.canUpdateWorkerResultMap = true; } } catch (KeeperException.NodeExistsException e) { LOG.warn(""Has such node:"", e); } LOG.info(""set results to zookeeper with time {}ms"", TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));  // cleaning up znode, 0 is needed for fail-over. final int resultCleanUpInterval = NumberFormatUtils.getInt( context.getProps().getProperty(GuaguaConstants.GUAGUA_CLEANUP_INTERVAL), GuaguaConstants.GUAGUA_DEFAULT_CLEANUP_INTERVAL); // clean resources async if(context.getCurrentIteration() >= (resultCleanUpInterval + 1)) { final boolean isLocalSplit = isSplit; NettyMasterCoordinator.this.cleanOldZkDataThreadPool.submit(new Runnable() { @Override public void run() { String znode = getMasterNode(context.getAppId(), context.getCurrentIteration() - resultCleanUpInterval).toString(); try { getZooKeeper().deleteExt(znode, -1, false); if(isLocalSplit) { znode = getCurrentMasterSplitNode(context.getAppId(), context.getCurrentIteration() - resultCleanUpInterval).toString(); getZooKeeper().deleteExt(znode, -1, true); } } catch (KeeperException.NoNodeException e) { if(System.nanoTime() % 20 == 0) { LOG.warn(""No such node:{}"", znode); } } catch (KeeperException ignore) { // if failed, it's OK, just for cleaning } catch (InterruptedException ignore) { // if failed, it's OK, just for cleaning } } }); }  LOG.info(""master results write to znode.""); } }.execute(); } "	0	0	1	0	0	0
@Override public void onStateChanged(@NonNull View bottomSheet, int newState) { if (mAdvancedEditorContainer != null && mIsCollapsible && newState == BottomSheetBehavior.STATE_COLLAPSED) { setAdvancedEditorVisible(false); } } 	0	0	0	0	0	1
public void putDouble(String key, double value) { checkForNullKey(key); putString(key, String.valueOf(value)); } 	1	0	0	0	1	0
"@Value(""classpath:study-defaults/email-verification-subject.txt"") public void setDefaultEmailVerificationTemplateSubject(org.springframework.core.io.Resource resource) { this.defaultEmailVerificationTemplateSubject = BridgeUtils.toStringQuietly(resource); } "	0	0	1	1	0	0
@Autowired public void setDirectoryDao(DirectoryDao directoryDao) { this.directoryDao = directoryDao; } 	0	0	1	1	0	0
"@Value(""classpath:study-defaults/email-verification.txt"") public void setDefaultEmailVerificationTemplate(org.springframework.core.io.Resource resource) { this.defaultEmailVerificationTemplate = BridgeUtils.toStringQuietly(resource); } "	0	0	1	1	0	0
@Autowired public void setStudyDao(StudyDao studyDao) { this.studyDao = studyDao; } 	0	0	1	1	0	0
@Autowired public void setValidator(StudyValidator validator) { this.validator = validator; } 	0	0	1	0	0	0
@Autowired public void setStudyConsentService(StudyConsentService studyConsentService) { this.studyConsentService = studyConsentService; } 	0	0	1	1	0	0
public DisplayBase animator(Animator animator) { this.mAnimator = animator; mAnimParameter = mAnimator.getInitialAnimParameter(); return this; } 	0	0	0	0	0	1
"@Path(""/nodes/node/import/{dest-id}"") @POST public String postImportNode(String xmlNode, @CookieParam(""user"") String user, @CookieParam(""credential"") String token, @QueryParam(""group"") int groupId, @PathParam(""dest-id"") String parentId,@Context ServletConfig sc,@Context HttpServletRequest httpServletRequest, @QueryParam(""srcetag"") String semtag, @QueryParam(""srcecode"") String code, @QueryParam(""uuid"") String srcuuid) { UserInfo ui = checkCredential(httpServletRequest, user, token, null); Connection c = null;  try { c = SqlUtils.getConnection(servContext); String returnValue = dataProvider.postImportNode(c, new MimeType(""text/xml""), parentId, semtag, code, srcuuid, ui.userId, groupId).toString();  logRestRequest(httpServletRequest, xmlNode, returnValue, Status.OK.getStatusCode());  if(returnValue == ""faux"") { throw new RestWebApplicationException(Status.FORBIDDEN, ""Vous n'avez pas les droits d'acces""); }  return returnValue; } catch(RestWebApplicationException ex) { throw new RestWebApplicationException(Status.FORBIDDEN, ex.getResponse().getEntity().toString()); } catch(Exception ex) { ex.printStackTrace(); logRestRequest(httpServletRequest, xmlNode,ex.getMessage()+""\n\n""+javaUtils.getCompleteStackTrace(ex), Status.INTERNAL_SERVER_ERROR.getStatusCode());  throw new RestWebApplicationException(Status.INTERNAL_SERVER_ERROR, ex.getMessage()); } finally { try { if( c != null ) c.close(); } catch( SQLException e ){ e.printStackTrace(); } } } "	0	0	1	0	0	0
"private void loadConfigurationFromServer() { AsyncCallback<ConfigurationData> callback = new AsyncCallback<ConfigurationData>() { public void onSuccess(ConfigurationData data) { SearchPanel.this.configuration = data; }  public void onFailure(Throwable caught) { logger.severe(""Error loading configuration: "" + caught.getMessage()); }  }; configurationService.getConfiguration(callback); } "	0	0	1	1	1	0
"public static void save() throws IOException { FileWriter writer = new FileWriter(FILE); PROP.store(writer, ""Robot Configuration""); writer.close(); } "	0	0	1	0	0	0
"public MetadataProvider getMetadataProvider() throws OAException { if (_oMetadataProvider != null) { _oLogger.debug(""Returning existing MetadataProvider for SAML2 IDP '""+_sID+""'""); return _oMetadataProvider; }  // If there is a local metadata document available, return the // MetadataProvider that is based on this document if (_oMetadataXMLObject != null) { _oLogger.debug(""Creating new XMLObject MetadataProvider for SAML2 IDP '""+_sID+""'"");  XMLObjectMetadataProvider oMP = new XMLObjectMetadataProvider(_oMetadataXMLObject); oMP.initialize(); _oMetadataProvider = oMP; return oMP;  } if (_sMetadata != null) { _oLogger.debug(""Creating new XML-String MetadataProvider for SAML2 IDP '""+_sID+""'"");  // This is the case after de-serialization (i.e. when session resumes) // Re-instantiate XMLProvider from retrieved metadata // No cache re-evaluation, but this performs better try { BasicParserPool parserPool = new BasicParserPool(); parserPool.setNamespaceAware(true);  StringReader oSR = new StringReader(_sMetadata);  _oMetadataXMLObject = XMLObjectHelper.unmarshallFromReader(parserPool, oSR);  XMLObjectMetadataProvider oMP = new XMLObjectMetadataProvider(_oMetadataXMLObject); oMP.initialize();  _oMetadataProvider = oMP; return oMP;  } catch (XMLParserException e) { _oLogger.warn(""XMLParser exception with establishing metadata for SAML2IDP, trying file/url: ""+e.getMessage()); } catch (UnmarshallingException e) { _oLogger.warn(""Unmarshalling exception with establishing metadata for SAML2IDP, trying file/url: ""+e.getMessage()); } }  _oLogger.debug(""Creating new MetadataProvider from configured source for SAML2 IDP '""+_sID+""'"");  // First time a MetadataProvider request is being handled for this SAML2IDP instance: MetadataProviderConfiguration oMPC = new MetadataProviderConfiguration( _sMetadataURL, 0, _sMetadataFile, _sMetadata); String sConfiguredProviderFingerprint = oMPC.getFingerprint();  IMetadataProviderManager oMPM = null; MetadataProvider oMP = null;  if (_sMPMId != null) oMPM = MdMgrManager.getInstance().getMetadataProviderManager(_sMPMId);  // Can we get a managed MetadataProvider? if (oMPM != null) { oMP = oMPM.getProviderFor(_sID, _dLastModified); }  if (oMP != null) { // Is it still valid? String sCachedProviderFingerprint = MetadataProviderUtil.getMetadataProviderFingerprint(oMP);  if (! sCachedProviderFingerprint.equals(sConfiguredProviderFingerprint)) { _oLogger.info(""Metadata configuration changed; re-initializing metadata for IDP ""+_sID); // No longer valid; invalidate the version from cache oMPM.removeProviderFor(_sID); oMP = null; } else { // For the purpose of logging: if (_oLogger.isDebugEnabled()) { String sNextRefresh = null;  if (oMP instanceof AbstractReloadingMetadataProvider) { DateTime oNextRefresh = ((AbstractReloadingMetadataProvider) oMP).getNextRefresh(); sNextRefresh = oNextRefresh.toString(); } _oLogger.debug(""Using cached MetadataProvider for IDP ""+_sID+ (sNextRefresh==null?"""":"" (next refresh: ""+sNextRefresh+"")"")); } } }  if (oMP == null) { oMP = MetadataProviderUtil.createMetadataProvider(_sID, oMPC, oMPM); }  _oMetadataProvider = oMP;  return _oMetadataProvider; } "	0	0	0	0	0	1
"public JSONObject getXPUB(String[] xpubs) throws Exception {  final String url = getRoute() + StringUtils.join(xpubs, ""|"") + getApiCode();  String response = WebUtil.getInstance().getRequest(url);  return new JSONObject(response); } "	0	0	0	0	0	1
public static Map getMethods(Class targetClass, boolean staticMethods) { ClassCache cache = (staticMethods ? _staticMethodCache : _instanceMethodCache); Map result;  if ((result = (Map) cache.get(targetClass)) == null) { synchronized (cache) { if ((result = (Map) cache.get(targetClass)) == null) { result = new HashMap(23);  for (Class c = targetClass; c != null; c = c.getSuperclass()) { Method[] ma = c.getMethods();  for (int i = 0, icount = ma.length; i < icount; i++) { // skip over synthetic methods  if (!isMethodCallable(ma[i])) continue;  if (Modifier.isStatic(ma[i].getModifiers()) == staticMethods) { List ml = (List) result.get(ma[i].getName());  if (ml == null) result.put(ma[i].getName(), ml = new ArrayList());  ml.add(ma[i]); } } } cache.put(targetClass, result); } } } return result; } 	0	0	1	1	1	0
"@POST @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Path(""/query/sql"") public Response findChannelsUsingSQL(@Context HttpHeaders headers,QueryChannelRequest queryChannelRequest) {  Connection con = null; PreparedStatement pstmt = null; ResultSet rs = null; Map<String,Integer> channelCountMap = new HashMap<String,Integer>(3); Map<String,Integer> channelSubscriptionMap = new HashMap<String,Integer>(3); try { con = DbConnectionManager.getConnection();   StringBuffer userInClause = new StringBuffer(); for(String user:queryChannelRequest.getSubscribers()) {  JID from = RestUtils.createJID(user, queryChannelRequest.getMmxAppId(), queryChannelRequest.getDeviceId()); if(userInClause.length() == 0) { userInClause.append(""'"").append(from).append(""'""); }else{ userInClause.append("",'"").append(from).append(""'""); } }  String sql = ""SELECT nodeID,count(*) FROM ofPubsubSubscription where state = 'subscribed' AND nodeID "" + ""like '"" + ""/"" + queryChannelRequest.getMmxAppId() + ""%' AND "" + ""jid in ("" + userInClause.toString() + "") group by nodeID""; pstmt = con.prepareStatement(sql); rs = pstmt.executeQuery();  while (rs.next()) { channelCountMap.put(rs.getString(1),rs.getInt(2)); }  StringBuffer channelInClause = new StringBuffer(); for(String node:channelCountMap.keySet()) { if(channelInClause.length() == 0) { channelInClause.append(""'"").append(node).append(""'""); }else{ channelInClause.append("",'"").append(node).append(""'""); } }  String countSql = ""SELECT nodeID, count(*) FROM ofPubsubSubscription where state = 'subscribed' AND "" + ""nodeID in ("" + channelInClause + "") group by nodeID"";  pstmt = con.prepareStatement(countSql); rs = pstmt.executeQuery();  while (rs.next()) { channelSubscriptionMap.put(rs.getString(1),rs.getInt(2)); }  List<String> filteredChannels = new ArrayList<String>(3);  if(!queryChannelRequest.getMatchFilter().equals(QueryChannelRequest.MatchType.ANY_MATCH)) { //Populate the subscription count for (String channelName : channelCountMap.keySet()) {  int totalSubscriptionCount = channelSubscriptionMap.get(channelName); int matchingSubscriptionCount = channelCountMap.get(channelName); if (queryChannelRequest.getMatchFilter().equals(QueryChannelRequest.MatchType.EXACT_MATCH)) {  if (matchingSubscriptionCount == totalSubscriptionCount && matchingSubscriptionCount == queryChannelRequest.getSubscribers().size()) { filteredChannels.add(channelName); }  } else if (queryChannelRequest.getMatchFilter().equals(QueryChannelRequest.MatchType.SUBSET_MATCH)) { if (totalSubscriptionCount >= matchingSubscriptionCount && matchingSubscriptionCount >= queryChannelRequest.getSubscribers().size()) { filteredChannels.add(channelName); } } else { filteredChannels.add(channelName); }  } }else{  for (String channelName : channelCountMap.keySet()) { filteredChannels.add(channelName); }  }  List<ChannelInfo> channels = new ArrayList<ChannelInfo>(3); if(filteredChannels.size() > 0) { //convert from nodeId to name StringBuffer nodeIds = new StringBuffer(); for(String nodeId:filteredChannels) { MMXChannelId channelId = getChannelName(queryChannelRequest.getUserId(), nodeId); Node node = MMXChannelManager.getInstance().getChannelNode(queryChannelRequest.getMmxAppId(),channelId); ChannelInfo channelInfo = MMXChannelManager.getInstance().nodeToChannelInfo(null,node); channels.add(channelInfo); } } QueryChannelResponse response = new QueryChannelResponse(ErrorCode.NO_ERROR.getCode(), ""Success""); response.setChannels(channels); return RestUtils.getCreatedJAXRSResp(response);  } catch (Exception sqlex) { LOGGER.error(sqlex.getMessage(), sqlex); ErrorResponse errorResponse = new ErrorResponse(ErrorCode.UNKNOWN_ERROR, """"); return RestUtils.getBadReqJAXRSResp(errorResponse); } finally { DbConnectionManager.closeConnection(rs, pstmt, con); } } "	0	0	0	0	0	1
"private void createServerSocket() throws IOException { serverSocket = mBtAdapter.listenUsingInsecureRfcommWithServiceRecord(""ESE-Clock-Sync"", ClockSyncManager.RECORD_UUID); } "	0	0	0	0	0	1
@Override protected boolean isValidTrigger(final Trigger trigger) { boolean valid =  trigger.isEnabled() && ( trigger.getType() != null );  return valid; } 	0	0	0	0	0	1
"@Test(timeout = 180000) public void testSelectiveFlushWithBasicAndMerge() throws IOException { // Set up the configuration Configuration conf = HBaseConfiguration.create(); conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE, 300 * 1024); conf.set(FlushPolicyFactory.HBASE_FLUSH_POLICY_KEY, FlushNonSloppyStoresFirstPolicy.class.getName()); conf.setLong(FlushLargeStoresPolicy.HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN, 75 * 1024); conf.setDouble(CompactingMemStore.IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY, 0.8); // set memstore to do index compaction with merge conf.set(CompactingMemStore.COMPACTING_MEMSTORE_TYPE_KEY, String.valueOf(MemoryCompactionPolicy.BASIC)); // length of pipeline that requires merge conf.setInt(MemStoreCompactor.COMPACTING_MEMSTORE_THRESHOLD_KEY, 1);  // Intialize the HRegion HRegion region = initHRegion(""testSelectiveFlushWithBasicAndMerge"", conf); verifyInMemoryFlushSize(region); // Add 1200 entries for CF1 (CompactingMemStore), 100 for CF2 (DefaultMemStore) and 50 for CF3 for (int i = 1; i <= 1200; i++) { region.put(createPut(1, i)); if (i <= 100) { region.put(createPut(2, i)); if (i <= 50) { region.put(createPut(3, i)); } } } // Now put more entries to CF2 for (int i = 100; i < 2000; i++) { region.put(createPut(2, i)); }  long totalMemstoreSize = region.getMemstoreSize();  // Find the sizes of the memstores of each CF. MemstoreSize cf1MemstoreSizePhaseI = region.getStore(FAMILY1).getSizeOfMemStore(); MemstoreSize cf2MemstoreSizePhaseI = region.getStore(FAMILY2).getSizeOfMemStore(); MemstoreSize cf3MemstoreSizePhaseI = region.getStore(FAMILY3).getSizeOfMemStore();  // Some other sanity checks. assertTrue(cf1MemstoreSizePhaseI.getDataSize() > 0); assertTrue(cf2MemstoreSizePhaseI.getDataSize() > 0); assertTrue(cf3MemstoreSizePhaseI.getDataSize() > 0);  // The total memstore size should be the same as the sum of the sizes of // memstores of CF1, CF2 and CF3. assertEquals(totalMemstoreSize, cf1MemstoreSizePhaseI.getDataSize() + cf2MemstoreSizePhaseI.getDataSize() + cf3MemstoreSizePhaseI.getDataSize());  // Initiate in-memory Flush! ((CompactingMemStore) ((HStore)region.getStore(FAMILY1)).memstore).flushInMemory(); ((CompactingMemStore) ((HStore)region.getStore(FAMILY3)).memstore).flushInMemory(); // CF1 and CF3 should be flatten and merged so wait here to be sure the merge is done while (((CompactingMemStore) ((HStore)region.getStore(FAMILY1)).memstore) .isMemStoreFlushingInMemory()) { Threads.sleep(10); } while (((CompactingMemStore) ((HStore)region.getStore(FAMILY3)).memstore) .isMemStoreFlushingInMemory()) { Threads.sleep(10); }  // Flush-to-disk! CF2 only should be flushed region.flush(false);  MemstoreSize cf1MemstoreSizePhaseII = region.getStore(FAMILY1).getSizeOfMemStore(); MemstoreSize cf2MemstoreSizePhaseII = region.getStore(FAMILY2).getSizeOfMemStore(); MemstoreSize cf3MemstoreSizePhaseII = region.getStore(FAMILY3).getSizeOfMemStore();  // CF1 should be flushed in memory and just flattened, so CF1 heap overhead should be smaller assertTrue(cf1MemstoreSizePhaseI.getHeapSize() > cf1MemstoreSizePhaseII.getHeapSize()); // CF1 should be flushed in memory and just flattened, so CF1 data size should remain the same assertEquals(cf1MemstoreSizePhaseI.getDataSize(), cf1MemstoreSizePhaseII.getDataSize()); // CF2 should have been cleared assertEquals(0, cf2MemstoreSizePhaseII.getDataSize());  // Add the same amount of entries to see the merging for (int i = 1; i <= 1200; i++) { region.put(createPut(1, i)); if (i <= 100) { region.put(createPut(2, i)); if (i <= 50) { region.put(createPut(3, i)); } } } // Now add more puts for CF2, so that we only flush CF2 to disk for (int i = 100; i < 2000; i++) { region.put(createPut(2, i)); }  MemstoreSize cf1MemstoreSizePhaseIII = region.getStore(FAMILY1).getSizeOfMemStore();  // Flush in memory! ((CompactingMemStore) ((HStore)region.getStore(FAMILY1)).memstore).flushInMemory(); ((CompactingMemStore) ((HStore)region.getStore(FAMILY3)).memstore).flushInMemory(); // CF1 and CF3 should be merged so wait here to be sure the merge is done while (((CompactingMemStore) ((HStore)region.getStore(FAMILY1)).memstore) .isMemStoreFlushingInMemory()) { Threads.sleep(10); } while (((CompactingMemStore) ((HStore)region.getStore(FAMILY3)).memstore) .isMemStoreFlushingInMemory()) { Threads.sleep(10); } region.flush(false);  MemstoreSize cf1MemstoreSizePhaseIV = region.getStore(FAMILY1).getSizeOfMemStore(); MemstoreSize cf2MemstoreSizePhaseIV = region.getStore(FAMILY2).getSizeOfMemStore();  assertEquals(2*cf1MemstoreSizePhaseI.getDataSize(), cf1MemstoreSizePhaseIV.getDataSize()); assertEquals( cf1MemstoreSizePhaseI.getHeapSize() - cf1MemstoreSizePhaseII.getHeapSize(), cf1MemstoreSizePhaseIII.getHeapSize() - cf1MemstoreSizePhaseIV.getHeapSize()); assertEquals(3, // active, one in pipeline, snapshot ((CompactingMemStore) ((HStore)region.getStore(FAMILY1)).memstore).getSegments().size()); // CF2 should have been cleared assertEquals(""\n<<< DEBUG: The data--heap sizes of stores before/after first flushes,"" + "" CF1: "" + cf1MemstoreSizePhaseI.getDataSize() + ""/"" + cf1MemstoreSizePhaseII .getDataSize() + ""--"" + cf1MemstoreSizePhaseI.getHeapSize() + ""/"" + cf1MemstoreSizePhaseII .getHeapSize() + "", CF2: "" + cf2MemstoreSizePhaseI.getDataSize() + ""/"" + cf2MemstoreSizePhaseII.getDataSize() + ""--"" + cf2MemstoreSizePhaseI.getHeapSize() + ""/"" + cf2MemstoreSizePhaseII.getHeapSize() + "", CF3: "" + cf3MemstoreSizePhaseI.getDataSize() + ""/"" + cf3MemstoreSizePhaseII.getDataSize() + ""--"" + cf3MemstoreSizePhaseI.getHeapSize() + ""/"" + cf3MemstoreSizePhaseII.getHeapSize() + ""\n<<< AND before/after second flushes "" + "" CF1: "" + cf1MemstoreSizePhaseIII.getDataSize() + ""/"" + cf1MemstoreSizePhaseIV .getDataSize() + ""--"" + cf1MemstoreSizePhaseIII.getHeapSize() + ""/"" + cf1MemstoreSizePhaseIV .getHeapSize() + ""\n"", 0, cf2MemstoreSizePhaseIV.getDataSize());  HBaseTestingUtility.closeRegionAndWAL(region); } "	0	0	0	0	0	1
"@Override @Optional.Method(modid = Mods.ComputerCraft) public String[] getMethodNames() { return new String[] { ""isEnd"", ""isReady"", ""getSize"", ""getLabel"", ""getState"", ""setLabel"", ""setSpeed"", ""setVolume"", ""seek"", ""read"", ""write"", ""play"", ""stop"" }; } "	0	0	0	0	0	1
@Override public boolean dispatchTouchEvent(MotionEvent event) { // Normally, touch event is dispatched to presentation view only if the phone is paired with // a Cardboard viewer. This is annoying when we just want to quickly verify a Cardboard // behavior. This allows us to trigger cardboard trigger event without pair to a Cardboard. if (CommandLine.getInstance().hasSwitch(ChromeSwitches.ENABLE_VR_SHELL_DEV) && event.getActionMasked() == MotionEvent.ACTION_DOWN) { nativeOnTriggerEvent(mNativeVrShell); } return super.dispatchTouchEvent(event); } 	0	0	0	0	0	1
private void shutdownVR(boolean returnTo2D, boolean showTransition) { if (!mInVr) return; mRequestedWebVR = false; if (returnTo2D) { if (!showTransition || !mVrDaydreamApi.exitFromVr(EXIT_VR_RESULT, new Intent())) { mVrDaydreamApi.setVrModeEnabled(false); } } else { mVrDaydreamApi.setVrModeEnabled(false); mLastVRExit = SystemClock.uptimeMillis(); } mActivity.setRequestedOrientation(mRestoreOrientation); mVrShell.pause(); removeVrViews(); clearVrModeWindowFlags(); destroyVrShell(); mInVr = false; mTab.removeObserver(mTabObserver); mTab.updateFullscreenEnabledState(); mTab.updateBrowserControlsState(BrowserControlsState.SHOWN, true); } 	0	0	0	0	0	1
"@Specialization(limit = ""INLINE_CACHE_SIZE"", guards = {""contextLevel != 0"", ""receiver.getSOMClass() == rcvrClass""}) public final Object doForFurtherOuter(final SObjectWithClass receiver, @Cached(""receiver.getSOMClass()"") final SClass rcvrClass, @Cached(""getEnclosingClass(receiver)"") final SClass lexicalClass) { return getEnclosingObject(receiver, lexicalClass); } "	1	0	0	0	1	0
"@Specialization(guards = {""contextLevel != 0""}, contains = ""fixedLookup"") public final Object fallback(final SObjectWithClass receiver) { return getEnclosingObject(receiver, getEnclosingClass(receiver)); } "	1	0	1	1	1	0
"@SuppressWarnings(""javadoc"") private void flush(Element rootNode) { DOMSource ds = new DOMSource(rootNode); try { StreamResult sr = new StreamResult(out); XML_TRANSFORMER.transform(ds, sr); out.flush(); } catch (Throwable e) { throw new InternalAPIError(e); } } "	0	0	1	0	0	0
@Override public CommandResult execute() throws CommandException { List<ReadOnlyTask> lastShownList = model.getFilteredTaskList();  if (filteredTaskListIndex >= lastShownList.size()) { throw new CommandException( Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX); }  ReadOnlyTask taskToEdit = lastShownList.get(filteredTaskListIndex); Task editedTask; try { editedTask = createEditedTask(taskToEdit, editTaskDescriptor); } catch (IllegalValueException e) { throw new CommandException(e.getMessage()); }  try { model.updateTask(filteredTaskListIndex, editedTask); } catch (UniqueTaskList.DuplicateTaskException dpe) { throw new CommandException(MESSAGE_DUPLICATE_PERSON); } model.updateFilteredListToShowAll(); return new CommandResult( String.format(MESSAGE_EDIT_PERSON_SUCCESS, taskToEdit)); } 	0	0	0	0	0	1
"@Override protected void onResume() { Cursor cursor = dbManager.getPlans();  if(cursor.moveToFirst()){ plannerCursorAdapter.swapCursor(cursor); } else { showToast(""Error moving cursor to first element. DB is empty.""); }  super.onResume(); } "	0	0	0	0	0	1
public JoinRequest createJoinRequest(boolean withCredentials) { final Credentials credentials = (withCredentials && securityContext != null) ? securityContext.getCredentialsFactory().newCredentials() : null;  return new JoinRequest(Packet.VERSION, buildInfo.getBuildNumber(), address, localMember.getUuid(), localMember.isLiteMember(), createConfigCheck(), credentials, config.getMemberAttributeConfig().getAttributes()); } 	0	0	0	0	0	1
"@Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { //selectItem(position); Log.d(""BaseActivity"", String.format(""onItemClick: %d"", position)); if (position == 0) { Intent i = new Intent(); i.setClass(BaseActivity.this, LoginActivity.class); BaseActivity.this.startActivityForResult(i, LoginActivity.REQUEST_CODE_LOGIN); return; }  HashMap<String, Object> map = (HashMap<String, Object>) parent.getAdapter().getItem(position); String text = (String) map.get(""menuText""); int resid = (Integer) map.get(""icon""); //            Toast.makeText(BaseActivity.this, text, Toast.LENGTH_SHORT).show(); drawerLayout.closeDrawer(GravityCompat.START); switch (position - 1) { case 0: Intent intentMain = new Intent(BaseActivity.this, MainActivity.class); BaseActivity.this.startActivityForResult(intentMain, LoginActivity.REQUEST_CODE_LOGIN); break; case 1: Intent intent = new Intent(BaseActivity.this, ListArtistActivity.class); BaseActivity.this.startActivity(intent); break; case 2: Intent intentLab = new Intent(BaseActivity.this, LifeLabActivity.class); BaseActivity.this.startActivity(intentLab); break; case 3:  if (UserInfo.isUserLogged(BaseActivity.this)) { Intent intentFeedback = new Intent(BaseActivity.this, FeedbackActivity.class); BaseActivity.this.startActivity(intentFeedback); } else { Intent i = new Intent(); i.setClass(BaseActivity.this, LoginActivity.class); BaseActivity.this.startActivityForResult(i, LoginActivity.REQUEST_CODE_FEEDBACK); } break;  case 5: if (UserInfo.isUserLogged(BaseActivity.this)) { Intent intentCollection = new Intent(BaseActivity.this, MyCollectionActivity.class); BaseActivity.this.startActivity(intentCollection); } else { Intent i = new Intent(); i.setClass(BaseActivity.this, LoginActivity.class); BaseActivity.this.startActivityForResult(i, LoginActivity.REQUEST_CODE_MY_COLLECTION);  } break; case 6:  if (UserInfo.isUserLogged(BaseActivity.this)) { Intent intentSubscribedArtists = new Intent(BaseActivity.this, ListSubscribedArtistActivity.class); BaseActivity.this.startActivity(intentSubscribedArtists); } else { Intent i = new Intent(); i.setClass(BaseActivity.this, LoginActivity.class); BaseActivity.this.startActivityForResult(i, LoginActivity.REQUEST_CODE_SUBSCRIBED_ARTISTS);  } break; case 7: Intent intentAbout = new Intent(BaseActivity.this, AboutActivity.class); BaseActivity.this.startActivity(intentAbout); break;  case 9: ShareUtils su = new ShareUtils(BaseActivity.this); su.setUrl(CommonUtilities.SHARE_URL); su.setContent(getResources().getString(R.string.share_text)); Bitmap bmp = BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher); su.setPicture(bmp); su.share(); break;  case 10: //clear cache DataCleanUtils.cleanAllApplicationData(BaseActivity.this); break; case 11: Log.d(""BaseActivity"", ""Logout""); UserInfo.logout(BaseActivity.this); BaseActivity.this.tvusername.setText(R.string.login_gologin); BaseActivity.this.tvuserdesc.setText(R.string.login_to_see_more); break; case 4: default: break; } } "	0	0	0	0	0	1
@Override public boolean equals(Object otherWeapon) { if (!(otherWeapon instanceof Weapon)) { return false; } else { Class newWeapon = (Class) otherWeapon; return    this.getId() == newWeapon.getId() && this.getNameOfWeapon().equals(newWeapon.getNameOfWeapon()) && this.getDamage() == newWeapon.getDamage() && this.getNumberOfUses() == newWeapon.getNumberOfUses(); } } 	0	0	1	0	1	0
"@Override public List<SerialMessage> executeRefresh(ZWaveThingChannel channel, ZWaveNode node) { ZWaveThermostatFanStateCommandClass commandClass = (ZWaveThermostatFanStateCommandClass) node .resolveCommandClass(ZWaveCommandClass.CommandClass.THERMOSTAT_FAN_MODE, channel.getEndpoint()); if (commandClass == null) { return null; }  logger.debug(""NODE {}: Generating poll message for {}, endpoint {}"", node.getNodeId(), commandClass.getCommandClass().getLabel(), channel.getEndpoint()); SerialMessage serialMessage = node.encapsulate(commandClass.getValueMessage(), commandClass, channel.getEndpoint()); List<SerialMessage> response = new ArrayList<SerialMessage>(1); response.add(serialMessage); return response; } "	0	0	0	0	0	1
"@Override public String toString() { return ""ServerMessage[messageID="" + messageID + "",priority="" + this.getPriority() + "", bodySize="" + this.getBodyBuffer().capacity() + "",expiration="" + (this.getExpiration() != 0 ? new java.util.Date(this.getExpiration()) : 0) + "", durable="" + durable + "", address="" + getAddress()  + "",properties="" + properties.toString() + ""]@"" + System.identityHashCode(this); } "	0	0	0	0	0	1
"public void putTableEntry(byte[] entry) { System.out.println(""Adding table entry""); if(entry.length == 3){ try { int index = getTableIndexByDestination(entry[0]); routingTable.set(index, entry[0]); routingTable.set(index + 1, entry[1]); routingTable.set(index + 2, entry[2]); IncomingPacketHandler.printArray(routingTable.toArray()); } catch (DestinationNotInTableException e) { routingTable.add(entry[0]); routingTable.add(entry[1]); routingTable.add(entry[2]); } } } "	0	0	0	0	0	1
"@Test public void testGetNewJobID() { assertEquals(testManager.getNewJobID(), 3);  volunteerList = new ArrayList<ArrayList<String>>(); Job testJob = new Job(3, ""Test Park 4"", 5, 5, 5, ""06052015"", ""06052015"", ""testmanager@gmail.com"", volunteerList); testManager.addJob(testJob);  assertEquals(testManager.getNewJobID(), 4); } "	0	0	0	0	0	1
public String getValue() { return value; } 	0	0	0	0	0	1
public static void flipBuffers() { mSurface.flipEGL(); } 	1	0	0	0	0	0
"public static Notify generateNotificationMessage( Message message, String subscriptionReference, String publisherReference, String dialect ) {  // Build wrapper classes Notify notify = b2_factory.createNotify(); NotificationMessageHolderType holderType = b2_factory.createNotificationMessageHolderType(); NotificationMessageHolderType.Message innerMessage = b2_factory.createNotificationMessageHolderTypeMessage();  @SuppressWarnings(""unchecked"") JAXBElement msg = new JAXBElement(new QName(""npex:NotifyContent""), String.class, message.getMessage());  // Figure out what createNofity method to call if (subscriptionReference != null) { // Build a W3CEndpointReference from the subRef string holderType.setSubscriptionReference(new W3CEndpointReferenceBuilder().address(subscriptionReference).build()); } if (publisherReference != null) { // Build a W3CEndpointReference from the pubRef string holderType.setProducerReference(new W3CEndpointReferenceBuilder().address(publisherReference).build()); } if (dialect != null) { // Create the topic expression with content and dialect if provided TopicExpressionType topicType = b2_factory.createTopicExpressionType(); // Set the Dialect on the TopicExpressionType topicType.setDialect(dialect); // Add the actual topic to the TopicExpressionType topicType.getContent().add(message.getTopic().getFullTopicString()); // Add the topicExpression to the messageWrapper holderType.setTopic(topicType); }  // Set the content of innerMessage innerMessage.setAny(msg); // Add the innerMessage to holderType holderType.setMessage(innerMessage); // Add the holderType to the notify wrapper notify.getNotificationMessage().add(holderType);  return notify; } "	0	0	1	1	1	0
"@Given(""^CSDL to validate like /interaction.content contains \""([^\""]*)\""/$"") public void CSDL_to_validate_like_interaction_content_contains_(String arg1) throws Throwable { // Express the Regexp above with the code you wish you had throw new PendingException(); } "	0	0	0	0	0	1
"public Member presentDeleteMember(ArrayList<Member> members) { presentMembers(members); System.out.println(""Choose a user to delete by entering the corresponding number:""); String memberLine = in.nextLine();  if (isInteger(memberLine, members.size())){ return members.get(input - 1); }else { System.out.println(""Please provide a Integer between 1 and "" + members.size() + "".""); presentChangeMember(members); }  return null; } "	1	0	0	0	1	0
"@Override public boolean onCommand(final PlotPlayer plr, final String[] args) { final Location loc = plr.getLocation(); final Plot plot = loc.getPlotAbs(); if ((plot == null) || !plot.hasOwner()) { return !sendMessage(plr, C.NOT_IN_PLOT); } if ((!plot.isOwner(plr.getUUID())) && !Permissions.hasPermission(plr, ""plots.admin.command.continue"")) { MainUtil.sendMessage(plr, C.NO_PLOT_PERMS); return false; } if (!plot.getFlags().containsKey(""done"")) { MainUtil.sendMessage(plr, C.DONE_NOT_DONE); return false; } if (Settings.DONE_COUNTS_TOWARDS_LIMIT && (plr.getAllowedPlots() >= plr.getPlotCount())) { MainUtil.sendMessage(plr, C.NO_PERMISSION, ""plots.admin.command.continue""); return false; } if (plot.getRunning() > 0) { MainUtil.sendMessage(plr, C.WAIT_FOR_TIMER); return false; } FlagManager.removePlotFlag(plot, ""done""); MainUtil.sendMessage(plr, C.DONE_REMOVED); return true; } "	0	0	1	1	1	0
private synchronized Command schedule() { // currently FIFO // List<Long> cmds = getCommands(CommandState.PENDING); Set<Long> cmds = cmdsInState.get(CommandState.PENDING.getValue()); Set<Long> cmdsExecuting = cmdsInState.get(CommandState.EXECUTING.getValue()); if (cmds.size() == 0) { // TODO Check Status and Update // Put them into cmdsAll and cmdsInState if(statusCache.size() != 0) batchCommandStatusUpdate(); List<CommandInfo> dbcmds = getCommansFromDB(); for(CommandInfo c : dbcmds) { if(cmdsExecuting.contains(c.getCid())) continue; Command cmd = getCommand(c, ssm); cmdsAll.put(cmd.getId(), cmd); cmds.add(cmd.getId()); } if (cmds.size() == 0) return null; }  // TODO Update FIFO // Currently only get and run the first cmd long curr = cmds.iterator().next(); Command ret = cmdsAll.get(curr); cmdsAll.remove(curr); cmdsInState.remove(curr); cmdsExecuting.add(curr); return ret; } 	1	1	1	0	1	0
"public void mergeFile(File base, File override, File export) throws ConfigurationException, IOException { if (base == null || !base.exists()) { if (!override.equals(export)) { if (override.isDirectory()) { mergeDirectories(base, override, export); } else { FileUtils.copyFile(override, export); } } } else if (override == null || !override.exists()) { if (!base.equals(export)) { if (base.isDirectory()) { mergeDirectories(base, override, export); } else { FileUtils.copyFile(base, export); } } } else { if (override.isDirectory()) { mergeDirectories(base, override, export); } else if (override.getName().endsWith("".properties"")) { mergeProperties(base, override, export); } else if (!override.equals(export)) { FileUtils.copyFile(override, export); } } } "	0	0	0	1	0	0
"@Before public void init() { MockitoAnnotations.initMocks(this); RobonectEndpoint dummyEndPoint = new RobonectEndpoint(""123.456.789.123""); client = new RobonectClient(httpClientMock, dummyEndPoint); } "	0	0	0	0	0	1
"@Override public void perform() { // The faction, default to your own.. but null if console sender. Faction faction = this.argAsFaction(0, fme == null ? null : myFaction); if (faction == null) return;  if ( ! FPerm.DISBAND.has(sender, faction, true)) return;  if (faction.getFlag(FFlag.PERMANENT)) { msg(""<i>This faction is designated as permanent, so you cannot disband it.""); return; }  // Inform all players for (FPlayer fplayer : FPlayers.i.getOnline()) { String who = senderIsConsole ? ""A server admin"" : fme.describeTo(fplayer); if (fplayer.getFaction() == faction) { fplayer.msg(""<h>%s<i> disbanded your faction."", who); } else { fplayer.msg(""<h>%s<i> disbanded the faction %s."", who, faction.getTag(fplayer)); } } if (Conf.logFactionDisband) P.p.log(""The faction ""+faction.getTag()+"" (""+faction.getId()+"") was disbanded by ""+(senderIsConsole ? ""console command"" : fme.getName())+""."");  if (Econ.shouldBeUsed()) { //Give all the faction's money to the disbander double amount = Econ.getBalance(faction.getAccountId()); Econ.transferMoney(fme, faction, fme, amount, false);  if (amount > 0.0) { String amountString = Econ.moneyString(amount); msg(""<i>You have been given the disbanded faction's bank, totaling %s."", amountString); P.p.log(fme.getName() + "" has been given bank holdings of ""+amountString+"" from disbanding ""+faction.getTag()+"".""); } }  faction.detach();  SpoutFeatures.updateAppearances(); } "	0	0	1	0	1	0
"private void updateSession() { if(hasTrack) setUiColor(Color.parseColor(session.getTrack().getColor()));  Timber.d(""Updated"");  speakers.clear(); speakers.addAll(session.getSpeakers()); adapter.notifyDataSetChanged();  updateFloatingIcon();  Microlocation microlocation = session.getMicrolocation();  if(microlocation != null) { location = microlocation.getName(); text_room1.setText(microlocation.getName()); } else { location = getString(R.string.location_not_decided); text_room1.setText(location); }  text_title.setText(title); if (TextUtils.isEmpty(session.getSubtitle())) { text_subtitle.setVisibility(View.GONE); } text_subtitle.setText(session.getSubtitle());  if (hasTrack) { trackLabel.setVisibility(View.VISIBLE); text_track.setVisibility(View.VISIBLE); text_track.setText(trackName); } else { trackLabel.setVisibility(View.GONE); text_track.setVisibility(View.GONE); }  String video_link = session.getVideoUrl();  if(!Utils.isEmpty(video_link)) { playButton.setVisibility(View.VISIBLE);  if(video_link.contains(ConstantStrings.YOUTUBE)) { youtubeThumbnail.setVisibility(View.VISIBLE);  Picasso.with(this) .load(ConstantStrings.YOUTUBE_URI_1 + video_link.substring(video_link.length()-11) + ConstantStrings.YOUTUBE_URI_2) .into(youtubeThumbnail); }  playButton.setOnClickListener(v -> startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(video_link)))); }  String date = DateConverter.formatDateWithDefault(DateConverter.FORMAT_DATE_COMPLETE, session.getStartsAt()); String startTime = DateConverter.formatDateWithDefault(DateConverter.FORMAT_12H, session.getStartsAt()); String endTime = DateConverter.formatDateWithDefault(DateConverter.FORMAT_12H, session.getEndsAt());  text_start_time.setText(startTime); text_end_time.setText(endTime); text_date.setText(date); Timber.d(""Date: %s\nStart: %s\nEnd: %s"", date, startTime, endTime);  Views.setHtml(summary, session.getShortAbstract(), true); Views.setHtml(descrip, session.getLongAbstract(), true); } "	0	0	1	0	0	0
@Override protected String getCode() { TypeSpec.Builder codeBuilder = TypeSpec.classBuilder(getOutputClassName(false)) //                .addJavadoc(jd.stringToFormat(), jd.replacements()) .addModifiers(Modifier.PUBLIC) .superclass(ParameterizedTypeName.get(ClassName.get(Finder.class), parameterClasses)); addConstructor(codeBuilder); addOrderByMethods(codeBuilder); return JavaFile.builder(getOutputPackageName(), codeBuilder.build()).indent(JAVA_INDENT).build().toString(); } 	0	0	0	0	0	1
public ServerAsset merge(ServerAsset asset) { return persistenceService.doTransaction(em -> { validateParent(em, asset); return em.merge(asset); }); } 	0	0	0	0	0	1
public static void dump(Prototype proto) { dump(proto, new PrintWriter(System.out)); } 	1	0	0	0	1	0
@Override public int size() { return book.getSize(); } 	0	0	0	0	0	1
"public Query addCriteria(CriteriaDefinition criteriaDefinition) {  CriteriaDefinition existing = this.criteria.get(criteriaDefinition.getKey()); String key = criteriaDefinition.getKey();  if (existing == null) { this.criteria.put(key, criteriaDefinition); } else { throw new InvalidMongoDbApiUsageException( ""Due to limitations of the com.mongodb.BasicDBObject, "" + ""you can't add a second '"" + key + ""' criteria. "" + ""Query already contains '"" + existing.getCriteriaObject() + ""'.""); }  return this; } "	0	0	0	0	0	1
public List<Vertex>[] getVertexes() { return vertexes; } 	0	0	0	0	0	1
"@SuppressWarnings(""checkstyle:methodlength"") private Map<Integer, Action> createSinglePlayerKeyMappings(Game game) { Map<Integer, Action> map = new HashMap<>();  if(game.getPlayers().size() == 1) { map.put(KeyEvent.VK_LEFT, () -> { addToLog(""[KEY]\t< \'<-\' > Pressed.""); game.getPlayers().get(0).goLeft(); });  map.put(KeyEvent.VK_RIGHT, () -> { addToLog(""[KEY]\t< \'->\' > Pressed.""); game.getPlayers().get(0).goRight(); });  map.put(KeyEvent.VK_SPACE, () -> { addToLog(""[KEY]\t< \' \' > Pressed.""); game.getPlayers().get(0).jump(); });  map.put(KeyEvent.VK_Z, () -> { addToLog(""[KEY]\t< \'Z\' > Pressed."");  if(game.isRunning()) { Player p = game.getPlayers().get(0); game.getLevel().addUnit( new Bubble(p.getLocation(), new Point(p.getDirection().getDeltaX() * 4, 0), JBubbleBobbleSprites.getInstance().getBubbleSprite())); } }); } else{ map.put(KeyEvent.VK_A, () -> { addToLog(""[KEY]\t< \'<-\' > Pressed.""); game.getPlayers().get(0).goLeft(); });  map.put(KeyEvent.VK_D, () -> { addToLog(""[KEY]\t< \'->\' > Pressed.""); game.getPlayers().get(0).goRight(); });  map.put(KeyEvent.VK_W, () -> { addToLog(""[KEY]\t< \' \' > Pressed.""); game.getPlayers().get(0).jump(); });  map.put(KeyEvent.VK_SPACE, () -> { addToLog(""[KEY]\t< \'Z\' > Pressed."");  if(game.isRunning()) { Player p = game.getPlayers().get(0); game.getLevel().addUnit( new Bubble(p.getLocation(), new Point(p.getDirection().getDeltaX() * 4, 0), JBubbleBobbleSprites.getInstance().getBubbleSprite())); } });  map.put(KeyEvent.VK_LEFT, () -> { addToLog(""[KEY]\t< \'<-\' > Pressed.""); game.getPlayers().get(1).goLeft(); });  map.put(KeyEvent.VK_RIGHT, () -> { addToLog(""[KEY]\t< \'->\' > Pressed.""); game.getPlayers().get(1).goRight(); });  map.put(KeyEvent.VK_UP, () -> { addToLog(""[KEY]\t< \' \' > Pressed.""); game.getPlayers().get(0).jump(); });  map.put(KeyEvent.VK_CONTROL, () -> { addToLog(""[KEY]\t< \'Z\' > Pressed."");  if(game.isRunning()) { Player p = game.getPlayers().get(1); game.getLevel().addUnit( new Bubble(p.getLocation(), new Point(p.getDirection().getDeltaX() * 4, 0), JBubbleBobbleSprites.getInstance().getBubbleSprite())); } }); }  // Volume Control map.put(KeyEvent.VK_MINUS, () -> { addToLog(""[KEY]\t< \'-\' > Pressed.""); MusicPlayer.getInstance().volumeAdjust(-1.0d); });  map.put(KeyEvent.VK_EQUALS, () -> { addToLog(""[KEY]\t< \'=\' > Pressed.""); MusicPlayer.getInstance().volumeAdjust(1.0d); });  // Create a DumpLog map.put(KeyEvent.VK_F1, () -> { addToLog(""[KEY]\t< F1 > Pressed.""); new DumpLog(); }); return map; } "	0	0	1	1	0	0
"public void growSettlement(EntityRef settlement) { if (blockBufferSystem.getBlockBufferSize() > 15000) { return; } DistrictFacetComponent districtFacetComponent = settlement.getComponent(DistrictFacetComponent.class); PopulationComponent populationComponent = settlement.getComponent(PopulationComponent.class); ParcelList parcels = settlement.getComponent(ParcelList.class); BuildingQueue buildingQueue = settlement.getComponent(BuildingQueue.class); LocationComponent locationComponent = settlement.getComponent(LocationComponent.class); NameTagComponent nameTagComponent = settlement.getComponent(NameTagComponent.class); CultureComponent cultureComponent = settlement.getComponent(CultureComponent.class);  Vector3i center = new Vector3i(locationComponent.getLocalPosition()); int maxIterations = 300; int buildingSpawned = 0; List<String> zones = new ArrayList<>(buildingManager.getZones()); Map<String, List<Vector2i>> minMaxSizes = buildingManager.getMinMaxSizePerZone();  if (populationComponent == null) { logger.error(""No population found or was uninitialised!""); return; } if (cultureComponent == null) { logger.error(""No culture found or was uninitialised!""); return; } if (parcels == null) { logger.error(""No parcelList found or was uninitialised!""); return; } if (buildingQueue == null) { logger.error(""No buildingQueue found or was uninitialised!""); return; } if (locationComponent == null) { logger.error(""No locationComponent found or was uninitialised!""); return; } if (nameTagComponent == null) { logger.error(""No nameTagComponent found or was uninitialised!""); return; } if (districtFacetComponent == null || districtFacetComponent.districtMap == null || districtFacetComponent.districtTypeMap == null) { logger.error(""No DistrictFacetComponent found or was uninitialised!""); return; }   for (String zone : zones) { //Checks if the demand for a building of that zone is enough while (cultureComponent.getBuildingNeedsForZone(zone) * populationComponent.populationSize - parcels.areaPerZone.getOrDefault(zone, 0) > minMaxSizes.get(zone).get(0).x * minMaxSizes.get(zone).get(0).y && buildingSpawned < SettlementConstants.MAX_BUILDINGSPAWN) { Optional<DynParcel> parcelOptional = placeParcel(center, zone, parcels, buildingQueue, districtFacetComponent, maxIterations); //Grow settlement radius if no valid area was found if (!parcelOptional.isPresent() && parcels.cityRadius < SettlementConstants.SETTLEMENT_RADIUS) { parcels.cityRadius += SettlementConstants.BUILD_RADIUS_INTERVALL; //Add region entities of the now bigger zone getSurroundingRegions(settlement); break; } else if (!parcelOptional.isPresent()) { break; } //TODO Maybe send an event here? DynParcel parcel = parcelOptional.get(); buildingQueue.buildingQueue.add(parcel);  buildingSpawned++; } buildingSpawned = 0; } /** * grow population */ for (String residentialZone : cultureComponent.residentialZones) { populationComponent.capacity += parcels.areaPerZone.getOrDefault(residentialZone, 0); }  //Note: Saving of the actual added parcels to the parcel list happens when they are successfully build in the build() method //This is due to ensuring that changes made while constructing are added  nameTagComponent.text =  Float.toString(populationComponent.populationSize); settlement.saveComponent(nameTagComponent); settlement.saveComponent(populationComponent); settlement.saveComponent(buildingQueue); settlement.saveComponent(parcels); settlement.send(new SettlementGrowthEvent()); } "	0	0	0	0	0	1
public void addPlayerToTeam(final AbstractAnimal animal, final Integer team) { try { this.gameTrack.addAnimal(team, animal);  AnimalAddedEvent event = new AnimalAddedEvent(); event.setAnimal(animal.getId()); event.setTeam(team); this.eventDispatcher.dispatch(new AnimalAddedEvent()); } catch (NoSuchTeamException e) { e.printStackTrace(); } } 	1	0	1	1	1	0
@Transactional @Override public List<UserDTO> getUserDtoList() { List<UserDTO> userDtoList = new ArrayList<UserDTO>(); User thisUser = getLoggedUser(); List<User> userList; if (thisUser.getRole().getType() == RoleType.COMMISSIONER) { userList = userRepository.findByTerritorialCommunity(thisUser.getTerritorialCommunity()); } else { userList = userRepository.findAll(); } for (User user : userList) { PassportInfo passportInfo = user.getPassport().get(user.getPassport().size() - 1); PassportDTO passportDto = new PassportDTO(passportInfo.getSeria(), passportInfo.getNumber().toString(), passportInfo.getPublishedByData()); Address address = user.getAddress().get(user.getAddress().size() - 1); AddressDTO addressDto = new AddressDTO(address.getPostCode(), address.getRegion(), address.getDistrict(), address.getCity(), address.getStreet(), address.getBuilding(), address.getFlat()); UserDTO userDto = new UserDTO(user.getFirstName(), user.getLastName(), user.getMiddleName(), user.getRole().toString(), user.getLogin(), user.getEmail(), user.getStatus().toString(), addressDto, passportDto); userDto.setTerritorialCommunity(user.getTerritorialCommunity().getName()); userDtoList.add(userDto); } return userDtoList; } 	1	1	1	0	1	0
"private void shiftInBetweenRanks(TeamId teamID, int prevRank, int newRank) { String newRankForInbetween = ""Rank-1""; int lesserRank = prevRank+1; int greaterRank = newRank;  if (prevRank > newRank) { newRankForInbetween = ""Rank+1""; lesserRank = newRank; greaterRank = prevRank-1; }  String sql = ""UPDATE CustomRankings SET Rank = "" + newRankForInbetween + "" WHERE TeamID = ? AND Rank BETWEEN ? AND ?""; Statement statement = null; try { statement = prepareStatementUpdate(sql, teamID, lesserRank, greaterRank); } catch (SQLException e) { logger.log(SEVERE, ""Unable to shift ranks for intermediate players!"", e); } finally { close(statement); } } "	0	0	1	1	0	0
"private void moveDateBackward(RecurringTask task) { task.adjustDate(); if (task.getRecurType().equals(""week"") || task.getRecurType().equals(""weeks"")) { task.setStartDate(task.getStartDate().minusWeeks(task.getNumberToRecur())); task.setEndDate(task.getDueDate().minusWeeks(task.getNumberToRecur())); } else { task.setStartDate(task.getStartDate().minusDays(task.getNumberToRecur())); task.setEndDate(task.getDueDate().minusDays(task.getNumberToRecur())); } } "	0	0	0	1	0	0
public Group getGroup() { return (Group) getContainer(); } 	0	0	1	1	0	0
private Layout getLayout(final String key) { final int index = layout_keys.toList().indexOf(key); return index > -1 ? layout_values.get(index) : null; } 	0	0	0	0	0	1
@Override public HierarchicalStreamReader createReader(final Reader text) { try { final Document document = getBuilder().build(text); return new XomReader(document, getNameCoder()); } catch (final ValidityException e) { throw new StreamException(e); } catch (final ParsingException e) { throw new StreamException(e); } catch (final IOException e) { throw new StreamException(e); } } 	0	0	1	0	1	0
"public final String getSelectedDirectory() { String currentSelection = this.textField.getText(); if (!com.google.common.base.Strings.isNullOrEmpty(currentSelection)) { currentSelection = currentSelection.replaceAll(""~"", System.getProperty(""user.home"")); LOG.debug(""User input transformed into "" + currentSelection); } return currentSelection; } "	0	0	1	0	0	0
public static boolean playerIsAffectedByWeakGravity(EntityPlayerMP player) { if (!(player instanceof FakePlayer)) { NonNullList<ItemStack> armorInventory = player.inventory.armorInventory; int numRequired = ConfigHandler.numWeakGravityEnablersRequiredForWeakGravity; int numWeakGravityEnablers = 0; for (ItemStack stack : armorInventory) { if (stack != null && stack.getItem() instanceof IWeakGravityEnabler) { if (++numWeakGravityEnablers == numRequired) { return true; } } } if (ModSupport.isModLoaded(ModSupport.BAUBLES_MOD_ID)) { IBaublesItemHandler baublesHandler = BaublesApi.getBaublesHandler(player); int slots = baublesHandler.getSlots(); for (int i = 0; i < slots; i++) { ItemStack stack = baublesHandler.getStackInSlot(i); if (!stack.isEmpty() && stack.getItem() instanceof IWeakGravityEnabler) { if (++numWeakGravityEnablers == numRequired) { return true; } } }  } } return false; } 	1	0	1	0	1	0
"private Response updateUserObject(final HttpServletRequest request, final HttpServletResponse response, final RegisteredUser userObjectFromClient, final String passwordCurrent, final String newPassword, final List<IEmailPreference> emailPreferences, final Map<String, Boolean> subjectInterests) throws IncorrectCredentialsProvidedException, NoCredentialsAvailableException { Validate.notNull(userObjectFromClient.getId());  // this is an update as the user has an id // security checks try { // check that the current user has permissions to change this users // details. RegisteredUserDTO currentlyLoggedInUser = this.userManager.getCurrentRegisteredUser(request); if (!currentlyLoggedInUser.getId().equals(userObjectFromClient.getId()) && currentlyLoggedInUser.getRole() != Role.ADMIN && currentlyLoggedInUser.getRole() != Role.EVENT_MANAGER) { return new SegueErrorResponse(Status.FORBIDDEN, ""You cannot change someone elses' user settings."") .toResponse(); }  // check if they are trying to change a password if (newPassword != null && !newPassword.isEmpty()) { // only admins and the account owner can change passwords if (!currentlyLoggedInUser.getId().equals(userObjectFromClient.getId()) && currentlyLoggedInUser.getRole() != Role.ADMIN) { return new SegueErrorResponse(Status.FORBIDDEN, ""You cannot change someone elses' password."") .toResponse(); }  // Password change requires auth check unless admin is modifying non-admin user account if (!(currentlyLoggedInUser.getRole() == Role.ADMIN && userObjectFromClient.getRole() != Role.ADMIN)) { // authenticate the user to check they are allowed to change the password  this.userManager.ensureCorrectPassword(AuthenticationProvider.SEGUE.name(), userObjectFromClient.getEmail(), passwordCurrent); } }  // check that any changes to protected fields being made are // allowed. RegisteredUserDTO existingUserFromDb = this.userManager.getUserDTOById(userObjectFromClient .getId());  if (Role.EVENT_MANAGER.equals(currentlyLoggedInUser.getRole())) { if (Role.ADMIN.equals(existingUserFromDb.getRole()) || Role.ADMIN.equals(userObjectFromClient.getRole())) { return new SegueErrorResponse(Status.FORBIDDEN, ""You cannot modify admin roles."").toResponse(); } }  // check that the user is allowed to change the role of another user // if that is what they are doing. if ((currentlyLoggedInUser.getRole() != Role.ADMIN && currentlyLoggedInUser.getRole() != Role.EVENT_MANAGER) && userObjectFromClient.getRole() != null && !userObjectFromClient.getRole().equals(existingUserFromDb.getRole())) { return new SegueErrorResponse(Status.FORBIDDEN, ""You do not have permission to change a users role."") .toResponse(); } else if ((userObjectFromClient.getRole() != null && !userObjectFromClient.getRole().equals( existingUserFromDb.getRole())) || existingUserFromDb.getRole() != null && !existingUserFromDb.getRole().equals(userObjectFromClient.getRole())) { log.info(""ADMIN user "" + currentlyLoggedInUser.getEmail() + "" has modified the role of "" + userObjectFromClient.getEmail() + ""["" + userObjectFromClient.getId() + ""]"" + "" to "" + userObjectFromClient.getRole()); }  RegisteredUserDTO updatedUser = userManager.updateUserObject(userObjectFromClient, newPassword);  // Now update the email preferences emailPreferenceManager.saveEmailPreferences(userObjectFromClient.getId(), emailPreferences);  //---------------------------------------------------------------------------------------------------------- // FIXME - the code between the dashed lines should be refactored out of this class; it does not belong here! // Finally update the subject interests: try { List<UserPreference> userPreferences = Lists.newArrayList(); List<String> acceptedSubjects = Arrays.asList(""PHYSICS_UNI"", ""PHYSICS_ALEVEL"", ""PHYSICS_GCSE"", ""CHEMISTRY_UNI"", ""CHEMISTRY_ALEVEL"", ""CHEMISTRY_GCSE"", ""MATHS_UNI"", ""MATHS_ALEVEL"", ""MATHS_GCSE""); for (String subject : subjectInterests.keySet()) { // Validate that what is being saved is in fact acceptable: if (!acceptedSubjects.contains(subject)) { return new SegueErrorResponse(Status.BAD_REQUEST, ""Invalid user preferences provided."").toResponse(); } userPreferences.add(new UserPreference(updatedUser.getId(), SUBJECT_INTEREST, subject, subjectInterests.get(subject))); } userPreferenceManager.saveUserPreferences(userPreferences); } catch (SegueDatabaseException e) { return new SegueErrorResponse(Status.BAD_REQUEST, ""Invalid user preferences provided."").toResponse(); } //----------------------------------------------------------------------------------------------------------  return Response.ok(updatedUser).build(); } catch (NoUserLoggedInException e) { return SegueErrorResponse.getNotLoggedInResponse(); } catch (NoUserException e) { return new SegueErrorResponse(Status.NOT_FOUND, ""The user specified does not exist."").toResponse(); } catch (DuplicateAccountException e) { return new SegueErrorResponse(Status.BAD_REQUEST, ""An account already exists with the e-mail address specified."").toResponse(); } catch (SegueDatabaseException e) { log.error(""Unable to modify user"", e); return new SegueErrorResponse(Status.INTERNAL_SERVER_ERROR, ""Error while modifying the user"").toResponse(); } catch (InvalidPasswordException e) { return new SegueErrorResponse(Status.BAD_REQUEST, ""Invalid password. You cannot have an empty password."") .toResponse(); } catch (MissingRequiredFieldException e) { log.warn(""Missing field during update operation. "", e.getMessage()); return new SegueErrorResponse(Status.BAD_REQUEST, ""You are missing a required field. "" + ""Please make sure you have specified all mandatory fields in your response."").toResponse(); } catch (AuthenticationProviderMappingException e) { return new SegueErrorResponse(Status.INTERNAL_SERVER_ERROR, ""Unable to map to a known authenticator. The provider: is unknown"").toResponse(); } } "	0	0	1	1	0	0
"@Override public CommandResult execute() { assert model != null; try { model.addTask(toAdd); if (toAdd.getIsEvent()){ return new CommandResult((String.format(MESSAGE_SUCCESS, toAdd)) + ""\n"" + DateTimeInfoParser.durationOfTheEvent(toAdd.getStartTime().toString(), toAdd.getEndTime().toString())); } else { return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd)); } } catch (DuplicateTaskException e) { return new CommandResult(MESSAGE_DUPLICATE_TASK); }  } "	0	0	0	0	0	1
public static void restoreKeyDisabler(Context context) { if (!KeyDisabler.isSupported()) { return; }  writeDisableNavkeysOption(context, Settings.System.getInt(context.getContentResolver(), Settings.System.DEV_FORCE_SHOW_NAVBAR, 0) != 0); } 	0	0	0	0	0	1
private byte readNextByte() { if(readIndex >= writeIndex) { throw new IllegalStateException(); } return this.buffer[readIndex++]; } 	0	0	0	0	0	1
"@Override public void deleteApp(String app) { try { HttpResponse<JsonNode> deleteResponse = Unirest.delete(getServiceUrl().toString() + END_POINT_EXT + ""/"" + app).header(HEADER_ACCEPT, APPLICATION_JSON).asJson(); deleteResponse.getBody().getObject(); if (!(deleteResponse.getStatus() == HttpStatus.SC_OK)) { throw new MinimesosException(""Could not delete app: "" + app); } } catch (UnirestException e) { throw new MinimesosException(""Could not delete app: "" + app); } } "	0	0	1	1	1	0
"@FXML public void checkOut() {  if (!checkNonEmptyCustomer()){ showAlert(AlertType.INFORMATION, ""Enter Values"", null, ""You have to fill all form data to continue.""); return; } RoomDate roomDate = checkedTable.getSelectionModel().getSelectedItem(); if (roomDate == null) { showAlert(AlertType.INFORMATION, ""Enter Values"", null, ""Please select one row to continue.""); return; } Optional<ButtonType> result = showAlert(AlertType.CONFIRMATION,""Check Out Confirmation"",""Are you sure?"",""""); if (result.get() == ButtonType.OK){ RoomDate clonedRoomDate = (RoomDate)roomDate.doClone(); RoomServiceDao rsDao = (RoomServiceDao) DaoFactoryImpl.getFactory().createDao(RoomService.TABLE_NAME);  InvoiceRecordBuilder invoiceRecordBuilder = new InvoiceRecordBuilder(); invoiceRecordBuilder.buildPassportOrId(passport.getText()); invoiceRecordBuilder.buildRoomNumber(clonedRoomDate.getRoomNumber()); LocalDate checkInDate = clonedRoomDate.getCheckInDate(); LocalDate checkOutDate =  clonedRoomDate.getCheckOutDate(); int days = Period.between(checkInDate,checkOutDate).getDays(); double roomAmount = clonedRoomDate.getRoomPrice()*days;  // double serviceAmount = rsDao.getTotalUsingService(clonedRoomDate.getRoomNumber()); List<RoomService> roomServices = adapter.getAllRoomService(clonedRoomDate.getRoomNumber()); double serviceAmount = 0.0; String roomClass = clonedRoomDate.getRoomClass(); StrategyContext strategyContext; if (roomClass.equalsIgnoreCase(""VIP"")) { strategyContext = new StrategyContext(new VIPStrategy()); } else { strategyContext = new StrategyContext(new StandardStrategy()); } serviceAmount = strategyContext.getRoomServiceAmount(roomServices); invoiceRecordBuilder.buildCheckInDate(checkInDate); invoiceRecordBuilder.buildCheckOutDate(checkOutDate); invoiceRecordBuilder.buildRoomAmount(roomAmount); invoiceRecordBuilder.buildServiceAmount(serviceAmount); invoiceRecordBuilder.buildTotalAmount(roomAmount + serviceAmount); InvoiceRecord invoiceRecord = invoiceRecordBuilder.getInvoiceRecord();  adapter.deleteRoomServiceByString(clonedRoomDate.getRoomNumber()); adapter.addInvoice(invoiceRecord); //crdao.delete(passport.getText(),clonedRoomDate.getRoomNumber()); adapter.deleteCustomerAndRooms(passport.getText(),clonedRoomDate.getRoomNumber()); checkedRooms.remove(roomDate); reloadTableView(checkedTable, checkedRooms); showInvoiceData(invoiceRecord,roomServices); } else { // ... user chose CANCEL or closed the dialog  } } "	0	0	0	0	0	1
"@Test public void testMinOccurFilter() throws Exception { MineralTenementFilter filter = new MineralTenementFilter(""abc"", ""def"", ""ghi"", ""jkl"", ""mno"",""pqr"");  String result = filter.getFilterStringAllRecords(); Document doc = AbstractFilterTestUtilities.parsefilterStringXML(result); AbstractFilterTestUtilities.runNodeSetValueCheck(doc, ""/descendant::ogc:PropertyIsLike/ogc:Literal"", new String[] {""abc"", ""def"", ""ghi""}, 3);  } "	0	0	1	1	1	0
"@Transactional public String saveNewCode(CodeDetailResult codeDetailResult,String type) { String sql = """",zdz = """"; List codeList = null,zdList =null; Timestamp timestamp = new Timestamp(System.currentTimeMillis()); CodeDetailResult codeDetailResult1 = new CodeDetailResult(); if(TRANSLATE.equals(codeDetailResult.getTABLEEN())){ zdz =super.getDicIdByClassType(type); sql = ""insert into ""+codeDetailResult.getTABLEEN()+"" values('""+type+""',f_scms_dim_id('""+type+""'),'""+codeDetailResult.getNAME()+""','','""+codeDetailResult.getENABLED()+""','""+codeDetailResult.getFULLNAME()+""',SYSDATE)""; int n = super.updateBySql(sql); if (n==1) {   return zdz; } return """"; }else if(PROJECTS.equals(codeDetailResult.getTABLEEN())){ zdz =super.getDicIdByClassType(type); sql = ""insert into ""+codeDetailResult.getTABLEEN()+"" values(f_scms_dim_id('""+type+""'),'','""+codeDetailResult.getNAME()+""','""+codeDetailResult.getPARENTID()+""','""+type+""','""+codeDetailResult.getENABLED()+""','""+codeDetailResult.getFULLNAME()+""',SYSDATE)""; int n = super.updateBySql(sql); if (n==1) { return zdz; } return """"; }else if(CONTINENTS.equals(codeDetailResult.getTABLEEN())){ zdz =super.getDicIdByClassType(type); sql = ""insert into ""+codeDetailResult.getTABLEEN()+"" values(f_scms_dim_id('""+type+""'),'','""+codeDetailResult.getNAME()+""','""+codeDetailResult.getPARENTID()+""','""+type+""','""+codeDetailResult.getENABLED()+""','""+codeDetailResult.getFULLNAME()+""',SYSDATE)""; int n = super.updateBySql(sql); if (n==1) { return zdz; } return """";  }else if(SUBJECTS.equals(codeDetailResult.getTABLEEN())){ zdz =super.getDicIdByClassType(type); sql = ""insert into ""+codeDetailResult.getTABLEEN()+"" values(f_scms_dim_id('""+type+""'),'""+codeDetailResult.getNAME()+""','','""+type+""','""+codeDetailResult.getPARENTID()+""','""+codeDetailResult.getENABLED()+""','""+codeDetailResult.getFULLNAME()+""',SYSDATE)""; int n = super.updateBySql(sql); if (n==1) { return zdz; } return """"; }else if(ABNORMAL.equals(codeDetailResult.getTABLEEN())){ zdz =super.getDicIdByClassType(type); sql = ""insert into ""+codeDetailResult.getTABLEEN()+"" values(f_scms_dim_id('""+type+""'),'""+codeDetailResult.getNAME()+""','""+codeDetailResult.getPARENTID()+""','""+type+""','""+codeDetailResult.getENABLED()+""','""+codeDetailResult.getFULLNAME()+""',SYSDATE)""; int n = super.updateBySql(sql); if (n==1) { return zdz; } return """"; }else if(UNIVERSITIES.equals(codeDetailResult.getTABLEEN())){ zdz =super.getDicIdByClassType(type); sql = ""insert into ""+codeDetailResult.getTABLEEN()+"" values(f_scms_dim_id('""+type+""'),'""+codeDetailResult.getNAME()+""','','""+codeDetailResult.getPARENTID()+""','','','','','""+codeDetailResult.getENABLED()+""','""+codeDetailResult.getFULLNAME()+""',SYSDATE)""; int n = super.updateBySql(sql); if (n==1) { return zdz; } return """"; }else{ return """"; }   } "	0	0	0	0	0	1
"public static void main(String[] args) throws GeneralSecurityException, IOException { // Register the options so that they show up via --help PipelineOptionsFactory.register(CountReadsOptions.class); options = PipelineOptionsFactory.fromArgs(args).withValidation().as(CountReadsOptions.class); // Option validation is not yet automatic, we make an explicit call here. GenomicsDatasetOptions.Methods.validateOptions(options); auth = GenomicsOptions.Methods.getGenomicsAuth(options); p = Pipeline.create(options); DataflowWorkarounds.registerGenomicsCoders(p);  // ensure data is accessible String BAMFilePath = options.getBAMFilePath(); if (!Strings.isNullOrEmpty(BAMFilePath)) { if (GCSURLExists(BAMFilePath)) { System.out.println(BAMFilePath + "" is present, good.""); } else { System.out.println(""Error: "" + BAMFilePath + "" not found.""); return; } if (options.getShardBAMReading()) { // the BAM code expects an index at BAMFilePath+"".bai"" // and sharded reading will fail if the index isn't there. String BAMIndexPath = BAMFilePath + "".bai""; if (GCSURLExists(BAMIndexPath)) { System.out.println(BAMIndexPath + "" is present, good.""); } else { System.out.println(""Error: "" + BAMIndexPath + "" not found.""); return; } } } System.out.println(""Output will be written to ""+options.getOutput());  PCollection<Read> reads = getReads(); PCollection<Long> readCount = reads.apply(Count.<Read>globally()); PCollection<String> readCountText = readCount.apply(ParDo.of(new DoFn<Long, String>() { @Override public void processElement(DoFn<Long, String>.ProcessContext c) throws Exception { c.output(String.valueOf(c.element())); } }).named(""toString"")); readCountText.apply(TextIO.Write.to(options.getOutput()).named(""WriteOutput"").withoutSharding());  p.run(); } "	0	0	1	1	1	0
"public void getStats(){ Item weapon = itemRepo.getItem(getWeapon()); String weaponName = weapon.getName(); if (weaponName.equals(null) || weaponName.equals(""empty"")){ weaponName = ""hands""; } String message = ""\nPlayer name: "" + getName(); message += ""\nType: "" + type; message += ""\nCurrent weapon: "" + weaponName; message += ""\nGold: "" + getGold(); message += ""\nHealth/Max: "" + getHealth() + ""/"" + getHealthMax(); message += ""\nDamage/Armour: "" + getDamage() + ""/"" + getArmour(); message += ""\nStrength: "" + getStrength(); message += ""\nIntelligence: "" + getIntelligence(); message += ""\nDexterity: "" + getDexterity(); message += ""\nLuck: "" + getLuck(); message += ""\nStealth: "" + getStealth(); message += ""\nXP: "" + getXP(); message += ""\n"" + getName() + ""'s level: "" + getLevel(); QueueProvider.offer(message); } "	1	1	1	1	1	0
"@Override public PhysicalTraitsPacketCPlayerData onMessage(PhysicalTraitsPacketSRequestData message, MessageContext ctx) { if (ctx.side == Side.SERVER) {  World world = ctx.getServerHandler().playerEntity.worldObj; EntityPlayer playerToGetDataFor = GoreCorePlayerUUIDs.findPlayerInWorldFromUUID(world, message.playerAskingDataFor);  if (playerToGetDataFor != null) { PhysicalTraitsPlayerData data = PhysicalTraitsPlayerDataFetcherSided.FETCHER.getDataQuick(playerToGetDataFor, ""Error getting player data when recieving a data packet on the client"");  return new PhysicalTraitsPacketCPlayerData(GoreCorePlayerUUIDs.getUUID( playerToGetDataFor.getCommandSenderName()).getUUID(), data.getWeight(), data.getEnergy(), data.getFatigue(), data.getStrength(), data.getHeight());  }   }  return null; } "	0	0	0	0	0	1
private void saveEffortLeft() { final Context context = SpentEffortFragment.this.getActivity(); final long minutes = HoursUtils.convertHoursStringToMinutes(mHoursInput.getText().toString().trim());  metricsService.taskChangeSpentEffort( DateUtils.parseDate(mDateInput.getText().toString().trim(), DATE_PATTERN), minutes, mCommentInput.getText().toString(), task, userService.getLoggedUser().getId(), new Listener<String>() {  @Override public void onResponse(final String arg0) { Toast.makeText(context, R.string.feedback_succesfully_updated_spent_effort, Toast.LENGTH_SHORT).show(); getFragmentManager().popBackStack();  if (spentRequestSuccessCallback != null) { spentRequestSuccessCallback.onResponse(arg0); } } }, new ErrorListener() {  @Override public void onErrorResponse(final VolleyError arg0) { Toast.makeText(context, R.string.feedback_failed_update_spent_effort, Toast.LENGTH_SHORT).show();  if (spentRequestFailedCallback != null) { spentRequestFailedCallback.onErrorResponse(arg0); } } });  metricsService.changeEffortLeft( InputUtils.parseStringToDouble(mEffortLeftInput.getText().toString()), task, new Listener<Task>() {  @Override public void onResponse(final Task arg0) { Toast.makeText(context, R.string.feedback_succesfully_updated_effort_left, Toast.LENGTH_SHORT).show(); } }, new ErrorListener() {  @Override public void onErrorResponse(final VolleyError arg0) { Toast.makeText(context, R.string.feedback_failed_update_effort_left, Toast.LENGTH_SHORT).show(); } }); } 	1	0	1	1	1	0
"@GET @Path(""/"") @Produces(MediaType.APPLICATION_JSON) @GZIP public Response getUsersWithAccess(@Context final HttpServletRequest request) { try { RegisteredUserDTO user = userManager.getCurrentRegisteredUser(request);  List<Long> userIdsWithAccess = Lists.newArrayList(); for (UserAssociation a : associationManager.getAssociations(user)) { userIdsWithAccess.add(a.getUserIdReceivingPermission()); }  return Response.ok(userManager.convertToUserSummaryObjectList(userManager.findUsers(userIdsWithAccess))) .cacheControl(getCacheControl(Constants.NEVER_CACHE_WITHOUT_ETAG_CHECK, false)).build(); } catch (NoUserLoggedInException e) { return SegueErrorResponse.getNotLoggedInResponse(); } catch (SegueDatabaseException e) { return new SegueErrorResponse(Status.INTERNAL_SERVER_ERROR, ""Database error"", e).toResponse(); } } "	0	0	0	0	0	1
public void setSponsor(String sponsor) { this.sponsor = adjustSponsorsWithInitials(sponsor); } 	1	0	1	0	1	0
@Override public BoundedReader<T> createReader(PipelineOptions options) throws IOException { this.validate(); return new HDFSFileReader<>(this, filepattern(), formatClass(), serializableSplit()); } 	0	0	0	0	0	1
"protected void moveOnTCTwoWaysCrossing() { /* * Nitro-Note: Do we need all those shitty motionX and Z? We don't even * need something to parse to this function. setPosition is superflous since you can't place * trains down on 2 way crossings. */ // this.posY = j + 0.2D; //System.out.println(l); //if(l==2||l==0)moveEntity(motionX, 0.0D, 0.0D); //if(l==1||l==3)moveEntity(0.0D, 0.0D, motionZ); //if(Math.abs(motionX)>Math.abs(motionZ))System.out.println(""X""); //if(Math.abs(motionZ)>Math.abs(motionX))System.out.println(""Z"");  double norm = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);  if (Math.abs(motionZ) > Math.abs(motionX)) {  // this.setPosition(this.posX, this.posY + this.yOffset, cz + 0.5D); this.moveEntity(0.0D, 0.0D, Math.copySign(norm, this.motionZ));  // this.motionX = 0.0D; // this.motionZ = Math.copySign(norm, this.motionZ); } else {  // double norm = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);  // this.setPosition(cx + 0.5D, this.posY + this.yOffset, this.posZ); this.moveEntity(Math.copySign(norm, this.motionX), 0.0D, 0.0D);  // this.motionX = Math.copySign(norm, this.motionX); // this.motionZ = 0.0D; }  } "	0	0	0	0	0	1
private int getQualifierIndex( String version ) {  int qualifierIndex = 0; int delimiterCount = 0; while ( qualifierIndex < version.length() ) { if ( versionStringDelimiters.contains( version.charAt( qualifierIndex ) ) ) { ++delimiterCount; } else if ( !isNumeric( Character.toString( version.charAt( qualifierIndex ) ) ) ) { return qualifierIndex; }  ++qualifierIndex;  if ( delimiterCount == 3 ) { return qualifierIndex; } } return version.length(); } 	0	0	0	0	0	1
@Override protected void onCast(GameContext context, Player player, SpellDesc desc, Entity source, Entity target) { if (target != null && target.getEntityType() == EntityType.CARD) { Card card = (Card) target; context.getLogic().drawCard(player.getId(), card); return; }  Race race = (Race) desc.get(SpellArg.RACE); int value = desc.getValue(); String replacementCard = (String) desc.get(SpellArg.CARD);  CardCollection relevantCards = SpellUtils.getCards(player.getDeck(), card -> card.getAttribute(Attribute.RACE) == race); for (int i = 0; i < value; i++) { Card card = null; if (!relevantCards.isEmpty()) { card = relevantCards.getRandom(); relevantCards.remove(card); player.getDeck().remove(card); } else if (replacementCard != null) { card = CardCatalogue.getCardById(replacementCard); }  if (card != null) { context.getLogic().receiveCard(player.getId(), card); } } } 	1	1	1	1	1	0
public static IAssetCategory updateAssetCategory(IHBaseContext context, String id, IAssetCategoryCreateRequest request) throws SiteWhereException { AssetCategory updated = assertAssetCategory(context, id); SiteWherePersistence.assetCategoryUpdateLogic(request, updated); return HBaseUtils.put(context.getClient(), context.getPayloadMarshaler(), ISiteWhereHBase.DEVICES_TABLE_NAME, updated, id, KEY_BUILDER); } 	0	0	0	0	0	1
public void stop() { if(start == -1L) return; addTiming(System.nanoTime() - start); start = -1L; last = System.currentTimeMillis(); } 	0	0	1	0	0	0
"@Test(expected = MeteoException.class) public void testBadDateString() throws Exception { MeteoDateUtils.fullFormatToZonedDateTime(""ddd""); } "	0	0	0	0	0	1
public static Point[] getCellIndexesFrom(Point from){ int tx, ty, mx, my; int x = from.getX(), y = from.getY(); int xl = DIR_X_INDEX.length; Point[] points = new Point[xl+1]; int worldSize = Planet.instance().getCellLength(); for (int s = 0; s < xl; s++) {  tx = x + DIR_X_INDEX[s]; ty = y + DIR_Y_INDEX[s];  // Check the boundaries mx = checkBounds(tx, worldSize); my = checkBounds(ty, worldSize);  Point p = new Point(mx, my); points[s] = p; } points[xl] = from; return points; } 	1	0	1	0	1	0
public List<C> waitForCells(Point[] cellPositions) {  int[] indexes = new int[cellPositions.length]; int w = gridWidth; for (int i = 0; i < indexes.length; i++){ Point p = cellPositions[i]; int index = calcIndex(p.getX(), p.getY(), w); indexes[i] = index; }  return waitForCells(indexes); } 	1	0	1	0	1	0
public boolean pointInBounds(Point loc) { return loc.x < this.columns && loc.y < this.rows; } 	1	0	1	1	1	0
@Subscribe public void onRestorePlayerEvent(SpotifyPlayerService.RestorePlayingViewEvent event){ ((TopTracksActivity)getActivity()).onArtistTrackSelectedForPlayback(event.getmTrack(), (ArrayList) event.getmTopTracks()); } 	0	0	0	0	1	0
"@Override public void onCreate() { super.onCreate(); Log.d(""HII"", ""We in this""); /* Initialize the googleAPIClient for message passing */ mApiClient = new GoogleApiClient.Builder(this) .addApi(Wearable.API) .addConnectionCallbacks(this) .build(); mApiClient.connect(); IntentFilter filter = new IntentFilter(); filter.addAction(""/new_recording""); filter.addAction(""/play""); filter.addAction(""/pause"");   myReceiver = new BroadcastReceiver() { @Override public void onReceive(Context context, Intent intent) { Log.d(""MessageService"", ""Message Received""); Log.d(""MessageService"",intent.getAction() ); if (intent.getAction().equals(""/new_recording"")) { Log.d(""MessageService"", ""Received""); String message = intent.getStringExtra(""message""); audioFile = new File(message); Log.d(""file length"", String.valueOf(audioFile.length())); sendFile(""/new_recording""); } else if (intent.getAction().equals(""/play"")) { Log.d(""MessageService"", ""Play Requested""); sendMessage(""/play"", """"); } else if (intent.getAction().equals(""/pause"")) { Log.d(""MessageService"", ""Play Requested""); sendMessage(""/pause"", """");  } } }; registerReceiver(myReceiver, filter); } "	0	0	0	0	1	0
"@Override public String toString() { return getClass().getSimpleName() + "": "" + name +"" v""+version; } "	0	0	0	0	1	0
private void switchFragment(int id) { Fragment fragment = null; int position = 0; FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction(); switch (id) { case R.id.drawer_home: fragment = TodayFragment.newInstance(); position = 0; break; case R.id.drawer_courses: fragment = CoursesFragment.newInstance(); position = 1; break; case R.id.drawer_timetable: fragment = TimetableFragment.newInstance(); position = 2; break; case R.id.drawer_settings: fragment = SettingsFragment.newInstance(); position = 3; break; case R.id.drawer_messages: fragment = MessagesFragment.newInstance(); position = 4; break; case R.id.drawer_about: fragment = AboutFragment.newInstance(); position = 5; break; case R.id.drawer_grades: fragment = GradesFragment_new.newInstance(); position = 6; break ; } fragmentTransaction.replace(R.id.flContent, fragment, navigationTabs.get(position)).commit(); } 	0	0	1	0	1	0
"@Override public String convertToDatabaseColumn(List<String> attribute) { return attribute == null ? null : StringUtils.join(attribute,"",""); } "	0	0	0	0	1	0
protected JSONObject executeConsult(String query) { String json; JSONObject jObject = null; try { json = executeQuery(query); jObject  = new JSONObject(json); } catch (Exception e) { e.printStackTrace(); }  return jObject; } 	0	0	0	0	1	0
"@Test(groups = {""wso2.am""}, description = ""Test the availability of retired API in the store"", dependsOnMethods = ""testChangeAPILifecycleToRetired"") public void testAvailabilityOfRetiredAPIInStore() throws APIManagerIntegrationTestException { //  Verify the API in API Store : API should not be available in the store. List<APIIdentifier> apiStoreAPIIdentifierList = APIMTestCaseUtils.getAPIIdentifierListFromHttpResponse( apiStoreRestClient.getAPI()); assertFalse(APIMTestCaseUtils.isAPIAvailable(apiIdentifier, apiStoreAPIIdentifierList), ""Api is  visible in API Store after retire."" + getAPIIdentifierString(apiIdentifier)); } "	0	0	0	0	0	1
"public void setEditingObject(EventSheet aObject) { clear(); addTitleLevel1(""Event Sheet""); addTitleLevel2(""Common properties""); addTextInputfieldPropertyEditor(""Name"", aObject.nameProperty(), new StringStringConverter());  EventsheetEditorHTMLElement theEventsheetEditor = EventsheetEditorHTMLElement.create(); theEventsheetEditor.bindTo(aObject); tabbedPaneHTMLElement.addTab(""Event sheet"", theEventsheetEditor); } "	0	0	0	1	1	0
@Override public void onSaveInstanceState(Bundle outState) { outState.putSerializable(OUT_ITEM, mFolder); super.onSaveInstanceState(outState); } 	0	0	0	0	1	0
@EventHandler(priority = EventPriority.HIGH) public void onPlayerMove(PlayerMoveEvent event) { BukkitPlayer player = (BukkitPlayer) plugin.wrapPlayer(event.getPlayer());  if (PlotMeCoreManager.getInstance().isPlotWorld(player) && !player.hasPermission(PermissionNames.ADMIN_BYPASSDENY)) { BukkitLocation to = new BukkitLocation(event.getTo());  String idTo = manager.getPlotId(to);  if (!idTo.isEmpty()) { Plot plot = manager.getPlotById(idTo, player);  if (plot != null && plot.isDeniedInternal(player.getName(), player.getUniqueId())) { Location t = event.getFrom().clone(); t.setYaw(event.getTo().getYaw()); t.setPitch(event.getTo().getPitch()); event.setTo(t); } } } } 	0	0	0	0	1	0
"@Override public List<F> filterFiles(F[] files) { Assert.notNull(files, ""'files' should not be null""); List<F> leftOver = Arrays.asList(files); for (FileListFilter<F> fileFilter : this.fileFilters) { if (leftOver.size() == 0) { break; } @SuppressWarnings(""unchecked"") F[] fileArray = leftOver.toArray((F[]) Array.newInstance(files[0].getClass(), leftOver.size())); leftOver = fileFilter.filterFiles(fileArray); } return leftOver; } "	1	0	0	0	1	0
"public String toString(WebElement webElement) { return String.format(""[%s@%s-%s@%s]"", webElement.getLocation().getX(), webElement.getLocation().getY(), webElement.getLocation().getX() + webElement.getSize().getWidth(), webElement.getLocation().getY() + webElement.getSize().getHeight());  } "	0	0	0	1	0	0
"private void storeIndex() { Document newDoc; try { newDoc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument(); Element rootElement = newDoc.createElement(""DiskCacheManager""); newDoc.appendChild(rootElement);  for (String key : indexList.keySet()) { String value = indexList.get(key).toString(); Element cacheEntry = newDoc.createElement(""CacheEntry"");  String encKey = Base64.encode(key.getBytes()); Element cacheUrl = newDoc.createElement(""cacheurl""); cacheUrl.setAttribute(""encode"", ""true""); cacheUrl.appendChild(newDoc.createTextNode(encKey));  cacheEntry.appendChild(cacheUrl);  Element cacheFile = newDoc.createElement(""cachefile""); cacheFile.appendChild(newDoc.createTextNode(value)); cacheEntry.appendChild(cacheFile);  rootElement.appendChild(cacheEntry); }  XMLHelper.writeToFile(new File(path, ""index""), newDoc); } catch (ParserConfigurationException e) { Logger.instance.error(Logger.stack2String(e)); } catch (Exception e) { Logger.instance.error(Logger.stack2String(e)); } } "	0	0	0	0	1	0
"@SubscribeEvent public void fixApplication(AnvilUpdateEvent event) { if (event.getLeft() == null || event.getRight() == null) return;  ItemStack left = event.getLeft(); ItemStack right = event.getRight();  if (!hasLumbering(right) || !(left.getItem() instanceof ItemTool)) return;  Set<String> classes = ((ItemTool) left.getItem()).getToolClasses(left); if (!classes.contains(""axe"")) { event.setCost(0); event.setOutput(left.copy()); } } "	0	0	0	0	1	0
@Override public void placeTile(Game game, Player currentPlayer) {  List<LakeTile> playerTiles = currentPlayer.getTiles(); if(playerTiles.isEmpty()) { return; }  // sort the game dedications DedicationType[] sortedGameDedications = DedicationTokenWrapper.sortDedications (game.getDedications());  int nextPlayerIndex = game.getCurrentTurnPlayer() + 1; Player[] players = game.getPlayers();  int i = 0 ;  while(i != players.length - 1){  // Ensures clockwise movement and appropriate indexing nextPlayerIndex = nextPlayerIndex % 4 ;  for (DedicationType dedicationType: sortedGameDedications){ DedicationThreat threat = DedicationThreat.getThreat(dedicationType, players[nextPlayerIndex], game); if (threat != null){ boolean isStopped = stopThreat(game, threat, players[nextPlayerIndex].getId());  // We can only stop one dedication by making one exchange. if (isStopped) { return; } } }  ++nextPlayerIndex; ++i; }  // Assign the first available lake tile to the first available place in lake LakeTile[][] lake = game.getLake();  for (int k = 0; k != lake.length; ++k) { for (int j = 0; j != lake[k].length; ++j) { if (lake[k][j] != null){ TileSide[] side = lake[k][j].getSides(); for (int p = 0; p != side.length; ++p) { if (side[p].getAdjacent() == null) { controller.placeLakeTile(game, currentPlayer.getId(), 0, lake[k][j].getId(), p, 0); return; } } } } }  } 	0	0	0	0	1	0
"private void testPrintln(Supplier<PrintStream> getter, Consumer<PrintStream> setter, String method) { PrintStream prev = getter.get(); ByteArrayOutputStream writer = new ByteArrayOutputStream(); try { PrintStream next = new PrintStream(writer); setter.accept(next); runAll(""api/SystemApi"", method, () -> { next.flush(); assertEquals(""hello"" + System.getProperty(""line.separator""), writer.toString()); writer.reset(); }); } finally { setter.accept(prev); } } "	0	0	0	0	1	0
"private void LCInputLoop() { String cmd = """"; String slices[]; try {  while(true) { System.out.print(""mainmenu""+PREFIX); cmd = enigma.readLine();  if(cmd.startsWith(""/"")) { cmd = cmd.toLowerCase(); slices = cmd.split("" "");  switch(slices[0]) { case ""/conf"":{} case ""/configure"":{actionConfigure(cmd);break;} case ""/con"":{} case ""/connect"":{actionConnect(cmd);break;} case ""/q"":{} case ""/quit"":{} case ""/exit"":{return;} case ""/lpl"":{actionLPL();break;} case ""/req"":{actionLPL2();break;} case ""/cd"":{;break;} default:{u.printError(""unknown command"");} } } }  } catch ( Exception e){e.printStackTrace();} } "	0	0	0	0	0	1
"public void startclient(String uname, String passwd) {  lcubs = new LachsClient_ConHandler(serverip, serverport, u, this);  u.printGrayln(""Attempting connection to ""+serverip+"":""+serverport+""...""); lcubs.ConnectToNIOServer(uname,passwd); lcubs.start();  LAChSInputLoop();  lcubs.ConnectionsClose(); } "	0	0	0	0	1	0
@Override protected void execute() { motionController.setSetpoint(finalAngle + initialAngle); } 	0	0	0	0	1	0
"@Override public Object toObject(short[] iqValue) throws ValueConversionException { logger.debug(""toObject - start: iqValue={}"", iqValue);  if ( iqValue.length != TYPE_SIZE ) { throw new ValueConversionException( ""Argument length doesn't match with type size""); }  ByteBuffer byteBuffer = ByteBuffer.allocate(4); byteBuffer.order(ByteOrder.LITTLE_ENDIAN);  for (int byteId = 0; byteId < TYPE_SIZE; byteId++) { byteBuffer.put((byte)iqValue[byteId]); }  logger.debug(""toIQValue - end: {}"", byteBuffer.getInt(0)); return byteBuffer.getInt(0); } "	0	0	0	0	1	0
@Test @NeedsTestData public void testReadFromSource() throws Exception { ReaderContext context = getReaderContext(getConfigPropertiesAsMap(service.getHiveConf())); HCatalogIO.Read spec = HCatalogIO.read() .withConfigProperties(getConfigPropertiesAsMap(service.getHiveConf())) .withContext(context) .withTable(TEST_TABLE_NAME);  List<String> records = new ArrayList<>(); for (int i = 0; i < context.numSplits(); i++) { BoundedHCatalogSource source = new BoundedHCatalogSource(spec.withSplitId(i)); for (HCatRecord record : SourceTestUtils.readFromSource(source, OPTIONS)) { records.add(record.get(0).toString()); } } assertThat(records, containsInAnyOrder(getExpectedRecords(TEST_RECORDS_COUNT).toArray())); } 	0	0	1	0	0	0
"static DefaultHCatRecord toHCatRecord(int value) { return new DefaultHCatRecord(Arrays.<Object>asList(""record "" + value, value)); } "	0	0	0	0	0	1
"public Environment decrypt(Environment environment) { Environment result = new Environment(environment.getName(), environment.getLabel()); for (PropertySource source : environment.getPropertySources()) { Map<Object, Object> map = new LinkedHashMap<Object, Object>( source.getSource()); for (Entry<Object,Object> entry : map.entrySet()) { Object key = entry.getKey(); String name = key.toString(); String value = entry.getValue().toString(); if (value.startsWith(""{cipher}"")) { map.remove(key); if (encryptor == null) { map.put(name, value); } else { try { value = value == null ? null : encryptor.decrypt(value .substring(""{cipher}"".length())); } catch (Exception e) { value = ""<n/a>""; name = ""invalid."" + name; logger.warn(""Cannot decrypt key: "" + key + "" ("" + e.getClass() + "": "" + e.getMessage() + "")""); } map.put(name, value); } } } result.add(new PropertySource(source.getName(), map)); } return result; } "	0	0	0	0	1	0
"private String getParametrizedType(final ParameterizedType type, final Boolean innerTypes) { final StringBuffer sb = new StringBuffer(getFullyQualifiedNameFor(type .getType().toString()));  if(innerTypes) { sb.append(""<""); for (final Object typeArg : type.typeArguments()) { final Type arg = (Type) typeArg; final String argString = getNameOfType(arg); sb.append(argString); sb.append("",""); } sb.deleteCharAt(sb.length() - 1); sb.append("">""); } return sb.toString(); } "	0	0	1	0	0	0
private String applyNaming(String input) { if (compactNaming) { try { return Joiner.on(':').join(Splitter.on(',').trimResults().withKeyValueSeparator('=').split(input).values()); } catch (Exception ex) { } } return input; } 	0	0	0	0	1	0
"public static NodeFS toFileStructureNodeClass(MTree mTree, String nameRoot) { Tree<MTree.Node> treeClassdef = mTree.findAsTree(MTree.NodeType.CLASSDEF); if (treeClassdef.getChildCount(treeClassdef.getRoot()) < 1) { return null; }  // creates MetaObjectWrapper for Matlabs ""meta.class"" MetaClass metaClass; try { metaClass = MetaClass.getMatlabClass(nameRoot); } catch (Exception e) { e.printStackTrace(); return null; }  // create Class (root) node for FileStructure NodeFS classDefNodeFS = new NodeFS(metaClass, mTree.getNode(0));  // creates Method (""function"") Nodes for FileStructure Tree<MTree.Node> methodsTree = mTree.findAsTree(MTree.NodeType.FUNCTION); java.util.List<MTree.Node> methodNodes = createNodesForClassDef(methodsTree, MTree.NodeType.FUNCTION);  // creates Property Nodes for FileStructure // these are only properties with the new type definition e.g.: //    var string = ""some string"" Tree<MTree.Node> propertiesDeclTree = mTree.findAsTree(MTree.NodeType.PROPTYPEDECL); java.util.List<MTree.Node> propertyDeclNodes = createNodesForClassDef(propertiesDeclTree, MTree.NodeType.PROPTYPEDECL);  // creates Property Nodes for FileStructure // these are only properties with no or old type definition e.g.: // var // var = 1 // var@double = 1 Tree<MTree.Node> propertiesTree = mTree.findAsTree(MTree.NodeType.PROPERTIES); java.util.List<MTree.Node> propertyNodes = createNodesForClassDefPropNoOldDef(propertiesTree);  // population of ClassDefNode populateClassDefNodeWithProperties(classDefNodeFS, metaClass, methodNodes, propertyNodes); populateClassDefNodeWithMethods(classDefNodeFS, metaClass, methodNodes);  return classDefNodeFS; } "	1	0	0	0	1	0
@Test public void testDefaultLeaseDurationRegisterEvent() throws Exception { // creating instance info final InstanceInfo instanceInfo = getInstanceInfo(null); // calling tested method instanceRegistry.register(instanceInfo, false); // instance info duration is set to default final EurekaInstanceRegisteredEvent registeredEvent = (EurekaInstanceRegisteredEvent) (applicationEvents.get(0)); assertEquals(LeaseInfo.DEFAULT_LEASE_DURATION, registeredEvent.getLeaseDuration()); } 	0	0	0	0	1	0
"@Override public boolean renew(final String appName, final String serverId, boolean isReplication) { log(""renew "" + appName + "" serverId "" + serverId + "", isReplication {}"" + isReplication); List<Application> applications = getSortedApplications(); for (Application input : applications) { if (input.getName().equals(appName)) { InstanceInfo instance = null; for (InstanceInfo info : input.getInstances()) { if (info.getHostName().equals(serverId)) { instance = info; break; } } publishEvent(new EurekaInstanceRenewedEvent(this, appName, serverId, instance, isReplication)); break; } } return super.renew(appName, serverId, isReplication); } "	0	0	1	0	1	0
@Override public boolean hasKeywordField(String fieldName, TypeStore store) { return store.getKeywordParameterType(this, fieldName) != null; } 	0	0	0	0	1	0
@NotNull public Collection<VirtualFile> getFilesForPattern(@NotNull final Project project, @NotNull Pattern pattern) { final GlobalSearchScope scope = GlobalSearchScope.allScope(project); final String[] parts = MatcherUtil.getParts(pattern);  if (parts.length > 0) { final String key = StringUtil.join(parts, Constants.DOLLAR); if (cacheMap.get(key) == null) { final THashSet<VirtualFile> files = new THashSet<VirtualFile>(1000);  ProjectRootManager.getInstance(project).getFileIndex().iterateContent(new ContentIterator() { @Override public boolean processFile(VirtualFile fileOrDir) { final String name = fileOrDir.getName(); if (MatcherUtil.matchAnyPart(parts, name)) { for (VirtualFile file : FilenameIndex.getVirtualFilesByName(project, name, scope)) { if (file.isValid() && MatcherUtil.matchAllParts(parts, file.getPath())) { files.add(file); } } } return true; } });  cacheMap.put(key, files); }  return cacheMap.get(key); }  return ContainerUtil.newArrayList(); } 	0	0	0	0	1	0
public void define(String command, int... keys) { commands.put(command, keys); } 	0	0	0	0	1	0
@Test public void apply_from__new_target_file_calls_copy_support_with_an_template_file_name_transformer() throws Exception{ /* prepare */ File mockedTargetFolder = buildDirectoryMock();  /* execute */ templateToTest.applyTo(mockedTargetFolder,properties);  /* test */ verify(mockedCopySupport).copyDirectories(eq(contentRootFolder), eq(mockedTargetFolder), any(TemplateFileNameTransformer.class), eq(Boolean.TRUE));  } 	0	0	0	0	1	0
"@Secured ( false ) @RequestMapping ( value = ""/channel/{channelId}/viewPlain"", method = RequestMethod.GET ) @HttpConstraint ( PERMIT ) public ModelAndView viewPlain ( @PathVariable ( ""channelId"" ) final String channelId) { try { return this.channelService.accessCall ( By.id ( channelId ), ReadableChannel.class, ( channel ) -> {  final Map<String, Object> model = new HashMap<> ();  model.put ( ""channel"", channel.getInformation () );  final Collection<ArtifactInformation> artifacts = channel.getContext ().getArtifacts ().values ();  if ( artifacts.size () > maxWebListSize () ) { return viewTooMany ( channel ); }  // sort artifacts  final List<ArtifactInformation> sortedArtifacts = new ArrayList<> ( artifacts ); sortedArtifacts.sort ( Comparator.comparing ( ArtifactInformation::getName ) ); model.put ( ""sortedArtifacts"", sortedArtifacts );  return new ModelAndView ( ""channel/view"" ); } ); } catch ( final ChannelNotFoundException e ) { return CommonController.createNotFound ( ""channel"", channelId ); } } "	0	0	1	0	1	0
@Override protected boolean isFinished() { return motionController.onTarget(); } 	0	0	0	0	1	0
"@RequestMapping(value = ""/search"", method = RequestMethod.GET) public String quickSearch(@RequestParam(""q"") String query, @RequestParam(value = ""s"", required = false) String scope, @RequestParam(value = ""p"", required = false) Integer page, org.springframework.ui.Model model){ if( !userService.isAuthorized() ){ return ""redirect:/login""; } if( query.length() == 0 ){ return ""error/404""; } SearchScope searchScope; if( scope == null ){ searchScope = SearchScope.ALL; } else{ searchScope = SearchScope.from(scope); if( searchScope == null ){ searchScope = SearchScope.ALL; } } model.addAttribute(""currentUser"", userService.getCurrentUser()); List<String> queryTokens = searchService.normalizeAndSplitQuery(query); model.addAttribute(""queryTags"", queryTokens); model.addAttribute(""q"", searchService.implodeQuery(queryTokens));  User currentUser = userService.getCurrentUser(); List<Tag> tags = currentUser.getTags(); List<Integer> tagIds = new ArrayList<>(); tags.forEach((t) -> tagIds.add(t.getId())); model.addAttribute(""interestedNewestCalls"", callService.findByTagsIdIn(tagIds));  if( page == null ){ page = 0; } else{ page = page - 1; } if( page < 0 ){ return ""error/404""; } int currentPage = page + 1; switch( searchScope ){ case ALL: SearchResult result = searchService.searchEverywhere(query, page); if( page + 1 > result.getCalls().getTotalPages() ){ return ""error/404""; } model.addAttribute(""users"", result.getUsers()); model.addAttribute(""tags"", result.getTags()); model.addAttribute(""calls"", result.getCalls().getContent()); model.addAttribute(""pagination"", PaginationFactory.createSearchPagination(currentPage, result.getCalls(), query, searchScope)); return ""search/quickResults""; case USERS: Page<User> userPage = searchService.searchUsers(query, page); if( page + 1 > userPage.getTotalPages() ){ return ""error/404""; } model.addAttribute(""users"", userService.setSubscriptionStatusByCurrentUser(userPage.getContent())); model.addAttribute(""pagination"", PaginationFactory.createSearchPagination(currentPage, userPage, query, searchScope)); return ""search/users""; default: return ""search/quickResults""; } } "	1	0	1	1	1	0
private BeanDefinitionRegistry getBeanDefinitionRegistry() { if (beanDefinitionRegistry == null) { AutowireCapableBeanFactory factory = getWebApplicationContext() .getAutowireCapableBeanFactory(); beanDefinitionRegistry = (BeanDefinitionRegistry) factory; } return beanDefinitionRegistry; } 	0	0	0	1	0	0
"public void updateSmokeDetector(SmokeDetector smokeDetector) { logger.debug(""Updating camera {}"", smokeDetector.getDeviceId()); if (lastData == null || !lastData.equals(smokeDetector)) { updateState(CHANNEL_UI_COLOR_STATE, new StringType(smokeDetector.getUiColorState().toString())); updateState(CHANNEL_LOW_BATTERY, smokeDetector.getBatteryHealth() == BatteryHealth.OK ? OnOffType.OFF : OnOffType.ON); updateState(CHANNEL_CO_ALARM_STATE, new StringType(smokeDetector.getCoAlarmState().toString())); updateState(CHANNEL_SMOKE_ALARM_STATE, new StringType(smokeDetector.getSmokeAlarmState().toString())); updateState(CHANNEL_MANUAL_TEST_ACTIVE, smokeDetector.isManualTestActive() ? OnOffType.ON : OnOffType.OFF);  if (smokeDetector.isOnline()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE); }  // Setup the properties for this device. updateProperty(PROPERTY_ID, smokeDetector.getDeviceId()); updateProperty(PROPERTY_FIRMWARE_VERSION, smokeDetector.getSoftwareVersion()); } else { logger.debug(""Nothing to update, same as before.""); } } "	0	0	1	0	1	0
"@Override public void onThermostatAdded(Thermostat thermostat) { ThingUID bridgeUID = bridge.getThing().getUID(); ThingUID thingUID = new ThingUID(NestBindingConstants.THING_TYPE_THERMOSTAT, bridgeUID, thermostat.getDeviceId()); Map<String, Object> properties = new HashMap<>(2); properties.put(NestBindingConstants.PROPERTY_ID, thermostat.getDeviceId()); properties.put(NestBindingConstants.PROPERTY_FIRMWARE_VERSION, thermostat.getSoftwareVersion()); DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID) .withThingType(NestBindingConstants.THING_TYPE_THERMOSTAT).withLabel(thermostat.getNameLong()) .withBridge(bridgeUID).withProperties(properties).build(); thingDiscovered(discoveryResult); logger.info(""thingDiscovered called for thermostat""); } "	0	0	1	0	1	0
"private void refreshData() { logger.trace(""starting refreshData""); NestBridgeConfiguration config = getConfigAs(NestBridgeConfiguration.class); try { String uri = buildQueryString(config); String data = jsonFromGetUrl(uri, config); logger.error(""Data from nest {}"", data); updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE, ""Received update from nest""); // Now convert the incoming data into something more useful. Gson gson = builder.create(); TopLevelData newData = gson.fromJson(data, TopLevelData.class); if (newData != null) { lastDataQuery = newData; } else { newData = lastDataQuery; } // Turn this new data into things and stuff. compareThings(newData.getDevices()); compareStructure(newData.getStructures().values()); } catch (InterruptedException | TimeoutException | ExecutionException e) { logger.error(""Error parsing data"", e); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, ""Error parsing data "" + e.getMessage()); }  } "	0	0	1	0	1	0
@Override public int[] getInts(int areaX, int areaZ, int areaWidth, int areaHeight) { int[] biomeGen = IntCache.getIntCache(areaWidth * areaHeight);  for(int x = 0; x < areaWidth; x++) for(int z = 0; z < areaHeight; z++) { initChunkSeed(areaX + x, areaZ + z); biomeGen[x * areaWidth + z] = BiomeGenMinestuck.mediumNormal.biomeID + (nextInt(3) == 0 ? 0 : 1); } return biomeGen; } 	1	1	1	1	1	0
private void setBar(final double VALUE) { currentValueAngle = Helper.clamp(90d, 270d, (VALUE + Math.abs(minValue)) * angleStep + 90d); dataBarOuterArc.setX(centerX + (0.675 * height) * Math.sin(-Math.toRadians(currentValueAngle))); dataBarOuterArc.setY(centerX + (0.675 * height) * Math.cos(-Math.toRadians(currentValueAngle))); dataBarLineToInnerArc.setX(centerX + (0.3 * height) * Math.sin(-Math.toRadians(currentValueAngle))); dataBarLineToInnerArc.setY(centerX + (0.3 * height) * Math.cos(-Math.toRadians(currentValueAngle))); setBarColor(VALUE); valueText.setText(String.format(Locale.US, formatString, VALUE)); if (valueText.getLayoutBounds().getWidth() > 0.28 * width) Helper.adjustTextSize(valueText, 0.28 * width, size * 0.24); valueText.relocate((width - valueText.getLayoutBounds().getWidth()) * 0.5, 0.615 * height + (0.3 * height - valueText.getLayoutBounds().getHeight()) * 0.5); } 	1	0	1	1	1	0
"private static <T extends HttpMethod> T configureHttpMethod(T request) { request.setRequestHeader(""Content-Type"", ""application/json; charset=utf-8""); request.setRequestHeader(""Accept"", ""application/json""); request.setRequestHeader(""Accept-Charset"", ""utf-u""); request.setRequestHeader(""User-Agent"", ""GoodData Agent/0.9""); request.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY); return request; } "	0	0	0	0	1	0
"public String toString() { String finalString = index + "". "";  if (!priority) { finalString = taskType + "": ""; } else { finalString += ""Important "" + taskType + "": ""; }  finalString += content + ""\n"";  if (deadline != null) { finalString += ""  deadline: "" + deadline + ""\n""; } if (start != null) { finalString += ""  start: "" + start + ""\n""; } if (end != null) { finalString += ""  end: "" + end + ""\n""; } if (reminder != null) { finalString += ""  reminder: "" + reminder + ""\n""; } finalString += ""  done: "" + done; return finalString; } "	1	0	1	0	1	0
@Override public void addCase(Model<UserData, CityData> state, Model<UserData, CityData> prev, UserData action, double userRating) { Pos2D pos = action.getClickLocation(); Tile targetTile = prev.getWorld().getTileAt(pos); ZoneType zoneAct = action.getZoneSelection(); double prevScore = Rules.score(prev); double currentScore = Rules.score(state); double normalizedScoreDiff = ((currentScore - prevScore) / 2.0) + 0.5; double[] input = Util.appendVectors(ModelToVec.getTileAttributesAsVector(targetTile), ModelToVec.getZoneAsVector(zoneAct)); learn(input, new double[] { currentScore });  } 	0	0	0	0	1	0
"private static BipedPart getPart(TileEntityMannequin tile, String s) { Part part = parts.get(s); if(part != null) { if(tile.getBipedRotations() != null) { switch(part) { case head: { return tile.getBipedRotations().head; } case chest: { return tile.getBipedRotations().chest; } case left_arm: { return tile.getBipedRotations().leftArm; } case right_arm: { return tile.getBipedRotations().rightArm; } case left_leg: { return tile.getBipedRotations().leftLeg; } case right_leg: { return tile.getBipedRotations().rightLeg; } } } return null; } throw new IllegalArgumentException(""invalid mannequin part""); } "	0	0	0	0	1	0
"public void testOperationShouldAddHeaders() throws Throwable {  // Create client MobileServiceClient client = null; try { client = new MobileServiceClient(appUrl, getInstrumentation().getTargetContext()); } catch (MalformedURLException e) { e.printStackTrace(); }  // Add a new filter to the client client = client.withFilter(new ServiceFilter() {  @Override public ListenableFuture<ServiceFilterResponse> handleRequest(ServiceFilterRequest request, NextServiceFilterCallback nextServiceFilterCallback) {  final SettableFuture<ServiceFilterResponse> resultFuture = SettableFuture.create();  int zumoInstallationHeaderIndex = -1; int zumoApiVersionHeader = -1; int zumoVersionHeader = -1; int userAgentHeaderIndex = -1; int acceptHeaderIndex = -1; int acceptEncodingHeaderIndex = -1;  String installationHeader = ""X-ZUMO-INSTALLATION-ID""; String apiVersionHeader = ""ZUMO-API-VERSION""; String versionHeader = ""X-ZUMO-VERSION""; String userAgentHeader = ""User-Agent""; String acceptHeader = ""Accept""; String acceptEncodingHeader = ""Accept-Encoding""; String versionNumber = ""3.0.0""; String apiVersionNumber = ""2.0.0"";  Headers headers = request.getHeaders(); for (int i = 0; i < headers.size(); i++) { if (headers.name(i) == installationHeader) { zumoInstallationHeaderIndex = i; } else if (headers.name(i) == apiVersionHeader) { zumoApiVersionHeader = i; } else if (headers.name(i) == versionHeader) { zumoVersionHeader = i; } else if (headers.name(i) == userAgentHeader) { userAgentHeaderIndex = i; } else if (headers.name(i) == acceptHeader) { acceptHeaderIndex = i; } else if (headers.name(i) == acceptEncodingHeader) { acceptEncodingHeaderIndex = i; } }  if (zumoInstallationHeaderIndex == -1) { resultFuture.setException(new Exception(""zumoInstallationHeaderIndex == -1"")); return resultFuture; } if (zumoApiVersionHeader == -1) { resultFuture.setException(new Exception(""zumoApiVersionHeader == -1"")); return resultFuture; } if (zumoVersionHeader == -1) { resultFuture.setException(new Exception(""zumoVersionHeader == -1"")); return resultFuture; } if (userAgentHeaderIndex == -1) { resultFuture.setException(new Exception(""userAgentHeaderIndex == -1"")); return resultFuture; } if (acceptHeaderIndex == -1) { resultFuture.setException(new Exception(""acceptHeaderIndex == -1"")); return resultFuture; } if (acceptEncodingHeaderIndex == -1) { resultFuture.setException(new Exception(""acceptEncodingHeaderIndex == -1"")); return resultFuture; }  String expectedUserAgent = String.format(""ZUMO/%s (lang=%s; os=%s; os_version=%s; arch=%s; version=%s)"", ""1.0"", ""Java"", ""Android"", Build.VERSION.RELEASE, Build.CPU_ABI, versionNumber);  if (headers.value(zumoInstallationHeaderIndex) == null) { resultFuture.setException(new Exception(""headers[zumoInstallationHeaderIndex] == null"")); return resultFuture; }  if (!apiVersionNumber.equals(headers.value(zumoApiVersionHeader))) { resultFuture.setException(new Exception(""expectedAppKey != headers[zumoApiVersionHeader]"")); return resultFuture; }  if (!expectedUserAgent.equals(headers.value(userAgentHeaderIndex))) { resultFuture.setException(new Exception(""expectedUserAgent != headers[userAgentHeaderIndex]"")); return resultFuture; }  if (!versionNumber.equals(headers.value(zumoVersionHeader))) { resultFuture.setException(new Exception(versionNumber + ""!= headers[zumoVersionHeader]"")); return resultFuture; }  if (!""application/json"".equals(headers.value(acceptHeaderIndex))) { resultFuture.setException(new Exception(""application/json != headers[acceptHeaderIndex]"")); return resultFuture; }  if (!""gzip"".equals(headers.value(acceptEncodingHeaderIndex))) { resultFuture.setException(new Exception(""gzip != headers[acceptEncodingHeaderIndex]"")); return resultFuture; }  ServiceFilterResponseMock response = new ServiceFilterResponseMock(); response.setContent(""{}"");  resultFuture.set(response);  return resultFuture; } });  try { client.getTable(""dummy"").execute().get(); } catch (Exception exception) { if (exception instanceof ExecutionException) { fail(exception.getCause().getMessage()); } else { fail(exception.getMessage()); } } } "	1	1	1	1	0	0
"@Override public void upsert(String tableName, JsonObject[] items, boolean fromServer) throws MobileServiceLocalStoreException { try { String invTableName = normalizeTableName(tableName);  int itemsCount = items.length;  int tableColumnsSize = mTables.get(invTableName).entrySet().size(); int maxSize = 999;  int pageSize = maxSize / tableColumnsSize;  int pageCounts = (itemsCount / pageSize) + 1;  int pendingItems = itemsCount;  for (int i=0; i < pageCounts; i++) {  int localPageSize = pageSize;  if (pendingItems < pageSize) { localPageSize = pendingItems; }  JsonObject[] pageItems = new JsonObject[localPageSize];  for(int j=0; j < localPageSize; j++) { pageItems[j] = items[(i * pageSize) + j]; }  Statement statement = generateUpsertStatement(invTableName, pageItems, fromServer);  if (fromServer && statement.sql == """") return;  SQLiteDatabase db = this.getWritableDatabaseSynchronized();  try { db.execSQL(statement.sql, statement.parameters.toArray()); } finally { this.closeDatabaseSynchronized(db); }  pendingItems -= pageSize; }  } catch (Throwable t) { throw new MobileServiceLocalStoreException(t); } } "	0	0	0	0	1	0
"@Override public void handleStreamData(ClientStreamChannelContext streamChannelContext, StreamResponsePacket packet) { LOGGER.info(""handleStreamData StreamChannel:{}, Packet:{}"", streamChannelContext, packet); } "	0	0	1	0	1	0
"@Override public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException { if (graphics == null) { throw new PrinterException(""No graphics specified""); } if (pageFormat == null) { throw new PrinterException(""No page format specified""); }  if (pageIndex + 1 > images.size()) { return NO_SUCH_PAGE; } log.trace(""Requested page {} for printing"", pageIndex);   BufferedImage imgToPrint = images.get(pageIndex); imgToPrint = fixColorModel(imgToPrint); if (imageRotation % 360 != 0) { imgToPrint = rotate(imgToPrint, imageRotation); }  Graphics2D graphics2D = (Graphics2D)graphics; // Suggested by Bahadir 8/23/2012 graphics2D.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY); graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, interpolation); graphics2D.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY); graphics2D.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY); graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); graphics2D.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);  log.trace(""{}"", graphics2D.getRenderingHints());   // apply image scaling double boundW = pageFormat.getImageableWidth(); double boundH = pageFormat.getImageableHeight();  int imgW = imgToPrint.getWidth(); int imgH = imgToPrint.getHeight();  if (scaleImage) { // scale image to smallest edge, keeping size ratio if ((imgToPrint.getWidth() / imgToPrint.getHeight()) >= (boundW / boundH)) { imgW = (int)boundW; imgH = (int)(imgToPrint.getHeight() / (imgToPrint.getWidth() / boundW)); } else { imgW = (int)(imgToPrint.getWidth() / (imgToPrint.getHeight() / boundH)); imgH = (int)boundH; } }  double boundX = pageFormat.getImageableX(); double boundY = pageFormat.getImageableY();  log.debug(""Paper area: {},{}:{},{}"", (int)boundX, (int)boundY, (int)boundW, (int)boundH); log.trace(""Image size: {},{}"", imgW, imgH);  // Now we perform our rendering graphics2D.drawImage(imgToPrint, (int)boundX, (int)boundY, (int)boundX + imgW, (int)boundY + imgH, 0, 0, imgToPrint.getWidth(), imgToPrint.getHeight(), null);  // Valid page return PAGE_EXISTS; } "	0	0	0	0	1	0
"@NiftyEventSubscriber(id = ""mapDropTarget"") public void dropOnMap(String topic, @Nonnull DroppableDroppedEvent data) { Element droppedElement = data.getDraggable().getElement(); final int dropSpotX = droppedElement.getX() + (droppedElement.getWidth() / 2); final int dropSpotY = droppedElement.getY() + (droppedElement.getHeight() / 2);  ItemCount amount = World.getInteractionManager().getMovedAmount(); final InteractionManager iManager = World.getInteractionManager(); if (amount == null) { LOGGER.error(""Corrupted drag detected!""); iManager.cancelDragging(); return; } if (ItemCount.isGreaterOne(amount) && isShiftPressed()) { numberSelect.requestNewPopup(1, amount.getValue(), new NumberSelectPopupHandler.Callback() { @Override public void popupCanceled() { // nothing }  @Override public void popupConfirmed(int value) { iManager.dropAtMap(dropSpotX, dropSpotY, ItemCount.getInstance(value)); } }); } else { iManager.dropAtMap(dropSpotX, dropSpotY, amount); } } "	0	0	1	1	0	0
@Test public void slice() throws Exception { //Create a CSG to slice CSG sliced = new Cube(10, 10, 10).toCSG().union(new Sphere(6.5).toCSG());  //Get a slice List<Polygon> polygons = Slice.slice(sliced, new Transform(), 0);  //Construct a CSG from that Polygon List CSG finished = CSG.fromPolygons(polygons);  System.out.println(finished.toObjString()); } 	0	0	0	0	1	0
"@Test public void testJacksonTypeBindingOne() throws Exception { InputStreamReader reader = new InputStreamReader(Resources.getResource(""sample.json"").openStream()); Book book = surfer.collectOne(reader, Book.class, ""$..book[1]""); assertEquals(""Evelyn Waugh"", book.getAuthor()); } "	0	0	0	0	1	0
"@Test public void testAny() throws Exception { Builder builder = context(); JsonPathListener mockListener = mock(JsonPathListener.class); builder.bind(""$.store..bicycle..*"", mockListener); surfer.surf(new InputStreamReader(Resources.getResource(""sample.json"").openStream()), builder.build()); verify(mockListener).onValue(eq(provider.primitive(""red"")), any(ParsingContext.class)); verify(mockListener).onValue(eq(provider.primitive(19.95)), any(ParsingContext.class)); } "	0	0	0	0	1	0
"@Test public void testParsingArray() throws Exception { Builder builder = context(); JsonPathListener wholeArray = mock(JsonPathListener.class); JsonPathListener stringElement = mock(JsonPathListener.class); JsonPathListener numberElement = mock(JsonPathListener.class); JsonPathListener booleanElement = mock(JsonPathListener.class); JsonPathListener nullElement = mock(JsonPathListener.class); JsonPathListener objectElement = mock(JsonPathListener.class);  builder.bind(""$"", wholeArray); builder.bind(""$[0]"", stringElement); builder.bind(""$[1]"", numberElement); builder.bind(""$[2]"", booleanElement); builder.bind(""$[3]"", nullElement); builder.bind(""$[4]"", objectElement); surfer.surf(new InputStreamReader(Resources.getResource(""array.json"").openStream()), builder.build()); Object object = provider.createObject(); provider.consumeObjectEntry(object, ""key"", provider.primitive(""value"")); Object array = provider.createArray(); provider.consumeArrayElement(array, provider.primitive(""abc"")); provider.consumeArrayElement(array, provider.primitive(8.88)); provider.consumeArrayElement(array, provider.primitive(true)); provider.consumeArrayElement(array, provider.primitiveNull()); provider.consumeArrayElement(array, object); verify(wholeArray).onValue(eq(array), any(ParsingContext.class)); verify(stringElement).onValue(eq(provider.primitive(""abc"")), any(ParsingContext.class)); verify(numberElement).onValue(eq(provider.primitive(8.88)), any(ParsingContext.class)); verify(booleanElement).onValue(eq(provider.primitive(true)), any(ParsingContext.class)); verify(nullElement).onValue(eq(provider.primitiveNull()), any(ParsingContext.class)); verify(objectElement).onValue(eq(object), any(ParsingContext.class));  } "	0	0	0	0	1	0
"@Test public void testCollectOneRaw() throws Exception { Object value = surfer.collectOne(new InputStreamReader(Resources.getResource(""sample.json"").openStream()), ""$..book[1,3][author,title]""); assertEquals(""Evelyn Waugh"", value); } "	0	0	0	0	1	0
@Override protected int setLayoutId() { return R.layout.dialog_payment_request_help; } 	0	0	0	0	1	0
"public void stream(OutputStream os) throws IOException, PermissionDeniedException {  if (LOG.isDebugEnabled()) { LOG.debug(""Stream started""); }  long startTime = System.currentTimeMillis();  try(final DBBroker broker = brokerPool.get(Optional.of(subject))) {  DocumentImpl document = null; try { // If it is not a collection, check if it is a document document = broker.getXMLResource(xmldbUri, Lock.READ_LOCK);  if (document.getResourceType() == DocumentImpl.XML_FILE) { // Stream XML document Serializer serializer = broker.getSerializer(); serializer.reset(); try { // Set serialization options serializer.setProperties(configuration);  // Serialize document try (Writer w = new OutputStreamWriter(os, ""UTF-8"")) { serializer.serialize(document, w); w.flush(); }  // don;t flush if (!(os instanceof VirtualTempFile)) { os.flush(); }  } catch (SAXException e) { LOG.error(e); throw new IOException(String.format(""Error while serializing XML document: %s"", e.getMessage()), e); }  } else { // Stream NON-XML document broker.readBinaryResource((BinaryDocument) document, os); os.flush(); } } finally { if (document != null) { document.getUpdateLock().release(Lock.READ_LOCK); } } } catch (EXistException e) { LOG.error(e); throw new IOException(e.getMessage());  } catch (PermissionDeniedException e) { LOG.error(e); throw e;  } finally { if (LOG.isDebugEnabled()) { LOG.debug(String.format(""Stream stopped, duration %s msec."", System.currentTimeMillis() - startTime)); } }  } "	0	0	0	0	1	0
"public static Game newGame(Map map) { Integer gameID = games.size(); String mapname = map.baseMapName+Integer.toString(gameID); boolean ok = copyDirectory('.' + File.separator + map.baseMapName, '.' + File.separator + mapname);  try { FileUtils.forceDelete( new File("".""+File.separator+mapname+File.separator+""uid.dat"") ); } catch(IOException e) { }  if(ok) { Bukkit.getLogger().log(Level.WARNING, ""ok""); } else { Bukkit.getLogger().log(Level.WARNING, ""bad""); } World world = Bukkit.getServer().createWorld(new WorldCreator(mapname)); Game game = new Game(map,gameID,world,Main.maxgamesize); games.put(gameID, game); return game; } "	0	0	1	0	1	0
"public static void main(String...args){ Vertice a = new Vertice((float) 1., (float)1.); Vertice b = new Vertice((float) 1.0, (float)2);  System.out.println(""SLOPE: "" + lineSlope(new Aresta(a, b))); System.out.println(""Is Hor: "" + isLineHorizontal(a, b)); System.out.println(""Is Ver: "" + isLineVertical(a, b)); } "	1	1	1	1	1	0
@Override public void detachView(boolean retainInstance) { super.detachView(retainInstance); if (subscription != null && !subscription.isDisposed()) { subscription.dispose(); } } 	1	1	1	0	1	0
"public void newSet(View view) { EditText text = (EditText) findViewById(R.id.edit_new_set_title); String title = text.getText().toString();  // Check if title is empty if (TextUtils.isEmpty(title)) { text.setError(getString(R.string.empty_title)); return; }  // Check if title is valid (can only have letters, numbers, and spaces) if (!title.matches(""[a-zA-Z0-9 ]+"")) { text.setError(getString(R.string.invalid_title)); return; }  // Check if title is available FlashcardProvider handle = new FlashcardProvider(getApplicationContext()); if (!handle.newSetTable(title)) { text.setError(getString(R.string.title_taken)); return; }  // Return to the main screen Intent main = new Intent(this, MainActivity.class); startActivity(main); finish(); } "	0	0	1	0	1	0
"@Override public View getView(int position, View convertView, final ViewGroup parent) { final Question question = getItem(position); QuestionHolder questionHolder = new QuestionHolder();; final View result = convertView;  LayoutInflater inflater = LayoutInflater.from(getContext()); convertView = inflater.inflate(R.layout.list_item_question, parent, false); questionHolder.qText = (TextView) convertView.findViewById(R.id.textViewQuestion); questionHolder.qText.setText(String.valueOf(question.getId()) + "": "" + question.getText()); questionHolder.qText.setTag(question.getId());  questionHolder.rgQuestion = (RadioGroup) convertView.findViewById(R.id.rgQuestion); // set question id a key questionHolder.rgQuestion.setTag(question.getId()); for (int i = 0; i < questionHolder.rgQuestion.getChildCount(); i++) { RadioButton rb = (RadioButton) questionHolder.rgQuestion.getChildAt(i); if (answers.get(question) == null) { if (rb.isChecked()) { answers.put(question, rb.getText().toString()); } } else if (rb.getText().toString() == answers.get(question)) { rb.setChecked(true); } }  questionHolder.rgQuestion.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() { @Override public void onCheckedChanged(RadioGroup radioGroup, int i) { RadioButton rb = (RadioButton) parent.findViewById(radioGroup.getCheckedRadioButtonId()); answers.put(question, rb.getText().toString()); } });  return convertView; } "	0	0	0	0	1	0
"private /*@Nullable*/ Pair<Class<? extends Annotation>, Prefix> getBaseUnitClassAndPrefix(AnnotationMirror anno) { // see if the annotation is an alias if (isAliasedAnnotation(anno)) { AnnotationMirror unitsMultipleAnno = getUnitsMultipleMetaAnnotation(anno);  // retrieve the Class of the base unit annotation Class<? extends Annotation> baseUnitAnnoClass = AnnotationUtils.getElementValueClass(unitsMultipleAnno, ""quantity"", true).asSubclass(Annotation.class);  // TODO: does every alias have to have a Prefix? // retrieve the Prefix of the alias unit Prefix prefix = AnnotationUtils.getElementValueEnum(unitsMultipleAnno, ""prefix"", Prefix.class, true);  // return the Class and the Prefix as a pair return Pair.of(baseUnitAnnoClass, prefix); } else { return null; } } "	0	0	0	0	1	0
"public void saveColumnOrderToConfig() { List<String> enumNames = new LinkedList<String>(); Enumeration<TableColumn> e = this.getColumnModel().getColumns(); while(e.hasMoreElements()) { String columnHeading = e.nextElement().getHeaderValue().toString(); try { enumNames.add(PokeColumn.getForHeading(columnHeading).toString()); } catch (IllegalArgumentException exc) { // can this happen in production use? } } String columnOrderEnums = String.join("","", enumNames); ConfigNew.getConfig().setString(ConfigKey.POKEMONTABLE_COLUMNORDER, columnOrderEnums); } "	0	0	0	0	1	0
private List<Cmdb> getComponentList(){ List<Cmdb> componentList; HpsmSoapModel hpsmSoapModel = new HpsmSoapModel();  hpsmSoapModel.setConfigurationItemSubType(hpsmSettings.getCompSubType()); hpsmSoapModel.setConfigurationItemType(hpsmSettings.getCompType()); hpsmSoapModel.setSoapAction(hpsmSettings.getDetailsSoapAction()); hpsmSoapModel.setRequestTypeName(hpsmSettings.getDetailsRequestType()); hpsmSoapModel.setStatus(hpsmSettings.getStatus());  componentList = getConfigurationItemList(hpsmSoapModel);  return componentList; } 	0	0	0	0	1	0
"private ColumnMetaData parseColumn(JSONObject jsonColumn) throws JSONException { ColumnMetaData columnMetaData = new ColumnMetaData(jsonColumn.getString(""name""), jsonColumn.getInt(""columnIndex"")); if (jsonColumn.has(""datatype"")) { columnMetaData.setDataType(jsonColumn.getString(""datatype"")); } if (jsonColumn.has(""table"")) { columnMetaData.setTable(jsonColumn.getString(""table"")); } if (jsonColumn.has(""propertyUrl"")) { columnMetaData.setPropertyUrl(jsonColumn.getString(""propertyUrl"")); } if (jsonColumn.has(""titles"")) { columnMetaData.setDataType(jsonColumn.getString(""titles"")); } return columnMetaData; } "	0	0	0	0	1	0
public void runSymbole() {  this.lecteur.pointeur.refInc();  } 	0	0	0	0	0	1
"@Define(""minutes"") public Integer getDurationInMinutes() { return Math.round(getDuration() / 60000f); } "	0	0	0	0	0	1
private Edge createFrom(@Nullable Edge edge) { return Optional.ofNullable(edge) .map(AutoCleanerIdEdge::new) .orElse(null); } 	0	0	0	0	0	1
"private void checkForDuplicatedEntry(MzTabParser context, long lineNumber) throws LineItemParsingHandlerException { if (context.getMetaDataSection().getMsRunEntry(getIndex()).getMsRunIdFormat() != null) { throw new LineItemParsingHandlerException(""DUPLICATED MS-Run ID Format FOUND AT LINE "" + lineNumber); } } "	0	0	0	0	1	0
private Program getPossibleParent(Population population, List<ProgramInfo> list) { double totalWeight = sumTotalWeight(list); double target = totalWeight * mutator.getNextDouble(); double weightSoFar = 0; Iterator<ProgramInfo> iterator = list.iterator(); while(iterator.hasNext()) { ProgramInfo programInfo = iterator.next(); weightSoFar += Math.abs(programInfo.getWeight()); if(weightSoFar >= target) { iterator.remove(); return population.getProgram(programInfo.getName()); } } return null; } 	0	0	0	0	1	0
"public void methodReceived(AMQStateManager stateManager, ConnectionCloseBody body, int channelId) throws AMQException { AMQProtocolSession session = stateManager.getProtocolSession();  if (_logger.isInfoEnabled()) { _logger.info(""ConnectionClose received with reply code/reply text "" + body.getReplyCode() + ""/"" + body.getReplyText() + "" for "" + session); } try { session.closeSession(); } catch (Exception e) { _logger.error(""Error closing protocol session: "" + e, e); }  MethodRegistry methodRegistry = session.getMethodRegistry(); ConnectionCloseOkBody responseBody = methodRegistry.createConnectionCloseOkBody(); session.writeFrame(responseBody.generateFrame(channelId));  } "	0	0	0	0	1	0
"@Test public void testParse() throws IOException { Resource fileResource = new ClassPathResource(""uk/ac/ebi/interpro/scan/io/tmhmm/rawResultOutputFile.txt""); assertNotNull(""File resource is NULL!"", fileResource); assertTrue(""File resource does not exist!"", fileResource.exists()); InputStream is = fileResource.getInputStream(); assertNotNull(""Input stream is NULL!"", is); Set<TMHMMProtein> proteins = parser.parse(is); assertEquals(""Size of protein set differs from the expected one!"", 3, proteins.size()); for (TMHMMProtein protein : proteins) { if (protein.getMatches().size() == 3) { for (TMHMMMatch match : protein.getMatches()) { //Testing signature properties Signature signature = match.getSignature(); assertNotNull(""Signature of protein with Id "" + protein.getProteinIdentifier() + "" shouldn't be Null!"", signature); assertEquals(""Signature accession of protein with Id "" + protein.getProteinIdentifier() + "" differs from the expected one!"", ""TMhelix"", signature.getAccession()); assertEquals(""Signature description of protein with Id "" + protein.getProteinIdentifier() + "" differs from the expected one!"", ""transmembrane helix"", signature.getDescription()); assertNotNull(""Signature library release shouldn't be Null!"", signature.getSignatureLibraryRelease()); assertEquals(""Signature library release version of protein with Id "" + protein.getProteinIdentifier() + "" differs from the expected one!"", ""2.5.1"", signature.getSignatureLibraryRelease().getVersion()); assertEquals(""Signature library of protein with Id "" + protein.getProteinIdentifier() + "" differs from the expected one!"", SignatureLibrary.TMHMM, signature.getSignatureLibraryRelease().getLibrary()); //Testing match locations checkMatchLocations(match.getLocations(), protein.getProteinIdentifier(), Arrays.asList(20, 62, 201), Arrays.asList(42, 84, 223)); } } else if (protein.getMatches().size() == 7) { for (TMHMMMatch match : protein.getMatches()) { //Testing match locations checkMatchLocations(match.getLocations(), protein.getProteinIdentifier(), Arrays.asList(35, 69, 106, 148, 193, 228, 270), Arrays.asList(57, 91, 128, 170, 215, 250, 287)); } } else if (protein.getMatches().size() == 8) { for (TMHMMMatch match : protein.getMatches()) { //Testing match locations checkMatchLocations(match.getLocations(), protein.getProteinIdentifier(), Arrays.asList(200, 234, 271, 314, 356, 391, 412, 438), Arrays.asList(222, 256, 293, 336, 378, 408, 431, 455)); } } else { assertTrue(""Unexpected protein with "" + protein.getMatches().size() + "" match(es) found!"", false); } } } "	0	0	1	1	1	0
private void setListFragment() { FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction(); Fragment fragment = new NearbyListFragment(); fragment.setArguments(bundle); fragmentTransaction.replace(R.id.container, fragment); fragmentTransaction.commit(); } 	0	0	1	0	1	0
"@Test public void testGeoJsonSerialization() throws IOException { SimpleModule module = new SimpleModule(); module.addSerializer(new Geoshape.GeoshapeGsonSerializer(Geoshape.class)); final ObjectMapper om = new ObjectMapper(); om.registerModule(module); assertEquals(""{\""type\"":\""Point\"",\""coordinates\"":[20.5,10.5]}"", om.writeValueAsString(Geoshape.point(10.5, 20.5))); assertEquals(""{\""type\"":\""Polygon\"",\""coordinates\"":[[20.5,10.5],[22.5,10.5],[22.5,12.5],[20.5,12.5]]}"", om.writeValueAsString(Geoshape.box(10.5, 20.5, 12.5, 22.5))); assertEquals(""{\""type\"":\""Circle\"",\""radius\"":30.5,\""coordinates\"":[20.5,10.5]}"", om.writeValueAsString(Geoshape.circle(10.5, 20.5, 30.5)));  } "	1	0	1	1	1	0
float minDistanceForSpacing(JoglDrawContext context, float spacing) { // TODO: something view-dependent and less arbitrary return spacing * 30; } 	0	0	1	0	1	0
"private void init() { // Inflate view LayoutInflater.from(mContext).inflate(R.layout.search_view, this, true);  // Get items mRoot = (CoordinatorLayout) findViewById(R.id.search_layout); mTintView = mRoot.findViewById(R.id.transparent_view); mSearchBar = (LinearLayout) mRoot.findViewById(R.id.search_bar); mBack = (ImageButton) mRoot.findViewById(R.id.action_back); mSearchEditText = (EditText) mRoot.findViewById(R.id.et_search); mVoice = (ImageButton) mRoot.findViewById(R.id.action_voice); mClear = (ImageButton) mRoot.findViewById(R.id.action_clear); mSuggestionsListView = (ListView) mRoot.findViewById(R.id.suggestion_list);  // Set click listeners mBack.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { closeSearch(); } });  mVoice.setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { onVoiceClicked(); } });  mClear.setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { mSearchEditText.setText(""""); } });  mTintView.setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { closeSearch(); } });  // Show voice button displayVoiceButton(true);  // Initialize the search view. initSearchView();  mAdapter = new CursorSearchAdapter(mContext,null,0); ((CursorAdapter)mAdapter).setFilterQueryProvider(new FilterQueryProvider() { @Override public Cursor runQuery(CharSequence constraint) { String filter = constraint.toString();  if (filter.isEmpty()) { return getHistoryCursor(); } else { return mContext.getContentResolver().query( HistoryContract.HistoryEntry.CONTENT_URI, null, HistoryContract.HistoryEntry.COLUMN_QUERY + "" LIKE ?"", new String[]{""%"" + filter + ""%""}, HistoryContract.HistoryEntry.COLUMN_IS_HISTORY + "" DESC, "" + HistoryContract.HistoryEntry.COLUMN_QUERY ); } } }); mSuggestionsListView.setAdapter(mAdapter); mSuggestionsListView.setTextFilterEnabled(true); } "	0	0	0	0	0	1
"public static void indexPartition(DecoratedKey key, ColumnFamilyStore cfs, Set<String> idxNames) { if (logger.isDebugEnabled()) logger.debug(""Indexing row {} "", cfs.metadata.getKeyValidator().getString(key.getKey()));  Set<SecondaryIndex> indexes = cfs.indexManager.getIndexesByNames(idxNames); SinglePartitionReadCommand cmd = SinglePartitionReadCommand.fullPartitionRead(cfs.metadata, FBUtilities.nowInSeconds(), key);  try (OpOrder.Group opGroup = cfs.keyspace.writeOrder.start(); UnfilteredRowIterator partition = cmd.queryMemtableAndDisk(cfs)) { cfs.indexManager.indexPartition(partition, opGroup, indexes); } } "	0	0	0	0	1	0
"@RequestMapping(value = ""/{userId}/photo"", method = RequestMethod.POST) public String setUserProfilePhoto(@RequestParam(""file"") MultipartFile fileImage, @PathVariable Integer userId, Model model) {  if (fileImage.isEmpty()) { model.addAttribute(""error"", ""Choose any file""); return ""users/user_profile""; } User user = userService.findById(userId);  if(!AuthorityUtil.checkForOwnerOfProfile(user.getSsoId())) return ""account/access_denied"";  try { byte[] bytes = fileImage.getBytes(); user.setUserProfilePhoto(bytes); userService.update(user); } catch (IOException e) { e.printStackTrace(); } return ""redirect:/users/"" + user.getSsoId(); } "	0	0	1	1	1	0
"protected void configureSslEngine(SSLEngine sslEngine, AsyncHttpClientConfig config) { sslEngine.setUseClientMode(true); if (!config.isDisableHttpsAlgorithm()) { SSLParameters params = sslEngine.getSSLParameters(); params.setEndpointIdentificationAlgorithm(""HTTPS""); sslEngine.setSSLParameters(params); } } "	0	0	0	0	1	0
"@Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { try { main.invoke(null, new Object[]{args}); } catch (Exception e) { throw new RuntimeException(""failed to invoke main(String...) on class: "" + mainClassName, e); } return null; } "	0	0	0	0	1	0
@Override public boolean markerClicked(Marker marker) {  if (mBikeStationData.containsMaker(marker)) { // Set the info window adapter before showing the info window as it may have changed by // another overlay. mMap.setInfoWindowAdapter(mBikeInfoWindowAdapter); BikeRentalStation bikeRentalStation = mBikeStationData.getBikeStationOnMarker(marker); marker.showInfoWindow(); if (mOnFocusChangedListener != null) { mOnFocusChangedListener.onFocusChanged(bikeRentalStation); }  mBikeStationData.selectMaker(marker);  ObaAnalytics.reportEventWithCategory( ObaAnalytics.ObaEventCategory.UI_ACTION.toString(), context.getString(R.string.analytics_action_button_press), context.getString(bikeRentalStation.isFloatingBike ? R.string.analytics_label_bike_station_marker_clicked : R.string.analytics_label_floating_bike_marker_clicked));  return true; } else { mBikeStationData.removeMarkerSelection(); } return false; } 	0	0	0	0	0	1
private void innerOnItemsLoaded(@NonNull final TLoadedItems loadedItems, final int insertPosition, final boolean reset) { final List<TItem> items = new ArrayList<>(loadedItems.getItems()); final boolean lastPage = insertPosition > size() - 1; if (!reset) { if (this.loadedItemsFilter != null) { removeDuplicatesFromList(items, this.loadedItemsFilter); } innerList.addAll(insertPosition, items); } else { resetState(); innerList.set(items); } if (lastPage) { moreItemsReference = loadedItems.getReference(); moreItemsCount.onNext(loadedItems.getMoreItemsCount()); } } 	1	0	0	0	1	0
"public String getSyncHost() { String host = m_env.getGlobalConfig().getProperty(""portal.sync.host""); if (Env.LOCAL.equals(m_env.getEnv()) || StringUtils.isBlank(host)) { return ""127.0.0.1""; } return host; } "	1	1	1	1	1	0
@Override protected Options getOptions() { return new Options().addOption(RECURSIVE_OPTION); } 	0	0	1	0	1	0
"@Test(expected = NotFoundException.class) public void testNotFound() throws Exception { DirectionsRoute[] routes = gpDirectionsService.getDirections( ""sdjfhsjfhsjf"", ""sjdfhjsdf7w7r"").await(); } "	0	0	0	0	0	1
"@Test public void gpTravelModeTest() throws Exception { DirectionsRoute[] routes = gpDirectionsService.newRequest() .mode(TravelMode.WALKING) .origin(""Via Provinciale, Marsicovetere"") .destination(""Via Nazionale, Marsicovetere"").await(); assertNotNull(routes); assertEquals(TravelMode.WALKING, routes[0].legs[0].steps[0].travelMode); } "	0	0	1	0	0	0
public void setValueAt(String path, Object value){  String []subPathsList = getPathAsList(path); Object o = j; if(subPathsList.length == 1){ j.put(path, value); } else{ for (int i = 0; i < subPathsList.length-1; i++) { o = getValueAt(subPathsList[i], o, null); } } if(o instanceof JsonObject){ ((JsonObject) o).put(subPathsList[subPathsList.length-1], value); } else if(o instanceof JsonArray){ try { ((JsonArray)o).getList().set(Integer.parseInt( subPathsList[subPathsList.length-1].substring( 1, subPathsList[subPathsList.length-1].length()-1)), value/*remove the []*/); } catch (NumberFormatException e) {} } } 	0	0	0	0	0	1
private void doPartial(String name) { JDBCAccess access = getJDBCAccess(); ImageLevelInfo li = access.getLevelInfo(access.getNumOverviews());  GeneralEnvelope env = new GeneralEnvelope(new double[] { li.getExtentMaxX() - DELTA, li.getExtentMaxY() - DELTA }, new double[] { li.getExtentMaxX() + DELTA, li.getExtentMaxY() + DELTA });  try { env.setCoordinateReferenceSystem(CRS.decode(CRSNAME)); imageMosaic(name, getConfigUrl(), env, 400, 400,Color.green,null,null); } catch (Exception e) { Assert.fail(e.getMessage()); } } 	1	1	1	0	1	0
"public static String doesNotExist(String path) { return String.format(""not(%s)"", path); } "	0	0	0	1	0	0
"private static String hasClassesInternal(String logicOp, String... classNames) { return Arrays.stream(classNames).map(XpathUtils::hasClass).collect(Collectors.joining("" "" + logicOp + "" "")); } "	0	0	0	1	0	0
@Override public boolean isWriteable(Class serializableClass, Type type, Annotation[] annotations, MediaType mediaType) { return checkForAnnotation(serializableClass); } 	0	0	0	0	1	0
@Override public void reset() {  // Set current slice index planeIndex = offsetContainer / planeSize;  // Set index inside the slice indexInPlane = offsetContainer % planeSize - 1;  // Set total index to index indexContainer = offsetContainer + indexInPlane;  type.updateIndex( indexInPlane ); type.updateContainer( this );  IntervalIndexer.indexToPosition( indexContainer, container.dimensions, position ); } 	0	0	0	0	1	0
public void setName(String name) { this.name = name; } 	0	0	1	0	1	0
"public void paintComponent(Graphics graphics) { Graphics2D g = Theme.setupGraphics2D(graphics); if (name == """" && serialport == """") { PreferencesMap boardPreferences = BaseNoGui.getBoardPreferences(); if (boardPreferences != null) setBoardName(boardPreferences.get(""name"")); else setBoardName(""-""); setSerialPort(PreferencesData.get(""serial.port"")); } g.setColor(background); Dimension size = getSize(); g.fillRect(0, 0, size.width, size.height);  g.setFont(font); g.setColor(foreground); int baseline = (size.height + g.getFontMetrics().getAscent()) / 2; g.drawString(text, scale(6), baseline);  g.setColor(messageForeground); String tmp = I18n.format(tr(""{0} on {1}""), name, serialport);  Rectangle2D bounds = g.getFontMetrics().getStringBounds(tmp, null);  g.drawString(tmp, size.width - (int) bounds.getWidth() - RESIZE_IMAGE_SIZE, baseline);  if (OSUtils.isMacOS()) { g.drawImage(resize, size.width - RESIZE_IMAGE_SIZE, 0, this); } } "	0	0	1	0	1	0
public void findVisitByUUID(FindVisitByUUIDListener listener) { String url = VISITS_BY_UUID_BASE_URL + listener.getPatientUUID() + VISIT_BY_UUID_END_URL; mLogger.d(SENDING_REQUEST + url);  JsonObjectRequestWrapper jsObjRequest = new JsonObjectRequestWrapper(Request.Method.GET, url, null, listener, listener, DO_GZIP_REQUEST); mOpenMRS.addToRequestQueue(jsObjRequest); } 	0	0	0	0	1	0
public void getUserInformation(UserInformationListener listener) { String url = USER_INFORMATION_BASE_URL + listener.getUsername(); mLogger.d(SENDING_REQUEST + url);  JsonObjectRequestWrapper jsObjRequest = new JsonObjectRequestWrapper(Request.Method.GET, url, null, listener, listener, DO_GZIP_REQUEST); mOpenMRS.addToRequestQueue(jsObjRequest); } 	0	0	0	0	1	0
public void getFullInformation(FullInformationListener listener) { String url = FULL_INFORMATION_BASE_URL + listener.getUserUUID(); mLogger.d(SENDING_REQUEST + url);  JsonObjectRequestWrapper jsObjRequest = new JsonObjectRequestWrapper(Request.Method.GET, url, null, listener, listener, DO_GZIP_REQUEST); mOpenMRS.addToRequestQueue(jsObjRequest); } 	0	0	0	0	1	0
public void findPatient(FindPatientListener listener) { String url = FIND_PATIENT_BASE_URL + listener.getLastQuery() + API.FULL_VERSION_NEXT_PARAM; mLogger.d(SENDING_REQUEST + url);  JsonObjectRequestWrapper jsObjRequest = new JsonObjectRequestWrapper(Request.Method.GET, url, null, listener, listener, DO_GZIP_REQUEST); mOpenMRS.addToRequestQueue(jsObjRequest); } 	0	0	0	0	1	0
@Override public float getColumnWidth(int j) { Float width = j < columnWidth.size() ? columnWidth.get(j) : null; return width != null ? width : defaultColumnWidth; } 	0	0	0	0	1	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.mdlive_location); clearMinimizedTime(); try { setDrawerLayout((DrawerLayout) findViewById(R.id.drawer_layout)); final Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); if (toolbar != null) { setSupportActionBar(toolbar); elevateToolbar(toolbar); } } catch (Exception e) { e.printStackTrace(); } this.setTitle(getString(R.string.mdl_update_location)); ((ImageView) findViewById(R.id.backImg)).setImageResource(R.drawable.exit_icon); findViewById(R.id.backImg).setContentDescription(getString(R.string.mdl_ada_back_button)); ((ImageView) findViewById(R.id.txtApply)).setImageResource(R.drawable.top_tick_icon); findViewById(R.id.txtApply).setContentDescription(getString(R.string.mdl_ada_tick_button)); ((TextView) findViewById(R.id.headerTxt)).setText(getString(R.string.mdl_update_location));    StateTxt = (TextView) findViewById(R.id.StateTxt);  setProgressBar(findViewById(R.id.progressDialog)); StateTxt.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { ZipcodeEditTxt.setText(""""); showListViewDialog(LongNameList, (TextView) v); } });  locationService = new LocationCoordinates(getApplicationContext()); intentFilter = new IntentFilter(); intentFilter.addAction(getClass().getSimpleName());  ZipcodeEditTxt = (EditText) findViewById(R.id.ZipEditTxt); ZipcodeEditTxt.setTag(null); ZipcodeEditTxt.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) {  } }); ZipcodeEditTxt.addTextChangedListener(new TextWatcher() { @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) {  }  @Override public void onTextChanged(CharSequence s, int start, int before, int count) { }  @Override public void afterTextChanged(Editable s) { StateTxt.setText(getString(R.string.mdl_select_state)); MdliveUtils.validateZipcodeFormat(ZipcodeEditTxt); } }); Button CurrentLocationTxt = (Button) findViewById(R.id.currentLocation); CurrentLocationTxt.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { showProgress(); getLocationCoordinates(); } });  /** * * This is to Parse the location that is to get long name and short name * of the state from the localisation */  try { SharedPreferences sharedpreferences = getSharedPreferences(PreferenceConstants.USER_PREFERENCES, Context.MODE_PRIVATE); String stateJson = sharedpreferences.getString(PreferenceConstants.USER_STATE_LIST, ""[]""); JSONArray stateJsonArray = new JSONArray(stateJson); Log.d(""JSON Count"", stateJsonArray.length() + """"); if(stateJsonArray.length()>0){ for(int i = 0; i<stateJsonArray.length();i++){ ShortNameList.add(stateJsonArray.getJSONObject(i).keys().next()); LongNameList.add(stateJsonArray.getJSONObject(i).getString(ShortNameList.get(i))); } Log.d(""stateList->"",LongNameList.toString()); Log.d(""stateList->"",ShortNameList.toString()); } else { LongNameList = Arrays.asList(getResources().getStringArray(R.array.mdl_stateName)); ShortNameList = Arrays.asList(getResources().getStringArray(R.array.mdl_stateCode)); } } catch (Exception e) { LongNameList = Arrays.asList(getResources().getStringArray(R.array.mdl_stateName)); ShortNameList = Arrays.asList(getResources().getStringArray(R.array.mdl_stateCode)); }   if (savedInstanceState == null) { getSupportFragmentManager(). beginTransaction(). add(R.id.dash_board__left_container, newInstance(), LEFT_MENU). commit();  getSupportFragmentManager(). beginTransaction(). add(R.id.dash_board__right_container, NotificationFragment.newInstance(), RIGHT_MENU). commit(); }  locationService = new LocationCoordinates(this); // First we need to check availability of play services if (MdliveUtils.checkPlayServices(this)) { // Building the GoogleApi client locationService.buildGoogleApiClient(); } } "	0	0	1	0	0	0
"private void fixDeadJob(JobPo jobPo) { try {  // 已经被移除了 if (appContext.getExecutingJobQueue().getJob(jobPo.getTaskTrackerNodeGroup(), jobPo.getTaskId()) == null) { return; }  jobPo.setGmtModified(SystemClock.now()); jobPo.setTaskTrackerIdentity(null); jobPo.setIsRunning(false); // 1. add to executable queue try { appContext.getExecutableJobQueue().add(jobPo); } catch (DupEntryException e) { LOGGER.warn(""ExecutableJobQueue already exist:"" + JSON.toJSONString(jobPo)); }  // 2. remove from executing queue appContext.getExecutingJobQueue().remove(jobPo.getJobId());  JobLogPo jobLogPo = JobDomainConverter.convertJobLog(jobPo); jobLogPo.setLogTime(SystemClock.now()); jobLogPo.setSuccess(true); jobLogPo.setLevel(Level.WARN); jobLogPo.setLogType(LogType.FIXED_DEAD); appContext.getJobLogger().log(jobLogPo);  stat.incFixExecutingJobNum();  } catch (Throwable t) { LOGGER.error(t.getMessage(), t); } LOGGER.info(""checkAndFix dead job ! {}"", JSON.toJSONString(jobPo)); } "	0	0	1	0	1	0
@Override public String getClassName() { return enumClass.getName(); } 	0	0	0	0	0	1
"public synchronized Map<File, List<SubtitleDescriptor>> getSubtitleListByHash(File[] files, String languageName) throws Exception { // singleton array with or empty array String[] languageFilter = languageName != null ? new String[] { getSubLanguageID(languageName) } : new String[0];  // remember hash for each file Map<Query, File> hashMap = new HashMap<Query, File>(files.length); Map<File, List<SubtitleDescriptor>> resultMap = new HashMap<File, List<SubtitleDescriptor>>(files.length);  // create hash query for each file List<Query> hashQueryList = new ArrayList<Query>(files.length);  for (File file : files) { // add hash query if (file.length() > HASH_CHUNK_SIZE) { String movieHash = computeHash(file); Query query = Query.forHash(movieHash, file.length(), languageFilter);  // check hash List<SubtitleDescriptor> cachedResults = getCache().getSubtitleDescriptorList(query, languageName); if (cachedResults == null) { hashQueryList.add(query); hashMap.put(query, file); } else { resultMap.put(file, cachedResults); } }  // prepare result map if (resultMap.get(file) == null) { resultMap.put(file, new LinkedList<SubtitleDescriptor>()); } }  if (hashQueryList.size() > 0) { // require login login();  // dispatch query for all hashes for (int bn = 0; bn < ceil((float) hashQueryList.size() / batchSize); bn++) { List<Query> batch = hashQueryList.subList(bn * batchSize, min((bn * batchSize) + batchSize, hashQueryList.size()));  // submit query and map results to given files for (OpenSubtitlesSubtitleDescriptor subtitle : xmlrpc.searchSubtitles(batch)) { // get file for hash File file = hashMap.get((batch.get(0)));  // add subtitle if (file != null) { resultMap.get(file).add(subtitle); } else { Logger.getLogger(getClass().getName()).log(Level.WARNING, ""Unable to map hash to file: "" + subtitle.getMovieHash()); } }  for (Query query : batch) { getCache().putSubtitleDescriptorList(query, languageName, resultMap.get(hashMap.get(query))); } } }  return resultMap; } "	0	0	0	0	1	0
"@Override public void uploadSubtitle(Object identity, Locale language, File videoFile, File subtitleFile) throws Exception { if (!(identity instanceof Movie && ((Movie) identity).getImdbId() > 0)) { throw new IllegalArgumentException(""Illegal Movie ID: "" + identity); }  int imdbid = ((Movie) identity).getImdbId(); String languageName = getSubLanguageID(language.getDisplayName(Locale.ENGLISH));  // subhash (md5 of subtitles), subfilename, moviehash, moviebytesize, moviefilename SubFile sub = new SubFile(); sub.setSubHash(md5(readFile(subtitleFile))); sub.setSubFileName(subtitleFile.getName()); sub.setMovieHash(computeHash(videoFile)); sub.setMovieByteSize(videoFile.length()); sub.setMovieFileName(videoFile.getName());  BaseInfo info = new BaseInfo(); info.setIDMovieImdb(imdbid); info.setSubLanguageID(languageName);  // encode subtitle contents sub.setSubContent(readFile(subtitleFile));  try { MediaInfo mi = new MediaInfo(); mi.open(videoFile); sub.setMovieFPS(mi.get(StreamKind.Video, 0, ""FrameRate"")); sub.setMovieTimeMS(mi.get(StreamKind.General, 0, ""Duration"")); mi.close(); } catch (Throwable e) { Logger.getLogger(getClass().getName()).log(Level.WARNING, e.getMessage(), e); }  // require login login();  xmlrpc.uploadSubtitles(info, sub); } "	1	0	1	0	1	0
public static void drawDanmaku(BaseDanmaku danmaku, Canvas canvas, float left, float top, boolean quick) { float _left = left; float _top = top; left += danmaku.padding; top += danmaku.padding; if (danmaku.borderColor != 0) { left += BORDER_WIDTH; top += BORDER_WIDTH; }  HAS_STROKE = CONFIG_HAS_STROKE; HAS_SHADOW = CONFIG_HAS_SHADOW; ANTI_ALIAS = !quick && CONFIG_ANTI_ALIAS; TextPaint paint = getPaint(danmaku, quick); if (danmaku.lines != null) { String[] lines = danmaku.lines; if (lines.length == 1) { if (hasStroke(danmaku)) { applyPaintConfig(danmaku, paint, true); canvas.drawText(lines[0], left, top - paint.ascent(), paint); } applyPaintConfig(danmaku, paint, false); canvas.drawText(lines[0], left, top - paint.ascent(), paint); } else { float textHeight = danmaku.paintHeight / lines.length; for (int t = 0; t < lines.length; t++) { if (lines[t] == null || lines[t].length() == 0) { continue; } if (hasStroke(danmaku)) { applyPaintConfig(danmaku, paint, true); canvas.drawText(lines[t], left, t * textHeight + top - paint.ascent(), paint); } applyPaintConfig(danmaku, paint, false); canvas.drawText(lines[t], left, t * textHeight + top - paint.ascent(), paint); } } } else { if (hasStroke(danmaku)) { applyPaintConfig(danmaku, paint, true); canvas.drawText(danmaku.text, left, top - paint.ascent(), paint); } applyPaintConfig(danmaku, paint, false); canvas.drawText(danmaku.text, left, top - paint.ascent(), paint); }  // draw underline if (danmaku.underlineColor != 0) { Paint linePaint = getUnderlinePaint(danmaku); float bottom = _top + danmaku.paintHeight - UNDERLINE_HEIGHT; canvas.drawLine(_left, bottom, _left + danmaku.paintWidth, bottom, linePaint); }  //draw border if (danmaku.borderColor != 0) { Paint borderPaint = getBorderPaint(danmaku); canvas.drawRect(_left, _top, _left + danmaku.paintWidth, _top + danmaku.paintHeight, borderPaint); }  } 	0	0	1	0	0	0
"private String createConstantText() throws MalformedTreeException, BadLocationException { StringBuilder sb = new StringBuilder(); IJavaProject javaProject = getCu().getJavaProject();  sb.append(CodeFormatterUtil.createIndentString(getIndentLevel(), javaProject)); if (!getVisibility().isEmpty()) { sb.append(getVisibility()).append("" ""); } sb.append(MODIFIER).append("" "").append(getConstantTypeName()).append(constantName).append("" = "").append( createExpressionText());  IDocument doc = new Document(sb.toString()); DefaultGroovyFormatter formatter = new DefaultGroovyFormatter(doc, new FormatterPreferences(unit), getIndentLevel()); TextEdit edit = formatter.format(); edit.apply(doc);  return getDefaultNewlineCharacterTwice() + doc.get(); } "	0	0	1	0	1	0
"public static void unregisterShellModule (Class shellModule) { final Logger logger = LoggerFactory.getLogger(ShellCommandsFactory.class);  Method[] methods = shellModule.getMethods();  for (Method method : methods) {  ShellCommand command = method.getAnnotation(ShellCommand.class); if (command != null) { logger.info(""Removing Shell command {}"", command.name()); ShellCommandsFactory.shellCommands.values().removeAll(Collections.singleton(command.name())); } }  } "	0	0	1	0	1	0
"public boolean delete(){ if (set(""deleted"", ""1"")) { List<Xid> xids = new Query<Xid>(Xid.class, Xid.FLD_OBJECT, getId()).execute(); for (Xid xid : xids) { xid.delete(); } new DBLog(this, DBLog.TYP.DELETE); IPersistentObject sel = ElexisEventDispatcher.getSelected(this.getClass()); if ((sel != null) && sel.equals(this)) { ElexisEventDispatcher.clearSelection(this.getClass()); } ElexisEventDispatcher.getInstance().fire( new ElexisEvent(this, getClass(), ElexisEvent.EVENT_DELETE)); return true; } return false; } "	0	0	0	0	1	0
@Test public void testGetPseudoHeritabilityFromStudy() { SecurityUtils.setAnonymousUser(); Study study = studyRepository.findOne(160L); Double pseudo = service.getPseudoHeritability(study); assertThat(pseudo, is(0.8788464607344941)); } 	0	0	0	0	0	1
@Override public Double getPseudoHeritability(Long alleleAssayId, TraitUom traitUom, Transformation transformation) { return getPseudoHeritability(new ArrayList<>(traitUom.getTraits()), transformation, alleleAssayId); } 	0	0	0	0	0	1
"@Test public void testCollectionVertexAndEdgeMax() throws Exception { FlinkAsciiGraphLoader<GraphHeadPojo, VertexPojo, EdgePojo> loader = getLoaderFromString("""" + ""g0["" + ""(va {vp=0.5});"" + ""(vb {vp=0.3});"" + ""(vc {vp=0.1});"" + ""(va)-[ea {ep=2}]->(vb);"" + ""(vb)-[eb]->(vc)"" + ""]"" + ""g1["" + ""(va)-[ea]->(vb);"" + ""]"" + ""g2[]"");  GraphCollection<GraphHeadPojo, VertexPojo, EdgePojo> inputCollection = loader.getGraphCollectionByVariables(""g0"", ""g1"", ""g2"");  GraphCollection<GraphHeadPojo, VertexPojo, EdgePojo> outputCollection = inputCollection .apply(new ApplyAggregation<>(VERTEX_MAX, PropertyValue.create(0f), new MaxVertexProperty<GraphHeadPojo, VertexPojo, EdgePojo>( VERTEX_PROPERTY, Float.MIN_VALUE))) .apply(new ApplyAggregation<>(EDGE_MAX, PropertyValue.create(Long.MIN_VALUE), new MaxEdgeProperty<GraphHeadPojo, VertexPojo, EdgePojo>( EDGE_PROPERTY, Long.MIN_VALUE)));  GradoopId g0Id = loader.getGraphHeadByVariable(""g0"").getId(); GradoopId g1Id = loader.getGraphHeadByVariable(""g1"").getId(); GradoopId g2Id = loader.getGraphHeadByVariable(""g2"").getId();  for (EPGMGraphHead graphHead : outputCollection.getGraphHeads().collect()) { assertTrue(""edge maximum not set"", graphHead.hasProperty(EDGE_MAX)); assertTrue(""vertex maximum not set"", graphHead.hasProperty(VERTEX_MAX)); if (graphHead.getId().equals(g0Id)) { assertEquals( 2, graphHead.getPropertyValue(EDGE_MAX).getLong()); assertEquals( 0.5f, graphHead.getPropertyValue(VERTEX_MAX).getFloat(), 0.00001); } else if (graphHead.getId().equals(g1Id)) { assertEquals( 2, graphHead.getPropertyValue(EDGE_MAX).getLong()); assertEquals( 0.5f, graphHead.getPropertyValue(VERTEX_MAX).getFloat(), 0.00001); } else if (graphHead.getId().equals(g2Id)) { assertEquals( Long.MIN_VALUE, graphHead.getPropertyValue(EDGE_MAX).getInt()); assertEquals( Float.MIN_VALUE, graphHead.getPropertyValue(VERTEX_MAX) .getFloat(), 0.00001); }  else { Assert.fail(""unexpected graph head: "" + graphHead); } } } "	0	0	0	0	0	1
"private void startAlarmForReconnect(long delay, ApnContext apnContext) { String apnType = apnContext.getApnType();  Intent intent = new Intent(INTENT_RECONNECT_ALARM + ""."" + apnType); intent.putExtra(INTENT_RECONNECT_ALARM_EXTRA_REASON, apnContext.getReason()); intent.putExtra(INTENT_RECONNECT_ALARM_EXTRA_TYPE, apnType); intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);  // Get current sub id. int subId = SubscriptionManager.getDefaultDataSubscriptionId(); intent.putExtra(PhoneConstants.SUBSCRIPTION_KEY, subId);  if (DBG) { log(""startAlarmForReconnect: delay="" + delay + "" action="" + intent.getAction() + "" apn="" + apnContext); }  PendingIntent alarmIntent = PendingIntent.getBroadcast(mPhone.getContext(), 0, intent, PendingIntent.FLAG_UPDATE_CURRENT); apnContext.setReconnectIntent(alarmIntent);  // Use the exact timer instead of the inexact one to provide better user experience. // In some extreme cases, we saw the retry was delayed for few minutes. // Note that if the stated trigger time is in the past, the alarm will be triggered // immediately. mAlarmManager.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + delay, alarmIntent); } "	0	0	0	0	1	0
"private List<String> getServiceClassifications(Model model, String serviceURI) { return rdfHelper.getObjectUris(model, serviceURI, ""usdl:hasClassification""); } "	0	0	0	0	1	0
public void savePlayerPosition() { if (this.player != null) { this.playerPosition = player.getCurrentPosition(); } } 	0	0	1	0	1	0
"public static void process_all_vars_refs_only( MethodInfo mi, RootInfo root, /*Object[] tag_frame,*/ Object obj, Object[] args, Object ret_val) {  debug_timing.log(""process_all_vars_refs_only for %s%n"", mi);  if (merge_dv.enabled()) { merge_dv.log(""this: %s%n"", obj); merge_dv.log(""arguments: %s%n"", ArraysMDE.toString(args)); }  // Map from an Object to the Daikon variable that currently holds // that object. IdentityHashMap<Object, DaikonVariableInfo> varmap = new IdentityHashMap<Object, DaikonVariableInfo>();  for (DaikonVariableInfo dv : root.children) { if (dv instanceof ThisObjInfo) { merge_comparability_refs_only(varmap, null, obj, dv); } else if (dv instanceof ParameterInfo) { ParameterInfo pi = (ParameterInfo) dv; Object p = args[pi.getArgNum()];  // If variable is primitive, ignore it if (!pi.isPrimitive()) merge_comparability_refs_only(varmap, null, p, pi); } else if (dv instanceof ReturnInfo) { ReturnInfo ri = (ReturnInfo) dv;  // If variable is primitive, ignore it if (!mi.return_type().isPrimitive()) { merge_comparability_refs_only(varmap, null, ret_val, dv); } } else if (dv instanceof FieldInfo) { FieldInfo fi = (FieldInfo) dv; assert fi.isStatic() : ""non static field at root "" + dv;  // If variable is primitive, ignore it if (!fi.isPrimitive()) merge_comparability_refs_only(varmap, null, null, dv); } else if (dv instanceof StaticObjInfo) { for (DaikonVariableInfo static_dv : dv.children) { FieldInfo fi = (FieldInfo) static_dv; assert fi.isStatic() : ""non static field at root "" + dv;  // If variable is primitive, ignore it if (!fi.isPrimitive()) merge_comparability_refs_only(varmap, null, null, static_dv); } } else { throw new Error(""unexpected node "" + dv); } } debug_timing.log(""exit process_all_vars for %s%n"", mi); } "	0	0	0	0	0	1
public boolean dca( List< SWRLBuiltInArgument> arguments) throws SWRLBuiltInException { checkNumberOfArgumentsEqualTo(2, arguments.size());  Set<OWLDisjointClassesAxiom> axioms = getBuiltInBridge().getOWLOntology() .getAxioms(AxiomType.DISJOINT_CLASSES, Imports.INCLUDED).stream().flatMap(a -> a.asPairwiseAxioms().stream()) .collect(Collectors.toSet());  if (axioms.isEmpty()) return false; else { Map< Integer,  OWLObject> inputArgumentValues = getInputArgumentValues(arguments, SWRLBuiltInArgumentType.CLASS_EXPRESSION, SWRLBuiltInArgumentType.CLASS_EXPRESSION); Map< Integer,  SWRLMultiValueVariableBuiltInArgument> outputMultiValueArguments = createOutputMultiValueArguments( arguments);  for (OWLDisjointClassesAxiom axiom : axioms) { OWLClassExpression candidateValue1 = axiom.getClassExpressionsAsList().get(0); OWLClassExpression candidateValue2 = axiom.getClassExpressionsAsList().get(2);  if (!noBoundArgumentsMismatch(inputArgumentValues, candidateValue1, candidateValue2)) { if (outputMultiValueArguments.isEmpty()) return true; // We have a match and there are no unbound arguments - return immediately else { // We have a match so update any unbound arguments with the matched values if (outputMultiValueArguments.containsKey(0)) outputMultiValueArguments.get(0).addArgument(createClassExpressionBuiltInArgument(candidateValue1));  if (outputMultiValueArguments.containsKey(1)) outputMultiValueArguments.get(1).addArgument(createClassExpressionBuiltInArgument(candidateValue2)); } } } return processOutputMultiValueArguments(arguments, outputMultiValueArguments); } } 	0	0	1	0	0	0
private boolean contains(Genome genome) { return genomes.contains(genome); } 	0	0	1	0	1	0
"public HudItem get(String name) { for(HudItem hudItem : all.toArray(new HudItem[all.size()])) { if(name.equals(hudItem.getName())) return hudItem; } Customize.log.warn(""HUDItem ""+ name + "" isn't in the registry. Skipping""); return null; } "	0	0	1	0	1	0
public void visitPostOrder(QueryVisitor visitor) { visitImpl(visitor, operationDefinition.getSelectionSet(), schema.getQueryType(), null, false); } 	0	0	0	0	1	0
"@Override public void onItemSelected( Presenter.ViewHolder itemViewHolder, Object item, RowPresenter.ViewHolder rowViewHolder, Row row ) {  if( item instanceof ProgramModel ) {  ProgramModel programModel = (ProgramModel) item; mBackgroundURI = URI.create( getSharedPreferencesModule().getMasterBackendUrl() + ""/Content/GetRecordingArtwork?Inetref="" + programModel.getInetref() + ""&Type=banner"" ); startBackgroundTimer();  }  } "	0	0	0	0	1	0
"private boolean performQaFrameworkBuild(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {  FilePath workspace = build.getWorkspace();  if (workspace == null) { throw new IOException(""Invalid workspace. Cannot continue.""); }  Computer currentComputer = Computer.currentComputer();  if (currentComputer == null) { throw new IOException(""Invalid machine. Cannot continue.""); }  Node node = currentComputer.getNode(); if (node == null) { throw new IOException(""Invalid machine. Cannot continue.""); }  QAFrameworkPostBuildActionSetup qaFrameworkPostBuildActionSetup = (QAFrameworkPostBuildActionSetup) sourceQAFramework; QAFrameworkInstallationConfiguration qaFrameworkInstallationConfiguration = QAFrameworkInstallationConfiguration .getInstallationByName(qaFrameworkPostBuildActionSetup.qaInstallation);  if (qaFrameworkInstallationConfiguration == null) { String msg = String.format( ""The job uses a QA Framework installation (%s) that is misconfigured or no longer exists, please reconfigure."", qaFrameworkPostBuildActionSetup.qaInstallation); log.log(Level.SEVERE, msg); outStream.println(msg); build.setResult(Result.FAILURE); return false; }  qaFrameworkInstallationConfiguration = qaFrameworkInstallationConfiguration.forNode(node, listener);  outStream.println(VersionInfo.getPluginVersion());  PRQAToolSuite suite = qaFrameworkInstallationConfiguration;  outStream.println(Messages.PRQANotifier_ReportGenerateText()); outStream.println(""Workspace : "" + workspace.getRemote());  HashMap<String, String> environmentVariables;  environmentVariables = suite.createEnvironmentVariables(workspace.getRemote());  PRQAApplicationSettings appSettings = new PRQAApplicationSettings( qaFrameworkInstallationConfiguration.getHome()); QaFrameworkReportSettings qaReportSettings = null; try { qaReportSettings = setQaFrameworkReportSettings(qaFrameworkPostBuildActionSetup, build, listener); } catch (PrqaSetupException ex) { log.log(Level.SEVERE, ex.getMessage(), ex); outStream.println(ex.getMessage()); build.setResult(Result.FAILURE); return false; }  Collection<QAFrameworkRemoteReport> remoteReports = new ArrayList<>();  Collection<QAFrameworkRemoteReportUpload> remoteReportUploads = new ArrayList<>();  if (qaFrameworkPostBuildActionSetup.chosenServers != null && !qaFrameworkPostBuildActionSetup.chosenServers.isEmpty()) { for (String chosenServer : qaFrameworkPostBuildActionSetup.chosenServers) { QAVerifyServerSettings qaVerifySettings = setQaVerifyServerSettings(chosenServer); QAFrameworkReport report = new QAFrameworkReport(qaReportSettings, qaVerifySettings, appSettings, environmentVariables);  remoteReports.add(new QAFrameworkRemoteReport(report, listener, launcher.isUnix())); remoteReportUploads.add(new QAFrameworkRemoteReportUpload(report, listener, launcher.isUnix())); } } else { QAFrameworkReport report = new QAFrameworkReport(qaReportSettings, setQaVerifyServerSettings(null), appSettings, environmentVariables); remoteReports.add(new QAFrameworkRemoteReport(report, listener, launcher.isUnix())); }  PRQARemoteToolCheck remoteToolCheck = new PRQARemoteToolCheck(new QACli(), environmentVariables, appSettings, qaReportSettings, listener, launcher.isUnix()); PRQAComplianceStatus currentBuild; try { QAFrameworkRemoteReport remoteReport = remoteReports.iterator().next(); currentBuild = performBuild(build, remoteToolCheck, remoteReport, qaReportSettings, listener); } catch (PrqaException ex) { log.log(Level.SEVERE, ""PrqaException"", ex); outStream.println(ex.getMessage()); outStream.println(Messages.PRQANotifier_FailedGettingResults()); build.setResult(Result.FAILURE); return false; }  Tuple<PRQAReading, AbstractBuild<?, ?>> previousBuildResultTuple = getPreviousReading(build, Result.SUCCESS);  PRQAReading previousStableBuildResult = previousBuildResultTuple != null ? previousBuildResultTuple.getFirst() : null;  boolean res = true;  log.fine(""thresholdsDesc is null: "" + (thresholdsDesc == null)); if (thresholdsDesc != null) { log.fine(""thresholdsDescSize: "" + thresholdsDesc.size()); }  res = evaluate(previousStableBuildResult, thresholdsDesc, currentBuild); log.fine(""Evaluated to: "" + res);  PRQABuildAction action = new PRQABuildAction(build); action.setResult(currentBuild); action.setPublisher(this);  Result buildResult = build.getResult();  if (buildResult == null) { return false; } if (!res && !buildResult.isWorseOrEqualTo(Result.FAILURE)) { build.setResult(Result.UNSTABLE); }  if (qaReportSettings.isLoginToQAV() && qaReportSettings.isPublishToQAV()) { if (qaReportSettings.isQaUploadWhenStable() && buildResult.isWorseOrEqualTo(Result.FAILURE)) { outStream.println(""UPLOAD WARNING: QAV Upload cant be perform because build is Unstable""); log.log(Level.WARNING, ""UPLOAD WARNING - QAV Upload cant be perform because build is Unstable""); } else { if (!qaReportSettings.isQaUploadWhenStable() && !buildResult.isWorseOrEqualTo(Result.FAILURE)) { outStream.println(""UPLOAD WARNING: Build is Unstable but upload will continue...""); } outStream.println(""UPLOAD INFO: QAV Upload...""); for (QAFrameworkRemoteReportUpload remoteReportUpload : remoteReportUploads) { try { performUpload(build, remoteToolCheck, remoteReportUpload); } catch (PrqaException ex) { log.log(Level.SEVERE, ex.getMessage(), ex); outStream.println(ex.getMessage()); build.setResult(Result.FAILURE); return false; } } } }  outStream.println(""\n----------------------BUILD Results-----------------------\n""); if (previousBuildResultTuple != null) { outStream.println(Messages.PRQANotifier_PreviousResultBuildNumber(previousBuildResultTuple.getSecond().number)); outStream.println(previousBuildResultTuple.getFirst());  } else { outStream.println(Messages.PRQANotifier_NoPreviousResults()); } outStream.println(Messages.PRQANotifier_ScannedValues()); outStream.println(currentBuild);  build.addAction(action); return true; } "	0	0	0	0	0	1
"@Override public LogEventViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { View view = null;  cal = new GregorianCalendar().getTime();  int count = logEventModelList.size()-1;  System.out.println(""class LogEventAdapter LogEventViewHolder onCreateViewHolder(). Count: "" + count + "" Type: "" + viewType);  if(viewType == LogEventConstant.DIET) { System.out.println(""viewType == LogEventConstant.DIET""); view = inflater.inflate(R.layout.diet_fragment, parent, false);  // GET THE CURRENT DATE TO BE DISPLAYED INITIALLY IN THE TEXTVIEW etDate = (EditText)view.findViewById(R.id.editTextDateDiet); etTime = (EditText)view.findViewById(R.id.editTextTimeDiet); etDescription = (EditText)view.findViewById(R.id.editTextDietDescription); etValue = (EditText)view.findViewById(R.id.editTextDietQty);  cal.getTime();  } else if(viewType == LogEventConstant.EXERCISE) { System.out.println(""viewType == LogEventConstant.EXERCISE""); view = inflater.inflate(R.layout.exercise_fragment, parent, false);  // GET THE CURRENT DATE TO BE DISPLAYED INITIALLY IN THE TEXTVIEW etDate = (EditText)view.findViewById(R.id.editTextDateExercise); etTime = (EditText)view.findViewById(R.id.editTextTimeExercise); etDescription = (EditText)view.findViewById(R.id.editTextExerciseDescription); etValue = (EditText)view.findViewById(R.id.editTextExerciseDuration);  cal.getTime(); } else if(viewType == LogEventConstant.MEDICATION) { System.out.println(""viewType == LogEventConstant.MEDICATION""); view = inflater.inflate(R.layout.medication_fragment, parent, false);  // GET THE CURRENT DATE TO BE DISPLAYED INITIALLY IN THE TEXTVIEW etDate = (EditText)view.findViewById(R.id.editTextDateMeds); etTime = (EditText)view.findViewById(R.id.editTextTimeMeds); etDescription = (EditText)view.findViewById(R.id.editTextMedicationDescription); etValue = (EditText)view.findViewById(R.id.editTextMedicationQty);  cal.getTime(); }  sdf = new SimpleDateFormat(""MM/dd/yyyy""); etDate.setText(sdf.format(cal.getTime())); logEventModelList.get(count).setDate(sdf.format(cal.getTime()));  sdf = new SimpleDateFormat(""hh:mm:aa""); etTime.setText(sdf.format(cal.getTime())); logEventModelList.get(count).setTime(sdf.format(cal.getTime()));  return new LogEventViewHolder(view, viewType, new MyCustomEditTextListener(LogEventConstant.DESCRIPTION), new MyCustomEditTextListener(LogEventConstant.VALUE), new MyCustomEditTextListener(LogEventConstant.DATE), new MyCustomEditTextListener(LogEventConstant.TIME)); } "	0	0	0	1	0	0
public List<PeriodicMeterReads> getMeterReads() { return this.meterReads; } 	0	0	0	0	1	0
public List<PeriodicMeterReadsGas> getMeterReadsGas() { return this.meterReadsGas; } 	0	0	0	0	1	0
"private void extractEventListData() { if (mEventList != null){ //            System.out.println(""extractEventListData() - mEventList valid, now extracting...""); for (Event event : mEventList) { System.out.println(""extractEventListData() - event extracted.""); mCalendarAdapter.addItemToDataset(event); } mCalendarAdapter.notifyDataSetChanged(); } else { System.out.println(""extractEventListData() - mEventList was null.""); TextView nulltext = (TextView) getView().findViewById(R.id.textFragment); nulltext.setText(""No events were found.""); Toast toast = Toast.makeText(getActivity().getApplicationContext(), ""No events found! Please refresh this page."", Toast.LENGTH_SHORT); toast.show(); } } "	0	0	1	0	1	0
"@Override public List<String> checkJqlQuery(@Nonnull String jqlQuery) { checkNotNull(jqlQuery, ""jqlQuery is null"");  try { // This will throw an exception if the jql query is invalid. if(execute(jqlQuery, SUCCESS_ON.STATUS_200)) { return ImmutableList.<String>of(); } else { return ImmutableList.of(""JQL Query is invalid.""); }  } catch (JiraLookupsException e) { e.addMessageForApplicationLinksNotPresent(getJiraApplicationLinks(), ""JQL Query is invalid."");  return e.getYaccErrors().stream() .map(YaccError::getMessage) .collect(Collectors.toList()); } } "	1	0	0	0	1	0
"public ProductionDTO save(ProductionDTO productionDTO) { log.debug(""Request to save Production : {}"", productionDTO); Production production = productionMapper.productionDTOToProduction(productionDTO); if (production.getId() != null) { supplyService.returnSupplies(production.getId()); }  productionRepository.loadProducts(production); Set<SupplyUsage> supplyUsages = supplyService.useSupplies(production); production.setSupplyUsages(supplyUsages);  production = productionRepository.save(production); ProductionDTO result = productionMapper.productionToProductionDTO(production); return result; } "	0	0	0	0	0	1
"@Test @Ignore public void testMultipart() throws IOException, XmlPullParserException, ClientException { byte[] largeObject = new byte[10 * 1024 * 1024]; for (int i = 0; i < 10 * 1024 * 1024; i++) { largeObject[i] = 'a'; } //        Client client = Client.getClient(""http://localhost:9000""); Client client = Client.getClient(""https://s3-us-west-2.amazonaws.com""); client.enableLogging(); try { client.putObject(""examplebucket"", ""bar2"", ""application/octet-stream"", largeObject.length * 2, new ByteArrayInputStream(largeObject)); } catch (IOException ex) { ex.printStackTrace(); } largeObject = new byte[20 * 1024 * 1024]; for (int i = 0; i < 20 * 1024 * 1024; i++) { largeObject[i] = 'a'; } client.enableLogging(); Iterator<Result<Upload>> examplebucket = client.listAllUnfinishedUploads(""examplebucket""); System.out.println(examplebucket.next().getResult()); client.putObject(""examplebucket"", ""bar2"", ""application/octet-stream"", largeObject.length, new ByteArrayInputStream(largeObject)); examplebucket = client.listAllUnfinishedUploads(""examplebucket""); System.out.println(examplebucket.hasNext()); } "	0	0	0	0	1	0
"@Override public boolean validate(@NotNull PantsProjectSettings settings) throws ConfigurationException { final String projectUrl = VfsUtil.pathToUrl(settings.getExternalProjectPath()); final VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(projectUrl); if (file == null) { throw new ConfigurationException(PantsBundle.message(""pants.error.file.not.exists"")); } if (PantsUtil.isExecutable(file.getPath())) { return true; } if (!PantsUtil.isPantsProjectFile(file)) { throw new ConfigurationException(PantsBundle.message(""pants.error.not.build.file.path.or.directory"")); } if (PantsUtil.isBUILDFileName(file.getName()) && myTargets.getSelectedIndices().length == 0) { throw new ConfigurationException(PantsBundle.message(""pants.error.no.targets.are.selected"")); } return true; } "	0	0	0	0	1	0
public void bindViews() { firstColor = (ImageButton) findViewById(R.id.first); secondColor = (ImageButton) findViewById(R.id.second); thirdColor = (ImageButton) findViewById(R.id.third); fourthColor = (ImageButton) findViewById(R.id.fourth); toleranceColor = (ImageButton) findViewById(R.id.tolerance); convertResistance = (Button) findViewById(R.id.resistance_conversion); getResistance = (Button) findViewById(R.id.show_resistance); resistanceTextView = (TextView) findViewById(R.id.resistance_value); toleranceTextView = (TextView) findViewById(R.id.tolerance_value); enteredResistanceValue = (EditText) findViewById(R.id.resistance_entered); enteredResistancePower = (EditText) findViewById(R.id.resistance_power); parseResistance = (Button) findViewById(R.id.parse_resistance); convertedFirstColor = (ImageView) findViewById(R.id.converted_first); convertedSecondColor = (ImageView) findViewById(R.id.converted_second); convertedThirdColor = (ImageView) findViewById(R.id.converted_third); convertedFourthColor = (ImageView) findViewById(R.id.converted_fourth); convertedToleranceColor = (ImageView) findViewById(R.id.converted_tolerance_space); toleranceSpinner = (Spinner) findViewById(R.id.tol_spinner); } 	0	0	0	0	1	0
"public int read(final ByteBuffer dst) throws IOException { final int state = this.state; if (anyAreSet(state, READ_FLAG_SHUTDOWN)) { return -1; } if (anyAreSet(state, READ_FLAG_EOF)) { // read data if (readBuffer.getResource().position() > 0) { final ByteBuffer readBufferResource = readBuffer.getResource(); readBufferResource.flip(); try { if (TRACE_SSL) msg.tracef(""TLS copy unwrapped data from %s to %s"", Buffers.debugString(readBufferResource), Buffers.debugString(dst)); return Buffers.copy(dst, readBufferResource); } finally { readBufferResource.compact(); } } return -1;  } else if (allAreClear(state, FLAG_TLS)) { int res = sourceConduit.read(dst); if (res == 0) { if (allAreSet(state, READ_FLAG_READY)) { this.state = state & ~READ_FLAG_READY; } } else if (res == -1) { this.state = state | READ_FLAG_EOF & ~READ_FLAG_READY; } return res; } else { // regular TLS time final ByteBuffer[] readBufferHolder = this.readBufferHolder; readBufferHolder[0] = dst; try { return (int) performIO(IO_GOAL_READ, NO_BUFFERS, 0, 0, readBufferHolder, 0, 1); } finally { readBufferHolder[0] = null; } } } "	1	1	1	1	1	0
private void redoEdit(Task newTask, Task originalTask) throws DuplicateTaskException, IndexOutOfBoundsException, TaskNotFoundException { model.editTaskUndoRedo(model.getIndexFromTask(originalTask), newTask); } 	0	0	0	0	1	0
"private static InfluxDbSender GetTcpSender() throws Exception { return new InfluxDbTcpSender(""127.0.0.1"", 8094, 1000, ""dropwzard"", TimeUnit.SECONDS, """"); } "	0	0	1	1	0	0
"@ConfigBinding(key = ""randomcolours"", invocation = EDTInvocation.class) public void handleRandomColours(final List<String> value) { randColours = value.toArray(new String[value.size()]); } "	0	0	0	0	0	1
"@Test public void testExecutionStoredInDatabase() throws IllegalAccessException, IOException, InstantiationException, AlgorithmExecutionException, NoSuchMethodException, InvocationTargetException, ClassNotFoundException, EntityStorageException, AlgorithmLoadingException { // Setup HibernateUtil.clear();  List<ConfigurationValue> configurationValues = new LinkedList<>(); configurationValues.add(new ConfigurationValueRelationalInputGenerator(""identifier"", mock( RelationalInputGenerator.class)));  Algorithm algorithm = new Algorithm(""example_indirect_interfaces_algorithm.jar""); algorithm = resource.store(algorithm);  FileInput expectedInput = new FileInput(""some_file""); FileInputResource fileInputResource = new FileInputResource(); fileInputResource.store(expectedInput);  List<Input> inputs = new ArrayList<>(); inputs.add(expectedInput);  // Execute functionality executor.executeAlgorithmWithValues(algorithm, configurationValues, inputs, ""identifier""); ExecutionResource executionResource = new ExecutionResource(); List<Execution> actualExecutions = executionResource.getAll();  // Check result assertFalse(actualExecutions.isEmpty()); Execution actualExecution = actualExecutions.get(0); assertEquals(algorithm, actualExecution.getAlgorithm()); // The execution should not be older than 5 seconds. assertTrue(new Date().getTime() - actualExecution.getBegin() < 5000); assertTrue(new Date().getTime() - actualExecution.getEnd() < 5000); // The execution should have taken between 0 and 3 seconds. assertTrue(actualExecution.getEnd() - actualExecution.getBegin() < 3000); assertTrue(actualExecution.getEnd() - actualExecution.getBegin() > 0);  assertTrue(actualExecution.getInputs().size() == 1); assertTrue(actualExecution.getInputs().contains(expectedInput));  ResultResource resultResource = new ResultResource(); List<Result> results = resultResource.getAll();  assertTrue(results.size() > 0); assertEquals(results.get(0).getExecution(), actualExecution);  assertTrue(actualExecution.getResults().size() > 0);  // TODO assert other execution fields  // Cleanup HibernateUtil.clear(); } "	0	0	1	1	1	0
public void initialize(){ map = new Map(gamePanel); gamePanel.setMap(map); snake = map.getSnake(); snake.setDirection(4); } 	0	0	0	0	1	0
public void speedDown(){ setSpeed(speed - 100); } 	1	0	1	1	1	0
"@Test public void getRatingTest() { builder.rating(1.5); IMeasurementDetailsPresenter presenter = new MeasurementDetailsPresenter(builder.build(), activity); assertEquals(""1,5/5"", presenter.getRating()); } "	0	0	1	1	1	0
private void initRecyclerView() { setAdapterDataViewHolders();  //TODO Resolve clip to padding flashing when last row is 3 items 1x1. Remove logic in presenter int padding = clipToPadding.getPadding(); multipleGridRecyclerView.setGridColumns( clipToPadding == ClipToPadding.PADDING_NONE ? 3 : 3 * padding);  multipleGridRecyclerView.setOnRefreshListener(new MultipleGridRecyclerView.OnRefreshListener() { @Override public void onRefresh() { if (listedContentListener != null) { listedContentListener.reloadSection(); } } });  multipleGridRecyclerView.setItemClickListener(new BaseViewHolder.OnItemClickListener() { @Override public void onItemClick(int position, View view) { if (listedContentListener != null) { listedContentListener.onItemClicked(position, view); } } });  multipleGridRecyclerView.setEmptyViewLayout(emptyView); multipleGridRecyclerView.setErrorViewLayout(errorView); multipleGridRecyclerView.setLoadingViewLayout(loadingView); } 	0	0	0	1	1	0
"private void rewrite(final HttpServletRequest req, final HttpServletResponse resp) { /* * FIXME Refactor this horrible method. */ if (!rewriteOccurred(req)) { RewriteEngine rewriteEngine = new RewriteEngine();  /* * Get the URL from a new detached instance of PrettyContext * so that we get the forwarded URL instead of the original one * if the filter is called for a forwarded request. */ URL url = PrettyContext.newDetachedInstance(req).getRequestURL();  try {  String queryString = req.getQueryString(); if ((queryString != null) && !"""".equals(queryString)) { queryString = ""?"" + queryString; } else if (queryString == null) { queryString = """"; }  // TODO test this now that query string is included in rewrites String originalUrl = url.toURL() + queryString; String newUrl = originalUrl; for (RewriteRule rule : getConfig().getGlobalRewriteRules()) { if (rule.matches(newUrl)) { newUrl = rewriteEngine.processInbound(req, resp, rule, newUrl); if (!Redirect.CHAIN.equals(rule.getRedirect())) {  /* * An HTTP redirect has been triggered; issue one if we have a URL or if the current URL has been * modified. */  String redirectURL = null;  /* * The rewrite changed the URL and no 'url' attribute has been set for the rule. */ if (StringUtils.isBlank(rule.getUrl()) && !originalUrl.equals(newUrl)) {  /* * Add context path and encode request using encodeRedirectURL(). */ redirectURL = resp.encodeRedirectURL(req.getContextPath() + newUrl); } else if (StringUtils.isNotBlank(rule.getUrl())) {  /* * This is a custom location - don't call encodeRedirectURL() and don't add context path, just * redirect to the encoded URL */ redirectURL = newUrl.trim();  }  // we have to send a redirect if (redirectURL != null) {  // try to encode the redirect target String encodedRedirectURL = encodeUrlWithQueryString(redirectURL);  // send redirect resp.setHeader(""Location"", encodedRedirectURL); resp.setStatus(rule.getRedirect().getStatus()); resp.flushBuffer(); break;  }  } } }  if (!originalUrl.equals(newUrl) && !resp.isCommitted()) { /* * The URL was modified, but no redirect occurred; forward instead. */ setRewriteOccurred(req); // make sure we don't get here twice req.getRequestDispatcher(newUrl).forward(req, resp); }  } catch (Exception e) { throw new PrettyException(""Error occurred during canonicalization of request <["" + url + ""]>"", e); } } } "	0	0	0	0	1	0
@Override public void actionPerformed(ActionEvent e) { JabRefDesktop.openBrowserShowPopup(VersionChecker.JABREF_DOWNLOAD_URL); } 	0	0	0	0	0	1
"public String encodeParameters() { if (pointVal == null) { return ""NULL""; } String retVal = new String(); if ( effect != null && effect.getEnabled() ) { retVal += ""ON""; } else { retVal += ""OFF""; } retVal += "":""; retVal += pointVal.x + "",""; retVal += pointVal.y; return retVal; } "	0	0	0	0	1	0
"@Override public void onReceive(Context context, Intent intent) { Log.i(TAG, ""Network change event triggered.""); if(!Preference.getBoolean(context, FRESH_BOOTUP_FLAG))	{ if (!Preference.getBoolean(context, Constants.PreferenceFlag.REGISTERED) && CommonUtils. isNetworkAvailable(context)) { if (Constants.AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED) { Preference.putBoolean(context, FRESH_BOOTUP_FLAG, true); Intent autoEnrollIntent = new Intent(context, EnrollmentService.class); autoEnrollIntent.setFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS); autoEnrollIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); context.startService(autoEnrollIntent); } CommonUtils.callSystemAppInit(context); } } } "	0	0	0	0	1	0
"public static void callSystemApp(Context context, String operation, String command, String appUri) { if(Constants.SYSTEM_APP_ENABLED) { Intent intent =  new Intent(Constants.SYSTEM_APP_SERVICE_START_ACTION); Intent explicitIntent = createExplicitFromImplicitIntent(context, intent); if (explicitIntent != null) { intent = explicitIntent; } intent.putExtra(Constants.OPERATION_CODE, operation); intent.setPackage(Constants.PACKAGE_NAME);  if (appUri != null) { intent.putExtra(""appUri"", appUri); }  if (command != null) { if (Constants.Operation.UPGRADE_FIRMWARE.equals(operation)) { try { JSONObject upgradeData = new JSONObject(command); if (upgradeData.isNull(context.getResources() .getString(R.string.firmware_upgrade_automatic_retry)) && Preference.hasPreferenceKey(context, context .getResources().getString(R.string.is_automatic_firmware_upgrade))) { boolean isFirmwareUpgradeAutoRetry = Preference.getBoolean(context, context .getResources().getString(R.string.is_automatic_firmware_upgrade)); upgradeData.put(context.getResources() .getString(R.string.firmware_upgrade_automatic_retry), isFirmwareUpgradeAutoRetry); command = upgradeData.toString(); Log.d(TAG, ""Updated payload: "" + command); } else if (!upgradeData.isNull(context.getResources() .getString(R.string.firmware_upgrade_automatic_retry))){ Preference.putBoolean(context, context.getResources() .getString(R.string.is_automatic_firmware_upgrade), upgradeData.getBoolean(context.getResources() .getString(R.string.firmware_upgrade_automatic_retry))); } else { upgradeData.put(context.getResources() .getString(R.string.firmware_upgrade_automatic_retry), true); Preference.putBoolean(context, context.getResources() .getString(R.string.is_automatic_firmware_upgrade), true); Log.d(TAG, ""Updated payload: "" + command); } } catch (JSONException e) { Log.e(TAG, ""Could not parse Firmware upgrade operation"", e); } intent.putExtra(""operationId"", Preference.getInt(context, ""firmwareOperationId"")); } intent.putExtra(""command"", command); } context.startService(intent); } else { Log.e(TAG, ""System app not enabled.""); } } "	0	0	0	0	0	1
"@Override protected final void deframeFailed(Throwable cause) { log.log(Level.WARNING, ""Exception processing message"", cause); cancel(Status.CANCELLED); } "	0	0	0	0	1	0
@Override public void onConnected(Bundle bundle) { Intent intent = new Intent(context, ActivityRecognitionDetector.class); PendingIntent callbackIntent = PendingIntent.getService(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT); ActivityRecognition.ActivityRecognitionApi.requestActivityUpdates(googleApiClient, 0, callbackIntent); } 	1	0	1	1	1	0
"@Test public void testForgetting() { String[] sa = ""1 2 3 4 5 6 7 8 9 10"".split("" ""); String[] sb = ""6 7 8 9 10 11 12 13 14 15"".split("" ""); HalfLifeMap<String,String> index = new HalfLifeMap<String,String>(10); // see LOTS of sa for (int i = 0; i < 1000; i++) { for (String x : sa) { index.put(x, x); index.get(x); } } // see some of sb for (int i = 0; i < 5; i++) { for (String x : sb) { index.put(x, x); index.get(x); } }  // Let's see where we stand System.out.println(""\nKey-strengths""); for(String k : index.keySet()) { System.out.println(""\t""+k+""\t""+index.getCount(k)); } System.out.println("""");  assert index.size() == 15 : index; assert index.containsKey(""2""); assert index.containsKey(""6""); assert index.containsKey(""11""); // prune: keep sa index.prune(); assert index.size() == 10; assert index.containsKey(""2"") : index; assert index.containsKey(""6""); assert ! index.containsKey(""11"") : index;  // see lots of sb for (int i = 0; i < 100; i++) { for (String x : sb) { index.put(x, x); index.get(x); } }  // prune: keep sb index.prune(); Printer.out(Containers.getList(index.keySet())); assert index.size() == 10; assert ! index.containsKey(""2""); assert index.containsKey(""6""); assert index.containsKey(""11"");  // Let's see where we stand now System.out.println(""\nKey-strengths""); for(String k : index.keySet()) { System.out.println(""\t""+k+""\t""+index.getCount(k)); } System.out.println(""""); } "	0	0	1	1	0	0
protected final long lvProducerIndex() { return UNSAFE.getLongVolatile(this, P_INDEX_OFFSET); } 	0	0	0	0	0	1
public void setPinned(boolean pinned) { this.pinned = pinned; } 	0	0	0	0	1	0
public void setDescription(String description) { this.description = description; } 	0	0	0	0	1	0
public void setStartTime(LocalDateTime startTime) { this.startTime = startTime; } 	0	0	1	0	1	0
public void setTags(Set<Tag> tags) { this.tags = tags; } 	0	0	0	0	1	0
@Override public UnmodifiableObservableList<ReadOnlyTask> getObserveableList() { return new UnmodifiableObservableList<>(pinnedTasks); } 	0	0	0	0	1	0
@Override public Optional<PlaceableData> createFrom(DataHolder dataHolder) { if (!this.supports(dataHolder)) { return Optional.absent(); } Optional<PlaceableData> manipulator = this.from(dataHolder); if (manipulator.isPresent()) { return manipulator; } return this.createFrom(dataHolder); } 	0	0	0	0	1	0
"@Test public void testConnection() throws IOException, NoStationFoundException { System.out.println(service.getConnections(""Alexanderplatz"", ""Griebnitzsee"")); System.out.println(service.getConnections(""München HBF"", ""Griebnitzsee"").getData().getJSONObject(0).getString(""description"")); } "	0	0	0	0	1	0
@Override public Object execute(Context context, String... args) { return ((JavascriptExecutor) context.getWrappedDriver()).executeScript(args[ARG_EXPR]); } 	0	0	0	0	0	1
@NonNull public Storable<TKey, TObject, TStoreObject> build() { if (!(getStore() instanceof SafeStore) || !(getConverter() instanceof SafeConverter)) { throw new ShouldNotHappenException(); } if (getDefaultValue() == null) { throw new ShouldNotHappenException(); } return new NonNullSafeStorable<>(this); } 	0	0	0	0	0	1
public static RobotContextStateEvaluator getInstance() { return ourInstance; } 	0	0	1	0	0	0
"private boolean hasEnoughDiskSpace(Path path) { try { FileStore fileStore = getFileStore(path); return fileStore.getUsableSpace() > fileStore.getTotalSpace() * (1.0 - minimumFreeSpaceThreshold); } catch (IOException e) { throw new PrestoException(OUT_OF_SPILL_SPACE, ""Cannot determine free space for spiell"", e); } } "	0	0	0	0	1	0
"@Override public void onCreate(Bundle savedInstanceState, PersistableBundle persistentState) { super.onCreate(savedInstanceState, persistentState); Log.d(TAG, ""onCreate: Create""); } "	0	0	1	1	1	0
"public String foo(String name) { FooRequest request = FooRequest.newBuilder().setName(name).build(); FooReply response; try { response = blockingStub.foo(request); logger.info(""Foo("" + name + ""): "" + response.getMessage()); return response.getMessage(); } catch (StatusRuntimeException e) { String msg = ""RPC failed: "" + e.getStatus(); logger.log(Level.WARNING, msg); return msg; } } "	0	0	0	0	1	0
public N mix(long key, BinaryFunction<N> mixer, N addend) { Objects.requireNonNull(mixer); synchronized (myStorage) { final int tmpIndex = myStorage.index(key); final N oldValue = myStorage.getInternally(tmpIndex); final N newValue = tmpIndex >= 0 ? mixer.invoke(oldValue, addend) : addend; myStorage.doSet(key, tmpIndex, newValue, true); return oldValue; } } 	1	0	1	0	1	0
private ResourceMapping getMappingAdapter(IResource resource) { return (ResourceMapping) resource.getAdapter(ResourceMapping.class); } 	0	0	0	0	1	0
public ArrayList<Integer> getMasses() { return this.masses; } 	0	0	0	0	1	0
public Collection<String> getPrivateIpAddresses() throws Exception { final Map<String, String> result = new DescribeInstances(awsConfig).execute(); return result.keySet(); } 	0	0	0	0	1	0
"@Override public List<Map<String, Object>> getFolderItems(String gooruOid, Integer limit, Integer offset, String sharing, String collectionType, String orderBy, Integer itemLimit, boolean fetchChildItem) { StorageArea storageArea = this.getStorageRepository().getStorageAreaByTypeName(NFS); List<Map<String, Object>> items = new ArrayList<Map<String, Object>>(); List<Object[]> result = this.getCollectionRepository().getCollectionItem(gooruOid, limit, offset, sharing, orderBy, collectionType, fetchChildItem); if (result != null && result.size() > 0) { for (Object[] object : result) { Map<String, Object> item = new HashMap<String, Object>(); item.put(TITLE, object[0]); item.put(GOORU_OID, object[1]); item.put(TYPE, object[2]); String typeName = object[2].toString(); Map<String, Object> thumbnails = new HashMap<String, Object>(); if (typeName != null && typeName.equalsIgnoreCase(ResourceType.Type.VIDEO.getType())) { if (object[15] != null) { thumbnails.put(URL, ResourceImageUtil.getYoutubeVideoId(object[15].toString()) == null ? null : ""http://img.youtube.com/vi/"" + ResourceImageUtil.getYoutubeVideoId(object[15].toString()) + ""/1.jpg""); } } else { if (object[4] != null) { if (object[21] != null && Integer.parseInt(object[21].toString()) == 1) { thumbnails.put(URL, storageArea.getS3Path() + String.valueOf(object[3]) + String.valueOf(object[4])); } else { thumbnails.put(URL, storageArea.getCdnDirectPath() + String.valueOf(object[3]) + String.valueOf(object[4])); } } else { thumbnails.put(URL, """"); } } item.put(THUMBNAILS, thumbnails); if (object[5] != null) { Map<String, Object> resourceFormat = new HashMap<String, Object>(); resourceFormat.put(VALUE, object[5]); resourceFormat.put(DISPLAY_NAME, object[6]); item.put(RESOURCEFORMAT, resourceFormat); } item.put(COLLECTION_ITEMS, getFolderItem(String.valueOf(object[1]), sharing, String.valueOf((object[2])), collectionType, itemLimit, fetchChildItem, orderBy)); item.put(ITEM_COUNT, this.getCollectionRepository().getCollectionItemCount(String.valueOf(object[1]), sharing, collectionType)); item.put(SHARING, object[7]); item.put(COLLECTION_ITEM_ID, object[8]); if (object[9] != null) { item.put(GOALS, object[9]); } if (object[10] != null) { Map<String, Object> resourceSource = new HashMap<String, Object>(); resourceSource.put(ATTRIBUTION, object[10]); resourceSource.put(DOMAIN_NAME, object[11]); item.put(RESOURCESOURCE, resourceSource); } Resource resource = this.getResourceService().setContentProvider(object[1].toString()); if (resource != null) { if (resource.getPublisher() != null && resource.getPublisher().size() > 0) { item.put(PUBLISHER, resource.getPublisher()); } if (resource.getAggregator() != null && resource.getAggregator().size() > 0) { item.put(AGGREGATOR, resource.getAggregator()); } if (resource.getHost() != null && resource.getHost().size() > 0) { item.put(""host"", resource.getHost()); } } if (object[12] != null) { item.put(IDEAS, object[12]); } if (object[13] != null) { item.put(QUESTIONS, object[13]); } if (object[14] != null) { item.put(PERFORMANCE_TASKS, object[14]); } if (object[18] != null) { item.put(COLLECTION_TYPE, object[18]); } item.put(ITEM_SEQUENCE, object[19]); item.put(PARENT_GOORU_OID, object[20]); items.add(item); } } return items; } "	0	0	0	0	0	1
"@RequestMapping(value=""/signUpJobSeeker"",method = RequestMethod.POST) public ResponseEntity<?> signUpJobSeeker(HttpServletRequest request, HttpServletResponse response) throws JSONException{  URI location;  JSONObject jsonObject = new JSONObject(Util.getDataString(request));  String emailId = jsonObject.getString(""email""); String firstName = jsonObject.getString(""firstName""); String lastName = jsonObject.getString(""lastName""); String selfIntroduction = jsonObject.getString(""selfIntroduction""); String phone = jsonObject.getString(""phone""); String skills = jsonObject.getString(""skills""); //Education education = request.getParameter(""education""); String workExp = jsonObject.getString(""workExp""); String password = jsonObject.getString(""password""); String verificationCode = """"; Boolean isVerified = false; //String profileImagePath = request.getParameter(""profileImagePath"");  JobSeeker jobseeker = new JobSeeker(firstName, lastName, emailId, selfIntroduction, phone, skills, workExp, verificationCode, isVerified, password);  boolean isSignUpSuccessful = signUpService.signUpJobSeeker(jobseeker);  if(!isSignUpSuccessful){  return new ResponseEntity(new JSONObject().toString(),HttpStatus.BAD_REQUEST);  }else{ /*ObjectMapper mapper = new ObjectMapper(); String Json =  mapper.writeValueAsString(object);*/  JSONObject returnData = new JSONObject(); returnData.put(""verificationCode"", ""1234""); returnData.put(""verificationCode1"", ""12342"");  return new ResponseEntity(returnData,HttpStatus.OK); }   } "	0	0	0	0	1	0
"@Before public void initSampleData() throws Exception { user = new User(""Sacke :-)"", 24, State.BE, 2015);  WKDateTime time = new WKDateTime(2015, 1, 1); interval = new Interval(time, time.getJodaDateTime().plusYears(1) .minusDays(1));  Days holidays = HolidayProvider.provideBy(interval, null); user.getHolidays().addAll(holidays); } "	0	0	0	0	1	0
"@Override public void onSuccess(Void result) { LOG.log(Level.FINE, String.format(""Listener task succeeded : %s"", tasks.get(taskNumber))); } "	0	0	1	1	1	0
public SortedSet<Cell> tailSet(Cell firstCell) { return cellSet.tailSet(firstCell); } 	0	0	1	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_pay); event = getIntent().getParcelableExtra(INTENT_KEY_FOR_EVENT); paymentManager = new PaymentManager(event); show(PaymentPhase.PURCHASE_TICKETS); } 	1	0	1	1	1	0
"@FXML public void initialize() throws IOException {  // ActionEvent for the create button inside the ""Create new event"" // window createEventButton.setOnMouseClicked(createEvent -> {  // Populate event object with data Event newEvent = new Event(); newEvent.setTitle(eventTitle.getText()); newEvent.setDescription(eventDescription.getText()); newEvent.setStartTime(eventStartTime.getLocalTime()); newEvent.setEndTime(eventEndTime.getLocalTime()); newEvent.setStartDate(datePicker_eventStartDate.getValue()); newEvent.setEndDate(datePicker_eventEndDate.getValue());  this.timelineModel.getEvents().add(newEvent);  ((Node) (createEvent.getSource())).getScene().getWindow().hide(); });  // ActionEvent for the add image label inside the ""Create new event"" // window addImageLabel.setOnMouseClicked(addImage -> {  FileChooser fileChooser = new FileChooser(); fileChooser.setTitle(""Open Image File"");  // Set extension filter FileChooser.ExtensionFilter extFilterJPG = new FileChooser.ExtensionFilter(""JPG files (*.jpg)"", ""*.JPG""); FileChooser.ExtensionFilter extFilterPNG = new FileChooser.ExtensionFilter(""PNG files (*.png)"", ""*.PNG""); fileChooser.getExtensionFilters().addAll(extFilterJPG, extFilterPNG);  File file = fileChooser.showOpenDialog(null);  Image image1 = new Image(file.toURI().toString()); eventImage.setImage(image1); eventImage.setPreserveRatio(true); eventImage.setFitWidth(189.0); eventImage.setFitHeight(128.0); eventImage.setSmooth(true); eventImage.setCache(true); addImageLabel.setVisible(false);  });  // ActionEvent for the cancel button inside the ""Create new event"" // window //Opens a pop-up window asking for exit confirmation cancelCreateEvent.setOnAction(cancelEvent -> {  Alert closeConfirmation = new Alert( Alert.AlertType.CONFIRMATION, ""Are you sure you want to cancel creating an event?""); cancelCreateEvent = (Button) closeConfirmation.getDialogPane().lookupButton( ButtonType.OK); closeConfirmation.setHeaderText(""Confirm Exit""); closeConfirmation.initModality(Modality.APPLICATION_MODAL); Optional<ButtonType> closeResponse = closeConfirmation.showAndWait(); if (!ButtonType.OK.equals(closeResponse.get())) { cancelEvent.consume(); } else { ((Node)(cancelEvent.getSource())).getScene().getWindow().hide(); } }); } "	0	0	0	0	1	0
@Override public void run() { try { int b = batch.incrementAndGet(); if (b <= input.numBatches && !forcedStop.get()) { feed(regionName, b, threadIndex); executor.submit(this); } else { completed(); } } catch (Exception x) { x.printStackTrace(); } } 	0	0	0	0	1	0
"protected static Block addBlock(Block block, String name, MetalMaterial material, CreativeTabs tab) {  String fullName;  if ((block == null) || (name == null)) { return null; }  if ((block instanceof BlockDoubleMetalSlab) && (material != null)) { fullName = ""double_"" + material.getName() + ""_"" + name; } else if (block instanceof BlockDoubleMetalSlab) { fullName = ""double_"" + name; } else if (material != null) { if (((name == ""nether"") || (name == ""end"")) && (block instanceof BlockMetalOre)) { fullName = name + ""_"" + material.getName() + ""_"" + ""ore""; } else { fullName = material.getName() + ""_"" + name; } } else { fullName = name; }  block.setRegistryName(fullName); block.setUnlocalizedName(block.getRegistryName().getResourceDomain() + ""."" + fullName); GameRegistry.register(block); blockRegistry.put(fullName, block);  if (!(block instanceof BlockDoor) && !(block instanceof BlockSlab)) { final ItemBlock itemBlock = new ItemBlock(block); itemBlock.setRegistryName(fullName); itemBlock.setUnlocalizedName(block.getRegistryName().getResourceDomain() + ""."" + fullName); GameRegistry.register(itemBlock); }  if (tab != null) { block.setCreativeTab(tab); }  if (material != null) { blocksByMaterial.computeIfAbsent(material, (MetalMaterial g) -> new ArrayList<>()); blocksByMaterial.get(material).add(block); }  // TODO: Make this support multiple oredicts if (block instanceof IOreDictionaryEntry) { OreDictionary.registerOre(((IOreDictionaryEntry) block).getOreDictionaryName(), block); }  return block; } "	0	0	1	0	1	0
@SubscribeEvent public void serverTickEvent(TickEvent.ServerTickEvent e) { if (System.currentTimeMillis() - lastCheck >= 1000) { lastCheck = System.currentTimeMillis(); checkSchedules(false); } } 	0	0	0	0	1	0
private void executeTask(Runnable task) { NonBlockingIOThread target = getTargetIoThread(task); if (target == this) { task.run(); } else { target.addTask(task); } } 	0	0	0	0	1	0
"@Before public void setUp() throws Exception { PowerMockito.mockStatic(WXSoInstallMgrSdk.class); PowerMockito.mockStatic(TextUtils.class); PowerMockito.mockStatic(WXComponentFactory.class); PowerMockito.when(TextUtils.isEmpty(""124"")).thenReturn(true); PowerMockito.when(WXSoInstallMgrSdk.initSo(null, 1, null)).thenReturn(true); //        WXSDKEngine.init(RuntimeEnvironment.application); WXSDKInstance instance = Mockito.mock(WXSDKInstance.class); mWXRenderStatement = new WXRenderStatement(instance, ""123""); } "	1	1	1	0	1	0
"@Override public void addProfile(final String name, final String realname, final String ident, final List<String> nicknames) { checkNotNull(name, ""Name cannot be null""); checkArgument(!profiles.containsKey(name), ""Name cannot already exist""); final MutableProfile profile = new MutableProfile(name, realname, Optional.of(ident), nicknames); profiles.put(name, profile); listeners.getCallable(ProfilesDialogModelListener.class).profileAdded(profile); setSelectedProfile(Optional.of(profile)); } "	0	0	0	0	1	0
private static int totalBits( int bitsForCharacters ) { int bitsInTotal = 24 + 4 + 5 + 6 + bitsForCharacters; return ((bitsInTotal - 1) >> 6) + 1; // /64 } 	0	0	0	0	1	0
"public View.OnClickListener orderMedicineOnClickListener() { return new View.OnClickListener() { @Override public void onClick(View view) { final Dialog orderMedicineDialog = new Dialog(MedicineStore.this,android.R.style.Theme_DeviceDefault_Dialog_NoActionBar); orderMedicineDialog.setContentView(R.layout.order_medicine_dialog);  // Setting Dialog Title Button email=(Button)orderMedicineDialog.findViewById(R.id.order_by_email); Button message=(Button)orderMedicineDialog.findViewById(R.id.order_by_msg); final EditText medicineQuantityEt=(EditText)orderMedicineDialog.findViewById(R.id.order_quantity); ((EditText)orderMedicineDialog.findViewById(R.id.order_quantity)).requestFocus(); //implement the email button  medicineQuantityEt.setOnKeyListener(new View.OnKeyListener() {  @Override public boolean onKey(View v, int keyCode, KeyEvent event) { try { if (!medicineQuantityEt.getText().toString().equals("""") && Integer.parseInt(medicineQuantityEt.getText().toString().trim()) > 100) { medicineQuantityEt.setError(getResources().getString(R.string.limit_exceeded)); isLimitExceede = true; } else { isLimitExceede = false; } } catch (NumberFormatException exception){ medicineQuantityEt.setError(getResources().getString(R.string.limit_exceeded)); }  return false; } });  email.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { if(medicineQuantityEt.getText().toString().trim().equals("""")){ medicineQuantityEt.setError(""Quantity Required""); } else if(medicineQuantityEt.getText().toString().matches(""[0]+"")){ medicineQuantityEt.setError(""Quantity Required""); } else if(isLimitExceede){ medicineQuantityEt.setError(getResources().getString(R.string.limit_exceeded)); } else{ //send and email String msgBody=""My malaria pills will last for the coming  ""+""<b>""+medicineStore+""</b>""+"" days only.<br> Send the following immediately: <br>"" + ""Medicine Name:     "" +""<b>""+drugName+""</b>""+""<br>""+ ""Quantity:          "" ; Intent emailIntent = new Intent(Intent.ACTION_SEND); emailIntent.setData(Uri.parse(""mailto:"")); emailIntent.setType(""text/plain""); emailIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{""yatnavermaa@gmail.com"", ""yatna.verma.ece13@itbhu.ac.in""}); emailIntent.putExtra(Intent.EXTRA_SUBJECT, ""URGENT: Reqiured Malaria Medicines""); emailIntent.putExtra(Intent.EXTRA_TEXT, Html.fromHtml(msgBody+""<b>""+Integer.parseInt(medicineQuantityEt.getText().toString())+""</b>"")); startActivity(Intent.createChooser(emailIntent, ""Send mail via..."")); orderMedicineDialog.dismiss(); } } }); //implement the message button message.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { if(medicineQuantityEt.getText().toString().trim().equals("""")){ medicineQuantityEt.setError(""Quantity Required""); } else if(medicineQuantityEt.getText().toString().matches(""[0]+"")){ medicineQuantityEt.setError(""Quantity Required""); } else if(isLimitExceede){ medicineQuantityEt.setError(getResources().getString(R.string.limit_exceeded)); } else{ String msgBody=""My malaria pills will last for the coming ""+medicineStore+"" days only.\n Send the following immediately: \n"" + ""Medicine Name:     "" +drugName+""\n""+ ""Quantity:          "" ; SmsManager smsManager = SmsManager.getDefault(); smsManager.sendTextMessage(""123"", null,msgBody + Integer.parseInt(medicineQuantityEt.getText().toString()), null, null); Toast.makeText(MedicineStore.this, ""SMS sent."", Toast.LENGTH_SHORT).show(); orderMedicineDialog.dismiss(); } } });  // Showing Alert Message orderMedicineDialog.show(); } }; } "	0	0	0	0	0	1
"public void callDataToast() { Toast.makeText(this, ""SEEMS LIKE THE Data CHANGED"", Toast.LENGTH_SHORT).show(); } "	0	0	0	0	1	0
"public void callToast() { Toast.makeText(this, ""SEEMS LIKE THE CLIPBOARD CHANGED"", Toast.LENGTH_SHORT).show(); } "	0	0	0	0	1	0
public void addTileFromGUI(Location l, Tile t) { if(validateLocationRange(l) && validateTileAdjacency(l)) { tiles.put(l,t); } } 	0	0	0	0	1	0
private void openInDerNaehe(){ Intent intent;  if (UtilsMisc.isTablet(getApplicationContext())) { intent = new Intent(getApplicationContext(), MainMultiPaneActivity.class); } else { intent = new Intent(getApplicationContext(), MainSinglePaneActivity.class); } intent.putExtra(Extra.SELECTED_TAB,0); startActivity(intent); resetKategorieFilter(); } 	0	0	0	0	1	0
@Override public final List<PropertyDescriptor> getSupportedPropertyDescriptors() { final List<PropertyDescriptor> descriptors = new ArrayList<>(); descriptors.add(VALUE_REGEX); descriptors.add(VALUE_FIELDS); descriptors.add(KEY_REGEX); descriptors.add(KEY_FIELDS); descriptors.add(RECORD_TYPE); descriptors.add(KEEP_RAW_CONTENT);  return Collections.unmodifiableList(descriptors); } 	0	0	0	0	0	1
"@Override public Collection<Record> process(ProcessContext context, Collection<Record> records) {  try{ List<String> fieldsToRemove = Lists.newArrayList( context.getPropertyValue(FIELDS_TO_REMOVE).asString().split("",""));  for (Record record : records) { new ArrayList<>(record.getAllFields()).forEach(field -> { String fieldName = field.getName(); if (fieldsToRemove.contains(fieldName)) { record.removeField(fieldName); } }); } }catch (Exception ex){ logger.info(""issue while trying to remove field list {} :  {}"", context.getPropertyValue(FIELDS_TO_REMOVE).asString(), ex.toString()); }  return records; } "	0	0	1	0	0	0
"protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { XDebug xdebug = new XDebug( request ); request.setAttribute(QueryBuilder.XDEBUG_OBJECT, xdebug);  try { if (validate(request)) { setGeneticProfiles(request); }  if (request.getAttribute(ERROR)!=null) { forwardToErrorPage(request, response, (String)request.getAttribute(ERROR), xdebug); } else { RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(""/WEB-INF/jsp/study_view/cancer_study_view.jsp""); dispatcher.forward(request, response); }  } catch (DaoException e) { xdebug.logMsg(this, ""Got Database Exception:  "" + e.getMessage()); forwardToErrorPage(request, response, ""An error occurred while trying to connect to the database."", xdebug); } } "	0	0	0	0	1	0
"public default ClassLoader classLoader(){ throw new IncompatibleCbtVersionException(""You need to define method classLoader.""); }; "	0	0	0	0	0	1
"protected RadioButton getRadioButton(final String label, Integer count) { SafeHtmlBuilder builder = new SafeHtmlBuilder().appendEscaped(label);  if(count != null) { builder.appendHtmlConstant(""<span style=\""font-size:x-small\""> ("").append(count).appendEscaped("")"") .appendHtmlConstant(""</span>""); }  RadioButton radio = new RadioButton(fieldName + ""-radio"", builder.toSafeHtml());  radio.addClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { updateCriterionFilter(label); } });  return radio; } "	0	0	0	0	1	0
@Override protected void putData() { db.execSQL(mHelper.DROP_TABLE+table.NAME); // db.execSQL(table.CREATE_TABLE); for(int i=0;i<mList.size();i++){ ArticleBean articleBean = mList.get(i); values.put(ScienceTable.TITLE,articleBean.getTitle()); values.put(ScienceTable.DESCRIPTION,articleBean.getSummary()); values.put(ScienceTable.IMAGE,articleBean.getImage_info().getUrl()); values.put(ScienceTable.COMMENT_COUNT,articleBean.getReplies_count()); values.put(ScienceTable.INFO,articleBean.getInfo()); values.put(ScienceTable.URL,articleBean.getUrl()); values.put(ScienceTable.CATEGORY,mCategory); values.put(ScienceTable.IS_COLLECTED,articleBean.getIs_collected()); db.insert(ScienceTable.NAME,null,values); } db.execSQL(table.SQL_INIT_COLLECTION_FLAG); } 	0	0	0	0	1	0
private void updateDocument() { SyntaxHighlighting.getInstance().checkHighlighting(this); if (linePane != null) { linePane.updateNumbers(); } } 	0	0	1	0	0	0
@Override public void run() { cardVerifier.onCardVerified(false, getString(R.string.verification_error), getString(R.string.verification_error)); } 	0	0	0	0	1	0
public Dialogue toDialogue(Map<WriterDialogue, Dialogue> visited) { if (visited.get(this) != null) return visited.get(this); if (dialogue == null) { dialogue = new Dialogue(); dialogue.id = getID(); dialogue.state = GameDataElement.State.parsed; } else { dialogue.state = GameDataElement.State.modified; } visited.put(this, dialogue); dialogue.message = this.text; if (this.replies != null && !this.replies.isEmpty()) { dialogue.replies = new ArrayList<Dialogue.Reply>(); for (WriterReply wReply : this.replies) { dialogue.replies.add(wReply.toReply(visited)); } } return dialogue; } 	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") @Override public void onBindViewHolder(final RecyclerView.ViewHolder holder, final int position) { final TItem item = getItem(position); if (holder instanceof NotLoadedItemViewHolder) { if (itemsProvider == null) { Lc.assertion(new ShouldNotHappenException(""This adapter shouldn't work without provider"")); return; } ((NotLoadedItemViewHolder) holder).bindItem(position, itemsProvider); } else { if (item == null || itemsProvider == null) { Lc.assertion(new ShouldNotHappenException(""Item at"" + position + "" should not be null"")); return; } onBindItemToViewHolder((TViewHolder) holder, position, item); itemsProvider.loadRange(Math.max(0, position - itemsProvider.getSize() / 2), position + itemsProvider.getSize() / 2).first() .subscribe(Actions.empty(), Actions.empty()); if (onItemClickListener != null && !isOnClickListenerDisabled(item)) { UiUtils.setOnRippleClickListener(holder.itemView, () -> { //TODO: fix multitap postHandler.removeCallbacksAndMessages(null); postHandler.postDelayed(() -> onItemClickListener.onItemClicked(item, position), Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP ? UiUtils.RIPPLE_EFFECT_DELAY : 0); }); } } } "	0	0	0	0	0	1
public void actOn(WpiCompressor comp) { comp.start(); } 	0	0	0	0	1	0
private static void appendLecture(StringBuilder builder, Lecture lecture) { Time time = lecture.getTime(); String formattedTime = DateHelper.getFormattedDateTime(time); builder.append(lecture.title); builder.append(LINE_BREAK); builder.append(formattedTime); builder.append(COMMA); builder.append(SPACE); builder.append(lecture.room); builder.append(LINE_BREAK); builder.append(LINE_BREAK); String eventUrl = FahrplanMisc.getEventUrl(lecture.lecture_id); builder.append(eventUrl); } 	0	0	0	0	1	0
@Override /** * Generate the Fragment for that position * * @see com.ustadmobile.contentviewpager.ContentViewPagerPageFragment * * @param position Position in the list of fragment to create */ public Fragment getItem(int position) { ContainerPageFragment existingFrag = pagesMap.get(new Integer(position));  //something wrong HERE if(existingFrag != null) { return existingFrag; }else { ContainerPageFragment frag = ContainerPageFragment.newInstance(baseURI, hrefList[position], query, position);  this.pagesMap.put(Integer.valueOf(position), frag); return frag; } } 	1	1	1	1	1	0
public List<String> getLocalGroups(String server) { return getGroups(server, false, false); } 	1	0	0	0	1	0
boolean attachComponent(GVRComponent component) { boolean added = NativeSceneObject.attachComponent(getNative(), component.getNative()); if (added) { long type = component.getType(); mComponents.put(type, component); component.setOwnerObject(this); return true; } return false; } 	0	0	0	0	1	0
"private void rename() { NameAlert nameAlert = new NameAlert(FileDetailsActivity.this, ""Change"", ""Change"", new NameAlert.onPositive() { @Override public void click(final String name) { if (name.length() > 0) { new MoveTask(DropboxClient.getClient(), new Callback<Metadata>() { @Override public void onTaskComplete(Metadata result) { fileName.setText(name); }  @Override public void onError(Exception e) { Toast.makeText(AmanApplication.getContext(), R.string.error_occurred, Toast.LENGTH_LONG).show(); e.printStackTrace(); } }).execute(file.getPathLower(), file.getParentPath().toLowerCase() + name + ""."" + file.getExtension()); } else { Toast.makeText(AmanApplication.getContext(), ""No name found"", Toast.LENGTH_LONG).show(); } } }); nameAlert.show(); } "	0	0	0	0	0	1
"public void extractEduInformation(ArrayList<String> lines, ArrayList<Integer> headingLines, ArrayList<String> allHeadings, ArrayList<String> linesCopy, ArrayList<Education> educations) {  BufferedReader br = null; String indexWord = """"; try { br = new BufferedReader(new FileReader(listpath + ""\\eduIndex"")); indexWord = br.readLine(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); }  ArrayList<String> indexList = new ArrayList<String>(); Pattern pattern = null; Matcher matcher = null; String lineText = """";  /** * Read the eduIndex Gazeteer */ while (!indexWord.equals(""end"")) { indexList.add(indexWord); try { indexWord = br.readLine(); } catch (IOException e) { e.printStackTrace(); } }   LOG.info(""----Beginning Educational Information----""); for (int a = 0; a < headingLines.size(); a++) { for (int b = (headingLines.get(a).intValue() + 1); b < lines.size(); b++) { lineText = lines.get(b); if (allHeadings.contains(String.valueOf(b))) { break; } else { for (int c = 0; c < indexList.size(); c++) { pattern = Pattern.compile("".*"" + indexList.get(c) + "".*""); matcher = pattern.matcher(lineText.toLowerCase());  if (matcher.matches()) { Education edu = new Education(); edu.setInstitution(lineText); LOG.info(lineText + ""--------THIS IS EDUCATIONAL INFORMATION"");  // Add the new education institute object educations.add(edu);  // Remove the line from the array list. linesCopy.remove(lineText); } } } } } LOG.info(""----Ending Educational Information----\n""); } "	0	0	1	0	1	0
"public static Map<String, String[]> getSession(String sessionId) throws HttpException, MalformedURLException, IOException { LOG.debug(""SessionServiceUtil.getSession()""); Map<String, String[]> parameterMap = null; HttpURLConnection conn = null; try { URL url = new URL(GlobalProperties.getSessionServiceUrl() + ""main_session/"" + sessionId); LOG.debug(""SessionServiceUtil.getSession(): url = '"" + url + ""'""); conn = (HttpURLConnection) url.openConnection(); if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) { StringWriter stringWriter = new StringWriter(); IOUtils.copy(conn.getInputStream(), stringWriter, Charset.forName(""UTF-8"")); String contentString = stringWriter.toString(); LOG.debug(""SessionServiceUtil.getSession(): response = '"" + contentString + ""'""); JsonNode json = new ObjectMapper().readTree(contentString); LOG.debug(""SessionServiceUtil.getSession(): response.data = '"" + json.get(""data"").textValue() + ""'""); parameterMap = new ObjectMapper().readValue(json.get(""data"").textValue(), new TypeReference<Map<String, String[]>>(){}); } else { LOG.warn(""SessionServiceUtil.getSession(): conn.getResponseCode() = '"" + conn.getResponseCode() + ""'""); if (conn.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) { return null; } else if (conn.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) { throw new HttpException(""Internal server error""); } else { throw new HttpException(""Unexpected error, response code '"" + conn.getResponseCode() +""'""); } } } catch (MalformedURLException mfue) { LOG.warn(""SessionServiceUtil.getSession(): MalformedURLException = '"" + mfue.getMessage() + ""'""); throw mfue; } catch (IOException ioe) { LOG.warn(""SessionServiceUtil.getSession(): IOException = '"" + ioe.getMessage() + ""'""); throw ioe; } finally { if (conn != null) { conn.disconnect(); } } return parameterMap; } "	0	0	0	0	0	1
@Override public void onBackPressed() { FragmentManager fm = getFragmentManager(); fm.popBackStack (null, android.support.v4.app.FragmentManager.POP_BACK_STACK_INCLUSIVE); } 	1	0	1	0	1	0
@Override protected ByuApiGenerator.AuthType getAuthType() { return ByuApiGenerator.AuthType.BEARER_TOKEN; } 	0	0	0	0	1	0
private JSONArray extractToJsonArray(Record record, Object[] array, CallableStatement stmt) throws SQLException { JSONWriter writer = new JSONWriter(); record.toJsonArrayFromStruct(array, writer); return new JSONArray(writer); } 	0	0	0	0	1	0
@Override public IBlockState getStateFromMeta(int meta) { IBlockState iblockstate = this.getDefaultState().withProperty(this.getStringProp(), this.getValues().get(meta % 5));  switch (meta / 5) { case 0: iblockstate = iblockstate.withProperty(BlockRotatedPillar.AXIS, EnumFacing.Axis.Y); break; case 1: iblockstate = iblockstate.withProperty(BlockRotatedPillar.AXIS, EnumFacing.Axis.X); break; case 2: iblockstate = iblockstate.withProperty(BlockRotatedPillar.AXIS, EnumFacing.Axis.Z); break; default: iblockstate.withProperty(BlockRotatedPillar.AXIS, EnumFacing.Axis.Y); break; }  return iblockstate; } 	0	0	0	0	1	0
public AgentClientConfiguration getClientConfiguration(int workerIndex, String workerHost, int workerPort) { return new AgentClientConfiguration(processor, getFutureMap(), localAddress, workerIndex, workerHost, workerPort, getChannelGroup()); } 	0	0	0	0	0	1
"public static String getFormattedMonthAndYear(@Nullable Date inputDate) { String formattedDate = null;  if (inputDate == null) { return formattedDate; }  inputFormat.setTimeZone(TimeZone.getTimeZone(""UTC"")); String date = inputFormat.format(inputDate);  try { Date d = inputFormat.parse(date); formattedDate = outputFullDateFormat.format(d); // todo!! } catch (ParseException e) { e.printStackTrace(); }  return formattedDate; } "	0	0	0	0	1	0
"@Override public IPacket parseAsNew(byte[] bytes) { for(byte b : bytes) this.data.add(b);  // Get handle on configuratoin RS232Configuration config = RS232Configuration.INSTANCE; // Do not process invalid messages, do not alter ACK if invalid if(sum(data) == 0) {  // Don't modify the data to send (nextMsg) message = ""Acceptor Bus/Not Connected"";  } else if((data.size() == 11) || isValid()) {  // Message looks good, next one will toggle the ack config.toggleAck();  // States - Only one allowed at a time byte t3 = data.get(3); if((t3 & 1) == 1) event.add(Events.Idling); else if ((t3 & 2) == 2) event.add(Events.Accepting); else if ((t3 & 4) == 4) event.add(Events.Escrowed); else if((t3 & 8) == 8) event.add(Events.Stacking); else if((t3 & 0x20) == 0x20) event.add(Events.Returning);  if((t3 & 0x10) == 0x10) { event.add(Events.Idling); event.add(Events.Stacked);      // Be sure to clear the stack, return bits } if((t3 & 0x40) == 0x40){ event.add(Events.Idling); event.add(Events.Returned);    // Be sure to clear the stack, return bits }  // Events - There can be multiple byte t4 = data.get(4); if((t4 & 1) == 1) event.add(Events.Cheated); if((t4 & 2) == 2) event.add(Events.BillRejected); if((t4 & 4) == 4) event.add(Events.BillJammed); if((t4 & 8) == 8) event.add(Events.StackerFull); if((t4 & 0x10) == 0) event.add(Events.BillCasetteRemoved);  // Errors - there can be multiple byte t5 = (data.get(5)); if((t5 & 1) == 1) event.add(Events.PowerUp); if((t5 & 2) == 2) event.add(Events.InvalidCommand); if((t5 & 4) == 4) event.add(Events.Failure);  // Get the bill reported by the slave byte credit = (byte)((t5 & 0x38) >> 3);  // Check if this bill is enabled. If so, send Accept, // other send return if(credit != 0 && event.contains(Events.Escrowed)) {  if((credit & config.getEnableMask()) == credit) creditAction = ACCEPT; else creditAction = RETURN; }  //Check for a valid credit if(event.contains(Events.Stacked)) { event.add(Events.Credit); billName = BillNames.fromByte(credit); Logger.getLogger(RS232Packet.class.getName()).log(Level.INFO, String.format(""Crediting %s"", billName.toString())); }  // Else set the informative error message! } else { if(data.isEmpty()) message = ""No Response""; else if(data.size() != 11) message = ""Bad Message Length""; else message = ""Bad checksum""; }  return this; } "	0	0	1	1	0	0
@Override public void setInventorySlotContents(int par1, ItemStack itemstack){ if (itemstack.getItem() == ModItems.goldCoin) { this.chestContents[par1] = itemstack; if(itemstack != null && itemstack.stackSize > this.getInventoryStackLimit()){ itemstack.stackSize = this.getInventoryStackLimit(); } this.markDirty(); } else { this.chestContents[par1] = itemstack; if(itemstack != null && itemstack.stackSize > this.getInventoryStackLimit()){ itemstack.stackSize = this.getInventoryStackLimit(); } this.markDirty(); } } 	0	0	1	1	1	0
public static final long longEncode(final double lon, final double lat, final int level) { // shift to appropriate level final short msf = (short)(((12 - level) * 5) + MORTON_OFFSET); return ((BitUtil.flipFlop(GeoPointField.encodeLatLon(lat, lon)) >>> msf) << 4) | level; } 	1	0	1	1	1	0
public static final double decodeLatitude(final String geohash) { return GeoPointField.decodeLatitude(mortonEncode(geohash)); } 	1	0	1	0	1	0
public void setHeartbeatRecoveryTime(long heartbeatRecoveryTime) { this.heartbeatRecoveryTime = heartbeatRecoveryTime; } 	0	0	0	1	1	0
"private static String process(Date date) { return ""datetimeoffset'"" + DateSerializer.serialize(date) + ""'""; } "	0	0	0	1	1	0
private String getImageFilename(Page page) { String url = page.getImageUrl(); return Uri.parse(url).getLastPathSegment(); } 	0	0	0	0	1	0
"private static void run1(){ if (LoadedMods.Big_Reactors){ wireFactory(""Blutonium"", 8196, 30600, 8, 32, 2); wireFactory(""Cyanite"", 512, 30615, 2, 16, 4); wireFactory(""Yellorium"", 2048, 30630, 4, 16, 2); } if (LoadedMods.EnderIO){ wireFactory(""RedstoneAlloy"", 32, 30645, 1, 4, 1); }  superConductorFactory(""Superconductor"", 524288, 30660, 0, 0, 8); superConductorFactory(""VoidMetal"", 512, 30661, 0, 0, 8);  generateNonGTFluidPipes(GT_Materials.Staballoy, BasePipeID, 6250, 7500, true); generateNonGTFluidPipes(GT_Materials.Tantalloy60, BasePipeID+5, 5000, 4250, true); generateNonGTFluidPipes(GT_Materials.Tantalloy61, BasePipeID+10, 6000, 5800, true); if (LoadedMods.Thaumcraft){ generateNonGTFluidPipes(GT_Materials.VoidMetal, BasePipeID+15, 250, 25000, true);} generateGTFluidPipes(Materials.Europium, BasePipeID+20, 12000, 7500, true); generateNonGTFluidPipes(GT_Materials.Potin, BasePipeID+25, 375, 2000, true); generateNonGTFluidPipes(GT_Materials.MaragingSteel300, BasePipeID+30, 7000, 2500, true); generateNonGTFluidPipes(GT_Materials.MaragingSteel350, BasePipeID+35, 8000, 2500, true); generateNonGTFluidPipes(GT_Materials.Inconel690, BasePipeID+40, 7500, 4800, true); generateNonGTFluidPipes(GT_Materials.Inconel792, BasePipeID+45, 8000, 5500, true); generateNonGTFluidPipes(GT_Materials.HastelloyX, BasePipeID+50, 10000, 4200, true);  } "	0	0	0	0	0	1
private S addFunction(AbstractNode functionNode) { if (head == null) { tail = head = functionNode; } else if (head.noDownstream()) { tail = head.addDownstream(functionNode); } else { tail = tail.addDownstream(functionNode); } return (S) this; } 	0	0	1	0	1	0
protected boolean consumeBody(ICharacterReader reader) { if(consume(reader, 0x5c)) { return consume(reader, '\'') || consumeCommonEscape(reader) || consumeUnicodeEscapeSequence(reader); };  return notCharacter_norNull(reader, '\''); } 	0	0	0	0	1	0
protected boolean consumeStart(ICharacterReader reader) { return reader.read() == '\''; } 	0	0	0	0	0	1
"public boolean isAchieved() { return Boolean.valueOf(this.getProperty(""achieved"")); } "	0	0	0	0	1	0
@Override public List<Integer> getExameneeRaceAndEthnicity(final Examinee examinee, final List<String> elementErrors) { final List<Integer> ethnicityIds = newArrayList();  for (final String ethnicity : ethnicityAndRaceNames) { final Boolean value = parseMandatoryBooleanAttribute(examinee, ethnicity, elementErrors); if (value == null || !value) continue; try { ethnicityIds.add(repository.findIdByName(ethnicity)); } catch (final IllegalArgumentException e) { elementErrors.add(new DataElementError(ethnicity, ethnicity, e.getMessage()).toJson()); } } return ethnicityIds; } 	0	0	0	0	1	0
"public static UnboundedSource<?, ?> unboundedSourceFromProto(ReadPayload payload) throws InvalidProtocolBufferException { checkArgument(payload.getIsBounded().equals(IsBounded.Enum.UNBOUNDED)); return (UnboundedSource<?, ?>) SerializableUtils.deserializeFromByteArray( payload.getSource().getSpec().getPayload().toByteArray(), ""BoundedSource""); } "	1	0	1	1	0	0
public static MethodInvocation invokeConstructor(CodeType type, CodeArgument[] arguments) { return new MethodInvocationImpl(InvokeType.INVOKE_SPECIAL, type, type, new MethodSpecImpl(Arrays.asList(arguments), MethodType.CONSTRUCTOR)); } 	0	0	0	0	1	0
"private Map<File, Collection<String>> fillFilesMap(Collection<String> pathsToScan, String[] includes, String[] excludesExtended, boolean followSymlinks, boolean globCaseSensitive) { Map<File, Collection<String>> fileMap = new HashMap<>(); for (String scannerBaseDir : pathsToScan) { File file = new File(scannerBaseDir); if (file.exists()) { if (file.isDirectory()) { File basedir = new File(scannerBaseDir); String[] fileNames = filesScanner.getFileNames(scannerBaseDir, includes, excludesExtended, followSymlinks, globCaseSensitive); fileMap.put(basedir, Arrays.asList(fileNames)); } else { // handle file Collection<String> files = fileMap.get(file.getParentFile()); if (files == null) { files = new ArrayList<>(); } files.add(file.getName()); fileMap.put(file.getParentFile(), files); } } else { logger.info(MessageFormat.format(""File {0} doesn't exist"", scannerBaseDir)); } } return fileMap; } "	0	0	1	1	1	0
void bind(OffRequest requestOff, User user) { mBinding.setViewModel( new ItemListRequestViewModel(requestOff, mItemClickListener, user)); mBinding.executePendingBindings(); } 	0	0	0	0	0	1
public long getUserId() { return userId; } 	0	0	0	0	0	1
"private void drawAlphaPanel(Canvas canvas){  if(!mShowAlphaPanel || mAlphaRect == null || mAlphaPattern == null) return;  final RectF rect = mAlphaRect;  if(BORDER_WIDTH_PX > 0){ mBorderPaint.setColor(mBorderColor); canvas.drawRect(rect.left - BORDER_WIDTH_PX, rect.top - BORDER_WIDTH_PX, rect.right + BORDER_WIDTH_PX, rect.bottom + BORDER_WIDTH_PX, mBorderPaint); }   mAlphaPattern.draw(canvas);  float[] hsv = new float[]{mHue,mSat,mVal}; int color = Color.HSVToColor(hsv); int acolor = Color.HSVToColor(0, hsv);  mAlphaShader = new LinearGradient(rect.left, rect.top, rect.right, rect.top, color, acolor, TileMode.CLAMP);   mAlphaPaint.setShader(mAlphaShader);  canvas.drawRect(rect, mAlphaPaint);  if(mAlphaSliderText != null && mAlphaSliderText!= """"){ canvas.drawText(mAlphaSliderText, rect.centerX(), rect.centerY() + 4 * mDensity, mAlphaTextPaint); }  float rectWidth = 4 * mDensity / 2;  Point p = alphaToPoint(mAlpha);  RectF r = new RectF(); r.left = p.x - rectWidth; r.right = p.x + rectWidth; r.top = rect.top - RECTANGLE_TRACKER_OFFSET; r.bottom = rect.bottom + RECTANGLE_TRACKER_OFFSET;  canvas.drawRoundRect(r, 2, 2, mHueTrackerPaint);  } "	0	0	1	1	1	0
"public String toString() { return Language.I18N.getString(""pref.kmlexport.lod0footprint.mode.label."" + this.name().toLowerCase()); } "	0	0	0	0	1	0
public String resolveProperty( WorkingSession session, ILogger log, String propertyName ) { String value;  do { value = resolvePropertyInternal( session, log, propertyName ); propertyName = value; } while( value != null && Tools.isMavenVariable( value ) );  return value; } 	1	0	0	1	1	0
@Override public <T> JournalWriter<T> writer(JournalKey<T> key) throws JournalException { return new JournalWriter<>(getConfiguration().createMetadata(key), key); } 	0	0	1	0	1	0
"private static HashMap<String,CombinedFilterRange> setupIDKRangeFilters(){  HashMap<String,CombinedFilterRange> rangeMap = new 	HashMap<String,CombinedFilterRange>();  CombinedFilterRange range = new CombinedFilterRange(); range.setRangeName(""25%, 50%, 75% IDK max""); range.setIDKpercentageList(new int[] {25,50,75}); range.setUndefinedWithDefault(); rangeMap.put(range.getRangeName(),range);  return rangeMap; } "	0	0	0	0	1	0
"@RequestMapping(""/api/questions/injury"") public Set<Question> questionInjury() { return new QuestionSetFactory().getQuestionSet(3); } "	0	0	0	0	1	0
"@Override public boolean deleteMessage(ObjectId conversationId, String messageId) { final Query query = new Query(Criteria.where(""_id"").is(conversationId)); final Update update = new Update() .pull(""messages._id"", messageId);  final WriteResult result = mongoTemplate.updateFirst(query, update, Conversation.class); return result.getN() == 1; } "	0	0	0	0	0	1
@Override public AuthToken decodeFromBytes(byte[] content) throws IOException { String tokenStr = String.valueOf(content);  return decodeFromString(tokenStr); } 	0	0	1	0	1	0
"public boolean execute(ICommandSender sender, String[] args) { final IPlayer player = (IPlayer) sender; if (player.hasPermission(PermissionNames.USER_AUTO)) { if (manager.isPlotWorld(player) || plugin.getConfig().getBoolean(""allowWorldTeleport"")) { final IWorld world; if (!manager.isPlotWorld(player) && plugin.getConfig().getBoolean(""allowWorldTeleport"")) { if (args.length == 2) { world = manager.getWorld(args[1]); } else { world = manager.getFirstWorld(); } if (world == null) { player.sendMessage(C(""NotPlotWorld"")); return true; } if (!manager.isPlotWorld(world)) { player.sendMessage(C(""MsgWorldNotPlot"", world)); return true; } } else { world = player.getWorld(); }  int playerLimit = getPlotLimit(player);  int plotsOwned = manager.getOwnedPlotCount(player.getUniqueId(), world);  if (playerLimit != -1 && plotsOwned >= playerLimit && !player.hasPermission(""PlotMe.admin"")) { player.sendMessage(C(""MsgAlreadyReachedMaxPlots"") + "" ("" + plotsOwned + ""/"" + playerLimit + ""). "" + C(""WordUse"") + "" /plotme home "" + C(""MsgToGetToIt"")); return true; } final PlotMapInfo pmi = manager.getMap(world); serverBridge.runTaskAsynchronously(new Runnable() { @Override public void run() { loop: for (int i = 0; i < 50000; i++) { for (int x = -i; x <= i; x++) { for (int z = -i; z <= i; z++) { final PlotId id = new PlotId(x, z);  if (manager.isPlotAvailable(id, world)) { final String name = player.getName(); final UUID uuid = player.getUniqueId();   if (manager.isEconomyEnabled(world)) { double price = pmi.getClaimPrice();  if (serverBridge.has(player, price)) { EconomyResponse er = serverBridge.withdrawPlayer(player, price);  if (!er.transactionSuccess()) { player.sendMessage(er.errorMessage); } } else { player.sendMessage(""You do not have enough money to buy this plot""); } } plugin.getServerBridge().runTask(new Runnable() { @Override public void run() { manager.createPlot(id, world, name, uuid, pmi); } });  player.teleport(manager.getPlotHome(id, world));  player.sendMessage(C(""MsgThisPlotYours"") + "" "" + C(""WordUse"") + "" /plotme "" + C(""CommandHome"") + "" "" + C (""MsgToGetToIt"")); break loop; } } } } } }); player.sendMessage(C(""NoPlotFound"")); } else { player.sendMessage(C(""NotPlotWorld"")); } } else { return false; } return true; } "	0	0	0	0	0	1
"private void updatePlayerSubscription( Player player, @NonNull @PlayerState.PlayerSubscriptionType String playerSubscriptionType) { PlayerState playerState = player.getPlayerState();  // Do nothing if the player subscription type hasn't changed. This prevents sending a // subscription update ""status"" message which will be echoed back by the server and // trigger processing of the status message by the service. if (playerState != null) { if (playerState.getSubscriptionType().equals(playerSubscriptionType)) { return; } }  cli.sendPlayerCommand(player, ""status - 1 subscribe:"" + playerSubscriptionType + ""tags:"" + SONGTAGS); } "	0	0	1	1	1	0
"@Override @Nonnull public String getPageString() { if (state == null) { return ""1/1""; } return (state.pageIndex + 1) + ""/"" + pageCount(recipesPerPage); } "	1	0	1	1	1	0
"public void loadContent(boolean keepFilters) { topPanel = new JPanel(); topPanel.setLayout(new FlowLayout(FlowLayout.LEFT));  clearButton = new JButton(Language.INSTANCE.localize(""common.clear"")); clearButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { searchBox.setText(""""); hasUpdate.setSelected(false); reload(); } }); topPanel.add(clearButton);  searchBox = new JTextField(16); if (keepFilters) { searchBox.setText(this.searchText); } searchBox.addKeyListener(new KeyAdapter() { public void keyPressed(KeyEvent e) { if (e.getKeyChar() == KeyEvent.VK_ENTER) { reload(); } } }); topPanel.add(searchBox);  searchButton = new JButton(Language.INSTANCE.localize(""common.search"")); searchButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { reload(); } }); topPanel.add(searchButton);  hasUpdate = new JCheckBox(); hasUpdate.setSelected(isUpdate); hasUpdate.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { reload(); } }); topPanel.add(hasUpdate);  hasUpdateLabel = new JLabel(Language.INSTANCE.localize(""instance.hasupdate"")); topPanel.add(hasUpdateLabel);  add(topPanel, BorderLayout.NORTH);  panel = new JPanel(); scrollPane = new JScrollPane(panel, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane .HORIZONTAL_SCROLLBAR_NEVER); scrollPane.getVerticalScrollBar().setUnitIncrement(16); add(scrollPane, BorderLayout.CENTER);  panel.setLayout(new GridBagLayout()); GridBagConstraints gbc = new GridBagConstraints(); gbc.gridx = gbc.gridy = 0; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.BOTH;  int count = 0; for (Instance instance : App.settings.getInstancesSorted()) { if (instance.canPlay()) { if (keepFilters) { boolean showInstance = true;  if (searchText != null) { if (!Pattern.compile(Pattern.quote(searchText), Pattern.CASE_INSENSITIVE).matcher(instance .getName()).find()) { showInstance = false; } }  if (isUpdate) { if (!instance.hasUpdate()) { showInstance = false; } }  if (showInstance) { panel.add(new InstanceCard(instance), gbc); gbc.gridy++; count++; } } else { panel.add(new InstanceCard(instance), gbc); gbc.gridy++; count++; } } } if (count == 0) { panel.add(new NilCard(Language.INSTANCE.localizeWithReplace(""instance.nodisplay"", ""\n\n"")), gbc); }  SwingUtilities.invokeLater(new Runnable() { public void run() { scrollPane.getVerticalScrollBar().setValue(currentPosition); } }); } "	0	0	1	0	0	0
@Override public void putIfAbsent(K k, V v, long timeout, Handler<AsyncResult<V>> completionHandler) { completionHandler.handle(Future.failedFuture(new UnsupportedOperationException())); } 	0	0	0	0	1	0
"@Test public void testLuceneDatafiles() throws Exception { Session session = setupLuceneTest();  List<ParameterForLucene> parameters = new ArrayList<>(); parameters.add(new ParameterForLucene(""colour"", ""name"", ""green""));  // All data files searchDatafiles(session, null, null, null, null, null, 20, 3); // Use the user  JsonArray array = searchDatafiles(session, ""db/tr"", null, null, null, null, 20, 3); System.out.println(array);  // Try a bad user searchDatafiles(session, ""db/fred"", null, null, null, null, 20, 0);  // Set text and parameters array = searchDatafiles(session, null, ""df2"", null, null, parameters, 20, 1); assertEquals(""df2"", array.getJsonObject(0).getJsonObject(""Datafile"").getString(""name"")); } "	0	0	0	0	1	0
"@Override public void registerBlockModel() { NuclearPhysics.getProxy().registerBlockRenderer(this, (new StateMap.Builder()).withName(BlockStateElectromagnet.TYPE).withSuffix(""_"" + name).build()); } "	0	0	0	0	1	0
@Override protected void onResume() { super.onResume(); if(Configuration.ORIENTATION_PORTRAIT == handleOrientation()) { // If we're in Portrait, continue as normal // If we're in landscape, handleOrientation will have started the trend activity mMeter = MooshimeterDevice.getInstance(); onMeterInitialized(); getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON); } } 	0	0	0	0	1	0
"@Test public void validateDetailsDataAvailability() { final String HAS_DATA_ICON = ""smallCheck.png""; final String HAS_NO_DATA_ICON = ""smallGreyX.png"";  //Valuse for Study Details inspection final String STUDY = ""RED 4""; final String[] ASSAY_TITLES = {""IFNg ELISpot"", ""Intracellular Cytokine Staining"", ""HIV Binding Antibody""};  //Valuse for Assay Details inspection final int NUM_STUDY_FROM_ASSAY_WITH_DATA = 14; final String STUDY_FROM_ASSAY_WITH_NO_DATA = ""ZAP 108"";  //Valuse for Study Products Details inspection final String PRODUCT = ""benztropine mesylate""; final String[] STUDY_FROM_PRODUCT = {""QED 1"", ""YOYO 55""};   log(""Testing data availability module in Studies""); cds.viewLearnAboutPage(""Studies"");  Locator element = Locator.xpath(""//tr[contains(@class, 'has-data')]/td/div/div/h2[contains(text(), '"" + STUDY + ""')]""); assertElementPresent(element); waitAndClick(element);  waitForText(""Data Availability"");  Assert.assertTrue(isElementPresent(getDataRowXPath(ASSAY_TITLES[0]).append(""//td//img[contains(@src, '"" + HAS_DATA_ICON + ""')]""))); Assert.assertTrue(isElementPresent(getDataRowXPath(ASSAY_TITLES[1]).append(""//td//img[contains(@src, '"" + HAS_DATA_ICON + ""')]""))); Assert.assertTrue(isElementPresent(getDataRowXPath(ASSAY_TITLES[2]).append(""//td//img[contains(@src, '"" + HAS_NO_DATA_ICON + ""')]"")));   log(""Testing data availability module in Assays""); cds.viewLearnAboutPage(""Assays""); Locator loc = Locator.xpath(""//h2[contains(text(), '"" + CDSHelper.ICS + ""')]""); waitAndClick(loc);  refresh(); //ensures only selecting elements on viewable page.  waitForText(""Data Availability"");  List<WebElement> smallHasDataIcons =getDataRowXPath("""").append(""//td//img[contains(@src, '""  + HAS_DATA_ICON +  ""')]"").findElements(getDriver()); Assert.assertTrue(smallHasDataIcons.size() == NUM_STUDY_FROM_ASSAY_WITH_DATA);  Assert.assertFalse(isElementPresent(getDataRowXPath(STUDY_FROM_ASSAY_WITH_NO_DATA).append(""//td//img[contains(@src, '""  + HAS_DATA_ICON +  ""')]""))); Assert.assertTrue(isElementPresent(getDataRowXPath(STUDY_FROM_ASSAY_WITH_NO_DATA).append(""//td//img[contains(@src, '"" + HAS_NO_DATA_ICON + ""')]"")));   log(""Testing data availability module in Study Products""); cds.viewLearnAboutPage(""Study products""); waitAndClick(Locator.xpath(""//h2[text() = '"" + PRODUCT + ""']""));  refresh();  waitForText(""Data Availability"");  Assert.assertTrue(isElementPresent(getDataRowXPath(STUDY_FROM_PRODUCT[0]).append(""//td//img[contains(@src, '"" + HAS_DATA_ICON + ""')]""))); Assert.assertTrue(isElementPresent(getDataRowXPath(STUDY_FROM_PRODUCT[1]).append(""//td//img[contains(@src, '"" + HAS_NO_DATA_ICON + ""')]""))); } "	0	0	0	0	0	1
@AfterClass public static void afterClass() throws Exception { dsFrameworkUtil.deleteInstance(tabInstance.toId()); } 	0	0	1	0	0	0
@Override public void onGlobalLayout() { Rect r = new Rect(); //r will be populated with the coordinates of your view that area still visible. decorView.getWindowVisibleDisplayFrame(r);  //get screen height and calculate the difference with the useable area from the r int height = decorView.getContext().getResources().getDisplayMetrics().heightPixels; int diff = height - r.bottom;  //if it could be a keyboard add the padding to the view if (diff != 0) { // if the use-able screen height differs from the total screen height we assume that it shows a keyboard now //check if the padding is 0 (if yes set the padding for the keyboard) if (contentView.getPaddingBottom() != diff) { //set the padding of the contentView for the keyboard contentView.setPadding(0, 0, 0, diff); } } else { //check if the padding is != 0 (if yes reset the padding) if (contentView.getPaddingBottom() != 0) { //reset the padding of the contentView contentView.setPadding(0, 0, 0, 0); } } } 	0	0	0	0	1	0
"@Override public String toString() { if (terms.isEmpty()) { return symbol.getSymbol(); }  final StringBuilder sb = new StringBuilder(""(""); appendDelimited(sb, terms); sb.append("")""); return sb.toString(); } "	0	0	0	0	1	0
@NotNull private static Map<String, List<BaseDataReport>> getFastqcCheckData(@NotNull final List<String> allLines, @NotNull final String sampleId) throws IOException { return allLines.stream().map(line -> { final String[] values = line.trim().split(FASTQC_CHECKS_SEPARATOR); BaseDataReport prestatsDataReport = null; if (values.length == FASTQC_CHECKS_EXPECTED_PARTS) { final String status = values[0]; final Optional<PrestatsCheck> check = PrestatsCheck.getByDescription(values[1]); if (check.isPresent()) { prestatsDataReport = new BaseDataReport(sampleId, check.get().toString(), status); } } return prestatsDataReport; }).filter(prestatsDataReport -> prestatsDataReport != null).collect(groupingBy(BaseDataReport::getCheckName)); } 	0	0	0	0	1	0
"public String getLogFilePath(long offset) { int partition = (int) ((offset / offsetPerPartition) * offsetPerPartition); ArrayList<String> pathElements = new ArrayList<String>(); pathElements.add(topic); pathElements.add(Integer.toString(kafkaPartition)); pathElements.add(""offset="" + partition);  return StringUtils.join(pathElements, ""/""); } "	0	0	0	0	0	1
"public String getLogFileBaseName(long startOffset, long endOffset) { ArrayList<String> basenameElements = new ArrayList<String>(); basenameElements.add(Long.toString(startOffset)); basenameElements.add(Long.toString(endOffset)); return StringUtils.join(basenameElements, ""_""); } "	0	0	0	0	0	1
"private void processRequest(final int status) { setFields(false); InputMethodManager imm = (InputMethodManager)mContext.getSystemService(Context.INPUT_METHOD_SERVICE); imm.hideSoftInputFromWindow(editPinCode.getWindowToken(), 0);  final String password = UsefulBits.getMd5String(editPinCode.getInputWidgetText().toString());  if (validatePassword(password)) { if (mSettings.getSecOnDelay() <= 0 || status == Domoticz.Security.Status.DISARM) { //don't set delay domoticz.setSecurityPanelAction(status, password, new setCommandReceiver() { @Override public void onReceiveResult(String result) { dismissListener.onDismiss(); md.dismiss(); }  @Override public void onError(Exception error) { Log.e(TAG, domoticz.getErrorMessage(error)); Toast.makeText(mContext, mContext.getString(R.string.security_generic_error), Toast.LENGTH_SHORT).show(); setFields(true); } }); } else { countDownTimer = new CountDownTimer((mSettings.getSecOnDelay() * 1000), 1000) { public void onTick(long millisUntilFinished) { txtCountDown.setText(String.valueOf((millisUntilFinished / 1000))); }  public void onFinish() { txtCountDown.setText(""""); domoticz.setSecurityPanelAction(status, password, new setCommandReceiver() { @Override public void onReceiveResult(String result) { dismissListener.onDismiss(); md.dismiss(); }  @Override public void onError(Exception error) { Toast.makeText(mContext, mContext.getString(R.string.security_generic_error), Toast.LENGTH_SHORT).show(); setFields(true); } }); } }.start(); } } else { Toast.makeText(mContext, mContext.getString(R.string.wrongcode), Toast.LENGTH_SHORT).show(); setFields(true); } } "	0	0	0	0	1	0
"@Override public void run() { //if no player specified, this task will create a player-specific task for each online player, scheduled one tick apart if(this.player == null) { @SuppressWarnings(""unchecked"") Collection<Player> players = (Collection<Player>)GriefPrevention.instance.getServer().getOnlinePlayers();  long i = 0; for(Player onlinePlayer : players) { DeliverClaimBlocksTask newTask = new DeliverClaimBlocksTask(onlinePlayer, instance); instance.getServer().getScheduler().scheduleSyncDelayedTask(instance, newTask, i++); } }  //otherwise, deliver claim blocks to the specified player else { if(!this.player.isOnline()) { return; }  DataStore dataStore = instance.dataStore; PlayerData playerData = dataStore.getPlayerData(player.getUniqueId());  Location lastLocation = playerData.lastAfkCheckLocation; try { //if he's not in a vehicle and has moved at least three blocks since the last check //and he's not being pushed around by fluids if(!player.isInsideVehicle() && (lastLocation == null || lastLocation.distanceSquared(player.getLocation()) >= 0) && !player.getLocation().getBlock().isLiquid()) { //determine how fast blocks accrue for this player //RoboMWM: addons determine this instead int accrualRate = instance.config_claims_blocksAccruedPerHour_default;  AccrueClaimBlocksEvent event = new AccrueClaimBlocksEvent(player, accrualRate); instance.getServer().getPluginManager().callEvent(event); if (event.isCancelled()) { GriefPrevention.AddLogEntry(player.getName() + "" claim block delivery was canceled by another plugin."", CustomLogEntryTypes.Debug, true); return; }  playerData.accrueBlocks(event.getBlocksToAccrue()); GriefPrevention.AddLogEntry(""Delivering "" + accruedBlocks + "" blocks to "" + player.getName(), CustomLogEntryTypes.Debug, true);  //intentionally NOT saving data here to reduce overall secondary storage access frequency //many other operations will cause this player's data to save, including his eventual logout //dataStore.savePlayerData(player.getUniqueIdentifier(), playerData); } else { GriefPrevention.AddLogEntry(player.getName() + "" wasn't active enough to accrue claim blocks this round."", CustomLogEntryTypes.Debug, true); } } catch(IllegalArgumentException e)  //can't measure distance when to/from are different worlds {  } catch(Exception e) { GriefPrevention.AddLogEntry(""Problem delivering claim blocks to player "" + player.getName() + "":""); e.printStackTrace(); }  //remember current location for next time playerData.lastAfkCheckLocation = player.getLocation(); } } "	0	0	0	0	0	1
"public void bulkDelete(IChannel channel, int amount) { // Discord4J says that getting messages can block the current thread if they need to be requested from Discord's API. // So start this on a new thread to avoid that. Please note that you need to delete at least 2 messages.  if (channel != null) { Thread thread = new Thread(new Runnable() { @Override public void run() { RequestBuffer.request(() -> { try { List<IMessage> messages = channel.getMessageHistoryFrom(LocalDateTime.now(), (amount < 2 ? 2 : amount));  channel.bulkDelete(messages); } catch (DiscordException ex) { com.gmt2001.Console.err.println(""Failed to bulk delete messages: ["" + ex.getClass().getSimpleName() + ""] "" + ex.getMessage()); } }); } }, ""tv.phantombot.discord.util.DiscordUtil::bulkDelete"");  thread.start(); } } "	0	0	0	0	1	0
"private Parameter extractParameterFromAnnotation(Annotation annotation, String defaultValue, Class<?> cls, boolean isArray) { Parameter parameter = null;  if (annotation instanceof RequestParam) { RequestParam param = (RequestParam) annotation; QueryParameter qp = new QueryParameter() .name(param.value());  if (!defaultValue.isEmpty()) { qp.setDefaultValue(defaultValue); } Property schema = ModelConverters.getInstance().readAsProperty(cls); if (schema != null) { qp.setProperty(schema); }  if (isArray || Collection.class.isAssignableFrom(cls)) { qp.setType(""string""); }  qp.setRequired(param.required());  parameter = qp; } else if (annotation instanceof PathVariable) { PathVariable param = (PathVariable) annotation; PathParameter pp = new PathParameter() .name(param.value()); if (!defaultValue.isEmpty()) { pp.setDefaultValue(defaultValue); } Property schema = ModelConverters.getInstance().readAsProperty(cls); if (schema != null) { pp.setProperty(schema); } parameter = pp; } else if (annotation instanceof RequestHeader) { RequestHeader param = (RequestHeader) annotation; HeaderParameter hp = new HeaderParameter() .name(param.value()); hp.setDefaultValue(defaultValue); Property schema = ModelConverters.getInstance().readAsProperty(cls); if (schema != null) { hp.setProperty(schema); }  hp.setRequired(param.required());  parameter = hp; } else if (annotation instanceof CookieValue) { CookieValue param = (CookieValue) annotation; CookieParameter cp = new CookieParameter() .name(param.value()); if (!defaultValue.isEmpty()) { cp.setDefaultValue(defaultValue); } Property schema = ModelConverters.getInstance().readAsProperty(cls); if (schema != null) { cp.setProperty(schema); }  cp.setRequired(param.required());  parameter = cp; }  return parameter; } "	0	0	1	1	1	0
"protected void showNotification(String notificationText) { // TODO Auto-generated method stub NotificationCompat.Builder build = new NotificationCompat.Builder( activity); build.setSmallIcon(R.drawable.white_ee_icon); build.setContentTitle(""Data Logger Shield""); build.setContentText(notificationText); build.setTicker(notificationText); build.setWhen(System.currentTimeMillis()); build.setAutoCancel(true); Toast.makeText(activity, notificationText, Toast.LENGTH_SHORT).show(); Vibrator v = (Vibrator) activity .getSystemService(Context.VIBRATOR_SERVICE); v.vibrate(1000); Intent notificationIntent = new Intent(Intent.ACTION_VIEW); MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton(); String mimeFileType = mimeTypeMap.getMimeTypeFromExtension("".csv""); notificationIntent.setDataAndType(Uri.fromFile(new File(filePath == null || filePath.length() == 0 ? """" : filePath)), mimeFileType); notificationIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); PendingIntent intent = PendingIntent.getActivity(activity, 0, notificationIntent, 0); build.setContentIntent(intent); Notification notification = build.build(); notification.flags |= Notification.FLAG_AUTO_CANCEL; NotificationManager notificationManager = (NotificationManager) activity .getSystemService(Context.NOTIFICATION_SERVICE); notificationManager.notify((int) new Date().getTime(), notification); } "	0	0	1	1	1	0
public static final Var asVar(Node node) { if ( Var.isVar(node) ) return Var.alloc(node) ; return null ; } 	0	0	0	1	0	0
"private void checkDanglingRowLockOrThrow(byte[] tableName, byte[] row, TRowLock rowLock) throws IOException { TRowLock previousRowLock = rowLock; TRowLock currentRowLock = getRowLock(tableName, row);  // It is not a dangling RowLock if RowLock is changed. if (Objects.equal(previousRowLock, currentRowLock)) { if (!TRowLocks.isPrimary(currentRowLock)) { TRowKey primaryRowKey = currentRowLock.getPrimary(); TRowLock primaryRowLock = getRowLock(primaryRowKey.getTableName(), primaryRowKey.getRow());  TRowKey secondaryRowKey = new TRowKey().setTableName(tableName).setRow(row); if (!TRowLocks.isSecondaryOf(primaryRowLock, secondaryRowKey, currentRowLock)) { throw new DanglingRowLockException(secondaryRowKey, ""Primary lock doesn't have rowLock as secondary.""); } } } } "	1	0	1	1	1	0
"private static void assertRoundTrip(Step step, String expected) throws Exception { assertEquals(expected, Snippetizer.object2Groovy(step)); GroovyShell shell = new GroovyShell(r.jenkins.getPluginManager().uberClassLoader); final StepDescriptor desc = step.getDescriptor(); shell.setVariable(""steps"", new GroovyObjectSupport() { @Override public Object invokeMethod(String name, Object args) { if (name.equals(desc.getFunctionName())) { try { return desc.newInstance(DSL.parseArgs(desc, args).namedArgs); } catch (RuntimeException x) { throw x; } catch (Exception x) { throw new RuntimeException(x); } } else { return super.invokeMethod(name, args); } } }); Step actual = (Step) shell.evaluate(""steps."" + expected); r.assertEqualDataBoundBeans(step, actual); } "	1	0	1	1	1	0
private String loadSoleArgumentKey(StepDescriptor d) { try { String[] names = new ClassDescriptor(d.clazz).loadConstructorParamNames(); return names.length == 1 ? names[0] : null; } catch (NoStaplerConstructorException e) { return null; } } 	0	0	0	1	0	0
private Image parseImage() throws DocumentParserException { Image image = (Image) EcoreUtil.create(TemplatePackage.Literals.IMAGE); OptionParser optionParser = new OptionParser(); Map<String, String> options = optionParser.parseOptions(readTag(image, image.getRuns()), TokenType.IMAGE, OPTION_GROUP_RANK, OPTION_VAL_GROUP_RANK, image); checkImagesOptions(options, image, IMAGE_OPTION_SET, new HashSet<String>(0)); if (!options.containsKey(IMAGE_FILE_NAME_KEY)) { final XWPFRun lastRun = image.getRuns().get(image.getRuns().size() - 1); image.getValidationMessages().add(new TemplateValidationMessage(ValidationMessageLevel.ERROR, message(ParsingErrorMessage.INVALID_IMAGE_TAG), lastRun)); } else { image.setFileName(options.get(IMAGE_FILE_NAME_KEY)); setImageOptions(image, options); } return image; } 	0	0	0	0	1	0
"public static synchronized HttpClient getHttpClient() { if (httpClient == null) { HttpClientBuilder httpClientBuilder = HttpClientBuilder.create(); try {  SSLContext sslContext = new SSLContextBuilder().loadTrustMaterial(null, new TrustStrategy() { @Override public boolean isTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException { return true; } }).build(); httpClientBuilder.setSSLContext(sslContext);  SSLConnectionSocketFactory sslConnectionSocketFactory = new SSLConnectionSocketFactory(sslContext, new NoopHostnameVerifier()); Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create() .register(""http"", PlainConnectionSocketFactory.getSocketFactory()) .register(""https"", sslConnectionSocketFactory).build();  PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(socketFactoryRegistry); httpClientBuilder.setConnectionManager(connectionManager);  httpClient = httpClientBuilder.build(); } catch (Exception e) { httpClient = httpClientBuilder.build(); }  }  return httpClient; } "	1	0	1	0	1	0
"private void doWhatDoYouDoRequest(Map<String,String> messageMap, SsmlDocumentBuilder builder, QuipMetadata metadata) { String bot = metadata.getBot(); if(StringUtils.isEmpty(bot)){ builder.text(""I don't have any info for this situation.""); return; } switch(bot){ case ""complibot"": builder.text(""I give you compliments and tell you how awesome you are, "").pause().text(""and then I sit quietly and wait for you to talk to me again!"").endSentence(); break; case ""insultibot"": builder.text(""I mainly just tell you how awful you are.  "").endSentence().text(""Now, leave me alone."").endSentence(); break; default: builder.text(""I don't have any info for the bot named '"" + bot + ""'."").endSentence(); return; } } "	0	0	0	1	0	0
private void doComplimentRequest(Map<String, String> messageMap, SsmlDocumentBuilder builder, QuipMetadata metadata) { Compliments compliment = Compliments.getRandomCompliment(); metadata.getComplimentsUsed().add(compliment.name()); builder.text(compliment.getCompliment()); } 	0	0	0	1	0	0
private void doBackhandedComplimentRequest(Map<String, String> messageMap, SsmlDocumentBuilder builder, QuipMetadata metadata) { BackhandedCompliments compliment = BackhandedCompliments.getRandomBackhandedCompliment(); metadata.getBackhandedComplimentsUsed().add(compliment.name()); builder.text(compliment.getCompliment()); } 	0	0	0	1	0	0
"private void doWhoIsRequest(Map<String,String> messageMap, SsmlDocumentBuilder builder, QuipMetadata metadata) { String bot = metadata.getBot(); String botInQuestion = messageMap.get(""botName""); if(StringUtils.isEmpty(bot) || StringUtils.isEmpty(botInQuestion)){ builder.text(""I don't have any info for this situation.""); return; } switch(bot){ case ""complibot"": if(botInQuestion.equals(bot)){ builder.text(""That's me!  "").endSentence(); doWhatDoYouDoRequest(messageMap, builder, metadata); }else if(botInQuestion.equals(""insultibot"")){ builder.text(""That's my bestie.  "").endSentence().text(""It can act grumpy sometimes, but it has a heart of gold."").endSentence(); }else{ builder.text(""I don't know that bot, but I bet it's awesome."").endSentence(); } break; case ""insultibot"": if(botInQuestion.equals(bot)){ builder.text(""Are you trolling me?  "").endSentence().text(""That's me.  "").endSentence(); doWhatDoYouDoRequest(messageMap, builder, metadata); }else if(botInQuestion.equals(""complibot"")){ builder.text(""That's the annoyingly cheerful bot that won't shut up."").endSentence(); }else{ builder.text(""I don't know that bot, and I'm perfectly fine with that."").endSentence(); } break; default: builder.text(""I don't have any info for the bot named '"" + bot + ""'."").endSentence(); return; } } "	0	0	0	1	0	0
public static Entity createProjectile(Vector2 position, Vector2 velocity, Faction faction, int damage) { Entity entity = buildEntity(position) .physicsBody(BodyType.KinematicBody) .circleSensor(Constants.projectileRadius) .faction(faction) .sprite(Assets.bullets.yellow, Constants.projectileRadius * 2, Constants.projectileRadius * 2).getWithoutAdding();  ProjectileComponent projectileComp = engine.createComponent( ProjectileComponent.class).init(damage); entity.add(projectileComp);  PhysicsComponent physicsComp = Components.PHYSICS.get(entity); physicsComp.body.setBullet(true); physicsComp.body.setLinearVelocity(velocity); physicsComp.body.setTransform(position, velocity.angle());  engine.addEntity(entity); return entity; } 	0	0	0	0	0	1
private LuaValue key() { Object key = this.key; LuaValue strengthened = strengthen(key); if (key != NIL && strengthened.isNil()) { // Clear value too this.key = NIL; this.value = NIL; }  return strengthened; } 	0	0	1	0	0	0
"public static BlockType fromString(String name) { String temp = name; int data = 0; if (!blockTypes.containsKey(name)) { if (name.matches("".+:.+:\\d+"")) { temp = name.replaceAll("":\\d+"", """"); try { data = Integer.parseInt(name.replaceAll("".+:.+:"", """")); } catch (NumberFormatException nfex) { // Ignored } } else { // Perhaps try by adding a namespace temp = ""minecraft:""+temp; if (!blockTypes.containsKey(temp)) { return null; } } } return blockTypes.get(temp).get(data); } "	1	0	0	0	1	0
"@OnClick({R.id.close_dialog_button, R.id.cancel_interpretation_create, R.id.create_interpretation}) @SuppressWarnings(""unused"") public void onButtonClicked(View view) { if (view.getId() == R.id.create_interpretation) { // read user UserAccount userAccount = Dhis2.getCurrentUserAccount(); User user = Models.users().query(userAccount.getUId());  System.out.println(""*** User: ***"" + user);  // create interpretation Interpretation interpretation = Dhis2.interpretations() .createInterpretation(mDashboardItem, user, mInterpretationText.getText().toString()); List<InterpretationElement> elements = Dhis2.interpretations() .getInterpretationElements(interpretation);  // save interpretation Models.interpretations().save(interpretation); if (elements != null && !elements.isEmpty()) { for (InterpretationElement element : elements) { // save corresponding interpretation elements Models.interpretationElements().save(element); } }  DhisService.getInstance().syncInterpretations(); EventBusProvider.post(new UiEvent(UiEvent.UiEventType.SYNC_INTERPRETATIONS));  Toast.makeText(getActivity(), getString(R.string.successfully_created_interpretation), Toast.LENGTH_SHORT).show(); } dismiss(); } "	0	0	0	1	1	0
private boolean isAvailable(Pedelec pedelec) { final float lowerLimit = 0.0f;  return OperationState.OPERATIVE.equals(pedelec.getState()) && !pedelec.getInTransaction() && pedelec.getChargingStatus().getBatteryStateOfCharge() > lowerLimit; } 	0	0	1	0	1	0
"@Override public void enter(Node node, List<Node> ancestors) { //        System.out.println(""enter: "" + node); validationContext.getTraversalContext().enter(node, ancestors); Set<AbstractRule> tmpRulesSet = new LinkedHashSet<AbstractRule>(this.rules); tmpRulesSet.removeAll(rulesToSkip); List<AbstractRule> rulesToConsider = new ArrayList<AbstractRule>(tmpRulesSet); if (node instanceof Argument) { checkArgument((Argument) node, rulesToConsider); } else if (node instanceof TypeName) { checkTypeName((TypeName) node, rulesToConsider); } else if (node instanceof VariableDefinition) { checkVariableDefinition((VariableDefinition) node, rulesToConsider); } else if (node instanceof Field) { checkField((Field) node, rulesToConsider); } else if (node instanceof InlineFragment) { checkInlineFragment((InlineFragment) node, rulesToConsider); } else if (node instanceof Directive) { checkDirective((Directive) node, ancestors, rulesToConsider); } else if (node instanceof FragmentSpread) { checkFragmentSpread((FragmentSpread) node, rulesToConsider); } else if (node instanceof FragmentDefinition) { checkFragmentDefinition((FragmentDefinition) node, rulesToConsider); } else if (node instanceof OperationDefinition) { checkOperationDefinition((OperationDefinition) node, rulesToConsider); } else if (node instanceof VariableReference) { checkVariable((VariableReference) node, rulesToConsider); } else if (node instanceof SelectionSet) { checkSelectionSet((SelectionSet) node, rulesToConsider); }  } "	1	0	1	1	1	0
public String addNewFile(final Part part, final String filename, final String login) throws IOException { String nameToWrite = filename; if (!isNameCorrect(nameToWrite)) { nameToWrite = createCorrectName(filename); } FileInfo newFile = new FileInfo(filename, nameToWrite, login, part.getInputStream()); files.add(newFile); return nameToWrite; } 	0	0	0	0	0	1
"@Override public void initializeUI(BowlerAbstractDevice pm) { setGraphic(AssetFactory.loadIcon(""CreatureLab-Tab.png"")); this.pm = pm; autoRegen.setSelected(true); autoRegen.setOnAction(event -> { if(autoRegen.isSelected()){ generateCad(); } }); // TODO Auto-generated method stub setText(pm.getScriptingName());  GridPane dhlabTopLevel = new GridPane(); if (DHParameterKinematics.class.isInstance(pm)) { DHParameterKinematics device = (DHParameterKinematics) pm; try { setDefaultDhParameterKinematics(device);  } catch (Exception e) { BowlerStudioController.highlightException(null, e); } Log.debug(""Loading xml: "" + device.getXml()); dhlabTopLevel.add(new DhChainWidget(device, null), 0, 0); } else if (MobileBase.class.isInstance(pm)) { try { ScriptingEngine.setAutoupdate(true); } catch (IOException e1) { // TODO Auto-generated catch block e1.printStackTrace(); } MobileBase device = (MobileBase) pm;  // Button save = new Button(""Save Configuration"");  setDefaultWalkingEngine(device);  AnchorPane controls = new AnchorPane(); //			Accordion advancedPanel = new Accordion(); //			//if (device.getDriveType() == DrivingType.WALKING) { //				TitledPane rp = new TitledPane(""Walking Engine"", ); //				advancedPanel.getPanes().add(rp); //				advancedPanel.setExpandedPane(rp); //			//}  TreeItem<String> rootItem; try { rootItem = new TreeItem<String>( device.getScriptingName(),AssetFactory.loadIcon(""creature.png"")); } catch (Exception e) { rootItem = new TreeItem<String>( device.getScriptingName()); } rootItem.setExpanded(true); HashMap<TreeItem<String>, Runnable> callbackMapForTreeitems = new HashMap<>(); HashMap<TreeItem<String>, Group> widgetMapForTreeitems = new HashMap<>();  TreeView<String> tree = new TreeView<>(rootItem); try { MobleBaseMenueFactory.load(device, tree, rootItem, callbackMapForTreeitems, widgetMapForTreeitems, this); } catch (Exception e) { // TODO Auto-generated catch block e.printStackTrace(); } tree.setPrefWidth(325); tree.getSelectionModel().setSelectionMode(SelectionMode.SINGLE); tree.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<Object>() {  @Override public void changed(ObservableValue<?> observable, Object oldValue, Object newValue) { @SuppressWarnings(""unchecked"") TreeItem<String> treeItem = (TreeItem<String>) newValue; new Thread() { public void run() { if (callbackMapForTreeitems.get(treeItem) != null) { callbackMapForTreeitems.get(treeItem).run(); } if (widgetMapForTreeitems.get(treeItem) != null) {  Platform.runLater(() -> { controls.getChildren().clear(); controls.getChildren().add(widgetMapForTreeitems.get(treeItem)); }); } else { Platform.runLater(() -> { controls.getChildren().clear(); }); } } }.start();  } }); // addAppendagePanel(device.getLegs(),""Legs"",advancedPanel); // addAppendagePanel(device.getAppendages(),""Appandges"",advancedPanel); // addAppendagePanel(device.getSteerable(),""Steerable"",advancedPanel); // addAppendagePanel(device.getDrivable(),""Drivable"",advancedPanel); HBox progress = new HBox(10); pi = new ProgressIndicator(0); progress.getChildren().addAll(new Label(""Cad Progress:""), pi,autoRegen); baseManager = new MobileBaseCadManager(device, pi,autoRegen); // dhlabTopLevel.add(advancedPanel, 0, 0); VBox inputs = new VBox(10); BowlerStudio.setOverlayLeft(new Group(tree)); device.addConnectionEventListener(new IDeviceConnectionEventListener() {  @Override public void onDisconnect(BowlerAbstractDevice arg0) { BowlerStudio.clearOverlayLeft(); BowlerStudio.clearOverlayTop(); BowlerStudio.clearOverlayTopRight(); BowlerStudio.clearOverlayBottomRight(); }  @Override public void onConnect(BowlerAbstractDevice arg0) {} }); progress.setStyle(""-fx-background-color: #FFFFFF;""); progress.setOpacity(.7); progress.setPrefSize(325, 50); BowlerStudio.setOverlayTop(new Group(progress)); BowlerStudio.setOverlayTopRight(new Group(new JogWidget(device))); BowlerStudio.setOverlayBottomRight(new Group(controls));  BowlerStudio.setCadSplit(.1);  new Thread(){ public void run(){ ThreadUtil.wait(500); requestClose(); } }.start(); //			//inputs.getChildren().addAll(progress); //			dhlabTopLevel.add(inputs, 0, 0); //			AnchorPane.setTopAnchor(controls, 0.0); //			AnchorPane.setRightAnchor(controls, 0.0); //			AnchorPane.setLeftAnchor(controls, 0.0); //			AnchorPane.setBottomAnchor(controls, 0.0); //			VBox controlGroup = new VBox(10); //			controlGroup.getChildren().addAll(advancedPanel,controls); //			dhlabTopLevel.add(controlGroup, 1, 0); } else if (AbstractKinematicsNR.class.isInstance(pm)) { AbstractKinematicsNR device = (AbstractKinematicsNR) pm; dhlabTopLevel.add(new DhChainWidget(device, null), 0, 0); } generateCad();  setContent(new ScrollPane(dhlabTopLevel));  } "	1	0	1	0	0	0
"@Override public Path getWritableTestDir() { return new Path(""/home/xenon""); } "	0	0	0	0	1	0
"public void execute() throws MojoExecutionException { String line = ""sencha --time "" + getSenchaLogLevelCmd();  if (!StringUtils.isEmpty(arguments)) { line += "" "" + arguments; }  try { CommandLine cmdLine = getCommandLine(line); log.info(String.format(""Executing Sencha Cmd '%s'"", line)); internalExecute(cmdLine); log.debug(""Executed Sencha Cmd successfully""); } catch (IOException e) { throw new MojoExecutionException(""Execution of Sencha Cmd failed."", e); } } "	0	0	0	0	1	0
"@Override public void create () { drawer = new ShapeRenderer(); spriteBatch = new SpriteBatch(); gameStateManager = new GameStateManager(this);  Gdx.app.log(TAG, ""created"");  AssetLoader.load();  gameStateManager.pushScreen(new MainMenu(this)); // TODO: Set to SS when done debugging } "	0	0	0	0	1	0
public static AsyncCrawler create(String configPath, String dataPath, String seedPath, String modelPath, String esIndexName, String esTypeName) throws Exception {  Configuration config = new Configuration(configPath);  MetricsManager metricsManager = new MetricsManager(false, dataPath); Storage linkStorage = LinkStorage.createLinkStorage(configPath, seedPath, dataPath, modelPath, config.getLinkStorageConfig(), metricsManager);  Storage targetStorage = TargetStorage.createTargetStorage(configPath, modelPath, dataPath, esIndexName, esTypeName, config.getTargetStorageConfig(), linkStorage, metricsManager);  return new AsyncCrawler(targetStorage, linkStorage, config.getCrawlerConfig(), dataPath, metricsManager); } 	1	0	0	1	0	0
@Override public String toString() { return new MetacatJsonLocator().toJsonString(this); } 	0	0	0	0	1	0
public String[] getTagNamesOfPersistedArtifacts(String applicationId, String version, String revision, String tenantDomain) throws AppFactoryException{ String jobName = ServiceHolder.getContinuousIntegrationSystemDriver() .getJobName(applicationId, version, revision); return connector.getTagNamesOfPersistedArtifacts(jobName, tenantDomain); } 	1	0	0	1	1	0
"public File getArtifact(String applicationId, String version, String artifactName, String tenantDomain) throws AppFactoryException { return this.connector.getArtifact(getJobName(applicationId, version, """"), artifactName, tenantDomain); } "	0	0	0	0	1	0
"@Override public String toString() { return Utils.join(result, "": "", "" ,""); } "	0	0	0	0	0	1
public /*@Nullable*/ AnnotationMirror division(AnnotatedTypeMirror p1, AnnotatedTypeMirror p2) { if (p1.getAnnotations().isEmpty() && p2.getAnnotations().contains(s)) { return hz; }  return null; } 	0	0	0	0	1	0
public APIStatus getNewStatus() { return newStatus; } 	0	0	0	0	0	1
private void processDataFile(DataFile dataFile, EvaluatorFactory factory, Integer fileSplitSize) throws IOException {  //Validate the structure of the resource //    Optional<ValidationResultElement> validationResultElement = //            EvaluatorFactory.createResourceStructureEvaluator(dataFile.getFileFormat()) //                    .evaluate(dataFile.getFilePath(), dataFile.getSourceFileName()); // //    if(validationResultElement.isPresent()) { //      return ValidationResultBuilders.Builder.of(false, dataFile.getSourceFileName(), //              dataFile.getFileFormat(), ValidationProfile.GBIF_INDEXING_PROFILE) //              .withResourceResult(validationResultElement.get()).build(); //    } //TODO check why is necessary dataFile.setHasHeaders(Optional.of(true)); List<DataFile> dataFiles = RecordSourceFactory.prepareSource(dataFile); List<EvaluationUnit> dataFilesToEvaluate = splitDataFile(dataFiles, factory, fileSplitSize); //now trigger everything processDataFile(dataFilesToEvaluate); } 	0	0	0	0	1	0
"@Test (priority = 2) public void availabilityStatisticTab() throws Exception { // ------------------- Тестовые данные -------------------// String service = ""Надання довідки про відсутність (наявність) судимості або обмежень, передбачених кримінально-процесуальним законодавством (терміново)""; String serviceTab = ""Статистика""; String timingColumn = ""Таймінг ?""; String timingRow = ""годин""; String numberOfServicesProvidedColumn = ""Кількість наданих послуг""; String regionRow = ""Дніпропетровська"";  // --------------------- Тест-кейс----------------------// mainPage.typeInSearchField(service); app.pause(6000); mainPage.clickService(service); app.pause(2000); // временно Assert.assertEquals(selectAreaPage.serviceName.getText(), service); selectAreaPage.clickServiceTab(serviceTab); app.pause(4000); // временно Assert.assertEquals(statisticTab.timingColumn.getText(), timingColumn); Assert.assertTrue(statisticTab.timingRow.getText().contains(timingRow)); Assert.assertEquals(statisticTab.numberOfServicesProvidedColumn.getText(), numberOfServicesProvidedColumn); Assert.assertEquals(statisticTab.regionRow.getText(), regionRow); } "	0	0	0	0	1	0
@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_controll, container, false);  viwEmpty = view.findViewById(R.id.empty); viwEmpty.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { createNewController(); } });  mListView = (RecyclerView) view.findViewById(R.id.list);  ActionBar actionBar = ((AppCompatActivity) getActivity()).getSupportActionBar(); if(actionBar != null) { actionBar.setTitle(R.string.controllers); }  mAdapter = new ControllerAdapter(getActivity()); mAdapter.setItemListener(new ControllerAdapter.ItemListener() { @Override public void itemCountUpdated(int itemCount) { updateEmptyView(itemCount); }  @Override public void itemClickListener(ControllerAdapter.ControllerHolder controllerHolder) { ControllerDB controller = mAdapter.getItem(controllerHolder.getAdapterPosition()); getActivity().getSupportFragmentManager().beginTransaction() .replace(R.id.page_container, ControlFragment.newInstance(controller.getId())) .addToBackStack(null) .commit(); }  @Override public boolean itemLongClickListener(final ControllerAdapter.ControllerHolder controllerHolder) { final ControllerDB controller = mAdapter.getItem(controllerHolder.getAdapterPosition()); new AlertDialog.Builder(getActivity()) .setItems(R.array.controll_manager, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { switch (which) { case 0: loadController(controller.getId()); break; case 1: mAdapter.removeItem(controllerHolder.getAdapterPosition()); controller.deleteController(getActivity()); break; } } }).create().show(); return true; } }); final List<ControllerDB> controllers = ControllerDB.getControllers(); mAdapter.addAll(controllers);  // Set the adapter GridLayoutManager gridLayoutManager = new GridLayoutManager(getActivity(), 1); mListView.setLayoutManager(gridLayoutManager); mListView.setItemAnimator(new DefaultItemAnimator()); mListView.setAdapter(mAdapter);  updateEmptyView(controllers.size());  setHasOptionsMenu(true);  return view; } 	0	0	0	0	1	0
"@Override protected JsonNode put(JsonNode command) throws CommandException { String username = getUsername(command); JsonNode params = command.get(ScriptCommand.PARAMS); String role = params.get(""role"")==null?params.get(""role"").asText():null; JsonNode userVisible = params.get(UserDao.ATTRIBUTES_VISIBLE_ONLY_BY_THE_USER); JsonNode friendsVisible = params.get(UserDao.ATTRIBUTES_VISIBLE_BY_FRIENDS_USER); JsonNode registeredVisible = params.get(UserDao.ATTRIBUTES_VISIBLE_BY_REGISTERED_USER); JsonNode anonymousVisible = params.get(UserDao.ATTRIBUTES_VISIBLE_BY_ANONYMOUS_USER); try { ODocument doc = UserService.updateProfile(username, role, anonymousVisible, userVisible, friendsVisible, registeredVisible); String s = JSONFormats.prepareDocToJson(doc, JSONFormats.Formats.USER); return Json.mapper().readTree(s); } catch (Exception e) { throw new CommandExecutionException(command,""Error updating user: ""+e.getMessage()); } } "	0	0	1	1	1	0
"public ArrayList<String> downKeys() {  ArrayList<String> keyNames = new ArrayList<String>();  for (String keyName : keyToCode.keySet()){  if (Gdx.input.isKeyPressed(keyToCode.get(keyName)))	keyNames.add(keyName);  }  return keyNames;  } "	0	0	0	0	1	0
"private void add(Statement statement, Term term) throws AtomSetException { try { Map<String, Object> data = new TreeMap<String, Object>(); data.put(""term"", term.getIdentifier()); data.put(""term_type"", term.getType()); String query = this.getDriver() .getInsertOrIgnoreStatement( TERM_TABLE_NAME, data); statement.executeUpdate(query); } catch (SQLException e) { throw new AtomSetException(""Error during insertion of a term"", e); } } "	0	0	0	0	1	0
"@Override public void validate(Object target, Errors errors) { Message message = (Message) target;  byte[] utf8Bytes = new byte[0]; try { utf8Bytes = message.getMessage().getBytes(""UTF-8""); } catch (UnsupportedEncodingException ex) { ex.printStackTrace(); }  if (utf8Bytes.length > 64) { errors.rejectValue(""message"", ""field.required"", ""too many characters""); }  } "	0	0	1	0	1	0
private Map<String, Map<String, ConfigParameterInfo>> getPluginConfig( ProjectState project, DynamicMap<ProjectConfigEntry> pluginConfigEntries, PluginConfigFactory cfgFactory, AllProjectsName allProjects) { TreeMap<String, Map<String, ConfigParameterInfo>> pluginConfig = new TreeMap<>(); for (Entry<ProjectConfigEntry> e : pluginConfigEntries) { ProjectConfigEntry configEntry = e.getProvider().get(); PluginConfig cfg = cfgFactory.getFromProjectConfig(project, e.getPluginName()); String configuredValue = cfg.getString(e.getExportName()); ConfigParameterInfo p = new ConfigParameterInfo(); p.displayName = configEntry.getDisplayName(); p.description = configEntry.getDescription(); p.warning = configEntry.getWarning(project); p.type = configEntry.getType(); p.permittedValues = configEntry.getPermittedValues(); p.editable = configEntry.isEditable(project) ? true : null; if (configEntry.isInheritable() && !allProjects.get().equals(project.getProject().getNameKey())) { PluginConfig cfgWithInheritance = cfgFactory.getFromProjectConfigWithInheritance(project, e.getPluginName()); p.inheritable = true; p.value = configEntry.onRead(project, cfgWithInheritance.getString(e.getExportName(), configEntry.getDefaultValue())); p.configuredValue = configuredValue; p.inheritedValue = getInheritedValue(project, cfgFactory, e); } else { if (configEntry.getType() == ProjectConfigEntry.Type.ARRAY) { p.values = configEntry.onRead(project, Arrays.asList(cfg.getStringList(e.getExportName()))); } else { p.value = configEntry.onRead(project, configuredValue != null ? configuredValue : configEntry.getDefaultValue()); } } Map<String, ConfigParameterInfo> pc = pluginConfig.get(e.getPluginName()); if (pc == null) { pc = new TreeMap<>(); pluginConfig.put(e.getPluginName(), pc); } pc.put(e.getExportName(), p); } return !pluginConfig.isEmpty() ? pluginConfig : null; } 	1	0	1	1	0	0
"@Test public void rebase() throws Exception { // Create two changes both with the same parent PushOneCommit.Result r = createChange(); testRepo.reset(""HEAD~1""); PushOneCommit.Result r2 = createChange();  // Approve and submit the first change RevisionApi revision = gApi.changes() .id(r.getChangeId()) .current(); revision.review(ReviewInput.approve()); revision.submit();  String changeId = r2.getChangeId(); // Rebase the second change gApi.changes() .id(changeId) .current() .rebase();  // Second change should have 2 patch sets ChangeInfo c2 = gApi.changes().id(changeId).get(); assertThat(c2.revisions.get(c2.currentRevision)._number).isEqualTo(2);  // ...and the committer should be correct ChangeInfo info = gApi.changes() .id(changeId).get(EnumSet.of( ListChangesOption.CURRENT_REVISION, ListChangesOption.CURRENT_COMMIT)); GitPerson committer = info.revisions.get( info.currentRevision).commit.committer; assertThat(committer.name).isEqualTo(admin.fullName); assertThat(committer.email).isEqualTo(admin.email);  // Rebasing the second change again should fail exception.equals(ResourceConflictException.class); exception.expectMessage(""Change is already up to date""); gApi.changes() .id(changeId) .current() .rebase(); } "	0	0	0	0	1	0
"public static void getConvention(final String name, final ResponseHandler<Convention> response) { Convention result = conventions.get(name); if (result != null) { response.result(result); return; }  HttpClient.get(name + "".json"", null, new AsyncHttpResponseHandler() { @Override public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) { try { Convention convention = GSON.fromJson(new String(responseBody, ""UTF-8""), Convention.class); conventions.put(name, convention); response.result(convention); } catch (Exception ex) { Log.e(APP_NAME, """", ex); } }  @Override public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error) { Log.e(APP_NAME, ""HTTP Error: "" + statusCode + ""\nURL:"" + ""img/"" + name + extension, error); } }); } "	0	0	1	1	1	0
"public void remove( final String environmentId, final String subscriberId ) throws DaoException { EntityManager em = emf.createEntityManager(); try { em.getTransaction().begin();  Query query = em.createQuery( ""DELETE FROM Subscriber s WHERE s.environmentId = :environmentId AND s.subscriberId = "" + "":subscriberId"" ); query.setParameter( ""environmentId"", environmentId ); query.setParameter( ""subscriberId"", subscriberId ); query.executeUpdate();  em.getTransaction().commit(); } catch ( PersistenceException e ) { if ( em.getTransaction().isActive() ) { em.getTransaction().rollback(); } LOGGER.error( ""Query string found to be invalid."" ); throw new DaoException( e ); } finally { em.close(); } } "	0	0	1	0	0	0
"@Test public void testErrors() { addToDataModel(""x"", 1); assertErrorContains(""${'${noSuchVar}'}"", InvalidReferenceException.class, ""missing"", ""noSuchVar""); assertErrorContains(""${'${x/0}'}"", ArithmeticException.class, ""zero""); } "	0	0	1	0	1	0
"@SuppressWarnings(""ResourceType"") public void setUiElements() { //			getActivity().setProgressBarIndeterminateVisibility(false); toolbar.findViewById(R.id.action_bar_spinner).setVisibility(View.INVISIBLE); toolbar.getTag(R.id.action_bar_spinner); RelativeLayout layout = (RelativeLayout) rootView.findViewById(R.id.info);  int lastIdAdded = R.id.teacher_name; TextView teacher = (TextView) layout.findViewById(R.id.teacher_name); TextView sixWeeksAverage = (TextView) layout.findViewById(R.id.six_weeks_average); teacher.setVisibility(View.VISIBLE); sixWeeksAverage.setVisibility(View.VISIBLE);  class AssignmentDetailListener implements OnClickListener {  private final Assignment view;  AssignmentDetailListener(Assignment view) { this.view = view; }  @Override public void onClick(View arg0) { // Display the information. AlertDialog.Builder builder = new AlertDialog.Builder(getActivity(), R.style.AlertDialog); builder.setTitle(view.getName());  StringBuilder msg = new StringBuilder(); msg.append(view.getCategory() == null ? ""No category"" : view.getCategory().getType()) .append(""\nMax Grade: "" + String.format(""%.1f"", view.getMaxGrade())) .append(""\nDue Date: "" + DateHelper.daysRelative(view.getDueDate())) .append(""\nWeight: x"" + String.format(""%.1f"", view.getWeight())); try { builder.setMessage(msg.toString()); } catch (Exception e) { return; }  builder.setCancelable(false) .setPositiveButton(""OK"", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int id) { dialog.dismiss(); } }); AlertDialog dlg = builder.create(); if (Build.VERSION.SDK_INT < 21) dlg.getWindow().setBackgroundDrawableResource(android.R.color.transparent); dlg.show(); } }  // The following line prevents force close. Idk why. // Maybe the extra print time somehow fixes it... //System.out.println(mClassGrade); teacher.setText(session.getCurrentStudent().getClassReport(classID).getTeacherName());  int avg = mTermReport.getGrade(); if (avg >= 0) { String average = Integer.toString(avg); sixWeeksAverage.setText(average); } else sixWeeksAverage.setVisibility(View.INVISIBLE);  // Add current student's name if (session.MULTIPLE_STUDENTS) { LayoutInflater inflater = (LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE); LinearLayout studentName = (LinearLayout) inflater.inflate(R.layout.main_student_name_if_multiple_students, layout, false); ((TextView) studentName.findViewById(R.id.name)).setText(session.getCurrentStudent().name);  RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams( LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT); lp.addRule(RelativeLayout.BELOW, lastIdAdded); //noinspection ResourceType studentName.setId(id.student_name); lastIdAdded = studentName.getId();  layout.addView(studentName, lp); }  LayoutInflater inflater = (LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);  boolean hasNoCategoryGrades = false; for (Assignment grade : mTermReport.getAssignments()) if (grade.getCategory().getType().equals(GradeCategory.NO_CATEGORY)) { hasNoCategoryGrades = true; break; }  for (GradeCategory category : mTermReport.getCategories()) { if (category.getType().equals(GradeCategory.NO_CATEGORY) && !hasNoCategoryGrades) continue; LinearLayout card = new LinearLayout(getActivity()); card.setOrientation(LinearLayout.VERTICAL); card.setBackgroundResource(R.drawable.card_custom);  // Name of the category (""Daily Work"", etc) String categoryName = category.getType();  // for every grade in this term [any category] for (Assignment grade : mTermReport.getAssignments()) { // only if this grade is in the category which we're looking for if (category.equals(grade.getCategory())) { LinearLayout innerLayout = (LinearLayout) inflater.inflate(R.layout.class_swipe_grade_view, card, false);  TextView descriptionView = (TextView) innerLayout.findViewById(R.id.description); String description = grade.getName(); descriptionView.setText(description); descriptionView.setId(ASSIGNMENT_NAME_ID);  TextView txtGrade = (TextView) innerLayout.findViewById(R.id.grade); txtGrade.setText(grade.getGrade() == -1 ? """" : String.format(""%.0f"", grade.getGrade()));  innerLayout.setOnClickListener(new AssignmentDetailListener(grade));  card.addView(innerLayout); }  } /********************* * Create a category summary view ********************/ LinearLayout categoryLayout = (LinearLayout) inflater.inflate(R.layout.class_swipe_category_card, card, false);  TextView categoryNameView = (TextView) categoryLayout.findViewById(R.id.category_name); categoryNameView.setText(categoryName);  TextView scoreView = (TextView) categoryLayout.findViewById(R.id.category_score);  int categoryScore = category.getGrade(); if (categoryScore < 0) scoreView.setText(""""); else scoreView.setText("""" + categoryScore); card.addView(categoryLayout);  /********************* * Animation *********************/ Animation animation = AnimationUtils.loadAnimation(getActivity(), R.anim.slide_from_down_rotate); animation.setStartOffset(0);  card.setId(lastIdAdded + 1); RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams( LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT); lp.addRule(RelativeLayout.BELOW, lastIdAdded); layout.addView(card, lp); lastIdAdded = card.getId(); card.startAnimation(animation); } } "	0	0	0	0	0	1
"public void printTime(String header, boolean fromStart) { long dur = logTime(fromStart); System.out.println(String.format(""%s (%,6d sec; DB cache: %,9d)"", header, dur / 1000, getCacheCounts(fromStart))); } "	0	0	0	0	1	0
@Override public View newView(Context context, Cursor cursor, ViewGroup parent) { return View.inflate(context, R.layout.item_feedheadline, parent); } 	0	0	0	1	1	0
"@Test public void addNewActionToActivityTest(){ runActivity(activity);  onView(withId(R.id.editText)).perform(clearText(), typeText(expectedActionTitle)); Espresso.closeSoftKeyboard();  onView(withId(R.id.button4)).perform(click());  List<Slide> actions = ActionRepository.getActionsByActivityId(activity.getId()); assertEquals(""New action should be added"", 1, actions.size());  } "	0	0	0	0	1	0
public static ByteBuffer getBuffer(long address) { if (address >= cachedLowerAddress.get() && address < cachedHigherAddress.get()) { return cachedBuffer.get(); } else { int blockType  = blockType(address); int indexBits  = indexBits(blockType); int blockIndex = blockIndex(address, indexBits); long lower = (blockType << 62) | (blockIndex << indexBits); AtomicBoolean blockLock = blockLocks[blockType]; ByteBuffer buf = null; if (blockLock.compareAndSet(false, true)) { try { buf = (ByteBuffer) blockArrays[blockType].get(blockIndex); } finally { blockLock.set(false); } } cachedLowerAddress.set(lower); cachedHigherAddress.set(lower + (1 << indexBits)); cachedBuffer.set(buf); return buf; } } 	0	0	0	0	1	0
"public static boolean validateIPs(final String ipsText) { if(Strings.isNullOrEmpty(ipsText)) { return true; } String[] lines = ipsText.split(""\\r?\\n""); boolean valid = true;  for(String line : lines) { valid = new IPAddressValidator().validate(line); }  return valid; } "	0	0	0	0	1	0
public void addGravitationForces() { for (PhysicsObject object : spaceRegister) { for (PhysicsObject other : spaceRegister) { if (object == other)//If we calculated the force between one object and itself, the force would be infinite and the simulation would crash. continue; object.appendForce(gravitation(object, other)); } } } 	0	0	0	0	0	1
@Override protected void doExecute() {  for (final Element element : selected) { element.destroy(); }  // Refresh all diagrams final Collection<DRepresentation> representations = DialectManager.INSTANCE .getAllRepresentations(session); for (final DRepresentation representation : representations) { // We test if the root element still exists if (representation instanceof DSemanticDiagram) { final DSemanticDiagram diagram = (DSemanticDiagram)representation; if (diagram.getTarget() != null && DialectManager.INSTANCE.canRefresh(representation)) { DialectManager.INSTANCE.refresh(representation, new NullProgressMonitor()); } } } } 	0	0	0	0	1	0
"private static VirtualFile findFlutterSdkRoot(VirtualFile dartSdkLibDir) { // Navigating up from `bin/cache/dart-sdk/lib/` int count = 4; VirtualFile parent = dartSdkLibDir; do { parent = parent.getParent(); } while (parent != null && --count > 0); return parent != null && parent.getName().equals(""flutter"") ? parent : null; } "	1	0	0	0	1	0
"@Override public void draw(Graphics2D g) {  if (isVisible()) {  // Only draw a background if it is desired. if (backgroundColor != null) { g.setColor(backgroundColor); g.fill(getBounds()); }  if (isAcceptingInput()) {  switch (getStatus()) { case NO_MOUSE: g.setColor(getBorder().getOuterColor()); break; case MOUSE: g.setColor(getBorder().getHoverColor()); break; case CLICK: g.setColor(getBorder().getClickColor()); break; case NOT_AVAILABLE: g.setColor(getBorder().getNotAvailableColor()); break; default: System.out.println(""Status not defined.""); System.exit(1); }  } else { g.setColor(declineInputColor); }  if (optImage == null) { g.drawString(text, getX(), getY()); } else { g.drawImage(optImage, imageDrawLocation.x, imageDrawLocation.y, imageDrawScale.x, imageDrawScale.y, null); g.drawString(text, textDrawLocation.x, textDrawLocation.y); } } } "	1	1	0	1	1	0
public void harvest(TileFarm farm, FarmerTree farmer, BlockPos pos, HarvestResult res) { horizontalRange = farm.farmSize + 7; verticalRange = 30; harvest(farm.getWorld(), farm.getMachinePos(), pos, res, farmer.getIgnoreMeta()); } 	0	0	0	0	1	0
public static void annotateEvidence(Evidence evidence) throws ParserConfigurationException { GeneBo geneBo = ApplicationContextSingleton.getGeneBo(); Gene gene = geneBo.findGeneByHugoSymbol(evidence.getGene().getHugoSymbol()); evidence.setGene(gene); if(gene == null) { return; } Set<Alteration> queryAlterations = evidence.getAlterations(); if(queryAlterations != null && !queryAlterations.isEmpty()) { AlterationType type = AlterationType.MUTATION; Set<Alteration> alterations = new HashSet<Alteration>(); AlterationBo alterationBo = ApplicationContextSingleton.getAlterationBo(); for (Alteration alt : queryAlterations) { String proteinChange = alt.getAlteration(); String displayName = alt.getName(); Alteration alteration = alterationBo.findAlteration(gene, type, proteinChange); if (alteration == null) { alteration = new Alteration(); alteration.setGene(gene); alteration.setAlterationType(type); alteration.setAlteration(proteinChange); alteration.setName(displayName); AlterationUtils.annotateAlteration(alteration, proteinChange); alterationBo.save(alteration); } alterations.add(alteration); } evidence.setAlterations(alterations); }  Set<ClinicalTrial> trials = evidence.getClinicalTrials(); Set<Article> articles = evidence.getArticles(); Set<Treatment> treatments = evidence.getTreatments(); Set<NccnGuideline> nccnGuidelines = evidence.getNccnGuidelines();  if (evidence.getSubtype() != null && evidence.getSubtype().isEmpty()) { evidence.setSubtype(null); } if (evidence.getCancerType() != null && evidence.getCancerType().isEmpty()) { evidence.setCancerType(null); } if (trials != null && !trials.isEmpty()) { ClinicalTrialBo clinicalTrialBo = ApplicationContextSingleton.getClinicalTrialBo(); Set<ClinicalTrial> annotatedTrials = new HashSet<>(); Set<String> nctIds = new HashSet<String>(); for (ClinicalTrial trial : trials) { String tempNctID = trial.getNctId(); ClinicalTrial tempCT = clinicalTrialBo.findClinicalTrialByNctId(tempNctID); if (tempCT == null) { nctIds.add(tempNctID); } else { annotatedTrials.add(tempCT); } } annotatedTrials.addAll(ClinicalTrialsImporter.importTrials(nctIds)); evidence.setClinicalTrials(annotatedTrials); } if (articles != null && !articles.isEmpty()) { ArticleBo articleBo = ApplicationContextSingleton.getArticleBo(); Set<Article> annotatedArticles = new HashSet<>(); for (Article article : articles) { String tempPMID = article.getPmid(); if (tempPMID == null) { Article tempAT = articleBo.findArticleByAbstract(article.getAbstractContent()); if (tempAT == null) { articleBo.save(article); annotatedArticles.add(article); } else { annotatedArticles.add(tempAT); } } else { Article tempAT = articleBo.findArticleByPmid(tempPMID); if (tempAT == null) { Article newArticle = NcbiEUtils.readPubmedArticle(tempPMID); if (newArticle != null) { articleBo.save(newArticle); annotatedArticles.add(newArticle); } } else { annotatedArticles.add(tempAT); } } } evidence.setArticles(annotatedArticles); }  if (treatments != null && !treatments.isEmpty()) { DrugBo drugBo = ApplicationContextSingleton.getDrugBo(); TreatmentBo treatmentBo = ApplicationContextSingleton.getTreatmentBo(); for (Treatment treatment : treatments) { Set<Drug> drugs = treatment.getDrugs(); if (drugs != null && !drugs.isEmpty()) { Set<Drug> drugsFromDB = new HashSet<>(); for (Drug drug : drugs) { Drug tempDrug = drugBo.findDrugByName(drug.getDrugName()); if (tempDrug == null) { drugBo.save(drug); drugsFromDB.add(drug); } else { drugsFromDB.add(tempDrug); } } treatment.setDrugs(drugsFromDB); } treatmentBo.saveOrUpdate(treatment); } } if (nccnGuidelines != null && !nccnGuidelines.isEmpty()) { NccnGuidelineBo nccnGuidelineBo = ApplicationContextSingleton.getNccnGuidelineBo(); Set<NccnGuideline> nccnFromDB = new HashSet<>(); for (NccnGuideline nccnGuideline : nccnGuidelines) { NccnGuideline tempNccnGuideline = nccnGuidelineBo.findNccnGuideline(nccnGuideline.getTherapy(), nccnGuideline.getDisease(), nccnGuideline.getVersion(), nccnGuideline.getPages()); if (tempNccnGuideline == null) { nccnGuidelineBo.saveOrUpdate(nccnGuideline); nccnFromDB.add(nccnGuideline); } else { nccnFromDB.add(tempNccnGuideline); } } evidence.setNccnGuidelines(nccnFromDB); } } 	0	0	0	0	0	1
"public HttpResponse<String> deleteJob(String name) throws JenkinsServerException { try { return jenkinsClient.post_xml(""/job/"" + name + Constants.URL_DO_DELETE); } catch (JenkinsClientException exception) { throw new JenkinsServerException(exception); } } "	0	0	0	0	1	0
"@Override public void addViewControllers(ViewControllerRegistry registry) { if (isIndexRedirectEnabled) { registry.addRedirectViewController(""/"", ""/app/""); } super.addViewControllers(registry); } "	0	0	0	0	0	1
"@Override public void onStartup(ServletContext servletContext) throws ServletException { this.servletContext = servletContext; servletContext.setSessionTrackingModes(Collections.singleton(SessionTrackingMode.COOKIE)); servletContext.addListener(new WelcomeContainerBootstrap()); servletContext.addListener(new CockpitContainerBootstrap()); servletContext.addListener(new AdminContainerBootstrap()); servletContext.addListener(new TasklistContainerBootstrap());  registerFilter(""Authentication Filter"", AuthenticationFilter.class, ""/*"");  registerFilter(""Security Filter"", LazySecurityFilter.class, singletonMap(""configFile"", securityConfigFile), ""/*"");  registerFilter(""Engines Filter"", LazyProcessEnginesFilter.class, ""/app/*""); registerFilter(""CacheControlFilter"", CacheControlFilter.class, ""/api/*"");  registerServlet(""Cockpit Api"", CockpitApplication.class, ""/api/cockpit/*""); registerServlet(""Admin Api"", AdminApplication.class, ""/api/admin/*""); registerServlet(""Tasklist Api"", TasklistApplication.class, ""/api/tasklist/*""); registerServlet(""Engine Api"", EngineRestApplication.class, ""/api/engine/*""); } "	0	0	0	0	1	0
private void addChartSeries(ChartSeries series, boolean redraw) { initChart();  Series chartSeries = null; Optional<ChartSeries> foundChartSeries = Iterables.tryFind(dataSeriesMap.values(), s -> s.getParameterId().equals(series.getParameterId()));  if (foundChartSeries.isPresent()) { chartSeries = chartSeriesMap.get(dataSeriesMap.inverse().get(foundChartSeries.get())); } else { chartSeries = chart.createSeries(); chartSeriesMap.put(chartSeries.getId(), chartSeries); dataSeriesMap.put(chartSeries.getId(), series); }  chartSeries .setName(series.getName()) .setPoints(series.getValues()) .setYAxis(getYAxisIndex(series));  if (!foundChartSeries.isPresent()) { chart.addSeries(chartSeries, redraw, true); } } 	0	0	0	0	0	1
"public Object getProperty(String name) throws Exception { JSONObject jsonObject = new JSONObject(); jsonObject.put(""sessionId"", driver.getSessionId()); jsonObject.put(""elementId"", driver.getElementId()); jsonObject.put(""name"", name); Object response = (JSONObject) utils.request(""GET"", DriverCommand.GET_ELEMENT_PROPERTY, jsonObject); return response; } "	0	0	1	1	1	0
"public void toController(OFMessage msg, FloodlightContext cntx){ if(ofcch == null){ return; }  log.debug(""Proxy Handling message of type: "" + msg.getType()); int xid = msg.getXid(); switch(msg.getType()){ case PACKET_IN: OFPacketIn pcktIn = (OFPacketIn) msg; OFMatch match = new OFMatch(); if(pcktIn.getPacketData().length <= 0){ log.debug(""No Packet data not slicing""); //no packet not slicing... return; } match.loadFromPacket(pcktIn.getPacketData(),pcktIn.getInPort()); OFFlowMod flowMod = new OFFlowMod(); flowMod.setMatch(match); List <OFFlowMod> allowed = this.mySlicer.allowedFlows(flowMod); if(allowed.size() == 0){ log.debug(""Packet in Not allowed for slice: ""+this.mySlicer.getSliceName()); return; }  if(this.packetInRate.okToProcess()){ //add the packet buffer id to our buffer id list this.mySlicer.addBufferId(pcktIn.getBufferId(), pcktIn.getPacketData()); //we add the packet with the vlan id on it but send a modified packet in to the controller //without the vlan tag if(this.mySlicer.getTagManagement()){ log.debug(""Processing Packet in for Managed Tag mode""); Ethernet newPkt = new Ethernet(); byte[] pktData = pcktIn.getPacketData(); newPkt.deserialize(pktData,0,pktData.length); newPkt.setEtherType(newPkt.getEtherType()); newPkt.setVlanID(Ethernet.VLAN_UNTAGGED);  //Set the packet data based on the length of the serialize function's returned //value.  Do it this way because serialize() might remove a number of padding bytes, //so we cannot just assume the number of bytes removed will be 4. byte[] newPktData = newPkt.serialize(); pcktIn.setPacketData(newPktData); pcktIn.setTotalLength((short) newPktData.length); } break; }else{ log.warn(""Packet in Rate for Slice: "" + this.getSlicer().getSliceName() + "":"" + this.getSlicer().getSwitchName() + "" has passed the packet in rate limit Disabling slice!!!!""); this.setAdminStatus(false); return; }  case PORT_STATUS: //only send port status messages //for interfaces involved with this slice OFPortStatus portStatus = (OFPortStatus)msg; OFPhysicalPort port = portStatus.getDesc(); if(!this.mySlicer.isPortPartOfSlice(port.getName())){ log.debug(""Port status even for switch"" + this.getSlicer().getSwitchName() + "" port "" + port.getName() + "" is not allowed for slice""+this.mySlicer.getSliceName()); return; }   switch(OFPortReason.fromReasonCode(portStatus.getReason())){ case OFPPR_ADD: this.mySlicer.setPortId(port.getName(), port.getPortNumber()); break; case OFPPR_MODIFY: //nothing to do here break; case OFPPR_DELETE: //nothing to do here break; }  break; case ERROR: if(xidMap.containsKey(xid)){ msg.setXid(xidMap.get(xid)); xidMap.remove(xid); OFError error = (OFError) msg; OFMessage error_msg = null; try{ error_msg = error.getOffendingMsg(); } catch (MessageParseException e) { // TODO Auto-generated catch block log.error(""Unable to parse error's offending message""); break; } if(error_msg == null){ break; } switch(error_msg.getType()){ case FLOW_MOD: OFFlowMod mod = (OFFlowMod) error_msg; switch(mod.getCommand()){ case OFFlowMod.OFPFC_ADD: this.flowCount--; break; case OFFlowMod.OFPFC_DELETE: this.flowCount++; break; case OFFlowMod.OFPFC_DELETE_STRICT: this.flowCount++; break; default: break; } break; default: break; }  }else{ return; } break; case FLOW_REMOVED: OFFlowRemoved removedFlow = (OFFlowRemoved) msg; OFFlowMod mod = new OFFlowMod(); mod.setMatch(removedFlow.getMatch()); List <OFFlowMod> flows = mySlicer.allowedFlows(mod); if(flows.size() == 0){ return; }  if(mySlicer.getTagManagement()){ removedFlow.getMatch().setDataLayerVirtualLan((short)0); removedFlow.getMatch().getWildcardObj().wildcard(Wildcards.Flag.DL_VLAN); msg = removedFlow; }  this.flowCount--; break; case BARRIER_REPLY: if(xidMap.containsKey(xid)){ msg.setXid(xidMap.get(xid)); //ISSUE=7276 delete all keys up to and including the barrier, but not any new xids that have come in since the barrier request xidMap.removeToKey(xid); }else{ return; } break; case ECHO_REQUEST: return; default: //not slicing it log.debug(""Not Slicing message of Type: "" + msg.getType()); break; } //we made it this far so send the message try { ofcch.sendMessage(msg); } catch (IOException e) { e.printStackTrace(); } } "	0	0	0	0	0	1
"public void defectsB_actionPerformed(ActionEvent e) { cardLayout1.show(panel, ""DAILYITEMS""); dailyItemsPanel.selectPanel(""DEFECTS""); setCurrentButton(defectsB); Context.put(""CURRENT_PANEL"", ""DEFECTS""); } "	0	0	1	0	1	0
@Override public void update(PlayerBase player, float delta) { stateTime += delta; if (isDead()) { if (!explode) { stateTime = 0; explode = true; float explodePosPaddingX, explodePosPaddingY; if (enemyTookDamage) { explodePosPaddingX = direction == LEFT ? explodePosPaddingXLeft : explodePosPaddingXRight; explodePosPaddingY = this.explodePosPaddingY; playerSound.playBulletHit(); } else { explodePosPaddingX = direction == LEFT ? noDamagePosPaddingXLeft : noDamagePosPaddingXRight; explodePosPaddingY = noDamagePosPaddingY; playerSound.playAttackNoDamage(); } pos.x += explodePosPaddingX; pos.y += explodePosPaddingY; } if (enemyTookDamage) { currentFrame = explodeAnimation.getKeyFrame(stateTime, false); } else { currentFrame = explodeNoDamageAnimation.getKeyFrame(stateTime, false); } if (explodeAnimation.isAnimationFinished(stateTime)) { shouldBeRemoved = true; } } else { if (stateTime <= muzzleToBulletTime) { posPadding = getBulletPositionPadding(player, direction, player.currentFrameIndex()); pos.x = player.mapCollisionBounds.x + posPadding.x; pos.y = player.mapCollisionBounds.y + posPadding.y; mapCollisionBounds.x = pos.x; mapCollisionBounds.y = pos.y; } else { pos.x += vel.x * delta; vel.x = 8 * direction; mapCollisionBounds.x = pos.x; currentFrame = animation.getKeyFrame(stateTime, true); } } if (stateTime <= muzzleTime && !explode) {// && player.state != PlayerState.Idle) { muzzleFrame = muzzleAnimation.getKeyFrame(stateTime, false); if (player.direction != playerStartDirection) { stopUpdatingMuzzlePos = true; } if (!stopUpdatingMuzzlePos) { posPadding = getMuzzlePositionPadding(player, player.currentFrameIndex()); muzzlePos.x = player.mapCollisionBounds.x + posPadding.x; muzzlePos.y = player.mapCollisionBounds.y + posPadding.y; } } else { muzzleFrame = null; } } 	0	0	1	1	0	0
"public final int loadWorkbook(final Workbook wb, final Map<String, Object> dataContext) {  try { clearWorkbook(); // only support xssf workbook now since 2016 July if (!(wb instanceof XSSFWorkbook)) { LOG.fine( ""Web Form loadWorkbook Error: Not supported format. Only support xlsx now.""); return -1; } LOG.info(""Begin load work book...""); parent.setWb(wb); parent.getSerialDataContext().setDataContext(dataContext); parent.setSheetConfigMap( new ConfigurationHandler(parent).buildConfiguration()); parent.reCalcMaxColCounts(); parent.getChartHelper().loadChartsMap(); parent.getPicHelper().loadPicturesMap(); initSheet(); initTabs(); if (!parent.getTabs().isEmpty()) { loadWorkSheet(parent.getTabs().get(0).getTitle()); }  } catch (Exception e) { LOG.log(Level.FINE, ""Web Form loadWorkbook Error Exception = "" + e.getLocalizedMessage(), e); return -1; } return 1;  } "	0	0	1	0	1	0
"@Override public void enterEveryRule(@NotNull final ParserRuleContext ctx) { s.append(multiply("".\t"", indent)); s.append(GroovyParser.ruleNames[ctx.getRuleIndex()] + "": {""); s.append(""\n""); indent = indent++; } "	0	0	0	1	0	0
"@Override public void visitTerminal(@NotNull TerminalNode node) { s.append(multiply("".\t"", indent)); s.append(String.valueOf(node)); s.append(""\n""); } "	0	0	1	1	0	0
"@Override public void reportAmbiguity(@NotNull Parser recognizer, @NotNull DFA dfa, int startIndex, int stopIndex, boolean exact, BitSet ambigAlts, @NotNull ATNConfigSet configs) { log.fine(""Ambiguity at "" + startIndex + "" - "" + stopIndex); } "	0	0	0	0	0	1
"@Test public void testAddInvalidDeadlineDate() {  initTestEnvironment(); addTask();  String currCommand = ""add invalid deadline date by nowhere"";  Success status = commandParser.parseCommand(currCommand);  assertFalse(!status.isSuccess()); } "	0	0	1	0	1	0
"public void handleLine(final String inLine) { String line = inLine.trim();  line = line.replace(S_ENTITY_LT, S_OPEN_ANGLE); line = line.replace(S_ENTITY_GT, S_CLOSE_ANGLE);  if (DEBUG_LOGGING_ASSEMBLY) { logger.debug(""handleLine: '{}'"", line); }  if (S_HASH.equals(previousLine) && line.startsWith(""{method}"")) { if (DEBUG_LOGGING_ASSEMBLY) { logger.debug(""fixup mangled {method} line""); }  line = S_HASH + S_SPACE + line; }  if (line.startsWith(NATIVE_CODE_START)) { if (DEBUG_LOGGING_ASSEMBLY) { logger.debug(""Assembly started""); }  assemblyStarted = true;  if (builder.length() > 0) { complete(); } } else if (assemblyStarted) { boolean couldBeNativeMethodMark = false;  couldBeNativeMethodMark = line.startsWith(NATIVE_CODE_METHOD_MARK);  if (couldBeNativeMethodMark) { if (DEBUG_LOGGING_ASSEMBLY) { logger.debug(""Assembly method started""); }  methodStarted = true;  if (!line.endsWith(S_ENTITY_APOS)) { if (DEBUG_LOGGING_ASSEMBLY) { logger.debug(""Method signature interrupted""); }  methodInterrupted = true; } } else if (methodInterrupted && line.endsWith(S_ENTITY_APOS)) { methodInterrupted = false; }  if (methodStarted && line.length() > 0) { builder.append(line);  if (!methodInterrupted) { builder.append(S_NEWLINE); } } }  previousLine = line; } "	0	0	0	0	1	0
public String toString() { return getStyle(); } 	0	0	0	0	1	0
protected Element createSemanticalProposition(final Document xml, final List<Proposition> flatPropositions, final int targetIndex) { final Proposition target = flatPropositions.get(targetIndex); final Element groupElement = xml.createElementNS(SvgConstants.NAMESPACE_SVG, SvgConstants.TAG_GROUP); // start width calculation including label and spacings left double currentExtentX = this.horizontalSpacing + this.labelWidth; // calculate the horizontal start position if (this.labelWidth > 0) { currentExtentX += this.horizontalSpacing; } final String indentTranslate; if (this.model.isLeftToRightOriented()) { indentTranslate = this.numberToString(currentExtentX); } else { indentTranslate = this.numberToString(-currentExtentX); } final Element indentedContent = xml.createElementNS(SvgConstants.NAMESPACE_SVG, SvgConstants.TAG_GROUP); indentedContent.setAttribute(SvgConstants.ATT_GROUP_TRANSFORM, String.format(SvgConstants.VAL_GROUP_TRANSFORM_TRANSLATE_1, indentTranslate)); // insert clause items including origin text, functions, comments final double originTextExtent = this.insertOriginText(xml, indentedContent, flatPropositions, targetIndex); // insert translation final String translationText = target.getSynTranslation(); double translationTextExtent; if (translationText == null || translationText.isEmpty()) { translationTextExtent = 0; } else { translationTextExtent = this.getTextBounds(translationText, this.labelFontPlain).getWidth(); } final Element translationElement = this.createTranslationElement(xml, translationText, translationTextExtent, this.propositionHeight); if (this.commentsIncluded) { for (final ClauseItem singleItem : target) { if (singleItem.getComment() != null && !singleItem.getComment().isEmpty()) { this.commentCounter++; } } if (target.getComment() != null && !target.getComment().isEmpty()) { // insert proposition comment final Element commentElement = xml.createElementNS(SvgConstants.NAMESPACE_SVG, SvgConstants.TAG_DESCRIPTION); commentElement.setTextContent(target.getComment()); groupElement.appendChild(commentElement); // display numeric identifier this.commentCounter++; final String counterString = ' ' + this.numberToString(this.commentCounter); final RectangularShape counterBounds = this.getTextBounds(counterString, this.commentFont); final Element counterElement = xml.createElementNS(SvgConstants.NAMESPACE_SVG, SvgConstants.TAG_TSPAN); counterElement.setAttribute(SvgConstants.ATT_TEXT_BASELINE_SHIFT, this.numberToString(this.translationHeight - counterBounds.getHeight())); counterElement.setAttribute(SvgConstants.ATT_FONT_SIZE, this.numberToString(this.commentFont.getSize2D())); counterElement.setTextContent(counterString); translationElement.appendChild(counterElement); translationTextExtent += counterBounds.getWidth(); } } indentedContent.appendChild(translationElement); currentExtentX += Math.max(originTextExtent, translationTextExtent) + this.horizontalSpacing; this.propositionExtentX = Math.max(this.propositionExtentX, currentExtentX + this.horizontalSpacing + SvgConstants.BORDER_PROPOSITION); // first insert border (in background) groupElement.appendChild(this.createPropositionBackground(xml, currentExtentX, this.propositionHeight)); // insert label groupElement.appendChild(this.createLabelElement(xml, target.getLabel(), this.labelWidth, this.originTextBaseLine)); // insert origin text, functions, arrows and translation groupElement.appendChild(indentedContent); return groupElement; } 	0	0	0	0	0	1
"public synchronized void removeSubscription() { SilverTrace.info(""webPages"", ""WebPagesSessionController.unsubscribeFromNode()"", ""root.MSG_GEN_ENTER_METHOD""); getSubscribeBm().unsubscribe(new ComponentSubscription(getUserId(), getComponentName())); } "	0	0	0	1	1	0
"public synchronized void addSubscription() { SilverTrace.info(""webPages"", ""WebPagesSessionController.addSubscription()"", ""root.MSG_GEN_ENTER_METHOD""); if (isSubscriber()) { return; } getSubscribeBm().subscribe(new ComponentSubscription(getUserId(), getComponentName())); } "	0	0	1	1	1	0
"@Override public void onError(String errorMessage) { confirmPasswordButton.setEnabled(true); Log.d(""HMB"", errorMessage + "" Login failed!""); } "	0	0	0	0	1	0
private Pair<BigDecimal, BigDecimal> getForecastFromAllocatedActor(PortfolioEntryResourcePlanAllocatedActor allocatedActor, TimesheetMap timesheetMap) {  Long packageId = allocatedActor.portfolioEntryPlanningPackage != null ? allocatedActor.portfolioEntryPlanningPackage.id : null;  BigDecimal engagedHours = new BigDecimal(timesheetMap.consumeByActor(allocatedActor.actor.id, packageId)); BigDecimal engagedDays = engagedHours.divide(TimesheetDao.getTimesheetReportHoursPerDay(), BigDecimal.ROUND_HALF_UP);  BigDecimal costToCompleteDays = allocatedActor.forecastDays.subtract(engagedDays); if (costToCompleteDays.compareTo(BigDecimal.ZERO) < 0) { costToCompleteDays = BigDecimal.ZERO; }  BigDecimal engagedAmount = allocatedActor.dailyRate.multiply(engagedDays); BigDecimal costToCompleteAmount = allocatedActor.dailyRate.multiply(costToCompleteDays);  return Pair.of(costToCompleteAmount, engagedAmount); } 	0	0	0	0	1	0
"@NonNull protected Habit getHabitFromWidgetId(int widgetId) { long habitId = widgetPrefs.getHabitIdFromWidgetId(widgetId); Habit habit = habits.getById(habitId); if (habit == null) throw new RuntimeException(""habit not found""); return habit; } "	0	0	0	0	1	0
"@Override public Package getPackage(String name) { if (""default"".equals(name)) { name = """"; } Package p = getDirectPackage(name); if (p != null) { return p; } for (ModuleImport imp : getImports()) { final Module mod = imp.getModule(); p = mod.getDirectPackage(name); if (p != null) { return p; } for (ModuleImport im2 : mod.getImports()) { if (im2.isExport()) { p = im2.getModule().getDirectPackage(name); } if (p != null) { return p; } } } return null; } "	1	0	1	0	1	0
@Before public void setUp() throws FileNotFoundException { writerClient = DatabaseClientFactory.newClient(host, port, user, password, DatabaseClientFactory.Authentication.DIGEST); } 	0	0	0	0	1	0
public boolean hasTableVersion() { return ((bitField0_ & 0x00000002) == 0x00000002); } 	0	0	1	1	1	0
"@Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { Point userPosition = null; if (requestCode == RC_BARCODE_CAPTURE) { if (resultCode == CommonStatusCodes.SUCCESS) { if (data != null) { Barcode barcode = data.getParcelableExtra(BarcodeCaptureActivity.BarcodeObject); Log.d(TAG, ""Barcode read: "" + barcode.displayValue); } else { Log.d(TAG, ""No barcode captured, intent data is null""); } } else { Log.d(TAG, ""No barcode captured, result not success""); } } roomView.updateUserPosition(userPosition); } "	0	0	0	0	1	0
public static synchronized boolean putItemsToShopChest(Sign sign, ItemStack shopItem, int totalItems) { Block tryChest = sign.getLocation().getBlock().getRelative(BlockFace.DOWN);  if(!tryChest.getType().equals(Material.CHEST)) return false;  Chest chest = (Chest) tryChest.getState(); Inventory inv = chest.getInventory(); int remainingItems = totalItems; for(int slot = 0; slot < inv.getSize(); slot++) { if(remainingItems <= 0) break; if(inv.getItem(slot) == null || inv.getItem(slot).getType().equals(Material.AIR)) { //Podemos depositar un item completo ItemStack putItem = new ItemStack(shopItem); int putAmount = (remainingItems > shopItem.getMaxStackSize()) ? shopItem.getMaxStackSize() : remainingItems; putItem.setAmount(putAmount); inv.setItem(slot, putItem); remainingItems -= putAmount; } else if(inv.getItem(slot).getType().equals(shopItem.getType())) { //¿Hay espacio disponible? ItemStack slotItem = inv.getItem(slot); int getStackFreeSpace = slotItem.getMaxStackSize() - slotItem.getAmount();  if(getStackFreeSpace > 0) { ItemStack putItem = new ItemStack(shopItem); putItem.setAmount(slotItem.getAmount() + ((getStackFreeSpace > remainingItems) ? remainingItems : getStackFreeSpace)); inv.setItem(slot, putItem); remainingItems -= getStackFreeSpace; } } }  return true; } 	0	0	0	0	0	1
"private boolean goToLeftmostChild( PageCursor cursor ) throws IOException { boolean isInternal; long leftmostSibling = -1; do { isInternal = node.isInternal( cursor ); if ( isInternal ) { leftmostSibling = mainContent.childAt( cursor, 0, stableGeneration, unstableGeneration ); } } while ( cursor.shouldRetry() );  if ( isInternal ) { node.goTo( cursor, ""child"", leftmostSibling ); } return isInternal; } "	0	0	0	0	1	0
"@Action(value = ""auth"", results = { @Result(name = ""success"", type = ""redirectAction"", location = ""home""), @Result(name = ""login"", location = ""/WEB-INF/views/admin/login.jsp"") }) public String Authenticate() { if (username == null || password == null) { return LOGIN; }  User admin = userService.loadByNameAndPwd(username, password); if (admin == null || admin.getIsAdmin() == UserConst.IS_NOT_ADMIN) { addActionError(Message.USER_OR_PASSWORD_WRONG); return LOGIN; }  Map<String, Object> session = ServletActionContext.getContext().getSession(); session.put(""admin"", admin); return SUCCESS; } "	1	1	1	1	1	0
"protected boolean isComplete( String query ) { return query.endsWith( "";"" ); } "	0	0	0	0	0	1
"protected Map<String,Object> getParameters( Session session ) throws ShellException { try { NodeOrRelationship self = getCurrent( session ); session.set( ""self"", self.isNode() ? self.asNode() : self.asRelationship() ); } catch ( ShellException e ) { // OK, current didn't exist } return session.asMap(); } "	0	0	0	0	0	1
"public Appointment[] getNextAppointments() { SQLiteDatabase db = this.getWritableDatabase(); Date now = getToday(); Date start = now; Date end = parseDate(formatDate(now, ""ddMMyyyy""), ""ddMMyyyy""); end = addHours(end, 23); end = addMinutes(end, 59);   Integer startdateInt = parseInt(formatDate(start, ""1MMddHHmm"")); Integer enddateInt = parseInt(formatDate(end, ""1MMddHHmm"")); String Query = ""SELECT * FROM "" + TABLE_CALENDAR + "" WHERE "" + KEY_FORMATTED_START_2 + "" <= "" + enddateInt + "" AND "" + KEY_FORMATTED_END_2 + "" >= "" + startdateInt; Log.d(TAG, ""getNextAppointments: Query: "" + Query); Cursor cursor = db.rawQuery(Query, null);  Appointment[] results = new Appointment[cursor.getCount()]; int i = 0; if (cursor != null) { if (cursor.moveToFirst()) { do { Appointment appointment = new Appointment(); appointment.id = cursor.getInt(cursor.getColumnIndex(KEY_CALENDAR_ID)); appointment.startDate = DateUtils.parseDate(cursor.getString(cursor.getColumnIndex(KEY_FORMATTED_START_2)), ""1MMddHHmm""); appointment.description = cursor.getString(cursor.getColumnIndex(KEY_DESC)); appointment.type = AppointmentType.getTypeById(cursor.getInt(cursor.getColumnIndex(KEY_TYPE))); appointment.location = cursor.getString(cursor.getColumnIndex(KEY_LOCATION)); appointment.periodFrom = cursor.getInt(cursor.getColumnIndex(KEY_PERIOD_FROM));  results[i] = appointment; i++; } while (cursor.moveToNext()); } } cursor.close();  return results; } "	0	0	0	0	1	0
public static <A> Show<V6<A>> v6Show(final Show<A> ea) { return streamShow(ea).comap(V6.<A>toStream_()); } 	0	0	1	1	1	0
public static <A> Show<V3<A>> v3Show(final Show<A> ea) { return streamShow(ea).comap(V3.<A>toStream_()); } 	0	0	1	1	1	0
"public static <A> Show<Stream<A>> streamShow(final Show<A> sa) { return show(as -> join(as.map(sa.show_()).intersperse(fromString("","")).cons(fromString(""<"")).snoc(p(fromString("">""))))); } "	0	0	0	0	1	0
public static <E, L extends HList<L>> Show<HList.HCons<E, L>> HListShow(final Show<E> e, final Show<L> l) { return show(c -> e.show(c.head()).cons('[').append(l.show(c.tail())).snoc(']')); } 	0	0	0	0	1	0
public void makeMapSelectedSourceAndTarget(){  for( LabeledRectangle source : getSelectedRectangles(sourceComponents)){ for(LabeledRectangle target :  getSelectedRectangles(targetComponents)){ makeMapSourceToTarget(source,target); } }  } 	0	0	0	0	1	0
public void setTargetDatabase(Database targetDb) { this.targetDb = targetDb; } 	0	0	0	0	1	0
public void removeSourceToTargetMap(MappableItem sourceItem, MappableItem targetItem) { Iterator<ItemToItemMap> iterator = sourceToTargetMaps.iterator(); while (iterator.hasNext()) { ItemToItemMap sourceToTargetMap = iterator.next(); if (sourceToTargetMap.getSourceItem().equals(sourceItem) && sourceToTargetMap.getTargetItem().equals(targetItem)) iterator.remove(); } } 	0	0	0	0	1	0
public boolean equals(Object other) { if (other instanceof ItemToItemMap) { return (((ItemToItemMap) other).sourceItem.equals(sourceItem) && ((ItemToItemMap) other).targetItem.equals(targetItem)); } else return false; } 	0	0	0	0	1	0
"@Test(expectedExceptions = { JobPersistenceException.class }) public void testStoreTriggerWithoutJob() throws ObjectAlreadyExistsException, JobPersistenceException {  OperableTrigger trigger1 = (OperableTrigger) TriggerBuilder.newTrigger().withIdentity(""tKey1"", ""group"").build(); jobStore.storeTrigger(trigger1, false); } "	0	0	1	0	1	0
public void retrySend() { isSendingInError.onNext(false); } 	0	0	0	0	1	0
public void close() { this.mappingFileWriter.close(); } 	0	0	0	0	1	0
"private TweetsAndRetweets getTweetSum(Statement stmt, boolean byDate) {  String a = ""SELECT SUM(Counter), Day FROM tweets JOIN final ON tweets.AccountId=final.val JOIN day ON tweets.DayId=Day.Id GROUP BY DayId;""; String b = ""SELECT SUM(Counter) FROM tweets JOIN final ON tweets.AccountId=final.val;"";  ResultSet res = null; runningRequest = true; try { stmt.executeBatch(); res = stmt.executeQuery(byDate ? a : b); } catch (SQLException e) { sqlExceptionLog(e, stmt); } finally { runningRequest = false; }  List<Tweets> tweets = new ArrayList<Tweets>(); if (res != null) { try { while (res.next()) { tweets.add(new Tweets((byDate ? res.getDate(""Day"") : null), res.getInt(1))); } } catch (SQLException e) { sqlExceptionResultLog(e); } finally { closeResult(res); } }  TweetsAndRetweets ret = new TweetsAndRetweets(); ret.tweets = tweets; ret.retweets = getRetweetSum(stmt, byDate);  return ret; } "	0	0	1	1	1	0
"private boolean processBiopsyRow(Row thisRow, Occurrence occ, Shepherd myShepherd, ArrayList<String> columnMasterList) { String sampleId = null; // The name sampleID is kinda deceptive for internal wildbook purposes. This ID is only unique for successful biopsy attempts.. // Unsuccessful biopsys are still recorded as a TissueSample object, as requested. It belongs in the STATE column of the sample. TissueSample ts = null; try { if (occ != null) { try { ts = new TissueSample("""", sampleId ); // And load it up. try { if (!myShepherd.getPM().currentTransaction().isActive()) { myShepherd.beginDBTransaction(); }  String permit = null; String sex = null; String sampleID = null;  // These fields are the anchors for the tissue sample. Minimum data needed for an entry. columnMasterList.remove(""Permit""); if (thisRow.get(""Permit"") != null) { permit = thisRow.getString(""Permit"").toString(); ts.setPermit(permit); } columnMasterList.remove(""Sample_ID""); if (thisRow.get(""Sample_ID"") != null) { sampleID = thisRow.get(""Sample_ID"").toString();  if (sampleID.toLowerCase().contains(""miss"")) { ts.setState(""Miss""); } if (sampleID.toLowerCase().contains(""hit no sample"")) { ts.setState(""Hit - No Sample""); } else { ts.setState(""Sampled""); } }  // This should grab physical and satellite tags. Separated for clarity. processTags(thisRow, myShepherd, occ); columnMasterList.remove(""DTAG_ID""); columnMasterList.remove(""SatTag_ID"");  // This does exactly what it sounds like it does. processRemainingColumnsAsObservations(ts, columnMasterList, thisRow);  if (thisRow.get(""Conf_sex"") != null) { // One of the fields will be a SexAnalysis/BiologicalMeasurement stored on the tissue sample. sex = thisRow.getString(""Conf_sex"").toString(); SexAnalysis sexAnalysis = new SexAnalysis(Util.generateUUID(), sex,occ.getPrimaryKeyID(),sampleID); myShepherd.getPM().makePersistent(sexAnalysis); myShepherd.commitDBTransaction(); myShepherd.beginDBTransaction(); ts.addGeneticAnalysis(sexAnalysis); } myShepherd.getPM().makePersistent(ts); myShepherd.commitDBTransaction(); myShepherd.beginDBTransaction(); occ.addBaseTissueSample(ts); columnMasterList.remove(""Conf_sex""); } catch (Exception e) { e.printStackTrace(); out.println(""\n Failed to save created tissue sample to occurrence.""); }  myShepherd.commitDBTransaction(); System.out.println(""Created a Tissue Sample for Occ""+occ.getPrimaryKeyID()); return true; } catch (Exception e) { e.printStackTrace(); out.println(""\nFailed to make the tissue sample.""); } } } catch (Exception e) { out.println(""\nFailed to validate Occ ID : ""+occ.getPrimaryKeyID()+"" and sampleID : ""+sampleId+"" for TissueSample creation."");  }  occ.getBaseTissueSampleArrayList().toString(); return false; } "	0	0	0	0	1	0
"protected void prepareFacesGeometry(List<Geometry> result, MeshHelper meshHelper) { LOGGER.fine(""Preparing faces geometries.""); this.triangulate();  Vector3f[] tempVerts = new Vector3f[3]; Vector3f[] tempNormals = new Vector3f[3]; byte[][] tempVertColors = new byte[3][]; List<Map<Float, Integer>> boneBuffers = new ArrayList<Map<Float, Integer>>(3);  LOGGER.log(Level.FINE, ""Appending {0} faces to mesh buffers."", faces.size()); Map<Integer, MeshBuffers> faceMeshes = new HashMap<Integer, MeshBuffers>(); for (Face face : faces) { MeshBuffers meshBuffers = faceMeshes.get(face.getMaterialNumber()); if (meshBuffers == null) { meshBuffers = new MeshBuffers(face.getMaterialNumber()); faceMeshes.put(face.getMaterialNumber(), meshBuffers); }  List<List<Integer>> triangulatedIndexes = face.getCurrentIndexes(); List<byte[]> vertexColors = face.getVertexColors();  for (List<Integer> indexes : triangulatedIndexes) { assert indexes.size() == 3 : ""The mesh has not been properly triangulated!""; boneBuffers.clear(); for (int i = 0; i < 3; ++i) { int vertIndex = indexes.get(i); tempVerts[i] = vertices.get(vertIndex); tempNormals[i] = normals.get(vertIndex); tempVertColors[i] = vertexColors != null ? vertexColors.get(i) : null;  if (boneIndexes.size() > 0) { Map<Float, Integer> boneBuffersForVertex = new HashMap<Float, Integer>(); Map<String, Float> vertexGroupsForVertex = vertexGroups.get(vertIndex); for (Entry<String, Integer> entry : boneIndexes.entrySet()) { if (vertexGroupsForVertex.containsKey(entry.getKey())) { boneBuffersForVertex.put(vertexGroupsForVertex.get(entry.getKey()), entry.getValue()); } } boneBuffers.add(boneBuffersForVertex); } }  Map<String, List<Vector2f>> uvs = meshHelper.selectUVSubset(face, indexes.toArray(new Integer[indexes.size()])); meshBuffers.append(face.isSmooth(), tempVerts, tempNormals, uvs, tempVertColors, boneBuffers); } }  LOGGER.fine(""Converting mesh buffers to geometries.""); Map<Geometry, MeshBuffers> geometryToBuffersMap = new HashMap<Geometry, MeshBuffers>(); for (Entry<Integer, MeshBuffers> entry : faceMeshes.entrySet()) { MeshBuffers meshBuffers = entry.getValue();  Mesh mesh = new Mesh();  if (meshBuffers.isShortIndexBuffer()) { mesh.setBuffer(Type.Index, 1, (ShortBuffer) meshBuffers.getIndexBuffer()); } else { mesh.setBuffer(Type.Index, 1, (IntBuffer) meshBuffers.getIndexBuffer()); } mesh.setBuffer(meshBuffers.getPositionsBuffer()); mesh.setBuffer(meshBuffers.getNormalsBuffer()); if (meshBuffers.areVertexColorsUsed()) { mesh.setBuffer(Type.Color, 4, meshBuffers.getVertexColorsBuffer()); mesh.getBuffer(Type.Color).setNormalized(true); }  BoneBuffersData boneBuffersData = meshBuffers.getBoneBuffers(); if (boneBuffersData != null) { mesh.setMaxNumWeights(boneBuffersData.maximumWeightsPerVertex); mesh.setBuffer(boneBuffersData.verticesWeights); mesh.setBuffer(boneBuffersData.verticesWeightsIndices);  LOGGER.fine(""Generating bind pose and normal buffers.""); mesh.generateBindPose(true);  // change the usage type of vertex and normal buffers from Static to Stream mesh.getBuffer(Type.Position).setUsage(Usage.Stream); mesh.getBuffer(Type.Normal).setUsage(Usage.Stream);  // creating empty buffers for HW skinning; the buffers will be setup if ever used VertexBuffer verticesWeightsHW = new VertexBuffer(Type.HWBoneWeight); VertexBuffer verticesWeightsIndicesHW = new VertexBuffer(Type.HWBoneIndex); mesh.setBuffer(verticesWeightsHW); mesh.setBuffer(verticesWeightsIndicesHW); }  Geometry geometry = new Geometry(name + (result.size() + 1), mesh); if (properties != null && properties.getValue() != null) { meshHelper.applyProperties(geometry, properties); } result.add(geometry);  geometryToBuffersMap.put(geometry, meshBuffers); }  LOGGER.fine(""Applying materials to geometries.""); for (Entry<Geometry, MeshBuffers> entry : geometryToBuffersMap.entrySet()) { int materialIndex = entry.getValue().getMaterialIndex(); Geometry geometry = entry.getKey(); if (materialIndex >= 0 && materials != null && materials.length > materialIndex && materials[materialIndex] != null) { materials[materialIndex].applyMaterial(geometry, meshStructure.getOldMemoryAddress(), entry.getValue().getUvCoords(), blenderContext); } else { geometry.setMaterial(blenderContext.getDefaultMaterial()); } } } "	0	0	0	0	0	1
"private byte[] computeGzippedContent(final String content) { LOG.debug(""Gzipping the content....""); try { final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final OutputStream os = new GZIPOutputStream(new BufferedOutputStream(baos)); IOUtils.copy(new ByteArrayInputStream(content.getBytes()), os); os.close(); return baos.toByteArray(); } catch (final IOException e) { throw new WroRuntimeException(""Problem while computing gzipped content"", e).logError(); } }; "	0	0	0	0	1	0
"@Test(expected = NotFound.class) public void test09DeleteResources() throws Exception { // should allow deleting resources String public_id = ""api_,test3""; cloudinary.uploader().upload(SRC_TEST_IMAGE, ObjectUtils.asMap(""public_id"", public_id, ""tags"", UPLOAD_TAGS)); Map resource = api.resource(public_id, ObjectUtils.emptyMap()); assertNotNull(resource); api.deleteResources(Arrays.asList(API_TEST_2, public_id), ObjectUtils.emptyMap()); api.resource(public_id, ObjectUtils.emptyMap()); } "	0	0	0	0	1	0
"@Test public void testReplyTimeoutIsSet() throws Exception { setUp(""JdbcOutboundGatewayWithPollerTest-context.xml"", getClass());  PollingConsumer outboundGateway = this.context.getBean(""jdbcOutboundGateway"", PollingConsumer.class);  DirectFieldAccessor accessor = new DirectFieldAccessor(outboundGateway); Object source = accessor.getPropertyValue(""handler""); accessor = new DirectFieldAccessor(source); source = accessor.getPropertyValue(""messagingTemplate"");  MessagingTemplate messagingTemplate = (MessagingTemplate) source;  accessor = new DirectFieldAccessor(messagingTemplate);  Long  sendTimeout = (Long) accessor.getPropertyValue(""sendTimeout""); assertEquals(""Wrong sendTimeout"", Long.valueOf(444L),  sendTimeout);  } "	0	0	1	0	0	0
"public List<String> splitPath() {  List<String> fragments = new LinkedList<String>(); while (!isEmpty()) { skip(' '); char current = peek();  switch (current) { case '$': fragments.add(Character.toString(current)); poll(); break;  case '.': poll(); if (peek() == '.') { poll(); fragments.add("".."");  assertNotInvalidPeek('.'); } break;  case '[': fragments.add(extract(true, ']')); break;  default: fragments.add(extract(false, '[', '.'));  } } return fragments; } "	1	0	1	1	1	0
"public String execute(ICS ics) { bind(ics); if (ics.GetErrno() != 0) { ics.ClearErrno(); } preExecute(ics);  if (LOG.isTraceEnabled()) { StringBuffer sb = new StringBuffer(""About to execute runTag for tag: "" + tagName + "".  ""); sb.append(""\nInput param list:""); for (Object k : list.keySet()) { String key = (String) k; sb.append(""\n\t"").append(key).append(""="") .append(isPW(key) ? ""<password suppressed>"" : list.getValString(key)); } sb.append(""\nVariables:""); Enumeration<?> e = ics.GetVars(); while (e.hasMoreElements()) { String key = (String) e.nextElement(); sb.append(""\n\t"").append(key).append(""="").append(isPW(key) ? ""<password suppressed>"" : ics.GetVar(key)); } sb.append(""\nSession Variables:""); e = ics.GetSSVars(); while (e.hasMoreElements()) { String key = (String) e.nextElement(); sb.append(""\n\t"").append(key).append(""="") .append(isPW(key) ? ""<password suppressed>"" : ics.GetSSVar(key)); } LOG.trace(sb.toString()); } String s = ics.runTag(tagName, list); if (LOG.isTraceEnabled()) { StringBuffer sb = new StringBuffer(""Just completed execution of runTag for tag: "" + tagName + "".  ""); sb.append(""\nInput param list:""); for (Object k : list.keySet()) { String key = (String) k; sb.append(""\n\t"").append(key).append(""="") .append(isPW(key) ? ""<password suppressed>"" : list.getValString(key)); } sb.append(""\nVariables:""); Enumeration<?> e = ics.GetVars(); while (e.hasMoreElements()) { String key = (String) e.nextElement(); sb.append(""\n\t"").append(key).append(""="").append(isPW(key) ? ""<password suppressed>"" : ics.GetVar(key)); } sb.append(""\nSession Variables:""); e = ics.GetSSVars(); while (e.hasMoreElements()) { String key = (String) e.nextElement(); sb.append(""\n\t"").append(key).append(""="") .append(isPW(key) ? ""<password suppressed>"" : ics.GetSSVar(key)); } LOG.trace(sb.toString()); } postExecute(ics); if (ics.GetErrno() < 0) { this.handleError(ics); } return s; } "	0	0	0	0	0	1
"private void onRetry(Throwable ex, final int retryTimes, final long soFarBytes) { if (FileDownloadLog.NEED_LOG) { FileDownloadLog.d(this, ""On retry %d %s %d %d"", getId(), ex, retryTimes, autoRetryTimes); }  ex = exFiltrate(ex); helper.updateRetry(getId(), ex.getMessage(), retryTimes, soFarBytes);  transferModel.setThrowable(ex); transferModel.setRetryingTimes(retryTimes);  onStatusChanged(model.getStatus()); } "	1	0	1	0	1	0
private void gatherGems(ItemStack itemStack,EntityPlayer player) { if (itemStack==null || !(itemStack.getItem() instanceof ItemGemBag)) { return; }  ItemStack[] bagInventory = ItemGemBag.getStacksFromNBT(itemStack); boolean didChange = false;  for (int i=0;i<player.inventory.getSizeInventory();i++) { if (i == player.inventory.currentItem) { continue; }  ItemStack inventory = player.inventory.getStackInSlot(i); if (inventory!=null && inventory.getItem()== ModItems.gem && inventory.stackSize>0 && inventory.getItemDamage()<32) { int variant = inventory.getItemDamage(); ItemStack stackAt = bagInventory[variant]; if (stackAt==null) { bagInventory[variant] = inventory.copy(); player.inventory.setInventorySlotContents(i,null); didChange = true; } else { int stackInBagSize = stackAt.stackSize; int stackSize = inventory.stackSize; int spare = 64 - stackInBagSize; int pass = Math.min(spare,stackSize); if (pass>0) { stackAt.stackSize += pass; inventory.stackSize -= pass; if (inventory.stackSize == 0) { player.inventory.setInventorySlotContents(i,null); } didChange = true; } } } }  if (didChange) { ItemGemBag.setStackNBT(itemStack,bagInventory); } } 	0	0	0	0	1	0
"private static boolean isWindows() { return System.getProperty(""os.name"").contains(""win""); } "	0	0	1	0	1	0
"static List<Item> findAll(Handle hdl, QueryParamsMap params) { String queryString = SELECT + ""where in_archive='1' order by name limit ? offset ?""; int limit = Backrest.limitFromParam(params); int offset = Backrest.offsetFromParam(params); return hdl.createQuery(queryString) .bind(0, limit).bind(1, offset) .map(new ItemMapper(hdl, null)).list(); } "	0	0	0	0	1	0
"private CodeBlock.Builder staticBlockBuilder() { return CodeBlock.builder().add(""SmartRouters.register(REGISTER_INSTANCE)""); } "	0	0	0	0	1	0
"private MethodSpec.Builder constructorBuilder() { return MethodSpec.constructorBuilder() .addParameter( this.createNonNullParameter( TypeName.get(String.class), ""host"", Modifier.FINAL ) ) .addCode(""super(host)""); } "	0	0	1	0	0	0
"public boolean usernameAvailable(String userName) { boolean available = false;  try (Connection conn = db.getDBConnection(); Statement stm = conn.createStatement(); ResultSet rs = stm.executeQuery(""select * from registered_users where username='"" + userName + ""'"");) { System.out.println(""connected to db"");  if (rs.next()) { available = false; accountType = rs.getString(""account_type""); } else { available = true; }  } catch (SQLException ex) { ex.printStackTrace(); } return available; } "	0	0	0	0	0	1
@Override protected void initialize() { Robot.instance.climber.lockServo.setAngle(ClimberConfig.lockServoLockPosition); } 	0	0	1	0	1	0
"public void testNewUser() throws AlreadyExistsException{ UserListController usrc = new UserListController(); usrc.addUser(""user1""); //assertTrue(""Userlist not containing corrent number of users"", usrc.contains(""user1"")); assertTrue(""wrong number"", UserListController.getUserList().size() > 0); assertTrue(""not correct user"", UserListController.getUserList().contains(""user1"")); } "	0	0	0	0	1	0
"public void login() { try { HttpResponse<JsonNode> response = Unirest .post(Config.getInstance().getApiUrl() + ""/user/token/"") .header(""accept"", ""*/*"") .queryString(""username"", username) .field(""password"", password) .asJson(); JSONObject body = response.getBody().getObject();  if (body.optInt(""code"", -1) == 200) { jwtToken = body.getString(""message""); } else { log.warn(""Login failed.""); } } catch (UnirestException e) { log.warn(""Login error: "" + e.getMessage()); } } "	0	0	0	0	0	1
"private void setStatus(Household household, Member member, ArrayList<String> row) { if(household.getSelectedMemberId() == null || household.getSelectedMemberId().equals("""") || household.getSelectedMemberId().equals(String.valueOf(member.getId()))) row.add(household.getStatus().toString()); else { row.add(SURVEY_NOT_SELECTED); } } "	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") @Override public List<EvaluatedResource> getAll() { return getSession().createQuery(""SELECT e FROM EvaluatedResource e"").list(); } "	0	0	0	0	1	0
public Retriever preserveQueryStateAndGet() { final String orderByString = orderBy == null ? null : orderBy.getOrderByString(); final FSSelection selection = finder == null ? new FSSelection.SelectAll() : finder.selection(); final FSQueryable<U, R> queryable = infoFactory.createQueryable(lookupResource); if (!addedThisProjection) { projections.add(finder == null ? projection() : finder.projection()); addedThisProjection = true; } return joins.size() == 0 ? queryable.query(projection(), selection, orderByString) : queryable.query(joins, projections, selection, orderByString); } 	1	0	0	0	0	0
"@Override public String processOnSecondParagraph(String paragraph) { paragraph = paragraph.trim().replace("" "", """"); // int lastIndex = paragraph.lastIndexOf(""\n""); int lastIndex = paragraph.indexOf(""****""); if (lastIndex < 1) return """"; return paragraph.substring(0, lastIndex); } "	1	0	1	0	1	0
"private void parseIntList(List<Integer> array, FeatureTreeNode parent) throws FeaturesTreeNodeException { for (int i = 0; i < array.size(); ++i) { FeatureTreeNode element = FeatureTreeNode.newChildInstance(""element"", parent); element.addAttribute(""number"", String.valueOf(i)); element.addAttribute(""value"", String.valueOf(array.get(i))); } } "	0	0	0	0	0	1
@Override public boolean isStartsWithX() { return AngularCorePreferencesSupport.getInstance() .isDirectiveStartsWithX(project); } 	0	0	1	0	0	0
@Override public void notifyItemChanged(QNetwork network) { if (items.contains(itemMap.get(network))) items.notifyItemChanged(items.indexOf(itemMap.get(network))); } 	1	1	1	0	1	0
"public void setWebRoot(final WebRootDef def, boolean write) { logger.info("" Loaded WebRootDef = {}"", def.dump()); if (write) { // store in state machine as a StorageItem putItem(TETRAPOD_WEBROOT_PREFIX + def.name, (byte[]) def.toRawForm(TempBufferDataSource.forWriting())); } webRootDefs.put(def.name, def); if (def.file != null) { Util.runThread(""Installing WebRoot"" + def.name, new Runnable() { public void run() { install(def); } }); } } "	0	0	0	0	0	1
public static TagInfoDBHelper instance(Context context) { return new TagInfoDBHelper(context, DATABASE_NAME, null, DATABASE_VERSION); } 	1	0	1	1	1	0
public static PeriodDBHelper instance(Context context){ return new PeriodDBHelper(context,DATABASE_NAME,null,DATABASE_VERSION); } 	1	0	1	1	1	0
"@SuppressWarnings(""unchecked"") protected QB copyQuery(QB query) throws IOException { try (BytesStreamOutput output = new BytesStreamOutput()) { output.writeNamedWriteable(query); try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), serviceHolder.namedWriteableRegistry)) { return (QB) in.readNamedWriteable(QueryBuilder.class); } } } "	0	0	0	0	0	1
"private synchronized void flush() throws MarkLogicSesameException { log.debug(""flushing write cache""); ByteArrayOutputStream out = new ByteArrayOutputStream(); RDFFormat format = RDFFormat.NQUADS; try { Rio.write(cache, out, format); InputStream in = new ByteArrayInputStream(out.toByteArray()); Resource[] contexts = new Resource[cache.contexts().size()]; int i =0; for(Resource ctx:cache.contexts()){ contexts[i]= ctx; i++; } client.sendAdd(in, null, format, contexts); } catch (RDFHandlerException e) { e.printStackTrace(); } catch (RDFParseException e) { e.printStackTrace(); } lastCacheAccess = new Date(); cache.clear(); } "	0	0	1	1	0	0
"@RequestMapping(""/addUserToProject.htm"") public ModelAndView addUser(HttpSession session, @RequestParam String email) { int projectId = 0; boolean hasUpdateRight = false; try { checkInvalidSession(session); Project currentProject = this.loadCurrentProject(session); hasUpdateRight = testRight(session, Right.Update_Project); projectId = currentProject.getProjectID(); testRight(session, Right.Invite_To_Project); User user = userDAO.getUserByEmail(email); currentProject.addProjectUser(user); projectDAO.updateProject(currentProject); user.addProject(currentProject); userDAO.updateUser(user); return new ModelAndView(""redirect:projectSettings.htm?id="" + projectId); } catch (NoSuchUserException e) { return new ModelAndView(""redirect:projectSettings.htm?id="" + projectId + ""&error=1""); } catch (NoProjectFoundException | InsufficientRightsException e) { if(hasUpdateRight) { return new ModelAndView(""redirect:projectSettings.htm?id="" + projectId); } return new ModelAndView(""redirect:projectOverview.htm""); } catch (InvalidSessionException e) { return new ModelAndView(""redirect:login.htm""); } } "	0	0	1	1	1	0
"private void setupGui () { setIconImage(Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""/image/logo_ftb.png""))); setTitle(I18N.getLocaleString(""PROFILEADDER_TITLE"")); setResizable(true);  Container panel = getContentPane(); MigLayout layout = new MigLayout(); panel.setLayout(layout);  usernameLbl = new JLabel(I18N.getLocaleString(""PROFILEADDER_USERNAME"")); username = new JTextField(16); passwordLbl = new JLabel(I18N.getLocaleString(""PROFILEADDER_PASSWORD"")); password = new JPasswordField(16); nameLbl = new JLabel(I18N.getLocaleString(""PROFILEADDER_NAME"")); name = new JTextField(16); add = new JButton(I18N.getLocaleString(""MAIN_ADD""));  usernameLbl.setLabelFor(username); passwordLbl.setLabelFor(password); nameLbl.setLabelFor(name);  if (!updatecreds.equals("""")) { messageLbl = new JLabel(updatecreds); panel.add(messageLbl); } panel.add(usernameLbl); panel.add(username, GuiConstants.WRAP); panel.add(passwordLbl); panel.add(password, GuiConstants.WRAP); panel.add(add, ""center, wrap, span"");  pack(); setLocationRelativeTo(getOwner()); } "	0	0	0	0	1	0
"public PagedList<Album> getAlbums(String userId, PagingParameters pagedListParameters) { return graphApi.fetchConnections(userId, ""albums"", Album.class, getPagingParameters(pagedListParameters)); } "	0	0	0	0	1	0
public void setUrl(String url) { this.url = url; } 	0	0	0	0	1	0
"@Test public void testExporterMBeanRegistration() throws Exception { // System.err.println(server.queryNames(new ObjectName(""*:type=*MBeanExporter,*""), null)); // System.err.println(Arrays.asList(server.getMBeanInfo(server.queryNames(new ObjectName(""*:type=*Handler,*""), null).iterator().next()).getAttributes())); Set<ObjectName> names = server.queryNames(new ObjectName(""test.MBeanRegistration:type=IntegrationMBeanExporter,name=integrationMbeanExporter,*""), null); assertEquals(1, names.size()); names = server.queryNames(new ObjectName(""test.MBeanRegistration:*,name=testGateway""), null); assertEquals(server.toString(), 1, names.size()); } "	0	0	0	0	1	0
private void writeStringToParcel(Parcel p, String s) { p.writeByte((byte)(s != null ? 1 : 0)); p.writeString(s); } 	1	0	0	0	1	0
"public static String evaluate(ArrayList<Criteria> criteria, Map<String, String> prefixes) throws ParseException {  StringBuilder query = new StringBuilder();  /** * Adding the prefixes to the SPARQL query (format: PREFIX Label: <IRI>) */ for (String key : prefixes.keySet()) { query .append(""PREFIX "") .append(key) .append("": <"") .append(prefixes.get(key)) .append(""> ""); }  // For readability: Adding an empty line between the prefix and the statement part query .append(""SELECT ?annotation "") .append(""WHERE {"") .append(""?annotation a oa:Annotation ."");  SesameValueBackend backend = new SesameValueBackend();  // Creating the actual statements for (Criteria c : criteria) {  query.append(""{ "");  LdPathParser parser = new LdPathParser(backend, new StringReader(c.getLdpath()));  String variableName = LDPathEvaluator.evaluate(parser.parseSelector(prefixes), query, ""annotation"");  if (c.getConstraint() != null) { EvalComparison.evaluate(query, c, variableName); }  query.append(""}""); }  query.append(""}"");  return query.toString(); } "	0	0	1	0	0	0
"public void stop() { Thread threadToStop; synchronized (this) { threadToStop = thread; thread = null; } if (threadToStop == null) { throw new IllegalStateException(""not running""); } threadToStop.interrupt(); while (true) { try { threadToStop.join(); return; } catch (InterruptedException ignored) { } } } "	1	0	1	0	1	0
"public void saturationREd_changed() { flameTextFieldChanged(data.saturationSlider, data.saturationREd, ""saturation"", TinaController.SLIDER_SCALE_BRIGHTNESS_CONTRAST_VIBRANCY, true); } "	0	0	1	1	1	0
"public void gammaREd_changed() { flameTextFieldChanged(data.gammaSlider, data.gammaREd, ""gamma"", TinaController.SLIDER_SCALE_GAMMA, true); } "	0	0	1	1	1	0
"@Test public void testCreateAccountFromExcelFile() throws Exception {  ClassLoader classloader = Thread.currentThread().getContextClassLoader(); InputStream file = classloader.getResourceAsStream(""excel/listStudents.xls""); ArrayList<AccountDto> createAccountFromExcelFile = excelReader.createAccountFromExcelFile(file);  System.out.println(createAccountFromExcelFile);  assertThat(createAccountFromExcelFile).isNotNull();   } "	0	0	0	0	1	0
@Override public void run() { selfRef.supportFinishAfterTransition(); } 	0	0	0	0	0	1
Observable<Row> findRelationshipInsByTargetCps(List<String> cps) { return session.executeAndFetch(findRelationshipInsByTargetCps.bind(cps)); } 	0	0	0	0	0	1
Observable<Row> findEntityByCanonicalPaths(List<String> cps) { return session.executeAndFetch(findEntityByCanonicalPaths.bind(cps)); } 	0	0	0	0	0	1
"private void handle(ReturnIpMsg msg) { ReturnIpReply reply = new ReturnIpReply(); dbf.removeByPrimaryKey(msg.getUsedIpUuid(), UsedIpVO.class); logger.debug(String.format(""Successfully released used ip[%s]"", msg.getUsedIpUuid())); bus.reply(msg, reply); } "	0	0	0	0	1	0
"private BigDecimal getEvaluationScoring(List<? extends SiadapEvaluationItem> evaluations) {  if (!isEvaluationScoringComplete(evaluations)) { return BigDecimal.ZERO; }  BigDecimal result = new BigDecimal(0); for (SiadapEvaluationItem evaluation : evaluations) { IScoring itemEvaluation = evaluation.getItemEvaluation(); if (itemEvaluation == null) { throw new SiadapException(""resources/SiadapResources"", ""error.siadapEvaluation.mustFillAllItems""); } result = result.add(itemEvaluation.getPoints()); }  if (evaluations.size() == 0) { return BigDecimal.ZERO; } return result.divide(new BigDecimal(evaluations.size()), PRECISION, ROUND_MODE); } "	0	0	1	0	0	0
"public void addObjectiveIndicator(String measurementIndicator, String superationCriteria, BigDecimal ponderationFactor) { BigDecimal sum = BigDecimal.ZERO; for (ObjectiveEvaluationIndicator indicator : getIndicators()) { sum = sum.add(indicator.getPonderationFactor()); } if (sum.add(ponderationFactor).compareTo(BigDecimal.ONE) > 0) { throw new SiadapException(""resources/SiadapResources"", ""error.ponderation.cannot.be.over.100""); } checkSizeOfIndicators(); new ObjectiveEvaluationIndicator(this, measurementIndicator, superationCriteria, ponderationFactor); } "	0	0	1	1	0	0
"@Override protected void configure(HttpSecurity http) throws Exception { http .formLogin() .loginPage(""/login"") .defaultSuccessUrl(""/dashboard_user"") .permitAll() .and() .authorizeRequests() .antMatchers(""/"", ""/logout"") .permitAll() .and() .logout() .logoutSuccessUrl(""/login?logout"") .and() .authorizeRequests() .antMatchers( ""/coupons/create"", ""/coupons/?/edit""   ) .authenticated() ; //        REMOVE WHEN APPLICATION IS COMPLETE AND ENABLE SECURITY!!! http.csrf().disable(); } "	0	0	1	0	0	0
@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response addTask(Task task) { task.generateId(); store.put(task.getId(), task); return Response.ok(task).build(); } 	1	1	0	0	1	0
"@Override public void onBackPressed() { synchronized (interceptOnBackPressedListeners.synchronizedList()) { for (interceptOnBackPressedEvent listener : interceptOnBackPressedListeners.nonNull()) { try { if (listener.interceptOnBackPressed()) { return; }  } catch (Throwable t) { Log.e(TAG, ""Error dispatching interceptOnBackPressed event: "" + t.getMessage(), t); } } }  TiWindowProxy topWindow = topWindowOnStack();  if (topWindow != null && topWindow.hasListeners(TiC.EVENT_ANDROID_BACK)) { topWindow.fireEvent(TiC.EVENT_ANDROID_BACK, null); } // Override default Android behavior for ""back"" press // if the top window has a callback to handle the event. if (topWindow != null && topWindow.hasProperty(TiC.PROPERTY_ON_BACK)) { KrollFunction onBackCallback = (KrollFunction) topWindow.getProperty(TiC.PROPERTY_ON_BACK); onBackCallback.callAsync(activityProxy.getKrollObject(), new Object[] {}); } if (!topWindow.hasProperty(TiC.PROPERTY_ON_BACK) && !topWindow.hasListeners(TiC.EVENT_ANDROID_BACK)) { // there are no parent activities to return to // override back press to background the activity // note: 2 since there should always be TiLaunchActivity and TiActivity if (TiApplication.activityStack.size() <= 2) { if (topWindow != null && !TiConvert.toBoolean(topWindow.getProperty(TiC.PROPERTY_EXIT_ON_CLOSE), true)) { this.moveTaskToBack(true); return; } }  // If event is not handled by custom callback allow default behavior. super.onBackPressed(); } } "	0	0	1	1	1	0
public boolean hasEnoughFuel() { if (seats == null || seats[0] == null || seats[0].riddenByEntity == null) return false; return driverIsCreative || driveableData.fuelInTank > driveableData.engine.fuelConsumption * throttle;  } 	1	1	1	1	1	0
"void parentTask_actionPerformed(ActionEvent e) { //    	String taskId = taskTable.getModel().getValueAt(taskTable.getSelectedRow(), TaskTable.TASK_ID).toString(); // //    	Task t = CurrentProject.getTaskList().getTask(taskId); /*XXX Task t2 = CurrentProject.getTaskList().getTask(taskTable.getCurrentRootTask());  String parentTaskId = t2.getParent(); if((parentTaskId == null) || (parentTaskId.equals(""""))) { parentTaskId = null; } taskTable.setCurrentRootTask(parentTaskId); taskTable.tableChanged();*/  //      parentPanel.updateIndicators(); //      //taskTable.updateUI(); } "	0	0	0	0	0	1
"void calcTask_actionPerformed(ActionEvent e) { TaskCalcDialog dlg = new TaskCalcDialog(App.getFrame()); dlg.pack(); Task t = CurrentProject.getTaskList().getTask(taskTable.getModel().getValueAt(taskTable.getSelectedRow(), TaskTable.TASK_ID).toString());  Dimension frmSize = App.getFrame().getSize(); Point loc = App.getFrame().getLocation();  dlg.setLocation((frmSize.width - dlg.getSize().width) / 2 + loc.x, (frmSize.height - dlg.getSize().height) / 2 + loc.y); dlg.setVisible(true); if (dlg.CANCELLED) { return; }  TaskList tl = CurrentProject.getTaskList(); if(dlg.calcEffortChB.isSelected()) { t.setEffort(tl.calculateTotalEffortFromSubTasks(t)); }  if(dlg.compactDatesChB.isSelected()) { t.setStartDate(tl.getEarliestStartDateFromSubTasks(t)); t.setEndDate(tl.getLatestEndDateFromSubTasks(t)); }  if(dlg.calcCompletionChB.isSelected()) { long[] res = tl.calculateCompletionFromSubTasks(t); int thisProgress = (int) Math.round((((double)res[0] / (double)res[1]) * 100)); t.setProgress(thisProgress); }  //        CalendarDate sd = new CalendarDate((Date) dlg.startDate.getModel().getValue()); ////        CalendarDate ed = new CalendarDate((Date) dlg.endDate.getModel().getValue()); //          CalendarDate ed; // 		if(dlg.chkEndDate.isSelected()) // 			ed = new CalendarDate((Date) dlg.endDate.getModel().getValue()); // 		else // 			ed = new CalendarDate(0,0,0); //        long effort = Util.getMillisFromHours(dlg.effortField.getText()); //		Task newTask = CurrentProject.getTaskList().createTask(sd, ed, dlg.todoField.getText(), dlg.priorityCB.getSelectedIndex(),effort, dlg.descriptionField.getText(),parentTaskId); //  CurrentStorage.get().storeTaskList(CurrentProject.getTaskList(), CurrentProject.get()); taskTable.tableChanged(); //        parentPanel.updateIndicators(); //taskTable.updateUI(); } "	0	0	0	0	0	1
void ppAddSubTask_actionPerformed(ActionEvent e) { addSubTask_actionPerformed(e); } 	0	0	0	0	0	1
public int[] getItems() { return items; } 	0	0	0	0	0	1
"public static String loadLibrary(URL[] urls, String libnameversion) { if (!loadLibraries) { return null; }  // If we do not already have the native library file ... String filename = loadedLibraries.get(libnameversion); if (filename != null) { return filename; }  File tempFile = null; UnsatisfiedLinkError loadError = null; try { for (URL url : urls) { File file; try { // ... if the URL is not already a file ... file = new File(url.toURI()); } catch (Exception e) { // ... then check if it has not already been extracted, and if not ... if (!(file = new File(getCacheDir() != null ? getCacheDir() : getTempDir(), new File(url.getPath()).getName())).exists()) { if (tempFile != null && tempFile.exists()) { tempFile.deleteOnExit(); } // ... then extract it from our resources ... if (logger.isDebugEnabled()) { logger.debug(""Extracting "" + url); } if (getCacheDir() != null) { file = extractResource(url, getCacheDir(), null, null); } else { file = tempFile = extractResource(url, getTempDir(), null, null); } } else while (System.currentTimeMillis() - file.lastModified() < 1000) { // ... else wait until the file is at least 1 second old ... try { Thread.sleep(1000); } catch (InterruptedException ex) { // ... reset interrupt to be nice ... Thread.currentThread().interrupt(); } } } if (file != null && file.exists()) { filename = file.getAbsolutePath(); try { // ... and load it! if (logger.isDebugEnabled()) { logger.debug(""Loading "" + filename); } loadedLibraries.put(libnameversion, filename); System.load(filename); return filename; } catch (UnsatisfiedLinkError e) { loadError = e; loadedLibraries.remove(libnameversion); if (logger.isDebugEnabled()) { logger.debug(""Failed to load "" + filename + "": "" + e); } } } } // ... or as last resort, try to load it via the system. String libname = libnameversion.split(""@"")[0]; if (logger.isDebugEnabled()) { logger.debug(""Loading library "" + libname); } loadedLibraries.put(libnameversion, libname); System.loadLibrary(libname); return libname; } catch (UnsatisfiedLinkError e) { loadedLibraries.remove(libnameversion); if (loadError != null && e.getCause() == null) { e.initCause(loadError); } if (logger.isDebugEnabled()) { logger.debug(""Failed to load for "" + libnameversion + "": "" + e); } throw e; } catch (IOException ex) { loadedLibraries.remove(libnameversion); if (loadError != null && ex.getCause() == null) { ex.initCause(loadError); } Error e = new UnsatisfiedLinkError(ex.toString()); e.initCause(ex); if (logger.isDebugEnabled()) { logger.debug(""Failed to extract for "" + libnameversion + "": "" + e); } throw e; } finally { if (tempFile != null && tempFile.exists()) { tempFile.deleteOnExit(); } // But under Windows, it won't get deleted! } } "	0	0	0	0	0	1
"public static String load(Class cls) { if (!loadLibraries || cls == null) { return null; }  // Find the top enclosing class, to match the library filename cls = getEnclosingClass(cls); ClassProperties p = loadProperties(cls, loadProperties(), true);  // Force initialization of all the target classes in case they need it List<String> targets = p.get(""target""); if (targets.isEmpty()) { if (p.getInheritedClasses() != null) { for (Class c : p.getInheritedClasses()) { targets.add(c.getName()); } } targets.add(cls.getName()); } for (String s : targets) { try { if (logger.isDebugEnabled()) { logger.debug(""Loading class "" + s); } Class.forName(s, true, cls.getClassLoader()); } catch (ClassNotFoundException ex) { if (logger.isDebugEnabled()) { logger.debug(""Failed to load class "" + s + "": "" + ex); } Error e = new NoClassDefFoundError(ex.toString()); e.initCause(ex); throw e; } }  // Preload native libraries desired by our class List<String> preloads = new ArrayList<String>(); preloads.addAll(p.get(""platform.preload"")); preloads.addAll(p.get(""platform.link"")); UnsatisfiedLinkError preloadError = null; for (String preload : preloads) { try { URL[] urls = findLibrary(cls, p, preload); loadLibrary(urls, preload); } catch (UnsatisfiedLinkError e) { preloadError = e; } }  try { String library = p.getProperty(""platform.library""); URL[] urls = findLibrary(cls, p, library); return loadLibrary(urls, library); } catch (UnsatisfiedLinkError e) { if (preloadError != null && e.getCause() == null) { e.initCause(preloadError); } throw e; } } "	0	0	0	0	1	0
boolean isClosed() { return this.m_channelClosed; } 	0	0	0	0	0	1
"public final String toString(final Plan plan) { int max = Integer.MIN_VALUE; for (Integer t : plan.timeSpecifiers()) { for (BitOp a : plan.getActionSet(t)) { int length = this.toShortString(a).length(); if (max < length) { max = length; } } } final int actionSize = max; final int timeSpecifierSize = (int) Math.log10(plan.timeSpecifiers().size()) + 1;  StringBuffer str = new StringBuffer(); plan.timeSpecifiers().forEach(time -> plan.getActionSet(time).forEach(a -> str.append(String.format(""%0"" + timeSpecifierSize + ""d: %"" + actionSize + ""s [%4.2f]%n"", time, this.toShortString(a), a.getDuration())))); return str.toString(); } "	0	0	1	0	1	0
"public void finish(RepositorySessionFinishDelegate delegate) { if (this.status == SessionStatus.ACTIVE) { this.status = SessionStatus.DONE; delegate.onFinishSucceeded(this, this.getBundle(null)); } else { Log.e(tag, ""Tried to finish() an unstarted or already finished session""); delegate.onFinishFailed(new InvalidSessionTransitionException(null)); } } "	0	0	0	0	1	0
"@Override @Deprecated public List<?> findAll(Condition condition) throws AppException { if (condition == null) { condition = new Condition(); } try { String hql = buildHQLStringWithOrders(condition); return getSession().createQuery(hql).list(); } catch (HibernateException e) { LOGGER.error(e.getMessage(), e); throw new AppException(""Invoke findAll method error.""); } } "	0	0	0	0	1	0
"@Override public String toString() { return ""Rule '"" + getRule().getUID() + ""' has been added.""; } "	0	0	0	0	0	1
@Override public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException { context = applicationContext; } 	0	0	1	0	0	0
@Override public PackageRepository loadRepository() { return new JARPackageRepository(this, JAR_SYSTEM_LIB_LOCATION); } 	0	0	0	0	1	0
"public void initialize() {  geoMap.configure(GeoMap.INTERNAL_EPSG, MAX_NUM_ZOOM_LEVEL, DEFAUL_MAP_UNITS);  final ScaleLineOptions slOptions = new ScaleLineOptions(); slOptions.setTopOutUnits(DEFAUL_MAP_UNITS); slOptions.setBottomOutUnits("""");  final ScaleLine scaleLine = new ScaleLine(slOptions); scaleLine.getJSObject().setProperty(""geodesic"", true); geoMap.addControl(scaleLine);  final Scale scale = new Scale(); scale.getJSObject().setProperty(""geodesic"", true); geoMap.addControl(scale);  geoMap.addControl(new Attribution()); geoMap.addControl(new Navigation()); geoMap.getMap() .getEvents() .register(""mousemove"", geoMap.getMap(), getMouseMoverEventHandler()); geoMap.getMap() .getEvents() .register(""click"", geoMap.getMap(), getMouseClickEventHandler());  geoMap.getMap() .getEvents() .register(""touchstart"", geoMap.getMap(), getMouseClickEventHandler());  geoMap.getMap().addMapZoomListener(getMapZoomListener()); } "	0	0	0	0	1	0
@Override public void onActionPerform() { updateServerAvatar(bitmap); } 	0	0	0	0	0	1
"private static File getParentFolder(final String folderToFind) { File f = new File(ClientFileSystemHelper.getGameRunnerFileLocation(GameRunner.class.getTypeName() + "".class""));  while (f != null && f.exists() && !folderContains(f, folderToFind)) { f = f.getParentFile(); } return f; } "	0	0	1	0	1	0
"public static boolean areWeOldExtraJar() { final URL url = GameRunner.class.getResource(GameRunner.class.getTypeName() + "".class""); String fileName = url.getFile(); try { fileName = URLDecoder.decode(fileName, ""UTF-8""); } catch (final UnsupportedEncodingException e) { ClientLogger.logQuietly(e); } final String tripleaJarNameWithEngineVersion = getTripleaJarWithEngineVersionStringPath(); if (fileName.contains(tripleaJarNameWithEngineVersion)) { final String subString = fileName.substring(""file:/"".length() - (GameRunner.isWindows() ? 0 : 1), fileName.indexOf(tripleaJarNameWithEngineVersion) - 1); final File f = new File(subString); if (!f.exists()) { throw new IllegalStateException(""File not found:"" + f); } String path; try { path = f.getCanonicalPath(); } catch (final IOException e) { path = f.getPath(); } return path.contains(""old""); } return false; } "	0	0	0	1	1	0
"public static File getUserRootFolder() { final File userHome = new File(System.getProperties().getProperty(""user.home"")); // the default File rootDir; if (GameRunner.isMac()) { rootDir = new File(new File(userHome, ""Documents""), ""triplea""); } else { rootDir = new File(userHome, ""triplea""); } return rootDir; } "	0	0	0	0	1	0
"@Override public void setProperties(Map<String, Object> props, ActionResultsHandlerIfc resultsHandler) { this.resultsHandler = resultsHandler;  String sec_str = (String) props.get(AMP_SECURITY_LEVEL);  try { SECURITY sec = SECURITY.valueOf(sec_str.toUpperCase());  security = sec; } catch (NullPointerException e) {  // Ignore, this is expected here } catch (Exception e) { log.log(Level.WARNING, ""Incorrect amp security settings, using defaults: "" + security, e); }  // Is there shared user repository instance? If so I want to use it: user_repository = (UserRepository) props.get(RepositoryFactory.SHARED_USER_REPO_PROP_KEY); } "	0	0	0	0	1	0
@Override public void init() throws KrbException { super.init();  kadmin = new LocalKadminImpl(getKdcSetting(), getIdentityService());  kadmin.checkBuiltinPrincipals(); } 	0	0	0	0	1	0
"@Test public void testIsJson() throws Exception { Assert.assertFalse(JsonUtilities.isJSON(""{343493043 }"")); Assert.assertTrue(JsonUtilities.isJSON(""\""a\"": { \""b\"": [1,2,3]}"")); } "	0	0	1	1	1	0
"@Override protected Component buildContent() { Label label = new Label(""Guest view""); label.setId(LABEL_ID);  VerticalLayout layout = new VerticalLayout(label, new LoginPane()); layout.setSizeUndefined(); return layout; } "	0	0	0	0	1	0
"public String getProgressPercent() { return String.format(""%.1f%%"", progress); } "	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") public boolean checkPermission(Resident res, FlagType flagType, Object denialValue) { if (getValue(flagType).equals(denialValue) && (!hasResident(res) && !residentHasFriendInTown(res) || ((Boolean)getValue(FlagType.RESTRICTIONS) && !(getMayor() == res)))) { return PlayerUtils.isOp(res.getPlayer()); } return true; } "	1	0	1	0	1	0
"public void releaseAllMessagesOfSlotFromTracking(Slot slot) { //remove all actual msgData objects if (log.isDebugEnabled()) { log.debug(""Releasing tracking of messages for slot "" + slot.toString()); } String slotID = slot.getId(); Set<Long> messagesOfSlot = messageBufferingTracker.remove(slotID); if (messagesOfSlot != null) { for (Long messageId : messagesOfSlot) { OnflightMessageTracker.getInstance().removeMessageFromTracker(messageId); } } } "	0	0	0	0	1	0
"@Test public void filterEvents() throws Exception{ Date firstDate = new Date(11/4/2017); Date lastDate = new Date(9/4/2017); String action = ""create""; String object = ""customer""; Date eventDate = new Date(); eventService.createEvent(action, object, eventDate); List<Event> eventfiltred = eventService.filterEvents(firstDate, lastDate); Assert.assertNotNull(eventfiltred); } "	0	0	0	1	1	0
public void setCidsBeans(final Collection<CidsBean> cidsBeans) { if ((cidsBeans == null) || cidsBeans.isEmpty()) { setCidsBean(createDummyBean()); return; } if ((previousSwingworker != null) && !previousSwingworker.isDone()) { previousSwingworker.cancel(true); } previousSwingworker = new SwingWorker<CidsBean, Void>() {  @Override protected CidsBean doInBackground() throws Exception { final CidsBean dummyBean = ((cidsBeans != null) && !cidsBeans.isEmpty()) ? createDummyBean() : null; multiBeanHelper.setDummyBean(dummyBean); multiBeanHelper.setBeans(cidsBeans); return dummyBean; }  @Override protected void done() { CidsBean dummyBean = null; try { dummyBean = get(); setCidsBean(dummyBean); } catch (Exception ex) { setCidsBean(null); LOG.warn(ex, ex); } } }; previousSwingworker.execute(); } 	1	1	1	1	1	0
public TinkerVertex getOrCreateVertex(final long vertexId, final String label, final TinkerGraph tg) { TinkerVertex v;  try { v = (TinkerVertex)tg.V(vertexId).next(); } catch (NoSuchElementException e) { if (null != label) { v = (TinkerVertex) tg.addVertex(T.label, label, T.id, vertexId); } else { v = (TinkerVertex) tg.addVertex(T.id, vertexId); } }  return v; } 	0	0	0	0	1	0
private void addNewEvents(final List<IndexedEvent> dispatchList) throws InterruptedException { long startTime = System.currentTimeMillis(); do { Long ts = null; Map.Entry<Long,MetricTimeSlot> entry = metricBuffer.firstEntry(); if (entry != null) { ts = entry.getKey(); if (ts != null && ts < System.currentTimeMillis() - 50) { MetricTimeSlot timeSlot = metricBuffer.remove(ts); for (Map.Entry<MetricKey, ConcurrentLinkedQueue<Event>> metricEvents : timeSlot.metricMap.entrySet()) { int i = 0; for (Event event: metricEvents.getValue()) { dispatchList.add(new IndexedEvent(event, i++)); bufferedEvents.decrementAndGet(); } } // send what we have if we have exceeded batchSize, or have gone over 1 second. if (dispatchList.size() > batchSize || System.currentTimeMillis() - startTime > 1000) { break; } } } else { Thread.sleep(50); } } while(true); } 	0	0	0	0	0	1
"private boolean addEntry(ArrayList<String> entries, SharedPreferences prefs, final String rawEntry, final MaskedEditText input) { String formatted = """"; for (int i = 0; i < rawEntry.length(); i++) { if ((i % 2 == 0) && ((i+1) != rawEntry.length())  && (i != 0)) formatted += "":""; formatted += rawEntry.charAt(i); } if (!entries.contains(formatted)) { MainActivity.info(""Adding: "" + formatted); entries.add(formatted);  Gson gson = new Gson(); String serialized = gson.toJson(entries.toArray()); MainActivity.info(serialized); final SharedPreferences.Editor editor = prefs.edit(); editor.putString(this.filterKey,serialized); editor.apply(); input.setText(""""); MainActivity m = MainActivity.getMainActivity(); if (null != m) { //TODO: should we also update on Suspend/Dispose? m.updateAddressFilter(filterKey); } return true; } return false; } "	0	0	0	0	1	0
"public void runSystemTests(MapsActivity activity) { MapsActivity.getDatabase().initDatabase(activity); MapsActivity.getDatabase().runRawDatabaseSystemTest(); MapsActivity.getDatabase().runDatabaseSystemTest();  System.out.println(""Initiating server system checks and validating TCP connection ...""); randomValue = (int)(Math.random() * 1000000) + 1000000; MapsActivity.getAsyncTaskManager().runEventListUpdateTask(activity, true);  synchronized (objLock) { try { objLock.wait(1000 * 20); } catch (InterruptedException e) { System.out.println(""Failed to validate server and TCP connection!""); } }  if (randomValue == receivedRandomValue) { System.out.println(""Success, the correct value was received!""); } else { System.out.println(""Failed to receive correct value!""); } } "	0	0	0	0	1	0
public final WxmsgReplyBase setProperty(String key, String value) { this.conf.setProperty(key, value); return(this); } 	0	0	0	0	1	0
public Properties getProperties() { return(this.conf); } 	0	0	0	1	0	0
"private static IFeaturesExtractor getExtractor(Node node) throws MalformedURLException, ClassNotFoundException, IllegalAccessException, InstantiationException { NodeList list = node.getChildNodes(); String classPath = null; String className = null; Map<String, String> parametrs = new HashMap<>(); for (int i = 0; i < list.getLength(); ++i) { Node child = list.item(i);  if (""classPath"".equals(child.getNodeName())) { classPath = child.getTextContent().trim(); } else if (""className"".equals(child.getNodeName())) { className = child.getTextContent().trim(); } else if (""parameters"".equals(child.getNodeName())) { getParametrs(parametrs, child); } }  if (classPath == null || className == null) { return null; }  File file = new File(classPath); URL url = file.toURI().toURL(); URL[] urls = new URL[]{url}; ClassLoader cl = new URLClassLoader(urls); Class cls = cl.loadClass(className); Object obj = cls.newInstance(); if (obj instanceof IFeaturesExtractor) { IFeaturesExtractor extractor = (IFeaturesExtractor) obj; extractor.initialise(parametrs); return extractor; }  return null; } "	0	0	1	0	1	0
"public <T extends Enum<T>> T nextOfType(Class<T> enumType, String description) throws BindingConfigParseException { try { return Enum.valueOf(enumType, next().toUpperCase()); } catch (Exception e) { throw new BindingConfigParseException(String.format(""Invalid {}: {}"", description, bindingConfig)); } } "	0	0	0	1	1	0
"public void run() { final Random r = RANDOM_SEED == null ? new Random() : new Random(RANDOM_SEED);  final SAMFileWriter out = new SAMFileWriterFactory().makeSAMOrBAMWriter(header, false, tmpFile);  for (Entry<String,String> entry : samples.entrySet()) {  String nameAddition = entry.getKey() + ""_"" + addition; final SAMFileReader in = new SAMFileReader(new File(entry.getValue()));  //stringency SILENT to omit failures in mark duplicate reads in.setValidationStringency(ValidationStringency.SILENT);  List<SAMReadGroupRecord> rgs = new ArrayList<SAMReadGroupRecord>(); SAMReadGroupRecord rg = new SAMReadGroupRecord(addition); rg.setSample(""Sampled""); rgs.add(rg); in.getFileHeader().setReadGroups(rgs);  //only works with BAMs not with SAMs if (in.isBinary()) in.enableIndexMemoryMapping(false);  final Map<String,Boolean> decisions = new HashMap<String,Boolean>();  for (final SAMRecord rec : in) { if (rec.isSecondaryOrSupplementary()) continue; ++total; final String key = rec.getReadName(); final Boolean previous = decisions.remove(key); final boolean keeper; if (previous == null) { keeper = r.nextDouble() <= probability; if (rec.getReadPairedFlag()) decisions.put(key, keeper); } else { keeper = previous; } if (keeper) { String readName = nameAddition + rec.getReadName(); rec.setReadName(readName); rec.setAttribute(""RG"", addition); out.addAlignment(rec); ++kept; } } in.close(); System.out.printf(""Sample %s processed\n"", entry.getKey()); } out.close();  } "	0	0	0	0	1	0
public long getAcceptedCommandCount() { return acceptedCommandCount; } 	0	0	0	1	0	0
"private Config getConfigClusterA() { Config config = new Config(); config.setLicenseKey(LICENSE_KEY).getGroupConfig().setName(""clusterA"").setPassword(""clusterA-pass""); config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false); config.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(true).addMember(""127.0.0.1:5701""); config.setInstanceName(""clusterA""); config.getNetworkConfig().setPort(5701); config.setClassLoader(createCacheManagerClassLoader()); WanReplicationConfig wanReplicationConfig = new WanReplicationConfig(); wanReplicationConfig.setName(""AtoB"");  WanPublisherConfig publisherConfigClusterB = new WanPublisherConfig(); publisherConfigClusterB.setClassName(WanNoDelayReplication.class.getName()); publisherConfigClusterB.setGroupName(""clusterB""); Map<String, Comparable> props = publisherConfigClusterB.getProperties(); props.put(WanReplicationProperties.ENDPOINTS.key(), ""127.0.0.1:5702""); props.put(WanReplicationProperties.GROUP_PASSWORD.key(), ""clusterB-pass"");  // setting acknowledge type is optional, defaults to ACK_ON_OPERATION_COMPLETE props.put(WanReplicationProperties.ACK_TYPE.key(), WanAcknowledgeType.ACK_ON_OPERATION_COMPLETE.name()); wanReplicationConfig.addWanPublisherConfig(publisherConfigClusterB);  config.addWanReplicationConfig(wanReplicationConfig);  WanReplicationRef wanReplicationRef = new WanReplicationRef(); wanReplicationRef.setName(""AtoB""); config.setLicenseKey(LICENSE_KEY); wanReplicationRef.setMergePolicy(HigherHitsCacheMergePolicy.class.getName()); wanReplicationRef.addFilter(SampleCacheWanEventFilter.class.getName()); config.getCacheConfig(""default"").setWanReplicationRef(wanReplicationRef);  return config; } "	0	0	0	0	1	0
"@ExceptionHandler(SQLException.class) public String handleSQLException(HttpServletRequest request, Exception ex) { logger.error(""SQLException Occured:: URL="" + request.getRequestURL() + "" :: ""+ ex.getLocalizedMessage()); return ""error""; } "	0	0	1	1	1	0
public int getTotalLeads() { return totalLeads; } 	0	0	0	0	0	1
"private long getDateAsTimestamp(final String formatedDate) { DateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss""); Date date = null; try { date = dateFormat.parse(formatedDate); } catch (ParseException e) { e.printStackTrace(); } return date.getTime() / 1000; } "	0	0	0	0	1	0
@Override public boolean execute(final ReferencesSearch.SearchParameters queryParameters, final Processor<PsiReference> consumer) { final PsiElement sourceElement = queryParameters.getElementToSearch();  if(sourceElement instanceof PsiNamedElement && sourceElement.getLanguage().isKindOf(JavaScriptLanguage.INSTANCE) && queryParameters.getScope() instanceof GlobalSearchScope && !(sourceElement.getUseScope() instanceof LocalSearchScope)) { final String s = ((PsiNamedElement) sourceElement).getName(); if(s == null) { return true; } PsiSearchHelper.SERVICE.getInstance(sourceElement.getProject()).processAllFilesWithWordInLiterals(s, GlobalSearchScope.getScopeRestrictedByFileTypes(GlobalSearchScope.projectScope (sourceElement.getProject()), JavaScriptFileType.INSTANCE), new Processor<PsiFile>() { @Override public boolean process(final PsiFile psiFile) { return true; } }); } return true; } 	0	0	0	0	1	0
public long getSlotDeleteSafeZone() { return slotDeleteSafeZoneCalc.getSlotDeleteSafeZone(); } 	0	0	1	0	0	0
public void paint(Graphics2D g) {  g.drawRect(50, 50, 150, 150); } 	0	0	0	0	1	0
public long adjustReleaseTime(long framePresentationTimeUs, long unadjustedReleaseTimeNs) { long framePresentationTimeNs = framePresentationTimeUs * 1000;  // Until we know better, the adjustment will be a no-op. long adjustedFrameTimeNs = framePresentationTimeNs; long adjustedReleaseTimeNs = unadjustedReleaseTimeNs;  if (haveSync) { // See if we've advanced to the next frame. if (framePresentationTimeUs != lastFramePresentationTimeUs) { frameCount++; adjustedLastFrameTimeNs = pendingAdjustedFrameTimeNs; } if (frameCount >= MIN_FRAMES_FOR_ADJUSTMENT) { // We're synced and have waited the required number of frames to apply an adjustment. // Calculate the average frame time across all the frames we've seen since the last sync. // This will typically give us a frame rate at a finer granularity than the frame times // themselves (which often only have millisecond granularity). long averageFrameDurationNs = (framePresentationTimeNs - syncFramePresentationTimeNs) / frameCount; // Project the adjusted frame time forward using the average. long candidateAdjustedFrameTimeNs = adjustedLastFrameTimeNs + averageFrameDurationNs;  if (isDriftTooLarge(candidateAdjustedFrameTimeNs, unadjustedReleaseTimeNs)) { haveSync = false; } else { adjustedFrameTimeNs = candidateAdjustedFrameTimeNs; adjustedReleaseTimeNs = syncUnadjustedReleaseTimeNs + adjustedFrameTimeNs - syncFramePresentationTimeNs; } } else { // We're synced but haven't waited the required number of frames to apply an adjustment. // Check drift anyway. if (isDriftTooLarge(framePresentationTimeNs, unadjustedReleaseTimeNs)) { haveSync = false; } } }  // If we need to sync, do so now. if (!haveSync) { syncFramePresentationTimeNs = framePresentationTimeNs; syncUnadjustedReleaseTimeNs = unadjustedReleaseTimeNs; frameCount = 0; haveSync = true; onSynced(); }  lastFramePresentationTimeUs = framePresentationTimeUs; pendingAdjustedFrameTimeNs = adjustedFrameTimeNs;  if (vsyncSampler == null || vsyncSampler.sampledVsyncTimeNs == 0) { return adjustedReleaseTimeNs; }  // Find the timestamp of the closest vsync. This is the vsync that we're targeting. long snappedTimeNs = closestVsync(adjustedReleaseTimeNs, vsyncSampler.sampledVsyncTimeNs, vsyncDurationNs); // Apply an offset so that we release before the target vsync, but after the previous one. return snappedTimeNs - vsyncOffsetNs; } 	0	0	0	0	1	0
private Optional<List<Op>> maybeOps(String opParameter){ try{ return Optional.of(Op.opsForParameter(opParameter)); } catch (IllegalArgumentException e){ return Optional.absent(); } } 	0	0	1	0	1	0
"protected void encodeListInput(FacesContext context, String clientId) throws IOException { ResponseWriter writer = context.getResponseWriter();  writer.startElement(""select"", null); writer.writeAttribute(""id"", clientId, null); writer.writeAttribute(""name"", clientId, null); writer.writeAttribute(""multiple"", ""true"", null); writer.writeAttribute(""class"", ""ui-helper-hidden"", null);  //items generated on client side writer.endElement(""select""); } "	0	0	1	0	1	0
"protected Object peerToJson(Peer peer) { if (peer == null) { return JSONObject.NULL; }  JSONObject obj = new JSONObject(); obj.put(""ip"", peer.getIp()); obj.put(""port"", peer.getPort()); obj.put(""p2pVersion"", peer.getP2pVersion()); obj.put(""clientId"", peer.getClientId()); obj.put(""peerId"", peer.getPeerId()); obj.put(""latestBlockNumber"", peer.getLatestBlockNumber()); obj.put(""latency"", peer.getLatency());  return obj; } "	0	0	0	0	1	0
"public String getDeploymentDescriptor(final String benchmarkId, final long experimentNumber, final int trialNumber) { return getTextFile(benchmarkId + ""/"" + experimentNumber + ""/"" + trialNumber + ""/docker-compose.yml""); } "	0	0	0	0	1	0
"public void removeOriginalDeploymentDescriptor(final String benchmarkId) { removeIfExists(benchmarkId + ""/original/docker-compose.yml""); } "	0	0	0	0	1	0
"public static void RunApexDoc(String[] args, IProgressMonitor monitor) { String sourceDirectory = """"; String targetDirectory = """"; String homefilepath = """"; String authorfilepath = """"; String hostedSourceURL = """";  // parse command line parameters for (int i = 0; i < args.length; i++) {  if (args[i] == null) { continue; } else if (args[i].equalsIgnoreCase(""-s"")) { sourceDirectory = args[++i]; } else if (args[i].equalsIgnoreCase(""-g"")) { hostedSourceURL = args[++i]; } else if (args[i].equalsIgnoreCase(""-t"")) { targetDirectory = args[++i]; } else if (args[i].equalsIgnoreCase(""-h"")) { homefilepath = args[++i]; } else if (args[i].equalsIgnoreCase(""-a"")) { authorfilepath = args[++i]; } else if (args[i].equalsIgnoreCase(""-p"")) { String strScope = args[++i]; rgstrScope = strScope.split("";""); } else { printHelp(); System.exit(-1); } }  // default scope to global and public if not specified if (rgstrScope == null || rgstrScope.length == 0) { rgstrScope = new String[3]; rgstrScope[0] = ""global""; rgstrScope[1] = ""public""; rgstrScope[3] = ""webService""; }  // find all the files to parse fm = new FileManager(targetDirectory); ArrayList<File> files = fm.getFiles(sourceDirectory); ArrayList<ClassModel> cModels = new ArrayList<ClassModel>();  if (monitor != null) { // each file is parsed, html created, written to disk. // but for each class file, there is an xml file we'll ignore. // plus we add 2 for the author file and home file loading. monitor.beginTask(""ApexDoc - documenting your Apex Class files."", (files.size() / 2) * 3 + 2); } // parse each file, creating a class model for it for (File fromFile : files) { String fromFileName = fromFile.getAbsolutePath(); if (fromFileName.endsWith("".cls"")) { ClassModel cModel = parseFileContents(fromFileName); if (cModel != null) { cModels.add(cModel); } } if (monitor != null) monitor.worked(1); }  // create our Groups TreeMap<String, ClassGroup> mapClassNameToClassGroup = createMapClassNameToClassGroup(cModels, sourceDirectory);  // load up optional specified file templates String projectDetail = fm.parseHTMLFile(authorfilepath); if (monitor != null) monitor.worked(1); String homeContents = fm.parseHTMLFile(homefilepath); if (monitor != null) monitor.worked(1);  // create our set of HTML files fm.createDoc(mapClassNameToClassGroup, cModels, projectDetail, homeContents, hostedSourceURL, monitor); if (monitor != null) monitor.done();  // we are done! System.out.println(""ApexDoc has completed!""); } "	0	0	1	1	0	0
"@EventHandler public void onPlayerInteract(final PlayerInteractEvent event) { if (event.getAction().equals(Action.RIGHT_CLICK_AIR) && Control.CONTROL_ITEM.compare(event.getPlayer().getItemInHand()) && MyPetList.hasMyPet(event.getPlayer())) { MyPet myPet = MyPetList.getMyPet(event.getPlayer()); if (myPet.getStatus() == PetState.Here && myPet.getCraftPet().canMove()) { if (myPet.getSkills().isSkillActive(Control.class)) { if (myPet.getSkills().isSkillActive(Behavior.class)) { Behavior behavior = myPet.getSkills().getSkill(Behavior.class); if (behavior.getBehavior() == BehaviorState.Aggressive || behavior.getBehavior() == BehaviorState.Farm) { event.getPlayer().sendMessage(Util.formatText(Locales.getString(""Message.Skill.Control.AggroFarm"", event.getPlayer()), myPet.getPetName(), behavior.getBehavior().name())); return; } } if (myPet.getSkills().isSkillActive(Ride.class)) { if (myPet.getCraftPet().getHandle().hasRider()) { event.getPlayer().sendMessage(Util.formatText(Locales.getString(""Message.Skill.Control.Ride"", event.getPlayer()), myPet.getPetName())); return; } } if (!Permissions.hasExtended(event.getPlayer(), ""MyPet.user.extended.Control"")) { myPet.sendMessageToOwner(Locales.getString(""Message.No.CanUse"", myPet.getOwner().getLanguage())); return; } Block block = event.getPlayer().getTargetBlock(null, 100); if (block != null && block.getType() != Material.AIR) { for (int i : ControllIgnoreBlocks) { if (block.getTypeId() == i) { block = block.getRelative(BlockFace.DOWN); break; } } myPet.getSkills().getSkill(Control.class).setMoveTo(block.getLocation()); } } } } } "	0	0	0	0	1	0
"@RequestMapping(value = ""/save"", method = RequestMethod.POST) public ModelAndView saveChange(@Valid EditForm editForm, BindingResult result, RedirectAttributes redirectAttributes) throws IOException {  assert(isAccessAuthenticated());  ModelAndView model; validator.validate(editForm, result); Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); Member member = (Member) authentication.getPrincipal(); if (!result.hasErrors()) {  memberService.saveEditChange(member, editForm); model = new ModelAndView(""redirect:/profile"");  } else {  model = new ModelAndView(""edit"", ""editForm"", editForm);  List<String> universityNames = uniService.findAllNames();  model.addObject(""universityChoices"", universityNames); model.addObject(""member"", member); } return model; } "	0	0	0	0	1	0
"@RequestMapping(value = ""/becomeTutor"", method = RequestMethod.POST) public ModelAndView becomeTutor() {  memberService.upgradeAuthenticatedMemberToTutor();  return show(); } "	0	0	0	0	0	1
"private <T extends ConnectFuture> IoSessionInitializer<ConnectFuture> createParentInitializer( final ResourceAddress wsnConnectAddress, final IoHandler handler, final IoSessionInitializer<T> initializer, final DefaultConnectFuture wsnConnectFuture) {  ResourceAddress httpConnectAddress = wsnConnectAddress.getTransport(); Protocol protocol = bridgeServiceFactory.getTransportFactory().getProtocol(httpConnectAddress.getResource()); if (!(protocol instanceof HttpProtocol)) { String message = format(""Cannot create WSN parent session initializer for address %s"", wsnConnectAddress); if (logger.isInfoEnabled()) { logger.info(message); } throw new RuntimeException(message); }  // initialize parent session before connection attempt return new IoSessionInitializer<ConnectFuture>() { @Override public void initializeSession(final IoSession parent, ConnectFuture future) { // initializer for bridge session to specify bridge handler, // and call user-defined bridge session initializer if present final IoSessionInitializer<T> wsnSessionInitializer = new IoSessionInitializer<T>() { @Override public void initializeSession(IoSession session, T future) { WsnSession wsnSession = (WsnSession) session; wsnSession.setHandler(handler);  if (initializer != null) { initializer.initializeSession(session, future); } } };  // emulation sends same-origin header // TODO: determine appropriate HTML5 Origin header for desktop // clients URI resource = wsnConnectAddress.getExternalURI(); Protocol protocol = bridgeServiceFactory.getTransportFactory().getProtocol(resource.getScheme()); String wsScheme = protocol.isSecure() ? ""https"" : ""http""; String origin = wsScheme + ""://"" + resource.getAuthority();  // note: WebSocket Version 13 upgrades to ""websocket"" (not ""WebSocket"") // see http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-13 HttpConnectSession httpSession = (HttpConnectSession) parent; httpSession.setWriteHeader(""Upgrade"", ""websocket""); httpSession.setWriteHeader(""Connection"", ""Upgrade""); httpSession.setWriteHeader(""Origin"", origin); httpSession.setWriteHeader(""Sec-WebSocket-Version"", ""13""); httpSession.setWriteHeader(""Sec-WebSocket-Key"", STATIC_WEBSOCKET_KEY); // TODO use random key?  List<String> protocols = asList(wsnConnectAddress.getOption(WsResourceAddress.SUPPORTED_PROTOCOLS));  // include next-protocol (if specified) with supported protocols String wsNextProtocol = wsnConnectAddress.getOption(NEXT_PROTOCOL); if (wsNextProtocol != null) { List<String> allProtocols = new ArrayList<>(protocols); allProtocols.add(wsNextProtocol); protocols = allProtocols; }  if (!protocols.isEmpty()) { httpSession.setWriteHeader(""Sec-WebSocket-Protocol"", Utils.asCommaSeparatedString(protocols)); } WSN_SESSION_INITIALIZER_KEY.set(httpSession, wsnSessionInitializer); WSN_CONNECT_FUTURE_KEY.set(httpSession, wsnConnectFuture); WSN_CONNECT_ADDRESS_KEY.set(httpSession, wsnConnectAddress); } }; } "	0	0	0	0	0	1
"private synchronized void insertRow(Row row, int rownum) { String insertQuery = ""D_INSERT "" + relvarName + "" RELATION {TUPLE {""; String insertAttributes = """"; for (int column = 0; column < heading.length; column++) { if (insertAttributes.length() > 0) insertAttributes += "", ""; String attributeType = heading[column].getType().toString(); Object attributeValueRaw = row.getColumnValue(column); String attributeValue = """"; if (attributeValueRaw != null) attributeValue = attributeValueRaw.toString(); if (attributeType.equals(""BOOLEAN"")) attributeValue = ""False""; else if (attributeType.equals(""RATIONAL"")) attributeValue = ""0.0""; else if (attributeType.equals(""INTEGER"")) attributeValue = ""0""; row.setColumnValue(column, attributeValue); if (attributeType.equals(""CHARACTER"")) attributeValue = ""'"" + StringUtils.quote(attributeValue) + ""'""; String attributeName = heading[column].getName(); insertAttributes += attributeName + "" "" + attributeValue; } insertQuery += insertAttributes + ""}};"";  System.out.println(""RelvarEditor: query is "" + insertQuery);  DbConnection.ExecuteResult result = connection.execute(insertQuery);  if (result.failed()) row.setError(""Unable to insert tuple.\n\nQuery: "" + insertQuery + "" failed:\n\n"" + result.getErrorMessage()); else { row.committed(); processRows.remove(rownum); }  refreshAfterUpdate(); } "	0	0	0	0	0	1
"@Override public void onClick(View view) { Log.w(Constants.TAG, ""Activating TAG "" + position); Intent nodeDatail = new Intent(context, TagDetailActivity.class); // TagRecyclerAdapter.TagViewHolder holder = ( TagRecyclerAdapter.TagViewHolder holder) view; nodeDatail.putExtra(""TAG"", soulissTags[position].getTagId());  ActivityOptionsCompat options = ActivityOptionsCompat.makeSceneTransitionAnimation(context, //holder.image,   // The view which starts the transition //""photo_hero""    // The transitionName of the view we’re transitioning to Pair.create((View) holder.image, ""photo_hero""), Pair.create((View) holder.shadowbar, ""shadow_hero""), Pair.create((View) holder.imageTag, ""tag_icon"") );  ActivityCompat.startActivity(context, nodeDatail, options.toBundle()); } "	0	0	1	0	0	0
"static void deleteRemotelyDeletedEvents(DhisApi dhisApi, String organisationUnitUid, String programUid) throws APIException { Log.d(CLASS_TAG, ""getEventsDataFromServer""); final Map<String, String> map = new HashMap<>(); map.put(""fields"", ""[event]""); map.put(""skipPaging"", ""true"");  List<Event> localEvents = TrackerController.getEvents(organisationUnitUid,programUid); List<Event> eventsToBeRemoved = new ArrayList<>(); if(localEvents.size()==0) { return; }  JsonNode response = dhisApi.getEventUids(programUid, organisationUnitUid, map);  List<Event> remoteEvents = EventsWrapper.getEvents(response); for (Event localEvent:localEvents){ boolean isRemoved = true; for (Event remoteEvent:remoteEvents){ if(remoteEvent.getEvent().equals(localEvent.getEvent())){ isRemoved=false; break; } } if(isRemoved){ eventsToBeRemoved.add(localEvent); } }  removeResource(eventsToBeRemoved); } "	1	0	0	0	1	0
public static Boolean getThreadLocalToSkipSetUserClaimsListeners() { return (Boolean) threadLocalToSkipSetUserClaimsListeners.get(); } 	1	0	0	1	1	0
"public final void addQualityControlReportHeader(final Document document, final Map<String, Object> model, final Locale locale) throws DocumentException { if (!model.containsKey(""entities"")) { Paragraph firstParagraphTitle = new Paragraph(new Phrase(translationService.translate( ""qualityControls.qualityControl.report.paragrah"", locale), PdfUtil.getArialBold11Light())); firstParagraphTitle.add(new Phrase("" "" + model.get(""dateFrom"") + "" - "" + model.get(""dateTo""), PdfUtil .getArialBold11Light())); firstParagraphTitle.setSpacingBefore(20); document.add(firstParagraphTitle);  } Paragraph secondParagraphTitle = new Paragraph(new Phrase(translationService.translate( ""qualityControls.qualityControl.report.paragrah2"", locale), PdfUtil.getArialBold11Light())); secondParagraphTitle.setSpacingBefore(20); document.add(secondParagraphTitle); } "	0	0	1	1	1	0
"public String output(String src){  StringBuilder out = new StringBuilder(); while(src.length() > 0){ //escape { List<String> cap = rules.get(""escape"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); out.append(cap.get(1)); continue; } }  // autolink { List<String> cap = rules.get(""autolink"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); String text; String href; if(cap.get(2).equals(""@"")){ if(cap.get(1).startsWith(""mailto:"")){ text = cap.get(1).substring(7); } else { text = cap.get(1); } href = ""mailto:"" + text; } else { text = escape(cap.get(1)); href = text; } out.append(renderer.link(href, Optional.empty(), text)); continue; } }  // url (gfm) if(!inLink){ List<String> cap = rules.get(""url"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); String text = escape(cap.get(1)); String href = text; out.append(renderer.link(text, Optional.empty(), href)); continue; } }  // tag { List<String> cap = rules.get(""tag"").exec(src); if(!cap.isEmpty()){ if(!inLink && Pattern.compile(""^<a "").matcher(cap.get(0)).find()){ inLink = true; } else if(inLink && Pattern.compile(""^</a>"").matcher(cap.get(0)).find()){ inLink = false; }  src = src.substring(cap.get(0).length()); if(options.isSanitize()){ out.append(escape(cap.get(0))); } else { out.append(cap.get(0)); } continue; } }  // link { List<String> cap = rules.get(""link"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); inLink = true; out.append(outputLink(cap, new Lexer.Link(cap.get(2), Optional.of(cap.get(3))))); inLink = false; continue; } }  // reflink, nolink { List<String> cap = rules.get(""reflink"").exec(src); if(cap.isEmpty()){ cap = rules.get(""nolink"").exec(src); } if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); String key = or(cap.get(2), cap.get(1)).replaceAll(""\\s+"", """"); Lexer.Link link = links.get(key); if(link == null || isEmpty(link.getHref())){ out.append(cap.get(0).charAt(0)); continue; } inLink = true; out.append(outputLink(cap, link)); inLink = false; continue; } }  // strong { List<String> cap = rules.get(""strong"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); out.append(renderer.strong(or(cap.get(2), cap.get(1)))); continue; } }  // em { List<String> cap = rules.get(""em"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); out.append(renderer.em(or(cap.get(2), cap.get(1)))); continue; } }  // code { List<String> cap = rules.get(""code"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); out.append(renderer.codespan(cap.get(2))); continue; } }  // br { List<String> cap = rules.get(""br"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); out.append(renderer.br()); continue; } }  // del (gfm) { List<String> cap = rules.get(""del"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); out.append(renderer.del(cap.get(1))); continue; } }  // text { List<String> cap = rules.get(""text"").exec(src); if(!cap.isEmpty()){ src = src.substring(cap.get(0).length()); // TODO smartypants //out.append(renderer.text(escape(smartypants(cap.get(0))))); out.append(renderer.text(escape(cap.get(0)))); continue; } }  // TODO Error //println(""Infinite loop on byte: "" + source.charAt(0).toByte) } return out.toString(); } "	0	0	0	0	0	1
"public Message get(int batchSize) throws CanalClientException { int times = 0; while (times < retryTimes) { try { Message msg = currentConnector.get(batchSize); return msg; } catch (Throwable t) { logger.warn(""something goes wrong when getting data from server:{}\n{}"", currentConnector.getAddress(), ExceptionUtils.getFullStackTrace(t)); times++; restart(); logger.info(""restart the connector for next round retry.""); } } throw new CanalClientException(""failed to fetch the data after "" + times + "" times retry""); } "	0	0	0	0	0	1
public int[][] getPixels(int[][] outPixels) { synchronized (mPixels) { for (int x = 0; x < mPixels.length; ++x) { outPixels[x] = Arrays.copyOf(mPixels[x], mPixels[x].length); } } return outPixels; } 	0	0	0	0	1	0
"@RequestMapping(method = RequestMethod.POST) public ModelAndView addNewBuilding (@RequestParam String buildingName, @RequestParam String address, @RequestParam String acronym) { Buildings n = new Buildings(); n.setBuildingName(buildingName); n.setAddress(address); n.setAcronym(acronym); buildingRepository.save(n); return new ModelAndView(""redirect:/buildings""); } "	0	0	0	0	1	0
"private void refreshLists() { closetListModel.clear(); List<Clothing> tempList = new ArrayList<>(character.closet); tempList.sort(new ClothingSorter()); tempList.forEach(article -> closetListModel.addElement(article)); outfitListModel.clear(); tempList = new ArrayList<>(character.outfit.getEquipped()); tempList.sort(new ClothingSorter()); tempList.forEach(article -> outfitListModel.addElement(article)); DecimalFormat format = new DecimalFormat(""#.##""); appearanceLabel.setText(""Appearance: "" + format.format(character.outfit.getHotness())); exposureLabel.setText(""Exposure: "" + format.format(character.outfit.getExposure())); Global.gui().refresh(); } "	0	0	0	0	1	0
public double getNorthing() { return northing; } 	0	0	0	0	0	1
@Test public void testCollectNullIterator(){ assertEquals(emptyList(), CollectionsUtil.collect((Iterator<Long>) null, TransformerUtils.stringValueTransformer())); } 	0	0	1	1	1	0
@Test public void testCollectNullIterable(){ assertEquals(emptyList(), CollectionsUtil.collect((List<Long>) null, TransformerUtils.stringValueTransformer())); } 	0	0	1	1	1	0
public static Treasure getClosestTreasure(Position p, ArrayList<Treasure> treasures) { Treasure minTreasure = treasures.get(0); double minDist = GameSettings.Arena.outerSize.getHeight() + GameSettings.Arena.outerSize.getWidth();  for (Treasure t : treasures) { if (t.state == TreasureState.UNPICKED) { double currDist = Maths.dist(p, t.position); if (currDist < minDist) { minDist = currDist; minTreasure = t; } } } return minTreasure;  } 	0	0	1	0	1	0
public static Tristate getUserPermission(User user, GPClaim claim, String permission, String targetModPermission) { Set<Context> contexts = new HashSet<>(user.getActiveContexts()); if (claim.parent != null && claim.getData().doesInheritParent()) { // check subdivision's parent contexts.add(claim.parent.getContext()); } else { contexts.add(claim.getContext()); }  Tristate value = user.getPermissionValue(contexts, permission); if (value != Tristate.UNDEFINED) { return value; } if (targetModPermission != null) { value = user.getPermissionValue(contexts, targetModPermission); if (value != Tristate.UNDEFINED) { return value; } }  return getClaimFlagPermission(claim, permission, targetModPermission, contexts); } 	1	0	1	0	1	0
"@Override protected ISpoofaxAnalyzeResults analyzeAll(Map<String,ISpoofaxParseUnit> changed, Map<String,ISpoofaxParseUnit> removed, ISingleFileScopeGraphContext context, HybridInterpreter runtime, String strategy) throws AnalysisException { for (String input : removed.keySet()) { context.removeUnit(input); }  final String globalSource = context.location().getName().getURI(); final Collection<ISpoofaxAnalyzeUnit> results = Lists.newArrayList(); for (Map.Entry<String,ISpoofaxParseUnit> input : changed.entrySet()) { String source = input.getKey(); ISpoofaxParseUnit parseUnit = input.getValue();  try { ISingleFileScopeGraphUnit unit = context.unit(source); unit.clear();  // initial IStrategoTerm initialResultTerm = doAction(strategy, actionBuilder.initialOf(globalSource), context, runtime); InitialResult initialResult = ResultTerms.initialOf().match(strategoTerms.fromStratego( initialResultTerm)).orElseThrow(() -> new MetaborgException(""Invalid initial results.""));  // unit IStrategoTerm unitResultTerm = doAction(strategy, actionBuilder.unitOf(source, parseUnit.ast(), initialResult.getArgs()), context, runtime); UnitResult unitResult = ResultTerms.unitOf().match(strategoTerms.fromStratego(unitResultTerm)) .orElseThrow(() -> new MetaborgException(""Invalid unit results."")); unit.setUnitResult(unitResult);  // solve Iterable<IConstraint> constraints = Iterables.concat(initialResult.getConstraints(), unitResult .getConstraints()); Solution solution = Solver.solve(constraints); unit.setSolution(solution); IStrategoTerm analyzedAST = strategoTerms.toStratego(unitResult.getAST());  // final IStrategoTerm finalResultTerm = doAction(strategy, actionBuilder.finalOf(source), context, runtime); FinalResult finalResult = ResultTerms.finalOf().match(strategoTerms.fromStratego(finalResultTerm)) .orElseThrow(() -> new MetaborgException(""Invalid final results."")); unit.setFinalResult(finalResult);  // errors final Collection<IMessage> errors = messages(parseUnit.source(), solution.getErrors(), MessageSeverity.ERROR); final Collection<IMessage> warnings = messages(parseUnit.source(), solution.getWarnings(), MessageSeverity.WARNING); final Collection<IMessage> notes = messages(parseUnit.source(), solution.getNotes(), MessageSeverity.NOTE); final Collection<IMessage> ambiguities = analysisCommon.ambiguityMessages(parseUnit.source(), analyzedAST); final Collection<IMessage> messages = Lists.newArrayListWithCapacity(errors.size() + warnings.size() + notes.size() + ambiguities.size()); messages.addAll(errors); messages.addAll(warnings); messages.addAll(notes); messages.addAll(ambiguities);  // result results.add(unitService.analyzeUnit(parseUnit, new AnalyzeContrib(true, errors.isEmpty(), true, analyzedAST, messages, -1), context)); } catch (MetaborgException | UnsatisfiableException e) { logger.warn(""File analysis failed."", e); Iterable<IMessage> messages = Iterables2.singleton(MessageFactory.newAnalysisErrorAtTop(parseUnit .source(), ""File analysis failed."", e)); results.add(unitService.analyzeUnit(parseUnit, new AnalyzeContrib(true, false, false, null, messages, -1), context)); } } return new SpoofaxAnalyzeResults(results, Collections.<ISpoofaxAnalyzeUnitUpdate> emptyList(), context); } "	0	0	0	0	1	0
private void getAndSetRolesAndInstitutions(UserRoleForm userRoleForm, UserDetailsForm userDetailsForm) {  List<Object> roles = getUserRoleService().getRoles(userManagementService.getSuperAdminRoleId()); List<Object> institutions = getUserRoleService().getInstitutions(userDetailsForm.isSuperAdmin(), userDetailsForm.getLoginInstitutionId()); userRoleForm.setRoles(roles); userRoleForm.setInstitutions(institutions); } 	0	0	0	0	1	0
public static Predicate<Vector3i> probability(final Noise noiseGen, final float density) { return new Predicate<Vector3i>() {  @Override public boolean apply(Vector3i input) { return noiseGen.noise(input.getX(), input.getY(), input.getZ()) < density; } }; } 	0	0	0	0	1	0
"@Test public void shouldCreateNewRoleOnPut() throws RightTypeException, RoleException {  UUID newRoleId = UUID.randomUUID(); Role newRole = Role.newRole(""role3"", Right.newRight(""right1"", RightType.GENERAL_ADMIN)); RoleDto newRoleDto = new RoleDto(); newRole.export(newRoleDto);  RoleDto response = restAssured .given() .queryParam(ACCESS_TOKEN, getToken()) .pathParam(""id"", newRoleId) .contentType(MediaType.APPLICATION_JSON_VALUE) .body(newRoleDto) .when() .put(ID_URL) .then() .statusCode(200) .extract().as(RoleDto.class);  assertEquals(newRoleDto, response); Role storedRole = roleRepository.findOne(newRoleId); storedRole.getRights().size(); assertEquals(newRole, storedRole); assertThat(RAML_ASSERT_MESSAGE, restAssured.getLastReport(), RamlMatchers.hasNoViolations()); } "	0	0	1	0	1	0
"@Test public void resetRegister_shouldResetRegister_whenEnableRegisterDataDeleteIsEnabled() throws IOException, NoSuchConfigException { RegisterContext context = new RegisterContext(registerName, configManager, registerLinkService, dbi, flyway, Optional.empty(), true, false, Optional.empty(), Optional.empty(), Optional.empty(), new RegisterAuthenticator("""", """")); context.resetRegister();  verify(flyway, times(1)).clean(); verify(configManager, times(1)).refreshConfig(); verify(flyway, times(1)).migrate(); } "	0	0	0	0	1	0
private void playFromTrack(TrackSimple item) { List<String> trackUris = getTrackUris(); List<String> subList = trackUris.subList(trackUris.indexOf(item.uri), trackUris.size()); mApp.getSpotifyPlayerController().play(getObjectUri(), subList); } 	0	0	0	0	1	0
@NonNull private Button createButton(@NonNull HotPoint point) { Button button = (Button) View.inflate(this, R.layout.hot_point_button, null); button.setOnClickListener(this); button.setText(point.getName()); button.getBackground().setColorFilter(point.getColor(), PorterDuff.Mode.MULTIPLY); button.setTag(point); return button; } 	0	0	0	0	1	0
@Override public void setColor(View view, int color) { result[0] = new Color.Result(color, null); } 	1	0	1	0	1	0
@Test public void higherAverageAcrossAllTissues() {  subject = new BaselineProfileComparator(false, null, allOrganismParts, cutoff);  // when int comparison = subject.compare(geneWithSpecificity1, geneWithSpecificity16);  // then assertThat(comparison, is(greaterThan(0)));  } 	0	0	0	0	1	0
public void licenseHeader(String licenseHeader) { licenseHeader(licenseHeader, JavaExtension.LICENSE_HEADER_DELIMITER); } 	1	0	0	1	1	0
"public void restoreLastSession() { if (node.getChildren() == null) return; for (Node child: node.getChildren().values()) { Value restype = child.getAttribute(""restore type""); if (restype != null && restype.getString().equals(""folder"")) { DeviceFolder df = new DeviceFolder(conn, child, root); df.restoreLastSession(); } else if (restype != null && restype.getString().equals(""point"")) { Value ot = child.getAttribute(""object type""); Value inum = child.getAttribute(""object instance number""); Value cov = child.getAttribute(""use COV""); Value sett = child.getAttribute(""settable""); Value defp = child.getAttribute(""default priority""); if (defp == null) child.setAttribute(""default priority"", new Value(8)); if (ot!=null && inum!=null && cov!=null && sett!=null) { new BacnetPoint(this, node, child); //conn.link.setupPoint(bp, this); } else { node.removeChild(child); } } else if (child.getAction() == null && child != root.statnode) { node.removeChild(child); } } } "	0	0	0	0	1	0
"@Override public RoutingStatus send(Transaction tx, final ServerMessage message, final boolean direct, boolean noAutoCreateQueue) throws Exception {  // If the protocol doesn't support flow control, we have no choice other than fail the communication if (!this.getRemotingConnection().isSupportsFlowControl() && pagingManager.isDiskFull()) { ActiveMQIOErrorException exception = ActiveMQMessageBundle.BUNDLE.diskBeyondLimit(); this.getRemotingConnection().fail(exception); throw exception; }  RoutingStatus result = RoutingStatus.OK; //large message may come from StompSession directly, in which //case the id header already generated. if (!message.isLargeMessage()) { long id = storageManager.generateID();  message.setMessageID(id); message.encodeMessageIDToBuffer(); }  if (server.getConfiguration().isPopulateValidatedUser() && validatedUser != null) { message.putStringProperty(Message.HDR_VALIDATED_USER, SimpleString.toSimpleString(validatedUser)); }  SimpleString address = getAddress(message.getAddress());  if (defaultAddress == null && address != null) { defaultAddress = address; }  if (address == null) { if (message.isDurable()) { // We need to force a re-encode when the message gets persisted or when it gets reloaded // it will have no address message.setAddress(defaultAddress); } else { // We don't want to force a re-encode when the message gets sent to the consumer message.setAddressTransient(defaultAddress); } }  if (logger.isTraceEnabled()) { logger.trace(""send(message="" + message + "", direct="" + direct + "") being called""); }  if (address == null) { // This could happen with some tests that are ignoring messages throw ActiveMQMessageBundle.BUNDLE.noAddress(); }  if (address.equals(managementAddress)) { // It's a management message  handleManagementMessage(tx, message, direct); } else { result = doSend(tx, message, direct, noAutoCreateQueue); } return result; } "	0	0	0	0	1	0
"public void setName(String name){ this.name = name; connector.Connect(""game""); try { connector.doUpdate(""Game"",""UPDATE Player SET name = "" + name + "" WHERE PlayerID EQUALS "" + ID + "");""); connector.close(); } catch (SQLException e) { e.printStackTrace(); } } "	0	0	1	1	1	0
"public void movePosition(int moves){ connector.Connect(""game""); int newPosition = moves + position; if(newPosition > maxfields){ newPosition = newPosition % maxfields; Account.addBalance(4000); } position = newPosition; try { connector.doUpdate(""Game"",""UPDATE Player SET Position = "" + newPosition + "" WHERE PlayerID EQUALS "" + ID + "");""); connector.close(); } catch (SQLException e) { e.printStackTrace(); } } "	0	0	1	1	1	0
"public static void main (String args[]) { boolean test2_flag;  Test2Driver test2driver = new Test2Driver ();  test2_flag = test2driver.insertTest(); if (test2_flag != true) { System.out.println(""Error ocurred during Test2""); } else { System.out.println(""Test2 completed successfully""); } } "	0	0	1	0	1	0
"public static void update(VersionInfo version) { File chunkyDir = PersistentSettings.getSettingsDirectory(); File libDir = new File(chunkyDir, ""lib""); if (!libDir.isDirectory()) { libDir.mkdirs(); } File versionsDir = new File(chunkyDir, ""versions""); if (!versionsDir.isDirectory()) { versionsDir.mkdirs(); } Collection<VersionInfo.Library> neededLibraries = new LinkedList<VersionInfo.Library>(); for (Library lib: version.libraries) { LibraryStatus libStatus = lib.testIntegrity(libDir); if (libStatus != LibraryStatus.PASSED && libStatus != LibraryStatus.INCOMPLETE_INFO) { neededLibraries.add(lib);  // pretty print library size float size = lib.size; String unit = ""B""; if (size >= 1024*1024) { size /= 1024*1024; unit = ""MiB""; } else if (size >= 1024) { size /= 1024; unit = ""KiB""; } String libSize; if (size >= 10) { libSize = String.format(""%d %s"", (int) size, unit); } else { libSize = String.format(""%.1f %s"", size, unit); } System.out.print(""Downloading "" + lib + "" ["" + libSize + ""]..."");  if (downloadLibrary(libDir, lib, System.out)) { System.out.println(""done!""); } else { return; } } } try { File versionFile = new File(versionsDir, version.name + "".json""); version.writeTo(versionFile); } catch (IOException e) { System.err.println(""Failed to update version info. Please try again later.""); } } "	0	0	0	0	1	0
private static void saveBuildImportSummaries(Map<BuildIdentifier, BuildImportSummary> buildImportSummaries) { List<BuildImportSummary> summariesToSave = new ArrayList<BuildImportSummary>( buildImportSummaries.values()); ScenarioDocuAggregationDao dao = new ScenarioDocuAggregationDao( configurationRepository.getDocumentationDataDirectory()); dao.saveBuildImportSummaries(summariesToSave); } 	0	0	0	1	0	0
public void setCurrentHomeLocation(LatLongAlt currentHomeLocation) { this.currentHomeLocation = currentHomeLocation; } 	0	0	0	1	1	0
"@Test(timeOut = 10000) public void testExtractorStart() {  final String topic = ""testExtractorStart""; final KafkaSimpleStreamingExtractor<String, byte[]> kSSE = getStreamingExtractor(topic);  try { kSSE.readRecord(null); Assert.fail(""Should have thrown an exception""); } catch (IOException e) {  } catch (Exception e) { Assert.fail(""Should only throw IOException""); }  } "	0	0	0	0	1	0
"private String getId(int ln, int lt) { String id = """"; if(lt >= 0) { id += ""N""; } else { id += ""S""; } lt = Math.abs(lt); if(lt < 10) { id += ""0""; } id += lt;  if(ln >= 0) { id += ""E""; } else { id += ""W""; } lt = Math.abs(ln); if(ln < 10) { id += ""0""; } if(ln < 100) { id += ""0""; } id += ln; return id; } "	1	0	1	0	1	0
"private void performMedianAlignment(Mat[] imagesToAlignList, String[] resultNames) { ProgressDialogHandler.getInstance().showProcessDialog(""Processing"", ""Aligning images"", 60.0f); //perform exposure alignment MedianAlignmentOperator medianAlignmentOperator = new MedianAlignmentOperator(imagesToAlignList, resultNames); medianAlignmentOperator.perform();  //MatMemory.releaseAll(imagesToAlignList, true); } "	0	0	0	1	0	0
"protected String getRequest(Map<String, String> params, boolean signed) { if (!signed) { params.put(""sign"", genSign(params)); } return map2xmlStr(params); } "	0	0	0	0	1	0
"public void handleEvent(Event event) {  // If this is not a step event, return if (event instanceof StepEvent == false) { return; } StepEvent stepEvent = (StepEvent)event;  // Get the location for easy access Location location = stepEvent.location();  // Loop through all of the threads to find the main thread. for (ThreadReference thread : vm.allThreads()) { String threadName = thread.name();  // If this is not the main thread, just try the next one if (threadName.equals(""main"")) { continue; }  // Get the depth of the stack int stackDepth; try { stackDepth = thread.frameCount(); } catch (IncompatibleThreadStateException e) { // No stack variables available for this thread so go to the next one  continue; }  // If this thread does not have a stack, create one if (threads.containsKey(threadName) == false) { threads.put(threadName, new StepStack()); } StepStack stepStack = threads.get(threadName);  // Adjust the size of the stack accordingly if (stepStack.size() < stackDepth) { // Stack has grown so make a new Step  stepStack.push(new Steps()); } else if (stepStack.size() > stackDepth) { // Stack has shrunk so pop a Step  stepStack.pop(); }  // Get the current steps Steps steps = stepStack.peek();  if (steps != null) {  // Create a new step at this location Step newStep = new Step(); newStep.location = location;  try { // Continue to log old steps while (steps.empty() == false) { // Get the last step Step lastStep = steps.pop(); newStep.declaredVariables = lastStep.declaredVariables;  // If these are the same location, do not log it because this step is the one of interest if (sameLocation(newStep.location, lastStep.location) == false) { // Log step location logLocation(lastStep);  // Log variable changes logVariables(thread, lastStep, newStep); } else { newStep.usedVariables = lastStep.usedVariables; } }  // Save used variable values for comparison in the next step saveUsedVariables(thread, newStep);  } catch (AbsentInformationException e) { // No information available, move on }  // Push the new step steps.push(newStep); } }  return; } "	0	0	0	0	1	0
"@Override public void clearCache(String sport) { Objects.requireNonNull(sport);  logger.info(""Clearing the cache for \""{}\"""", sport); this.scheduleCache.remove(sport); this.standingsCache.remove(sport); } "	0	0	1	0	1	0
protected HazelcastInstance getDefaultInstance() { if (hazelcastInstance == null) { // Since there is no default instance in use, get-or-create by instance name in default config or create new Config config = new XmlConfigBuilder().build(); if (isNullOrEmptyAfterTrim(config.getInstanceName())) { hazelcastInstance = Hazelcast.newHazelcastInstance(); } else { hazelcastInstance = Hazelcast.getOrCreateHazelcastInstance(config); } } return hazelcastInstance; } 	0	0	1	0	1	0
"public void injectDependencies(TupleTypeFactory tupleTypeFactory, UserTypeFactory userTypeFactory, AbstractEntityProperty<?> entityProperty) { LOGGER.info(""Start injecting dependencies to meta classes"");  final Class<?> entityClass = entityProperty.entityClass;  if (currentKeyspace.isPresent()) { LOGGER.debug(""Injecting current global keyspace""); entityProperty.injectKeyspace(currentKeyspace.get()); }  if (schemaNameProvider.isPresent()) { LOGGER.debug(""Injecting schema name provider""); entityProperty.inject(schemaNameProvider.get()); }  LOGGER.debug(""Injecting default bean factory""); entityProperty.inject(defaultBeanFactory);  LOGGER.debug(""Injecting Jackson mapper""); entityProperty.inject(jacksonMapperFactory.getMapper(entityClass));  LOGGER.debug(""Injecting global Insert strategy""); entityProperty.inject(globalInsertStrategy);  if (!interceptors.isEmpty()) { LOGGER.debug(""Injecting bean interceptors""); interceptors.stream() .filter(x -> x.acceptEntity(entityClass)) .map(x -> (Interceptor) x) .forEach(entityProperty.interceptors::add); }  // Adding PreMutate Bean validator as the LAST interceptor if (beanValidator != null && isClassConstrained(entityClass)) { LOGGER.debug(""Injecting Bean validator (JSR 303)""); if (entityProperty.isTable()) { entityProperty.interceptors.add((Interceptor) preMutateBeanValidationInterceptor); }  // Add PostLoad interceptor as the FIRST interceptor if (postLoadBeanValidationInterceptor.isPresent()) { entityProperty.interceptors.add(0, (Interceptor) postLoadBeanValidationInterceptor.get()); } }  LOGGER.debug(""Injecting global consistency levels""); entityProperty.injectConsistencyLevels(session, this);  LOGGER.debug(""Injecting runtime codecs""); entityProperty.injectRuntimeCodecs(runtimeCodecs);  LOGGER.debug(""Injecting user type factory and tuple type factory""); entityProperty.inject(userTypeFactory, tupleTypeFactory);  } "	0	0	1	0	1	0
"@Test public void autoCheckExceptionTest() throws Throwable { WaitForAsyncUtils.printException=false; WaitForAsyncUtils.autoCheckException=true; // given: Callable<Void> callable = () -> { throw new UnsupportedOperationException(); }; WaitForAsyncUtils.clearExceptions(); Future<Void> future = WaitForAsyncUtils.async(callable); waitForThreads(future);  // expect: try{ future = WaitForAsyncUtils.async(callable); assertTrue(""No exception thrown by autoCheck"",false); }catch(Throwable e){ if(!(e.getCause() instanceof UnsupportedOperationException)){ // should be! throw e; } }  WaitForAsyncUtils.clearExceptions(); WaitForAsyncUtils.printException=true; waitForThreads(future); } "	0	0	1	0	0	0
public static SelectedConnector getSelectedInputConnector(VNode senderNode, Parent fxParent, String type, MouseEvent t) { Node myNode = NodeUtil.getDeepestNode( fxParent, t.getSceneX(), t.getSceneY(), ConnectorCircle.class, FlowNodeWindow.class); Connector connector = null;  if (myNode != null) { if (myNode instanceof ConnectorCircle) { ConnectorCircle circle = (ConnectorCircle) myNode; connector = circle.getConnector(); } else if (myNode instanceof FlowNodeWindow) {  final FlowNodeWindow w = (FlowNodeWindow) myNode;  connector = w.nodeSkinProperty().get(). getModel().getMainInput(type); }  // we don't accept our parent as target if (connector != null && connector.getNode() instanceof VFlowModel) { VFlowModel model = (VFlowModel) connector.getNode(); if (model.getNodes().contains(senderNode)) { myNode = null; connector = null; } } }  return new SelectedConnector(myNode, connector); } 	0	0	1	0	0	0
boolean isConsoleShown() { return consoleView != null; } 	0	0	0	0	1	0
"private boolean hideConsole() { try { if (consoleView != null) { Log.d(CONSOLE, ""Hide console"");  Activity activity = getActivity(); if (activity != null) { Animation animation = AnimationUtils.loadAnimation(activity, R.anim.lunar_console_slide_out_top); animation.setAnimationListener(new Animation.AnimationListener() { @Override public void onAnimationStart(Animation animation) { }  @Override public void onAnimationEnd(Animation animation) { removeConsoleView();  if (settings.isEnableTransparentLogOverlay()) { showLogOverlayView(); }  // start listening for gestures enableGestureRecognition(); }  @Override public void onAnimationRepeat(Animation animation) {  } }); consoleView.startAnimation(animation); } else { Log.w(""Can't properly hide console: activity reference is lost""); removeConsoleView(); }  return true; } } catch (Exception e) { Log.e(e, ""Can't hide console""); }  return false; } "	0	0	0	0	1	0
"public void start() { AstericsErrorHandling.instance.getLogger().fine(""Invoking thread <""+Thread.currentThread().getName()+"">, .start called"");  // if(runningTaskFuture!=null) stop();  // System.out.println(""in startproc !"");  // runningTaskFuture=AstericsThreadPool.instance.execute(this); if (runningTaskFuture == null) runningTaskFuture=AstericsThreadPool.instance.execute(this); else timecount=System.currentTimeMillis()-startTime+owner.propTimePeriod;  } "	0	0	0	0	1	0
public void updateWishlist() { wrapper.getWishList((String[] s) -> {onWishListUpdatedNotify(s);}); } 	0	0	1	0	0	0
"public void actionPerformed(ActionEvent e) { String link = tf.getText(); boolean inFront = checkBox.isSelected(); if (link.contains(""youtube."") && link.contains(""/watch"")) { c.addToList(link, wishlist.isSelected(), inFront, tf, fail, frame); } else { fail.setText(""No valid Link""); new util.ShowLabelThread(fail, frame).start(); } } "	0	0	0	0	1	0
public T suggest(String suggestion) { return click(ActionClick.SUGGEST, suggestion); } 	0	0	0	0	1	0
public static PixelCoordinate boardToPixelCoordinate(BoardCoordinate bc) {  double width = 96.0 / Math.sqrt( 3.0 ); int x = ( int )( Math.round((bc.c + 7) * 0.75 * width + 0.5 * width ));  return new PixelCoordinate(x, 360); } 	0	0	0	0	1	0
"@Override public void run() { // triggers are always triggered on the cron, but we just no-op if we are using GitHub hooks. if (getUseGitHubHooks()) { logger.log(Level.FINE, ""Use webHooks is set, so not running trigger""); return; }  if ((helper != null && helper.isProjectDisabled()) || (_project != null && _project.isDisabled())) { logger.log(Level.FINE, ""Project is disabled, ignoring trigger run call""); return; }  if (helper == null) { logger.log(Level.SEVERE, ""Helper is null and Project is not disabled, unable to run trigger""); return; }   logger.log(Level.FINE, ""Running trigger for {0}"", project);  helper.run(); getDescriptor().save(); } "	0	0	0	0	1	0
@Override public LayoutParams generateLayoutParams(AttributeSet attrs) { return new LayoutParams(this.getContext(), attrs); } 	0	0	0	0	1	0
@Override public XAConnection createXAConnection() throws JMSException { return createXAConnection(null, null); } 	0	0	0	0	1	0
@Override public int compareTo(Entry another) { return CASE_INSENSITIVE_ORDER.compare(name, another.name); } 	1	0	1	1	1	0
@Override public int compare(final CommitFile lhs, final CommitFile rhs) { String lPath = lhs.getFilename(); final int lSlash = lPath.lastIndexOf('/'); if (lSlash != -1) lPath = lPath.substring(lSlash + 1);  String rPath = rhs.getFilename(); final int rSlash = rPath.lastIndexOf('/'); if (rSlash != -1) rPath = rPath.substring(rSlash + 1);  return CASE_INSENSITIVE_ORDER.compare(lPath, rPath); } 	0	0	1	1	1	0
protected void addTerms(String item, List<OntologyTerm> holder) { if (StringUtils.isNotBlank(item)) { OntologyTerm term = this.ontologyManager.resolveTerm(item); if (term != null) { holder.add(term); } } } 	0	0	0	1	0	0
"@Override public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException { req.setCharacterEncoding(""utf-8"");  try { String  appId       = this.getAppid(req); String  tm          = req.getParameter(TIMESTAMP); Long    timestamp   = tm!=null ? Long.valueOf(tm) : System.currentTimeMillis(); String  nonceStr    = req.getParameter(NONCE_STR); nonceStr    = nonceStr!=null ? nonceStr : this.crypto.bytesToHex(this.crypto.randomBytes(8)); String  url         = needString(req, URL);  this.checkAccess(url); TokenProvider t = this.getTokenProvider(appid); String ticket = this.getTicket(appId);  URLBuilder ub = new URLBuilder() .appendParam(""jsapi_ticket"" , ticket                ) .appendParam(""noncestr""     , nonceStr              ) .appendParam(""timestamp""    , timestamp.toString()  ) .appendParam(""url""          , url                   );  String signature = this.crypto.bytesToHex( this.crypto.SHA1Digest( ub.toString().getBytes(""utf-8"") ) );  this.response(resp, t, timestamp, nonceStr, signature); } catch(Exception ex) { this.onError(ex, req, resp); } } "	0	0	0	0	1	0
protected void preauth() throws KrbException { KdcReq request = getKdcReq();  if (!kdcContext.getConfig().isAllowTokenPreauth()) { return; }  PaData preAuthData = request.getPaData();  if (preauthContext.isPreauthRequired()) { if (preAuthData == null || preAuthData.isEmpty()) { KrbError krbError = makePreAuthenticationError(kdcContext); throw new KrbErrorException(krbError); } else { getPreauthHandler().verify(this, preAuthData); } }  setPreAuthenticated(true); } 	0	0	0	0	1	0
"protected void err(String msg) { System.err.println(""VideoExport error: "" + msg); System.exit(1); } "	0	0	0	0	1	0
"public boolean checkSignature(String body, String signature) { if (secret == null || StringUtils.isEmpty(secret.getPlainText())) { return true; }  if (signature != null && signature.startsWith(""sha1="")) { String expected = signature.substring(5); String algorithm = ""HmacSHA1""; try { SecretKeySpec keySpec = new SecretKeySpec(secret.getPlainText().getBytes(), algorithm); Mac mac = Mac.getInstance(algorithm); mac.init(keySpec); byte[] localSignatureBytes = mac.doFinal(body.getBytes(""UTF-8"")); String localSignature = Hex.encodeHexString(localSignatureBytes); if (! localSignature.equals(expected)) { logger.log(Level.SEVERE, ""Local signature {0} does not match external signature {1}"", new Object[] {localSignature, expected}); return false; } } catch (Exception e) { logger.log(Level.SEVERE, ""Couldn't match both signatures""); return false; } } else { logger.log(Level.SEVERE, ""Request doesn't contain a signature. Check that github has a secret that should be attached to the hook""); return false; }  logger.log(Level.INFO, ""Signatures checking OK""); return true; } "	0	0	0	0	1	0
"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { HttpSession session = request.getSession(false); UserBean user = (session != null) ? (UserBean) session.getAttribute(""user"") : null;  if (user == null) { response.sendRedirect(request.getContextPath() + ""/login""); } else { String status = (String) session.getAttribute(""status""); String message = (String) session.getAttribute(""message""); int result = session.getAttribute(""result"") != null ? (int) session.getAttribute(""result"") : -1;  if (status != null && message != null && result > -1) { request.setAttribute(""status"", status); request.setAttribute(""message"", message); request.setAttribute(""result"", result); session.setAttribute(""status"", null); session.setAttribute(""message"", null); session.setAttribute(""result"", null);  request.getRequestDispatcher(""test-result.jsp"").forward(request, response); } else { request.setAttribute(""status"", ""warning""); request.setAttribute(""message"", ""You can see the result after completing the test.""); request.getRequestDispatcher(""error-access.jsp"").forward(request, response);; } } } "	0	0	1	0	1	0
"@Override public void onSubscriberLocationReportResponse(SubscriberLocationReportResponse subscriberLocationReportResponse) {  if (logger.isDebugEnabled()) { logger.debug(String.format(""onSubscriberLocationReportResponse  for DialogId=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId())); } else { logger.info(String.format(""onSubscriberLocationReportResponse  for DialogId=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId())); }  try {  if (subscriberLocationReportResponse.getNaESRD() != null) { ISDNAddressString naEsrd = subscriberLocationReportResponse.getNaESRD(); String naESRDaddress = naEsrd.getAddress(); if (logger.isDebugEnabled()) { logger.debug(String.format(""Rx onSubscriberLocationReportResponse NaESRD = %s "" + naESRDaddress + ""for DialogId=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId()));  } else { logger.info(String.format(""Rx onSubscriberLocationReportResponse NaESRD: "" + subscriberLocationReportResponse.getNaESRD() + "", for DialogId=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId())); } } else { if (logger.isDebugEnabled()) { logger.debug(String.format( ""Rx onSubscriberLocationReportResponse, Incorrect NaESRD received for DialogId=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId())); } else { logger.info(String.format( ""Rx onSubscriberLocationReportResponse, Incorrect NaESRD received for DialogId=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId())); } }  if (subscriberLocationReportResponse.getNaESRK() != null) { ISDNAddressString naEsrk = subscriberLocationReportResponse.getNaESRD(); String naESRKaddress = naEsrk.getAddress(); if (logger.isDebugEnabled()) { logger.debug(String.format(""Rx onSubscriberLocationReportResponse NaESRK = %s "" + naESRKaddress + ""for DialogId=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId()));  } else { logger.info(String.format(""Rx onSubscriberLocationReportResponse NaESRK: "" + subscriberLocationReportResponse.getNaESRK() + "", for DialogId=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId())); } } else { if (logger.isDebugEnabled()) { logger.debug(String.format( ""Rx onSubscriberLocationReportResponse, Incorrect NaESRK received for DialogId=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId())); } else { logger.info(String.format( ""Rx onSubscriberLocationReportResponse, Incorrect NaESRK received for DialogId=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId())); } }  if (subscriberLocationReportResponse.getExtensionContainer() != null) { MAPExtensionContainer extContainer = subscriberLocationReportResponse.getExtensionContainer(); String mapExtensionContainer = extContainer.toString(); if (logger.isDebugEnabled()) { logger.debug(String.format(""Rx onSubscriberLocationReportResponse MAPExtensionContainer = %s "" + mapExtensionContainer + ""for DialogId=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId()));  } else { logger.info(String.format(""Rx onSubscriberLocationReportResponse MAPExtensionContainer: "" + subscriberLocationReportResponse.getExtensionContainer() + "", for DialogId=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId())); } } else { if (logger.isDebugEnabled()) { logger.debug(String.format( ""Rx onSubscriberLocationReportResponse, Incorrect MAPExtensionContainer received for DialogId=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId())); } else { logger.info(String.format( ""Rx onSubscriberLocationReportResponse, Incorrect MAPExtensionContainer received for DialogId=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId())); } }  } catch (Exception e) { logger.error(String.format(""Error while processing onProvideSubscriberLocationResponse for Dialog=%d"", subscriberLocationReportResponse.getMAPDialog().getLocalDialogId())); }  } "	0	0	1	0	0	0
"private void backupLocal(){ //已经备份中，直接返回 if (backuping) return; backuping = true; Toast.makeText(app.getApplicationContext(), getString(R.string.backup_local), Toast.LENGTH_SHORT).show(); mThreadExecutorPool.execute(() -> { List<SNote> notes = mFinalDb.findAllByWhere(SNote.class, "" type = 0""); mFileUtils.backupSNotes(notes); backuping = false; if (activity != null){ activity.runOnUiThread(() -> { Toast.makeText(app.getApplicationContext(), getString(R.string.backup_local_done), Toast.LENGTH_SHORT).show(); }); } }); } "	0	0	0	0	1	0
"@Test public void turnBackgroundSyncSwitchOff() { SettingsFragment settingsFragment = new SettingsFragment(); startFragment(settingsFragment); assertNotNull(settingsFragment); settingsFragment.background_sync.setChecked(true); settingsFragment.background_sync.performClick(); String message = ""Background sync is OFF""; assertEquals(message, settingsFragment.background_sync_status.getText()); assertEquals(""false"", settingsFragment.preferences.getString(BACKGROUND_SYNC, """")); } "	0	0	0	0	1	0
"@Override public void onCreate() { super.onCreate();  Map<String, Target> mappings = new HashMap<>(); mappings.put(""m.drakeet.me/home"", new Target(""floo://drakeet.sdk/target"")); mappings.put(""m.drakeet.me/link"", new Target(""floo://drakeet.sdk/target"")); mappings.put(""m.drakeet.me/web"", new Target(""floo://drakeet.sdk/web"")); mappings.put(""m.drakeet.me/container"", new Target(""demo://m.drakeet.me/container""));  Floo.configuration() .setDebugEnabled(BuildConfig.DEBUG) .addRequestInterceptor(new LogInterceptor(""Request"")) .addTargetInterceptor(new LogInterceptor(""Target"")) .addTargetNotFoundHandler(new WebHandler()) .addTargetNotFoundHandler(new OpenDirectlyHandler()) .addTargetNotFoundHandler(new TargetNotFoundToaster());  Floo.apply(mappings); } "	0	0	1	0	0	0
public boolean onCreateOptionsMenu(Menu menu) { MenuInflater inflater = getMenuInflater(); inflater.inflate(R.menu.main_menu, menu); return true;  } 	0	0	0	0	1	0
@Override public void process(String block) { try { outputStream.write(block.getBytes()); } catch (IOException e) { throw new IllegalStateException(e); } } 	0	0	1	0	1	0
public String textOf(int row, int col) { try { Component cellRendererComponent = getCellRendererComponent(row, col); if (isCheckboxRenderer(cellRendererComponent)) return new Boolean(((AbstractButton) cellRendererComponent).isSelected()).toString(); return coerceToWithText(cellRendererComponent).getText(); } catch (AllMethodsNotImplementedException e) { return wrapElementToWithText(row, col).getText(); } } 	0	0	0	0	1	0
"private static String getHostName(URI uri) throws URIException { StringBuilder host = new StringBuilder();  String scheme = uri.getScheme().toLowerCase(); host.append(scheme).append(""://"").append(uri.getHost());  int port = uri.getPort(); if (port != -1 && ((port == 80 && !""http"".equals(scheme)) || (port == 443 && !""https"".equals(scheme) || (port != 80 && port != 443)))) { host.append("":"").append(port); }  return host.toString(); } "	0	0	1	1	0	0
public void setType(String type) { storage.set(TYPE, type); } 	0	0	0	0	1	0
"public void setUser(Model uiModel){ org.springframework.security.core.userdetails.User user = Utilities.getCurrentUser(); uiModel.addAttribute(""userName"", user.getUsername()); com.sanyo.quote.domain.User userSanyo = userService.findByUserName(user.getUsername()); uiModel.addAttribute(""user"",userSanyo); } "	0	0	0	0	1	0
private void createBreakDownRow(XSSFSheet sheet, RowCount rowCount, int order){ rowCount.addMoreValue(1); Row row = sheet.createRow(rowCount.getRowCount()); rowCount.addMoreValue(1); Cell cell = row.createCell(1); cell.setCellValue(Constants.BREAK_DOWN); cell.setCellStyle(sampleCellStyle); updateCellStyleOfRowBoQ(row); } 	0	0	0	0	1	0
"private synchronized void blockLocalChannel() { if (!flowControlEnabled) { flowControlEnabled = true; listener.block(); scheduledFlowControlTimeoutFuture = executor.schedule(flowControlTimeoutTask, 1, TimeUnit.MINUTES);  log.info(""Flow control enabled for channel "" + id + "".""); } } "	0	0	0	0	1	0
"public CohortDefinition onCTX(){ Concept oi = Dictionary.getConcept(Dictionary.OI_TREATMENT_DRUG); Concept ctx = Dictionary.getConcept(Dictionary.SULFAMETHOXAZOLE_TRIMETHOPRIM);  CompositionCohortDefinition cd = new CompositionCohortDefinition(); cd.setName(""hiv patient on CTX""); cd.addParameter(new Parameter(""onOrAfter"", ""After Date"", Date.class)); cd.addParameter(new Parameter(""onOrBefore"", ""Before Date"", Date.class)); cd.addSearch(""enrolledHIV"", ReportUtils.map(commonCohorts.enrolled(MetadataUtils.existing(Program.class, Metadata.Program.HIV)),""enrolledOnOrAfter=${onOrAfter},enrolledOnOrBefore=${onOrBefore}"")); cd.addSearch(""enrolled"", ReportUtils.map(commonCohorts.enrolled(MetadataUtils.existing(Program.class, Metadata.Program.ART)),""enrolledOnOrBefore=${onOrBefore}"")); cd.addSearch(""hasctx"", ReportUtils.map(commonCohorts.hasObs(oi,ctx), ""onOrAfter=${onOrAfter},onOrBefore=${onOrBefore}"")); cd.setCompositionString(""enrolledHIV AND NOT enrolled AND hasctx""); return cd; } "	0	0	0	0	1	0
"@Override public boolean mousemoved(int x, int y) {  if (currentUser == null || currentUser.scarfplot == null) return false;  int timeLine = currentUser.timeToPixel(currentUser.currentTime); Rectangle r = new Rectangle(timeLine-3,heatmapYOffset-50,currentUser.cellWidth+3,heatmapYOffset+currentUser.scarfplot.getHeight());  int ps = currentUser.timeToPixel(currentUser.timePeriodStart); Rectangle rps = new Rectangle(ps-3,heatmapYOffset-50,currentUser.cellWidth+3,heatmapYOffset+currentUser.scarfplot.getHeight()); int pe = currentUser.timeToPixel(currentUser.timePeriodEnd); Rectangle rpe = new Rectangle(pe-3,heatmapYOffset-50,currentUser.cellWidth+3,heatmapYOffset+currentUser.scarfplot.getHeight());  if (r.contains(new Point(x,y))) timeLineHovered = new Point(x,y); else{ timeLineHovered = null;  if (rps.contains(new Point(x,y))) startPeriodHovered = new Point(x,y); else startPeriodHovered = null;  if (rpe.contains(new Point(x,y))) endPeriodHovered = new Point(x,y); else endPeriodHovered = null; }  this.setToolTipText("""");  //		dataObjectHovered = -1; //		for (int i=0; currentUser.viewedObjects != null && i<currentUser.viewedObjects.size(); i++){ //			r = new Rectangle(0, heatmapYOffset+currentUser.cellHeight*i, currentUser.heatmapXOffset+currentUser.scarfplot.getWidth(),currentUser.cellHeight); //			if (r.contains(new Point(x,y))){ //				dataObjectHovered = i; ////				this.setToolTipText(currentUser.viewedObjects.get(i).label); //			} //		}  dataObjectHovered = -1; for (int i=0; i< users.size(); i++){ r = new Rectangle(0, heatmapYOffset+currentUser.cellHeight*i, currentUser.heatmapXOffset+currentUser.scarfplot.getWidth(),currentUser.cellHeight); if (r.contains(new Point(x,y))){ dataObjectHovered = i; this.setToolTipText(users.get(i).name); } } // //		Rectangle[] vr = this.getViewEventRectangles(); //		for (int i=0; i<vr.length; i++) //		{ //			if (vr[i].contains(new Point(x,y))) //			{ //				this.setToolTipText(currentUser.viewEvents.get(i).view); //			} // //		} // // //		Rectangle[] hr = this.getHoverEventRectangles(); //		for (int i=0; i<hr.length; i++) //		{ //			if (hr[i].contains(new Point(x,y))) //			{ //				this.setToolTipText(currentUser.hoverEvents.get(i).target.label); //			} //		}     requestRender(); return false; } "	0	0	0	0	1	0
"public static Processor fromType(String type, String format) { for (Processor item : values()) { if (item.isType(type, format)) { return item; } } LOGGER.error(""no property for "" + type + "", "" + format); return null; } "	0	0	1	0	1	0
public ErrorDescriptor getDescriptor() throws IOException { Gson gson = GsonFactory.create(); InputStream stream = response.body().byteStream(); InputStreamReader reader = new InputStreamReader(stream); try { return gson.fromJson(reader, ErrorDescriptor.class); } catch (JsonParseException ex) { return null; } } 	0	0	0	0	1	0
public void addValue(int value) { if (mValues!=null) mValues.add(value); } 	0	0	1	0	1	0
"@Test public void testSingle() throws IOException, StructureException { testAll(Arrays.asList(""2trx"")); } "	0	0	0	0	1	0
"@Test public void testAddHighScore() throws JAXBException, IOException { highScore.loadHighScores();  // add a new highScore highScore.addHighScore(newScore, ""Jan"");  File highScoreFile = new File(""highscores.xml""); assertTrue(highScoreFile.exists()); assertTrue(highScoreFile.length() > 0);  HighScore newHighScore = new HighScore(); newHighScore.loadHighScores(); assertTrue(newHighScore.getHighScores().containsValue(""Jan"")); assertTrue(newHighScore.getHighScores().containsKey(newScore)); assertTrue(newHighScore.getHighScores().size() <= 5);  // copy testHighscores.xml to highscores.xml Files.copy(testHighScores, highScores, StandardCopyOption.REPLACE_EXISTING); } "	0	0	0	0	1	0
"@Override public String toString() { return name + "" took "" + ((System.currentTimeMillis() - time) / 1000d) + "" seconds""; } "	0	0	0	0	1	0
"public void parse() { try { NameTable.define(full_name(), IDLTypes.MODULE); } catch (NameAlreadyDefined nad) { parser.error(""Module name "" + full_name() + "" already defined"", token); } spec.parse(); } "	0	0	0	0	1	0
@Override public MCRObjectID convertToEntityAttribute(String id) { return MCRObjectID.getInstance(id); } 	1	0	1	1	1	0
"void gotoState(@Nonnull ConnectivityState newState) { checkNotNull(newState, ""newState""); checkState(state != null, ""ConnectivityStateManager is already disabled""); gotoNullableState(newState); } "	0	0	0	0	1	0
public String getFile() { return tester.fileToTest.getName(); } 	0	0	0	0	1	0
public void remove(int columnNumber) { // remove the top card from the indicated column //Check if empty if(!columnNumber){ removeCardFormCol(columnNumber); } //Otherwise just exit } 	0	0	0	0	1	0
public static int getMuteOption(EntityPlayer playerIn) { return playerIn != null ? playerIn.getCapability(MUSIC_OPTIONS, null).getMuteOption() : MusicOptionsUtil.EnumMuteOptions.OFF.getMetadata(); } 	1	0	1	1	1	0
public static void setBlackList(EntityPlayer playerIn, List<PlayerLists> blackList) { if (playerIn != null) playerIn.getCapability(MUSIC_OPTIONS, null).setBlackList(playerIn, blackList); } 	1	0	0	0	1	0
"public static String getSParam2(EntityPlayer playerIn) { return playerIn != null ? playerIn.getCapability(MUSIC_OPTIONS, null).getSParam2() : """"; } "	1	0	1	1	1	0
"public static String getSParam1(EntityPlayer playerIn) { return playerIn != null ? playerIn.getCapability(MUSIC_OPTIONS, null).getSParam1() : """"; } "	1	0	1	1	1	0
public static boolean isHudDisabled(EntityPlayer playerIn) { return playerIn != null ? playerIn.getCapability(MUSIC_OPTIONS, null).isHudDisabled() : false; } 	1	0	1	1	1	0
public static List<PlayerLists> getWhiteList(EntityPlayer playerIn) { return playerIn!= null ? playerIn.getCapability(MUSIC_OPTIONS, null).getWhiteList() : Collections.emptyList(); } 	1	0	1	1	1	0
"private void updateNub(NubUsage nub, SrcUsage u, Origin origin, NubUsage parent) { if (nub.status.isSynonym() != u.status.isSynonym()) { return; } LOG.debug(""Updating {} from source {}"", nub.parsedName.getScientificName(), u.scientificName); nub.sourceIds.add(u.key); if (origin == Origin.SOURCE) { // only override original origin value if we update from a true source nub.origin = Origin.SOURCE; } nub.authors.add(u.parsedName.authorshipComplete()); if (!u.parsedName.authorshipComplete().isEmpty() && nub.parsedName.authorshipComplete().isEmpty()) { nub.parsedName.setAuthorship(u.parsedName.getAuthorship()); nub.parsedName.setYear(u.parsedName.getYear()); nub.parsedName.setBracketAuthorship(u.parsedName.getBracketAuthorship()); nub.parsedName.setBracketYear(u.parsedName.getBracketYear()); nub.parsedName.setAuthorsParsed(true); } if (nub.publishedIn == null) { nub.publishedIn = u.publishedIn; } if (nub.nomStatus.isEmpty()) { nub.addNomStatus(u.nomStatus); } NubUsage currNubParent = db.getParent(nub); if (parent != null && currNubParent.rank.higherThan(parent.rank) ) { if (db.existsInClassification(parent.node, currNubParent.node)) { LOG.debug(""Update {} classification with new parent {} {}"", nub.parsedName.getScientificName(), parent.rank, parent.parsedName.getScientificName()); db.updateParentRel(nub.node, parent.node); } } db.store(nub); } "	0	0	0	0	1	0
"@Override public AddPersistedFaceResult addPersonFace(String personGroupId, UUID personId, InputStream imageStream, String userData, FaceRectangle targetFace) throws ClientException, IOException { Map<String, Object> params = new HashMap<>();  String path = String.format(""%s/%s/%s/%s/%s/%s"", mServiceHost, PERSON_GROUPS_QUERY, personGroupId, PERSONS_QUERY, personId, PERSISTED_FACES_QUERY); if (userData != null && userData.length() > 0) { params.put(""userData"", userData); }  if (targetFace != null) { String targetFaceString = String.format(""%1d,%2d,%3d,%4d"", targetFace.left, targetFace.top, targetFace.width, targetFace.height); params.put(""targetFace"", targetFaceString); }  String uri = WebServiceRequest.getUrl(path, params);  ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); int bytesRead; byte[] bytes = new byte[1024]; while ((bytesRead = imageStream.read(bytes)) > 0) { byteArrayOutputStream.write(bytes, 0, bytesRead); } byte[] data = byteArrayOutputStream.toByteArray(); params.clear(); params.put(DATA, data);  String json = (String)mRestCall.request(uri, RequestMethod.POST, params, STREAM_DATA); return mGson.fromJson(json, AddPersistedFaceResult.class); } "	0	0	0	0	1	0
void runReconnectOnNewThread(final Callback callback, final String name, final JSONArray jsa) { Runnable r = new Runnable() { public void run() { callback.disconnectCallback(name, jsa); } }; PnThread thread = new PnThread(r); thread.setPnDaemon(Pubnub.daemonThreads); thread.start(); } 	0	0	1	0	1	0
"public void markIndexesInCatalog(@Nonnull final RelationKey relation, @Nonnull final List<IndexRef> indexes) throws CatalogException { Objects.requireNonNull(relation, ""relation""); Objects.requireNonNull(indexes, ""indexes""); if (isClosed) { throw new CatalogException(""Catalog is closed.""); }  /* Do the work */ for (int i = 0; i < indexes.size(); i++) { final int indexID = i; try { queue.execute(new SQLiteJob<Void>() { @Override protected Void job(final SQLiteConnection sqliteConnection) throws CatalogException, SQLiteException { try { SQLiteStatement statement = sqliteConnection .prepare(""UPDATE relations_schema SET is_indexed=1 WHERE user_name=? AND program_name=? AND relation_name=? AND col_index=?;""); statement.bind(1, relation.getUserName()); statement.bind(2, relation.getProgramName()); statement.bind(3, relation.getRelationName()); statement.bind(4, indexes.get(indexID).getColumn()); statement.stepThrough(); statement.dispose(); statement = null;  } catch (final SQLiteException e) { throw new CatalogException(e); } return null; } }).get(); } catch (InterruptedException | ExecutionException e) { throw new CatalogException(e); } } } "	0	0	1	0	0	0
private void updateOrganismInfo(boolean forceReload) { OrganismRestService.updateOrganismInfo(selectedOrganismInfo,forceReload); } 	0	0	0	0	1	0
@Override protected void configure() { bind(AMQPSession.class); //    bind(Properties.class); bind(RabbitMQManager.class); if (!properties.hasListenAs()) { // No listenAs to filter events against. Register an unrestricted ChangeListener DynamicSet.bind(binder(), ChangeListener.class).to(RabbitMQManager.class); } DynamicSet.bind(binder(), LifecycleListener.class).to(RabbitMQManager.class); } 	0	0	0	0	1	0
"public static SequenceModel train(float alpha, int iter){ SequenceModel nerModel = new SequenceModel(); Map<String,String> train = EmailUtils.readDBpedia(1.0); //This split is essential to isolate some entries that trained model has not seen //Do the train and test splits only in a controlled environment, creating a new copy of DBpedia is costly  //split the dictionary into train and test sets Set<String> fts = new LinkedHashSet<>(); fts.add(WordSurfaceFeature.WORDS); FeatureDictionary dictionary = new FeatureDictionary(train, alpha, iter); nerModel.dictionary = dictionary; //        try { //            String mwl = System.getProperty(""user.home"")+File.separator+""epadd-settings""+File.separator; //            String modelFile = mwl + SequenceModel.modelFileName; //            nerModel.writeModel(new File(modelFile)); //            ////also write the test split //            //String twl = System.getProperty(""user.home"")+File.separator+""epadd-settings""+File.separator+""SeqModel-test.en.txt.bz2""; //            //if(!new File(twl).exists()) { //            //OutputStreamWriter osw = new OutputStreamWriter(new BZip2CompressorOutputStream(new FileOutputStream(new File(twl)))); //            //int numTest = 0; //            //for (String str : test.keySet()) { //            //String orig = str; //            //str = str.replaceAll("" "", ""_""); //            //osw.write(str + "" "" + test.get(orig) + ""\n""); //            //numTest++; //            //} //            //osw.close(); //            //System.err.println(""Wrote ""+numTest+"" records in test split to: ""+twl); //            //} //        }catch(IOException e){ //            e.printStackTrace(); //        } return nerModel; } "	0	0	0	0	1	0
"private void draw(BinnedOccurenceEntity binnedData) { GraphicsContext gc		= canvas.getGraphicsContext2D(); int binMatrix[][]		= binnedData.getBinMatrix(); int minOccurenceCount	= binnedData.getMinOccurenceCount(); int maxOccurenceCount	= binnedData.getMaxOccurenceCount();  // Set axis label values. xAxis.setLowerBound(binnedData.getMin_key1()); xAxis.setUpperBound(binnedData.getMax_key1()); yAxis.setLowerBound(binnedData.getMin_key2()); yAxis.setUpperBound(binnedData.getMax_key2()); // Adjust tick width. final int numberOfTicks = binMatrix.length; xAxis.setTickUnit( (binnedData.getMax_key1() - binnedData.getMin_key1()) / numberOfTicks); yAxis.setTickUnit( (binnedData.getMax_key2() - binnedData.getMin_key2()) / numberOfTicks); xAxis.setMinorTickCount(4); yAxis.setMinorTickCount(4);  // Clear canvas. gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());  // Calculate cell width and height (a quadratic matrix is assumed). final double cellWidth	= canvas.getWidth() / binMatrix.length; final double cellHeight	= canvas.getHeight() / binMatrix.length;  // Draw each cell in its corresponding place. for (int i = 0; i < binMatrix.length; i++) { for (int j = 0; j < binMatrix[i].length; j++) { // Set color for this cell. Color cellColor = ColorScale.getColorForValue(binMatrix[i][j], minOccurenceCount, maxOccurenceCount); gc.setStroke(cellColor); gc.setFill(cellColor);  // Draw cell. gc.fillRect(cellWidth * i, cellHeight * j, cellWidth, cellHeight); } } } "	0	0	1	1	1	0
"@Test public void checkNoSnapshotRepo() throws IOException, XmlPullParserException { final MavenProject mavenProject = createMavenProjectFromPom(""DistributionManagementCheckTest-NoSnapshotRepo-pom.xml""); final DistributionManagementCheck check = new DistributionManagementCheck(); final Iterable<PomIssue> pomIssues = check.analyze(mavenProject);  assertThat(Iterables.size(pomIssues), is(1)); PomIssue pomIssue = Iterables.getOnlyElement(pomIssues); assertThat(pomIssue.ruleKey(), is(""distribution-management-by-category"")); assertThat(pomIssue.message(), is(""Distribution Management is missing required <snapshotRepository> configuration."")); } "	0	0	0	0	1	0
@Test public void equalityRequiresTheSameMissingValue() { final IntHashSet other = new IntHashSet(100, 1); assertNotEquals(obj, other); } 	0	0	0	0	1	0
@Test public void removingAnElementFromAnEmptyListDoesNothing() { assertFalse(obj.remove(0)); } 	0	0	0	0	1	0
@Override public Object execute(TransitionSystem ts, Unifier un, Term[] args) throws Exception { checkArguments(args); Calendar now = new GregorianCalendar(); return un.unifies(args[0], new NumberTermImpl(now.get(Calendar.YEAR))) && un.unifies(args[1], new NumberTermImpl(now.get(Calendar.MONTH))) && un.unifies(args[2], new NumberTermImpl(now.get(Calendar.DAY_OF_MONTH))); } 	1	1	1	1	0	0
"@Override public void write(PacketDataSerializer s) { if(channel != null) s.writeString(channel); try{ data.readerIndex(0); int length = data.readableBytes(); s.ensureWritable(length, true); s.writeBytes(data, length); data.release(); }catch(Exception e){ System.out.println(""out - Buffer: ""+data+"" - ""+length); throw e; } } "	0	0	1	1	1	0
"private void crawlPublisher(final UUID orgKey) throws IOException, InterruptedException { final OrganizationService orgService = cfg.registry.createRegistryInjector().getInstance(OrganizationService.class); final PagingRequest page = new PagingRequest(0, 10); PagingResponse<Dataset> resp = null; int counter = 0; while (resp == null || !resp.isEndOfRecords()) { resp = orgService.publishedDatasets(orgKey, page); for (Dataset d : resp.getResults()) { counter++; LOG.info(""Crawl {} - {}: {}"", counter, d.getKey(), d.getTitle()); publisher.send( new StartCrawlMessage(d.getKey())); } Thread.sleep(10000); page.nextPage(); } } "	0	0	1	1	1	0
"public static JSONObject fetchResults(String requestUrl, String operation) { JSONObject itemlookup = new JSONObject(true); try { DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db = dbf.newDocumentBuilder(); Document doc = db.parse(requestUrl); DOMSource domSource = new DOMSource(doc); StringWriter writer = new StringWriter(); StreamResult result = new StreamResult(writer); TransformerFactory tf = TransformerFactory.newInstance(); Transformer transformer = tf.newTransformer(); transformer.transform(domSource, result); JSONObject xmlresult = new JSONObject(true); xmlresult = XML.toJSONObject(writer.toString()); JSONObject items = xmlresult.getJSONObject(operation).getJSONObject(""Items""); if (items.getJSONObject(""Request"").has(""Errors"")) { itemlookup.put(""status"", ""error""); itemlookup.put(""reason"", items.getJSONObject(""Request"").getJSONObject(""Errors"").getJSONObject(""Error"").get(""Message"")); return itemlookup; } itemlookup.put(""number_of_items"", (operation.equals(""ItemLookupResponse"") ? ""1"" : (items.getJSONArray(""Item"").length()))); itemlookup.put(""list_of_items"", items); } catch (Exception e) { itemlookup.put(""status"", ""error""); itemlookup.put(""reason"", e); return itemlookup; } return itemlookup; } "	0	0	1	1	0	0
"public void execute() { for (String tc = commandCache.getNextTestCase(); tc != null; tc = commandCache.getNextTestCase()) { if (RuntimeParameters.getAbortTestScheduleBool()) { break; } ivctCommander.rtp.startTestCase(tc);  this.ivctCommander.acquireSemaphore(); } ivctCommander.addTestSessionSeparator(); RuntimeParameters.setAbortTestScheduleBool(false); ivctCommander.rtp.setTestScheduleRunningBool(false); System.out.println(""Test schedule finished: "" + commandCache.getTestschedule()); } "	0	0	0	0	1	0
"public Optional<SoP> getApplicableSop(Condition condition, ServiceHistory serviceHistory, Predicate<Deployment> isOperational, CaseTrace caseTrace) {  Optional<Rank> relevantRank = ProcessingRuleFunctions.getRankProximateToDate(serviceHistory.getServices(),condition.getStartDate(),caseTrace); if (!relevantRank.isPresent()) { caseTrace.addReasoningFor(ReasoningFor.ABORT_PROCESSING, ""Cannot determine the relevant rank, therefore cannot apply STP rules to determine the applicable SoP.""); return Optional.empty(); }  Optional<Service> serviceDuringWhichConditionStarts =  ProcessingRuleFunctions.identifyServiceDuringOrAfterWhichConditionOccurs(serviceHistory.getServices(),condition.getStartDate(), caseTrace); if (!serviceDuringWhichConditionStarts.isPresent()) { caseTrace.addReasoningFor(ReasoningFor.ABORT_PROCESSING, ""Cannot find any Service during or after which the condition started, therefore there is no applicable SoP.""); return Optional.empty(); }  Optional<RHRuleConfigurationItem> rhRuleConfigurationItemOptional = getRelevantRHConfiguration( condition.getSopPair().getConditionName(), relevantRank.get(), serviceDuringWhichConditionStarts.get().getBranch(), ruleConfigurationRepository);  if (!rhRuleConfigurationItemOptional.isPresent()) { caseTrace.addReasoningFor(ReasoningFor.ABORT_PROCESSING, String.format(""Cannot find any rule for Reasonable Hypothesis for the condition of %s, for the rank of %s, for the service branch of %s.  Therefore, cannot determine whether BoP or RH SoP applies."", condition.getSopPair().getConditionName(), relevantRank.get(), serviceDuringWhichConditionStarts.get().getBranch())); return Optional.empty(); }  RHRuleConfigurationItem rhRuleConfigurationItem = rhRuleConfigurationItemOptional.get();  OffsetDateTime startDateForPeriodOfOperationalService = condition.getStartDate().minusYears(rhRuleConfigurationItem.getYearsLimitForOperationalService()); caseTrace.addLoggingTrace(String.format(""The start date for the test period of operational service is %s years before the condition start date of %s: %s."", rhRuleConfigurationItem.getRequiredDaysOfOperationalService(), condition.getStartDate(), startDateForPeriodOfOperationalService)); OffsetDateTime endDateForPeriodOfOperationalService = condition.getStartDate(); caseTrace.addLoggingTrace(""The end date for the test period of operational service is the condition start date: "" + condition.getStartDate()); Long daysOfOperationalService = ProcessingRuleFunctions.getNumberOfDaysOfOperationalServiceInInterval( startDateForPeriodOfOperationalService,endDateForPeriodOfOperationalService, ProcessingRuleFunctions.getDeployments(serviceHistory), isOperational, caseTrace);  if (daysOfOperationalService >= Integer.MAX_VALUE) { throw new ProcessingRuleError(""Cannot handle days of operational service more than "" + Integer.MAX_VALUE);  // for the appeasement of find bugs } caseTrace.setActualOperationalDays(daysOfOperationalService.intValue());  Integer minimumRequiredDaysOfOperationalServiceForRank = rhRuleConfigurationItem.getRequiredDaysOfOperationalService(); caseTrace.addReasoningFor(ReasoningFor.STANDARD_OF_PROOF, ""Required number of days of operational service for Reasonable Hypothesis: "" + minimumRequiredDaysOfOperationalServiceForRank); caseTrace.setRequiredOperationalDaysForRh(minimumRequiredDaysOfOperationalServiceForRank); caseTrace.addReasoningFor(ReasoningFor.STANDARD_OF_PROOF, ""Actual number of days of operational service: "" + daysOfOperationalService);  if (minimumRequiredDaysOfOperationalServiceForRank.longValue() <= daysOfOperationalService) { caseTrace.addLoggingTrace(""The RH SoP is applicable as the actual number of days of operational service in the test period is greater than or equal to the required number.""); caseTrace.setApplicableStandardOfProof(StandardOfProof.ReasonableHypothesis); return Optional.of(condition.getSopPair().getRhSop()); } else { caseTrace.addLoggingTrace(""The BoP SoP is applicable as the actual number of days of operational service in the test period is less than the required number.""); caseTrace.setApplicableStandardOfProof(StandardOfProof.BalanceOfProbabilities); return Optional.of(condition.getSopPair().getBopSop()); } } "	0	0	0	0	0	1
"protected void loadTestData() { NSpec s = new NSpec(); s.setName(""http""); s.setServiceClass(""foam.nano.http.HttpServer""); serviceDAO_.put(s); } "	0	0	0	0	1	0
"public ItemInformationResponse buildItemInformationResponse(ItemResponse itemResponse) { ItemInformationResponse itemInformationResponse = new ItemInformationResponse(); ItemData itemData = itemResponse.getItemData(); itemInformationResponse.setItemBarcode((String) itemData.getBarcode()); itemInformationResponse.setBibID(itemData.getBibIds().get(0)); itemInformationResponse.setBibIds(itemData.getBibIds()); itemInformationResponse.setCallNumber((String) itemData.getCallNumber()); itemInformationResponse.setItemType((String) itemData.getItemType()); itemInformationResponse.setSource(itemData.getNyplSource()); itemInformationResponse.setUpdatedDate(formatFromSipDate(itemData.getUpdatedDate())); itemInformationResponse.setCreatedDate(formatFromSipDate(itemData.getCreatedDate())); itemInformationResponse.setDeletedDate(formatFromSipDate((String) itemData.getDeletedDate())); itemInformationResponse.setDeleted(itemData.getDeleted() != null ? (Boolean) itemData.getDeleted() : false); if (null != itemData.getStatus()) { itemInformationResponse.setDueDate(formatFromSipDate((String) ((LinkedHashMap) itemData.getStatus()).get(""dueDate""))); itemInformationResponse.setCirculationStatus((String) ((LinkedHashMap) itemData.getStatus()).get(""display"")); } if (null != itemData.getLocation()) { itemInformationResponse.setCurrentLocation((String) ((LinkedHashMap) itemData.getLocation()).get(""name"")); } itemInformationResponse.setSuccess(true); return itemInformationResponse; } "	0	0	0	0	1	0
"@Path( ""/urlmap"" ) @Produces( { ""application/json"", ""application/indy*+json"" } ) @POST public UrlMapResult getUrlMap( final RepositoryContentRequest request, final @Context UriInfo uriInfo ) { try { final String baseUri = uriInfo.getAbsolutePathBuilder().path( ""api"" ).build().toString();  return controller.getUrlMap( request, baseUri, new JaxRsUriFormatter() ); } catch ( final IndyWorkflowException e ) { logger.error( e.getMessage(), e ); throwError( e ); }  return null; } "	0	0	0	0	1	0
"@Override public void visitTypeVariable(final String name) { if (type != TYPE_SIGNATURE || state != EMPTY) { throw new IllegalStateException(); } CheckMethodAdapter.checkIdentifier(name, ""type variable""); state = SIMPLE_TYPE; if (sv != null) { sv.visitTypeVariable(name); } } "	0	0	1	1	1	0
"@Override public void visitFormalTypeParameter(final String name) { if (type == TYPE_SIGNATURE || (state != EMPTY && state != FORMAL && state != BOUND)) { throw new IllegalStateException(); } CheckMethodAdapter.checkIdentifier(name, ""formal type parameter""); state = FORMAL; if (sv != null) { sv.visitFormalTypeParameter(name); } } "	0	0	1	1	1	0
"public void bind (IntraUserInformation data){ if (data.getPublicKey() != null) {  username.setText(data.getName());  if (data.getCity()!=null||data.getCountry()!=null) location.setText(data.getCountry()+"", ""+data.getCity()); else location.setText(""No Location"");  if (data.getProfileImage() != null && data.getProfileImage().length > 0) { Bitmap bitmap = BitmapFactory.decodeByteArray(data.getProfileImage(), 0, data.getProfileImage().length); bitmap = Bitmap.createScaledBitmap(bitmap, 120, 120, true); imageView_avatar.setImageDrawable(ImagesUtils.getRoundedBitmap(res, bitmap));  } } } "	0	0	0	0	1	0
"@Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState);  toolbar.setTitle(""UserInfoTabs""); // Create the adapter that will return a fragment for each of the three // primary sections of the activity. mSectionsPagerAdapter = new SectionsPagerAdapter(mManager, mFetcher, mSectionCardListener, mArticleListener);  mViewPager.setAdapter(mSectionsPagerAdapter);  tabLayout.setupWithViewPager(mViewPager); } "	0	0	0	0	1	0
"private void createCameraPreviewSession() { try { final SurfaceTexture texture = textureView.getSurfaceTexture(); assert texture != null;  // We configure the size of default buffer to be the size of camera preview we want. texture.setDefaultBufferSize(previewSize.getWidth(), previewSize.getHeight());  // This is the output Surface we need to start preview. final Surface surface = new Surface(texture);  // We set up a CaptureRequest.Builder with the output Surface. previewRequestBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW); previewRequestBuilder.addTarget(surface);  LOGGER.i(""Opening camera preview: "" + previewSize.getWidth() + ""x"" + previewSize.getHeight());  // Create the reader for the preview frames. previewReader = ImageReader.newInstance( previewSize.getWidth(), previewSize.getHeight(), ImageFormat.YUV_420_888, 2);  previewReader.setOnImageAvailableListener(tfPreviewListener, backgroundHandler); previewRequestBuilder.addTarget(previewReader.getSurface());  // Here, we create a CameraCaptureSession for camera preview. cameraDevice.createCaptureSession( Arrays.asList(surface, previewReader.getSurface()), new CameraCaptureSession.StateCallback() {  @Override public void onConfigured(final CameraCaptureSession cameraCaptureSession) { // The camera is already closed if (null == cameraDevice) { return; }  // When the session is ready, we start displaying the preview. captureSession = cameraCaptureSession; try { // Auto focus should be continuous for camera preview. previewRequestBuilder.set( CaptureRequest.CONTROL_AF_MODE, CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE); // Flash is automatically enabled when necessary. previewRequestBuilder.set( CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH);  // Finally, we start displaying the camera preview. previewRequest = previewRequestBuilder.build(); captureSession.setRepeatingRequest( previewRequest, captureCallback, backgroundHandler); } catch (final CameraAccessException e) { LOGGER.e(e, ""Exception!""); } }  @Override public void onConfigureFailed(final CameraCaptureSession cameraCaptureSession) { showToast(""Failed""); } }, null); } catch (final CameraAccessException e) { LOGGER.e(e, ""Exception!""); }  LOGGER.i(""Getting assets.""); tfPreviewListener.initialize( getActivity().getAssets(), scoreView, inferenceHandler, sensorOrientation); LOGGER.i(""Tensorflow initialized.""); } "	0	0	1	1	1	0
"private static Database parseArgs(String[] args) { try { // parse the command line arguments CommandLine line = parser.parse(optionList, args);  // validate that file's Path has been set if (line.hasOption(""filePath"")) { try { Database database = new Database( line.getOptionValue(""filePath"")); // print the value of filePath logger.info(""Opening file at "" + line.getOptionValue(""filePath"")); return database; } catch (Exception e) { logger.info(""Something is wrong with your file""); System.exit(1); } }  // validate that help has been set if (line.hasOption(""help"")) { printHelp(optionList); } return null; }  catch (org.apache.commons.cli.ParseException e) { logger.info(ErrorMessage.OPTION_NOT_FOUND); printHelp(optionList); } return null;  } "	0	0	0	0	1	0
"protected void deleteLivreur(HttpServletRequest request, HttpServletResponse response) throws IOException { this.livreurService.delete(request.getParameter(""id"")); response.sendRedirect(request.getContextPath() + ""/livreurs/list""); } "	0	0	0	0	1	0
"@Override public void didDetermineStateForRegion(int i, Region region) {  if(i==MonitorNotifier.INSIDE) { try { beaconManager.startRangingBeaconsInRegion(region); } catch (RemoteException e) { e.printStackTrace(); } Log.i(""BEACON_MANAGER_ADAPTER"", ""Beacons are visible in the region""); } else{ try { beaconManager.stopRangingBeaconsInRegion(region); } catch (RemoteException e) { e.printStackTrace(); } Log.i(""BEACON_MANAGER_ADAPTER"", ""No beacons are visible in the region""); }  } "	0	0	0	0	1	0
"@NonNull @Override public Dialog onCreateDialog(Bundle savedInstanceState) { AlertDialog.Builder builder = new AlertDialog.Builder(getActivity()); // Get the layout inflater LayoutInflater inflater = getActivity().getLayoutInflater(); View v = inflater.inflate(R.layout.fragment_add_item_dialog, null);  ButterKnife.bind(this, v);  // Get the current quadrant selectedQuadrant = listener.getQuadrant();  // Select the Quadrant selectQuadrant(selectedQuadrant);  // Set the click listeners for all the ToggleButtons quadOne.setOnClickListener(e -> selectQuadrant(0)); quadTwo.setOnClickListener(e -> selectQuadrant(1)); quadThree.setOnClickListener(e -> selectQuadrant(2)); quadFour.setOnClickListener(e -> selectQuadrant(3));  // Inflate and set the layout for the dialog // Pass null as the parent view because its going in the dialog layout builder.setView(v) // Add action buttons .setPositiveButton(""Add Item"", null) .setNegativeButton(""Cancel"", (dialog, id) -> AddItemDialogFragment.this.getDialog() .cancel());  Dialog dialog = builder.create();  dialog.setOnShowListener(dialog1 -> { Button button = ((AlertDialog) dialog1).getButton(AlertDialog.BUTTON_POSITIVE); button.setOnClickListener(AddItemDialogFragment.this); });  return dialog; } "	0	0	0	0	1	0
"@Test public void testGetInitiativeListByStatus() { List<Initiative> iList = new ArrayList<>(); iList = il.getInitiativeListByStatus(""Individual"", ""Active""); for (Initiative i : iList) { assertNotNull(i.getInitiativeId()); assertNotNull(i.getInitiativeCategory()); assertNotNull(i.getInitiativeName()); assertNotNull(i.getInitiativeStatus()); assertNotNull(i.getInitiativeComment()); assertNotNull(i.getInitiativeMetrics()); assertNotNull(i.getInitiativeEndDate()); assertNotNull(i.getInitiativeStartDate()); assertNotNull(i.getInitiativeCreationDate()); assertNotNull(i.getOwnerOfList()); if (i.getInitiativeCategory().equalsIgnoreCase(""Team"")) { assertNotNull(i.getFilterList()); } else { assertNotNull(i.getPartOfEmployeeList()); } } } "	0	0	1	0	1	0
private void clearUnusedNibble() { if (nibbles_ptr.size() % 2 == 1) { nibbles_ptr.set(lengthOf().getInt() / 2, (byte) (nibbles_ptr.get(lengthOf().getInt() / 2) & 0x0F)); } } 	0	0	1	1	1	0
"public TitanHexString and4b(final TitanHexString_Element otherValue) { mustBound(""Left operand of operator and4b is an unbound hexstring value.""); otherValue.mustBound(""Right operand of operator and4b is an unbound hexstring element."");  if (lengthOf().getInt() != 1) { throw new TtcnError(""The hexstring operands of operator and4b must have the same length.""); } byte result = (byte) (get_nibble(0) & otherValue.get_nibble());  return new TitanHexString(result); } "	0	0	0	0	1	0
"@Test public void testInsertRetry() throws IOException { TableReference ref = new TableReference().setProjectId(""project"").setDatasetId(""dataset"").setTableId(""table""); List<TableRow> rows = new ArrayList<>(); rows.add(new TableRow());  // First response is 403 rate limited, second response has valid payload. when(response.getContentType()).thenReturn(Json.MEDIA_TYPE); when(response.getStatusCode()).thenReturn(403).thenReturn(200); when(response.getContent()) .thenReturn(toStream(errorWithReasonAndStatus(""rateLimitExceeded"", 403))) .thenReturn(toStream(new TableDataInsertAllResponse()));  BigQueryTableInserter inserter = new BigQueryTableInserter(bigquery);  inserter.insertAll(ref, rows); verify(response, times(2)).getStatusCode(); verify(response, times(2)).getContent(); verify(response, times(2)).getContentType(); expectedLogs.verifyInfo(""BigQuery insertAll exceeded rate limit, retrying""); } "	0	0	0	0	1	0
"@Override public List<TableDataInsertAllResponse.InsertErrors> call() throws IOException { BackOff backoff = new IntervalBoundedExponentialBackOff( MAX_RATE_LIMIT_EXCEEDED_BACKOFF_MS, INITIAL_RATE_LIMIT_EXCEEDED_BACKOFF_MS); while (true) { try { return insert.execute().getInsertErrors(); } catch (IOException e) { if (new ApiErrorExtractor().rateLimited(e)) { LOG.info(""BigQuery insertAll exceeded rate limit, retrying""); try { Thread.sleep(backoff.nextBackOffMillis()); } catch (InterruptedException interrupted) { Thread.currentThread().interrupt(); throw new IOException( ""Interrupted while waiting before retrying insertAll""); } } else { throw e; } } } } "	0	0	0	0	1	0
"@POST @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON}) @Path(""/{source}"") public Response create( final WhoisResources resources, @Context final HttpServletRequest request, @PathParam(""source"") final String sourceParam, @QueryParam(""password"") final List<String> passwords, @CookieParam(""crowd.token_key"") final String crowdTokenKey) {  if (resources == null) { return badRequest(""WhoisResources is mandatory""); } try { final Origin origin = updatePerformer.createOrigin(request);  final UpdateContext updateContext = updatePerformer.initContext(origin, crowdTokenKey); updateContext.setBatchUpdate();  final Credentials credentials = createCredentials(updateContext.getUserSession(), passwords, /* override= */null);  final List<Update> updates = extractUpdates(resources, credentials);  final WhoisResources updatedResources = updatePerformer.performUpdates(updateContext, origin, updates, Keyword.NEW, request);  validateUpdates(updateContext, updates, resources);  return createResponse(request, updatedResources, Response.Status.OK);  } catch (WebApplicationException e) { throw specializeWebApplicationException(e, request, resources); // note: response is attached to exception  } catch (UpdateFailedException e) { return createResponse(request, e.whoisResources, e.status);  } catch (Exception e) { updatePerformer.logError(e); LOGGER.error(""Unexpected"", e); return createResponse(request, resources, Response.Status.INTERNAL_SERVER_ERROR);  } finally { updatePerformer.closeContext(); } } "	1	0	1	1	0	0
public void shutdown() { bootstrap.group().shutdownGracefully(); } 	0	0	0	0	1	0
"private void spawnPiece() { /* * Poll the last piece and reset our position and rotation to * their default variables, then pick the next piece to use. */ this.currentType = nextType; this.currentCol = currentType.getSpawnColumn(); this.currentRow = currentType.getSpawnRow(); this.currentRotation = 0; this.nextType = TileType.values()[random.nextInt(TYPE_COUNT)];  /* * If the spawn point is invalid, we need to pause the game and flag that we've lost * because it means that the pieces on the board have gotten too high. */ if(!board.isValidAndEmpty(currentType, currentCol, currentRow, currentRotation)) { this.isGameOver = true; logicTimer.setPaused(true);  String gameoverSound = this.getClass().getResource(""schoolbellringing.wav"").toString(); Media sound2 = new Media(gameoverSound); MediaPlayer mediaPlayer = new MediaPlayer(sound2); mediaPlayer.setVolume(0.8); mediaPlayer.play(); } } "	0	0	1	0	1	0
@Override public void update(float deltaTime) { super.update(deltaTime);  Vector2 pos = moveComponent.getWorldPosition(); body.getTransform().setTranslation(pos.x - (size.x / 2f), pos.y - (size.y / 2f)); } 	0	0	0	0	1	0
@Before public void beforeTests() { mFragmentManager = Mockito.mock(FragmentManager.class); mFeatureManager = new FeatureManager(); } 	0	0	0	0	1	0
"public void registerPredicate(RDBMSPredicateHandle ph) { if (predicateHandles.containsKey(ph.predicate())) throw new IllegalArgumentException(""Predicate has already been registered!""); predicateHandles.put(ph.predicate(), ph);  // Create PreparedStatement for predicate createQueryStatement(ph); if (!closedPredicates.contains(ph.predicate())) { createUpdateStatement(ph); createInsertStatement(ph); } } "	0	0	1	0	0	0
private static boolean isListOrArray(Field field) { return field.getType().isArray() && ! field.getType().isInstance(Collection.class); } 	0	0	0	1	1	0
@Override void write(int start, byte[] b, int off, int len) { DirectAccess.ref(mAddr + start, len).put(b, off, len); } 	0	0	0	0	1	0
private void showDialpadFragment(boolean animate) { if (mIsDialpadShown) { return; } mIsDialpadShown = true; mDialpadFragment.setAnimate(animate); mDialpadFragment.sendScreenView();  final FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.show(mDialpadFragment); ft.commit();  if (animate) { mFloatingActionButtonController.scaleOut(); } else { mFloatingActionButtonController.setVisible(false); } mActionBarController.onDialpadUp();  if (!isInSearchUi()) { enterSearchUi(true /* isSmartDial */, mSearchQuery); } } 	0	0	0	0	1	0
private void visitStructField(StructFieldAccessExpr structFieldAccessExpr, SymbolScope currentScope) { ReferenceExpr varRefExpr = structFieldAccessExpr.getVarRef(); SymbolName symbolName = varRefExpr.getSymbolName(); BLangSymbol fieldSymbol = currentScope.resolve(symbolName);  if (fieldSymbol == null) { if (currentScope instanceof StructDef) { BLangExceptionHelper.throwSemanticError(structFieldAccessExpr, SemanticErrors.UNKNOWN_FIELD_IN_STRUCT, symbolName.getName(), ((StructDef) currentScope).getName()); } else { BLangExceptionHelper.throwSemanticError(structFieldAccessExpr, SemanticErrors.STRUCT_NOT_FOUND, symbolName.getName()); } }  // Set expression type if (!(fieldSymbol instanceof VariableDef)) { BLangExceptionHelper.throwSemanticError(varRefExpr, SemanticErrors.INCOMPATIBLE_TYPES_UNKNOWN_FOUND, symbolName); } VariableDef varDef = (VariableDef) fieldSymbol; BType exprType;   /* Get the actual var representation of this field, and semantically analyze. This will check for semantic * errors of arrays/map accesses, used in this struct field. * eg: in dpt.employee[2].name , below will check for semantics of 'employee[2]', * treating them as individual arrays/map variables. */ if (varRefExpr instanceof ArrayMapAccessExpr) { Expression rExpr = ((ArrayMapAccessExpr) varRefExpr).getRExpr(); ((VariableRefExpr) rExpr).setVariableDef(varDef);  exprType = varDef.getType(); if (exprType instanceof BArrayType) { exprType = ((BArrayType) varDef.getType()).getElementType(); } handleArrayType((ArrayMapAccessExpr) varRefExpr); } else { ((VariableRefExpr) varRefExpr).setVariableDef(varDef); exprType = (varDef).getType(); }  // Go to the referenced field of this struct StructFieldAccessExpr fieldExpr = structFieldAccessExpr.getFieldExpr(); if (fieldExpr != null) { if (!(exprType instanceof StructDef)) { BLangExceptionHelper.throwSemanticError(structFieldAccessExpr, SemanticErrors.MUST_BE_STRUCT_TYPE, symbolName.getName()); } visitStructField(fieldExpr, ((StructDef) exprType).getSymbolScope()); } } 	1	0	1	0	1	0
public <K> Date parse(Column<K> column) { if (column.getType() instanceof SimpleDateType) { long timestamp = SimpleDateType.instance.toTimeInMillis(column.getDecomposedValue()); if (concurrentDateFormat == null) { return new Date(timestamp); } else { int offset = concurrentDateFormat.get().getTimeZone().getOffset(timestamp); return new Date(timestamp - offset); } } else { return parse(column.getComposedValue()); } } 	1	0	1	0	1	0
public static ClasspathOptions manual() { return new ClasspathOptions(false, false, false, true, false); } 	0	0	0	0	1	0
public static ClasspathOptions javac(Boolean compilerInClasspath) { return new ClasspathOptions(false, compilerInClasspath, false,false,false); } 	0	0	0	0	1	0
"public boolean removeParser(final Parser parser, final boolean close) { try { parser.getCallbackManager().delCallback(DebugInfoListener.class, this); final DebugWindow window = registeredParsers.get(parser); window.addLine(""======================"", new Date()); window.addLine(""No Longer Monitoring: "" + parser + "" (User Requested)"", new Date()); window.addLine(""======================"", new Date()); if (close) { window.close(); } registeredParsers.remove(parser); return true; } catch (CallbackNotFoundException ex) { return false; } } "	0	0	0	0	1	0
@Override public void close() { super.close();  // Remove any callbacks or listeners if (parser != null) { parser.getCallbackManager().delCallback(DebugInfoListener.class, listener); } } 	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_paradox_detail); ParadoxDescriptionFragment descriptionFragment = (ParadoxDescriptionFragment) getSupportFragmentManager().findFragmentById(R.id.paradox_description);  if (savedInstanceState == null) { int selectedIndex = getIntent().getExtras().getInt(""index""); String description = Paradoxes.ParadoxDescription[selectedIndex]; descriptionFragment.getArguments().putString(Constants.PARADOX_DESCRIPTION_TEXT, description); }  } "	0	0	1	0	1	0
"private void parseCmdLine(String[] args) throws ConfigurationException { Options options = new Options();  options.addOption(""d"", ""debug"", false, ""turn on debug log messages""); options.addOption(""m"", ""marker-radius"", true, ""sets the radius of shot markers in pixels [1,20]""); options.addOption(""c"", ""ignore-laser-color"", true, ""sets the color of laser that should be ignored by ShootOFF (green "" + ""or red). No color is ignored by default""); options.addOption(""u"", ""use-virtual-magazine"", true, ""turns on the virtual magazine and sets the number rounds it holds [1,45]""); options.addOption(""f"", ""use-malfunctions"", true, ""turns on malfunctions and sets the probability of them happening"");  try { CommandLineParser parser = new DefaultParser(); CommandLine cmd = parser.parse(options, args);  if (cmd.hasOption(""d"")) setDebugMode(true);  if (cmd.hasOption(""m"")) setMarkerRadius(Integer.parseInt(cmd.getOptionValue(""m"")));  if (cmd.hasOption(""c"")) { setIgnoreLaserColor(true); setIgnoreLaserColorName(cmd.getOptionValue(""c"")); }  if (cmd.hasOption(""u"")) { setUseVirtualMagazine(true); setVirtualMagazineCapacity(Integer.parseInt(cmd.getOptionValue(""u""))); }  if (cmd.hasOption(""f"")) { setMalfunctions(true); setMalfunctionsProbability(Float.parseFloat(cmd.getOptionValue(""f""))); } } catch (ParseException e) { System.err.println(e.getMessage()); HelpFormatter formatter = new HelpFormatter(); formatter.printHelp(""com.shootoff.Main"", options); System.exit(-1); }  validateConfiguration(); } "	0	0	0	0	1	0
@Override public Sequential<? extends ValueModel<Type, java.lang.Object>> getValueConstructors( @Sequenced ceylon.language.Sequential<? extends ceylon.language.meta.model.Type<? extends java.lang.annotation.Annotation>> annotations) { return getConstructors(true, null, annotations); } 	1	0	1	0	1	0
@Override public Sequential<? extends ValueModel<Type, java.lang.Object>> getDeclaredValueConstructors( @Sequenced ceylon.language.Sequential<? extends ceylon.language.meta.model.Type<? extends java.lang.annotation.Annotation>> annotations) { return getConstructors(false, null, annotations); } 	1	0	1	1	1	0
public void move(double y, double angle) { double tl = 0, tr = 0, bl = 0, br = 0; if (y < 0) y *= BACK_LIMIT; // Wheels are pos. opposite like // top // ^ v // ^ v // btm tl += angle; tr +=angle; bl += angle; br += angle; tl += y; tr -= y; bl += y; br -= y;  double[] motor_values = new double[] { tl, bl, tr, br }; for(int i = 0; i < NUMBER_OF_MOTORS; i++) { motors[i].set(motor_values[i]); } } 	0	0	0	1	1	0
@Before public void setup() { this.mockMvc = standaloneSetup(new UserController()).build(); } 	0	0	0	0	1	0
@Before public void setup() { this.mockMvc = standaloneSetup(new ImageController()).build(); } 	0	0	0	0	1	0
"public static List<Integer> getStackSizeNeeded(ItemStack item) { //		System.out.println(""\t"" + ""getStackSizeNeeded""); //		System.out.println(""\t"" + item.getItem().getUnlocalizedName()); //		System.out.println(""\t"" + item.getDisplayName());  List<Integer> list = new ArrayList<Integer>();  if (!canUncraftItem(item)) return list;  List<?> recipeList = CraftingManager.getInstance().getRecipeList();   for (int i = 0 ; i < recipeList.size() ; i++) { IRecipe recipe = (IRecipe)recipeList.get(i); if (recipe != null) { ItemStack recipeOutput = recipe.getRecipeOutput(); if (recipeOutput != null) { if (recipeOutput.getItem() == item.getItem() && recipeOutput.getItemDamage() == item.getItemDamage()) { RecipeHandler handler = getRecipeHandler(recipe); if (handler != null) { list.add(recipeOutput.getMaxStackSize()); } else { ModUncrafting.instance.getLogger().error(""[Uncrafting Table] Unknown recipe type: ""+recipe.getClass().getCanonicalName()); } } } } } //		System.out.println(""\t"" + ""-----"");  return list; } "	0	0	0	0	1	0
@Override protected boolean clientObjectExistsOnServer(ItemSyncData<TListClient, TListServer> syncData, TListClient clientList) { return clientList.getServerId() > 0; } 	0	0	0	0	1	0
"public PutMessageResponseType sendMessage(PutMessageRequestType messageRequest) { PutMessageRequestWrapper message = new PutMessageRequestWrapper(messageRequest);  MessageContext messageContext; try { messageContext = createMessageContext(message); Audit.info(""Required metadata validated"", markerFrom(message)); } catch (MessageContextException e) { log.error(markerFrom(message), e.getStatusMessage().getTechnicalMessage(), e); return createErrorResponse(e); }   EduDocument edu; try { edu = standardBusinessDocumentFactory.create(messageRequest, messageContext.getAvsender(), messageContext.getMottaker()); Audit.info(""EDUdocument created"", markerFrom(message)); } catch (MessageException e) { Audit.error(""Failed to create EDUdocument"", markerFrom(message)); log.error(markerFrom(message), e.getStatusMessage().getTechnicalMessage(), e); return createErrorResponse(e); }  Transport t = transportFactory.createTransport(edu); t.send(configuration.getConfiguration(), edu);  Audit.info(""Message sent"", markerFrom(message));  return createOkResponse(); } "	0	0	0	0	1	0
@SneakyThrows private void sendTemplate(Template template) { FileInputStream inputStream = new FileInputStream(Cloud.getInstance().getTmpDir()); byte[] data = new byte[inputStream.available()]; inputStream.read(data); this.getChannel().writeAndFlush(new PacketTemplateData(template.getName(), data)); } 	0	0	0	0	1	0
"public Zone load(final ZoneKey zoneKey) throws IOException, GeneralSecurityException { LOGGER.info(""loading "" + cacheType + "" zone "" + zoneKey.getName()); return loadZone(zoneKey, writeZone); } "	0	0	0	0	1	0
"@Override public int receive(byte[] buf, int off, int len, int waitMillis) throws IOException { // MEDIA-48: DTLS handshake thread does not terminate // https://telestax.atlassian.net/browse/MEDIA-48 if (this.hasTimeout()) { close(); throw new IllegalStateException(""Handshake is taking too long! (>"" + MAX_DELAY + ""ms""); }  int attempts = 20; do { ByteBuffer data = this.rxQueue.poll(); if (data != null) { data.get(buf, off, data.limit()); return data.limit(); }  try { Thread.sleep(1); } catch (InterruptedException e) { logger.warn(""Could not sleep thread to receive DTLS data.""); } finally { attempts--; } } while (attempts > 0);  // Throw IO exception if no data was received in this interval. Restarts outbound flight. throw new SocketTimeoutException(""Could not receive DTLS packet in "" + waitMillis); } "	1	0	0	0	1	0
@Override public void updateItem(ArchiveWrapper item, boolean empty) { super.updateItem(item, empty); if (empty) { setGraphic(null); setText(null); } else { ImageView imageView = new ImageView(AppData.indexIcon); setGraphic(imageView); setText(item.getName()); } } 	0	0	0	0	1	0
"public static Encodable readProperty(BacnetConn conn, BacnetDevice device, ObjectIdentifier oid, PropertyIdentifier pid, UnsignedInteger propertyArrayIndex) { Encodable enc = null; try { device.monitor.checkInReader(); if (device.remoteDevice != null) { try { conn.monitor.checkInReader(); if (conn.localDevice != null) { try { enc = RequestUtils.readProperty(conn.localDevice, device.remoteDevice, oid, pid, propertyArrayIndex); } catch (BACnetException e) { LOGGER.debug("""", e); } } conn.monitor.checkOutReader(); } catch (InterruptedException e) {  } } device.monitor.checkOutReader(); } catch (InterruptedException e) {  } return enc; } "	0	0	0	0	1	0
"public void tbCreatorGame(){ //CREATION of tables try { GameConnector.doUpdate(""Game"",""CREATE TABLE Player(PlayerID INTEGER(1), Name VARCHAR(20), Position INTEGER(2), GetOutOfJail INTEGER(1), PRIMARY KEY ( PlayerID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Account(PlayerID INTEGER(1), Money INTEGER(1), Networth INTEGER(10), PRIMARY KEY ( PlayerID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Field(FieldID INTEGER(2), Name VARCHAR(20), Description VARCHAR(140), PRIMARY KEY ( FieldID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Ownable(FieldID INTEGER(2), Owner INTEGER(2), Price INTEGER(2), Mortgage INTEGER(4), PRIMARY KEY( FieldID ), FOREIGN KEY ( Owner ) REFERENCES Player( PlayerID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Property(FieldID INTEGER(2), Rent INTEGER(4), Rent1 INTEGER(4), Rent2 INTEGER(4), Rent3 INTEGER(4), Rent4 INTEGER(4), HotelRent INTEGER(5), HousePrice INTEGER(4), House INTEGER(1), Hotel INTEGER(1), PRIMARY KEY ( FieldID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Utility(FieldID INTEGER(2), StartFee INTEGER(5), PRIMARY KEY ( FieldID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Railroad(FieldID INTEGER(2), Rent1 INTEGER(4), Rent2 INTEGER(4), Rent3 INTEGER(4), Rent4 INTEGER(4), PRIMARY KEY ( FieldID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Jail(FieldID INTEGER(2), Player INTEGER(2), Turns INTEGER(2), PRIMARY KEY ( FieldID ), FOREIGN KEY ( Player ) REFERENCES Player( PlayerID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Tax(FieldID INTEGER(2), TaxType INTEGER(1), Tax INTEGER (4), PRIMARY KEY ( FieldID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE ProcentageTax(TaxID INTEGER(1), procentageTax INTEGER(2), PRIMARY KEY ( TaxID ));""); System.out.println(""Tables in Game created successfully...""); }catch (SQLException e) { e.printStackTrace(); } //CLOSURE try{ if(GameConnector!=null) GameConnector.close();; }catch(SQLException se){ se.printStackTrace(); } } "	0	0	1	1	1	0
"private void writeContext() { logger.info(""Writing context file ...""); try { JsonConverter.getObjectMapper().defaultPrettyPrintingWriter() .writeValue(new File(""src/main/resources/context.json""), context); logger.info(""... done writing context file.""); } catch (Exception e) { logger.error(""Error during writing context file! "", e); } } "	0	0	1	0	0	0
@Before public void initTransferTest(){ outsider = makeOutsider(); ticketReciever = makeTicketReceiver(); ticket = makeTicket(); } 	0	0	1	0	1	0
"@Test public void testDoTransfer_Anon(){ addTicketTransfer(user.getUsername(), ""password"");  given(). when(). put(TRANSFER_ENDPOINT + ""/"" + ticket.getKey()). then(). statusCode(HttpStatus.SC_FORBIDDEN);  ticket = ticketRepository.findByKey(ticket.getKey()).orElse(null);  Assert.assertTrue(ticket.isTransferrable()); Assert.assertTrue(ticket.getOwner().equals(user)); Assert.assertTrue(ticket.getTransferGoalOwner().equals(ticketReciever)); } "	0	0	1	0	1	0
"@Test public void testAddTransfer_Receiver(){ addTicketTransfer(ticketReciever.getUsername(), ""password"").then().statusCode(HttpStatus.SC_FORBIDDEN);  ticket = ticketRepository.findByKey(ticket.getKey()).orElse(null);  Assert.assertTrue(!ticket.isTransferrable()); Assert.assertTrue(ticket.getOwner().equals(user)); Assert.assertTrue(ticket.getTransferGoalOwner() == null); } "	0	0	1	0	1	0
public GameObject createRouletteWaffeAnimation(String path, String type) { GameObject o = gameContext.getGameWorld().addObject(); o.setType(type); o.setPosition(200, 250); o.setDimensions(Gdx.graphics.getWidth() / 2f, Gdx.graphics.getHeight() / 2f); o.getColor().a = 0f; o.setZIndex(101); gameContext.getRenderManager().register(type, new SpriteRenderer(path));  Tween.to(o, GameObjectTween.POS_Y, 0.75f).target(220).repeatYoyo(Tween.INFINITY, 0.75f).ease(TweenEquations.easeNone).start(gameContext.getTweenManager());  return o; } 	0	0	1	0	1	0
"private void init() { setTitle(""New StableIdentifiers QA Results"");  titleLabel = new JLabel(""New StableIdentifiers QA Results""); getContentPane().add(titleLabel, BorderLayout.NORTH);  resultTable = new JTable(); StableIdCheckResultTableModel model = new StableIdCheckResultTableModel(); resultTable.setModel(model); resultTable.setAutoCreateRowSorter(true); TableCellRenderer renderer = new DefaultTableCellHeaderRenderer() { Icon instanceIcon = GKApplicationUtilities.createImageIcon(getClass(), ""Instance.gif"");  @Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) { Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col); if (isSelected || hasFocus) { comp.setBackground(table.getSelectionBackground()); comp.setForeground(table.getSelectionForeground()); } else { comp.setBackground(table.getBackground()); comp.setForeground(table.getForeground()); } if (value instanceof GKInstance) { GKInstance inst = (GKInstance) value; setIcon(instanceIcon); // Set icon first so that it is before the text setText(inst.getDisplayName()); setHorizontalTextPosition(SwingConstants.RIGHT); } return comp; } }; resultTable.setDefaultRenderer(GKInstance.class, renderer); // Enable double click to show instances resultTable.addMouseListener(new MouseAdapter() {  @Override public void mouseClicked(MouseEvent e) { if (e.getClickCount() == 2) showInstance(e); }  }); getContentPane().add(new JScrollPane(resultTable), BorderLayout.CENTER);  // Need a control panel CheckOutControlPane controlPane = new CheckOutControlPane(this); controlPane.getCheckOutBtn().setText(""Fix in DB""); controlPane.getCheckOutBtn().setEnabled(true); getContentPane().add(controlPane, BorderLayout.SOUTH);  setSize(650, 550); GKApplicationUtilities.center(this); } "	0	0	1	0	0	0
"@SuppressWarnings(""unchecked"") @Override public List<CollectionItem> getCollectionItemByAssociation(final String resourceGooruOid, final String gooruUid, final String type) { String sql = ""FROM CollectionItem collectionItem WHERE  collectionItem.resource.gooruOid=:resourceGooruOid  and  "" + generateOrgAuthQuery(""collectionItem.collection.""); String collectionType = """"; if (gooruUid != null) { sql += "" and collectionItem.associatedUser.partyUid=:gooruUid""; }  if (type != null) { collectionType = type.equalsIgnoreCase(COLLECTION) ? SCOLLECTION : type; sql += "" and collectionItem.collection.resourceType.name=:collectionType""; } Query query = getSession().createQuery(sql); query.setParameter(""resourceGooruOid"", resourceGooruOid); if (gooruUid != null) { query.setParameter(_GOORU_UID, gooruUid); } if (type != null) { query.setParameter(COLLECTION_TYPE, collectionType); } addOrgAuthParameters(query); return query.list(); } "	1	0	0	0	1	0
"@Override public Assignment getAssignmentByGooruOid(final String gooruOid, final String gooruUid) { String hql = "" FROM Assignment assignment WHERE  assignment.gooruOid=:gooruOid  and ""; if (gooruUid != null) { hql += "" assignment.user.partyUid='"" + gooruUid + ""' and ""; } Query query = getSession().createQuery(hql + generateOrgAuthQuery(""assignment."")); query.setParameter(GOORU_OID, gooruOid); addOrgAuthParameters(query); return ((query.list().size() > 0) ? (Assignment) query.list().get(0) : null); } "	0	0	0	0	1	0
"protected boolean goBack() { boolean finish = false; isGoBack = true; // remove multiselection mode if (multiSelectMode && (!ExplorerOperations.isSpecialMode(mode) || !(mode == MODES.SearchMode))) { multiSelectMode = false; }  cancelTasks();  if (mode == MODES.SearchMode) { // In search mode if (isRoot || isSource) { // in search search results finish = true; } else if (currentPath.compareTo(searchOriginalPath) == 0) { // check if current path is search original path and if yes show // search results and unlock search path mypath.setText(format2String(R.string.msg_search_results) + "": "" + resultCount + "" files""); searchPathLock = false; this.onConfigurationChanged(getResources().getConfiguration()); updateMenu(); showList(resultFiles); isSource = true; } else { // go back to parent path showList(mainFile.getParent()); } } else if (ExplorerOperations.isSpecialMode(mode)) { finish = true; } else { // if (isRoot || isSource) { if (isRoot) { // if is root or came to the source path from where the activity // started then finish finish = true; } else { // go back to parent path showList(runSU ? mainFile.getParent()+ (mainFile.getParent().equals(ROOT) ? """" : ""/"") : mainFile.getParent()); } }  if (showNavigationPane && !NavListState.isEmpty() && (isGoBack || isResetList)) { // listView_navigation.onRestoreInstanceState(NavListState.get(NavListState.size() // - 1)); NavListState.remove(NavListState.size() - 1); } showAds(); return finish; } "	0	0	0	0	1	0
protected void setGuestEmailRequired(boolean required) { this.emailRequired = required; if (required) { optionAnonymous.setText(R.string.air_label_use_email); ((TextInputLayout) inputEmail.getParent()).setHint(getString(R.string.air_label_email)); } else { optionAnonymous.setText(R.string.air_label_use_guest); ((TextInputLayout) inputEmail.getParent()).setHint(getString(R.string.air_label_email_optional)); } } 	0	0	0	0	1	0
public Number optNumber(int index, Number defaultValue) { Object val = this.opt(index); if (JSONObject.NULL.equals(val)) { return defaultValue; } if (val instanceof Number){ return (Number) val; }  if (val instanceof String) { try { return new BigDecimal(val.toString()); } catch (Exception e) { return defaultValue; } } return defaultValue; } 	0	0	0	0	1	0
"@Override public void process(MessageTree tree) { String domain = tree.getDomain(); int hash = domain.hashCode(); int index = hash % (m_processors.size() - 1); // last one for message overflow BlockingQueue<MessageTree> queue = m_queues.get(index);  if (!queue.offer(tree)) { // overflow BlockingQueue<MessageTree> last = m_queues.get(m_queues.size() - 1); boolean success = last.offer(tree);  if (!success && (++m_failCount % 100) == 0) { Cat.logError(new RuntimeException(""Error when offer tree to message dumper"")); } } } "	0	0	0	0	1	0
public Font getButtonFont() { return new Font(fontName, Font.PLAIN, btnSize); } 	0	0	1	0	1	0
@Override public View getPrototypeView(Context context) { prototypeView = View.inflate(context, R.layout.brick_set_look, null); if (getSprite().getName().equals(context.getString(R.string.background))) { TextView textField = (TextView) prototypeView.findViewById(R.id.brick_set_look_and_wait); textField.setText(R.string.brick_set_background); }  if (!wait) { prototypeView.findViewById(R.id.brick_set_look_and_wait).setVisibility(View.GONE); } Spinner setLookSpinner = (Spinner) prototypeView.findViewById(R.id.brick_set_look_spinner);  SpinnerAdapter setLookSpinnerAdapter = createLookAdapter(context); setLookSpinner.setAdapter(setLookSpinnerAdapter); setSpinnerSelection(setLookSpinner); return prototypeView; } 	0	0	0	0	1	0
"@Override public void onClick(View v) { Garden garden = allGardens.get(finalPosition); String gardenName = garden.getName(); Intent intent = new Intent(getApplicationContext(), MyGardenActivity.class); intent.putExtra(""gardenName"", gardenName); startActivity(intent); } "	0	0	0	0	1	0
"@Override public void cancelAlarm(ScheduleModel item) { Log.v(LOG_TAG, ""cancelAlarm(): title = "" + item.getTitle());  @ScheduleModel.ScheduleRepeatType String type = item.getScheduleRepeatType(); String alarmType; if(type == ScheduleModel.SCHEDULE_REPEAT_NONE){ alarmType = ACTION_ONE_TIME_ALARM; }else{ alarmType = ACTION_REPEAT_ALARM; }  Intent cancelIntent = new Intent(mContext,AlarmReceiver.class); cancelIntent.setAction(alarmType); // put extra data to intent cancelIntent.putExtra(ALARM_TITLE, item.getTitle()); cancelIntent.putExtra(ALARM_START_TIME,item.getScheduleStart().getTime()); cancelIntent.putExtra(ALARM_REPEAT_INTERVAL,item.getRepeatAlarmInterval());  PendingIntent sender = PendingIntent.getBroadcast(mContext,0,cancelIntent,0); try { mAlarmMgr.cancel(sender); }catch (Exception e){ Log.e(LOG_TAG,""cancelAlarm(): fail to cancel the alarm""); } } "	0	0	0	0	1	0
private void bindListeners(ReadOnlyPerson person) { name.textProperty().bind(Bindings.convert(person.nameProperty())); phone.textProperty().bind(Bindings.convert(person.phoneProperty())); address.textProperty().bind(Bindings.convert(person.addressProperty())); email.textProperty().bind(Bindings.convert(person.emailProperty())); person.tagProperty().addListener((observable, oldValue, newValue) -> { tags.getChildren().clear(); person.getTags().forEach(tag -> tags.getChildren().add(new Label(tag.tagName))); }); } 	0	0	0	0	1	0
"private static String[] splitArguments(String input, int argumentCount) { ArrayList<String> arguments = new ArrayList<String>(); for (int i = 0; i < argumentCount; ++i) { int intSpacePos = input.indexOf("" ""); if (intSpacePos == -1) { arguments.add(input); break; } else { arguments.add(input.substring(0, intSpacePos)); input = input.substring(intSpacePos + 1); } } return (String[])arguments.toArray(); } "	0	0	1	1	1	0
@Test public void testVectorRegression() { DataSet dataSet = new DataSet(Nd4j.create(2, 2), Nd4j.create(new double[][] {{1, 1}, {1, 1}}));  //assert SingleCSVRecord singleCsvRecord = SingleCSVRecord.fromRow(dataSet.get(0)); assertEquals(4, singleCsvRecord.getValues().length);  } 	0	0	1	0	1	0
public static List<String> collectUnlinkedExtensions(DataFile coreDescriptor, int coreColumn, DataFile extDescriptor, int extColumn, long maxSampleSize) throws IOException {  try (Stream<String> lines = Files.lines(Paths.get(extDescriptor.getSourceFileName()))) {  return lines.skip(extDescriptor.isHasHeaders() ? 1 : 0)  //skip the header, it it exists .filter(line -> getColumnValue(line, extColumn, extDescriptor.getDelimiterChar().toString()) .map(valueIsNotInFile(coreDescriptor, coreColumn)).orElse(false)) .limit(maxSampleSize) .collect(Collectors.toList()); } } 	0	0	0	0	1	0
"public File getVirtualEnvInterpreter() { return new File(virtualEnv, ""bin/python""); } "	0	0	1	0	1	0
"private ToolStripButton getSchedulerLinkButton() { ToolStripButton schedulerButton = new ToolStripButton(""Scheduler"");  schedulerButton.addClickHandler(new ClickHandler() { public void onClick(ClickEvent event) { Window.open(""/Scheduler"", """", """"); } });  return schedulerButton; } "	0	0	1	1	1	0
public static void drawString(int x, int y, int colour, String formatString, Object...args) { Minecraft mc = Minecraft.getMinecraft(); //mc.renderEngine.resetBoundTexture(); FontRenderer fr = mc.fontRenderer; String s = String.format(formatString, args); fr.drawStringWithShadow(s, x, y, colour); } 	0	0	0	0	1	0
public String getTotalLoad() { return curricularCourse.getTotalLoad(context.getCurricularPeriod(), executionInterval).toString(); } 	0	0	0	0	1	0
"@Override public void showModuleBrowser() { if (moduleBrowserWindowId == null) { moduleBrowserWindowId = new WindowId(WindowType.MODULE_BROWSER); ModuleBrowserPresenter moduleBrowser = injector.getInstance(ModuleBrowserPresenter.class); InternalWindowPresenter iwp = createInternalWindow(moduleBrowserWindowId, moduleBrowser); iwp.setTitle(""Module Browser""); showInternalWindow(moduleBrowserWindowId); }  focus(moduleBrowserWindowId); } "	0	0	0	0	1	0
public static void delete(int id){ find.byId(id); } 	1	0	1	0	1	0
public static Result list(){ List<Meal> meals = Meal.findAll(); return TODO; } 	0	0	1	0	1	0
@Override public void start() { taskList.addAll(Arrays.asList(new Zaiat_iRage.scripts.zAlkharidFighter.Tasks.Bank(ctx), new Fight(ctx), new Eat(ctx), new ToggleRun(ctx))); gui = new GUI(this, ctx); } 	0	0	0	0	1	0
"private void createEvent(Club club) { Event event; String day; int startH; int startM; int endH; int endM; String descr;  System.out.println(""Enter the day of the event.""); day = scan.nextInt(); System.out.println(""Enter the start hour of the event.""); startH = scan.nextInt(); System.out.println(""Enter the start minute of the event.""); startM = scan.nextInt(); System.out.println(""Enter the end hour of the event.""); endH = scan.nextInt(); System.out.println(""Enter the end minute of the event.""); endM = scan.nextInt(); System.out.println(""Enter the name, location, and description"" + "" of the new event.""); descr = scan.next();  event = new Event(day, startH, startM, endH, endM, descr); club.addEvent(event); return event; } "	1	0	1	0	1	0
"private static UserGroupInformation getUgiForDataset(Impersonator impersonator, DatasetId datasetInstanceId) throws IOException, NamespaceNotFoundException { // for system dataset do not look up owner information in store as we know that it will be null. // Also, this is required for CDAP to start, because initially we don't want to look up owner admin // (causing its own lookup) as the SystemDatasetInitiator.getDataset is called when CDAP starts UserGroupInformation ugi; if (NamespaceId.SYSTEM.equals(datasetInstanceId.getParent())) { ugi = UserGroupInformation.getCurrentUser(); } else { ugi = impersonator.getUGI(datasetInstanceId); } LOG.debug(""Using {} user for dataset {}"", ugi.getUserName(), datasetInstanceId); return ugi; } "	0	0	1	0	0	0
"protected void setProjectInternal(IProject project) { this.project = project;  if (project == null || !VaadinFacetUtils.isVaadinProject(project)) { setPackageFragment(null, false); setTypeName("""", false); return; } } "	0	0	0	0	1	0
private void setCorrect(VocabList vlist, int index) { vList.setCorrect(index, languageTested); } 	0	0	0	1	0	0
"@Override public void onClick(View v) { switch (v.getId()){  case R.id.save_button_2: user.setWalletBalance(Long.parseLong(t2.getText().toString())); UserService.updateUser(user); break;  case R.id.logout_button: Intent logOut = new Intent(getActivity(), AuthActivity.class); FirebaseAuth.getInstance().signOut(); startActivity(logOut); break;  case R.id.imageButton1:  View view = LayoutInflater.from(getContext()).inflate(R.layout.new_category_popup,null); final EditText newCatName = (EditText)view.findViewById(R.id.newCat_name);  AlertDialog.Builder builder = new AlertDialog.Builder(getContext());  builder.setMessage(""Create new category"") .setView(view) .setPositiveButton(""Done"", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { ArrayList<Integer> images = new ArrayList<Integer>(); images.add(R.drawable.addnew_icon); images.add(R.drawable.green_new); images.add(R.drawable.add_new_no_name); images.add(R.drawable.green_new_no_name); images.add(R.drawable.addnew_logo);  Category newCat = new Category(user.getId(),newCatName.getText().toString(),images); CategoryService.addCategory(newCat); categories.add(newCat); Intent restart = new Intent(getActivity(), NavActivity.class); restart.putExtra(""fromWhere"",3); DataPassing.passDataToActivity(categories,transactions,budgets,user,restart); startActivity(restart); } }) .setNegativeButton(""Cancel"",null) .setCancelable(false);  AlertDialog alert = builder.create(); alert.show(); break; } } "	0	0	0	0	1	0
"public void merge(Configuration config) { if (config == null) { System.out.println(""SettingsLoader::merge config is null""); }  loadFile();  if (config.login().isEmpty() && login != null) { config.setLogin(login); } if (config.password().isEmpty() && password != null) { config.setPassword(password); }  try { if ((config.getComputeMethod() == null && computeMethod != null) || (computeMethod != null && config.getComputeMethod() != ComputeType.valueOf(computeMethod))) { config.setComputeMethod(ComputeType.valueOf(computeMethod)); } } catch (IllegalArgumentException e) { System.err.println(""SettingsLoader::merge failed to handle compute method (raw value: '"" + computeMethod + ""')""); computeMethod = null; } if (config.getGPUDevice() == null && gpu != null) { GPUDevice device = GPU.getGPUDevice(gpu); if (device != null) { config.setUseGPU(device); } } if (config.getNbCores() == -1  && cores != null) { config.setUseNbCores(Integer.valueOf(cores)); } if (config.getUserSpecifiedACacheDir() == false && cacheDir != null) { config.setCacheDir(new File(cacheDir)); }  if (config.getUIType() == null && ui != null) { config.setUIType(ui); }  config.setAutoSignIn(Boolean.valueOf(autoSignIn)); } "	0	0	0	0	1	0
@Override protected void handleCurrentValue(final double VALUE) { double needleStartAngle = angleRange * 0.5; double targetAngle = (VALUE - minValue) * angleStep - needleStartAngle; targetAngle = Helper.clamp(-needleStartAngle, -needleStartAngle + angleRange, targetAngle); needleRotate.setAngle(targetAngle); needleRectRotate.setAngle(targetAngle); valueText.setText(String.format(locale, formatString, VALUE)); thresholdRect.setFill(VALUE > threshold ? thresholdColor : Tile.GRAY); resizeDynamicText(); highlightSections(VALUE); } 	0	0	0	0	1	0
@Override public void deleteWireConfiguration(final WireConfiguration wireConfiguration) { checkNull(wireConfiguration, s_message.wireConfigurationNonNull()); s_logger.info(s_message.removingWires()); try { final Wire[] wiresList = this.m_wireAdmin.getWires(null); if (wiresList != null) { for (final Wire wire : wiresList) { final String producerPid = wire.getProperties().get(WIREADMIN_PRODUCER_PID).toString(); final String consumerPid = wire.getProperties().get(WIREADMIN_CONSUMER_PID).toString(); final String emitterFactoryPid = this.m_wireHelperService .getServicePid(wireConfiguration.getEmitterPid()); final String receiverFactoryPid = this.m_wireHelperService .getServicePid(wireConfiguration.getReceiverPid()); if ((emitterFactoryPid != null) && (receiverFactoryPid != null) && producerPid.equals(emitterFactoryPid) && consumerPid.equals(receiverFactoryPid)) { // just to make sure the deletion does not incur // ConcurrentModification exception synchronized (this.m_wireConfigs) { for (final Iterator<WireConfiguration> iter = this.m_wireConfigs.listIterator(); iter .hasNext();) { final WireConfiguration configuration = iter.next(); if (configuration.equals(wireConfiguration)) { iter.remove(); this.m_wireAdmin.deleteWire(wire); break; } } } } } } } catch (final InvalidSyntaxException e) { throw new KuraRuntimeException(KuraErrorCode.INTERNAL_ERROR, ThrowableUtil.stackTraceAsString(e)); } s_logger.info(s_message.removingWiresDone()); } 	0	0	1	1	0	0
"@Override public void onPersistentGroupInfoAvailable(WifiP2pGroupList groups) { mPersistentGroup.removeAll();  for (WifiP2pGroup group: groups.getGroupList()) { if (DBG) Log.d(TAG, "" group "" + group); WifiP2pPersistentGroup wppg = new WifiP2pPersistentGroup(getActivity(), group); mPersistentGroup.addPreference(wppg); if (wppg.getGroupName().equals(mSelectedGroupName)) { if (DBG) Log.d(TAG, ""Selecting group "" + wppg.getGroupName()); mSelectedGroup = wppg; mSelectedGroupName = null; } } if (mSelectedGroupName != null) { // Looks like there's a dialog pending getting user confirmation to delete the // selected group. When user hits OK on that dialog, we won't do anything; but we // shouldn't be in this situation in first place, because these groups are persistent // groups and they shouldn't just get deleted! Log.w(TAG, "" Selected group "" + mSelectedGroupName + "" disappered on next query ""); } } "	0	0	0	0	1	0
public void onDeleteAccountCancel() { // Close the confirmation dialog mConfirmDeleteAccountDialog.hide(); } 	0	0	1	0	1	0
"public static void menuPrincipal() { byte choix = 0; do { printMenuMessage((byte)1);  choix = InOut.getByte(); switch(choix) { case 1 : clear(); menuJeu(); break; case 2 : credit(); break; case 3: profilGestion.gestion((byte)2); break; case 4: choseLanguage(); break; case 5: HighScoreGestion.menuHighScore(); break; case 6: if(continuons) { continuons = false; }else{ continuons = true; musique = null; musique = new MThread(""Musique""); musique.start(); } break; case 7: System.exit(0); break; default : System.out.println(LSD.getString(""mePri_msg"")); break; } }while(choix != 7); } "	0	0	0	0	1	0
"private static void menuGestion() { byte choix = 0; do { afficheMenu(); choix = InOut.getByte(); switch(choix) { case 1: afficheProfil(); break; case 2: playerOne.afficheScoreSPd(); break; case 3: playerOne.afficheScoreSPM(); break; case 4: playerOne.afficheScoreSMM(); break; case 5: playerOne.afficheScoreSPU(); break; case 6: optionConfigurationMenu(); break; case 7: premierOuverture = true; existe = false; confExiste = false; challenge.menuPrincipal(); break; case 8: break; default: System.out.println(LSD.getString(""meGest_msg"")); break; } }while(choix != 8); } "	0	0	0	0	1	0
"@Test public void convertJsonToSqlTest() throws SQLException { String jsonCriteria = ""{\n"" + ""  \""group\"": {\n"" + ""    \""operator\"": \""AND\"",\n"" + ""    \""rules\"": [\n"" + ""      {\n"" + ""        \""condition\"": \""=\"",\n"" + ""        \""field\"": \""REVENUE_GROSS\"",\n"" + ""        \""data\"": \""23\"",\n"" + ""        \""$$hashKey\"": \""object:434\""\n"" + ""      },\n"" + ""      {\n"" + ""        \""condition\"": \""=\"",\n"" + ""        \""field\"": \""ID\"",\n"" + ""        \""data\"": \""4\"",\n"" + ""        \""$$hashKey\"": \""object:454\""\n"" + ""      },\n"" + ""      {\n"" + ""        \""group\"": {\n"" + ""          \""operator\"": \""AND\"",\n"" + ""          \""rules\"": [\n"" + ""            {\n"" + ""              \""condition\"": \""=\"",\n"" + ""              \""field\"": \""REVENUE_NET\"",\n"" + ""              \""data\"": \""22\"",\n"" + ""              \""$$hashKey\"": \""object:476\""\n"" + ""            },\n"" + ""            {\n"" + ""              \""condition\"": \""=\"",\n"" + ""              \""field\"": \""SALES_DAY\"",\n"" + ""              \""data\"": \""04-05-2016\"",\n"" + ""              \""$$hashKey\"": \""object:476\""\n"" + ""            }\n"" + ""          ]\n"" + ""        },\n"" + ""        \""$$hashKey\"": \""object:463\""\n"" + ""      }\n"" + ""    ]\n"" + ""  }\n"" + ""}""; when(resultSetMetaData.getColumnCount()).thenReturn(new Integer(3)); when(resultSetMetaData.getColumnName(0)).thenReturn(""REVENUE_GROSS""); when(resultSetMetaData.getColumnName(1)).thenReturn(""ID""); when(resultSetMetaData.getColumnName(2)).thenReturn(""REVENUE_NET""); when(resultSetMetaData.getColumnName(3)).thenReturn(""SALES_DAY""); when(resultSetMetaData.getColumnTypeName(0)).thenReturn(""DOUBLE""); when(resultSetMetaData.getColumnTypeName(1)).thenReturn(""BIGINT""); when(resultSetMetaData.getColumnTypeName(2)).thenReturn(""DOUBLE""); when(resultSetMetaData.getColumnTypeName(3)).thenReturn(""DATE""); String manualyConvertedCriteria = ""(REVENUE_GROSS = 23 AND ID = 4 AND (REVENUE_NET = 22 AND SALES_DAY = \""04-05-2016\""))""; String convertedCriteria = jsonFilterService.convertJsonToJpql(jsonCriteria, resultSetMetaData); assertEquals(manualyConvertedCriteria, convertedCriteria); } "	0	0	1	0	0	0
public static MetricsService newInstance(io.vertx.ext.dropwizard.MetricsService arg) { return new MetricsService(arg); } 	1	0	1	0	1	0
@Override public boolean onSingleTapConfirmed(MotionEvent motionEvent) { List<Marker> selectedMarkers = mapboxMap.getSelectedMarkers();  PointF tapPoint = new PointF(motionEvent.getX(), motionEvent.getY()); float toleranceSides = 4 * screenDensity; float toleranceTopBottom = 10 * screenDensity;  RectF tapRect = new RectF((tapPoint.x - averageIconWidth / 2 - toleranceSides) / screenDensity, (tapPoint.y - averageIconHeight / 2 - toleranceTopBottom) / screenDensity, (tapPoint.x + averageIconWidth / 2 + toleranceSides) / screenDensity, (tapPoint.y + averageIconHeight / 2 + toleranceTopBottom) / screenDensity);  List<Marker> nearbyMarkers = getMarkersInRect(tapRect); long newSelectedMarkerId = -1;  if (nearbyMarkers != null && nearbyMarkers.size() > 0) { Collections.sort(nearbyMarkers); for (Marker nearbyMarker : nearbyMarkers) { boolean found = false; for (Marker selectedMarker : selectedMarkers) { if (selectedMarker.equals(nearbyMarker)) { found = true; } } if (!found) { newSelectedMarkerId = nearbyMarker.getId(); break; } } }  if (newSelectedMarkerId >= 0) { List<Annotation> annotations = mapboxMap.getAnnotations(); int count = annotations.size(); for (int i = 0; i < count; i++) { Annotation annotation = annotations.get(i); if (annotation instanceof Marker) { if (annotation.getId() == newSelectedMarkerId) { if (selectedMarkers.isEmpty() || !selectedMarkers.contains(annotation)) { // only handle click if no marker view is available if (!(annotation instanceof MarkerView)) { mapboxMap.selectMarker((Marker) annotation); } } break; } } } } else { if (mapboxMap.getUiSettings().isDeselectMarkersOnTap()) { // deselect any selected marker mapboxMap.deselectMarkers(); }  // notify app of map click MapboxMap.OnMapClickListener listener = mapboxMap.getOnMapClickListener(); if (listener != null) { LatLng point = fromScreenLocation(tapPoint); listener.onMapClick(point); } }  trackGestureEvent(MapboxEvent.GESTURE_SINGLETAP, motionEvent.getX(), motionEvent.getY()); return true; } 	0	0	0	0	1	0
protected void paintMinorTick(Graphics2D g2, Rectangle2D axisBounds, double value) {  g2.setPaint(getForeground()); g2.setStroke(getScaleBarStroke());  double pos = treePane.scaleOnAxis(value);  Line2D line = new Line2D.Double(pos, axisBounds.getMinY(), pos, axisBounds.getMinY() + minorTickSize); g2.draw(line); } 	0	0	0	0	1	0
"@Override public String toString() { String sep = ""\n""; return label +sep+ digitalTime +sep+ hour +sep+ minute; } "	0	0	0	0	1	0
"public static TimeItem fromString(String code) { String[] items = code.split(""\n""); if(items.length != 4) return null; int hour, minute; try { hour = Integer.parseInt(items[2]); minute = Integer.parseInt(items[3]); } catch (NumberFormatException e) { e.printStackTrace(); return null; } return new TimeItem(items[0], items[1], hour, minute); } "	0	0	0	0	1	0
"private ApplicationReportModel createSingleApplicationMigrationIssuesReport(GraphContext context, ProjectModel projectModel) { ReportService reportService = new ReportService(context); ApplicationReportModel report = createMigrationIssuesReportBase(context); report.setReportName(""Migration Issues""); report.setProjectModel(projectModel); reportService.setUniqueFilename(report, ""migration_issues"", ""html""); return report; } "	0	0	0	0	1	0
@Override public void enterFunctionCallExpression(FunctionCallExpressionContext ctx) { ExpressionElementListContext elemList = ctx.parenthesizedExpression().expressionElementList();  // Check if the function call has any parameters if (elemList == null) { return; }  List<ExpressionElementContext> elements = elemList.expressionElement();  // Check if the last parameter isn't named ExpressionElementContext element = elements.get(elements.size() - 1); if (element.identifier() != null) { return; }  // Check if the parameter is a simple prefix expression ExpressionContext expression = element.expression(); if (expression.binaryExpression().size() != 0) { return; }  // Check if the parameter is a closure PostfixExpressionContext postfixExpr = expression.prefixExpression().postfixExpression(); if (postfixExpr.getChild(0) instanceof PrimaryExpressionContext) { PrimaryExpressionContext primaryExpr = (PrimaryExpressionContext) postfixExpr.getChild(0); if (primaryExpr.closureExpression() != null) { printer.warn(Rules.TRAILING_CLOSURE, Messages.CLOSURE + Messages.TRAILING_CLOSURE, ListenerUtil.getContextStartLocation(primaryExpr.closureExpression())); } } } 	0	0	0	0	1	0
"@Override public void onUpdate(ItemStack voidTear, World world, Entity entity, int slotNumber, boolean isSelected) { if(voidTear.getTagCompound() != null && voidTear.getTagCompound().hasKey(""item"")) {  setItemStack(voidTear, ItemStack.loadItemStackFromNBT(NBTHelper.getTagCompound(""item"", voidTear))); setItemQuantity(voidTear, NBTHelper.getInteger(""itemQuantity"", voidTear));  voidTear.getTagCompound().removeTag(""item""); voidTear.getTagCompound().removeTag(""itemQuantity""); }  if(!world.isRemote) { if(!(entity instanceof EntityPlayer)) return;  EntityPlayer player = (EntityPlayer) entity;  boolean quantityUpdated = false; if(this.isEnabled(voidTear)) { ItemStack contents = this.getContainedItem(voidTear);  if(contents != null) { int itemQuantity = InventoryHelper.getItemQuantity(contents, player.inventory);  if(getItemQuantity(voidTear) <= Settings.VoidTear.itemLimit && itemQuantity > getKeepQuantity(voidTear) && InventoryHelper.consumeItem(contents, player, getKeepQuantity(voidTear), itemQuantity - getKeepQuantity(voidTear))) { //doesn't absorb in creative mode.. this is mostly for testing, it prevents the item from having unlimited *whatever* for eternity. if(!player.capabilities.isCreativeMode) { setItemQuantity(voidTear, getItemQuantity(voidTear) + itemQuantity - getKeepQuantity(voidTear)); quantityUpdated = true; } }  if(getMode(voidTear) != Mode.NO_REFILL && attemptToReplenish(player, voidTear)) quantityUpdated = true; } }  //noinspection ConstantConditions if(player.inventory.getStackInSlot(slotNumber) != null && player.inventory.getStackInSlot(slotNumber).getItem() == ModItems.filledVoidTear && (isSelected || quantityUpdated)) { PacketHandler.networkWrapper.sendTo(new PacketItemHandlerSync(slotNumber, getItemHandlerNBT(voidTear)), (EntityPlayerMP) player); } else if(player.inventory.offHandInventory[0] != null && player.inventory.offHandInventory[0].getItem() == ModItems.filledVoidTear) { PacketHandler.networkWrapper.sendTo(new PacketItemHandlerSync(EnumHand.OFF_HAND, getItemHandlerNBT(voidTear)), (EntityPlayerMP) player); }  } } "	0	0	1	0	0	0
private void addResources(Archive<?> applicationArchive, final JavaArchive dataArchive) { if (applicationArchive instanceof JavaArchive) { addAsResource(applicationArchive, dataArchive); } else { addAsLibrary(applicationArchive, dataArchive); } } 	0	0	0	0	1	0
"public Map<Date, Integer> getResponse(Question q) { DatabaseConnectionHelper dch = ObjectFactory.getDBHelper(); Map<Date, Integer> responseMap = new HashMap<>(); try { CallableStatement cstmt = dch.mysqlCon.prepareCall(""{call getResponseData(?)}""); cstmt.setInt(1, q.getQuestionId()); ResultSet rs = cstmt.executeQuery(); if (rs.next()) { do { Date utilDate = new Date(rs.getDate(""date"").getTime()); responseMap.put(utilDate, rs.getInt(""responses"")); } while (rs.next()); } else { for (Date d = q.getStartDate(); d.before(Date.from(Instant.now())); d = UtilHelper.convertJavaDateToSqlDate(DateUtils.addDays(d, 1))) { responseMap.put(d, 0); } } } catch (SQLException e) { org.apache.log4j.Logger.getLogger(Question.class).error(""Exception while retrieving response data"", e); } org.apache.log4j.Logger.getLogger(Question.class).debug(""Response : "" + responseMap.toString()); return responseMap;  } "	0	0	0	0	1	0
public BigDecimal readLatinum(String inAcc) { BigDecimal money = new BigDecimal(readFileLine(inAcc, 3)); return money; } 	0	0	0	0	1	0
"@Override public void execute(Environment environment, Map params, TemplateModel[] loopVars, TemplateDirectiveBody templateDirectiveBody) throws TemplateException, IOException { if (this.session != null) { environment.getOut().append(""<input type=\""hidden\"" value=\"""" + this.session.getAuthenticity() + ""\"" name=\""authenticityToken\"" />""); } } "	0	0	0	0	1	0
"private static int checkBitLength(int bitLength) { switch (bitLength) { case 224: case 256: case 384: case 512: return bitLength; default: throw new IllegalArgumentException(""'bitLength' "" + bitLength + "" not supported""); } } "	0	0	0	0	1	0
"@Override public void onDataChange(DataSnapshot dataSnapshot) { for (DataSnapshot user:dataSnapshot.getChildren()) {  if (!user.getValue().equals(""attendee_id"")){ listofUsers.add(new User( (String) user.child(""name"").getValue(), (String) user.child(""email"").getValue(), (String) user.child(""pictureLink"").getValue() )); } attendeesAdapter.notifyDataSetChanged(); } } "	0	0	0	0	1	0
@Override protected IStatus run(DBRProgressMonitor monitor) { try { final List<MySQLTableBase> objects = new ArrayList<>(); objects.addAll(curCatalog.getTables(monitor)); if (wizard.showViews) { objects.addAll(curCatalog.getViews(monitor)); } Collections.sort(objects, DBUtils.nameComparator()); UIUtils.runInUI(getShell(), new Runnable() { @Override public void run() { tablesTable.removeAll(); for (MySQLTableBase table : objects) { TableItem item = new TableItem(tablesTable, SWT.NONE); item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE)); item.setText(0, table.getName()); item.setData(table); item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table))); } } }); } catch (DBException e) { return GeneralUtils.makeExceptionStatus(e); } return Status.OK_STATUS; } 	0	0	0	0	1	0
"public void init(String path, boolean forceUpdate) { DirectoryFilter df; ScriptFilter sf; Queue<File> files, dirs; File file, dir; ScriptFile script; String filename;  dirRoot = new File(path); if (!dirRoot.isDirectory()) { throw new RuntimeException(); } df = new DirectoryFilter(); dirRoot.listFiles(df); sf = new ScriptFilter(df.getDirs()); dirs = sf.getDirs();  while (!dirs.isEmpty()) { dir = dirs.remove(); dir.listFiles(sf);  files = sf.getFiles(); mainloop: while (!files.isEmpty()) { file = files.remove(); filename = DigestStore.getPath(file); for (String name : BLACKLIST_ALL) { if (name.equals(filename)) { continue mainloop; } } for (String name : BLACKLIST_SYN) { if (name.equals(filename)) { continue mainloop; } } if (!forceUpdate && digestStore.matches(file)) { continue; } // refresh syntax table if (Debug.DEBUG && Debug.DEBUG_REFRESH) { System.out.format(""[REFRESH] %s%n"", DigestStore.getPath(file)); } try { script = ScriptFile.newInstance(file, getContext()); } catch (IllegalStateException | TokenException | AssertionError | BufferUnderflowException | BufferOverflowException ex) { System.err.format(""[ERROR] Found at file \""%s\""%n"", filename); continue; } catch (NoSuchElementException ex) { throw new RuntimeException( String.format( ""A non-blacklisted file \""%s\"" has serious error!"", filename), ex ); } } } } "	0	0	0	0	1	0
"@Override public List<byte[]> signTransaction(final PreparedTransaction ptx) { final List<byte[]> sigs = new LinkedList<>();  try { final BTChipDongle.BTChipInput inputs[] = new BTChipDongle.BTChipInput[ptx.decoded.getInputs().size()]; if (!dongle.hasScreenSupport()) { for (int i = 0; i < ptx.decoded.getInputs().size(); ++i) { final byte[] inputHash = ptx.decoded.getInputs().get(i).getOutpoint().getHash().getReversedBytes(); final byte[] input = Arrays.copyOf(inputHash, inputHash.length + 4); long index = ptx.decoded.getInputs().get(i).getOutpoint().getIndex(); input[input.length - 4] = (byte) (index % 256); index /= 256; input[input.length - 3] = (byte) (index % 256); index /= 256; input[input.length - 2] = (byte) (index % 256); index /= 256; input[input.length - 1] = (byte) (index % 256); ByteArrayOutputStream sequenceBuf = new ByteArrayOutputStream(); BufferUtils.writeUint32BE(sequenceBuf, ptx.decoded.getInputs().get(i).getSequenceNumber()); inputs[i] = dongle.createInput(input, sequenceBuf.toByteArray(), false); } } else { for (int i = 0; i < ptx.decoded.getInputs().size(); ++i) { final TransactionOutPoint outpoint = ptx.decoded.getInputs().get(i).getOutpoint(); final long index = outpoint.getIndex(); final ByteArrayInputStream in = new ByteArrayInputStream(ptx.prevoutRawTxs.get(outpoint.getHash().toString()).unsafeBitcoinSerialize()); final BitcoinTransaction encodedTx = new BitcoinTransaction(in); inputs[i] = dongle.getTrustedInput(encodedTx, index, ptx.decoded.getInputs().get(i).getSequenceNumber()); } } for (int i = 0; i < ptx.decoded.getInputs().size(); ++i) { dongle.startUntrustedTransction(i == 0, i, inputs, Wally.hex_to_bytes(ptx.prev_outputs.get(i).script)); final ByteArrayOutputStream stream = new UnsafeByteArrayOutputStream(ptx.decoded.getMessageSize() < 32 ? 32 : ptx.decoded.getMessageSize() + 32); stream.write(new VarInt(ptx.decoded.getOutputs().size()).encode()); for (final TransactionOutput out : ptx.decoded.getOutputs()) out.bitcoinSerialize(stream); dongle.finalizeInputFull(stream.toByteArray()); final ECKey.ECDSASignature sig; sig = ECKey.ECDSASignature.decodeFromDER(dongle.untrustedHashSign(outToPath(ptx.prev_outputs.get(i)), ""0"", ptx.decoded.getLockTime(), (byte) 1 /* = SIGHASH_ALL */)); sigs.add(ISigningWallet.getTxSignature(sig)); } return sigs; } catch (final BTChipException | IOException e) { throw new RuntimeException(e.getMessage()); } } "	0	0	0	0	0	1
"public synchronized boolean handleFrame(Frame f) throws IOException { switch (this.state) { case EXPECTING_METHOD:          consumeMethodFrame(f); break; case EXPECTING_CONTENT_HEADER:  consumeHeaderFrame(f); break; case EXPECTING_CONTENT_BODY:    consumeBodyFrame(f);   break;  default: throw new AssertionError(""Bad Command State "" + this.state); } return isComplete(); } "	0	0	1	0	1	0
"private boolean testUnspec(List<Wastetransfer> elements, Wastetransfer testelement) { for(Wastetransfer obj : elements) { if(obj.getIaActivityCode().equals(testelement.getIaActivityCode()) && obj.getIaSubActivityCode() != null && obj.getIaSubActivityCode() != """") { return true; } } return false; } "	0	0	1	0	0	0
"@Override public List<User> findUserByQueryCriteria(UserQueryImpl userQuery, Page page) { List<User> userList = new ArrayList<>();  if (null != userQuery.getId()) { userList.add(findUserById(userQuery.getId())); } else { try { String[] userIdList = userStoreManager.listUsers(""*"", -1); for (int i = 0; i < userIdList.length; i++) { userList.add(findUserById(userIdList[i])); } } catch (UserStoreException e) { e.printStackTrace(); } } return userList; } "	0	0	0	0	1	0
@Override public int compare(ProcessProperty o1, ProcessProperty o2) {  return new Integer(o1.getContainer()).compareTo(new Integer(o2.getContainer())); } 	0	0	1	0	1	0
"@Override public void upgrade(ResourceUpgradeReport upgradeReport, ResourceUpgradeContext<ResourceComponent<?>> inventoriedResource) { ProcessInfo processInfo = inventoriedResource.getNativeProcess();  if (DiscoveryCallbackImpl.isRhqServer(processInfo)) { boolean comingFromUpgradeReport = true; Configuration pluginConfiguration = upgradeReport.getNewPluginConfiguration(); if (pluginConfiguration == null) { comingFromUpgradeReport = false; pluginConfiguration = inventoriedResource.getPluginConfiguration(); }  String currentValue = pluginConfiguration.getSimpleValue(""supportsPatching"");  if (comingFromUpgradeReport || currentValue == null || currentValue.startsWith(""__UNINITIALIZED_"")) { // we don't change the value if one is provided by the user even if it is set to true. // if that's the case, the user apparently wants to shoot herself in the foot, which we should not // prevent. pluginConfiguration.setSimpleValue(""supportsPatching"", ""false""); upgradeReport.setNewPluginConfiguration(pluginConfiguration); }  String resourceName = upgradeReport.getNewName(); if (resourceName == null) { resourceName = inventoriedResource.getName(); }  // set rhqctl as start-script StartScriptConfiguration startScriptConfig = new StartScriptConfiguration(pluginConfiguration); File startScriptFile = startScriptConfig.getStartScript(); if (startScriptFile != null && startScriptFile.getName().equals(""standalone.sh"")) { startScriptConfig.setStartScriptPrefix(null); startScriptConfig.setStartScriptArgs(Arrays.asList(""start"", ""--server"")); File homeDirFile = new File( pluginConfiguration.getSimpleValue(DiscoveryCallbackImpl.PLUGIN_CONFIG_HOME_DIR)); startScriptConfig.setStartScript(new File(new File(homeDirFile, ""bin""), ""rhqctl"")); upgradeReport.setNewPluginConfiguration(pluginConfiguration); }  // this is not critical, we can live with the server being called a ""wrong"" name. // report, but not enforce the change (i.e. don't use upgradeReport.setForceGenericPropertyUpgrade(true)). if (!resourceName.endsWith("" RHQ Server"")) { resourceName += "" RHQ Server"";  upgradeReport.setNewName(resourceName); } } } "	0	0	0	0	1	0
"List<InputSplit> getSSTableSplitsForFile(JobContext job, FileStatus file) throws IOException { long length = file.getLen(); if (length == 0) { LOG.info(""skipping zero length file: {}"", file.getPath()); return Collections.emptyList(); }  Path path = file.getPath(); FileSystem fs = path.getFileSystem(job.getConfiguration()); BlockLocation[] blkLocations = fs.getFileBlockLocations(file, 0, length);  Path compressionPath = new Path(path.getParent(), path.getName().replaceAll(""-Data.db"", ""-CompressionInfo.db"")); if (fs.exists(compressionPath)) { return ImmutableList.of((InputSplit) AegCompressedSplit.createAegCompressedSplit(path, length, length, blkLocations[blkLocations.length - 1].getHosts(), compressionPath)); }  long blockSize = file.getBlockSize(); long maxSplitSize = (long) (blockSize * .99); long fuzzySplit = (long) (blockSize * 1.2);  long bytesRemaining = length;  List<InputSplit> splits = Lists.newArrayList(); IndexDatabaseScanner scanner = null; // Only initialize if we are going to have more than a single split if (fuzzySplit < length) { Path indexPath = new Path(path.getParent(), path.getName().replaceAll(""-Data.db"", ""-Index.db"")); if (!fs.exists(indexPath)) { fuzzySplit = length; } else { FSDataInputStream fileIn = fs.open(indexPath); scanner = new IndexDatabaseScanner(new BufferedInputStream(fileIn)); } }  long splitStart = 0; while (splitStart + fuzzySplit < length && scanner != null && scanner.hasNext()) { long splitSize = 0; // The scanner returns an offset from the start of the file. while (splitSize < maxSplitSize && scanner.hasNext()) { IndexDatabaseScanner.OffsetInfo offsetInfo = scanner.next(); splitSize = offsetInfo.getDataFileOffset() - splitStart;  } int blkIndex = getBlockIndex(blkLocations, splitStart + (splitSize / 2)); LOG.debug(""split path: {}:{}:{}"", path.getName(), splitStart, splitSize); splits.add(AegSplit.createSplit(path, splitStart, splitSize, blkLocations[blkIndex].getHosts())); bytesRemaining -= splitSize; splitStart += splitSize; }  if (scanner != null) { scanner.close(); }  if (bytesRemaining != 0) { LOG.debug(""end path: {}:{}:{}"", path.getName(), length - bytesRemaining, bytesRemaining); splits.add(AegSplit.createSplit(path, length - bytesRemaining, bytesRemaining, blkLocations[blkLocations.length - 1].getHosts())); }  return splits; } "	1	0	1	1	0	0
"int getSpeed( OSMWay way ) { int speed = 0;  String s = way.getTag(""surface""); if (!Helper.isEmpty(s)) { Integer sInt = surfaceSpeed.get(s); if (sInt != null) speed = sInt; } else { String tt = way.getTag(""tracktype""); if (!Helper.isEmpty(tt)) { Integer tInt = trackTypeSpeed.get(tt); if (tInt != null) speed = tInt; } else { String highway = way.getTag(""highway""); if (!Helper.isEmpty(highway)) { Integer hwInt = highwaySpeed.get(highway); if (hwInt != null) { if (way.getTag(""service"") == null) speed = hwInt; else speed = highwaySpeed.get(""living_street""); } } } }  // Until now we assumed that the way is no pusing section // Now we check, but only in case that our speed is bigger compared to the PUSHING_SECTION_SPEED if ((speed > PUSHING_SECTION_SPEED) && (!way.hasTag(""bicycle"", intended) && way.hasTag(""highway"", pushingSections))) { if (way.hasTag(""highway"", ""steps"")) speed = PUSHING_SECTION_SPEED / 2; else speed = PUSHING_SECTION_SPEED; }  return speed; } "	0	0	0	0	1	0
"public void play() { if ((m_lastTimePlayed + m_minTimeBetweenPlays) <= System.currentTimeMillis()) { stop(); if (m_clip != null) { Server.logger().fine(""Playing ""+m_file.getFileFound()); setVolume(m_volumePercentage); //This will adjust the volume if the master has changed. m_clip.setFramePosition(0); m_clip.start(); m_lastTimePlayed = System.currentTimeMillis(); } } } "	0	0	0	0	1	0
"public static OperatingSystem resolveForJava(String javaArchName) throws IllegalArgumentException { if (javaArchName != null) { final String asLower = javaArchName.toLowerCase(US); for (final OperatingSystem candidate : values()) { if (candidate._nameInJava != null && asLower.startsWith(candidate._nameInJava)) { return candidate; } } } throw new IllegalArgumentException(""Illegal Java operating system: "" + javaArchName); } "	0	0	1	1	1	0
"public static SequenceModel train(float alpha, int emIter){ Map<String,String> tdata = EmailUtils.readDBpedia(); //also include CONLL lists String resources[] = Config.NER_RESOURCE_FILES; for(String rsrc: resources) { //DBpedia has a finer type, respect it. Map<String,String> map = readEntityList(rsrc); for(Map.Entry<String,String> e: map.entrySet()) tdata.putIfAbsent(e.getKey(),e.getValue()); }  //page lengths from wikipedia Map<String,Map<String,Integer>> pageLens = getTokenTypePriors(); //getTokenPriors returns Map<String, Map<String,Integer>> where the first key is the single word DBpedia title and second keys are the titles it redirects to and its page length Map<String,Map<String,Float>> tokenPriors = new LinkedHashMap<>(); //The Dir. prior related param alpha is empirically found to be performing at the value of 0.2f for(String tok: pageLens.keySet()) { Map<String,Float> tmp =  new LinkedHashMap<>(); Map<String,Integer> tpls = pageLens.get(tok); for(String page: tpls.keySet()) { String type = tdata.get(page.toLowerCase()); tmp.put(type, tpls.get(page)*alpha/1000f); } tokenPriors.put(tok, tmp); } log.info(""Initialized ""+tokenPriors.size()+"" token priors.""); return train(tdata, tokenPriors, emIter); } "	0	0	0	0	1	0
@Override public void setTokenizer(Tokenizer tokenizer){ this.tokenizer = tokenizer; } 	0	0	0	1	1	0
"public void removePresentation(Map<String, Object> msg) { String presentationID = (String) msg.get(""presentationID"");  IScope scope = Red5.getConnectionLocal().getScope(); bbbInGW.removePresentation(scope.getName(), presentationID); } "	0	0	0	0	1	0
"@Override @SuppressWarnings(""deprecation"") public void setMyLocation() { // Not really sure how this happened, but it happened in issue #54 if (mLocationOverlay == null) { return; }  if (!mLocationOverlay.isMyLocationEnabled() && mRunning && UIHelp.canDisplayDialog(this)) { showDialog(NOLOCATION_DIALOG); return; }  GeoPoint point = mLocationOverlay.getMyLocation(); if (point == null) { mWaitingForLocationHandler.postDelayed(mWaitingForLocation, WAIT_FOR_LOCATION_TIMEOUT); mLocationOverlay.runOnFirstFix(new Runnable() { public void run() { mSetMyLocationHandler.post(mSetMyLocation); } }); } else { setMyLocation(point); } } "	0	0	0	0	1	0
@SubscribeEvent(priority = EventPriority.HIGHEST) public void blockBreakEvent(BlockEvent.BreakEvent event) { if(event.world.isRemote) { // I am officially lost. // I am a server method but I find myself on the client. return; }  Point breakPont = Compatibility.getPoint(event); MinerServer server = VeinMiner.instance.minerServer; if(server == null || server.pointIsBlacklisted(breakPont)) { return; }  ConfigurationSettings configurationSettings = VeinMiner.instance.minerServer.getConfigurationSettings(); int radiusLimit = configurationSettings.getRadiusLimit(); int blockLimit = configurationSettings.getBlockLimit();  VeinminerInitalToolCheck startConfig = new VeinminerInitalToolCheck(event.getPlayer(), breakPont, radiusLimit, blockLimit, configurationSettings.getRadiusLimit(), configurationSettings.getBlockLimit()); MinecraftForge.EVENT_BUS.post(startConfig); if(startConfig.allowVeinminerStart.isAllowed()) { radiusLimit = Math.min(startConfig.radiusLimit, radiusLimit); blockLimit = Math.min(startConfig.blockLimit, blockLimit); //MinerInstance instance = new MinerInstance(event.world, (EntityPlayerMP) event.getPlayer(), Compatibility.getPoint(event), new BlockID(Block.blockRegistry.getNameForObject(event.block), event.blockMetadata), server, radiusLimit, blockLimit); MinerInstance instance = new MinerInstance(event.getWorld(), (EntityPlayerMP) event.getPlayer(), Compatibility.getPoint(event), new BlockID(event.getState()), server, radiusLimit, blockLimit);  if (instance.mineBlock(breakPont) > 0) { event.setCanceled(true); } } } 	0	0	0	0	1	0
"private boolean isDateInterval(Expression maybeInterval) { /* Look for function call with the name ""duration"" since this is how durations are expressed after lexical * fixup and parsing by AsterixDB SQL++ */ return maybeInterval.getKind() == Kind.CALL_EXPRESSION && ((CallExpr) maybeInterval).getFunctionSignature().getName().equals(""date""); } "	0	0	1	0	1	0
"@JsfTest(JsfVersion.JSF_2_1_16) @Test public void testDecodeException() throws Exception { webClient.setJavaScriptEnabled(true); webClient.setJavaScriptTimeout(60000); HtmlPage page = webClient.getPage(webUrl + ""/faces/issue2179-page2.xhtml""); HtmlSubmitInput button = (HtmlSubmitInput)page.getElementById(""form:submit""); page = button.click(); webClient.waitForBackgroundJavaScript(60000); assertTrue(page.asXml().contains(""decode: A RuntimeException Has Occurred!"")); } "	0	0	0	0	1	0
"@Override @SuppressWarnings(""deprecation"") public void setStatus(int sc, String sm) { super.setStatus(sc, sm); handleStatus(sc); } "	0	0	1	0	0	0
@Override public void setStatus(int sc) { super.setStatus(sc); handleStatus(sc); } 	0	0	1	0	0	0
"public Map<String, Object> getMapFromTreeItem(TreeItem<ExtractFile> node, Map<String, Object> map) { if (node.getValue().getOject().getValue() != null) { map.put(""slug"", node.getValue().getSlug().getValue()); map.put(""object"", node.getValue().getOject().getValue()); map.put(""title"", node.getValue().getTitle().getValue()); if (node.getValue().isRoot()) { map.put(""type"", node.getValue().getType().getValue()); map.put(""version"", node.getValue().getVersion().getValue()); map.put(""description"", node.getValue().getDescription().getValue()); map.put(""licence"", node.getValue().getLicence().getValue()); } if (node.getValue().isContainer()) { map.put(""introduction"", node.getValue().getIntroduction().getValue()); map.put(""conclusion"", node.getValue().getConclusion().getValue()); } else { map.put(""text"", node.getValue().getText().getValue()); }  List<Map<String, Object>> tabs = new ArrayList<>(); for (TreeItem<ExtractFile> child : node.getChildren()) { Map<String, Object> h = getMapFromTreeItem(child, new HashMap<>()); if (h != null) { tabs.add(h); } }  if (tabs.size() > 0) { map.put(""children"", tabs); } return map; } return null; } "	0	0	0	0	1	0
public boolean hasNextEvent() { Object event; try { event = events.pollFirst(0, TimeUnit.SECONDS); } catch (InterruptedException e) { throw new RuntimeException(e); } return event != null && Platform.isInstanceOfType(event, OnNext.class); } 	0	0	0	0	1	0
"@Test public void testServerTableBungeeSave() throws SQLException { ServerTable serverTable = db.getServerTable();  Optional<ServerInfo> bungeeInfo = serverTable.getBungeeInfo(); assertFalse(bungeeInfo.isPresent());  UUID bungeeUUID = UUID.randomUUID(); ServerInfo bungeeCord = new ServerInfo(-1, bungeeUUID, ""BungeeCord"", ""Random:1234""); serverTable.saveCurrentServerInfo(bungeeCord);  bungeeCord.setId(2);  bungeeInfo = serverTable.getBungeeInfo(); assertTrue(bungeeInfo.isPresent()); assertEquals(bungeeCord, bungeeInfo.get());  Optional<Integer> serverID = serverTable.getServerID(bungeeUUID); assertTrue(serverID.isPresent()); assertEquals(2, (int) serverID.get()); } "	0	0	0	0	1	0
"private void beginDownload() { // Get path String path = ""photos/"" + mFileUri.getLastPathSegment();  // Kick off MyDownloadService to download the file Intent intent = new Intent(this, MyDownloadService.class) .putExtra(MyDownloadService.EXTRA_DOWNLOAD_PATH, path) .setAction(MyDownloadService.ACTION_DOWNLOAD); startService(intent);  // Show loading spinner showProgressDialog(""Downloading...""); } "	0	0	0	0	1	0
"private void signInAnonymously() { // Sign in anonymously. Authentication is required to read or write from Firebase Storage. showProgressDialog(""Signing in...""); mAuth.signInAnonymously() .addOnSuccessListener(this, new OnSuccessListener<AuthResult>() { @Override public void onSuccess(AuthResult authResult) { Log.d(TAG, ""signInAnonymously:SUCCESS""); hideProgressDialog(); updateUI(authResult.getUser()); } }) .addOnFailureListener(this, new OnFailureListener() { @Override public void onFailure(@NonNull Exception exception) { Log.e(TAG, ""signInAnonymously:FAILURE"", exception); hideProgressDialog(); updateUI(null); } }); } "	0	0	0	0	1	0
private void flush(int storeFilesSize) throws IOException{ this.store.snapshot(); flushStore(store, id++); Assert.assertEquals(storeFilesSize, this.store.getStorefiles().size()); Assert.assertEquals(0, ((DefaultMemStore)this.store.memstore).cellSet.size()); } 	0	0	0	0	1	0
"public void testPutSameKey() { byte[] bytes = Bytes.toBytes(getName()); KeyValue kv = new KeyValue(bytes, bytes, bytes, bytes); this.cms.add(kv); byte[] other = Bytes.toBytes(""somethingelse""); KeyValue samekey = new KeyValue(bytes, bytes, bytes, other); this.cms.add(samekey); Cell found = this.cms.getActive().first(); assertEquals(1, this.cms.getActive().getCellsCount()); assertTrue(Bytes.toString(found.getValue()), CellUtil.matchingValue(samekey, found)); } "	0	0	0	0	1	0
"public static int chooseAListenPort(Configuration conf) throws IOException { String portRangeStr = conf.get(AngelConfiguration.ANGEL_LISTEN_PORT_RANGE, AngelConfiguration.DEFAULT_ANGEL_LISTEN_PORT_RANGE);  String[] portRangeArray = null; int startPort = -1; int endPort = -1; try { portRangeArray = portRangeStr.split("",""); startPort = Integer.valueOf(portRangeArray[0]); endPort = Integer.valueOf(portRangeArray[1]);  if (startPort <= 1024 || startPort > 65535 || endPort <= 1024 || endPort > 65535 || startPort > endPort) { throw new InvalidParameterException(AngelConfiguration.ANGEL_LISTEN_PORT_RANGE, portRangeStr, ""port should in range 1024~63335""); } } catch (Exception x) { LOG.error(""use port set for "" + AngelConfiguration.ANGEL_LISTEN_PORT_RANGE + "" is unvalid, we use default value now. error msg = "" + x.getMessage()); portRangeArray = AngelConfiguration.DEFAULT_ANGEL_LISTEN_PORT_RANGE.split("",""); startPort = Integer.valueOf(portRangeArray[0]); endPort = Integer.valueOf(portRangeArray[1]); }  int maxTryTime = 10; Random r = new Random(); int port = -1;  for (int i = 0; i < maxTryTime; i++) { port = Math.abs(r.nextInt()) % (endPort - startPort) + startPort; if (isPortAvailable(port)) { return port; }  LOG.error(""workerservice:port "" + port + "" is not available, try agine""); }  throw new IOException(""can not find a avaliable port for workerservice""); } "	0	0	1	0	0	0
public void onclickCloseActivity(View v){ if (intent_number == 2){ Intent mIntent = new Intent(CheckBMIActivity.this, UserMainActivity.class); startActivity(mIntent); }else onBackPressed(); } 	0	0	0	0	1	0
"protected byte[] readBinary(int block) { RandomAccessFile file = null; try { file = new RandomAccessFile(memoFile, ""r""); file.seek(this.blockSize*block); byte[] blockData = new byte[this.blockSize]; ByteArrayOutputStream baos = new ByteArrayOutputStream(this.blockSize); boolean end = false; int count = 0; while (!end && count < 10) { int endIndex = file.read(blockData); int initialIndex = 0;  if (blockData[0] == (byte) 0xFF && blockData[1] == (byte) 0xFF && blockData[2] == 0x08 && blockData[3] == 0x00) { version = 4; initialIndex = 8; long oldpos = file.getFilePointer(); file.seek(oldpos - blockSize + 4); endIndex = Math.min(DBFUtils.readLittleEndianInt(file), endIndex); file.seek(oldpos); }  for (int i = initialIndex; i < endIndex; i++) { baos.write(blockData[i]); if (i < endIndex -2 && blockData[i+1] == 0x1A && blockData[i+2] == 0x1A){ end = true; break; } } if (version == 4) { end = true; } count++;  } return baos.toByteArray(); } catch (Exception ex) { throw new RuntimeException(ex); } finally { DBFUtils.close(file); } } "	0	0	0	0	1	0
@Override protected String getSelfRoute(Long id) { return controllers.routes.VirtualMachineTemplateController.get(id).absoluteURL(request()); } 	0	0	0	0	1	0
"private synchronized void updatePosition(int oldPosition, int newPosition) throws InvalidMidiDataException { if (oldPosition == newPosition) { return; }  final Cue oldCue = (_shouldIgnoreOldPosition || oldPosition == -1) ? null : getData().cues.get(oldPosition); _shouldIgnoreOldPosition = false; final Cue newCue = getData().cues.get(newPosition);  if (oldCue != null) { oldCue.getAllAssignments().forEach(pae -> pae.cleanup(this)); }  final Map<PatchUsage, Integer> oldAssignments = _currentAssignments; final Map<PatchUsage, Integer> newAssignments = new HashMap<>();  final List<PatchUsage> oldPatchUsages = oldCue == null ? Collections.emptyList() : oldCue.getPatchUsages(); final List<PatchUsage> newPatchUsages = newCue.getPatchUsages();  final Map<Synthesizer, List<Integer>> availableChannels = new HashMap<>(); for (final Synthesizer synth : getData().synthesizers) { // sort available channels by synth, and move currently assigned ones to // the back of the list, so they get used last: final List<Integer> synthChannels = new ArrayList<>(synth.getChannels()); for (final Integer i : oldAssignments.values()) if (synthChannels.remove(i)) synthChannels.add(i);  availableChannels.put(synth, synthChannels); }  final List<PatchUsage> unassigned = new LinkedList<>();  matchPatches: for (final PatchUsage newUsage : newPatchUsages) { final Patch patch = newUsage.patch; for (final PatchUsage oldUsage : oldPatchUsages) { if (patch == oldUsage.patch && oldAssignments.containsKey(oldUsage)) { final Integer channel = oldAssignments.get(oldUsage); LOG.info(""Patch '"" + patch.name + ""' was already assigned, keeping on channel "" + channel); newAssignments.put(newUsage, channel); availableChannels.get(patch.getSynthesizer()).remove(channel); continue matchPatches; } }  // none found, reassign unassigned.add(newUsage); }  for (final PatchUsage pu : unassigned) { final List<Integer> available = availableChannels.get(pu.patch.getSynthesizer()); if (available.isEmpty()) { LOG.warn(""Not enough channels assigned to "" + pu.patch.getSynthesizer().getName() + "", patch '"" + pu.patch.name + ""' not assigned.""); continue; }  final Integer channel = available.remove(0); LOG.info(""Patch '"" + pu.patch.name + ""' assigned to channel "" + channel); newAssignments.put(pu, channel); PatchChangeDelegate.performPatchChange(getReceiver(), pu.patch, channel.intValue()); }  newPatchUsages.forEach(pu -> sendCC(7, pu.volume, newAssignments.get(pu).intValue()));  _currentAssignments = newAssignments; _currentCue = newCue;  _currentCue.getAllAssignments().forEach(pae -> pae.prepare(this));  _currentTriggers = new ArrayList<>(); if (!newCue.disableGlobalTriggers) _currentTriggers.addAll(getData().globalTriggers); _currentTriggers.addAll(newCue.getTriggers()); for (final Trigger t : _currentTriggers) t.reset();  _currentGlobalCueEffects = new LinkedList<>(); _currentGlobalCueEffects.addAll(_currentCue.effects); if (!_currentCue.disableGlobalEffects) _currentGlobalCueEffects.addAll(getData().globalEffects); EffectMonitor.getInstance().setEffects(_currentGlobalCueEffects); } "	1	0	1	0	1	0
"@Override public void execute() throws MojoExecutionException, MojoFailureException { super.execute(); this.parseExecutions(); this.parseTests();  Map<String, String> testToRepro = new HashMap<>();  for (String test : this.testsFailing.keySet()) { this.runSingleSurefireTest(test); DebugTask debugging = new DebugTask(test, this.surefire, this.originalArgLine, this.mavenProject, this.mavenSession, this.pluginManager, this.testsFailing.get(test)); String repro = debugging.debug(); testToRepro.put(test, repro); }  this.getLog().warn(""*********""); for (String test : testToRepro.keySet()) { this.getLog().warn(""REPRO for "" + test + "": mvn nondex:nondex "" + testToRepro.get(test)); } } "	0	0	0	0	1	0
"public void sessionDestroyed(SmppSession session) {  try { accessSemaphore.acquire(); } catch(InterruptedException e) {}  try { if (logger.isInfoEnabled()) { logger.info(String.format(""Session destroyed: %s"", session.getConfiguration().getSystemId())); }  // print out final stats if (session.hasCounters()) { logger.info(String.format(""final session rx-submitSM: %s"", session.getCounters().getRxSubmitSM())); }  // remove esmeServer out of enquire list String esmeName = session.getConfiguration().getName(); Esme esmeServer = this.esmeManagement.getEsmeByName(esmeName); esmeServer.setServerBound(false); esmeServer.resetEnquireLinkFail(); this.smppServerOpsThread.removeEnquireList(esmeName); this.smppSessionHandlerInterface.destroySmppSessionHandler(esmeServer);  DefaultSmppSession defaultSession = (DefaultSmppSession) session;  // firing of onPduRequestTimeout() for sent messages for which we do not have responses Window<Integer, PduRequest, PduResponse> wind = defaultSession.getSendWindow(); Map<Integer, WindowFuture<Integer, PduRequest, PduResponse>> futures = wind.createSortedSnapshot(); for (WindowFuture<Integer, PduRequest, PduResponse> future : futures.values()) { this.logger.warn(""Firing of onPduRequestTimeout from DefaultSmppServerHandler.sessionDestroyed(): "" + future.getRequest().toString()); defaultSession.expired(future); }  // make sure it's really shutdown session.destroy();  //bringing back to close esmeServer.setStateName((com.cloudhopper.smpp.SmppSession.STATES[SmppSession.STATE_CLOSED])); } finally { accessSemaphore.release(); } } "	0	0	0	0	1	0
"public void setLineColor(ColorRGBA newColor) { Validate.nonNull(newColor, ""new color""); lineMaterial.setColor(""Color"", newColor); } "	0	0	0	0	1	0
"private void checkAttributes(@NonNull final Context context, @NonNull final AttributeSet attrs) { final List<String> errors = new ArrayList<>(); Boolean multiline = null; TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.TypefacedEditText); AttributesUtils.checkAttribute(typedArray, errors, R.styleable.TypefacedEditText_customTypeface, true, ""customTypeface required parameter""); AttributesUtils.checkAttribute(typedArray, errors, R.styleable.TypefacedEditText_isMultiline, true, ""isMultiline required parameter""); if (typedArray.hasValue(R.styleable.TypefacedEditText_isMultiline)) { multiline = typedArray.getBoolean(R.styleable.TypefacedEditText_isMultiline, false); } typedArray.recycle();  try { final Class androidRes = Class.forName(""com.android.internal.R$styleable"");  typedArray = context.obtainStyledAttributes(attrs, AttributesUtils.getField(androidRes, ""TextView"")); AttributesUtils.checkRegularTextViewAttributes(typedArray, androidRes, errors, ""isMultiline""); checkEditTextSpecificAttributes(typedArray, androidRes, errors); if (multiline != null) { checkMultilineAttributes(typedArray, androidRes, errors, multiline); } } catch (final Exception exception) { Lc.cutAssertion(exception); } AttributesUtils.handleErrors(this, errors); typedArray.recycle(); } "	0	0	0	0	1	0
"@Test public void testDelete() throws Exception { Document model = this.newModel(); model.setName(""Delete Model"");  Document newModel = this.getApi().createDocument(model);  this.getApi().deleteDocument(newModel.getID());  List<Document> models = this.getApi().getDocuments(false, null); boolean found = false; for (Document s : models) { if (s.getID().equals(newModel.getID())) { found = true; } } // We should no longer find the deleted item assertFalse(found); } "	1	0	1	1	1	0
private void trainFromBuffer(@Nonnull final ByteBuffer buf) { final int itemI = buf.getInt(); final int knnSize = buf.getInt();  final IntOpenHashTable<Int2FloatOpenHashTable> knnItems = new IntOpenHashTable<>(); final Set<Integer> pairItems = new HashSet<>(); for (int i = 0; i < knnSize; i++) { int user = buf.getInt(); int ruSize = buf.getInt(); Int2FloatOpenHashTable ru = new Int2FloatOpenHashTable(ruSize); ru.defaultReturnValue(0.f);  for (int j = 0; j < ruSize; j++) { int itemK = buf.getInt(); pairItems.add(itemK); float ruk = buf.getFloat(); ru.put(itemK, ruk); } knnItems.put(user, ru); }  for (int itemJ : pairItems) { train(itemI, knnItems, itemJ); } } 	0	0	0	0	1	0
public void switchMute() { AudioManager audioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE); int oldMode = audioManager.getMode(); audioManager.setMode(AudioManager.MODE_IN_COMMUNICATION); boolean isMute = !audioManager.isMicrophoneMute(); audioManager.setMicrophoneMute(isMute); audioManager.setMode(oldMode); } 	0	0	0	0	1	0
"protected void progress(int currentSize, int totalDocAmount) { double percent = ((double)currentSize / (double)totalDocAmount); Date now = new Date(); long diff = now.getTime() - startTime.getTime(); long time = (now.getTime() - lastTime.getTime()); if(time == 0) time = 1; // Divide by Zero Check int processedAmount = (lastSize - currentSize); if(percent > 0) { int perms = (int)(diff / percent); Date end = new Date(startTime.getTime() + perms);  log.info(""Size: "" + (totalDocAmount - currentSize) + "" of "" + totalDocAmount + "" took: "" + time + ""ms to process "" + processedAmount + "" records at a rate of: "" + ((processedAmount * 1000) / time) + ""r/s, Memory: "" + df.format(memoryPercent() * 100) + ""%, Percentage complete: "" + (int)(percent * 100) + ""%, Estimated Finish: "" + end); } else { log.info(""Size: "" + (totalDocAmount - currentSize) + "" of "" + totalDocAmount + "" took: "" + time + ""ms to process "" + processedAmount + "" records at a rate of: "" + ((processedAmount * 1000) / time) + ""r/s""); } lastSize = currentSize; lastTime = now; } "	0	0	1	0	1	0
"public Source resolve(final String ref, final String base) { if (SUtils.isNullOrEmpty(base)) { final IFile file = new IFile(ref); if (file.isAbsolute()) { try { return new StreamSource(new FileInputStream(file), file.getPath()); } catch (FileNotFoundException e) { ExcUtils.suppress(e); } } // can not be resolved without base or failed to create file stream return null; } else { final ClassLoader cL = getClass().getClassLoader(); final InputStream is = cL.getResourceAsStream( this.xsltBase + ""/"" + ref); return new StreamSource(is, this.xsltBase + ""/"" + ref); } } "	0	0	1	0	0	0
"public EthereumFacade create(OnBlockHandler onBlockHandler, OnTransactionHandler onTransactionHandler) {  return new GenericEthereumFacadeProvider().create(BlockchainConfig.builder() .eip8(false) .dbDirectory(""testnetSampleDb"") .genesis(""frontier-test.json"") .syncEnabled(true) .networkId(161) .listenPort(0) .peerDiscovery(false) .peerActiveUrl(""enode://9bcff30ea776ebd28a9424d0ac7aa500d372f918445788f45a807d83186bd52c4c0afaf504d77e2077e5a99f1f264f75f8738646c1ac3673ccc652b65565c3bb@peer-1.ether.camp:30303"") .peerActiveUrl(""enode://c2b35ed63f5d79c7f160d05c54dd60b3ba32d455dbb10a5fe6fde44854073db02f9a538423a63a480126c74c7f650d77066ae446258e3d00388401d419b99f88@peer-2.ether.camp:30303"") .peerActiveUrl(""enode://8246787f8d57662b850b354f0b526251eafee1f077fc709460dc8788fa640a597e49ffc727580f3ebbbc5eacb34436a66ea40415fab9d73563481666090a6cf0@peer-3.ether.camp:30303"") .build()); } "	0	0	0	1	0	0
private Mood createMoodFromInput() {  final Mood mood = new Mood();  mood.setDate(Calendar.getInstance()); mood.setMood(sbCurrentMood.getProgress() + 1);  return mood; } 	0	0	0	0	1	0
@SubscribeEvent public void onItemPickup(ItemPickupEvent event) { EntityPlayer player = event.player; ItemStack stack = event.pickedUp.getEntityItem();  if (!player.worldObj.isRemote) { if (stack != null) { if (stack.getItem() instanceof ItemSword || stack.getItem() instanceof ItemBow || stack.getItem() instanceof ItemArmor) { NBTTagCompound nbt = NBTHelper.loadStackNBT(stack);  if (nbt != null) { Rarity rarity = Rarity.getRarity(nbt); Random rand = player.worldObj.rand;  if (rarity == Rarity.UNKNOWN) { rarity = Rarity.getRandomRarity(rand); rarity.setRarity(nbt); LogHelper.info(rarity); NBTHelper.saveStackNBT(stack, nbt); Levels.network.sendTo(new PacketRarity(NBTHelper.loadStackNBT(stack)), (EntityPlayerMP) player); if (rarity == Rarity.ANCIENT) player.worldObj.playSound(player, player.getPosition(), SoundEvents.ENTITY_ENDERDRAGON_DEATH, player.getSoundCategory(), 0.8F, 1.0F); } } } } } } 	0	0	0	0	1	0
"static public synchronized void unregisterTransaction(final long transactionID) { TransactionState ts = null; if (LOG.isTraceEnabled()) LOG.trace(""Enter txid: "" + transactionID); try { ts = mapTransactionStates.remove(transactionID); } catch (Exception e) { LOG.warn(""Ignoring exception. mapTransactionStates.remove for transid "" + transactionID + "" failed with exception "" + e); return; } if (ts == null) { LOG.warn(""mapTransactionStates.remove did not find transid "" + transactionID); } } "	0	0	0	0	1	0
public synchronized ItemFactory enchantment(Enchantment itemEnchantment, int enchantmentLevel, boolean unsafeEnchantment) { if (unsafeEnchantment) { this.factoryItemStack.addUnsafeEnchantment(itemEnchantment, enchantmentLevel); return this; } this.factoryItemStack.addEnchantment(itemEnchantment, enchantmentLevel); return this; } 	0	0	0	0	1	0
"public static void main(String[] args) {  Primes primes = new Primes((int)MAX); primes.init();  for (long modulo : MAX_ARRAY) { SequenceGenerator sequenceGenerator = new SequenceGeneratorImplA109976(new SigmaFunctionBerndtCachedImpl(primes));  System.out.println(""Doing modulo = "" + modulo); sequenceGenerator.init(modulo);  List<Long> cachedValues = new ArrayList<>();   if (cachedValues.isEmpty()) { //first iteration for (long i = 1; i < MAX; i++) {  if((i % 1000) == 0) System.out.println((double)i/MAX);  if (sequenceGenerator.getNumber(i) == 0L) { System.out.println(""Found -> "" + i); cachedValues.add(i); }  }  } else { List<Long> newCachedValues = new ArrayList<>(); newCachedValues.clear();  for(long i:cachedValues) if (sequenceGenerator.getNumber(i) == 0L) newCachedValues.add(i);  cachedValues.clear(); cachedValues.addAll(newCachedValues);  }  System.out.println(cachedValues);  }   } "	0	0	1	0	1	0
@Override public void onMapReady(GoogleMap googleMap) { super.onMapReady(googleMap); googleMap.setOnMapClickListener(latLng -> { if (marker == null) { marker = addMarker(new MarkerOptions().position(latLng).draggable(true)); } else { marker.setPosition(latLng); } }); } 	0	0	1	0	1	0
protected static void updateMessageDigests(final Path path, final Collection<MessageDigest> messageDigests) throws IOException{ try(final InputStream is = new BufferedInputStream(Files.newInputStream(path, StandardOpenOption.READ))){ final byte[] buffer = new byte[CHUNK_SIZE]; int read = is.read(buffer);  while(read != -1) { for(final MessageDigest messageDigest : messageDigests){ messageDigest.update(buffer, 0, read); } read = is.read(buffer); } } } 	0	0	1	1	0	0
"@Test public void insertProfile() { Profile test = new Profile(Constant.generateUUID(),""test_about_me"",1.0, 1,""test_phone_number"",Constant.generateUUID()); String jsonString = gson.toJson(test,Profile.class); //System.out.println(jsonString); String ret = api.insertProfile(jsonString); //System.out.println(ret); assertEquals(Constant.SUCCESS, ret); String testFail = api.insertProfile(""sdfsdfasdadgfsa""); assertEquals(Constant.FAIL,testFail); } "	0	0	0	0	1	0
"@Test public void shouldPersistAttributesForTargeting() { HashMap<String, String> map = new HashMap<>(); map.put(""K1"", ""V1""); map.put(""K2"", ""V2"");  tested.setAttributes(map);  tested = null; tested = new InternalApplicationBootstrapper(new DumbSucessTransport(), testServiceScheduler, testHandlerManager, testHandlerManager.getCustomClock(), bluetoothPlatform, new ResolverConfiguration());  Assertions.assertThat(tested.attributes.get(""K1"")).isEqualTo(""V1""); Assertions.assertThat(tested.attributes.get(""K2"")).isEqualTo(""V2""); } "	0	0	0	0	1	0
@Test public void testHandlesMValues() {  CoordinateSequence sequence = new MCoordinateSequence(new Coordinate[]{new MCoordinate(1.0,2.0,3.0,4.0)});  Point p = (Point)JTS.from(new GeometryFactory().createPoint(sequence));  Assert.assertEquals(1.0, p.getX(), 0.0001); Assert.assertEquals(2.0, p.getY(), 0.0001); Assert.assertEquals(3.0, p.getZ(), 0.0001); Assert.assertEquals(4.0, p.getM(), 0.0001); } 	0	0	0	0	1	0
"public void registerAttributeFactories() { Iterator it = attributeMap.keySet().iterator();  while (it.hasNext()) { String id = (String)(it.next()); AttributeFactory af = (AttributeFactory)(attributeMap.get(id));  try { AttributeFactory.registerFactory(id, new AFProxy(af)); } catch (IllegalArgumentException iae) { logger.log(Level.WARNING, ""Couldn't register AttributeFactory:"" + id + "" (already in use)"", iae); } } } "	0	0	1	1	0	0
"public void registerCombiningAlgFactories() { Iterator it = combiningMap.keySet().iterator();  while (it.hasNext()) { String id = (String)(it.next()); CombiningAlgFactory cf = (CombiningAlgFactory)(combiningMap.get(id));  try { CombiningAlgFactory.registerFactory(id, new CAFProxy(cf)); } catch (IllegalArgumentException iae) { logger.log(Level.WARNING, ""Couldn't register "" + ""CombiningAlgFactory: "" + id + "" (already in use)"", iae); } } } "	0	0	1	1	0	0
"private void search(String aText) { if(aText == null || """".equals(aText.trim())) { JOptionPane.showMessageDialog(this, ""No search term specified, "" + ""please type something in the 'Search' field""); return; } final String text = aText.trim();  final ProgressKeeper progress = new ProgressKeeper(); ProgressDialog dialog = new ProgressDialog(this, ""Searching"", progress, true, true); dialog.setLocationRelativeTo(this);  SwingWorker<List<XrefWithSymbol>, Void> sw = new SwingWorker<List<XrefWithSymbol>, Void>() { private static final int QUERY_LIMIT = 200;  protected List<XrefWithSymbol> doInBackground() throws IDMapperException { IDMapperStack gdb = swingEngine.getGdbManager().getCurrentGdb();  //The result set List<XrefWithSymbol> result = new ArrayList<XrefWithSymbol>();  for (Map.Entry<Xref, String> i : gdb.freeAttributeSearch( text, AttributeMapper.MATCH_ID, QUERY_LIMIT).entrySet()) { // GO terms are annotated as symbols in BridgeDb databases // those are filtered from the results if(!i.getKey().getDataSource().getType().equals(""ontology"") || !i.getKey().getDataSource().getType().equals(""probe"")) { result.add (new XrefWithSymbol (i.getKey(), i.getValue())); } } for (Map.Entry<Xref, String> i : gdb.freeAttributeSearch( text, ""Symbol"", QUERY_LIMIT).entrySet()) { // GO terms are annotated as symbols in BridgeDb databases // those are filtered from the results if(!i.getKey().getDataSource().getType().equals(""ontology"") && !i.getKey().getDataSource().getType().equals(""probe"")) { result.add (new XrefWithSymbol (i.getKey(), i.getValue())); }  } return result; }  @Override public void done() { progress.finished(); if (!progress.isCancelled()) { List<XrefWithSymbol> results = null; try { results = get(); //Show results to user if(results != null && results.size() > 0) { DatabaseSearchDialog resultDialog = new DatabaseSearchDialog(""Results"", results); resultDialog.setVisible(true); XrefWithSymbol selected = resultDialog.getSelected(); if(selected != null) { applyAutoFill(selected); } } else { JOptionPane.showMessageDialog(DataNodeDialog.this, ""No results for '"" + text + ""'""); } } catch (InterruptedException e) { //Ignore, thread interrupted. Same as cancel. } catch (ExecutionException e) { if(swingEngine.getGdbManager().getCurrentGdb().getMappers().size() == 0) { JOptionPane.showMessageDialog(DataNodeDialog.this, ""No identifier mapping database loaded."", ""Error"", JOptionPane.ERROR_MESSAGE); } else { JOptionPane.showMessageDialog(DataNodeDialog.this, ""Exception occurred while searching,\n"" + ""see error log for details."", ""Error"", JOptionPane.ERROR_MESSAGE); Logger.log.error(""Error while searching"", e); } } } } }; sw.execute(); dialog.setVisible(true); } "	0	0	0	0	1	0
"@Override public void onBindViewHolder(final RecyclerView.ViewHolder viewHolder, int position) { LocationsAdapter.ViewHolder vh = (LocationsAdapter.ViewHolder) viewHolder; Location location = getItem(position); final String locationName = location.getLocation(); String caseQty = RealmQueries.getCountCasesByLocation(mContext, locationName, null).toString(); vh.viewLocationName.setText(locationName); vh.viewLocationQty.setText(caseQty); vh.viewCard.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent intent = new Intent(mContext, LocationDetailActivity.class); intent.putExtra(""location"", locationName); mContext.startActivity(intent); } }); } "	0	0	0	0	1	0
"private boolean isMyServiceRunning() { ActivityManager manager = (ActivityManager) getSystemService(ACTIVITY_SERVICE); Log.e(""service"", "" ---------------------------------------------------""); for (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) { Log.e(""service "", service.service.getClassName()); if (""rocks.athrow.android_stock_rotation.service.UpdateDBService"".equals(service.service.getClassName())) { Log.e(""service"", "" is running""); Log.e(""service"", "" ---------------------------------------------------""); return true;  } } Log.e(""service"", "" ---------------------------------------------------""); return false; } "	0	0	0	0	1	0
"@Override public boolean write1WireBus(int DataLen, String Data) throws IOException { throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates. } "	0	0	1	1	0	0
public Builder withLogFileBaseName(final String logFileBaseName) { this.logFileBaseName = logFileBaseName; return this; } 	0	0	1	1	0	0
public Builder withLevel(final Level level) { this.level = level; return this; } 	0	0	1	1	0	0
public Builder withMaxFileSizeInMB(final int maxFileSizeInMB) { this.maxFileSizeInMB = maxFileSizeInMB; return this; } 	0	0	1	1	0	0
public Builder withBasePath(final String basePath) { this.basePath = basePath; return this; } 	0	0	1	1	0	0
"@Test @Transactional @Rollback(true) public void testCreateRole() throws RepositoryException {  Study study = createMock(Study.class); expect(study.getId()).andReturn(0); replay(study);  Role role = new Role(); role.setName(""ROLE_CAT_HERDER""); authorizationRepository.saveStudyRole(study, role);  Role search = authorizationRepository.getStudyRole(study, ""ROLE_CAT_HERDER""); Assert.assertNotNull(search); Assert.assertNotNull(search.getId()); } "	0	0	0	0	1	0
"@Override public void onUpdate() { super.onUpdate(); if (!worldObj.isRemote && this.updateTicks % 10 == 0) { this.dataWatcher.updateObject(22, streamURL); if (isPlaying) { this.dataWatcher.updateObject(23, 1); } else { this.dataWatcher.updateObject(23, 0); } } if (side == Side.CLIENT) {  if (this.updateTicks % 10 == 0 && !this.isPlaying() && this.dataWatcher.getWatchableObjectInt(23) != 0) { this.streamURL = this.dataWatcher.getWatchableObjectString(22); this.startStream(); } if ((Minecraft.getMinecraft().thePlayer != null) && (this.player != null) && (!isInvalid)) { float vol = (float) getDistanceSq(Minecraft.getMinecraft().thePlayer.posX, Minecraft.getMinecraft().thePlayer.posY, Minecraft.getMinecraft().thePlayer.posZ); if (vol > 1000.0F) { this.player.setVolume(0.0F); } else { float v2 = 10000.0F / vol / 100.0F; if (v2 > 1.0F) { this.player.setVolume(volume); } else { float v1 = 1.0f - volume; if (v2 - v1 > 0) { v2 = v2 - v1; } else { v2 = 0.0f; } this.player.setVolume(v2); } } if (vol == 0) { this.invalidate(); } if (this.isPlaying && rand.nextInt(5) == 0 && (this.player != null && this.player.isPlaying())) { int random2 = rand.nextInt(24) + 1; worldObj.spawnParticle(""note"", posX, posY + 1.2D, posZ, random2 / 24.0D, 0.0D, 0.0D); } }  } } "	1	1	1	1	0	0
public String[] getLastHardBinDesc() { if (softIDData.size() > 0) return (String[])hardDescData.get(hardIDData.size()- 1); else return null; } 	0	0	0	0	0	1
public String[] getLastSoftBinDesc() { if (hardIDData.size() > 0) return (String[])softDescData.get(softIDData.size()- 1); else return null; } 	0	0	0	0	0	1
"private void setBtState(boolean s) { btn_bt_enable.setSelected(s); Log.i(TAG, ""Bluetooth State = "" + (s ? ""enabled"" : ""disabled"")); } "	0	0	0	0	1	0
@Override protected void applyTransformation(float interpolatedTime, Transformation t) { if (interpolatedTime == 1) { mResizeListener.onCollapseFinish(); getLayoutParams().width = startWidth; mState = SLIDER_CLOSED; } else { getLayoutParams().width = screenWidthMinusMargins - ((int) (expandedWidth * interpolatedTime)); } requestLayout(); } 	0	0	0	0	1	0
public float getAxisLength() { Vector3f localScale = spatial.getLocalScale(); float result = localScale.x;  assert result > 0f : result; return result; } 	0	0	0	0	1	0
"@FXML public void loginButtonPressed() { //load the user and password scene from userPassForm.fxml FXMLLoader loader = new FXMLLoader(); loader.setLocation(Main.class.getResource(""../view/userPassForm.fxml"")); owner.setWindow(loader); } "	0	0	0	0	1	0
"@Override protected Void doInBackground(TimerLogger.Event... params) {  FileWriter fw = null; try { boolean newFile = !file.exists(); fw = new FileWriter(file, true); if (newFile) { fw.write(TIMING_CSV_HEADER + ""\n""); } if (params.length > 0) { //for (int i = 0; i < params.length; i++) { for (TimerLogger.Event ev : params) { fw.write(ev.toString() + ""\n""); Timber.i(""Log audit Event: "" + ev.toString()); } } } catch (IOException e) { Timber.e(e); } finally { try { fw.close(); } catch (Exception e) { Timber.e(e); } } return null; } "	0	0	1	1	1	0
"public static boolean isActivePower(Category c) { return VadeMecumWordsOfPower.getCategoryData(c).getName().contains(("""" + I18n.format(""voidcraft.ritual.def.word"", new Object[0])).trim()); } "	0	0	0	0	1	0
"public void resumeDetection() { if (_detectionPaused) { _detectionPaused = false; if (_bound && _scanning) { _service.stopIntervalScan(); } Log.i(TAG, ""resume watchdog""); _watchdogHandler.postDelayed(_watchdogRunner, Config.WATCHDOG_INTERVAL); } } "	0	0	1	0	1	0
"private void validatePassword(String password, Errors errors) { if(password==null || password.isEmpty()){ errors.rejectValue(""password"", ""user.Password.emptyPassword"",""Enter a Password""); } else if(!password.matches(PASSWORD_PATTERN)){ errors.rejectValue(""password"", ""user.Password.badPassword"",""Enter correct password""); } } "	0	0	0	0	1	0
"public static void tablalistaSolicitudes() { java.util.List<SolicitudGenerica> rows = new ArrayList<SolicitudGenerica>(); Agente usuario = AgenteController.getAgente(); String rolActivo = usuario.getRolActivo();  java.util.List<SolicitudGenerica> allrows = null; if(rolActivo.equals(""gestorTenerife"")){ allrows = SolicitudGenerica.find(""select solicitud from SolicitudGenerica solicitud where solicitud.solicitante in (select solicitante.id from Solicitante solicitante where solicitante.domicilio.provincia = '_38')"").fetch(); }else if(rolActivo.equals(""gestorLasPalmas"")){ allrows = SolicitudGenerica.find(""select solicitud from SolicitudGenerica solicitud where solicitud.solicitante in (select solicitante.id from Solicitante solicitante where solicitante.domicilio.provincia = '_35')"").fetch(); }else{ allrows = SolicitudGenerica.find(""select solicitud from SolicitudGenerica solicitud"").fetch(); } Map<String, Long> ids = (Map<String, Long>) tags.TagMapStack.top(""idParams""); for (SolicitudGenerica solicitud : allrows) { Map<String, Object> vars = new HashMap<String, Object>(); vars.put(""solicitud"", solicitud); if (secure.checkAcceso(""solicitudes"", ""leer"", ids, vars)) { rows.add(solicitud); } }  tables.TableRenderResponse<SolicitudGenerica> response = new tables.TableRenderResponse<SolicitudGenerica>(rows, false, false, false, ""editarSolicitud"", """", """", getAccion(), ids); renderJSON(response.toJSON(""id"", ""expedienteAed.idAed"", ""estado"", ""estadoValue"", ""estadoUsuario"", ""solicitante.numeroId"", ""solicitante.nombreCompleto""));  } "	0	0	1	1	1	0
"@RequestMapping(params = ""action=migrateVideos"") public void migrateVideos(ActionRequest request) throws FileNotFoundException { // Load Legacy Videos String videoOkflag = ok; List<LegacyVideo> legacyVideos; Video video = null; try { legacyVideos = LegacyVideoLocalServiceUtil.getLegacyVideos(QueryUtil.ALL_POS, QueryUtil.ALL_POS); for (LegacyVideo legacyVideo: legacyVideos) { video =  migrateVideo(legacyVideo, companyId); try { LegacyLectureSeriesLocalServiceUtil.getLegacyLectureSeries(video.getLectureseriesId()); } catch (PortalException e) { logInfo(""ConsistencyCHECK: Legacy-Video has dead LectureseriesID in legacy system LectureseriesID will be set to 0 | video item"" + video); portletLog.warn(""ConsistencyCHECK: Legacy-Video has dead LectureseriesID in legacy system LectureseriesID will be set to 0 | video item"" + JSONFactoryUtil.looseSerialize(video)); video.setLectureseriesId(0); VideoLocalServiceUtil.updateVideo(video); } }  } catch (SystemException e1) { logInfo(""Migration of video failed. Can not read Source Data""); videoOkflag = failed; }  request.setAttribute(""logInfoString"", logInfoString); request.setAttribute(""videoOkflag"", videoOkflag); } "	0	0	0	0	1	0
"private void blur(Bitmap bkg, View view) { long startMs = System.currentTimeMillis(); //define layout params to the previous imageView in order to match its parent mBlurredBackgroundLayoutParams = new FrameLayout.LayoutParams( FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT );  //overlay used to build scaled preview and blur background Bitmap overlay = null;  //evaluate top offset due to action bar int actionBarHeight = 0; try { if (mHoldingActivity instanceof ActionBarActivity) { ActionBar supportActionBar = ((ActionBarActivity) mHoldingActivity).getSupportActionBar(); if (supportActionBar != null) { actionBarHeight = supportActionBar.getHeight(); } } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) { android.app.ActionBar actionBar = mHoldingActivity.getActionBar(); if (actionBar != null) { actionBarHeight = actionBar.getHeight(); } } } catch (NoClassDefFoundError e) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) { android.app.ActionBar actionBar = mHoldingActivity.getActionBar(); if (actionBar != null) { actionBarHeight = actionBar.getHeight(); } } } //evaluate top offset due to status bar int statusBarHeight = 0; if ((mHoldingActivity.getWindow().getAttributes().flags & WindowManager.LayoutParams.FLAG_FULLSCREEN) == 0) { //not in fullscreen mode statusBarHeight = getStatusBarHeight(); }  final int topOffset = actionBarHeight + statusBarHeight; final int bottomOffset = getNavigationBarOffset();  //add offset to the source boundaries since we don't want to blur actionBar pixels Rect srcRect = new Rect( 0, actionBarHeight + statusBarHeight, bkg.getWidth(), bkg.getHeight() - bottomOffset );  //in order to keep the same ratio as the one which will be used for rendering, also //add the offset to the overlay. double height = Math.ceil((view.getMeasuredHeight() - topOffset - bottomOffset) / mDownScaleFactor); double width = Math.ceil((view.getWidth() * height / (view.getMeasuredHeight() - topOffset - bottomOffset))); overlay = Bitmap.createBitmap((int) width, (int) height, Bitmap.Config.RGB_565);  try { if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB || mHoldingActivity instanceof ActionBarActivity) { //add offset as top margin since actionBar height must also considered when we display // the blurred background. Don't want to draw on the actionBar.  mBlurredBackgroundLayoutParams.setMargins(0, actionBarHeight, 0, 0); mBlurredBackgroundLayoutParams.gravity = Gravity.TOP; } } catch (NoClassDefFoundError e) { // no dependency to appcompat, that means no additional top offset due to actionBar. mBlurredBackgroundLayoutParams.setMargins(0, 0, 0, 0); }  //scale and draw background view on the canvas overlay Canvas canvas = new Canvas(overlay); Paint paint = new Paint(); paint.setFlags(Paint.FILTER_BITMAP_FLAG);  //build drawing destination boundaries final RectF destRect = new RectF(0, 0, overlay.getWidth(), overlay.getHeight());  //draw background from source area in source background to the destination area on the overlay canvas.drawBitmap(bkg, srcRect, destRect, paint);  //apply fast blur on overlay overlay = FastBlurHelper.doBlur(overlay, mBlurRadius, false);  if (mDebudEnable) { String blurTime = (System.currentTimeMillis() - startMs) + "" ms"";  //display information in LogCat Log.d(TAG, ""Radius : "" + mBlurRadius); Log.d(TAG, ""Down Scale Factor : "" + mDownScaleFactor); Log.d(TAG, ""Blurred achieved in : "" + blurTime); Log.d(TAG, ""Allocation : "" + bkg.getRowBytes() + ""ko (screen capture) + "" + overlay.getRowBytes() + ""ko (FastBlur)""); //display blurring time directly on screen Rect bounds = new Rect(); Canvas canvas1 = new Canvas(overlay); paint.setColor(Color.BLACK); paint.setAntiAlias(true); paint.setTextSize(20.0f); paint.getTextBounds(blurTime, 0, blurTime.length(), bounds); canvas1.drawText(blurTime, 2, bounds.height(), paint); }  //set bitmap in an image view for final rendering mBlurredBackgroundView = new ImageView(mHoldingActivity); mBlurredBackgroundView.setImageDrawable(new BitmapDrawable(mHoldingActivity.getResources(), overlay)); } "	0	0	0	1	0	0
"private JsonObject loadComponentJson(String componentPath){  String componentFolder = new File(USERDIR, componentPath).getAbsolutePath(); String componentJsonFile = new File(componentFolder, FILENAME).getAbsolutePath();  try { BufferedReader br = new BufferedReader(new FileReader(componentJsonFile)); JsonParser parser = new JsonParser(); return parser.parse(br).getAsJsonObject(); } catch (FileNotFoundException e) { throw new RuntimeException(""component.json is not found""); } } "	0	0	0	0	1	0
private WonMessage makeNeedCreatedMessageForMatcher(final Need need) throws NoSuchNeedException { Dataset needDataset = need.getDatatsetHolder().getDataset(); return WonMessageBuilder .setMessagePropertiesForNeedCreatedNotification(wonNodeInformationService.generateEventURI(), need.getNeedURI(), need.getWonNodeURI()) .setWonMessageDirection(WonMessageDirection.FROM_EXTERNAL) .build(needDataset); } 	0	0	0	0	1	0
@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View moduleView = inflater.inflate(R.layout.fragment_module_list, container, false); modulesRecyclerView = (RecyclerView) moduleView.findViewById(R.id.module_list_rv); modulesAdapter = new ModuleAdapter(this, level, program); modulesLayoutMgr = new LinearLayoutManager(getContext());  modulesRecyclerView.setLayoutManager(modulesLayoutMgr); modulesRecyclerView.setAdapter(modulesAdapter);  return moduleView; } 	0	0	0	0	1	0
"public static boolean isSubtypeOf(RefLikeType i, RefLikeType j){ if(i instanceof ArrayType && j instanceof ArrayType){ ArrayType ia = (ArrayType)i; ArrayType ja = (ArrayType)j; if(ia.numDimensions == ja.numDimensions){ Type basei = ia.baseType; Type basej = ja.baseType; if(basei == basej) return true; else if(basei instanceof RefType && basej instanceof RefType){ RefType baseir = (RefType)basei; RefType basejr = (RefType)basej; return isSubtypeOf(baseir.getSootClass(),basejr.getSootClass()); } }else if(ia.numDimensions < ja.numDimensions) { Type basej = ja.baseType; if(basej instanceof RefType){ SootClass c = ((RefType)basej).getSootClass(); if(c.getName().equals(""java.lang.Object"")) return true; } return false; }else{ return false; } }else if(i instanceof ArrayType && j instanceof RefType){ RefType jr = (RefType)j; String cName = jr.getSootClass().getName(); return cName.equals(""java.lang.Object"") || cName.equals(""java.lang.Cloneable"") || cName.equals(""java.io.Serializable""); }else if(i instanceof RefType && j instanceof ArrayType){ return false; }else if(i instanceof RefType && j instanceof RefType){ return isSubtypeOf(((RefType)i).getSootClass(), ((RefType)j).getSootClass()); } return false; } "	0	0	1	1	0	0
private MenuItemView generateMenuItemView(MenuItem item) { MenuItemView menuItemView = new MenuItemView(mContext, item); LinearLayout.LayoutParams lineLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT); lineLp.gravity = Gravity.CENTER; menuItemView.setVisibility(GONE); menuItemView.setLayoutParams(lineLp); menuItemView.setBackgroundColor(Color.TRANSPARENT); menuItemView.setOnClickListener(item.getOnClickListener()); return menuItemView; } 	0	0	1	0	1	0
"public static void main(String[] args) { Scanner s = new Scanner(System.in); int sizeOfBoard = s.nextInt(); int noOfTreasures = s.nextInt(); logObject.info(""Executing game!!""); ExecuteGameImpl testObj = new ExecuteGameImpl(sizeOfBoard, noOfTreasures); testObj.joinGame(); testObj.joinGame(); testObj.joinGame();  } "	0	0	0	0	1	0
"public static String printGoodInfo(String cartType){ Cart cart = new Cart(cartType); //折扣价格计算； double totalFee = 0.00; StringBuffer sb = new StringBuffer(); sb.append(""***<没钱赚商店>购物清单***\n""); for(Map.Entry<Good, Integer> item:cart.getGoods().entrySet()){ double discountFee = 0.00; totalFee = item.getKey().getPrice() * item.getValue(); discountFee = cart.countGoodDiscount(item.getKey(), item.getValue()); sb.append(""名称：""+item.getKey().getName()) .append(""，数量：""+item.getValue()+item.getKey().getUnit()) .append(""，单价：""+df.format(item.getKey().getPrice())+""（元）"") .append(""，小计：""+df.format((totalFee - discountFee))+""（元）""); //有折扣商品打印折扣信息； if(discountFee > 0) { sb.append(""，节省""+df.format(discountFee)+""(元)""); } sb.append(""\n""); } sb.append(SPLITLINE); //买二赠一商品信息打印； sb.append(getBuyTwoFreeOneStr(cart)); //总计打印； sb.append(""总计：""+ df.format(cart.countAll() - cart.countDiscount()) +""（元）\n""); if(cart.countDiscount() > 0) { sb.append(""节省：""+ df.format(cart.countDiscount()) +""（元）\n""); } sb.append(SPLITSTART); return sb.toString(); } "	0	0	0	0	1	0
"@Override public User createUser(final User user) throws SQLException { logger.debug(""ENTERED createUser"" + user.toString());  String sql = ""INSERT INTO USERS(username, userID, name, surname, age, phone, address, password)VALUES(?,?,?,?,?,?,?,?);""; jdbcTemplate=new JdbcTemplate(dataSource); jdbcTemplate.update(sql,user.getUsername(),user.getUserID(),user.getName(),user.getSurname(),user.getAge(),user.getPhone(),user.getAddress(),user.getPassword()); System.out.print(""User Inserted Successfully"");  logger.debug(""EXITING createUser "" + user.toString()); return user; } "	0	0	0	0	1	0
"public void edit(int id, Employee e) throws Exception { connect(); stmt = conn.createStatement(); stmt.executeUpdate(""UPDATE public.\""EMPLOYEES\"" "" + ""SET \""FULLNAME\"" = '"" + e.getFullName() + ""', \""ADDRESS\"" = '"" + e.getAddress() + ""', \""EMAIL\"" = '"" + e.getEmail() + ""', "" + ""\""PHONE\"" = '"" + e.getPhone() + ""', \""SALARY\"" = '"" + e.getSalary() + ""', "" + ""WHERE \""ID\"" = "" + id); } "	0	0	1	1	0	0
"@Test public void testUseWithMercilessExecutioner() {  // Spells and abilities your opponents control can't cause you to sacrifice permanents. addCard(Zone.GRAVEYARD, playerA, ""Sigarda, Host of Herons""); addCard(Zone.BATTLEFIELD, playerB, ""Swamp"", 5); // When Merciless Executioner enters the battlefield, each player sacrifices a creature. addCard(Zone.GRAVEYARD, playerB, ""Merciless Executioner"");  // Tempting offer — Return a creature card from your graveyard to the battlefield. // Each opponent may return a creature card from his or her graveyard to the battlefield. // For each player who does, return a creature card from your graveyard to the battlefield. addCard(Zone.HAND, playerB, ""Tempt with Immortality""); // sorcery {4}{B}  castSpell(2, PhaseStep.PRECOMBAT_MAIN, playerB, ""Tempt with Immortality""); setChoice(playerB, ""Merciless Executioner""); setChoice(playerA, ""Sigarda, Host of Herons"");  setStopAt(2, PhaseStep.POSTCOMBAT_MAIN); execute();  assertGraveyardCount(playerB, ""Tempt with Immortality"", 1); assertGraveyardCount(playerA, ""Sigarda, Host of Herons"", 0); assertGraveyardCount(playerB, ""Merciless Executioner"", 0); } "	0	0	0	1	1	0
public boolean hasAdherenceInRedAlertBeenRaisedForCurrentWeek(String patientId) { DateTime startDateForCurrentWeek = DateUtil.newDateTime(getStartDateForCurrentWeek(patientId), 0, 0, 0); return patientAlertService.getAdherenceInRedAlerts(patientId, startDateForCurrentWeek, DateUtil.now()).size() > 0; } 	0	0	0	0	1	0
"public Landslide findLandslide(int id){ String query = ""Select * FROM "" + TABLE_LANDSLIDE + "" WHERE "" + COLUMN_ID + "" =  \"""" + id + ""\"""";  SQLiteDatabase db = this.getWritableDatabase();  Cursor cursor = db.rawQuery(query, null);  Landslide landslide = new Landslide();  if (cursor.moveToFirst()) { cursor.moveToFirst(); landslide.setId(Integer.parseInt(cursor.getString(0))); landslide.setAgency(Integer.parseInt(cursor.getString(1))); landslide.setRegional(Integer.parseInt(cursor.getString(2))); landslide.setLocal(Integer.parseInt(cursor.getString(3)));  landslide.setDate(cursor.getString(4)); landslide.setRoad_trail_number(cursor.getString(5)); landslide.setRoad_or_Trail(Integer.parseInt(cursor.getString(6))); landslide.setRoad_trail_class(cursor.getString(7)); landslide.setRater(cursor.getString(8)); landslide.setBegin_mile_marker(cursor.getString(9)); landslide.setEnd_mile_marker(cursor.getString(10)); landslide.setSide(Integer.parseInt(cursor.getString(11))); landslide.setWeather(Integer.parseInt(cursor.getString(12))); landslide.setHazard_type(cursor.getString(13)); landslide.setBegin_coordinate_lat(cursor.getString(14)); landslide.setBegin_coordinate_long(cursor.getString(15)); landslide.setEnd_coordinate_latitude(cursor.getString(16)); landslide.setEnd_coordinate_longitude(cursor.getString(17)); landslide.setDatum(cursor.getString(18)); landslide.setAadt(cursor.getString(19)); landslide.setLength_affected(cursor.getString(20)); landslide.setSlope_height_axial_length(cursor.getString(21)); landslide.setSlope_angle(cursor.getString(22)); landslide.setSight_distance(cursor.getString(23)); landslide.setRoad_trail_width(cursor.getString(24)); landslide.setSpeed_limit(Integer.parseInt(cursor.getString(25))); landslide.setMinimum_ditch_width(cursor.getString(26)); landslide.setMaximum_ditch_width(cursor.getString(27)); landslide.setMinimum_ditch_depth(cursor.getString(28)); landslide.setMaximum_ditch_depth(cursor.getString(29)); landslide.setFirst_begin_ditch_slope(cursor.getString(30)); landslide.setFirst_end_ditch_slope(cursor.getString(31)); landslide.setSecond_begin_ditch_slope(cursor.getString(32)); landslide.setSecond_end_ditch_slope(cursor.getString(33)); landslide.setStart_annual_rainfall(cursor.getString(34)); landslide.setEnd_annual_rainfall(cursor.getString(35)); landslide.setSole_access_route(Integer.parseInt(cursor.getString(36))); landslide.setFixes_Present(Integer.parseInt(cursor.getString(37))); landslide.setPhotos(cursor.getString(38)); landslide.setComments(cursor.getString(39)); landslide.setFlma_name(cursor.getString(40)); landslide.setFlma_id(cursor.getString(41)); landslide.setFlma_description(cursor.getString(42));  //preliminary rating //landslide only landslide.setPrelim_landslide_road_width_affected(Integer.parseInt(cursor.getString(43))); landslide.setPrelim_landslide_slide_erosion_effects(Integer.parseInt(cursor.getString(44))); landslide.setPrelim_landslide_length_affected(cursor.getString(45)); //for all landslide.setImpact_on_use(Integer.parseInt(cursor.getString(46))); landslide.setAadt_usage_calc_checkbox(Integer.parseInt(cursor.getString(47))); landslide.setAadt_usage(cursor.getString(48)); landslide.setPrelim_rating(cursor.getString(49));  //Hazard Rating //for all landslide.setSlope_drainage(Integer.parseInt(cursor.getString(50))); landslide.setHazard_rating_annual_rainfall(cursor.getString(51)); landslide.setHazard_rating_slope_height_axial_length(cursor.getString(52)); landslide.setHazard_rating_total(cursor.getString(53)); //landslide only landslide.setHazard_landslide_thaw_stability(Integer.parseInt(cursor.getString(54))); landslide.setHazard_landslide_maint_frequency(Integer.parseInt(cursor.getString(55))); landslide.setHazard_landslide_movement_history(Integer.parseInt(cursor.getString(56)));  //Risk Ratings landslide.setRoute_trail_width(cursor.getString(57)); landslide.setHuman_ex_factor(cursor.getString(58)); landslide.setPercent_dsd(cursor.getString(59)); landslide.setR_w_impacts(Integer.parseInt(cursor.getString(60))); landslide.setEnviro_cult_impacts(Integer.parseInt(cursor.getString(61))); landslide.setMaint_complexity(Integer.parseInt(cursor.getString(62))); landslide.setEvent_cost(Integer.parseInt(cursor.getString(63))); landslide.setRisk_total(cursor.getString(64));  landslide.setTotal_score(cursor.getString(65));  cursor.close(); } else { landslide = null; } db.close(); return landslide; } "	1	0	1	1	0	0
"private void populateData() { Bundle bundle = getArguments(); recyclerView = (RecyclerView) mView.findViewById(R.id.li_ask_q_recycler); canSelectABoard = bundle.getBoolean(LiSDKConstants.ASK_Q_CAN_SELECT_A_BOARD, true); boolean updateTitle = bundle.getBoolean(LiSDKConstants.UPDATE_TOOLBAR_TITLE, true); final String selectedMessageSubject = bundle.getString(LiSDKConstants.ORIGINAL_MESSAGE_TITLE); selectCategoryBtn = (TextView) mView.findViewById(R.id.li_ask_question_select_category_btn); selectCategoryLabel = (TextView) mView.findViewById(R.id.li_ask_question_select_category_label); selectedImageImgView = (LiRoundedImageView) mView.findViewById(R.id.li_selected_image_to_upload); askQuestionCameraIcon = (ImageView) mView.findViewById(R.id.li_ask_question_camera); removeSelectedImage = (ImageView) mView.findViewById(R.id.li_removeSelectedImage);  if (!canSelectABoard) { selectedMessageId = bundle.getLong(LiSDKConstants.SELECTED_MESSAGE_ID); selectCategoryLabel.setVisibility(View.GONE); selectCategoryBtn.setVisibility(View.GONE); if (updateTitle) { mActivity.runOnUiThread(new Runnable() { @Override public void run() { mActivity.setTitle(selectedMessageSubject); } }); } getOriginalMessage(); } else { initializeAdapter(); selectCategoryLabel.setVisibility(View.VISIBLE); selectCategoryBtn.setVisibility(View.VISIBLE); selectCategoryBtn.setText(selectedBoard); View.OnClickListener l = new View.OnClickListener() { @Override public void onClick(View v) { openBrowseDialog(); } }; selectCategoryLabel.setOnClickListener(l); selectCategoryBtn.setOnClickListener(l); }   askQuestionCameraIcon.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { // Determine Uri of camera image to save. final String randomName = UUID.randomUUID().toString().substring(0, 5) + "".jpg""; final List<Intent> cameraIntents = new ArrayList<>(); final Intent captureIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE); StringBuilder fileSB = new StringBuilder(); fileSB.append(android.os.Environment.getExternalStorageDirectory()) .append(File.separator) .append(LiSDKManager.getInstance().getLiAppCredentials().getTenantId()) .append(""-community"") .append(File.separator); final File communityRoot = new File(fileSB.toString()); communityRoot.mkdirs(); if (android.os.Environment.getExternalStorageState().equals( android.os.Environment.MEDIA_MOUNTED)) { selectedPhotoFile = new File(communityRoot, randomName); } else { selectedPhotoFile = new File(mActivity.getCacheDir(), randomName); } outputFileUri = Uri.fromFile(selectedPhotoFile);  final PackageManager packageManager = mActivity.getPackageManager(); final List<ResolveInfo> listCam = packageManager.queryIntentActivities(captureIntent, 0); for(ResolveInfo res : listCam) { final String packageName = res.activityInfo.packageName; final Intent intent = new Intent(captureIntent); intent.setComponent(new ComponentName(res.activityInfo.packageName, res.activityInfo.name)); intent.setPackage(packageName); intent.putExtra(MediaStore.EXTRA_OUTPUT, outputFileUri); cameraIntents.add(intent); }  // Filesystem. final Intent galleryIntent = new Intent(); galleryIntent.setType(""image/*""); galleryIntent.setAction(Intent.ACTION_GET_CONTENT);  // Chooser of filesystem options. final Intent chooserIntent = Intent.createChooser(galleryIntent, ""Select Source"");  // Add the camera options. chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, cameraIntents.toArray(new Parcelable[cameraIntents.size()]));  startActivityForResult(chooserIntent, LiSDKConstants.PICK_IMAGE_REQUEST); } });  showSelectedImage(false); removeSelectedImage.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { selectedImageImgView.setImageBitmap(null); deleteDownloadedFile(); showSelectedImage(false); } }); } "	0	0	0	0	1	0
protected void postReply() throws LiRestResponseException { LiClientRequestParams liClientRequestParams = new LiClientRequestParams.LiCreateReplyClientRequestParams(mActivity, askQuestionBodyText, selectedMessageId, selectedImageId, selectedImageName); LiClient replyMessageClient = LiClientManager.getCreateReplyClient(liClientRequestParams);  replyMessageClient.processAsync(new LiAsyncRequestCallback<LiPostClientResponse>() { @Override public void onSuccess(LiBaseRestRequest liBaseRestRequest, LiPostClientResponse liPostClientResponse) throws LiRestResponseException { if (!isAdded() || mActivity == null) { return; } if (liPostClientResponse.getResponse().getHttpCode() == LiSDKConstants.HTTP_CODE_SUCCESSFUL) { LiUIUtils.showInAppNotification(mActivity, R.string.li_replyPostSuccess); deleteDownloadedFile(); Intent intent = new Intent(getString(R.string.li_messsage_create_successful)); mActivity.sendBroadcast(intent); mActivity.finish(); } else { LiUIUtils.showInAppNotification(mActivity, R.string.li_replyPostError); } enableFormFields(true); }  @Override public void onError(Exception e) { if (isAdded() || mActivity == null) { enableFormFields(true); LiUIUtils.showInAppNotification(mActivity, R.string.li_replyPostError); } } }); } 	0	0	0	0	1	0
"private Statement generateDeepUnwrapMethodBody(final String methodName) { final String cloneVar = ""clone""; final BlockStatement block = new BlockStatement(); block.addStatement(Stmt.declareFinalVariable(cloneVar, bindable, Stmt.newObject(bindable)));  for (final String property : bindable.getBeanDescriptor().getProperties()) { final MetaMethod readMethod = bindable.getBeanDescriptor().getReadMethodForProperty(property); final MetaMethod writeMethod = bindable.getBeanDescriptor().getWriteMethodForProperty(property); if (readMethod != null && writeMethod != null) { final MetaClass type = readMethod.getReturnType(); if (!DataBindingUtil.isBindableType(type)) { // If we find a collection we copy its elements and unwrap them if necessary // TODO support map types if (type.isAssignableTo(Collection.class)) { final String colVarName = property + ""Clone""; final String elemVarName = property + ""Elem"";  final BlockBuilder<ElseBlockBuilder> colBlock = If.isNotNull(Stmt.nestedCall(target().invoke(readMethod)));  if ((type.isInterface() || type.isAbstract()) && (type.isAssignableTo(List.class) || type.isAssignableTo(Set.class))) { final MetaClass clazz = (type.isAssignableTo(Set.class)) ? MetaClassFactory.get(HashSet.class) : MetaClassFactory.get(ArrayList.class); colBlock.append(Stmt.declareFinalVariable(colVarName, type.getErased(), Stmt.newObject(clazz))); } else { if (!type.isInterface() && !type.isAbstract()) { colBlock.append(Stmt.declareFinalVariable(colVarName, type.getErased(), Stmt.newObject(type.getErased()))); } else { logger.log(TreeLogger.WARN, ""Bean validation on collection "" + property + "" in class "" + bindable + "" won't work. Change to either List or Set or use a concrete type instead.""); continue; } } // Check if the collection element is proxied and unwrap if necessary colBlock.append( Stmt.nestedCall(target().invoke(readMethod)).foreach(elemVarName, Object.class) .append ( If.instanceOf(Refs.get(elemVarName), BindableProxy.class) .append (Stmt.loadVariable(colVarName) .invoke(""add"", Stmt.castTo(BindableProxy.class, Stmt.loadVariable(elemVarName)).invoke(methodName)) ) .finish() .else_() .append(Stmt.loadVariable(colVarName).invoke(""add"", Refs.get(elemVarName))) .finish() ) .finish());  colBlock.append(Stmt.loadVariable(cloneVar).invoke(writeMethod, Refs.get(colVarName))); block.addStatement(colBlock.finish()); } else { block.addStatement(Stmt.loadVariable(cloneVar).invoke(writeMethod,target().invoke(readMethod))); } } // Found a bindable property: Generate code to unwrap for the case the instance is proxied else { final Statement field = target().invoke(readMethod); block.addStatement ( If.instanceOf(field, BindableProxy.class) .append(Stmt.loadVariable(cloneVar).invoke(writeMethod, Cast.to ( readMethod.getReturnType(), Stmt.castTo(BindableProxy.class, Stmt.loadVariable(""this"").invoke(readMethod)).invoke(methodName) ) ) ) .finish() .elseif_(Bool.expr(Stmt.invokeStatic(BindableProxyFactory.class, ""isBindableType"", target().invoke(readMethod)))) .append(Stmt.loadVariable(cloneVar).invoke(writeMethod, Cast.to ( readMethod.getReturnType(), Stmt.castTo(BindableProxy.class, Stmt.invokeStatic(BindableProxyFactory.class, ""getBindableProxy"", target().invoke(readMethod))).invoke(methodName) ) ) ) .finish() .else_() .append(Stmt.loadVariable(cloneVar).invoke(writeMethod, target().invoke(readMethod))) .finish() ); } } }  block.addStatement(Stmt.loadVariable(cloneVar).returnValue());  return block; } "	0	0	1	1	0	0
"public String getString() { return ""ErrorResponse("" + ""code="" + code + "", "" + ""message="" + message + "", "" + ""bucketName="" + bucketName + "", "" + ""objectName="" + objectName + "", "" + ""resouce="" + resource + "", "" + ""requestId="" + requestId + "", "" + ""hostId="" + hostId + "")""; } "	0	0	1	1	0	0
private boolean isTypeDefinition(Node rhs) { return rhs.isClass() || rhs.getType() == Token.INTERFACE; } 	0	0	0	0	1	0
public static HostedImage create(String originalUrl) { return create(originalUrl, new HashMap<ImageQuality, String>()); } 	0	0	1	0	1	0
"public void checkDatabase() throws SQLException { // create database String dbexists = ""select * from information_schema.SCHEMATA where SCHEMA_NAME = '"" + FdfSettings.DB_NAME + ""';"";   Connection conn = null; Connection conn2 = null; Statement stmt2 = null; Statement stmt = null; ResultSet rs = null;  HikariDataSource hds = null; HikariDataSource hds2 = null;  try { if(FdfSettings.USE_HIKARICP) { hds = MySqlConnection.getInstance().getHikariDatasource(); conn = hds.getConnection(); } else { conn = MySqlConnection.getInstance().getNoDBSession();  } stmt = conn.createStatement();  if (stmt != null) { rs = stmt.executeQuery(dbexists); }  if(rs != null) { if(!rs.next()) { // Database does not exist, create String sqlCreate = ""CREATE DATABASE IF NOT EXISTS "" + FdfSettings.DB_NAME + "" CHARACTER SET "" + FdfSettings.DB_ENCODING + "";""; String sqlUserGrant = ""GRANT ALL ON "" + FdfSettings.DB_NAME + "".* to '"" + FdfSettings.DB_USER + ""'@'"" + FdfSettings.DB_HOST + ""' IDENTIFIED BY '"" + FdfSettings.DB_PASSWORD + ""'"";  if(FdfSettings.USE_HIKARICP) { hds2 = MySqlConnection.getInstance().getNoDbHikariDatasource(); conn2 = hds2.getConnection(); } else { conn2 = MySqlConnection.getInstance().getNoDBSession(); } stmt2 = conn2.createStatement();  if(stmt2 != null) { stmt2.executeUpdate(sqlCreate); stmt2.executeUpdate(sqlUserGrant); fdfLog.info(""******************************************************************""); fdfLog.info(""4DFLib Database did not exist, attempting to create.""); fdfLog.info(""******************************************************************"");  fdfLog.info(""Database created.""); fdfLog.info(""******************************************************************""); } } } } catch (SQLException sqlException) {  // some other error fdfLog.warn(""Error occurred checking or creating database:::""); fdfLog.warn(""SQL error \nCode: {},\nState: {}\nMessage"" + "": {}\n"", sqlException.getErrorCode(), sqlException.getSQLState(), sqlException.getMessage()); } finally { if (rs != null) { rs.close(); } if (stmt != null) { stmt.close(); } if(FdfSettings.USE_HIKARICP) { if (conn != null) { MySqlConnection.getInstance().close(hds); } } else { if (conn != null) { MySqlConnection.getInstance().close(conn); } } if (stmt2 != null) { stmt2.close(); } if(FdfSettings.USE_HIKARICP) { if (conn2 != null) { MySqlConnection.getInstance().close(hds2); } } else { if (conn2 != null) { MySqlConnection.getInstance().close(conn2); } } }  } "	1	0	0	0	1	0
public Object valueFromBytes(byte[] bytes) { if (bytes == null || bytes.length == 0) { return null; } return Jboot.getSerializer().serialize(bytes); } 	0	0	0	1	1	0
"private void spawnPiece() { /* * Poll the last piece and reset our position and rotation to * their default variables, then pick the next piece to use. */ this.currentType = nextType; this.currentCol = currentType.getSpawnColumn(); this.currentRow = currentType.getSpawnRow(); this.currentRotation = 0; this.nextType = TileType.values()[random.nextInt(TYPE_COUNT)];  /* * If the spawn point is invalid, we need to pause the game and flag that we've lost * because it means that the pieces on the board have gotten too high. */ if(!board.isValidAndEmpty(currentType, currentCol, currentRow, currentRotation)) { this.isGameOver = true; logicTimer.setPaused(true);  String gameoverSound = this.getClass().getResource(""/Tetris.mp3"").toString(); Media sound2 = new Media(gameoverSound); MediaPlayer mediaPlayer = new MediaPlayer(sound2); mediaPlayer.setVolume(0.8); mediaPlayer.play(); } } "	0	0	0	0	1	0
"@ReactMethod public void getLocations(Callback success, Callback error) { WritableArray locationsArray = Arguments.createArray(); LocationDAO dao = DAOFactory.createLocationDAO(getContext()); try { Collection<BackgroundLocation> locations = dao.getAllLocations(); for (BackgroundLocation location : locations) { WritableMap out = Arguments.createMap(); Long locationId = location.getLocationId(); Integer locationProvider = location.getLocationProvider(); if (locationId != null) out.putInt(""locationId"", Convert.safeLongToInt(locationId)); if (locationProvider != null) out.putInt(""locationProvider"", locationProvider); out.putDouble(""time"", new Long(location.getTime()).doubleValue()); out.putDouble(""latitude"", location.getLatitude()); out.putDouble(""longitude"", location.getLongitude()); out.putDouble(""accuracy"", location.getAccuracy()); out.putDouble(""speed"", location.getSpeed()); out.putDouble(""altitude"", location.getAltitude()); out.putDouble(""bearing"", location.getBearing());  locationsArray.pushMap(out); } success.invoke(locationsArray); } catch (Exception e) { log.error(""Getting all locations failed: {}"", e.getMessage()); error.invoke(""Converting locations to JSON failed.""); } } "	0	0	0	0	1	0
private boolean saveNotNeeded() { if (noteTmp.get_id() == 0 && prefs.getBoolean(Constants.PREF_AUTO_LOCATION, false)) { note.setLatitude(noteTmp.getLatitude()); note.setLongitude(noteTmp.getLongitude()); } return !noteTmp.isChanged(note); } 	0	0	1	0	1	0
private void requestFocus(final EditText view) { if (note.get_id() == 0 && !noteTmp.isChanged(note)) { KeyboardUtils.showKeyboard(view); } } 	0	0	1	0	1	0
public void bindData(RecentPhotosResponse.Photo mPhoto) {  Picasso.with(context).load(mPhoto.getUrlC()).into(mItemImage); } 	0	0	0	0	1	0
"@Override public void onBytesRead(byte[] bytes, int size, BluetoothSocketIoThread who) { final long threadId = who.getId(); Log.d(TAG, ""onBytesRead: Read "" + size + "" bytes successfully (thread ID: "" + threadId + "")""); String identityString = new String(bytes); PeerProperties peerProperties = new PeerProperties(); boolean resolvedPropertiesOk = false;  if (!identityString.isEmpty()) { try { resolvedPropertiesOk = CommonUtils.getPropertiesFromIdentityString(identityString, peerProperties); } catch (JSONException e) { Log.e(TAG, ""Failed to resolve peer properties: "" + e.getMessage(), e); }  if (resolvedPropertiesOk) { Log.i(TAG, ""Handshake succeeded with "" + peerProperties.toString());  // Set the resolved properties to the associated thread who.setPeerProperties(peerProperties);  // On successful handshake, we'll pass the socket for the listener, so it's now the // listeners responsibility to close the socket once done. Thus, do not close the // socket here. Do not either close the input and output streams, since that will // invalidate the socket as well. mListener.onConnected(who.getSocket(), peerProperties); mHandshakeThread = null; } }  if (!resolvedPropertiesOk) { String errorMessage = ""Handshake failed - unable to resolve peer properties, perhaps due to invalid identity""; Log.e(TAG, errorMessage); shutdown(); mListener.onConnectionFailed(errorMessage, mPeerProperties); } } "	0	0	0	0	1	0
public void addEventListener(TTTEventListener<I, D> listener) { eventListeners.add(new WeakReference<TTTEventListener<I,D>>(listener)); } 	1	0	0	0	1	0
@Override public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception { Object msg = e.getMessage(); if (msg instanceof HttpRequest) { HttpRequest req = (HttpRequest) msg; if (req.getMethod() == HttpMethod.TRACE) { Request request = new Request(ctx, req); Response response = new Response(bc, ctx, request); request.setResponse(response); response.sendError(404); return; }  HttpContext httpContext = findHttpContext(req.getHeader(HttpHeaders.Names.HOST)); if (httpContext == null) { Request request = new Request(ctx, req); Response response = new Response(bc, ctx, request); request.setResponse(response);  response.sendError(404); return; }  Request request = new Request(ctx, req); Response response = new Response(bc, ctx, request); request.setResponse(response);  httpContext.handle(request, response); } else if (msg instanceof TextWebSocketFrame) { TextWebSocketFrame frame = (TextWebSocketFrame) msg; String host = (String) ctx.getChannel().getAttachment(); HttpContext httpContext = findHttpContext(host);  WebSocketFrame f = new WebSocketFrame(); f.setHost(host); f.setRemote((InetSocketAddress) ctx.getChannel().getRemoteAddress()); f.setType(0); f.setText(frame.getText());  httpContext.getWebSocketManager().dispatch(f); } } 	0	0	0	0	1	0
@Override public long getDateHeader(String name) { try { return Long.parseLong(req.getHeader(name)); } catch (NumberFormatException e) { throw new IllegalArgumentException(e); } } 	0	0	0	0	1	0
public JComboBox getJcb_displayAlpha() { return jcb_displayAlpha; } 	0	0	0	0	1	0
"public static Map<String, OneTestExecResult> executeTestsInFreshJVM(String classPath, String outputFile, List<String> tests) {  List<String> commandList = new LinkedList<String>(); commandList.add(""java""); commandList.add(""-cp""); commandList.add(classPath + Globals.pathSep + System.getProperties().getProperty(""java.class.path"", null)); //        commandList.add(classPath + Globals.pathSep + System.getProperties().getProperty(""java.class.path"", null) + ""/Users/winglam/Box Sync/research/dt-impact/dependent-tests-impact/experiments/crystalvc/impact-tools/*:/Users/winglam/Box Sync/research/dt-impact/dependent-tests-impact/experiments/crystalvc/bin/:/Users/winglam/Box Sync/research/dt-impact/dependent-tests-impact/experiments/crystalvc/lib/*"");  if(tests.size() < threshhold) { commandList.add(""edu.washington.cs.dt.util.TestRunnerWrapper""); commandList.add(outputFile); commandList.addAll(tests); } else { Files.createIfNotExistNoExp(testsfile); Files.writeToFileWithNoExp(tests, testsfile);  commandList.add(""edu.washington.cs.dt.util.TestRunnerWrapperFileInputs""); commandList.add(outputFile); commandList.add(testsfile); }  String[] args = commandList.toArray(new String[0]);  Command.exec(args);  Map<String, OneTestExecResult> testResults = parseTestResults(outputFile);  Utils.checkTrue(tests.size() == testResults.size(), ""Test num not equal."");  return testResults; } "	0	0	0	0	1	0
public boolean isStackValidForSlot(int slot, JsItemStack stack) { return that.isItemValidForSlot(slot, stack.getThat()); } 	0	0	1	1	1	0
"private void writeToFile(File file) { FileOutputStream outputStream; try { outputStream = new FileOutputStream(file); try { outputStream.write(html.toString().getBytes()); } catch (IOException e) { Log.e(TAG, ""Failed to write to file""); } finally { outputStream.close(); } } catch (FileNotFoundException e) { Log.e(TAG, ""File not found: "" + file.getName()); } catch (IOException e) { } } "	0	0	1	0	1	0
"@Override public String toString() { try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); extensionProperties.store(outputStream, ""arquillian-citrus-remote-configuration""); return outputStream.toString(); } catch (IOException e) { throw new RuntimeException(""Could not write the properties file."", e); } } "	0	0	0	0	1	0
"@Override public Object[] resolve(Method method) { Object[] values = new Object[method.getParameterTypes().length]; Class<?>[] parameterTypes = method.getParameterTypes();  for (int i = 0; i < parameterTypes.length; i++) { final Annotation[] parameterAnnotations = method.getParameterAnnotations()[i]; for (Annotation annotation : parameterAnnotations) { if (annotation instanceof CitrusResource) { Class<?> type = parameterTypes[i]; if (TestDesigner.class.isAssignableFrom(type)) { TestDesigner testDesigner = new DefaultTestDesigner(citrusInstance.get().getApplicationContext()); testDesigner.name(method.getDeclaringClass().getSimpleName() + ""."" + method.getName());  values[i] = testDesigner; } else if (TestRunner.class.isAssignableFrom(type)) { TestRunner testRunner = new DefaultTestRunner(citrusInstance.get().getApplicationContext()); testRunner.name(method.getDeclaringClass().getSimpleName() + ""."" + method.getName());  values[i] = testRunner; } else { throw new RuntimeException(""Not able to provide a Citrus resource injection for type "" + type); } } } }  return values; } "	0	0	0	0	1	0
public static String SettingFileString(String fileName, boolean useDefault) { return SettingFile(fileName, useDefault).getPath(); } 	0	0	0	0	1	0
private void tabulate(String path, Column counter, long amount) { if (getDepth(path) < depthLimit) { synchronized (report) { EnumMap<Column, Long> row = getReportRow(path); if (row.containsKey(counter)) { row.put(counter, row.get(counter) + amount); } else { row.put(counter, amount); } } } if (path.length() > baseFolder.length()) { tabulate(getParentPath(path), counter, amount); } } 	1	0	1	0	1	0
@SubscribeEvent public void onUpdate(LivingEvent.LivingUpdateEvent event) { if (event.getEntityLiving() instanceof EntityPlayer) { EntityPlayer player = (EntityPlayer) event.getEntityLiving(); ItemStack[] main = player.inventory.mainInventory;  if (!player.worldObj.isRemote) { for (int i = 0; i < main.length; i++) { if (main[i] != null) { if (main[i].getItem() instanceof ItemSword || main[i].getItem() instanceof ItemBow || main[i].getItem() instanceof ItemArmor) { ItemStack stack = main[i]; NBTTagCompound nbt = NBTHelper.loadStackNBT(stack);  if (nbt != null) { Rarity rarity = Rarity.getRarity(nbt); Random rand = player.worldObj.rand;  if (rarity == Rarity.UNKNOWN) { rarity = Rarity.getRandomRarity(rand); rarity.setRarity(nbt); NBTHelper.saveStackNBT(stack, nbt); Levels.NETWORK.sendTo(new PacketRarity(NBTHelper.loadStackNBT(stack)), (EntityPlayerMP) player); if (rarity == Rarity.ANCIENT) player.worldObj.playSound(player, player.getPosition(), SoundEvents.ENTITY_ENDERDRAGON_DEATH, player.getSoundCategory(), 0.8F, 1.0F); } } } } } } } } 	0	0	0	0	1	0
public int getWidth() { return this.img.getWidth(); } 	1	0	0	0	1	0
public ImageType getSourceType() { return this.sourceType; } 	1	0	0	0	1	0
@EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true) public void onPlayerBucketEmpty(PlayerBucketEmptyEvent event) { if (config.isStopEndPortalDeletion()) { Block block = event.getBlockClicked().getRelative(event.getBlockFace());  if (block.getType() == Material.ENDER_PORTAL) { event.setCancelled(true); } } } 	0	0	0	0	1	0
public void sendMessage(Message msg, int toEntityId) { if (serviceConnector != null) { serviceConnector.sendMessage(msg, toEntityId); } else { clusterClient.getSession().sendMessage(msg, toEntityId); } } 	0	0	0	0	1	0
public final <U extends T> U getListener(Class<U> classType) { return _listener != null ? (U)_listener : null; } 	0	0	0	0	1	0
"public List<DisplayMotTestItem> getTradeMotTestsLegacy(TradeServiceRequest request, Context context) throws TradeException {  try { logger.trace(""Entering getTradeMotTestsLegacy""); if (request.getPathParams().getRegistration() != null) { String registration = URLDecoder.decode(request.getPathParams().getRegistration(), ""UTF-8""); String make = URLDecoder.decode(request.getPathParams().getMake(), ""UTF-8""); logger.info(""Trade API MOTH request for registration = "" + registration + "" and make = "" + make); List<DisplayMotTestItem> items = tradeReadService.getMotTestsByRegistrationAndMake(registration, make);  if (items.isEmpty()) { throw new InvalidResourceException(""No MOT Tests found for registration : "" + registration + "" and make : "" + make, context.getAwsRequestId()); }  logger.info(""Trade API MOTR request for registration = "" + registration + "" and make = "" + make + "" returned "" + items .size() + "" records""); logger.trace(""Exiting getTradeMotTestsLegacy""); return items; } else { logger.trace(""Exiting getTradeMotTestsLegacy""); throw new BadRequestException(""Invalid Parameters"", context.getAwsRequestId()); } } catch (TradeException e) { // no need to log these errors, just throw them back logger.trace(""Exiting getTradeMotTestsLegacy""); throw e; } catch (Exception e) { // log all unhandled exceptions and throw an internal server error logger.error(e); logger.trace(""Exiting getTradeMotTestsLegacy""); throw new InternalServerErrorException(e, context.getAwsRequestId()); } } "	0	0	0	0	1	0
"private uk.gov.dvsa.mot.trade.api.Vehicle getLatestMotTestPassAndMapToTradeVehicle(List<Vehicle> vehicles) {  uk.gov.dvsa.mot.trade.api.Vehicle tradeVehicle = null;  if (vehicles != null && !vehicles.isEmpty()) { Vehicle vehicle = null; MotTest motTest = null;  for (Vehicle v : vehicles) { MotTest mt = motTestReadService.getLatestMotTestPassByVehicle(v);  // if vehicle has not been set yet (i.e. first vehicle) or latest // expiryDate is later than current expiryDate if (vehicle == null || (mt.getExpiryDate() != null && (motTest.getExpiryDate() == null || mt.getExpiryDate().after(motTest.getExpiryDate())))) { vehicle = v; motTest = mt; } }  tradeVehicle = new uk.gov.dvsa.mot.trade.api.Vehicle();  if (vehicle != null) { tradeVehicle.setRegistration(vehicle.getRegistration()); tradeVehicle.setMake(vehicle.getMake()); tradeVehicle.setModel(vehicle.getModel()); tradeVehicle.setPrimaryColour(vehicle.getPrimaryColour());  if (!""Not Stated"".equalsIgnoreCase(vehicle.getSecondaryColour())) { tradeVehicle.setSecondaryColour(vehicle.getSecondaryColour()); }  if (vehicle.getManufactureDate() != null) { tradeVehicle.setManufactureYear(SDF_YEAR.format(vehicle.getManufactureDate())); } }  if (motTest != null) { if (motTest.getExpiryDate() != null) { tradeVehicle.setMotTestExpiryDate(SDF_DATE_ISO_8601.format(motTest.getExpiryDate())); } if (motTest.getNumber() != null) { tradeVehicle.setMotTestNumber(motTest.getNumber().toString()); } } }  return tradeVehicle; } "	0	0	0	0	1	0
protected boolean assignsNoNewVariables(RootNodeWrapper rootNode) { FrameDescriptor descriptor = rootNode.getRootNode().getFrameDescriptor(); return descriptor.getSize() == 1 && SelfNode.SELF_IDENTIFIER.equals(descriptor.getSlots().get(0).getIdentifier()); } 	0	0	0	0	1	0
"public int pickUpItemInDirection(int x, int y) { int error_code = -1;  Item itemToBePickedUp = current_map_reference_.removeTopItem(x + getMyXCoordinate(), y + getMyYCoordinate()); if (itemToBePickedUp != null) { try { entity_.addItemToInventory((PickupableItem) itemToBePickedUp); } catch (ClassCastException c) { return -2; } Display.setMessage(""Picked up item: "" + itemToBePickedUp.name_, 3); error_code = 0; } else { Display.getDisplay().setMessage(""There is nothing here to pick up.""); }  return error_code; } "	0	0	0	0	1	0
public final byte[] recv() { return recv(0); } 	0	0	1	0	0	0
"@Override public void valueChange(ValueChangeEvent event) { if(dataSelection.getValue().equals(""Upload"")){ panelContent.removeComponent(dataBaseSelection); panelContent.addComponent(uploadLayout); } else if (dataSelection.getValue().equals(""Database"")) { panelContent.removeComponent(uploadLayout); panelContent.addComponent(createDatabaseSelection()); }  } "	0	0	0	0	1	0
"protected String getURL(String name, boolean admin) { String url; if (name.startsWith(""jdbc:"")) { if (config.mvStore) { name = addOption(name, ""MV_STORE"", ""true""); // name = addOption(name, ""MVCC"", ""true""); } return name; } if (admin) { // name = addOption(name, ""RETENTION_TIME"", ""10""); // name = addOption(name, ""WRITE_DELAY"", ""10""); } if (config.memory) { name = ""mem:"" + name; } else { int idx = name.indexOf(':'); if (idx < 0 || idx > 10) { // index > 10 if in options name = getBaseDir() + ""/"" + name; } } if (config.networked) { if (config.ssl) { url = ""ssl://localhost:9192/"" + name; } else { url = ""tcp://localhost:9192/"" + name; } } else if (config.googleAppEngine) { url = ""gae://"" + name + "";FILE_LOCK=NO;AUTO_SERVER=FALSE;DB_CLOSE_ON_EXIT=FALSE""; } else { url = name; } if (config.mvStore) { url = addOption(url, ""MV_STORE"", ""true""); // url = addOption(url, ""MVCC"", ""true""); } if (!config.memory) { if (config.smallLog && admin) { url = addOption(url, ""MAX_LOG_SIZE"", ""1""); } } if (config.traceSystemOut) { url = addOption(url, ""TRACE_LEVEL_SYSTEM_OUT"", ""2""); } if (config.traceLevelFile > 0 && admin) { url = addOption(url, ""TRACE_LEVEL_FILE"", """" + config.traceLevelFile); url = addOption(url, ""TRACE_MAX_FILE_SIZE"", ""8""); } url = addOption(url, ""LOG"", ""1""); if (config.throttleDefault > 0) { url = addOption(url, ""THROTTLE"", """" + config.throttleDefault); } else if (config.throttle > 0) { url = addOption(url, ""THROTTLE"", """" + config.throttle); } url = addOption(url, ""LOCK_TIMEOUT"", ""50""); if (config.diskUndo && admin) { url = addOption(url, ""MAX_MEMORY_UNDO"", ""3""); } if (config.big && admin) { // force operations to disk url = addOption(url, ""MAX_OPERATION_MEMORY"", ""1""); } if (config.mvcc) { url = addOption(url, ""MVCC"", ""TRUE""); } if (config.cacheType != null && admin) { url = addOption(url, ""CACHE_TYPE"", config.cacheType); } if (config.diskResult && admin) { url = addOption(url, ""MAX_MEMORY_ROWS"", ""100""); url = addOption(url, ""CACHE_SIZE"", ""0""); } if (config.cipher != null) { url = addOption(url, ""CIPHER"", config.cipher); } if (config.defrag) { url = addOption(url, ""DEFRAG_ALWAYS"", ""TRUE""); } return ""jdbc:h2:"" + url; } "	0	0	0	0	1	0
"protected Geometry getGeomtery(final FeatureOfInterest feature, Session session) throws OwsExceptionReport { if (feature.isSetIdentifier()) { Criteria c = session.createCriteria(PatchEntity.class); c.add(Restrictions.eq(PATCH_FEATURE_ID, feature.getIdentifier())); LOGGER.debug( ""QUERY getGeomtery(feature): {}"", HibernateHelper.getSqlString(c)); PatchEntity patchEntity = (PatchEntity)c.uniqueResult(); if (patchEntity.getPa() != null) { return getGeometryHandler().switchCoordinateAxisFromToDatasourceIfNeeded(patchEntity.getPa()); } } return null; } "	0	0	1	0	0	0
"public void testMixing() throws InterruptedException { sender1.activate(); mixer.start(); receiver.activate(); Thread.sleep(1200);  sender2.activate(); Thread.sleep(1200);  sender3.activate(); Thread.sleep(1200);  mixer.stop(); sender1.deactivate(); sender2.deactivate(); sender3.deactivate(); receiver.deactivate();  System.out.println(""mix execution count: "" + mixer.mixCount);  int res = receiver.getPacketsCount(); System.out.println(""Received packets count:"" + res); assertEquals(150, res, 5); } "	0	0	0	0	1	0
private void nextImage() { if (mIdImageDepartment < Settings.ID_IMAGE_DEPARTMENT.length - 1) { mIdImageDepartment++; } else { mIdImageDepartment = Settings.ID_DEPARTMENT_DEFAULT; } drawImage(); } 	0	0	0	1	1	0
"public static String formatSlots(int slots) { if (slots == 1) return slots + "" "" + get(""general.units.slot"", false); return slots + "" "" + get(""general.units.slots"", false); } "	0	0	1	0	1	0
"@JavascriptInterface void parseCommand(final int callbackId, final String command) { final ControlBinder control = engine.getControl(); if (control == null) throw new RuntimeException(""The engine died unexpectedly"");  AsyncTask.THREAD_POOL_EXECUTOR.execute(new Runnable() { @Override public void run() { try { replyJSCallback(callbackId, null, control.parseCommand(command)); } catch (Exception e) { replyJSCallback(callbackId, e, null); } } }); } "	0	0	1	0	0	0
public Properties loadProperties(String path) throws Exception { return loadProperties(absolute(path)); } 	0	0	0	0	1	0
@Override public void onMultiPageStateChanged(boolean isMultiPage) { if (paginationView != null) { paginationView.setVisibility(isMultiPage ? View.VISIBLE : View.GONE); } } 	0	0	0	0	1	0
"public static Storage createLinkStorage(String configPath, String seedFile, String dataPath, String modelPath, LinkStorageConfig config) throws LinkClassifierFactoryException, FrontierPersistentException, IOException {  String stoplistFile = configPath + ""/stoplist.txt"";  LinkClassifierFactory linkClassifierFactory = new LinkClassifierFactoryImpl(stoplistFile, modelPath); LinkClassifier linkClassifier = linkClassifierFactory.createLinkClassifier(config.getTypeOfClassifier());  FrontierManager frontierManager = FrontierManagerFactory.create(config, configPath, dataPath, seedFile, stoplistFile);  BipartiteGraphRepository graphRep = new BipartiteGraphRepository(dataPath);  BipartiteGraphManager manager = createBipartiteGraphManager(config, linkClassifier, frontierManager, graphRep);  LinkStorage linkStorage = new LinkStorage(config, manager, frontierManager);  if (config.isUseOnlineLearning()) { StopList stoplist = new StopListFile(stoplistFile); LinkNeighborhoodWrapper wrapper = new LinkNeighborhoodWrapper(stoplist);  LinkClassifierBuilder cb = new LinkClassifierBuilder(graphRep, stoplist, wrapper, frontierManager.getFrontier());  logger.info(""ONLINE LEARNING:"" + config.getOnlineMethod()); OnlineLearning onlineLearning = new OnlineLearning(frontierManager.getFrontier(), manager, cb, config.getOnlineMethod(), dataPath + ""/"" + config.getTargetStorageDirectory()); linkStorage.setOnlineLearning(onlineLearning, config.getLearningLimit()); }  return linkStorage; } "	1	0	1	0	1	0
public void doCreate(Bundle savedInstanceState) { mAm = (ActivityManager)getContext().getSystemService(Context.ACTIVITY_SERVICE); mState = RunningState.getInstance(getContext()); LayoutInflater inflater = (LayoutInflater)getContext().getSystemService( Context.LAYOUT_INFLATER_SERVICE); inflater.inflate(R.layout.running_processes_view, this); mListView = (ListView)findViewById(android.R.id.list); View emptyView = findViewById(com.android.internal.R.id.empty); if (emptyView != null) { mListView.setEmptyView(emptyView); } mListView.setOnItemClickListener(this); mListView.setRecyclerListener(this); mAdapter = new ServiceListAdapter(mState); mListView.setAdapter(mAdapter); mHeader = inflater.inflate(R.layout.running_processes_header, null); mListView.addHeaderView(mHeader); mColorBar = (LinearColorBar)mHeader.findViewById(R.id.color_bar); Resources res = getResources(); mColorBar.setColors(res.getColor(R.color.running_processes_system_ram), res.getColor(R.color.running_processes_apps_ram), res.getColor(R.color.running_processes_free_ram)); mBackgroundProcessText = (TextView)mHeader.findViewById(R.id.freeSize); mAppsProcessText = (TextView)mHeader.findViewById(R.id.appsSize); mForegroundProcessText = (TextView)mHeader.findViewById(R.id.systemSize);  ActivityManager.MemoryInfo memInfo = new ActivityManager.MemoryInfo(); mAm.getMemoryInfo(memInfo); SECONDARY_SERVER_MEM = memInfo.secondaryServerThreshold; } 	0	0	0	0	1	0
public static void init() { runnable.runTaskTimer(Main.getInstance(), Main.getInstance().getYAMLConfig().blockDrinkDelay*20, Main.getInstance().getYAMLConfig().blockDrinkDelay*20); } 	0	0	0	0	1	0
"@GET @Path(""/"") @Produces(MediaType.TEXT_HTML) public Response get(@Context UriInfo uriInfo) { String rendered = soyService.render(uriInfo.getAbsolutePath() + ""propegator/download"", amzaClusterName.name); return Response.ok(rendered).build(); } "	0	0	0	0	1	0
"public long insertShortSoundTrack(ShortSoundTrack track, long id) { if ( !db.isOpen() ) db = getWritableDatabase(); Log.d(""DB_TEST"", ""ShortSoundSQLHelper:insertShortSoundTrack(""+id+"")""); ContentValues values = new ContentValues(); values.put( KEY_TITLE, track.getTitle() ); values.put( KEY_SHORT_SOUND_ID, id ); values.put( KEY_TRACK_FILENAME_ORIGINAL, """" ); values.put( KEY_TRACK_FILENAME_MODIFIED, """" ); return db.insert( TRACK_TABLE_NAME, null, values );  // Returns the new entry id } "	0	0	0	0	1	0
"@Override public boolean cancelOrder(String orderId) throws ExchangeException, NotAvailableFromExchangeException, NotYetImplementedForExchangeException, IOException { throw new IllegalStateException(""Need to supply currency pair""); } "	0	0	0	0	1	0
public void close() { if(buffer != null) { buffer.release(); buffer = null; } } 	0	0	1	0	0	0
"private void authorizeSecurityGroupIngress( HttpServletRequest request, HttpServletResponse response ) throws ADBException, XMLStreamException, IOException { // -> parse the complicated paramters into our standard object EC2AuthorizeRevokeSecurityGroup EC2request = new EC2AuthorizeRevokeSecurityGroup();  String[] groupName = request.getParameterValues( ""GroupName"" ); if ( null != groupName && 0 < groupName.length ) EC2request.setName( groupName[0] ); else { throw new EC2ServiceException( ClientError.MissingParamter, ""Missing required parameter 'Groupname'""); }  // -> not clear how many parameters there are until we fail to get IpPermissions.n.IpProtocol int nCount = 1; do {  	EC2IpPermission perm = new EC2IpPermission();  String[] protocol = request.getParameterValues( ""IpPermissions."" + nCount + "".IpProtocol"" ); if ( null != protocol && 0 < protocol.length ) perm.setProtocol( protocol[0] ); else break;  String[] fromPort = request.getParameterValues( ""IpPermissions."" + nCount + "".FromPort"" ); if ( null != fromPort && 0 < fromPort.length ) { if ( protocol[0].equalsIgnoreCase(""icmp"") ) perm.setIcmpType( fromPort[0] ) ; else perm.setFromPort( Integer.parseInt( fromPort[0]) ); }  String[] toPort = request.getParameterValues( ""IpPermissions."" + nCount + "".ToPort"" ); if ( null != toPort && 0 < toPort.length ) { if ( protocol[0].equalsIgnoreCase(""icmp"") ) perm.setIcmpCode( toPort[0] ); else perm.setToPort( Integer.parseInt( toPort[0]) ); }  // -> list: IpPermissions.n.IpRanges.m.CidrIp int mCount = 1; do {  String[] ranges = request.getParameterValues( ""IpPermissions."" + nCount + "".IpRanges."" + mCount + "".CidrIp"" ); if ( null != ranges && 0 < ranges.length) perm.addIpRange( ranges[0] ); else break; mCount++;  } while( true );  // -> list: IpPermissions.n.Groups.m.UserId and IpPermissions.n.Groups.m.GroupName mCount = 1; do {  String[] user = request.getParameterValues( ""IpPermissions."" + nCount + "".Groups."" + mCount + "".UserId"" ); if ( null == user || 0 == user.length) break;  String[] name = request.getParameterValues( ""IpPermissions."" + nCount + "".Groups."" + mCount + "".GroupName"" ); if ( null == name || 0 == name.length) break;  EC2SecurityGroup group = new EC2SecurityGroup(); group.setAccount( user[0] ); group.setName( name[0] ); perm.addUser( group ); mCount++;  } while( true );  // -> multiple IP permissions can be specified per group name EC2request.addIpPermission( perm ); nCount++;  } while( true );  if (1 == nCount) { throw new EC2ServiceException( ClientError.MissingParamter, ""Missing required parameter - IpPermissions""); }  // -> execute the request AuthorizeSecurityGroupIngressResponse EC2response = EC2SoapServiceImpl.toAuthorizeSecurityGroupIngressResponse( ServiceProvider.getInstance().getEC2Engine().authorizeSecurityGroup( EC2request )); serializeResponse(response, EC2response); } "	0	0	0	0	1	0
public static int getAmount(ArrayList<DoobElement> elementList) { int res = 0; for (DoobElement el : elementList) { if (el instanceof BallElement) { res++; } } return res; } 	0	0	0	1	1	0
public int getAmount(ArrayList<DoobElement> elementList) { int res = 0; for (DoobElement el : elementList) { if (el instanceof BallElement) { res++; } } return res; } 	0	0	0	1	1	0
"@Override protected FilterResults performFiltering(CharSequence constraintCategory){ FilterResults filterResults = new FilterResults(); String[] parts = constraintCategory.toString().split("":cat:""); CharSequence constraint = parts[0]; CharSequence category = parts[1]; boolean haveConstraint = false; boolean matchesConstraint = false; boolean matchesCategory = false;  if (constraint!=null && constraint.length()>0){ haveConstraint = true; } if (haveConstraint || !category.equals(""All"")) { ArrayList<Charity> tempList = new ArrayList<Charity>();  for (Charity charity : charityList) { if(haveConstraint){ matchesConstraint = (charity.getName().toLowerCase().contains(constraint.toString().toLowerCase())); }else{ matchesConstraint = true; }  if(category.equals(""All"")){ matchesCategory = true; }else{ matchesCategory = (charity.getCategory().equals(category.toString())); }  if  (matchesConstraint && matchesCategory) { tempList.add(charity); } }  filterResults.count = tempList.size(); filterResults.values = tempList; } else { filterResults.count = charityList.size(); filterResults.values = charityList; }   return filterResults; } "	0	0	1	0	1	0
"public static boolean jsFunction_addDocumentation(Context cx, Scriptable thisObj, Object[] args, Function funObj) throws APIManagementException, ScriptException { if (args == null || args.length == 0) { handleException(""Invalid number of parameters or their types.""); } boolean success = false; String providerName = (String) args[0]; String apiName = (String) args[1]; String version = (String) args[2]; String docName = (String) args[3]; String docType = (String) args[4]; String summary = (String) args[5]; String sourceType = (String) args[6]; String otherTypeName = (String) args[9];  //validate Source Type if (sourceType == null) { throw new APIManagementException(""Invalid Source Type.""); } sourceType = sourceType.trim();  String visibility = (String) args[11]; FileHostObject fileHostObject = null; String sourceURL = null;  boolean isTenantFlowStarted = false;  try { String tenantDomain = MultitenantUtils.getTenantDomain(APIUtil.replaceEmailDomainBack(providerName)); if(tenantDomain != null && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)) { isTenantFlowStarted = true; PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); } APIIdentifier apiId = new APIIdentifier(APIUtil.replaceEmailDomain(providerName), apiName, version); Documentation doc = new Documentation(getDocType(docType), docName); APIProvider apiProvider = getAPIProvider(thisObj);  //add documentation is allowed only if document name does not already exist for this api if (apiProvider.isDocumentationExist(apiId, docName)) { handleException(""Error occurred while adding the document. "" + docName + "" already exists for API "" + apiName + ""-"" + version); }  if (doc.getType() == DocumentationType.OTHER) { //validate otherTypeName if (otherTypeName == null || otherTypeName.trim().isEmpty()) { throw new APIManagementException(""Other Type Name Cannot be Empty.""); } doc.setOtherTypeName(otherTypeName.trim()); }  if (Documentation.DocumentSourceType.URL.toString().equalsIgnoreCase(sourceType)) { doc.setSourceType(Documentation.DocumentSourceType.URL); sourceURL = args[7].toString(); //validate urls if (sourceURL == null || !isURL(sourceURL.trim())) { throw new APIManagementException(""Invalid Document Url Format.""); } sourceURL = sourceURL.trim(); doc.setSourceUrl(sourceURL); } else if (Documentation.DocumentSourceType.FILE.toString().equalsIgnoreCase(sourceType)) { doc.setSourceType(Documentation.DocumentSourceType.FILE); fileHostObject = (FileHostObject) args[8]; } else if (Documentation.DocumentSourceType.INLINE.toString().equalsIgnoreCase(sourceType)) { doc.setSourceType(Documentation.DocumentSourceType.INLINE); } else { throw new APIManagementException(""Invalid Source Type.""); }  doc.setSummary(summary);  if (visibility == null) { visibility = APIConstants.DOC_API_BASED_VISIBILITY; } if (Documentation.DocumentVisibility.API_LEVEL.toString().equalsIgnoreCase(visibility)) { doc.setVisibility(Documentation.DocumentVisibility.API_LEVEL); } else if (Documentation.DocumentVisibility.PRIVATE.toString().equalsIgnoreCase(visibility)) { doc.setVisibility(Documentation.DocumentVisibility.PRIVATE); } else { doc.setVisibility(Documentation.DocumentVisibility.OWNER_ONLY); }  if (fileHostObject != null && fileHostObject.getJavaScriptFile().getLength() != 0) { String contentType = (String) args[10]; Icon icon = new Icon(fileHostObject.getInputStream(), contentType);  String filePath = APIUtil.getDocumentationFilePath(apiId, fileHostObject.getName()); String fname = fileHostObject.getName(); API api = apiProvider.getAPI(apiId); String apiPath=APIUtil.getAPIPath(apiId); String visibleRolesList = api.getVisibleRoles(); String[] visibleRoles = new String[0]; if (visibleRolesList != null) { visibleRoles = visibleRolesList.split("",""); } APIUtil.setResourcePermissions(api.getId().getProviderName(), api.getVisibility(), visibleRoles,filePath); doc.setFilePath(apiProvider.addIcon(filePath, icon)); } else if (sourceType.equalsIgnoreCase(Documentation.DocumentSourceType.FILE.toString())) { throw new APIManagementException(""Empty File Attachment.""); }  apiProvider.addDocumentation(apiId, doc); success = true; } catch (ScriptException e) { handleException(""The attachment cannot be found for document- "" + docName, e); } finally { if (isTenantFlowStarted) { PrivilegedCarbonContext.endTenantFlow(); } } return success; } "	1	1	1	1	0	0
"public static IRubyObject getnameinfo(ThreadContext context, IRubyObject[] args) { Ruby runtime = context.runtime; int flags = args.length == 2 ? RubyNumeric.num2int(args[1]) : 0; IRubyObject arg0 = args[0]; String host, port;  if (arg0 instanceof RubyArray) { RubyArray ary = (RubyArray) arg0; final int len = ary.size();  if (len < 3 || len > 4) { throw runtime.newArgumentError(""array size should be 3 or 4, ""+ len +"" given""); }  // if array has 4 elements, third element is ignored port = ary.eltInternal(1).toString(); host = len == 3 ? ary.eltInternal(2).toString() : ary.eltInternal(3).toString();  } else if (arg0 instanceof RubyString) { String arg = ((RubyString) arg0).toString(); Matcher m = STRING_IPV4_ADDRESS_PATTERN.matcher(arg);  if (!m.matches()) { RubyArray portAndHost = Sockaddr.unpack_sockaddr_in(context, arg0);  if (portAndHost.size() != 2) { throw runtime.newArgumentError(""invalid address representation""); }  port = portAndHost.eltInternal(0).toString(); host = portAndHost.eltInternal(1).toString();  } else if ((host = m.group(IPV4_HOST_GROUP)) == null || host.length() == 0 || (port = m.group(IPV4_PORT_GROUP)) == null || port.length() == 0) {  throw runtime.newArgumentError(""invalid address string"");  } else {  // Try IPv6 try { InetAddress ipv6_addr = InetAddress.getByName(host);  if (ipv6_addr instanceof Inet6Address) { host = ipv6_addr.getHostAddress(); }  } catch (UnknownHostException uhe) { throw runtime.newArgumentError(""invalid address string"");  } }  } else { throw runtime.newArgumentError(""invalid args"");  }  InetAddress addr;  try { addr = InetAddress.getByName(host);  } catch (UnknownHostException e) { throw sockerr(runtime, ""unknown host: ""+ host);  }  if ((flags & NI_NUMERICHOST.intValue()) == 0) { host = addr.getCanonicalHostName();  } else { host = addr.getHostAddress();  }  jnr.netdb.Service serv = jnr.netdb.Service.getServiceByPort(Integer.parseInt(port), null);  if (serv != null) {  if ((flags & NI_NUMERICSERV.intValue()) == 0) { port = serv.getName();  } else { port = Integer.toString(serv.getPort());  }  }  return runtime.newArray(runtime.newString(host), runtime.newString(port));  } "	1	0	1	0	0	0
"@Override public void onEvents(BinlogEventV4 event) { boolean isPut = false; do { try { isPut = binlogEventQueue.offer(event, 100, TimeUnit.MILLISECONDS); } catch (InterruptedException e) { _log.error(""failed to put binlog event to binlogEventQueue event: "" + event, e); } } while (!isPut && !isShutdownRequested()); } "	0	0	0	0	1	0
private void updateUnbindList(int position) { deviceList.remove(position); devicesListAdapter.notifyDataSetChanged(); } 	0	0	0	0	1	0
@Override void statisticsImpl(ActionRunner<K,V> actionRunner, Object... args) { if (args[1] == Boolean.TRUE) { actionRunner.stats.incrementHitCount(); } else { actionRunner.stats.incrementMissCount(); } super.statisticsImpl(actionRunner); } 	0	0	1	1	1	0
private void writeTheLines(final BufferedOutputStream stream) throws IOException { for (final GedWriterLine line : creator.getLines()) { final String string = line.getLine(); stream.write(string.getBytes()); } } 	0	0	1	0	1	0
public boolean hasParams() { return !cookieParams.isEmpty() || !urlParams.isEmpty() || !formParams.isEmpty(); } 	0	0	0	0	1	0
public static <E extends Entity> Criteria<E> createCriteria(final DtObject dtoCriteria) { Assertion.checkNotNull(dtoCriteria); //----- final DtDefinition dtDefinition = DtObjectUtil.findDtDefinition(dtoCriteria);  Criteria<E> criteria = null; for (final DtField field : dtDefinition.getFields()) { if (field.getType() != DtField.FieldType.COMPUTED) { final Object value = field.getDataAccessor().getValue(dtoCriteria); if (value instanceof String && field.getType() != DtField.FieldType.FOREIGN_KEY) { //si String et pas une FK : on met en préfix criteria = criteria.and(Criterions.startsWith(() -> field.getName(), (String) value)); } else if (value != null) { criteria = criteria.and(Criterions.isEqualTo(() -> field.getName(), (Comparable) value)); } } //si null, alors on ne filtre pas } return criteria; } 	0	0	0	0	1	0
"@ApiModelProperty(value = ""Sets the size for the InitialHere tab. It can be value from 0.5 to 1.0, where 1.0 represents full size and 0.5 is 50% size."") @JsonProperty(""scaleValue"") public Number getScaleValue() { return scaleValue; } "	0	0	0	1	0	0
"public static void main(String[] args) { MyDataReader d = new MyDataReader(System.getProperty(""user.dir"")+""/data/lense/data.txt"");  MLPClassifier mlpClassifier = new MLPClassifier(); SparseNetworkLearner.Parameters snp = new SparseNetworkLearner.Parameters(); MultiLayerPerceptron mlp = new MultiLayerPerceptron(); snp.baseLTU = mlp; mlpClassifier.setParameters(snp);  BatchTrainer trainer = new BatchTrainer(mlpClassifier, d); trainer.train(1);  Classifier oracle = new LenseLabel(); TestDiscrete.testDiscrete(new TestDiscrete(), mlpClassifier, oracle, d, true, 20); } "	0	0	1	0	1	0
"private void setTagMarkerColor(Category tag) {  String colorsPref = prefs.getString(""settings_colors_app"", Constants.PREF_COLORS_APP_DEFAULT);  // Checking preference if (!colorsPref.equals(""disabled"")){  // Choosing target view depending on another preference ArrayList<View> target = new ArrayList<View>(); if (colorsPref.equals(""complete"")){ target.add(getView().findViewById(R.id.title_wrapper)); target.add(getView().findViewById(R.id.detail_content_card)); } else { target.add(getView().findViewById(R.id.tag_marker)); }  // Coloring the target if (tag != null && tag.getColor() != null) { for (View view : target) { view.setBackgroundColor(Integer.parseInt(tag.getColor())); } } else { for (View view : target) { view.setBackgroundColor(Color.parseColor(""#00000000"")); } } } } "	0	0	0	0	1	0
public static ProtoObject p110(ProtoObject receiver, ThisContext thisContext, ProtoObject arg1, ProtoObject arg2, ProtoObject arg3, ProtoObject arg4, ProtoObject arg5, ProtoObject arg6, ProtoObject arg7) { // == return receiver == arg1 ? ProtoObject.TRUE : ProtoObject.FALSE; } 	0	0	1	1	0	0
"void updatePlayers(ArrayList<Player> players) { HashMap<String, Object> message = new HashMap<>(); ArrayList<String> arrayList = new ArrayList<>(); for (Player player : players) { arrayList.add(player.getPlayerName()); } message.put(""llist"", arrayList.toArray()); messageProvider.sendMessage(new JSONObject(message)); } "	0	0	1	0	1	0
private Node[] mostDistantByDeadSpace(List<Node> entries, RelationshipType relationshipType) { Node seed1 = null; Node seed2 = null; double worst = Double.NEGATIVE_INFINITY; for (int i = 0; i < entries.size(); ++i) { Node e = entries.get(i); Envelope eEnvelope = getChildNodeEnvelope(e, relationshipType); for (int j = i + 1; j < entries.size(); ++j) { Node e1 = entries.get(j); Envelope e1Envelope = getChildNodeEnvelope(e1, relationshipType); double deadSpace = getArea(createEnvelope(eEnvelope, e1Envelope)) - getArea(eEnvelope) - getArea(e1Envelope); if (deadSpace > worst) { worst = deadSpace; seed1 = e; seed2 = e1; } } } return new Node[]{seed1,seed2}; } 	0	0	0	0	1	0
public static int getTagEnd(CharSequence s, int start) { int len = s.length(); int i = start; while ((i<len) && (isTagChar(s.charAt(i)))) i++; if ((i >= len) || Character.isSpaceChar(s.charAt(i))) return i; // blank after end of string return -1; } 	0	0	0	0	1	0
"@Bean public IntegrationFlow jmsMessageDrivenFlowWithContainer() { return IntegrationFlows .from(Jms.messageDriverChannelAdapter( Jms.container(this.jmsConnectionFactory, ""containerSpecDestination"") .pubSubDomain(false) .get())) .transform(String::trim) .channel(jmsOutboundInboundReplyChannel()) .get(); } "	0	0	1	0	0	0
protected void setDefaultSelectorOrder() { setSelectorOrder((timelineType.ordinal() + 1) * 2 + (isCombined ? 1 : 0)); } 	0	0	0	0	1	0
"public static String createCover(String originalImageString, final int width, final int height) { if (!isBase64EncodedImage(originalImageString)) { return null; } else { final String[] imgInfo = extractImageInfo(originalImageString);  // imgInfo isn't null and contains two fields, this is checked by ""isBase64EncodedImage""-Method final String extension = ""png""; final String base64String = imgInfo[1];  byte[] imageData = Base64.decodeBase64(base64String); try { BufferedImage originalImage = ImageIO.read(new ByteArrayInputStream(imageData)); BufferedImage newImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB); Graphics2D g = newImage.createGraphics();  final double ratio = ((double) originalImage.getWidth()) / ((double) originalImage.getHeight());  int x = 0, y = 0, w = width, h = height; if (originalImage.getWidth() > originalImage.getHeight()) { final int newWidth = (int) Math.round((float) height * ratio); x = -(newWidth - width) >> 1; w = newWidth; } else if (originalImage.getWidth() < originalImage.getHeight()) { final int newHeight = (int) Math.round((float) width / ratio); y = -(newHeight - height) >> 1; h = newHeight; } g.drawImage(originalImage, x, y, w, h, null); g.dispose();  StringBuilder result = new StringBuilder(); result.append(""data:image/""); result.append(extension); result.append("";base64,"");  ByteArrayOutputStream output = new ByteArrayOutputStream(); ImageIO.write(newImage, extension, output);  output.flush(); output.close();  result.append(Base64.encodeBase64String(output.toByteArray()));  return result.toString(); } catch (IOException e) { LOGGER.error(e.getLocalizedMessage()); return null; } } } "	0	0	0	0	1	0
@Override public Set<Entity> resolve(Location<World> location) { return new SelectorResolver(location, this, false).resolve(); } 	0	0	0	1	0	0
@Override public Set<Entity> resolveForce(Extent... extents) { return resolveForce(ImmutableSet.copyOf(extents)); } 	0	0	0	1	0	0
@Override public Set<Entity> resolveForce(Collection<? extends Extent> extents) { return new SelectorResolver(extents, this, true).resolve(); } 	0	0	0	1	0	0
"private void buildAndSendNotification(Call originalCall, ContactCacheEntry contactInfo) {  // This can get called to update an existing notification after contact information has come // back. However, it can happen much later. Before we continue, we need to make sure that // the call being passed in is still the one we want to show in the notification. final Call call = getCallToShow(CallList.getInstance()); if (call == null || !call.getId().equals(originalCall.getId())) { return; }  final int state = call.getState();  // Check if data has changed; if nothing is different, don't issue another notification. final int iconResId = getIconToDisplay(call); Bitmap largeIcon = getLargeIconToDisplay(contactInfo, call); final String content = getContentString(call); final String contentTitle = getContentTitle(contactInfo, call);  final boolean isVideoUpgradeRequest = call.getSessionModificationState() == Call.SessionModificationState.RECEIVED_UPGRADE_TO_VIDEO_REQUEST; final int notificationType; if ((state == Call.State.INCOMING || state == Call.State.CALL_WAITING || isVideoUpgradeRequest) && !InCallPresenter.getInstance().isShowingInCallUi()) { notificationType = NOTIFICATION_INCOMING_CALL; } else { notificationType = NOTIFICATION_IN_CALL; }  if (!checkForChangeAndSaveData(iconResId, content, largeIcon, contentTitle, state, notificationType)) { return; }  if (largeIcon != null) { largeIcon = getRoundedIcon(largeIcon); }  /* * Nothing more to check...build and send it. */ final Notification.Builder builder = getNotificationBuilder();  // Set up the main intent to send the user to the in-call screen final PendingIntent inCallPendingIntent = createLaunchPendingIntent(); builder.setContentIntent(inCallPendingIntent);  // Set the intent as a full screen intent as well if a call is incoming or for a // video upgrade request if (notificationType == NOTIFICATION_INCOMING_CALL) { configureFullScreenIntent(builder, inCallPendingIntent, call); // Set the notification category for incoming calls builder.setCategory(Notification.CATEGORY_CALL); }  // Set the content builder.setContentText(content); builder.setSmallIcon(iconResId); builder.setContentTitle(contentTitle); builder.setLargeIcon(largeIcon); builder.setColor(mContext.getResources().getColor(R.color.dialer_theme_color));  CharSequence subTextContent = null; if (TelephonyManager.getDefault().isMultiSimEnabled()) { SubscriptionManager mgr = SubscriptionManager.from(mContext); SubscriptionInfo subInfoRecord = mgr.getActiveSubscriptionInfo(call.getSubId()); if (subInfoRecord != null) { subTextContent = subInfoRecord.getDisplayName(); } }  if (contactInfo.isSpam) { subTextContent = mContext.getResources().getQuantityString(R.plurals.spam_count_text, contactInfo.spamCount); }  if (!TextUtils.isEmpty(subTextContent)) { builder.setSubText(subTextContent); }  if (isVideoUpgradeRequest) { builder.setUsesChronometer(false); addDismissUpgradeRequestAction(builder); addAcceptUpgradeRequestAction(builder); if (isMoreOptionRequired(call)) { addMoreAction(builder); } } else { createIncomingCallNotification(call, state, builder); }  addPersonReference(builder, contactInfo, call);  /* * Fire off the notification */ Notification notification = builder.build();  RemoteViews[] viewsToUpdate = new RemoteViews[] { notification.contentView, notification.bigContentView, notification.headsUpContentView}; // add LookupProvider badge to Notification Drawable logo = contactInfo.lookupProviderBadge; if (largeIcon != null && logo != null) { Bitmap bitmap = null; if (logo instanceof BitmapDrawable) { bitmap = ((BitmapDrawable) logo).getBitmap(); } else { bitmap = Bitmap.createBitmap(logo.getIntrinsicWidth(), logo.getIntrinsicHeight(), Bitmap.Config.ARGB_8888); Canvas canvas = new Canvas(bitmap); logo.setBounds(0, 0, canvas.getWidth(), canvas.getHeight()); logo.draw(canvas); } int spamColor = mContext.getResources().getColor(R.color.spam_contact_color); for (RemoteViews view : viewsToUpdate) { int rightIconId = getNotificationRightIconId(mContext); view.setImageViewBitmap(rightIconId, bitmap); view.setViewPadding(rightIconId, 0, 0, 0, 0); if (contactInfo.isSpam) { view.setTextColor(getNotificationTextId(mContext), spamColor); view.setTextColor(getNotificationTitleId(mContext), spamColor); } } }  // extend actions to the entire width of the notification if (notification.actions.length > 2) { int padding = mContext.getResources().getDimensionPixelSize( R.dimen.notification_three_action_padding); int screenLayout = mContext.getResources().getConfiguration().screenLayout; boolean isRtl = (screenLayout & Configuration.SCREENLAYOUT_LAYOUTDIR_RTL) != 0; int rightPadding = isRtl ? padding : 0; int leftPadding = isRtl ? 0 : padding; for (RemoteViews view : viewsToUpdate) { view.setViewPadding(getNotificationActionsId(mContext), leftPadding, 0, rightPadding, 0); } }  if (mCurrentNotification != notificationType) { Log.i(this, ""Previous notification already showing - cancelling "" + mCurrentNotification); mNotificationManager.cancel(mCurrentNotification); } Log.i(this, ""Displaying notification for "" + notificationType); mNotificationManager.notify(notificationType, notification); mCurrentNotification = notificationType; } "	0	0	1	0	0	0
private void loadHighlightsFragment() { findViewById(R.id.btn_contents).setSelected(false); findViewById(R.id.btn_highlights).setSelected(true); HighlightListFragment highlightListFragment = HighlightListFragment.newInstance(); FragmentTransaction ft = getSupportFragmentManager().beginTransaction(); //ft.setCustomAnimations(R.anim.enter_from_right, R.anim.exit_to_left); ft.replace(R.id.parent, highlightListFragment); ft.commit(); } 	0	0	0	0	1	0
"@Test public void testNullValueInCellEmptyString() { String cfgJson = ""{source: { content: { value: 'id,title,text\n1,,Hello'} }, extractor : { row : {} }, transformers : [{ csv : {nullValue: 'NULL'} }], loader : { test: {} } }""; process(cfgJson); List<ODocument> res = getResult(); ODocument doc = res.get(0); assertEquals(new Integer(1), (Integer) doc.field(""id"")); assertEquals("""", (String) doc.field(""title"")); assertEquals(""Hello"", (String) doc.field(""text"")); } "	0	0	0	0	1	0
"private Map<String, ColumnDefinition.Internal> getColumns(Set<String> columnNames) throws IOException { if (columnNames == null || columnNames.isEmpty()) return Collections.emptyMap(); final Map<String, ColumnDefinition.Internal> columnDefs = columnDefsKey.getColumns(keyStore); final Map<String, ColumnDefinition.Internal> columns = new LinkedHashMap<>(); for (String columnName : columnNames) { ColumnDefinition.Internal columnDef = columnDefs.get(columnName); if (columnDef == null) { if (columnName.equals(Table.ID_COLUMN_NAME)) columnDef = ColumnDefinition.Internal.PRIMARYKEY_COLUMN; else throw new DatabaseException(""Column not found: "" + columnName); } columns.put(columnName, columnDef); } return columns; } "	0	0	0	1	0	0
"@Test public void testCanReadXML() throws Exception { final String xml = new FakeUsers().xml(); Assert.assertTrue(xml.startsWith(""<people>"")); Assert.assertTrue( xml.contains(""<fullName>Integration Test</fullName>"") ); Assert.assertTrue(xml.endsWith(""</people>"")); } "	0	0	0	0	1	0
@Override protected TreeNodeWrapper buildWrapper(ITreeNode treeNode) { if (treeNode instanceof IPage) { return new PageTreeNodeWrapper((IPage) treeNode); } else { if (AbstractPortalAction.VIRTUAL_ROOT_CODE.equals(treeNode.getCode())) { return (PageTreeNodeWrapper) treeNode; } IPage page = this.getPage(treeNode.getCode()); return new PageTreeNodeWrapper(page); } } 	0	0	0	0	1	0
"public static void mainMethod(){ //        final String[] comps = {""table PM"", ""table ELLEGUI"", ""table Analyster"", ""table Other"", ""table issue_files"",}; loadingMethod(); for (int i=1; i<=5; i++){ loadingText(""Loading...""); //            + comps[i-1] + ""...""); loadingProgress(i*20); try { Thread.sleep(1000); } catch(InterruptedException e) { } } loadingScreen.close(); // this is the first window that is shown to log in to the database. // Once the database connection is made, then an instance // of ProjectManager is created.   LoginWindow loginWindow = new LoginWindow(); loginWindow.setLocationRelativeTo(null); loginWindow.setVisible(true); } "	0	0	1	0	1	0
private static String createGeneratorName(String output) { String fileName = getFileName(output); StringBuilder sb = new StringBuilder(); for (int i = 0; i < fileName.length(); i++) { char c = fileName.charAt(i); if (isAlpha(c) || isNumber(c) || c == '.' || c == '_' || c == '-') { sb.append(c); } else { sb.append('_'); } } return sb.toString(); } 	0	0	0	0	1	0
"public static String getMetaFileType(String file) throws IOException { /* * --------------------- Typen und Suchbegriffe festlegen ------------------- */ HashMap<String, String> types = new HashMap<String, String>(); types.put(""metsmods"", ""ugh.fileformats.mets.MetsModsImportExport"".toLowerCase()); types.put(""mets"", ""www.loc.gov/METS/"".toLowerCase()); types.put(""rdf"", ""<RDF:RDF "".toLowerCase()); types.put(""xstream"", ""<ugh.dl.DigitalDocument>"".toLowerCase());  try ( FileReader input = new FileReader(file); BufferedReader bufRead = new BufferedReader(input); ) { char[] buffer = new char[200]; while ((bufRead.read(buffer)) >= 0) { String temp = new String(buffer).toLowerCase(); Iterator<Entry<String, String>> i = types.entrySet().iterator(); while (i.hasNext()) { Entry<String, String> entry = i.next(); if (temp.contains(entry.getValue())) { return entry.getKey(); } } } }  return ""-""; } "	0	0	0	0	1	0
"public static Condition value(final String expectedValue) { return new Condition(""value"") { @Override public boolean apply(WebElement element) { return Html.text.contains(getAttributeValue(element, ""value""), expectedValue); } @Override public String toString() { return name + "" '"" + expectedValue + ""'""; } }; } "	0	0	1	0	1	0
public List<State> getCounterExamplePath() { if (stateSpace != null && lastState != null) { ShortestPathAlgorithm<State, DefaultEdge> pathFinder = new DijkstraShortestPath<>(stateSpace);  Optional<List<State>> shortestPath = stateSpace.rootVertexSet().stream() .map(root -> pathFinder.getPath(root, lastState).getVertexList()) .sorted((first, second) -> first.size() < second.size() ? 1 : -1) .findFirst();  return shortestPath.get(); } else { return Collections.emptyList(); } } 	0	0	0	0	1	0
"public String getDefaultSummary() { return defaultSummary != null && defaultSummary != """" ? defaultSummary : DEFAULT_SUMMARY; } "	0	0	1	0	1	0
"@SuppressFBWarnings(""NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD"") private boolean doLogin(SocialLoginParams loginParams, String userToken, @Nullable Principal toLogin, Request request, String identityToken) { if(toLogin != null) { _principalDAO.authenticatePrincipalProgrammatically(toLogin, SHARED_SECRET, toLogin.getSSOCredentials(SSOType.other, SERVICE_IDENTIFIER)); if(Boolean.valueOf(loginParams.getContentBuilder().getProperty(PROP_SSO_ENABLED, ""false"")) && !Boolean.valueOf(request.getParameter(PARAM_SSO_CALLBACK, ""false""))) { //If SSO Is Enabled for this Social Login component, then we instantiate a new SSO Session //And insert the sso token into the session String reqURL = _apiEndpoint + ""/sessions/identities/"" + identityToken + "".json""; String responseString = safeSendAPIRequest(reqURL, ""PUT""); if(!StringFactory.isEmptyString(responseString)) { Gson gson = new GsonBuilder().create(); APISSOSessionResponseWrapper res = gson.fromJson(responseString, APISSOSessionResponseWrapper.class); if(Objects.equals(res.response.request.status.flag, ""success"")) { String ssoToken = res.response.result.data.sso_session.sso_session_token; request.getSession(Scope.SESSION).setString(SESSION_KEY_SSO_TOKEN, ssoToken); } } } return true; } if(_oneAllDAO.getPrincipalForUserToken(userToken, AuthenticationDomainList.emptyDomainList()) == null) { //If no user exists in our system, instruct OneAll to delete the user that it created. sendAPIRequest(_apiEndpoint + ""/users/"" + userToken + "".json?confirm_deletion=true"", ""DELETE""); }  loginParams.getMessageAcceptor().accept(Message.error( ERROR_USER_DOES_NOT_EXIST_FOR_USER_TOKEN(), ERROR_DETAILS_USER_DOES_NOT_EXIST_FOR_USER_TOKEN())); return false; } "	1	0	0	0	0	0
"@Override public Long run(HiveContext sc, JobEnvironment runtime, Config data) { sc.sql(""DROP TABLE if exists `default`.`test_addresses`""); sc.sql(String.format(""%s %s %s %s %s %s"", tableCreate, tableArgs, tableRowFormat, tableColFormat, tableMapFormat, tableAs)); sc.sql(String.format(""LOAD DATA LOCAL INPATH %s OVERWRITE INTO TABLE `default`.`test_addresses`"", loadPath));  final DataFrame addrRdd = sc.sql(""SELECT * FROM `default`.`test_addresses`""); return addrRdd.count(); } "	0	0	0	0	1	0
"@Override public Integer run(SQLContext sc, JobEnvironment runtime, Config data) { Row row = sc.sql(""select 1+1"").take(1)[0]; return row.getInt(0); } "	0	0	1	1	1	0
@Override public IAdhocTicket issueAdhocTicket() { // TODO Auto-generated method stub return adhocTicketDAO.createTicket(this.carparkId); } 	1	0	0	0	1	0
public void updateStats(List<StreamStat> stats) { if (mCardViewHolder != null && mSensorPresenter != null) { mCardViewHolder.graphStatsList.updateStats(stats); mCardViewHolder.meterStatsList.updateStats(stats); mSensorPresenter.updateStats(stats); } } 	0	0	0	0	1	0
@Override public long contentLength() { return getContentLength(response.body()); } 	0	0	0	0	1	0
"@Override public String call() throws Exception { String message; try { logger.info(""Starting to wait for command to finish in background: "" + this.command);  int exitCode = process.waitFor();  message = String.format(""Command finished. \n command: %s \n exit code: %s \n standard out: \n %s \n %standard error: \n %s"", this.command, exitCode, ProcessOutputReader.getStandardOut(process), ProcessOutputReader.getErrorOut(process)  );  logger.info(message); return message; } catch (Exception e) { message = String.format(""An error occurred while waiting for %s command to finish in background"", command); logger.error(message, e); return message; }   } "	0	0	1	1	0	0
"private boolean canBeAddedAsProvidedResource(NamedIdentifiable slaveResourceGroup) { if (slaveResourceGroup instanceof ResourceGroupEntity) { if (isAlreadyProvided((ResourceGroupEntity) slaveResourceGroup)) { String message = ""A resource can only be provided once""; GlobalMessageAppender.addErrorMessage(message); return false; } if (!canAddResourceRelation || !permissionService.hasPermission(Permission.RESOURCE, null, Action.READ, (ResourceGroupEntity) slaveResourceGroup, null)) { String message = ""You do not have the permission to add this relation""; GlobalMessageAppender.addErrorMessage(message); return false; } if (!resourceRelationBoundary.isAddableAsProvidedResourceToResourceGroup((ResourceEntity) resourceOrType, slaveResourceGroup.getName())) { String message = ""This resource is already provided by another resource""; GlobalMessageAppender.addErrorMessage(message); return false; } return true; } return false; } "	0	0	1	1	0	0
"@Override public void check(@Nonnull MergeRequest mergeRequest) { PullRequest pr = mergeRequest.getPullRequest(); Repository repo = pr.getToRef().getRepository(); final Config config = configDao.getConfigForRepo(repo.getProject().getKey(), repo.getSlug());  String branch = regexUtils.formatBranchName(pr.getToRef().getId()); if (regexUtils.match(config.getBlockedPRs(), branch)) { mergeRequest.veto(""Pull Request Blocked"", ""Pull requests have been disabled for branch ["" + branch + ""]""); } else { PullRequestApproval approval = new PullRequestApproval(config, userUtils); if (!approval.isPullRequestApproved(pr)) { Set<String> missing = approval.missingRevieiwersNames(pr); mergeRequest.veto(""Required reviewers must approve"", (config.getRequiredReviews() - approval.seenReviewers(pr).size()) + "" more approvals required from the following users: "" + Joiner.on("", "").join(missing)); } else { Boolean needsWork = config.getBlockMergeIfPrNeedsWork(); final Boolean blockAutoMergeBecausePrNeedsWork = needsWork != null && needsWork && needsWork(pr);  if (blockAutoMergeBecausePrNeedsWork) { mergeRequest.veto(""PR marked as Needs Work from reviewer(s)"", ""Resolve it before merge.""); } } } } "	0	0	1	0	1	0
"@RequestMapping(value = { ""/auth/logout"", ""/logout"" }, method = { RequestMethod.POST, RequestMethod.GET }) public final View doLogout(final HttpServletRequest request) { final Authentication auth = SecurityContextHolder.getContext().getAuthentication(); userService.removeUserFromMaps(userService.getCurrentUser()); request.getSession().invalidate(); SecurityContextHolder.clearContext(); if (auth instanceof CasAuthenticationToken) { if ("""".equals(apiPath)) { apiPath = request.getContextPath(); } return new RedirectView(apiPath + ""/j_spring_cas_security_logout"", true); } return new RedirectView(request.getHeader(""referer"") != null ? request.getHeader(""referer"") : ""/""); } "	0	0	1	0	1	0
"public void downloadCode(File jar, RIOShell adminshell) throws IOException { Logger.info(""Starting deployment...""); sendFileTo(jar, ""/home/lvuser/FRCUserProgram.jar""); Logger.info(""Primary deployment complete."");  // prevent any text-busy issues execCheck(""rm /usr/local/frc/bin/netconsole-host""); adminshell.sendBinResourceTo(DepRoboRIO.class, ""/edu/wpi/first/wpilibj/binaries/netconsole-host"", ""/usr/local/frc/bin/"", 0755); sendTextResourceTo(DepRoboRIO.class, ""/edu/wpi/first/wpilibj/binaries/robotCommand"", ""/home/lvuser/"", 0755); Logger.info(""Download complete.""); } "	0	0	1	0	1	0
"public void post(String post) { try { HttpResponse<String> response = Unirest.post(route + ""/slack"").header(""content-type"", ""application/json"").body(post) .asString(); if (response.getStatus() >= 300) FutureBot.log(""Got status code '"" + response.getStatus() + "": "" + response.getStatusText() + ""' trying to announce live stream!"", LoggerFlag.FATAL); if (response.getStatus() == 400) FutureBot.log(""Response: "" + new JSONObject(response.getBody()).toString(), LoggerFlag.ERROR); } catch (UnirestException e) { FutureBot.log(""Encountered UnirestException trying to post to webhook."", LoggerFlag.FATAL, LoggerFlag.ERROR); } } "	0	0	0	0	1	0
public void showLink(Book document, Key key) { LinksWindow linksWindow = windowRepository.getDedicatedLinksWindow(); boolean linksWindowWasVisible = linksWindow.isVisible();  linksWindow.initialisePageStateIfClosed(linksWindow);  //TODO do not set links window active -  currently need to set links window to active window otherwise BibleContentMediator logic does not refresh that window windowRepository.setActiveWindow(linksWindow);  linksWindow.getPageManager().setCurrentDocumentAndKey(document, key);  // redisplay the current page if (!linksWindowWasVisible) { linksWindow.getWindowLayout().setState(WindowState.SPLIT); eventManager.post(new NumberOfWindowsChangedEvent(getWindowVerseMap())); } } 	0	0	0	0	1	0
"public void validate() throws GridConfigurationException { String hub = (String) configuration.get(HUB_HOST); Integer port = (Integer) configuration.get(HUB_PORT); if (hub == null || port == null) { throw new GridConfigurationException(""You need to specify a hub to register to using -"" + HUB_HOST + "" X -"" + HUB_PORT + "" 5555. The specified config was -"" + HUB_HOST + "" "" + hub + "" -"" + HUB_PORT + "" "" + port); } /**port will  be -1 if not specified. Throw an error to let user know it is mandatory**/ if(port==-1){ throw new GridConfigurationException(""No port was specified for hub. You need to specify a port in hubUrl value specified in -hub parameter.""); } } "	0	0	1	1	0	0
public ArrayList<ItemStack> getItemStacks() { ArrayList<ItemStack> result = new ArrayList<ItemStack>(); try { // return Utils.oddItem.getItemGroup(kit, -1)); } catch (Throwable e) { } for (MaterialContainer mc : items) result.add(mc.getItemStack()); return result; } 	0	0	0	1	0	0
"public static void showLogging(){ String logCat = ""no logs""; final String processId = Integer.toString(android.os.Process.myPid()); try { Process process = Runtime.getRuntime().exec(""logcat -d""); BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream())); StringBuilder log = new StringBuilder(); String line;  while ((line = bufferedReader.readLine()) != null) { if(line.contains(processId)) log.append(line); } logCat = log.toString();  } catch (IOException e) { logCat = e.getLocalizedMessage(); } finally { showAlertText(logCat, MainActivity.getInstace()); } } "	0	0	1	1	1	0
"private void updateNotification(String text, String contentText, boolean vibrate, boolean sound, boolean light) { if (foreground) { notification = new Notification(R.drawable.icon, text, System.currentTimeMillis()); Intent notifyIntent = new Intent(this, ServersActivity.class); notifyIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); PendingIntent contentIntent = PendingIntent.getActivity(this, 0, notifyIntent, 0);  if (contentText == null) { if (newMentions >= 1) { StringBuilder sb = new StringBuilder(); for (Conversation conv : mentions.values()) { sb.append(conv.getName() + "" ("" + conv.getNewMentions() + ""), ""); } contentText = getString(R.string.notification_mentions, sb.substring(0, sb.length()-2)); } else if (!connectedServerTitles.isEmpty()) { StringBuilder sb = new StringBuilder(); for (String title : connectedServerTitles) { sb.append(title + "", ""); } contentText = getString(R.string.notification_connected, sb.substring(0, sb.length()-2)); } else { contentText = getString(R.string.notification_not_connected); } }  notification.setLatestEventInfo(this, getText(R.string.app_name), contentText, contentIntent);  if (vibrate) { notification.defaults |= Notification.DEFAULT_VIBRATE; }  if (sound) { notification.defaults |= Notification.DEFAULT_SOUND; }  if (light) { notification.ledARGB   = NOTIFICATION_LED_COLOR; notification.ledOnMS   = NOTIFICATION_LED_ON_MS; notification.ledOffMS  = NOTIFICATION_LED_OFF_MS; notification.flags    |= Notification.FLAG_SHOW_LIGHTS; }  notification.number = newMentions;  notificationManager.notify(FOREGROUND_NOTIFICATION, notification); } } "	0	0	0	0	1	0
public ArrayList<String> keysDown(){ return new ArrayList<String>(keys); } 	1	0	0	0	1	0
"private void checkDB() throws SQLException {  Statement stmt = null;  try { stmt = data_repo.createStatement( null ); stmt.executeQuery( ""select "" + MSG_TYPE_COLUMN + "" from "" + MSG_TABLE + "" where "" + MSG_ID_COLUMN + "" = 0"" ); } catch ( SQLException ex ) { log.log( Level.INFO, MSG_TABLE + "" table was in old version, performing update to add missing column"" ); // if this happens then we have issue with old database schema and missing body columns in MSGS_TABLE String alterTable = null; try { alterTable = ""alter table "" + MSG_TABLE + "" add "" + MSG_TYPE_COLUMN + "" int NOT NULL;""; if ( stmt == null ){ stmt = data_repo.createStatement( null ); } stmt.execute( alterTable ); } catch ( SQLException ex1 ) { log.log( Level.SEVERE, ""could not alter table "" + MSG_TABLE + "" to add missing column by SQL:\n"" + alterTable, ex1 ); } }  DataRepository.dbTypes databaseType = data_repo.getDatabaseType(); switch ( databaseType ) { case mysql: data_repo.checkTable( JID_TABLE, MYSQL_CREATE_JID_TABLE ); data_repo.checkTable( MSG_TABLE, MYSQL_CREATE_MSG_TABLE );  data_repo.checkTable( ""broadcast_msgs"", MYSQL_CREATE_BROADCAST_MSGS_TABLE); data_repo.checkTable( ""broadcast_msgs_recipients"", MYSQL_CREATE_BROADCAST_MSGS_RECIPIENTS_TABLE); break; case postgresql: data_repo.checkTable( JID_TABLE, PGSQL_CREATE_JID_TABLE ); data_repo.checkTable( MSG_TABLE, PGSQL_CREATE_MSG_TABLE );  data_repo.checkTable( ""broadcast_msgs"", PGSQL_CREATE_BROADCAST_MSGS_TABLE); data_repo.checkTable( ""broadcast_msgs_recipients"", PGSQL_CREATE_BROADCAST_MSGS_RECIPIENTS_TABLE); break; case derby: data_repo.checkTable( JID_TABLE, DERBY_CREATE_JID_TABLE ); data_repo.checkTable( MSG_TABLE, DERBY_CREATE_MSG_TABLE );  data_repo.checkTable( ""broadcast_msgs"", DERBY_CREATE_BROADCAST_MSGS_TABLE); data_repo.checkTable( ""broadcast_msgs_recipients"", DERBY_CREATE_BROADCAST_MSGS_RECIPIENTS_TABLE); break; case jtds: case sqlserver: data_repo.checkTable( JID_TABLE, SQLSERVER_CREATE_JID_TABLE ); data_repo.checkTable( MSG_TABLE, SQLSERVER_CREATE_MSG_TABLE );  data_repo.checkTable( ""broadcast_msgs"", SQLSERVER_CREATE_BROADCAST_MSGS_TABLE); data_repo.checkTable( ""broadcast_msgs_recipients"", SQLSERVER_CREATE_BROADCAST_MSGS_RECIPIENTS_TABLE); break; } } "	0	0	0	1	1	0
"private void listSelection() { int row = table.getSelectedRow(); if (row >= 0) { editor.setCurrentEntry((String) table.getValueAt(row, 0)); content.setText(editor.getCurrentEntry().getContent()); edit.setEnabled(true); use.setEnabled(true); delete.setEnabled(true); } else { editor.setCurrentEntry(null); content.setText(""""); edit.setEnabled(false); use.setEnabled(false); delete.setEnabled(false); } } "	0	0	1	1	0	0
public StatisticsSummary userSummary(int id, String unit) { List<ActivityData> data = getFacade().getAllForUserWithUnit(id, unit); return new StatisticsSummary(data); } 	0	0	0	0	1	0
"public void updateGame(int mouseX, int mouseY, int delta, int trackPosition, int keysPressed){ // ""Easy"" mod: multiple ""lives"" if (GameMod.EASY.isActive() && deathTime > -1) { if (data.getHealth() < 99f) data.changeHealth(delta / 10f); else { MusicController.resume(); deathTime = -1; } }   // map complete! if (objectIndex >= hitObjects.length || (MusicController.trackEnded() && objectIndex > 0)) { // track ended before last object was processed: force a hit result if (MusicController.trackEnded() && objectIndex < hitObjects.length) hitObjects[objectIndex].update(true, delta, mouseX, mouseY, false, trackPosition);  // if checkpoint used, skip ranking screen if (checkpointLoaded) game.closeRequested();  // go to ranking screen else { boolean unranked = (GameMod.AUTO.isActive() || GameMod.RELAX.isActive() || GameMod.AUTOPILOT.isActive()); ((GameRanking) game.getState(Opsu.STATE_GAMERANKING)).setGameData(data); if (isReplay) data.setReplay(replay); else if (replayFrames != null) { // finalize replay frames with start/skip frames if (!replayFrames.isEmpty()) replayFrames.getFirst().setTimeDiff(replaySkipTime * -1); replayFrames.addFirst(ReplayFrame.getStartFrame(replaySkipTime)); replayFrames.addFirst(ReplayFrame.getStartFrame(0)); Replay r = data.getReplay(replayFrames.toArray(new ReplayFrame[replayFrames.size()]), osu); if (r != null && !unranked) r.save(); } ScoreData score = data.getScoreData(osu);  // add score to database if (!unranked && !isReplay) ScoreDB.addScore(score);  game.enterState(Opsu.STATE_GAMERANKING, new FadeOutTransition(Color.black), new FadeInTransition(Color.black)); } return; }  // timing points if (timingPointIndex < osu.timingPoints.size()) { OsuTimingPoint timingPoint = osu.timingPoints.get(timingPointIndex); if (trackPosition >= timingPoint.getTime()) { if (!timingPoint.isInherited()) beatLengthBase = beatLength = timingPoint.getBeatLength(); else beatLength = beatLengthBase * timingPoint.getSliderMultiplier(); HitSound.setDefaultSampleSet(timingPoint.getSampleType()); SoundController.setSampleVolume(timingPoint.getSampleVolume()); timingPointIndex++; } }  // song beginning if (objectIndex == 0 && trackPosition < osu.objects[0].getTime()) return;  // nothing to do here  // break periods if (osu.breaks != null && breakIndex < osu.breaks.size()) { int breakValue = osu.breaks.get(breakIndex); if (breakTime > 0) {  // in a break period if (trackPosition < breakValue) return; else { // break is over breakTime = 0; breakIndex++; } } else if (trackPosition >= breakValue) { // start a break breakTime = breakValue; breakSound = false; breakIndex++; return; } }  // drain health data.changeHealth(delta * -1 * GameData.HP_DRAIN_MULTIPLIER); if (!data.isAlive()) { // ""Easy"" mod if (GameMod.EASY.isActive() && !GameMod.SUDDEN_DEATH.isActive()) { deaths++; if (deaths < 3) { deathTime = trackPosition; MusicController.pause(); return; } }  // game over, force a restart if (!isReplay) { restart = Restart.LOSE; game.enterState(Opsu.STATE_GAMEPAUSEMENU); } }  // update objects (loop in unlikely event of any skipped indexes) boolean keyPressed = keysPressed != ReplayFrame.KEY_NONE; while (objectIndex < hitObjects.length && trackPosition > osu.objects[objectIndex].getTime()) { // check if we've already passed the next object's start time boolean overlap = (objectIndex + 1 < hitObjects.length && trackPosition > osu.objects[objectIndex + 1].getTime() - hitResultOffset[GameData.HIT_300]);  // update hit object and check completion status if (hitObjects[objectIndex].update(overlap, delta, mouseX, mouseY, keyPressed, trackPosition)) objectIndex++;  // done, so increment object index else break; } } "	0	0	0	1	0	0
private void sendNotifications() { Boolean enabled = PreferenceUtils.getBooleanPreference(this, PreferenceUtils.PreferenceIdentifier.STATUS_ENABLED); if (enabled != null && enabled) { for (StatusBarNotification sbn : getNotifications()) { Intent intent = new Intent(StatusService.ACTION_NOTIFICATION_ADDED); intent.setClass(this, StatusService.class);  intent.putExtra(StatusService.EXTRA_NOTIFICATION_KEY, String.valueOf(sbn.getId())); intent.putExtra(StatusService.EXTRA_NOTIFICATION, sbn.getNotification()); intent.putExtra(StatusService.EXTRA_PACKAGE_NAME, sbn.getPackageName());  startService(intent); } } } 	0	0	0	0	1	0
"public static byte[] encodeEBusData(byte[] data) { final ByteArrayOutputStream byteBuffer = new ByteArrayOutputStream(); try { for (byte b : data) { if (b == (byte) 0xAA) { byteBuffer.write(new byte[] { (byte) 0xA9, (byte) 0x01 }); } else if (b == (byte) 0x9A) { byteBuffer.write(new byte[] { (byte) 0xA9, (byte) 0x00 }); } else { byteBuffer.write(b); } } } catch (IOException e) { logger.error(""io error"", e); }  return byteBuffer.toByteArray(); } "	0	0	1	0	1	0
"@Override protected Returnable process(GetAttributeRequestWrapper extendedRequestDTO) throws Exception {  if (responseWrapperDTO.getRequestError() != null) { responseWrapperDTO.setHttpStatus(Response.Status.BAD_REQUEST); return responseWrapperDTO; }  APITypes apiTypes = dao.getAPIType(extendedRequestDTO.getRequestType().toString().toLowerCase()); APIServiceCalls apiServiceCalls = dao.getServiceCall(apiTypes.getId(), ServiceName.GetAttribute.toString().toLowerCase()); JSONObject obj = new JSONObject(); obj.put(""msisdn"",extendedRequestDTO.getMsisdn()); obj.put(""imsi"",extendedRequestDTO.getImsi()); obj.put(""schema"",extendedRequestDTO.getSchema()); obj.put(""mcc"",extendedRequestDTO.getMcc()); obj.put(""mnc"",extendedRequestDTO.getMnc()); obj.put(""userName"",extendedRequestDTO.getUser().getUserName()); logHandler.saveMessageLog(apiServiceCalls.getApiServiceCallId(), extendedRequestDTO.getUser().getId(), ""msisdn"", extendedRequestDTO.getMsisdn(), obj);  String msisdn = null; ObjectMapper mapper = new ObjectMapper(); JsonNode node = null; String number = CommonUtil.getNullOrTrimmedValue(extendedRequestDTO .getMsisdn()); String imsi = CommonUtil.getNullOrTrimmedValue(extendedRequestDTO .getImsi()); String[] schema = CommonUtil.getStringToArray(extendedRequestDTO .getSchema()); String mnc = CommonUtil.getNullOrTrimmedValue(extendedRequestDTO .getMnc()); String mcc = CommonUtil.getNullOrTrimmedValue(extendedRequestDTO .getMcc()); Integer userid = extendedRequestDTO.getUser().getId();  if (number != null) { msisdn = CommonUtil.extractNumberFromMsisdn(number); }  List<AttributeValues> customerInfoServices = null;  // check request parameter schema has the matching values ListCustomerInfoAttributesDTO customerInfo = new ListCustomerInfoAttributesDTO();  if (!customerInfoDao.checkSchema(schema)) { responseWrapperDTO.setRequestError(constructRequestError( SERVICEEXCEPTION, ServiceError.INVALID_INPUT_VALUE, ""No valid schema provided "" + extendedRequestDTO.getSchema())); responseWrapperDTO.setHttpStatus(Status.BAD_REQUEST); return responseWrapperDTO; } // check msisdn,imsi,mcc&mnc has the matching values if ((customerInfoDao.getMSISDN(msisdn, imsi, mcc, mnc) == null)) { LOG.error(""###CUSTOMERINFO### Valid MSISDN doesn't exists for the given inputssss""); responseWrapperDTO .setRequestError(constructRequestError(SERVICEEXCEPTION, ServiceError.INVALID_INPUT_VALUE, ""Valid MSISDN does not exist for the given input parameters"")); responseWrapperDTO.setHttpStatus(Status.BAD_REQUEST); return responseWrapperDTO; }  customerInfoServices = customerInfoDao.getAttributeServices(msisdn, userid, imsi, schema);   if (customerInfoServices == null) { LOG.error(""###CUSTOMERINFO### Customer information does not available""); responseWrapperDTO.setRequestError(constructRequestError(SERVICEEXCEPTION, ServiceError.INVALID_INPUT_VALUE, "" No Valid Customer schema information configured for the given input parameters"")); responseWrapperDTO.setHttpStatus(Status.BAD_REQUEST); return responseWrapperDTO; }   for (AttributeValues values : customerInfoServices) { schemaValues = ((values.getAttributedid()).getAttribute()) .getAttributeName().toString(); if ((Attribute.basic.toString()).equals(schemaValues)) {  node = mapper.readValue(values.getValue(), JsonNode.class); customerInfo.setBasic(node);  } else if ((Attribute.billing.toString()).equals(schemaValues)) { node = mapper.readValue(values.getValue(), JsonNode.class); customerInfo.setBilling(node); } else if (Attribute.account.toString().equals(schemaValues)) { node = mapper.readValue(values.getValue(), JsonNode.class);  customerInfo.setAccount(node); } else if (Attribute.identification.toString().equals(schemaValues)) { node = mapper.readValue(values.getValue(), JsonNode.class);  customerInfo.setIdentification(node); } }  customerInfo.setMsisdn(msisdn); if (imsi != null) { customerInfo.setImsi(imsi); } customerInfo.setResourceURL(CommonUtil .getResourceUrl(extendedRequestDTO));   customerInfo.setOnBehalfOf(CommonUtil.getNullOrTrimmedValue(extendedRequestDTO.getOnBehalfOf())); customerInfo.setPurchaseCategoryCode(CommonUtil.getNullOrTrimmedValue(extendedRequestDTO.getPurchaseCategoryCode())); customerInfo.setRequestIdentifier( CommonUtil.getNullOrTrimmedValue(extendedRequestDTO.getRequestIdentifier())); customerInfo.setResponseIdentifier(""RES"" + RandomStringUtils.randomAlphabetic(8));   ListCustomerInfoDTO customer = new ListCustomerInfoDTO(); customer.setCustomer(customerInfo); responseWrapperDTO.setCustomer(customer); responseWrapperDTO.setHttpStatus(Response.Status.OK); return responseWrapperDTO;  } "	0	0	1	1	0	0
public void closeCurrentWorkitem(ActionEvent event) { int iPos = findWorkItem(currentId); if (iPos > -1) { workitems.remove(iPos); } currentId = null; workflowController.setWorkitem(null); } 	0	0	0	0	1	0
"@Override public View getView(int position, View convertView, ViewGroup parent) { GTG.ccRwtm.registerReadingThread(); try { MediaLocTime mlt = mltArray.get(position);  View fl = convertView;  if (fl == null) {  fl = inflater.inflate(R.layout.media_gallery_media, parent, false); }  ImageView imageView = (ImageView) fl.findViewById(R.id.image); ImageView videoMarkerView = (ImageView) fl .findViewById(R.id.video_indicator);  if (mlt.isClean(context)) { Bitmap b = mltArray.get(position).getThumbnailBitmap( contentResolver, true);  imageView.setImageBitmap(b);  if (mlt.isVideo()) { videoMarkerView.setVisibility(View.VISIBLE); } else videoMarkerView.setVisibility(View.GONE);  // LayoutParams layoutParams = new // Gallery.LayoutParams((int) (b.getWidth() * // WEIRD_LAYOUT_WIDTH_MULTIPLIER), // b.getHeight()); // i.setLayoutParams(layoutParams); } else { Bitmap b = ((BitmapDrawable) context.getResources(). getDrawable(R.drawable.white1x1)).getBitmap();  imageView.setImageBitmap(b);   //					LayoutParams layoutParams = new Gallery.LayoutParams(0, 100); //					imageView.setLayoutParams(layoutParams); //					imageView.setImageBitmap(null);  if (!mlt.isDeleted()) GTG.mediaLocTimeMap.notifyMltNotClean(mlt);  videoMarkerView.setVisibility(View.GONE); }  //				Log.d(GTG.TAG, ""getView for "" + position); return fl; } finally { GTG.ccRwtm.unregisterReadingThread(); } } "	0	0	1	0	1	0
public boolean isComponentValidSuggestion(String packageName) { if(packageName == null) return false; if(!launchableCachedMap.containsKey(packageName)) { boolean isValid = getPackageManager().getLaunchIntentForPackage(packageName) != null; for(Map.Entry<Integer, ApplicationIcon> entry : dockbarTargets.entrySet()){ if(entry.getValue().getPackageName().equals(packageName)){ isValid = false; break; } } launchableCachedMap.put(packageName, isValid); } return launchableCachedMap.get(packageName); } 	0	0	0	0	1	0
"public void checkChunksForPlayback() { try { int chunkCount = this.packetizerCupertino.getChunkCount(); logger.info(""Stream contains ["" + chunkCount + ""] chuncks""); if (chunkCount >= readyForPlaybackMinimumChunkCount) { logger.info(""Raising STREAM_READY_FOR_PLAYBACK event""); raiseReadyForPlaybackEvent(); } } catch (Exception err) { logger.error(err); } } "	0	0	0	0	1	0
"protected AuthenticatedUser authenticate(Credentials credentials, EnumRole... roles) throws ApplicationException { try { if (credentials == null) { throw createApplicationException(SharedErrorCode.AUTHENTICATION_NO_CREDENTIALS); }  UsernamePasswordAuthenticationToken authentication = (UsernamePasswordAuthenticationToken) this.authenticationProvider .authenticate(new UsernamePasswordAuthenticationToken(credentials.getUsername(), credentials.getPassword()));  if (authentication == null) { throw createApplicationException(SharedErrorCode.AUTHENTICATION_USERNAME).set(""username"", credentials.getUsername()); }  // Check permissions if (roles != null) { boolean hasRole = false;  for (EnumRole role : roles) { if (authentication.getAuthorities().contains(new SimpleGrantedAuthority(role.toString()))) { hasRole = true; break; } }  if (!hasRole) { throw createApplicationException(SharedErrorCode.AUTHORIZATION_MISSING_ROLE).set(""role"", StringUtils.join(roles, "","")); } }  // Store authenticated user SecurityContextHolder.getContext().setAuthentication(authentication);  return (AuthenticatedUser) authentication.getPrincipal(); } catch (BadCredentialsException ex) { throw wrapApplicationException(ex, SharedErrorCode.AUTHENTICATION_USERNAME).set(""username"", credentials.getUsername()); } } "	0	0	1	1	1	0
public String addListener(String cacheName, ListenerAdapter listenerAdapter, EventFilter filter) { Collection<ListenerInfo> adapters = getOrPutIfAbsent(registrations, cacheName, LISTENER_SET_CONSTRUCTOR); String id = UUID.randomUUID().toString(); ListenerInfo info = new ListenerInfo(filter, listenerAdapter, id); adapters.add(info); return id; } 	0	0	0	0	1	0
"@SuppressWarnings(""deprecation"") @EventHandler public void onSignChange(SignChangeEvent event) throws InterruptedException { //	BlockState state = event.getBlock().getState(); Player player = event.getPlayer(); Sign s = (Sign) event.getBlock().getState(); if (!(event.getLine(0).equalsIgnoreCase(""[iTrade]""))) { return; }  final Block STORAGE_TYPE = event.getBlock().getRelative(0, -1, 0);  if (!player.hasPermission(getCreateIPerm())) { s.setLine(0, """"); s.update(); s.setLine(1, """"); s.update(); s.setLine(2, """"); s.update(); s.setLine(3, """"); s.update(); player.sendMessage(ChatColor.translateAlternateColorCodes('&', getPrefix() + plugin.getMessages().getString(""no-ts-create-permission""))); return; } if (!plugin.getAllowedInventories().contains(STORAGE_TYPE)) { event.setLine(0, ChatColor.DARK_RED + ""[iTrade]""); event.setLine(1, """"); event.setLine(2, """"); event.setLine(3, """"); player.sendMessage(ChatColor.translateAlternateColorCodes('&', getPrefix() + plugin.getMessages().getString(""no-chest""))); return; } boolean signIsValid = true; // If this is true, the information on the sign is valid!  String line1 = event.getLine(1); String line2 = event.getLine(2);  if (!line1.contains("" "") || !line2.contains("" "")) { signIsValid = false; }  String[] info1 = line1.split("" ""); String[] info2 = line2.split("" "");  if (info1.length != 2 || info2.length != 2) { signIsValid = false; }   if (line1.split("":"").length > 1) { info1[1] = info1[1].split("":"")[0]; } if (line2.split("":"").length > 1) { info2[1] = info2[1].split("":"")[0]; }  if (info1.length != 2 || info2.length != 2) { signIsValid = false; }  int amount1 = 0; int amount2 = 0; String item_name1 = null; String item_name2 = null; @SuppressWarnings(""unused"") ItemStack item1; @SuppressWarnings(""unused"") ItemStack item2;  try { amount1 = Integer.parseInt(info1[0]); amount2 = Integer.parseInt(info2[0]);  if (isInt(info1[1])) item_name1 = Material.getMaterial(Integer.parseInt(info1[1])).name(); else item_name1 = info1[1].toUpperCase();  item1 = new ItemStack(Material.getMaterial(item_name1), amount1);  if (isInt(info2[1])) item_name2 = Material.getMaterial(Integer.parseInt(info2[1])).name(); else item_name2 = info2[1].toUpperCase();  item2 = new ItemStack(Material.getMaterial(item_name2), amount2);  } catch (Exception e) { signIsValid = false; }  if (signIsValid == false) { event.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&', getPrefix() + plugin.getMessages().getString(""invalid-sign""))); event.setLine(0, ChatColor.DARK_RED + ""[iTrade]""); event.setLine(1, """"); event.setLine(2, """"); event.setLine(3, """"); return; }  String player_name = event.getPlayer().getName(); event.setLine(3, player_name); event.setLine(0, ChatColor.DARK_GREEN + ""[iTrade]""); event.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&', getPrefix() + plugin.getMessages().getString(""successful-setup""))); } "	0	0	1	0	0	0
"public <T> EnumBuilder withEnum(T name, Class<T> type) { pojoCreationCheck(); String cleaned = name.toString().replaceAll(NameHelper.ILLEGAL_CHARACTER_REGEX, ""_"").toUpperCase(); if (!doesEnumContainField(cleaned)) { withValueField(type); ENUM_CACHE.put(cleaned, true); logger.debug(""Adding field: "" + name + "" to "" + this.pojo.name()); if (StringUtils.hasText(cleaned)) { JEnumConstant enumConstant = this.pojo.enumConstant(cleaned); if (type.equals(Integer.class)) { enumConstant.arg(JExpr.lit((Integer)name)); } else if (type.equals(Boolean.class)) { enumConstant.arg(JExpr.lit((Boolean)name)); } else if (type.equals(Double.class)) { enumConstant.arg(JExpr.lit((Double)name)); } else if (type.equals(Float.class)) { enumConstant.arg(JExpr.lit((Float)name)); } else if (type.equals(Long.class)) { enumConstant.arg(JExpr.lit((Long)name)); } else { enumConstant.arg(JExpr.lit(name.toString())); } } } return this; } "	0	0	0	0	1	0
public boolean modExists(String modID) { return Loader.isModLoaded(modID); } 	0	0	0	1	0	0
"protected void log(String message, Object... replace) { System.out.println(String.format(""[%s] "" + message, replace)); } "	0	0	0	0	1	0
"@Override public void changeListRenamed(final ChangeList list, final String oldName) { LOG.info(""changeListRenamed: from "" + oldName + "" to "" + list);  if (! (list instanceof LocalChangeList)) { // ignore return; }  if (Comparing.equal(list.getName(), oldName)) { return; }  if (P4ChangeListMapping.isDefaultChangelist(list) && P4ChangeListMapping.isIdeaDefaultChangelistName(oldName)) { LOG.info(""Cannot set a comment to the default changelist in Perforce; ignoring.""); return; }  if (P4ChangeListMapping.isDefaultChangelist(list)) { // Rename a changelist to the default. // So move the files into the default changelist, and delete // the changelist.  final Map<ClientServerId, P4ChangeListId> moved = changeListMapping.rebindChangelistAsDefault((LocalChangeList) list); for (P4Server server: myVcs.getP4Servers()) { final P4ChangeListId p4cl = moved.remove(server.getClientServerId()); if (p4cl != null) { final Collection<P4FileAction> opened; try { opened = server.getOpenFiles(); } catch (InterruptedException e) { LOG.error(e); continue; } List<FilePath> files = new ArrayList<FilePath>(opened.size()); for (P4FileAction p4FileAction : opened) { if (p4FileAction.getChangeList() == p4cl.getChangeListId()) { files.add(p4FileAction.getFile()); } } server.moveFilesToChange(files, (LocalChangeList) list, changeListMapping); } } return; }   if (P4ChangeListId.DEFAULT_CHANGE_NAME.equals(oldName)) { // Move files out of the default changelist.  for (P4Server server : myVcs.getP4Servers()) { final Collection<P4FileAction> opened; try { opened = server.getOpenFiles(); } catch (InterruptedException e) { LOG.error(e); continue; } List<FilePath> files = new ArrayList<FilePath>(opened.size()); for (P4FileAction p4FileAction : opened) { if (p4FileAction.getChangeList() == P4ChangeListId.P4_DEFAULT) { files.add(p4FileAction.getFile()); } } server.moveFilesToChange(files, (LocalChangeList) list, changeListMapping); } return; }  for (P4Server server : myVcs.getP4Servers()) { final P4ChangeListId p4cl = changeListMapping.getPerforceChangelistFor(server, (LocalChangeList) list); if (p4cl != null) { server.renameChangelist(p4cl.getChangeListId(), toDescription(list)); } } } "	0	0	0	0	0	1
int getClosestRayFromSweep(float ray_angle, float limit, int tableIdx, float[] azimuths) {  CDMRadarSweepDB sweepTable; int             closestRay; double          close_diff;  float           beamwidth = limit * 2.f; //int             i         = s.getSweepIndex();  sweepTable = RSL_sweep_list[tableIdx];  CDMRadarSweepDB.Ray r = hashBin(sweepTable, ray_angle, azimuths.length); //  s.getRadialNumber());  /* Find hash entry with closest Ray */ if (r == null) { return 999; } int rd = r.rayIndex;  //Integer.parseInt(r.index);  //.rayIndex; closestRay = theClosestHash(azimuths, ray_angle, rd, limit);  /* Is closest ray within limit parameter ? If * so return ray, else return NULL. */ if (closestRay == 999) { return 999; }  close_diff = angleDiff(ray_angle, azimuths[closestRay]);  if (close_diff <= beamwidth) { return closestRay; }  return 999; } 	0	0	0	0	1	0
public RTIterator makeIterator() { final RTIterator retval = new RTListIterator(this); return retval; } 	0	0	0	0	1	0
"public static int randomInRange(final int min, final int max) { if (min == max) { return min; }  if (min > max) { throw new IllegalArgumentException(""min value is > than max value""); }  return (int) (min + random.nextDouble() * (max - min)); } "	0	0	0	0	1	0
@Override public boolean onOptionsItemSelected(MenuItem item) { Fragment page = vpadapter.getRegisteredFragment(pager.getCurrentItem()); if(item.getItemId()==R.id.action_modify){  if(modify){ if (page != null) { ((SuggestedItineraryFragment)page).modifyMode(false); } item.setTitle(R.string.modify); item.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER); } else { if (page != null) { ((SuggestedItineraryFragment)page).modifyMode(true); } item.setTitle(R.string.modify); item.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS); } modify=!modify; } return super.onOptionsItemSelected(item); } 	0	0	0	0	1	0
"private static void startErrorLoggingThread(final Process process, final Logger log, final String commandDesc) { Thread logThread = new Thread(""[ERR] "" + commandDesc) { @Override public void run() { try { processOutput(process.getErrorStream(), createErrorHandler(log)); } catch (IOException e) { log.error(String.format(""Failed to read error stream from %s : %s"", commandDesc, e.getMessage()), e); } } }; logThread.setDaemon(true); logThread.start(); } "	0	0	1	1	1	0
"private static final Path getCanonicalPath(final Path dir) throws NoSuchDirectoryException { if (!dir.isAbsolute()) throw new IllegalArgumentException(dir + "" is not abusolute path""); if (!Files.isDirectory(dir)) throw new NoSuchDirectoryException(dir + "" not found""); return dir; } "	0	0	0	0	1	0
"public static void load() { regions = new HashMap<String, TextureRegion>(); Texture spriteSheet = new Texture(""textures/spritesheet.png"");  ResourceReader r = new ResourceReader(ResourceReader.getAssetPath() + ""/textures/data.t""); for (String s : r.getAllKeys()) { String[] c = r.getList(s); regions.put(s, new TextureRegion(spriteSheet, Integer.parseInt(c[0]), Integer.parseInt(c[1]), Integer.parseInt(c[2]), Integer.parseInt(c[3]))); } } "	0	0	0	0	1	0
"@RequestMapping( value = ""/asmt_task_details.vw"") public ModelAndView getUserDetailsView(@RequestParam( ""asmt_task_id"" ) long taskId) { ModelAndView model = new ModelAndView( ModelView.VIEW_MAIN_PAGE );  try { AssessmentTask taskDetails = taskManager.getTaskFullDetails( taskId);  model.addObject( ""taskDetails"", taskDetails ); model.setViewName( ModelView.VIEW_ASMT_TASK_DETAILS_PAGE); } catch(Exception e) { logger.error( "" **** Error getting user Details:"", e ); }  return model;  } "	0	0	0	0	1	0
"protected void storeKeyPair(String alias, KeyPair keyPair) throws ResourceException { try { JsonValue keyPairValue = new JsonValue(new HashMap<String, Object>()); keyPairValue.put(""value"" , toPem(keyPair)); JsonValue encrypted = getCryptoService().encrypt(keyPairValue, cryptoCipher, cryptoAlias); JsonValue keyMap = new JsonValue(new HashMap<String, Object>()); keyMap.put(""keyPair"", encrypted); storeInRepo(KEYS_CONTAINER, alias, keyMap); } catch (Exception e) { throw ResourceException.getException(ResourceException.INTERNAL_ERROR, e.getMessage(), e); }  } "	0	0	0	0	1	0
"public List<UserIdentity> search(String query) { List<UserIdentity> users = luceneSearch.search(query); if (users == null) { users = new ArrayList<>(); } log.debug(""lucene search with query={} returned {} users."", query, users.size());  //If user is not found in lucene, try to search AD. if (users.isEmpty()) { try { LDAPUserIdentity user = ldapUserIdentityDao.getUserIndentity(query); if (user != null) { users.add(user); //Update user to lucene. log.trace(""Added a user found in LDAP to lucene index: {}"", user.toString()); //luceneIndexer.update(user); luceneIndexer.addToIndex(user); } } catch (NamingException e) { log.warn(""Could not find users from ldap/AD. Query: {}"", query, e); } } return users; } "	0	0	0	0	1	0
"@Override public ResponderServer listen() { ChannelManager channelManager = msbContext.getChannelManager();  channelManager.subscribe(namespace, incomingMessage -> { LOG.debug(""[{}] Received message with id: [{}]"", namespace, incomingMessage.getId()); ResponderImpl responder = new ResponderImpl(messageTemplate, incomingMessage, msbContext); onResponder(responder); });  return this; } "	0	0	0	0	1	0
@Override public void visit(final Tree.ClassDefinition that) { if (opts.isOptimize() && that.getDeclarationModel().isClassOrInterfaceMember()) return; ClassGenerator.classDefinition(that, this); } 	1	0	1	0	1	0
public Builder authConfig(AuthConfig authConfig) { this.authConfig = authConfig; return this; } 	0	0	0	1	0	0
@Override public boolean terminate(Double input) { return (input < accuracy || current_iteration > max_iterations - 1); } 	0	0	0	0	1	0
private static int [] zzUnpackTrans() { int [] result = new int[330]; int offset = 0; offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result); return result; } 	0	0	1	0	1	0
@Override public Double convertToObject(final String value, final Locale locale) throws ConversionException {  // want this truncated to four decimal places, or less final NumberFormat df = NumberFormat.getInstance(); df.setMinimumFractionDigits(0); df.setMaximumFractionDigits(4); df.setRoundingMode(RoundingMode.HALF_UP);  // convert Double d; try { d = Double.valueOf(value) / 100; } catch (final NumberFormatException e) { throw new ConversionException(e); }  // to string for the rounding/truncation final String s = df.format(d);  // back to double return Double.valueOf(s); } 	0	0	0	0	1	0
"@Override public void transportTerminated() { synchronized (lock) { if (activeTransport == transport) { log.warning(""transportTerminated called without previous transportShutdown""); activeTransport = null; } // TODO(notcarl): replace this with something more meaningful transportShutdown(Status.UNKNOWN); transports.remove(transport); if (shutdown && transports.isEmpty()) { if (terminated) { log.warning(""transportTerminated called after already terminated""); } terminated = true; lock.notifyAll(); if (terminationRunnable != null) { terminationRunnable.run(); } } } } "	0	0	0	0	1	0
"@Test public void testGetIconClassesWithIconPositionAfter() { String icon = ""fa-some-icon""; HtmlIconUtil.IconPosition position = HtmlIconUtil.IconPosition.AFTER; String expResult = ""fa wc-icon-after fa-some-icon""; String result = HtmlIconUtil.getIconClasses(icon, position); Assert.assertEquals(expResult, result); } "	0	0	1	1	1	0
"@Test public void testGetIconClassesWithIconPositionNull() { String icon = ""fa-some-icon""; HtmlIconUtil.IconPosition position = null; String expResult = ""fa fa-some-icon""; String result = HtmlIconUtil.getIconClasses(icon, position); Assert.assertEquals(expResult, result); } "	0	0	0	0	1	0
@AfterClass public void afterClass() { ExtentManager.getInstance().collectRunInfo(); } 	0	0	1	0	0	0
@Override public int hashCode() { return Objects.hashCode(application, configuration); } 	0	0	0	0	1	0
public List<String> getTagList() { return new ArrayList<String>(tagList); } 	0	0	1	0	1	0
"private WebElement getPNGAvatar() { return wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(""//img[@src='http://pngimg.com/upload/small/arctic_fox_PNG18479.png']""))); } "	0	0	0	0	1	0
"private WebElement getJPEGAvatar() { return wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(""//img[@src='https://avatars0.githubusercontent.com/u/17428479?v=3&s=460']""))); } "	0	0	0	0	1	0
"private String getForgotPasswordText() { return driver.findElement(By.xpath(""/html/body/header/nav/div/div[2]/ul[1]/li/ul/auth/div[2]/div/p[1]/a"")).getText(); } "	0	0	0	0	1	0
"private void insertPassword(String password) { driver.findElement(By.xpath(""/html/body/header/nav/div/div[2]/ul[1]/li/ul/auth/div[2]/div/form/div[2]/input"")).sendKeys(password); } "	0	0	0	0	1	0
public RealRandomAccess<T> copy() { return new WarpMagnitudeRandomAccess< T >( new double[ position.length ], value.copy(), ((ThinPlateR2LogRSplineKernelTransform)warp).deepCopy(), base.copy() ); } 	0	0	0	0	0	1
"@Override public Ticket archive(int ticketId, User user) { Ticket ticket = get(ticketId, user);  ExceptionUtil.validateTicketStatus(ticket, ""resolved"", TicketStatus.CANCELED, TicketStatus.REJECTED, TicketStatus.RESOLVED);  return archive(ticket, user); } "	0	0	1	0	0	0
"protected TagValue getValue(int tagtype, int n, int id, int beginOffset, IFD parentIFD, int nifd) { int type = tagtype; if (id == 330 && type != 13) type = 13;  // Create TagValue object TagValue tv = new TagValue(id, type);  // Defined tags int offset = beginOffset;  // Get type Size int typeSize = TiffTags.getTypeSize(type);  boolean ok = true;  // Check if the tag value fits in the directory entry value field, and get offset if not if (typeSize * n > tagValueSize) { try { offset = data.readLong(offset).toInt(); } catch (Exception ex) { validation.addErrorLoc(""Parse error getting tag "" + id + "" value"", ""IFD"" + n); ok = false; } }  tv.setReadOffset(offset); tv.setReadLength(n); if (ok) { try { for (int i = 0; i < n; i++) { // Get N tag values switch (type) { case 1: tv.add(data.readByte(offset)); break; case 2: tv.add(data.readAscii(offset)); break; case 6: tv.add(data.readSByte(offset)); break; case 7: tv.add(data.readUndefined(offset)); break; case 3: tv.add(data.readShort(offset)); break; case 8: tv.add(data.readSShort(offset)); break; case 4: tv.add(data.readLong(offset)); break; case 9: tv.add(data.readSLong(offset)); break; case 5: tv.add(data.readRational(offset)); break; case 10: tv.add(data.readSRational(offset)); break; case 11: tv.add(data.readFloat(offset)); break; case 12: tv.add(data.readDouble(offset)); break; case 13: int ifdOffset = data.readLong(offset).toInt(); IfdReader ifd = readIFD(ifdOffset, true, -1); IFD subIfd = ifd.getIfd(); subIfd.setParent(parentIFD); parentIFD.setsubIFD(subIfd); tv.add(subIfd); break; } offset += typeSize; } } catch (Exception ex) { validation.addErrorLoc(""Parse error getting tag "" + id + "" value"", ""IFD"" + nifd); ok = false; } }  if (ok && TiffTags.hasTag(id)) { Tag t = TiffTags.getTag(id); if (t.hasTypedef()) { String tagclass = t.getTypedef();  try { abstractTiffType instanceOfMyClass = (abstractTiffType) Class.forName(""com.easyinnova.tiff.model.types."" + tagclass) .getConstructor().newInstance(); if (instanceOfMyClass.isIFD()) { long ifdOffset = tv.getFirstNumericValue(); try { IfdReader ifd = readIFD((int) ifdOffset, false, -1); IFD exifIfd = ifd.getIfd(); exifIfd.setIsIFD(true); tv.clear(); tv.add(exifIfd); } catch (Exception ex) { validation.addErrorLoc(""Parse error in Exif"", ""IFD"" + nifd); } } else { instanceOfMyClass.read(tv); } } catch (ClassNotFoundException e) { validation.addErrorLoc(""Parse error getting tag "" + id + "" value"", ""IFD"" + nifd); } catch (NoSuchMethodException e) { validation.addErrorLoc(""Parse error getting tag "" + id + "" value"", ""IFD"" + nifd); } catch (SecurityException e) { validation.addErrorLoc(""Parse error getting tag "" + id + "" value"", ""IFD"" + nifd); } catch (InstantiationException e) { validation.addErrorLoc(""Parse error getting tag "" + id + "" value"", ""IFD"" + nifd); } catch (IllegalAccessException e) { validation.addErrorLoc(""Parse error getting tag "" + id + "" value"", ""IFD"" + nifd); } catch (IllegalArgumentException e) { validation.addErrorLoc(""Parse error getting tag "" + id + "" value"", ""IFD"" + nifd); } catch (InvocationTargetException e) { validation.addErrorLoc(""Parse error getting tag "" + id + "" value"", ""IFD"" + nifd); } catch (Exception e) { validation.addErrorLoc(""Parse error getting tag "" + id + "" value"", ""IFD"" + nifd); } } }  return tv; } "	0	0	1	0	1	0
public static void resetInstance(Activity context) { instance = new MetroLoadStations(context); } 	0	0	0	0	1	0
"@RequestMapping(value = ""/addNewTestDescription"", method = RequestMethod.POST) public @ResponseBody String addNewTestDescription( @RequestParam(value = ""testName"", required = true) String testName, /*@RequestParam(value = ""dateOfCreation"", required = true) String dateOfCreation,*/ @RequestParam(value = ""maxTimeToPassInMinutes"", required = true) int maxTimeToPassInMinutes) { TestDescription testDescription = new TestDescription(); testDescription.setTestName(testName); testDescription.setMaxTimeToPassInMinutes(maxTimeToPassInMinutes);  service.addTestDescription(testDescription); return ""Successfully added new test""+testDescription.getTestName(); } "	0	0	0	0	1	0
public void onZeoAppProbedSameState() { switch (ZeoCompanionApplication.mZeoAppHandler.mZeoApp_State) { case ZeoAppHandler.ZAH_ZEOAPP_STATE_RECORDING: // capture the max and especially min battery voltages while recording if (ZeoCompanionApplication.mZeoAppHandler.mZeoApp_active_SleepEpisode_ID != 0) { CompanionSleepEpisodesRec sRec = getTodayDaypointCSECreateIfShould(); if (sRec != null) { if (sRec.rZeoHeadbandBatteryVoltage_High != ZeoCompanionApplication.mZeoAppHandler.mZeoHeadband_voltage_maxWhileRecording || sRec.rZeoHeadbandBatteryVoltage_Low != ZeoCompanionApplication.mZeoAppHandler.mZeoHeadband_voltage_minWhileRecording) { sRec.rZeoHeadbandBatteryVoltage_High = ZeoCompanionApplication.mZeoAppHandler.mZeoHeadband_voltage_maxWhileRecording; sRec.rZeoHeadbandBatteryVoltage_Low = ZeoCompanionApplication.mZeoAppHandler.mZeoHeadband_voltage_minWhileRecording; sRec.saveToDB(); } } } break; } } 	0	0	0	0	1	0
"protected Object resolve(final Object iContent) { if (context == null || iContent == null) return iContent;  Object value = null; if (iContent instanceof String) { if (((String) iContent).startsWith(""$"")) value = context.getVariable(iContent.toString()); else value = OVariableParser.resolveVariables((String) iContent, OSystemVariableResolver.VAR_BEGIN, OSystemVariableResolver.VAR_END, new OVariableParserListener() { @Override public Object resolve(final String iVariable) { return context.getVariable(iVariable); } }); } else value = iContent;  if (value instanceof String) value = OVariableParser.resolveVariables((String) value, ""={"", ""}"", new OVariableParserListener() {  @Override public Object resolve(final String iVariable) { return new OSQLPredicate(iVariable).evaluate(context); }  }); return value; } "	0	0	0	0	1	0
@Override protected boolean shouldSkipOnBoxBaseDirResolution() { return true; } 	0	0	1	1	0	0
@Override public synchronized void update(Example train) { NumericFeature target = (NumericFeature) train.getTarget(); update(target.getValue(), 1); } 	0	0	1	1	0	0
public synchronized void update(double[] newPoint) { update(newPoint, 1); } 	0	0	1	1	0	0
"@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { if (!initialized) { LOG.error(""Rate Limiting filter has not yet initialized...""); ((HttpServletResponse) response).sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE); } else { HttpServletRequestWrapper wrappedRequest = new HttpServletRequestWrapper((HttpServletRequest) request); HttpServletResponseWrapper wrappedResponse = new HttpServletResponseWrapper( (HttpServletResponse) response, ResponseMode.MUTABLE, ResponseMode.MUTABLE);  RateLimitingHandler handler = buildHandler(); FilterAction filterAction = handler.handleRequest(wrappedRequest, wrappedResponse); switch (filterAction) { case RETURN: break; // no further processing case PASS: chain.doFilter(wrappedRequest, wrappedResponse); break; case PROCESS_RESPONSE: chain.doFilter(wrappedRequest, wrappedResponse); handler.handleResponse(wrappedRequest, wrappedResponse); break; default: LOG.error(""Unexpected internal filter state""); ((HttpServletResponse) response).sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); }  wrappedResponse.commitToResponse(); } } "	0	0	0	0	1	0
"@Override public void initialize() {  try { GroupAddress groupaddress = new GroupAddress((String) getConfig().get(GROUP_ADDRESS));  if (groupaddress != null) { groupAddresses.add(groupaddress); if ((Boolean) getConfig().get(READ)) { logger.debug(""Registering {} in read Addresses"", address); readAddresses.add(groupaddress); } } } catch (Exception e) { logger.error(""An exception occurred while creating a Group Address : '{}'"", e.getMessage()); }  super.initialize(); } "	0	0	0	1	1	0
public int GetWeight() { /*  */ return sbHeight.getProgress() + 40; } 	0	0	0	0	1	0
"private void createEmptyIntegrationComponent(String groupId, String artifactId, MuleVersionEnum muleVersion, DeploymentModelEnum deploymentModel, String projectFolder) throws IOException {  SystemUtil.delDirs(projectFolder); assertEquals(0, SystemUtil.countFiles(projectFolder)); new IntegrationComponentV2Generator(System.out, groupId, artifactId, VERSION, muleVersion, deploymentModel, TRANSPORTS, TEST_OUT_FOLDER).startGenerator(); assertEquals(""Missmatch in expected number of created files and folders."", EXPECTED_NO_OF_IC_FILES_CREATED, SystemUtil.countFiles(projectFolder)); } "	0	0	0	0	1	0
public void setItemsInList(SchoolClassModel model) { //TODO RKL: Add feature to select class. listView.setItems(model.getStudentSearchList()); } 	0	0	0	0	1	0
private int getRandomNumber(int start, int end) { int num = random.nextInt(end-start+1)+start; return num; } 	0	0	0	1	0	0
private boolean isInRange(int a, int min, int max) { if (a >= min && a <= max) return true; return false; } 	0	0	0	1	0	0
"@Override public View setUp(int position, CharSequence title, View inflatedTab) { ((TextView) inflatedTab.findViewById(R.id.tab_2_title)).setText("""" + position); ((ImageView) inflatedTab.findViewById(R.id.tab_2_content)).setImageResource(Data.values()[position].resId);  return inflatedTab; } "	0	0	0	0	1	0
"public Method compileFunction(String exampleName, Class[] paramTypes, List<String> classPathElements) throws NoSuchMethodException, IOException { TurinFile turinFile = new Parser().parse(this.getClass().getResourceAsStream(""/"" + exampleName + "".to""));  // generate bytecode Compiler.Options options = new Compiler.Options(); options.setClassPathElements(classPathElements); Compiler instance = new Compiler(getResolverFor(turinFile, classPathElements), options); List<ClassFileDefinition> classFileDefinitions = instance.compile(turinFile, new MyErrorCollector()); saveClassFile(classFileDefinitions.get(0), ""tmp""); assertEquals(1, classFileDefinitions.size());  TurinClassLoader turinClassLoader = new TurinClassLoader(); Class functionClass = turinClassLoader.addClass(classFileDefinitions.get(0).getName(), classFileDefinitions.get(0).getBytecode()); assertEquals(0, functionClass.getConstructors().length);  Method invoke = functionClass.getMethod(""invoke"", paramTypes); return invoke; } "	0	0	0	0	1	0
@Override public ItemStack decrStackSize(int slot, int count) { return storage.decrStackSize(slot, count); } 	0	0	0	0	1	0
@Override public void setInventorySlotContents(int slot, ItemStack itemStack) { storage.setInventorySlotContents(slot, itemStack); } 	0	0	0	0	1	0
@Override public int getSizeInventory() { return storage.getSizeInventory(); } 	0	0	0	0	1	0
@Override public FluidStack drain(EnumFacing from, int maxDrain, boolean doDrain) { return storage.drain(from, maxDrain, doDrain); } 	0	0	0	0	1	0
@Override public int comparatorInput() { FluidTankInfo tank = storage.getTankInfo(null)[0]; return tank.fluid.amount * 14 / tank.capacity + (tank.fluid.amount > 0 ? 1 : 0); } 	0	0	0	0	1	0
public double getMinimumCharge() { return this.mincap; } 	0	0	1	0	1	0
public void setCurrentCharge(double avaliability) { this.avaliability = avaliability; } 	0	0	1	0	1	0
@Test public void testNaiveBayes() { try { Evaluator evaluator = new Evaluator(new NaiveBayes(), options3); Performance performance = evaluator.evaluate(); System.out.println(performance); } // try catch (Exception e) { System.out.println(e.getMessage()); e.printStackTrace(); } // catch } 	0	0	1	1	0	0
"@Override public void createPartControl(Composite parent) {  //Set layout forum of parent composite parent.setLayout(new FormLayout());  //This is a temporary setting of files VariableResources.setFiles(RequirementsView.class.getProtectionDomain().getCodeSource().getLocation().getPath() + ""/src""); //Create a drop box comboViewer = new ComboViewer(parent,SWT.NONE|SWT.DROP_DOWN); Combo combo = comboViewer.getCombo(); combo.add(""Choose Use Case""); //Add each file to the combo viewer for (int i = 0; i < VariableResources.getNumberOfFiles(); i++) { if (VariableResources.filesInFolder[i].isFile()) { //Removes the .txt extension portion of the file names and put it in the combo viewer. combo.add(VariableResources.getFileName(i)); } } combo.select(0);  //Set combo position FormData formdata = new FormData(); formdata.top=new FormAttachment(0,5); formdata.left = new FormAttachment(0,10); formdata.right = new FormAttachment(0,290); combo.setLayoutData(formdata);  //Set text position Text text = new Text(parent,SWT.MULTI|SWT.V_SCROLL|SWT.READ_ONLY); formdata = new FormData(); formdata.top=new FormAttachment(combo,10); formdata.bottom = new FormAttachment(combo,600); formdata.left = new FormAttachment(0,5); formdata.right = new FormAttachment(0,355); text.setLayoutData(formdata); //set text content text.setText(""Indexing time of X requirement(s) is: "" + finalTime + "" seconds.""); System.out.println(endTime); System.out.println(startTime); combo.addSelectionListener(new SelectionListener(){  @Override public void widgetSelected(SelectionEvent e) { if(combo.getSelectionIndex()==0) text.setText(""Indexing time of X requirement(s) is: "" + finalTime + "" seconds.""); else { ArrayList<String> textArrayList = VariableResources.getFileText(VariableResources.getFileName(combo.getSelectionIndex()));  StringBuilder sb = new StringBuilder(); for (String s : textArrayList) { sb.append(s); sb.append(""\t""); } text.setText(sb.toString() + ""\n""); } }  @Override public void widgetDefaultSelected(SelectionEvent e) { // TODO Auto-generated method stub  }  });  comboViewer.addSelectionChangedListener(new ISelectionChangedListener(){  @Override public void selectionChanged(SelectionChangedEvent event) { ISelection comboSelection = event.getSelection(); setSelection(comboSelection); }  });  } "	0	0	1	0	0	0
@Override public void removeDefaultScopes(String id, String... scopes) { removeScopes(DomainRepository.FIELD_DEFAULT_SCOPES, id, scopes); } 	0	0	0	0	1	0
"public static void main(String[] args) { println(""*** "" + Main.makeTitle() + "" ***"");  Thread.currentThread().setName(""launcher""); try { File logFile = new File(""hmclmc.log""); if (!logFile.exists()) logFile.createNewFile(); FileOutputStream tc = new FileOutputStream(logFile); DoubleOutputStream out = new DoubleOutputStream(tc, System.out); System.setOut(new LauncherPrintStream(out)); DoubleOutputStream err = new DoubleOutputStream(tc, System.err); System.setErr(new LauncherPrintStream(err)); } catch (Exception e) { println(""Failed to add log file appender.""); e.printStackTrace(); }  LogWindow.instance.setTerminateGame(Utils::shutdownForcely);  boolean showInfo = false; String classPath = """"; String mainClass = ""net.minecraft.client.Minecraft"";  ArrayList<String> cmdList = new ArrayList<>();  for (String s : args) if (s.startsWith(""-cp="")) classPath = classPath.concat(s.substring(""-cp="".length())); else if (s.startsWith(""-mainClass="")) mainClass = s.substring(""-mainClass="".length()); else if (s.equals(""-debug"")) showInfo = true; else cmdList.add(s);  String[] cmds = (String[]) cmdList.toArray(new String[cmdList.size()]);  String[] tokenized = StrUtils.tokenize(classPath, File.pathSeparator); int len = tokenized.length;  if (showInfo) { println(""Arguments: {\n"" + StrUtils.parseParams(""    "", args, ""\n"") + ""\n}""); println(""Main Class: "" + mainClass); println(""Class Path: {\n"" + StrUtils.parseParams(""    "", tokenized, ""\n"") + ""\n}""); SwingUtilities.invokeLater(() -> LogWindow.instance.setVisible(true)); }  URL[] urls = new URL[len];  try { for (int j = 0; j < len; j++) urls[j] = new File(tokenized[j]).toURI().toURL(); } catch (Throwable e) { MessageBox.Show(C.i18n(""crash.main_class_not_found"")); println(""Failed to get classpath.""); e.printStackTrace(); return; }  if (!JdkVersion.isJava64Bit() && Platform.getPlatform() == Platform.BIT_32) MessageBox.Show(C.i18n(""advice.os64butjdk32""));  Method minecraftMain; try { minecraftMain = new URLClassLoader(urls).loadClass(mainClass).getMethod(""main"", String[].class); } catch (ClassNotFoundException | NoSuchMethodException | SecurityException t) { MessageBox.Show(C.i18n(""crash.main_class_not_found"")); println(""Minecraft main class not found.""); t.printStackTrace(); return; }  println(""*** Launching Game ***"");  try { minecraftMain.invoke(null, new Object[]{cmds}); } catch (Throwable throwable) { HMCLog.err(""Cought exception!""); final StringWriter trace = new StringWriter(); PrintWriter writer = new PrintWriter(trace); throwable.printStackTrace(writer); final String advice = MinecraftCrashAdvicer.getAdvice(throwable); MessageBox.Show(C.i18n(""crash.minecraft"") + "": "" + advice);  LogWindow.instance.log(C.i18n(""crash.minecraft"")); LogWindow.instance.log(advice); LogWindow.instance.log(trace.toString()); LogWindow.instance.setExit(TrueDoneListener.instance); LogWindow.instance.setVisible(true); }  println(""*** Game Exited ***""); } "	0	0	1	0	0	0
"public static PacketType convertPacketType(String packetType) throws IllegalArgumentException {  for (PacketType p : PacketType.values()) { if (p.toString().equals(packetType)) { return p; } }  throw new IllegalArgumentException(""Unknown packet type "" + packetType); } "	0	0	0	0	1	0
private void readServerSSLContext(ModelNode parentAddress, XMLExtendedStreamReader reader, List<ModelNode> list) throws XMLStreamException { ModelNode addServerSSLContext = new ModelNode(); addServerSSLContext.get(OP).set(ADD); Set<String> requiredAttributes = new HashSet<String>(Arrays.asList(new String[] { NAME })); String name = null;  final int count = reader.getAttributeCount(); for (int i = 0; i < count; i++) { final String value = reader.getAttributeValue(i); if (!isNoNamespaceAttribute(reader, i)) { throw unexpectedAttribute(reader, i); } else { String attribute = reader.getAttributeLocalName(i); requiredAttributes.remove(attribute); switch (attribute) { case NAME: name = value; break; case SECURITY_DOMAIN: SSLDefinitions.SECURITY_DOMAIN.parseAndSetParameter(value, addServerSSLContext, reader); break; case CIPHER_SUITE_FILTER: SSLDefinitions.CIPHER_SUITE_FILTER.parseAndSetParameter(value, addServerSSLContext, reader); break; case PROTOCOLS: for (String protocol : reader.getListAttributeValue(i)) { SSLDefinitions.PROTOCOLS.parseAndAddParameterElement(protocol, addServerSSLContext, reader); } break; case REQUIRE_CLIENT_AUTH: SSLDefinitions.REQUIRE_CLIENT_AUTH.parseAndSetParameter(value, addServerSSLContext, reader); break; case KEY_MANAGERS: SSLDefinitions.KEY_MANAGERS.parseAndSetParameter(value, addServerSSLContext, reader); break; case TRUST_MANAGERS: SSLDefinitions.TRUST_MANAGERS.parseAndSetParameter(value, addServerSSLContext, reader); break; case PROVIDER: SSLDefinitions.PROVIDER_LOADER.parseAndSetParameter(value, addServerSSLContext, reader); break; default: throw unexpectedAttribute(reader, i); } } }  if (requiredAttributes.isEmpty() == false) { throw missingRequired(reader, requiredAttributes); }  addServerSSLContext.get(OP_ADDR).set(parentAddress).add(TRUST_MANAGER, name); list.add(addServerSSLContext);  requireNoContent(reader); } 	0	0	0	0	1	0
@Override public double getSignal(BigDecimal time) {  BigDecimal remainderTime = (time.add(phaseBD)).remainder(T).multiply(point5).divide(dutyCycleBD);  // up phase if (BigDecimal.ZERO.compareTo(remainderTime) <= 0 && remainderTime.multiply(T).compareTo(point5.divide(frequencyBD, MathContext.DECIMAL128).multiply(T)) < 0) { return amplitude + dcOffset; }  // down phase else { return -1.0 * amplitude + dcOffset; } } 	0	0	0	0	1	0
"@Test public void testGetChar() throws Exception {  CommandArguments args = getParseArguments(""c"");  // should not throw any exceptions Assert.assertEquals('c', args.getChar(""param1""));  // check for runtime exception, invalid parameter name specified try { args.getChar(""param2""); throw new AssertionError(""RuntimeException expected.""); } catch (RuntimeException ignore) {}  // ------------  // check for invalid argument args = getParseArguments(""invalidChar"");  try { args.getChar(""param1""); throw new AssertionError(""InvalidArgumentException expected.""); } catch (InvalidArgumentException ignore) {} } "	0	0	1	1	1	0
"@Test public void testGetInteger() throws Exception {  CommandArguments args = getParseArguments(""10"");  // should not throw any exceptions Assert.assertEquals(10, args.getInteger(""param1""));  // check for runtime exception, invalid parameter name specified try { args.getInteger(""param2""); throw new AssertionError(""RuntimeException expected.""); } catch (RuntimeException ignore) {}  // ------------  // check for invalid argument args = getParseArguments(""invalidInteger"");  try { args.getInteger(""param1""); throw new AssertionError(""InvalidArgumentException expected.""); } catch (InvalidArgumentException ignore) {}  // ------------  // check for invalid argument, number out of range args = getParseArguments(String.valueOf(Integer.MAX_VALUE + 1L));  try { args.getInteger(""param1""); throw new AssertionError(""InvalidArgumentException expected.""); } catch (InvalidArgumentException ignore) {} } "	0	0	1	1	1	0
"@Test public void testGetLong() throws Exception {  CommandArguments args = getParseArguments(""10"");  // should not throw any exceptions Assert.assertEquals(10, args.getLong(""param1""));  // check for runtime exception, invalid parameter name specified try { args.getLong(""param2""); throw new AssertionError(""RuntimeException expected.""); } catch (RuntimeException ignore) {}  // ------------  // check for invalid argument args = getParseArguments(""invalidLong"");  try { args.getLong(""param1""); throw new AssertionError(""InvalidArgumentException expected.""); } catch (InvalidArgumentException ignore) {}  // ------------  // check for invalid argument, number out of range args = getParseArguments(""99999999999999999999999999999999999999999999999999999999999"");  try { args.getLong(""param1""); throw new AssertionError(""InvalidArgumentException expected.""); } catch (InvalidArgumentException ignore) {} } "	0	0	1	1	1	0
"protected DBMetadata readMetadata(String dbName) throws IOException { String path = dbMetadataDirectoryPath(dbName) + "".md""; File file = new File(path); if (!file.exists()) { return new DBMetadata(defaultRetentionHours); } List<String> lines = MiscUtils.readAllLines(file); StringBuilder builder = new StringBuilder(); for (String line : lines) { builder.append(line); } DBMetadata metadata = new Gson().fromJson(builder.toString(), DBMetadata.class); return metadata; } "	0	0	0	0	1	0
protected KimAttributeField getAttributeDefinition(String kimTypId, String attrDefnId) { final KimType type = getKimTypeInfoService().getKimType(kimTypId); if (type != null) { final KimTypeService typeService = (KimTypeService) KimImplServiceLocator.getBean(type.getServiceName()); if (typeService != null) { final KimTypeAttribute attributeInfo = type.getAttributeDefinitionById(attrDefnId); if (attributeInfo != null) { final List<KimAttributeField> attributeMap = typeService.getAttributeDefinitions(type.getId()); if (attributeMap != null) { return DataDictionaryTypeServiceHelper.findAttributeField( attributeInfo.getKimAttribute().getAttributeName(), attributeMap); } } } } return null; } 	0	0	0	0	1	0
"@GET @Path(""/getPeopleInfo/{userId}.{format}"") public Response getPeopleInfo(@Context UriInfo uriInfo, @Context SecurityContext securityContext, @PathParam(""userId"") String userId, @PathParam(""format"") String format, @QueryParam(""currentUserName"") String currentUserName, @QueryParam(""updatedType"") String updatedType) throws Exception { //  if (format.indexOf('.') > 0) { userId = new StringBuffer(userId).append(""."").append(format.substring(0, format.lastIndexOf('.'))).toString(); format = format.substring(format.lastIndexOf('.') + 1); }  String[] mediaTypes = new String[] { ""json"", ""xml"" }; format = ArrayUtils.contains(mediaTypes, format) ? format : mediaTypes[0];  if(currentUserName == null || currentUserName.trim().isEmpty()) { currentUserName = getUserId(securityContext, uriInfo); }  // MediaType mediaType = Util.getMediaType(format, mediaTypes);  PeopleInfo peopleInfo = new PeopleInfo(NO_INFO); Identity identity = getIdentityManager() .getOrCreateIdentity(OrganizationIdentityProvider.NAME, userId, false); Identity currentIdentity = getIdentityManager() .getOrCreateIdentity(OrganizationIdentityProvider.NAME, currentUserName, false); if (identity != null) { // public information peopleInfo.setFullName(identity.getProfile().getFullName()); peopleInfo.setPosition(StringEscapeUtils.unescapeHtml(identity.getProfile().getPosition())); peopleInfo.setDeleted(identity.isDeleted()); Profile userProfile = identity.getProfile(); String avatarURL = userProfile.getAvatarUrl(); if (avatarURL == null) { avatarURL = LinkProvider.PROFILE_DEFAULT_AVATAR_URL; } peopleInfo.setAvatarURL(avatarURL);   String userType = ConversationState.getCurrent().getIdentity().getUserId(); boolean isAnonymous = IdentityConstants.ANONIM.equals(userType) || securityContext.getUserPrincipal() == null;  if (!isAnonymous) { // private information peopleInfo.setProfileUrl(LinkProvider.getUserActivityUri(identity.getRemoteId()));  peopleInfo.setRelationshipType(NO_ACTION);  String relationshipType = null;  if(currentUserName != null && !userId.equals(currentUserName)) { // Set relationship type Relationship relationship = getRelationshipManager().get(currentIdentity, identity);  if(currentIdentity != null) { // Process action if (updatedType != null) { if (currentIdentity != null) { if (ACCEPT_ACTION.equals(updatedType)) { // Accept or Deny getRelationshipManager().confirm(currentIdentity, identity); } else if (DENY_ACTION.equals(updatedType)) { getRelationshipManager().deny(currentIdentity, identity); } else if (REVOKE_ACTION.equals(updatedType)) { getRelationshipManager().deny(currentIdentity, identity); } else if (INVITE_ACTION.equals(updatedType)) { getRelationshipManager().inviteToConnect(currentIdentity, identity); } else if (REMOVE_ACTION.equals(updatedType)) { getRelationshipManager().delete(getRelationshipManager().get(currentIdentity, identity)); } } }  relationshipType = getRelationshipType(relationship, currentIdentity); peopleInfo.setRelationshipType(relationshipType); } }  if (CONFIRMED_STATUS.equals(relationshipType)) {  // exposed if relationship type is confirmed (has connection with current logged in user) String activityTitle = getLatestActivityTitle(identity, currentIdentity); if (activityTitle != null) { peopleInfo.setActivityTitle(StringEscapeUtils.unescapeHtml(activityTitle)); } } } }  return Util.getResponse(peopleInfo, uriInfo, mediaType, Response.Status.OK); } "	0	0	0	0	0	1
"private static Item createAntidote(Player player) { Item antidote = new Item(""antidote""); PlayerStatusAction firstAction = new PlayerStatusAction(Player.Status.alive, ""drink""); MoveItemAction secondAction = new MoveItemAction(player,null,""drop""); ComplexAction action = new ComplexAction(""drink""); action.addAction(firstAction); action.addAction(secondAction); antidote.addAction(action); addPickDrop(antidote,player); return antidote; } "	0	0	0	0	1	0
private Collection getParameterNames() { return ((Map)contextMap.get(ActionContext.PARAMETERS)).keySet(); } 	0	0	0	0	1	0
"private void setUpParameters(String [] paramNames) { Map<String, String> params = new HashMap<>(); for (String paramName : paramNames) { params.put(paramName, ""irrelevant what this is"");  } contextMap.put(ActionContext.PARAMETERS, params); } "	0	0	0	0	1	0
"@SafeVarargs public static <V, T> Comparator<T> propertyComparator(String propertyName,V...propertyValues){ Validate.notBlank(propertyName, ""propertyName can't be blank!""); Validate.notNull(propertyValues, ""propertyValues can't be null!""); return propertyComparator(propertyName, toList(propertyValues)); } "	0	0	1	1	0	0
"public static <V, T> Comparator<T> propertyComparator(String propertyName,List<V> propertyValues){ Validate.notBlank(propertyName, ""propertyName can't be blank!""); Validate.notNull(propertyValues, ""propertyValues can't be null!""); return propertyComparator(propertyName, propertyValues, UnknownObjectBehavior.AFTER); } "	0	0	1	1	0	0
"@Override public void start(Stage primaryStage) throws Exception {  String debugPort = null; String outputRedirect = null; if (getDefaultString() != null && !getDefaultString().equalsIgnoreCase(System.getProperty(""file.encoding""))) { System.setProperty(""file.encoding"", getDefaultString()); Class<Charset> c = Charset.class;  java.lang.reflect.Field defaultCharsetField = c.getDeclaredField(""defaultCharset""); defaultCharsetField.setAccessible(true); defaultCharsetField.set(null, null); } SimpleKeyValueList<String, String> params = getParameterMap(); for (int i = 0; i < params.size(); i++) { String key = params.get(i); String value = params.getValueByIndex(i); if (key.equalsIgnoreCase(""debug"")) { if (value != null) { debugPort = value; } else { debugPort = ""4223""; } } else if (key.equalsIgnoreCase(""output"")) { if (value == null) { outputRedirect = ""INHERIT""; } else { outputRedirect = value; } } else if (key.equalsIgnoreCase(""-?"")) { System.out.println(getCommandHelp()); Runtime.getRuntime().exit(1); } } if (debugPort != null) { ArrayList<String> items = new ArrayList<String>(); if (new Os().isMac()) { items.add(System.getProperty(""java.home"").replace(""\\"", ""/"") + ""/bin/java""); } else { items.add(""\"""" + System.getProperty(""java.home"").replace(""\\"", ""/"") + ""/bin/java\""""); }  items.add(""-Xdebug""); items.add(""-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address="" + debugPort); items.add(""-jar""); String fileName = new Os().getFilename().toLowerCase(); items.add(fileName);  ProcessBuilder processBuilder = new ProcessBuilder(items); if (outputRedirect != null) { if (outputRedirect.equalsIgnoreCase(""inherit"")) { processBuilder.redirectErrorStream(true); processBuilder.redirectOutput(Redirect.INHERIT); } else { int pos = outputRedirect.lastIndexOf("".""); if (pos > 0) { processBuilder.redirectError( new File(outputRedirect.substring(0, pos) + ""_error"" + outputRedirect.substring(pos))); processBuilder.redirectOutput( new File(outputRedirect.substring(0, pos) + ""_stdout"" + outputRedirect.substring(pos))); } else { processBuilder.redirectError(new File(outputRedirect + ""_error.txt"")); processBuilder.redirectOutput(new File(outputRedirect + ""_stdout.txt"")); } } } processBuilder.start(); // if(outputRedirect != null) { // int waitFor = process.waitFor(); // System.out.println(""Resultstatus: ""+waitFor); // } System.exit(1); } // long mbMemory = ((com.sun.management.OperatingSystemMXBean) // ManagementFactory.getOperatingSystemMXBean()).getTotalPhysicalMemorySize()/(1014*1024); // System.out.println(""Total:""+ // ((com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean()).getTotalPhysicalMemorySize()); // params.put(""-Xmx"", ""-Xmx""+mbMemory/4+""m""); // System.out.println(""Set MaxMemory: ""+mbMemory/4+""m""); try { this.controller = new FXStageController(primaryStage); Parent pane = createContents(this.controller, this.getParameters()); this.controller.withCenter(pane); this.controller.show(); } catch (Exception e) { this.saveException(e); if (new Os().isEclipse()) { throw e; } } } "	0	0	1	0	0	0
public void updateList(List[] lists) { clearList(); mLists.addAll(Arrays.asList(lists));  // Report that the data changed notifyItemRangeChanged(0, mLists.size()); } 	0	0	0	0	1	0
@Override public void removeProgressBottomGrid() { this.endlessScrollListener.removeProgressItem(); this.adapter.removeProgress(); } 	0	0	0	0	1	0
"@Override public void exitCreate(CreateContext ctx) { try { if (ctx.INDEX() != null){ String indexName = ctx.index_name().getText(); String namespace = ctx.nameSet().namespaceName; String set = ctx.nameSet().setName; String binName = ctx.binName.getText(); IndexType type = (ctx.iType.getText().equalsIgnoreCase(""STRING"")) ? IndexType.STRING : IndexType.NUMERIC; IndexCollectionType collectionType; if (ctx.LIST() != null){ collectionType = IndexCollectionType.LIST; } else if (ctx.MAPKEYS() != null){ collectionType = IndexCollectionType.MAPKEYS; } else if (ctx.MAPVALUES() != null) { collectionType = IndexCollectionType.MAPVALUES; } else { collectionType = IndexCollectionType.DEFAULT; } IndexTask indexTask = client.createIndex(null, namespace, set, indexName, binName, type, collectionType); indexTask.waitTillComplete(10); results.report(String.format(""Index %s created"", indexName)); } else if (ctx.USER() != null) { // its a user String user = ctx.user().getText(); String password = ctx.password().getText(); List<String> roles = new ArrayList<String>(); if (ctx.role() != null){ roles.add(ctx.role().getText()); } else if (ctx.roles().role().size() > 0){ for (RoleContext role : ctx.roles().role()){ roles.add(role.getText()); } } client.createUser(adminPolicy, user, password, roles); results.report(""Created user: "" + user); } else if (ctx.ROLE() != null){ String roleName = ctx.role().getText(); List<Privilege> privileges = new ArrayList<Privilege>(); for (PrivilegeContext priv : ctx.privilege()) { Privilege privilege = priv.priv; privileges.add(privilege); } client.createRole(adminPolicy, roleName, privileges); results.report(""Created role: "" + roleName); } } catch (AerospikeException e){ results.report(e); } } "	0	0	0	0	0	1
"private void getLock(final InstanceIdentifier<Lock> lockInstanceIdentifier, final Lock lockData) throws InterruptedException { // Count from 1 to provide human-comprehensible messages for (int retry = 1;; retry++) { try { if (readWriteLock(lockInstanceIdentifier, lockData)) { return; } else { LOG.debug(""Already locked after waiting {}ms, try {}"", DEFAULT_WAIT_TIME_IN_MILLIS, retry); } } catch (ExecutionException e) { LOG.error(""Unable to acquire lock, try {}"", retry, e); } Thread.sleep(DEFAULT_WAIT_TIME_IN_MILLIS); } } "	0	0	1	0	1	0
"@Override public Object invoke(Sequential<? extends Type<? extends Object>> typeArguments, Sequential<? extends Object> arguments) { if (!typeArguments.getEmpty()) { throw new TypeApplicationException(""Constructors do not accept type arguments""); } // TODO Auto-generated method stub super.invoke(typeArguments, arguments); return null; } "	0	0	0	0	1	0
"public synchronized void broadcast(Message msg) { // broadcast message to all parents with subscribers to this topic for (ParentSubscriber parent : parents.values()) { if (!parent.init) { if (publisher.sendMessage(new TopicPublishedMessage(publisher.getEntityId(), topicId), parent.entityId, 0, topicId)) { logger.info(""HAVE TO REPUBLISH TOPIC {} to Tetrapod-{}"", topicId, parent.entityId); for (Subscriber sub : subscribers.values()) { final int parentId = sub.entityId; if (parentId == parent.entityId) { publisher.sendMessage(new TopicSubscribedMessage(publisher.getEntityId(), topicId, sub.entityId, sub.childId, true), parent.entityId, 0, topicId); fireTopicSubscribedEvent(sub.entityId, sub.childId, true); } } parent.init = true; } else { parent.init = false; } } if (!publisher.broadcastMessage(msg, parent.entityId, topicId)) { parent.init = false; } } } "	0	0	1	1	1	0
"@Override public void relayMessage(final MessageHeader header, final ByteBuf buf, final boolean isBroadcast) throws IOException { final EntityInfo sender = registry.getEntity(header.fromId); if (sender != null) { buf.retain(); sender.queue(() -> { try { if ((header.flags & MessageHeader.FLAGS_ALTERNATE) != 0) { // relay to all web services: final int ri = buf.readerIndex(); for (EntityInfo e : registry.getServicesList(WebContract.CONTRACT_ID)) { if (e.hasConnectedSession()) { e.getSession().sendRelayedMessage(header, buf, isBroadcast); buf.readerIndex(ri); } } } else { final Session ses = getRelaySession(header.toParentId, header.contractId); if (ses != null) { ses.sendRelayedMessage(header, buf, false); } } } catch (Throwable e) { logger.error(e.getMessage(), e); } finally { // FIXME: This is fragile -- if we delete an entity with queued work, we need to make sure we // release all the buffers in the queued work items. buf.release(); } }); worker.kick(); } else { logger.error(""Could not find sender entity  {} for {}"", header.fromId, header.dump()); } } "	0	0	1	0	1	0
"private boolean sourceIsURL() { return source.toString().contains(""http""); } "	0	0	0	0	1	0
"@Test @Ignore public void testRenameTo() throws IOException { File f = workspace.addFileByStringPath(""foo""); f.createNewFile();  File f2 = workspace.addFileByStringPath(""foo2""); f2.createNewFile();  Assert.assertTrue(f.renameTo(workspace.addFileByStringPath(""bar""))); Assert.assertTrue(f2.renameTo(workspace.addFileByStringPath(""/bar2"")));  Assert.assertTrue(new File(workspace + File.separator + ""bar"").exists()); Assert.assertTrue(new File(workspace + File.separator + ""bar2"").exists()); } "	0	0	0	0	1	0
@Override public void onDashboardStarted() { // register events LocalBroadcastManager.getInstance(this).registerReceiver(receiver, new IntentFilter(BluetoothLEService.IMMEDIATE_ALERT_AVAILABLE)); LocalBroadcastManager.getInstance(this).registerReceiver(receiver, new IntentFilter(BluetoothLEService.BATTERY_LEVEL)); LocalBroadcastManager.getInstance(this).registerReceiver(receiver, new IntentFilter(BluetoothLEService.SERVICES_DISCOVERED)); LocalBroadcastManager.getInstance(this).registerReceiver(receiver, new IntentFilter(BluetoothLEService.RSSI_RECEIVED));  // bind service bindService(new Intent(this, BluetoothLEService.class), serviceConnection, BIND_AUTO_CREATE);  setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() { @Override public void onRefresh() { service.connect(); } }); } 	0	0	0	0	1	0
public boolean isPlaying() { return playing.getValue(); } 	1	0	0	0	0	0
public boolean canHandle(Element element, String propertyKey, String propertyName, ElementOrPropertyStatus status) { if (!this.isStarted()) { //we are probably on a server and want to submit it to the architecture return true; }  Property property = element.getProperty(propertyKey, propertyName);  return canHandle(element, property, propertyKey, propertyName, status); } 	1	0	0	0	1	0
"@Override public void activate(HomeService server) { super.activate(server); try { client = new org.eclipse.paho.client.mqttv3.MqttClient(address + "":"" + port, ""OpenNetHomeServer-Sub""); client.setCallback(new SubscribeCallback()); client.connect(); client.subscribe(baseTopic); } catch (Exception e) { logger.log(Level.WARNING, ""Failed to connect to MQTT Server"", e); } } "	0	0	1	0	1	0
"public void showDialog() {  // DialogFragment.show() will take care of adding the fragment // in a transaction.  We also want to remove any currently showing // dialog, so make our own transaction and take care of that here. FragmentTransaction ft = getFragmentManager().beginTransaction(); Fragment prev = getFragmentManager().findFragmentByTag(""dialog""); if (prev != null) { ft.remove(prev); } ft.addToBackStack(null);  // Create and show the dialog. AcceptTaskFragment newFragment = new AcceptTaskFragment(); newFragment.show(ft, """"); } "	0	0	0	0	1	0
"private void ensureNodesAreAvailable(List<DiscoveryNode> nodes) { if (nodes.isEmpty()) { String message = String.format(Locale.ROOT, ""None of the configured nodes are available: %s"", nodes); throw new NoNodeAvailableException(message); } } "	0	0	0	0	1	0
"@Test public void testSinglePropositionCompoundName() { PropositionSeries propositions = getPropositions(""if the JNDI name is null"");  assertThat(propositions.numberOfPropositions(), is(1)); assertThat(propositions.getPropositions().get(0).toString(), is(""(JNDI name, is null)"")); assertTrue(propositions.getConjunctions().isEmpty()); } "	0	0	0	0	1	0
public  void startAlarm(Context c) { Intent intent=new Intent(c, serviceStartBroadcast.class); final PendingIntent pendingIntent=PendingIntent.getBroadcast(c,12345,intent,PendingIntent.FLAG_UPDATE_CURRENT);  AlarmManager alarm = (AlarmManager) c.getSystemService(Context.ALARM_SERVICE); alarm.setRepeating(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),120000,pendingIntent); } 	0	0	0	0	1	0
"private void ItemTypeComboBoxItemStateChanged(ItemEvent evt) { DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>) ItemTypeComboBox.getModel(); String selectedItem = (String) model.getElementAt(ItemTypeComboBox.getSelectedIndex()); if (selectedItem.equalsIgnoreCase(""pack"")) { jPanel1.add(jLabel5); jPanel1.add(packIdField); } else { jPanel1.remove(jLabel5); jPanel1.remove(packIdField); } jPanel1.revalidate(); jPanel1.repaint(); } "	0	0	1	0	1	0
"private static Map<String, Set<String>> computeDups(FileSystemTargetRepository repository) throws Exception {  Map<String, Set<String>> contentHashMap = new HashMap<>(); Iterator<TargetModelJson> iterator = repository.iterator();  while(iterator.hasNext()) { TargetModelJson page = iterator.next();  List<String> contentTypeHeader = page.getResponseHeaders().get(""Content-Type""); if(contentTypeHeader == null) { contentTypeHeader = page.getResponseHeaders().get(""content-type""); }  if(contentTypeHeader == null || contentTypeHeader.size() == 0) { continue; }  String contentType = contentTypeHeader.iterator().next(); if(!contentType.contains(""text/html"")) { continue; }  HashMap<String, Object> crawlData = new HashMap<>(); crawlData.put(""response_headers"", page.getResponseHeaders());  String text = KeepEverythingExtractor.INSTANCE.getText(page.getResponseBody()); String contentHash = DigestUtils.md5Hex(text);  Set<String> dups = contentHashMap.get(contentHash); if(dups == null) { dups = new HashSet<>(); contentHashMap.put(contentHash, dups); }  dups.add(page.getUrl()); } return contentHashMap; } "	0	0	0	0	1	0
private void makeEndpoint() { if (endpoint != null) { endpoint.stop(); endpoint.clear(); endpoint = null; }  endpoint = new CoapEndpoint(); endpoint.setExecutor(getExecutorService());  for (CoapClient client : clients.values()) { client.setEndpoint(endpoint); } } 	0	0	0	0	1	0
"public CoapClient getClient(final String path) { if (!clients.containsKey(path)) { CoapClient client = new CoapClient(uri.resolve(path.replace("" "", ""%20""))); client.setExecutor(getExecutorService()); client.setEndpoint(endpoint); clients.put(path, client); } return clients.get(path); } "	0	0	0	0	1	0
"@Override public void onCancel() { if (dialog != null) { dialog.show(); ((TextView) dialog.findViewById(R.id.navigation_dialog_title)).setText(""Bevestig de markering""); } } "	0	0	0	0	1	0
public Collection getCourses() { return this.courses; } 	0	0	0	0	1	0
synchronized void removeUpdatable(@NonNull final Updatable updatable, @NonNull final Object token) { updatableObservable.removeKeyValuePair(updatable, token); } 	0	0	0	0	1	0
"public boolean checkDeleteSuccess() { boolean deleted = false;  logger.debug(""Checking for client existence""); do { try { WebElement el = driver.findElement(By.tagName(""h1"")); if (el.getText().equals(""Remote APIs"")) { logger.debug(""Succesfully loaded client list page""); waitForAjax(); logger.debug(""Table loaded""); List<WebElement> findElements = driver.findElements(By.className(""remoteApiCol"")); deleted = true; // check if the element is in the table for (WebElement ele : findElements) { if (ele.getText().equals(clientId)) { deleted = false; } } } } catch (StaleElementReferenceException e) { logger.debug(""Got stale element reference exception when trying to get text on h1, trying again.""); } } while (!deleted);   return deleted; } "	0	0	0	0	1	0
"void analyze(final MethodResult methodResult) { lock.lock(); try { buildPackagePrefix(methodResult.getParentResource().getOriginalClass());  final List<Instruction> visitedInstructions = interpretRelevantInstructions(methodResult.getInstructions());  // find project defined methods in invoke occurrences final Set<ProjectMethod> projectMethods = findProjectMethods(visitedInstructions);  // add project methods to global method pool projectMethods.stream().forEach(MethodPool.getInstance()::addProjectMethod);  Element returnedElement = methodSimulator.simulate(visitedInstructions); final String returnType = JavaUtils.getReturnType(methodResult.getOriginalMethodSignature());  // void resource methods are interpreted later; stop analyzing on error if (Types.PRIMITIVE_VOID.equals(returnType)) { return; }  if (returnedElement == null) { //                LogProvider.debug(""Non-void method, but no return element returned after analysis""); // happens for abstract methods return; //                returnedElement = new Element(returnType); }  final Set<Object> possibleObjects = returnedElement.getPossibleValues().stream().filter(o -> !(o instanceof HttpResponse)) .collect(Collectors.toSet());  // for non-Response methods add a default if there are non-Response objects or none objects at all if (!Types.RESPONSE.equals(returnType)) { final HttpResponse defaultResponse = new HttpResponse();  if (Types.OBJECT.equals(returnType)) defaultResponse.getEntityTypes().addAll(returnedElement.getTypes()); else defaultResponse.getEntityTypes().add(returnType);  possibleObjects.stream().filter(o -> o instanceof JsonValue).map(o -> (JsonValue) o).forEach(defaultResponse.getInlineEntities()::add);  methodResult.getResponses().add(defaultResponse); }  // add Response results as well returnedElement.getPossibleValues().stream().filter(o -> o instanceof HttpResponse).map(o -> (HttpResponse) o).forEach(methodResult.getResponses()::add); } finally { lock.unlock(); } } "	0	0	0	0	1	0
@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View rootView = inflater.inflate(R.layout.fragment_main, container, false);  int pageNr = getArguments().getInt(ARG_SECTION_NUMBER);  meetingListView = (ListView)  rootView.findViewById(R.id.list_meeting_days); ArrayList<MeetingDay> meetingDays = World.getInstance().getMeetings().get(pageNr).getMeetingDays(); meetingArrayAdapter = new MeetingListAdapter(getActivity(),R.layout.meeting_list_item,meetingDays); meetingListView.setAdapter(meetingArrayAdapter);  return rootView; } 	0	0	0	0	1	0
"public List<Integer> recursivelyGetSources(Integer pid){ List<Integer> prevPIds = prevMap.get(pid); System.out.println(""prevPIds = "" + prevPIds); if(prevPIds == null){  } else{ for(Integer prevPId: prevPIds){ if(listOfSourcePids.contains(prevPId) && !listOfSourcesForGivenPid.contains(prevPId)){ listOfSourcesForGivenPid.add(prevPId); System.out.println(""source pid = "" + prevPId); } recursivelyGetSources(prevPId); } } return listOfSourcesForGivenPid; } "	0	0	1	0	1	0
"@Override public void reportSelectedToView(Report report) { if (!report.isEnabled()) { return; } // TODO: figure out more robust file type handling - what does Android offer? // Start the detail activity for the selected report if (report.getPath().isDirectory()) { Intent detailIntent = new Intent(this, ReportDetailActivity.class); detailIntent.putExtra(""report"", report); startActivity(detailIntent); } else { File reportPath = report.getPath(); Uri reportUri = Uri.fromFile(reportPath); String contentType = getContentResolver().getType(reportUri); if (contentType == null) { String ext = MimeTypeMap.getFileExtensionFromUrl(reportUri.toString()); if (ext != null) { contentType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(ext); } } Intent viewContent = new Intent(Intent.ACTION_VIEW); viewContent.setDataAndType(reportUri, contentType); viewContent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY); if (viewContent.resolveActivity(getPackageManager()) != null) { startActivity(viewContent); } else { Toast.makeText(this, R.string.no_viewer_for_report, Toast.LENGTH_SHORT).show(); } } } "	0	0	0	0	1	0
"@MediumTest public void testWritesAndReadsToParcel() { Report r = new Report(); r.setDescription(""test parcelling""); r.setEnabled(true); r.setError(""none""); r.setId(""1234""); r.setLat(20.0); r.setLon(100.0); r.setPath(new File(Environment.getExternalStorageDirectory(), ""test/reports/test_report"")); r.setSourceFile(new File(Environment.getExternalStorageDirectory(), ""test/report.zip"")); r.setThumbnail(""thumbnail""); r.setTitle(""Test Report"");  Parcel parcel = Parcel.obtain(); r.writeToParcel(parcel, 0); parcel.setDataPosition(0); Report fromParcel = Report.CREATOR.createFromParcel(parcel);  assertThat(fromParcel.getDescription(), equalTo(r.getDescription())); assertThat(fromParcel.getError(), equalTo(r.getError())); assertThat(fromParcel.getFileExtension(), equalTo(r.getFileExtension())); assertThat(fromParcel.getSourceFileName(), equalTo(r.getSourceFileName())); assertThat(fromParcel.getId(), equalTo(r.getId())); assertThat(fromParcel.getLat(), equalTo(r.getLat())); assertThat(fromParcel.getLon(), equalTo(r.getLon())); assertThat(fromParcel.getPath(), equalTo(r.getPath())); assertThat(fromParcel.getSourceFile(), equalTo(r.getSourceFile())); assertThat(fromParcel.getThumbnail(), equalTo(r.getThumbnail())); assertThat(fromParcel.getTitle(), equalTo(r.getTitle())); } "	0	0	0	0	1	0
"private static boolean runAsRoot(final String command) { DataOutputStream outStr = null; try {  Process pro = Runtime.getRuntime().exec(""su""); outStr = new DataOutputStream(pro.getOutputStream());  outStr.writeBytes(command); outStr.writeBytes(""\nexit\n""); outStr.flush();  int retval = pro.waitFor();  return (retval == 0);  } catch (Exception ex) { Log.e(LOG_TAG, ""Unkown error during running as root."", ex); return false; } finally { try { if (outStr != null) { outStr.close(); } } catch (IOException e) { Log.e(LOG_TAG, ""Unkown error during closing output stream"", e); } } } "	0	0	1	0	1	0
"void calculateTimeRatio() { if(!(numAVs == 0)) { // get number of AVs with avTripStart.size() totalTimeRatio = totalTimeWithCust / (numAVs * 108000); } else System.out.println(""no AVs found while calculating the time ratio""); } "	0	0	0	0	1	0
"private String responseLine(int responseCode) { StringBuilder returnString = new StringBuilder(); returnString.append(""HTTP/1.1""); returnString.append("" ""); returnString.append(responseCode); returnString.append("" ""); returnString.append(responseLines.get(responseCode)); return returnString.toString(); } "	0	0	0	0	1	0
public static boolean shouldSaveClassName(final Object rawVal, final Object convertedVal, final MappedField mf) { if (rawVal == null || mf == null) { return true; } if (mf.isSingleValue()) { return !(mf.getType().equals(rawVal.getClass()) && !(convertedVal instanceof BasicDBList)); } return !(convertedVal != null && convertedVal instanceof DBObject && !mf.getSubClass().isInterface() && !Modifier.isAbstract(mf.getSubClass().getModifiers()) && mf.getSubClass().equals(rawVal.getClass())); } 	0	0	1	1	0	0
"@SuppressWarnings({""unchecked"", ""rawtypes"" }) @Test public void guiceJobFactory() throws Exception { Config conf = ConfigFactory.empty() .withValue(""org.quartz.jobStore.class"", ConfigValueFactory.fromAnyRef(""X"")); Properties props = new Properties(); props.setProperty(""org.quartz.jobStore.class"", ""X"");  Job job = ctx -> { };  new MockUnit(Injector.class, Scheduler.class, Map.class, TriggerFiredBundle.class) .expect(unit -> { Scheduler scheduler = unit.get(Scheduler.class);  scheduler.setJobFactory(unit.capture(JobFactory.class)); }) .expect(unit -> { Map triggers = unit.get(Map.class);  expect(triggers.entrySet()).andReturn(Collections.emptySet()); }) .expect(unit -> { Class jobClass = Job.class;  JobDetail jobDetail = unit.mock(JobDetail.class); expect(jobDetail.getJobClass()).andReturn(jobClass);  TriggerFiredBundle bundle = unit.get(TriggerFiredBundle.class); expect(bundle.getJobDetail()).andReturn(jobDetail);  Injector injector = unit.get(Injector.class); expect(injector.getInstance(jobClass)).andReturn(job); }) .expect(unit -> { Scheduler scheduler = unit.get(Scheduler.class);  StdSchedulerFactory factory = unit.mockConstructor(StdSchedulerFactory.class, new Class[]{Properties.class }, props); expect(factory.getScheduler()).andReturn(scheduler); }) .run( unit -> { new QuartzProvider(unit.get(Injector.class), conf, unit.get(Map.class)); }, unit -> { JobFactory factory = unit.captured(JobFactory.class).iterator().next(); Job newJob = factory.newJob(unit.get(TriggerFiredBundle.class), unit.get(Scheduler.class)); assertEquals(job, newJob); }); } "	0	0	1	0	1	0
@Transactional(readOnly = false) public ImmutablePair<Boolean, CardData> createFile(String name, String digest, long fileSize, int cardId, InputStream content, String contentType, User user, Date time) { if (!cardDataRepository.fileExists(digest)) { cardDataRepository.addUploadContent(digest, fileSize, content, contentType); } if (!cardDataRepository.isFileAvailableByCard(digest, cardId)) { CardData file = cardDataRepository.createData(cardId, CardType.FILE, digest); cardDataRepository.createUploadInfo(digest, name, name, file.getId()); eventRepository.insertFileEvent(file.getId(), cardId, EventType.FILE_UPLOAD, user.getId(), file.getId(), name, time); return ImmutablePair.of(true, file); } return ImmutablePair.of(false, null); } 	0	0	0	0	1	0
"private Flight readIgcFileBeanIO(Reader file, Flight f) throws AnalysisException, IOException { DateTimeFormatter df = DateTimeFormatter.ofPattern(""yyyy-MM-dd HH:mm:ss""); System.out.println(df.format(LocalDateTime.now()) + "" Parsing IGC"");  StreamFactory factory = StreamFactory.newInstance();  factory.load(""src/main/java/soaringcoach/analysis/igc_mapping.xml"");  BeanReader br = null; f.igc_points = new ArrayList<>();  try { try { br = factory.createReader(""igc_file"", file); GNSSPointData pt_data = null; Object bean = null;  while ((bean = br.read()) != null) { if (bean instanceof GNSSPointData) { pt_data = (GNSSPointData) bean;  GNSSPoint pt = GNSSPoint.createGNSSPoint(pt_data); if (pt != null) { f.igc_points.add(pt); } } else if (bean instanceof PICName) { f.pilot_name = ((PICName) bean).picName; } } } catch (BeanReaderException e) { throw new IOException(""Problem reading IGC Data"", e); } } finally { if (br != null) { br.close(); } }  System.out.println( df.format(LocalDateTime.now()) + "" File parsing completed"");  return f; } "	0	0	0	0	1	0
private void calcConvergents(){ //first one is always 1/a1 convergents.add(new int[]{1,coeff[1]}); for(int i=2; i<coeff.length-1; i++){ convergents.add(convergent(i)); } convergents.add(new int[]{x,y}); } 	0	0	0	0	1	0
"public <T> T configurate(Properties props, String propertyPrefix, Class<T> clazz) throws ProvisionException { verifyClazzIsConfigurable(clazz);  // Make it end with a period so we only include properties with sub-object thingies. final String propertyBase = propertyPrefix.endsWith(""."") ? propertyPrefix : propertyPrefix + ""."";  Map<String, Object> jsonMap = Maps.newHashMap(); for (String prop : props.stringPropertyNames()) { if (prop.startsWith(propertyBase)) { final String propValue = props.getProperty(prop); Object value; try { // If it's a String Jackson wants it to be quoted, so check if it's not an object or array and quote. String modifiedPropValue = propValue; if (! (modifiedPropValue.startsWith(""["") || modifiedPropValue.startsWith(""{""))) { modifiedPropValue = jsonMapper.writeValueAsString(propValue); } value = jsonMapper.readValue(modifiedPropValue, Object.class); } catch (IOException e) { log.info(e, ""Unable to parse [%s]=[%s] as a json object, using as is."", prop, propValue); value = propValue; }  jsonMap.put(prop.substring(propertyBase.length()), value); } }  final T config; try { config = jsonMapper.convertValue(jsonMap, clazz); } catch (IllegalArgumentException e) { throw new ProvisionException( String.format(""Problem parsing object at prefix[%s]: %s."", propertyPrefix, e.getMessage()), e ); }  final Set<ConstraintViolation<T>> violations = validator.validate(config); if (!violations.isEmpty()) { List<String> messages = Lists.newArrayList();  for (ConstraintViolation<T> violation : violations) { String path = """"; try { Class<?> beanClazz = violation.getRootBeanClass(); final Iterator<Path.Node> iter = violation.getPropertyPath().iterator(); while (iter.hasNext()) { Path.Node next = iter.next(); if (next.getKind() == ElementKind.PROPERTY) { final String fieldName = next.getName(); final Field theField = beanClazz.getDeclaredField(fieldName);  if (theField.getAnnotation(JacksonInject.class) != null) { path = String.format("" -- Injected field[%s] not bound!?"", fieldName); break; }  JsonProperty annotation = theField.getAnnotation(JsonProperty.class); final boolean noAnnotationValue = annotation == null || Strings.isNullOrEmpty(annotation.value()); final String pathPart = noAnnotationValue ? fieldName : annotation.value(); if (path.isEmpty()) { path += pathPart; } else { path += ""."" + pathPart; } } } } catch (NoSuchFieldException e) { throw Throwables.propagate(e); }  messages.add(String.format(""%s - %s"", path, violation.getMessage())); }  throw new ProvisionException( Iterables.transform( messages, new Function<String, Message>() { @Override public Message apply(String input) { return new Message(String.format(""%s%s"", propertyBase, input)); } } ) ); }  log.info(""Loaded class[%s] from props[%s] as [%s]"", clazz, propertyBase, config);  return config; } "	1	0	0	0	0	0
@MediumTest public void testReadBySongPathExist(){ _db.insertSong(_song);  Song song = _db.getSongByPath(_song.getUri()); assertTrue(song != null);  assertEquals(_song, song); } 	0	0	1	0	1	0
public static DateTimeServer getInstanceBasedOnUserTimeZone(final long userTimeZoneInMillis) { DateTime userTimeZoneFromMillis = new DateTime(userTimeZoneInMillis); userTimeZoneFromMillis = userTimeZoneFromMillis.withZoneRetainFields(TimetrackerUtil.getLoggedUserTimeZone()); DateTimeServer dateTimeServer = new DateTimeServer(); dateTimeServer.setUserTimeZone(userTimeZoneFromMillis); return dateTimeServer; } 	0	0	0	0	1	0
"public void setNavigationDrawer() { final Activity self = this;  TextView navIndex = (TextView) findViewById(R.id.sidebar_index); if(null != navIndex){ navIndex.setVisibility(View.VISIBLE); navIndex.setOnClickListener(new View.OnClickListener() { public void onClick(View view){ displayForumIndex(); mDrawerLayout.closeDrawers(); } }); navIndex.setText(""The SA Forums""); }  TextView navForum = (TextView) findViewById(R.id.sidebar_forum); if(null != navForum){ if(mNavForumId != 0) { navForum.setVisibility(View.VISIBLE); navForum.setOnClickListener(new View.OnClickListener() { public void onClick(View view){ displayForum(mNavForumId, 1); mDrawerLayout.closeDrawers(); } }); navForum.setText(StringProvider.getForumName(this, mNavForumId)); }else{ navForum.setVisibility(View.GONE); } }  TextView navThread = (TextView) findViewById(R.id.sidebar_thread); if(null != navThread){ if(mNavThreadId != 0) { Log.d(TAG,""NavThread, Navforum: ""+ mNavThreadId+"" ""+mNavForumId); navThread.setVisibility(View.VISIBLE); navThread.setOnClickListener(new View.OnClickListener() { public void onClick(View view) { displayThread(mNavThreadId, mThreadPage, mNavForumId, mForumPage,false);  mDrawerLayout.closeDrawers(); } }); navThread.setText(StringProvider.getThreadName(this, mNavThreadId)); }else{ navThread.setVisibility(View.GONE); } }  mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);  mDrawerToggle = new ActionBarDrawerToggle( this,                  /* host Activity */ mDrawerLayout,         /* DrawerLayout object */ mToolbar,  /* nav drawer icon to replace 'Up' caret */ R.string.drawer_open,  /* ""open drawer"" description */ R.string.drawer_close  /* ""close drawer"" description */ ); mDrawerLayout.setDrawerListener(mDrawerToggle);  TextView username = (TextView) findViewById(R.id.sidebar_username); if(null != username){ username.setText(mPrefs.username); } ImageView avatar = (ImageView) findViewById(R.id.sidebar_avatar); if(null != avatar){ AQuery aq = new AQuery(this); if(null != mPrefs.userTitle) { if("""" != mPrefs.userTitle){ aq.id(R.id.sidebar_avatar).image(mPrefs.userTitle); }else{ aq.id(R.id.sidebar_avatar).image(R.drawable.icon); } } } TextView logout = (TextView) findViewById(R.id.sidebar_logout); if(null != logout){ logout.setOnClickListener(new View.OnClickListener() { public void onClick(View view){ mDrawerLayout.closeDrawers(); new LogOutDialog(self).show(); } }); logout.setText(getResources().getText(R.string.logout)); logout.setVisibility(View.VISIBLE); } TextView messages = (TextView) findViewById(R.id.sidebar_pm); if(null != messages){ messages.setEnabled(mPrefs.hasPlatinum); messages.setVisibility(mPrefs.hasPlatinum?View.VISIBLE:View.GONE); messages.setOnClickListener(new View.OnClickListener() { public void onClick(View view){ mDrawerLayout.closeDrawers(); startActivity(new Intent().setClass(self, PrivateMessageActivity.class)); } }); messages.setText(getResources().getText(R.string.private_message)); } TextView bookmarks = (TextView) findViewById(R.id.sidebar_bookmarks); if(null != bookmarks){ bookmarks.setOnClickListener(new View.OnClickListener() { public void onClick(View view){ mDrawerLayout.closeDrawers(); startActivity(new Intent().setClass(self, ForumsIndexActivity.class) .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP) .putExtra(Constants.FORUM_ID, Constants.USERCP_ID) .putExtra(Constants.FORUM_PAGE, 1)); } }); bookmarks.setText(getResources().getText(R.string.user_cp)); bookmarks.setVisibility((Constants.USERCP_ID == mNavForumId?View.GONE:View.VISIBLE)); } TextView settings = (TextView) findViewById(R.id.sidebar_settings); if(null != settings){ settings.setOnClickListener(new View.OnClickListener() { public void onClick(View view){ mDrawerLayout.closeDrawers(); startActivity(new Intent().setClass(self, SettingsActivity.class)); } }); } settings.setText(getResources().getText(R.string.settings)); settings.setVisibility(View.VISIBLE);   mDrawerToggle.syncState(); } "	0	0	1	0	0	0
"public JSONArray listTmpSubmissions(String sessionId) throws IOException, BioStudiesClientException { logger.debug(""listTmpSubmissions(sessionId={})"", sessionId); return parseJSONArray(get(composeUrl(""/userdata/listjson""), SESSION_PARAM, sessionId)); } "	0	0	0	0	1	0
"@Timed @ExceptionMetered @GET public SecretDeliveryResponse getSecret(@NotEmpty @PathParam(""secretName"") String secretName, @Auth Client client) { Optional<SanitizedSecret> sanitizedSecret = aclDAO.getSanitizedSecretFor(client, secretName); Optional<Secret> secret = secretController.getSecretByName(secretName);  if (!sanitizedSecret.isPresent()) { boolean clientExists = clientDAO.getClient(client.getName()).isPresent(); boolean secretExists = secret.isPresent();  if (clientExists && secretExists) { throw new ForbiddenException(format(""Access denied: %s at '%s' by '%s'"", client.getName(), ""/secret/"" + secretName, client)); } else { if (clientExists) { logger.info(""Client {} requested unknown secret {}"", client.getName(), secretName); } throw new NotFoundException(); } }  logger.info(""Client {} granted access to {}."", client.getName(), secretName); try { return SecretDeliveryResponse.fromSecret(secret.get()); } catch (IllegalArgumentException e) { logger.error(""Failed creating response for secret {}: {}"", secretName, e); throw new InternalServerErrorException(); } } "	0	0	0	0	1	0
"@Override public String createPolicyForResources(String policyName, final List<String> resources, List<String> userList, String groupName, List<String> permissions) { String historyPath = ""/"" + policyName.split(""_"")[0] + ""_history""; // Temp fix: for 'create instance in tenant' case, // create one ranger policy for multiple user and multiple /user/<userName> dirs // Please refer to: https://github.com/OCManager/OCDP_ServiceBroker/issues/48 List <String> hdfsFolderForJobExec = new ArrayList<String>(){ { add(historyPath); //add dummy path to avoid ranger error of existing resource path add(""/tmp/dummy_"" + UUID.randomUUID().toString()); } }; for (String userName : userList) { hdfsFolderForJobExec.add(""/user/"" + userName); createHdfsPath(""/user/"" + userName); } String hdfsPolicyId = this.hdfsAdminService.createPolicyForResources( policyName, hdfsFolderForJobExec, userList, groupName, null); if ( hdfsPolicyId != null){ logger.info(""Assign permissions for folder "" + hdfsFolderForJobExec.toString()  + "" with policy id "" + hdfsPolicyId); }  String resource = resources.get(0); String yarnPolicyId = this.yarnCommonService.assignPermissionToQueue(policyName, resource, userList, groupName, null); if ( yarnPolicyId != null){ logger.info(""Assign permissions for folder "" + resource  + "" with policy id "" + yarnPolicyId); } // return policy ids if both yarn policy and hdfs policy create successfully return ( hdfsPolicyId != null && yarnPolicyId != null) ? hdfsPolicyId + "":"" + yarnPolicyId : null; } "	0	0	1	0	1	0
public MapBuilder<K, V> setListener(MapCallback<K,V> callback, Predicate<K, V> filter) { this.callback = callback; this.callbackFilter = filter; return this; } 	0	0	0	1	0	0
"@Override public void removeProperties(Properties properties) { try { ComponentProperties componentProperties = getComponentProperties();  ClassLoaderAggregateProperties classLoaderAggregateProperties = (ClassLoaderAggregateProperties) componentProperties.toConfiguration();  CompositeConfiguration compositeConfiguration = classLoaderAggregateProperties.getBaseConfiguration();  Field field2 = CompositeConfiguration.class.getDeclaredField( ""configList"");  field2.setAccessible(true);  @SuppressWarnings(""unchecked"") List<Configuration> configurations = (List<Configuration>)field2.get(compositeConfiguration);  Iterator<Configuration> itr = configurations.iterator();  while (itr.hasNext()) { Configuration configuration = itr.next();  if (!(configuration instanceof MapConfiguration)) { break; }  MapConfiguration mapConfiguration = (MapConfiguration)configuration;  if (mapConfiguration.getMap() == properties) { itr.remove();  classLoaderAggregateProperties.removeConfiguration( configuration); } }  _properties = null;  clearCache(); } catch (Exception e) { _log.error(""The properties could not be removed"", e); } } "	0	0	0	0	1	0
"@Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { Object app = req.getAttribute(Geoladris.ATTR_APP); String regexPrefix = ""^"" + getServletContext().getContextPath(); if (app != null) { regexPrefix += ""/"" + app; }  String uri = req.getRequestURI(); if (uri.matches(regexPrefix + ""/$"")) { index.doGet(req, resp); } else if (uri.matches(regexPrefix + ""/config.js$"")) { config.doGet(req, resp); } else if (uri.matches(regexPrefix + ""/modules/main.js$"")) { main.doGet(req, resp); } else if (uri.matches(regexPrefix + ""/(static|jslib|modules|styles|theme)/.*"")) { clientContent.doGet(req, resp); } else { resp.sendError(HttpServletResponse.SC_NOT_FOUND); } } "	0	0	0	0	1	0
"private void updateHeader(int headerPosition, boolean updateHeaderContent) { // Check if there is a new header should be sticky if (mHeaderPosition != headerPosition) { mHeaderPosition = headerPosition; RecyclerView.ViewHolder holder = getHeaderViewHolder(headerPosition); if (mStickyHeaderViewHolder != holder) { if (FlexibleAdapter.DEBUG) Log.v(TAG, ""swapHeader newPosition="" + headerPosition); swapHeader(holder); } } else if (updateHeaderContent && mStickyHeaderViewHolder != null) { mAdapter.onBindViewHolder(mStickyHeaderViewHolder, mHeaderPosition); ensureHeaderParent(); } translateHeader(); } "	0	0	1	0	1	0
"private CompiledCode compileFrom(String inputFileName) throws Exception { Objects.requireNonNull(inputFileName);  notifyInfo(getTitle() + "", version "" + getVersion()); parser.setCompiler(this);  Object parsedProgram; CompiledCode compiledProgram = new CompiledCode();  try (Reader reader = new FileReader(inputFileName)) { lexer.reset(reader, 0, 0, 0); parsedProgram = parser.parse().value;  if (parsedProgram == null) { notifyError(""Unexpected end of file""); throw new Exception(""Unexpected end of file""); } if (parser.errorCount != 0) { throw new Exception(""Program has errors""); }  // do several passes for compiling Program program = (Program) parsedProgram; program.pass1(0); program.pass2(compiledProgram);  notifyInfo(""Compile was successful.""); if (memory != null) { //destroy memory context's content (labels, inputs, memory) before loading new program memory.destroy(); compiledProgram.loadIntoMemory(memory); notifyInfo(""Compiled file was loaded into operating memory.""); } } return compiledProgram; } "	0	0	0	0	1	0
public void reset() { CatalogConfiguration c = GeoServerExtensions.bean(CatalogConfiguration.class); if (c != null) { c.reset(); } } 	0	0	1	0	0	0
"@Override public void onClick(View v) { //TODO: feed intent Intent intent = new Intent(context,FeedActivity.class); intent.putExtra(""ID"",getPosition()); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);   } "	0	0	0	0	1	0
private void setOnline(boolean status) { if(this.online != status) { this.online = status; updateApplicationState(onReconnection); } } 	0	0	0	0	1	0
"public static String parse(Character playerOne, String input) { String[] splitStrings = input.split("" ""); String r = ""test"";  if (splitStrings[0].equals(""exit"")) { System.exit(0); r = ""Exiting the game... Goodbye!""; } else if (splitStrings[0].equals(""move"")) { r = playerOne.move(splitStrings[1]); }  else if (splitStrings[0].equals(""get"")) { r = playerOne.addItem(splitStrings[1]); } else if (splitStrings[0].equals(""drop"")) { r = playerOne.removeItem(splitStrings[1]); } else { r = ""Oops! I don't know what you're trying to say!""; } return r; } "	0	0	0	0	1	0
public RoundedColorDrawable addStateColor(int[] stateSet, int color){ return addStateColor(stateSet, color, 0); } 	0	0	0	0	1	0
public WebDriver getDriver() { super.setImplicitTimeout(10, TimeUnit.SECONDS); return super.getDriver(); } 	0	0	1	0	1	0
public void hideMaster() { final View masterFrame = getView().findViewById(R.id.master_detail_container_master);  if (shouldMasterToggle() && masterFrame.getVisibility() == View.VISIBLE) { Animation anim = AnimationUtils.loadAnimation(getContext(), R.anim.fade_out); anim.setAnimationListener(new AnimationEndListener() { @Override public void onAnimationEnd(Animation animation) { masterFrame.setVisibility(View.GONE); } }); masterFrame.startAnimation(anim); } } 	0	0	1	0	1	0
"public void shutdown() { log.info(""Shutting down "" + Aradiabot.NAME + "" ...""); /* Disable all loaded plugins */ this.stopBotReconnect(); this.shutdown(true); System.exit(IRC.EXIT_SUCCESS); } "	0	0	0	0	1	0
"public void addDownloadMission(DownloadMission mission) { String url = mission.getUrl(); if (mWaitingForDownloadLookUpMap.get(url) != null || mNowDownloading.get(url) != null) { throw new IllegalArgumentException(""This download mission is exists.""); } else { if (mDataBaseHelper.recordNotExists(url)) { mDataBaseHelper.insertRecord(mission); createAndGet(url).onNext(mEventFactory.factory(url, DownloadFlag.WAITING, null)); } else { mDataBaseHelper.updateRecord(url, DownloadFlag.WAITING); createAndGet(url).onNext(mEventFactory.factory(url, DownloadFlag.WAITING, mDataBaseHelper.readStatus(url))); } mWaitingForDownload.offer(mission); mWaitingForDownloadLookUpMap.put(url, mission); } } "	0	0	0	0	1	0
"private void addMissingResSpecs() throws AndrolibException { int resId = mResId & 0xffff0000;  for (int i = 0; i < mMissingResSpecs.length; i++) { if (!mMissingResSpecs[i]) { continue; }  ResResSpec spec = new ResResSpec(new ResID(resId | i), String.format(""APKTOOL_DUMMY_%04x"", i), mPkg, mTypeSpec);  // If we already have this resID dont add it again. if (! mPkg.hasResSpec(new ResID(resId | i))) { mPkg.addResSpec(spec); mTypeSpec.addResSpec(spec);  if (mType == null) { mType = mPkg.getOrCreateConfig(new ResConfigFlags()); }  ResValue value = new ResBoolValue(false, 0, null); ResResource res = new ResResource(mType, spec, value);  mPkg.addResource(res); mType.addResource(res); spec.addResource(res); } } } "	0	0	0	0	1	0
"public static void main( String[] args ) {  Problem curProb = new PE0011(); String result = curProb.getResult();  IO.info( ""result for problem #"" + curProb ); IO.info( "" is '"" + result + ""'"" ); IO.infoln( "" found in "" + curProb.getRuntime( 2 ) + "" ms"" );  } "	0	0	1	0	1	0
"@Override public E onSend() throws BoxException { BoxRequest.BoxRequestHandler requestHandler = getRequestHandler(); BoxHttpResponse response = null; try { // Create the HTTP request and send it BoxHttpRequest request = createHttpRequest();  response = new BoxHttpResponse(request.getUrlConnection()); response.open(); logDebug(response);  // Process the response through the provided handler if (requestHandler.isResponseSuccess(response)) { BoxIterator list = (BoxIterator) requestHandler.onResponse(BoxIterator.class, response); return (E)list.get(0); }  // All non successes will throw int code = response.getResponseCode(); throw new BoxException(String.format(Locale.ENGLISH, ""An error occurred while sending the request (%s)"", code), response); } catch (IOException e) { throw handleSendException(requestHandler, response, e); } catch (InstantiationException e) { throw handleSendException(requestHandler, response, e); } catch (IllegalAccessException e) { throw handleSendException(requestHandler, response, e); } catch (BoxException e) { throw handleSendException(requestHandler, response, e); } } "	0	0	0	0	1	0
private SyntaxToken createPredicate(SyntaxToken verbToken, IToken objectToken) {  int startPosition = Math.min(verbToken.getStartPosition(), objectToken.getStartPosition()); int endPosition = Math.max(verbToken.getEndPosition(), objectToken.getEndPosition());  SyntaxToken predicateToken = new SyntaxToken(IToken.TOKEN_TYPE_VERB_NOUN, verbToken, null, startPosition, endPosition); predicateToken.setId(getTokenIdProvider().getVacantId()); predicateToken.addChild(verbToken); predicateToken.addChild(objectToken); verbToken.addParent(predicateToken); objectToken.addParent(predicateToken);  return predicateToken; } 	0	0	0	0	1	0
@Override public void onStart() { // Setup the board and start a new game to create the board. super.onStart(); FabManager.game.setMenu(CHESS_FAM_KEY, getChessMenu());  grid = (GridLayout) mLayout.findViewById(board);  // Color the Player Icons. ImageView playerOneIcon = (ImageView) mLayout.findViewById(R.id.player_1_icon); playerOneIcon.setColorFilter(ContextCompat.getColor(getContext(), R.color.colorPrimary), PorterDuff.Mode.SRC_ATOP);  ImageView playerTwoIcon = (ImageView) mLayout.findViewById(R.id.player_2_icon); playerTwoIcon.setColorFilter(ContextCompat.getColor(getContext(), R.color.colorAccent), PorterDuff.Mode.SRC_ATOP); } 	0	0	0	0	1	0
"@Test public void deletePage_withValidParameters_sendsDeleteRequest() throws Exception { // arrange CloseableHttpClient httpClientMock = recordHttpClientForSingleJsonAndStatusCodeResponse("""", 204); ConfluenceRestClient confluenceRestClient = new ConfluenceRestClient(CONFLUENCE_ROOT_URL, httpClientMock, null, null);  // act confluenceRestClient.deletePage(""1234"");  // assert verify(httpClientMock, times(1)).execute(any(HttpDelete.class), any(HttpContext.class)); } "	0	0	0	0	1	0
"@Test public void getAttachmentByFileName_withValidParameters_sendsHttpGetRequestAndReturnsConfluenceAttachment() throws Exception { // arrange String jsonAttachment = ""{\""id\"": \""att12\"", \""title\"": \""Attachment.txt\"", \""_links\"": {\""download\"": \""/download/Attachment.txt\""}, \""version\"": {\""number\"": 1}}""; CloseableHttpClient httpClientMock = recordHttpClientForSingleJsonAndStatusCodeResponse(""{\""results\"": ["" + jsonAttachment + ""], \""size\"": 1}"", 200); ConfluenceRestClient confluenceRestClient = new ConfluenceRestClient(CONFLUENCE_ROOT_URL, httpClientMock, null, null);  // act ConfluenceAttachment confluenceAttachment = confluenceRestClient.getAttachmentByFileName(""1234"", ""file.txt"");  // assert assertThat(confluenceAttachment.getId(), is(""att12"")); assertThat(confluenceAttachment.getTitle(), is(""Attachment.txt"")); assertThat(confluenceAttachment.getRelativeDownloadLink(), is(""/download/Attachment.txt"")); assertThat(confluenceAttachment.getVersion(), is(1)); } "	0	0	0	0	1	0
"@Test public void getPropertyByKey_withValidParameters_sendsGetRequestForPropertyRetrieval() throws Exception { // arrange CloseableHttpClient httpClientMock = recordHttpClientForSingleJsonAndStatusCodeResponse(""{\""value\"": \""hash-value\""}"", 200); ConfluenceRestClient confluenceRestClient = new ConfluenceRestClient(CONFLUENCE_ROOT_URL, httpClientMock, null, null);  // act String propertyValue = confluenceRestClient.getPropertyByKey(""1234"", ""content-hash"");  // assert assertThat(propertyValue, is(""hash-value"")); verify(httpClientMock, times(1)).execute(any(HttpGet.class), any(HttpContext.class)); } "	0	0	0	0	1	0
"@Test public void getPageByTitle_withValidParameters_sendsGetRequestAndReturnsFirstResultId() throws Exception { // arrange String expectedContentId = ""1234""; CloseableHttpClient httpClientMock = recordHttpClientForSingleJsonAndStatusCodeResponse(""{\""results\"": [{\""id\"":\"""" + expectedContentId + ""\""}], \""size\"": 1}"", 200); ConfluenceRestClient confluenceRestClient = new ConfluenceRestClient(CONFLUENCE_ROOT_URL, httpClientMock, null, null);  // act String contentId = confluenceRestClient.getPageByTitle(""~personalSpace"", ""Some title"");  // assert assertThat(contentId, is(expectedContentId)); } "	0	0	0	0	1	0
"@Test public void attachmentExistsByFileName_withNonExistingContentId_returnsFalse() throws Exception { // arrange CloseableHttpClient httpClientMock = recordHttpClientForSingleJsonAndStatusCodeResponse("""", 404); ConfluenceRestClient confluenceRestClient = new ConfluenceRestClient(CONFLUENCE_ROOT_URL, httpClientMock, null, null);  // act boolean attachmentExistsByFileName = confluenceRestClient.attachmentExistsByFileName(""abc"", ""file.txt"");  // assert assertThat(attachmentExistsByFileName, is(false)); } "	0	0	0	0	1	0
private void parseCsv(String fileName) { List<ICollection> collections = new CsvParser().parse(fileName); _store.addAll(collections); changed(); } 	0	0	0	0	1	0
"public void createNewExpScript(){ CRTLogger.out(""Create new script"", CRTLogger.LEVEL_PROD); String vpId = AjaxController.getInstance().getRequestParamByKey(""vp_id""); String lang = AjaxController.getInstance().getRequestParamByKey(""vp_lang""); if(lang==null || lang.isEmpty()) lang = ""en""; PatientIllnessScript patillscript = new PatientIllnessScript(userId, vpId, new Locale(lang), 2); int maxStage = AjaxController.getInstance().getIntRequestParamByKey(""maxstage"", -1); int maxddxstage = AjaxController.getInstance().getIntRequestParamByKey(""maxddxstage"", -1); patillscript.iniExpertScript(maxStage, maxddxstage); new DBClinReason().saveAndCommit(patillscript); String vpName = AjaxController.getInstance().getRequestParamByKey(""vp_name"");  VPScriptRef ref= new VPScriptRef(patillscript.getVpId(), vpName, 2, vpId); new DBClinReason().saveAndCommit(ref); addExpertScript(patillscript); CRTLogger.out(""Create new script: id= "" + patillscript.getId(), CRTLogger.LEVEL_PROD);  } "	0	0	0	0	1	0
@SubscribeEvent(priority = EventPriority.HIGHEST) public void protectedBreak(PlayerInteractEvent.LeftClickBlock e) { Block brokeBlock = e.getWorld().getBlockState(e.getPos()).getBlock();  //Invincible Machines if (ModConfig.invincibleVendSell) { cancelEventChange: if (brokeBlock == ModBlocks.blockVending || brokeBlock == ModBlocks.blockATM) { IOwnable tile = (IOwnable) e.getWorld().getTileEntity(e.getPos()); if ((!e.getEntityPlayer().getUniqueID().toString().equals(tile.getOwner())) && !e.getEntityPlayer().isCreative()) {     //If not Owner (and not in creative) Can't Break e.setCanceled(true); } } } } 	0	0	0	0	1	0
@Override public void onLoadingStarted(String imageUri, View view) { ans.imageState = Choice.LoadState.LOADING; } 	0	0	0	0	1	0
"@Override public Bundle addAccount(AccountAuthenticatorResponse response, String accountType, String authTokenType, String[] requiredFeatures, Bundle options) throws NetworkErrorException { Log.d(TAG, ""addAccount()""); final Intent intent = new Intent(mContext, SetupSyncActivity.class); intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response); intent.putExtra(""accountType"", Constants.ACCOUNTTYPE_SYNC);  final Bundle result = new Bundle(); result.putParcelable(AccountManager.KEY_INTENT, intent);  return result; } "	0	0	0	0	1	0
"@Override public String getAuthTokenLabel(String authTokenType) { Log.d(TAG, ""getAuthTokenLabel()""); return null; } "	0	0	0	0	1	0
"@Override public Bundle updateCredentials(AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options) throws NetworkErrorException { Log.d(TAG, ""updateCredentials()""); return null; } "	0	0	0	0	1	0
"@Override public Bundle confirmCredentials(AccountAuthenticatorResponse response, Account account, Bundle options) throws NetworkErrorException { Log.d(TAG, ""confirmCredentials()""); return null; } "	0	0	0	0	1	0
"public void wipe() { Log.i(""wipe"", ""wiping: "" + getUri()); String where = BrowserContract.SyncColumns.GUID + "" NOT IN ('mobile')""; context.getContentResolver().delete(getUri(), where, null); } "	0	0	0	0	1	0
public Stream<Answer> answerStream(Set<ReasonerAtomicQuery> subGoals, Cache<ReasonerAtomicQuery, ?> cache, Cache<ReasonerAtomicQuery, ?> dCache, boolean materialise, boolean explanation, boolean differentialJoin){ boolean queryAdmissible = !subGoals.contains(this);  Stream<Answer> answerStream = cache.contains(this) ? Stream.empty() : dCache.record(this, lookup(cache)); if(queryAdmissible) { Set<InferenceRule> rules = getAtom().getApplicableRules(); for (InferenceRule rule : rules) { Stream<Answer> localStream = resolveViaRule(rule, subGoals, cache, dCache, materialise, explanation, differentialJoin); answerStream = Stream.concat(answerStream, localStream); } }  return dCache.record(this, answerStream); } 	0	0	1	1	0	0
@Override public void unSelect(boolean setActiveColor, int animationDuration) { labelView.animate().scaleX(1).scaleY(1).setDuration(animationDuration).start(); //        labelView.setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources().getDimension(R.dimen.classic_label_inactive)); super.unSelect(setActiveColor, animationDuration); } 	0	0	0	0	1	0
@Before public void setup() { MockitoAnnotations.initMocks(this); controller.setTestObjectRepository(testObjectRepository); mockMvc = MockMvcBuilders.standaloneSetup(controller).build(); } 	0	0	0	0	1	0
"@Override @SuppressWarnings(""unchecked"") public Collection<Community> getUserCommunities(int userId) { EntityTransaction etx = null; try{ etx = dbService.getEntitymanager().getTransaction(); etx.begin(); List<Community> clist = dbService.getEntitymanager().createQuery(""SELECT c FROM Community c where c.user.userId=""+userId).getResultList(); etx.commit(); return clist; } catch(Exception e){ e.printStackTrace(); if(etx!=null) etx.rollback(); return null; } } "	0	0	0	0	1	0
"@Test(groups=""1s"", timeOut=6000000, dataProvider = ""decomp"") public void testDec2(boolean decomp, int size) { Model m = new Model(); m.set(new Settings() { @Override public boolean enableDecompositionOfBooleanSum() { return decomp; } }); BoolVar row[] = m.boolVarArray(""r"", size); BoolVar b = m.boolVar(); m.sum(row, ""<"", 10).reifyWith(b); m.getSolver().setSearch(Search.inputOrderLBSearch(row), Search.inputOrderLBSearch(b)); m.getSolver().findAllSolutions(); m.getSolver().printShortStatistics(); } "	0	0	0	0	1	0
"@SuppressWarnings({""Since15""}) @IgnoreJRERequirement public void acceptRemoteSubmission(final Reader in) throws IOException { final long[] duration = new long[1]; execute(new RunExecution() { private String elementText(XMLStreamReader r) throws XMLStreamException { StringBuilder buf = new StringBuilder(); while(true) { int type = r.next(); if(type== CHARACTERS || type== CDATA) buf.append(r.getTextCharacters(), r.getTextStart(), r.getTextLength()); else return buf.toString(); } }  public Result run(BuildListener listener) throws Exception { PrintStream logger = new PrintStream(new DecodingStream(listener.getLogger()), false, ""UTF-8"");  XMLInputFactory xif = XMLInputFactory.newInstance(); XMLStreamReader p = xif.createXMLStreamReader(in);  p.nextTag();    // get to the <run> p.nextTag();    // get to the <log>  setCharset(p.getAttributeValue(null,""content-encoding"")); while(p.next()!= END_ELEMENT) { int type = p.getEventType(); if(type== CHARACTERS || type== CDATA) logger.print(p.getText()); } p.nextTag(); // get to <result>    Result r = Integer.parseInt(elementText(p))==0?Result.SUCCESS:Result.FAILURE;  do { p.nextTag(); if(p.getEventType()== START_ELEMENT){ if(p.getLocalName().equals(""duration"")) { duration[0] = Long.parseLong(elementText(p)); } else if(p.getLocalName().equals(""displayName"")) { setDisplayName(p.getElementText()); } else if(p.getLocalName().equals(""description"")) { setDescription(p.getElementText()); } } } while(!(p.getEventType() == END_ELEMENT && p.getLocalName().equals(""run"")));  return r; }  public void post(BuildListener listener) { // do nothing }  public void cleanUp(BuildListener listener) { // do nothing } });  if(duration[0]!=0) { super.duration = duration[0]; // save the updated duration save(); } } "	0	0	0	0	1	0
private void actuallyAddDirectConnection() { if ((null != directConnection) && (directConnection.isActive())) { // There is already an active direct connection, so ignore this } else { directConnection = new RespokeDirectConnection(this); endpoint.setDirectConnection(directConnection);  new Handler(Looper.getMainLooper()).post(new Runnable() { public void run() { if (null != listenerReference) { Listener listener = listenerReference.get(); if (null != listener) { listener.directConnectionAvailable(directConnection, endpoint); } } } });  if ((null != directConnection) && !caller && (null != signalingChannel)) { RespokeSignalingChannel.Listener signalingChannelListener = signalingChannel.GetListener(); if (null != signalingChannelListener) { // Inform the client that a remote endpoint is attempting to open a direct connection signalingChannelListener.directConnectionAvailable(directConnection, endpoint); } } } } 	0	0	1	0	1	0
"public void execute() throws InterruptedException {  //Get or Create this user account, when created it will be the system admin user = verifyUser();  //reset the users password to test that user.setPassword(UUID.randomUUID().toString());   if (user != null) { o(""Continuing with user: "" + user.getEmail() + "" "" + user.getUUID());  createRegularUsers(); createPoints(); recordSeriesData(); } else { o(""User was null! Exiting Test""); }  o(""Done!""); } "	0	0	0	0	1	0
@TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override protected void onCreate(Bundle savedInstanceState) {  super.onCreate(savedInstanceState); cursor = readDB();  String[] columns = {dbConstants.myConstants.FOOD, dbConstants.myConstants.PRICE}; int[] to = {R.id.foodName, R.id.foodPrice}; SimpleCursorAdapter listAdapter = new SimpleCursorAdapter(this, R.layout.food_info, cursor, columns, to, 0);  swipeAdapter = new SwipeActionAdapter(listAdapter); swipeAdapter.setListView(getListView()) .setSwipeActionListener(this) .setDimBackgrounds(true);  setListAdapter(swipeAdapter);  //just for testing purposes swipeAdapter.addBackground(SwipeDirections.DIRECTION_FAR_RIGHT,R.layout.row_bg) .addBackground(SwipeDirections.DIRECTION_NORMAL_RIGHT, R.layout.row_bg);  AddFoodFragment.getTotal(dbRead); } 	1	1	1	0	0	0
"private ParsedRoute parse(final Router.RouteDocumentation rd) { final ParsedRoute parsedRoute = new ParsedRoute(); parsedRoute.setRouteDocumentation(rd); if (countMatches(rd.getControllerMethodInvocation(), '@') == 2) { final String s = StringUtils.removeStart(rd.getControllerMethodInvocation(), ""@""); final String controllerClassName = s.substring(0, s.indexOf(""@"")); try { final Class<?> clazz = Class.forName(controllerClassName); parsedRoute.setControllerClass(clazz); } catch (ClassNotFoundException e) { throw new CompletionException(e); } } return parsedRoute; } "	0	0	0	0	1	0
@Override public void createModel(DBContext dbContext, String modelName) { dataModel = Model.CreateModel(dbContext, modelName); } 	0	0	0	0	1	0
public boolean tryLockWrite(final Object consumer) { boolean success = writeLock.tryLock(); if (success) { writeLockConsumer = consumer; writeLockTimeout.start(); } return success; } 	0	0	0	0	1	0
@Override public void saveLog(AXBootErrorLog axBootErrorLog) { ErrorLog errorLog = ModelMapperUtils.map(axBootErrorLog, ErrorLog.class); saveLog(errorLog); } 	0	0	0	0	1	0
"@Test public void firstCharCannotBeNine() { IDNumber id = new IDNumber(""9123123123132""); Assert.assertEquals(Status.NOT_NINE, id.getStatus()); } "	0	0	0	0	1	0
private void extractAndCheckRememberMeToken(HttpServletRequest request) { String rememberMeCookieValue = rememberMeCookieDecoder.exctractRememberMeCookieValue(request); if (rememberMeCookieValue != null) { String[] seriesAndToken = rememberMeCookieDecoder.extractSeriesAndToken(rememberMeCookieValue); int seriesAndTokenMinLength = 2; if (seriesAndToken.length >= seriesAndTokenMinLength) { String series = seriesAndToken[0]; String token = seriesAndToken[1]; rememberMeCheckService.equalWithPersistentToken(series, token); } } } 	0	0	0	0	1	0
private void launchMultiplePhonePicker() { Intent intent = new Intent(INTENT_MULTI_PICK, Contacts.CONTENT_URI); String exsitNumbers = mRecipientsEditor.getExsitNumbers(); if (!TextUtils.isEmpty(exsitNumbers)) { intent.putExtra(Intents.EXTRA_PHONE_URIS, exsitNumbers); } try { mIsPickingContact = true; startActivityForResult(intent, REQUEST_CODE_PICK); } catch (ActivityNotFoundException ex) { Toast.makeText(this, R.string.contact_app_not_found, Toast.LENGTH_SHORT).show(); } } 	0	0	0	0	1	0
@Override public boolean onPreferenceChange(Preference preference, Object newValue) { if (!isDeviceDefinitionValid((String) newValue)) { Toast.makeText(activity, R.string.error_invalid_device_definition, Toast.LENGTH_LONG).show(); return false; } showLogOutDialog(); return super.onPreferenceChange(preference, newValue); } 	0	0	0	0	1	0
"@Test(expected = BridgeServiceException.class) public void signInNoPassword() throws Exception { authService.signIn(testUser.getStudy(), TEST_CONTEXT, new SignIn(""foobar"", null)); } "	0	0	1	0	1	0
@Before public void before() { testUser = helper.getBuilder(AuthenticationServiceTest.class).build(); } 	0	0	0	0	1	0
public void modify(String query, Task incompleteTask) throws CommandExecuteException {  // check if the task exists if (this.isTaskExist(query)) {  Task task = this.taskMap.get(query);  try { // Add to database this.database.delete(task); task.update(incompleteTask); this.database.saveTask(task); } catch (Exception e) { throw new CommandExecuteException(e.getMessage()); }  try { // Update the TaskMap this.updateTaskMap(query, task); } catch (Exception e) { throw new CommandExecuteException( ErrorMessage.EXCEPTION_UPDATE_TASK_MAP); }  // Informs user that his add statement is successful this.display.outputMessage(task.getTitle() + NormalMessage.MODIFY_TASK_SUCCESSFUL); } else { throw new CommandExecuteException( ErrorMessage.EXCEPTION_MISSING_TASK); } } 	0	0	1	0	1	0
@ErrorType private int getExpirationAndCvcErrorType() { @ErrorType int errorType = ERROR_TYPE_NONE;  if (mShouldRequestExpirationDate) errorType = getExpirationDateErrorType();  // If the CVC is valid, return the error type determined so far. if (isCvcValid()) return errorType;  if (mStartedTypingCvc && !mCardUnmaskInput.isFocused()) { // The CVC is invalid and the user has typed in the CVC field, but is not focused on it // now. Add the CVC error to the current error. if (errorType == ERROR_TYPE_NONE || errorType == ERROR_TYPE_NOT_ENOUGH_INFO) { errorType = ERROR_TYPE_CVC; } else { errorType = ERROR_TYPE_CVC_AND_EXPIRATION; } } else { // The CVC is invalid but the user is not done with the field. // If no other errors were detected, set that there is not enough information. if (errorType == ERROR_TYPE_NONE) errorType = ERROR_TYPE_NOT_ENOUGH_INFO; }  return errorType; } 	0	0	0	0	1	0
"public AttendanceAssignment validateCanvasAssignment(AttendanceAssignment assignmentConfigurationFormSetup, Long courseId, AttendanceAssignment attendanceAssignment, CanvasApiWrapperService canvasApiWrapperService, OauthToken oauthToken) throws AttendanceAssignmentException{  //Look for changes between the course configuration in the form and in the DB if(!isAssignmentConfigurationSaved(assignmentConfigurationFormSetup, attendanceAssignment)) { LOG.info(""Configuration form is different than saved assignment configuration for section: "" + attendanceAssignment.getAttendanceSection().getCanvasSectionId()); throw new AttendanceAssignmentException(Error.NOT_SAVED);  }  //Look for the canvas assignment in canvas Optional<Assignment> assignmentOptional = lookForAssignmentInCanvas(courseId,attendanceAssignment,canvasApiWrapperService,oauthToken);  //Looks for discrepancy between the assignment in canvas and in database if (assignmentOptional.get().getPointsPossible().doubleValue() != assignmentConfigurationFormSetup.getAssignmentPoints().doubleValue()) { LOG.debug(""Discrepancy between Canvas and DB assignment. Point value of Canvas assignment is: "" + assignmentOptional.get().getPointsPossible() + "" and point value of Database assignment is :"" + attendanceAssignment.getAssignmentPoints()); attendanceAssignment.setStatus(AttendanceAssignment.Status.CANVAS_AND_DB_DISCREPANCY); } return attendanceAssignment; } "	0	0	0	0	1	0
public static <K, V> Map<V, K> invertMap(Map<K, V> map){ return MapUtils.invertMap(map);//返回的是 HashMap } 	0	0	0	1	1	0
@Test public void should_return_non_null_criterias_when_request_is_not_null() {  DatatablesCriterias criterias = DatatablesCriterias.getFromRequest(request);  assertThat(criterias).isNotNull(); assertThat(criterias.getSearch()).isNull(); assertThat(criterias.getStart()).isEqualTo(-1); assertThat(criterias.getLength()).isEqualTo(-1); assertThat(criterias.getDraw()).isEqualTo(-1); assertThat(criterias.getColumnDefs()).isEmpty(); assertThat(criterias.getSortingColumnDefs()).isEmpty(); } 	0	0	0	0	1	0
"public static TypeInstance createTypeInstance(NativeTypesLibrary nativeTypesLibrary, String columnType, int columnSize, int decimalDigits) { NativeType nativeType = nativeTypesLibrary.findTypeByName(columnType); if (nativeType == null) { System.err.println(""handleMetaDatasColumn : native type ["" + columnType + ""] not found.""); } TypeInstance typeInstance = TypesLibraryFactory.eINSTANCE.createTypeInstance(); typeInstance.setNativeType(nativeType); typeInstance.setLength(columnSize); typeInstance.setPrecision(decimalDigits); return typeInstance; } "	0	0	0	0	1	0
"private void writeFileHeader(final Nitf header) throws IOException, ParseException { mOutputFile.writeBytes(header.getFileType().getTextEquivalent()); writeFixedLengthNumber(header.getComplexityLevel(), NitfConstants.CLEVEL_LENGTH); writeFixedLengthString(header.getStandardType(), NitfConstants.STYPE_LENGTH); writeFixedLengthString(header.getOriginatingStationId(), NitfConstants.OSTAID_LENGTH); mOutputFile.writeBytes(header.getFileDateTime().getSourceString()); writeFixedLengthString(header.getFileTitle(), NitfConstants.FTITLE_LENGTH); writeFileSecurityMetadata(header.getFileSecurityMetadata()); writeFixedLengthString(""0"", NitfConstants.ENCRYP_LENGTH); mOutputFile.writeByte(header.getFileBackgroundColour().getRed()); mOutputFile.writeByte(header.getFileBackgroundColour().getGreen()); mOutputFile.writeByte(header.getFileBackgroundColour().getBlue()); writeFixedLengthString(header.getOriginatorsName(), NitfConstants.ONAME_LENGTH); writeFixedLengthString(header.getOriginatorsPhoneNumber(), NitfConstants.OPHONE_LENGTH);  int numberOfImageSegments = header.getImageSegmentDataLengths().size(); int numberOfGraphicSegments = header.getGraphicSegmentDataLengths().size(); int numberOfTextSegments = header.getTextSegmentDataLengths().size(); int numberOfDataExtensionSegments = header.getDataExtensionSegmentDataLengths().size();  byte[] userDefinedHeaderData = getTREs(header, TreSource.UserDefinedHeaderData); int userDefinedHeaderDataLength = userDefinedHeaderData.length; if (userDefinedHeaderDataLength > 0) { userDefinedHeaderDataLength += NitfConstants.UDHOFL_LENGTH; } byte[] extendedHeaderData = getTREs(header, TreSource.ExtendedHeaderData); int extendedHeaderDataLength = extendedHeaderData.length; if (extendedHeaderDataLength > 0) { extendedHeaderDataLength += NitfConstants.XHDLOFL_LENGTH; }  int headerLength = BASIC_HEADER_LENGTH + numberOfImageSegments * (NitfConstants.LISH_LENGTH + NitfConstants.LI_LENGTH) + numberOfGraphicSegments * (NitfConstants.LSSH_LENGTH + NitfConstants.LS_LENGTH) + numberOfTextSegments * (NitfConstants.LTSH_LENGTH + NitfConstants.LT_LENGTH) + numberOfDataExtensionSegments * (NitfConstants.LDSH_LENGTH + NitfConstants.LD_LENGTH) + userDefinedHeaderDataLength + extendedHeaderDataLength;  int fileLength = headerLength; for (int i = 0; i < numberOfImageSegments; ++i) { fileLength += header.getImageSegmentSubHeaderLengths().get(i); fileLength += header.getImageSegmentDataLengths().get(i); } for (int i = 0; i < numberOfGraphicSegments; ++i) { fileLength += header.getGraphicSegmentSubHeaderLengths().get(i); fileLength += header.getGraphicSegmentDataLengths().get(i); } // TODO: handle symbol segments for NITF 2.0 for (int i = 0; i < numberOfTextSegments; ++i) { fileLength += header.getTextSegmentSubHeaderLengths().get(i); fileLength += header.getTextSegmentDataLengths().get(i); } for (int i = 0; i < numberOfDataExtensionSegments; ++i) { fileLength += header.getDataExtensionSegmentSubHeaderLengths().get(i); fileLength += header.getDataExtensionSegmentDataLengths().get(i); }  writeFixedLengthNumber(fileLength, NitfConstants.FL_LENGTH); writeFixedLengthNumber(headerLength, NitfConstants.HL_LENGTH);  writeFixedLengthNumber(numberOfImageSegments, NitfConstants.NUMI_LENGTH); for (int i = 0; i < numberOfImageSegments; ++i) { writeFixedLengthNumber(header.getImageSegmentSubHeaderLengths().get(i), NitfConstants.LISH_LENGTH); writeFixedLengthNumber(header.getImageSegmentDataLengths().get(i), NitfConstants.LI_LENGTH); }  writeFixedLengthNumber(numberOfGraphicSegments, NitfConstants.NUMS_LENGTH); for (int i = 0; i < numberOfGraphicSegments; ++i) { writeFixedLengthNumber(header.getGraphicSegmentSubHeaderLengths().get(i), NitfConstants.LSSH_LENGTH); writeFixedLengthNumber(header.getGraphicSegmentDataLengths().get(i), NitfConstants.LS_LENGTH); } // TODO: handle properly, including NITF 2.0 case writeFixedLengthNumber(0, NitfConstants.NUMX_LENGTH);  writeFixedLengthNumber(numberOfTextSegments, NitfConstants.NUMT_LENGTH); for (int i = 0; i < numberOfTextSegments; ++i) { writeFixedLengthNumber(header.getTextSegmentSubHeaderLengths().get(i), NitfConstants.LTSH_LENGTH); writeFixedLengthNumber(header.getTextSegmentDataLengths().get(i), NitfConstants.LT_LENGTH); }  writeFixedLengthNumber(numberOfDataExtensionSegments, NitfConstants.NUMDES_LENGTH); for (int i = 0; i < numberOfDataExtensionSegments; ++i) { writeFixedLengthNumber(header.getDataExtensionSegmentSubHeaderLengths().get(i), NitfConstants.LDSH_LENGTH); writeFixedLengthNumber(header.getDataExtensionSegmentDataLengths().get(i), NitfConstants.LD_LENGTH); }  writeFixedLengthNumber(0, NitfConstants.NUMRES_LENGTH);  writeFixedLengthNumber(userDefinedHeaderData.length, NitfConstants.UDHDL_LENGTH); if (userDefinedHeaderDataLength > 0) { writeFixedLengthNumber(header.getUserDefinedHeaderOverflow(), NitfConstants.UDHOFL_LENGTH); mOutputFile.write(userDefinedHeaderData); } writeFixedLengthNumber(extendedHeaderDataLength, NitfConstants.XHDL_LENGTH); if (extendedHeaderDataLength > 0) { writeFixedLengthNumber(header.getExtendedHeaderDataOverflow(), NitfConstants.XHDLOFL_LENGTH); mOutputFile.write(extendedHeaderData); } } "	1	0	0	0	0	0
private FieldInjectionTarget createFieldInjectionTarget(VariableElement element) { final TypeElement memberTypeElement = (TypeElement) typeUtils.asElement(element.asType()); final String memberName = element.getSimpleName().toString();  FieldInjectionTarget.Kind kind = getKind(element); TypeElement kindParameterTypeElement; if (kind == FieldInjectionTarget.Kind.INSTANCE) { kindParameterTypeElement = null; } else { kindParameterTypeElement = getKindParameter(element); }  Object name = findName(element);  return new FieldInjectionTarget(memberTypeElement, memberName, kind, kindParameterTypeElement, name); } 	0	0	0	0	1	0
public final JoinMatcherBootstrap<V, BaseParser<V>> join(final Object rule, final Object rule2, final Object moreRules) { Objects.requireNonNull(moreRules); return join(sequence(rule, rule2, moreRules)); } 	0	0	1	1	0	0
public static String format(Object obj,JsonConfig jsonConfig,int indentFactor,int indent){ return null == obj ? StringUtils.EMPTY : toJSON(obj, jsonConfig).toString(indentFactor, indent); } 	0	0	0	1	0	0
"public void characterTouched(FightCharacter touchedCharacter) { Gdx.app.debug(TAG, ""Character touched ["" + touchedCharacter.getName() + ""]"");  switch (fightState) { case NOTHING_SELECTED: tryToSelectCharacter(touchedCharacter); break; case CHARACTER_SELECTED: unselectCharacterIfAlreadySelected(touchedCharacter); break; case ACTION_SELECTED: doAction(touchedCharacter); break; } } "	0	0	0	0	1	0
"@Test public void testPauseJobsAction() throws Exception { //given final ActionRequest readRequest = Requests.newActionRequest("""", SchedulerService.ACTION_PAUSE_JOBS);  //when Promise<ActionResponse, ResourceException> promise = schedulerService.handleAction(new RootContext(), readRequest);  //then AssertJPromiseAssert.assertThat(promise) .isNotNull() .succeeded(); ActionResponse resourceResponse = promise.getOrThrow(); assertThat(resourceResponse.getJsonContent().get(""success"").getObject()).isEqualTo(new Boolean(true)); } "	0	0	0	0	1	0
"@Test public void testListCurrentlyExecutingJobsAction() throws Exception { //given final ActionRequest readRequest = Requests.newActionRequest("""", SchedulerService.ACTION_LIST_CURRENTLY_EXECUTING_JOBS);  //when Promise<ActionResponse, ResourceException> promise = schedulerService.handleAction(new RootContext(), readRequest);  //then AssertJPromiseAssert.assertThat(promise) .isNotNull() .succeeded(); ActionResponse resourceResponse = promise.getOrThrow(); assertThat(resourceResponse.getJsonContent().asList().size()).isEqualTo(0); } "	0	0	0	0	1	0
@Override public void onBindViewHolder(CardViewHolder holder, int position) { DailyNews news = mNewsList.get(position); // 目前暂未有使用多张图片的情形出现 holder.mCover.setImageUrl(news.images.get(0), RequestManager.getImageLoader()); holder.mTitle.setText(news.title); } 	0	0	0	0	1	0
public boolean isKnown() { return category != null && category.getElementById(id, true) != null; } 	0	0	0	0	1	0
public void drawVLine(int x) { canvas.drawRect(x, projection.screen.top, x, projection.screen.bottom, gridPaint);  } 	0	0	1	0	1	0
"void loadGeofences() { Iterator<PIGeofence> it = PIGeofence.findAll(PIGeofence.class); if ((httpService.getServerURL() != null) && !it.hasNext()) { log.debug(""loadGeofences() loading geofences from the server""); loadGeofencesFromServer(true); } else { log.debug(""loadGeofences() found geofences in local database""); setInitialLocation(); } } "	1	0	1	0	0	0
"public static FontFamily fromString(String value) { if (""default"".equals(value)) { return DEFAULT; } else if ((""monospace"").equals(value)) { return MONOSPACE; } else if (""sans_serif"".equals(value)) { return SANS_SERIF; } else if (""serif"".equals(value)) { return SERIF; } throw new IllegalArgumentException(""Invalid value for Align: "" + value); } "	0	0	0	0	1	0
@Override public int getAlphaValueInt() { return this.color.getAlpha(); } 	1	0	0	0	0	0
"private void importFromOpml() { if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED) || Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED_READ_ONLY)) {  // First, try to use a file app try { Intent intent = new Intent(Intent.ACTION_GET_CONTENT); intent.setType(""file/*""); startActivityForResult(intent, REQUEST_PICK_OPML_FILE); } catch (Exception unused) { // Else use a custom file selector displayCustomFilePicker(); } } else { Toast.makeText(getActivity(), R.string.error_external_storage_not_available, Toast.LENGTH_LONG).show(); } } "	0	0	0	0	1	0
private boolean jj_3R_172() { if (jj_3R_263()) return true; return false; } 	0	0	1	0	0	0
private boolean jj_3R_280() { if (jj_3R_71()) return true; return false; } 	0	0	1	1	0	0
private boolean jj_3_29() { if (jj_scan_token(SET)) return true; if (jj_3R_57()) return true; if (jj_scan_token(EQ)) return true; if (jj_3R_63()) return true; Token xsp; while (true) { xsp = jj_scanpos; if (jj_3R_261()) { jj_scanpos = xsp; break; } } return false; } 	0	0	1	0	1	0
private boolean jj_3R_117() { if (jj_3R_235()) return true; return false; } 	0	0	1	0	0	0
private boolean jj_3R_141() { if (jj_scan_token(WHERE)) return true; if (jj_3R_233()) return true; return false; } 	0	0	1	0	0	0
private boolean jj_3R_306() { if (jj_3R_62()) return true; return false; } 	0	0	0	0	1	0
private boolean jj_3R_162() { Token xsp; xsp = jj_scanpos; if (jj_scan_token(14)) jj_scanpos = xsp; xsp = jj_scanpos; if (jj_3R_262()) { jj_scanpos = xsp; if (jj_3_27()) return true; } return false; } 	0	0	1	0	0	0
private boolean jj_3R_330() { if (jj_scan_token(COMMA)) return true; if (jj_3R_63()) return true; return false; } 	0	0	1	0	0	0
private boolean jj_3R_137() { if (jj_scan_token(LBRACKET)) return true; Token xsp; xsp = jj_scanpos; if (jj_3R_251()) jj_scanpos = xsp; if (jj_scan_token(RBRACKET)) return true; return false; } 	0	0	1	0	1	0
private boolean jj_3R_113() { if (jj_3R_231()) return true; return false; } 	0	0	1	0	0	0
private boolean jj_3R_343() { if (jj_scan_token(GE)) return true; return false; } 	0	0	1	1	0	0
"static Date toDate(String value) { if (dateFormat == null) { dateFormat = new SimpleDateFormat[6]; dateFormat[0] = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ""); dateFormat[0].setLenient(true); dateFormat[1] = new SimpleDateFormat(""E MMM d HH:mm:ss z y""); dateFormat[1].setLenient(true); dateFormat[2] = new SimpleDateFormat(""EEE MMM dd HH:mm:ss y""); dateFormat[2].setLenient(true); dateFormat[3] = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss Z""); dateFormat[3].setLenient(true); dateFormat[4] = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssXXX""); dateFormat[4].setLenient(true); dateFormat[5] = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSXXX""); dateFormat[5].setLenient(true); } if (datePattern == null) { String pattern = ""(.*)\\.\\d+([\\-+]\\d+):(\\d+)""; datePattern = Pattern.compile(pattern); }  for (SimpleDateFormat simpleDateFormat: dateFormat)  { try {  Matcher matcher = datePattern.matcher(value); value = matcher.replaceAll(""$1$2$3""); return simpleDateFormat.parse(value); } catch (ParseException e) {} } try { return new Date(Long.parseLong(value)*1000); } catch (Exception e) { throw new RuntimeException(e.getMessage(), e); } } "	0	0	1	0	0	0
"public void killMob(Quest quest, Location killedLocation, EntityType e) { QuestData questData = getQuestData(quest); if (questData.mobsKilled.contains(e) == false) { return; } Stage currentStage = getCurrentStage(quest); int indexOfMobKilled = questData.mobsKilled.indexOf(e); Integer numberOfSpecificMobKilled = questData.mobNumKilled.get(indexOfMobKilled); Integer numberOfSpecificMobNeedsToBeKilledInCurrentStage = currentStage.mobNumToKill.get(indexOfMobKilled); if (questData.locationsToKillWithin.isEmpty() == false) { Location locationToKillWithin = questData.locationsToKillWithin.get(indexOfMobKilled); double radius = questData.radiiToKillWithin.get(indexOfMobKilled); // Check world #name, not the object if ((killedLocation.getWorld().getName() == locationToKillWithin.getWorld().getName()) == false) { return; } // Radius check, it's a ""circle"", not cuboid if ((killedLocation.getX() < (locationToKillWithin.getX() + radius) && killedLocation.getX() > (locationToKillWithin.getX() - radius)) == false) { return; } if ((killedLocation.getZ() < (locationToKillWithin.getZ() + radius) && killedLocation.getZ() > (locationToKillWithin.getZ() - radius)) == false) { return; } if ((killedLocation.getY() < (locationToKillWithin.getY() + radius) && killedLocation.getY() > (locationToKillWithin.getY() - radius)) == false) { return; } } if (numberOfSpecificMobKilled < numberOfSpecificMobNeedsToBeKilledInCurrentStage) { Integer newNumberOfSpecificMobKilled = numberOfSpecificMobKilled + 1; questData.mobNumKilled.set(indexOfMobKilled, newNumberOfSpecificMobKilled); if ((newNumberOfSpecificMobKilled).equals(numberOfSpecificMobNeedsToBeKilledInCurrentStage)) { finishObjective(quest, ""killMob"", null, null, null, e, null, null, null, null, null, null); } } } "	0	0	1	0	1	0
"public Boolean convert(String obj) throws ConversionException { return ""TRUE"".equals(obj.trim().toUpperCase()); } "	0	0	0	0	1	0
boolean shouldPreferSettersOverCtor(int noOfCtorArgs, int noOfSetters) { return noOfCtorArgs * ((minPercentOfExcessiveSettersToPreferDefaultCtor + 100f) / 100f) <= noOfSetters; } 	0	0	0	0	1	0
@Override public boolean contains(Term t) { return this.indexOf(t) >= 0; } 	0	0	0	0	1	0
private static void setup() { saveLocation = new File(path);  if (!saveLocation.exists()) try { saveLocation.createNewFile(); } catch (IOException exception) { exception.printStackTrace(); }  setupDumper();  yaml = new Yaml(representer, options); data = new HashMap<>(); } 	0	0	0	0	1	0
"public void updateSourceTimedConditionEditorPane(JPanel pane, NPC.TimedConditionEffect condition, final FieldUpdateListener listener) { pane.removeAll(); if (sourceConditionBox != null) { removeElementListener(sourceConditionBox); }  boolean writable = ((NPC)target).writable; Project proj = ((NPC)target).getProject();  sourceConditionBox = addActorConditionBox(pane, proj, ""Actor Condition: "", condition.condition, writable, listener); sourceConditionChance = addDoubleField(pane, ""Chance: "", condition.chance, writable, listener);  sourceConditionClear = new JRadioButton(""Clear active condition""); pane.add(sourceConditionClear, JideBoxLayout.FIX); sourceConditionApply = new JRadioButton(""Apply condition with magnitude""); pane.add(sourceConditionApply, JideBoxLayout.FIX); sourceConditionMagnitude = addIntegerField(pane, ""Magnitude: "", condition.magnitude == null ? null : condition.magnitude >= 0 ? condition.magnitude : 0, 1, false, writable, listener); sourceConditionImmunity = new JRadioButton(""Give immunity to condition""); pane.add(sourceConditionImmunity, JideBoxLayout.FIX);  ButtonGroup radioEffectGroup = new ButtonGroup(); radioEffectGroup.add(sourceConditionApply); radioEffectGroup.add(sourceConditionClear); radioEffectGroup.add(sourceConditionImmunity);  sourceConditionTimed = new JRadioButton(""For a number of rounds""); pane.add(sourceConditionTimed, JideBoxLayout.FIX); sourceConditionDuration = addIntegerField(pane, ""Duration: "", condition.duration, false, writable, listener); sourceConditionForever = new JRadioButton(""Forever""); pane.add(sourceConditionForever, JideBoxLayout.FIX);  ButtonGroup radioDurationGroup = new ButtonGroup(); radioDurationGroup.add(sourceConditionTimed); radioDurationGroup.add(sourceConditionForever);  updateSourceTimedConditionWidgets(condition);  sourceConditionClear.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(sourceConditionClear, new Boolean(sourceConditionClear.isSelected())); } }); sourceConditionApply.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(sourceConditionApply, new Boolean(sourceConditionApply.isSelected())); } }); sourceConditionImmunity.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(sourceConditionImmunity, new Boolean(sourceConditionImmunity.isSelected())); } });  sourceConditionTimed.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(sourceConditionTimed, new Boolean(sourceConditionTimed.isSelected())); } }); sourceConditionForever.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(sourceConditionForever, new Boolean(sourceConditionForever.isSelected())); } }); pane.revalidate(); pane.repaint(); } "	1	1	1	1	0	0
"public void updateTargetTimedConditionEditorPane(JPanel pane, NPC.TimedConditionEffect condition, final FieldUpdateListener listener) { pane.removeAll(); if (targetConditionBox != null) { removeElementListener(targetConditionBox); }  boolean writable = ((NPC)target).writable; Project proj = ((NPC)target).getProject();  targetConditionBox = addActorConditionBox(pane, proj, ""Actor Condition: "", condition.condition, writable, listener); targetConditionChance = addDoubleField(pane, ""Chance: "", condition.chance, writable, listener); targetConditionClear = new JRadioButton(""Clear active condition""); pane.add(targetConditionClear, JideBoxLayout.FIX); targetConditionApply = new JRadioButton(""Apply condition with magnitude""); pane.add(targetConditionApply, JideBoxLayout.FIX); targetConditionMagnitude = addIntegerField(pane, ""Magnitude: "", condition.magnitude == null ? null : condition.magnitude >= 0 ? condition.magnitude : 0, 1, false, writable, listener); targetConditionImmunity = new JRadioButton(""Give immunity to condition""); pane.add(targetConditionImmunity, JideBoxLayout.FIX);  ButtonGroup radioEffectGroup = new ButtonGroup(); radioEffectGroup.add(targetConditionApply); radioEffectGroup.add(targetConditionClear); radioEffectGroup.add(targetConditionImmunity);  targetConditionTimed = new JRadioButton(""For a number of rounds""); pane.add(targetConditionTimed, JideBoxLayout.FIX); targetConditionDuration = addIntegerField(pane, ""Duration: "", condition.duration, false, writable, listener); targetConditionForever = new JRadioButton(""Forever""); pane.add(targetConditionForever, JideBoxLayout.FIX);  ButtonGroup radioDurationGroup = new ButtonGroup(); radioDurationGroup.add(targetConditionTimed); radioDurationGroup.add(targetConditionForever);  updateTargetTimedConditionWidgets(condition);  targetConditionClear.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(targetConditionClear, new Boolean(targetConditionClear.isSelected())); } }); targetConditionApply.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(targetConditionApply, new Boolean(targetConditionApply.isSelected())); } }); targetConditionImmunity.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(targetConditionImmunity, new Boolean(targetConditionImmunity.isSelected())); } });  targetConditionTimed.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(targetConditionTimed, new Boolean(targetConditionTimed.isSelected())); } }); targetConditionForever.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(targetConditionForever, new Boolean(targetConditionForever.isSelected())); } }); pane.revalidate(); pane.repaint(); } "	1	1	1	1	0	0
public void act(float delta) { setEquipmentScene(sceneConstants, pageNumber); setSubTabButton(ItemEnum.Inventory.EQUIPMENT); setPageLight(sceneConstants, pageNumber); setCharacterStatusImage(partyManager, sceneConstants); } 	0	0	0	0	1	0
"@Override protected Query createQuery(ConvertingParameterAccessor accessor) {  MongoQueryCreator creator = new MongoQueryCreator(tree, accessor, context, isGeoNearQuery); Query query = creator.createQuery();  if (tree.isLimiting()) { query.limit(tree.getMaxResults()); }  TextCriteria textCriteria = accessor.getFullText(); if (textCriteria != null) { query.addCriteria(textCriteria); }  String fieldSpec = this.getQueryMethod().getFieldSpecification();  if (!StringUtils.hasText(fieldSpec)) {  ReturnedType returnedType = processor.withDynamicProjection(accessor).getReturnedType();  if (returnedType.isProjecting()) {  Field fields = query.fields();  for (String field : returnedType.getInputProperties()) { fields.include(field); } }  return query; }  try {  BasicQuery result = new BasicQuery(query.getQueryObject().toString(), fieldSpec); result.setSortObject(query.getSortObject());  return result;  } catch (JSONParseException o_O) { throw new IllegalStateException(String.format(""Invalid query or field specification in %s!"", getQueryMethod()), o_O); } } "	0	0	0	0	1	0
"public static void newProject() { ProjectDialog dlg = new ProjectDialog(null, Local.getString(""New project""));  Dimension dlgSize = dlg.getSize(); Dimension frmSize = App.getFrame().getSize(); Point loc = App.getFrame().getLocation(); dlg.setLocation((frmSize.width - dlgSize.width) / 2 + loc.x, (frmSize.height - dlgSize.height) / 2 + loc.y); dlg.setVisible(true); if (dlg.CANCELLED){ return; } String title = dlg.prTitleField.getText(); CalendarDate startD = new CalendarDate((Date) dlg.startDate.getModel().getValue()); CalendarDate endD = null; if (dlg.endDateChB.isSelected()){ endD = new CalendarDate((Date) dlg.endDate.getModel().getValue()); } Project prj = ProjectManager.createProject(title, startD, endD); CurrentStorage.get().storeProjectManager(); } "	0	0	0	0	1	0
@Test public void should_do_nothing_if_not_connected() { VirtualFile file = mock(VirtualFile.class); settings.setBindingEnabled(false);  updater.fetchAndMatchServerIssues(Collections.singletonList(file), false); verifyZeroInteractions(bindingManager); verifyZeroInteractions(issueManager); } 	0	0	0	0	1	0
"public OriginalGraph getSubgraph(Collection<String> genomes) { if (!mainGraph.getGenoms().containsAll(genomes)) { throw new NoSuchElementException(""All genomes must present in the main graph.""); } OriginalGraph subGraph = buildSubgraph(genomes); return prune(subGraph, genomes); } "	0	0	0	1	0	0
List<Purchase> getAllPurchases() { return new ArrayList<Purchase>(mPurchaseMap.values()); } 	1	0	1	1	1	0
"private void handleTaskInternal(Intent intent) { ResultReceiver resultReceiver = intent.getParcelableExtra(RESULT_RECEIVER); boolean doRefresh = intent.getBooleanExtra(BundleExtraKeys.DO_REFRESH, false); long updatePeriod = intent.getLongExtra(BundleExtraKeys.UPDATE_PERIOD, RoomListService.NEVER_UPDATE_PERIOD); if (doRefresh) { updatePeriod = RoomListService.ALWAYS_UPDATE_PERIOD; }  try { STATE state = handleIntent(intent, updatePeriod, resultReceiver); if (state == STATE.SUCCESS) { sendNoResult(resultReceiver, ResultCodes.SUCCESS); } else if (state == STATE.ERROR) { sendNoResult(resultReceiver, ResultCodes.ERROR); } } catch (Exception e) { Log.e(ConvenientIntentService.class.getName(), ""An error occurred while processing an intent"", e); sendNoResult(resultReceiver, ResultCodes.ERROR); } } "	0	0	1	1	1	0
"@Override public User getUser(Renderer renderer, String username, String password) throws IOException { if (StringUtils.isEmpty(username) || StringUtils.isEmpty(password)) throw new AuthException(""Username or password is empty""); String authIndex = renderer.getAuthIndex(); if (StringUtils.isEmpty(authIndex)) throw new AuthException( ""No auth index given, check the parameters of the renderer""); try { Client authClient = ClientCatalog.getClient(authIndex); if (authClient == null) throw new AuthException(""No auth index found: "" + authIndex);  SearchFieldRequest searchFieldRequest = new SearchFieldRequest( authClient); searchFieldRequest.setDefaultOperator(OperatorEnum.AND); searchFieldRequest.addSearchField(PASSWORD_FIELD, Mode.TERM, 1.0d, 1.0d, null, null); searchFieldRequest.setQueryString(PASSWORD_FIELD, password); TermFilter tf = new TermFilter(); tf.setField(USERNAME_FIELD); tf.setTerm(username); searchFieldRequest.getFilterList().add(tf); searchFieldRequest.setStart(0); searchFieldRequest.setRows(1); searchFieldRequest.addReturnField(GROUPS_FIELD); AbstractResultSearch<?> result = (AbstractResultSearch<?>) authClient .request(searchFieldRequest); if (result == null || result.getNumFound() == 0) throw new AuthException(""Authentication failed.""); ResultDocument document = result.getDocument(0); List<FieldValueItem> values = document.getValues(GROUPS_FIELD); String[] groups; if (values != null) { groups = new String[values.size()]; int i = 0; for (FieldValueItem value : values) groups[i++] = value.value; } else groups = null; User user = new User(username, username.toLowerCase(), password, groups); Logging.info(""USER authenticated: "" + user); return user; } catch (SearchLibException e) { Logging.warn(e); throw new AuthException( ""Authentication error (SearchLibException) : "" + e.getMessage()); } } "	1	0	1	1	0	0
private Set<Trap> handleThrowStatements() { Set<Trap> usedTraps = new HashSet<Trap>(); // last but not least eliminate all throw statements that are caught. Set<Unit> removeThrowStatements = new HashSet<Unit>(); for (Pair<Unit, Value> pair : throwStatements) { Unit u = pair.getFirst(); // must be a RefType RefType rt = (RefType) pair.getSecond().getType(); SootClass thrownException = rt.getSootClass(); List<Trap> surroundingTraps = getTrapsGuardingUnit(u, body);  List<SootClass> possibleExceptions = new LinkedList<SootClass>(); possibleExceptions.add(thrownException); // TODO: maybe we should treat the case where thrownException // is Throwable as a special case because then we have a // finally block. for (Trap t : surroundingTraps) { // find any trap that is sub- or super-class if (hierarchy.isClassSubclassOfIncluding(t.getException(), thrownException) || hierarchy.isClassSubclassOfIncluding(thrownException, t.getException())) { if (!possibleExceptions.contains(t.getException())) { possibleExceptions.add(t.getException()); } } } // now sort the classes. Collections.sort(possibleExceptions, new Comparator<SootClass>() { @Override public int compare(final SootClass a, final SootClass b) { if (a == b) return 0; hierarchy = Scene.v().getActiveHierarchy(); if (hierarchy.isClassSubclassOf(a, b)) return -1; if (hierarchy.isClassSuperclassOf(a, b)) return 1; return 0; } }); // insert a jump for each possible exception. List<Unit> toInsert = new LinkedList<Unit>(); boolean caughtThrowable = false;  Local exceptionVarLocal = getFreshLocal(body, throwableClass.getType()); toInsert.add(assignStmtFor(exceptionVarLocal, SootTranslationHelpers.v().getExceptionGlobalRef(), u));  for (SootClass exception : possibleExceptions) { Trap trap = null; for (Trap t : surroundingTraps) { // check if the trap is either super- or sub-class // because the procedure might throw a sub type of // what it declares. if (hierarchy.isClassSubclassOfIncluding(exception, t.getException())) { trap = t; break; } } if (trap != null) { if (exception == thrownException) { caughtThrowable = true; } usedTraps.add(trap); Unit newTarget = createNewExceptionAndGoToTrap(u, exception, trap); Local l = getFreshLocal(body, BooleanType.v()); Value instOf = Jimple.v().newInstanceOfExpr(exceptionVarLocal, RefType.v(exception)); toInsert.add(assignStmtFor(l, instOf, u)); toInsert.add(ifStmtFor(jimpleNeZero(l), newTarget, u)); } // if we caught Throwable, we can remove the // throw statement. if (caughtThrowable) { removeThrowStatements.add(u); } } if (!removeThrowStatements.contains(u)) { // If the throw was not caught, replace it by a return. removeThrowStatements.add(u); // TODO: more testing here please. toInsert.addAll(updateExceptionVariableAndReturn(body, ((ThrowStmt) u).getOp(), u)); } if (!toInsert.isEmpty()) { body.getUnits().insertBefore(toInsert, u); }  } for (Unit u : removeThrowStatements) { body.getUnits().remove(u); } return usedTraps; } 	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") @Override protected void mergeProtocolSubmission(ProtocolBase amendment) { List<ProtocolSubmission> submissions = (List<ProtocolSubmission>) deepCopy(amendment.getProtocolSubmissions()); setNewSubmissionReferences((List)submissions); getProtocolVersionService().setExpeditedAndExemptCheckListReferences((List)submissions, this); } "	0	0	0	0	1	0
"@Test public void testOlac() throws Exception { String content = """"; content += ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""; content += ""<CMD xmlns=\""http://www.clarin.eu/cmd/1\"" xmlns:cmdp=\""http://www.clarin.eu/cmd/1/profiles/clarin.eu:cr1:p_1288172614026\"" xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""\n""; content += ""     xmlns:dc=\""http://purl.org/dc/elements/1.1/\""\n""; content += ""     xmlns:oai_dc=\""http://www.openarchives.org/OAI/2.0/oai_dc/\""\n""; content += ""     xmlns:defns=\""http://www.openarchives.org/OAI/2.0/\""\n""; content += ""     xsi:schemaLocation=\""http://www.clarin.eu/cmd http://catalog.clarin.eu/ds/ComponentRegistry/rest/registry/profiles/clarin.eu:cr1:p_1288172614026/xsd\"">\n""; content += ""   <Header>\n""; content += ""      <MdCreator>olac2cmdi.xsl</MdCreator>\n""; content += ""      <MdCreationDate>2002-12-14</MdCreationDate>\n""; content += ""      <MdSelfLink>oai:ailla.utexas.edu:1</MdSelfLink>\n""; content += ""      <MdProfile>clarin.eu:cr1:p_1288172614026</MdProfile>\n""; content += ""   </Header>\n""; content += ""   <Resources>\n""; content += ""      <ResourceProxyList/>\n""; content += ""      <JournalFileProxyList/>\n""; content += ""      <ResourceRelationList/>\n""; content += ""   </Resources>\n""; content += ""   <Components>\n""; content += ""      <cmdp:OLAC-DcmiTerms>\n""; content += ""         <cmdp:creator>Joel Sherzer (recorder)</cmdp:creator>\n""; content += ""         <cmdp:description>\n""; content += ""    Channel: Talking;\n""; content += ""    Genre: Traditional Narrative / Story;\n""; content += ""    Country: Panama;\n""; content += ""    Place of Recording: Mulatuppu;\n""; content += ""    Event: Community Gathering;\n""; content += ""    Institutional Affiliation: University of Texas at Austin;\n""; content += ""    Participant Information: Political Leader;\n""; content += ""      </cmdp:description>\n""; content += ""         <cmdp:description>The one-eyed grandmother is one of many traditional Kuna stories performed in the Kuna gathering house. This story, performed here by Pedro Arias, combines European derived motifs (Tom Thumb and Hansel and Gretel) with themes that seem more Kuna in origin. All are woven together and a moral is provided. Pedro Arias performed this story before a gathered audience in the morning..\n""; content += ""      </cmdp:description>\n""; content += ""         <cmdp:description>Test</cmdp:description>\n""; content += ""         <cmdp:identifier>http://uts.cc.utexas.edu/~ailla/audio/sherzer/one_eyed_grandmother.ram</cmdp:identifier>\n""; content += ""         <cmdp:identifier>http://uts.cc.utexas.edu/~ailla/texts/sherzer/one_eyed_grandmother.pdf</cmdp:identifier>\n""; content += ""         <cmdp:language olac-language=\""x-sil-CHN\""/>\n""; content += ""         <cmdp:language>Chinese</cmdp:language>\n""; content += ""         <cmdp:subject olac-linguistic-field=\""testSubject\"">Kuna</cmdp:subject>\n""; content += ""         <cmdp:type olac-linguistic-type=\""Transcription\""/>\n""; content += ""         <cmdp:format>WAV</cmdp:format>\n""; content += ""        <cmdp:type dcterms-type=\""DCMIType\"">Sound</cmdp:type>\n""; content += ""      </cmdp:OLAC-DcmiTerms>\n""; content += ""   </Components>\n""; content += ""</CMD>\n"";  File cmdiFile = createCmdiFile(""testOlac"", content); CMDIDataProcessor processor = getDataParser(); CMDIData data = processor.process(cmdiFile); assertEquals(""oai_58_ailla.utexas.edu_58_1"", data.getId()); List<Resource> resources = data.getMetadataResources(); assertEquals(0, resources.size()); List<Resource> dataResources = data.getDataResources(); assertEquals(0, dataResources.size()); SolrInputDocument doc = data.getSolrDocument(); assertNotNull(doc); assertEquals(9, doc.getFieldNames().size()); assertEquals(""oai:ailla.utexas.edu:1"", doc.getFieldValue(""_selfLink"")); assertEquals(null, doc.getFieldValue(""name"")); assertEquals(null, doc.getFieldValue(""continent"")); assertEquals(2, doc.getFieldValues(""languageCode"").size()); assertTrue(doc.getFieldValues(""languageCode"").contains(""code:zho"")); assertTrue(doc.getFieldValues(""languageCode"").contains(""name:x-sil-CHN"")); assertEquals(null, doc.getFieldValue(""country"")); assertEquals(null, doc.getFieldValue(""organisation"")); assertEquals(""transcription"", doc.getFieldValue(""genre"")); assertEquals(""kuna"", doc.getFieldValue(""subject"")); Collection<Object> fieldValues = doc.getFieldValues(""description""); assertEquals(3, fieldValues.size()); List<String> descriptions = new ArrayList(fieldValues); Collections.sort(descriptions); assertEquals(""{code:und}Channel: Talking;\n    Genre: Traditional Narrative / Story;\n    Country: Panama;\n"" + ""    Place of Recording: Mulatuppu;\n    Event: Community Gathering;\n"" + ""    Institutional Affiliation: University of Texas at Austin;\n    Participant Information: Political Leader;"", descriptions.get(0).toString()); assertEquals(""{code:und}Test"", descriptions.get(1).toString()); assertEquals(""{code:und}The one-eyed grandmother is one of many traditional Kuna stories performed "" + ""in the Kuna gathering house. This story, performed here by Pedro Arias, combines "" + ""European derived motifs (Tom Thumb and Hansel and Gretel) with themes that seem more "" + ""Kuna in origin. All are woven together and a moral is provided. Pedro Arias performed "" + ""this story before a gathered audience in the morning.."", descriptions.get(2).toString()); assertEquals(""Sound"", doc.getFieldValue(FacetConstants.FIELD_RESOURCE_CLASS)); } "	0	0	1	1	0	0
"@Override public void onPrepared(DtPlayer mp) { // TODO Auto-generated method stub Log.i(Constant.LOGTAG, ""enter onPrepared""); mState = PLAYER_PREPARED; dtPlayer.start(); mState = PLAYER_RUNNING; int duration = mp.getDuration(); if (duration > 0) { mTextViewDuration.setText(TimesUtil.getTime(duration)); mSeekBarProgress.setMax(duration); } startTimerTask(); //setVideoScale(1); } "	0	0	0	0	1	0
public String getConceptForwardingAddress(String identifier) { String forwardingAddress = null; for (Entity entity : entities) { if (entity.getIdentifier().toString().equals(identifier)) { forwardingAddress = entity.getConceptForwardingAddress(); break; } } return forwardingAddress; } 	0	0	0	0	1	0
public static void getExecutionDurationPercentilesTest(StatisticPriorityScheduler scheduler) { assertEquals(0, scheduler.getExecutionDurationPercentiles(50).get(50.), 0); scheduler.execute(new ClockUpdateRunnable()); blockTillSchedulerIdle(scheduler, 1); assertEquals(1, scheduler.getExecutionDurationPercentiles(50).get(50.), 1); scheduler.execute(new ClockUpdateRunnable()); scheduler.execute(new ClockUpdateRunnable()); scheduler.execute(new ClockUpdateRunnable()); scheduler.execute(new ClockUpdateRunnable(DELAY_TIME)); blockTillSchedulerIdle(scheduler, 5); assertEquals(1, scheduler.getExecutionDurationPercentiles(75).get(75.), 1); assertTrue(scheduler.getExecutionDurationPercentiles(90).get(90.) >= DELAY_TIME); } 	0	0	0	0	1	0
@Test public void getExecutionDurationPercentilesTest() { assertEquals(0, statWrapper.getExecutionDurationPercentiles(50).get(50.), 0); statWrapper.execute(DoNothingRunnable.instance()); assertEquals(1, statWrapper.getExecutionDurationPercentiles(50).get(50.), 1); statWrapper.execute(DoNothingRunnable.instance()); statWrapper.execute(DoNothingRunnable.instance()); statWrapper.execute(DoNothingRunnable.instance()); statWrapper.execute(new TestRunnable(DELAY_TIME)); assertEquals(1, statWrapper.getExecutionDurationPercentiles(75).get(75.), 1); assertTrue(statWrapper.getExecutionDurationPercentiles(90).get(90.) >= DELAY_TIME); } 	0	0	0	0	1	0
@Test public void getExecutionDurationSamplesTest() { assertTrue(statWrapper.getExecutionDurationSamples().isEmpty()); statWrapper.execute(DoNothingRunnable.instance()); assertEquals(1, statWrapper.getExecutionDurationSamples().size()); statWrapper.execute(new TestRunnable(DELAY_TIME)); assertEquals(2, statWrapper.getExecutionDurationSamples().size());  assertTrue(statWrapper.getExecutionDurationSamples().get(0) < 2); assertTrue(statWrapper.getExecutionDurationSamples().get(1) >= DELAY_TIME); } 	0	0	0	0	1	0
"@Override public void append(byte[] data, MessageMetadata MessageMetadata) { checkState(!closed, ""Batch already closed.""); if (!canFit(data)) throw new BufferOverflowException(); if (elements == 0) batchStart = clock.millis();  byteBuffer.put((byte) (elements == 0 ? '[' : ',')).put(data); messageMetadatas.add(MessageMetadata); elements++; } "	0	0	1	0	1	0
"@SuppressWarnings({""BroadCatchBlock"", ""UnusedAssignment""}) private static int main0(String[] args0) { List<String> args = new ArrayList<>(asList(args0)); // list must be mutable b/c myCapsule() might mutate it Capsule capsule = null; try { capsule = myCapsule(args);  args = unmodifiableList(args);  if (isWrapperFactoryCapsule(capsule)) { capsule = null; // help gc return runOtherCapsule(args); }  if (runActions(capsule, args)) return 0;  return capsule.launch(args); } catch (Throwable t) { if (capsule != null) { capsule.cleanup1(); capsule.onError(t); } else printError(t, capsule); return 1; } } "	0	0	1	1	0	0
public boolean isAwaitingResponses() { return getResponsesRemaining() > 0; } 	0	0	0	0	1	0
"public void enable() { PlotMeCoreManager.getInstance().setPlugin(this); configFile = new ConfigAccessor(getServerBridge().getDataFolder(), ""config.yml""); setupConfigFiles(); setupSQL(); serverBridge.setupHooks(); if (getConfig().getInt(""ExpirePlotCleanupTimer"") > 0) { //20L * 60 = 1 minute in ticks serverBridge .runTaskTimerAsynchronously(new PlotExpireCleanup(this), 20L * 60 * 30, 20L * 60 * getConfig().getInt(""ExpirePlotCleanupTimer"")); } //getSqlManager().plotConvertToUUIDAsynchronously(); } "	0	0	0	0	1	0
"public void updateHours(int projectId, String hoursString) { try { fileManager.writeLine(projectId + "","" + hoursString, FilesConfig.HOURS_DB); } catch (IOException e) { e.printStackTrace(); } } "	0	0	0	0	1	0
"public void showCompanies(List<Company> companies) { System.out.println(); companies.stream().forEach(company -> System.out.println(""Company | id: "" + company.getId() + "", name: "" + company.getName())); } "	0	0	0	0	1	0
"private void waitForUserInteraction() { System.out.println(""Wybierz projekt (0 by wrócić): "");  int userInput = readUserInput(); while (userInput > projectList.size() || userInput < 0) { System.out.println(""Błąd wczytywania""); userInput = readUserInput(); }  handleUserInput(userInput); } "	0	0	0	0	1	0
"@RequestMapping(value = ""/request/get"") public String getRequest( @ModelAttribute(""scope"") List<String> permissions, Model model){  // the token did not have the required permissions, return 403 status if (!(permissions.contains(""manage-requests"") || permissions.contains(""admin""))) { model.addAttribute(""status"", HttpServletResponse.SC_FORBIDDEN); return ""jsonTemplate""; }  JdbcTemplate jdbcTemplate = MainController.getJdbcTemplate(); String queryStr = ""select * from sequ_request_view""; List<RequestStatus> requestList = jdbcTemplate.query( queryStr, new RequestRowMapper());  model.addAttribute(""requestStatus"", requestList); return ""jsonTemplate""; } "	0	0	0	0	1	0
"@Test public void testCreationSingletonConfigurationVariants() { // check no config parameters are set Assert.assertNull(System.getProperty(ConfigurationFactory.CUSTOM_PROPERTIES_LOCATION_JVM)); Assert.assertNull(System.getProperty(ConfigurationFactory.CONTROLLER_NAME)); Assert.assertNull(MonitoringController.class.getClassLoader().getResourceAsStream(ConfigurationFactory.CUSTOM_PROPERTIES_LOCATION_CLASSPATH)); { // NOCS (Block to check the default singleton configuration) final Configuration configuration = ConfigurationFactory.createSingletonConfiguration(); Assert.assertEquals(""KIEKER-SINGLETON"", configuration.getStringProperty(ConfigurationFactory.CONTROLLER_NAME)); }  // { // NOCS (adding properties file in default location) // final String fn = ""build/tests/"" + Configuration.CUSTOM_PROPERTIES_LOCATION_CLASSPATH; // final PrintWriter pw = new PrintWriter(new FileOutputStream(fn, false)); // pw.println(Configuration.CONTROLLER_NAME + ""=KIEKER-SINGLETON-PROPERTIES-FILE-DEFAULT""); // pw.close(); // final Configuration configuration = Configuration.createSingletonConfiguration(); // Assert.assertEquals(""KIEKER-SINGLETON-PROPERTIES-FILE-DEFAULT"", configuration.getStringProperty(Configuration.CONTROLLER_NAME)); // }  { // NOCS (adding properties file in custom location) System.setProperty(ConfigurationFactory.CUSTOM_PROPERTIES_LOCATION_JVM, TestConfigurationFactoryMethods.EXAMPLE_CONFIG_FILE_IN_TRUNK); final Configuration configuration = ConfigurationFactory.createSingletonConfiguration(); Assert.assertEquals(""KIEKER-TEST"", configuration.getStringProperty(ConfigurationFactory.CONTROLLER_NAME)); } { // NOCS (adding JVM property) final String ctrlName = ""KIEKER-TEST-JVMPARAM""; System.setProperty(ConfigurationFactory.CONTROLLER_NAME, ctrlName); final Configuration configuration = ConfigurationFactory.createSingletonConfiguration(); Assert.assertEquals(ctrlName, configuration.getStringProperty(ConfigurationFactory.CONTROLLER_NAME)); } // clean up after us System.clearProperty(ConfigurationFactory.CUSTOM_PROPERTIES_LOCATION_JVM); System.clearProperty(ConfigurationFactory.CONTROLLER_NAME); } "	0	0	0	0	1	0
"private static void leave(String channelName, boolean dummy) { if (!in(channelName) || channelName.equals(App.bot.getNick())) { App.logger.debug(""In channel: "" + in(channelName)); App.logger.debug(""Bot channel: "" + channelName.equals(App.bot.getNick())); return; } App.logger.info(""Leaving channel: "" + channelName); get(channelName).leave(); BotConfigHelper.removeFromCurrentChannels(APIConfig.getBotConfig(), channelName); APIConfig.writeBotConfig(); App.bot.getUserChannelDao().getChannel(""#"" + channelName).send().part(); } "	0	0	0	0	1	0
"private void fetchFlags(List<WebDavMessage> startMessages, MessageRetrievalListener<WebDavMessage> listener) throws MessagingException { HashMap<String, String> headers = new HashMap<String, String>(); String messageBody; List<Message> messages = new ArrayList<Message>(20); String[] uids;  if (startMessages == null || startMessages.isEmpty()) { return; }  if (startMessages.size() > 20) { List<WebDavMessage> newMessages = new ArrayList<WebDavMessage>(startMessages.size() - 20); for (int i = 0, count = startMessages.size(); i < count; i++) { if (i < 20) { messages.set(i,  startMessages.get(i)); } else { newMessages.set(i - 20, startMessages.get(i)); } }  fetchFlags(newMessages, listener); } else { messages.addAll(startMessages); }  uids = new String[messages.size()];  for (int i = 0, count = messages.size(); i < count; i++) { uids[i] = messages.get(i).getUid(); }  messageBody = getMessageFlagsXml(uids); headers.put(""Brief"", ""t""); DataSet dataset = processRequest(this.mFolderUrl, ""SEARCH"", messageBody, headers);  if (dataset == null) { throw new MessagingException(""Data Set from request was null""); }  Map<String, Boolean> uidToReadStatus = dataset.getUidToRead();  for (int i = 0, count = messages.size(); i < count; i++) { if (!(messages.get(i) instanceof WebDavMessage)) { throw new MessagingException(""WebDavStore fetch called with non-WebDavMessage""); } WebDavMessage wdMessage = (WebDavMessage) messages.get(i);  if (listener != null) { listener.messageStarted(wdMessage.getUid(), i, count); }  try { wdMessage.setFlagInternal(Flag.SEEN, uidToReadStatus.get(wdMessage.getUid())); } catch (NullPointerException e) { Log.v(LOG_TAG,""Under some weird circumstances, setting the read status when syncing from webdav threw an NPE. Skipping.""); }  if (listener != null) { listener.messageFinished(wdMessage, i, count); } } } "	1	0	1	0	0	0
"public void invoke(MessageParser msgp) { CookieClickerAccount user = getAccountForUser(msgp.getAuthor());  if (messages.containsKey(msgp.getAuthor().getLongID())) { IMessage msg = messages.remove(msgp.getAuthor().getLongID()).get(); Utilities4D4J.edit(msg, ""RedBot Cookie Clicker"", ""Session expired. Use `cookies` command again to get a new one."", false); }  IMessage msg = msgp.reply(user.toString()).get();  messages.put(msgp.getAuthor().getLongID(), new Utilities4D4J.SerializableMessage(msg));  Utilities4D4J.addReactions(msg, CLICK_UPGRADE_EMOJI, COOKIE_EMOJI, AUTO_UPGRADE_EMOJI); save(); } "	0	0	0	0	1	0
@Override public boolean isValid(double in) { return in == value; } 	0	0	0	0	1	0
private void processElement(WindowedValue<KV<K, V>> windowedValue) throws Exception { final KV<K, V> kv = windowedValue.getValue(); final WindowedValue<V> updatedWindowedValue = WindowedValue.of(kv.getValue(), windowedValue.getTimestamp(), windowedValue.getWindows(), windowedValue.getPane()); timerInternals.setKey(kv.getKey()); ReduceFnRunner<K, V, Iterable<V>, BoundedWindow> reduceFnRunner = newReduceFnRunner(kv.getKey()); reduceFnRunner.processElements(Collections.singletonList(updatedWindowedValue)); reduceFnRunner.persist(); } 	0	0	0	0	1	0
"@Test @Ignore(""Autowire issues"") public void testgetStimulusContent () throws SQLException, ReturnStatusException { long bankKey = 0; long itemKey = 0; AccLookup accommodations = null; IITSDocument iITSDocument = contentService.getStimulusContent (bankKey, itemKey, accommodations); Assert.assertTrue (iITSDocument != null); if (iITSDocument != null) { _logger.info (""Base Uri::"" + iITSDocument.getBaseUri ()); _logger.info (""Bank Key::"" + iITSDocument.getBankKey ()); _logger.info (""Answer Key::"" + iITSDocument.getAnswerKey ()); _logger.info (""Copy right Key::"" + iITSDocument.getCopyright ()); _logger.info (""Credit Key::"" + iITSDocument.getCredit ()); _logger.info (""Folder Key::"" + iITSDocument.getFolderName ()); _logger.info (""Format Key::"" + iITSDocument.getFormat ()); _logger.info (""Grade Key::"" + iITSDocument.getGrade ()); _logger.info (""Grid Answer Key::"" + iITSDocument.getGridAnswerSpace ()); _logger.info (""Group Id Key::"" + iITSDocument.getGroupID ()); _logger.info (""ID Key::"" + iITSDocument.getID ()); _logger.info (""Item Key::"" + iITSDocument.getItemKey ()); _logger.info (""Parent Folder name Key::"" + iITSDocument.getParentFolderName ()); _logger.info (""Render Spec Key::"" + iITSDocument.getRendererSpec ()); _logger.info (""Stimulus Key::"" + iITSDocument.getStimulusKey ()); _logger.info (""Dri Dir Segments Key::"" + iITSDocument.getBaseUriDirSegments ()); } } "	0	0	0	0	1	0
@Test public void testOccupationConfigWithSettings() { DateTime now = new DateTime(); DateTime after = now.plusDays(10); List<Interval> intervals = new ArrayList<>(); while (now.isBefore(after)) { intervals.add(new Interval(now.hourOfDay().setCopy(10), now.hourOfDay().setCopy(20))); now = now.plusDays(1); }  //DateTime start, DateTime end, Boolean allDay, Integer repeatsEvery, Frequency frequency, //List<Integer> weekdays, MonthlyType monthlyType, List<Interval> intervals  ExplicitConfigWithSettings config = new ExplicitConfigWithSettings(now, after, Boolean.TRUE, 1, ExplicitConfigWithSettings.Frequency.DAILY, Arrays.asList(new Integer[] { 1, 2, 3 }), MonthlyType.DAY_OF_MONTH, intervals);  JsonElement externalize = config.externalize();  OccupationConfig internalize = config.internalize(externalize); } 	1	0	1	0	1	0
"@Test public void testGetDoubleArrayParameter1() { System.out.println(""getDoubleArrayParameter""); String parameterName = ""dArray""; double[] expResult = new double[] { 0.1, 0.2, 0.3, 0.4, 0.5 }; double[] result = sut.getDoubleArrayParameter(parameterName); assertArrayEquals(expResult, result, 0.00001); } "	0	0	0	0	1	0
"@NotNull private static String forwardRef(@NotNull String varName) { return ""<error descr=\""Forward reference\"">"" + varName + ""</warning>""; } "	0	0	1	0	1	0
"public static void writePvValues(Writer writer, List<PermissibleValue> pvs, String fileName, Properties props) { if(pvs.size() > 10) { writePvsToFile(writer, pvs, fileName, props); } else { for (PermissibleValue pv : pvs){ writeElementStart(writer, ""option"");  writeElement(writer, ""value"", pv.getValue()); writeElementEnd(writer,""option"");  } } } "	0	0	0	0	1	0
public void moveUp() { // TODO Auto-generated method stub setDirection(Direction.UP); setDy(-2); } 	1	1	1	1	0	0
public void moveRight() { // TODO Auto-generated method stub setDirection(Direction.RIGHT); setDx(2);  } 	1	1	1	1	0	0
private void drawRightSelectorBar(Canvas canvas) { if (mZoneSelectionMode || mCurSelecting == MODE_CHANGE) { int selectableZonesCount = selectableZones.size(); for (int i = 0; i < selectableZonesCount; i++) { Zone zone = selectableZones.get(i);  float percent = 1; if (mCurSelecting == MODE_CHANGE) { percent = mZoneSelectionMode ? mCurAnimationProgress : 1 - mCurAnimationProgress; } int X1 = (int) (contentWidth - 60 * percent * density); int X2 = (int) (X1 + 40 * density); int Y1 = contentHeight * i / selectableZonesCount; int Y2 = contentHeight * (i + 1) / selectableZonesCount;  fillPaint.setColor(round.target.getFillColor(zone.zone)); canvas.drawRect(X1, Y1 + density, X2, Y2 - density, fillPaint);  borderPaint.setColor(round.target.getStrokeColor(zone.zone)); canvas.drawRect(X1, Y1 + density, X2, Y2 - density, borderPaint);  // For yellow and white background use black font color textPaint.setColor(round.target.getTextColor(zone.zone)); canvas.drawText(zone.text, X1 + (X2 - X1) / 2, Y1 + (Y2 - Y1) / 2 + 10 * density, textPaint); } } } 	0	0	0	1	1	0
"@ApiOperation(value = ""根据标题获得故事列表"", notes = """") @RequestMapping(value = ""/getStoryListByTitle"", method = {RequestMethod.GET}) @ResponseBody public ResponseData<List<Story>> getStoryListByTitle( @ApiParam(""查询字段"") @RequestParam(""query"") String query, @ApiParam(""OFFSET"") @RequestParam int offset, @ApiParam(""LIMIT"") @RequestParam int limit, HttpServletRequest request, HttpServletResponse response) { ResponseData<List<Story>> responseData = new ResponseData<>(); List<Story> storyList = storyService.getStoryListByTitle(query, offset, limit); responseData.jsonFill(1, null, storyList); responseData.setCount(storyService.getStoryCount()); return responseData; } "	0	0	0	0	1	0
"@Override public StoreFileResult getDirectory(String schemaName, String path) { UBuilder uBuilder = new UBuilder(PATH_SLASH, schemaName, ""/"", path); Request request = Request.Get(uBuilder.build()); return commonServiceRequest(request, null, null, StoreFileResult.class, 200); } "	0	0	0	0	1	0
public static void shutdownAndExit(int exitCode, int fastExit) { Rts.shutdownAndExit(exitCode, fastExit == 1, true); } 	0	0	0	0	1	0
public static void shutdownAndSignal(int signal, int fastExit) { Rts.shutdownAndSignal(signal, fastExit == 1); } 	0	0	1	0	1	0
"private void processObjectPropForm(VitroRequest vreq, EditConfigurationVTwo editConfiguration) { editConfiguration.setVarNameForObject(""objectVar""); editConfiguration.setObject(objectUri); //this needs to be set for the editing to be triggered properly, otherwise the 'prepare' method //pretends this is a data property editing statement and throws an error //TODO: Check if null in case no object uri exists but this is still an object property } "	0	0	0	0	1	0
private boolean updatePartialSharedResources( IFileSystemModificationActivity activity) {  if (activity instanceof FileActivity) { FileActivity fileActivity = ((FileActivity) activity); SPath path = fileActivity.getPath(); IFile file = path.getFile();  if (file == null) return true;  IProject project = file.getProject();  switch (fileActivity.getType()) { case CREATED: if (!file.exists()) return true;  if (projectMapper.isPartiallyShared(project)) projectMapper.addResources(project, Collections.singletonList(file)); break; case REMOVED: if (!isShared(file)) return false;  if (projectMapper.isPartiallyShared(project)) projectMapper.removeResources(project, Collections.singletonList(file));  break; case MOVED: IFile oldFile = fileActivity.getOldPath().getFile(); if (oldFile == null || !isShared(oldFile)) return false;  if (projectMapper.isPartiallyShared(project)) { projectMapper.removeAndAddResources(project, Collections.singletonList(oldFile), Collections.singletonList(file)); }  break; } } else if (activity instanceof FolderCreatedActivity) { IFolder folder = activity.getPath().getFolder();  if (folder == null) return true;  IProject project = folder.getProject();  if (projectMapper.isPartiallyShared(project) && isShared(folder.getParent())) { projectMapper.addResources(project, Collections.singletonList(folder)); } } else if (activity instanceof FolderCreatedActivity) { IFolder folder = activity.getPath().getFolder();  if (folder == null) return true;  IProject project = folder.getProject();  if (!isShared(folder)) return false;  if (projectMapper.isPartiallyShared(project)) { projectMapper.removeResources(project, Collections.singletonList(folder)); } } return true; } 	0	0	0	0	1	0
private void complete() { if (processor.complete()) { outbox.offer(DONE_ITEM); } else { progTracker.notDone(); } } 	0	0	0	0	1	0
public Request withMode(CompleteContext.Mode mode) { return new Request(c, requestURI, context, mode, format); } 	0	0	0	0	1	0
public Request withBindings(Bindings newBindings) { return new Request(c, requestURI, newBindings, mode, format); } 	0	0	0	0	1	0
"public T withName(String name) { this.name = name; properties.setProperty(NAME, name); // if log-file is not already set properties.putIfAbsent(LOG_FILE, new File(name + "".log"").getAbsolutePath().toString()); return (T) this; } "	0	0	1	1	1	0
"private void initCurrentUserIfNecessary() { if ("""".equals(currentUser)) { JiraAuthenticationContext authenticationContext = ComponentAccessor .getJiraAuthenticationContext(); currentUser = authenticationContext.getUser().getKey(); setUserPickerObjectBasedOnCurrentUser(); } } "	0	0	1	0	1	0
"public static void register(){ if (registered) return; registered = true; FMLInterModComms.sendMessage(""Waila"", ""register"", ""mcjty.modtut.compat.waila.WailaCompatibility.load""); } "	0	0	0	0	1	0
@Override public synchronized void unregisterEventListener(Object listener) { this.eventDispatcher.unregister(listener); if (this.eventListeners != null) { this.eventListeners.remove(listener); if (this.eventListeners.isEmpty()) { this.eventListeners = null; } } } 	0	0	1	1	0	0
public Word update(Word updatableWord) { currentSession().update(updatableWord); for (WordIntroduction wordIntroduction : updatableWord.getWordIntroductions()) { wordIntroduction.setWord(updatableWord); currentSession().update(wordIntroduction); } return updatableWord; } 	0	0	0	0	1	0
"public void save(List<GraphicalElement> list, String path) throws IOException {if(!path.contains("".xml"")) path+="".xml""; FileWriter fw = new FileWriter(path); //Write the MapComposer version fw.write(""<synchronized>\n\t<version>1.0.3</version>\n""); //Write all the GraphicalElement from the list argument for (GraphicalElement ge : list) { //Write the GraphicalElement start xml tag fw.write(""\t<"" + ge.getClass().getName() + "">\n""); //Write all the ConfigurationAttribute get from the GraphicalElement graphicalElement for(ConfigurationAttribute ca : ge.getSavableAttributes()){ //Write the ConfigurationAttribute start xml tag fw.write(""\t\t<""+ca.getClass().getName()+"">\n""); //Get all the ConfigurationAttribute fields and write them Iterator<Map.Entry<String, Object>> it =  ca.getAllFields().entrySet().iterator(); while(it.hasNext()){ Map.Entry<String, Object> entry = it.next(); fw.write(""\t\t\t<"" + entry.getKey() + "">\n""); fw.write(""\t\t\t\t""+entry.getValue().toString()+""\n""); fw.write(""\t\t\t</"" + entry.getKey() + "">\n""); } //Write the ConfigurationAttribute start xml tag fw.write(""\t\t</""+ca.getClass().getName()+"">\n""); } //Write the GraphicalElement start xml tag fw.write(""\t</""+ ge.getClass().getName()+"">\n""); } fw.write(""</synchronized>""); fw.close(); } "	0	0	0	0	1	0
public ImageReader createReaderInstance(Object extension) throws IOException { return new SVGImageReader(this); } 	0	0	0	1	0	0
"private void finalizeBracket(){ if(bracketPane.isComplete()){ btoolBar.setDisable(true); bracketPane.setDisable(true); simulate.setDisable(false); login.setDisable(false); //save the bracket along with account info seralizeBracket(selectedBracket);  }else{ infoAlert(""You can only finalize a bracket once it has been completed""); //go back to bracket section selection screen // bracketPane=new BracketPane(selectedBracket); displayPane(bracketPane);  } //bracketPane=new BracketPane(selectedBracket);    } "	0	0	0	1	0	0
private boolean isThemeFoundInWords(List<Word> words, String themeName) { boolean result = false; for(Word word : words) { if(word.getTheme().getName().equals(themeName)) { return true; } } return result; } 	0	0	1	0	1	0
public ArrayList<Point> getEnemyStartLocations() { return enemyStartLocations; } 	0	0	0	1	0	0
@Test public void findAllTest () { List<Supermercado> lista = repositorioSupermercado.findAll();  assertEquals(this.cantidad, lista.size()); } 	0	0	1	1	1	0
"@Override public ActionInfo mapRow(ResultSet resultSet, int i) throws SQLException { ActionInfo actionInfo = new ActionInfo(); actionInfo.setActionId(resultSet.getLong(""aid"")); actionInfo.setCmdletId(resultSet.getLong(""cid"")); actionInfo.setActionName(resultSet.getString(""action_name"")); actionInfo.setArgsFromJsonString(resultSet.getString(""args"")); actionInfo.setResult( StringEscapeUtils.unescapeJava(resultSet.getString(""result""))); actionInfo .setLog(StringEscapeUtils.unescapeJava(resultSet.getString(""log""))); actionInfo.setSuccessful(resultSet.getBoolean(""successful"")); actionInfo.setCreateTime(resultSet.getLong(""create_time"")); actionInfo.setFinished(resultSet.getBoolean(""finished"")); actionInfo.setFinishTime(resultSet.getLong(""finish_time"")); actionInfo.setProgress(resultSet.getInt(""progress"")); return actionInfo; } "	0	0	0	0	1	0
public boolean save(String backupFileName) throws Exception {  // Check if a save is needed if(!updated) return false;  //backup the file if(backupFileName != null) { BufferedReader in = new BufferedReader(new FileReader(file)); BufferedWriter out = new BufferedWriter(new FileWriter(backupFileName)); int ch; while((ch = in.read()) != -1) out.write(ch); in.close(); out.close(); }  TransformerFactory tFactory = TransformerFactory.newInstance(); Transformer transformer = tFactory.newTransformer(); // transformer.getOutputProperties().list(System.out);  if (doc.getDoctype() != null){ transformer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC, doc.getDoctype().getPublicId()); transformer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, doc.getDoctype().getSystemId()); }  DOMSource source = new DOMSource(doc); StreamResult result = new StreamResult(new File(file)); transformer.transform(source, result);  return true; } 	0	0	0	0	1	0
public void setMenuOpen(boolean menuOpen) { this.menuOpen = menuOpen; } 	0	0	1	1	0	0
@Override public void onClick(View v) { Intent intent = TagsPlugin.newTagDialog(getActivity()); startActivity(intent); AndroidUtilities.callOverridePendingTransition(getActivity(), R.anim.slide_left_in, R.anim.slide_left_out); } 	0	0	0	0	1	0
"public void init(boolean forceNewConnection) throws IOException, FailedLoginException, SecurityException { LOGGER.info(""Trying to connect to JMX Server at "" + this.toString()); connection = ConnectionManager.getInstance().getConnection(yaml, forceNewConnection); LOGGER.info(""Connected to JMX Server at "" + this.toString()); this.refreshBeansList(); this.getMatchingAttributes(); } "	0	0	1	1	1	0
"@Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState);  vRefreshLayout = view.findViewById(R.id.swiperefresh); vRefreshLayout.setOnRefreshListener( new SwipeRefreshLayout.OnRefreshListener() { @Override public void onRefresh() { // This method performs the actual data-refresh operation. // The method calls setRefreshing(false) when it's finished. loadDisturbances(); } } );  vRecyclerView = view.findViewById(R.id.recyclerview_primary);  vRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity().getApplicationContext())); vRecyclerView.setItemAnimator(new DefaultItemAnimator());  if (!PreferenceManager.getDefaultSharedPreferences(getActivity().getApplication()).getBoolean(""use_card_layout"", false)) { // Cards have their own division by margin, others need a divider vRecyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), DividerItemDecoration.VERTICAL)); }  DisturbanceCardAdapter adapter = new DisturbanceCardAdapter(this.getActivity().getApplicationContext(), null); adapter.setOnItemClickListener(this); vRecyclerView.setAdapter(adapter);  if (savedInstanceState != null) { this.disturbances = (Disturbance[]) savedInstanceState.getSerializable(""disturbances""); this.lastUpdate = new DateTime(savedInstanceState.getLong(""updated"")); this.setData(this.disturbances); } else { loadDisturbances(); } } "	0	0	0	0	1	0
"Object getScopedValue(AbstractBundleState bundleState) {  // For non-factory services, return the value Object value = valueProvider.getValue(); if (value instanceof ServiceFactory == false) return value;  // Get the ServiceFactory value Object result = null; try { if (factoryValues == null) factoryValues = new HashMap<Long, ServiceFactoryHolder>();  ServiceFactoryHolder factoryHolder = getFactoryHolder(bundleState); if (factoryHolder == null) { ServiceFactory factory = (ServiceFactory) value; factoryHolder = new ServiceFactoryHolder(bundleState, factory); factoryValues.put(bundleState.getBundleId(), factoryHolder); }  result = factoryHolder.getService();  // If the service object returned by the ServiceFactory object is not an instanceof all the classes named // when the service was registered or the ServiceFactory object throws an exception, // null is returned and a Framework event of type {@link FrameworkEvent#ERROR} // containing a {@link ServiceException} describing the error is fired. if (result == null) { ServiceException sex = new ServiceException(""Cannot get factory value"", ServiceException.FACTORY_ERROR); FrameworkEventsPlugin eventsPlugin = serviceManager.getFrameworkEventsPlugin(); eventsPlugin.fireFrameworkEvent(bundleState, FrameworkEvent.ERROR, sex); } } catch (Throwable th) { ServiceException sex = new ServiceException(""Cannot get factory value"", ServiceException.FACTORY_EXCEPTION, th); FrameworkEventsPlugin eventsPlugin = serviceManager.getFrameworkEventsPlugin(); eventsPlugin.fireFrameworkEvent(bundleState, FrameworkEvent.ERROR, sex); } return result; } "	0	0	0	0	1	0
"@SuppressWarnings(""rawtypes"") private void handleUpdate(final SqlStoreObject<T> storeObject, final Handler<AsyncResult<IWriteEntry>> resultHandler) { SqlSequence seq = storeObject.generateSqlUpdateStatement(); if (getQuery() != null) { if (getQuery().getNativeCommand() != null) { throw new IllegalStateException(""Cann not update with a native command""); } getQuery().buildQueryExpression(null, res -> { if (res.succeeded()) { seq.combineWhereExpressions(((SqlExpression) res.result())); update(storeObject, resultHandler, seq); } else { resultHandler.handle(Future.failedFuture(res.cause())); } }); } else { update(storeObject, resultHandler, seq); } } "	0	0	0	0	1	0
"public String writeToS3(final String accountId, final String region, final Date instanceBootTime, final String logData, final String logType, final String instanceId) throws IOException { String fileName = null;  DateTime dateTime = new DateTime(instanceBootTime, UTC);  String keyName = Paths.get( accountId, region, dateTime.toString(""YYYY""), dateTime.toString(""MM""), dateTime.toString(""dd""), instanceId + ""-"" + dateTime).toString();  switch (LogType.valueOf(logType)) {  case USER_DATA: fileName = TAUPAGE_YAML; break;  case AUDIT_LOG: fileName = AUDIT_LOG_FILE_NAME + new DateTime(UTC) + LOG_GZ; break;  default: logger.error(""Wrong logType given: "" + logType); break; }  ObjectMetadata metadata = new ObjectMetadata(); byte[] decodedLogData = Base64.decode(logData); metadata.setContentLength(decodedLogData.length);  InputStream stream = new ByteArrayInputStream(decodedLogData);  putObjectToS3(bucketName, fileName, keyName, metadata, stream);  return Paths.get(bucketName, keyName, fileName).toString(); } "	0	0	1	0	1	0
"@Override protected Void doInBackground(Void... voids) {  for(int i=3;i>=0;i--){  // 3 minutes for(int j=59;j>=0;j--){ // 59 seconds  if(isCancelled()){ Log.v(""cancel"",""called""); return null; }  Log.v(""timer"",i+"" mins ""+j+"" seconds""); publishProgress(new Pair<String, String>(i+"""",j+""""));  try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); }  } }  return null; } "	0	0	1	1	0	0
@Override public String removeUser(Map<String, Object> request) { Keycloak keycloak = KeyCloakConnectionProvider.getConnection(); String userId = (String) request.get(JsonKey.USER_ID); UserResource resource = keycloak.realm(cache.getProperty(JsonKey.SSO_REALM)).users().get(userId);  if (isNotNull(resource)) { try { resource.remove(); } catch (Exception ex) { ProjectCommonException projectCommonException = new ProjectCommonException(ex.getMessage(), ex.getMessage(), ResponseCode.CLIENT_ERROR.getResponseCode()); throw projectCommonException; }  } return JsonKey.SUCCESS; } 	0	0	0	0	1	0
private void verifyEmail(String userId) { keycloak.realm(cache.getProperty(JsonKey.SSO_REALM)).users().get(userId).sendVerifyEmail(); } 	0	0	0	0	1	0
public List<Resource<T>> toList() { return Arrays.asList(this); } 	0	0	1	1	0	0
private static Set<JClassLiteral> classLiteralsIn(JExpression exp) { final Set<JClassLiteral> literals = new HashSet<JClassLiteral>(); class ClassLiteralFinder extends JVisitor { @Override public void endVisit(JClassLiteral classLiteral, Context ctx) { literals.add(classLiteral); } } (new ClassLiteralFinder()).accept(exp); return literals; } 	0	0	0	0	1	0
"private void onGet(Message message) { String key = message.popFrame().getString(); String value = map.get(key); if (value == null) { value = """"; }  pipe.send(new Message(value)); } "	0	0	0	0	1	0
@Override public String get(String key) { Message message = new Message(); message.addFrame(GET); message.addFrame(new Message.Frame(key)); pipe.send(message);  String value = pipe.receiveMessage().popFrame().getString(); if (value.isEmpty()) { value = null; }  return value; } 	0	0	0	0	1	0
"@Test public void SUMODefaultAgent() throws SAXException, IOException, ParserConfigurationException { Random random 	= new Random(1337); String dir 		= System.getProperty(""user.dir"")+""/tests/Agent/SUMODefaultAgent/""; String sumocfg 	= System.getProperty(""user.dir"")+""/tests/Agent/SUMODefaultAgent/orgnormtest.cfg.xml""; String masXML 	= ""orgnormtest.mas.xml"";  DataModel dataModel = new DataModelXML(dir,masXML); MASData masData		= dataModel.getMASData();  HashMap<String, String> options = new LinkedHashMap<String, String>(); options.put(""e"", Integer.toString(masData.simulationLength)); options.put(""start"", ""1""); options.put(""quit-on-end"", ""1"");  SumoTraciConnection conn = SimulationModelTraaS.initializeWithOptions(options,""sumo-gui"", sumocfg); RoadNetwork rn = dataModel.instantiateRoadNetwork(); ArrayList<Route> routes = dataModel.getRoutes(rn);  HashMap<Agent,Integer> agentPairList 	= TrafficMASController.instantiateAgents(masData, random, routes, rn); HashMap<String, Agent> completeAgentMap = SimulationModelTraaS.addAgents(agentPairList, conn); HashMap<String, Agent> currentAgentMap 	= SimulationModelTraaS.updateCurrentAgentMap(completeAgentMap, new LinkedHashMap<String, Agent>(), conn); Map<String, Organisation> orgsMap	= TrafficMASController.instantiateOrganisations(dataModel, rn); HashMap<Agent, AgentAction> actions = new HashMap<Agent, AgentAction>();  try { int i = 0; while (i++ < masData.simulationLength) { currentAgentMap 		= SimulationModelTraaS.updateCurrentAgentMap(completeAgentMap, currentAgentMap, conn); StateData stateData 	= SimulationModelTraaS.getStateData(conn, true); currentAgentMap 		= TrafficMASController.updateAgents(completeAgentMap, rn, stateData); rn						= TrafficMASController.updateRoadNetwork(rn, stateData); orgsMap					= TrafficMASController.updateOrganisations(orgsMap, stateData); actions					= TrafficMASController.nextMASState(i, currentAgentMap, orgsMap, rn); SimulationModelTraaS.simulateAgentActions(actions, conn); } } catch (Exception e) { e.printStackTrace(); } } "	0	0	1	1	0	0
"@Handles(""example.search-cakes"") public JsonEnvelope cakes(final JsonEnvelope query) { return enveloper.withMetadataFrom(query, ""example.cakes-response"").apply(service.cakes());  } "	0	0	1	0	1	0
public void testMultipleTestGetPutMessage() throws Exception { int NTIMES = 1000; for (int i = 0; i < NTIMES; i++) { dbHelper.clear(); testGetPutMessage(); } } 	0	0	1	0	1	0
"@Override public ResourceResponse<DocumentCollection> createCollectionIfNotExists(String databaseName, String id) throws Exception { DocumentCollection collectionInfo = new DocumentCollection(); RangeIndex index = Index.Range(DataType.String, -1); collectionInfo.setIndexingPolicy(new IndexingPolicy(new Index[]{index})); collectionInfo.setId(id);  // Azure Cosmos DB collections can be reserved with throughput specified in request units/second. // Here we create a collection with 400 RU/s. RequestOptions requestOptions = new RequestOptions(); requestOptions.setOfferThroughput(400); String dbUrl = ""/dbs/"" + databaseName; String colUrl = dbUrl + ""/colls/"" + id; boolean create = false; ResourceResponse<DocumentCollection> response = null;  try { response = this.client.readCollection(colUrl, requestOptions); } catch (DocumentClientException dcx) { if (dcx.getStatusCode() == Http.Status.NOT_FOUND) { create = true; } else { log.error(""Error reading collection: "" + id, dcx); } }  if (create) { try { response = this.client.createCollection(dbUrl, collectionInfo, requestOptions); } catch (Exception ex) { log.error(""Error creating collection: "" + id, ex); throw ex; } }  return response; } "	0	0	0	0	1	0
"private void propagate(Map<Long, EntityUpdatedEvent> map, String prefix, final String socketId) { for (Entry<Long, EntityUpdatedEvent> entry : map.entrySet()) { try { String channel = prefix + entry.getKey(); logger.info(""EntityUpdatedEvent.entites: "" + channel + "": "" + entry.getValue().getUpdatedEntities().size());  String gzippedJson = gzip(entry.getValue().toJson());  Result result = pusher.trigger(channel, ""EntityUpdatedEvent.gz"", gzippedJson, socketId);  logger.info(""PUSHER RESULT"" + result.getMessage() + "" : "" + result.getStatus() + "" : "" + result.getHttpStatus()); if (result.getHttpStatus() == 403) { // Pusher Message Quota Reached... } else if (result.getHttpStatus() == 413) { // wooops pusher error (too big ?) this.sendLifeCycleEvent(channel, WegasStatus.OUTDATED, socketId); } } catch (IOException ex) { logger.error(""     IOEX <----------------------"", ex); // } } } "	0	0	0	0	1	0
"public String getBitrateInKbps() { return bitrate + "" kbps""; } "	0	0	1	1	1	0
"@Test public void shouldCheckConnectionAndReturnErrorIfIncorrectViewMentioned() throws Exception { p4 = p4Fixture.createClient(""client"", ""//depot/FolderThatDoesNotExist... //client/..."" ); try{ p4.checkConnection(); } catch(Exception e) { assertThat(e, is(instanceOf(RuntimeException.class))); assertThat(e.getMessage(), containsString(""ERROR: //client/... - no such file(s)"")); } } "	0	0	0	0	1	0
"public String FindOnLinkedIn(String name) { String link = """"; Document doc = null; try { Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(""proxyHost"", 1234)); doc = Jsoup.connect(""https://www.google.lk/search?q="" + name.replace(' ', '+') + ""+linkedin"").userAgent(""Chrome"").timeout(0).get(); //            doc = Jsoup.connect(""https://www.google.lk/search?q=linkedin%3A"" + name.replace(' ', '+') ).userAgent(""Chrome"").timeout(0).get();   } catch (IOException e) { e.printStackTrace(); } Elements elements; elements = doc.select(""cite"");  int i = 0; while (elements.size() > i) { link = elements.get(i).text(); i++; System.out.println(link); if (!link.contains(""/dir/"")) { break; } //            if (link.contains(""lk.linkedin.com/pub/"")) { //                return link; //            } } //        System.out.println(link); if (link.contains(""/dir/"")) { return """"; } if (link.contains(""lk.linkedin.com/"")) { if (!link.contains(""https://"")) link=""https://""+link; return link; } return """"; } "	0	0	0	0	1	0
"@Test public void serveCommandStartsAppServer() throws Exception { given(logging).enabled() .and(brjs).pluginsAccessed(); when(brjs).runThreadedCommand(""serve""); then(logging).infoMessageReceived(SERVER_STARTING_LOG_MSG, ""BladeRunnerJS"") .and(logging).infoMessageReceived(BRJS.Messages.NO_APPS_DISCOVERED, ""system"") .and(logging).infoMessageReceived(BRJS.Messages.NO_APPS_DISCOVERED, ""user"") .and(logging).infoMessageReceived(SERVER_STARTED_LOG_MESSAGE, appServerPort) .and(logging).containsFormattedConsoleMessage(SERVER_STARTUP_MESSAGE + appServerPort +""/"") .and(logging).containsFormattedConsoleMessage(SERVER_STOP_INSTRUCTION_MESSAGE + ""\n"") .and(appServer).requestIs302Redirected(""/"", ""/dashboard""); } "	0	0	1	1	0	0
private void displayAuthor(@NonNull User author, GlideRequests imageLoader) { imageLoader.load(author.getPhotoUrl()).into(vAuthorCircleImage); vAuthorNameText.setText(author.getDisplayName()); } 	0	0	0	0	1	0
public boolean rightClick(Npc npcToClick) { Point rndPoint = npcToClick.nextPoint(); if(ctx.input.move(rndPoint) && npcToClick.contains(rndPoint) && npcToClick.click(false)) { return true; }  return false; } 	0	0	0	1	0	0
public boolean canThieve(int lvlRequired){ if(ctx.skills.realLevel(Constants.SKILLS_THIEVING) >= lvlRequired){ return true; }  return false; } 	0	0	0	1	0	0
public void clickMenuItem(String action){ ctx.menu.click(new Filter<MenuCommand>() { @Override public boolean accept(final MenuCommand menuCommand) { return menuCommand.action.equals(action); } }); } 	0	0	1	1	0	0
@Override public void mouseExited(MouseEvent m){  } 	0	0	1	1	0	0
"public void pickpocketNPC(int npcIDs[]){ if(npcToThieve == null || npcToThieve.tile().distanceTo(ctx.players.local().tile()) > maxTilesAwayToThieve || !npcToThieve.valid()){ npcToThieve = ctx.npcs.select().id(npcIDs).nearest().poll(); npcToThieve.bounds(npcBounds[0], npcBounds[1], npcBounds[2], npcBounds[3], npcBounds[4], npcBounds[5]); }  if(npcToThieve.valid()){ if (!npcToThieve.inViewport()) { if(npcToThieve.tile().distanceTo(ctx.players.local().tile()) > 9) { ctx.movement.step(npcToThieve.tile()); Condition.sleep(Random.nextInt(1200,3000)); }else { ctx.camera.turnTo(npcToThieve.tile()); } } else { if((ctx.menu.opened() && ctx.menu.items().length > 4) || (rightClick(npcToThieve) && ctx.menu.opened() && ctx.menu.items().length > 4)){ Condition.sleep(Random.nextInt(200,600)); if (ctx.players.local().animation() == -1 && !ctx.players.local().inMotion() && !(npcToThieve.interacting() == ctx.players.local())) { if(hovered){ if(!ctx.players.local().inCombat()) { ctx.input.click(true); Condition.sleep(Random.nextInt(200,600)); } }else{ if(!ctx.players.local().inCombat()) { clickMenuItem(""Pickpocket""); Condition.sleep(Random.nextInt(200,600)); } } hovered = false; }else{ if(!hovered) { hoverMenuItem(""Pickpocket""); hovered = true; Condition.sleep(Random.nextInt(200,600)); } } } }  }  } "	0	0	1	1	0	0
protected void applyEntityAI() { this.targetTasks.addTask(1, new EntityAINearestAttackableTarget(this, EntityPlayer.class, true)); this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityPig.class, true)); } 	0	0	0	0	1	0
"@Override public int getSize() throws Exception { if (size == null) { System.out.println(""Querying to get Size""); load(0, 0); } return size; } "	0	0	1	0	1	0
public boolean canSetPitch() { if (media.getMediaType() == MediaType.AUDIO) { return ((AudioPlayer) player).canSetPitch(); } return false; } 	0	0	1	0	1	0
"public String createNewTestSession(JSONObject caps, Integer retries) throws AndroidSdkException, JSONException { SelendroidCapabilities desiredCapabilities = null;  // Convert the JSON capabilities to SelendroidCapabilities try { desiredCapabilities = new SelendroidCapabilities(caps); } catch (JSONException e) { throw new SelendroidException(""Desired capabilities cannot be parsed.""); }  // Find the App being requested for use AndroidApp app = appsStore.get(desiredCapabilities.getAut()); if (app == null) { throw new SessionNotCreatedException( ""The requested application under test is not configured in selendroid server.""); } // adjust app based on capabilities (some parameters are session specific) app = augmentApp(app, desiredCapabilities);  // Find a device to match the capabilities AndroidDevice device = null; try { device = getAndroidDevice(desiredCapabilities); } catch (AndroidDeviceException e) { SessionNotCreatedException error = new SessionNotCreatedException(""Error occured while finding android device: "" + e.getMessage()); e.printStackTrace(); log.severe(error.getMessage()); throw error; }  // If we are using an emulator need to start it up if (device instanceof AndroidEmulator) { AndroidEmulator emulator = (AndroidEmulator) device; try { if (emulator.isEmulatorStarted()) { emulator.unlockEmulatorScreen(); } else { Map<String, Object> config = new HashMap<String, Object>(); if (serverConfiguration.getEmulatorOptions() != null) { config.put(AndroidEmulator.EMULATOR_OPTIONS, serverConfiguration.getEmulatorOptions()); } config.put(AndroidEmulator.TIMEOUT_OPTION, serverConfiguration.getTimeoutEmulatorStart()); if (desiredCapabilities.asMap().containsKey(SelendroidCapabilities.DISPLAY)) { Object d = desiredCapabilities.getCapability(SelendroidCapabilities.DISPLAY); config.put(AndroidEmulator.DISPLAY_OPTION, String.valueOf(d)); }  Locale locale = parseLocale(desiredCapabilities); emulator.start(locale, deviceStore.nextEmulatorPort(), config); } } catch (AndroidDeviceException e) { deviceStore.release(device, app); if (retries > 0) { return createNewTestSession(caps, retries - 1); } throw new SessionNotCreatedException(""Error occured while interacting with the emulator: "" + emulator + "": "" + e.getMessage()); } emulator.setIDevice(deviceManager.getVirtualDevice(emulator.getAvdName())); } boolean appInstalledOnDevice = device.isInstalled(app); if (!appInstalledOnDevice || serverConfiguration.isForceReinstall()) { device.install(app); } else { log.info(""the app under test is already installed.""); }  int port = getNextSelendroidServerPort(); Boolean selendroidInstalledSuccessfully = device.isInstalled(""io.selendroid."" + app.getBasePackage()); if (!selendroidInstalledSuccessfully || serverConfiguration.isForceReinstall()) { AndroidApp selendroidServer = createSelendroidServerApk(app);  selendroidInstalledSuccessfully = device.install(selendroidServer); if (!selendroidInstalledSuccessfully) { if (!device.install(selendroidServer)) { deviceStore.release(device, app);  if (retries > 0) { return createNewTestSession(caps, retries - 1); } } } } else { log.info( ""selendroid-server will not be created and installed because it already exists for the app under test.""); }  // Run any adb commands requested in the capabilities List<String> adbCommands = new ArrayList<String>(); adbCommands.add(""shell setprop log.tag.SELENDROID "" + serverConfiguration.getLogLevel().name()); adbCommands.addAll(desiredCapabilities.getPreSessionAdbCommands());  for (String adbCommandParameter : adbCommands) { device.runAdbCommand(adbCommandParameter); }  // It's GO TIME! // start the selendroid server on the device and make sure it's up try { device.startSelendroid(app, port); } catch (AndroidSdkException e) { log.info(""error while starting selendroid: "" + e.getMessage());  deviceStore.release(device, app); if (retries > 0) { return createNewTestSession(caps, retries - 1); } throw new SessionNotCreatedException(""Error occurred while starting instrumentation: "" + e.getMessage()); } long start = System.currentTimeMillis(); long startTimeOut = 20000; long timemoutEnd = start + startTimeOut; while (device.isSelendroidRunning() == false) { if (timemoutEnd >= System.currentTimeMillis()) { try { Thread.sleep(2000); } catch (InterruptedException e) { } } else { throw new SelendroidException(""Selendroid server on the device didn't came up after "" + startTimeOut / 1000 + ""sec:""); } }  // arbitrary sleeps? yay... // looks like after the server starts responding // we need to give it a moment before starting a session? try { Thread.sleep(500); } catch (InterruptedException e1) { e1.printStackTrace(); }  // create the new session on the device server RemoteWebDriver driver; try { driver = new RemoteWebDriver(new URL(""http://localhost:"" + port + ""/wd/hub""), desiredCapabilities); } catch (Exception e) { e.printStackTrace(); deviceStore.release(device, app); throw new SessionNotCreatedException( ""Error occurred while creating session on Android device"", e); } String sessionId = driver.getSessionId().toString(); SelendroidCapabilities requiredCapabilities = new SelendroidCapabilities(driver.getCapabilities().asMap()); ActiveSession session = new ActiveSession(sessionId, requiredCapabilities, app, device, port, this);  this.sessions.put(sessionId, session);  // We are requesting an ""AndroidDriver"" so automatically switch to the webview if (BrowserType.ANDROID.equals(desiredCapabilities.getAut())) { // arbitrarily high wait time, will this cover our slowest possible device/emulator? WebDriverWait wait = new WebDriverWait(driver, 60); // wait for the WebView to appear wait.until(ExpectedConditions.visibilityOfElementLocated(By .className( ""android.webkit.WebView""))); driver.switchTo().window(""WEBVIEW""); // the 'android-driver' webview has an h1 with id 'AndroidDriver' embedded in it wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""AndroidDriver""))); }  return sessionId; } "	0	0	0	1	0	0
@Override public boolean dispatchTouchEvent(MotionEvent ev) {   ResizableViewLayout.handleDispatchTouchEvent(ev, mResizeLayout); return super.dispatchTouchEvent(ev); } 	0	0	0	0	1	0
"public HttpResponse sendRequest(final HttpRequest httpRequest, @Nullable InetSocketAddress remoteAddress, final boolean retryIfSslFails) throws SocketConnectionException { if (remoteAddress == null) { remoteAddress = socketAddressFromHostHeader(httpRequest); }  logger.debug(""Sending to: {} request: {}"", remoteAddress, httpRequest);  EventLoopGroup group = new NioEventLoopGroup();  try { final HttpClientInitializer channelInitializer = new HttpClientInitializer(httpRequest.isSecure() != null && httpRequest.isSecure());  // make the connection attempt new Bootstrap() .group(group) .channel(NioSocketChannel.class) .option(ChannelOption.AUTO_READ, true) .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT) .option(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(8 * 1024, 32 * 1024)) .handler(channelInitializer) .connect(remoteAddress) .addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { if (future.isSuccess()) { // send the HTTP request future.channel().writeAndFlush(httpRequest); } else { channelInitializer.getResponseFuture().setException(future.cause()); } } });  // wait for response HttpResponse httpResponse = channelInitializer.getResponseFuture().get(ConfigurationProperties.maxSocketTimeout(), TimeUnit.MILLISECONDS); logger.debug(""Received response: {}"", httpResponse);  // shutdown client group.shutdownGracefully(0, 1, TimeUnit.MILLISECONDS);  return httpResponse;  } catch (TimeoutException e) { throw new SocketCommunicationException(""Response was not received after "" + ConfigurationProperties.maxSocketTimeout() + "" milliseconds, to make the proxy wait longer please use \""mockserver.maxSocketTimeout\"" system property or ConfigurationProperties.maxSocketTimeout(long milliseconds)"", e.getCause()); } catch (ExecutionException e) { if (retryIfSslFails) { return sendRequest(httpRequest.withSecure(!(httpRequest.isSecure() != null && httpRequest.isSecure()))); } else { Throwable cause = e.getCause(); if (cause instanceof ConnectException) { throw new SocketConnectionException(""Unable to connect to socket "" + remoteAddress, cause); } else if (cause instanceof UnknownHostException) { throw new SocketConnectionException(""Unable to resolve host "" + remoteAddress, cause); } else if (cause instanceof NotSslRecordException) { return sendRequest(httpRequest.withSecure(false)); } else if (cause instanceof IOException) { throw new SocketConnectionException(cause.getMessage(), cause); } else { throw new RuntimeException(""Exception while sending request"", e); } } } catch (InterruptedException e) { throw new RuntimeException(""Exception while sending request"", e); } finally { // shut down executor threads to exit group.shutdownGracefully(0, 1, TimeUnit.MILLISECONDS); }  } "	0	0	0	0	1	0
@VisibleForTesting public void scan() throws IOException { consumerLock.lock(); try { long start = System.currentTimeMillis(); checkRunning(); postProcess(); submitReady(); long end = System.currentTimeMillis(); counters.recordPnfsSweep(end, end - start); } finally { consumerLock.unlock(); } } 	0	0	1	0	0	0
"private void buildQueue(Stream<Path> ingestStream, ArrayBlockingQueue<Metacard> metacardQueue, long start) {  if (includeContent) { File inputFile = new File(filePath); Map<String, Serializable> arguments = new HashMap<>(); arguments.put(DumpCommand.FILE_PATH, inputFile.getParent() + File.separator); arguments.put(FILE_NAME, inputFile.getName());  ByteSource byteSource = com.google.common.io.Files.asByteSource(inputFile);  zipDecompression = getZipDecompression(); if (zipDecompression != null) {  try (InputStream inputStream = byteSource.openBufferedStream()) { List<Metacard> metacardList = zipDecompression.transform(inputStream, arguments); if (metacardList.size() != 0) { metacardFileMapping = generateFileMap(new File(inputFile.getParent(), METACARD_PATH)); fileCount.set(metacardList.size()); metacardQueue.addAll(metacardList); } } catch (IOException | CatalogTransformerException e) { LOGGER.error(""Unable to transform zip file into metacard list."", e); INGEST_LOGGER.error(""Unable to transform zip file into metacard list."", e); } } else { LOGGER.error( ""No Zip Transformer found.  Unable to transform zip file into metacard list.""); INGEST_LOGGER.error( ""No Zip Transformer found.  Unable to transform zip file into metacard list.""); }  } else {  ingestStream.map(Path::toFile) .filter(file -> !file.isDirectory()) .forEach(file -> {  if (file.isHidden()) { ignoreCount.incrementAndGet(); } else { String extension = ""."" + FilenameUtils.getExtension(file.getName());  if (ignoreList != null && (ignoreList.contains(extension) || ignoreList.contains(file.getName()))) { ignoreCount.incrementAndGet(); printProgressAndFlush(start, fileCount.get(), ingestCount.get() + ignoreCount.get()); } else { Metacard result; try { result = readMetacard(file); } catch (IngestException e) { result = null; logIngestException(e, file); if (failedIngestDirectory != null) { moveToFailedIngestDirectory(file); } printErrorMessage( ""Failed to ingest file ["" + file.getAbsolutePath() + ""].""); INGEST_LOGGER.warn(""Failed to ingest file [{}]."", file.getAbsolutePath()); }  if (result != null) { try { metacardQueue.put(result); } catch (InterruptedException e) { INGEST_LOGGER.error( ""Thread interrupted while waiting to 'put' metacard: {}"", result.getId(), e); } } } } }); } doneBuildingQueue.set(true); } "	0	0	0	0	0	1
@Override protected void onPostExecute(Void result) { if (mNotifications != null) { //Execute post data switch (what) { case UPDATE: //Notify all the changes executeNotifications(Payload.CHANGE); postUpdate(false); break; case FILTER: //Notify all the changes executeNotifications(Payload.FILTER); postFilter(); break; } } mFilterAsyncTask = null; } 	0	0	0	0	1	0
public boolean isSipLoggingEnabled() { return this.sipLoggingEnabled; } 	1	0	0	0	1	0
public boolean isArbitraryLoggingEnabled() { return this.arbitraryLoggingEnabled; } 	1	0	0	0	1	0
public boolean isJabberLoggingEnabled() { return this.jabberLoggingEnabled; } 	1	0	0	0	1	0
"public void init(){ intent = new Intent(LoginActivity.this, ProfileActivity.class); context = getApplicationContext(); settings = getSharedPreferences(PREFS_NAME, 0); editor = settings.edit(); et_email = (EditText) findViewById(R.id.edittext_login_email); et_passwd = (EditText) findViewById(R.id.edittext_password);  buttonLogin = (Button) findViewById(R.id.button_login); buttonLoginFingerprint = (Button) findViewById(R.id.button_login_fingerprint); buttonLoginVoicedna = (Button) findViewById(R.id.button_login_voicedna); buttonLoginMagiclink = (Button) findViewById(R.id.button_login_magiclink);  //set onclick listeners for the buttons buttonLogin.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { email = et_email.getText().toString(); passwd = et_passwd.getText().toString(); json_request = String.format(""{ \""session\"": { \""email\"": \""%s\"", \""password\"": \""%s\"" } }"",email, passwd);  if (!email.contains(""@"")) { Toast.makeText(context, ""Invalid Email!"", Toast.LENGTH_SHORT).show(); return; } else if(passwd.length() < 6){ Toast.makeText(context, ""Password too small!"", Toast.LENGTH_SHORT).show(); return; }  try { response = ZapHelper.post_zap(client, ZapHelper.zaplogin_url, json_request); if (response.isSuccessful()) { login = gson.fromJson(response.body().charStream(), LoginResponse.class); Toast.makeText(context, ""Success!"", Toast.LENGTH_SHORT).show(); save(); startActivity(intent); } else if (response.code()==401){ logine = gson.fromJson(response.body().charStream(), LoginError.class); Toast.makeText(context, String.format(""Failed: %s"", loginm.error), Toast.LENGTH_LONG).show(); } else { logine = gson.fromJson(response.body().charStream(), LoginError.class); Toast.makeText(context, String.format(""Failed: %s"", logine.errors), Toast.LENGTH_LONG).show(); }  } catch (IOException e) { Log.w(""ZapApp"",""IOException""); } } });  buttonLoginFingerprint.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { //TODO Check if the user is registered to this method of auth if (!settings.getBoolean(""registered"", false)){ //When user hasn't registered for an account Toast.makeText(context, ""Login with your password the first time!"", Toast.LENGTH_LONG).show(); } else { intent = new Intent(LoginActivity.this, FingerprintAuthActivity.class); startActivity(intent); }  } }); buttonLoginVoicedna.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { //TODO Check if the user is registered to this method of auth //TODO Check if user is registered via voice or not if (!settings.getBoolean(""registered"", false)){ //When user hasn't registered for an account Toast.makeText(context, ""Login with your password the first time!"", Toast.LENGTH_LONG).show(); } else if(settings.getBoolean(""voice_registered"", false)){ //when the user hasn't yet registered with voice intent = new Intent(LoginActivity.this, VoiceLoginActivity.class); startActivity(intent); } else{ //when the user has already registered with voice intent = new Intent(LoginActivity.this, VoicednaAuthActivity.class); startActivity(intent); }  } }); buttonLoginMagiclink.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { //TODO Check if the user is registered to this method of auth if (!settings.getBoolean(""registered"", false)){ //When user hasn't registered for an account Toast.makeText(context, ""Login with your password the first time!"", Toast.LENGTH_LONG).show(); startActivity(intent); } else { intent = new Intent(LoginActivity.this, MagiclinkAuthActivity.class); } } }); } "	0	0	0	0	1	0
public static void sendPlayerHeldItem( final EntityPlayer player, final ItemStack heldItem ) { // Create the packet Packet_C_Sync packet = newPacket( player, MODE_PLAYER_HELD );  // Set the held item packet.syncStack = heldItem;  // Is the player holding anything? packet.syncFlag = ( heldItem != null );  // Send it NetworkHandler.sendPacketToClient( packet ); } 	1	0	0	0	1	0
"public void updatAccessTime(Client client, boolean isUpdateLogonTime) { String clientDn = client.getDn();  CustomEntry customEntry = new CustomEntry(); customEntry.setDn(clientDn);  Date now = new GregorianCalendar(TimeZone.getTimeZone(""UTC"")).getTime(); CustomAttribute customAttributeLastAccessTime = new CustomAttribute(""oxLastAccessTime"", now); customEntry.getCustomAttributes().add(customAttributeLastAccessTime);  if (isUpdateLogonTime) { CustomAttribute customAttributeLastLogonTime = new CustomAttribute(""oxLastLogonTime"", now); customEntry.getCustomAttributes().add(customAttributeLastLogonTime); }  try { ldapEntryManager.merge(customEntry); } catch (EntryPersistenceException epe) { log.error(""Failed to update oxLastLoginTime of client '{0}'"", clientDn); }  removeFromCache(client); } "	0	0	0	0	1	0
public Element saveToDocument() throws WriteExternalException { Element newElement = new Element(CODE_SCHEME); newElement.setAttribute(NAME, getName()); writeExternal(newElement); return newElement; } 	1	0	1	0	1	0
"protected void printUsage(PrintStream o) { o.println(""usage:""); o.print(""java ""); o.print(getClass().getName()); o.println(""[options] tobemodified1.java ...""); o.println(""  -m  --modify""); o.println(""      modify files""); o.println(""  -c  --clean""); o.println(""      clean files""); o.println(""  -vm --violation-macro macro\n""); o.println(""      what to to, if a constraint fails.""); o.println(""  -tt --trace-types""); o.println(""      trace types of collection elements.""); } "	0	0	1	1	1	0
"@Before public void setUp() throws Exception { Field field = GlobalHostStatusTracker.class.getDeclaredField(""hostStatusMap""); field.setAccessible(true); hostStatusMap = new HashMap<>((Map<HostSpec, Object>) field.get(null));  con = TestUtil.openDB(); masterIp = getRemoteHostSpec(); closeDB(con);  con = MultiHostTestSuite.openSlaveDB(); slaveIp = getRemoteHostSpec(); closeDB(con); } "	1	1	1	1	0	0
"private String getParameterFromUrl(final GenericUrl url, final String param) throws IOException { try { @SuppressWarnings(""unchecked"") ArrayList<Object> arr = (ArrayList<Object>) url.get(param); return (String) arr.get(0); } catch (ClassCastException | NullPointerException e) { throw new IOException(""Could not read paramater value.""); } } "	0	0	1	1	0	0
public void onCreateCaseDocContentBehaviour(ChildAssociationRef childAssociationRef, boolean isNewNode) { QName childType = nodeService.getType(childAssociationRef.getChildRef()); if (childType.equals(ContentModel.TYPE_CONTENT)) { NodeRef documentsFolderRef = childAssociationRef.getParentRef(); NodeRef fileRef = childAssociationRef.getChildRef();  String fileName = (String) nodeService.getProperty(fileRef, ContentModel.PROP_NAME); String documentName = FilenameUtils.removeExtension(fileName);  // Set a temporary file name // This is to avoid duplicates child node exception when the // document record is created below String tempFileName = UUID.randomUUID().toString() + fileName; nodeService.setProperty(fileRef, ContentModel.PROP_NAME, tempFileName);  // Create document folder NodeRef documentFolderRef = documentService.createDocumentFolder(documentsFolderRef, documentName).getChildRef(); nodeService.moveNode(fileRef, documentFolderRef, ContentModel.ASSOC_CONTAINS, Utils.createDocumentContentAssociationName(documentName));  // Set the filename back to the original, after it has been moved nodeService.setProperty(fileRef, ContentModel.PROP_NAME, fileName); } } 	0	0	1	0	1	0
"@Override public String getUniqueName(NodeRef inFolder, String name, boolean isUniqueWithoutExtension) { String baseName = FilenameUtils.removeExtension(name); String extension = getExtensionOrEmpty(name); int counter = 1; NodeRef child; String newName; do { newName = baseName + (counter > 1 ? ""("" + counter + "")"" : """") + (isUniqueWithoutExtension ? """" : extension); child = nodeService.getChildByName(inFolder, ContentModel.ASSOC_CONTAINS, newName); counter++; } while (child != null); return newName + (isUniqueWithoutExtension ? extension : """"); } "	0	0	1	0	1	0
"@Nullable @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { Timber.i(""Bookmarks Fragment create view""); setHasOptionsMenu(true);  View view = super.onCreateView(inflater, container, savedInstanceState);  final DbSingleton dbSingleton = DbSingleton.getInstance();  try { bookmarkedIds = dbSingleton.getBookmarkIds();  } catch (ParseException e) { Timber.e(""Parsing Error Occurred at BookmarksFragment::onCreateView.""); }  //setting the grid layout to cut-off white space in tablet view DisplayMetrics displayMetrics = getContext().getResources().getDisplayMetrics(); float width = displayMetrics.widthPixels / displayMetrics.density; int spanCount = (int) (width/250.00);  bookmarkedTracks.setVisibility(View.VISIBLE); sessionsListAdapter = new SessionsListAdapter(getContext(), new ArrayList<Session>(),bookmarkedSessionList); for (int i = 0; i < bookmarkedIds.size(); i++) { Integer id = bookmarkedIds.get(i); Session session = dbSingleton.getSessionById(id); sessionsListAdapter.addItem(i, session); } bookmarkedTracks.setAdapter(sessionsListAdapter); final GridLayoutManager gridLayoutManager = new GridLayoutManager(getActivity(),spanCount); bookmarkedTracks.setLayoutManager(gridLayoutManager); bookmarkedTracks.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() { @Override public boolean onPreDraw() { toolbar = (Toolbar) getActivity().findViewById(R.id.toolbar); layoutParams = (AppBarLayout.LayoutParams) toolbar.getLayoutParams(); if (gridLayoutManager.findLastCompletelyVisibleItemPosition() == gridLayoutManager.getChildCount() - 1) { layoutParams.setScrollFlags(SCROLL_OFF); toolbar.setLayoutParams(layoutParams); } bookmarkedTracks.getViewTreeObserver().removeOnPreDrawListener(this); return false; } });  if (savedInstanceState != null && savedInstanceState.getString(SEARCH) != null) { searchText = savedInstanceState.getString(SEARCH); } //scrollup shows actionbar bookmarkedTracks.addOnScrollListener(new RecyclerView.OnScrollListener() { @Override public void onScrolled(RecyclerView recyclerView, int dx, int dy) { super.onScrolled(recyclerView, dx, dy); if(dy < 0){ AppBarLayout appBarLayout; appBarLayout = (AppBarLayout) getActivity().findViewById(R.id.appbar); appBarLayout.setExpanded(true); } } });  return view; } "	0	1	0	0	0	0
"@Test public void testRoutineNav() { running(testServer(TEST_PORT, fakeApplication(inMemoryDatabase())), ChromeDriver.class, new F.Callback<TestBrowser>() { public void invoke(TestBrowser browser) { // browser.maximizeWindow();  // Start at the home page... browser.goTo(""http://localhost:"" + TEST_PORT + ""/""); assertThat(browser.pageSource()).contains(""We're looking for a few good routines""); assertThat(browser.pageSource()).contains(""Join the Community Today!"");  // Click the Browse Routines button browser.findFirst(""#browseRoutines"").click(); assertThat(browser.pageSource()).contains(""Current Routines"");  // Click the Create Routines button browser.findFirst("".createNew"").click(); browser.findFirst(""#createRoutine"").click(); assertThat(browser.pageSource()).contains(""Create Routine""); } }); } "	0	0	1	0	1	0
private boolean hasValidValueCount() { if (this.expectedValueCount < 0) { return true; } else { return this.expectedValueCount == this.valueCount.get(); } } 	0	0	1	1	0	0
"private SourceDataLine openSourceDataLine(int bufferSize) { try { AudioFormat format = soundClip.getFormat(); Class<?> sourceDataLineClass = Class.forName(""javax.sound.sampled.SourceDataLine""); DataLine.Info info = new DataLine.Info(sourceDataLineClass, format); if (!AudioSystem.isLineSupported(info)) { throw new ErrorException(""SoundClip: Unsupported data line format""); } SourceDataLine line = (SourceDataLine) AudioSystem.getLine(info); line.open(format, bufferSize); return line; } catch (Exception ex) { throw new ErrorException(ex); } } "	0	0	1	1	1	0
@FXML private void hideRoomSettings() { client.showRoomSettings.set(false); } 	0	0	0	0	1	0
public final ResultSet executeQuery(String script) throws SQLException { checkNotClosed();  try { SingleResultSetScriptOutputHandler outputHandler = scriptOutputHandlerFactory.newSingleResultSetScriptOutputHandler(this, script);  executeScriptUsingOutputHandler(script, outputHandler);  ResultSet resultSet = outputHandler.getResultSet();  registerAsChild(resultSet);  return resultSet;  } catch (ScriptExecutionException se) { String message = ExceptionUtil.getRootCauseMessage(se); throw JDBCError.SCRIPT_EXECUTION_EXCEPTION.raiseSQLException(se, message); } catch (SQLException sqle) { throw sqle; } catch (RuntimeDyna4JdbcException ex) { throw new SQLException(ex.getMessage(), ex); } catch (Throwable t) { String message = ExceptionUtil.getRootCauseMessage(t); throw JDBCError.UNEXPECTED_THROWABLE.raiseSQLException(t, message); } } 	0	0	0	0	1	0
public void runBuildToolAndProcessOutput(ProcessBuilder pb, IProgressMonitor pm) throws CoreException, CommonException, OperationCancellation { processBuildOutput(runBuildTool(opInfo, pb, pm)); } 	1	0	1	1	1	0
"@Override public void filter(GenericResourceMethod genericResourceMethod, Object[] arguments) throws ServerException, ForbiddenException { final String methodName = genericResourceMethod.getMethod().getName();  switch (methodName) { case ""startFromConfig"": case ""startById"": if (!licenseManager.canStartWorkspace()) { throw new ForbiddenException(licenseManager.getMessageForLicenseCompletelyExpired()); }  break;  default: break; } } "	0	0	0	0	1	0
static int ApplyMove(int[][] board,int srtI,int srtJ,int endI,int endJ) { int result = isMoveLegal(board,srtI,srtJ,endI,endJ,colour(board[srtI][srtJ])); if (result != illegalMove) { if ( Math.abs(endI - srtI) == 1) { board[endI][endJ] = board[srtI][srtJ];          //declare a checker there board[srtI][srtJ] = Checkers.empty;             //clear the previous cell. } else // capture { board[(srtI + endI)/2][(srtJ + endJ)/2] = Checkers.empty; board[endI][endJ] = board[srtI][srtJ]; board[srtI][srtJ] = Checkers.empty; }  if (result == incompleteMove) { // if there are no further captures if (!(canCapture(board,endI,endJ))) result = legalMove; }  // check for new king if ( board[endI][endJ] == Checkers.redNormal && endJ == 7){ board[endI][endJ] = Checkers.redKing; }  else if ( board[endI][endJ] == Checkers.yellowNormal && endJ == 0){ board[endI][endJ] = Checkers.yellowKing; }   } return result; } 	0	0	0	1	0	0
static int isWalkLegal(int[][] board,int srtI,int srtJ,int endI,int endJ) { if (! (inRange(srtI,srtJ) && inRange(endI,endJ) ) ) return illegalMove; if (board[endI][endJ] != Checkers.empty) return illegalMove;  int piece = board[srtI][srtJ]; if ( Math.abs(srtI - endI) == 1 ) { switch (piece) { case Checkers.redNormal: if (endJ - srtJ == 1) return legalMove; break; case Checkers.yellowNormal: if (endJ - srtJ == -1) return legalMove; break; case Checkers.redKing: case Checkers.yellowKing: if ( Math.abs(endJ - srtJ) == 1 ) return legalMove; break; } return illegalMove; } return illegalMove; } 	0	0	0	1	0	0
"@Override protected IModel<String> getCaptionModel() { return Model.of(getString(""gradespage.caption"")); } "	0	0	0	0	1	0
private static boolean isChargeToken(String token) { return norm(token.charAt(0)) == '-' || token.charAt(0) == '+'; } 	0	0	1	0	1	0
"@Test public void testThatPlayerCanMakeAnOutsideBetAfterInvalidNumberChoice() { //Given: InputAsker asker = Mockito.mock(InputAsker.class);  //When: Mockito.when(asker.askForInput(""Place a bet by using the options above. Fractional part of input will be ignored."")).thenReturn(""40""); Mockito.when(asker.askForInput(""You must bet 0, 00, or a number between 1 and 36."")).thenReturn(""1st C"");  //Then: Assert.assertTrue(RouletteBetHandler.handleAnyBet(asker).equals(""1st C"")); } "	0	0	0	0	1	0
"protected void nextParse() { if (this.isFail()) { session.getSource().setTxInterrupt(error); session.getSource().write(sendData); LOGGER.warn(""nextParse failed:"" + error); } else { commit(); } } "	0	0	0	0	1	0
private void generateReport() { try { final Optional<String> fileName = JsonReport.getInstance().generateReport(); LOGGER.info(String.format(REPORT_GENERATED_MSG, fileName.get())); } catch (GenerateReportException e) { LOGGER.log(Level.ERROR, e.getMessage()); } } 	0	0	1	0	0	0
"private boolean isBlobResponse(Response resp) { Headers h = resp.headers(); boolean isText = !getHeaderIgnoreCases(h, ""content-type"").equalsIgnoreCase(""text/plain""); boolean isJSON = !getHeaderIgnoreCases(h, ""content-type"").equalsIgnoreCase(""application/json""); return  !(isJSON || isText); } "	0	0	0	1	1	0
protected RecordField createIntegerField(String input) throws NumberFormatException { return new RecordFieldInt(Integer.valueOf(input)); } 	0	0	1	0	1	0
protected RecordField createDoubleField(String input) throws NumberFormatException { return new RecordFieldDouble(Double.valueOf(input)); } 	0	0	1	1	1	0
"@Test public void getURIWithOneNodeAndOneInfo() { NodesInfo nodesInfo = new NodesInfo.Builder().addNode(""twitter"").os(true).build(); assertEquals(""/_nodes/twitter?os=true"", nodesInfo.getURI()); } "	0	0	1	1	1	0
"@Test public void getURIWithOnlyMultipleType() { NodesInfo nodesInfo = new NodesInfo.Builder().os(true).process(true).build(); assertEquals(""/_nodes/_all?process=true&os=true"", nodesInfo.getURI()); } "	0	0	0	1	1	0
"public Builder threadPool(boolean value) { return setParameter(""thread_pool"", value); } "	0	0	0	0	1	0
"public Variable executeFunction(String token) { String functionName = token.substring(0, token.indexOf('(')); String param = token.substring(token.indexOf('(')+1, token.lastIndexOf(')')); List<String> params = Helpers.splitParams(param);  List<Variable> functionHeap = new ArrayList<Variable>(); if (!param.contentEquals("""")) { for (int i = 0; i < params.size(); i++) { String temp = params.get(i);  if (Variable.isString(temp) || Variable.isNumber(temp)) { functionHeap.add(new Variable(temp)); } else if (Interpreter.isFunction(temp)) { functionHeap.add(executeFunction(temp)); } else { Variable var = heap.get(params.get(i)); if (var == null) { Error.printErrorVariableNotDefined(params.get(i)); } else { functionHeap.add(var); } } } }  if (InternalFunctions.isInternalFunction(functionName)) { return new Variable(new InternalFunctions(functionHeap, functionName, param).executeFunction()); }  if (InternalFunctions.isInternalListFunction(functionName)) { return new VariableList(new InternalFunctions(functionHeap, functionName, param).executeFunction()); }  String varVal = functionExecuter.executeFunction(functionName, functionHeap); if (varVal.isEmpty()) return new Variable(""NULL""); if (varVal.contains("":"") && !Variable.isString(varVal)) return new VariableList(varVal); return new Variable(varVal); } "	0	0	0	0	1	0
"private PemObject loadObject(String type) throws IOException { String          line; String          endMarker = END + type; StringBuffer    buf = new StringBuffer(); List            headers = new ArrayList();  while ((line = readLine()) != null) { if (line.indexOf("":"") >= 0) { int index = line.indexOf(':'); String hdr = line.substring(0, index); String value = line.substring(index + 1).trim();  headers.add(new PemHeader(hdr, value));  continue; }  if (line.indexOf(endMarker) != -1) { break; }  buf.append(line.trim()); }  if (line == null) { throw new IOException(endMarker + "" not found""); }  return new PemObject(type, headers, Base64.decode(buf.toString())); } "	0	0	1	0	0	0
"static private String writeMiniVPN(Context context) { String[] abis; if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) abis =Build.SUPPORTED_ABIS; else abis = new String[]{Build.CPU_ABI, Build.CPU_ABI2};  for (String abi: abis) {  File mvpnout = new File(context.getCacheDir(), getMiniVPNExecutableName() + ""."" + abi); if ((mvpnout.exists() && mvpnout.canExecute()) || writeMiniVPNBinary(context, abi, mvpnout)) { return mvpnout.getPath(); } }  return null; } "	0	0	0	0	1	0
"@Test public void translatesTables() { ParserTestHelper.assertTranslatesTo(""|a|\n"", tableWithCell(""a"")); ParserTestHelper.assertTranslatesTo(""|a| \n"", tableWithCell(""a"")); ParserTestHelper.assertTranslatesTo(""|a|"", tableWithCell(""a"")); ParserTestHelper.assertTranslatesTo(""||\n"", tableWithCell("""")); ParserTestHelper.assertTranslatesTo(""| a |\n"", tableWithCell(""a"")); ParserTestHelper.assertTranslatesTo(""|!- a -!|\n"", tableWithCell("" a "")); ParserTestHelper.assertTranslatesTo(""|''a''|\n"", tableWithCell(""<i>a</i>"")); ParserTestHelper.assertTranslatesTo(""|!c a|\n"", tableWithCell(""<center>a</center>"")); ParserTestHelper.assertTranslatesTo(""|http://mysite.org|\n"", tableWithCell(""<a href=\""http://mysite.org\"">http://mysite.org</a>"")); ParserTestHelper.assertTranslatesTo(""|!-line\nbreaks\n-!|\n"", tableWithCell(""line\nbreaks\n""));  ParserTestHelper.assertTranslatesTo(""|a|b|c|\n|d|e|f|\n"", ""<table>"" + HtmlElement.endl + ""\t<tr>"" + HtmlElement.endl + ""\t\t<td>a</td>"" + HtmlElement.endl + ""\t\t<td>b</td>"" + HtmlElement.endl + ""\t\t<td>c</td>"" + HtmlElement.endl + ""\t</tr>"" + HtmlElement.endl + ""\t<tr>"" + HtmlElement.endl + ""\t\t<td>d</td>"" + HtmlElement.endl + ""\t\t<td>e</td>"" + HtmlElement.endl + ""\t\t<td>f</td>"" + HtmlElement.endl + ""\t</tr>"" + HtmlElement.endl + ""</table>"" + HtmlElement.endl); } "	0	0	0	0	1	0
"public static void setUser(Context context, User user) { String userJson; mUser = user; if (user == null) { APP.setLogin(false); userJson = """"; } else { userJson = new Gson().toJson(user); APP.setLogin(true); } String encryptedJson = new UserInfoEncryption().encrypt(userJson); SPUtils.set(context, Const.SP_KEY_USER, encryptedJson); } "	1	0	1	1	1	0
"public String render(int index) { StringBuilder sb = new StringBuilder();  int contentId = data.hashCode();  switch (mime_type) { case ""image/png"": sb.append(publishImg(""png"", contentId, index)); break; case ""image/bmp"": sb.append(publishImg(""bmp"", contentId, index)); break; case ""text/plain"": sb.append(publishPlainType(contentId, index)); break; case ""text/html"": sb.append(publishHTMLType(contentId, index)); break; default: sb.append(publishUnknownType(mime_type, index)); } return sb.toString(); } "	0	0	0	0	1	0
"private String makeCall(String call, String input) { call = call.trim().replaceAll(""\\s"", "" ""); // Amazing regex inspired by // http://stackoverflow.com/questions/1757065/java-splitting-a-comma-separated-string-but-ignoring-commas-in-quotes String delimiter = "" (?=([^\""]*\""[^\""]*\"")*[^\""]*$)"";  String name = call; String[] parts = { call };  int first = call.indexOf(' '); if (first > 0) { name = call.substring(0, first); parts = call.substring(first+1).trim().split(delimiter); List<String> actual = new LinkedList<>(); actual.add(name); for (String p : parts) { if (p.length() > 0) { actual.add(p); } } if (parts.length != actual.size()) { parts = actual.toArray(new String[actual.size()]); } }  System.out.println(""executing "" + name + (parts == null ? """" : "" with "" + Arrays.toString(parts))); try { Process p = Runtime.getRuntime().exec(parts, null, new java.io.File(context.filepath).getParentFile()); InputStream sin = p.getInputStream(); OutputStream sout = p.getOutputStream(); PrintStream out = new PrintStream(sout); out.print(input); out.flush(); out.close(); BufferedReader in = new BufferedReader(new InputStreamReader(sin)); try { int exit = p.waitFor(); } catch (InterruptedException x) {}  StringBuffer sb = new StringBuffer(input.length()); while (in.ready()) { try { String line = in.readLine(); if (line == null) break; if (sb.length() > 0) sb.append(""\n""); sb.append(line); } catch (Exception x) { break; } } try { in.close(); } catch (Exception x) {} return sb.toString(); } catch (Exception x) { System.err.println(""Error running command: "" + x); return ""Compiler error: "" + String.valueOf(x); } } "	0	0	0	0	1	0
"public boolean saveNoteWrapper(String newGroupName, String newNoteName, String noteText) { Boolean result = myFileManager.saveNote(newGroupName, newNoteName, noteEditor.getNoteText());  if (result) { if (classicLook) { hideAndDisableAllEditControls(); hideNoteEditor(); initFromDirectory(false); } } else { // error message - most likely note in ""Not grouped"" with same name already exists Alert alert = new Alert(AlertType.ERROR); alert.setTitle(""Error Dialog""); alert.setHeaderText(""Note couldn't be saved."");  alert.showAndWait(); alert.close(); }  return result; } "	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_new_event); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); //getSupportActionBar().setDisplayUseLogoEnabled(true); getSupportActionBar().setIcon(R.drawable.tagalong_icon_small);  //Event Guest List Initializations Intent currentIntent = getIntent(); facebookLogin = LoginManager.getInstance(); userLocalStore = new UserLocalStore(this); friendsList = (ArrayList<Friend>) currentIntent.getSerializableExtra(""friendsList""); System.out.println(""friend list: "" + friendsList);  eventTime = new TagalongDate(); btnCreateEvent = (Button) findViewById(R.id.submitNewEvent); new_event_name = (EditText) findViewById(R.id.new_event_name); new_event_description = (EditText) findViewById(R.id.new_event_description);  //onClickListener to initiate the dropDown list Button inviteButton = (Button)findViewById(R.id.inviteButton); inviteButton.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { initiatePopUp(friendsList); } }); //Event Location mAutocompleteView = (AutoCompleteTextView) findViewById(R.id.autocomplete_places); mGoogleApiClient = new GoogleApiClient .Builder(this) .addApi(Places.GEO_DATA_API) .addOnConnectionFailedListener(this) .build(); mAdapter = new PlaceAutoCompleteAdapter(this, mGoogleApiClient, BOUNDS_GREATER_SEATTLE, null); mAutocompleteView.setAdapter(mAdapter); mAutocompleteView.setOnItemClickListener(mAutocompleteClickListener);  eventTime = new TagalongDate(); new_event_name = (EditText) findViewById(R.id.new_event_name); submitNewEvent = (Button) findViewById(R.id.submitNewEvent); submitNewEvent.setOnClickListener(this); } "	0	0	0	0	1	0
"public void addPermission(String permission) { Permission perm = Permission.loadFromString(permission); calc.addPermission(perm.name(), perm.isTrue()); sender.sendMessage(format(""Added ""+perm.toString()+"" to ""+calc.getName())); } "	0	0	0	0	1	0
"@Override public String launch(AppDeploymentRequest request) { if (this.logPathRoot == null) { try { this.logPathRoot = Files.createTempDirectory(getLocalDeployerProperties().getWorkingDirectoriesRoot(), ""spring-cloud-dataflow-""); } catch (IOException e) { throw new IllegalStateException(e); } } String taskLaunchId = request.getDefinition().getName(); boolean useDynamicPort = !request.getDefinition().getProperties().containsKey(SERVER_PORT_KEY); HashMap<String, String> args = new HashMap<>(); args.putAll(request.getDefinition().getProperties()); args.put(JMX_DEFAULT_DOMAIN_KEY, taskLaunchId); args.put(""endpoints.shutdown.enabled"", ""true""); args.put(""endpoints.jmx.unique-names"", ""true""); try { String qualifiedName = request.getDefinition().getName() + ""-"" + System.currentTimeMillis(); Path dir = Paths.get(logPathRoot.toFile().getAbsolutePath(), qualifiedName); if (!Files.exists(dir)) { Files.createDirectory(dir); dir.toFile().deleteOnExit(); } Path workDir = Files.createDirectory(Paths.get(dir.toFile().getAbsolutePath(), taskLaunchId)); if (getLocalDeployerProperties().isDeleteFilesOnExit()) { workDir.toFile().deleteOnExit(); } int port = useDynamicPort ? SocketUtils.findAvailableTcpPort(DEFAULT_SERVER_PORT) : Integer.parseInt(request.getDefinition().getProperties().get(SERVER_PORT_KEY)); if (useDynamicPort) { args.put(SERVER_PORT_KEY, String.valueOf(port)); } ProcessBuilder builder = buildProcessBuilder(request, args); TaskInstance instance = new TaskInstance(builder, workDir, port); running.put(taskLaunchId, instance); if (getLocalDeployerProperties().isDeleteFilesOnExit()) { instance.stdout.deleteOnExit(); instance.stderr.deleteOnExit(); } logger.info(""launching task {}\n   Logs will be in {}"", taskLaunchId, workDir); } catch (IOException e) { throw new RuntimeException(""Exception trying to launch "" + request, e); } return taskLaunchId; } "	0	0	0	0	1	0
"public void launch( Flight flight, Dataset<Row> payload ) throws InterruptedException { payload.foreach( ( row ) -> { final UUID syncId = UUIDs.timeBased(); DataApi dataApi; EdmApi edmApi; try { dataApi = this.loomClient.getDataApi(); edmApi = this.loomClient.getEdmApi(); } catch ( ExecutionException e ) { logger.error( ""Failed to retrieve apis."" ); return; } if ( entitySetIdCache == null ) { entitySetIdCache = CacheBuilder .newBuilder() .maximumSize( 1000 ) .build( new CacheLoader<String, UUID>() {  @Override public UUID load( String entitySetName ) throws Exception { return edmApi.getEntitySetId( entitySetName ); } } );  }  if ( propertyIdsCache == null ) { propertyIdsCache = CacheBuilder .newBuilder() .maximumSize( 1000 ) .build( new CacheLoader<FullQualifiedName, UUID>() {  @Override public UUID load( FullQualifiedName propertyTypeFqn ) throws Exception { return edmApi.getPropertyTypeId( propertyTypeFqn.getNamespace(), propertyTypeFqn.getName() ); } } ); }  if ( ticketCache == null ) { ticketCache = CacheBuilder .newBuilder() .maximumSize( 1000 ) .build( new CacheLoader<UUID, UUID>() { @Override public UUID load( UUID entitySetId ) throws Exception { return dataApi.acquireSyncTicket( entitySetId, syncId ); } } );  }  for ( EntityDefinition entityDefinition : flight.getEntities() ) { UUID entitySetId = entitySetIdCache.getUnchecked( entityDefinition.getEntitySetName() ); UUID ticket = ticketCache.getUnchecked( entitySetId ); SetMultimap<UUID, Object> properties = HashMultimap.create(); for ( PropertyDefinition propertyDefinition : entityDefinition.getProperties() ) {  Object propertyValue = propertyDefinition.getPropertyValue().apply( row );  if ( propertyValue != null ) { properties.put( propertyIdsCache.getUnchecked( propertyDefinition.getFullyQualifiedName() ), propertyValue ); } } /* * For entityId generation to work correctly it is very important that Stream remain ordered. Ordered != * sequential vs parallel. */ String entityId = checkNotNull( entityDefinition.getKey(), ""Key properties must be configured for entity id generation."" ) .stream() .map( propertyIdsCache::getUnchecked ) .map( properties::get ) .map( Shuttle::toString ) .map( Shuttle::toUtf8Bytes ) .map( encoder::encodeToString ) .collect( Collectors.joining( "","" ) );  checkArgument( StringUtils.isNotBlank( entityId ), ""Entity id cannotbe blank."" );  Map<String, SetMultimap<UUID, Object>> entity = ImmutableMap.of( entityId, properties );  executor.execute( () -> dataApi.storeEntityData( ticket, syncId, entity ) );  MissionControl.signal(); } } );  MissionControl.waitForIt(); executor.shutdown(); executor.awaitTermination( 1, TimeUnit.MINUTES ); DataApi dapi; try { dapi = this.loomClient.getDataApi(); } catch ( ExecutionException e ) { logger.error( ""Failed to get DataApi"" ); return; } ticketCache.asMap().keySet().stream().forEach( dapi::releaseSyncTicket ); } "	0	0	0	0	1	0
private List<ColumnSpec> getColumnSpecs( List<List<String>> dataTableModel ) { ColumnSpec[] result = new ColumnSpec[dataTableModel.get( 0 ).size()]; for( int nrow = 0; nrow < dataTableModel.size(); nrow++ ) { List<String> row = dataTableModel.get( nrow ); for( int ncol = 0; ncol < row.size(); ncol++ ) { String value = row.get( ncol ); int width = value.length(); ColumnSpec spec = result[ncol]; if( spec == null ) { spec = new ColumnSpec(); result[ncol] = spec; } if( width > spec.width ) { spec.width = width; }  if( nrow > 0 && Doubles.tryParse( value ) == null ) { spec.leftAligned = true; } } } return Lists.newArrayList( result ); } 	0	0	1	0	1	0
"@Override public void showClockedGameShare(int score) { try { startActivity(Intent.createChooser(getShareScoreIntent(score), ""Share your score"")); } catch (ActivityNotFoundException exception) { if (mBtnContainer != null) { Snackbar snackbar = Snackbar.make(mBtnContainer, getResources().getString(R.string.txt_sharing_not_configured), Snackbar.LENGTH_LONG); snackbar.show(); } } } "	0	0	0	0	1	0
"@Override public Double run() throws RaspiQueryException { LOGGER.info(""Querying load average...""); Session session; try { session = getSSHClient().startSession(); session.allocateDefaultPTY(); final Command cmd = session.exec(LOAD_AVG_CMD); cmd.join(30, TimeUnit.SECONDS); cmd.close(); final String output = IOUtils.readFully(cmd.getInputStream()) .toString(); return this.parseLoadAverage(output, this.period); } catch (IOException e) { throw RaspiQueryException.createTransportFailure(e); } } "	0	0	0	0	1	0
@Override public void writeExternal(Element element) throws WriteExternalException { super.writeExternal(element); DefaultJDOMExternalizer.writeExternal(this, element); } 	0	0	0	0	1	0
private void broadcastDescriptors() { // Create intents IntentFilter routeIntentFilter = new IntentFilter(); routeIntentFilter.addCategory(CATEGORY_DLNA); routeIntentFilter.addAction(MediaControlIntent.ACTION_START_SESSION); routeIntentFilter.addAction(MediaControlIntent.ACTION_GET_SESSION_STATUS); routeIntentFilter.addAction(MediaControlIntent.ACTION_END_SESSION);  // Create descriptor MediaRouteProviderDescriptor.Builder providerBuilder = new MediaRouteProviderDescriptor.Builder();  // Create route descriptor for(Map.Entry<String, DLNADevice> deviceEntry: devices.entrySet()) { DLNADevice device = deviceEntry.getValue();  int volume; if(device.volumeMax == 0) { volume = 5; } else { int increments = device.volumeMax / 10; volume = controller == null ? device.volume : (int) controller.getVolume(); volume = volume / increments; }  MediaRouteDescriptor.Builder routeBuilder = new MediaRouteDescriptor.Builder(device.id, device.name); routeBuilder.addControlFilter(routeIntentFilter) .setPlaybackStream(AudioManager.STREAM_MUSIC) .setPlaybackType(MediaRouter.RouteInfo.PLAYBACK_TYPE_REMOTE) .setDescription(device.description) .setVolume(volume) .setVolumeMax(10) .setVolumeHandling(MediaRouter.RouteInfo.PLAYBACK_VOLUME_VARIABLE); providerBuilder.addRoute(routeBuilder.build()); }  setDescriptor(providerBuilder.build()); } 	0	0	0	0	1	0
"@Override public void onItemClick(AdapterView< ? > adapterView, View view, int i, long l) { activity.vibrate(); String transaction = ((TextView)view.findViewById( R.id.historyItem )).getText().toString(); String answer = transaction.split( "" = "" )[1]; if( activity.getController() != null ) { activity.getController().updateInput( answer ); } } "	0	0	0	0	1	0
@Override protected boolean matchesSafely(final View target) { if (!(target instanceof ImageView)){ return false; } ImageView imageView = (ImageView) target; if (expectedId < 0){ return imageView.getDrawable() == null; } Resources resources = target.getContext().getResources(); Drawable expectedDrawable = resources.getDrawable(expectedId); resourceName = resources.getResourceEntryName(expectedId);  if (expectedDrawable == null) { return false; }  Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap(); Bitmap otherBitmap = ((BitmapDrawable) expectedDrawable).getBitmap(); return bitmap.sameAs(otherBitmap); } 	0	0	0	0	1	0
public GraphMLGenerator getGraphMLGenerator() { return new GraphMLGenerator(model,conf, classesSC); } 	0	0	0	0	1	0
private Multimap<String, String> buildMap(Lines lines) { Multimap<String, String> jkStatsMap = ArrayListMultimap.create();  for (String line : lines) { String[] kv = EQUAL_SPLIT_PATTERN.split(line); if (kv.length == 2) { jkStatsMap.put(kv[0].trim(), kv[1].trim()); } }  return jkStatsMap; } 	0	0	0	1	0	0
@Test public void testConstructBoundaries() { List<Double> buckets = Arrays.asList(0.0, 1.0, 2.0); BucketBoundaries bucketBoundaries = BucketBoundaries.create(buckets); assertThat(bucketBoundaries.getList()).isEqualTo(buckets); } 	0	0	0	0	1	0
"public FunctionCode getFunctionCode(String artifactLocation, WorkSpaceZipper workSpaceZipper){ if(artifactLocation.startsWith(""s3://"")){ String bucket = null; String key = null; String versionId = null;  String s3String = artifactLocation.substring(5); int versionIndex = s3String.indexOf(""?versionId=""); if(versionIndex != -1){ versionId = s3String.substring(versionIndex + 11); s3String = s3String.substring(0, versionIndex); } int separatorIndex = s3String.indexOf(""/""); if(separatorIndex != -1){ bucket = s3String.substring(0, separatorIndex); if(s3String.length() > separatorIndex + 1) { key = s3String.substring(separatorIndex + 1); } }  return new FunctionCode() .withS3Bucket(bucket) .withS3Key(key) .withS3ObjectVersion(versionId);  } else { try { File zipFile = workSpaceZipper.getZip(artifactLocation); return new FunctionCode() .withZipFile(getFunctionZip(zipFile)); } catch (IOException | InterruptedException ioe){ throw new LambdaDeployException(""Error processing zip file."", ioe); }  } } "	0	0	0	0	0	1
public static void initEffects() { effects.put(1, Arrays.asList(Arrays.asList(HarshenPotions.potionHarshed), Arrays.asList(600))); } 	0	0	0	0	1	0
@SomeAnnotation(4) public static void annotatedStaticMethod() { } 	0	0	1	1	0	0
"@Override public void updateAITick(int pMode) { // トーチの設置 if (pMode == mmode_Torcher && !owner.isMaidWait() && owner.getNextEquipItem()) { ItemStack lis = owner.getCurrentEquippedItem(); int lic = lis.stackSize; Item lii = lis.getItem(); World lworld = owner.worldObj;  // 周囲を検索 int lxx = MathHelper.floor_double(owner.posX); int lyy = MathHelper.floor_double(owner.posY); int lzz = MathHelper.floor_double(owner.posZ); int lym = MathHelper.floor_float(owner.height) + 1; //			mod_LMM_littleMaidMob.Debug(""torch-s: %d, %d, %d"", lxx, lyy, lzz); int ll = 8; int ltx = lxx, lty = lyy, ltz = lzz; int lil[] = {lyy, lyy - 1, lyy + 1}; owner.getAvatarIF().getValue(); for (int x = -1; x < 2; x++) { for (int z = -1; z < 2; z++) { for (int lyi : lil) { int lv = lworld.getLight(new BlockPos(lxx + x, lyi, lzz + z),true); if (ll > lv && lii instanceof ItemBlock && canPlaceItemBlockOnSide(lworld, lxx + x, lyi - 1, lzz + z, EnumFacing.UP, owner.maidAvatar, lis, (ItemBlock)lii) && canBlockBeSeen(lxx + x, lyi - 1, lzz + z, true, false, true)) { //						if (ll > lv && lworld.getBlockMaterial(lxx + x, lyi - 1, lzz + z).isSolid() //								&& (lworld.getBlockMaterial(lxx + x, lyi, lzz + z) == Material.air //								|| lworld.getBlockId(lxx + x, lyi, lzz + z) == Block.snow.blockID) //								&& canBlockBeSeen(lxx + x, lyi - 1, lzz + z, true, false, true)) { ll = lv; ltx = lxx + x; lty = lyi - 1; ltz = lzz + z; //							mod_LMM_littleMaidMob.Debug(""torch: %d, %d, %d: %d"", ltx, lty, ltz, lv); } } } }  if (ll < 8 && lis.onItemUse(owner.maidAvatar, owner.worldObj, new BlockPos(ltx, lty, ltz), EnumFacing.UP, 0.5F, 1.0F, 0.5F)) { //				mod_LMM_littleMaidMob.Debug(""torch-inst: %d, %d, %d: %d"", ltx, lty, ltz, ll); owner.setSwing(10, LMM_EnumSound.installation); owner.getNavigator().clearPathEntity(); if (owner.maidAvatar.capabilities.isCreativeMode) { lis.stackSize = lic; } if (lis.stackSize <= 0) { owner.maidInventory.setInventoryCurrentSlotContents(null); owner.getNextEquipItem(); } }  } } "	0	0	0	0	0	1
"@Override public Plot makePlotFromSelection(String plotName) { // TODO: Check everything separately or throw exceptions?  if (!secondSelectionActive || !firstSelectionActive || ((Math.abs(selectionX1 - selectionX2) + 1) * (Math.abs(selectionZ1 - selectionZ2) + 1) < Config.minPlotsArea || Math.abs(selectionY1 - selectionY2) + 1 < Config.minPlotsHeight) && !(selectedTown instanceof AdminTown)) { sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.plot.tooSmall"", Config.minPlotsArea, Config.minPlotsHeight)); resetSelection(true); return null; }  int x1 = selectionX1, x2 = selectionX2, y1 = selectionY1, y2 = selectionY2, z1 = selectionZ1, z2 = selectionZ2;  if (x2 < x1) { int aux = x1; x1 = x2; x2 = aux; } if (y2 < y1) { int aux = y1; y1 = y2; y2 = aux; } if (z2 < z1) { int aux = z1; z1 = z2; z2 = aux; }  int lastX = 1000000, lastZ = 1000000; for (int i = x1; i <= x2; i++) { for (int j = z1; j <= z2; j++) {  // Verifying if it's in town if (i >> 4 != lastX || j >> 4 != lastZ) { lastX = i >> 4; lastZ = j >> 4; if (!getDatasource().hasBlock(selectionDim, lastX, lastZ, selectionTown)) { sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.plot.outside"")); resetSelection(true); return null; } }  // Verifying if it's inside another plot for (int k = y1; k <= y2; k++) { Plot plot = selectionTown.getPlotAtCoords(selectionDim, i, k, j); if (plot != null) { sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.plot.insideOther"", plot.getName())); resetSelection(true); return null; } } } }  Plot plot = DatasourceProxy.getDatasource().newPlot(plotName, selectionTown, selectionDim, selectionX1, selectionY1, selectionZ1, selectionX2, selectionY2, selectionZ2);  MyTownUtils.takeSelectorToolFromPlayer(player); resetSelection(false); return plot; } "	1	0	1	1	0	0
protected boolean isFinished() { return Robot.instance.elevator.limitSwitch.get(); } 	1	0	0	0	1	0
public static OrgUnitDialogFragment newInstance(OnOrgUnitSetListener listener) { OrgUnitDialogFragment fragment = new OrgUnitDialogFragment(); fragment.setOnClickListener(listener); return fragment; } 	0	0	0	0	1	0
"public static File getWebFile(String urlString, String savePath) throws IOException { URL url = new URL(urlString); HttpURLConnection httpcon = (HttpURLConnection) url.openConnection(); httpcon.setInstanceFollowRedirects(false);  httpcon.addRequestProperty(""User-Agent"", ""Mozilla/4.76"");  httpcon.connect();  boolean found = false; int code; String newUrl;  while (!found) { code = httpcon.getResponseCode(); //Log.Debug(httpcon.getResponseMessage(), Log.LogType.MAIN);  if (code == 302) { newUrl = httpcon.getHeaderField(""Location""); httpcon.disconnect();  //String regex = ""^((http[s]?|ftp):\\/)?\\/?([^:\\/\\s]+)((\\/\\w+)*\\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$""; String regex = ""^(http|s):\\/\\/([^\\/]*)(.*)$""; java.util.regex.Pattern p = java.util.regex.Pattern.compile(regex); java.util.regex.Matcher m = p.matcher(newUrl); if (m.matches()) { try { URI uri = new URI(m.group(1), m.group(2), m.group(3), """");  //newUrl = m.group(1) + ""://"" + m.group(2) + URLEncoder.encode(m.group(3), ""iso-8859-1""); //Log.Debug(m.group(2));  url = uri.toURL();  } catch (URISyntaxException e) {  Log.Error(""Error when parsing redirect url"", Log.LogType.MAIN, e); } }    httpcon = (HttpURLConnection) url.openConnection(); } else { found = true; } }   String contentDisposition = httpcon.getHeaderField(""content-disposition""); String filename = url.getPath().substring(url.getPath().lastIndexOf(""/"") + 1, url.getPath().length());  Log.Debug(String.format(""Content-Disposition :: %s"", contentDisposition), LogType.MAIN);  if (!StringUtils.isEmpty(contentDisposition)) { //attachment; filename=""Catch..44.2011.BRRip.XviD.AC3-FTW._www.ENGSUB.NET.zip"" Pattern p = Pattern.compile(""filename=\""?(.*?)\""?"", Pattern.CASE_INSENSITIVE); Matcher m = p.matcher(contentDisposition);  if (m.find()) filename = m.group(1); } String filenameAndPath = String.format(""%s/%s"", savePath, filename);  File f = new File(filenameAndPath); InputStream is = httpcon.getInputStream(); FileOutputStream os = new FileOutputStream(f);  int len; byte[] buffer = new byte[4096];  while (-1 != (len = is.read(buffer))) os.write(buffer, 0, len);  os.flush(); os.close(); is.close();  httpcon.disconnect(); httpcon = null;  return f; } "	0	0	0	0	1	0
public void tick() { while(!toAdd.isEmpty()) { units.add(toAdd.poll()); }  Unit unit; Iterator<Unit> it = units.iterator();  while (it.hasNext()) { unit = it.next(); unit.tick(this); if(!unit.isAlive()) { onUnitDeath(unit); // The unit died during the tick, and must be removed. it.remove(); } } } 	0	0	1	0	0	0
public boolean historyAvailable() { return testResult.getOwner().getParent().getBuilds().size() > 1; } 	0	0	0	0	1	0
"public static String emr(String url, String token, String notebookName, String computationalName, String status, Duration duration) throws InterruptedException { LOGGER.info(""{}: Waiting until status {} with URL {} with token {} for computational {} on notebook "", notebookName, status, url, token, computationalName, notebookName); HttpRequest request = new HttpRequest(); String actualStatus; long timeout = duration.toMillis(); long expiredTime = System.currentTimeMillis() + timeout;  while ((actualStatus = getEmrStatus(request.webApiGet(url, token) .getBody() .jsonPath(), notebookName, computationalName)).equals(status)) { if (timeout != 0 && expiredTime < System.currentTimeMillis()) { break; } Thread.sleep(getSsnRequestTimeout()); }  if (actualStatus.contains(status)) { LOGGER.info(""ERROR: Timeout has been expired for request.""); LOGGER.info(""  URL is {}"",  url); LOGGER.info(""  token is {}"", token); LOGGER.info(""  status is {}"", status); LOGGER.info(""  timeout is {}"", duration); } else { LOGGER.info(""{}: Current state for EMR {} on notebook {} is "", notebookName, computationalName, notebookName, actualStatus); }  return actualStatus; } "	0	0	1	0	1	0
"@Override public void visitNode(AstNode astNode) { for (AstNode nameNode : astNode.getChildren(EsqlGrammar.NAME)){ String name = nameNode.getTokenOriginalValue(); if (!pattern.matcher(name).matches()) { getContext().createLineViolation(this, ""Rename {0} \""{1}\"" to match the regular expression {2}."", nameNode, typeName(), name, getFormat()); } } } "	0	0	0	0	1	0
"@Override public C build(EditCoordinate editCoordinate, ChangeCheckerMode changeCheckerMode, List builtObjects) throws IllegalStateException { if (referencedComponentNid == Integer.MAX_VALUE) { referencedComponentNid = Get.identifierService().getNidForUuids(referencedComponentBuilder.getUuids()); } SememeChronologyImpl sememeChronicle = new SememeChronologyImpl(sememeType, primordialUuid, Get.identifierService().getNidForUuids(this.getUuids()), assemblageConceptSequence, referencedComponentNid, Get.identifierService().getSememeSequenceForUuids(this.getUuids())); sememeChronicle.setAdditionalUuids(additionalUuids); Get.identifierService().setConceptSequenceForComponentNid(assemblageConceptSequence, sememeChronicle.getNid()); switch (sememeType) { case COMPONENT_NID: ComponentNidSememeImpl cnsi = (ComponentNidSememeImpl) sememeChronicle.createMutableVersion(ComponentNidSememeImpl.class, State.ACTIVE, editCoordinate); cnsi.setComponentNid((Integer) parameters[0]); break; case LONG: LongSememeImpl lsi = (LongSememeImpl) sememeChronicle.createMutableVersion(LongSememeImpl.class, State.ACTIVE, editCoordinate); lsi.setLongValue((Long) parameters[0]); break; case LOGIC_GRAPH: LogicGraphSememeImpl lgsi = (LogicGraphSememeImpl) sememeChronicle.createMutableVersion(LogicGraphSememeImpl.class, State.ACTIVE, editCoordinate); lgsi.setGraphData(((LogicalExpression) parameters[0]).getData(DataTarget.INTERNAL)); break; case MEMBER: SememeVersionImpl svi = (SememeVersionImpl) sememeChronicle.createMutableVersion(SememeVersionImpl.class, State.ACTIVE, editCoordinate); break; case STRING: StringSememeImpl ssi = (StringSememeImpl) sememeChronicle.createMutableVersion(StringSememeImpl.class, State.ACTIVE, editCoordinate); ssi.setString((String) parameters[0]); break; case DESCRIPTION: { DescriptionSememeImpl dsi = (DescriptionSememeImpl) sememeChronicle.createMutableVersion(DescriptionSememeImpl.class, State.ACTIVE, editCoordinate); dsi.setCaseSignificanceConceptSequence((Integer) parameters[0]); dsi.setDescriptionTypeConceptSequence((Integer) parameters[1]); dsi.setLanguageConceptSequence((Integer) parameters[2]); dsi.setText((String) parameters[3]); break; } case DYNAMIC: { DynamicSememeImpl dsi = (DynamicSememeImpl)sememeChronicle.createMutableVersion(DynamicSememeImpl.class, State.ACTIVE, editCoordinate); if (parameters != null) { dsi.setData((DynamicSememeDataBI[])parameters[0]); } //TODO DAN this needs to fire the validator! break; } default: throw new UnsupportedOperationException(""Can't handle: "" + sememeType); }  if (changeCheckerMode == ChangeCheckerMode.ACTIVE) { Get.commitService().addUncommitted(sememeChronicle); } else { Get.commitService().addUncommittedNoChecks(sememeChronicle); } builtObjects.add(sememeChronicle); return (C) sememeChronicle; } "	1	1	1	1	0	0
public List<ErrorTrace> getAllUnsolvedErrors() throws DocumentNotFoundException {  ArrayList<ErrorTrace> allErrorList = (ArrayList<ErrorTrace>) allErrorTrace.findAllUnSolvedErrors(); if (null == allErrorList || allErrorList.isEmpty()) { return null;  }  return allErrorList;  } 	1	0	1	1	1	0
"@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { Log.d(TAG, ""onCreateView: called, records"" + records.toString()); view = inflater.inflate(LAYOUT, container, false);  mScrollView = (ScrollView) view.findViewById(R.id.enroll_scroll);  recyclerView = (RecyclerView) view.findViewById(R.id.enrollRecords); recyclerView.setLayoutManager(new LinearLayoutManager(getContext())); RecordItemAdapter adapter = new RecordItemAdapter(records, this); recyclerView.setAdapter(adapter); if ((records != null)&&(records.size() != 0)){ //            adapter = new RecordItemAdapter(records, this); mScrollView.setVisibility(View.GONE); adapter.swap(records); }  mSwipe = (SwipeRefreshLayout) view.findViewById(R.id.enroll_refresh_main); mSwipe.setColorSchemeColors(ContextCompat.getColor(getContext(), R.color.colorAccent), ContextCompat.getColor(getContext(), R.color.colorPrimary), ContextCompat.getColor(getContext(), R.color.colorPrimaryDark)); mSwipe.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() { @Override public void onRefresh() { if (logged) { new LoadRecords().execute(); } else { new LoginTask().execute(login, pass); }  } }); setSwipeRefreshState(refreshing);  mFab = (FloatingActionButton) view.findViewById(R.id.datePickerFAB); mFab.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { EnrollDatePickerFragment dialogFragment = new EnrollDatePickerFragment(); dialogFragment.setListener(mListener); dialogFragment.show(getActivity().getSupportFragmentManager(), null); } });  return view; } "	1	0	0	0	1	0
public boolean isFinished() { // FIXME: isFinished JSON field always contain false value. // For now finished state is determined by percentDone value. //return isFinished; return percentDone == 1.0; } 	0	0	0	0	1	0
"private boolean windowManagerAutolistLoop() { addWindowListener(this); BufferedWriter out = null; try { out = new BufferedWriter(new OutputStreamWriter(mClient.getOutputStream())); while (!Thread.interrupted()) { boolean needWindowListUpdate = false; boolean needFocusedWindowUpdate = false; synchronized (mLock) { while (!mNeedWindowListUpdate && !mNeedFocusedWindowUpdate) { mLock.wait(); } if (mNeedWindowListUpdate) { mNeedWindowListUpdate = false; needWindowListUpdate = true; } if (mNeedFocusedWindowUpdate) { mNeedFocusedWindowUpdate = false; needFocusedWindowUpdate = true; } } if (needWindowListUpdate) { out.write(""LIST UPDATE\n""); out.flush(); } if (needFocusedWindowUpdate) { out.write(""FOCUS UPDATE\n""); out.flush(); } } } catch (Exception e) { Log.w(LOG_TAG, ""Connection error: "", e); } finally { if (out != null) { try { out.close(); } catch (IOException e) { // Ignore } } removeWindowListener(this); } return true; } "	0	0	0	0	1	0
"private synchronized void scheduleTimeEvents(IConstraint constraint,IState source) { //System.out.println(""StatemachineManager.scheduleTimeEvents(): scheduleTimeEvents called: ""+constraint+"" from state: ""+source); if(constraint instanceof AbstractLogicOperator){ scheduleTimeEvents(((AbstractLogicOperator) constraint).getLeftConstraint(),source); scheduleTimeEvents(((AbstractLogicOperator) constraint).getRightConstraint(),source); }else{ if(constraint instanceof TimeExpired){ if( ((TimeExpired) constraint).getProperty() instanceof ITimeProperty){ ITimeProperty property = (ITimeProperty) ((TimeExpired) constraint).getProperty();  Task_TimeEvent task; long time = property.getTime(); ITimeEvent timeevent = new TimeEvent(time, source);  task = new Task_TimeEvent(RobotContextState.getInstance(), timeevent); scheduledTimeEvents.add(task); timeEventScheduler.schedule(task, time);  //System.out.println(""StatemachineManager.scheduleTimeEvents(): ScheduledTimeEvent"" + timeevent); } } } } "	0	0	1	1	0	0
"@Test public void testGetDoubleParameter4() { System.out.println(""getDoubleParameter expression""); final String parameterName = ""betaExp""; final Parameters sut = sutBuilder .setParameter(parameterName, ""$%beta/2 - 0.08"") .build(); final double expResult = 0.28; final double result = sut.getDoubleParameter(parameterName); assertEquals(expResult, result, 0.0000001); assertTrue(sut.repOK()); } "	0	0	1	1	0	0
private LocalDateTime adjustSingleDateToDefault(LocalDateTime dateTime, Set<String> parseElements) {  dateTime = fillDefaultDateTime(dateTime, LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT.minusMinutes(1)), parseElements);  dateTime = adjustDateToAfterReference(dateTime, LocalDateTime.now(), parseElements);  return dateTime; } 	0	0	0	0	1	0
"@Override public void onClick(View view) { String tag = tvMustTag.getText().toString(); etMustTags.setText(etMustTags.getText().toString() + tag + "", ""); etMustTags.setSelection(etMustTags.length()); llMustTags.removeViewInLayout(tvMustTag); suggestions.remove(suggestion); } "	0	0	0	0	1	0
"@SuppressWarnings({ ""rawtypes"", ""unchecked"" }) public synchronized void connect() throws IOException { if (terminated.get()) throw new IllegalStateException(""JMX Helper ""+this+"" already terminated""); if (connection != null) return;  triedConnecting = true; if (connector != null) connector.close(); JMXServiceURL serviceUrl = new JMXServiceURL(url); Map env = getConnectionEnvVars(); try { connector = JMXConnectorFactory.connect(serviceUrl, env); } catch (NullPointerException npe) { //some software -- eg WSO2 -- will throw an NPE exception if the JMX connection can't be created, instead of an IOException. //this is a break of contract with the JMXConnectorFactory.connect method, so this code verifies if the NPE is //thrown by a known offender (wso2) and if so replaces the bad exception by a new IOException. //ideally WSO2 will fix this bug and we can remove this code. boolean thrownByWso2 = npe.getStackTrace()[0].toString().contains(""org.wso2.carbon.core.security.CarbonJMXAuthenticator.authenticate""); if (thrownByWso2) { throw new IOException(""Failed to connect to url ""+url+"". NullPointerException is thrown, but replaced by an IOException to fix a WSO2 JMX problem"", npe); } else { throw npe; } } catch (IOException e) { Exceptions.propagateIfFatal(e); if (terminated.get()) { throw new IllegalStateException(""JMX Helper ""+this+"" already terminated"", e); } else { throw e; } } connection = connector.getMBeanServerConnection();  if (terminated.get()) { disconnectNow(); throw new IllegalStateException(""JMX Helper ""+this+"" already terminated""); } } "	0	0	0	0	1	0
private String buildInitialChannels() { final List<Integer> possibleChannels = new ArrayList<>(16); for (int i = 1; i <= 16; ++i) possibleChannels.add(Integer.valueOf(i));  for (final Synthesizer other : _otherSynthesizers) possibleChannels.removeAll(other.getChannels());  return Utils.makeRangeString(possibleChannels); } 	0	0	1	0	0	0
public HashMap<String, String> getVotes() { return this.Votes; } 	1	0	0	0	1	0
"@Override public List<TweetFromTwitter> splitMessage(Message<TaskMessage> message) { CountedEntities countedEntities = countedEntitiesService.countAll(); TaskMessage msgIn = message.getPayload(); long taskId = msgIn.getTaskId(); Task task = taskService.findById(taskId); task =  taskService.start(task,countedEntities); List<Long> worklistTwitterIds = new ArrayList<>(); boolean hasNext=true; Pageable pageRequest = new PageRequest(FIRST_PAGE_NUMBER, twitterProperties.getPageSize()); int lfdNr = 0; int all = 0; while(hasNext) { Page<org.woehlke.twitterwall.oodm.entities.Tweet> tweetTwitterIds = tweetService.getAll(pageRequest); for(org.woehlke.twitterwall.oodm.entities.Tweet tweetTwitterId:tweetTwitterIds.getContent()){ lfdNr++; all++; log.debug(""### tweetService.findAllTwitterIds from DB (""+lfdNr+""): ""+tweetTwitterId.getIdTwitter()); worklistTwitterIds.add(tweetTwitterId.getIdTwitter()); } hasNext = tweetTwitterIds.hasNext(); pageRequest = pageRequest.next(); } int millisToWaitBetweenTwoApiCalls = twitterProperties.getMillisToWaitBetweenTwoApiCalls(); List<TweetFromTwitter> tweets = new ArrayList<>(); lfdNr = 0; for(Long tweetTwitterId : worklistTwitterIds){ lfdNr++; log.debug(""### witterApiService.findOneTweetById from Twiiter API (""+lfdNr+"" of ""+all+""): ""+tweetTwitterId); Tweet foundTweetFromTwitter = twitterApiService.findOneTweetById(tweetTwitterId); TweetFromTwitter result = new TweetFromTwitter(task.getId(),foundTweetFromTwitter); tweets.add(result); log.debug(""### waiting now for (ms): ""+millisToWaitBetweenTwoApiCalls); try { Thread.sleep(millisToWaitBetweenTwoApiCalls); } catch (InterruptedException e) { } } return tweets; } "	0	0	0	0	1	0
@Override public void read(byte[] bytes) throws IOException { inputStream.read(bytes); } 	0	0	1	0	1	0
"private Profile deserializeXMLToProfile(String xmlContentsProfile, String xmlValueSet, String xmlConstraints) { Document profileDoc = this.stringToDom(xmlContentsProfile); Element elmConformanceProfile = (Element) profileDoc.getElementsByTagName(""ConformanceProfile"").item(0);  // Read Profile Meta Profile profile = new Profile(); profile.setMetaData(new ProfileMetaData()); this.deserializeMetaData(profile, elmConformanceProfile); this.deserializeEncodings(profile, elmConformanceProfile);  // Read Profile Libs profile.setSegments(new Segments()); profile.setDatatypes(new Datatypes());  profile.setTables(this.deserializeXMLToTableLibrary(xmlValueSet));  this.conformanceStatements = this.deserializeXMLToConformanceStatements(xmlConstraints); this.predicates = this.deserializeXMLToPredicates(xmlConstraints);  this.constructDatatypesMap((Element) elmConformanceProfile.getElementsByTagName(""Datatypes"").item(0), profile);  Datatypes datatypes = new Datatypes(); for (String key : datatypesMap.keySet()) { datatypes.addDatatype(datatypesMap.get(key)); } profile.setDatatypes(datatypes);  this.segmentsMap = this.constructSegmentsMap( (Element) elmConformanceProfile.getElementsByTagName(""Segments"").item(0), profile);  Segments segments = new Segments(); for (String key : segmentsMap.keySet()) { segments.addSegment(segmentsMap.get(key)); } profile.setSegments(segments);  // Read Profile Messages this.deserializeMessages(profile, elmConformanceProfile);  return profile; } "	0	0	0	0	1	0
"private void handleAlerts(FeedMessage alerts) { for (FeedEntity entity : alerts.getEntityList()) { Alert alert = entity.getAlert(); if (alert == null) { _log.warn(""epxected a FeedEntity with an Alert""); continue; }  AgencyAndId id = createId(entity.getId());  if (entity.getIsDeleted()) { _alertsById.remove(id); _serviceAlertService.removeServiceAlert(id); } else { ServiceAlert.Builder serviceAlertBuilder = _alertLibrary.getAlertAsServiceAlert( id, alert, _alertAgencyIdMap); ServiceAlert serviceAlert = serviceAlertBuilder.build(); ServiceAlert existingAlert = _alertsById.get(id); if (existingAlert == null || !existingAlert.equals(serviceAlert)) { _alertsById.put(id, serviceAlert);  ServiceAlertRecord serviceAlertRecord = new ServiceAlertRecord(); serviceAlertRecord.setAgencyId(_agencyIds.get(0)); serviceAlertRecord.setActiveWindows(new HashSet<ServiceAlertTimeRange>()); if(serviceAlert.getActiveWindowList() != null){ for(ServiceAlerts.TimeRange timeRange : serviceAlert.getActiveWindowList()){ ServiceAlertTimeRange serviceAlertTimeRange = new ServiceAlertTimeRange(); serviceAlertTimeRange.setFromValue(timeRange.getStart()); serviceAlertTimeRange.setToValue(timeRange.getEnd()); serviceAlertRecord.getActiveWindows().add(serviceAlertTimeRange); } }  serviceAlertRecord.setAllAffects(new HashSet<ServiceAlertsSituationAffectsClause>()); if(serviceAlert.getAffectsList() != null){ for(ServiceAlerts.Affects affects : serviceAlertBuilder.getAffectsList()){ ServiceAlertsSituationAffectsClause serviceAlertsSituationAffectsClause = new ServiceAlertsSituationAffectsClause(); serviceAlertsSituationAffectsClause.setAgencyId(affects.getAgencyId()); serviceAlertsSituationAffectsClause.setApplicationId(affects.getApplicationId()); serviceAlertsSituationAffectsClause.setDirectionId(affects.getDirectionId()); serviceAlertsSituationAffectsClause.setRouteId(affects.getRouteId().getId()); serviceAlertsSituationAffectsClause.setStopId(affects.getTripId().getId()); serviceAlertsSituationAffectsClause.setTripId(affects.getTripId().getId()); serviceAlertRecord.getAllAffects().add(serviceAlertsSituationAffectsClause); } }  serviceAlertRecord.setCause(getECause(serviceAlert.getCause())); serviceAlertRecord.setConsequences(new HashSet<ServiceAlertSituationConsequenceClause>()); if(serviceAlert.getConsequenceList() != null){ for(ServiceAlerts.Consequence consequence : serviceAlert.getConsequenceList()){ ServiceAlertSituationConsequenceClause serviceAlertSituationConsequenceClause = new ServiceAlertSituationConsequenceClause(); serviceAlertSituationConsequenceClause.setDetourPath(consequence.getDetourPath()); serviceAlertSituationConsequenceClause.setDetourStopIds(new HashSet<String>()); if(consequence.getDetourStopIdsList() != null){ for(ServiceAlerts.Id stopId : consequence.getDetourStopIdsList()){ serviceAlertSituationConsequenceClause.getDetourStopIds().add(stopId.getId()); } } serviceAlertRecord.getConsequences().add(serviceAlertSituationConsequenceClause); } }  serviceAlertRecord.setCreationTime(serviceAlert.getCreationTime()); serviceAlertRecord.setDescriptions( new HashSet<ServiceAlertLocalizedString>()); if(serviceAlert.getDescription() != null){ for(ServiceAlerts.TranslatedString.Translation translation : serviceAlert.getDescription().getTranslationList()){ ServiceAlertLocalizedString string = new ServiceAlertLocalizedString(); string.setValue(translation.getText()); string.setLanguage(translation.getLanguage()); serviceAlertRecord.getDescriptions().add(string); } }  serviceAlertRecord.setModifiedTime(serviceAlert.getModifiedTime()); serviceAlertRecord.setPublicationWindows(new HashSet<ServiceAlertTimeRange>());  serviceAlertRecord.setServiceAlertId(serviceAlert.getId().getId()); serviceAlertRecord.setSeverity(getESeverity(serviceAlert.getSeverity()));  serviceAlertRecord.setSummaries(new HashSet<ServiceAlertLocalizedString>()); if(serviceAlert.getSummary() != null){ for(ServiceAlerts.TranslatedString.Translation translation : serviceAlert.getSummary().getTranslationList()){ ServiceAlertLocalizedString string = new ServiceAlertLocalizedString(); string.setValue(translation.getText()); string.setLanguage(translation.getLanguage()); serviceAlertRecord.getSummaries().add(string); } }  serviceAlertRecord.setUrls(new HashSet<ServiceAlertLocalizedString>()); if(serviceAlert.getUrl() != null){ for(ServiceAlerts.TranslatedString.Translation translation : serviceAlert.getUrl().getTranslationList()){ ServiceAlertLocalizedString string = new ServiceAlertLocalizedString(); string.setValue(translation.getText()); string.setLanguage(translation.getLanguage()); serviceAlertRecord.getUrls().add(string); } }  _serviceAlertService.createOrUpdateServiceAlert(serviceAlertRecord); } } } } "	0	0	0	0	0	1
"@TruffleBoundary @Specialization public DynamicObject sourceFile() { final SourceSection sourceSection = getTopUserSourceSection(""rb_sourcefile"", ""execute_with_mutex""); final String file = sourceSection.getSource().getPath();  return makeStringNode.executeMake(file, UTF8Encoding.INSTANCE, CodeRange.CR_UNKNOWN); } "	0	0	0	0	1	0
"private String getDirectResponse(HttpRequest httpRequest) { if (httpRequest.isGhostCall()) { return HttpResponseString.builder() .body(""Hi Ghost!"") .build() .getResponse(); } URI uri = httpRequest.getURI(); if (mRedirects.shouldRedirect(uri)) { uri = mRedirects.getNewLocation(uri); return HttpResponse302.builder() .location(uri.toString()) .build() .getResponse(); } //There was no direct response, and thus return empty string. return """"; } "	0	0	1	1	0	0
@Override public void request(long n) { if (requested == Long.MAX_VALUE) { return; } if (n == Long.MAX_VALUE) { requested = Long.MAX_VALUE; } else { REQUESTED.getAndAdd(this, n); if (ms.drainQueuesIfNeeded()) { boolean sendComplete = false; synchronized (this) { if (ms.wip == 0 && ms.scalarValueQueue != null && ms.scalarValueQueue.isEmpty()) { sendComplete = true; } } if (sendComplete) { ms.drainAndComplete(); } } } } 	0	0	1	1	0	0
"public Result getUserInput(CommandPojo commandPojo, Project project) throws Exception {  if(commandPojo.getSubModule().equals("""")) commandPojo.setSubModule(null); if(commandPojo.getDirectory().equals("""")) commandPojo.setDirectory(null); if(commandPojo.getFile().equals("""")) commandPojo.setFile(null); if(commandPojo.getNoOfLines().equals("""")) commandPojo.setNoOfLines(""0""); if(commandPojo.getFilesize().equals("""")) commandPojo.setFilesize(""0"");  Result result = new Result(); result.setProjectName(project.getRemoteRepo()); result.setBranch(project.getBranch()); if (commandPojo.getCommand().equalsIgnoreCase(""Commit Details"")) { result.setObject(githubOperations.gitCommitDetails(project.getLocalDirectory(),project.getBranch())); //              result.setObject(githubOperations.getCommitsFromFile(project.getLocalDirectory(),""src/main/java/com/razorthink/application/service/GithubOperations.java"")); return result; } else if(commandPojo.getCommand().equalsIgnoreCase(""Project Summary"")){ String pomFilePath = project.getLocalDirectory()+""pom.xml""; result.setObject(new CommandsServiceImpl().getProjectSummary(pomFilePath)); return result;  } else {  if (commandPojo.getSubModule() != null) { if (commandPojo.getDirectory() != null) { if (commandPojo.getFile() != null){ FileList.get(0).add(project.getLocalDirectory() + commandPojo.getSubModule() + commandPojo.getDirectory() + commandPojo.getFile()); commandPojo1.setFileList(FileList.get(0));} else FileList = githubOperations.gitListingFiles(project.getLocalDirectory() + commandPojo.getSubModule() + commandPojo.getFile()); commandPojo1.setFileList(FileList.get(0));  } else { FileList = githubOperations.gitListingFiles(project.getLocalDirectory() + commandPojo.getSubModule()); commandPojo1.setFileList(FileList.get(0));  } } else { FileList = githubOperations.gitListingFiles(project.getLocalDirectory()); commandPojo1.setFileList(FileList.get(0));  }  //            if (commandPojo.getCommand().equalsIgnoreCase(""//List all methods"")) //            { //                result.setObject(new CommandsServiceImpl().listAllMethods(FileList.get(0))); //                commandPojo1.setFileList(FileList.get(0)); // //                return result; //            } if (commandPojo.getCommand().equalsIgnoreCase(""List all methods having lines greater than n"")) { int lines  = Integer.parseInt(commandPojo.getNoOfLines()); result.setObject(new CommandsServiceImpl().listAllMethodsOfNLines(FileList.get(0),lines)); commandPojo1.setFileList(FileList.get(0));  return result; } if(commandPojo.getCommand().equalsIgnoreCase(""List all methods without javadocs"")){ result.setObject(new CommandsServiceImpl().getAllMethodsWithJavaDocsComment(FileList.get(0))); commandPojo1.setFileList(FileList.get(0));  return result; } if(commandPojo.getCommand().equalsIgnoreCase(""List all files"")){ List<List<String>> resultList = new ArrayList<>();  double size  = Integer.parseInt(commandPojo.getFilesize()); for(List<String> files : FileList){  List<String> subList = new ArrayList<>(); for(int i = 0; i < files.size(); i++){  File file = new File(files.get(i)); if( (file.length()/1024) >= size) { subList.add(file.getName()); subList.add(String.valueOf(file.length())+""Kb""); subList.add(files.get(i)); }  } resultList.add(subList); }  result.setObject(resultList); return result; } } return null; } "	0	0	0	0	0	1
"private void createMets(MCRPath dir, Set<MCRPath> ignoreNodes, Mets mets) throws IOException { // add dmdsec DmdSec dmdSec = new DmdSec(""dmd_"" + dir.getOwner()); // add amdsec AmdSec amdSec = new AmdSec(""amd_"" + dir.getOwner()); // file sec FileSec fileSec = new FileSec(); for (FileUse fileUse : FileUse.values()) { FileGrp fileGrp = new FileGrp(fileUse.toString()); fileSec.addFileGrp(fileGrp); }  // physical structure PhysicalStructMap physicalStructMap = new PhysicalStructMap(); PhysicalDiv physicalDiv = new PhysicalDiv(""phys_dmd_"" + dir.getOwner(), ""physSequence""); physicalStructMap.setDivContainer(physicalDiv);  // logical structure MCRILogicalStructMapTypeProvider typeProvider = getTypeProvider(); LogicalStructMap logicalStructMap = new LogicalStructMap();  LogicalDiv logicalDiv = new LogicalDiv(""log_"" + dir.getOwner(), typeProvider.getType(MCRObjectID .getInstance(dir.getOwner())), dir.getOwner(), amdSec.getId(), dmdSec.getId()); logicalDiv.setDmdId(dmdSec.getId()); logicalStructMap.setDivContainer(logicalDiv); // struct Link StructLink structLink = new StructLink();  // create internal structure structureMets(dir, ignoreNodes, fileSec, physicalDiv, logicalDiv, structLink, 0); hrefIdMap.clear();  // add to mets mets.addDmdSec(dmdSec); mets.addAmdSec(amdSec); mets.setFileSec(fileSec); mets.addStructMap(physicalStructMap); mets.addStructMap(logicalStructMap); mets.setStructLink(structLink); } "	0	0	1	0	1	0
"private static String getFileGroupUse(MCRPath file) { String filePath = file.getOwnerRelativePath(); String teiFolder = ""/"" + TEI_FOLDER_PREFIX; String altoFolder = ""/"" + ALTO_FOLDER_PREFIX;  if (filePath.startsWith(altoFolder) && filePath.endsWith("".xml"")) { return ALTO_FILE_GROUP_USE; } else if (filePath.startsWith(teiFolder)) { // translations have to start with TRANSLATION_FOLDER_PREFIX String pathInTeiFolder = filePath.substring(teiFolder.length()); if (pathInTeiFolder.startsWith(TRANSLATION_FOLDER_PREFIX)) { return TRANSLATION_FILE_GROUP_USE; } return TRANSCRIPTION_FILE_GROUP_USE; } else { return DEFAULT_FILE_GROUP_USE; } } "	0	0	1	1	0	0
@Override protected void doUpdate(ServerDenseDoubleRow[] rows) { try { rows[1].getLock().writeLock().lock(); DoubleBuffer from = rows[0].getData(); DoubleBuffer to = rows[1].getData(); int size = rows[0].size(); for (int i = 0; i < size; i++) { to.put(i, Math.abs(from.get(i))); } } finally { rows[1].getLock().writeLock().lock(); } } 	0	0	0	0	1	0
"@Override protected IStatus run(IProgressMonitor monitor) { this.version = new OCBinaryVersionValidator(location).getVersion(monitor); if (Version.emptyVersion.equals(version)) { this.ocVersionValidity = ValidationStatus.error(""Could not determine your OpenShift client version""); } else if (!OCBinaryVersionValidator.isCompatibleForPublishing(version)) { this.ocVersionValidity = ValidationStatus.error(NLS.bind( ""OpenShift client version 1.1.1 or higher is required to avoid rsync issues."", version)); } else { this.ocVersionValidity = ValidationStatus.ok(); } if (monitor.isCanceled()) { this.ocVersionValidity = ValidationStatus.cancel(""OC version verification was cancelled.""); } return Status.OK_STATUS; } "	0	0	1	1	1	0
public ObservableSet<LHProtos.Pledge> mirrorOpenPledges(Project forProject, AffinityExecutor executor) { // Must build the mirror on the backend thread because otherwise it might change whilst we're doing the // initial copy to fill it up. return this.executor.fetchFrom(() -> ObservableMirrors.mirrorSet(getOpenPledgesFor(forProject), executor)); } 	0	0	0	0	1	0
"public void fillInProductsGridInTechnology(final ViewDefinitionState viewDefinitionState) { checkArgument(viewDefinitionState != null, ""viewDefinitionState is null"");  GridComponent grid = (GridComponent) viewDefinitionState.getComponentByReference(""grid"");  FormComponent technology = (FormComponent) viewDefinitionState.getComponentByReference(""technology"");  if ((technology == null) || (technology.getEntityId() == null)) { return; }  Long technologyId = technology.getEntityId();  List<Entity> inputProducts = Lists.newArrayList();  Map<Entity, BigDecimal> productQuantities = getProductQuantitiesFromTechnology(technologyId);  if (productQuantities != null) { for (Map.Entry<Entity, BigDecimal> productQuantity : productQuantities.entrySet()) { Entity product = productQuantity.getKey(); BigDecimal quantity = productQuantity.getValue();  Entity operationProductInComponent = dataDefinitionService.get(TechnologiesConstants.PLUGIN_IDENTIFIER, TechnologiesConstants.MODEL_OPERATION_PRODUCT_IN_COMPONENT).create();  operationProductInComponent.setField(""product"", product); operationProductInComponent.setField(""quantity"", quantity);  inputProducts.add(operationProductInComponent); } }  grid.setEntities(inputProducts); } "	0	0	0	0	1	0
"public void updateItem(@IntRange(from = 0) int position, @NonNull T item, @Nullable Object payload) { if (position < 0 || position >= mItems.size()) { Log.e(TAG, ""Cannot updateItem on position out of OutOfBounds!""); return; } mItems.set(position, item); if (DEBUG) Log.d(TAG, ""updateItem notifyItemChanged on position "" + position); notifyItemChanged(position, payload); } "	0	0	1	0	1	0
public RippleBuilder rippleAlpha(float alpha) { this.rippleAlpha = 255 * alpha; return this; } 	0	0	0	0	1	0
"@Override public void fromBytes(ByteBuf buf) { NBTTagCompound nbt = ByteBufUtils.readTag(buf); handler = new HarshenItemStackHandler(nbt.getInteger(""Size"")); handler.deserializeNBT(nbt); } "	0	0	0	0	1	0
"@ActionMethod(""lookupHero"") private void doLookupHero() throws IOException { Hero hero = this.heroName.getValue(); if (hero == null) { return; } String heroName = hero.getBoxValue(); if (heroName.equals("""")) { return; } else { this.heroName.setValue(null); } desktop.browse(URI.create(""https://www.hotslogs.com/Sitewide/HeroDetails?Hero="" + heroName)); } "	0	0	0	0	1	0
"@ActionMethod(""playerSearch"") private void doPlayerSearch() throws IOException { String playerName = playerSearchInput.getText().replaceAll("" "", """"); if (playerName.equals("""")) { return; } else { playerSearchInput.setText(""""); } desktop.browse(URI.create(""https://www.hotslogs.com/PlayerSearch?Name="" + playerName)); } "	0	0	0	0	1	0
"@Override protected boolean initVolumeRenderer() { mCLDevice = new OpenCLDevice();  // FIXME using existing OpenGL context does not work yet // mCLDevice.initCL(true);  mCLDevice.initCL(false); mCLDevice.printInfo(); mRenderKernel = mCLDevice.compileKernel(OpenCLVolumeRenderer.class.getResource(""kernels/VolumeRenderPerspective.cl""), ""volumerender""); mClearKernel = mCLDevice.compileKernel(	OpenCLVolumeRenderer.class.getResource(""kernels/VolumeRenderPerspective.cl""), ""clearbuffer"");  for (final Processor<?> lProcessor : mProcessorsMap.values()) if (lProcessor.isCompatibleProcessor(getClass())) if (lProcessor instanceof OpenCLProcessor) { final OpenCLProcessor<?> lOpenCLProcessor = (OpenCLProcessor<?>) lProcessor; lOpenCLProcessor.setDevice(mCLDevice); }  mCLInvModelViewBuffer = mCLDevice.createInputFloatBuffer(16); mCLInvProjectionBuffer = mCLDevice.createInputFloatBuffer(16);  final int lRenderBufferSize = getTextureHeight() * getTextureWidth();  // setting up the OpenCL Renderbuffer we will write the render result into for (int i = 0; i < getNumberOfRenderLayers(); i++) { mCLRenderBuffers[i] = mCLDevice.createOutputIntBuffer(lRenderBufferSize); }  for (int i = 0; i < getNumberOfRenderLayers(); i++) prepareVolumeDataArray(i, null);  for (int i = 0; i < getNumberOfRenderLayers(); i++) prepareTransferFunctionArray(i);  return true; } "	0	0	0	0	1	0
public void addField(final Field field) { synchronized (fields) { if (!fields.contains(field)) { fields.add(field); // launch the field registration asynchronously (new Thread(new Runnable() { @Override public void run() { registerFilter(field.getId()); } })).start();  } } } 	0	0	0	0	1	0
"private static void upload2(String fileName, String filePath) { String uploadCmd = ""qrsctl put -c video \"""" + fileName + "" \"""" + filePath + ""\""""; ShellExecuter.execute(uploadCmd); } "	0	0	1	0	1	0
public <NK extends K, NV extends V> CacheConfigurationBuilder<NK, NV> evitionVeto(final EvictionVeto<? super NK, ? super NV> veto) { return new CacheConfigurationBuilder<NK, NV>(expiry, classLoader, evictionPrioritizer, veto, serviceConfigurations); } 	0	0	0	0	1	0
"@SubscribeEvent public void onAttachCapability(AttachCapabilitiesEvent.Entity event) { if(event.getEntity() instanceof EntityPlayer) { event.addCapability(new ResourceLocation(Allomancy.MODID, ""Allomancy_Data""), new AllomancyCapabilities(((EntityPlayer) event.getEntity()))); } } "	0	0	0	0	1	0
@Test public void save_PassValidFinancialReportObject_ShouldSaveIt() { FinancialReport financialReport = new FinancialReport(3, 15.7); repository.save(financialReport); } 	0	0	0	0	1	0
"private Boolean nameMatches(final Issue issue, final String objectName, final String type) { if (type == ""scenario"") { return issue.getScenarioContextLink() != null && issue.getScenarioContextLink().equals(objectName); } else { return issue.getUsecaseContextName() != null && issue.getUsecaseContextName().equals(objectName); }  } "	0	0	1	0	1	0
public synchronized DB getDB() { if (mDB==null) { mDB = new DB(this); } return mDB; } 	0	0	0	0	1	0
private String getRulesTable() { return dbTables.get().getRulesTable(); } 	1	0	0	0	1	0
"@Test //Expected result: The same set of results is always returned public void reasoningWithLimitHigherThanNumberOfResultsReturnsConsistentResults(){ QueryBuilder qb = testSet22.graph().graql().infer(true); String queryString = ""match (friend1:$x1, friend2:$x2) isa knows-trans;limit 60;""; QueryAnswers oldAnswers = queryAnswers(qb.parse(queryString)); for(int i = 0; i < 5 ; i++) { QueryAnswers answers =queryAnswers(qb.parse(queryString)); assertEquals(answers.size(), 6); assertEquals(answers, oldAnswers); } } "	0	0	1	0	1	0
"@Test //Expected result: Both queries should return a single equal match as they trigger the same rule. public void reasoningOverRelationHierarchy(){ QueryBuilder qb = testSet19.graph().graql().infer(true); String queryString = ""match (role1: $x, role2: $y) isa relation1;""; String queryString2 = ""match (role1: $x, role2: $y) isa sub-relation1;""; QueryAnswers answers = queryAnswers(qb.parse(queryString)); QueryAnswers answers2 = queryAnswers(qb.parse(queryString2)); assertEquals(answers.size(), 1); assertEquals(answers, answers2); } "	0	0	1	0	1	0
"@Test //Expected result: Two answers obtained only if the rule query containing sub type is correctly executed. public void instanceTypeHierarchyRespected(){ QueryBuilder qb = testSet18.graph().graql().infer(true); String queryString = ""match "" + ""$x isa entity1;"" + ""$y isa entity1;"" + ""(role1: $x, role2: $y) isa relation1;""; String queryString2 = queryString + ""$y has name 'a';""; QueryAnswers answers = queryAnswers(qb.parse(queryString)); assertEquals(answers.size(), 2); QueryAnswers answers2 = queryAnswers(qb.parse(queryString2)); assertEquals(answers2.size(), 2); } "	0	0	1	0	1	0
"@Test //Expected result: Timeline is correctly recognised via applying resource comparisons in the rule body public void reasoningWithResourceValueComparison() { QueryBuilder qb = testSet24.graph().graql().infer(true); String queryString = ""match (predecessor:$x1, successor:$x2) isa message-succession;""; QueryAnswers answers = queryAnswers(qb.parse(queryString)); assertEquals(answers.size(), 10); } "	0	0	1	0	1	0
"@Override public String toString() { StringBuilder sb = new StringBuilder(); render(sb, _first); return String.format(""Data[current=%h, parent=%h]{\n%s}"", System.identityHashCode(_current), System.identityHashCode(_parent), sb); } "	0	0	0	1	0	0
"public void getComments(int id, String message, ForumJob task) { MessageDialogFragment info = new MessageDialogFragment(); Bundle args = new Bundle(); args.putInt(""id"", id); args.putString(""message"", message); args.putSerializable(""task"", task); info.setArguments(args); info.show(getFragmentManager(), ""fragment_forum""); } "	0	0	0	0	1	0
@Override public long countRecordsByLookup(Long entityId, String lookupName, Map<String, Object> lookupMap) { EntityDto entity = getEntity(entityId); validateCredentialsForReading(entity);  LookupDto lookup = getLookupByName(entityId, lookupName); Map<String, FieldDto> fieldMap = entityService.getLookupFieldsMapping(entityId, lookupName);  MotechDataService service = getServiceForEntity(entity);  try { LookupExecutor lookupExecutor = new LookupExecutor(service, lookup, fieldMap); return lookupExecutor.executeCount(lookupMap); } catch (RuntimeException e) { throw new LookupExecutionException(e); } } 	0	0	0	0	1	0
"public JavaClass instrument_jdk_refs_only() {  // Add the tag fields // if (tag_fields_ok (gen.getClassName())) //  add_tag_fields();  // Don't instrument annotations.  They aren't executed and adding // the marker argument causes subtle errors if ((gen.getModifiers() & Constants.ACC_ANNOTATION) != 0) { debug_instrument.log (""(refs_only)Not instrumenting annotation %s%n"",gen.getClassName()); return gen.getJavaClass().copy(); }  debug_instrument.log (""%nInstrumenting class(JDK refs_only) %s%n"", gen.getClassName());  // properly account for object methods handle_object (gen);  // Have all top-level classes implement our interface if (gen.getSuperclassName().equals(""java.lang.Object"")) { // Add equals method if it doesn't already exist. This ensures // that an instrumented version, equals(Object, DCompMarker), // will be created in this class. Method eq = gen.containsMethod(""equals"", ""(Ljava/lang/Object;)Z""); if (eq == null) { debug_instrument.log (""(refs_only)Added equals method""); add_equals_method (gen); }  // Add DCompInstrumented interface and the required // equals_dcomp_instrumented method. add_dcomp_interface (gen); }  // Process each method for (Method m : gen.getMethods()) {  tag_frame_local = null; try { // Don't modify class initialization methods.  They can't affect // user comparability and there isn't any way to get a second // copy of them. if (BCELUtil.is_clinit (m)) continue;  debug_instrument.log (""%n  Processing method %s%n"", m);  MethodGen mg = new MethodGen (m, gen.getClassName(), pool); mgen = mg;  // copy to global  InstructionList il = mg.getInstructionList(); boolean has_code = (il != null); if (has_code) { fetch_current_stack_map_table (mg); build_unitialized_NEW_map (il); }  // If the method is native if (mg.isNative()) {  // Create java code that cleans up the tag stack and calls the // real native method fix_native_refs_only (gen, mg); has_code = true; fetch_current_stack_map_table (mg);  // Add an argument of java.lang.DCompMarker to distinguish our version add_dcomp_arg (mg);  } else { // normal method  // Add an argument of java.lang.DCompMarker to distinguish our version add_dcomp_arg (mg);  // Instrument the method if (has_code) { build_exception_handler_refs_only (mg); instrument_method_refs_only (mg); install_exception_handler (mg); } }  if (has_code) { create_new_stack_map_attribute (mg); mg.setMaxLocals(); mg.setMaxStack(); } else { mg.removeCodeAttributes(); mg.removeLocalVariables(); } gen.addMethod (mg.getMethod()); } catch (Throwable t) { System.out.printf (""Unexpected error processing %s.%s: %s%n"", gen.getClassName(), m.getName(), t); System.out.printf (""Method is NOT instrumented%n""); skip_method (mgen); } }  // Add tag accessor methods for each primitive in the class create_tag_accessors (gen);  // We don't need to track class initialization in the JDK because // that is only used when printing comparability which is only done // for client classes // track_class_init();  return (gen.getJavaClass().copy()); } "	0	0	1	1	0	0
@Bean public BeanDefinitionRegistryPostProcessor beanDefinitionRegistryPostProcessor() { return new BeanDefinitionRegistryPostProcessor() { @Override public void postProcessBeanFactory(final ConfigurableListableBeanFactory beanFactory) throws BeansException { }  @Override public void postProcessBeanDefinitionRegistry(final BeanDefinitionRegistry registry) throws BeansException { registerRepositories(registry); registerMock(MongoOperations.class, registry); }  }; } 	0	0	0	1	0	0
private Post clonePost(Post oldPost, Site newSite) { Post newPost = new Post(newSite); newPost.setName(oldPost.getName()); newPost.setBody(oldPost.getBody()); newPost.setCreationDate(new DateTime()); newPost.setCreatedBy(oldPost.getCreatedBy()); newPost.setActive(oldPost.getActive());  for(Category oldCategory : oldPost.getCategoriesSet()) { Category newCategory = newSite.getOrCreateCategoryForSlug(oldCategory.getSlug(), oldCategory.getName()); newPost.addCategories(newCategory); }  for (int i = 0; i < oldPost.getAttachments().getFiles().size(); ++i) { GroupBasedFile file = oldPost.getAttachments().getFiles().get(i); GroupBasedFile attachmentCopy = new GroupBasedFile(file.getDisplayName(), file.getFilename(), file.getContent(), AnyoneGroup.get()); newPost.getAttachments().putFile(attachmentCopy, i); }  for (GroupBasedFile file : oldPost.getPostFiles().getFiles()) { GroupBasedFile postFileCopy = new GroupBasedFile(file.getDisplayName(), file.getFilename(), file.getContent(), AnyoneGroup.get()); newPost.getPostFiles().putFile(postFileCopy); } return newPost; } 	0	0	0	0	1	0
@Override public boolean equals (final Object o) { if (o == this) return true; if (o == null || !getClass ().equals (o.getClass ())) return false; final GoMappingItem rhs = (GoMappingItem) o; return m_sKey.equals (rhs.m_sKey) && m_bIsInternal == rhs.m_bIsInternal && m_aTargetURL.equals (rhs.m_aTargetURL) & m_bIsEditable == rhs.m_bIsEditable; } 	1	1	1	1	0	0
@Test public void testTemporaryBlockedNoDisconnectionMultipleServerNonSmartRouting() { factory.newInstances(null, 3);  ClientConfig clientConfig = getNonSmartClientConfig(4, 1); client = factory.newHazelcastClient(clientConfig);  testListenersTemporaryNetworkBlockage(); } 	0	0	0	0	1	0
"private static String durationToString(Duration duration) { String durationString = duration.getStandardSeconds() + ""s""; if (duration.getStandardMinutes() > 0) { durationString = duration.getStandardMinutes() % 60 + ""m "" + durationString; if (duration.getStandardHours() > 0) { durationString = duration.getStandardHours() + ""h "" + durationString; } } return durationString; } "	0	0	1	0	1	0
@Override protected Description describeChild(FrameworkMethod method) { if (runs > 1) { return describeRepeatTest(method); } return super.describeChild(method); } 	0	0	0	0	1	0
private List<WebElement> waitFor() { // When we use complex By strategies (like ChainedBy or ByAll) // there are some problems (StaleElementReferenceException, implicitly // wait time out // for each chain By section, etc) try { changeImplicitlyWaitTimeOut(0, TimeUnit.SECONDS); FluentWait<By> wait = new FluentWait<>(by); wait.withTimeout(timeOutDuration.getTime(), timeOutDuration.getTimeUnit()); return wait.until(waitingFunction); } catch (TimeoutException e) { return new ArrayList<>(); } finally { changeImplicitlyWaitTimeOut(timeOutDuration.getTime(), timeOutDuration.getTimeUnit()); } } 	0	0	0	0	1	0
private void onQwasiMessage(QwasiMessage msg) {  } 	0	0	0	1	0	0
"public static void storeresults() { if (AppUtils.verifyAuthenticity()) { checkAuthenticity(); }  final Map<String, String> map = params.allSimple(); Set<String> keys = new HashSet<String>(); for (Entry<String, String> entry : map.entrySet()) { String key = entry.getKey(); if (StringUtils.isNotBlank(key) && key.contains(""game_"") && (key.contains(""_homeScore"") || key.contains(""_awayScore""))) { key = key.replace(""game_"", """"); key = key.replace(""_homeScore"", """"); key = key.replace(""_awayScore"", """"); key = key.replace(""_homeScore_et"", """"); key = key.replace(""_awayScore_et"", """"); key = key.trim(); keys.add(key); } }  String gamekey = null; for (String key : keys) { gamekey = key; final String homeScore = map.get(""game_"" + key + ""_homeScore""); final String awayScore = map.get(""game_"" + key + ""_awayScore""); final String extratime = map.get(""extratime_"" + key); final String homeScoreExtratime = map.get(""game_"" + key + ""_homeScore_et""); final String awayScoreExtratime = map.get(""game_"" + key + ""_awayScore_et""); AppUtils.setGameScore(key, homeScore, awayScore, extratime, homeScoreExtratime, awayScoreExtratime); } AppUtils.calculateScoresAndPoints();  flash.put(""infomessage"", Messages.get(""controller.games.tippsstored"")); flash.keep();  int playday = 1; if (keys != null && keys.size() >= 1) { if (StringUtils.isNotBlank(gamekey)) { gamekey = gamekey.replace(""_et"", """"); Game game = Game.findById(new Long(gamekey)); if (game != null && game.getPlayday() != null) { playday = game.getPlayday().getNumber(); } } }  redirect(""/admin/index/"" + playday); } "	0	0	0	0	1	0
"@Override public void update(long nanoFrameTime) {  // make line longer double endY = fxLine.getEndY() - GROW_RATE * (nanoFrameTime / 1_000_000_000.0); fxLine.setEndY(endY); updateLinePoints();  // destroy line if it hit the ceiling if (fxLine.getEndY() < getGameObjects().getTopBorder()) { GameLog.addInfoLog(""Projectile hit ceiling at: ("" + Double.toString(fxLine.getEndX()) + Double.toString(fxLine.getEndY()) + "")""); getGameObjects().removeProjectile(); isActive = false; } } "	1	0	1	1	0	0
"@FunctionSpec(name = ""nrand"", returnType = ""int"", formalParameters = { ""int"" }) public static long nRand(final long n) { if (n < 1) throw new IllegalArgumentException(""n must be greater than zero"");  return ThreadLocalRandom.current().nextLong(n); } "	0	0	0	0	1	0
"@Test public void testAddRegexPatternsPolicy() { passwordPolicy.editPolicy(REGEX_PATTERNS, ""^[A-Z]{5}""); assertFlashMessageSuccess(); } "	0	0	0	0	1	0
@Override public boolean isViewFromObject(View view, Object object) { return view instanceof ListView && ((TaskAdapter)((ListView)view).getAdapter()).taskSet.equals(object); } 	0	0	0	0	1	0
"public MethodSpec getMethodSpec(String methodId, String tag) throws NarrativeMethodStoreException { checkForChanges(); try { return methodSpecCache.get(new MethodId(methodId, notNull(tag))); } catch (ExecutionException e) { if (e.getCause() != null && e.getCause() instanceof NarrativeMethodStoreException) throw (NarrativeMethodStoreException)e.getCause(); throw new NarrativeMethodStoreException(""Error loading full info for method id="" + methodId + "" ("" + e.getMessage() + "")"", e); } } "	0	0	0	0	1	0
"private Set<OWLAnnotation> extract(JsonAnnotation[] values, String userId, BatchHandlerValues batchValues, String modelId) throws UnknownIdentifierException { Set<OWLAnnotation> result = new HashSet<OWLAnnotation>(); OWLDataFactory f = m3.getOWLDataFactory(modelId); if (values != null) { for (JsonAnnotation jsonAnn : values) { if (jsonAnn.key != null && jsonAnn.value != null) { AnnotationShorthand shorthand = AnnotationShorthand.getShorthand(jsonAnn.key); if (shorthand != null) { if (AnnotationShorthand.evidence == shorthand) { OWLAnnotationValue evidenceValue; if (batchValues.individualVariables.containsKey(jsonAnn.value)) { Pair<String, OWLNamedIndividual> pair = batchValues.individualVariables.get(jsonAnn.value); if (pair == null) { throw new UnknownIdentifierException(""Variable ""+jsonAnn.value+"" has a null value.""); } evidenceValue = pair.getRight().getIRI(); } else { evidenceValue = IdStringManager.getIRI(jsonAnn.value); } result.add(create(f, shorthand, evidenceValue)); } else { result.add(create(f, shorthand, JsonTools.createAnnotationValue(jsonAnn, f))); } } else { IRI pIRI = IRI.create(jsonAnn.key); if (dataPropertyIRIs.contains(pIRI) == false) { OWLAnnotationValue annotationValue = JsonTools.createAnnotationValue(jsonAnn, f); result.add(f.getOWLAnnotation(f.getOWLAnnotationProperty(pIRI), annotationValue)); } } } } } addGeneratedAnnotations(userId, result, f); return result; } "	0	0	0	0	1	0
private OWLNamedIndividual getIndividual(IRI iri, ModelContainer model) { // check that individual is actually declared boolean containsIRI = model.getAboxOntology().containsEntityInSignature(iri); if (containsIRI == false) { return null; } OWLNamedIndividual individual = model.getOWLDataFactory().getOWLNamedIndividual(iri); return individual; } 	0	0	1	1	0	0
public String exportModel(ModelContainer model, OWLOntologyFormat ontologyFormat) throws OWLOntologyStorageException { final OWLOntology aBox = model.getAboxOntology(); final OWLOntologyManager manager = aBox.getOWLOntologyManager();  // make sure the exported ontology has an ontologyId and that it maps to the modelId final IRI expectedABoxIRI = IdStringManager.getIRI(model.getModelId(), graph); OWLOntologyID ontologyID = aBox.getOntologyID(); if (ontologyID == null) { manager.applyChange(new SetOntologyID(aBox, expectedABoxIRI)); } else { IRI currentABoxIRI = ontologyID.getOntologyIRI(); if (expectedABoxIRI.equals(currentABoxIRI) == false) { ontologyID = new OWLOntologyID(expectedABoxIRI, ontologyID.getVersionIRI()); manager.applyChange(new SetOntologyID(aBox, ontologyID)); } }  // write the model into a buffer ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); if (ontologyFormat != null) { manager.saveOntology(aBox, ontologyFormat, outputStream); } else { manager.saveOntology(aBox, outputStream); }  // extract the string from the buffer String modelString = outputStream.toString(); return modelString; } 	0	0	0	0	1	0
@Before public void setup() { service = new WFSService(mockServiceCaller, mockMethodMaker, mockGmlToKml, mockGmlToHtml); } 	0	0	1	1	1	0
"@Test public void testGetWfsResponseAsKmlSingleFeatureException() throws Exception { final String serviceUrl = ""http://service/wfs""; final String featureId = ""feature-Id-string""; final String typeName = ""type:Name""; final ConnectException exceptionThrown = new ConnectException();  context.checking(new Expectations() { { oneOf(mockServiceCaller).getMethodResponseAsString(mockMethod); will(throwException(exceptionThrown));  oneOf(mockMethodMaker).makeGetMethod(serviceUrl, typeName, featureId, BaseWFSService.DEFAULT_SRS, null); will(returnValue(mockMethod));  } });  try { service.getWfsResponseAsKml(serviceUrl, typeName, featureId); Assert.fail(""Exception should have been thrown""); } catch (PortalServiceException ex) { Assert.assertSame(exceptionThrown, ex.getCause()); Assert.assertSame(mockMethod, ex.getRootMethod()); } } "	0	0	1	0	1	0
"@Override public void control() { btnRefresh.addActionListener(e -> {  GlobalState currentState = GlobalState.getInstance();  if (currentState.getStatus() == GlobalState.Status.CONNECTED) {  VASpreadsheet spreadsheet = currentState.getSpreadsheet();  spreadsheet.removeAllColumns();  String selected = (String) comSheets.getSelectedItem(); spreadsheet.setSheetName(selected); logger.info(""Sheet "" + selected + "" is selected"");  int from = Integer.parseInt(txtRowFrom.getText()); int to = Integer.parseInt(txtRowTo.getText()); spreadsheet.setRow(from, to); logger.info(""Row "" + from + "" "" + to);  for(String key: columnArray.keySet()) { spreadsheet.setColumnChar(key, columnArray.get(key).getText()); logger.info(key + "" "" + columnArray.get(key).getText()); }  (new RefreshWorker()).execute(); prgIndicator.setIndeterminate(true); } }); } "	0	0	0	0	1	0
@Override public void save(Document document, ArrayList<TextSentence> sentences) { for (TextSentence sentence : sentences) { int realoffset = offset == -1 ? sentence.getMinNumCols() : offset;  for (TextToken token : sentence) { NodeStore tok = token.token(); for (int i = 0; i < properties.size(); i++) { String propkey = properties.get(i); String propval = tok.getProperty(propkey); token.setProperty(i+realoffset, propval); } } sentence.setMinCols(realoffset+1); } } 	0	0	0	0	1	0
"@Override public void processAfterRetrieve() { // set correctedByDocumentId manually, since OJB doesn't maintain that relationship try { DocumentHeader correctingDocumentHeader = SpringContext.getBean(FinancialSystemDocumentHeaderDao.class).getCorrectingDocumentHeader(getDocumentHeader().getDocumentNumber()); if (correctingDocumentHeader != null) { getFinancialSystemDocumentHeader().setCorrectedByDocumentId(correctingDocumentHeader.getDocumentNumber()); } } catch (RuntimeException e) { LOG.error(""Received WorkflowException trying to get route header id from workflow document"", e); throw new WorkflowRuntimeException(e); } // set the ad hoc route recipients too, since OJB doesn't maintain that relationship // TODO - see KULNRVSYS-1054  super.processAfterRetrieve(); } "	0	0	0	0	1	0
"private LeptaLoginForm buildLoginForm() { final LeptaLoginForm loginForm = new LeptaLoginForm(); loginForm.addLoginListener(event -> { try { User user = service.authenticate(event.getUserName(), event.getPassword()); ((LeptaUi) (UI.getCurrent())).setLoggedInUser(user); getUI().setContent(context.getBean(MainView.class)); Navigator navigator = UI.getCurrent().getNavigator(); navigator.navigateTo(navigator.getState()); } catch (LeptaLoginException e) { LeptaNotification.showWarning(""Login failed"", ""This username and password combination does not exist.\nPlease try again.""); } catch (LeptaServiceException e) { LeptaNotification.showWarning(""Login failed"", ""Something went wrong.\nPlease try again.""); } }); return loginForm; } "	0	0	0	0	1	0
private void drawStaticCircles(Canvas canvas) { Paint p = new Paint(); for (int i = 0; i < mStaticCircles.size(); i++) { StaticCircle sc = mStaticCircles.get(i); PointF circle_center = relativeCenterLocation(sc); p.setColor(sc.getmCcolor()); canvas.drawCircle(circle_center.x, circle_center.y, relativeScreenSize(sc), p); } } 	0	0	0	0	1	0
@Override public int doFinal(byte[] out, int outOff) { out[0] = 0x01; digest.doFinal(out, outOff + 1); reset(); return getDigestSize(); } 	1	0	0	0	1	0
"protected static DocumentRevisionKey getDocumentRevisionKey(Map<String, Object> source) { return new DocumentRevisionKey(extractValue(source, WORKSPACEID_KEY), extractValue(source, ""docMId""), extractValue(source, VERSION_KEY)); } "	0	0	0	0	1	0
"public Subscription updateSubscription(final Subscription subscription, @Nullable final DateTime requestedDate, @Nullable final BillingActionPolicy billingPolicy, final int timeoutSec, final RequestOptions inputOptions) throws KillBillClientException { Preconditions.checkNotNull(subscription.getSubscriptionId(), ""Subscription#subscriptionId cannot be null""); Preconditions.checkNotNull(subscription.getProductName(), ""Subscription#productName cannot be null""); Preconditions.checkNotNull(subscription.getBillingPeriod(), ""Subscription#billingPeriod cannot be null""); Preconditions.checkNotNull(subscription.getPriceList(), ""Subscription#priceList cannot be null"");  final String uri = JaxrsResource.SUBSCRIPTIONS_PATH + ""/"" + subscription.getSubscriptionId();  final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams()); queryParams.put(JaxrsResource.QUERY_CALL_COMPLETION, timeoutSec > 0 ? ""true"" : ""false""); queryParams.put(JaxrsResource.QUERY_CALL_TIMEOUT, String.valueOf(timeoutSec)); if (requestedDate != null) { queryParams.put(JaxrsResource.QUERY_REQUESTED_DT, requestedDate.toDateTimeISO().toString()); } if (billingPolicy != null) { queryParams.put(JaxrsResource.QUERY_BILLING_POLICY, billingPolicy.toString()); }  final RequestOptions requestOptions = inputOptions.extend().withQueryParams(queryParams).build();  return httpClient.doPut(uri, subscription, Subscription.class, inputOptions); } "	0	0	0	1	1	0
protected String getHostSetListJson() { return this.hostSetListJson; } 	0	0	1	0	0	0
protected String getHostListJson() { return this.hostListJson; } 	0	0	1	0	0	0
private ValidationResult validateField(Field field, ValidationResult result) {  if (!Modifier.isStatic(field.getModifiers())) {  // basic final check if (!Modifier.isFinal(field.getModifiers())){ result = addError(field, ViolationType.NON_FINAL_FIELD, result); }  result = handleCollections(field, result); result = handleArrays(field, result);  // for custom types, recursively check its own fields Class<?> actualType = getActualType(field,result); result = validateIfGenericsReference(field,actualType,result);  if (!isSafeType(actualType)) { result = validateType(actualType, result); } }  return result;  } 	0	0	0	0	1	0
public List<JCTree> transform(AttributeSetterDefinition decl) { JCBlock body = statementGen().transform(decl.getBlock()); String name = decl.getIdentifier().getText(); return AttributeDefinitionBuilder .setter(this, name, decl.getDeclarationModel().getParameter()) .modifiers(transformAttributeGetSetDeclFlags(decl)) .setterBlock(body) .build(); } 	0	0	0	0	0	1
private Collection<Property> getPropertiesWithQuery(ConcreteSyntax syntax) { Collection<Property> result = getElementsOfType(syntax, Property.class); for (Iterator<Property> i = result.iterator(); i.hasNext(); ) { Property p = i.next(); if (PropertyArgumentUtil.getLookupScopePArg(p) == null) { i.remove(); } } return result; } 	0	0	0	0	1	0
public static int getRotations(EnumFacing front, boolean mirrorX, EnumFacing toFront) { Integer rotations = Directions.getHorizontalClockwiseRotations(front, toFront, mirrorX); return rotations == null ? 0 : rotations; } 	0	0	0	0	1	0
@Override public Component getListCellRendererComponent(JList<? extends Article> jList, Article article, int i, boolean b, boolean b1) { return new ArticleResult(article, jList.getWidth()).getArticlePanel(); } 	0	0	1	0	1	0
"private static void globalDistanceTest(double[] thresholds){ System.out.println(""############################# Global Distance Test ############################""); long start = new Date().getTime(); ArrayList<UndirectedGraph<Integer>> globalDistanceRegions; int numThresholds = thresholds.length; globalDistanceRegions = theTool.getGlobalDistanceRegions(thresholds);  ArrayList<String> pymolScript = theTool.getPymolColoringScript(globalDistanceRegions);  System.out.println(""\n#Pymol Script:""); for(String cmd: pymolScript){ System.out.println(cmd); } System.out.println(""#End of Pymol Script\n"");  double[][] globalDistanceTest = theTool.getGlobalDistanceTestScore(globalDistanceRegions); System.out.println(""Global Distance Test:""); System.out.println(""Total num residues: "" + theTool.getNumResidues()); String thresholdsStr = ""Thresholds:""; String resNumStr = ""Num Res:""; String percentsStr = ""Percents:""; for(int i = 0; i < thresholds.length; i++){ thresholdsStr += String.format(""\t%.2f"",thresholds[i]); resNumStr += String.format(""\t%.0f"",globalDistanceTest[i][0]); percentsStr += String.format(""\t%.2f%%"",globalDistanceTest[i][1]*100); } System.out.println(thresholdsStr); System.out.println(resNumStr); System.out.println(percentsStr); //System.out.printf(""Thresholds:\t%.2f\t%.2f\t%.2f\t%.2f\n"", //                    thresholds[0], thresholds[1], thresholds[2], thresholds[3]); //System.out.printf(""Num Res:\t%.0f\t%.0f\t%.0f\t%.0f\n"", //                    globalDistanceTest[0][0], globalDistanceTest[1][0], //                    globalDistanceTest[2][0], globalDistanceTest[3][0]); //System.out.printf(""Percents:\t%.2f%%\t%.2f%%\t%.2f%%\t%.2f%%\n"", //                    globalDistanceTest[0][1]*100, globalDistanceTest[1][1]*100, //                    globalDistanceTest[2][1]*100, globalDistanceTest[3][1]*100);  // The last row in the array holds the averages. If there are 4 thresholds, // rows 0-3 hold the number and percents of residues for each threshold. Row // 4 holds the averages. System.out.printf(""Score: %.4f\n"",globalDistanceTest[numThresholds][1]*100); long end = new Date().getTime(); System.out.println(""Total Time for Global Distance Test: "" + (end - start) + "" milleseconds.""); } "	0	0	0	0	1	0
"@Override public AlgorithmResults detectSimilarity(Submission a, Submission b) throws TokenTypeMismatchException, InternalAlgorithmError { checkNotNull(a); checkNotNull(b);  // Test for token type mismatch if(!a.getTokenType().equals(b.getTokenType())) { throw new TokenTypeMismatchException(""Token list type mismatch: submission "" + a.getName() + "" has type "" + a.getTokenType().toString() + "", while submission "" + b.getName() + "" has type "" + b.getTokenType().toString()); }  // Handle a 0-token submission (no similarity) if(a.getNumTokens() == 0 || b.getNumTokens() == 0) { return new AlgorithmResults(a, b, a.getContentAsTokens(), b.getContentAsTokens()); } else if(a.equals(b)) { // Handle identical submissions TokenList aInval = TokenList.cloneTokenList(a.getContentAsTokens()); aInval.stream().forEach((token) -> token.setValid(false)); return new AlgorithmResults(a, b, aInval, aInval); }  // Alright, easy cases taken care of. Generate an instance to perform the actual algorithm SmithWatermanAlgorithm algorithm = new SmithWatermanAlgorithm(a.getContentAsTokens(), b.getContentAsTokens());  Pair<TokenList, TokenList> endLists = algorithm.computeSmithWatermanAlignment();  return new AlgorithmResults(a, b, endLists.getLeft(), endLists.getRight()); } "	0	0	0	0	1	0
"@Override public void init(FilterConfig filterConfig) throws ServletException { enabled = Optional.ofNullable(filterConfig.getInitParameter(""enabled"")) .map(Boolean::parseBoolean).orElse(true);  // set user customized swagger helper String mySwaggerHelper = filterConfig.getInitParameter(""my-swagger-helper""); if (!isEmpty(mySwaggerHelper)) { try { Class<MSwaggerHelper> clazz = (Class<MSwaggerHelper>) Class.forName(mySwaggerHelper); SwaggerContext.setMHelper(clazz.newInstance()); } catch (ClassNotFoundException e) { throw new RuntimeException(""INVALID swagger helper class: '"" + mySwaggerHelper + ""'!!!""); } catch (InstantiationException e) { throw new RuntimeException(""FAILED to instantiate the swagger helper class: '"" + mySwaggerHelper + ""'!!!""); } catch (IllegalAccessException e) { throw new RuntimeException(e); } }  // scan and register swagger api info String[] scanPackages = Optional.ofNullable(filterConfig.getInitParameter(""scan-packages"")) .map(s -> s.split("","")).orElse(new String[0]); for(String pkgname : scanPackages) { if (!isEmpty(pkgname)) { try { scan(this.getClass(), pkgname.trim()).forEach(clz -> { try { Class.forName(clz); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } }); } catch (URISyntaxException e) { throw new RuntimeException(""INVALID package name: '"" + pkgname + ""'!!!""); } catch (IOException e) { throw new RuntimeException(e); } } } } "	0	0	1	1	0	0
"@Override public void putText(String text) { if (!isFileProtocol) { final URL url = locationUrl; throw new IllegalArgumentException(""Write not supported for resource ["" + getLocation() + ""] with protocol ["" + (url == null ? null : getUrl().getProtocol()) + ""]""); }  // first make sure the directory exists that this is in File curFile = getFile(); if (!curFile.getParentFile().exists()) curFile.getParentFile().mkdirs(); // now write the text to the file and close it try { FileWriter fw = new FileWriter(curFile); fw.write(text); fw.close(); this.exists = null; } catch (IOException e) { throw new BaseException(""Error writing text to file "" + curFile.getAbsolutePath(), e); } } "	0	0	0	0	1	0
"protected int createStaticRecordAndDB(int dbId, int datasetId, TableViewInfo viewInfo) throws Exception { if ( !this.isQueryAllowed(viewInfo.getViewQuery())) { throw new BadParameterException(""Only select queries allowed on datasets""); } OrdsPhysicalDatabase physicalDatabase = this.getPhysicalDatabaseFromID(dbId); OrdsDB logicalDatabase = this.getLogicalDatabaseFromID(physicalDatabase.getLogicalDatabaseId()); Subject s = SecurityUtils.getSubject(); String principalName = s.getPrincipal().toString(); User u = this.getUserByPrincipal(principalName);  if ( datasetId != 0 ) { // remove old static copy this.dropDatasetDatabase(datasetId); } String staticDBName = this.generateStaticDBName(physicalDatabase.getDbConsumedName());  TableView viewRecord = this.getTableView(datasetId);  viewRecord.setViewName(viewInfo.getViewName()); viewRecord.setProjectId(logicalDatabase.getDatabaseProjectId()); viewRecord.setViewDescription(viewInfo.getViewDescription()); viewRecord.setAssociatedDatabase(staticDBName); viewRecord.setCreatorId(u.getUserId()); viewRecord.setQuery(viewInfo.getViewQuery()); viewRecord.setPhysicalDatabaseId(physicalDatabase.getPhysicalDatabaseId()); viewRecord.setStaticDataset(true); viewRecord.setOriginalDatabase(physicalDatabase.getDbConsumedName()); viewRecord.setAssociatedTable(viewInfo.getViewTable());  viewRecord.setTvAuthorization(viewInfo.getViewAuthorization()); // create a copy of the database this.copyStatic(physicalDatabase.getDbConsumedName(), staticDBName); viewRecord.setOriginalDatabase(physicalDatabase.getDbConsumedName()); if ( datasetId == 0 ) { this.saveModelObject(viewRecord); } else { this.updateModelObject(viewRecord); } return viewRecord.getId(); } "	0	0	0	0	1	0
"private OrdsPhysicalDatabase createPhysicalDatabase(int logicalDatabaseId, String databaseFileType, String fileName, long fileSize, String server) throws Exception { OrdsPhysicalDatabase db = new OrdsPhysicalDatabase(); db.setLogicalDatabaseId(logicalDatabaseId); db.setEntityType(EntityType.MAIN); db.setImportProgress(ImportType.QUEUED); db.setDatabaseServer(server); db.setFileName(fileName); db.setFileSize(fileSize); db.setFullPathToDirectory(System.getProperty(""java.io.tmpdir"") + ""/databases""); db.setDatabaseType(databaseFileType);  this.saveModelObject(db); if (db.getPhysicalDatabaseId() == 0) { throw new Exception( ""Cannot retrieve database ID in newly created record""); } else { //this.createOBDCUserRole(userName, password); String dbName = db.getDbConsumedName(); String statement = String.format( ""rollback transaction;create database %s;"", dbName);  this.runSQLStatementOnOrdsDB(statement); String createSequence = ""CREATE SEQUENCE ords_constraint_seq""; this.runJDBCQuery(createSequence, null, server, dbName);  return db; } } "	0	0	0	0	1	0
void setSelectGuessedObjects(boolean selectGuessedObjects) { this.selectGuessedObjects = selectGuessedObjects; } 	0	0	0	0	1	0
"public static void main(String[] args) throws Exception { // Validate command line options. if (args.length != 3) { System.err.println( ""Usage: "" + HexDumpProxy.class.getSimpleName() + "" <local port> <remote host> <remote port>""); return; }  // Parse command line options. int localPort = Integer.parseInt(args[0]); String remoteHost = args[1]; int remotePort = Integer.parseInt(args[2]);  run(localPort, remoteHost, remotePort); } "	0	0	0	0	1	0
"private Set<String> getSnapshots(Profile profile) { this.log.debug(""\t\tChecking direct dependencies of profile '"" + profile.getId() + ""'""); Collection<Dependency> snapshots = Collections2.filter(profile.getDependencies(), IsSnapshotDependency.INSTANCE); return Sets.newHashSet(Collections2.transform(snapshots, DependencyToString.INSTANCE)); } "	0	0	0	0	1	0
"public static void main(String[] args) { StringBuffer copyright = new StringBuffer(""\n"") .append(""JNativeHook: Global keyboard and mouse hooking for Java.\n"") .append(""Copyright (C) 2006-2016 Alexander Barker.  All Rights Received.\n"") .append(""https://github.com/kwhat/jnativehook/\n"") .append(""\n"") .append(""JNativeHook is free software: you can redistribute it and/or modify\n"") .append(""it under the terms of the GNU Lesser General Public License as published\n"") .append(""by the Free Software Foundation, either version 3 of the License, or\n"") .append(""(at your option) any later version.\n"") .append(""\n"") .append(""JNativeHook is distributed in the hope that it will be useful,\n"") .append(""but WITHOUT ANY WARRANTY; without even the implied warranty of\n"") .append(""MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"") .append(""GNU General Public License for more details.\n"") .append(""\n"") .append(""You should have received a copy of the GNU Lesser General Public License\n"") .append(""along with this program.  If not, see <http://www.gnu.org/licenses/>.\n""); System.out.println(copyright);  SwingUtilities.invokeLater(new Runnable() { public void run() { new NativeHookDemo(); } }); } "	0	0	1	1	0	0
"@Override public User getUser(String gooruUId) throws Exception { if (gooruUId == null || gooruUId.equalsIgnoreCase("""")) { throw new BadRequestException(""User id cannot be null or empty""); } User user = getUserRepository().findByGooruId(gooruUId); if (user == null) { throw new BadRequestException(""User not found""); } user.setProfileImageUrl(buildUserProfileImageUrl(user)); return user; } "	0	0	0	1	0	0
"@Override public String encryptPassword(String password) { MessageDigest messageDigest = null; try { messageDigest = MessageDigest.getInstance(""SHA-1""); // step 2 } catch (NoSuchAlgorithmException e) { throw new BadRequestException(generateErrorMessage(""GL0068""), ""GL0068""); } try { messageDigest.update(password.getBytes(""UTF-8"")); // step 3 } catch (UnsupportedEncodingException e) { throw new BadRequestException(generateErrorMessage(""GL0069""), ""GL0069""); } byte raw[] = messageDigest.digest(); // step 4 return new Base64Encoder().encode(raw); // step 5 } "	0	0	0	1	0	0
private int jjMoveStringLiteralDfa7_0(long old2, long active2) { if (((active2 &= old2)) == 0L) return jjStartNfa_0(5, 0L, 0L, old2); try { curChar = input_stream.readChar(); } catch(java.io.IOException e) { jjStopStringLiteralDfa_0(6, 0L, 0L, active2); return 7; } switch(curChar) { case 101: return jjMoveStringLiteralDfa8_0(active2, 0x80000L); default : break; } return jjStartNfa_0(6, 0L, 0L, active2); } 	0	0	0	0	1	0
private boolean jj_3_1() { if (jj_scan_token(158)) return true; if (jj_3R_40()) return true; if (jj_scan_token(COLON)) return true; if (jj_3R_40()) return true; return false; } 	0	0	1	0	1	0
private boolean jj_3R_362() { if (jj_3R_57()) return true; Token xsp; xsp = jj_scanpos; if (jj_3R_395()) jj_scanpos = xsp; return false; } 	0	0	1	0	1	0
private boolean jj_3R_366() { if (jj_3R_57()) return true; Token xsp; xsp = jj_scanpos; if (jj_3R_398()) jj_scanpos = xsp; return false; } 	0	0	0	0	1	0
"@Test public void testJmsOutboundInboundFlow() { this.jmsOutboundInboundChannel.send(MessageBuilder.withPayload(""hello THROUGH the JMS"") .setHeader(SimpMessageHeaderAccessor.DESTINATION_HEADER, ""jmsInbound"") .build());  Message<?> receive = this.jmsOutboundInboundReplyChannel.receive(10000);  assertNotNull(receive); assertEquals(""HELLO THROUGH THE JMS"", receive.getPayload());  this.jmsOutboundInboundChannel.send(MessageBuilder.withPayload(""hello THROUGH the JMS"") .setHeader(SimpMessageHeaderAccessor.DESTINATION_HEADER, ""jmsMessageDriver"") .build());  receive = this.jmsOutboundInboundReplyChannel.receive(10000);  assertNotNull(receive); assertEquals(""hello through the jms"", receive.getPayload());  assertTrue(this.jmsMessageDriverChannelCalled.get());  this.jmsOutboundInboundChannel.send(MessageBuilder.withPayload(""    foo    "") .setHeader(SimpMessageHeaderAccessor.DESTINATION_HEADER, ""containerSpecDestination"") .build());  receive = this.jmsOutboundInboundReplyChannel.receive(10000);  assertNotNull(receive); assertEquals(""foo"", receive.getPayload()); } "	0	0	0	0	1	0
public void shouldHandlePassedLambda() { handlePassedLambda((String s) -> Integer.valueOf(s)); } 	0	0	0	0	1	0
public void setCompressCallback(CompressCallback callback) { clear(); this.mCallbackReference = new WeakReference<CompressCallback>(callback); } 	0	0	0	1	1	0
@Override public void setFocusParameters() { if (mCameraDevice != null) { updateFocusParameters(); mCameraDevice.applySettings(mCameraSettings); } } 	0	0	0	0	1	0
"public static BusinessRule getDetails(String ruleCode) { BusinessRule rule = null;  String businessruletypecode = getString(""SELECT BT.code FROM BUSINESSRULE B, BUSINESSRULETYPE BT WHERE B.code = '"" + ruleCode + ""' AND B.businessruletypeid = BT.id"");  String name = getString(""SELECT name FROM BUSINESSRULE WHERE code = '"" + ruleCode + ""'""); String code = getString(""SELECT code FROM BUSINESSRULE WHERE code = '"" + ruleCode + ""'""); String failureMessage = getString(""SELECT failuremessage FROM BUSINESSRULE WHERE code = '"" + ruleCode + ""'""); double minValue = getDouble(""SELECT minvalue FROM BUSINESSRULE WHERE code = '"" + ruleCode + ""'""); double maxValue = getDouble(""SELECT maxvalue FROM BUSINESSRULE WHERE code = '"" + ruleCode + ""'""); double value = getDouble(""SELECT value FROM BUSINESSRULE WHERE code = '"" + ruleCode + ""'""); String plSql = getString(""SELECT plsql FROM BUSINESSRULES WHERE code = '"" + ruleCode + ""'""); Operator operator; String operatorName = getString(""SELECT O.name FROM BUSINESSRULE B, OPERATOR O WHERE B.operatorid = O.id AND B.code = '"" + ruleCode + ""'""); String operatorCharacter = getString(""SELECT O.character FROM BUSINESSRULE B, OPERATOR O WHERE B.operatorid = O.id AND B.code = '"" + ruleCode + ""'""); operator = new Operator(operatorName, operatorCharacter); BusinessRuleType businessRuleType; String businessruletypeCode = getString(""SELECT BT.code FROM BUSINESSRULE B, BUSINESSRULETYPE BT WHERE B.businessruletypeid = BT.id AND B.code = '"" + ruleCode + ""'""); String businessruletypeDescription = getString(""SELECT BT.description FROM BUSINESSRULE B, BUSINESSRULETYPE BT WHERE B.businessruletypeid = BT.id AND B.code = '"" + ruleCode + ""'""); String businessruletypeExample = getString(""SELECT BT.example FROM BUSINESSRULE B, BUSINESSRULETYPE BT WHERE B.businessruletypeid = BT.id AND B.code = '"" + ruleCode + ""'""); CodeType businessruletypeCodeType = parseToCodeType(getString(""SELECT BT.codetype FROM BUSINESSRULE B, BUSINESSRULETYPE BT WHERE B.businessruletypeid = BT.id AND B.code = '"" + ruleCode + ""'"")); Category category; String categoryName = getString(""SELECT C.name FROM BUSINESSRULE B, BUSINESSRULETYPE BT, CATEGORY C WHERE B.businessruletypeid = BT.id AND BT.categoryid = C.id AND B.code = '"" + ruleCode + ""'""); category = new Category(categoryName); businessRuleType = new BusinessRuleType(businessruletypeCode, businessruletypeDescription, businessruletypeExample, category, businessruletypeCodeType); Attribute attribute1; String attribute1Name = getString(""SELECT A.name FROM BUSINESSRULE B, ATTRIBUTE A WHERE B.attributeid1 = A.id AND B.code = '"" + ruleCode + ""'""); Table attribute1Table; String attribute1TableName = getString(""SELECT T.name FROM BUSINESSRULE B, ATTRIBUTE A, TABLE T WHERE B.attributeid1 = A.id AND A.tableid = T.id AND B.code = '"" + ruleCode + ""'""); TargetDatabase attribute1TargetDatabase; String attribute1TargetDatabaseName = getString(""SELECT T.databasename FROM BUSINESSRULE B, ATTRIBUTE A, TABLE T WHERE B.attributeid1 = A.id AND A.tableid = T.id AND B.code = '"" + ruleCode + ""'""); String attribute1TargetDatabaseType = getString(""SELECT T.databasetype FROM BUSINESSRULE B, ATTRIBUTE A, TABLE T WHERE B.attributeid1 = A.id AND A.tableid = T.id AND B.code = '"" + ruleCode + ""'""); attribute1TargetDatabase = parseToTargetDatabase( attribute1TargetDatabaseName, attribute1TargetDatabaseType); attribute1Table = new Table(attribute1TableName, attribute1TargetDatabase); attribute1 = new Column(attribute1Name, attribute1Table); Attribute attribute2; String attribute2Name = getString(""SELECT A.name FROM BUSINESSRULE B, ATTRIBUTE A WHERE B.attributeid2 = A.id AND B.code = '"" + ruleCode + ""'""); Table attribute2Table; String attribute2TableName = getString(""SELECT T.name FROM BUSINESSRULE B, ATTRIBUTE A, TABLE T WHERE B.attributeid2 = A.id AND A.tableid = T.id AND B.code = '"" + ruleCode + ""'""); TargetDatabase attribute2TargetDatabase; String attribute2TargetDatabaseName = getString(""SELECT T.databasename FROM BUSINESSRULE B, ATTRIBUTE A, TABLE T WHERE B.attributeid2 = A.id AND A.tableid = T.id AND B.code = '"" + ruleCode + ""'""); String attribute2TargetDatabaseType = getString(""SELECT T.databasetype FROM BUSINESSRULE B, ATTRIBUTE A, TABLE T WHERE B.attributeid2 = A.id AND A.tableid = T.id AND B.code = '"" + ruleCode + ""'""); attribute2TargetDatabase = parseToTargetDatabase( attribute2TargetDatabaseName, attribute2TargetDatabaseType); attribute2Table = new Table(attribute2TableName, attribute2TargetDatabase); attribute2 = new Column(attribute2Name, attribute2Table);  ArrayList<String> listValues = getListValues(ruleCode);  ArrayList<Attribute> attributes = new ArrayList<Attribute>(); attributes.add(attribute1); attributes.add(attribute2);  switch (businessruletypecode) { case ""ARNG"": rule = new AttributeRange(code, name, minValue, maxValue, operator, businessRuleType, attribute1); break; case ""ACMP"": rule = new AttributeCompare(code, name, value, operator, businessRuleType, attribute1); break; case ""ALIS"": rule = new AttributeList(code, name, attribute1, businessRuleType, listValues); break; case ""AOTH"": rule = new AttributeOther(code, name, businessRuleType, attribute1, plSql); break; case ""TCMP"": rule = new TupleCompare(code, name, operator, businessRuleType, attributes); break; case ""TOTH"": rule = new TupleOther(code, name, businessRuleType, attributes); break; case ""ICMP"": rule = new InterEntityCompare(code, name, businessRuleType, attributes); break; case ""EOTH"": rule = new EntityOther(code, name, businessRuleType, attributes); break; case ""MODI"": rule = new Modify(code, name, businessRuleType, attributes); break; }  return rule; } "	0	0	1	0	0	0
"@Override public String[] helpCommand() { //noinspection StringConcatenationMissingWhitespace return new String[]{""Usage:""+COMMAND_INIT_STRING+""connect <host> <port>""}; } "	0	0	0	0	1	0
"@Override public String[] helpCommand() {  //noinspection StringConcatenationMissingWhitespace return new String[]{""Usage :"" + ICommand.COMMAND_INIT_CHAR + ""whisper <ToPlayer> <Message>""}; } "	0	0	1	1	1	0
"protected void parseChallenge( final String buffer, int pos, int len) {  BasicHeaderValueParser parser = BasicHeaderValueParser.DEFAULT; ParserCursor cursor = new ParserCursor(pos, buffer.length()); CharArrayBuffer buf = new CharArrayBuffer(len); buf.append(buffer);  HeaderElement[] elements = parser.parseElements(buf, cursor); if (elements.length == 0) { throw new IllegalArgumentException(""Authentication challenge is empty""); }  Map<String, String> params = getParameters(); for (HeaderElement element : elements) { params.put(element.getName(), element.getValue()); } } "	0	0	0	0	1	0
"public void refreshModules() { try { IWorkingCopy workingCopy = getWorkingCopy(); workingCopy.addWorkingCopyListener(this); modulesBlock.refresh(getTernProject().getAllModules(), workingCopy.getCheckedModules()); } catch (Throwable e) { Trace.trace(Trace.SEVERE, ""Error while loading tern project"", e); } } "	1	0	0	0	0	0
@Test public void testRemoveValidatorUsernameNonExist() throws Exception { Assert.assertFalse(ChatroomUpdateDTO.removeValidator(ValidationScopes.USER_NAME, 110)); } 	0	0	0	0	1	0
"private void reevaluate(ExletRunner runner, RuleType xType) { _log.debug(""Reevaluating exception for revised ruleset""); String caseID = runner.getCaseID(); String trigger = runner.getTrigger(); Element data = getCaseData(caseID); WorkItemRecord wir = xType.isItemLevelType() ? runner.getWir() : null; YSpecificationID specID = getSpecIDForCaseID(caseID); switch (xType) { case CasePreconstraint : checkConstraints(specID, caseID, data, true); break; case CasePostconstraint: checkConstraints(specID, caseID, data, false); break; case ItemPreconstraint : checkConstraints(wir, data, true); break; case ItemPostconstraint: checkConstraints(wir, data, false); break; case ItemAbort         : if (wir != null) handleWorkItemAbortException(wir, wir.getDataListString()); break ; case ItemTimeout : if (wir != null) handleTimeoutEvent(wir, wir.getTaskID()); break ; case ItemResourceUnavailable : break;   // todo case ItemConstraintViolation : if (wir != null) handleConstraintViolationException(wir, wir.getDataListString()); break; case CaseExternalTrigger : raiseExternalException(""case"", caseID, trigger); break; case ItemExternalTrigger : raiseExternalException(""item"", caseID, trigger); break; } } "	0	0	1	0	1	0
"@Override public boolean find(String desc, InsnList insns, Collection<AbstractInsnNode> nodes) { throw new InvalidInjectionException(this.context, ""STORE injection point must be used in conjunction with @ModifyVariable""); } "	0	0	0	0	1	0
private void schedule(final QuartzSchedulerJob job, final JobDetail jobDetail) throws org.quartz.SchedulerException { Trigger quartzTrigger = triggerBuilder.buildFrom(job); this.backend.scheduleJob(jobDetail, quartzTrigger); job.setNextExecutionTime(quartzTrigger.getNextFireTime()); } 	0	0	0	0	1	0
private boolean isWhiteHasMoreMoves(Dice dice){ BackgammonBoardLocation toLocation = new BackgammonBoardLocation(OUT_WHITE +dice.getValue());  if(eatenWhites.size() > 0 && !isPawnCanBeSetIn(eatenWhites.peek(), toLocation)) return false; return true; } 	0	0	0	0	1	0
"private void updateCheckReconciliationAsException(CheckReconciliation cr) { cr.setLastUpdate(new Timestamp(new Date().getTime())); cr.setStatus(CrConstants.CheckReconciliationStatusCodes.EXCP); cr.setGlTransIndicator(Boolean.FALSE); cr.setSourceCode(CrConstants.CheckReconciliationSourceCodes.BFL_SRC); checkReconciliationDao.save(cr); CheckReconError cre = generateCheckReconError(cr, ""The bank record does not exist in reconciliation table. ""); checkReconErrorRecords.add(cre); } "	0	0	0	0	1	0
"@Test public void receiveParsesPatchTopicForDesiredPropertiesNotificationSucceeds(@Mocked final Mqtt mockMqtt) throws IOException { final byte[] actualPayload = ""UpdateDesiredPropertiesNotificationData"".getBytes(); final String expectedTopic = ""$iothub/twin/PATCH/properties/desired/"" + ""?$version="" + mockVersion; DeviceTwinMessage receivedMessage = null; try { //arrange MqttDeviceTwin testTwin = new MqttDeviceTwin(); String insertTopic = expectedTopic; ConcurrentSkipListMap<String, byte[]> testMap = new ConcurrentSkipListMap<String, byte[]>(); testMap.put(insertTopic, actualPayload); Deencapsulation.setField(mockMqtt, ""allReceivedMessages"", testMap);  //act receivedMessage = (DeviceTwinMessage) testTwin.receive();  } finally { //assert assertNotNull(receivedMessage); assertTrue(receivedMessage.getMessageType() == MessageType.DeviceTwin); assertTrue(receivedMessage.getDeviceTwinOperationType() == DEVICE_TWIN_OPERATION_SUBSCRIBE_DESIRED_PROPERTIES_RESPONSE); assertTrue(receivedMessage.getVersion().equals(mockVersion)); assertTrue(receivedMessage.getRequestId() == null); assertTrue(receivedMessage.getStatus() == null); } } "	0	0	0	0	1	0
"public TreeTerm[] getHierarchyTopLevel(String rootURI, Locale lang) { List<ModelWrapper> termModels = null; List<TreeTerm> resultList = null; String strippedUri = rootURI;  if (rootURI.endsWith("".rdf"")) strippedUri = rootURI.substring(0, rootURI.length()-4);  try { termModels = rdfReader.fetchHierarchiesFromRoot(strippedUri); } catch (DoesNotExistException e) { return getHierarchyNextLevel(rootURI.substring(0, rootURI.length()-4), lang); } resultList = rdfMapper.mapHierarchyRootToTreeTerms(termModels);  return resultList.toArray(new TreeTerm[resultList.size()]);  } "	1	0	0	1	1	0
"public static boolean showInstallPrompt(@NonNull Activity activity, int requestCode, @Nullable String referrer) { String installReferrerString = Defines.Jsonkey.IsFullAppConv.getKey() + ""=true&"" + referrer; return showInstallPrompt(activity, requestCode, installReferrerString); } "	0	0	0	0	1	0
"@Override public void createDeployment(String processArchiveName, DeploymentBuilder deploymentBuilder) { BpmnModelInstance bpmnModelInstance = Bpmn.createExecutableProcess(""foo"") .startEvent() .scriptTask() .scriptText(""println('Yoyo');"") .scriptFormat(""Javascript"") .serviceTask() .camundaExpression(""${myBean}"") .endEvent() .done();  deploymentBuilder.addModelInstance(""process.bpmn"", bpmnModelInstance); } "	0	0	1	0	0	0
"private TestCase createSyncConflictTest(final boolean autoResolve) {  final String tableName = ""offlineReady"";  final TestCase test = new TestCase() {  @Override protected void executeTest(MobileServiceClient offlineReadyClient, final TestExecutionCallback callback) {  TestCase testCase = this; TestResult result = new TestResult(); result.setStatus(TestStatus.Passed); result.setTestCase(testCase); try {  boolean resolveConflictsOnClient = autoResolve;  SQLiteLocalStore localStore = new SQLiteLocalStore(offlineReadyClient.getContext(), OFFLINE_TABLE_NAME, null, 1);  log(""Defined the table on the local store"");  Map<String, ColumnDataType> tableDefinition = new HashMap<String, ColumnDataType>(); tableDefinition.put(""id"", ColumnDataType.String); tableDefinition.put(""name"", ColumnDataType.String); tableDefinition.put(""age"", ColumnDataType.Number); tableDefinition.put(""float"", ColumnDataType.Number); tableDefinition.put(""date"", ColumnDataType.Date); tableDefinition.put(""bool"", ColumnDataType.Boolean); tableDefinition.put(""__version"", ColumnDataType.String);  log(""Initialized the store and sync context"");  localStore.defineTable(tableName, tableDefinition);  offlineReadyClient.getSyncContext().initialize(localStore, new SimpleSyncHandler()).get();  MobileServiceSyncTable<OfflineReadyItem> localTable = offlineReadyClient.getSyncTable(tableName, OfflineReadyItem.class);  MobileServiceTable<OfflineReadyItem> remoteTable = offlineReadyClient.getTable(tableName, OfflineReadyItem.class);  ConflictResolvingSyncHandler conflictResolvingSyncHandler = new ConflictResolvingSyncHandler(this, offlineReadyClient);  if (resolveConflictsOnClient) { offlineReadyClient.getSyncContext().initialize(localStore, conflictResolvingSyncHandler); } else { offlineReadyClient.getSyncContext().initialize(localStore, new SimpleSyncHandler()).get(); }  localTable.purge(null).get(); log(""Removed all items from the local table"");  OfflineReadyItem item = new OfflineReadyItem(new Random());  item = localTable.insert(item).get();  log(""Inserted the item to the local store:"" + item);  Query pullQuery = QueryOperations.tableName(tableName).field(""id"").eq(item.getId());// ""$filter=id eq '"" // + // item.Id // + // ""'"";  localTable.pull(pullQuery).get();  log(""Changing the item on the server"");  item.setFlag(!item.getFlag());  item = remoteTable.update(item).get();  log(""Updated the item: "" + item);  OfflineReadyItem localItem = localTable.lookUp(item.getId()).get();  log(""Retrieved the item from the local table, now updating it"");  localItem.setDate(new Date());  localTable.update(localItem).get(); log(""Updated the item on the local table"");  log(""Now trying to pull changes from the server (will trigger a push)"");  try { localTable.pull(pullQuery).get(); if (!autoResolve) { log(""Error, pull (push) should have caused a conflict, but none happened.""); result.setStatus(TestStatus.Failed); callback.onTestComplete(this, result); return; } else { OfflineReadyItem expectedMergedItem = conflictResolvingSyncHandler.conflictResolution(localItem, item); OfflineReadyItem localMergedItem = localTable.lookUp(item.getId()).get(); if (localMergedItem.equals(expectedMergedItem)) { log(""Item was merged correctly.""); } else { log(""Error, item not merged correctly. Expected: "" + expectedMergedItem + "" Actual: "" + localMergedItem); result.setStatus(TestStatus.Failed); callback.onTestComplete(this, result); return; } } } catch (Exception ex) { log(""Push exception: "" + ex); if (autoResolve) { log(""Error, push should have succeeded.""); result.setStatus(TestStatus.Failed); callback.onTestComplete(this, result); return; } else { log(""Expected exception was thrown.""); } }  log(""Cleaning up""); localTable.delete(item).get(); log(""Local table cleaned up. Now sync'ing once more""); offlineReadyClient.getSyncContext().push().get(); log(""Done"");  callback.onTestComplete(this, result);  } catch (Exception e) { callback.onTestComplete(this, createResultFromException(e)); return; } }  ; };  test.setName(""Offline - dealing with conflicts - "" + (autoResolve ? ""client resolves conflicts"" : ""push fails after conflicts""));  return test; } "	0	0	0	0	0	1
"@Test public void testConfigureReader() throws IOException { ObjectReader reader = new ObjectMapper().reader(); JsonNode json = reader.readTree(""{\""entity_type\"": \""item\""}""); EntityFormat fmt = JSONEntityFormat.fromJSON(null, ClassLoaders.inferDefault(), json); assertThat(fmt.getEntityType(), equalTo(CommonTypes.ITEM));  LineEntityParser lep = fmt.makeParser(Collections.EMPTY_LIST); Entity res = lep.parse(""{\""id\"": 204, \""name\"": \""hamster\"", \""extra\"": \""wumpus\""}""); assertThat(res, notNullValue()); assertThat(res.getId(), equalTo(204L)); assertThat(res.get(CommonAttributes.NAME), equalTo(""hamster"")); assertThat(res.get(""extra""), equalTo(""wumpus"")); } "	0	0	0	0	1	0
"@NonNull private static Waypoint createWaypointFromDatabaseContent(final Cursor cursor) {  final String name = cursor.getString(cursor.getColumnIndex(""name"")); final WaypointType type = WaypointType.findById(cursor.getString(cursor.getColumnIndex(""type""))); final boolean own = cursor.getInt(cursor.getColumnIndex(""own"")) != 0; final Waypoint waypoint = new Waypoint(name, type, own); waypoint.setVisited(cursor.getInt(cursor.getColumnIndex(""visited"")) != 0); waypoint.setId(cursor.getInt(cursor.getColumnIndex(""_id""))); waypoint.setGeocode(cursor.getString(cursor.getColumnIndex(""geocode""))); waypoint.setPrefix(cursor.getString(cursor.getColumnIndex(""prefix""))); waypoint.setLookup(cursor.getString(cursor.getColumnIndex(""lookup""))); waypoint.setCoords(getCoords(cursor, cursor.getColumnIndex(""latitude""), cursor.getColumnIndex(""longitude""))); waypoint.setNote(cursor.getString(cursor.getColumnIndex(""note""))); waypoint.setUserNote(cursor.getString(cursor.getColumnIndex(""user_note""))); waypoint.setOriginalCoordsEmpty(cursor.getInt(cursor.getColumnIndex(""org_coords_empty"")) != 0); try { waypoint.setCalculatorStoredState(CalcState.fromJSON(cursor.getString(cursor.getColumnIndex(""calc_state"")))); } catch (final JSONException e) { waypoint.setCalculatorStoredState(null); }  return waypoint; } "	0	0	0	0	1	0
"private boolean isRepositoryChanged(GitCommand command, File workingDirectory) { UrlArgument currentWorkingUrl = command.workingRepositoryUrl(); if (LOG.isTraceEnabled()) { LOG.trace(""Current repository url of ["" + workingDirectory + ""]: "" + currentWorkingUrl); LOG.trace(""Target repository url: "" + url); } return !MaterialUrl.sameUrl(url.forCommandline(), currentWorkingUrl.forCommandline()) || !getBranch().equals(command.getCurrentBranch()); } "	0	0	0	0	1	0
"@Test(groups = {""wso2.am""}, description = ""Checking CORS headers in response"", dependsOnMethods = ""CheckCORSHeadersInPreFlightResponse"") public void CheckCORSHeadersInResponse() throws Exception { HttpClient httpclient = HttpClientBuilder.create().build(); HttpGet get = new HttpGet(getAPIInvocationURLHttp(API_CONTEXT, API_VERSION)); get.addHeader(""Origin"", ""http://localhost""); get.addHeader(""Authorization"", ""Bearer "" + accessToken);  HttpResponse response = httpclient.execute(get);  assertEquals(response.getStatusLine().getStatusCode(), HTTP_RESPONSE_CODE_OK, ""Response code mismatch."");  Header[] responseHeaders = response.getAllHeaders();  log.info(""Response Headers: CheckCORSHeadersInResponse""); for (Header header : responseHeaders) { log.info(header.getName() + "" : "" + header.getValue()); }  Header header = pickHeader(responseHeaders, ACCESS_CONTROL_ALLOW_ORIGIN_HEADER); assertNotNull(header, ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + "" header is not available in the response.""); assertEquals(header.getValue(), ACCESS_CONTROL_ALLOW_ORIGIN_HEADER_VALUE, ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + "" header value mismatch."");  header = pickHeader(responseHeaders, ACCESS_CONTROL_ALLOW_METHODS_HEADER); assertNotNull(header, ACCESS_CONTROL_ALLOW_METHODS_HEADER + "" header is not available in the response.""); assertEquals(header.getValue(), ACCESS_CONTROL_ALLOW_METHODS_HEADER_ALL_VALUES, ACCESS_CONTROL_ALLOW_METHODS_HEADER + "" header value mismatch."");  header = pickHeader(responseHeaders, ACCESS_CONTROL_ALLOW_HEADERS_HEADER); assertNotNull(header, ACCESS_CONTROL_ALLOW_HEADERS_HEADER + "" header is not available in the response.""); assertEquals(header.getValue(), ACCESS_CONTROL_ALLOW_HEADERS_HEADER_VALUE, ACCESS_CONTROL_ALLOW_HEADERS_HEADER + "" header value mismatch."");  assertNull(pickHeader(responseHeaders, ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER), ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER + "" header is available in the response, "" + ""but it should not be.""); } "	0	0	1	0	0	0
"@Override public void onMapReady(GoogleMap googleMap) { mMap = googleMap;  mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.mapwrapperlayout); mapWrapperLayout.init(mMap, 0);  m_bundle = getIntent().getExtras(); if(m_bundle!=null && (m_bundle.getString(""state"").equals(""modify"")||m_bundle.getString(""state"").equals(""showOne""))) { Mapinit_location(); setMyPositionMarker(); Double mod_latitude = m_bundle.getDouble(""latitude"", 200), mod_longitude = m_bundle.getDouble(""longitude"", 200); if (mod_latitude == 200) { mod_latitude = CurrentPosition.latitude; mod_longitude = CurrentPosition.longitude; } mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(mod_latitude, mod_longitude), ZoomLevel)); mMap.getUiSettings().setMapToolbarEnabled(false);  app_state = ""modify""; setState(m_bundle); } else { Mapinit(); } } "	0	0	0	0	1	0
"@Test public void testRegisterWrongValidator() { try { List<String> str = ChatroomCheckInsideDTO.getValidatorList(ValidationScopes.USER_NAME); Assert.assertEquals(""Failure - expected validatorList size to be 0"", 0, str.size()); ChatroomCheckInsideDTO.registerValidator(new NoSpacesValidator(), ValidationScopes.STRING); } catch (ValidatorNotListedException ex) { Assert.assertTrue(""Exception should be ValidatorNotListedException"", ex.getMessage().equals(new ValidatorNotListedException().getMessage())); } catch (InappropriateValidatorException ex) { Assert.fail(""Validator should be appropriate should exist""); }  } "	0	0	0	0	1	0
@Override public void onInvoiceRemove(final Invoice invoice) { getActivity().runOnUiThread(new Runnable() { @Override public void run() { removeRoute(); int invoiceId = invoice.getId(); for (Invoice item : mInvoices) { if (item.getId() == invoiceId) { mInvoices.remove(item); mAdapter.notifyDataSetChanged(); break; } } Marker marker = findMarkerByInvoice(invoice); if (marker != null) { MapUtils.setAnimatedOutMarker(marker); mHashMap.remove(marker); } } }); } 	0	0	0	0	1	0
@Override public void updateStatusReceiveInvoice(String invoiceId, int userInvoiceId) { mRlOrderDetail.setVisibility(View.GONE); Invoice item = findInvoiceById(invoiceId); if (item != null) { item.setUserInvoiceId(userInvoiceId); mAdapter.notifyDataSetChanged();  Marker marker = findMarkerByInvoice(item); int markerResId = item.isReceived() ? R.drawable.ic_marker_shop_received : R.drawable.ic_marker_shop; if (marker != null) { marker.setIcon(BitmapDescriptorFactory.fromResource(markerResId)); mHashMap.get(marker).setUserInvoiceId(userInvoiceId); } } } 	0	0	0	0	1	0
"@Override protected boolean accepts(FileResource item, String path, Scope scope) throws IOException { return path.endsWith("".class""); } "	0	0	1	1	0	0
"public List<RiseOrder> loadActiveOrder(){ QueryRunner run = new QueryRunner(getDataSource()); ResultSetHandler<List<RiseOrder>> h = new BeanListHandler<RiseOrder>(RiseOrder.class); String sql = ""Select * from RiseOrder where where Entry = 0 and IsDel = 0""; try{ return run.query(sql,h); }catch (SQLException e) { logger.error(e.getLocalizedMessage(), e); } return Lists.newArrayList(); } "	0	0	1	1	1	0
"public void testLoadingLegoNxtProjectsOfCatrobatLanguageVersion092() { copyAssetProjectZipFile(ZIP_FILENAME_LEGO_NXT, Constants.TMP_PATH); UtilZip.unZipFile(Constants.TMP_PATH + ""/"" + ZIP_FILENAME_LEGO_NXT, Constants.DEFAULT_ROOT + ""/"" + PROJECT_NAME_LEGO_NXT);  Project legoProject = StorageHandler.getInstance().loadProject(PROJECT_NAME_LEGO_NXT); assertTrue(""Cannot load "" + PROJECT_NAME_LEGO_NXT + "" project"", legoProject != null); assertEquals(""Wrong project loaded"", PROJECT_NAME_LEGO_NXT, legoProject.getName().toLowerCase());  deleteZipFile(ZIP_FILENAME_LEGO_NXT, Constants.TMP_PATH); TestUtils.deleteTestProjects(PROJECT_NAME_LEGO_NXT); } "	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);  new CustomView(this,null); //new CustomView2(this,null);  Button btn = (Button) findViewById(R.id.btn); //btn.setOnClickListener(view -> Toast.makeText(this,""哈哈"",Toast.LENGTH_LONG).show());  String s1 = getString(R.string.s1); String s3 = getString(R.string.s3); //Toast.makeText(this,""haha "" + "" | "" + s1 +  "" | "" + s3,Toast.LENGTH_LONG).show();  JavaLib javaLib = new JavaLib();  System.out.println(""==app: "" + javaLib.str);  String s2 = getString(R.string.s2); int common3str = 0; try { Class common3RClass = Class.forName(""com.dx168.fastdex.sample.common3.R$string""); Field field = common3RClass.getField(""common3str""); common3str = (Integer) field.get(null); } catch (Throwable e) { e.printStackTrace(); }  StringBuilder sb = new StringBuilder(); sb.append(JavaLib.str); sb.append(""\n""); sb.append(CommonUtils.str); sb.append(""\n""); sb.append(Common2Utils.str); sb.append(""\n""); sb.append(Common3Utils.str); sb.append(""\n""); sb.append(getResources().getString(common3str)); sb.append(""\n""); sb.append(""haha"");  Log.d(TAG,""sb: \n"" + sb.toString()); Toast.makeText(this, sb.toString(),Toast.LENGTH_LONG).show();  new Runnable(){ @Override public void run() {  } };  SampleApplication realApp = (SampleApplication)getApplication();  new Runnable(){ @Override public void run() { //Toast.makeText(getApplicationContext(),""1223"",Toast.LENGTH_LONG).show(); } }.run(); new T1(); new T2(); } "	0	0	0	0	1	0
public void processBodyResponse(MessageSender sender, BodyResponseMessage message) { SyncPeerStatus peerStatus = this.getPeerStatus(sender.getNodeID());  if (!peerStatus.isExpectedResponse(message.getId(), message.getMessageType())) return;  PendingBodyResponse expected = pendingBodyResponses.get(message.getId()); if (expected == null || !sender.getNodeID().equals(expected.nodeID)) { // Don't waste time on spam or expired responses. return; }  // TODO(mc): validate transactions and uncles are part of this block (with header) blockSyncService.processBlock(sender, new Block(expected.header, message.getTransactions(), message.getUncles()));  this.sendNextBlockHeadersRequest(sender, this.getPeerStatus(sender.getNodeID())); } 	0	0	0	0	1	0
"void updateValue(){ LocalTimeStringConverter converter = new LocalTimeStringConverter(FormatStyle.SHORT); datePicker.setTime(converter.fromString(selectedHourLabel.getText()+"":""+selectedMinLabel.getText()+"" ""+period.get())); } "	0	0	0	0	1	0
public int getVariant() { return (int)((value / 1000.0) * 4); } 	0	0	0	0	1	0
public void addRecipes() { for (String sourceMat : source.getMatList()) { for (String targetMat : target.getMatList()) { Object targetMaterial = IronChestType.translateOreName(targetMat); Object sourceMaterial = IronChestType.translateOreName(sourceMat); IronChestType.addRecipe(new ItemStack(item), recipe, 'm', targetMaterial, 's', sourceMaterial, 'G', Blocks.glass, 'O', Blocks.obsidian); } } } 	0	0	0	0	1	0
@Override public boolean areContentsTheSame(@Nullable Message message) { return message != null && this.id == message.id && this.sender.equals(message.sender) && this.type == message.type && this.time.equals(message.time) && this.content.equals(message.content) && this.flags == message.flags; } 	0	0	0	0	1	0
"@Override public void savePropertiesInTmxObject(tiled.core.MapObject tmxObject) { if (dialogue != null) { tmxObject.getProperties().setProperty(""phrase"", dialogue.id); } else if (dialogue_id != null) { tmxObject.getProperties().setProperty(""phrase"", dialogue_id); } if (requirement != null) { if (oldSchoolRequirement && Requirement.RequirementType.questProgress.equals(requirement.type) && (requirement.negated == null || !requirement.negated)) { tmxObject.setName(requirement.required_obj_id+"":""+Integer.toString(requirement.required_value)); } else { if (requirement.type != null) { tmxObject.getProperties().setProperty(""requireType"", requirement.type.toString()); } if (requirement.required_obj != null) { tmxObject.getProperties().setProperty(""requireId"", requirement.required_obj.id); } else if (requirement.required_obj_id != null) { tmxObject.getProperties().setProperty(""requireId"", requirement.required_obj_id); } if (requirement.required_value != null) { tmxObject.getProperties().setProperty(""requireValue"", requirement.required_value.toString()); } if (requirement.negated != null) { tmxObject.getProperties().setProperty(""requireNegation"", Boolean.toString(requirement.negated)); } } } } "	0	0	0	0	1	0
"public Request getRequest() { return new Request.Builder().url(url).header(""title"", keywords).addHeader(""Authorization"", ""Bearer ""+ token).build(); } "	0	0	0	0	1	0
"public void initSite(Users users) { String pwd = EncrypKit.md5(users.getUsername() + users.getPassword()); users.setPassword(pwd); users.setScreen_name(users.getUsername()); users.setCreated(DateKit.nowUnix()); Integer uid = users.save();  try { String cp   = SiteService.class.getClassLoader().getResource("""").getPath(); File   lock = new File(cp + ""install.lock""); lock.createNewFile(); TaleConst.INSTALL = Boolean.TRUE; new Logs(LogActions.INIT_SITE, null, """", uid.intValue()).save(); } catch (Exception e) { throw new TipException(""初始化站点失败""); } } "	0	0	0	0	1	0
"protected void fetch(Application.Type type, SyncRepository syncRepository, RampartApi rampartApi, CrudRepository<ModelType, Long> repository, ModelFactory modelFactory) { try { SyncModel syncModel = syncRepository.findOne(Application.SYNC_TIME_ID);  Long limit = 0L;  if (syncModel != null && syncModel.getSync(type) != null) { limit = syncModel.getSync(type).toEpochSecond() * 1000; }  logger.info(""Attempting to retrieve "" + type + "" models with changes since "" + limit);  int page = 0;  while (true) { RampartResponse rampartResponse = null;  switch(type) { case GROUP: rampartResponse = rampartApi.getUpdatedRoles(Long.toString(limit), Integer.toString(page)); break; case USER: rampartResponse = rampartApi.getUpdatedPeople(Long.toString(limit), Integer.toString(page)); break; case MEMBERSHIP: rampartResponse = rampartApi.getUpdatedRoleMemberships(Long.toString(limit), Integer.toString(page)); break; case EXPIRED_MEMBERSHIP: rampartResponse = rampartApi.getRecentlyExpiredMemberships(Long.toString(limit), Integer.toString(page)); break; case EXPIRED_PASSWORD: rampartResponse = rampartApi.getRecentlyExpiredPasswords(Long.toString(limit), Integer.toString(page)); break; }  if (rampartResponse == null || rampartResponse.getPayload() == null) { logger.error(""Couldn't connect to Rampart""); break; }  List<RampartModel> rampartList = (List<RampartModel>) rampartResponse.getPayload();  if (rampartList == null || rampartList.isEmpty()) { logger.debug(""Couldn't retrieve objects from Rampart""); break; }  logger.info(""Retrieved list of "" + rampartList.size() + "" "" + type + "" objects from Rampart"");  for (RampartModel rampartModel : rampartList) { ModelType built = (ModelType) modelFactory.build(type, rampartModel);  if (built == null) { logger.warn(""Couldn't build Noah model from Rampart object""); continue; }  logger.debug(""Built "" + built.toString());  ModelType saved = repository.save(built);  if (saved == null) { System.out.println(""Couldn't save Noah model""); } }  //sleep(fetchSleep); page++; } } catch (Exception e) { logger.error(""Couldn't fetch "" + type + "" from Rampart: "" + e.getMessage()); e.printStackTrace(); } } "	0	0	1	0	0	0
"private GroupModel syncGroup(GroupModel groupModel) { Group group = new GroupBuilder() .title(groupModel.getTitle()) .description(""A group migrated from Rampart"") .snippet(""A group migrated from Rampart"") .tag(""Rampart"") .phone(""555-123-4567"") .access(GroupAccess.PRIVATE) .sortField(GroupSortField.TITLE) .sortOrder(SortOrder.ASCENDING) .isViewOnly(false) .isInvitationOnly(true) .thumbnail("""") .build();  GroupCreateResponse groupCreateResponse = arcPortalApi.groupApi.createGroup(group);  if (groupCreateResponse == null || groupCreateResponse.getError() != null) { logger.debug(""WARNING: Could not sync "" + group.title + "" to Portal""); return null; }  groupModel.setDirty(false); groupModel.setPortalId(groupCreateResponse.group.id);  return groupModel; } "	0	0	1	0	1	0
"@Override public void initialize(URL url, ResourceBundle rb) { customizeEditorPane();  if((message != null && message.getTo().contains(""##""))|| receiver.contains(""##"")){ btnSendAttach.setDisable(true); } } "	0	0	1	1	1	0
"@Override public void check(GKSchemaClass cls) { validateDataSource(); StableIdentifierGenerator helper = new StableIdentifierGenerator(); if (!helper.getClassNamesWithStableIds().contains(cls.getName())) { JOptionPane.showMessageDialog(parentComp, cls.getName() + "" doesn't need stableIdentifier."", ""No StableIdentifier"", JOptionPane.INFORMATION_MESSAGE); return; } try { Collection<GKInstance> c = dataSource.fetchInstancesByClass(cls); check(new ArrayList<GKInstance>(c)); } catch(Exception e) { JOptionPane.showMessageDialog(parentComp, ""Error in check: "" + e, ""Error"", JOptionPane.ERROR_MESSAGE); return; } } "	0	0	0	0	1	0
public static ResponseJs getError(StatusEnum status){ ResponseJs result = new ResponseJs(); DataJs data = new DataJs(); data.setStatus(status); result.setData(data);  return result; } 	0	0	0	0	1	0
"public UserTable getUserTable() { if (mUserTable == null) { DbHandle db = null; try { db = Tables.getInstance().getDatabase().openDatabase(getAppName()); SQLQueryStruct sqlQueryStruct = IntentUtil .getSQLQueryStructFromBundle(this.getIntent().getExtras());  ArrayList<String> dbGroupBy = TableUtil.get().getGroupByColumns(Tables.getInstance() .getDatabase(), getAppName(), db, getTableId()); String[] groupBy = dbGroupBy.toArray(new String[dbGroupBy.size()]); if (groupBy.length != 0 && !getIntentExtras().containsKey(""intentOverridesDatabase"")) { sqlQueryStruct.groupBy = groupBy; }  String sort = TableUtil.get().getSortColumn(Tables.getInstance() .getDatabase(), getAppName(), db, getTableId()); if (sort != null || sort.length() != 0 || !getIntentExtras().containsKey (""intentOverridesDatabase"")) { sqlQueryStruct.orderByElementKey = sort; }  String[] emptyArray = {}; mUserTable = Tables.getInstance().getDatabase() .simpleQuery(this.getAppName(), db, this.getTableId(), getColumnDefinitions(), sqlQueryStruct.whereClause, sqlQueryStruct.selectionArgs, (sqlQueryStruct.groupBy == null) ? emptyArray : sqlQueryStruct.groupBy, sqlQueryStruct.having, (sqlQueryStruct.orderByElementKey == null) ? emptyArray : new String[] { sqlQueryStruct.orderByElementKey }, (sqlQueryStruct.orderByDirection == null) ? emptyArray : new String[] { sqlQueryStruct.orderByDirection }, null, null); } catch (ServicesAvailabilityException e) { WebLogger.getLogger(getAppName()).printStackTrace(e); } finally { if (db != null) { try { Tables.getInstance().getDatabase().closeDatabase(getAppName(), db); } catch (ServicesAvailabilityException e) { // ignore } } } } return mUserTable; } "	1	1	1	1	0	0
private void redirect(Player player, Location targetlocation) { if (progressing && !settingUp) { if (location.distanceSquared(player.getLocation()) <= selectRange * selectRange) { targetDirection = GeneralMethods.getDirection(location, targetlocation).normalize(); } targetDestination = targetlocation; this.player = player; } } 	0	0	0	0	1	0
"@RequestMapping(headers = {""Accept=multipart/form-data""}, method = POST, value = ""/multimedia-file"") public ResponseEntity<String> uploadFiles(@RequestParam(""anm-id"") String providerId, @RequestParam(""entity-id"") String entityId,@RequestParam(""content-type"") String contentType, @RequestParam(""file-category"") String fileCategory, @RequestParam(""file"") MultipartFile file) {  MultimediaDTO multimediaDTO = new MultimediaDTO(entityId, providerId, contentType, null, fileCategory);  String status = multimediaService.saveMultimediaFile(multimediaDTO, file);  return new ResponseEntity<>(new Gson().toJson(status), OK); } "	0	0	0	0	1	0
"public SimpleObject dispensedDetails(@RequestParam(""patient"") Patient patient, HttpServletRequest request){ KenyaEmrService kenyaEmrService = (KenyaEmrService) Context .getService(KenyaEmrService.class); HttpSession session = request.getSession(); String processedDate=(String) session.getAttribute(""processedDate""); Date processedDatee = null; try { processedDatee  = parseDate(processedDate); } catch (ParseException e) { e.printStackTrace(); } SimpleObject simplePatientt= new SimpleObject(); List<DrugOrderProcessed> dops = kenyaEmrService.getDrugOrdersByPatientAndProcessedDate(patient,processedDatee); List<DrugObsProcessed> dobps = kenyaEmrService.getObsDrugOrdersByPatientAndProcessedDate(patient,processedDatee); List<DrugDetails> drugDetailsList=new LinkedList<DrugDetails>();  for(DrugOrderProcessed dop:dops){ DrugDetails drugDetails=new DrugDetails(); drugDetails.setDrug(dop.getDrugOrder().getConcept().getName().toString()); drugDetails.setStrength(dop.getDrugOrder().getDose().toString()); drugDetails.setFormulation(dop.getDrugOrder().getUnits().toString()); drugDetails.setFrequency(dop.getDrugOrder().getFrequency().toString()); drugDetails.setQuantity(dop.getQuantityPostProcess().toString()); drugDetails.setDuration(dop.getDurationPreProcess().toString()); drugDetailsList.add(drugDetails); }  for(DrugObsProcessed dobp:dobps){ List<Obs> obsDrugOrders=kenyaEmrService.getObsByObsGroup(dobp.getObs()); DrugDetails drugDetailss=new DrugDetails(); for(Obs obsDrugOrder:obsDrugOrders){ if(obsDrugOrder.getConcept().getUuid().equals(""163079AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"")){ drugDetailss.setDrug(obsDrugOrder.getValueCoded().getName().toString()); } else if(obsDrugOrder.getConcept().getUuid().equals(""163096AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"")){ drugDetailss.setDrug(obsDrugOrder.getValueCoded().getName().toString()); } else if(obsDrugOrder.getConcept().getUuid().equals(""163020AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"")){ drugDetailss.setDrug(obsDrugOrder.getValueCoded().getName().toString()); }  if(obsDrugOrder.getConcept().getUuid().equals(""1443AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"")){ drugDetailss.setStrength(obsDrugOrder.getValueNumeric().toString()); }  if(obsDrugOrder.getConcept().getUuid().equals(""162384AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"")){ drugDetailss.setFormulation(obsDrugOrder.getValueCoded().getName().toString()); }  if(obsDrugOrder.getConcept().getUuid().equals(""160855AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"")){ drugDetailss.setFrequency(obsDrugOrder.getValueCoded().getName().toString()); }  if(obsDrugOrder.getConcept().getUuid().equals(""159368AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"")){ drugDetailss.setDuration(obsDrugOrder.getValueNumeric().toString()); } } drugDetailss.setQuantity(dobp.getQuantityPostProcess().toString()); drugDetailsList.add(drugDetailss); } simplePatientt.put(""drugDetailsList"", drugDetailsList);  return simplePatientt; } "	1	1	1	0	0	0
@Override public void commit() throws JEVisException { _ds.getAttributeTable().updateAttributeTS(this); List<JEVisAttribute> atts = _ds.getAttributeTable().getAttributes(getObject()); for (JEVisAttribute att : atts) { if (att.getName().equals(getName())) { _sampleCount = att.getSampleCount(); _minTS = att.getTimestampFromFirstSample(); _maxTS = att.getTimestampFromLastSample(); } }  _orgHash = hashCodeChange();  } 	0	0	0	0	1	0
private Image getImage() { return (skin != null) ? skin.getImage(imageName) : null; } 	0	0	1	0	0	0
private static boolean isPrimary(PrimaryRowColumn prc, Key k) { return prc.prow.equals(k.getRowData()) && prc.pcol.equals(SpanUtil.toRowColumn(k).getColumn()); } 	0	0	0	0	1	0
"private static Map<PrimaryRowColumn,List<Entry<Key,Value>>> groupLocksByPrimary(List<Entry<Key,Value>> locks) { Map<PrimaryRowColumn,List<Entry<Key,Value>>> groupedLocks = new HashMap<>(); Map<PrimaryRowColumn,Long> transactorIds = new HashMap<>();  for (Entry<Key,Value> lock : locks) { LockValue lockVal = new LockValue(lock.getValue().get()); PrimaryRowColumn prc = new PrimaryRowColumn(lockVal.getPrimaryRow(), lockVal.getPrimaryColumn(), lock.getKey().getTimestamp() & ColumnConstants.TIMESTAMP_MASK);  List<Entry<Key,Value>> lockList = groupedLocks.get(prc); if (lockList == null) { lockList = new ArrayList<>(); groupedLocks.put(prc, lockList); }  Long trid = transactorIds.get(prc); if (trid == null) { transactorIds.put(prc, lockVal.getTransactor()); } else if (trid != lockVal.getTransactor()) { // sanity check.. its assumed that all locks w/ the same PrimaryRowColumn should have the same transactor id as well throw new IllegalStateException(""transactor ids not equals "" + prc + "" "" + lock.getKey() + "" "" + trid + "" "" + lockVal.getTransactor()); }  lockList.add(lock); }  return groupedLocks;  } "	0	0	1	0	1	0
public String create(String name, String country, String region, String district, String province, String phoneNumber, String additionalPhoneNumber1, String additionalPhoneNumber2, String additionalPhoneNumber3) throws FacilityAlreadyFoundException { final List<Facility> facilities = facilities(); final MRSFacility mrsFacility = new MRSFacility(name, country, region, district, province); if (isDuplicate(facilities, mrsFacility, phoneNumber)) { throw new FacilityAlreadyFoundException(); } final Facility facility = new Facility(mrsFacility).phoneNumber(phoneNumber).additionalPhoneNumber1(additionalPhoneNumber1). additionalPhoneNumber2(additionalPhoneNumber2).additionalPhoneNumber3(additionalPhoneNumber3).motechId(identifierGenerationService.newFacilityId()); return save(facility); } 	0	0	0	0	1	0
"@Override public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, ItemStack heldItem, EnumFacing side, float hitX, float hitY, float hitZ) { if(playerIn.capabilities.isCreativeMode) { playerIn.openGui(Graves.instance, 0, worldIn, pos.getX(), pos.getY(), pos.getZ()); } if(worldIn.isRemote) { return true; }  if(heldItem != null && heldItem.getItem() instanceof ItemBlock && ForgeRegistries.BLOCKS.getKey(((ItemBlock) heldItem.getItem()).block).getResourceDomain().equals(""chiselsandbits"")) { final IGraveCapability grave = playerIn.getCapability(GraveCapability.GRAVE_CAPABILITY, null); if(grave != null) { grave.setGraveItemStack(heldItem); TileEntity te = worldIn.getTileEntity(pos); if(te instanceof TileEntityHeadStone) { ((TileEntityHeadStone) te).setDisplayStack(heldItem); te.markDirty(); worldIn.notifyBlockUpdate(pos, state, ((TileEntityHeadStone) te).getBlockState(), 3); worldIn.notifyBlockOfStateChange(pos, state.getBlock()); worldIn.markChunkDirty(pos, te); } return true; } } return super.onBlockActivated(worldIn, pos, state, playerIn, hand, heldItem, side, hitX, hitY, hitZ); } "	0	0	1	0	1	0
"protected Object create(String s, ObjectFactory<?> objectFactory) { final Object bean = objectFactory.getObject(); if (!(bean instanceof Serializable)) { LOGGER.warn(""Storing non-serializable bean [{}] with name [{}]"", bean, s); } return bean; } "	0	0	0	0	1	0
public static void checkValidAndMinMaxDate(String dateString, Date minValue, Date maxValue, String fieldName, ValidationResult validationResult) { if (StringUtils.isEmpty(dateString)) { return; } Date dateValue = DateUtil.parseUTC(dateString); if (null == dateValue) { validationResult.addError(UpdateValidationError .build4008Error(fieldName)); return; } checkMinMaxDate(dateValue, minValue, maxValue, fieldName, validationResult); } 	0	0	1	0	0	0
"public List<Adrestp> findMatchingAdrestypes(String type) { return adrestpRepository .findByCodeOrTypeLike(type.trim() + ""%"", WorkOrder.EMPTY_WORKORDER, inputMetadata.getWorkOrder()); } "	1	0	1	1	0	0
"@Test public void testXsName1Exec() { executeTester(""testXsName1"", p.xs.name(p.col(""1"")), ""xs:Name(\""a:b:c\"")"", new Object[]{p.xs.string(""a:b:c"")}, new ItemSeqExpr[]{}); } "	0	0	1	0	1	0
@ReactMethod @Override public void reportFatalException(String title, ReadableArray details, int exceptionId) { convertAndCaptureReactNativeException(title, details); System.exit(0); } 	0	0	0	0	1	0
"private synchronized void validateFile() throws HornetQException { try { if (file == null) { if (messageID <= 0) { throw new RuntimeException(""MessageID not set on LargeMessage""); }  file = createFile();  openFile();  bodySize = file.size(); } } catch (Exception e) { // TODO: There is an IO_ERROR on trunk now, this should be used here instead throw new HornetQInternalErrorException(e.getMessage(), e); } } "	0	0	1	1	0	0
"@Override public void executeOperation(LdbcUpdate5AddForumMembership operation, GraknDbConnectionState dbConnectionState, ResultReporter reporter) throws DbException { GraknSession session = dbConnectionState.session(); try (GraknGraph graph = session.open(GraknTxType.WRITE)) {  String query = ""match $forum has forum-id "" + operation.forumId() + ""; "" + "" $person has person-id "" + operation.personId() + ""; "" + "" insert (member: $person, group: $forum) isa has-member has join-date "" + LocalDateTime.ofInstant(Instant.ofEpochMilli(operation.joinDate().getTime()), ZoneOffset.UTC).toString() + "";"";  graph.graql().<InsertQuery>parse(query.toString()).execute(); graph.commit();  reporter.report(0, LdbcNoResult.INSTANCE, operation);  } } "	0	0	1	1	1	0
"@RequestMapping(value = ""/clearorder"", method = RequestMethod.POST) public ResponseEntity clearOrder(@ModelAttribute(""drinkOrderId"") int drinkOrderId) { BarDrinkOrder order = new BarDrinkOrder(); order.setId(drinkOrderId); order.setTimeComplete(new Timestamp(System.currentTimeMillis()));  if(!barDrinkOrderService.clearOrder(order)) { return new ResponseEntity(HttpStatus.BAD_REQUEST); }  Map<String, Object> numberAndDrinkName = barDrinkOrderService.getPhoneNumberAndDrinkNameFromDrinkOrderId(drinkOrderId); smsSender.SendSMS(numberAndDrinkName.get(""phonenumber""), numberAndDrinkName.get(""name"")); return new ResponseEntity(HttpStatus.OK); } "	0	0	1	1	1	0
"private static DvDateTime create(DvDateTime dvDateTime, String attributeName, Object value) throws InternalErrorException{  Calendar cal = Calendar.getInstance(); if (value instanceof Integer){ setCalendar(cal, Calendar.YEAR, attributeName, (Integer)value, ""year"", dvDateTime.getYear()); setCalendar(cal, Calendar.MONTH, attributeName, (Integer)value, ""month"", dvDateTime.getMonth()); setCalendar(cal, Calendar.DATE, attributeName, (Integer)value, ""day"", dvDateTime.getDay()); setCalendar(cal, Calendar.HOUR_OF_DAY, attributeName, (Integer)value, ""hour"", dvDateTime.getHour()); setCalendar(cal, Calendar.MINUTE, attributeName, (Integer)value, ""minute"", dvDateTime.getMinute()); setCalendar(cal, Calendar.SECOND, attributeName, (Integer)value, ""second"", dvDateTime.getSecond()); }else{ if (""value"".equals(attributeName) && value instanceof Long){ cal.setTimeInMillis(((Long)value)); }else if (""value"".equals(attributeName) && value instanceof Double){ cal.setTimeInMillis(((Double)value).longValue()); }else{ Logger.getLogger(DataValueGenerator.class).warn(""Wrong attribute name or class creating DvDateTime with value = '""+value+""'""); } } return toDvDateTime(cal); } "	0	0	0	0	1	0
"private static String convertToQualifiedName(final String fileName) { final String replacedSeparators = fileName.replace('/', '.'); return replacedSeparators.substring(0, replacedSeparators.length() - "".class"".length()); } "	0	0	1	0	1	0
"private static Alert buildAlert(final Alert.AlertType type, final String title, final String text, final ButtonType ... buttons) { final FutureTask<Alert> future = new FutureTask<>(() -> { final Alert alert = new Alert(type, text, buttons); alert.setGraphic(null); alert.setHeaderText(null); alert.setTitle(title); alert.getDialogPane().getStylesheets().add(""/com/twasyl/slideshowfx/css/Default.css""); return alert; });  Platform.runLater(future);  Alert alert = null; try { alert = future.get(); } catch (InterruptedException | ExecutionException e) { LOGGER.log(Level.SEVERE, ""Can not build an alert"", e); }  return alert; } "	0	0	0	0	1	0
"@Override public Event deserialize(final Map<String, String> keyValuePairs) { this.player = new Player(Long.parseLong(keyValuePairs.get(""player""))); return this; } "	0	0	0	0	1	0
"public JMenuItem createImportSatelliteMenuItem() { final JMenuItem menuItem = new JMenuItem(""Import Satellite File...""); menuItem.setFont(Style.getMenuFont());  menuItem.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent evt) { final ImportSatelliteWizard wizard = new ImportSatelliteWizard(core.getSats(), xyzWin); final Sat sat = wizard.start();  if (sat != null) { if (sat instanceof TLESat) { // Only show warning message if (1) the file was successfully // imported, and (2) the file was a TLE file. sendTLEWarningMessage(); } xyzWin.addSatAction(sat); } } });  return menuItem; } "	0	0	0	0	1	0
"@Override public CurveId deserialize(JsonParser jasonParser, DeserializationContext deserializationContext) throws IOException, JsonProcessingException {  JsonToken currentToken = jasonParser.currentToken(); if (currentToken != null && JsonToken.VALUE_STRING.equals(currentToken)) { CurveId curveId = CurveId.valueOf(jasonParser.getText().toUpperCase());  if (curveId == null) { throw new IllegalArgumentException(""Could not deserialize '"" + currentToken + ""' to a CurveId type.""); }  return curveId; }  throw new IllegalArgumentException(""Found '"" + currentToken + ""' instead of '"" + JsonToken.VALUE_STRING + ""'.""); } "	0	0	1	0	0	0
@Before public void setUp() throws Exception { clientManager = new ClientManagerImpl(clientInformationHandler);  // mocking session session = mock(Session.class); remoteEndpoint = mock(RemoteEndpoint.class); when(session.getRemote()).thenReturn(remoteEndpoint); when(session.getRemoteAddress()).thenReturn(new InetSocketAddress(0)); when(session.isOpen()).thenReturn(false); } 	0	0	0	0	1	0
"public void setPapelLdap(String papelLdap) throws IllegalArgumentException { try { this.papelLdap = Tipo.valueOf(papelLdap); } catch (IllegalArgumentException e) { throw new IllegalArgumentException(""Papel proveniente do LDAP não condiz com os papéis mapeados pelo sistema""); } } "	0	0	0	0	1	0
"@Quando(""^removo um evento com id (.*)$"") public void removoEventoComIdValido(String idEvento) throws Throwable { evento = new Evento(); evento.setEstado(EstadoEvento.INATIVO); evento.setId(Long.valueOf(ID_EVENTO)); when(eventoService.buscarEventoPorId(Long.valueOf(idEvento))).thenReturn(evento); when(messages.getMessage(""EVENTO_INATIVO_EXCLUIDO_SUCESSO"")) .thenReturn(""Evento inativo excluido com sucesso"");  action = mockMvc.perform(get(TEMPLATE_REMOVER, Long.valueOf(ID_EVENTO))); } "	0	0	0	0	1	0
public RangeQueryBuilder from(Object from) { return from(from, true, true); } 	0	0	0	0	1	0
public void error(@NotNull String message) { _currentDirectory.addError(message); } 	0	0	0	0	1	0
"@Override @SuppressWarnings({ ""unchecked"", ""rawtypes"" }) public void init(FilterConfig config) throws ServletException {  // parse all of the initialization parameters, collecting the exclude // patterns and the max wait parameters Enumeration enumeration = config.getInitParameterNames(); this.excludePatterns = new LinkedList(); this.maxWaitDurations = new HashMap(); while (enumeration.hasMoreElements()) { String paramName = (String) enumeration.nextElement(); String paramValue = config.getInitParameter(paramName); if (paramName.startsWith(""excludePattern"")) { // compile the pattern only this once Pattern excludePattern = Pattern.compile(paramValue); this.excludePatterns.add(excludePattern); } else if (paramName.startsWith(""maxWaitMilliseconds."")) { // the delay gets parsed from the parameter name String durationString = paramName.substring(""maxWaitMilliseconds."".length()); int endDuration = durationString.indexOf('.'); if (endDuration != -1) { durationString = durationString.substring(0, endDuration); } Long duration = new Long(durationString);  // compile the corresponding pattern, and store it with this // delay in the map Pattern waitPattern = Pattern.compile(paramValue); this.maxWaitDurations.put(waitPattern, duration); } } } "	0	0	1	0	1	0
"@Test public void testCompletion_field() throws JavaModelException{ ClientPreferences mockCapabilies = Mockito.mock(ClientPreferences.class); Mockito.when(preferenceManager.getClientPreferences()).thenReturn(mockCapabilies);  ICompilationUnit unit = getWorkingCopy( ""src/java/Foo.java"", ""import java.sq \n"" + ""public class Foo {\n""+ ""private String myTestString;\n""+ ""	void foo() {\n""+ ""   this.myTestS\n""+ ""	}\n""+ ""}\n"");  int[] loc = findCompletionLocation(unit, ""this.myTestS"");  CompletionList list = server.completion(JsonMessageHelper.getParams(createCompletionRequest(unit, loc[0], loc[1]))).join().getRight();  assertNotNull(list); assertEquals(1, list.getItems().size()); CompletionItem item = list.getItems().get(0); assertEquals(CompletionItemKind.Field, item.getKind()); assertNull(item.getInsertText()); assertNull(item.getAdditionalTextEdits()); assertNull(item.getTextEdit());  CompletionItem resolvedItem = server.resolveCompletionItem(item).join(); assertNotNull(resolvedItem.getTextEdit()); assertTextEdit(4,8,15,""myTestString"",resolvedItem.getTextEdit()); //Not checking the range end character } "	0	0	0	0	1	0
"@Override public void setCommittingConfiguration(String correlationId, EntryPointKey entryPointKey, EntryPoint configuration, int ttl) { try {  String sessionId = createSession(entryPointKey, ttl, CONSUL_BEHAVIOR.DELETE).map(s -> s.ID).get();  HttpPut setCommittingURI = new HttpPut(""http://"" + host + "":"" + port + ""/v1/kv/admin/"" + entryPointKey.getID() + ""/committing?acquire="" + sessionId);  ByteArrayOutputStream out = new ByteArrayOutputStream(); mapper.writeValue(out, new CommittingConfigurationJson(correlationId, configuration));  setCommittingURI.setEntity(new ByteArrayEntity(out.toByteArray()));  client.execute(setCommittingURI, httpResponse -> consulReader.parseHttpResponse(httpResponse, consulReader::parseBooleanFromHttpEntity)); } catch (IOException e) { LOGGER.error(""error in consul repository"", e); } } "	0	0	0	0	1	0
"synchronized void registerForRemoteNotification(final Qwasi.QwasiInterface callbacks) { if (GooglePlayServicesUtil.isGooglePlayServicesAvailable(mContext) != ConnectionResult.SUCCESS) { // If we can find google play services, have the user download it? //GooglePlayServicesUtil.getErrorDialog(); callbacks.onFailure(new QwasiError() .errorWithCode(QwasiErrorCode.QwasiErrorPushNotEnabled, ""Google play not enabled"")); } else { try { SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(mContext); String token; token = sharedPreferences.getString(""gcm_token"", """"); // We don't have a token so get a new one if (token.isEmpty()&& !mregistering) { mregistering = !mregistering; registerForPushInBackground(); } else { // check the version of the token int appVersion = sharedPreferences.getInt(""AppVersion"", 0); int registeredVersion = sharedPreferences.getInt(""com.google.android.gms.version"", Integer.MIN_VALUE);  // Our version is outdated, get a new one if (registeredVersion != appVersion) { registerForPushInBackground(); } } } catch (Exception e) { Log.e(""QwasiError"", ""Problem registering"" + e.getMessage()); callbacks.onFailure(new QwasiError() .errorWithCode(QwasiErrorCode.QwasiErrorPushRegistrationFailed, ""problem with registering"")); } } callbacks.onSuccess(this.getPushToken()); } "	0	0	0	0	1	0
"public void insertUpdate(DocumentEvent ev) { System.out.println(""insertUpdate() call!""); if(_model == null) { //@TODO DK define exception for this System.err.println(""JAutoCompletionTextArea.insertUpdate(): modell not defined!""); return; } if (ev.getLength() != 1) { return; }  int pos = ev.getOffset(); String content = null; try { content = getText(0, pos + 1); } catch (BadLocationException e) { e.printStackTrace(); }  // Find where the word starts int w; for (w = pos; w >= 0; w--) { if (! Character.isLetter(content.charAt(w))) { break; } } if (pos - w < 2) { // Too few chars return; }  String prefix = content.substring(w + 1).toLowerCase(); int n = Collections.binarySearch(_model.getStringList(), prefix); //if (n < 0 && -n <= words.size()) { if (n < 0 && -n <= _model.getSize()) { //String match = words.get(-n - 1); String match = _model.getElementAt(-n -1); if (match.startsWith(prefix)) { // A completion is found String completion = match.substring(pos - w); // We cannot modify Document from within notification, // so we submit a task that does the change later SwingUtilities.invokeLater( new CompletionTask(completion, pos + 1)); } } else { // Nothing found mode = Mode.INSERT; } } "	0	0	0	0	1	0
"public Execution getExecution(String executionId, boolean summarize) throws ApiException { try { // Get main execution object Simulation s = workflowBusiness.getSimulation(executionId);  // Return null if execution doesn't exist or is cleaned (cleaned status is not supported in Carmin) if (s == null || s.getStatus() == SimulationStatus.Cleaned) { return null; }  // Build Carmin's execution object Execution e = new Execution( s.getID(), s.getSimulationName(), ApiUtils.getPipelineIdentifier(s.getApplicationName(), s.getApplicationVersion()), 0, // timeout (no timeout set in VIP) VIPtoCarminStatus(s.getStatus()), null, // study identifier (not available in VIP yet) null, // error codes and mesasges (not available in VIP yet) s.getDate().getTime(), null // last status modification date (not available in VIP yet) );  if(summarize) // don't look into inputs and outputs return e;  // Inputs List<InOutData> inputs = workflowBusiness.getInputData(executionId, apiContext.getUser().getFolder()); logger.info(""Execution has "" + inputs.size() + "" inputs ""); for (InOutData iod : inputs) { ParameterTypedValue value = new ParameterTypedValue(ApiUtils.getCarminType(iod.getType()), iod.getPath()); StringKeyParameterValuePair skpv = new StringKeyParameterValuePair(iod.getProcessor(), value); logger.info(""Adding input "" + skpv.toString()); e.getInputValues().add(skpv); e.getRestInputValues().put(iod.getProcessor(), iod.getPath()); }  // Outputs List<InOutData> outputs = workflowBusiness.getOutputData(executionId, apiContext.getUser().getFolder()); for (InOutData iod : outputs) { ParameterTypedValue value = new ParameterTypedValue(ApiUtils.getCarminType(iod.getType()), iod.getPath()); StringKeyParameterValuePair skpv = new StringKeyParameterValuePair(iod.getProcessor(), value); e.getReturnedFiles().add(skpv); if (!e.getRestReturnedFiles().containsKey(iod.getProcessor())) { e.getRestReturnedFiles().put(iod.getProcessor(), new ArrayList<>()); } e.getRestReturnedFiles().get(iod.getProcessor()).add(iod.getPath()); }  if (!(e.getStatus() == ExecutionStatus.FINISHED) && !(e.getStatus() == ExecutionStatus.KILLED) && e.getReturnedFiles().isEmpty()) { e.clearReturnedFiles(); }  return e;  } catch (BusinessException ex) { throw new ApiException(ex); }  } "	0	0	0	0	1	0
private Command createCommand(String userCommand) throws Exception { ParseLogic.COMMAND_TYPE commandType = parserLogic.determineCommandType(userCommand); Command newCommand = parserLogic.createCommand(commandType); addOptions(newCommand, userCommand); Command.getCommandList().add(newCommand); return newCommand; } 	0	0	0	0	1	0
"@Test public void testGenerateCurrentNumberWithMillis() { //when String number = TwoFactorUtils.generateCurrentNumber(SECRET, 1454934536166L);  //then assertThat(number, not(nullValue())); assertThat(number, equalTo(""378301"")); } "	0	0	0	0	1	0
"String getDecompressor() { return String.format(""%s%s%s"", directory, File.separator, decompressor); } "	0	0	0	0	1	0
"String getDump() { return String.format(""%s%s%s"", directory, File.separator, dump); } "	0	0	0	0	1	0
"@RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<?> saveUserData(@RequestBody Map<String, String> params) { try { userService.saveUserData(params.get(""accessToken"")); return ResponseEntity.ok().build(); } catch (FacebookOAuthException ex) { return ResponseEntity.status(HttpStatus.FORBIDDEN).build(); } } "	0	0	0	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);  if (splashHandler == null) { splashHandler = new Handler(); }  if (splashRunnable == null) { if (LoginUtils.isUserLoggedIn(SplashScreenActivity.this)){ splashRunnable = initializeSplashRunnable(DecksActivity.class); } else { splashRunnable = initializeSplashRunnable(ExamActivity.class); } }  if (!splashRunning) { initializeSplashScreen(SPLASH_DISPLAY_LENGTH); } } 	0	0	0	0	1	0
"public int create() { DatabaseConnectionHelper dch = ObjectFactory.getDBHelper(); String initiativeIdStr = """"; try (Transaction tx = dch.graphDb.beginTx()) { org.apache.log4j.Logger.getLogger(Initiative.class).debug(""Creating the initiative"");  String createInitQuery = ""match (i:Init)  with CASE count(i) WHEN 0  THEN 1 ELSE max(i.Id)+1 END as uid "" + ""CREATE (i:Init {Id:uid,Status:'"" + checkInitiativeStatus(initiativeStartDate) + ""',Name:'"" + initiativeName + ""',Type:'"" + initiativeType + ""', Category:'"" + initiativeCategory + ""',StartDate:'"" + initiativeStartDate.toString() + ""',EndDate:'"" + initiativeEndDate.toString() + ""',Comment:'"" + initiativeComment + ""'}) return i.Id as Id"";  org.apache.log4j.Logger.getLogger(Initiative.class).debug(""Create initiative query : "" + createInitQuery); Result res = dch.graphDb.execute(createInitQuery); Iterator it = res.columnAs(""Id""); while (it.hasNext()) { initiativeIdStr = it.next().toString(); }  int initiativeId = Integer.parseInt(initiativeIdStr);  if (setPartOf(initiativeId, this.filterList)) { org.apache.log4j.Logger.getLogger(Initiative.class).debug(""Success in setting part of initiative""); } else { org.apache.log4j.Logger.getLogger(Initiative.class).error(""Unsuccessful in setting part of initiative""); }  if (setOwner(initiativeId, this.ownerOfList)) { org.apache.log4j.Logger.getLogger(Initiative.class).debug(""Success in setting owner for initiative""); } else { org.apache.log4j.Logger.getLogger(Initiative.class).error(""Unsuccessful in setting owner for initiative""); }  tx.success();  } catch (Exception e) { org.apache.log4j.Logger.getLogger(Initiative.class).error(""Exception in Create initiative query"", e);  } org.apache.log4j.Logger.getLogger(Initiative.class).debug(""Initiative ID : "" + initiativeIdStr);  return initiativeId; } "	0	0	1	0	1	0
"protected final int keepNumberOnly(final String password2) { return Integer.valueOf(password2.replaceAll(""\\D+"", """")); } "	0	0	0	0	1	0
@Override public int getItemViewType(int position) { /** * if set headView and positon =0 */ if (mHeaderView != null && position == 0) { return HEADER_VIEW; } /** * if user has no data and add emptyView and position <2{(headview +emptyView)} */ if (mData.size() == 0 && mEmptyEnable && mEmptyView != null && position <= 2) { /** * if set {@link #setEmptyView(boolean, boolean, View)}  position = 1 */ if ((mHeadAndEmptyEnable || mFootAndEmptyEnable) && position == 1) { /** * if user want to show headview and footview and emptyView but not add headview */ if (mHeaderView == null && mEmptyView != null && mFooterView != null) { return FOOTER_VIEW; /** * add headview */ } else if (mHeaderView != null && mEmptyView != null) { return EMPTY_VIEW; } } else if (position == 0) { /** * has no emptyView just add emptyview */ if (mHeaderView == null) { return EMPTY_VIEW; } else if (mFooterView != null)  return EMPTY_VIEW;   } else if (position == 2 && (mFootAndEmptyEnable || mHeadAndEmptyEnable) && mHeaderView != null && mEmptyView != null) { return FOOTER_VIEW;  } else if ((!mFootAndEmptyEnable || !mHeadAndEmptyEnable) && position == 1 && mFooterView != null) { return FOOTER_VIEW; } } else if (mEmptyView != null && getItemCount() == (mHeadAndEmptyEnable ? 2 : 1) && mEmptyEnable) { return EMPTY_VIEW; } else if (position == mData.size() + getHeaderViewsCount()) { if (mNextLoadEnable) return LOADING_VIEW; else return FOOTER_VIEW; } return getDefItemViewType(position - getHeaderViewsCount()); } 	0	0	0	0	1	0
"@Override public PipePluggable getPipePluggable(ForgeDirection side) { if(blockPluggableAccess) { StackTraceElement[] trace = Thread.currentThread().getStackTrace(); if(trace.length > 2 && trace[2].getMethodName().equals(""onBlockActivated"") && trace[2].getClassName().equals(""buildcraft.transport.BlockGenericPipe"") && trace[2].getLineNumber() > 680) { return null; } } return super.getPipePluggable(side); } "	0	0	0	0	1	0
"private void generateEventHandlerMethodClasses(final Decorable decorable, final FactoryController controller, final List<Statement> initStmts, final String dataFieldElementsVarName, final Statement fieldsMap) {  final Statement instance = Refs.get(""instance""); final Map<String, MetaClass> dataFieldTypes = DataFieldCodeDecorator.aggregateDataFieldTypeMap(decorable, decorable.getDecorableDeclaringType()); dataFieldTypes.put(""this"", decorable.getDecorableDeclaringType());  final MetaClass declaringClass = decorable.getDecorableDeclaringType();  /* Ensure that no @DataFields are handled more than once when used in combination with @SyncNative */ final Set<String> processedNativeHandlers = new HashSet<>(); final Set<String> processedEventHandlers = new HashSet<>();  for (final MetaMethod method : declaringClass.getMethodsAnnotatedWith(EventHandler.class)) {  final String[] targetDataFieldNames = method.getAnnotation(EventHandler.class).value();  validateNonEmptyEventHandlerTargets(declaringClass, method, targetDataFieldNames); final MetaClass eventType = assertEventType(declaringClass, method);  if (eventType.isAssignableTo(Event.class)) { processGwtDomEvent(controller, initStmts, dataFieldElementsVarName, fieldsMap, instance, dataFieldTypes, declaringClass, processedNativeHandlers, processedEventHandlers, method, targetDataFieldNames, eventType); } else if (eventType.isAssignableTo(com.google.web.bindery.event.shared.Event.class)) { processGwtWidgetEvent(controller, initStmts, fieldsMap, dataFieldTypes, declaringClass, processedNativeHandlers, processedEventHandlers, method, targetDataFieldNames, eventType); } else { processJsInteropDomEvent(initStmts, dataFieldElementsVarName, fieldsMap, instance, dataFieldTypes, declaringClass, method, targetDataFieldNames, eventType); } } } "	0	0	0	0	0	1
"@Override public Binding newBinding( final DocumentTemplate documentTemplate, final Object domainObject) {  if(!(domainObject instanceof WithNameGetter)) { throw new IllegalArgumentException(""Domain object must be of type WithNameGetter""); } WithNameGetter withNameGetter = (WithNameGetter) domainObject;  final HelloDocumentTemplateUserDataModel dataModel = new HelloDocumentTemplateUserDataModel(); dataModel.setUser(withNameGetter.getName());  return new Binding(dataModel, domainObject); } "	0	0	0	0	1	0
"private void initializeLayout() {  // LEFT PANEL  JPanel calendarPanel = new JPanel(); calendarPanel.setLayout(new FlowLayout(FlowLayout.CENTER)); calendarPanel.add(datePicker);  leftPanel.setLayout(new BorderLayout()); leftPanel.add(ResourceUtil.getCenteredLabel(""Welcome, ""+currentUser.getUsername()), BorderLayout.NORTH); leftPanel.add(calendarPanel, BorderLayout.CENTER); leftPanel.add(logoutButton, BorderLayout.SOUTH);  // CENTER PANEL  JPanel buttonPanel = new JPanel(); JPanel formattingPanel = new JPanel();  buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER)); buttonPanel.add(saveButton); buttonPanel.add(clearButton);  formattingPanel.setLayout(new FlowLayout(FlowLayout.RIGHT)); formattingPanel.add(currentDateLabel); formattingPanel.add(boldButton); formattingPanel.add(italicsButton); formattingPanel.add(underlineButton);  centerPanel.setLayout(new BorderLayout()); centerPanel.add(formattingPanel, BorderLayout.NORTH); centerPanel.add(entryArea, BorderLayout.CENTER); centerPanel.add(buttonPanel, BorderLayout.SOUTH);  this.setLayout(new BorderLayout()); this.add(leftPanel, BorderLayout.WEST); this.add(centerPanel, BorderLayout.CENTER); this.add(rightPanel, BorderLayout.EAST);  this.setSize(400, 400); this.setResizable(true); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); this.setLocationRelativeTo(null); this.setVisible(true); } "	0	0	0	0	1	0
"@Test public void testConnectStringValue(){ co = new ConnectionOperation(t1); co.setOperationParameters(t2, ""string1"", ""string2"");  Table result = execAndCheck();  String[] columns = {""number1"", ""number2"", ""date1"", ""date2"", ""string1"", ""null1""}; assertTrue(result.get(0).keySet().containsAll(Arrays.asList(columns))); } "	0	0	0	0	1	0
"@Test public void testConnectNumberValue(){ co = new ConnectionOperation(t1); co.setOperationParameters(t2, ""number1"", ""number2"");  Table result = execAndCheck();  String[] columns = {""number1"", ""date1"", ""date2"", ""string1"", ""string2"", ""null1""}; assertTrue(result.get(0).keySet().containsAll(Arrays.asList(columns))); } "	0	0	0	0	1	0
private TradePartyType getBuyer() {  TradePartyType buyerTradeParty = xmlFactory.createTradePartyType(); TextType buyerName = xmlFactory.createTextType(); buyerName.setValue(trans.getRecipient().getName()); buyerTradeParty.setName(buyerName);  TradeAddressType buyerAddressType = xmlFactory.createTradeAddressType(); TextType buyerCityName = xmlFactory.createTextType(); buyerCityName.setValue(trans.getRecipient().getLocation()); buyerAddressType.setCityName(buyerCityName);  CountryIDType buyerCountryId = xmlFactory.createCountryIDType(); buyerCountryId.setValue(trans.getRecipient().getCountry()); buyerAddressType.setCountryID(buyerCountryId);  TextType buyerAddress = xmlFactory.createTextType(); buyerAddress.setValue(trans.getRecipient().getStreet()); buyerAddressType.setLineOne(buyerAddress);  CodeType buyerPostcode = xmlFactory.createCodeType(); buyerPostcode.setValue(trans.getRecipient().getZIP()); buyerAddressType.getPostcodeCode().add(buyerPostcode);  buyerTradeParty.setPostalTradeAddress(buyerAddressType);  // Ust-ID TaxRegistrationType buyerTaxRegistration = xmlFactory .createTaxRegistrationType(); IDType buyerUstId = xmlFactory.createIDType(); buyerUstId.setValue(trans.getRecipient().getVATID()); buyerUstId.setSchemeID(TaxRegistrationType.USTID); buyerTaxRegistration.setID(buyerUstId); buyerTradeParty.getSpecifiedTaxRegistration().add(buyerTaxRegistration);  return buyerTradeParty; } 	0	0	0	0	1	0
"private Collection<TradePaymentTermsType> getPaymentTerms() { List<TradePaymentTermsType> paymentTerms = new ArrayList<TradePaymentTermsType>();  TradePaymentTermsType paymentTerm = xmlFactory .createTradePaymentTermsType(); DateTimeType dueDate = xmlFactory.createDateTimeType(); DateTimeType.DateTimeString dueDateString = xmlFactory .createDateTimeTypeDateTimeString(); dueDateString.setFormat(DateTimeType.DateTimeString.DATE); dueDateString.setValue(zugferdDateFormat.format(trans.getDueDate())); dueDate.setDateTimeString(dueDateString); paymentTerm.setDueDateDateTime(dueDate);  TextType paymentTermDescr = xmlFactory.createTextType();  String paymentTermDescription = trans.getPaymentTermDescription(); if (paymentTermDescription == null) { paymentTermDescription = """"; } paymentTermDescr.setValue(paymentTermDescription); paymentTerm.getDescription().add(paymentTermDescr);  paymentTerms.add(paymentTerm);  return paymentTerms; } "	0	0	0	0	1	0
@Override public Object getChild(int groupPosition, int childPosition) { return this._listDataChild.get(this._listDataHeader.get(groupPosition)).get(childPosition); } 	1	0	0	0	1	0
"public static MessageMedia ProcessToBase64(int memId, MessageMedia media, Bitmap input, String fileName) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();  String fileExt = fileName.substring(fileName.lastIndexOf(""."") + 1);  switch (fileExt.toLowerCase()) { case ""png"": { input.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream); input.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream); break; } case ""jpg"": { input.compress(Bitmap.CompressFormat.JPEG, 100, byteArrayOutputStream); break; } case ""jpeg"": { input.compress(Bitmap.CompressFormat.JPEG, 100, byteArrayOutputStream); break; } default: { input.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream); } }  byte[] byteArray = byteArrayOutputStream.toByteArray(); String encoded = Base64.encodeToString(byteArray, Base64.DEFAULT);  if (media == null) { media = new MessageMedia(); }  media.setMessageId(memId); media.setFileName(fileName); media.setMediaType(1); media.setHeaderType(""image/"" + fileExt); media.setMediaByte(""data:image/"" + fileExt + "";base64,"" + encoded); media.setIsUpdated(true);  return media; } "	0	0	0	0	1	0
"public String formatTestOutputRows (SingleDataResultSet result) { StringBuilder output = new StringBuilder (""\n""); StringBuilder header = new StringBuilder (""Record#""); Iterator<DbResultRecord> records = result.getRecords (); int count = 0; while (records.hasNext ()) { DbResultRecord record = records.next (); StringBuilder rowOutput = new StringBuilder (); for (int index = 0; index < record.getNumberOfColumns (); ++index) { if (count == 0) { header.append (""\t"").append (record.getIndexToColumn (index + 1)); } rowOutput.append (""\t"").append (record.get (index + 1)); } if (count == 0) { output.append (header).append (""\n""); } output.append (count).append (rowOutput).append (""\n""); count++; }  return output.toString (); } "	1	0	0	0	1	0
"@Test public void should_Create_a_New_DbLatency_Record() { UUID mockTestOppKey = UUID.randomUUID(); UUID mockTestSessionKey = UUID.randomUUID(); Integer n = ThreadLocalRandom.current().nextInt(1, 100); String procName = ""should_Create_a_New_DbLatency_Record"";  Date endDate = dateUtility.getLocalDate();  Calendar cal = Calendar.getInstance(); cal.add(Calendar.SECOND, -10); Date startDate = cal.getTime();  long duration = endDate.getTime() - startDate.getTime();  dbLatencyDao.create( procName, duration, startDate, new Date(duration), Long.valueOf(1), n, mockTestOppKey, mockTestSessionKey, ""SBAC_TEST"", ""this is from the test"" );  Map<String, Object> parameters = new HashMap<>(); parameters.put(""procName"", procName); parameters.put(""sessionKey"", UuidAdapter.getBytesFromUUID(mockTestSessionKey)); parameters.put(""testOppKey"", UuidAdapter.getBytesFromUUID(mockTestOppKey)); parameters.put(""startTime"", startDate); parameters.put(""n"", n);  final String SQL = ""SELECT COUNT(*) AS count FROM ${archivedb}._dblatency WHERE procName = :procName AND _fk_session = :sessionKey AND _fk_testopportunity = :testOppKey AND starttime = :startTime AND n = :n"";  Integer expectedValue = 1; Integer count = namedParameterJdbcTemplate.queryForInt(dbNameUtility.setDatabaseNames(SQL), parameters); Assert.assertEquals(expectedValue, count); } "	0	0	0	0	1	0
private int getIDFromList(List<String> stringList) { String idString = stringList.get(0); int id;  try { id = Integer.parseInt(idString); } catch (NumberFormatException ex) { throw new IllegalArgumentException(String.format(ERROR_INVALID_ID, idString)); } return id; } 	0	0	1	0	1	0
"@ApiOperation(value = ""get a single record in JSON format"", nickname = ""getSingleRecordJson"") @RequestMapping(value = ""/{collectionId}/{recordId}.json"", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE) public ModelAndView record( @PathVariable String collectionId, @PathVariable String recordId, @RequestParam(value = ""profile"", required = false, defaultValue = ""full"") String profile, @RequestParam(value = ""wskey"", required = true) String wskey, @RequestParam(value = ""callback"", required = false) String callback, @RequestParam(value = ""hierarchytimeout"", required = false, defaultValue = ""4000"") int hierarchyTimeout, HttpServletRequest request, HttpServletResponse response) throws MongoRuntimeException { if (log.isDebugEnabled()) { log.debug(""Retrieving record with id ""+collectionId+""/""+recordId); } controllerUtils.addResponseHeaders(response);  LimitResponse limitResponse; if (hierarchyTimeout != 4000) { searchService.setNeo4jTimeoutMillis(hierarchyTimeout); }  long t9 = System.currentTimeMillis(); try { limitResponse = controllerUtils.checkLimit(wskey, request.getRequestURL().toString(), RecordType.OBJECT, profile); if (log.isDebugEnabled()) { log.debug(""Apikey checklimit took: "" + (System.currentTimeMillis() - t9) + "" milliseconds""); } } catch (ApiLimitException e) { response.setStatus(e.getHttpStatus()); return JsonUtils.toJson(new ApiError(e), callback); }  ObjectResult objectResult = new ObjectResult(wskey, limitResponse.getRequestNumber()); if (StringUtils.containsIgnoreCase(profile, ""params"")) { objectResult.addParams(RequestUtils.getParameterMap(request), ""wskey""); objectResult.addParam(""profile"", profile); }  String europeanaObjectId = EuropeanaUriUtils.createResolveEuropeanaId(collectionId, recordId); String originalObjectId = europeanaObjectId; try { long t0 = (new Date()).getTime(); long t2 = System.currentTimeMillis(); // first try to retrieve the bean directly FullBean bean = searchService.findById(europeanaObjectId, false); if (log.isDebugEnabled()) { log.debug(""SearchService findByID took: "" + (System.currentTimeMillis() - t2) + "" milliseconds""); } if (bean == null) { // if the bean is null, the record id may have changed so check for that t2 = System.currentTimeMillis(); europeanaObjectId = searchService.resolveId(europeanaObjectId); if (log.isDebugEnabled()) { log.debug(""Bean = null; SearchService resolveID took: "" + (System.currentTimeMillis() - t2) + "" milliseconds""); } // retry retrieving the bean if we have a new id if (europeanaObjectId != null) { t2 = System.currentTimeMillis(); bean = searchService.findById(europeanaObjectId, false); if (log.isDebugEnabled()) { log.debug(""Bean = null; retrying SearchService findByID now took: "" + (System.currentTimeMillis() - t2) + "" milliseconds""); } if (bean == null) { // detect potential errors in record redirect data, we log it because we're not sure how often this happens log.warn(""Retrieved new recordId ""+europeanaObjectId+"" but still unable to find record.""); } } } //            if (bean != null && bean.isOptedOut()) { //                bean.getAggregations().get(0).setEdmObject(""""); //            } if (bean == null) { response.setStatus(404); return JsonUtils.toJson(new ApiError(wskey, ""Invalid record identifier: "" + originalObjectId, limitResponse.getRequestNumber()), callback); }  if (StringUtils.containsIgnoreCase(profile, Profile.SIMILAR.getName())) { List<BriefBean> similarItems; List<BriefView> beans = new ArrayList<>(); try { t2 = System.currentTimeMillis(); similarItems = searchService.findMoreLikeThis(europeanaObjectId); if (log.isDebugEnabled()) { log.debug(""SearchService find similar items took: "" + (System.currentTimeMillis() - t2) + "" milliseconds""); } for (BriefBean b : similarItems) { String similarItemsProfile = ""minimal""; BriefView view = new BriefView(b, similarItemsProfile, wskey);  beans.add(view); } } catch (SolrServerException e) { log.error(""Error during getting similar items: "" + e.getLocalizedMessage(), e); } objectResult.similarItems = beans; } objectResult.object = new FullView(bean, profile, wskey); long t1 = (new Date()).getTime(); objectResult.statsDuration = (t1 - t0); if (log.isDebugEnabled()) { log.debug(""Record retrieval took: "" + (System.currentTimeMillis() - t9) + "" milliseconds""); } } catch (Exception e) { response.setStatus(500); return JsonUtils.toJson(new ApiError(wskey, e.getClass().getSimpleName() + "": ""+ e.getMessage(), limitResponse.getRequestNumber()), callback); }  //        final ObjectMapper objectMapper = new ObjectMapper(); //        objectMapper.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL); //        final ObjectWriter ow = objectMapper.writer().withDefaultPrettyPrinter();  return JsonUtils.toJson(objectResult, callback); } "	1	0	1	1	0	0
"@Override public void call(final Object... args) { if (args == null || args[0] == null) { return; } try { final String response = args[0].toString(); final TMessage message = socketEvent.parse(response); if (socketEvent.getEventDataHandler() != null) { socketEvent.getEventDataHandler().handleMessage(message); } onMessageAction.call(message); } catch (final RuntimeException throwable) { Lc.assertion(throwable); } catch (final JsonProcessingException exception) { Lc.assertion(exception); } catch (final ApiModel.ValidationException exception) { Lc.assertion(exception); } catch (final Exception exception) { Lc.e(exception, ""Socket processing error""); } } "	0	0	0	0	1	0
"public static void launchPackageConfiguration(IJavaProject ijp, IPackageFragment ipf, String mode) { List<String> packageNames= new ArrayList<String>(); packageNames.add(ipf.getElementName());  try { if (findGroupDependencies(ipf.getCompilationUnits()).length > 0) { groupDependencyWarning(""package "" + ipf.getElementName(), null); } } catch(JavaModelException jmex) { ; // this should never happen but who knows }  ILaunchConfigurationWorkingCopy workingCopy= createLaunchConfiguration(ijp.getProject(), ""package "" + ipf.getElementName(), null);  workingCopy.setAttribute(TestNGLaunchConfigurationConstants.CLASS_TEST_LIST, EMPTY_ARRAY_PARAM); workingCopy.setAttribute(TestNGLaunchConfigurationConstants.METHOD_TEST_LIST, EMPTY_ARRAY_PARAM); workingCopy.setAttribute(TestNGLaunchConfigurationConstants.PACKAGE_TEST_LIST, packageNames); workingCopy.setAttribute(TestNGLaunchConfigurationConstants.TYPE, LaunchType.PACKAGE.ordinal()); workingCopy.setAttribute(TestNGLaunchConfigurationConstants.ALL_METHODS_LIST, ConfigurationHelper.toClassMethodsMap(new HashMap<String, Collection<String>>()));  String projectName= ijp.getProject().getName();  PreferenceStoreUtil storage = TestNGPlugin.getPluginPreferenceStore(); String preDefinedListeners = storage.getPreDefinedListeners(projectName, false); workingCopy.setAttribute(TestNGLaunchConfigurationConstants.PRE_DEFINED_LISTENERS, preDefinedListeners.toString().trim());  runConfig(workingCopy, mode); } "	0	0	0	0	1	0
"@Override public String serialize(final Protocol protocol) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(super.serialize(protocol)); stringBuilder.append(protocol.getKeyValueSeperator()); stringBuilder.append(""location"").append(protocol.getKeyValueSeperator()).append(this.location.toString()); return stringBuilder.toString(); } "	0	0	0	0	1	0
"protected static ModelAndView postCreateGame(Request rq, Response rs) { List<Player> players = new LinkedList<Player>();  // Add the user that created the game as the first player players.add(getUserFromCookies(rq));  // Add the selected friends to the player list if(rq.queryMap(""friends"").hasValue()){ Arrays.stream(rq.queryMap(""friends"").values()) .map(e -> DBHandler.getUser(Integer.parseInt(e))) .forEach(e -> players.add(e)); }  if(rq.queryParams(""ai"") != null){ players.add(new CirclesArtificialPlayer(-1)); }  // Create the game Circles game = new Circles(DBHandler.getNextGameID(), players); DBHandler.createCirclesGame(game); rs.cookie(GlobalConstants.DISPLAY_SUCCESS, ""The game was created. It is your move first.""); rs.redirect(CIRCLES_ROUTE + ""/"" + Integer.toString(game.get_id())); return getModelAndView(null, CIRCLES_TEMPLATE, rq, rs); } "	0	0	0	0	1	0
@Override public IMessage onMessage(SigilHoldingPacketProcessor message, MessageContext ctx) { ItemStack itemStack = null;  if (message.slot > -1 && message.slot < 9) { itemStack = ctx.getServerHandler().playerEntity.inventory.getStackInSlot(message.slot); }  if (itemStack != null) { ItemSigilHolding.cycleSigil(itemStack, message.mode); }  return null; } 	0	0	0	0	1	0
public DeliveryService consistentHashDeliveryService(final DeliveryService deliveryService, final String requestPath, final String xtcSteeringOption) { if (deliveryService == null) { return null; }  if (!steeringRegistry.has(deliveryService.getId())) { return deliveryService; }  final Steering steering = steeringRegistry.get(deliveryService.getId());  if (xtcSteeringOption != null && !xtcSteeringOption.isEmpty()) { return steering.hasTarget(xtcSteeringOption) ? cacheRegister.getDeliveryService(xtcSteeringOption) : null; }  final String bypassDeliveryServiceId = steering.getBypassDestination(requestPath); if (bypassDeliveryServiceId != null && !bypassDeliveryServiceId.isEmpty()) { return cacheRegister.getDeliveryService(bypassDeliveryServiceId); }  final SteeringTarget steeringTarget = consistentHasher.selectHashable(steering.getTargets(), requestPath, false); return cacheRegister.getDeliveryService(steeringTarget.getDeliveryService()); } 	0	0	0	0	1	0
"public void onConnect(IClient client, RequestFunction function, AMFDataList params) { WMSProperties properties = client.getProperties(); String rtmpUrl = properties.getPropertyStr(Constants.CLIENT_PROPERTY_CONNECT_URL); String IP = client.getIp(); logger.debug(""Geting url: "" + rtmpUrl+ "" from client ""+ IP);  try { HashMap<String, String>  queryParameters = Utils.getRtmpUrlParameters(rtmpUrl, client.getQueryStr()); onClientConnect(properties, queryParameters); } catch (Exception  e) { logger.error(""Entry authentication failed with url ["" + rtmpUrl + ""]: "" + e.getMessage()); client.rejectConnection(); sendClientOnStatusError((IClient)client, ""NetStream.Play.Failed"",""Unable to authenticate url; ["" + rtmpUrl + ""]: "" + e.getMessage()); DiagnosticsProvider.addRejectedRTMPStream(client, e.getMessage()); } } "	0	0	0	0	1	0
@Override public View getView(int i, View v, ViewGroup vg) {  // inflate view View menuListItem = v;  if (menuListItem == null) { // inflate it and do not attach to parent, or we will get the 'addView not supported' exception menuListItem = LayoutInflater.from(context).inflate(R.layout.menu_grid_item, vg, false); }  MenuDisplayable menuDisplayable = displayableData[i];  TextView rowText = (TextView)menuListItem.findViewById(R.id.row_txt); setupTextView(rowText, menuDisplayable);  // set up the image, if available ImageView mIconView = (ImageView)menuListItem.findViewById(R.id.row_img); setupImageView(mIconView, menuDisplayable);  setupBadgeView(menuListItem, menuDisplayable);  return menuListItem; } 	0	0	0	0	1	0
@Override public ASTNode visit(org.kframework.kil.Bag node, Void _void) { List<org.kframework.kil.Term> contents = new ArrayList<org.kframework.kil.Term>(); org.kframework.kil.Bag.flatten(contents, node.getContents());  CellCollection.Builder builder = CellCollection.builder(context); for (org.kframework.kil.Term term : contents) { if (term instanceof TermComment) { continue; } builder.concatenate((Term) this.visitNode(term)); }  return builder.build(); } 	0	0	0	0	1	0
@Override public ASTNode visit(org.kframework.kil.KLabelConstant node, Void _void)  { return KLabelConstant.of(node.getLabel(), context); } 	0	0	0	0	1	0
@Override public boolean canFill(EnumFacing from, Fluid fluid) { return fluidGroup.getFluidElementByFluid(fluid) != null; } 	0	0	0	0	1	0
"@Override public int fill(EnumFacing from, FluidStack resource, boolean doFill) { IFluidHandler source = TileHelpers.getSafeTile(worldObj, getPos().offset(from), IFluidHandler.class);  // Fetch the weight of the fluid in the source FluidGroup.FluidElement sourceFluidElement = fluidGroup.getFluidElementByFluid(resource.getFluid()); if (sourceFluidElement == null) return 0; float sourceWeight = sourceFluidElement.getValue();  // Fetch all possible destinations Queue<Pair<IFluidHandler, EnumFacing>> destinations = getDestinations(); int destinationSize = destinations.size(); if (destinationSize == 0) return 0;  // Remove possible outputs until we are able to split the resource's liquid over all outputs int unitsPerOutput = calculateMaxUnitsPerOutput(resource.amount, sourceWeight, destinationSize); while (unitsPerOutput == 0 && !destinations.isEmpty()) { destinations.remove(); unitsPerOutput = calculateMaxUnitsPerOutput(resource.amount, sourceWeight, destinations.size()); } if (destinations.isEmpty()) return 0;  // Fill each destination float totalFilled = fillDestinations(destinations, unitsPerOutput, doFill);  // Convert the total amount drained back to ""source liquid units"" // Ceil: If we used e.g. 3.1 mb, we have used more than 3, so 4 mb return MathHelper.ceiling_float_int(totalFilled * sourceWeight); } "	0	0	0	0	1	0
"@Override protected Payload doInBackground(Payload... params) { Payload payload = new Payload();  try { DbHelper db = new DbHelper(ctx); ArrayList<User> users = db.getAllUsers(); DatabaseManager.getInstance().closeDatabase();  for (User u: users){ DbHelper db1 = new DbHelper(ctx); payload = db1.getUnsentTrackers(u.getUserId()); DatabaseManager.getInstance().closeDatabase();  @SuppressWarnings(""unchecked"") Collection<Collection<TrackerLog>> result = split((Collection<Object>) payload.getData(), MobileLearning.MAX_TRACKER_SUBMIT);  for (Collection<TrackerLog> trackerBatch : result) { String dataToSend = createDataString(trackerBatch); try {  OkHttpClient client = HTTPClientUtils.getClient(ctx); Request request = new Request.Builder() .url(HTTPClientUtils.getFullURL(ctx, MobileLearning.RESET_PATH)) .addHeader(HTTPClientUtils.HEADER_AUTH, HTTPClientUtils.getAuthHeaderValue(u.getUsername(), u.getApiKey())) .patch(RequestBody.create(HTTPClientUtils.MEDIA_TYPE_JSON, dataToSend)) .build();  Response response = client.newCall(request).execute(); if (response.isSuccessful()){ for(TrackerLog tl: trackerBatch){ DbHelper db2 = new DbHelper(ctx); db2.markLogSubmitted(tl.getId()); DatabaseManager.getInstance().closeDatabase(); } payload.setResult(true); // update points JSONObject jsonResp = new JSONObject(response.body().string()); DbHelper dbpb = new DbHelper(ctx); dbpb.updateUserPoints(u.getUserId(), jsonResp.getInt(""points"")); dbpb.updateUserBadges(u.getUserId(), jsonResp.getInt(""badges"")); DatabaseManager.getInstance().closeDatabase();  Editor editor = prefs.edit(); try { editor.putBoolean(PrefsActivity.PREF_SCORING_ENABLED, jsonResp.getBoolean(""scoring"")); editor.putBoolean(PrefsActivity.PREF_BADGING_ENABLED, jsonResp.getBoolean(""badging"")); } catch (JSONException e) { e.printStackTrace(); } editor.apply();  try { JSONObject metadata = jsonResp.getJSONObject(""metadata""); MetaDataUtils mu = new MetaDataUtils(ctx); mu.saveMetaData(metadata, prefs); } catch (JSONException e) { e.printStackTrace(); } } else{ if (response.code() == 400) { // submitted but invalid digest - returned 400 Bad Request - // so record as submitted so doesn't keep trying for(TrackerLog tl: trackerBatch){ DbHelper db3 = new DbHelper(ctx); db3.markLogSubmitted(tl.getId()); DatabaseManager.getInstance().closeDatabase(); } payload.setResult(true); } else{ payload.setResult(false); } } } catch (UnsupportedEncodingException | ClientProtocolException e) { payload.setResult(false); } catch (IOException e) { payload.setResult(false); } catch (JSONException e) { Mint.logException(e); e.printStackTrace(); payload.setResult(false); } publishProgress(0); }  }  } catch (IllegalStateException ise) { ise.printStackTrace(); payload.setResult(false); }  Editor editor = prefs.edit(); long now = System.currentTimeMillis()/1000; editor.putLong(PrefsActivity.PREF_TRIGGER_POINTS_REFRESH, now).apply(); return payload; } "	0	0	1	0	0	0
"public MVCModel processRequest(HttpServletRequest req) {  if (req.getParameter(""user_pattern_add"") != null) { add(req); return new MVCModel(new MessageContents(""New user pattern created"", ""New user pattern created"", ""/roster/userpatterns?user="" + req.getParameter(""user""), ""back to User Patterns List""), ""/message.jsp""); }  if (req.getParameter(""user_pattern_update"") != null) { update(req); return new MVCModel(new MessageContents(""User pattern updated"", ""User pattern updated"", ""/roster/userpatterns?user="" + req.getParameter(""user""), ""back to User Patterns List""), ""/message.jsp""); }  if (req.getParameter(""user_pattern_delete"") != null) { delete(req); return new MVCModel(new MessageContents(""User pattern deleted"", ""User pattern deleted"", ""/roster/userpatterns?user="" + req.getParameter(""user""), ""back to User Patterns List""), ""/message.jsp""); }  User user = null; try { try { user = userDAO.getById(Long.decode(req.getParameter(""user""))); } catch (DBException e) { e.printStackTrace(); } } catch (NullPointerException e) { e.printStackTrace(); }  UserPattern userPattern = null; try { try { userPattern = userPatternDAO.getById(Long.decode(req.getParameter(""pattern""))); } catch (DBException e) { e.printStackTrace(); } } catch (NullPointerException e) { userPattern = new UserPattern(); }  List<Pattern> patterns = null; try { try { patterns = patternDAO.getAll(); } catch (DBException e) { e.printStackTrace(); } } catch (NullPointerException e) { e.printStackTrace(); }  return new MVCModel(new UserPatternEditControllerData(user, userPattern, patterns), ""/userPattern.jsp""); } "	0	0	1	0	1	0
public void mouseClicked(MouseEvent e) { if ((e.getClickCount() == 2) && (eventsTable.getSelectedRow() > -1)) editEventB_actionPerformed(null); } 	0	0	0	0	1	0
public WebTarget client() { return ClientBuilder.newClient().target(IntegrationTest.SERVER_URL); } 	0	0	0	0	1	0
public static <T> T[] shuffle(T[] originalOrder) { if (originalOrder == null) { return null; }  List<T> newOrder = Arrays.asList(originalOrder);  newOrder = nondex.permutation(newOrder);  newOrder.toArray(originalOrder);  // return in place return originalOrder; } 	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_employee_setup);  nameParent = (EditText) findViewById(R.id.Esetup_nameParent_id); surParent = (EditText) findViewById(R.id.Esetup_surnameParent_id); phoneNumber = (EditText) findViewById(R.id.Esetup_phone_id); nameChild = (EditText) findViewById(R.id.Esetup_nameChild_id); surChild = (EditText) findViewById(R.id.Esetup_surnameChild_id); cardNumber = (EditText) findViewById(R.id.Esetup_cardNumber_id);  mNfcAdapter = NfcAdapter.getDefaultAdapter(this); if(mNfcAdapter==null){ Toast.makeText(this,""this device doesn't support NFC."",Toast.LENGTH_LONG).show(); finish(); return; }  NFCButt = (Button) findViewById(R.id.Login_Button_id); NFCButt.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { String tempText = ""Top Employee_setupActivity""; try { tempText = MakeJsonString(); } catch (JSONException ex) { System.err.println(ex); } message = createTextMessage(tempText);  if (message != null) { dialog = new ProgressDialog(Employee_setupActivity.this); dialog.setMessage(""Tag NFC Card please""); dialog.show(); } } }); } "	0	0	0	0	1	0
@Override public int getEnd(TranscriptInfo transcript) { return transcript.txRegion.withPositionType(PositionType.ZERO_BASED).endPos; } 	0	0	0	0	1	0
public static void clear(Context context) { SharedPreferences sharedpreferences = getSharedPreferences(context); sharedpreferences.edit().clear().commit(); } 	0	0	0	0	1	0
"@Test public void itShouldUpdateBatchStatusOnImportExceptionIfIdIsKnown() throws Exception { doThrow(new ImportException(ImportStatus.INVALID, ""any message"")).when(groupProcessor).process(any(GroupMessage.class)); processor.process(message);  verify(repository).updateBatchStatus(123L, ImportStatus.INVALID, ""any message""); } "	0	0	0	0	1	0
"public void saveComponent(Component component) { System.out.println(""Saving component""); } "	0	0	0	0	1	0
"@Override public void popupTrigger(MouseEvent me) { final int index = quests.locationToIndex(me.getPoint()); JPopupMenu menu = new JPopupMenu();  JMenuItem see = new JMenuItem(""Voir la quête""); see.addActionListener(new ActionListener() {  @Override public void actionPerformed(ActionEvent e) { IQuest selectedQuest = quests.getModel().getElementAt(index); JQuestResume questDialog = new JQuestResume(topFrame, selectedQuest, pj); questDialog.setVisible(true); quests.invalidate(); quests.repaint(); } });  menu.add(see); menu.show(quests, me.getX(), me.getY()); } "	0	0	0	0	1	0
public void start(final BundleContext context) throws Exception { final TestClassLoader testClassLoader = new TestClassLoader() {  @Override public Class<?> loadTestClass(String className) throws ClassNotFoundException {  return context.getBundle().loadClass(className); } };  // Execute all activators  Set<BundleActivator> bundleActivators = loadActivators();  for (BundleActivator bundleActivator : bundleActivators) { bundleActivator.start(context); }  // Register the JMXTestRunner  MBeanServer mbeanServer = findOrCreateMBeanServer();  testRunner = new JMXTestRunner(testClassLoader) { @Override public byte[] runTestMethod(String className, String methodName) { BundleAssociation.setBundle(context.getBundle()); BundleContextAssociation.setBundleContext(context);  return super.runTestMethod(className, methodName); } }; testRunner.registerMBean(mbeanServer); } 	1	0	0	1	1	0
"@GET @Path(""/getTeams"") public Response getTeams(@Context HttpServletRequest request) { Response unauthorized = permissionService.checkUserPermission(); if (unauthorized != null) { return unauthorized; }  List<Team> teamList = teamService.all(); Collections.sort(teamList, (o1, o2) -> o1.getTeamName().compareTo(o2.getTeamName())); List<JsonTeam> teams = convertTeamsToJSON(teamList);  return Response.ok(teams).build(); } "	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") public Object create(Object in) throws DecodeException { List<Object> l = (List<Object>) in; Begin begin = new Begin();  switch (8 - l.size()) {  case 0: begin.setProperties((Map<String, Object>) l.get(7)); case 1: Object val1 = l.get(6); if (val1 == null || val1.getClass().isArray()) { begin.setDesiredCapabilities((String[]) val1); } else { begin.setDesiredCapabilities((String) val1); } case 2: Object val2 = l.get(5); if (val2 == null || val2.getClass().isArray()) { begin.setOfferedCapabilities((String[]) val2); } else { begin.setOfferedCapabilities((String) val2); } case 3: begin.setHandleMax(l.get(4) == null ? 0xffffffff : (Integer) l.get(4)); case 4: begin.setOutgoingWindow(l.get(3) == null ? 0 : (Integer) l.get(3)); case 5: begin.setIncomingWindow(l.get(2) == null ? 0 : (Integer) l.get(2)); case 6: begin.setNextOutgoingId(l.get(1) == null ? 0 : (Integer) l.get(1)); case 7: begin.setRemoteChannel(l.get(0) == null ? -1 : (Integer) l.get(0)); }  return begin; } "	0	0	0	0	1	0
private void changeTemperature(double amount) { mTargetTemperature = getTemperatureInRange(mTargetTemperature, amount); // Update on screen texts setupTexts(); // Update value of current temperature to server every time we change it updateTemperatureToServer(mTargetTemperature); // Update the current temperature currentTemperatureCaller(); // Update on screen texts setupTexts(); } 	0	0	0	0	1	0
"@Test public void testDeleteUser() {  // DeleteUser@javamonkeys.com / 12345 / in Base64 String basicAuth = ""Basic RGVsZXRlVXNlckBqYXZhbW9ua2V5cy5jb206MTIzNDU="";  RestTemplate restTemplate = new RestTemplate(); restTemplate.setErrorHandler(customResponseErrorHandler);  // LOGIN for check user id HttpHeaders headers = new HttpHeaders(); headers.add(""Authorization"", basicAuth); HttpEntity<String> entity = new HttpEntity<String>(headers);  ResponseEntity<User> responseEntityUser = restTemplate.exchange(baseUrl + ""/api/users/login"", HttpMethod.GET, entity, User.class); User currentUser = responseEntityUser.getBody();  // DELETE user headers = new HttpHeaders(); entity = new HttpEntity<String>(headers);  ResponseEntity responseEntity = restTemplate.exchange(baseUrl + ""/api/users/"" + currentUser.getId(), HttpMethod.DELETE, entity, String.class);  assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode()); assertNull(responseEntity.getBody());  // Check user headers = new HttpHeaders(); entity = new HttpEntity<String>(headers);  responseEntityUser = restTemplate.exchange(baseUrl + ""/api/users/"" + currentUser.getId(), HttpMethod.GET, entity, User.class);  assertEquals(HttpStatus.OK, responseEntityUser.getStatusCode()); assertNull(responseEntity.getBody());  // Incorrect user id headers = new HttpHeaders(); entity = new HttpEntity<String>(headers);  responseEntity = restTemplate.exchange(baseUrl + ""/api/users/-999"", HttpMethod.DELETE, entity, String.class);  assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode()); assertNull(responseEntity.getBody()); } "	0	0	0	0	1	0
"private boolean handleAppCrashLocked(ProcessRecord app) { long now = SystemClock.uptimeMillis();  Long crashTime = mProcessCrashTimes.get(app.info.processName, app.info.uid); if (crashTime != null && now < crashTime+MIN_CRASH_INTERVAL) { // This process loses! Slog.w(TAG, ""Process "" + app.info.processName + "" has crashed too many times: killing!""); EventLog.writeEvent(EventLogTags.AM_PROCESS_CRASHED_TOO_MUCH, app.info.processName, app.info.uid); killServicesLocked(app, false); for (int i=mMainStack.mHistory.size()-1; i>=0; i--) { ActivityRecord r = (ActivityRecord)mMainStack.mHistory.get(i); if (r.app == app) { Slog.w(TAG, ""  Force finishing activity "" + r.intent.getComponent().flattenToShortString()); r.stack.finishActivityLocked(r, i, Activity.RESULT_CANCELED, null, ""crashed""); } } if (!app.persistent) { // We don't want to start this process again until the user // explicitly does so...  but for persistent process, we really // need to keep it running.  If a persistent process is actually // repeatedly crashing, then badness for everyone. EventLog.writeEvent(EventLogTags.AM_PROC_BAD, app.info.uid, app.info.processName); mBadProcesses.put(app.info.processName, app.info.uid, now); app.bad = true; mProcessCrashTimes.remove(app.info.processName, app.info.uid); app.removed = true; removeProcessLocked(app, false); return false; } } else { ActivityRecord r = mMainStack.topRunningActivityLocked(null); if (r.app == app) { // If the top running activity is from this crashing // process, then terminate it to avoid getting in a loop. Slog.w(TAG, ""  Force finishing activity "" + r.intent.getComponent().flattenToShortString()); int index = mMainStack.indexOfTokenLocked(r); r.stack.finishActivityLocked(r, index, Activity.RESULT_CANCELED, null, ""crashed""); // Also terminate an activities below it that aren't yet // stopped, to avoid a situation where one will get // re-start our crashing activity once it gets resumed again. index--; if (index >= 0) { r = (ActivityRecord)mMainStack.mHistory.get(index); if (r.state == ActivityState.RESUMED || r.state == ActivityState.PAUSING || r.state == ActivityState.PAUSED) { if (!r.isHomeActivity) { Slog.w(TAG, ""  Force finishing activity "" + r.intent.getComponent().flattenToShortString()); r.stack.finishActivityLocked(r, index, Activity.RESULT_CANCELED, null, ""crashed""); } } } } }  // Bump up the crash count of any services currently running in the proc. if (app.services.size() != 0) { // Any services running in the application need to be placed // back in the pending list. Iterator<ServiceRecord> it = app.services.iterator(); while (it.hasNext()) { ServiceRecord sr = it.next(); sr.crashCount++; } }  mProcessCrashTimes.put(app.info.processName, app.info.uid, now); return true; } "	0	0	0	0	0	1
"private void startFfmpeg(String executable) { // -y = overwrite, otherwise it fails the second time you run // -an = no audio // ""-b:v"", ""3000k"" = video bit rate // ""-i"", ""-"" = pipe:0 processBuilder = new ProcessBuilder(executable, ""-y"", ""-f"", ""rawvideo"", ""-vcodec"", ""rawvideo"", ""-s"", pg.width + ""x"" + pg.height, ""-pix_fmt"", ""rgb24"", ""-r"", """" + ffmpegFrameRate, ""-i"", ""-"", ""-an"", ""-vcodec"", ""h264"", ""-crf"", """" + ffmpegCrfQuality, ""-metadata"", ""comment=\"""" + ffmpegMetadataComment + ""\"""", outputFilePath);  processBuilder.redirectErrorStream(true); ffmpegOutputMsg = new File(outputFilePath + "".txt""); processBuilder.redirectOutput(ffmpegOutputMsg); processBuilder.redirectInput(ProcessBuilder.Redirect.PIPE); try { process = processBuilder.start(); } catch (Exception e) { e.printStackTrace(); err(); }  ffmpeg = process.getOutputStream();  ffmpegFound = true; } "	0	0	1	1	0	0
"@SuppressLint(""SetJavaScriptEnabled"") public void fillSettings(WebSettings settings, IRhoConfig config) {  boolean enableZoom = config == null || config.getBool(WebViewConfig.ENABLE_ZOOM); boolean enableCache = config == null || config.getBool(WebViewConfig.ENABLE_CACHE); String customUA = config.getString(WebViewConfig.USER_AGENT);  settings.setSavePassword(false); settings.setSaveFormData(false); settings.setJavaScriptEnabled(true); settings.setJavaScriptCanOpenWindowsAutomatically(false); settings.setSupportZoom(enableZoom); settings.setBuiltInZoomControls(enableZoom); settings.setStandardFontFamily(RhoConf.getString(""fontFamily"")); customUA = updateRevesionOfCustomUA(settings.getUserAgentString(), customUA); settings.setUserAgentString(customUA);  Logger.T(TAG, ""Enable Zoom: "" + enableZoom);  if (enableCache) { settings.setCacheMode(WebSettings.LOAD_DEFAULT); } else { settings.setCacheMode(WebSettings.LOAD_NO_CACHE); } Logger.T(TAG, ""Enable Cache: "" + enableCache);  settings.setSupportMultipleWindows(false);  setWebPlugins(settings, config); } "	0	0	0	0	1	0
@Override public Fragment getItem(int position) { switch (position) { case 0: EmployeeItemsFragment invTab = EmployeeItemsFragment.newInstance(mUsername); return invTab; case 1: EmployeeOrderFragment orderTab = new EmployeeOrderFragment(); return orderTab; case 2: EmployeeSettingsFragment setTab = EmployeeSettingsFragment.newInstance(mUsername); return setTab; case 3: SupportMapFragment tabMap = MiniMapFragment.newInstance(); return tabMap; default: return null; } } 	0	0	0	0	1	0
@Override public double getPressureAlt() { return -object.getPosition().z; } 	0	0	0	0	1	0
public void discoverClusterNodesAndSlots(Jedis jedis) { w.lock();  try { reset(); List<Object> slots = jedis.clusterSlots();  for (Object slotInfoObj : slots) { List<Object> slotInfo = (List<Object>) slotInfoObj;  if (slotInfo.size() <= MASTER_NODE_INDEX) { continue; }  List<Integer> slotNums = getAssignedSlotArray(slotInfo);  // hostInfos int size = slotInfo.size(); for (int i = MASTER_NODE_INDEX; i < size; i++) { List<Object> hostInfos = (List<Object>) slotInfo.get(i); if (hostInfos.size() <= 0) { continue; }  HostAndPort targetNode = generateHostAndPort(hostInfos); setNodeIfNotExist(targetNode); if (i == MASTER_NODE_INDEX) { assignSlotsToNode(slotNums, targetNode); } } } } finally { w.unlock(); } } 	0	0	0	0	1	0
private String getIndexPath(OLocalPaginatedStorage storageLocalAbstract) { return storageLocalAbstract.getStoragePath() + File.separator + OLUCENE_BASE_DIR + File.separator + indexName; } 	0	0	0	0	1	0
public static void deleteFolderIfEmpty(File f) {  if (f.listFiles().length == 0) { deleteFolder(f); } } 	0	0	0	0	1	0
"@BeforeSuite public void setUp() throws InterruptedException { log.info(""In test suite""); report = ExtentFactory.getInstance(); test = report.startTest(""Initializing Android driver""); File app= new File(""Curbside.apk""); DesiredCapabilities cap = new DesiredCapabilities(); cap.setCapability(""platformName"", ""Android""); cap.setCapability(""deviceName"",""Android device""); cap.setCapability(""app"", app.getAbsolutePath()); cap.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT,65); cap.setCapability(""appPackage"",""com.curbside.nCurbside""); cap.setCapability(""appActivity"", ""com.curbside.nCurbside.app.help.SplashScreenActivity""); URL url = null; try { url = new URL(""http://127.0.0.1:4723/wd/hub""); driver=new AndroidDriver<WebElement>(url,cap ); } catch (MalformedURLException e) { System.out.println(url); e.printStackTrace(); } driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS); log.info(""Android driver created""); test.log(LogStatus.PASS,""Android app installed""); getElement(skipIntro).click(); try{ getElement(okButtonError).click(); getElement(allowButton).click(); getElement(allowButton).click(); }catch(Exception e){  } getElement(searchButton).click(); sendKeys(searchTextFiled, ""_#csndc#ena""); ((AndroidDriver<WebElement>) driver).pressKeyCode(AndroidKeyCode.ENTER); Thread.sleep(2000); driver.findElement(By.className(""android.widget.ImageButton"")).click(); //((AndroidDriver<WebElement>) driver).pressKeyCode(AndroidKeyCode.BACK); Thread.sleep(1000); getElement(debug).click(); getElement(apiHostTextField).clear(); Thread.sleep(1000); sendKeys(apiHostTextField, ""https://api-s.shopcurbside.com""); getElement(okButton).click(); Thread.sleep(1000); ((AndroidDriver<WebElement>) driver).pressKeyCode(AndroidKeyCode.BACK); Thread.sleep(1000); getElement(backButton).click(); Thread.sleep(1000); driver.startActivity(""com.curbside.nCurbside"", ""com.curbside.nCurbside.app.help.SplashScreenActivity""); Thread.sleep(1000); report.endTest(test); report.flush();  } "	0	0	0	0	1	0
"@Override public void onComplete() { Optional<Image> image = inspectImage(dockerImage); if (image.isPresent()) { // Download successful, update image GC with the newly downloaded image dockerImageGC.ifPresent(imageGC -> imageGC.updateLastUsedTimeFor(image.get().getId())); removeScheduledPoll(dockerImage); } else { throw new DockerClientException(""Could not download image: "" + dockerImage); } } "	0	0	0	0	1	0
"private void setMetrics(MetricReceiverWrapper metricReceiver) { Dimensions dimensions = new Dimensions.Builder().add(""role"", ""docker"").build(); numberOfDockerDaemonFails = metricReceiver.declareCounter(MetricReceiverWrapper.APPLICATION_DOCKER, dimensions, ""daemon.api_fails""); } "	0	0	1	1	0	0
private SimpleFileVisitor<Path> CopyingFileVisitor(final Path basePath) { return new SimpleFileVisitor<Path>() { @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException { if (ArtifactContextUtil.ARTIFACT_CONTEXT.equals(file.getFileName().toString())) { return FileVisitResult.CONTINUE; } final Path unpackFile = Paths.get(basePath.toString(), file.toString()); Files.copy(file, unpackFile, StandardCopyOption.REPLACE_EXISTING); return FileVisitResult.CONTINUE; }  @Override public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException { final Path subDir = Paths.get(basePath.toString(), dir.toString()); if (Files.notExists(subDir)) { Files.createDirectory(subDir); } return FileVisitResult.CONTINUE; } }; } 	0	0	0	0	1	0
@Override public final void update(final float tpf) { timeCount += tpf; if (curveState == null) { curveState = stateManager.getState(CurveState.class); } if (timeCount > TIME_PER_BALL_SPAWN) { timeCount = 0; final Ball ball = new Ball(assetManager); ball.spawn(app.getRootNode(), PlayState.getPhysicsSpace(), true); } } 	0	0	0	0	1	0
@Override public PhoneConstants.State getState() { Phone imsPhone = CallManager.getInstance().getImsPhone(); if (imsPhone != null) { PhoneConstants.State state = imsPhone.getState(); if (state != PhoneConstants.State.IDLE) { return state; } } return mCT.mState; } 	0	0	0	0	1	0
private void editOperation() { if(client != null && client.canUpdateOperation()) { Optional<Operation> operation = OperationDialogPanel.showDialog(editorKit, selectedOperation); if (operation.isPresent()) { configManager.statusChanged(AdminTabEvent.CONFIGURATION_CHANGED); listOperations(); operationList.setSelectedValue(new OperationListItem(operation.get()), true); } } } 	0	0	0	0	1	0
@Override public InternalAggregation buildEmptyAggregation() { return new InternalStats(name, 0, null, null, pipelineAggregators(), metaData()); } 	0	0	1	0	1	0
@Override public void onPageSelected(int position) { mNewLayout.setVisibility(empty[position] ? View.VISIBLE : View.GONE); mNewText.setText(stringRes[position]); } 	1	0	1	1	0	0
@Override public SnapshotWriter write(Buffer buffer) { buffer.write(buffer); return this; } 	1	0	1	0	1	0
public static PaymentEvent build(String orderId, boolean status, String paymentId) { PaymentEvent paymentEvent = new PaymentEvent();  paymentEvent.setOrderId(orderId); paymentEvent.setStatus(status); paymentEvent.setPaymentId(paymentId);  return paymentEvent; } 	0	0	0	0	1	0
@Override public void componentActivated(AbstractComponent component) { GameDirector.sharedSceneListener().requestScene(SceneID.PARTYINVENTORY, TrailScene.this, false); } 	0	0	0	0	1	0
"protected String sqlWhereByMap() { StringBuilder where = new StringBuilder(); where.append(""\n<if test=\""cm!=null\"">""); where.append(""\n WHERE ""); where.append(""\n<foreach collection=\""cm.keys\"" item=\""k\"" separator=\""AND\""> ""); where.append(""\n${k}=#{cm[${k}]}""); where.append(""\n</foreach>""); where.append(""\n</if>""); return where.toString(); } "	0	0	0	0	1	0
private Set<Vertex> getMasterData() { return (Set<Vertex>) masterDataMap.values(); } 	0	0	0	0	1	0
private boolean isSameType(TypeElement typeElement, String typeName) { return typeUtils.isSameType(typeElement.asType(), elementUtils.getTypeElement(typeName).asType()); } 	1	0	0	0	1	0
public static void scrollTo(int recyclerViewId, int position) { onView(withId(recyclerViewId)).perform(scrollToPosition(position)); } 	0	0	0	0	1	0
@Override public int getMaxSize() { return min(maxSize, players.size() * playerComponent.getSize()); } 	0	0	0	0	1	0
"@Override public void validate(Object target, Errors errors) { MailPropertySetting mailPropertySetting = (MailPropertySetting) target; int mailPropertyKey = mailPropertySetting.getMailPropertyKey().getId(); int mailAddressId = mailPropertySetting.getMailAddress().getId(); String value = mailPropertySetting.getValue(); if (value.equals("""")) { errors.rejectValue(""value"", ""value.alreadyExists"", ""Enter Mail Property ""); } if (mailAddressId == 0) { errors.rejectValue(""mailAddress.id"", ""mailAddress.id.alreadyExists"", ""Select Mail Address""); } if (mailPropertyKey == 0) { errors.rejectValue(""mailPropertyKey.id"", ""mailPropertyKey.id.alreadyExists"", ""Select Mail Property Key""); } List<MailPropertySetting> mailPropertySettingLists = mailPropertySettingService.findAll(); for (MailPropertySetting m : mailPropertySettingLists) { if (m.getMailAddress().getId().equals(mailAddressId) && m.getMailPropertyKey().getId().equals(mailPropertyKey)) { errors.rejectValue(""mailPropertyKey.id"", ""mailPropertyKey.id.alreadyExists"", ""Duplicate Primary Key""); } }  } "	0	0	0	0	1	0
"int getPixelToYValue(double value) { if (value == Double.NaN) throw new IllegalArgumentException(""Value has to be a real number! "" + value); return (int) (getHeight() - (value / getValueYPerPixel() - yCorner / getValueYPerPixel()) - 1); } "	1	0	1	0	1	0
"public void joinGroup(View view) { EditText groupCode = (EditText) findViewById(R.id.edit_message);  if(groupCode.getText().toString().length() < 4) { makeToast(""กรุณาใส่ให้ครบ 4 จำนวน""); return; }  final int groupID = Converter.toInt(groupCode.getText().toString()); GroupServiceImp.getInstance().joinGroup(groupID, UserManage.getCurrentUser(), new Callback<Group>() { @Override public void onResponse(retrofit.Response<Group> response, Retrofit retrofit) { Log.i(""raw json"", response.raw().toString()); UserManage.getCurrentUser().setGroupId(response.body().getId()); Group group = response.body(); Cache.getInstance().putData(""groupData"", group); Intent intent = new Intent(JoinGroupActivity.this, GroupMainActivity.class); intent.putExtra(""groupData"", group); startActivity(intent); finish(); }  @Override public void onFailure(Throwable t) {  } }); } "	0	0	0	0	1	0
protected EtcdAuth getAuthClient() { return authClient; } 	0	0	0	1	0	0
"public void deleteIssue(Long issueId) { MultiValueMap<String, String> params = new LinkedMultiValueMap<String, String>(); params.set(""collectorId"", collectorId);  UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(mirrorGateUrl + MIRROR_GATE_SEND_ISSUES_ENDPOINT).queryParams(params);  restTemplate.delete(builder.toUriString(), issueId); } "	0	0	0	0	1	0
"@Override public void onInCallScreenReady() { LogUtil.i(""CallCardController.onInCallScreenReady"", null); Assert.checkState(!isInCallScreenReady); if (mContactsPreferences != null) { mContactsPreferences.refreshValue(ContactsPreferences.DISPLAY_ORDER_KEY); }  // Contact search may have completed before ui is ready. if (mPrimaryContactInfo != null) { updatePrimaryDisplayInfo(); }  // Register for call state changes last InCallPresenter.getInstance().addListener(this); InCallPresenter.getInstance().addIncomingCallListener(this); InCallPresenter.getInstance().addDetailsListener(this); InCallPresenter.getInstance().addInCallEventListener(this); isInCallScreenReady = true;  // Log location impressions if (isOutgoingEmergencyCall(mPrimary)) { Logger.get(mContext).logImpression(DialerImpression.Type.EMERGENCY_NEW_EMERGENCY_CALL); } else if (isIncomingEmergencyCall(mPrimary) || isIncomingEmergencyCall(mSecondary)) { Logger.get(mContext).logImpression(DialerImpression.Type.EMERGENCY_CALLBACK); }  // Showing the location may have been skipped if the UI wasn't ready during previous layout. if (shouldShowLocation()) { updatePrimaryDisplayInfo();  // Log location impressions if (!hasLocationPermission()) { Logger.get(mContext).logImpression(DialerImpression.Type.EMERGENCY_NO_LOCATION_PERMISSION); } else if (isBatteryTooLowForEmergencyLocation()) { Logger.get(mContext) .logImpression(DialerImpression.Type.EMERGENCY_BATTERY_TOO_LOW_TO_GET_LOCATION); } else if (!callLocation.canGetLocation(mContext)) { Logger.get(mContext).logImpression(DialerImpression.Type.EMERGENCY_CANT_GET_LOCATION); } } } "	0	0	0	0	1	0
"@Override public void onInCallScreenUnready() { LogUtil.i(""CallCardController.onInCallScreenUnready"", null); Assert.checkState(isInCallScreenReady);  // stop getting call state changes InCallPresenter.getInstance().removeListener(this); InCallPresenter.getInstance().removeIncomingCallListener(this); InCallPresenter.getInstance().removeDetailsListener(this); InCallPresenter.getInstance().removeInCallEventListener(this); if (mPrimary != null) { mPrimary.removeListener(this); }  callLocation.close();  mPrimary = null; mPrimaryContactInfo = null; mSecondaryContactInfo = null; isInCallScreenReady = false; } "	0	0	0	0	1	0
"@Override public String digestParams(RestInvocation restInvocation) {  final Params params = restInvocation.getParamsMap().get(FormParam.class); final Map<String, String> nameValueMap = params.asHttpHeaders();  nameValueMap.remove(""sign""); nameValueMap.put(""api_key"", apikey);  // odd requirements for buy/sell market orders if (nameValueMap.containsKey(""type"") && nameValueMap.get(""type"").contains(""market"")) { if (nameValueMap.get(""type"").equals(""buy_market"")) { nameValueMap.remove(""amount""); } else if (nameValueMap.get(""type"").equals(""sell_market"")) { nameValueMap.remove(""price""); } } final List<Map.Entry<String, String>> nameValueList = new ArrayList<>(nameValueMap.entrySet()); Collections.sort(nameValueList, comparator);  final Params newParams = Params.of(); for (int i = 0; i < nameValueList.size(); i++) { Map.Entry<String, String> param = nameValueList.get(i); newParams.add(param.getKey(), param.getValue()); }  // final String message = newParams.asQueryString() + ""&secret_key="" + secretKey; final String message = newParams.toString() + ""&secret_key="" + secretKey;  try { md.reset();  byte[] digest = md.digest(message.getBytes(""UTF-8""));  return String.valueOf(encodeHex(digest, DIGITS_UPPER)); } catch (UnsupportedEncodingException e) { throw new RuntimeException(""Codec error"", e); } } "	0	0	1	0	1	0
"private String getIssueType(int position) { String type = ""is:"" + getIssueState(position); if (position == 1) { type += "" is:"" + ApiHelpers.IssueState.UNMERGED; } return type; } "	0	0	0	0	1	0
public boolean moveDown() { if (yPosition == grid.getRowCount() - 1) { return false; }  if (getCellAtCurrentPosition().getValue() <= getCell(xPosition, yPosition + 1).getValue()) { return false; }  yPosition++; return true; } 	0	0	0	0	1	0
"public URL createUrl(String filename) throws MalformedURLException { if (!filename.matches(URL_REGEX)) { filename = siteContext.getSiteName() + ':' + (!filename.startsWith(""/"")? ""/"" : """") + filename; }  return new URL(null, filename, this); } "	0	0	0	0	1	0
"@Override public HealthResponse query(String api, long interval, long from, long to) throws AnalyticsException { try { SearchRequestBuilder requestBuilder = createRequest(TYPE_HEALTH, from, to);  QueryBuilder queryBuilder = boolQuery().must(termQuery(""api"", api));  final RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(FIELD_TIMESTAMP).from(from).to(to);  // Finally set the query requestBuilder.setQuery(boolQuery().filter(queryBuilder).filter(rangeQueryBuilder));  // Calculate aggregation AggregationBuilder byDateAggregation = dateHistogram(""by_date"") .extendedBounds(new ExtendedBounds(from, to)) .field(FIELD_TIMESTAMP) .interval(interval);  byDateAggregation.subAggregation(terms(""by_result"").field(FIELD_HEALTH_RESPONSE_SUCCESS).size(0));  // And set aggregation to the request requestBuilder.addAggregation(byDateAggregation);  // Get the response from ES SearchResponse response = requestBuilder.get();  return toHealthResponse(response); } catch (ElasticsearchException ese) { logger.error(""An error occurs while looking for analytics with Elasticsearch"", ese); throw new AnalyticsException(""An error occurs while looking for analytics with Elasticsearch"", ese); } } "	0	0	0	1	1	0
"@Test public void exists_windowsSeparator() throws XenonException { XenonProto.PathRequest request = XenonProto.PathRequest.newBuilder() .setFilesystem(createFileSystem()) .setPath(XenonProto.Path.newBuilder().setPath(""\\etc\\passwd"").setSeparator(""\\\\"")) .build(); when(filesystem.exists(new Path('\\', ""etc"", ""passwd""))).thenReturn(true);  XenonProto.Is response = client.exists(request);  assertTrue(response.getValue()); } "	0	0	1	0	1	0
private JPanel createComboBoxPanel(String prop, String[] options){ JPanel panel = new JPanel(new BorderLayout());  JComboBox<String> combobox = new JComboBox<String>(options); combobox.setPreferredSize(new Dimension(180, 20)); //if(type == NCIEditTabConstants.EDIT && propvaluemap != null){ if(type != NCIEditTabConstants.DELETE && propvaluemap != null){ combobox.setSelectedItem(propvaluemap.get(prop)); }  JLabel label = new JLabel(prop); label.setPreferredSize(new Dimension(180, 20));  panel.add(label, BorderLayout.WEST); panel.add(combobox, BorderLayout.EAST); panel.setPreferredSize(new Dimension(400, 25));  propcomponentmap.put(prop, combobox);  return panel; } 	0	0	0	0	1	0
"private void setMyCardValues(){ cardIntent = getIntent(); //if user edited Card or create new Card then take values from Intent myCard = new Card(cardIntent.getStringExtra(""logoPath""), cardIntent.getStringExtra(""name""), cardIntent.getStringExtra(""mobile""), cardIntent.getStringExtra(""phone""), cardIntent.getStringExtra(""fax""), cardIntent.getStringExtra(""email""), cardIntent.getStringExtra(""web""), cardIntent.getStringExtra(""company""), cardIntent.getStringExtra(""address""), cardIntent.getStringExtra(""job""), cardIntent.getStringExtra(""facebook""), cardIntent.getStringExtra(""tweeter""), cardIntent.getStringExtra(""skype""), cardIntent.getStringExtra(""other"")); myCard.setId(cardIntent.getLongExtra(""id"",0));  if (myCard.getLogoImgPath().equals(""null"")) logo.setImageResource(R.drawable.person_x311); else logo.setImageURI(Uri.parse(myCard.getLogoImgPath())); name.setText(myCard.getName()); mobile.setText(myCard.getMobile()); phone.setText(myCard.getPhone()); fax.setText(myCard.getFax()); email.setText(myCard.getEmail()); web.setText(myCard.getWeb()); company.setText(myCard.getCompany()); address.setText(myCard.getAddress()); job.setText(myCard.getJob()); facebook.setText(myCard.getFacebook()); tweeter.setText(myCard.getTweeter()); skype.setText(myCard.getSkype()); other.setText(myCard.getOther());  hideEmptyFields();          // hide empty fields } "	0	0	1	1	1	0
"public void updateToOptimalSize(Size[] sizes) { Log.d(TAG, ""Texture view size: "" +this.textureView.getWidth() + "" X "" +this.textureView.getHeight()); Size optimalSize = getOptimalPreviewSize(sizes, this.textureView.getHeight(), this.textureView.getWidth()); this.updateAspectRatio(optimalSize); } "	0	0	0	0	1	0
@Override public boolean contains(double x, double y, double z) { final R roi2d = getSlice((int) z);  if (roi2d != null) return roi2d.contains(x, y);  return false; } 	0	0	0	0	1	0
public static void excludeFromImport(final Project project, final String prefix) { ApplicationManager.getApplication().invokeLater(() -> { if(project.isDisposed()) { return; }  final JavaAutoImportConfigurable configurable = new JavaAutoImportConfigurable(project); ShowSettingsUtil.getInstance().editConfigurable(project, configurable, () -> configurable.addExcludePackage(prefix)); }); } 	0	0	0	0	1	0
private void launchAuthenticationIntent() { Bundle extras = getIntent().getExtras(); final Uri authorizeUri = getIntent().getData(); if (!extras.getBoolean(EXTRA_USE_BROWSER, true)) { Intent intent = new Intent(this, WebAuthActivity.class); intent.setData(authorizeUri); intent.putExtra(WebAuthActivity.CONNECTION_NAME_EXTRA, extras.getString(EXTRA_CONNECTION_NAME)); intent.putExtra(WebAuthActivity.FULLSCREEN_EXTRA, extras.getBoolean(EXTRA_USE_FULL_SCREEN)); //The request code value can be ignored startActivityForResult(intent, 33); return; }  customTabsController = createCustomTabsController(this); customTabsController.bindService(); customTabsController.launchUri(authorizeUri); } 	0	0	0	0	1	0
private void initBucket() { // get or create the bucket for the repository and set bucketId for fast lookup later try (GraphTx graphTx = openGraphTx()) { String repositoryName = getRepository().getName(); Vertex bucket = Iterables.getFirst(graphTx.getVertices(P_REPOSITORY_NAME, repositoryName), null); if (bucket == null) { bucket = graphTx.addVertex(V_BUCKET, (String) null); bucket.setProperty(P_REPOSITORY_NAME, repositoryName); graphTx.commit(); } bucketId = bucket.getId(); } } 	0	0	1	0	1	0
"@Override protected String getTitle() { if (followsMe) { return ""Followers""; } else { return ""Following""; } } "	0	0	0	0	1	0
@Override public void execute(EntityPlayer player) { if((!MinestuckConfig.privateComputers || player.getName().equals(this.player.getOwner())) && ServerEditHandler.getData(((EntityPlayer)player).getName()) == null) SkaianetHandler.requestConnection(this.player, otherPlayer, isClient); } 	0	0	0	0	1	0
@Override public void execute(EntityPlayer player) { if(!MinestuckConfig.privateComputers || ((EntityPlayer)player).getName().equals(this.player) && ServerEditHandler.getData(((EntityPlayer)player).getName()) == null) SkaianetHandler.closeConnection(this.player,this.otherPlayer, isClient); } 	0	0	0	0	1	0
"private String removeActionFromContentType(String contentType) { String[] contentTypeValues = contentType.split(""(?<=;)"");  String newContentType = """"; for (int i = 0; i < contentTypeValues.length; i++) { if (!contentTypeValues[i].trim().startsWith(""action"")) { newContentType = newContentType.concat(contentTypeValues[i]); } }  return newContentType; } "	0	0	0	1	0	0
private void onModelChange() { assert SwingUtilities.isEventDispatchThread();  try { modelChanges.fireChange(); } finally { GradleCacheSourceForBinaryQuery.notifyCacheChange(); GradleCacheBinaryForSourceQuery.notifyCacheChange(); } } 	0	0	0	0	1	0
@Override protected JavadocForBinaryQuery.Result tryFindJavadoc(File binaryRoot) { if (hasSources(binaryRoot)) { // TODO: Global settings should be added to allow prefer javadoc //       over sources. return null; }  final SourceForBinaryQueryImplementation2.Result result = javadocForBinary.tryFindSourceRoot(binaryRoot); if (result == null) { return null; }  return new JavadocForBinaryQuery.Result() { @Override public URL[] getRoots() { FileObject[] roots = result.getRoots(); if (roots == null) { return null; }  URL[] resultUrls = new URL[roots.length]; for (int i = 0; i < roots.length; i++) { resultUrls[i] = roots[i].toURL(); } return resultUrls; }  @Override public void addChangeListener(ChangeListener l) { result.addChangeListener(l); }  @Override public void removeChangeListener(ChangeListener l) { result.removeChangeListener(l); } }; } 	0	0	0	0	1	0
"public void setTimes(int empID, String dayAvailability, int listNo){ //get length of service String getServiceLength = ""SELECT serviceLength FROM availableServices WHERE serviceName ="" + ""'"" + serviceTypeController.type + ""'""; rs = database.queryDatabase(getServiceLength); int length = 0;  try{ length = rs.getInt(""serviceLength""); } catch (SQLException e){ log.error(""SQL ERROR: "" + e.getMessage()); }  //Set up time variables String startTime = ""08:00""; String startMorn = ""07:59""; String endMorn = ""11:59""; String endNoon = ""16:59""; String endTime = ""21:01""; SimpleDateFormat df = new SimpleDateFormat(""HH:mm""); Date start = null; Date beginMorn = null; Date morn = null;Date noon = null;Date end = null;  try { start = df.parse(startTime); beginMorn = df.parse(startMorn); morn = df.parse(endMorn); noon = df.parse(endNoon); end = df.parse(endTime); } catch (ParseException e) { log.error(""Error passing time: "" + e.getMessage()); }  Calendar cal = Calendar.getInstance(); cal.setTime(start); //While time is before closing time while(cal.getTime().before(end)){ String time = df.format(cal.getTime()); //if emp is unavailable for morning shift, skip morning times and start at afternoon times if(dayAvailability.charAt(0) == '0' && cal.getTime().after(beginMorn) && cal.getTime().before(morn)){ cal.add(Calendar.HOUR, 4); continue; } if(dayAvailability.charAt(1) == '0' && cal.getTime().after(morn) && cal.getTime().before(noon)){ cal.add(Calendar.HOUR, 5); continue; } System.out.println(time); if(dayAvailability.charAt(2) == '0' && cal.getTime().after(noon)){ return; } //if slot is not already booked if(availableSlot(time, empID)){ switch(listNo){ case 1: listView1.getItems().add(time); listView1.setVisible(true); break; case 2: listView2.getItems().add(time); listView2.setVisible(true); break; case 3: listView3.getItems().add(time); listView3.setVisible(true); break; case 4: listView4.getItems().add(time); listView4.setVisible(true); break; case 5: listView5.getItems().add(time); listView5.setVisible(true); break; case 6: listView6.getItems().add(time); listView6.setVisible(true); break; case 7: listView7.getItems().add(time); listView7.setVisible(true); break; case 8: listView8.getItems().add(time); listView8.setVisible(true); break; case 9: listView9.getItems().add(time); listView9.setVisible(true); break; case 10: listView10.getItems().add(time); listView10.setVisible(true); break; } } cal.add(Calendar.MINUTE, length); }  } "	0	0	0	0	1	0
"@Override public void preDelete(final User user) throws Exception {  RequestLifeCycle.begin(PortalContainer.getInstance()); try{ ExoContainer container = ExoContainerContext.getCurrentContainer(); IdentityManager idm = (IdentityManager) container.getComponentInstanceOfType(IdentityManager.class); Identity identity = idm.getOrCreateIdentity(OrganizationIdentityProvider.NAME, user.getUserName(), true);  try { idm.hardDeleteIdentity(identity); } catch (Exception e) { // TODO: Send an alert email to super admin to manage spaces in case deleted user is the last manager. // Nothing executed (user not deleted) when facing this case now with code commit by SOC-1507. // Will be implemented by SOC-2276.  LOG.debug(""Problem occurred when deleting user named "" + identity.getRemoteId()); }  }finally{ RequestLifeCycle.end(); }  } "	0	0	1	0	1	0
@Override public <UNIT extends StandbyStateOperationService & Unit> StandbyStateOperationService newStandbyService(final UNIT unit) throws org.openbase.jul.exception.InstantiationException { return new StandbyStateOperationService() {  @Override public StandbyStateType.StandbyState getStandbyState() throws NotAvailableException { return ((StandbyStateOperationService) unit).getStandbyState(); }  @Override public Future<Void> setStandbyState(StandbyStateType.StandbyState state) throws CouldNotPerformException { return update(state, unit); } }; } 	0	0	0	0	1	0
"public boolean isBiomeInList(Biome biome) {  for (String str : biomes) { // Biome type match? for (BiomeDictionary.Type type : BiomeDictionary.getTypes(biome)) if (type.toString().toLowerCase().equals(str)) return true;  // Is listed biome an exact match? Biome b = Biome.REGISTRY.getObject(new ResourceLocation(str)); if (b != null && b.equals(biome)) return true; // Trying adding minecraft resource prefix b = Biome.REGISTRY.getObject(new ResourceLocation(""minecraft:"" + str)); if (b != null && b.equals(biome)) return true; }  return false; } "	0	0	0	0	1	0
"private int getIndexForTaskNameUpdate() { int index = 0; for (int i = lengthOfInput; i >= 0; i--) {  if (userCommand[i - 1].equals(""name"")) { index = i - 1; break; } } return index; } "	0	0	0	0	1	0
@Test public void builder_withValidProto_resultIsEqual() { final CredentialSaveRequest request = new CredentialSaveRequest.Builder(ValidRequest.INSTANCE.toProtocolBuffer()).build();  assertThat(request.getCredential().getIdentifier()).isEqualTo(ValidCredential.ID); } 	0	0	0	0	1	0
"public void testGetFileFromPath_packageClass() { ServerToIdeFileResolver fileResolver = new ServerToIdeFileResolver();  assertEquals( class1.getContainingFile().getVirtualFile(), fileResolver.getFileFromPath(project, ""com/java/pkg/Class.java"")); } "	0	0	1	0	0	0
"private String buildMinTime(Calendar cal) { // Include day before today cal.roll(Calendar.DAY_OF_MONTH, -1);  // Build string String res = """"; res += cal.get(Calendar.YEAR); res += ""-"" + String.format(""%02d"", cal.get(Calendar.MONTH) + 1); // Calendar counts from 0 res += ""-"" + String.format(""%02d"", cal.get(Calendar.DAY_OF_MONTH)); res += ""T00:00:00.0z""; return res; } "	0	0	0	0	1	0
"private Bucket getBucket() throws IOException, GeneralSecurityException { String applicationVersion = TechGalleryUtil.getApplicationVersion(); Bucket createdBucket = getExistingBucket(applicationVersion); if (createdBucket == null) { return createBucket(applicationVersion); } logger.log(Level.INFO, ""##-- Encontrou bucket""); return createdBucket; } "	0	0	1	0	1	0
"@Override public LightweightMetaObject[] getAllLightweightMetaObjectsForClass(final int classId, final User user, final String[] representationFields, final String representationPattern, final ConnectionContext context) throws RemoteException { // TODO context implementation final String domain = user.getDomain(); final String className = this.getClassNameForClassId(user, domain, classId, context); final AbstractAttributeRepresentationFormater representationFormater; final LightweightMetaObject[] lightweightMetaObjects; final int representationFieldsLength = (representationFields != null) ? representationFields.length : 0;  final MultivaluedMap queryParameters = this.createUserParameters(user); queryParameters.add(""deduplicate"", ""true""); queryParameters.add(""level"", String.valueOf((representationFieldsLength > 0) ? 1 : 0)); queryParameters.add(""limit"", String.valueOf(Integer.MAX_VALUE));  final StringBuilder fieldsParameter = new StringBuilder(); // fieldsParameter.append(metaClass.getPrimaryKey().toLowerCase()); if (representationFieldsLength > 0) { for (final String representationField : representationFields) { fieldsParameter.append(representationField); fieldsParameter.append(','); } if (fieldsParameter.length() > 1) { fieldsParameter.deleteCharAt(fieldsParameter.length() - 1); } } queryParameters.add(""fields"", fieldsParameter.toString());  final WebResource webResource = this.createWebResource(ENTITIES_API) .path(domain + ""."" + className) .queryParams(queryParameters); WebResource.Builder builder = this.createAuthorisationHeader(webResource, user); builder = this.createMediaTypeHeaders(builder); if (LOG.isDebugEnabled()) { LOG.debug(""getAllLightweightMetaObjectsForClass for class '"" + classId + ""@"" + domain + ""' ("" + domain + ""."" + className + "") for user '"" + user + ""' with "" + representationFieldsLength + "" representation fields:"" + webResource.toString()); }  try { final GenericCollectionResource<ObjectNode> objectNodes = builder.get( new GenericType<GenericCollectionResource<ObjectNode>>() { });  if ((objectNodes == null) || (objectNodes.get$collection() == null) || objectNodes.get$collection().isEmpty()) { LOG.error(""could not find any lightweight meta objects for class '"" + classId + ""@"" + domain + ""' ("" + domain + ""."" + className + "") for user '"" + user + ""' with "" + representationFieldsLength + "" representation fields.""); return null; }  if (representationPattern != null) { // LOG.warn(""ignoring representation pattern '""+representationPattern+""'""); representationFormater = new StringPatternFormater(representationPattern, representationFields); } else { // let the CidsBeanFactory handle the toString formatting if // CidsBeanFactory.LEGACY_DISPLAY_NAME is present representationFormater = null; } if (LOG.isDebugEnabled()) { LOG.debug(""found "" + objectNodes.get$collection().size() + "" lightweight meta objects for class '"" + classId + ""@"" + domain + ""' ("" + domain + ""."" + className + "") for user '"" + user + ""' with "" + representationFieldsLength + "" representation fields. Performing conversion to cids legacy meta objects.""); }  lightweightMetaObjects = new LightweightMetaObject[objectNodes.get$collection().size()]; int i = 0; for (final JsonNode objectNode : objectNodes.get$collection()) { final CidsBean cidsBean; try { cidsBean = CidsBean.createNewCidsBeanFromJSON(false, objectNode.toString()); } catch (Exception ex) { final String message = ""could not deserialize cids beans from object nodes for class '"" + classId + ""@"" + domain + ""' ("" + domain + ""."" + className + "") for user '"" + user + ""' with "" + representationFieldsLength + "" representation fields: "" + ex.getMessage(); LOG.error(message, ex); throw new RemoteException(message, ex); }  // ensure that classKeyCache is initialized for CidsBeanFactory; if (!classKeyCache.isDomainCached(domain)) { LOG.warn(""class name cache not initialized yet for domain '"" + domain + ""', need to fill the cache NOW!""); this.getClasses(user, domain); }  if (cidsBean != null) { final LightweightMetaObject lightweightMetaObject = CidsBeanFactory.getFactory() .lightweightMetaObjectFromCidsBean( cidsBean, classId, domain, user, representationFields, representationFormater, this.classKeyCache); lightweightMetaObjects[i] = lightweightMetaObject; i++; } else { LOG.error(""could not find lightweight meta objects for class '"" + classId + ""@"" + domain + ""' ("" + domain + ""."" + className + "") for user '"" + user + ""' with "" + representationFieldsLength + "" representation fields.""); return null; } } } catch (UniformInterfaceException ue) { final Status status = ue.getResponse().getClientResponseStatus(); final String message = ""could not get lightweight meta object for class '"" + classId + ""@"" + domain + ""' ("" + domain + ""."" + className + "") for user '"" + user + ""' with "" + representationFieldsLength + "" representation fields: "" + status.getReasonPhrase();  LOG.error(message, ue); if (LOG.isDebugEnabled()) { LOG.debug(ue.getResponse().getEntity(String.class)); } throw new RemoteException(message, ue); }  return lightweightMetaObjects; } "	0	0	0	0	0	1
"@POST @Path(""/getRootsByDomain"") @Consumes(MediaType.APPLICATION_FORM_URLENCODED) @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response getRootsByDomain(@Context final HttpServletRequest hsr, @FormParam(PARAM_USER) final String userBytes, @FormParam(PARAM_DOMAIN) final String domainNameBytes, @FormParam(PARAM_CONTEXT) final String contextBytes) throws RemoteException { nameTheThread(hsr, ""/getRootsByDomain"", ""[bytes]"", ""domain=[bytes]"");  try { final User user = Converter.deserialiseFromString(userBytes, User.class, isCompressionEnabled()); final ConnectionContext context = Converter.deserialiseFromString( contextBytes, ConnectionContext.class, isCompressionEnabled()); final String domain = Converter.deserialiseFromString( domainNameBytes, String.class, isCompressionEnabled()); nameTheThread(hsr, ""/getRootsByDomain"", user.toString(), ""domain="" + domain);  return createResponse(getCallserver().getRoots(user, domain)); } catch (final IOException e) { final String message = ""could not get roots""; // NOI18N LOG.error(message, e); throw new RemoteException(message, e); } catch (final ClassNotFoundException e) { final String message = ""could not get roots""; // NOI18N LOG.error(message, e); throw new RemoteException(message, e); } } "	1	0	1	1	1	0
"@POST @Path(""/getChildren"") @Consumes(MediaType.APPLICATION_FORM_URLENCODED) @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response getChildren(@Context final HttpServletRequest hsr, @FormParam(PARAM_NODE) final String nodeBytes, @FormParam(PARAM_USER) final String usrBytes, @FormParam(PARAM_CONTEXT) final String contextBytes) throws RemoteException { nameTheThread(hsr, ""/getChildren"", ""[bytes]"", ""node=[bytes]"");  try { final ConnectionContext context = Converter.deserialiseFromString( contextBytes, ConnectionContext.class, isCompressionEnabled()); final Node node = Converter.deserialiseFromString(nodeBytes, Node.class, isCompressionEnabled()); final User user = Converter.deserialiseFromString(usrBytes, User.class, isCompressionEnabled()); nameTheThread(hsr, ""/getChildren"", user.toString(), ""node="" + ((node != null) ? node.toString() : ""null""));  return createResponse(getCallserver().getChildren(node, user)); } catch (final IOException e) { final String message = ""could not get children""; // NOI18N LOG.error(message, e); throw new RemoteException(message, e); } catch (final ClassNotFoundException e) { final String message = ""could not get children""; // NOI18N LOG.error(message, e); throw new RemoteException(message, e); } } "	1	0	1	0	1	0
public void setSecondaryProgress(float secondaryProgress) { secondaryProgress = (secondaryProgress > max) ? max : secondaryProgress; secondaryProgress = (secondaryProgress < 0) ? 0 : secondaryProgress; this.secondaryProgress = secondaryProgress; float ratio = max / secondaryProgress;  ViewGroup.LayoutParams params = layoutSecondaryProgress.getLayoutParams(); params.width = (int)((backgroundWidth - (padding * 2)) / ratio); layoutSecondaryProgress.setLayoutParams(params);  if(!isProgressBarCreated) { isProgressSetBeforeDraw = true; } } 	0	0	0	0	1	0
private boolean restoreActivityState() { SharedPreferences activityState = MyPreferences.getSharedPreferences(PERSISTENCE_NAME); boolean stateRestored = false; if (activityState != null) { stateRestored = mListParametersNew.restoreState(activityState); if (stateRestored) { mMessageEditor.loadState(activityState); mContextMenu.loadState(activityState); } } return stateRestored; } 	0	0	0	0	1	0
protected void saveActivityState() { SharedPreferences.Editor outState = MyPreferences.getSharedPreferences(PERSISTENCE_NAME).edit(); mListParametersNew.saveState(outState); mMessageEditor.saveState(outState); mContextMenu.saveState(outState); outState.commit(); } 	0	0	0	0	1	0
@Override public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) { try { // force correct length by resetting to old value if longer than maxLength if (newValue.length() > 65) { pictureName.setText(oldValue); } } catch (Exception e) { pictureName.setText(oldValue); } } 	0	0	0	0	1	0
public T getDataObject(Widget w) { int widgetIndex = contentPanel.getWidgetIndex(w); if (widgetIndex >= 0) { if (pager != null && !pager.supportsInfiniteScroll()) { int numPreviousPage = getDataProvider().getCurrentPage() - 1; widgetIndex += (numPreviousPage*pageSize); }  return getDataProvider().get(widgetIndex); } return null; } 	0	0	1	0	1	0
"@Override public void open() throws TrippiException { if (writer != null) { writer.close(); } final int bufferFlushBatchSize = parseInt( config.getOrDefault(""bufferFlushBatchSize"", DEFAULT_BUFFER_FLUSH_BATCH_SIZE)); final int bufferSafeCapacity = parseInt( config.getOrDefault(""bufferSafeCapacity"", DEFAULT_BUFFER_SAFE_CAPACITY)); final int autoFlushBufferSize = parseInt( config.getOrDefault(""autoFlushBufferSize"", DEFAULT_AUTO_FLUSH_BUFFER_SIZE)); final int autoFlushDormantSeconds = parseInt( config.getOrDefault(""autoFlushDormantSeconds"", DEFAULT_AUTO_FLUSH_DORMANT_SECONDS)); final boolean readOnly = parseBoolean(config.getOrDefault(""readOnly"", ""false"")); log.info(""This is {}a read-only connector."", readOnly ? """" : ""not ""); final String updateEndpoint = config.get(""updateEndpoint""); log.info(""Using update endpoint {}"", updateEndpoint); final String queryEndpoint = config.getOrDefault(""queryEndpoint"", updateEndpoint); log.info(""Using query endpoint {}"", queryEndpoint); final String constructEndpoint = config.getOrDefault(""constructEndpoint"", queryEndpoint); log.info(""Using construct endpoint {}"", constructEndpoint); final Node graphName = createURI(config.getOrDefault(""graphName"", ""#ri"")); log.info(""Using graph name {}"", stringForNode(graphName)); final String uriBase = config.getOrDefault(""uriBase"", DEFAULT_URI_BASE); log.info(""Using URI base {}"", uriBase);  if (factory != null) { factory.close(); } factory = new SparqlSessionFactory(updateEndpoint, queryEndpoint, constructEndpoint, graphName, readOnly);  final PoolingClientConnectionManager connectionManager = new PoolingClientConnectionManager(); final int maxConnections = parseInt(config.getOrDefault(""maxHttpConnections"", DEFAULT_MAX_HTTP_CONNECTIONS)); connectionManager.setMaxTotal(maxConnections); connectionManager.setDefaultMaxPerRoute(maxConnections); setDefaultHttpClient(new DefaultHttpClient(connectionManager));  if (tripleIteratorFactory == null) { tripleIteratorFactory = new TripleIteratorFactory(); }  final int initialSize = parseInt(config.getOrDefault(""initialTripleStorePoolSize"", DEFAULT_INITIAL_SIZE)); log.info(""Using Trippi connection pool with initial size of {}"", initialSize); final int maxGrowth = parseInt(config.getOrDefault(""maxTripleStorePoolGrowth"", DEFAULT_MAX_GROWTH)); log.info(""Using Trippi connection pool with maximum growth of {}"", maxGrowth); final int spareSessions = parseInt(config.getOrDefault(""spareTripleStorePool"", DEFAULT_SPARE_SESSIONS)); log.info(""Using Trippi connection pool with {} spare session(s)"", spareSessions);  final ConfigurableSessionPool pool = new ConfigurableSessionPool(factory, initialSize, maxGrowth, spareSessions); final UpdateBuffer buffer = new MemUpdateBuffer(bufferFlushBatchSize, bufferSafeCapacity); try { writer = new ConcurrentTriplestoreWriter(pool, new DefaultAliasManager(), factory.newSession(), buffer, tripleIteratorFactory, autoFlushBufferSize, autoFlushDormantSeconds); } catch (final IOException e) { throw new RuntimeException(e); } } "	0	0	1	1	0	0
private void showStopProblemFragment(ObaStop obaStop) { ReportStopProblemFragment.show(this, obaStop, R.id.ri_report_stop_problem, false, this); } 	1	0	1	1	1	0
@Override public String getRecipeCategoryUid(RitualRecipes recipe) { return JEICauldronCategory.UID; } 	0	0	0	0	1	0
"private void showWindow(DataPointInterface dataPoint) { final SQLiteDatabase dbr = mDbHelper.getReadableDatabase(); Date date = new Date((long)dataPoint.getX()); SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss""); SimpleDateFormat newformat = new SimpleDateFormat(""EEE M/d 'at' h:mm a""); Object[] data = mDbHelper.getDataForPopup(dbr, format.format(date)); layoutInflater = (LayoutInflater) getApplicationContext().getSystemService(LAYOUT_INFLATER_SERVICE); ViewGroup container = (ViewGroup) layoutInflater.inflate(R.layout.data, null); TextView x = (TextView) container.findViewById(R.id.Timetext); x.setText(newformat.format(date)); x = (TextView) container.findViewById(R.id.bp); double systolic = (double)((Pair)data[0]).second; double diastolic = (double)((Pair)data[1]).second; x.setText(systolic + ""\n"" + diastolic);  ImageView circle = (ImageView) container.findViewById(R.id.circle_X); if(systolic < 120 && diastolic < 80){ circle.setImageResource(R.drawable.green_circle); x.setTextColor(Color.parseColor(""#33ff33"")); } else if((systolic > 120 && diastolic < 139) || (systolic < 89 && diastolic > 80)){ circle.setImageResource(R.drawable.yellow_circle); //            Resources resources = getResources(); //            circle.setImageDrawable(resources.getDrawable(R.drawable.yellow_circle)); x.setTextColor(Color.parseColor(""#FF9A00"")); } else{ circle.setImageResource(R.drawable.red_circle); x.setTextColor(Color.parseColor(""#ff0000"")); } x = (TextView) container.findViewById(R.id.Pulsetext);   double pulse = (double)((Pair)data[2]).second; x.setText(pulse + """"); x.setTextColor(Color.parseColor(""#f01515"")); TagCloudLinkView view = (TagCloudLinkView) container.findViewById(R.id.Tags); for (int i = 5; i <= 12; i++) { String tag = (String)((Pair)data[i]).second; if (tag.equals(""1"")) view.add(new com.ns.developer.tagview.entity.Tag(1, (String)((Pair)data[i]).first)); } view.drawTags(); String mood = (String)((Pair)data[4]).second; ImageView moodcon = (ImageView) container.findViewById(R.id.moodIamge); if (mood.equals(""good"")) { moodcon.setImageResource(R.drawable.happy); } else if (mood.equals(""normal"")) { moodcon.setImageResource(R.drawable.normal); } else { moodcon.setImageResource(R.drawable.sad); }  x = (TextView) container.findViewById(R.id.Msg); x.setText((String)((Pair)data[13]).second);  Display display = getWindowManager().getDefaultDisplay(); android.graphics.Point size = new android.graphics.Point(); display.getSize(size);  int width = (int)(size.x * 0.8); int height = (int)(size.y * 0.8); int px = (int)(size.x * 0.1); int py = (int)(size.y * 0.1); popupWindow = new PopupWindow(container, width, height, true); popupWindow.showAtLocation(relativeLayout, Gravity.NO_GRAVITY, px, py); ImageView close = (ImageView) container.findViewById(R.id.close); close.setOnTouchListener(new View.OnTouchListener() { @Override public boolean onTouch(View v, MotionEvent event) { popupWindow.dismiss(); return false; } }); container.setOnTouchListener(new View.OnTouchListener() { @Override public boolean onTouch(View view, MotionEvent motionEvent) { //                popupWindow.dismiss(); return true; } }); } "	0	0	0	0	0	1
"protected boolean onClientPageFinished(String url) { if (isMatchCurrentUrl(url)) { SonicUtils.log(TAG, Log.INFO, ""session("" + sId + "") onClientPageFinished:url="" + url + "".""); wasOnPageFinishInvoked.set(true); return true; } return false; } "	0	0	1	0	0	0
"private Response handleSaveRole(SecurityRole securityRole, boolean post) { ValidationResult validationResult = securityRole.validate(); if (post) { validationResult.merge(service.getSecurityService().validateSecurityRoleName(securityRole.getRoleName())); }  if (validationResult.valid()) { SecurityRole savedRole = service.getSecurityService().saveSecurityRole(securityRole);  if (post) { return Response.created(URI.create(""v1/resource/securityroles/"" + savedRole.getRoleName())).entity(savedRole).build(); } else { return Response.ok(savedRole).build(); } } else { return Response.ok(validationResult.toRestError()).build(); } } "	0	0	1	1	1	0
public Material selectMaterialForRepresenter(Material mat) { Material tempMat = selectMaterial(mat); Random rand = new Random(); if (!isEarthbendableMaterial(tempMat)) { if (currentBlocks.size() < 1) return Material.DIRT; else return currentBlocks.get(rand.nextInt(currentBlocks.size())).getType(); } return tempMat; } 	0	0	0	0	1	0
"public void onclickCheckBMI(View v){ height = edt_height.getText().toString(); weight = edt_weight.getText().toString(); age = edt_age.getText().toString(); if (height.equals("""") || weight.equals("""") || age.equals("""")) Toast.makeText(getApplicationContext(), ""Something are empty!"", Toast.LENGTH_LONG).show(); else { if (check(Float.parseFloat(weight) ,Float.parseFloat(height))) checkBMIAlertDialog.show(); else mCheckBMIResultDialog.show(1, Gravity.TOP); } } "	0	0	0	0	1	0
public int getStatusCode() { return (int) this.data.get(STATUS_CODE); } 	0	0	1	0	0	0
"private ExchangeRate getExchangeRate(List<ExchangeRate> rates,final LocalDate[] dates) { if (Objects.isNull(rates) ) { return null; } if (Objects.isNull(dates)) { return rates.stream().sorted(COMPARATOR_EXCHANGE_BY_LOCAL_DATE.reversed()).findFirst().orElseThrow(() -> new MonetaryException(""There is not more recent exchange rate to  rate on IMFRateProvider."")); } else { for (LocalDate localDate : dates) { Predicate<ExchangeRate> filter = rate -> rate.getContext().get(LocalDate.class).equals(localDate); Optional<ExchangeRate> exchangeRateOptional = rates.stream().filter(filter).findFirst(); if(exchangeRateOptional.isPresent()) { return exchangeRateOptional.get(); } } String datesOnErros = Stream.of(dates).map(date -> date.format(DateTimeFormatter.ISO_LOCAL_DATE)).collect(Collectors.joining("","")); throw new MonetaryException(""There is not exchange on day "" + datesOnErros + "" to rate to  rate on ECBRateProvider.""); } } "	0	0	0	0	1	0
"public static String transferEncoding(Response<?> response) { return response.headers().get(""Transfer-Encoding""); } "	0	0	0	1	0	0
"@Override void runCommand(TachyonURI path) throws IOException { try { if (!mTfs.exists(path)) { throw new IOException(""rm: Path "" + path + "" does not exist""); } if (mTfs.getStatus(path).isFolder()) { throw new IOException(""rm: cannot remove a directory, please try rmr <path>""); } mTfs.delete(path); System.out.println(path + "" has been removed""); } catch (TachyonException e) { throw new IOException(e); } } "	0	0	1	1	1	0
"public void makeBucket(String bucketName, String region, Acl acl) throws InvalidBucketNameException, NoResponseException, IOException, XmlPullParserException, ErrorResponseException, NoSuchAlgorithmException, InternalException { byte[] data = null; Map<String,String> headerMap = new HashMap<String,String>();  if (region == null || ""us-east-1"".equals(region)) { // for 'us-east-1', location constraint is not required.  for more info // http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region data = """".getBytes(""UTF-8""); } else { CreateBucketConfiguration config = new CreateBucketConfiguration(); config.setLocationConstraint(region); data = config.toString().getBytes(""UTF-8"");  byte[] md5sum = getMd5Digest(data, data.length); if (md5sum != null) { headerMap.put(""Content-MD5"", BaseEncoding.base64().encode(md5sum)); } }  if (acl == null) { headerMap.put(""x-amz-acl"", Acl.PRIVATE.toString()); } else { headerMap.put(""x-amz-acl"", acl.toString()); }  executePut(bucketName, null, data, headerMap, null, ""us-east-1""); } "	0	0	0	0	1	0
protected float getTileHeight() { return manager.getTileHeight(); } 	0	0	0	0	1	0
"@Override public void parseJoin(final CommandSender sender, final ArenaTeam team) {  debug.i(""parseJoin ... "", sender); ArenaPlayer ap = ArenaPlayer.parsePlayer(sender.getName()); if (ap.getStatus() == ArenaPlayer.Status.WARM) { debug.i(""skipping because we already did!"", sender); return; }  if (TeamManager.countPlayersInTeams(arena) < 2) { final String arenaname = PVPArena.hasOverridePerms(sender) ? arena.getName() : ArenaManager.getIndirectArenaName(arena); Announcement.announce(arena, Announcement.type.ADVERT, Language .parse(arena, CFG.MSG_STARTING, arenaname + ChatColor.valueOf(arena.getArenaConfig().getString( CFG.MODULES_ANNOUNCEMENTS_COLOR)))); }  if (arena.isFreeForAll()) { Announcement.announce(arena, Announcement.type.JOIN, arena.getArenaConfig().getString(CFG.MSG_PLAYERJOINED) .replace(""%1%"", sender.getName() + ChatColor.valueOf(arena.getArenaConfig().getString( CFG.MODULES_ANNOUNCEMENTS_COLOR)))); } else { Announcement.announce( arena, Announcement.type.JOIN, arena.getArenaConfig().getString(CFG.MSG_PLAYERJOINEDTEAM) .replace(""%1%"", sender.getName() + ChatColor.valueOf(arena.getArenaConfig().getString( CFG.MODULES_ANNOUNCEMENTS_COLOR))) .replace(""%2%"", team.getColoredName() + ChatColor.valueOf(arena.getArenaConfig().getString( CFG.MODULES_ANNOUNCEMENTS_COLOR)))); } } "	0	0	0	0	1	0
public void addNotification(ISender sender) { if (CommandUtils.isPlayer(sender)) { notifyWhenCached.add(((IPlayer) sender.getSender()).getUuid()); } } 	0	0	0	0	1	0
"@Override public CommandResult execute() throws ValidationException { ImmutableTask task = this.model.getObserveableList().get(index.getValue()); EventsCenter.getInstance().post(new ExpandCollapseTaskEvent(task)); return new CommandResult(""Command executed""); } "	0	0	0	0	1	0
"@Before public void setUp() throws Exception { sys 		= new Project("""", """", new ArrayList<Subsystem>(), Version.firstVersion(), null, null, 12345, null, null); subsys 		= new Subsystem("""", """", sys, new ArrayList<Subsystem>(), sys, null); subsubsys	= new Subsystem("""", """", subsys, new ArrayList<Subsystem>(), sys, null); subsys2 	= new Subsystem("""", """", sys, new ArrayList<Subsystem>(), sys, null); } "	0	0	0	0	1	0
boolean isNuevoMes() { Calendar calendar = Calendar.getInstance(); int mesActual = calendar.get(Calendar.MONTH); calendar.add(Calendar.MONTH, -1); int mesAyer = calendar.get(Calendar.MONTH); return mesActual != mesAyer; } 	0	0	0	0	1	0
boolean isNuevaSemana() { Calendar calendar = Calendar.getInstance(); int semanaActual = calendar.get(Calendar.WEEK_OF_YEAR); calendar.add(Calendar.WEEK_OF_YEAR, -1); int semanaAyer = calendar.get(Calendar.WEEK_OF_YEAR); return semanaActual != semanaAyer; } 	0	0	0	0	1	0
@Override public boolean replace(K key, V value, ExpiryPolicy expiryPolicy) { final long start = System.nanoTime(); final Future<Boolean> f = replaceAsyncInternal(key, null, value, expiryPolicy, false, true, false); try { boolean replaced = toObject(f.get()); if (statisticsEnabled) { handleStatisticsOnReplace(false, start, replaced); } return replaced; } catch (Throwable e) { throw ExceptionUtil.rethrowAllowedTypeFirst(e, CacheException.class); } } 	0	0	1	0	1	0
@WebMethod public List<Employee> getAllEmployees() { return (List<Employee>) organization.values(); } 	0	0	1	0	1	0
"private void prepareCurrentQuery() { Log.d(TAG, ""prepareCurrentQuery""); final Query currentQuery = mPlaybackManager.getCurrentQuery(); if (currentQuery != null) { if (currentQuery.isPlayable()) { if (currentQuery.getImage() == null) { String requestId = InfoSystem.get().resolve( currentQuery.getArtist(), false); if (requestId != null) { mCorrespondingRequestIds.put(requestId, currentQuery.getCacheKey()); } requestId = InfoSystem.get().resolve(currentQuery.getAlbum()); if (requestId != null) { mCorrespondingRequestIds.put(requestId, currentQuery.getCacheKey()); } }  TomahawkRunnable r = new TomahawkRunnable(TomahawkRunnable.PRIORITY_IS_PLAYBACK) { @Override public void run() { if (mMediaSession == null) { Log.e(TAG, ""prepareCurrentQuery failed - mMediaSession == null!""); return; } if (mPlayState == PlaybackStateCompat.STATE_PLAYING && currentQuery.getMediaPlayerClass() != null) { TomahawkMediaPlayer mp = mMediaPlayers.get(currentQuery.getMediaPlayerClass()); mPlayState = PlaybackStateCompat.STATE_BUFFERING; updateMediaPlayState(); if (mp.prepare(currentQuery, mMediaPlayerCallback) == null) { boolean isNetworkAvailable = NetworkUtils.isNetworkAvailable(); if (isNetworkAvailable && currentQuery.getPreferredTrackResult() != null) { currentQuery.blacklistTrackResult( currentQuery.getPreferredTrackResult()); mPlaybackManagerCallback.onCurrentEntryChanged(); } if (!isNetworkAvailable || currentQuery.getPreferredTrackResult() == null) { Log.e(TAG, ""MediaPlayer was unable to prepare the track, jumping to next track""); mMediaSession.getController().getTransportControls() .skipToNext(); } else { Log.d(TAG, ""MediaPlayer blacklisted a result and tries to prepare again""); prepareCurrentQuery(); } } else { if (mCurrentMediaPlayer != null) { mCurrentMediaPlayer.release(); } mCurrentMediaPlayer = mp; } } } }; ThreadManager.get().executePlayback(r); } else { mMediaSession.getController().getTransportControls().skipToNext(); } } } "	0	0	1	1	1	0
"public void connect(View view){ EditText edip=(EditText) findViewById(R.id.editTextIP); cw=new connection_worker(this,edip.getText().toString(),""1234""); } "	0	0	0	0	1	0
@Override public boolean commitResource(JobConf conf) throws IOException { VersionedStore store = new VersionedStore(FileSystem.get(conf), getOutputDirectory());  if (newVersionPath != null) { store.succeedVersion(newVersionPath); markSuccessfulOutputDir(new Path(newVersionPath), conf); newVersionPath = null; store.cleanup(getVersionsToKeep()); }  return true; } 	0	0	0	0	1	0
private static String getTemplateRoot(final MavenProject project) { if (project.getParent() != null) { return project.getParent().getBasedir().getAbsolutePath(); } return project.getBasedir().getAbsolutePath(); } 	0	0	0	0	1	0
public final boolean accept(final File dir, final String name) { return !(Strings.isNullOrEmpty(name) || dir == null) && new File(dir, name).isFile() && name.toLowerCase().endsWith(JPG); } 	0	0	0	0	1	0
public ArrayList<Map.MapDirection> givePath(Location loc){ ArrayList<Map.MapDirection> path = new ArrayList<Map.MapDirection>();  Map.MapDirection nextMove;  while(loc != null){ nextMove = getPath(loc); path.add(nextMove); loc = loc.getAdjacent(nextMove); }  return path; } 	0	0	1	0	1	0
@Override public boolean onKeyUp(int keyCode, @NonNull KeyEvent event) { if (BaseActivity.isKeyCodeWorkaroundRequired(keyCode)) { openOptionsMenu(); return true; } return super.onKeyUp(keyCode, event); } 	0	0	0	0	1	0
@Override public boolean onKeyDown(int keyCode, KeyEvent event) { return BaseActivity.isKeyCodeWorkaroundRequired(keyCode) || super.onKeyDown(keyCode, event); } 	0	0	0	0	1	0
"@Test public void filterWrongUsernameInHeader() throws IOException { String token = ""token""; AuthenticatedUser authenticatedUser = createMock(AuthenticatedUser.class); User user = createMock(User.class); context.abortWith(EasyMock.capture(capturedResponse));  setExpects(token, authenticatedUser, user, ""wrongUsername"");  replay(uriInfo, request, session, context, authenticatedUserService, authenticatedUser, user);  filter.filter(context);  verify(uriInfo, request, session, context, authenticatedUserService, authenticatedUser, user);  assertEquals(HTTP_AUTHENTICATION_TIMEOUT, capturedResponse.getValue().getStatus()); } "	0	0	0	0	1	0
@Override public void destroyResources() { eurekaConnCleaner.shutdown(); apacheHttpClient.destroy(); } 	0	0	0	0	1	0
"@Override public void handleGetClusterSize(WorkMessage workMessage, Channel channel) { System.out.println(""~~~~~~~~Leader - Handle Cluster Size Event"");  System.out.println(""Replying to :"" + workMessage.getHeader().getNodeId()); state.getEmon().broadcastMessage(util.createSizeIsMessage( nodeId, workMessage.getHeader().getNodeId()));  /* ConcurrentHashMap<Integer, EdgeInfo> edgeMap = state.getEmon() .getOutboundEdges().getEdgesMap(); for (Integer destinationId : edgeMap.keySet()) { EdgeInfo edge = edgeMap.get(destinationId); if (edge.isActive() && edge.getChannel() != null) { edge.getChannel().writeAndFlush( util.createGetClusterSizeMessage(nodeId, destinationId)); } } */ } "	0	0	0	0	0	1
@Override public int compareTo(@Nonnull BasePrioritizedData o) { // Sort by priority, then by name. if(priority != o.priority) return priority.ordinal() - o.priority.ordinal(); return matcher.getClass().getName().compareTo(o.matcher.getClass().getName()); } 	0	0	1	0	1	0
"@Override public StringBuilder visit(LetClause node, StringBuilder builder) throws CompilationException { return makeNode(""Let"", builder, node.getVarExpr().toString(), node.getBindingExpr()); } "	0	0	0	0	1	0
"public static SubstitutesDataModel addSubstituteInfo(String assignee, String substitute, Date startDate, Date endDate, String taskListString, int tenantId) throws SubstitutionException { ActivitiDAO activitiDAO = SubstitutionDataHolder.getInstance().getActivitiDAO(); //at any given time there could be only one substitute for a single user if (activitiDAO.selectSubstituteInfo(assignee, tenantId) != null) { log.error(""Substitute for user: "" + assignee + "", already exist. Try to update the substitute info""); throw new SubstitutionException( ""Substitute for user: "" + assignee + "", already exist. Try to update the substitute info""); } else { SubstitutesDataModel dataModel = new SubstitutesDataModel(); dataModel.setUser(assignee); dataModel.setSubstitute(MultitenantUtils.getTenantAwareUsername(substitute)); dataModel.setSubstitutionStart(startDate); if (endDate == null) { endDate = new Date(Long.MAX_VALUE); } dataModel.setSubstitutionEnd(endDate); dataModel.setEnabled(true); //by default enabled dataModel.setCreated(new Date()); dataModel.setTenantId(tenantId); dataModel.setTaskList(taskListString); activitiDAO.insertSubstitute(dataModel); return dataModel; } } "	0	0	0	0	1	0
"@Override public Optional<AgriSeed> executeStrategy(IAgriCrop crop, Random rand) { // Validate the parameters. Objects.requireNonNull(crop, ""You cannot execute a mutation on a null crop!""); Objects.requireNonNull(rand, ""The random passed to a mutation strategy should not be null!"");  // Fetch all neighboring crop instances. final List<IAgriCrop> neighbors = WorldHelper.getTileNeighbors(crop.getCropWorld(), crop.getCropPos(), IAgriCrop.class);  // Determine all possible parents. final List<IAgriPlant> parents = neighbors.stream() // Filter out all crops that are not mature. .filter(IAgriCrop::isMature) // Map to the seed associated with the crop. .map(IAgriCrop::getSeed) // Filter out all null objects (just in case). .filter(Objects::nonNull) // Map to the plant associated with the crop's seed. .map(AgriSeed::getPlant) // Collect into a list. .collect(Collectors.toList());  // If we have less than two parents, might as well as abort. if (parents.size() < 2) { return Optional.empty(); }  // Determine the list of possible cross-over mutations. final List<IAgriMutation> mutations = AgriApi.getMutationRegistry() // Stream all mutations. .stream() // Filter out mutations with both parents in the 'parents' list. .filter(m -> m.areParentsIn(parents)) // Filter out mutations whose child wouldn't be viable here. // Notice, this operation is by far the most costly. // That' why we perform this operation last. .filter(m -> crop.isFertile(m.getChild())) // Collect the list of all possibilties. .collect(Collectors.toList());  // If we didn't find any valid mutations, might as well as abort. if (mutations.isEmpty()) { return Optional.empty(); }  // Choose a random index in the list. final int index = rand.nextInt(mutations.size());  // Fetch the chosen mutation from the list. final IAgriMutation mutation = mutations.get(index);  // Determine if we should actually go through with this. if (mutation.getChance() <= rand.nextDouble()) { return Optional.empty(); }  // Calculate the stat associated with the new plant. Optional<IAgriStat> stat = AgriApi.getStatCalculatorRegistry().valueOf(mutation).map(c -> c.calculateMutationStats(mutation, neighbors));  // Return the mutation result. return stat // Map the stat to an AgriSeed by adding the plant. .map(s -> new AgriSeed(mutation.getChild(), s)); } "	0	0	0	0	1	0
private FenixServiceException verify(StudentCurricularPlan studentCurricularPlan, ExecutionSemester executionSemester) { final DegreeCurricularPlan degreeCurricularPlan = studentCurricularPlan.getDegreeCurricularPlan(); Predicate<AcademicEnrolmentPeriod> predicate = null; if (!studentCurricularPlan.isInCandidateEnrolmentProcess(executionSemester.getExecutionYear())) { predicate = ep -> ep.isForClasses() || ep.isForShift(); } else { predicate = ep -> ep.getFirstTimeRegistration(); } FenixServiceException result = verify(predicate, degreeCurricularPlan, executionSemester); if (result == null) { return null; } for (final DegreeCurricularPlanEquivalencePlan equivalencePlan : degreeCurricularPlan.getTargetEquivalencePlansSet()) { final DegreeCurricularPlan otherDegreeCurricularPlan = equivalencePlan.getDegreeCurricularPlan(); result = verify(predicate, otherDegreeCurricularPlan, executionSemester); if (result == null) { return null; } } return result; } 	0	0	0	0	1	0
"public static void resolveMap(Map<String, Object> map) { for (Map.Entry<String, Object> entry : map.entrySet()) { String key = entry.getKey(); Object value = entry.getValue(); System.out.println(""resolveMap key = "" + key + "" value = "" + value); if (value instanceof Map) { // check if this map is $ref, it should be size = 1 if (((Map) value).size() == 1) { Set keys = ((Map)value).keySet(); for (Iterator i = keys.iterator(); i.hasNext();) { String k = (String)i.next(); if(""$ref"".equals(k)) { String pointer = (String)((Map)value).get(k); System.out.println(""pointer = "" + pointer); Map refMap = handlerPointer(pointer); entry.setValue(refMap); } } } resolveMap((Map) value); } else if (value instanceof List) { resolveList((List)value); } else { continue; } } } "	0	0	0	0	1	0
"public void initiate(ChannelHandlerContext ctx) throws Exception {  loggerNet.debug(""RLPX protocol activated"");  nodeId = myKey.getNodeId();  handshake = new EncryptionHandshake(ECKey.fromNodeId(nodeId).getPubKeyPoint());  Object msg; if (config.eip8()) { AuthInitiateMessageV4 initiateMessage = handshake.createAuthInitiateV4(myKey); initiatePacket = handshake.encryptAuthInitiateV4(initiateMessage); msg = initiateMessage; } else { AuthInitiateMessage initiateMessage = handshake.createAuthInitiate(null, myKey); initiatePacket = handshake.encryptAuthMessage(initiateMessage); msg = initiateMessage; }  final ByteBuf byteBufMsg = ctx.alloc().buffer(initiatePacket.length); byteBufMsg.writeBytes(initiatePacket); ctx.writeAndFlush(byteBufMsg).sync();  channel.getNodeStatistics().rlpxAuthMessagesSent.add();  if (loggerNet.isDebugEnabled()) loggerNet.debug(""To: \t{} \tSend: \t{}"", ctx.channel().remoteAddress(), msg); } "	0	0	0	0	1	0
"@Test public void thatEnglishUriGetsLocalizedToEnglish() { setLocale(LOCALE_EN); assertThat(coursePageUriLocalizer.localize(""http://courses.helsinki.fi/30250"")).isEqualTo(""http://courses.helsinki.fi/30250""); } "	0	0	0	0	1	0
public long getSize() { if(response == null){ response = responses.get(status).getBytes(); } if(!stream) { long length = response.length; return length; } else{ return islength; } } 	0	0	0	0	1	0
"public Service patchService(String serviceIdText, Service requestedBody, String userEPPN) throws DMCServiceException {  // if (!userIsAuthorizedToUpdate(serviceIdText, userEPPN, requestedBody)) { //   throw new DMCServiceException(DMCError.NotAuthorizedToChange, ""User: "" + userEPPN + "" is not allowed to update service: "" + serviceIdText); // }  try {  final int serviceId = Integer.parseInt(serviceIdText); if (serviceId != requestedBody.getId()) { throw new DMCServiceException(DMCError.OtherSQLError, ""serviceId "" + serviceId + "" does not match "" + requestedBody.getId() + "" as expected""); } connection = DBConnector.connection(); // let's start a transaction connection.setAutoCommit(false);  // look up userID final int userID = UserDao.getUserID(userEPPN);  String query = ""update service set ""; query += ""organization_id=?, ""; query += ""title=?, ""; query += ""description=?, ""; query += ""release_date=?, ""; query += ""service_type=?, ""; query += ""project_id=?, ""; query += ""from_location=?, ""; query += ""type=?, ""; query += ""parent=?, ""; query += ""published=? ""; query += ""is_deleted=? ""; query += ""where ""; query += ""service_id=?""; // removing the below to allow all superAdmins to modify services // query += ""owner_id=?"";  final PreparedStatement preparedStatement = DBConnector.prepareStatement(query); preparedStatement.setObject(1, SqlTypeConverterUtility.getInt(requestedBody.getCompanyId()), java.sql.Types.INTEGER); preparedStatement.setString(2, requestedBody.getTitle()); preparedStatement.setString(3, requestedBody.getDescription()); preparedStatement.setObject(4, SqlTypeConverterUtility.getSqlDate(requestedBody.getReleaseDate()), java.sql.Types.DATE); preparedStatement.setString(5, requestedBody.getServiceType()); preparedStatement.setObject(6, SqlTypeConverterUtility.getInt(requestedBody.getProjectId()), java.sql.Types.INTEGER); preparedStatement.setString(7, requestedBody.getFrom()); preparedStatement.setString(8, requestedBody.getType()); preparedStatement.setString(9, requestedBody.getParent()); preparedStatement.setBoolean(10, requestedBody.getPublished()); preparedStatement.setBoolean(11, requestedBody.getIsDeleted()); preparedStatement.setInt(12, serviceId); // preparedStatement.setInt(12, userID); final int rowsAffected = preparedStatement.executeUpdate(); if (1 != rowsAffected) { throw new Exception(""didn't correctly modify service "" + requestedBody.getId()); } final Service service = getService(requestedBody.getId(), userEPPN);  final String updateServiceHistoryQuery = ""INSERT INTO service_history (service_id, title, date, user_id, link, section, period)"" + "" values (?, ?, ?, ?, ?, ?, ?)""; final PreparedStatement historyUpdate = DBConnector.prepareStatement(updateServiceHistoryQuery); final Date now = new Date(); historyUpdate.setInt(1, serviceId); historyUpdate.setString(2, UserDao.getUserName(userID) + "" updated the service on "" + now.toString()); historyUpdate.setObject(3, SqlTypeConverterUtility.getSqlDate(now), java.sql.Types.DATE); historyUpdate.setInt(4, userID); historyUpdate.setString(5, """"); historyUpdate.setString(6, ""marketplace""); historyUpdate.setString(7, now.toString()); final int historyAffected = historyUpdate.executeUpdate();  if (historyAffected != 1) throw new DMCServiceException(DMCError.UnableToLogServiceHistory, ""Could not log service history!"");  connection.commit();  if (Config.IS_TEST == null) { //ServiceLogger.log(LOGTAG, ""SolR indexing turned off""); // Trigger solr indexing try { SearchQueueImpl.sendFullIndexingMessage(SolrUtils.CORE_GFORGE_SERVICES); ServiceLogger.log(logTag, ""SolR indexing triggered for service (update): "" + serviceId); } catch (SearchException e) { } } return service; } catch (Exception e) { ServiceLogger.log(logTag, e.getMessage()); if (null != connection) { try { connection.rollback(); } catch (SQLException ex) { throw new DMCServiceException(DMCError.OtherSQLError, ""unable to rollback: "" + ex.getMessage()); } } throw new DMCServiceException(DMCError.OtherSQLError, ""unable to create new service: "" + e.getMessage()); } finally { if (null != connection) { try { connection.setAutoCommit(true); } catch (Exception ex) { // don't care } } } } "	0	0	0	0	0	1
@Override public void run() { try { Menu.init();  Frame.getInstance();  AnimationQueue.init(); Repainter.init();  // Spielablauf anschmeißen GameState.runGame();  } catch (Exception e) { e.printStackTrace(); } } 	0	0	1	0	0	0
@Override public void startCDATA() throws SAXException { buffer = new StringBuffer(); } 	0	0	0	0	1	0
"private static void findEnrichmentsAndWriteProps( // It's important to have a self-explanatory name for this variable. @SuppressWarnings(""MethodParameterNamingConvention"") String targetGeneratedResourcesDir, String descriptorSetPath) { log().debug(""Enrichment lookup started"");  final Map<String, String> propsMap = newHashMap(); final DescriptorSetUtil.IsNotGoogleProto protoFilter = new DescriptorSetUtil.IsNotGoogleProto(); final Collection<FileDescriptorProto> files = DescriptorSetUtil.getProtoFileDescriptors(descriptorSetPath, protoFilter); for (FileDescriptorProto file : files) { final Map<String, String> enrichments = new EnrichmentsFinder(file).findEnrichments(); propsMap.putAll(enrichments); } if (propsMap.isEmpty()) { log().debug(""Enrichment lookup complete. No enrichments found.""); return; }  log().trace(""Writing the enrichment description to {}/{}"", targetGeneratedResourcesDir, PROPS_FILE_NAME); final PropertiesWriter writer = new PropertiesWriter(targetGeneratedResourcesDir, PROPS_FILE_NAME); writer.write(propsMap);  log().debug(""Enrichment lookup complete""); } "	1	0	1	1	0	0
"private void registerContainersForShutdown() { // Ensure that all service containers that were launched by compose will be killed at shutdown try { final List<Container> containers = listChildContainers();  // register with ResourceReaper to ensure final shutdown with JVM containers.forEach(container -> ResourceReaper.instance().registerContainerForCleanup(container.getId(), container.getNames()[0]));  // Ensure that the default network for this compose environment, if any, is also cleaned up ResourceReaper.instance().registerNetworkForCleanup(identifier + ""_default""); // Compose can define their own networks as well; ensure these are cleaned up dockerClient.listNetworksCmd().exec().forEach(network -> { if (network.getName().contains(identifier)) { ResourceReaper.instance().registerNetworkForCleanup(network.getName()); } });  // remember the IDs to allow containers to be killed as soon as we reach stop() spawnedContainerIds = containers.stream() .map(Container::getId) .collect(Collectors.toSet());  } catch (DockerException e) { logger().debug(""Failed to stop a service container with exception"", e); } } "	0	0	0	0	1	0
"private void copyDBFromResources() throws IOException {  // Open the file in the assets folder as an input stream. InputStream inStream = mHelperContext.getAssets().open(DATABASE_NAME);  // Path to the newly created empty database. String fullDBPath = DATABASE_PATH + DATABASE_NAME;  // Open the empty database as the output stream. OutputStream outStream = new FileOutputStream(fullDBPath);  // Transfer the database from the resources to the system path one block at a time. byte[] buffer = new byte[1024]; int length; while ((length = inStream.read(buffer)) > 0) { outStream.write(buffer, 0, length); }  // Close the streams. outStream.flush(); outStream.close(); inStream.close();  // Log.d(TAG, ""Database copy successful.""); } "	0	0	0	0	1	0
"public static String joinAndUrlEncode(Collection<String> list) throws UnsupportedEncodingException { if (list == null || list.isEmpty()) { return """"; } return URLEncoder.encode(Joiner.on("" "").join(list), ""UTF-8""); } "	1	0	1	0	1	0
"public void testConditionalGetForLastModifiedAndETag() { Date now = new Date(); DefaultHttpHeaders headers = new DefaultHttpHeaders() .lastModified(now) .withETag(""asdf""); mockRequest.addHeader(""If-None-Match"", ""asdf""); mockRequest.addHeader(""If-Modified-Since"", new SimpleDateFormat(""EEE, dd MMM yyyy HH:mm:ss zzz"").format(now)); headers.apply(mockRequest, mockResponse, new Object());  assertEquals(SC_NOT_MODIFIED, mockResponse.getStatus()); } "	0	0	0	0	1	0
public int[] getAdditionalWidths(int index) { SimpleSingleByteEncoding enc = getAdditionalEncoding(index); int[] arr = new int[enc.getLastChar() - enc.getFirstChar() + 1]; for (int i = 0, c = arr.length; i < c; i++) { NamedCharacter nc = enc.getCharacterForIndex(enc.getFirstChar() + i); UnencodedCharacter uc = this.unencodedCharacters.get( new Character(nc.getSingleUnicodeValue())); arr[i] = uc.getWidth(); } return arr; } 	0	0	1	0	0	0
public void closeDialog() { bot.button(IDialogConstants.OK_LABEL).click(); } 	0	0	0	0	1	0
"private List<Annotation> getParamAnnotations(Class<?> cls, Type[] genericParameterTypes, Annotation[][] paramAnnotations, String simpleTypeName, int fieldPosition) { try { return Arrays.asList(paramAnnotations[fieldPosition]); } catch (Exception e) { Logger.error(String.format(""Exception getting parameter type for method %s, param %s at position %d""), e); return null; } } "	0	0	0	0	1	0
public Object apply() throws ReflectiveOperationException { return constructor.newInstance(values); } 	0	0	1	0	1	0
"@SuppressWarnings(""unchecked"") @Override public Map<Version, String> getSupportedBehaviors() { return Collections.EMPTY_MAP; } "	0	0	1	0	1	0
"public void executeScriptFile(ScriptItem scriptItem, boolean forceFromFile, Map<String, Object> additionalBindings) { ScriptLogger scriptLogger = new ScriptLogger(m_txtResult);  ScriptEngine scriptEngine = manager.getEngineByExtension(getFileExtension(scriptItem.getName()));  if (scriptEngine == null) { scriptEngine = manager.getEngineByName(DEFAULT_SCRIPT); }  //logResult(StaticUtils.format(OStrings.getString(""SCW_SELECTED_LANGUAGE""), scriptEngine.getFactory().getEngineName())); SimpleBindings bindings = new SimpleBindings(); bindings.put(VAR_PROJECT, Core.getProject()); bindings.put(VAR_EDITOR, Core.getEditor()); bindings.put(VAR_GLOSSARY, Core.getGlossary()); bindings.put(VAR_MAINWINDOW, Core.getMainWindow()); bindings.put(VAR_CONSOLE, scriptLogger); bindings.put(VAR_RESOURCES, scriptItem.getResourceBundle());  if (additionalBindings != null) { bindings.putAll(additionalBindings); }  // evaluate JavaScript code from String try { String scriptString; if (forceFromFile) { scriptString = scriptItem.getText(); } else if ("""".equals(m_txtScriptEditor.getText().trim())) { scriptString = scriptItem.getText(); m_txtScriptEditor.setText(scriptString); } else { scriptString = m_txtScriptEditor.getText(); }  if (!scriptString.endsWith(""\n"")) { scriptString += ""\n""; }  Object eval = scriptEngine.eval(scriptString, bindings); if (eval != null) { logResult(OStrings.getString(""SCW_SCRIPT_RESULT"")); logResult(eval.toString()); } } catch (Throwable e) { logResult(OStrings.getString(""SCW_SCRIPT_ERROR"")); logResult(e.getMessage()); //e.printStackTrace(); } } "	0	0	0	0	1	0
"public void initMenu() { mMenu = new Menu((int) getResources().getDimension(R.dimen.slv_item_height), new ColorDrawable(Color.WHITE), true); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width)) .setBackground(new ColorDrawable(Color.RED)) .setText(""One"") .setTextColor(Color.GRAY) .setTextSize((int) getResources().getDimension(R.dimen.txt_size)) .build()); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width)) .setBackground(new ColorDrawable(Color.GREEN)) .setText(""Two"") .setTextColor(Color.BLACK) .setTextSize((int) getResources().getDimension(R.dimen.txt_size)) .build()); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width) + 30) .setBackground(new ColorDrawable(Color.BLUE)) .setText(""Three"") .setDirection(MenuItem.DIRECTION_RIGHT) .setTextColor(Color.BLACK) .setTextSize((int) getResources().getDimension(R.dimen.txt_size)) .build()); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width_img)) .setBackground(new ColorDrawable(Color.BLACK)) .setDirection(MenuItem.DIRECTION_RIGHT) .setIcon(getResources().getDrawable(R.drawable.ic_launcher)) .build()); } "	0	0	0	0	1	0
private void initialize() { getStyleClass().setAll(DEFAULT_STYLE_CLASS); } 	1	0	0	0	1	0
"@Override public void storeAdventureSpecificValuesInFile(BufferedWriter bw) throws IOException {  bw.write(""spells="" + arrayToStringSpells(spells) + ""\n""); bw.write(""gold="" + getGold() + ""\n""); } "	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") void tick() { if (WIP.getAndIncrement(this) == 0) { int emitted = 0; do { // we only emit if requested > 0 if (requested.get() > 0) { Object o = buffer.poll(); if (o != null) { if (buffer.isCompleted(o)) { child.onCompleted(); } else { child.onNext((R) o); emitted++; requested.decrementAndGet(); } } } } while (WIP.decrementAndGet(this) > 0); if (emitted > 0) { for (MultiSourceRequestableSubscriber<T, R> s : subscribers) { s.requestUpTo(emitted); } } } } "	0	0	0	0	1	0
"public static <R> R execute(java.sql.Statement realStatement, ConnectionInfo connectInfo, String method, String sql, Executable<R> exec) throws SQLException { try { Span span = ContextManager.createSpan(""JDBC/Statement/"" + method); Tags.DB_TYPE.set(span, ""sql""); Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName()); Tags.DB_STATEMENT.set(span, sql); Tags.COMPONENT.set(span, connectInfo.getDBType()); Tags.SPAN_LAYER.asDB(span); if (!StringUtil.isEmpty(connectInfo.getHosts())) { Tags.PEERS.set(span, connectInfo.getHosts()); } else { Tags.PEER_PORT.set(span, connectInfo.getPort()); Tags.PEER_HOST.set(span, connectInfo.getHost()); } return exec.exe(realStatement, sql); } catch (SQLException e) { Span span = ContextManager.activeSpan(); Tags.ERROR.set(span, true); span.log(e); throw e; } finally { ContextManager.stopSpan(); } } "	0	0	0	0	1	0
"@Override public List<WorkUnit> getWorkunits(SourceState state) { try {  initialize(state);  EventSubmitter.submit(Optional.of(this.eventSubmitter), EventConstants.FIND_HIVE_TABLES_EVENT); Iterator<HiveDataset> iterator = this.datasetFinder.getDatasetsIterator();  while (iterator.hasNext()) { HiveDataset hiveDataset = iterator.next(); try (AutoReturnableObject<IMetaStoreClient> client = hiveDataset.getClientPool().getClient()) {  LongWatermark expectedDatasetHighWatermark = new LongWatermark(new DateTime().getMillis()); log.debug(String.format(""Processing dataset: %s"", hiveDataset));  // Create workunits for partitions if (HiveUtils.isPartitioned(hiveDataset.getTable())) { createWorkunitsForPartitionedTable(hiveDataset, client, expectedDatasetHighWatermark); } else { createPartitionForNonPartitionedTable(hiveDataset, expectedDatasetHighWatermark); } } } } catch (IOException e) { throw new RuntimeException(e); }  return this.workunits; } "	0	0	1	0	1	0
@Override public void setDefaultIconVisible() { defaultIcon.setVisible(true); previewImageContainer.setVisible(false); teamImageLoading.setVisible(false); } 	0	0	0	0	1	0
"@Test public void testGetHasStoreEntryCacheLoaderException() throws Exception { final FakeStore fakeStore = new FakeStore(Collections.singletonMap(""key"", ""value"")); this.store = spy(fakeStore); assertThat(fakeStore.getEntryMap().get(""key""), equalTo(""value""));  when(this.cacheLoader.load(""key"")).thenThrow(ExceptionFactory.newCacheLoaderException(new Exception())); final Ehcache<String, String> ehcache = this.getEhcache(this.cacheLoader);  assertThat(ehcache.get(""key""), equalTo(""value"")); verify(this.store).computeIfAbsent(eq(""key""), getAnyFunction()); verify(this.cacheLoader, never()).load(eq(""key"")); verifyZeroInteractions(this.spiedResilienceStrategy); assertThat(fakeStore.getEntryMap().get(""key""), equalTo(""value"")); validateStats(ehcache, EnumSet.noneOf(CacheOperationOutcomes.GetOutcome.class));    // TODO: Confirm correctness - Issue #196 validateStats(ehcache, EnumSet.noneOf(CacheOperationOutcomes.CacheLoaderOutcome.class)); } "	0	0	0	0	1	0
"@Override public void saveMonitorEvent(MonitorEvent event) { sqlTemplate.update(getSql(""insertMonitorEventSql""), event.getMonitorId(), event.getNodeId(), event.getEventTime(), event.getHostName(), event.getType(), event.getValue(), event.getThreshold(), event.getSeverityLevel(), event.isNotified()); } "	0	0	1	0	0	0
"@SuppressWarnings(""unchecked"") @Override public void visit(final KGraphElement element) { KLayoutData layout = element instanceof KEdge ? element.getData(KEdgeLayout.class) : element.getData(KShapeLayout.class); if (clearLayout) { layout.getProperties().clear(); } MapPropertyHolder classProperties = classOptionMap.get(element.getClass()); MapPropertyHolder elementProperties = elementOptionMap.get(element); if (optionFilter != null) { if (classProperties != null) { for (Map.Entry<IProperty<?>, Object> entry : classProperties.getAllProperties().entrySet()) { if (optionFilter.apply(Pair.of(element, entry.getKey()))) { layout.setProperty((IProperty<Object>) entry.getKey(), entry.getValue()); } } } if (elementProperties != null) { for (Map.Entry<IProperty<?>, Object> entry : elementProperties.getAllProperties().entrySet()) { if (optionFilter.apply(Pair.of(element, entry.getKey()))) { layout.setProperty((IProperty<Object>) entry.getKey(), entry.getValue()); } } } } else { if (classProperties != null) { layout.copyProperties(classProperties); } if (elementProperties != null) { layout.copyProperties(elementProperties); } } } "	0	0	0	0	1	0
private boolean isRightEdge(double x, double y, Bounds boundsInParent) { if (x < this.getWidth() && x > this.getWidth() - contentPlaceHolder.getBorder().getStrokes().get(0).getWidths().getLeft()) { return true; } return false; } 	0	0	0	0	1	0
"public String getUserId(final PlayerProfile profile) { if(profile.getUniqueIdMode() == this) { return profile.getUniqueUserId(); }  switch(this) { case OFFLINE: return UUID.nameUUIDFromBytes((""OfflinePlayer:"" + profile.getLastName().toLowerCase()).getBytes()).toString(); case MOJANG: return profile.getUniqueUserId(); default: throw new IllegalStateException(""Invalid uuid mode: "" + toString()); } } "	0	0	0	0	1	0
@Override public void handleResponse( String response ) { super.handleResponse(response);  List<Arrival> arrivals = LaMetroUtil.parseAllArrivals(response);  // We have a problem! if (arrivals == null) { if (this.trackedArrivals.size() > 0) { // If we had arrivals before, just carry on using the cached times. // This isn't a failure state. We just went underground (probably). predictionState = PredictionState.CACHED; return; } else { // But if this is the first run, let user know there's a problem. predictionState = PredictionState.BAD; return; } }  // First, add new destinations if we find any. for (Arrival newA : arrivals) { newA.setScope(inScope); if (arrivalTracked(newA)) { StopRouteDestinationArrival a = null;  synchronized (trackedArrivals) { for (StopRouteDestinationArrival arrival : trackedArrivals) { if (arrival.getDirection().equals(newA.getDirection()) && arrival.getRoute().equals(newA.getRoute()) && stop.equals(newA.getStop())) { a = arrival; break; } } }  if (a == null) { synchronized (trackedArrivals) { StopRouteDestinationArrival newSRDA = new StopRouteDestinationArrival( stop, newA.getRoute(), newA.getDirection()); newSRDA.setScope(inScope); trackedArrivals.add(newSRDA); } } } }  //Then update all the destinations we have for (StopRouteDestinationArrival a : trackedArrivals) { a.updateArrivalTimes(arrivals); } } 	0	0	1	0	0	0
public static Map<ROIDescriptor, PluginROIDescriptor> getROIDescriptors() { final Map<ROIDescriptor, PluginROIDescriptor> result = new HashMap<ROIDescriptor, PluginROIDescriptor>(); final List<PluginDescriptor> pluginDescriptors = PluginLoader.getPlugins(PluginROIDescriptor.class);  for (PluginDescriptor pluginDescriptor : pluginDescriptors) { try { final PluginROIDescriptor plugin = (PluginROIDescriptor) PluginLauncher.create(pluginDescriptor); final List<ROIDescriptor> descriptors = plugin.getDescriptors();  if (descriptors != null) { for (ROIDescriptor roiDescriptor : descriptors) result.put(roiDescriptor, plugin); } } catch (Exception e) { // show a message in the output console IcyExceptionHandler.showErrorMessage(e, false, true); // and send an error report (silent as we don't want a dialog appearing here) IcyExceptionHandler.report(pluginDescriptor, IcyExceptionHandler.getErrorMessage(e, true)); } }  return result; } 	0	0	1	0	0	0
"@Test public void givenValidParametersCallToStartAndStopContainerShouldSucceed() throws DockerCertificateException { StartStrategy resourceStartStrategy = StartStrategy.EAGER; Object testInstance = new Object(); MethodDescriptor methodDescriptor = mock(MethodDescriptor.class); TestDescriptor testDescriptor = mock(TestDescriptor.class); TestConfigurer testConfigurer = mock(TestConfigurer.class); MockProvider mockProvider = mock(MockProvider.class); Map<String, Object> properties = mock(Map.class); Map<String, String> dependencies = mock(Map.class);  testContext = new DefaultTestContextBuilder() .resourceStartStrategy(resourceStartStrategy) .testInstance(testInstance) .testDescriptor(testDescriptor) .testMethodDescriptor(methodDescriptor) .testConfigurer(testConfigurer) .mockProvider(mockProvider) .properties(properties) .dependencies(dependencies) .build();  given(virtualResource.value()).willReturn(""postgres""); given(virtualResource.version()).willReturn(""9.4""); given(testContext.getTestName()).willReturn(""TestClass""); given(testContext.getMethodName()).willReturn(""testMethod"");  DefaultDockerClient.Builder builder = DefaultDockerClient.builder().uri(DEFAULT_DAEMON_URI); VirtualResourceInstance result = sut.start(testContext, virtualResource, builder);  assertThat(result).isNotNull(); } "	0	0	0	0	1	0
"private static String convToURL(Configure conf, File f, String storeId, boolean isKorean) { if (isKorean) { return conf.getWebBaseUrl_Kr() + ""/"" + f.getParentFile().getParentFile().getName() + ""/drop/"" + f.getName(); } else { return conf.getWebBaseUrl() + ""/"" + storeId + ""/"" + f.getParentFile().getParentFile().getName() + ""/drop/"" + f.getName(); } } "	0	0	0	0	1	0
"@Override public void loadIPTables(List<Container> containerList) { // ""If"" for deciding if this method should be used is moved here so the Fafram method is clean(Only for you ecervena <3) if (SystemProperty.getIptablesConfFilePath().isEmpty()) { // There was no iptables configuration file set so the user doesn't want to change environment. return; }  log.info(""Loading iptables configuration files.""); SSHClient sshClient; Executor executor; String remoteFilePath = """";  for (Container c : containerList) { if (c instanceof ChildContainer) { //If the child container is child then skip. The file will be copied and executed for all ssh containers //and root. It doesn't make sense to do also for child containers. continue; }  sshClient = new NodeSSHClient().defaultSSHPort().host(c.getNode().getHost()) .username(c.getNode().getUsername()).password(c.getNode().getPassword()); executor = new Executor(sshClient, c.getNode().getHost()); log.debug(""Loading iptables on node {}."", executor); try { log.trace(""Connecting own executor to load IPtables""); executor.connect();  final String directory = ("""".equals(SystemProperty.getWorkingDirectory())) ? executor.executeCommandSilently(""pwd"") : SystemProperty.getWorkingDirectory();  // Path to copied iptables file on remote nodes remoteFilePath = directory + File.separator + StringUtils.substringAfterLast(SystemProperty.getIptablesConfFilePath(), File.separator);  // Copy iptables configuration file from local to all remote nodes ((NodeSSHClient) sshClient).copyFileToRemote(SystemProperty.getIptablesConfFilePath(), remoteFilePath);  final String response = executor.executeCommandSilently(""stat "" + remoteFilePath);  if (response == null || response.isEmpty()) { throw new OfflineEnvironmentException(""Configuration file for iptables"" + "" doesn't exists on node: "" + c.getNode().getHost() + ""."", new FileNotFoundException(""File "" + SystemProperty.getIptablesConfFilePath() + "" doesn't exists."")); } log.debug(""Saving default iptables configuration on node {}."", executor); executor.executeCommand(""sudo iptables-save > "" + SAVED_IPTABLES);  executor.executeCommand(""sudo iptables-restore "" + SystemProperty.getIptablesConfFilePath()); log.debug(""Iptables successfully configured on node {}."", executor); } catch (Exception e) { throw new OfflineEnvironmentException(e); } }  log.info(""IPTables configuration files successfully loaded on all nodes! Environment configured according to {} file."" , remoteFilePath); } "	0	0	0	0	1	0
private static void copyAttributesFromTo(HasAttributes origObj, HasAttributes newObj) { for(String key : origObj.getAttributeKeys()) newObj.addAttribute(key, origObj.getAttribute(key)); } 	0	0	1	1	0	0
public static synchronized void after(String path, RouteHandler routeHandler){ RouteMatcherBuilder.buildHandler(path, routeHandler, HttpMethod.AFTER); } 	0	0	0	0	1	0
@Override public void handleClientSide(PacketGroupPermissions message, EntityPlayer player) { this.group.setPermissions(this.permissions); } 	0	0	0	0	1	0
"@SuppressWarnings(""unused"") public void insert(Notification alarm) { Log.i(""Database:"", ""Alarm "" + alarm.getName() + "" inserted""); } "	0	0	0	0	1	0
public void test_should_find_the_TestGenericBroadcastReceiver(){ List<BroadcastReceiver> list = ManifestParser.findBroadcastReceiver(getContext());  Assertions.assertThat(list).isNotEmpty(); } 	0	0	0	0	1	0
"@Option @LongSwitch(""httpPort"") @ShortSwitch(""p"") @SingleArgument public void setHttpPort(String port) { this.httpPort = StringUtils.isEmpty(port) ? null : Integer.parseInt(port); } "	1	0	0	0	1	0
"@Override protected ArrayList<String> doInBackground(Void... params) { String baseEntityId = childDetails.entityId(); String motherBaseEntityId = Utils.getValue(childDetails.getColumnmaps(), ""relational_id"", false); if (!TextUtils.isEmpty(motherBaseEntityId) && !TextUtils.isEmpty(baseEntityId)) { List<CommonPersonObject> children = getOpenSRPContext().commonrepository(PathConstants.CHILD_TABLE_NAME) .findByRelational_IDs(motherBaseEntityId);  if (children != null) { ArrayList<String> baseEntityIds = new ArrayList<>(); for (CommonPersonObject curChild : children) { if (!baseEntityId.equals(curChild.getCaseId())) { baseEntityIds.add(curChild.getCaseId()); } }  return baseEntityIds; } } return null; } "	0	0	0	0	1	0
"public void testFilterByLastname() { User user = identityService.createUserQuery().userLastName(""The Crouch"").singleResult(); assertNotNull(user);  user = identityService.createUserQuery().userFirstNameLike(""non-existing"").singleResult(); assertNull(user); } "	0	0	1	0	1	0
"public static void main(String[] args) { System.out.println(""-->""); KnowledgeBaseServiceClient uiaService = new KnowledgeBaseServiceClient(); //  for (int i = 0;  i < 10000; i++) { try { uiaService.init(""localhost"", 8585); System.out.println(""It has been properly initialized!""); System.out.println(""Related--------------------------------------""); List<String> sources = Arrays.asList(""cat"", ""houses"", ""dogs""); System.out.println(""This are the related "" + uiaService.getRelated(sources,""hypernymy"")); System.out.println(""Stem--------------------------------------""); System.out.println(""These are  the stemmed "" + uiaService.stem(sources)); uiaService.close(); } catch (Exception e) { e.printStackTrace();  }   System.out.println(""<--""); // } } "	0	0	0	0	1	0
"private void notifySession(final long sessionStart) { long currentTime = System.currentTimeMillis(); final long intervalEnd = sessionStart + MILLI_TEN_MINUTES; LOGD(TAG, ""Considering notifying for time interval.""); LOGD(TAG, ""    Interval start: "" + sessionStart + ""="" + (new Date(sessionStart)).toString()); LOGD(TAG, ""    Interval end: "" + intervalEnd + ""="" + (new Date(intervalEnd)).toString()); LOGD(TAG, ""    Current time is: "" + currentTime + ""="" + (new Date(currentTime)).toString());  // Find sessions details LOGD(TAG, ""Looking for sessions in interval "" + sessionStart + "" - "" + intervalEnd);  List<ScheduleSlot> scheduleSlots = AgendaRepository.getInstance().getScheduleSlots();  ScheduleSlot slotToNotify = null; for (ScheduleSlot scheduleSlot : scheduleSlots) { if (scheduleSlot.startDate == sessionStart) { Log.d(TAG, ""schedule to start: "" + scheduleSlot.toString()); if (SessionSelector.getInstance().getSessionsSelected().contains(String.valueOf(scheduleSlot.sessionId))) { Log.d(TAG, ""starred schedule slot:"" + scheduleSlot.sessionId); slotToNotify = scheduleSlot; } } }  Session sessionToNotify = AgendaRepository.getInstance().getSession(slotToNotify.sessionId); final String sessionDate = DateUtils.formatDateRange(this, new Formatter(getResources().getConfiguration().locale), slotToNotify.startDate, slotToNotify.endDate, DateUtils.FORMAT_SHOW_WEEKDAY | DateUtils.FORMAT_ABBREV_WEEKDAY | DateUtils.FORMAT_SHOW_TIME, null).toString();  // Generates the pending intent which gets fired when the user taps on the notification. Intent baseIntent = new Intent(this, MainActivity.class); baseIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);  Intent resultIntent = new Intent(this, MainActivity.class); PendingIntent resultPendingIntent = PendingIntent.getActivity( this, 0, resultIntent, PendingIntent.FLAG_UPDATE_CURRENT );  NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this) .setContentTitle(sessionToNotify.title) .setContentText(sessionDate) .setColor(getResources().getColor(R.color.colorPrimary)) .setDefaults(Notification.DEFAULT_SOUND | Notification.DEFAULT_VIBRATE) .setLights( SessionAlarmService.NOTIFICATION_ARGB_COLOR, SessionAlarmService.NOTIFICATION_LED_ON_MS, SessionAlarmService.NOTIFICATION_LED_OFF_MS) .setSmallIcon(R.drawable.ic_event_note_black_24dp) .setContentIntent(resultPendingIntent) .setPriority(Notification.PRIORITY_MAX) .setAutoCancel(true);  NotificationManager notificationManager = (NotificationManager) getSystemService( Context.NOTIFICATION_SERVICE); LOGD(TAG, ""Now showing notification.""); notificationManager.notify(NOTIFICATION_ID, notificationBuilder.build()); } "	0	0	1	0	0	0
private void addEntity(PubtatorEntity entity) { if (entities == null) entities = new ArrayList<>(); entities.add(entity); } 	0	0	1	0	1	0
"@Test public void testUpdateWhitelistingFails() throws Exception { RuleDTO ruleDTO = new RuleDTO(); ruleDTO.setAccountId(""4567""); when(ruleEntityService.update(any(RuleDTO.class), anyLong())).thenThrow(new NotFoundException(""No such ID""));  ObjectMapper objectMapper = new ObjectMapper(); String ruleAsJson = objectMapper.writeValueAsString(ruleDTO);  ResultActions resultActions = mockMvc.perform(put(""/whitelisting-rules/2"").contentType(APPLICATION_JSON).content(ruleAsJson)); resultActions.andExpect(content().string(""No such ID""));  verify(ruleEntityService).update(any(RuleDTO.class), anyLong()); verify(teamOperationsMock).getTeamsByUser(anyString()); verify(ruleControllerPropertiesMock).getAllowedTeams();   } "	0	0	0	0	1	0
"@Test public void testInvalidUser() throws Exception { when(ruleControllerPropertiesMock.getAllowedTeams()).thenReturn(newArrayList(""WrongTeam"", ""OtherTeam"")); when(ruleEntityService.findAll()).thenReturn(newArrayList(ruleEntity));  ResultActions resultActions = mockMvc.perform(get(""/whitelisting-rules/"")).andExpect(status().is4xxClientError()); resultActions.andExpect(content().string(""You don't have the permission to use this API""));  verify(teamOperationsMock).getTeamsByUser(anyString()); verify(ruleControllerPropertiesMock).getAllowedTeams();  } "	0	0	0	0	1	0
private PollingState<T> withErrorBody(CloudError error) { this.error = error; return this; } 	0	0	1	1	0	0
"public void initRegularSync(EthereumListener.SyncState syncDoneType) { logger.info(""Initializing SyncManager regular sync.""); this.syncDoneType = syncDoneType;  syncQueue = new SyncQueueImpl(blockchain); super.init(syncQueue, pool);  Runnable queueProducer = new Runnable(){  @Override public void run() { produceQueue(); } };  syncQueueThread = new Thread (queueProducer, ""SyncQueueThread""); syncQueueThread.start(); } "	0	0	1	1	0	0
"@Override public void sendNewSubscriptionMail(SystemSubscription systemSubscription) { String lang = systemSubscription.getLanguage().getLocale().getLanguage(); final Context ctx = new Context(systemSubscription.getLanguage().getLocale()); ctx.setVariable(""eMail"", systemSubscription.getEmail()); ctx.setVariable(""language"", systemSubscription.getLanguage().getLocale()); ctx.setVariable(""subscriptionKey"", systemSubscription.getSubscriptionKey()); ctx.setVariable(""subscriptionDate"", new Date()); ctx.setVariable(""systems"", systemSubscription.getSystems()); ctx.setVariable(""link"", baseUrl + ""/#/systems-subscribe/"" + systemSubscription.getSubscriptionKey()); final String htmlContent = this.templateEngine.process(""system-subscription-new-"" + lang, ctx); final String subject = messageSource.getMessage(SUBJECT_NEW, null, systemSubscription.getLanguage().getLocale()); defaultMailSenderService.sendSilently(sender, subject, htmlContent, false, true, systemSubscription.getEmail()); } "	0	0	0	0	1	0
"@Override public void buttonClicked(ButtonType buttonType) { if (buttonType.toString() == ""YES"") { uploadDataUI.cancelUpload(); clearTabularView();  if (chatHandler != null) { chatHandler.logout(username, true); handleChatMain(); }  SessionHandler.logout(); getApplication().close(); UserActivityLog ual = new UserActivityLog(username, UserActivityLog.ACTIVITY_TYPE.LOG_OUT.toString(), null); FacadeFactory.getFacade().store(ual); } } "	0	0	0	0	1	0
"@Test public void readFile1() throws Exception { ReadXtf xtfreader = new ReadXtf(parceldump, dprdump); ClassLoader classLoader = getClass().getClassLoader(); xtfreader.readFile(classLoader.getResource(""SO0200002407_4003_20150807.xtf"").getPath()); int addedarea = parceldump.getAddedArea(90154,748); int numberofnewparcels = parceldump.getNumberOfNewParcels(); int numberofoldparcels = parceldump.getNumberOfOldParcels(); List<Integer> newparcels = parceldump.getNewParcelNumbers(); List<Integer> oldparcels = parceldump.getOldParcelNumbers(); int restarea = parceldump.getRestAreaOfParcel(751); int newarea = parceldump.getNewArea(751); int rundungsdifferenz = parceldump.getRoundingDifference(753); assertTrue(addedarea ==24); assertTrue(numberofnewparcels == 14); assertTrue(numberofoldparcels == 14); List<Integer> newandoldparcelsastheyshouldbe = Arrays.asList(748,749,750,751,753,755,756,757,758,1303,1799,2097,2098,90154); assertTrue(newparcels.containsAll(newandoldparcelsastheyshouldbe) && newparcels.size()==newandoldparcelsastheyshouldbe.size()); assertTrue(oldparcels.containsAll(newandoldparcelsastheyshouldbe) && oldparcels.size()==newandoldparcelsastheyshouldbe.size()); assertTrue(restarea == 1157); assertTrue(newarea == 1176); assertTrue(rundungsdifferenz == -1); } "	1	0	1	1	1	0
"public void toDj(View view) { mAppManager.getUser().setRole(Role.DJ);  EditText mName = (EditText) findViewById(R.id.event_field); EditText mPassword = (EditText) findViewById(R.id.password_field); CheckBox mPasswordProtected = (CheckBox) findViewById(R.id.password_protected_checkbox); CheckBox mAllowFeedback = (CheckBox) findViewById(R.id.allow_feedback_checkbox); CheckBox mRestrictNearby = (CheckBox) findViewById(R.id.restrict_nearby_checkbox);  String name = mName.getText().toString(); String password = mPassword.getText().toString(); boolean passwordProtected = mPasswordProtected.isChecked(); boolean allowFeedback = mAllowFeedback.isChecked();  if (password.equals("""") && passwordProtected) { mPassword.setError(""Please enter a password""); } else if (name.equals("""")) { mName.setError(""Please enter an event name""); } else { mPassword.setError(null); mName.setError(null);  mName.setText(""""); mPassword.setText(""""); mPasswordProtected.setChecked(false); mPassword.setText(""""); mAllowFeedback.setChecked(false);  mAppManager.createEvent(new Event(name, mAppManager.getUser().getId(), password, allowFeedback)); Intent intent = new Intent(this, DjActivity.class); startActivity(intent); } } "	0	0	0	0	1	0
public boolean isStartCorrectTimeline (LocalDateTime start) { return currentApp.getCurrentTimeline().getStart().compareTo(start) >= 0; } 	0	0	0	0	1	0
public boolean isEndCorrectTimeline (LocalDateTime end) { return currentApp.getCurrentTimeline().getEnd().compareTo(end) >= 0; } 	0	0	0	0	1	0
private long[] createTaskWithTime(long dtstart, long due) { // Create a new task ContentValues values = new ContentValues(); int id = fetchTaskListIds()[0]; values.put(Tasks.LIST_ID, id);  // Create time stamps  values.put(Tasks.DTSTART, dtstart); values.put(Tasks.DUE, due); values.put(Tasks.TZ, TimeZone.getDefault().getID());  resolve.insert(Tasks.CONTENT_URI, values); // insert task return new long[] { dtstart, due }; } 	0	0	0	0	1	0
"@Override public void exitRegister(RegisterContext ctx) { ST st = getTemplateFor(""register""); st.add(""source"", ((StatementContext)ctx.getParent()).source); st.add(""path"", ctx.MODULE().getText()); putCode(ctx, st); } "	0	0	0	0	1	0
private void unStarRepo(@Nullable String id, @Nullable String login) { if (id != null && login != null) { String msg = getString(R.string.un_staring, id); RestProvider.getRepoService() .unstarRepo(login, id) .doOnSubscribe(() -> showNotification(msg)) .subscribeOn(Schedulers.io()) .subscribe(response -> { }, throwable -> hideNotification(msg), () -> hideNotification(msg)); } } 	0	0	0	0	1	0
private String queryParamsString(Multimap<String, String> queryParams) { final ImmutableList.Builder<String> result = ImmutableList.builder(); for (Map.Entry<String, Collection<String>> param : new TreeMap<>(queryParams.asMap()).entrySet()) { for (String value : param.getValue()) { result.add(ESCAPER.escape(param.getKey()) + '=' + ESCAPER.escape(value)); } }  return AMPERSAND_JOINER.join(result.build()); } 	0	0	0	0	1	0
"@Test public void startServer() throws Exception { start(new String[]{""--spring.profiles.active=test""}, true); } "	1	0	1	0	0	0
"@OnClick(R.id.play) public void play() { //retrieve song info ContentResolver musicResolver = getContentResolver(); Uri musicUri = android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;  Cursor musicCursor = musicResolver.query(musicUri, null, null, null, null); ArrayList<Song> songList = new ArrayList(); if (musicCursor != null && musicCursor.moveToFirst()) { //get columns int titleColumn = musicCursor.getColumnIndex( MediaStore.Audio.Media.TITLE); int idColumn = musicCursor.getColumnIndex( MediaStore.Audio.Media._ID); int artistColumn = musicCursor.getColumnIndex( MediaStore.Audio.Media.ARTIST); int albumColumn = musicCursor.getColumnIndex( MediaStore.Audio.Media.ALBUM);  //add songs to list do { long id = musicCursor.getLong(idColumn); String title = musicCursor.getString(titleColumn); String artist = musicCursor.getString(artistColumn); String album = musicCursor.getString(albumColumn); String genre = """"; songList.add(SongManager.getDefault().getOrCreate(id, title, artist, album, genre)); } while (musicCursor.moveToNext()); }  Log.d(TAG, ""Sending events""); EventBus.getDefault().postSticky(songList);  Intent intent = new Intent(this, ListActivity.class); startActivity(intent);   } "	0	0	0	1	1	0
public static void main(String[] args) { launchClientGUI(null); } 	1	0	0	0	1	0
public long getChannelPosition() throws IOException { return channelPosition; } 	0	0	1	0	0	0
"private void getRecord(ByteBuffer buffer, RecordHeader header) throws IOException { Checksum computedChecksum = new CRC32(); computedChecksum.update(currentBlock.array(), currentBlock.position(), header.getSize());  if ((int) computedChecksum.getValue() != header.getChecksum()) { throw new RuntimeException(""invalid checksum of record""); }  buffer.put(currentBlock.array(), currentBlock.position(), header.getSize()); currentBlock.position(currentBlock.position() + header.getSize()); } "	0	0	1	0	0	0
"protected User processRow(ResultSet res) throws SQLException { User e = new User(); e.setUserId(res.getString(""user_id"")); e.setPassword(res.getString(""password"")); e.setRole(res.getInt(""role"")); return e; } "	0	0	1	0	1	0
@Override protected void onPreExecute() { super.onPreExecute(); //show progress dialog if no list yet if (adapter.getCount() == 0) this.progressBar.show(); } 	0	0	1	0	1	0
"@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { logger.debug(""...doGet ProjectEditServlet""); try { Project p = new Project(); ProjectDao projectDao = new ProjectDao(); //Profile profile = (Profile)request.getSession().getAttribute(""USER_PROFILE""); String id = CharacterUtil.removeNull(request.getParameter(""id"")); p.setProjId(id); List<Project> list = projectDao.getProjectNormal(p, 0, 0); PlanDao planDao = new PlanDao(); request.setAttribute(""planList"", planDao.getPlan(new Plan(), 0, 0)); ProjectTypeDao dao = new ProjectTypeDao(); int countRecordAll = dao.getCountProjectType(""""); request.setAttribute(""projectTypeList"", dao.getProjectTypeAll(countRecordAll, 0,"""")); BudgetPlanDao bpDao = new BudgetPlanDao(); request.setAttribute(""budgetPlanList"", bpDao.getBudgetPlan(new BudgetPlan(), 0, 0)); request.setAttribute(""planList"", planDao.getPlan(new Plan(), 0, 0));  if(!list.isEmpty()){ request.setAttribute(""proj_id"", list.get(0).getProjId()); request.setAttribute(""proj_name"",list.get(0).getProjName()); request.setAttribute(""proj_details"",list.get(0).getProjDetail()); request.setAttribute(""proj_status"",list.get(0).getProjStatus()); request.setAttribute(""plan_id"",list.get(0).getPlanId()); request.setAttribute(""budp_id"",list.get(0).getBudpId()); request.setAttribute(""account"",list.get(0).getAccountCode()); request.setAttribute(""details"",list.get(0).getProjDetails()); }  ProjectWorkingDao projectWDao = new  ProjectWorkingDao(); ProjectWorking pw = new ProjectWorking(); pw.setProjId(id); List<ProjectWorking> projectWorkingList = projectWDao.getProjectWorking(pw, 0, 0); request.setAttribute(""projectWorkingList"",projectWorkingList);  RequestDispatcher dispatcher = request.getRequestDispatcher(""/jsp/project/project-form.jsp""); dispatcher.forward(request, response); } catch (Exception e) { logger.error(""ProjectEditServlet Error : ""+e.getMessage()); }  } "	0	0	0	0	0	1
@Test public void presort_duplicates(){ final int max = 10000; List<Integer> list = new ArrayList<Integer>(max); for(Integer i=0;i<max;i++){ list.add(i); list.add(i); } Collections.shuffle(list);  Iterator<Integer> sorted = Pump.sort(list.iterator(),true, max/20, Fun.COMPARATOR, Serializer.INTEGER,null);  int counter=0; while(sorted.hasNext()){ Object v = sorted.next(); assertEquals(counter++, v); } assertEquals(max,counter); } 	0	0	0	0	1	0
"@Override public void render(Context context, Notebook value, SafeHtmlBuilder sb) {  if (value == null) { return; }  sb.appendHtmlConstant(""<div>""); sb.appendHtmlConstant(""<div style=\""margin: 5px ;margin: auto ;\"">"");  if(value.getUserId() != Homepage.getCurrentUser().getId() && value.getId() != 0 && value.getId() != -1){  sb.appendHtmlConstant(""<img src='Images/person_share.png'/ width=\""10\"" height=\""10\"">""); }else if(value.getTitle() == """" && value.getId() == 0){ sb.appendHtmlConstant(""<img src='Images/button_add.png'/ width=\""30\"" height=\""30\"">""); }  sb.appendEscaped("" ""+ value.getTitle());  sb.appendHtmlConstant(""</div>"");  //		sb.appendHtmlConstant(""<div style=\""border-bottom: 4px solid #dddddd;\"">"");    // sb.appendHtmlConstant(""<email style='font-size:80%; padding-left: // 10px;'>""); // sb.appendEscaped(value.getEmail()); // sb.appendHtmlConstant(""</email>""); sb.appendHtmlConstant(""</div>"");  } "	0	0	0	0	1	0
"@Override public void onBindViewHolder(final RecyclerView.ViewHolder holder, int position) {  if (holder instanceof ProgressViewHolder) return;  if (holder instanceof ErrorViewHolder) { ((ErrorViewHolder)holder).button.setOnClickListener(v -> { isShowError = false; notifyItemChanged(getItemCount() - 1); onLoadMoreListener.onLoadMore(); }); return; }  ItemViewHolder vh = (ItemViewHolder) holder; vh.item = data.items.get(position);  int sourceId = vh.item.source_id; if (sourceId > 0) { vh.user = findUsersByItem(sourceId); } else { vh.group = findGroupByItem(sourceId); } assert vh.user != null; assert vh.group != null;  Glide.with(context.getApplicationContext()) .load(sourceId > 0 ? vh.user.photo_100 : vh.group.photo_100) .asBitmap() .centerCrop() .into(new BitmapImageViewTarget(vh.headImage) { @Override protected void setResource(Bitmap resource) { RoundedBitmapDrawable drawable = RoundedBitmapDrawableFactory .create(context.getResources(), resource); drawable.setCircular(true); vh.headImage.setImageDrawable(drawable); } });  vh.owner.setText(sourceId > 0 ? vh.user.first_name + "" "" + vh.user.last_name : vh.group.name);  vh.date.setText(formatDate(vh.item.date * 1000, context));  vh.ownerLayout.setOnClickListener(view -> { Toast.makeText(context, ""clickOnHeader"", Toast.LENGTH_SHORT).show(); // TODO: 28.06.2016: Implement showing owner (profile or group) });  vh.popupButton.setOnClickListener(view -> showPopupMenu(vh.item, view));  vh.text.setExpanded(expandedPositions.contains(position)); vh.text.setText(vh.item.text, position); vh.text.setOnTextClickListener(v -> onItemClick(v, vh)); vh.text.setOnExpandClickListener(pos -> expandedPositions.add(pos));  List<VKAttachments.VKApiAttachment> photosAndVideos = new ArrayList<>(); for (VKAttachments.VKApiAttachment attachment : vh.item.attachments) { if (attachment.getType().equals(""photo"") || attachment.getType().equals(""video"")) { photosAndVideos.add(attachment); } } vh.images.setImages(photosAndVideos);  vh.v.setOnClickListener(v -> onItemClick(v, vh)); } "	0	0	1	0	0	0
"@Before public void before() throws IOException { this.tokenizer = new MockTokenizer(); this.tokenizer.setReader(new StringReader(""和平 重量 and 中国 中華人民共和國 凪のあすから"")); } "	0	0	0	0	1	0
"public Result authorizeUser(@Param( ""fingerprint"" ) String fingerprint, @Param( ""message"" ) String message, Context context, FlashScope flashScope ) { User user = identityManagerService.authenticateUser(fingerprint, message);  if (user != null) { context.setAttribute( SecurityFilter.USER_TOKEN, user.getUserToken().getFullToken() ); return Results.redirect(""/""); } else { flashScope.error(""Failed to authorize.""); return Results.redirect(""/login""); } } "	0	0	0	0	1	0
"private String getAccessToken(Environment env, String clientId) throws DataSourceException { PersistenceNetwork pn = env.getEnv(GlobalEnv.class).GetPersistenceNetwork(); AccessToken aT = null; String aTS = pn.get(new String[]{""oauth"", getFormattedClientId(clientId), ""accessToken""}); if (aTS != null) { String[] aTSA = unformatValue(aTS).split("","", 2); aT = new AccessToken(aTSA[1], new Date(Long.parseLong(aTSA[0]))); } if (aT == null) { // No key exists in the first place return null; } if (aT.getExpiry().before(new Date())) { // The key is not expired, so return it now return aT.getAccessToken(); } else { // The key is expired. return null; } } "	0	0	1	0	1	0
"private static String getFormattedClientId(String clientId) { return clientId.replaceAll(""[^a-zA-Z_\\.]"", """"); } "	0	0	0	1	0	0
"private void loadThread(int id, int page, String postJump) { if(parent == null){ return; } if(getActivity() != null){ getLoaderManager().destroyLoader(Constants.THREAD_INFO_LOADER_ID); getLoaderManager().destroyLoader(Constants.POST_LOADER_ID); } setPage(page); setThreadId(id); //if the fragment isn't attached yet, just set the values and let the lifecycle handle it mUserId = 0; mPostByUsername = null; bodyHtml = """"; mLastPage = 1; if(postJump != null){ mPostJump = postJump; }else{ mPostJump = """"; } updatePageBar(); updateProbationBar(); if(getActivity() != null){ if(mThreadView != null){ mThreadView.loadUrl(""javascript:loadpagehtml()""); } refreshInfo(); syncThread(); } } "	0	0	1	0	1	0
@EventHandler(priority = EventPriority.NORMAL) public void onJoin(PlayerJoinEvent event) { Player player = event.getPlayer();  // Check dPlayers DPlayer dPlayer = DPlayer.getByPlayer(player); if (dPlayer != null) { DGroup dGroup = DGroup.getByPlayer(dPlayer.getPlayer()); if (dGroup != null) { dGroup.getPlayers().remove(dPlayer.getPlayer()); dGroup.getPlayers().add(player); } dPlayer.setPlayer(player);  // Check offlineTime dPlayer.setOfflineTime(0); }  // Tutorial Mode if ( !plugin.getMainConfig().isTutorialActivated()) { return; }  if (DPlayer.getByPlayer(player) != null) { return; }  if (plugin.getPermissionProvider() == null) { return; }  if ((plugin.getMainConfig().getTutorialDungeon() == null || plugin.getMainConfig().getTutorialStartGroup() == null || plugin.getMainConfig().getTutorialEndGroup() == null)) { return; }  for (String group : plugin.getPermissionProvider().getPlayerGroups(player)) { if ( !plugin.getMainConfig().getTutorialStartGroup().equalsIgnoreCase(group)) { continue; }  DGroup dGroup = new DGroup(player, plugin.getMainConfig().getTutorialDungeon(), false);  if (dGroup.getGameWorld() == null) { dGroup.setGameWorld(GameWorld.load(DGroup.getByPlayer(player).getMapName())); dGroup.getGameWorld().setTutorial(true); }  if (dGroup.getGameWorld() == null) { MessageUtil.sendMessage(player, dMessages.getMessage(Messages.ERROR_TUTORIAL_NOT_EXIST)); continue; }  if (dGroup.getGameWorld().getLocLobby() != null) { new DPlayer(player, dGroup.getGameWorld().getWorld(), dGroup.getGameWorld().getLocLobby(), false); } } } 	0	0	0	0	1	0
private boolean initAvg() { if (avg != null) { return true; }  int total = backend.getWithDefault(Gaussian.TOTAL, 0); if (total != 0) { double[] sum = (double[]) backend.get(Gaussian.SUM); avg = new double[sum.length]; for (int i = 0; i < sum.length; i++) { avg[i] = sum[i] / total; } return true; } else { return false; } } 	0	0	0	0	1	0
public DateMidnight getStartDate() {  if (this.startDate == null) { return null; }  return new DateTime(this.startDate).toDateMidnight(); } 	0	0	0	1	0	0
"protected void parseUri(final String uri) throws InvalidUriException { try { final int queryIndex = uri.lastIndexOf(""?""); final boolean uriHasQuery = queryIndex != -1; final String query = uriHasQuery ? uri.substring(queryIndex + 1) : null; final URI safeUri = new URI(uriHasQuery ? uri.substring(0, queryIndex) : uri);  httpClient.protocol = safeUri.getScheme(); httpClient.host = safeUri.getHost(); httpClient.port = safeUri.getPort() != -1 ? safeUri.getPort() : null; httpClient.path = safeUri.getPath(); parseQuery(query); if (!safeUri.getScheme().toLowerCase().equals(""http"") && !safeUri.getScheme().toLowerCase().equals(""https"")) { throw new InvalidUriException(uri); } } catch (final Throwable t) { throw new InvalidUriException(t); } } "	0	0	1	0	1	0
public static int computeManagementPortFromTSAPort(int tsaPort) { int tempPort = tsaPort + DEFAULT_MANAGEMENTPORT_OFFSET_FROM_TSAPORT; return ((tempPort <= MAX_PORTNUMBER) ? tempPort : (tempPort % MAX_PORTNUMBER) + MIN_PORTNUMBER); } 	0	0	0	0	1	0
@NotNull @Override public TextAttributesKey[] getTokenHighlights(IElementType tokenType) { if (ValaLexer.KEYWORDS.contains(tokenType)) return pack(KEYWORD); if (tokenType == ValaTypes.STRING || tokenType == ValaTypes.VERBATIM_STRING_LITERAL) return pack(STRING); if (tokenType == ValaTypes.INTEGER_LITERAL || tokenType == ValaTypes.REAL_LITERAL) return pack(NUMBER); if (tokenType == ValaTypes.LINE_COMMENT) return pack(LINE_COMMENT); if (tokenType == ValaTypes.BLOCK_COMMENT) return pack(BLOCK_COMMENT); return EMPTY; } 	0	0	0	0	1	0
"public CompletionStage<Result> ultimoStatusDosAneis() { HashMap<String, StatusDevice> status = StatusControladorFisico.ultimoStatusDosControladores(); HashMap<String, Boolean> onlines = StatusConexaoControlador.ultimoStatusDosControladores(); List<AlarmesFalhasControlador> erros = AlarmesFalhasControlador.ultimosAlarmesFalhasControladores(null);  List<HashMap> statusPlanosPorAnel = TrocaDePlanoControlador.ultimoStatusPlanoPorAnel(); ObjectNode retorno = JsonNodeFactory.instance.objectNode(); retorno.set(""status"", Json.toJson(status)); retorno.set(""onlines"", Json.toJson(onlines)); retorno.set(""erros"", errosToJson(erros)); retorno.set(""statusPlanos"", Json.toJson(statusPlanosPorAnel));  return CompletableFuture.completedFuture(ok(Json.toJson(retorno))); } "	1	0	1	1	1	0
@Override public boolean hasChildren() { return tempChildren.size() > 0; } 	0	0	0	0	1	0
"public static NBTTagList migratePlayerData(EntityPlayer player) { Map<Byte, ItemStack[]> data = MAP.get(player.getCommandSenderName());  NBTTagList list = new NBTTagList();  for (Entry<Byte, ItemStack[]> entry : data.entrySet()) { NBTTagCompound subNbt = new NBTTagCompound(); subNbt.setByte(""color"", entry.getKey());  NBTTagList subList = new NBTTagList();  ItemStack[] inv = entry.getValue();  for (int i = 0; i < inv.length; i++) { ItemStack stack = inv[i];  if (stack != null) { NBTTagCompound subNbt2 = new NBTTagCompound(); subNbt2.setByte(""index"", (byte) i); stack.writeToNBT(subNbt2); subList.appendTag(subNbt2); } }  subNbt.setTag(""inv"", subList); list.appendTag(subNbt); } return list; } "	0	0	0	0	1	0
@Override public void putAll(Map<? extends N, ? extends V> m) { innerMap.putAll(m); } 	0	0	0	0	1	0
"@Test public void objectIdentityEqualsDoesShallowCompare1() { CompilationUnit x1 = JavaParser.parse(""class X{}""); CompilationUnit x2 = JavaParser.parse(""class X{}"");  Map<CompilationUnit, Integer> normalMap = new VisitorMap<>(new HashMap<>(), new ObjectIdentityHashCodeVisitor(), new ObjectIdentityEqualsVisitor()); normalMap.put(x1, 1); normalMap.put(x2, 2); assertEquals(2, normalMap.size()); } "	1	0	1	1	1	0
@Override public boolean isApplicableFor(Component component, ComponentRenderPass pass) { return component instanceof AreaVertex || component instanceof EdgeSplit && pass instanceof AreaVertexPass && color.equals(((AreaVertexPass) pass).getColor()) && pointsize == ((AreaVertexPass) pass).getPointSize(); } 	0	0	1	1	0	0
"private void init() { if (classpathThemesFolder == null) classpathThemesFolder = ""/"" + DEFAULT_THEMES_FOLDER; if (themesFolder == null) themesFolder = DEFAULT_THEMES_FOLDER; themesFolder = Path.ensureTrailingSeparator(themesFolder);  String[] layerNames = parseLayerNames(themeLayerNames); if (layerNames == null) { TemplateSet simple = new TemplateSet(classpathThemesFolder, themesFolder, fileExtension, cacheMins); if (!renderErrs) simple.signalFailureWithNull(); themeLayers.add(simple); } else { for (int i=0; i<layerNames.length; i++) { TemplateSet x = new TemplateSet(classpathThemesFolder, themesFolder + layerNames[i], fileExtension, cacheMins); x.setLayerName(layerNames[i]); // do not return pretty HTML-formatted error strings // when template can not be located -- with multiple // layers, a null response is required to search the // next layer in the stack for the missing template. x.signalFailureWithNull(); themeLayers.add(x); } } } "	0	0	0	0	1	0
"@Override public String toString() { return ""id: "" + getId() + "" target: "" + getTarget() + "" type_of_receiver: "" + getTypeOfReceiver() + "" template id: "" + getTemplateId() + "" locale: "" + getLocale().getLanguage(); } "	0	0	1	0	1	0
"private String getclaimValue(Iterator<String> i, boolean isHashed, Map<String, Object> totalClaims) throws NoSuchAlgorithmException { String claimValue = """"; while (i.hasNext()) { Object claimStr = totalClaims.get(i.next()); if (claimStr != null) { claimValue = (isHashed) ? getHashedClaimValue(totalClaims.get(i.next()).toString()) : totalClaims.get(i.next()).toString();  } } return claimValue; } "	0	0	0	0	0	1
"private SimpleFeatureCollection parseGml32(final String gmlData) throws IOException { Parser gmlV32Parser = new Parser(GML_32_PARSER); gmlV32Parser.setStrict(false); gmlV32Parser.setRootElementType(new QName(""http://www.opengis.net/wfs/2.0"", ""FeatureCollection"")); try { final Object featureCollection = gmlV32Parser.parse(new StringReader(gmlData)); if (featureCollection != null && featureCollection instanceof SimpleFeatureCollection) { return (SimpleFeatureCollection) featureCollection; } else { throw new RuntimeException(""unable to parse gml: \n\n"" + gmlData); }  } catch (SAXException e) { throw ExceptionUtils.getRuntimeException(e); } catch (ParserConfigurationException e) { throw ExceptionUtils.getRuntimeException(e); } } "	0	0	0	0	1	0
"public static void log(String str) { FMLLog.info(""[LibrarianLib ASM] %s"", str); } "	0	0	0	0	1	0
public static void main(String[] args) { GameEngine engine = new GameEngine(); engine.run(); } 	0	0	0	0	1	0
@Override public void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState) { super.onInflate(context, attrs, savedInstanceState);  TypedArray a = context.getTheme().obtainStyledAttributes( attrs, R.styleable.ToolboxFragment, 0, 0); try { //noinspection ResourceType mScrollable = a.getBoolean(R.styleable.WorkspaceFragment_scrollable, DEFAULT_SCROLLABLE); } finally { a.recycle(); }  // Store values in arguments, so fragment resume works (no inflation during resume). Bundle args = getArguments(); if (args == null) { setArguments(args = new Bundle()); } args.putBoolean(ARG_SCROLLABLE, mScrollable); } 	0	0	1	0	0	0
"@RequestMapping(value = Const.URLMAPPING_GET_LESSON, method = RequestMethod.GET) public @ResponseBody String getLesson(@PathVariable(""lesson_id"") Integer lessonId, @RequestParam(required = false) String action) { Response response = new Response(ResponseCode.BAD_REQUEST); try { GetLessonResponse data = lessonService.getLesson(lessonId, ""edit"".equals(action)); response.setCode(ResponseCode.SUCCESS); response.setData(data);  LOGGER.debug(""Get lesson successfully!"");  return response.toResponseJson(); } catch (Exception e) { LOGGER.error(e.getMessage()); }  LOGGER.error(""Unknown error occured!""); response.setCode(ResponseCode.INTERNAL_SERVER_ERROR); return response.toResponseJson(); } "	0	0	0	0	1	0
public static IEntityContainer getContainer(EntityLivingBase ent) { if(ent instanceof EntityPlayer) { UUID uuid = PlayerHelper.getUUID((EntityPlayer)ent); PlayerContainer pc; if(uuid != null) { pc = getCache(ent.worldObj.isRemote).getUnchecked(uuid); pc.setEntity((EntityPlayer) ent); return pc; } else return null; } else { return new EntityLivingBaseContainer(ent); } } 	0	0	0	0	1	0
private void drawPlayerCircle(Canvas canvas, Paint circlePaint) { circlePaint.setColor(Color.BLACK); canvas.drawCircle(mScreenCenter.x, mScreenCenter.y, mCircleManager.getmPlayerCircle().getmOnScreenRadius(), circlePaint); } 	0	0	0	0	1	0
"@Override public void surfaceDestroyed(SurfaceHolder surfaceHolder) { Log.d(LOG_TAG, ""Surfaceview destroyed""); while (true) { try { mGameLogic.setmIsGamePlaying(false); mGameThread.join(); break; } catch (InterruptedException e) { } } } "	0	0	0	0	1	0
"private void testManualCommitGuts(AckMode ackMode, String topic) throws Exception { logger.info(""Start "" + ackMode); Map<String, Object> props = KafkaTestUtils.consumerProps(""test4"", ""false"", embeddedKafka); DefaultKafkaConsumerFactory<Integer, String> cf = new DefaultKafkaConsumerFactory<Integer, String>(props); ConcurrentMessageListenerContainer<Integer, String> container = new ConcurrentMessageListenerContainer<>(cf, topic); final CountDownLatch latch = new CountDownLatch(4); container.setMessageListener(new AcknowledgingMessageListener<Integer, String>() {  @Override public void onMessage(ConsumerRecord<Integer, String> message, Acknowledgment ack) { logger.info(""manual: "" + message); ack.acknowledge(); latch.countDown(); }  }); container.setConcurrency(2); container.setAckMode(ackMode); container.setBeanName(""test"" + ackMode); container.start(); ContainerTestUtils.waitForAssignment(container, embeddedKafka.getPartitionsPerTopic()); Map<String, Object> senderProps = KafkaTestUtils.producerProps(embeddedKafka); ProducerFactory<Integer, String> pf = new DefaultKafkaProducerFactory<Integer, String>(senderProps); KafkaTemplate<Integer, String> template = new KafkaTemplate<>(pf); template.setDefaultTopic(topic); template.convertAndSend(0, ""foo""); template.convertAndSend(2, ""bar""); template.convertAndSend(0, ""baz""); template.convertAndSend(2, ""qux""); template.flush(); assertTrue(latch.await(60, TimeUnit.SECONDS)); container.stop(); logger.info(""Stop "" + ackMode); } "	0	0	0	0	1	0
private void addGeofences(final CallbackContext callbackContext, JSONArray geofences) { TSCallback callback = new TSCallback() { public void success(Object result) { callbackContext.success((String) result); } public void error(Object result) { callbackContext.error((String) result); } }; getAdapter().addGeofences(geofences, callback); } 	1	0	1	0	1	0
@Override protected void before() throws Throwable { super.before(); previousMetrics = AtlasDbMetrics.getMetricRegistry(); } 	0	0	0	0	1	0
@ReceiveEvent public void ensureHeldItemIsMountedOnLoad(OnChangedComponent event, EntityRef entityRef, ClientComponent clientComponent) { if (localPlayer.getCharacterEntity().exists() && localPlayer.getCameraEntity().exists()) { CharacterHeldItemComponent characterHeldItemComponent = localPlayer.getCharacterEntity().getComponent(CharacterHeldItemComponent.class); if (characterHeldItemComponent != null) { // special case of sending in null so that the initial load works linkHeldItemLocationForLocalPlayer(localPlayer.getCharacterEntity(), characterHeldItemComponent.selectedItem, null); } } } 	0	0	0	0	1	0
@Override public void onClick(View view) { int position = getLayoutPosition(); if (position == RecyclerView.NO_POSITION) return;  LineDetail rowItem = mItems.get(position);  if (rowItem.getAdditionalData() == null) { Intent intent = new Intent(mContext, MapActivity.class); intent.putExtra(Config.EXTRA_VEHICLE, rowItem.getVehicle()); mContext.startActivity(intent); } } 	0	0	0	0	1	0
"@Override public void onReceive(Context context, Intent intent) { Log.d(getClass().getSimpleName(), ""onReceive"");  if (mFileToUpload == null || !intent.getStringExtra(UploadService.EXTRA_KEY).equals(mFileToUpload.getName())) { return; }  UploadResultUtils.handleResult(context, intent, false);  if (!isFinishing()) { finish(); } } "	0	0	0	0	1	0
"public int decompilePop(byte[] ram, int pc, int data) { int addr;  switch (data) { case MAGIC_POP_BYTE: addr = read8(ram, pc + 1); dump(pc, String.format(""pop8 $%02x"", addr)); return 2; case MAGIC_POP_BYTE_INDIRECT: addr = read8(ram, pc + 1); dump(pc, String.format(""pop8 [$%02x]"", addr)); return 2; case MAGIC_POP_FLOAT: addr = read8(ram, pc + 1); dump(pc, String.format(""popf $%02x"", addr)); return 2; case MAGIC_POP_FLOAT_INDIRECT: addr = read8(ram, pc + 1); dump(pc, String.format(""popf [$%02x]"", addr)); return 2; }  int r = data - 32; addr = pc + r; dump(pc, String.format(""pop8 $%02x ; relative %d"", addr, r)); return 1; } "	0	0	0	0	1	0
public ResponseBody body() { return this.body; } 	0	0	0	0	1	0
"public String getSendMailInfo(StudentSendMailData[] studentSendMailData) throws SQLException { JsonArray jsonArray = new JsonArray();  for(int i = 0; i < studentSendMailData.length; i++){ String sql = ""select name, duration from `course_info` where id = ""+""\""""+studentSendMailData[i].courseId+""\"""";; ResultSet result = slmDBUtility.selectSQL(sql);  String columnName, columnValue = null; JsonObject element = null; ResultSetMetaData rsmd = null;  try { rsmd = (ResultSetMetaData) result.getMetaData(); while (result.next()) { element = new JsonObject(); for (int j = 1; j <= rsmd.getColumnCount(); j++) { columnName = rsmd.getColumnName(j); columnValue = result.getString(columnName); element.addProperty(columnName, columnValue); } jsonArray.add(element); } } catch (SQLException e) { e.printStackTrace(); } }  return jsonArray.toString(); } "	0	0	1	1	1	0
"@Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(""User [failed_attempts=""); builder.append(failed_attempts); builder.append("", isAccountLocked=""); builder.append(isAccountLocked); builder.append("", signOnStatus=""); builder.append(signOnStatus); builder.append("", id=""); builder.append(id); builder.append("", f_name=""); builder.append(f_name); builder.append("", l_name=""); builder.append(l_name); builder.append("", address=""); builder.append(address); builder.append(']'); return builder.toString(); } "	0	0	0	0	1	0
"@Test public void testUpdate() { User updated = userRepository.findById(""USER-1""); updated.setAddress(""UPDATED ADDRESS""); updated.setAccountLocked(true); doUpdateTest(updated, ""USER-1""); } "	0	0	0	0	1	0
"@Test public void testRestartSuccess() throws SnapshotException { String snapshotId = ""snapshot-id""; expect(snapshotRepo.findByName(snapshotId)).andReturn(snapshot); expect(snapshot.getStatus()).andReturn(SnapshotStatus.FAILED_TO_TRANSFER_FROM_DURACLOUD); expect(snapshot.getStatus()).andReturn(SnapshotStatus.INITIALIZED);  expect(jobManager.executeSnapshot(snapshotId)) .andReturn(BatchStatus.STARTING); snapshot.setEndDate(null); expectLastCall(); snapshot.setStatusText(isA(String.class)); expectLastCall(); snapshot.setStatus(SnapshotStatus.INITIALIZED); expectLastCall(); expect(snapshotRepo.saveAndFlush(snapshot)) .andReturn(snapshot); replayAll();  Response response = resource.restart(snapshotId); assertEquals(Status.ACCEPTED.getStatusCode(), response.getStatus()); RestartSnapshotBridgeResult result = (RestartSnapshotBridgeResult) response.getEntity();  assertNotNull(result); assertEquals(snapshotId, result.getSnapshotId()); assertEquals(SnapshotStatus.INITIALIZED, result.getStatus());  } "	0	0	0	0	1	0
"@Test public void seriesCSVInsertTest() throws Exception { Response response = CSVInsertMethod.csvInsert(""entity"", ""some csv"", new HashMap<String, String>(), UNKNOWN_USER, UNKNOWN_USER_PASSWORD);  Assert.assertEquals(response.getStatus(), Response.Status.UNAUTHORIZED.getStatusCode()); String errorMessage = extractErrorMessage(response); Assert.assertTrue(errorMessage.equals(BAD_CREDENTIALS) || errorMessage.equals(USER_NOT_FOUND)); } "	0	0	0	0	1	0
@Override public void call() { PriorityQueue<TimedAction> _q = QUEUE.get(); if (_q != null) { _q.remove(timedAction); } } 	1	0	1	1	0	0
"protected void login(SessionStorage storage) {  AuthenticationCredentials credentials = storage.getCredentials(); WebTarget rootTarget = storage.getRootTarget(); if (configuration.getAuthenticationType() == AuthenticationType.BASIC) { rootTarget.register(new BasicAuthenticationFilter(credentials)); return; } Form form = new Form(); form.param(""j_username"", credentials.getUsername()).param(""j_password"", credentials.getPassword()); WebTarget target = rootTarget.path(""/j_spring_security_check"") .property(ClientProperties.FOLLOW_REDIRECTS, Boolean.FALSE); Response response = target.request().post(Entity.entity(form, MediaType.APPLICATION_FORM_URLENCODED_TYPE)); String sessionId = null; String location = response.getLocation().toString();  if (response.getStatus() == ResponseStatus.FOUND && !location.matches(""[^?]+\\?([^&]*&)*error=1(&[^&]*)*$"")) { sessionId = response.getCookies().get(""JSESSIONID"").getValue(); storage.setSessionId(sessionId); } else { new DefaultErrorHandler().handleError(response); } rootTarget.register(new SessionOutputFilter(sessionId)); } "	0	0	0	0	1	0
"@NonNull @WorkerThread public Trigger getTrigger( @NonNull String triggerID) throws ThingIFException {  if (this.target == null) { throw new IllegalStateException(""Can not perform this action before onboarding""); } if (TextUtils.isEmpty(triggerID)) { throw new IllegalArgumentException(""triggerID is null or empty""); }  String path = MessageFormat.format(""/thing-if/apps/{0}/targets/{1}/triggers/{2}"", this.app.getBaseUrl(), this.target.getTypedID().toString(), triggerID); String url = Path.combine(this.app.getBaseUrl(), path); Map<String, String> headers = this.newHeader(); IoTRestRequest request = new IoTRestRequest(url, IoTRestRequest.Method.GET, headers); JSONObject responseBody = this.restClient.sendRequest(request);  JSONObject commandObject = responseBody.optJSONObject(""command""); String schemaName = commandObject.optString(""schema"", null); int schemaVersion = commandObject.optInt(""schemaVersion""); Schema schema = this.getSchema(schemaName, schemaVersion); if (schema == null) { throw new UnsupportedSchemaException(schemaName, schemaVersion); } return this.deserialize(schema, responseBody, Trigger.class); } "	0	0	0	0	1	0
public boolean isVisible(final Location location) { final Point point = convertToPoint(location); return isPointVisible(point); } 	0	0	0	0	1	0
"public void show() { mdb.title(mContext.getString(R.string.temperature)); final MaterialDialog md = mdb.build(); View view = md.getCustomView();  temperatureControl = (SeekArc) view.findViewById(R.id.seekTemperature); temperatureText = (TextView) view.findViewById(R.id.seekTempProgress); bntPlus = (Button) view.findViewById(R.id.plus); btnMin = (Button) view.findViewById(R.id.min);  if (config != null && !config.getTempSign().equals(Domoticz.Temperature.Sign.CELCIUS)) isFahrenheit = true; temperatureText.setText(String.valueOf(currentTemperature) + "" "" + config.getTempSign()); int progress = (int) (currentTemperature); if (!isFahrenheit) progress = (int) (currentTemperature * 2);  if (android.os.Build.VERSION.SDK_INT >= 11) { ObjectAnimator animation = ObjectAnimator.ofInt(temperatureControl, ""progress"", progress); animation.setDuration(1000); // 0.5 second animation.setInterpolator(new DecelerateInterpolator()); animation.start(); } else temperatureControl.setProgress(progress); // no animation on Gingerbread or lower  temperatureControl.setOnSeekArcChangeListener(new SeekArc.OnSeekArcChangeListener() { @Override public void onProgressChanged(SeekArc seekArc, int i, boolean b) { double temp = ((double) temperatureControl.getProgress() / 2); if (isFahrenheit) temperatureText.setText(String.valueOf(temp * 2) + "" "" + config.getTempSign()); else temperatureText.setText(String.valueOf(temp) + "" "" + config.getTempSign()); }  @Override public void onStartTrackingTouch(SeekArc seekArc) { double temp = ((double) temperatureControl.getProgress() / 2); if (isFahrenheit) temperatureText.setText(String.valueOf(temp * 2) + "" "" + config.getTempSign()); else temperatureText.setText(String.valueOf(temp) + "" "" + config.getTempSign()); }  @Override public void onStopTrackingTouch(SeekArc seekArc) { double temp = ((double) temperatureControl.getProgress() / 2); if (isFahrenheit) temperatureText.setText(String.valueOf(temp * 2) + "" "" + config.getTempSign()); else temperatureText.setText(String.valueOf(temp) + "" "" + config.getTempSign()); } });  bntPlus.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (isFahrenheit) { temperatureControl.setProgress(temperatureControl.getProgress() + 2); temperatureText.setText(String.valueOf(temperatureControl.getProgress()) + "" "" + config.getTempSign()); } else { temperatureControl.setProgress(temperatureControl.getProgress() + 1); temperatureText.setText(String.valueOf((double) temperatureControl.getProgress() / 2) + "" "" + config.getTempSign()); } } }); btnMin.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (isFahrenheit) { temperatureControl.setProgress(temperatureControl.getProgress() - 2); temperatureText.setText(String.valueOf(temperatureControl.getProgress()) + "" "" + config.getTempSign()); } else { temperatureControl.setProgress(temperatureControl.getProgress() - 1); temperatureText.setText(String.valueOf((double) temperatureControl.getProgress() / 2) + "" "" + config.getTempSign()); } } }); md.show(); } "	0	0	0	0	1	0
public long getPropAsLong(String key) { return Long.valueOf(getProperty(key)); } 	0	0	1	0	1	0
public boolean getPropAsBoolean(String key, boolean def) { return Boolean.valueOf(getProperty(key, String.valueOf(def))); } 	0	0	1	0	1	0
@Override public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) { switch (compoundButton.getId()) { case R.id.checkbox_auto_launch: saveSharedPreferences(Constants.AUTO_LAUNCH, isChecked); break; case R.id.checkbox_show_battery_indicator: saveSharedPreferences(Constants.SHOW_BATTERY, isChecked); break; case R.id.checkbox_auto_snooze: saveSharedPreferences(Constants.AUTO_SNOOZE, isChecked); break; } } 	0	0	0	0	1	0
"public AbstractScoreboard loadScoreboard(String name, RunningKoth koth){ if(currentScoreboard != null){ return null; } try { currentScoreboard = scoreboardTypes.get(name).getConstructor().newInstance();  ConfigurationSection section = ConfigHandler.getCfgHandler().getScoreboard().getSection().getConfigurationSection(name.toLowerCase()); currentScoreboard.load(koth, section.getString(""title""), section.getStringList(""contents"").toArray(new String[section.getStringList(""contents"").size()])); } catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException e) { e.printStackTrace(); } return currentScoreboard; } "	0	0	0	0	1	0
"@Override protected void execute( IContributionSite site ) throws Exception { String resId = P4Plugin.instance().localResolver.resourceIdentifier( res.get() );  TxProvider<UnitOfWork>.Tx tx = uowProvider.get().newTx( site.getPanel() );  NewLayerOperation op = new NewLayerOperation() .tx.put( tx ) .map.put( map.get() ) .label.put( res.get().getName() ) .resourceIdentifier.put( resId );  OperationSupport.instance().execute2( op, true, false, ev2 -> UIThreadExecutor.asyncFast( () -> { if (ev2.getResult().isOK()) { PanelPath panelPath = site.getPanel().getSite().getPath(); site.getContext().closePanel( panelPath.removeLast( 1 /*2*/ ) ); } else { StatusDispatcher.handleError( ""Unable to create new layer."", ev2.getResult().getException() ); } })); } "	0	0	1	0	1	0
private void closeStreamWhenDone(ChannelPromise promise, int streamId) throws Http2Exception { final NettyServerStream stream = serverStream(connection().requireStream(streamId)); promise.addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) { stream.complete(); } }); } 	0	0	0	0	1	0
"private void onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers headers) throws Http2Exception { if (!teWarningLogged && !TE_TRAILERS.equals(headers.get(TE_HEADER))) { logger.warning(String.format(""Expected header TE: %s, but %s is received. This means "" + ""some intermediate proxy may not support trailers"", TE_TRAILERS, headers.get(TE_HEADER))); teWarningLogged = true; }  try { // The Http2Stream object was put by AbstractHttp2ConnectionHandler before calling this // method. Http2Stream http2Stream = connection().requireStream(streamId); NettyServerStream stream = new NettyServerStream(ctx.channel(), http2Stream, this); http2Stream.setProperty(NettyServerStream.class, stream); String method = determineMethod(streamId, headers); ServerStreamListener listener = transportListener.streamCreated(stream, method, Utils.convertHeaders(headers)); stream.setListener(listener); } catch (Http2Exception e) { throw e; } catch (Throwable e) { logger.log(Level.WARNING, ""Exception in onHeadersRead()"", e); throw newStreamException(streamId, e); } } "	0	0	0	0	1	0
"public static Collection<User> getUsersExcluding(Collection<Uuid> ids) {  final Set<User> users = new HashSet<>();  System.out.println(""Accessing ViewDatabase"");  Connection connection = null; Statement stmt = null; boolean flag = true;  String parameters;  if(!ids.isEmpty()){ parameters = ""WHERE "";  for (final Uuid id : ids) {  String restricted = id.toString(); if(flag){ parameters = parameters + ""ID <> "" + restricted; } else{ parameters = parameters + "" AND ID <> "" + restricted; } } }else { parameters = """"; }  try { Class.forName(""org.sqlite.JDBC""); connection = DriverManager.getConnection(""jdbc:sqlite:./bin/codeu/chat/codeU_db/ChatDatabase.db""); connection.setAutoCommit(false);  stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery( ""SELECT * "" + ""FROM USERS ""+ parameters + "";"" ); while (rs.next()){ Uuid userID = Uuid.fromString(rs.getString(""ID"")); String userName = rs.getString(""UNAME""); Time creationTime = Time.fromMs(rs.getLong(""TimeCreated"")); String userPassword = rs.getString(""PASSWORD"");   User user = new User(userID, userName, creationTime, userPassword); users.add(user); } rs.close(); stmt.close();  connection.close(); } catch ( Exception e ) { System.err.println( e.getClass().getName() + "": "" + e.getMessage() ); System.exit(0); }  return users; } "	0	0	0	0	1	0
@Override public final void onValues(VariableEntity entity, Variable[] variables, Value... values) { for(int i = 0; i<variables.length; i++) { Variable var = variables[i];  if (!validationVariables.contains(var.getName())) { continue; //variable not validated: ignore }  Value value = values[i];  if (value.isNull()) { //we dont validate null: only useful if we have a NotNull validation rule, and make all other rules accept null } else if (value.isSequence()) { for (Value val: value.asSequence().getValue()) { if (val.isNull()) { //we dont validate null: only useful if we have a NotNull validation rule, and make all other rules accept null } else { doValidation(var, val, entity); } } } else { doValidation(var, value, entity); } } } 	0	0	1	1	0	0
public Trip getBackTrip () { if (backEdge instanceof TablePatternEdge) { return stateData.tripTimes.getTrip(); } else { return backEdge.getTrip(); } } 	0	0	0	0	1	0
private List<AppStat> getTaxonomyStats(Taxonomy taxonomy) { List<AppStat> stats = Lists.newArrayList();  // Get accessions long passportCount = taxonomy.getPassports().size(); stats.add(new AppStat(AppStatProxy.STAT.PASSPORT, passportCount));  // Get Stocks long stockCount = taxonomyRepository.countStocks(taxonomy.getId()); stats.add(new AppStat(AppStatProxy.STAT.STOCKS, stockCount));  // get genotypes long genotypeCount = taxonomy.getAlleleAssays().size(); stats.add(new AppStat(AppStatProxy.STAT.GENOTYPES, genotypeCount)); //Get phenotypes  long phenotypeCount = taxonomyRepository.countPhenotypes(taxonomy.getId()); stats.add(new AppStat(AppStatProxy.STAT.PHENOTYPE, phenotypeCount));  return stats; } 	0	0	0	0	1	0
"public void checkSequenceNumber(final Integer currentSequenceNumber, final Integer newSequenceNumber) throws ProtocolAdapterException {  int expectedSequenceNumber = currentSequenceNumber + 1; if (expectedSequenceNumber > this.sequenceNumberMaximum) { expectedSequenceNumber = 0; }  if (Math.abs(expectedSequenceNumber - newSequenceNumber) <= this.sequenceNumberWindow || Math.abs(expectedSequenceNumber - newSequenceNumber) >= this.sequenceNumberMaximum - this.sequenceNumberWindow) { LOGGER.debug(""SequenceNumber OK""); } else { LOGGER.debug(""SequenceNumber NOT OK""); throw new ProtocolAdapterException(""SequenceNumber incorrect""); } } "	1	1	1	1	0	0
@Override protected OutboxImpl createOutboxInt(Function<Object, ProgressState>[] outstreams, boolean hasSnapshot, ProgressTracker progTracker, SerializationService serializationService) { return new OutboxImpl(outstreams, hasSnapshot, progTracker, serializationService); } 	0	0	0	0	1	0
@Test public void testBootstrapToOnline() throws Exception { MiruLocalHostedPartition<EWAHCompressedBitmap> localHostedPartition = new MiruLocalHostedPartition<>(bitmaps, coord, contextFactory, activityWALReader, partitionEventHandler, rebuildDirector, scheduledBootstrapService, scheduledRebuildService, scheduledSipMigrateService, rebuildExecutor, sipIndexExecutor, 1, new NoOpMiruIndexRepairs(), indexer, true, 100, 100, new MiruMergeChits(100_000, 0.5), timings);  setActive(true); waitForRef(bootstrapRunnable).run();  assertEquals(localHostedPartition.getState(), MiruPartitionState.bootstrap); assertEquals(localHostedPartition.getStorage(), MiruBackingStorage.memory);  waitForRef(rebuildIndexRunnable).run();  assertEquals(localHostedPartition.getState(), MiruPartitionState.online); assertEquals(localHostedPartition.getStorage(), MiruBackingStorage.memory); waitForRef(sipMigrateIndexRunnable).run();  assertEquals(localHostedPartition.getState(), MiruPartitionState.online); assertEquals(localHostedPartition.getStorage(), MiruBackingStorage.disk);  } 	0	0	0	0	0	1
"private void search() { search_button.setEnabled(false); for(int x=0;x<tabbedRoot_pane.getTabCount();x++) if(tabbedRoot_pane.getTitleAt(x).equals(""Search Results"")) tabbedRoot_pane.remove(x);  Search s = new Search(search_field.getText(), currentOrganization); LibraryPane panel = new LibraryPane(s.getSongResults(), this); tabbedRoot_pane.add(panel, ""Search Results""); tabbedRoot_pane.setSelectedComponent(panel);  if(details_panel.isVisible()) panel.selectSong(0); search_button.setEnabled(true); } "	0	0	0	0	1	0
"@Override public void setName(final String name) { base.setProperty( primaryKey, ""name"", name); } "	0	0	1	1	1	0
@Override public Timestamp getUpdatedAt() { return base.getProperty( primaryKey, TimestampedRecord.COLUMN_UPDATED_AT, Timestamp.class); } 	0	0	0	1	1	0
@Override public boolean onCreateOptionsMenu(android.view.Menu menu) { // Common options: Copy, Export to SD Card, Refresh menu.add(0, MENU_ADD, 0, getString(R.string.profile_add)).setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS); super.onCreateOptionsMenu(menu); return true; } 	0	0	0	0	1	0
"@RequestMapping(""/showSummary"") public String showReservationSummary(@RequestParam Integer showingId, @RequestParam(name=""choice"") Integer selectedSeatsAmount, Model model) { Showing showing = showingService.findOne(showingId); Booking booking = bookingProvider.provideEmptyBooking(); booking.setShowing(showing); List<Seat> selectedSeats = prepareSelectedSeats(showingId, selectedSeatsAmount); booking.setSeats(selectedSeats); BookingDto dto = bookingService.toDto(booking); List<Integer> seatIds = selectedSeats.stream().map(Seat::getId).collect(Collectors.toList()); model.addAttribute(""bookingSummary"", dto); model.addAttribute(""seatIds"", seatIds); model.addAttribute(""showingId"", showingId); return ""reservation/summary""; } "	0	0	0	0	1	0
private void checkResultAddStaff(String staffName, FoodTruckManager ftms) { assertEquals(staffName,ftms.getEmployee(0)); assertEquals(1,ftms.getEmployees().size()); assertEquals(true,ftms.hasEmployees()); } 	0	0	1	0	1	0
"@Override public boolean onItemLongClick(AdapterView<?> adapterView, View view, int position, long id) {  if (!userSession.equals("""")) {  SQLiteDatabase db = new MainDBHelper(getContext()).getReadableDatabase();  String[] projection = new String[]{ SeriesContract.seriesTable.COLUMN_NAME_ISFAV };  Integer selectID = Integer.parseInt(((TextView) view.findViewById(R.id.seriesId)).getText().toString());   Cursor c = db.query( SeriesContract.seriesTable.TABLE_NAME, projection, SeriesContract.seriesTable.COLUMN_NAME_ID + "" = ?"", new String[]{selectID.toString()}, null, null, null );  c.moveToFirst(); Boolean isFav = c.getInt(c.getColumnIndex(SeriesContract.seriesTable.COLUMN_NAME_ISFAV)) == 1;  ImageView fav = (ImageView) view.findViewById(R.id.favImageView); fav.setImageDrawable(ContextCompat.getDrawable(getContext(), !isFav ? R.drawable.ic_star : R.drawable.ic_star_border) );  if (isFav) removeFromFavorites(selectID); else addToFavorites(selectID);  c.close(); db.close();  } else { Snackbar snackbar = Snackbar.make(rootView.findViewById(android.R.id.content), ""Die Favoriten sind nur verfügbar wenn du angemeldet bist."", 500); View snackbarView = snackbar.getView(); snackbarView.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.colorPrimaryDark)); snackbar.show(); } return true; } "	0	0	0	0	1	0
@Test public void writeWithoutResults() throws IOException { final ScanResult result = new ScanResult(); final OutputResult outputResult = writer.write(result); assertTrue(outputResult.isEmpty()); assertNull(outputResult.flush(cwd)); } 	0	0	0	0	1	0
public CredentialRetrieveResult build() { return new CredentialRetrieveResult(mResultCode, mCredential, mAdditionalProps); } 	0	0	1	0	1	0
@Nullable @Override public BracePair findPair(boolean left, HighlighterIterator iterator, CharSequence fileText, FileType fileType) { BracePair pair = super.findPair(left, iterator, fileText, fileType);  if (pair == DO_END) { iterator.advance(); IElementType tokenType = iterator.getTokenType();  if (tokenType == ElixirTypes.KEYWORD_PAIR_COLON) { pair = null; }  iterator.retreat(); }  return pair; } 	0	0	0	0	1	0
"public String getTestProgressPath() { return String.format(""%s/files/testProgress/"", getRootPagePath()); } "	0	0	0	0	1	0
"public static File createFile(String path, InputStream content) { String[] names = path.split(""/""); if (names.length == 1) return createFile(new File(path), content); else { File parent = null; for (int i = 0; i < names.length - 1; i++) { parent = parent == null ? new File(names[i]) : new File(parent, names[i]); if (!parent.exists()) parent.mkdir(); } File fileToCreate = new File(parent, names[names.length - 1]); return createFile(fileToCreate, content); } } "	0	0	0	0	1	0
"public String getLockFileName(WikiTestPage test) { return context.getTestProgressPath() + ""/"" + test.getVariable(""PAGE_PATH"") + ""."" + test.getVariable(""PAGE_NAME""); } "	0	0	1	0	1	0
public void updateTask(int index, ReadOnlyTask updatedTask) throws DuplicateTaskException { assert updatedTask != null;  Task taskToUpdate = internalList.get(index); if (!taskToUpdate.equals(updatedTask) && internalList.contains(updatedTask)) { throw new DuplicateTaskException(); }  taskToUpdate.resetData(updatedTask); // TODO: The code below is just a workaround to notify observers of the updated task. // The right way is to implement observable properties in the Task class. // Then, TaskCard should then bind its text labels to those observable properties. internalList.set(index, taskToUpdate); internalList.sort((thisTask, otherTask) -> thisTask.getPriority() - otherTask.getPriority()); } 	0	0	0	0	1	0
"public void moveToUserIdsChannel(GuildMessageReceivedEvent event) throws Exception { VoiceChannel channel = null;  outerloop: for (VoiceChannel channel1 : event.getGuild().getVoiceChannels()) { for (User user : channel1.getUsers()) { if (user.getId().equals(event.getAuthor().getId())) { channel = channel1; break outerloop; } } }  if (channel == null) { event.getChannel().sendMessage(""There isn't a VoiceChannel in this Guild with the name: event.getMessage().getChannelId() ""); throw new Exception(""Problem moving to requested channel""); }  moveToChannel(channel); } "	0	0	0	0	1	0
@Override public Date unmarshal(String d) throws Exception { if (d == null) { return null; }  try { return format.parse(d); } catch (ParseException e) { return null; } } 	0	0	0	0	1	0
public static void main(String[] args) {  CinemaFinder cinemaFinder = new CinemaFinder(); try { cinemaFinder.findClosestCinemas(5000); cinemaFinder.updateAllSeances(); cinemaFinder.printCinemaList();  cinemaFinder.updateTempsTrajet(); cinemaFinder.printCinemaList();   List<Seance> bestSeanceList = cinemaFinder.findBestSeances(null, null); for(Seance seance : bestSeanceList) { System.out.println(seance); }  Map<String, Film> filmSeanceListMap = cinemaFinder.findBestSeancesForEachFilm(null, null); for(Film film : filmSeanceListMap.values()) { System.out.println(film); }  } catch (JSONException | IOException e) { e.printStackTrace(); }  } 	1	0	0	0	1	0
@Override public void move(AbstractEncryptedNode dest) throws DavException, IOException { // when moving a directory we only need to move the file (actual dir is ID-dependent and won't change) final Path srcPath = filePath; final Path dstPath; if (dest instanceof NonExistingNode) { dstPath = ((NonExistingNode) dest).getDirFilePath(); } else { dstPath = dest.filePath; }  // move: Files.createDirectories(dstPath.getParent()); try { Files.move(srcPath, dstPath, StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.ATOMIC_MOVE); } catch (AtomicMoveNotSupportedException e) { Files.move(srcPath, dstPath, StandardCopyOption.REPLACE_EXISTING); } } 	0	0	0	0	1	0
public Result deleteRoom(Integer id){ Room room = Room.findRoomById(id);  Ebean.delete(room); return redirect(routes.Application.index()); } 	0	0	0	0	1	0
@Override public String readUntil(char stop, boolean acceptEof, CharScannerSyntax syntax) {  StringBuilder result = new StringBuilder(); char escape = syntax.getEscape(); char quoteStart = syntax.getQuoteStart(); char altQuoteStart = syntax.getAltQuoteStart(); char entityStart = syntax.getEntityStart(); boolean escapeActive = false; boolean done = false; char quoteEnd = 0; char quoteEscape = 0; char entityEnd = 0; boolean quoteLazy = false; int index = this.pos; int restIndex = this.endIndex; while (this.pos < this.endIndex) { char c = this.chars[this.pos++]; boolean append = false; boolean newEscapeActive = false; if (quoteEnd != 0) { // in quotation if (escapeActive) { // current character c was escaped // it will be taken as is on the next append } else if (c == quoteEscape) { // escape in quote --> lookahead if (this.pos < this.endIndex) { c = this.chars[this.pos]; if (c == quoteEnd) { // quoteEnd was escaped append = true; newEscapeActive = true; } else if (quoteEscape == quoteEnd) { // quotation done quoteEnd = 0; append = true; } } else { // end reached without stop char if (quoteEscape == quoteEnd) { // omit quote on appending of rest restIndex--; } break; } } else if (c == quoteEnd) { // quotation done quoteEnd = 0; append = true; } } else if (entityEnd != 0) { if (c == entityEnd) { // entity end detected... entityEnd = 0; int len = this.pos - index - 1; String entity = new String(this.chars, index, len); result.append(syntax.resolveEntity(entity)); index = this.pos; } } else if (escapeActive) { // current character c was escaped // it will be taken as is on the next append } else if (c == stop) { append = true; done = true; } else if (c == escape) { append = true; newEscapeActive = true; } else if (c == entityStart) { entityEnd = syntax.getEntityEnd(); append = true; } else { if (c == quoteStart) { quoteEnd = syntax.getQuoteEnd(); quoteEscape = syntax.getQuoteEscape(); quoteLazy = syntax.isQuoteEscapeLazy(); } else if (c == altQuoteStart) { quoteEnd = syntax.getAltQuoteEnd(); quoteEscape = syntax.getAltQuoteEscape(); quoteLazy = syntax.isAltQuoteEscapeLazy(); } if (quoteEnd != 0) { append = true; if ((quoteEnd == quoteEscape) && (c == quoteEscape) && (quoteLazy)) { // lazy quotation mode active --> lookahead if (this.pos < this.endIndex) { if (this.chars[this.pos] == quoteEscape) { // lazy quotation detected quoteEnd = 0; newEscapeActive = true; } } } } } if (append) { appendFromStartToPos(result, index); if (done) { return result.toString(); } index = this.pos; } escapeActive = newEscapeActive; } if (acceptEof) { int len = restIndex - index; if (len > 0) { // append rest result.append(this.chars, index, len); } return result.toString(); } else { return null; } } 	1	0	0	0	0	0
"public void getControlWidgets(List controlWidgets) throws VisADException, RemoteException {  //super.getControlWidgets(controlWidgets);  skipFactorWidget = new ValueSliderWidget(this, 0, 10, ""skipValue"", getSkipWidgetLabel());  skipFactorWidgetZ = new ValueSliderWidget(this, 0, 10, ""skipValueZ"", getSkipWidgetLabel());   addRemovable(skipFactorWidget); addRemovable(skipFactorWidgetZ);  barbSizeWidget = new ValueSliderWidget(this, 1, 21, ""flowScale"", ""Size""); addRemovable(barbSizeWidget);  JCheckBox autoSizeCbx = new JCheckBox(""Autosize"", autoSize); JCheckBox arrowCbx    = new JCheckBox(""Arrow"", arrowHead);  // TJJ Feb 2017 - default state is selected (Inq #2360) arrowCbx.setSelected(true);  autoSizeCbx.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { autoSize = ((JCheckBox) e.getSource()).isSelected(); getGridDisplay().setAutoScale(autoSize); } });  arrowCbx.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { arrowHead = ((JCheckBox) e.getSource()).isSelected(); if (arrowHead) { getGridDisplay().setArrowHead(arrowHead); } else { getGridDisplay().setArrowHead(arrowHead); } getGridDisplay().resetTrojectories(); } });  sizeComponent = GuiUtils.hbox(GuiUtils.rLabel(""Size: ""), barbSizeWidget.getContents(false), autoSizeCbx); if (getIsThreeComponents()) {  vectorBtn = new JRadioButton((isWindBarbs ? ""Wind Barbs:"" : ""Vectors:""), isVectors); trajLengthWidget = new ValueSliderWidget(this, 1, 21, ""trajOffset"", ""LengthOffset"");  List<TwoFacedObject> trajFormList = TwoFacedObject.createList(trajForm, trajFormLabels); JComboBox trajFormBox = new JComboBox(); GuiUtils.setListData(trajFormBox, trajFormList); trajFormBox.setSelectedItem( TwoFacedObject.findId(getTrajFormType(), trajFormList)); trajFormBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TwoFacedObject select = (TwoFacedObject) ((JComboBox) e.getSource()) .getSelectedItem(); setTrajFormType(select.getId().hashCode()); } }); trajFormComponent = GuiUtils.hbox(GuiUtils.rLabel(""Trajectory Form: ""), GuiUtils.filler(), trajFormBox, GuiUtils.filler());  trajLengthComponent = GuiUtils.hbox(GuiUtils.rLabel(""Length Offset: ""), trajLengthWidget.getContents(false), arrowCbx);  trajSkipComponent = GuiUtils.hbox(GuiUtils.rLabel(""Trajectory Start Level: ""), GuiUtils.filler(), levelBox);  trajectoryBtn = new JRadioButton(""Trajectories:"", isTrajectories);  ActionListener listener = new ActionListener() { public void actionPerformed(ActionEvent e) { JRadioButton source = (JRadioButton) e.getSource(); if (source == trajectoryBtn) { isTrajectories = true; isVectors      = false; trajStartLevel = 0; } else { isVectors      = true; isTrajectories = false; levelBox.setSelectedIndex(levelBox.getItemCount() - 1); } setStreamlines(); } };  vectorBtn.addActionListener(listener); trajectoryBtn.addActionListener(listener); GuiUtils.buttonGroup(vectorBtn, trajectoryBtn);   Insets spacer = new Insets(0, 30, 0, 0); JComponent rightComp = GuiUtils.vbox( GuiUtils.left( GuiUtils.vbox( vectorBtn, GuiUtils.inset( sizeComponent, spacer))), GuiUtils.left( GuiUtils.vbox( trajectoryBtn, GuiUtils.vbox( GuiUtils.inset( trajFormComponent, spacer), GuiUtils.inset( trajLengthComponent, spacer), GuiUtils.inset( trajSkipComponent, spacer))))); JLabel showLabel = GuiUtils.rLabel(""Show:""); showLabel.setVerticalTextPosition(JLabel.TOP); controlWidgets.add( new WrapperWidget( this, GuiUtils.top( GuiUtils.inset( showLabel, new Insets(10, 0, 0, 0))), GuiUtils.left( GuiUtils.top(rightComp))));   }  controlWidgets.add( new WrapperWidget( this, GuiUtils.rLabel(""XY Skip:""), GuiUtils.left(skipFactorWidget.getContents(false)))); controlWidgets.add( new WrapperWidget( this, GuiUtils.rLabel(""Z Skip:""), GuiUtils.left(skipFactorWidgetZ.getContents(false))));  enableTrajLengthBox(); enableVectorBox();  List timeL = getDataSelection().getTimes(); if ((timeL == null) && getHadDataChoices()) { List dchoices = getMyDataChoices(); timeL = ((DataChoice) dchoices.get(0)).getSelectedDateTimes(); if ((timeL != null) && (timeL.size() == 0)) { timeL = ((DataChoice) dchoices.get(0)).getAllDateTimes(); } } if ((timeL != null) && (timeL.size() < 4)) { GuiUtils.enableTree(trajectoryBtn, false); }  super.getControlWidgets(controlWidgets);   } "	0	0	1	1	0	0
"@RequestMapping(value = ""/disableapplication/{id}"", method = RequestMethod.POST) public String disableApp(Model model,  @PathVariable(""id"") int id, @Valid DownSchedule downSchedule, BindingResult bindingResult, @RequestParam(name=""submit"", required=true)String submit, RedirectAttributes redirectAttributes) { logger.info(""Disabling application {}!"", id);  Application app = tasApplicationService.getApplicationById(id); if(app == null){ model.addAttribute(""errorMessage"", ""Could not find application to disable""); return ""redirect:../error""; }  List<DownSchedule> dScheds = downScheduleService.getAllScheduledDownByAppId(id);  if(submit.equals(""schedule"")){  if(bindingResult.hasErrors()){ logger.info(""Binding errors on schedule "" + downSchedule); redirectAttributes.addFlashAttribute(""errors"", bindingResult); redirectAttributes.addFlashAttribute(""downSchedule"", downSchedule); model.addAttribute(""application"", app); model.addAttribute(""scheduledTimes"", dScheds);  return ""disableapplication""; }  logger.info(""Binding schedule "" + downSchedule);  if(!downSchedule.getEndDate().after(downSchedule.getStartDate())){ redirectAttributes.addFlashAttribute(""downSchedule"", downSchedule); model.addAttribute(""dateError"", ""End date must be after start date""); model.addAttribute(""application"", app); model.addAttribute(""scheduledTimes"", dScheds);  return ""disableapplication""; }  downScheduleService.saveSchedule(downSchedule);  return ""redirect:../disableapplication/"" + app.getAppID();  }else if(submit.equals(""continue"")){ logger.info(""Toggling state of application to {}"", !app.isActiveState()); app.setActiveState(!app.isActiveState()); tasApplicationService.saveApplication(app);  return ""redirect:../disableapplication/"" + app.getAppID(); }   return ""redirect:../applications""; } "	0	0	0	0	1	0
"@Override public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException { if (action.equals(""init"") && args.length()>=2) { String url = args.getString(0); String key = args.getString(1); this.init(url,key, callbackContext); return true; } else if (action.equals(""createARView"") && args.length()>=5) { int x = args.getInt(0); int y = args.getInt(1); int width = args.getInt(2); int height = args.getInt(3); int ctrlID = args.getInt(4); this.createARView(x, y, width, height, ctrlID, callbackContext); return true; } else if (action.equals(""beforeLeave"") && args.length()>=1) { int ctrlID = args.getInt(0); this.beforeLeave(ctrlID, callbackContext); return true; } else if (action.equals(""afterLeave"") && args.length()>=1) { int ctrlID = args.getInt(0); this.afterLeave(ctrlID, callbackContext); return true; } else if (action.equals(""beforeEnter"") && args.length()>=1) { int ctrlID = args.getInt(0); this.beforeEnter(ctrlID, callbackContext); return true; } else if (action.equals(""afterEnter"") && args.length()>=1) { int ctrlID = args.getInt(0); this.afterEnter(ctrlID, callbackContext); return true; }else if (action.equals(""destroy"") && args.length()>=1) { int ctrlID = args.getInt(0); this.destroy(ctrlID, callbackContext); return true; }else if (action.equals(""resize"") && args.length()>=5) { int x = args.getInt(1); int y = args.getInt(2); int width = args.getInt(3); int height = args.getInt(4); int ctrlID = args.getInt(0); this.resize(ctrlID, x, y, width, height, callbackContext); return true; } return false; } "	1	0	1	1	1	0
"private Collection<User> getGroupMembers(HttpServletRequest request) { String netId; int memberId = 1; Set<String> netIds = Sets.newHashSet(); while (!Strings.isNullOrEmpty((netId = request.getParameter(""member-"" + memberId)))) { memberId++; netIds.add(netId); }  Map<String, User> members = users.mapByNetIds(netIds); return members.values(); } "	0	0	1	1	1	0
protected Random initialValue() { return new Random(); } 	0	0	0	0	1	0
"public static boolean isNotificationRequestedByEdge(MimeMessage message) { String[] headers = null; try { headers = message.getHeader(DISPOSITION_NOTIFICATION_OPTIONS_HEADER_NAME); } catch (MessagingException ex) { LOG.error(""Failed:"" + ex.getMessage()); } if (headers != null) { for (String header : headers) { if (checkHeaderForDispatchedRequest(header)) { return true; }  } } return false; } "	0	0	0	0	1	0
"@Test public void basicQueryStringTest() throws IOException, ServletException, ExecutionException, InterruptedException { final AtomicReference<AtmosphereResource> r = new AtomicReference<AtmosphereResource>(); final AtomicReference<String> q = new AtomicReference<String>();  framework.addAtmosphereHandler(""/*"", new AtmosphereHandler() {  @Override public void onRequest(AtmosphereResource resource) throws IOException { r.set(resource); q.set(resource.getRequest().getQueryString()); resource.getBroadcaster().addAtmosphereResource(resource); }  @Override public void onStateChange(AtmosphereResourceEvent event) throws IOException { }  @Override public void destroy() { } }); Map<String, String[]> queryStrings = new HashMap<String, String[]>(); queryStrings.put(""a"", new String[]{""b""}); queryStrings.put(""b"", new String[]{""d""}); queryStrings.put(""c"", new String[]{""f""});  AtmosphereRequest request = new AtmosphereRequest.Builder().queryStrings(queryStrings).pathInfo(""/a"").build(); framework.doCometSupport(request, AtmosphereResponse.newInstance());  r.get().getBroadcaster().broadcast(""yo"").get(); assertNotNull(q.get()); assertEquals(q.get(), ""b=d&c=f&a=b""); } "	0	0	1	0	1	0
public static void log(Level level, String message, Object... args) { logger.log(level, MessageFormat.format(message, args)); } 	0	0	0	0	1	0
"@Override public void onClick(View v) { Context context = MainActivity.this; // Figure out which button was pressed switch (v.getId()) { case R.id.b_home: startActivity(new Intent(context, HomeActivity.class)); break; case R.id.b_map: startActivity(new Intent(context, MapActivity.class)); break; case R.id.b_shop: startActivity(new Intent(context, ShopActivity.class)); break; case R.id.b_stats: startActivity(new Intent(context, StatsActivity.class)); break; case R.id.b_main: break; case R.id.b_monster: ImageButton monsterButton=(ImageButton) findViewById(R.id.b_monster); TextView hp = (TextView) findViewById(R.id.hp); Player p = Player.getInstance();  if(currentMonster.damageMonster(p.getDamage())){  p.setMoney(p.getMoney()+currentMonster.getGold()); if(mon==0) { currentMonster=monFac.getMonster(currentMonster.getMaxhealth(),currentMonster.getGold(),areaType.MOUNTAIN); mon++; } else { currentMonster=monFac.getMonster(currentMonster.getMaxhealth(),currentMonster.getGold(),areaType.FOREST); mon=0; } }  hp.setText(currentMonster.getHealth() + "" /""+ currentMonster.getMaxhealth()); monsterButton.setImageResource(currentMonster.getImageRef()); break; } } "	0	0	0	0	1	0
"@Test public void testGetLoggedInUser() throws Exception {  // Given String accessToken = getAccessToken();  given() .header(""Authorization"", ""Bearer "" + accessToken) // When .when() .get(""/user"") // Then .then() .statusCode(HttpStatus.SC_OK) .assertThat().body(""name"", is(username));  } "	0	0	1	1	0	0
"@Override public void validate(CertifiedProductSearchDetails product) { //if it's a new product, check the id parts String uniqueId = product.getChplProductNumber(); String[] uniqueIdParts = uniqueId.split(""\\.""); if(uniqueIdParts != null && uniqueIdParts.length == 9) {  //validate that these pieces match up with data String productCode = uniqueIdParts[4]; String versionCode = uniqueIdParts[5]; String icsCode = uniqueIdParts[6]; String additionalSoftwareCode = uniqueIdParts[7]; String certifiedDateCode = uniqueIdParts[8];  if(StringUtils.isEmpty(productCode) || !productCode.matches(""[A-Za-z0-9_]+"")) { product.getErrorMessages().add(""The product code is required and may only contain the characters A-Z, a-z, 0-9, and _""); }  if(StringUtils.isEmpty(versionCode) || !versionCode.matches(""[A-Za-z0-9_]+"")) { product.getErrorMessages().add(""The version code is reuqired and may only contain the characters A-Z, a-z, 0-9, and _""); }  if(StringUtils.isEmpty(icsCode) || !icsCode.matches(""[0-9]"")) { product.getErrorMessages().add(""The ICS code is required and may only contain the characters 0-9""); }  if(icsCode.equals(""0"") && product.getIcs().equals(Boolean.TRUE)) { product.getErrorMessages().add(""The unique id indicates the product does not have ICS but the value for Inherited Certification Status is true.""); } else if(!icsCode.equals(""0"") && product.getIcs().equals(Boolean.FALSE)) { product.getErrorMessages().add(""The unique id indicates the product does have ICS but the value for Inherited Certification Status is false.""); } if(additionalSoftwareCode.equals(""0"")) { boolean hasAS = false; for(CertificationResult cert : product.getCertificationResults()) { if(cert.getAdditionalSoftware() != null && cert.getAdditionalSoftware().size() > 0) { hasAS = true; } } if(hasAS) { product.getErrorMessages().add(""The unique id indicates the product does not have additional software but some is listed for the product.""); } } else if(additionalSoftwareCode.equals(""1"")) { boolean hasAS = false; for(CertificationResult cert : product.getCertificationResults()) { if(cert.getAdditionalSoftware() != null && cert.getAdditionalSoftware().size() > 0) { hasAS = true; } } if(!hasAS) { product.getErrorMessages().add(""The unique id indicates the product has additional software but none is listed for the product.""); } } else { product.getErrorMessages().add(""The additional software part of the unique ID must be 0 or 1.""); } SimpleDateFormat idDateFormat = new SimpleDateFormat(""yyMMdd""); try { Date idDate = idDateFormat.parse(certifiedDateCode); if(product.getCertificationDate() == null || idDate.getTime() != product.getCertificationDate().longValue()) { product.getErrorMessages().add(""The certification date provided in the unique id does not match the certification date of the product.""); } } catch (ParseException pex) { product.getErrorMessages().add(""Could not parse the certification date part of the product id: "" + certifiedDateCode); } }  validateDemographics(product);  for(CertificationResult cert : product.getCertificationResults()) { if(cert.getAdditionalSoftware() != null && cert.getAdditionalSoftware().size() > 0) { for(CertificationResultAdditionalSoftware asDto : cert.getAdditionalSoftware()) { if(asDto.getCertifiedProductId() == null && !StringUtils.isEmpty(asDto.getCertifiedProductNumber())) { try { boolean exists = cpManager.chplIdExists(asDto.getCertifiedProductNumber()); if(!exists) { product.getErrorMessages().add(""No CHPL product was found matching additional software "" + asDto.getCertifiedProductNumber() + "" for "" + cert.getNumber()); } } catch(Exception ex) {} } } } } } "	0	0	1	1	0	0
"public static Color colorChooserDialog(XmlObjectStore store, Component c, String label, Color color) { List<Color> savedColors = (List<Color>)store.get(Constants.PROP_RECENT_COLORS); if (color == null) { if ((savedColors != null) && !savedColors.isEmpty()) { color = savedColors.get(0); } else { color = Color.WHITE; } } ColorSwatchComponent comp = new ColorSwatchComponent(store, color, label); JColorChooser chooser = new JColorChooser(comp.getBackground()); List<AbstractColorChooserPanel> choosers = new ArrayList<>(Arrays.asList(chooser.getChooserPanels())); choosers.remove(0); PersistableSwatchChooserPanel swatch = new PersistableSwatchChooserPanel(); PersistableSwatchChooserPanel.ColorTracker tracker = new PersistableSwatchChooserPanel.ColorTracker(); tracker.addPropertyChangeListener(""colors"", comp);  if (savedColors != null) { tracker.setColors(savedColors); } swatch.setColorTracker(tracker); choosers.add(0, swatch); chooser.setChooserPanels(choosers.toArray(new AbstractColorChooserPanel[0])); swatch.updateRecentSwatchPanel(); if (GuiUtils.showOkCancelDialog(null, label, chooser, null)) { comp.userSelectedNewColor(chooser.getColor()); } return tracker.getMostRecentColor(); } "	0	0	0	0	1	0
"private void setFoot() { View view = View.inflate(this, R.layout.lifelab_item_foot, null); TextView tv = (TextView) view.findViewById(R.id.lifelab_item_desc); tv.setText(String.format(this.getString(R.string.lifelab_item_desc), this.lcd.editor)); lifelab_foot_collect_count = (TextView) view.findViewById(R.id.lifelab_foot_collect_count); lifelab_foot_collect_count.setVisibility(lcd.liked_count == 0 ? View.GONE : View.VISIBLE); lifelab_foot_collect_count.setText(lcd.liked_count + """"); lifelab_foot_collect = (ImageView) view.findViewById(R.id.lifelab_foot_collect); lifelab_foot_collect.setImageResource(lcd.liked ? R.drawable.favourite : R.drawable.mark_white); this.container.addView(view);  findViewById(R.id.layout_footer_feedback).setOnClickListener(this); findViewById(R.id.layout_footer_share).setOnClickListener(this); findViewById(R.id.layout_lifelab_foot_collect).setOnClickListener(this); } "	0	0	0	0	0	1
"@Test public void shouldCallCallbackOnSend() throws InterruptedException { //given final CountDownLatch latch = new CountDownLatch(1);  //when producer.send(MESSAGE, TOPIC, new PublishingCallback() { @Override public void onUnpublished(Exception exception) { latch.countDown(); }  @Override public void onPublished(Message message, Topic topic) { latch.countDown(); } });  //then List<ProducerRecord<byte[], byte[]>> records = leaderConfirmsProducer.history(); assertThat(records.size()).isEqualTo(1); assertThat(records.get(0)).isEqualToComparingFieldByField(new ProducerRecord<>(""group.topic"", CONTENT));  latch.await(); } "	0	0	0	0	1	0
"public static void getLocationByID(int id){ try { stmt = connection.createStatement();  ResultSet results = stmt.executeQuery(""SELECT * FROM Location"" + ""WHERE LocationID = "" + id + """"); //TODO: convert result into a location, or return relevant strings while(results.next()) { int LocID = results.getInt(1); String LocName = results.getString(2); String LocType = results.getString(3); int XCoord = results.getInt(4); int YCoord = results.getInt(5); int Floor = results.getInt(6); System.out.println(LocID + ""\t\t"" + LocName + ""\t\t"" + LocType + ""\t\t"" + XCoord + YCoord + ""\t\t"" + Floor); } results.close(); stmt.close(); } catch (SQLException e){ e.printStackTrace(); } } "	0	0	1	1	0	0
public static String toYearMonthString(Date date) { return YEAR_MONTH_STRING_FORMAT.format(date); } 	0	0	0	0	1	0
private void loadRows(String query) { HashMap<String, List<Movie>> movies = VideoProvider.getMovieList(); ArrayObjectAdapter listRowAdapter = new ArrayObjectAdapter(new CardPresenter()); for (HashMap.Entry<String, List<Movie>> entry : movies.entrySet()) { for (int i = 0; i < entry.getValue().size(); i++) { Movie movie = entry.getValue().get(i); if (movie.getTitle().toLowerCase(Locale.ENGLISH) .indexOf(query.toLowerCase(Locale.ENGLISH)) >= 0 || movie.getDescription().toLowerCase(Locale.ENGLISH) .indexOf(query.toLowerCase(Locale.ENGLISH)) >= 0) { listRowAdapter.add(movie); } } } HeaderItem header = new HeaderItem(0, getResources().getString(R.string.search_results), null); mRowsAdapter.add(new ListRow(header, listRowAdapter)); } 	0	0	1	0	0	0
"@RequestMapping({""/detail""}) public ModelAndView detail(@RequestParam(value = ""id"", defaultValue = """") String id) { ModelAndView model = new ModelAndView(""detail"");  try { URI uri = new URIBuilder(buildMetadata.getDetailsServiceUrl()).addParameter(""id"", id).build(); HttpClient httpClient = HttpClientBuilder.create().build();  logger.debug(String.format(""Query for dataset: %s"", uri.getQuery())); String json = httpGet(httpClient, uri);  logger.debug(String.format(""Found dataset: %s"", json)); Dataset dataset = new ElasticSearchResponse().toListOfObjects(json, Dataset.class).get(0);  dataset = new ResponseManipulation().fillWithAlternativeLangValIfEmpty(dataset, ""nb""); model.addObject(""dataset"", dataset); } catch (Exception e) { logger.error(String.format(""An error occured: %s"", e.getMessage())); model.addObject(""exceptionmessage"", e.getMessage()); model.setViewName(""error""); }  return model; } "	0	0	1	0	1	0
@Override public Object getAsObject(FacesContext context, UIComponent component, String value) { try { return cursoDao.find(Long.parseLong(value)); } catch (NumberFormatException e) { return null; } } 	1	0	1	0	1	0
"@Override public ViewHolder onCreateViewHolder( ViewGroup parent ) { Log.d( TAG, ""onCreateViewHolder"" );  final int sDefaultBackgroundColor = parent.getResources().getColor( R.color.default_background ); final int sSelectedBackgroundColor = parent.getResources().getColor( R.color.primary_dark );  mDefaultCardImage = parent.getResources().getDrawable( R.drawable.movie );  ImageCardView cardView = new ImageCardView( parent.getContext() ) { @Override public void setSelected( boolean selected ) {  int color = selected ? sSelectedBackgroundColor : sDefaultBackgroundColor;  updateCardBackgroundColor( this, color ); super.setSelected( selected );  }  };  cardView.setFocusable( true); cardView.setFocusableInTouchMode( true ); updateCardBackgroundColor( cardView, sDefaultBackgroundColor );  return new ViewHolder( cardView ); } "	0	0	0	0	1	0
"@Override public void visit(CompilationUnit cu, VisitorContext ctx) {  if (rules != null) { if (visitors == null) { visitors = new LinkedList<AbstractPMDRuleVisitor<?>>(); for (String rule : rules) { String beanName = ""pmd:"" + rule; if (ctx.getArchitectureConfig().getConfiguration().containsBean(beanName)) { Object o = ctx.getBean(beanName, null); if (o instanceof AbstractPMDRuleVisitor) { AbstractPMDRuleVisitor<?> aux = (AbstractPMDRuleVisitor<?>) o; aux.visitChildren(false); visitors.add(aux); } } } } for (AbstractPMDRuleVisitor<?> visitor : visitors) { visitor.visit(cu, null); } super.visit(cu, ctx); } } "	0	0	0	0	1	0
"public void save() { Map<String, Object> newMap = new HashMap<String, Object>(); newMap.put(""session:creationTime"", creationTime); newMap.put(""session:lastAccessedTime"", lastAccessedTime); newMap.put(""session:thisAccessedTime"", thisAccessedTime); newMap.put(""session:maxInactiveInterval"", maxInactiveInterval); newMap.put(""session:isValid"", isValid); newMap.put(""session:isNew"", isNew);  for (Entry<String, Object> entry : attributes.entrySet()) { newMap.put(entry.getKey(), entry.getValue()); }  map.putAll(newMap);  if (maxInactiveInterval >= 0) { map.expire(getMaxInactiveInterval(), TimeUnit.SECONDS); } } "	0	0	0	0	1	0
"protected ObjectLiteralPropertyTree parseObjectProperty(JSLexer src, Context context) { final long startPos = src.getPosition();  PropertyDeclarationType methodType = null; Token modifierToken = null; ObjectPropertyKeyTree key = null;  Token lookahead = src.peek(); if (src.nextTokenIs(TokenKind.OPERATOR, JSOperator.MULTIPLICATION)) { //Handle generator methods dialect.require(""js.method.generator"", startPos); methodType = PropertyDeclarationType.GENERATOR; modifierToken = lookahead; } else if (lookahead.isIdentifier()) { //Handle getter/setter/async methods src.skip(lookahead); Token id = lookahead; String name = lookahead.getValue(); if ((name.equals(""async"") || name.equals(""get"") || name.equals(""set"")) && this.isQualifiedPropertyName(src.peek(), context)) { modifierToken = lookahead; key = this.parseObjectPropertyKey(src, context); switch (name) { case ""async"": dialect.require(""js.method.async"", id.getStart()); methodType = PropertyDeclarationType.ASYNC_METHOD; break; case ""get"": dialect.require(""js.accessor"", id.getStart()); methodType = PropertyDeclarationType.GETTER; break; case ""set"": dialect.require(""js.accessor"", id.getStart()); methodType = PropertyDeclarationType.SETTER; } } else { key = new IdentifierTreeImpl(lookahead); } }  if (key == null) key = this.parseObjectPropertyKey(src, context);  if (src.nextTokenIf(TokenKind.OPERATOR, JSOperator.LEFT_PARENTHESIS) != null) { //TODO get rid of this if (!key.isComputed() && key.getKind() == Kind.IDENTIFIER && ((IdentifierTree)key).getName().equals(""contructor"")) { if (methodType != null) { String modifierName = methodType.name(); throw new JSSyntaxException(""Modifier '"" + modifierName + ""' not allowed in constructor declaration"", modifierToken.getStart(), modifierToken.getEnd()); } methodType = PropertyDeclarationType.CONSTRUCTOR; } else if (methodType == null) { methodType = PropertyDeclarationType.METHOD; } return this.parseMethodDefinition(startPos, false, false, false, modifierToken, methodType, key, src, context); } else if (methodType != null) throw new JSSyntaxException(""Key "" + key + "" must be a method."", key.getStart(), key.getEnd()); else if (src.nextTokenIf(TokenKind.OPERATOR, JSOperator.COLON) != null) { ExpressionTree value = this.parseAssignment(null, src, context); return new ObjectLiteralPropertyTreeImpl(startPos, value.getEnd(), key, value); } else if (src.peek().matches(TokenKind.OPERATOR, JSOperator.COMMA) || src.peek().matches(TokenKind.BRACKET, '}')) { //ES6 shorthand property dialect.require(""js.property.shorthand"", key.getStart());  return new ObjectLiteralPropertyTreeImpl(startPos, key.getEnd(), key, key); } else { throw new JSUnexpectedTokenException(src.peek()); } } "	1	0	1	1	1	0
"private void removeLock() { if (baseResultantDir != null) { if (!baseLockDir.renameTo(baseResultantDir)) { throw new RuntimeException(""Unable to rename dircetory "" + baseLockDir + "" to "" + baseResultantDir); } baseResultantDir = null; // No-longer locked baseLockDir = baseResultantDir; } } "	0	0	0	0	1	0
"public boolean newAccount(String type, String name, float balance) throws IllegalArgumentException {  if (balance < 0.0f) throw new IllegalArgumentException(""New account may not be started with a negative balance"");  return newAccountFactory(type, name, balance); } "	0	0	0	0	1	0
"void writeAggregatedHistograms(String testSuiteId, String testId) { PerformanceState performanceState = performanceStateContainer.get(testId); Result result = aggregateHistogramsForTestCase(testId, performanceState); if (result.isEmpty()) { return; }  printHgrmRenderUrl();  for (String probeName : result.probeNames()) {  String baseFileName = testId + ""_"" + probeName;  Histogram histogram = result.getHistogram(probeName); File hdrFile = new File(outputDirectory, baseFileName + "".hdr""); LOGGER.info(""Writing "" + hdrFile.getAbsolutePath()); try { HistogramLogWriter writer = new HistogramLogWriter(hdrFile); writer.outputIntervalHistogram(histogram); } catch (IOException e) { LOGGER.error(e); }  // the HistogramLogProcessor creates 2 files. One with basename and no extension and one with 'hgrm' extension. File hgrmFile = new File(outputDirectory, baseFileName); LOGGER.info(""Writing "" + hgrmFile.getAbsolutePath() + "".hgrm""); HistogramLogProcessor.main(new String[]{ ""-i"", hdrFile.getAbsolutePath(), ""-o"", hgrmFile.getAbsolutePath(), ""outputValueUnitRatio"", ""1000""}); } } "	0	0	1	1	0	0
@Override public List<Message> all(String owner, String keyword) { return list(owner, keyword, null, 0); } 	1	0	1	0	1	0
"@Override public void actionPerformed(ActionEvent e) {  if(buttonGroup.getSelection() == null) { return; }  controller.setWorking(true);  int miniSOC;  try { miniSOC = Integer.parseInt(textField1.getText()); } catch(NumberFormatException numberException) { ErrorDialog dialog = new ErrorDialog(""Die eingegebene miniSOC Nummer ist keine Zahl!"");  return; }  if(e.getSource().equals(neuButton)) { if(buttonGroup.getSelection().equals(WFRadioButton.getModel())) { selectedType = TypeDamage.WF; } else if(buttonGroup.getSelection().equals(STRadioButton.getModel())) { selectedType = TypeDamage.ST; } else if(buttonGroup.getSelection().equals(SSichRadioButton.getModel())) { selectedType = TypeDamage.SSICH; }  DataDamage damage = new DataDamage(selectedType, textField2.getText(), (String) comboBox1.getItemAt(comboBox1.getSelectedIndex()), textField3.getText(), textField4.getText(), miniSOC);  controller.setNewDamage(damage, selectedType);  controller.setWorking(false); } else if(e.getSource().equals(updateButton)) { controller.setWorking(true);  if(buttonGroup.getSelection().equals(WFRadioButton.getModel())) { selectedType = TypeDamage.WF; } else if(buttonGroup.getSelection().equals(STRadioButton.getModel())) { selectedType = TypeDamage.ST; } else if(buttonGroup.getSelection().equals(SSichRadioButton.getModel())) { selectedType = TypeDamage.SSICH; }  DataDamage damage = new DataDamage(selectedType, textField2.getText(), (String) comboBox1.getItemAt(comboBox1.getSelectedIndex()), textField3.getText(), textField4.getText(), miniSOC);  controller.updateDamage(damage, selectedType, selectedRow);  controller.setWorking(false); } else if(e.getSource().equals(deleteButton)) { controller.setWorking(true);  if(buttonGroup.getSelection().equals(WFRadioButton.getModel())) { selectedType = TypeDamage.WF; } else if(buttonGroup.getSelection().equals(STRadioButton.getModel())) { selectedType = TypeDamage.ST; } else if(buttonGroup.getSelection().equals(SSichRadioButton.getModel())) { selectedType = TypeDamage.SSICH; }  controller.deleteDamage(selectedType, selectedRow);  controller.setWorking(false); } } "	0	0	0	0	1	0
RectF getPaddingRect() { update(); return paddingRect; } 	0	0	1	0	0	0
public List<GridCoordinates> getUserSetLiveCellCoordinates() { List<GridCoordinates> userSelectedLiveCells = new ArrayList<>(); for (int i=0; i < getChildCount(); i++) { lifeCell = (LifeCellView)getChildAt(i); if(lifeCell.getState()){ int x = i % getColumnCount(); int y = i/getColumnCount(); userSelectedLiveCells.add(new GridCoordinates(x, y)); } } return userSelectedLiveCells; } 	0	0	0	0	1	0
"@Test public void testUniversalExistentialFormula() throws Exception { String formula = ""#(y).(!(x).(x*y=y))""; // getting the translated z3 representation of the formula BoolExpr constraint = FormulaToZ3Translator.translatePredicate(formula, ctx);  s.add(constraint); Status check = s.check();  assertEquals(Status.SATISFIABLE, check); } "	0	0	0	0	1	0
"private String createWFAAxis(){ String seriesAxis = """"; String [] temp = buildDayAgeArray(client.getDetails().get(""history_umur""), client.getDetails().get(""history_umur_hari"")).split("",""); seriesAxis = temp[0].equals("""") ? """" : """"+(Integer.parseInt(temp[0])/30); for(int i=1;i<temp.length;i++){ seriesAxis = seriesAxis + "","" + (Integer.parseInt(temp[i])/30); } return seriesAxis; } "	0	0	0	0	1	0
"public static void main(String[] args) { SwingUtilities.invokeLater(()->{ try { UIManager.setLookAndFeel(""javax.swing.plaf.nimbus.NimbusLookAndFeel""); } catch (Throwable e) { FileHandler.log(e.getMessage()); } finally{ new FileCopyManager(appName); } }); } "	0	0	1	0	1	0
"public void attemptSignIn() { Log.i(TAG, ""Attempting to sign in"");  // Reset errors. mUserView.setError(null); mPasswordView.setError(null);  // Store values at the time of the login attempt. String username = mUserView.getText().toString().toLowerCase(Locale.US) .replaceAll(""\\s"", """"); String password = mPasswordView.getText().toString();  boolean cancel = false; View focusView = null;  // Check for a valid password, if the user entered one. if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) { mPasswordView.setError(getString(R.string.error_invalid_password)); focusView = mPasswordView; cancel = true; }  // Check for a valid username. if (TextUtils.isEmpty(username)) { mUserView.setError(getString(R.string.error_field_required)); focusView = mUserView; cancel = true; } else if (!isUserValid(username)) { mUserView.setError(getString(R.string.error_invalid_username)); focusView = mUserView; cancel = true; }  if (cancel) { // There was an error; don't attempt login and focus the first // form field with an error. focusView.requestFocus(); } else { // Kick off a background task to perform the user login attempt. mUser = username; mPassword = password; ParseQuery<AdminAccounts> query = ParseQuery.getQuery(AdminAccounts.class); query.whereContains(ParseConstants.admin_username, mUser); query.setLimit(2); query.findInBackground(new FindCallback<AdminAccounts>() { @Override public void done(List<AdminAccounts> arg0, ParseException arg1) { if (arg1 != null && arg0.size() < 1) { Log.i(TAG, ""No organization accounts found""); mUserView.setError(getString(R.string.error_incorrect_username)); mUserView.requestFocus(); } else { AdminAccounts x = arg0.get(0); // Log.i(TAG, ""user: "" + mUser + "" -- "" + x.getUsername()); // Log.i(TAG, ""pass"" + mPassword + "" -- "" + x.getPassword()); if (x.getUsername().equals(mUser) && x.getPassword().equals(mPassword)) { Log.i(TAG, ""Signed in successfully""); Toast.makeText(getApplicationContext(), ""Signed in successfully :)"", Toast.LENGTH_SHORT).show(); SharedPreferences.Editor editor = getSharedPreferences(PREFS_NAME, MODE_PRIVATE).edit(); editor.putBoolean(signedInPref, true); editor.putString(currentUserPref, x.getUsername()); editor.putString(currentOrgPref, x.getOrganizatonName()); if (editor.commit()) Log.i(TAG, ""Preferences saved successfully""); else Log.i(TAG, ""Preferences failed to save""); finish(); // ends activity once signed in } else { Log.i(TAG, ""Sign in failed... incorrect password""); mPasswordView.setError(getString(R.string.error_incorrect_password)); mPasswordView.requestFocus(); } } } }); } } "	1	0	1	0	0	0
"private void processCapabilitiesInNodeTemplate(NodeTemplate nodeTemplate, TNodeTemplate result) { final TNodeTemplate.Capabilities capabilities = new TNodeTemplate.Capabilities();  for (final Entry<String, Object> nodeTemplateCapability : nodeTemplate.getCapabilities().entrySet()) { if (nodeTemplateCapability.getValue() instanceof HashMap) { final Map<?, ?> capabilityDefinition = (Map<?, ?>) nodeTemplateCapability.getValue(); final TCapability tCapability = new TCapability(); tCapability.setName(nodeTemplateCapability.getKey()); String capabilityType = ""CAPABILITY_TYPE""; try { capabilityType = (String) capabilityDefinition.get(""type""); } catch (final Exception e) { System.out.println(""No capability type defined or illegal value, using default.""); } tCapability.setType(new QName(capabilityType)); tCapability.setId(result.getId() + ""_"" + nodeTemplateCapability.getKey()); // TODO: set properties if any available capabilities.getCapability().add(tCapability); } }  result.setCapabilities(capabilities); } "	0	0	0	0	1	0
"public TrendReportTransactionDataRoot getTrendReportByXML (String trendReportId, int runId) throws PcException, ClientProtocolException, IOException { String getTrendReportByXMLUrl = String.format(baseURL + ""/%s/%s/%s"", TREND_REPORT_RESOURCE_NAME, trendReportId,runId); HttpGet getTrendReportByXMLRequest = new HttpGet(getTrendReportByXMLUrl); HttpResponse response = executeRequest(getTrendReportByXMLRequest); String trendReportByXML = IOUtils.toString(response.getEntity().getContent()); return TrendReportTransactionDataRoot.xmlToObject(trendReportByXML); } "	0	0	0	0	1	0
"public String addCharges() { DBConnection connection = new DBConnection(); ResultSet results; int price = 0;  try { String query = ""SELECT price "" + ""FROM service_prices "" + ""WHERE service_name = '"" + service + ""' "" + ""AND   start_date <= '"" + LocalDate.now().toString() + ""' "" + ""AND   end_date >= '"" + LocalDate.now().toString() + ""'"";  results = connection.executeQuery(query); if (results.next()) { price = results.getInt(Table.PRICE); }  LocalDate aStartDate = LocalDate.parse(startDate); LocalDate anEndDate = LocalDate.parse(endDate);  // Adding one day so that the equals also covers the last day anEndDate = anEndDate.plusDays(1);  while (!aStartDate.equals(anEndDate)) { query = ""INSERT INTO bills "" + ""VALUES (DEFAULT, "" + reservationID + "", "" + ""'"" + aStartDate.toString() + ""', "" + price + "", "" + ""'"" + service + ""')""; connection.executeUpdate(query); aStartDate = aStartDate.plusDays(1); } } catch (Exception e) { e.printStackTrace(); }  return ""staff""; } "	0	0	0	0	1	0
@PostConstruct private void init() { analysisEngineURL = yonaProperties.getAnalysisService().getServiceURL(); } 	1	0	1	0	1	0
"@Override public void connectToNetwork(String containerId, String networkId) throws DockerException, InterruptedException { manageNetworkConnection(containerId, ""connect"", networkId); } "	0	0	0	0	1	0
"public static LTRScoringModel createModelFromFiles(String modelFileName, String featureFileName, String featureStoreName) throws ModelException, Exception { URL url = TestRerankBase.class.getResource(""/modelExamples/"" + modelFileName); final String modelJson = FileUtils.readFileToString(new File(url.toURI()), ""UTF-8""); final ManagedModelStore ms = getManagedModelStore();  url = TestRerankBase.class.getResource(""/featureExamples/"" + featureFileName); final String featureJson = FileUtils.readFileToString( new File(url.toURI()), ""UTF-8"");  Object parsedFeatureJson = null; try { parsedFeatureJson = ObjectBuilder.fromJSON(featureJson); } catch (final IOException ioExc) { throw new ModelException(""ObjectBuilder failed parsing json"", ioExc); }  final ManagedFeatureStore fs = getManagedFeatureStore(); // fs.getFeatureStore(null).clear(); fs.doDeleteChild(null, (featureStoreName == null ? ""_DEFAULT_"" : featureStoreName)); // is this safe?? // based on my need to call this I dont think that // ""getNewManagedFeatureStore()"" // is actually returning a new feature store each time fs.applyUpdatesToManagedData(parsedFeatureJson); ms.setManagedFeatureStore(fs); // can we skip this and just use fs directly below?  final LTRScoringModel ltrScoringModel = ManagedModelStore.fromLTRScoringModelMap( solrResourceLoader, mapFromJson(modelJson), ms.getManagedFeatureStore()); ms.addModel(ltrScoringModel); return ltrScoringModel; } "	0	0	1	1	1	0
"private static void error(String message) { System.out.println(""Titanium Image Resizer\n\nError: "" + message + ""\n\nUsage:\n  java -cp .:imgscalr-lib-4.2.jar -Djava.awt.headless=true resize <source> <dest> <width> [<height>]""); System.exit(1); } "	0	0	0	0	1	0
@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ClientCommunicator.getInstance().setContext(this.getActivity()); } 	0	0	0	0	1	0
private Formula expandTypeInvariant(Declaration.Named.Type td, Expr argument) { // Extract only the explicit invariants given using where clauses. Tuple<Block> invariant = td.getInvariant(); Formula result = Formulae.extractTypeInvariant(td.getVariableDeclaration().getType(), argument, types); for (int i = 0; i != invariant.size(); ++i) { // Convert the invariant clause into a formula Formula ith = Formulae.toFormula(invariant.getOperand(i), types); // result = result == null ? ith : new Formula.Conjunct(result, ith); } if (result == null) { return null; } else { // At this point, we must substitute the variable name used in // the type declaration for the name used as the invocation // argument. Expr.VariableAccess parameter = new Expr.VariableAccess(td.getVariableDeclaration()); result = (Formula) Formulae.substitute(parameter, argument, result); return Formulae.simplify(result, types); } } 	0	0	0	0	1	0
"private State applyImplicitAxioms(Formula truth, State state) { // First, recursively search for any implicit axioms Formula axiom = generateImplicitAxioms(truth);  if (axiom != null) { // Such an axiom was indeed found and we simply need to apply it. axiom = state.allocate(Formulae.simplify(axiom, types)); state = state.set(""implicit"", axiom, truth); } return state; } "	0	0	0	0	1	0
"@Override public void onClick(View v) { Context context = itemView.getContext();  if (!post.getUrl().isEmpty()) { Uri uri = Uri.parse(post.getUrl()); new ReadingHistoryController(context).addReadPost(context, post); CustomTabsIntent customTabsIntent = new CustomTabsIntent.Builder().build(); customTabsIntent.launchUrl(context, uri); } else { Toast.makeText(context, ""Link not found"", Toast.LENGTH_SHORT).show(); } } "	0	0	1	0	1	0
public void setUp() { persistence = Domain.getPersistenceService(); persistence.open(); loginService = new LoginService(persistence); } 	0	0	0	0	1	0
"private void registerLatency(Object latencyId, LatencyType type, boolean isStart, String service, Tuple tuple, Map<String, String> attributes, Throwable er) { final long nanos = System.nanoTime(); Latencies latencies; synchronized (cacheLock) { switch(type) { case EXECUTE: if (isStart) { latencies = new Latencies(nanos, service, tuple);  latenciesPerId.put(latencyId, latencies);  if (logger.isDebugEnabled()) { logger.debug(""Monitoring latency for key {}"", latencyId); } } else { latencies = latenciesPerId.getIfPresent(latencyId); if (latencies != null &&  latencies.setEndNanos(type, nanos) && latencies.getLatencyNanos(type).isPresent()) { latenciesPerId.invalidate(latencyId);  long endTimeMillis = System.currentTimeMillis(); long elapsedMillis = NANOSECONDS.toMillis(latencies.getLatencyNanos(type).get());  LatencyEvent event = new LatencyEvent(elapsedMillis).service(latencies.getService()).error(er);  if (tuple != null) { event.tuple(latencies.getTuple()); }  if (attributes != null) { event.attributes(attributes); }  event.attribute(""startTime"", Long.toString(endTimeMillis - elapsedMillis));  send(event);  final Optional<Long> emitLatencyNanos = latencies.getLatencyNanos(LatencyType.EMIT); if (emitLatencyNanos.isPresent()) { final long emitMillis = NANOSECONDS.toMillis(emitLatencyNanos.get());  if (emitMillis >= 5) { RiemannEvent emitLatencyEvent = new RiemannEvent() .metric(emitMillis) .service(service + "" emit latency."") .tags(""emit-latency"") .service(this.boltService);  if (tuple != null) { emitLatencyEvent.tuple(tuple); }  send(emitLatencyEvent); } }  if (logger.isDebugEnabled()) { logger.debug(""Monitored latency {} for key {}"", elapsedMillis, latencyId); } } else { if (!extraAckReportingExclusions.contains(this.boltService)) { send(new ExceptionEvent(""Latency monitor doesn't recognize key."").service(service)); if (er == null) { logger.warn(""Latency monitor doesn't recognize key {}."", latencyId); } else { send(new ExceptionEvent(er).service(this.boltService)); logger.warn(""Latency monitor doesn't recognize key {}. Swallowed exception {}"", latencyId, er); } } else { logger.trace(""Excluded event for non recognized key in latency monitor {}."", latencyId); } } } break; default: latencies = latenciesPerId.getIfPresent(latencyId); if (latencies != null) { if (isStart) { latencies.setStartNanos(type, nanos); } else { latencies.setEndNanos(type, nanos); } } break; } } } "	0	0	1	0	0	0
"@Nullable @Override public Void apply(@Nullable Action.ActionContext context) { if (context == null) throw new NullPointerException(""WHUT""); IInventory inv = context.slot.inventory; final Multiset<ItemStackHolder> itemcounts = InventoryHandler.INSTANCE.getInventoryContent(context); final UnmodifiableIterator<Multiset.Entry<ItemStackHolder>> itemsIterator = Multisets.copyHighestCountFirst(itemcounts).entrySet().iterator(); int slotLow; int slotHigh; if (inv == context.player.inventory) { boolean isPlayerContainer = context.player.openContainer == context.player.inventoryContainer; boolean sourceHotBar = context.slot.getSlotIndex() < 9; InventoryHandler.InventoryMapping m = context.mapping.get(context.player.inventory); int offset = isPlayerContainer ? 4 : 0; slotLow = sourceHotBar ? m.end - 8 : m.begin + offset; slotHigh = sourceHotBar ? m.end + 1: m.end - 8; } else { InventoryHandler.InventoryMapping m = context.mapping.get(context.slot.inventory); slotLow = m.begin; slotHigh = m.end + 1; }  Multiset.Entry<ItemStackHolder> stackHolder = itemsIterator.hasNext() ? itemsIterator.next() : null; int itemCount = stackHolder != null ? stackHolder.getCount() : 0; for (int i = slotLow; i < slotHigh; i++) { final Slot slot = context.player.openContainer.getSlot(i); ItemStack target = null; if (itemCount > 0 && stackHolder != null) { target = stackHolder.getElement().is.copy(); target.stackSize = itemCount > target.getMaxStackSize() ? target.getMaxStackSize() : itemCount; } if (!slot.isItemValid(target) || !slot.canTakeStack(context.player)) continue; slot.putStack(target); itemCount-= (target != null ? target.stackSize : 0); if (itemCount ==0) { stackHolder = itemsIterator.hasNext() ? itemsIterator.next() : null; itemCount = stackHolder != null ? stackHolder.getCount() : 0; } } return null; } "	0	0	0	0	1	0
public void resolve(List<JInterfaceType> resolvedInterfaces, String jsNamespace) { assert JType.replaces(resolvedInterfaces, superInterfaces); superInterfaces = Lists.normalize(resolvedInterfaces); if (Strings.isNullOrEmpty(this.jsNamespace)) { this.jsNamespace = jsNamespace; } } 	0	0	0	0	1	0
"@Override public void stateChanged(CuratorFramework client, ConnectionState newState) { if ( newState == ConnectionState.RECONNECTED ) { try { log.debug(""Re-registering due to reconnection""); reRegisterServices(); } catch ( Exception e ) { log.error(""Could not re-register instances after reconnection"", e); } } } "	0	0	1	0	1	0
@Override public void viewWillLayoutSubviews () { super.viewWillLayoutSubviews();  if (lastImageViewSize == null || !imageView.getBounds().getSize().equalToSize(lastImageViewSize)) { updateImage(); } } 	0	0	0	0	1	0
public static ArtMethod of(Method method) {  if (Build.VERSION.SDK_INT >= 23) { return  Runtime.is64Bit() ? new ArtMethodStructV23_64Bit(method) : new ArtMethodStructV23(method); } else if (Build.VERSION.SDK_INT >= 21) { return Runtime.is64Bit() ? new ArtMethodStructV22_64Bit(method) : new ArtMethodStructV22(method); } else { return new ArtMethodStructV19(method); } } 	0	0	1	1	0	0
@Override public float getCost() { float cout = 0;  cout += Constantes.coutCamion; cout += Constantes.coutDureeCamion * (this.getDuree()/3600); cout += Constantes.coutTrajetCamion * (this.getDistance()/1000);  if(type == Type.TRAIN) { cout += Constantes.coutSecondeRemorque; cout += Constantes.coutTrajetSecondeRemorque * (this.getDistance()/1000); }  setCost(cout);  return cout; } 	0	0	0	0	1	0
@Test public void collectionRemoveAll() { Collection< Integer > _src = new ArrayList<>(); Collection< Integer > _ccol = Collections.makeFilteredCollection( _src, new Multiple< Integer >( 1 ) );  _src.add( 1 ); _src.add( 2 ); _src.add( 3 ); _src.add( 4 );  Assert.assertTrue( _ccol.removeAll( Arrays.asList( new Integer[] { 1, 2, 3, 4 } ) ) ); } 	0	0	1	1	1	0
public void safeDispose() { Display.getDefault().asyncExec(new Runnable() { @Override public void run() { if (panelController != null) { panelController.dispose(); }  if (!windowShell.isDisposed()) { windowShell.dispose(); } } }); } 	0	0	1	1	0	0
"public List<ODocument> getPublishedPostsByTag(String tag) { return query(""select * from post where status='published' where ? in tags order by date desc"", tag); } "	0	0	0	0	1	0
public void mousePressed(double x, double y) { Bounds bounds = group.localToScene(group.getBoundsInLocal());  if(!(x > bounds.getMaxX() || x < bounds.getMinX() || y > bounds.getMaxY() || y < bounds.getMinY())) { editorRunTimeData.mousePressed((float)x, (float)y); } else { /** Click is not in the group */ } } 	1	0	0	0	1	0
public boolean hasPermissionToDeploy() { for (Map.Entry<String, List<RestrictionDTO>> entry : getDeployableRoles().entrySet()) { if (sessionContext.isCallerInRole(entry.getKey())) { return true; } } return hasUserRestriction(Permission.DEPLOYMENT.name(), null, null, null, null); } 	0	0	0	0	1	0
"@Override public IModel loadModel(ResourceLocation modelLocation) { // this function is actually getting called on a PER TOOL basis, not per modifier // we therefore need to look through all modifiers to construct a model containing all modifiers for that tool  int start = modelLocation.getResourcePath().lastIndexOf('/'); String toolname = modelLocation.getResourcePath().substring(start < 0 ? 0 : start + 1, modelLocation.getResourcePath().length() - EXTENSION .length()); toolname = toolname.toLowerCase();  // we only load once. Without cache we'd have to load ALL modifier files again for each tool! if(cache == null) { cache = new THashMap<>(); loadFilesIntoCache(); }  if(!cache.containsKey(toolname)) { return ModelLoaderRegistry.getMissingModel(); }  ModifierModel model = new ModifierModel();  // generate the modelblocks for each entry for(Map.Entry<String, String> entry : cache.get(toolname).entrySet()) { // check if the modifier actually exists in the game so we don't load unnecessary textures IModifier mod = TinkerRegistry.getModifier(entry.getKey());  if(mod == null) { TinkerRegistry.log.debug(""Removing texture {} for modifier {}: No modifier present for texture"", entry.getValue(), entry.getKey()); continue; }  // using the String from the modifier means an == check succeeds and fixes lowercasing from the loading from files model.addModelForModifier(mod.getIdentifier(), entry.getValue());  // register per-material modifiers for texture creation if(mod.hasTexturePerMaterial()) { CustomTextureCreator.registerTexture(new ResourceLocation(entry.getValue())); } }  return model; } "	0	0	1	0	1	0
"private void loadFilesIntoCache() { cache.put(defaultName, new THashMap<String, String>());  // loop through all knows modifier-model-files for(Map.Entry<String, List<ResourceLocation>> entry : locations.entrySet()) { String modifier = entry.getKey(); List<ResourceLocation> modLocations = entry.getValue(); for(ResourceLocation location : modLocations) { try { // load the entries in the json file Map<String, String> textureEntries = ModelHelper.loadTexturesFromJson(location);  // save them in the cache for(Map.Entry<String, String> textureEntry : textureEntries.entrySet()) { String tool = textureEntry.getKey().toLowerCase(); String texture = textureEntry.getValue();  if(!cache.containsKey(tool)) { cache.put(tool, new THashMap<String, String>()); } // we don't allow overriding if(!cache.get(tool).containsKey(modifier)) { cache.get(tool).put(modifier, texture); } } } catch(IOException e) { TinkerRegistry.log.error(""Cannot load modifier-model {}"", entry.getValue()); } }  if(!cache.get(defaultName).containsKey(modifier)) { throw new TinkerAPIException(String.format(""%s Modifiers model does not contain a default-entry!"", modifier)); } }  Map<String, String> defaults = cache.get(defaultName);  // fill in defaults where models are missing Iterator<Map.Entry<String, Map<String, String>>> toolEntryIter = cache.entrySet().iterator(); // todo: change this to iterate over all registered tools instead? while(toolEntryIter.hasNext()) { Map.Entry<String, Map<String, String>> toolEntry = toolEntryIter.next(); //String tool = toolEntry.getKey(); Map<String, String> textures = toolEntry.getValue();  for(Map.Entry<String, String> defaultEntry : defaults.entrySet()) { // check if the tool has an entry for this modifier, otherwise fill in default if(!textures.containsKey(defaultEntry.getKey())) { textures.put(defaultEntry.getKey(), defaultEntry.getValue()); } } } } "	0	0	1	0	1	0
"public static String sanitizeLocalizationString(String string) { return string.toLowerCase().replaceAll("" "", """"); } "	0	0	0	0	1	0
public EnzymeModel getWholeModel(String acc) throws EnzymeRetrieverException { // This model includes summary, reactions and pathways: EnzymeModel model = getEnzymeModel(acc); // Add the missing bits: addReactionsPathways(model); addProteinStructures(model); addMolecules(model); addDiseases(model); return model; } 	0	0	0	0	1	0
@Override public void onViewReady(View view, Bundle savedInstanceState, Reason reason) { super.onViewReady(view, savedInstanceState, reason);  emptyView = view.findViewById(R.id.fragment_note_list_listViewEmpty);  buttonAddNote = (Button) view.findViewById(R.id.fragment_note_list_buttonAdd); buttonAddNote.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { noteController.toCreateNote(); } });  mListView = (RecyclerView) view.findViewById(R.id.fragment_note_list_listView); mLayoutManager = new LinearLayoutManager(getActivity()); mListView.setLayoutManager(mLayoutManager);  if (reason == Reason.FIRST_TIME) { updateList(); }  } 	0	0	0	0	1	0
@Async public void setGenres() { genres.forEach((book, genre) -> { book = booksRepository.findByTitleAndSubtitleAndPublisher(book.getTitle(), book.getSubtitle(), book.getPublisher()); book.getGenres().add(genre); booksRepository.save(book); }); genres.clear(); } 	0	0	0	1	1	0
@Override public int read() throws IOException { return buf.get(); } 	0	0	0	0	1	0
"protected void doPut(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { HttpSession session = request.getSession(false); UserBean user = (session != null) ? (UserBean) session.getAttribute(""user"") : null;  if (user == null) { response.sendError(403); } else { //Update in DB String headerStudenstId = request.getHeader(""studentsId""); String headerTestId = request.getHeader(""testId""); String [] id = headerStudenstId.split("","");  int size = id.length; int [] studentsId = new int[size];  int testId = Integer.parseInt(headerTestId);  for (int i = 0; i < size; i++) { studentsId[i] = Integer.parseInt(id[i]); }  if (TestsDAO.openTest(studentsId, testId)) { response.getOutputStream().println(""Success""); } else { response.sendError(1); }  } } "	0	0	0	0	1	0
public Vector3[] getChevronBlocks() { Orientations rotation = Orientations.from(getRotation()); return structure.mapType(xCoord, yCoord, zCoord, 2, rotation); } 	0	0	0	0	1	0
@Override public AxisAlignedBB getRenderBoundingBox() { Vector3 dim = structure.getStructureDimensions(); Vector3 min = new Vector3(this).sub(dim), max = new Vector3(this).add(dim); return Vector3.makeAABB(min, max); } 	0	0	0	0	1	0
@Override public boolean addComponentParts(World w, Random r, StructureBoundingBox bb) { recalcHeightOffsets(w, bb, 1); Vector3 v0 = new Vector3(0, -4, 0); Vector3 v1 = new Vector3(scatteredFeatureSizeX - 1, 0, scatteredFeatureSizeZ - 1); Vector3 vMin = Vector3.zero; Vector3 vMax = new Vector3(scatteredFeatureSizeX - 1, scatteredFeatureSizeY - 1, scatteredFeatureSizeZ - 1); fill(w, bb, vMin, vMax, net.minecraft.init.Blocks.air); fill(w, bb, v0, v1, net.minecraft.init.Blocks.sandstone); StructureConfiguration config = TileStargateBase.structure;  Vector3 center = new Vector3(Math.floor(scatteredFeatureSizeX / 2), 0, Math.floor(scatteredFeatureSizeZ / 2)); paintStructure(config, w, bb, center.fx(), center.fy(), center.fz(), rotation, net.minecraft.init.Blocks.sandstone, 0); return true; } 	0	0	0	0	1	0
"@Test public void getQuestionaires() { Questionnaire [] questionnaires = mLibrary.getQuestionnaires(); assertTrue(questionnaires.length > 0); for(Questionnaire q:questionnaires) { Log.e(TAG, ""questionaire: ""+q.dbId); } } "	0	0	0	0	1	0
"public static void main(String[] args){ Ex nest = new AddEx(); Ex kepler = new DivEx(); nest.add(kepler); System.out.println(nest.report());  kepler.multi(new PlainEx(20)); kepler.multi(new VarEx(""Pipka"")); kepler.multi(new VarEx(""Pipka"")); System.out.println(nest.report()); kepler.div(new PlainEx(4)); kepler.div(new VarEx(""Pipka"")); String uno = nest.report();  Cruncher crunchy = new DivCruncherSimplify(); System.out.println(crunchy.crunch(kepler)); String duo = nest.report();    System.out.println(""Input : "" + uno); System.out.println(""=====================""); System.out.println(""Output : "" + duo);  } "	1	0	1	0	1	0
"public static boolean isRedirectionUriValid(String redirectUri) {  if (log.isDebugEnabled()) { log.debug(""Validating uri: "" + redirectUri); }  if (IdentityUtil.isBlank(redirectUri)) { log.error(""The redirection URI is either null or blank.""); return false; }  try { //Trying to parse the URI, just to verify the URI syntax is correct. URI redirectURL = new URI(redirectUri); } catch (URISyntaxException e) { String errorMessage = ""The redirection URI: "" + redirectUri + "", is not a valid URI.""; log.error(errorMessage, e); return false; } return true; } "	1	0	0	1	1	0
public int getContentInsetStart() { return mContentInsets.getStart(); } 	0	0	1	0	1	0
"@Test public void shouldReplaceNodeWhenItsALinkThatWillBeInTheContentStoreWhenAvailableInContentStore() { bodyProcessor = new MethodeLinksBodyProcessor(documentStoreApiClient, uri); when(builder.get(ClientResponse.class)).thenReturn(clientResponseWithCode(200));  String body = ""<body><a href=\""http://www.ft.com/cms/s/"" + uuid + "".html\"" title=\""Some absurd text here\""> Link Text</a></body>""; String processedBody = bodyProcessor.process(body, new DefaultTransactionIdBodyProcessingContext(TRANSACTION_ID)); assertThat(processedBody, is(identicalXmlTo(""<body><ft-content id=\"""" + uuid + ""\"" title=\""Some absurd text here\"" type=\"""" + MethodeLinksBodyProcessor.ARTICLE_TYPE + ""\""> Link Text</ft-content></body>""))); } "	0	0	1	0	1	0
@Override public Collection<String> getKeys() { return map.keySet(); } 	0	0	1	0	1	0
"@Override public final void doReload(MaterialData data) { try { GameThread.synch(() -> { disposalAction.run(); uniformLocationMap.clear();  shader = (GLSLShader) data.getShader(); recompile(); rebindVaribles(data);  }); } catch (InterruptedException e) { logger.error(""Failed to reload {}"", getUrn(), e); } } "	0	0	1	0	1	0
@Override public void bindTexture(ResourceLocation resLoc) { this.render.bindTexture(resLoc); } 	0	0	0	0	1	0
"private void testThrowablePrinting() throws TestingException { int expectedLine = Utils.getMethodCaller(0).getLineNum() + 1; String got = Utils.toStringThrowable(new Throwable(""Example"")); String[] pts = Utils.split(got, '\n'); assertObjectEqual(pts[0], ""java.lang.Throwable: Example"", ""bad line 1 of Throwable dump""); assertObjectEqual(pts[1], ""\tat ccre.testing.TestWorkarounds.testThrowablePrinting(TestWorkarounds.java:"" + expectedLine + "")"", ""bad line 1 of Throwable dump"");  assertIdentityEqual(Utils.toStringThrowable(null), null, ""should have returned null!""); } "	0	0	0	0	1	0
"public static String getChartPageUrlPostQc(String baseUrl, String geneAcc, String alleleAcc, ZygosityType zygosity, String parameterStableId, String pipelineStableId, String phenotypingCenter) { String url = baseUrl; url += ""/charts?accession="" + geneAcc; url += ""&allele_accession="" + alleleAcc; if (zygosity != null) { url += ""&zygosity="" + zygosity.name(); } if (parameterStableId != null) { url += ""&parameter_stable_id="" + parameterStableId; } if (pipelineStableId != null) { url += ""&pipeline_stable_id="" + pipelineStableId; } if (phenotypingCenter != null) { url += ""&phenotyping_center="" + phenotypingCenter; } return url; } "	0	0	0	0	1	0
public void open() { frame.show(); } 	0	0	1	0	1	0
@Override public void onClick(View v) { loadData(force); } 	0	0	0	0	1	0
@Override public void saveArticle(ArticleDTO article) { saveArticle(article.fetchArticle()); } 	0	0	0	0	1	0
private ResultSet query(PreparedStatement sql){ try{ ResultSet tmp = sql.executeQuery(); try{ sql.close(); } catch(SQLException e){ Logger lgr = Logger.getLogger(DB.class.getName()); lgr.log(Level.SEVERE, e.getMessage(), e); } return tmp; } catch(SQLException e){ Logger lgr = Logger.getLogger(DB.class.getName()); lgr.log(Level.WARNING, e.getMessage(), e); } return null; } 	0	0	0	1	0	0
private boolean startRadialAttack() { boolean ret = this.world.getDifficulty() == EnumDifficulty.HARD || this.getHealth() <= this.getMaxHealth() * 0.75f; if (ret) { if (this.getHealth() <= this.getMaxHealth() * 0.25f) { this.setRadialSpurts(true); if (this.world.getDifficulty() == EnumDifficulty.HARD) { this.setInvulTime(84); } } else if (this.getHealth() <= this.getMaxHealth() * 0.5f && this.world.getDifficulty() == EnumDifficulty.HARD) { this.setRadialSpurts(true); } this.setRadialSkullTicks(this.getRadialSkullTicks() + 1); radialStartYaw = ((this.rotationYaw + 180) % 360) - 180; this.setAttackTarget(null); this.world.playSound(null, new BlockPos(this.posX, this.posY + (double) this.getEyeHeight(), this.posZ), ModSounds.charge, SoundCategory.HOSTILE, 1.0f, 1.0f); } return ret; } 	0	0	0	0	1	0
"private void processImportBundle ( final BundleInformation result, final Attributes ma ) { for ( final AttributedValue av : emptyNull ( Headers.parseList ( ma.getValue ( Constants.REQUIRE_BUNDLE ) ) ) ) { final String name = av.getValue (); final String vs = av.getAttributes ().get ( ""version"" ); VersionRange vr = null; if ( vs != null ) { vr = new VersionRange ( vs ); } final boolean optional = ""optional"".equals ( av.getAttributes ().get ( ""resolution"" ) ); final boolean reexport = ""reexport"".equals ( av.getAttributes ().get ( ""visibility"" ) ); result.getBundleRequirements ().add ( new BundleRequirement ( name, vr, optional, reexport ) ); } } "	0	0	0	0	1	0
public boolean hasFetchedServerEntity(ServerEntityIdentifier serverEntityIdentifier) { return fetchedServerEntityStream().filter(serverEntity -> serverEntity.is(serverEntityIdentifier)).findFirst().isPresent(); } 	0	0	0	0	1	0
"public static String getDatabasePath(Context context) { DatabaseSettings dbSettings = new AppSettings(context).getDatabaseSettings();  String databasePath = dbSettings.getDatabasePath(); if (BuildConfig.DEBUG) Log.d(LOGCAT, ""database setting: "" + databasePath);  if (databasePath != null) { // Use the db path stored in the preferences. File databaseFile = new File(databasePath); if (databaseFile.getAbsoluteFile().exists())  { return databaseFile.toString(); } }  // otherwise try other paths or create the default database.  String defaultDirectory = getDatabaseDirectory(context); String defaultPath = defaultDirectory + ""/data.mmb"";  dbSettings.setDatabasePath(defaultPath);  // Show notification ExceptionHandler handler = new ExceptionHandler(context); if (databasePath.equals(defaultPath)) { handler.showMessage(""Default database file will be created at "" + defaultPath); } else { handler.showMessage(""Database "" + databasePath + "" not found. Using default:"" + defaultPath); }  return defaultPath; } "	0	0	0	0	1	0
@Override public void onSuccess(TransactionResponse response) { transactionResponse = response; view.onPaymentFailure(response); } 	0	0	0	0	1	0
"public static Component render(final FileUnzipEvent event) { Preconditions.checkNotNull(event); return Text.of(""Read the lock file. "", Color.BLUE); } "	0	0	0	0	1	0
"public void deleteIngredient(int id) throws SQLException { connection = myDatabase.getDatabaseConn(); // First, ensure this ingredient isn't in use by any recipes; must maintain data integrity PreparedStatement statement = connection.prepareStatement(""SELECT * FROM uses WHERE ingredient_id = ?;""); statement.setInt(1,id); ResultSet results = statement.executeQuery(); if(results.next()){ JOptionPane.showMessageDialog(null, ""This ingredient is in use by at least one recipe and cannot be deleted.""); } else{ statement = connection.prepareStatement(""DELETE FROM ingredient WHERE id = ?;""); statement.setInt(1,id); statement.execute(); } connection.close(); } "	0	0	0	0	1	0
public void compute() { if (expr != null) if (expr instanceof NodeBinary) { final NodeBinary node = (NodeBinary) expr; if (node.operatorOverloadFunc == null) { // Get the precedent type of the operands to decide how they // should be compared final EnumInstructionOperand type = Semantics.getPrecedentType(node.exprType1, node.exprType2).getInstructionType();  // Cast the binary expression's sub expressions if necessary if (node.exprType1.getInstructionType() != type) addFuncStmt(new GenNodePrimitiveCast(node.exprType1.getInstructionType(), type)); else if (node.exprType2.getInstructionType() != type) addFuncStmt(new GenNodePrimitiveCast(node.exprType2.getInstructionType(), type));  // Decide which opcode to use switch (type) { case INT: case BYTE: case SHORT: case BOOL: node.expr1.generate(); node.expr2.generate();  // Integer type operands are handled by one single // opcode switch (node.operator.operation) { case LESS: opcode = IF_ICMPGE; break; case GREATER: opcode = IF_ICMPLE; break; case EQUAL: opcode = IF_ICMPNE; break; case NOT_EQUAL: opcode = IF_ICMPEQ; break; case LESS_EQUAL: opcode = IF_ICMPGT; break; case GREATER_EQUAL: opcode = IF_ICMPLT; break; } break; case LONG: case DOUBLE: case FLOAT: node.expr1.generate(); node.expr2.generate(); // Non integer-types must be compared first if (type == EnumInstructionOperand.LONG) extraOpcodes.add(Opcodes.LCMP); else if (type == EnumInstructionOperand.DOUBLE) extraOpcodes.add(DCMPG); else if (type == EnumInstructionOperand.FLOAT) extraOpcodes.add(FCMPG); switch (node.operator.operation) { case LESS: opcode = IFGE; break; case GREATER: opcode = IFLE; break; case EQUAL: opcode = IFNE; break; case NOT_EQUAL: opcode = IFEQ; break; case LESS_EQUAL: opcode = IFGT; break; case GREATER_EQUAL: opcode = IFLT; break; } break; default: // If it is a null comparison expression final boolean expr1IsNull = node.expr1 instanceof NodeNull, expr2IsNull = node.expr2 instanceof NodeNull; if (expr1IsNull ^ expr2IsNull) {  // Generate the expression that isn't a null // expression if (!expr1IsNull) node.expr1.generate(); else node.expr2.generate(); switch (node.operator.operation) { case NOT_EQUAL: opcode = IFNULL; break; case EQUAL: opcode = IFNONNULL; break; } } else // Compare the references switch (node.operator.operation) { case NOT_EQUAL: opcode = IF_ACMPEQ; break; case EQUAL: opcode = IF_ACMPNE; break; }  } } else { // If it is an operator overloaded expression, then generate // the function call and then check if the return value was // true expr.generate(); opcode = IFEQ; } } else { // If it isn't a binary expression, then generate it and check // if the return value was true expr.generate(); opcode = IFEQ; } } 	0	0	0	0	1	0
@Override public InputStream getInputStream() throws IOException, UnsupportedFileOperationException { return file.getInputStream(); } 	0	0	1	1	0	0
@Override public RandomAccessInputStream getRandomAccessInputStream() throws IOException, UnsupportedFileOperationException { return file.getRandomAccessInputStream(); } 	0	0	1	1	0	0
@Override public void copyRemotelyTo(AbstractFile destFile) throws IOException, UnsupportedFileOperationException { file.copyRemotelyTo(destFile); } 	0	0	1	1	0	0
public final void importPermissions(AbstractFile sourceFile) throws IOException, UnsupportedFileOperationException { importPermissions(sourceFile,isDirectory() ? FilePermissions.DEFAULT_DIRECTORY_PERMISSIONS : FilePermissions.DEFAULT_FILE_PERMISSIONS); } 	0	0	1	1	0	0
public final void mkdir(String name) throws IOException, UnsupportedFileOperationException { getChild(name).mkdir(); } 	0	0	1	1	0	0
protected final void checkCopyRemotelyPrerequisites(AbstractFile destFile, boolean allowCaseVariations, boolean allowDifferentHosts) throws IOException, FileTransferException { if(!fileURL.schemeEquals(fileURL) || !destFile.getTopAncestor().getClass().equals(getTopAncestor().getClass()) || (!allowDifferentHosts && !destFile.getURL().hostEquals(fileURL))) throw new IOException();  checkCopyPrerequisites(destFile, allowCaseVariations); } 	0	0	1	1	0	0
"protected void evaluate(List<String> trainTokens, List<String> testTokens, List<String> pred) { double correct_in = 0; double incorrect_in = 0; double correct_out = 0; double incorrect_out = 0;  Set<String> trainVocab = new HashSet<>(trainTokens);  for (int i = 0; i < testTokens.size(); i++) { String testToken = testTokens.get(i); String string = pred.get(i); String[] split = string.split("" "");  if (trainVocab.contains(testToken)) { if (split[0].equals(split[1])) { correct_in++; } else { incorrect_in++; } } else { if (split[0].equals(split[1])) { correct_out++; } else { incorrect_out++; } }  } invocabAccuracy = correct_in / (correct_in + incorrect_in); outvocabAccuracy = correct_out / (correct_out + incorrect_out); } "	0	0	0	0	1	0
"@Override public void initialize(URL location, ResourceBundle resources) { menuBar.setUseSystemMenuBar(true);  if (System.getProperty(""os.name"").startsWith(""Mac OS X"")) { System.setProperty(""bendalab.animalkeeping"", ""Animal Keeping""); //Application.getApplication().setQuitHandler((quitEvent, quitResponse) -> closeApplication()); //Application.getApplication().setQuitStrategy(QuitStrategy.CLOSE_ALL_WINDOWS); //Application.getApplication().setAboutHandler(new myAboutHandler()); aboutMenuItem.setVisible(false); quitMenuItem.setVisible(false); } findBox.getItems().clear(); findBox.getItems().addAll(""Person"", ""Subject"", ""Housing unit"", ""Treatment""); findBox.getSelectionModel().select(""Subject""); this.scrollPane.setContent(null); if (!Main.isConnected()) { LoginController login = new LoginController(); login.addEventHandler(LoginController.DatabaseEvent.CONNECTING, this::connectedToDatabase); login.addEventHandler(LoginController.DatabaseEvent.CONNECTED, this::connectedToDatabase); login.addEventHandler(LoginController.DatabaseEvent.FAILED, this::connectedToDatabase); this.scrollPane.setContent(login); } else { try{ connectedToDatabase(null);} catch(Exception e){ e.printStackTrace(); } } borderPane.prefHeightProperty().bind(this.prefHeightProperty()); navigationBar.prefHeightProperty().bind(this.prefHeightProperty());  panes = new Vector<>(); panes.add(inventoryPane); panes.add(subjectsPane); panes.add(treatmentsPane); panes.add(personsPane); panes.add(animalHousingPane); panes.add(licensesPane); refreshItem.setAccelerator(KeyCombination.keyCombination(""Shortcut+R"")); views = new HashMap<>(); } "	0	0	0	0	1	0
"@Override public void bindToPost(Object pojoJson, final OnDetailsInteractionListener listener) {  Following following;  // We are expected an Following object and nothing else if (pojoJson instanceof Following) {  following = (Following) pojoJson;  } else {  Log.e(TAG, ""Unexpected object type found when expecting an Following object"");  return;  }  // Display items to be populated final ImageView headerImageView = (ImageView) itemView.findViewById(R.id.header_imageview); final ImageView profileImageView = (ImageView) itemView.findViewById(R.id.profile_imageview); final TextView usernameTextView = (TextView) itemView.findViewById(R.id.username_textview); final TextView summaryTextView = (TextView) itemView.findViewById(R.id.summary_textview); final TextView descriptionTextView = (TextView) itemView.findViewById(R.id.description_textView); final TextView followedTextView = (TextView) itemView.findViewById(R.id.followed_textview); final TextView followingTextView = (TextView) itemView.findViewById(R.id.views_textView);  mDatabase.child(""users"").child(following.uid).addListenerForSingleValueEvent(new ValueEventListener() {  @Override public void onDataChange(DataSnapshot dataSnapshot) {  // Perform the JSON to Object conversion final User user = dataSnapshot.getValue(User.class);  // TODO: what to do when it is null, Log message at the least for now....!!!!  // Verify there is a user to work with if (user != null) {  populateImageView(buildFileReference(user.getUid(), user.getHeaderImageUid(), StorageDataType.USERS), headerImageView); populateImageView(buildFileReference(user.getUid(), user.getProfileImageUid(), StorageDataType.USERS), profileImageView); populateTextView(user.getUsername(), usernameTextView); populateTextView(user.getSummary(), summaryTextView); populateTextView(user.getDescription(), descriptionTextView); populateTextView(Integer.toString(user.getFollowedCount()), followedTextView); populateTextView(Integer.toString(user.getFollowing().size()), followingTextView);  // Add a click listener to the view in order to get more details about the user itemView.setOnClickListener(new View.OnClickListener() {  @Override public void onClick(View view) {  // Notify the the listener (aka MainActivity) of the details selection listener.onDetailsSelection(user.getUid(), StorageDataType.USERS);  }  });  }  }  @Override public void onCancelled(DatabaseError databaseError) {  Log.w(TAG, ""Unexpected cancellation of a Firebase Database query"");  }  });  } "	1	1	0	0	0	0
"public  static ModelAndView deleteFromCart(Request req, Response res) {  int id = Integer.parseInt(req.queryParams(""id"")); ShoppingCartDao shoppingCartDataStore = ShoppingCartDaoMem.getInstance(req); shoppingCartDataStore.remove(id); return renderProducts(req, res); } "	0	0	0	0	1	0
public AnchorPane getUpperPane() { return upperPane; } 	0	0	0	1	0	0
public final void showContextMenu(double x, double y) { cm.show(parent, x, y); } 	0	0	1	0	0	0
private void setWon() { this.lost = true; } 	0	0	1	0	1	0
"@Override public void match(Match match) { if (match.getLocation() != null) { StepDefinitionMatch stepDef = (StepDefinitionMatch) match; Step step = (Step) getFieldValueInObject(stepDef, ""step""); lifecycle.fire(new StepStartedEvent( step.getKeyword() + "" "" + step.getName())); } } "	0	0	0	0	1	0
public static <RETURN> Future<RETURN> callRemoteMethod(final RSBRemote remote, final Class<? extends RETURN> returnClass) throws CouldNotPerformException { return callRemoteMethod(null, remote, returnClass, 3); } 	0	0	0	0	1	0
public static <RETURN> Future<RETURN> callRemoteMethod(final Object argument, final RSBRemote remote, final Class<? extends RETURN> returnClass) throws CouldNotPerformException { return callRemoteMethod(argument, remote, returnClass, 3); } 	0	0	0	0	1	0
public static Future<Object> callRemoteMethod(final RSBRemote remote) throws CouldNotPerformException { return callRemoteMethod(null, remote, Object.class, 3); } 	0	0	0	0	1	0
"static String getWord(int tryNum, int maxTries) { String word; Scanner scanner = new Scanner(System.in);  System.out.println(""Try #"" + tryNum + "" out of "" + maxTries + "":""); System.out.println(""Please enter a word built from the letters above:""); word = scanner.next(); return word.toUpperCase(); } "	0	0	0	0	1	0
public void runTests(Vector<String> tests) { // We create this runtime for startReport(), I know it never actually gets used... XProcConfiguration config = new XProcConfiguration(schemaAware); runtime = new XProcRuntime(config);  startReport();  for (String testfile : tests) { run(testfile); }  endReport(); } 	0	0	0	0	1	0
public void releaseStateLock() { stateLock.unlock(); } 	0	0	1	1	0	0
protected OperationInterface createInterfaceInPackageBasedOnJaMoPPPackageWithCorrespondence( final String packageName, final String interfaceName) throws CoreException { Package jaMoPPPackage = this.getPackageWithNameFromCorrespondenceModel(packageName); return this.createInterfaceInPackage(jaMoPPPackage.getNamespacesAsString() + jaMoPPPackage.getName(), interfaceName, true); } 	1	0	1	1	0	0
"@Override public void resizeResourceQuota(ServiceInstance instance, Map<String, Object> cuzQuota) { String topic = getTopic(instance); try { KafkaClient.getClient().changeConfig(topic, trans(cuzQuota)); LOG.info(""Resize kafka quota for topic [{}] successful.""); } catch (OCKafkaException e) { LOG.error(""Change kafka topic [{}] config failed: {}"", topic, e); throw new RuntimeException(e); } } "	0	0	0	0	1	0
private int handleRead(int index, int vaddr, int bufferSize) { if  (index < 0 || index > MAXFD) return -1;  SimpleFileDescriptor fd = simpleFileDescriptors[index]; if (fd.file == null) return -1;  byte[] buffer = new byte[bufferSize]; int readSize = fd.file.read(buffer, 0, bufferSize);  if (readSize <= 0) return 0;  int writeSize = writeVirtualMemory(vaddr, buffer); return writeSize; } 	1	0	1	0	1	0
public Double getMediaPlayhead() { return this.plugin.getPlayhead(); } 	0	0	0	0	1	0
@SubscribeEvent public void onPlayerInteract(PlayerInteractEvent event) { if(currentMultiblock != null && anchor == null && event.action == Action.RIGHT_CLICK_BLOCK && event.entityPlayer == Minecraft.getMinecraft().thePlayer) { anchor = event.pos; angle = MathHelper.floor_double(event.entityPlayer.rotationYaw * 4.0 / 360.0 + 0.5) & 3; event.setCanceled(true); } } 	0	0	0	0	1	0
public static boolean canEnchanterExist(World world, BlockPos pos, EnumFacing.Axis axis) { for(BlockPos obsidian : OBSIDIAN_LOCATIONS) if(world.getBlockState(pos.add(obsidian)).getBlock() != Blocks.obsidian) return false;  for(BlockPos pylon : PYLON_LOCATIONS.get(axis)) if(world.getBlockState(pos.add(pylon)).getBlock() != ModBlocks.pylon || !BotaniaAPI.internalHandler.isBotaniaFlower(world, pos.add(pylon))) return false;  for(BlockPos flower : FLOWER_LOCATIONS) if(!BotaniaAPI.internalHandler.isBotaniaFlower(world, pos.add(flower))) return false;  return true; } 	0	0	0	0	1	0
"protected IAttributes getAttributeMap(List<AttributeStatement> stmts) { if (stmts == null || stmts.isEmpty()) return null;  IAttributes returnAtts = new UserAttributes();  for (AttributeStatement stmt : stmts) { List<Attribute> atts = stmt.getAttributes(); for (Attribute att : atts) { //DD We only support XSString (if OpenSAML does) and XSAny if (att.getAttributeValues().size() < 1) { _logger.error(""Empty attribute (skipped): "" + att); continue; } XMLObject obj = att.getAttributeValues().get(0); String content = null; if (obj instanceof XSString) { //ok XSString str = (XSString)obj; content = str.getValue(); } //OpenSAML reads type=xs:string attributes as any-typed? else if (obj instanceof XSAny) { //ok XSAny str = (XSAny)obj; content = str.getTextContent(); } else { _logger.debug(""Unrecognized type of attribute (skipped): "" + obj.getClass().getName()); }  if (returnAtts.contains(att.getName())) { _logger.debug(""Duplicate name for attribute (skipped): "" + att.getName()); } else if (content == null) { // Workaround to not crash on null-content (i.e. when AttributeValue is not text-content) _logger.debug(""No content for the value of ""+att.getName()+"" (""+content+""), ignoring.""); } else { _logger.debug(""Adding attribute to map: "" + att.getName());  if (_bCompatible) { //DD Unspecified name format will be ignored String sAttributeNameFormat = att.getNameFormat(); if (sAttributeNameFormat != null && sAttributeNameFormat.equals(Attribute.UNSPECIFIED)) sAttributeNameFormat = null;  returnAtts.put(att.getName(), sAttributeNameFormat, content); } else { returnAtts.put(att.getName(), content); } } } }  return returnAtts; } "	0	0	1	1	1	0
private EntityRecord instanceToRecord(Object instance, EntityDto entityDto, List<FieldDto> fields, MotechDataService service, EntityType entityType) { if (instance == null) { return null; } try { List<FieldRecord> fieldRecords = new ArrayList<>();  for (FieldDto field : fields) { if (entityType != EntityType.STANDARD && field.isVersionField()) { continue; }  Object value = getProperty(instance, field, service); Object displayValue = getDisplayValueForField(field, value);  value = parseValueForDisplay(value, field.getMetadata(Constants.MetadataKeys.RELATED_FIELD));  FieldRecord fieldRecord = new FieldRecord(field); fieldRecord.setValue(value); fieldRecord.setDisplayValue(displayValue); fieldRecords.add(fieldRecord); }  Number id = (Number) PropertyUtil.safeGetProperty(instance, ID_FIELD_NAME); return new EntityRecord(id == null ? null : id.longValue(), entityDto.getId(), fieldRecords); } catch (Exception e) { throw new ObjectReadException(entityDto.getName(), e); } } 	0	0	0	0	1	0
"private SnomedRf2ExportModel toExportModel(BranchContext context) {  final ContentSubType contentSubType = convertType(releaseType);  Branch branch = RepositoryRequests.branching() .prepareGet(context.branch().path()) .build() .execute(context);  final SnomedRf2ExportModel model = SnomedRf2ExportModel.createExportModelWithAllRefSets(contentSubType, branch, namespace);  if (modules.isEmpty()) { final SnomedConcepts allModules = SnomedRequests.prepareSearchConcept() .all() .filterByActive(true) .filterByAncestor(Concepts.MODULE_ROOT) .build() .execute(context); Set<String> allModuleIds = FluentIterable.from(allModules).transform(IComponent.ID_FUNCTION).toSet(); model.getModulesToExport().addAll(allModuleIds); } else { model.getModulesToExport().addAll(modules); }  model.setStartEffectiveTime(startEffectiveTime); model.setEndEffectiveTime(endEffectiveTime); model.setIncludeUnpublised(includeUnpublished);  if (StringUtils.isEmpty(transientEffectiveTime)) { model.setUnsetEffectiveTimeLabel(""""); } else if (""NOW"".equals(transientEffectiveTime)) { model.setUnsetEffectiveTimeLabel(EffectiveTimes.format(Dates.todayGmt(), DateFormats.SHORT)); } else {  try { EffectiveTimes.parse(transientEffectiveTime, DateFormats.SHORT); } catch (SnowowlRuntimeException e) { throw new BadRequestException(""Transient effective time '%s' is not in the expected date format."", transientEffectiveTime); }  model.setUnsetEffectiveTimeLabel(transientEffectiveTime); }  model.setCodeSystemShortName(codeSystem); model.setExtensionOnly(extensionOnly);  return model; } "	0	0	0	0	1	0
private <T> T checkNotNull(final T arg, final String message) { return null == arg ? this.<T>throwExportException(message) : arg; } 	1	0	1	1	1	0
public void run() { newReactor().run(); } 	0	0	1	0	1	0
protected <T extends Dhcp6Option> void assertSingle(Dhcp6Options options, @Nonnull final Class<T> type) { assertEquals(1, Iterables.size(options.getAll(StatusCodeOption.class))); } 	0	0	1	1	1	0
private FacilityDistribution getDistributionData(FacilityVisit facilityVisit, Distribution distribution) { EpiUse epiUse = epiUseService.getBy(facilityVisit.getId());  List<Refrigerator> refrigerators = refrigeratorService.getRefrigeratorsForADeliveryZoneAndProgram(distribution.getDeliveryZone().getId(), distribution.getProgram().getId()); DistributionRefrigerators distributionRefrigerators = new DistributionRefrigerators(getRefrigeratorReadings(facilityVisit.getFacilityId(), refrigerators));  Facility facility = facilityService.getById(facilityVisit.getFacilityId());  EpiInventory epiInventory = epiInventoryService.getBy(facilityVisit.getId()); VaccinationFullCoverage coverage = vaccinationCoverageService.getFullCoverageBy(facilityVisit.getId()); VaccinationChildCoverage childCoverage = vaccinationCoverageService.getChildCoverageBy(facilityVisit.getId()); VaccinationAdultCoverage adultCoverage = vaccinationCoverageService.getAdultCoverageBy(facilityVisit.getId());  FacilityDistribution facilityDistribution = new FacilityDistribution(facilityVisit, epiUse, distributionRefrigerators, epiInventory, coverage, childCoverage, adultCoverage); facilityDistribution.setFacility(facility); return facilityDistribution; } 	1	0	1	0	1	0
"@Override public Boolean replaceKibanaIndex(final ActionRequest request, final String action, final User user, final Settings config, final Set<String> requestedResolvedIndices, final Map<String, Boolean> tenants) {  final boolean enabled = config.getAsBoolean(""searchguard.dynamic.kibana.multitenancy_enabled"", true);  if(!enabled) { return null; }  //next two lines needs to be retrieved from configuration final String kibanaserverUsername = config.get(""searchguard.dynamic.kibana.server_username"",""kibanaserver""); final String kibanaIndexName = config.get(""searchguard.dynamic.kibana.index"","".kibana"");  String requestedTenant = user.getRequestedTenant();  if(log.isDebugEnabled()) { log.debug(""raw requestedTenant: '""+requestedTenant+""'""); }  if(requestedTenant == null || requestedTenant.length() == 0) { if(log.isTraceEnabled()) { log.trace(""No tenant, will resolve to ""+kibanaIndexName); }  return null; }  if(USER_TENANT.equals(requestedTenant)) { requestedTenant = user.getName(); }  if (!user.getName().equals(kibanaserverUsername) && requestedResolvedIndices.size() == 1 && requestedResolvedIndices.contains(toUserIndexName(kibanaIndexName, requestedTenant))) {  if(isTenantAllowed(request, action, user, tenants, requestedTenant)) { return Boolean.FALSE; }  }  //intercept when requests are not made by the kibana server and if the kibana index (.kibana) is the only index involved if (!user.getName().equals(kibanaserverUsername) && requestedResolvedIndices.contains(kibanaIndexName) && requestedResolvedIndices.size() == 1) {  if(log.isDebugEnabled()) { log.debug(""requestedTenant: ""+requestedTenant); log.debug(""is user tenant: ""+requestedTenant.equals(user.getName())); }  if(!isTenantAllowed(request, action, user, tenants, requestedTenant)) { return Boolean.TRUE; }  //TODO handle user tenant in that way that this tenant cannot be specified as regular tenant //to avoid security issue  replaceIndex(request, kibanaIndexName, toUserIndexName(kibanaIndexName, requestedTenant)); return Boolean.FALSE;  } else if (!user.getName().equals(kibanaserverUsername)) {  if (log.isTraceEnabled()) { log.trace(""not a request to only the .kibana index""); log.trace(user.getName() + ""/"" + kibanaserverUsername); log.trace(requestedResolvedIndices + "" does not contain only "" + kibanaIndexName); }  }  return null; } "	1	0	0	1	1	0
"@Override public boolean performFinish() { Corpus projectData = getStructurePage().getModel(); // TODO: Compile SaltProject form projectData SaltProjectCompiler compiler = new SaltProjectCompiler(projectData); SaltProject project = compiler.run(); for (SDocument document : project.getSCorpusGraphs().get(0).getSDocuments()) { System.err.println(""DOCUMENT: "" + document.getSDocumentGraph().getSTextualDSs().get(0).getSText()); } orderedTokenizers = getTokenizationPage().getTokenizerConfigurationElements(); return false; // TODO FIXME } "	0	0	0	0	1	0
"@Override public SessionFactoryBuilder getSessionFactoryBuilder() { final SessionFactoryBuilderImpl defaultBuilder = new SessionFactoryBuilderImpl( this );  final ClassLoaderService cls = metadataBuildingOptions.getServiceRegistry().getService( ClassLoaderService.class ); final java.util.Collection<SessionFactoryBuilderFactory> discoveredBuilderFactories = cls.loadJavaServices( SessionFactoryBuilderFactory.class );  SessionFactoryBuilder builder = null; List<String> activeFactoryNames = null;  for ( SessionFactoryBuilderFactory discoveredBuilderFactory : discoveredBuilderFactories ) { final SessionFactoryBuilder returnedBuilder = discoveredBuilderFactory.getSessionFactoryBuilder( this, defaultBuilder ); if ( returnedBuilder != null ) { if ( activeFactoryNames == null ) { activeFactoryNames = new ArrayList<>(); } activeFactoryNames.add( discoveredBuilderFactory.getClass().getName() ); builder = returnedBuilder; } }  if ( activeFactoryNames != null && activeFactoryNames.size() > 1 ) { throw new HibernateException( ""Multiple active SessionFactoryBuilderFactory definitions were discovered : "" + StringHelper.join( "", "", activeFactoryNames ) ); }  if ( builder != null ) { return builder; }  return defaultBuilder; } "	0	0	0	0	1	0
"public int runCommand(ArgumentBean args) throws Exception { CmdlineInterface cli = new CmdlineOperations();  // sanity checks if (args.getSubtitles && args.recursive) { throw new CmdlineException(""`filebot -get-subtitles -r` has been disabled due to abuse. Please see http://bit.ly/suball for details.""); }  // print episode info if (args.list) { List<String> lines = cli.fetchEpisodeList(args.query, args.format, args.db, args.order, args.filter, args.lang); lines.forEach(System.out::println); return lines.isEmpty() ? 1 : 0; }  // print media info if (args.mediaInfo) { List<String> lines = cli.getMediaInfo(args.getFiles(true), args.format, args.filter); lines.forEach(System.out::println); return lines.isEmpty() ? 1 : 0; }  // revert files if (args.revert) { List<File> files = cli.revert(args.getFiles(false), args.filter, ""TEST"".equalsIgnoreCase(args.action)); return files.isEmpty() ? 1 : 0; }  // file operations Collection<File> files = new LinkedHashSet<File>(args.getFiles(true));  if (args.extract) { files.addAll(cli.extract(files, args.output, args.conflict, null, true)); }  if (args.getSubtitles) { files.addAll(cli.getMissingSubtitles(files, WebServices.OpenSubtitles.getName(), args.query, args.lang, args.output, args.encoding, args.format, !args.nonStrict)); }  if (args.rename) { cli.rename(files, StandardRenameAction.forName(args.action), args.conflict, args.output, args.format, args.db, args.query, args.order, args.filter, args.lang, !args.nonStrict); }  if (args.check) { // check verification file if (containsOnly(files, MediaTypes.getDefaultFilter(""verification""))) { if (!cli.check(files)) { throw new Exception(""Data corruption detected""); // one or more hashes mismatch } } else { cli.compute(files, args.output, args.encoding); } }  return 0; } "	1	0	0	1	0	0
"@POST @Secured @Path(""SecureLogoutPersona"") @Produces(MediaType.APPLICATION_XML) public String secureLogoutPersona(@HeaderParam(""securityToken"") String securityToken, @HeaderParam(""userId"") Long userId, @QueryParam(""personaId"") Long personaId) { tokenBO.setActivePersonaId(securityToken, 0L); return """"; } "	1	0	0	0	1	0
"private Pizza serializePizza(HttpServletRequest request, String pizzaNumber) { try { // Hardcoding the size for now. Focusing on the pizza itself. Pizza pizza = new Pizza(Size.MEDIUM, Crust.valueOf(request.getParameter(""crust"" + pizzaNumber)), Sauce.valueOf(request.getParameter(""sauce"" + pizzaNumber)));  String[] toppings = request.getParameterValues(""toppings"" + pizzaNumber); String[] positions = request.getParameterValues(""position"" + pizzaNumber); for (int i = 0; i < toppings.length; i++) { if (toppings[i] != """") { Position newPosition = Position.valueOf(positions[i]); Position old = pizza.addTopping(Topping.valueOf(toppings[i]),newPosition); if((Position.RIGHT.equals(old) && newPosition.equals(Position.LEFT)) || (Position.LEFT.equals(old) && newPosition.equals(Position.RIGHT))) { pizza.addTopping(Topping.valueOf(toppings[i]), Position.ALL); } } } return pizza; } catch (IllegalArgumentException e) { // Missing pizza parameters return null; } } "	1	0	0	1	0	0
public static void logFiner(String msg) { logFiner(msg, (Object) null); } 	0	0	0	0	1	0
public static void logInfo(String msg) { logInfo(msg, (Object) null); } 	0	0	0	0	1	0
"@Test public void testKMeans() throws Exception { Path tempDir = getTempDir(); Path dataDir = tempDir.resolve(""data""); Path modelDir = tempDir.resolve(""model"");  Map<String,Object> overlayConfig = new HashMap<>(); overlayConfig.put(""oryx.batch.update-class"", KMeansUpdate.class.getName()); ConfigUtils.set(overlayConfig, ""oryx.batch.storage.data-dir"", dataDir); ConfigUtils.set(overlayConfig, ""oryx.batch.storage.model-dir"", modelDir); overlayConfig.put(""oryx.batch.streaming.generation-interval-sec"", GEN_INTERVAL_SEC); overlayConfig.put(""oryx.kmeans.hyperparams.k"", ""[2,100]""); overlayConfig.put(""oryx.kmeans.iterations"", 20); overlayConfig.put(""oryx.kmeans.runs"", 20); overlayConfig.put(""oryx.input-schema.num-features"", NUM_FEATURES); overlayConfig.put(""oryx.input-schema.categorical-features"", ""[]""); overlayConfig.put(""oryx.ml.eval.candidates"", 3); overlayConfig.put(""oryx.ml.eval.parallelism"", 2); overlayConfig.put(""oryx.kmeans.evaluation-strategy"", EVALUATION_STRATEGY);  Config config = ConfigUtils.overlayOn(overlayConfig, getConfig());  startMessaging();  startServerProduceConsumeTopics( config, new RandomKMeansDataGenerator(NUM_FEATURES), DATA_TO_WRITE, WRITE_INTERVAL_MSEC);  List<Path> modelInstanceDirs = IOUtils.listFiles(modelDir, ""*"");  checkIntervals(modelInstanceDirs.size(), DATA_TO_WRITE, WRITE_INTERVAL_MSEC, GEN_INTERVAL_SEC);  Path latestModelDir = modelInstanceDirs.get(modelInstanceDirs.size() - 1); Path modelFile = latestModelDir.resolve(MLUpdate.MODEL_FILE_NAME); assertTrue(""No such model file: "" + modelFile, Files.exists(modelFile));  PMML pmml = PMMLUtils.read(modelFile); Model rootModel = pmml.getModels().get(0); ClusteringModel clusteringModel = (ClusteringModel) rootModel;  // Should have picked highest k assertEquals(100, clusteringModel.getNumberOfClusters().intValue()); } "	0	0	1	1	0	0
public void focusGained(java.awt.event.FocusEvent evt) { jFormatTextFieldForIdFocusGained(evt); } 	0	0	0	0	1	0
@Test public void testActivatorEnablesServiceProxy() throws Exception { // should toggle the ServiceProxy enable status to true new Activator().init(null, null);; assertTrue(ServiceProxy.getInstance().getEnabled(null)); } 	0	0	0	0	1	0
"private static String usage() { final String NEWLINE = System.getProperty ( ""line.separator"" ); StringBuilder toReturn = new StringBuilder(); toReturn.append(""Usage: <-command_name> [<command_args...>] "" + ""(- parameters within the square braces are optional.)"" + NEWLINE); toReturn.append(""commands:"" + NEWLINE); toReturn.append(Cmd.METADATA.toString() + "" <url> (fetch Metadata configuration (default: "" + ""use metadata.conf file in current directory))"" + NEWLINE); toReturn.append(Cmd.PREMERGE.toString() + "" [--createWarehouse] "" + ""(organize, clean, convert, normalize input data;"" + "" create metadata db and create or rebuild the BioPAX utility type objects Warehouse)"" + NEWLINE); toReturn.append(Cmd.MERGE.toString() + "" (merge all pathway data; overwrites the main biopax model archive)""+ NEWLINE); toReturn.append(Cmd.INDEX.toString() + "" (build new full-text index of the main merged BioPAX db;"" + ""create blacklist.txt in the downloads directory; re-calculates the no. pathways, molecules and "" + ""interactions per data source)"" + NEWLINE); toReturn.append(Cmd.EXPORT.toString() + "" [filename] [--uris=<uri,uri,..>] [--output-absolute-uris] [--datasources=<nameOrUri,..>] [--types=<interface,..>]"" + ""(when no arguments provided, it generates the default detailed pathway data and organism-specific "" + ""BioPAX archives and datasources.txt in the downloads sub-directory; plus, "" + ""summary.txt, and convert.sh script (for exporting the BioPAX files to various formats with Paxtools). "" + ""If [filename] is provided, it only exports the main BioPAX model or a sub-model "" + ""(if the list of URIs or filter option is provided): "" + ""when --output-absolute-uris flag is present, all URIs there in the output BioPAX will be absolute; "" + ""when --datasources or/and --types flag is set, and 'uri' list is not, then the result model "" + ""will contain BioPAX elements that pass the filter by data source and/or type)"" + NEWLINE); toReturn.append(Cmd.ANALYSIS.toString() + "" <classname> [--update] (execute custom code within the cPath2 BioPAX database; "" + ""if --update is set, one then should re-index and generate new 'downloads')"" + NEWLINE); return toReturn.toString(); } "	0	0	0	0	0	1
private void flushThrottledWrites( NukleusChannel channel) { final Deque<MessageEvent> writeRequests = channel.writeRequests;  while (channel.targetWritable() && !writeRequests.isEmpty()) { MessageEvent writeRequest = writeRequests.peekFirst(); ChannelBuffer writeBuf = (ChannelBuffer) writeRequest.getMessage(); ChannelBuffer writeExt = channel.writeExtBuffer();  if (writeBuf.readable() || writeExt.readable()) { final boolean flushing = !writeBuf.readable(); final int writableBytes = min(channel.targetWriteableBytes(writeBuf.readableBytes()), (1 << SIZE_OF_SHORT) - 1); final int writeReaderIndex = writeBuf.readerIndex();  final int writableExtBytes = writeExt.readableBytes(); final byte[] writeExtCopy = writeExtCopy(writeExt);  // TODO: avoid allocation final byte[] writeCopy = new byte[writableBytes]; writeBuf.getBytes(writeReaderIndex, writeCopy);  final long streamId = channel.targetId(); final DataFW data = dataRW.wrap(writeBuffer, 0, writeBuffer.capacity()) .streamId(streamId) .payload(p -> p.set(writeCopy)) .extension(p -> p.set(writeExtCopy)) .build();  streamsBuffer.write(data.typeId(), data.buffer(), data.offset(), data.sizeof());  channel.targetWritten(writableBytes, 1);  writeBuf.skipBytes(writableBytes);  writeExt.skipBytes(writableExtBytes); writeExt.discardReadBytes();  if (flushing) { fireFlushed(channel); } else { fireWriteComplete(channel, writableBytes); } }  if (!writeBuf.readable()) { writeRequests.removeFirst();  ChannelFuture handlerFuture = writeRequest.getFuture(); handlerFuture.setSuccess(); } } } 	0	0	0	0	1	0
"@Override public ServiceResult addWithMaterialDefinition(PipelineDefinition pipelineDefinition, String materialDefinitionId) { if (this.materialDefinitionService == null) { this.materialDefinitionService = new MaterialDefinitionService(); }  this.materialDefinitionService = new MaterialDefinitionService(); ServiceResult serviceResult = this.materialDefinitionService.getById(materialDefinitionId); if (serviceResult.hasError()) { return super.createServiceResult(null, true, ""could not be created""); }  pipelineDefinition.getMaterialDefinitionIds().add(materialDefinitionId);  return super.add(pipelineDefinition); } "	0	0	0	0	1	0
private Account getOwner(RegisterSSHKeyPairCmd cmd) { Account caller = getCaller();  Account owner = _accountMgr.finalizeOwner(caller, cmd.getAccountName(), cmd.getDomainId(), cmd.getProjectId()); return owner; } 	0	0	0	1	0	0
"@Test @SuppressFBWarnings(""ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD"") public void testDBOpening() { ResourceIterator<Node> allNodes; db.getGraphService().shutdown(); db = new Database(""test.db"", ""data/test1.gfa"", """", true);  int i = 1; try (Transaction tx = db.getGraphService().beginTx()) { //Fetch all nodes from the database allNodes = db.getGraphService().findNodes(DynamicLabel.label(""Strand"")); tx.success();  //Check if all nodes are inserted correctly in the database Node a; while (allNodes.hasNext()) { a = allNodes.next(); Assert.assertEquals(a.getProperty(""id""), (long) i); i++; } } } "	0	0	0	0	1	0
"public static BufferedImage resizeScreenshotIfNeeded(WebDriver driver, BufferedImage screenshotImage) { Double devicePixelRatio = 1.0;  try { devicePixelRatio = ((Number) ((JavascriptExecutor) driver).executeScript(JS_RETRIEVE_DEVICE_PIXEL_RATIO)).doubleValue(); } catch (Exception ex) { ex.printStackTrace(); }  if (devicePixelRatio > 1.0 && screenshotImage.getWidth() > 0) { Long screenSize = (Long) ((JavascriptExecutor) driver).executeScript(""return Math.max("" + ""document.body.scrollWidth, document.documentElement.scrollWidth,"" + ""document.body.offsetWidth, document.documentElement.offsetWidth,"" + ""document.body.clientWidth, document.documentElement.clientWidth);"" );  Double estimatedPixelRatio = ((double)screenshotImage.getWidth()) / ((double)screenSize);  if (estimatedPixelRatio > 1.0) {  int newWidth = (int) (screenshotImage.getWidth() / estimatedPixelRatio); int newHeight = (int) (screenshotImage.getHeight() / estimatedPixelRatio);  Image tmp = screenshotImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH); BufferedImage scaledImage = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB);  Graphics2D g2d = scaledImage.createGraphics(); g2d.drawImage(tmp, 0, 0, null); g2d.dispose();  return scaledImage; } else return screenshotImage; } else return screenshotImage; } "	0	0	0	0	1	0
"@RequestMapping(value = ""/newProduct/saveProduct"", method = RequestMethod.POST) @ResponseBody public Response save(@RequestBody ProductDto product) { LOG.info(""createProduct. Mapping 'raw' product data: "" + product);  String savedProductNumberValue = this.productService.save(product); String newProductNumberValue = getFullProductNumber(); Map<String, String> responseData = new HashMap<>();  responseData.put(""newProductNumber"", newProductNumberValue); responseData.put(""savedProductNumber"", savedProductNumberValue);  return new Response(ResponseCode.OK, responseData); } "	0	0	0	0	1	0
"@Override public void run() { // First verify the address is allowed. try { checkHost( m_url ); } catch( HTTPRequestException e ) { m_success = false; m_errorMessage = e.getMessage(); return; }  try { // Connect to the URL HttpURLConnection connection = (HttpURLConnection) m_url.openConnection();  if( m_postText != null ) { connection.setRequestMethod( ""POST"" ); connection.setDoOutput( true ); } else { connection.setRequestMethod( ""GET"" ); }  // Set headers connection.setRequestProperty( ""accept-charset"", ""UTF-8"" ); if( m_postText != null ) { connection.setRequestProperty( ""content-type"", ""application/x-www-form-urlencoded; charset=utf-8"" ); connection.setRequestProperty( ""content-encoding"", ""UTF-8"" ); } if( m_postText != null ) { for( Map.Entry<String, String> header : m_headers.entrySet() ) { connection.setRequestProperty( header.getKey(), header.getValue() ); } }  // Send POST text if( m_postText != null ) { OutputStream os = connection.getOutputStream(); OutputStreamWriter osw; try { osw = new OutputStreamWriter( os, ""UTF-8"" ); } catch( UnsupportedEncodingException e ) { osw = new OutputStreamWriter( os ); } BufferedWriter writer = new BufferedWriter( osw ); writer.write( m_postText, 0, m_postText.length() ); writer.close(); }  // Read response InputStream is; int code = connection.getResponseCode(); boolean responseSuccess; if( code >= 200 && code < 400 ) { is = connection.getInputStream(); responseSuccess = true; } else { is = connection.getErrorStream(); responseSuccess = false; }  byte[] result = ByteStreams.toByteArray( is ); is.close();  // We completed m_success = responseSuccess; m_result = result; m_responseCode = connection.getResponseCode(); m_encoding = connection.getContentEncoding();  Joiner joiner = Joiner.on( ',' ); Map<String, String> headers = m_responseHeaders = new HashMap<String, String>(); for( Map.Entry<String, List<String>> header : connection.getHeaderFields().entrySet() ) { headers.put( header.getKey(), joiner.join( header.getValue() ) ); }  connection.disconnect(); // disconnect } catch( IOException e ) { // There was an error m_success = false; } } "	0	0	1	1	0	0
"@Override public void writeToNBT(NBTTagCompound nbt) { nbt.setBoolean(""isAIActive"", isAIActive.getBoolean()); nbt.setInteger(""idOfNotifyBlock"", idOfNotifyBlock); nbt.setInteger(""activityInterval"", activityInterval); nbt.setString(""assigningPlayer"", assigningPlayer); nbt.setBoolean(""isGathering"", isGathering); } "	0	0	0	0	1	0
"@Override public void readFromNBT(NBTTagCompound nbt) { isAIActive.setValue(nbt.getBoolean(""isAIActive""));  treeBasePoint = Point3D.readFromNBT(""treeBasePoint"", nbt); apiId = nbt.getInteger(""apiId""); yLevel = nbt.getInteger(""yLevel""); cutInterval = nbt.getInteger(""cutInterval""); cutTimeLeft = nbt.getInteger(""cutTimeLeft""); doReplant = nbt.getBoolean(""doReplant""); } "	0	0	0	0	1	0
public boolean hasColumn(String key) { checkNonNullObject(key); lock(); try { return idMap.containsKey(key); } finally { unlock(); } } 	0	0	1	0	1	0
public Map<String, Object> getProperties() { final Map<String, Object> map = new HashMap<String, Object>(); for (final PTProperty prop : this.properties) { map.put(prop.getName(), prop.getValue()); } return map; } 	0	0	1	1	1	0
"private RemoteMessageCommand createErrorMessageCommand() { IIconFactory<RIcon> iconFactory = getFrontendController().getViewFactory() .getIconFactory(); RemoteMessageCommand messageCommand = new RemoteMessageCommand(); messageCommand.setTitle(getFrontendController().getTranslation(""error"", getFrontendController().getLocale())); messageCommand.setTitleIcon(iconFactory.getErrorIcon(iconFactory .getTinyIconSize())); messageCommand.setMessageIcon(iconFactory.getErrorIcon(iconFactory .getLargeIconSize())); return messageCommand; } "	0	0	0	1	0	0
@Override TopicTypeModel getType() { return pl.typeStorage.getTopicType(typeUri); } 	0	0	1	0	0	0
protected double getNorthing(final double latitude) { double northing = k1 + k2 * p * p + k3 * pow(p, 4); if (latitude < 0.0) { northing = 10000000 + northing; } return northing; } 	0	0	1	1	0	0
@Override public void run() { try { T t = future.get(); sdp.set(t); } catch (Exception e) { subscriber.onError(e); } } 	0	0	1	0	1	0
"@Test public void testExec() throws IOException { Tuple input = TupleFactory.getInstance().newTuple(31); for (int i = 0; i < 31; i++) { input.set(i, 1); } input.set(0, ""M"");  Assert.assertEquals(""(M,1.0,42,74,5,36,36,31,74,66,5)"", instance.exec(input).toString()); } "	0	0	0	0	1	0
"public void changeQualityControlType(final ViewDefinitionState state) { FormComponent form = (FormComponent) state.getComponentByReference(""form""); FieldComponent qualityControlType = (FieldComponent) state.getComponentByReference(FIELD_QUALITY_CONTROL_TYPE); if (form.getFieldValue() != null) { if (checkOperationQualityControlRequired((Long) form.getFieldValue())) { qualityControlType.setFieldValue(""04forOperation""); qualityControlType.setEnabled(false); qualityControlType.requestComponentUpdateState(); } else { qualityControlType.setEnabled(true); } } FieldComponent unitSamplingNr = (FieldComponent) state.getComponentByReference(""unitSamplingNr""); if (qualityControlType.getFieldValue() == null || !qualityControlType.getFieldValue().equals(""02forUnit"")) { unitSamplingNr.setRequired(false); unitSamplingNr.setVisible(false); } else if (qualityControlType.getFieldValue().equals(""02forUnit"")) { unitSamplingNr.setRequired(true); unitSamplingNr.setVisible(true); } } "	0	0	0	0	1	0
"@CrossOrigin @RequestMapping(method = RequestMethod.POST, value = ""load"") public ResponseEntity<String> load(@RequestParam(value = ""filename"") String filename, @RequestParam(value = ""data"") String base64, HttpServletResponse response) { try { logger.info(""Test load request: "" +filename + "" "" + base64.length() + "" "" + response.getContentType());  byte[] txt = DatatypeConverter.parseBase64Binary(base64.split("","")[1]);  File tempDir = new File(System.getProperty(""java.io.tmpdir""));  String prefix = filename.substring(0,filename.indexOf('.')); String postfix = filename.substring(filename.indexOf('.'),filename.length());  File tempFile = File.createTempFile(prefix, postfix, tempDir); FileOutputStream fos = new FileOutputStream(tempFile); fos.write(txt); fos.close(); logger.debug(tempFile.getAbsolutePath());  Loader loader = new Loader();  //loader.loadDatasetFromFile(url.toString()); String url = tempFile.toURL().toString(); logger.debug (""reading tempfile "" + url);   //List<String> resultMsgs = loader.loadDatasetFromFile(url); List<String> resultMsgs = loader.loadDatasetFromFile(url, elasticSearchHost, elasticSearchPort, elasticSearchCluster); // Format results StringBuffer msg = new StringBuffer(); boolean success = true; for (String s : resultMsgs) { if (s.contains(""validation_error"")) success = false; int index = s.indexOf("", crawler_id""); String sub = null; if (index != -1) sub = s.substring(0,index); else sub = s;  msg.append(sub + ""\n""); }  String finalMessage = msg.toString(); logger.debug(finalMessage);  if (success) { logger.info(""Load File Success""); //String message = ""{\""success\"": \"""" + filename + "" successfully loaded!\""}""; return new ResponseEntity<String>(finalMessage, HttpStatus.OK); } else { logger.info(""Unsucsesfull in loading""); return new ResponseEntity<String>(finalMessage, HttpStatus.BAD_REQUEST); }  } catch (IOException e) { e.printStackTrace(); }  return new ResponseEntity<String>(HttpStatus.BAD_REQUEST); } "	0	0	0	0	1	0
@Override public boolean isWriteable(Class serializableClass, Type type, Annotation[] annotations, MediaType mediaType) { return checkForAnnotation(serializableClass); } 	0	0	0	0	1	0
public void set(final String fieldName, final int value) { this.set(fieldName, String.valueOf(value)); } 	0	0	0	0	1	0
"public void add(final String fieldName, final boolean value) { this.add(fieldName, value ? ""true"" : ""false""); } "	0	0	0	0	1	0
public void set(final String fieldName, final Date value) { this.set(fieldName, value != null ? value.getTime() : null); } 	0	0	0	0	1	0
"public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) { // If your preview can change or rotate, take care of those events here. // Make sure to stop the preview before resizing or reformatting it. Log.d(""surfaceChanged"",""surfaceChanged""); refreshCamera(mCamera); } "	1	0	1	0	1	0
public void proxyPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { executeMethod(this::createProxyPostReq, req, resp); } 	0	0	1	1	0	0
"protected void returnChatroomList(WebSocket ws) {  JSONObject response = new JSONObject(); JSONArray chatroomArray = new JSONArray();  for(String chatroomName : chatrooms.keySet()) { JSONObject oneChatroom = new JSONObject();  oneChatroom.put(""chatroomName"", chatroomName);  oneChatroom.put(""chatroomSize"", chatrooms.get(chatroomName).userOutputs.size());  chatroomArray.put(oneChatroom); }  response.put(""type"", ""chatroomList""); response.put(""chatrooms"", chatroomArray);  ws.send(response.toString());  logger.info(""User retrieved chatroom list""); } "	0	0	1	0	1	0
public void filter(String searchTerm) { if (searchTerm == null) { notifyDataSetChanged(); return; } if (!searchTerm.isEmpty()) { this.oldSearchTerm = searchTerm; for (Module currentModule : allModulesDataset) { String lecturerName = currentModule.getLvnameGerman().toLowerCase(); int index = filteredModulesDataset.indexOf(currentModule); if (!lecturerName.startsWith(searchTerm.toLowerCase())) { if (index != -1) { filteredModulesDataset.remove(index); notifyItemRemoved(index); } } else { if (index == -1) { filteredModulesDataset.add(currentModule); notifyItemInserted(filteredModulesDataset.size());  } } } } else { filteredModulesDataset = (List<Module>) ((LinkedList<Module>) allModulesDataset).clone(); oldSearchTerm = null; notifyDataSetChanged(); } } 	0	0	1	0	0	0
public static BlockPosM tmp(int[] array3){ return temporary.set(array3); } 	1	0	1	0	1	0
@Override public final void setRotation(final float degrees) { body.setTransform(body.getPosition(), degrees); } 	0	0	0	0	1	0
"@Override public void start(Listener transportListener) { listener = Preconditions.checkNotNull(transportListener, ""listener""); Bootstrap b = new Bootstrap(); b.group(group); b.channel(channelType); if (NioSocketChannel.class.isAssignableFrom(channelType)) { b.option(SO_KEEPALIVE, true); } /** * We don't use a ChannelInitializer in the client bootstrap because its ""initChannel"" method * is executed in the event loop and we need this handler to be in the pipeline immediately so * that it may begin buffering writes. */ b.handler(negotiationHandler); // Start the connection operation to the server. channel = b.connect(address).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { if (!future.isSuccess()) { ChannelHandlerContext ctx = channel.pipeline().context(handler); if (ctx != null) { // NettyClientHandler doesn't propagate exceptions, but the negotiator will need the // exception to fail any writes. Note that this fires after handler, because it is as if // handler was propagating the notification. ctx.fireExceptionCaught(future.cause()); } channel.pipeline().fireExceptionCaught(future.cause()); } } }).channel(); // Start the write queue as soon as the channel is constructed handler.startWriteQueue(channel); // Handle transport shutdown when the channel is closed. channel.closeFuture().addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { Status status = handler.connectionStatus(); if (status == null) { // We really only expect this to happen if shutdown() was called, but in that case this // status is ignored. status = Status.INTERNAL.withDescription(""Connection closed with unknown cause""); } notifyTerminated(status); } }); } "	0	0	0	0	1	0
"private void loadRows() { //HERE ARE MY ROWS mRowsAdapter = new ArrayObjectAdapter(new ListRowPresenter());  //ROW 1: MY CHANNELS if(mActivity == null && Build.VERSION.SDK_INT >= 23) { Toast.makeText(getContext(), ""Uh-oh, something isn't working: loadRows has no activity"", Toast.LENGTH_SHORT).show(); return; } else if(mActivity == null) { return; } ChannelDatabase cd = new ChannelDatabase(mActivity); try { CardPresenter channelCardPresenter = new CardPresenter(); //            GridItemPresenter channelCardPresenter = new GridItemPresenter(); ArrayObjectAdapter channelRowAdapter = new ArrayObjectAdapter(channelCardPresenter); int index = 0; for(Channel channelInfo: cd.getChannels()) { Log.d(TAG, ""Got channels "" + channelInfo.getName()); Log.d(TAG, channelInfo.getLogoUrl()+""""); Log.d(TAG, new JSONChannel(cd.getJSONChannels().getJSONObject(index)).toString()+""""); channelRowAdapter.add(MovieList.buildMovieInfo( ""channel"", channelInfo.getName(), """", channelInfo.getNumber(), new JSONChannel(cd.getJSONChannels().getJSONObject(index)).getUrl(), channelInfo.getLogoUrl(), ""android.resource://com.felkertech.n.tv/drawable/c_background5"" )); Log.d(TAG, MovieList.buildMovieInfo( ""channel"", channelInfo.getName(), """", channelInfo.getNumber(), new JSONChannel(cd.getJSONChannels().getJSONObject(index)).getUrl(), channelInfo.getLogoUrl(), ""android.resource://com.felkertech.n.tv/drawable/c_background5"" ).toString()); //                channelRowAdapter.add(channelInfo.name); index++; } HeaderItem header = new HeaderItem(0, ""My Channels""); mRowsAdapter.add(new ListRow(header, channelRowAdapter)); } catch (JSONException e) { e.printStackTrace(); }  //Second row is suggested channels (not really yet) CardPresenter suggestedChannelPresenter = new CardPresenter(); ArrayObjectAdapter suggestedChannelAdapter = new ArrayObjectAdapter(suggestedChannelPresenter); HeaderItem suggestedChannelsHeader = new HeaderItem(1, ""Suggested Channels""); JSONChannel[] suggestedChannels = ActivityUtils.getSuggestedChannels(); for(JSONChannel jsonChannel: suggestedChannels) { suggestedChannelAdapter.add(MovieList.buildMovieInfo( ""channel"", jsonChannel.getName(), """", jsonChannel.getNumber(), jsonChannel.getUrl(), jsonChannel.getLogo(), ""android.resource://com.felkertech.n.tv/drawable/c_background5"" )); } mRowsAdapter.add(new ListRow(suggestedChannelsHeader, suggestedChannelAdapter));  //Third row is Drive HeaderItem driveHeader = new HeaderItem(1, ""Google Drive Sync""); GridItemPresenter drivePresenter = new GridItemPresenter(); ArrayObjectAdapter driveAdapter = new ArrayObjectAdapter(drivePresenter);  driveAdapter.add(R.string.connect_drive); driveAdapter.add(getString(R.string.settings_refresh_cloud_local)); //        driveAdapter.add(""Upload to cloud""); driveAdapter.add(getString(R.string.settings_switch_google_drive)); driveAdapter.add(getString(R.string.settings_sync_file)); mRowsAdapter.add(new ListRow(driveHeader, driveAdapter));  //Fourth row are actions HeaderItem gridHeader = new HeaderItem(1, ""Manage""); GridItemPresenter mGridPresenter = new GridItemPresenter(); ArrayObjectAdapter gridRowAdapter = new ArrayObjectAdapter(mGridPresenter); gridRowAdapter.add(getString(R.string.manage_livechannels)); //        gridRowAdapter.add(getString(R.string.manage_add_suggested)); gridRowAdapter.add(getString(R.string.manage_add_new)); //        gridRowAdapter.add(""Empty Plugin""); //        gridRowAdapter.add(""Settings""); mRowsAdapter.add(new ListRow(gridHeader, gridRowAdapter));  //Settings will become its own activity HeaderItem gridHeader2 = new HeaderItem(1, ""Settings""); GridItemPresenter mGridPresenter2 = new GridItemPresenter(); ArrayObjectAdapter gridRowAdapter2 = new ArrayObjectAdapter(mGridPresenter2); gridRowAdapter2.add(getString(R.string.settings_browse_plugins)); gridRowAdapter2.add(getString(R.string.settings_view_licenses)); gridRowAdapter2.add(getString(R.string.settings_reset_channel_data)); gridRowAdapter2.add(getString(R.string.about_app)); //        gridRowAdapter2.add(getString(R.string.settings_read_xmltv)); mRowsAdapter.add(new ListRow(gridHeader2, gridRowAdapter2));  setAdapter(mRowsAdapter); } "	1	0	0	0	0	0
"public static Event transportStateChanged( IceUdpTransportManager transportManager, IceProcessingState oldState, IceProcessingState newState) { Dictionary properties = new Hashtable(3); properties.put(""source"", transportManager); properties.put(""oldState"", oldState); properties.put(""newState"", newState);  return new Event( TRANSPORT_STATE_CHANGED_TOPIC, properties); } "	0	0	1	0	1	0
public void setLocation(String location) { this.location = location; } 	0	0	0	1	1	0
"private void removeRestrictedUser() { SecretProvider secrets = getAdminDatabaseSecrets();  try (RedshiftConnection conn = RedshiftConnection.open(RedshiftConnectionConfig.configure(secrets, EMPTY_CONFIG))) { conn.executeUpdate(""DROP USER IF EXISTS "" + RESTRICTED_USER); } } "	0	0	0	0	1	0
"private void setupDestTable() { SecretProvider secrets = getDatabaseSecrets();  try (RedshiftConnection conn = RedshiftConnection.open(RedshiftConnectionConfig.configure(secrets, EMPTY_CONFIG))) { switchSearchPath(conn); conn.executeUpdate(""CREATE TABLE IF NOT EXISTS "" + DEST_TABLE + "" (id integer, name text, score real)""); conn.executeUpdate(""DELETE FROM "" + DEST_TABLE + "" WHERE id = 9""); conn.executeUpdate(""INSERT INTO "" + DEST_TABLE + "" (id, name, score) VALUES (9, 'zzz', 9.99)"");  conn.executeUpdate(""GRANT INSERT ON "" + DEST_TABLE +  "" TO "" + RESTRICTED_USER); } } "	0	0	0	0	1	0
"private void setupSourceTable() { SecretProvider secrets = getDatabaseSecrets();  try (RedshiftConnection conn = RedshiftConnection.open(RedshiftConnectionConfig.configure(secrets, EMPTY_CONFIG))) { switchSearchPath(conn); conn.executeUpdate(""CREATE TABLE "" + SRC_TABLE + "" (id integer, name text, score real)""); conn.executeUpdate(""INSERT INTO "" + SRC_TABLE + "" (id, name, score) VALUES (0, 'foo', 3.14)""); conn.executeUpdate(""INSERT INTO "" + SRC_TABLE + "" (id, name, score) VALUES (1, 'bar', 1.23)""); conn.executeUpdate(""INSERT INTO "" + SRC_TABLE + "" (id, name, score) VALUES (2, 'baz', 5.00)"");  conn.executeUpdate(""GRANT SELECT ON "" + SRC_TABLE +  "" TO "" + RESTRICTED_USER); } } "	0	0	0	0	1	0
"@Test public void should_return_404_if_getting_file_with_default_property() throws NoSuchFieldException, IllegalAccessException { PlatformKey platformKey = PlatformKey.withName(""CUR1"") .withApplicationName(""RAC"") .build();  // Appel 1 String propertiesPath = ""#WAS#EuronetWS#1.0.0.0#WORKINGCOPY"";  InstanceData instance = InstanceData.withInstanceName(""TOTO"") .withKeyValue(ImmutableSet.of()) .build();  ApplicationModuleData module = ApplicationModuleData.withApplicationName(""EuronetWS"") .withVersion(""1.0.0.0"") .withPath(propertiesPath) .withId(1) .withInstances(ImmutableSet.of(instance)) .isWorkingcopy() .build();  PlatformData platform = PlatformData.withPlatformName(platformKey.getName()) .withApplicationName(platformKey.getApplicationName()) .withApplicationVersion(""1.0.0.0"") .withModules(ImmutableSet.of(module)) .withVersion(11L) .build();  when(applicationsAggregate.getPlatform(platformKey)).thenReturn(Optional.of(platform));  // Appel 2 getProperties() PropertiesData platformGlobalProperties = new PropertiesData(ImmutableSet.of(), ImmutableSet.of());  when(applicationsAggregate.getProperties(platformKey, ""#WAS#EuronetWS#1.0.0.0#WORKINGCOPY#EuronetWS#1.0.0.0#WORKINGCOPY"")).thenReturn(platformGlobalProperties); when(applicationsAggregate.getProperties(platformKey, ""#"")).thenReturn(platformGlobalProperties);  when(applicationsAggregate.getSecuredProperties(platformKey, ""#WAS#EuronetWS#1.0.0.0#WORKINGCOPY#EuronetWS#1.0.0.0#WORKINGCOPY"", model)).thenReturn(platformGlobalProperties); when(applicationsAggregate.getSecuredProperties(platformKey, ""#"", model)).thenReturn(platformGlobalProperties);  // Appel 3 modules.getTemplate() String templateName = ""TitiEtRominet"";  Template template = new Template(""modules#EuronetWS#1.0.0.0#WORKINGCOPY"", templateName, ""truc.txt"", ""/tmp"", ""prop1={{prop1|@required}}\n"" + ""prop2={{prop2|@default 'truc machin chose' @comment \""cool !\""}}"", null, 2);  KeyValuePropertyModel prop1 = new KeyValuePropertyModel(createProperty(""prop1|@comment 'commentaire'"")); KeyValuePropertyModel prop2 = new KeyValuePropertyModel(createProperty(""prop2|@default 'truc machin chose' @comment \""cool !\""""));  ModuleKey moduleKey = new ModuleKey( ""EuronetWS"", new HesperidesVersion(""1.0.0.0"", true));  when(modulesAggregate.getTemplate(moduleKey, templateName)).thenReturn(Optional.of(template));  // Appel 4 modules.getModel) HesperidesPropertiesModel templateModel = new HesperidesPropertiesModel(ImmutableSet.of(prop1, prop2), ImmutableSet.of());  when(modulesAggregate.getModel(moduleKey)).thenReturn(Optional.of(templateModel));  Files hesperidesFiles = new Files(applicationsAggregate, modulesAggregate, templatePackages);   String content = hesperidesFiles.getFile( platformKey.getApplicationName(), platformKey.getName(), propertiesPath, moduleKey.getName(), module.getVersion(), module.isWorkingCopy(), instance.getName(), template.getNamespace(), template.getName(), model);  assertThat(content).isEqualTo(""prop1=\nprop2=truc machin chose""); } "	0	0	0	0	0	1
"@Override public Object get(IHawkAttribute attr) { String name = attr.getName(); switch (name) { case ""version"": return version != null; default: return null; } } "	1	0	1	0	1	0
"@Override public Object get(IHawkAttribute attr) { String name = attr.getName(); switch (name) { case ""name"": return name != null; default: return null; } } "	0	0	1	0	1	0
"public void generateRelations2Jdl(final StringBuilder relationShips, final String relationType, final List<RelationsCache.Relation> relations) { relationShips.append(""relationship "" + relationType + "" {\n""); for(int i = 0; i < relations.size(); i++) { final RelationsCache.Relation rel = relations.get(i); relationShips.append(""\t""); relationShips.append(rel.toStringUntabbed()); if( i < relations.size() -1) { relationShips.append("",""); } relationShips.append(""\n""); } relationShips.append(""\n}\n\n""); } "	1	0	1	0	1	0
public List<Integer> getAllActiveTresuresId () { List<Integer> out = new ArrayList<Integer>(); out.addAll(activeTree.values()); return out; } 	0	0	0	0	1	0
public ArrayList<Treasure> getAllActiveTresures () { AbstractCollection<Integer> tmp = activeTree.values(); ArrayList<Treasure> out = new ArrayList<Treasure>(); for (Integer i : tmp ) { try { out.add(DatabaseManager.getTreasureFromId(i)); } catch (SQLException e) { e.printStackTrace(); return null; } } return out; } 	0	0	0	0	1	0
public boolean removeDenied(UUID uuid) { if (uuid == DBFunc.everyone) { boolean result = false; for (UUID other : getDenied()) { result = result || rmvDenied(other); } return result; } return rmvDenied(uuid); } 	0	0	0	0	1	0
@Test public void runTest() { // compare names of all tasks in both lists for (int i = 0; i < listSize; i++) { assertEquals(expectedTaskList.get(i).getName(), testCalendar.getTaskList().get(i).getName()); } // compare deadlines of all tasks in both lists for (int i = 0; i < listSize; i++) { assertEquals(expectedTaskList.get(i).getDeadline(), testCalendar.getTaskList().get(i).getDeadline()); } } 	0	0	0	0	1	0
@Override public String readUTF() throws IOException { return m_buffer.toString(); } 	0	0	0	0	1	0
private HashMap<String,String> readStream(InputStream is) throws IOException { GsonBuilder gsonBuilder = new GsonBuilder(); Gson gson = gsonBuilder.create();  BufferedReader reader = new BufferedReader(new InputStreamReader(is)); Type pluginType= new TypeToken<HashMap<String,String>>() {}.getType(); HashMap<String,String> responseDev = gson.fromJson(gson.newJsonReader(reader), pluginType); System.out.println(responseDev); reader.close(); return responseDev; } 	0	0	0	0	1	0
"@Override protected Integer doInBackground(Void... params) { String postPath = this.path + ""devices/""; Integer response = null; URL url = null; HttpURLConnection urlConnection = null; try { url = new URL(postPath); urlConnection = (HttpURLConnection) url.openConnection(); urlConnection.setRequestMethod(""POST""); urlConnection.setRequestProperty(""Content-Type"", ""application/json; charset=UTF-8""); urlConnection.setDoOutput(true); OutputStream deviceOutputStream = urlConnection.getOutputStream(); writeStream(deviceOutputStream); response = urlConnection.getResponseCode(); Log.i(TAG, ""Response code: "" + response); } catch (IOException e) { Log.e(TAG, ""Connection failed: could not realize the POST request for adding a new device""); Log.e(TAG, e.toString()); } finally { if(urlConnection != null) { urlConnection.disconnect(); } } return response; } "	0	0	0	0	1	0
@Override public void run() { activity.setSupportActionBar(mToolbar); } 	0	0	0	0	1	0
@Override public void keyTyped(KeyEvent e) { if (type == CaptureType.TYPED) { queue.offer(e); } } 	0	0	0	0	1	0
"public String getDescription(String lang) { String description = getInfo(lang, titles); return description == null ? ""No description set"" : description; } "	0	0	0	0	1	0
private int gameYToPixelY(int y) { return (y + cameraDy)*tileSize + windowShiftX; } 	0	0	1	0	1	0
@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); initialize(); setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); setContentView(R.layout.extension_session_view);  /* Set buttons callback */ Button sendBtn = (Button) findViewById(R.id.send_btn); sendBtn.setOnClickListener(mBtnSendListener); sendBtn.setEnabled(false);  /* Register to API connection manager */ if (!isServiceConnected(RcsServiceName.MULTIMEDIA, RcsServiceName.CONTACT)) { showMessageThenExit(R.string.label_service_not_available); return; } startMonitorServices(RcsServiceName.MULTIMEDIA, RcsServiceName.CONTACT); try { getMultimediaSessionApi().addEventListener(mServiceListener); initialiseMessagingSession(getIntent()); } catch (RcsServiceException e) { showExceptionThenExit(e); } } 	0	0	0	0	1	0
@Override public void onClick(View view) { TextView tv = (TextView) view.findViewById(R.id.textview); tv.setText(R.string.click); } 	0	0	0	0	1	0
"@Override public void onChildChanged(DataSnapshot dataSnapshot, String s) { Log.d(TAG, String.format(Locale.US, LOG_FORMAT, ""onChildChanged"", dataSnapshot, s)); process(dataSnapshot, false, CHANGED); } "	1	0	1	0	1	0
"@Override public void onChildAdded(DataSnapshot dataSnapshot, String s) { // Log the event and determine if the data snapshot exists, aborting if it does not. Log.d(TAG, String.format(Locale.US, LOG_FORMAT, ""onChildAdded"", dataSnapshot, s)); process(dataSnapshot, true, NEW); } "	1	0	1	0	1	0
"protected void destroy(final VmInstanceDeletionPolicy deletionPolicy, final Completion completion) { if (VmInstanceState.Created == self.getState()) { completion.success(); return; }  final VmInstanceInventory inv = VmInstanceInventory.valueOf(self); VmInstanceSpec spec = buildSpecFromInventory(inv, VmOperation.Destroy);  self = changeVmStateInDb(VmInstanceStateEvent.destroying);  FlowChain chain = getDestroyVmWorkFlowChain(inv); setFlowMarshaller(chain);  chain.setName(String.format(""destroy-vm-%s"", self.getUuid())); chain.getData().put(VmInstanceConstant.Params.VmInstanceSpec.toString(), spec); chain.getData().put(Params.DeletionPolicy, deletionPolicy); chain.done(new FlowDoneHandler(completion) { @Override public void handle(Map data) { completion.success(); } }).error(new FlowErrorHandler(completion) { @Override public void handle(final ErrorCode errCode, Map data) { if (originalCopy.getState() == VmInstanceState.Running) { checkState(originalCopy.getHostUuid(), new NoErrorCompletion(completion) { @Override public void done() { completion.fail(errCode); } }); } else { self = dbf.reload(self); changeVmStateInDb(VmInstanceStateEvent.unknown); completion.fail(errCode); } } }).start(); } "	0	0	0	0	1	0
"@Override public String beginSessionForUser(String username, String password) throws AuthorizationException { User u = null; try { u = userData.getByUsername(username); } catch (javax.persistence.EntityNotFoundException e) { throw new AuthorizationException(""Invalid username or password""); } if (password.equals(u.getPassword())) { UserSession us = new UserSession(); us.setStartTime(Timestamp.from(Instant.now())); us.setUserId(u.getUserid());  byte[] data = new byte[15]; new SecureRandom().nextBytes(data); String token = Base64.getEncoder().encodeToString(data);  us.setToken(token);  sessionData.saveAndFlush(us);  return token;  } else { throw new AuthorizationException(""Invalid username or password""); }  } "	0	0	0	0	1	0
"private void receiveHandshakeResponse(String key) throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(input)); ArrayList responseLines = new ArrayList(); String line = in.readLine(); while(!line.equals(EMPTY) ) { responseLines.add(line); line = in.readLine(); } Map headerMap = getHeaders(responseLines); String upgradeHeader = (String) headerMap.get(HTTP_HEADER_UPGRADE); if(!upgradeHeader.contains(HTTP_HEADER_UPGRADE_WEBSOCKET)){ throw new IOException(""WebSocket Response header: Incorrect upgrade.""); }  if(!headerMap.containsKey(HTTP_HEADER_SEC_WEBSOCKET_ACCEPT)){ throw new IOException(""WebSocket Response header: Missing Sec-WebSocket-Accept""); }  try { verifyWebSocketKey(key, (String)headerMap.get(HTTP_HEADER_SEC_WEBSOCKET_ACCEPT)); } catch (NoSuchAlgorithmException e) { throw new IOException(e.getMessage()); } catch (HandshakeFailedException e) { throw new IOException(""WebSocket Response header: Incorrect Sec-WebSocket-Key""); }  } "	0	0	1	0	1	0
public boolean placeBlock(World world) { if (state == null) return false; world.setBlockState(pos, state, 3); Block block = state.getBlock(); if (block instanceof ITileEntityProvider && tagCompound != null) { world.setTileEntity(pos, TileEntity.func_190200_a(null, tagCompound)); } return true; } 	0	0	0	0	1	0
"private void setDefaultValues() {  view.setDbAdminFile(prop.get(""FILE_DBADMIN"")); view.setAutoConnect(prop.get(""AUTOCONNECT_POSTGIS"")); view.setAutoStart(prop.get(""AUTOSTART_POSTGIS"")); view.setOpenInp(prop.get(""OPEN_INP"")); view.setOpenRpt(prop.get(""OPEN_RPT"")); view.setProjectUpdate(prop.get(""PROJECT_UPDATE"")); view.setOverwriteInp(prop.get(""OVERWRITE_INP"")); view.setOverwriteRpt(prop.get(""OVERWRITE_RPT"")); view.setAutoImportRpt(prop.get(""AUTO_IMPORT_RPT"")); view.setSqlLog(prop.get(""SQL_LOG"")); view.setSridQuestion(prop.get(""SRID_QUESTION"")); view.setLoadRaster(prop.get(""LOAD_RASTER"")); view.setCheckUpdates(prop.get(""AUTO_CHECK_UPDATES"", ""false"")); view.setLanguage(prop.get(""LANGUAGE"", ""en"")); String aux = prop.get(""LOG_FOLDER_SIZE"", ""10""); Integer size = 10; try{ size = Integer.parseInt(aux); } catch (NumberFormatException e) { String msg = Utils.getBundleString(""ConfigController.log_size_invalid""); //$NON-NLS-1$ Utils.logError(msg); } view.setLogFolderSize(size);  } "	0	0	0	0	1	0
"@Override protected Object doInBackground() throws Exception { List<String> decompileInsteadOfCopy = new ArrayList<>(); List<String> cp = new ArrayList<>(); cp.add(System.getProperty(""java.home"") + ""/lib/rt.jar""); try(JarFile j = new JarFile(jarFile))  { Enumeration<JarEntry> entries = j.entries(); while(entries.hasMoreElements()) { JarEntry entry = entries.nextElement(); if(entry.isDirectory()) continue; String name = entry.getName(); URL url; if(name.endsWith("".class"")) { if(name.contains(""$"")) { // Java subclass continue; } url = null; } else { url = new URL(""jar:"" + jarFile.getAbsoluteFile().toURI().toURL() + ""!/"" + name); LOG.log(Level.INFO, ""Path: {0}"", url); } if(url == null) { decompileInsteadOfCopy.add(name); } this.publish(new FilePair(name, url)); } } if(!decompileInsteadOfCopy.isEmpty()) { Path tmp = Files.createTempDirectory(jarFile.getName()); tmp.toFile().deleteOnExit(); List<String> cmd = new ArrayList<>(); cmd.add(System.getProperty(""java.home"") + ""/bin/java""); cmd.add(""-jar""); cmd.add(config.getCrf().getAbsolutePath()); cmd.add(""--outputdir""); cmd.add(tmp.toAbsolutePath().toString()); cmd.add(jarFile.getAbsolutePath()); LOG.log(Level.INFO, ""Executing: \""'{0}'\"""", cmd.stream().collect(Collectors.joining(""' '""))); ProcessBuilder builder = new ProcessBuilder(cmd); builder.redirectErrorStream(true); Process p = builder.start(); try { p.getOutputStream().close(); try(BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()))) { String line; int read = 0; int total = decompileInsteadOfCopy.size();  // This is needed because the processing lines ""lagg"" behind, // they are printed when CFR starts processing the class, and // not when its done processing the file. FilePair pub = null;  while((line = r.readLine()) != null) {  LOG.log(Level.INFO, ""Read: {0}"", line); if(line.startsWith(""Processing "")) { if(pub != null) { this.publish(pub); pub = null; } read++; String decompiled = line.substring(""Processing "".length()).replace('.', '/'); this.setProgress(read * 100 / total); pub = new FilePair(decompiled + "".class"", new File(tmp + ""/"" + decompiled + "".java"").toURI().toURL()); // Calculate progress using decompileInsteadOfCopy size } if(this.isCancelled()) { p.destroy(); } } if(pub != null) { this.publish(pub); } } } finally { p.destroy(); } if(p.waitFor() != 0) { throw new IllegalStateException(""Invalid exit state: "" + p.exitValue()); } } return null; } "	0	0	0	0	0	1
public static String getEncodedPacket(byte[] packetRawData) { String hexDataString = PacketBuilderHelper.getPacketHex(packetRawData); return trafficProfile.encodeBinaryFromHexString(hexDataString); } 	0	0	1	1	0	0
"@Override public void init() throws IOException { try { JdbcEntityDefinitionManager.load(); ConnectionManagerFactory.getInstance(); JdbcEntityDDLManager.getInstance().init(); } catch (Exception e) { LOG.error(""Failed to start connection manager"",e); throw new IOException(e); } } "	0	0	0	0	1	0
@Override public void getLinkableAssetsAndAttributes(ValueHolder valueHolder, Consumer<Map<AttributeRefEditor.AssetInfo, List<AttributeRefEditor.AttributeInfo>>> assetAttributeConsumer) { AssetQuery query; Predicate<AssetAttribute> attributeFilter = null;  if ((valueHolder instanceof MetaItem) && AgentLink.isAgentLink((MetaItem) valueHolder)) { query = new AssetQuery() .select(new AssetQuery.Select(AssetQuery.Include.ONLY_ID_AND_NAME_AND_ATTRIBUTES)) // Limit to agents .type(AssetType.AGENT);  // Retrieve agents in the same realm as the asset (if it has been assigned a realm otherwise // the query will be automatically restricted to the logged in users realm) if (!isNullOrEmpty(asset.getRealmId())) { query.tenant(new AbstractAssetQuery.TenantPredicate(asset.getRealmId())); }  attributeFilter = ProtocolConfiguration::isProtocolConfiguration; } else { query = new AssetQuery() .select(new AssetQuery.Select(AssetQuery.Include.ONLY_ID_AND_NAME_AND_ATTRIBUTE_NAMES, true));  // Limit to assets that have the same realm as the asset being edited (if it has been assigned a realm // otherwise the query will be automatically restricted to the logged in users realm) if (!isNullOrEmpty(asset.getRealmId())) { query.tenant(new AbstractAssetQuery.TenantPredicate(asset.getRealmId())); } }  // Do request final Predicate<AssetAttribute> finalAttributeFilter = attributeFilter; environment.getRequestService().execute( assetArrayMapper, assetQueryMapper, requestParams -> assetResource.queryAssets(requestParams, query), 200, assets -> { Map<AttributeRefEditor.AssetInfo, List<AttributeRefEditor.AttributeInfo>> assetAttributeMap = Arrays .stream(assets) .filter(asset -> !asset.getAttributesList().isEmpty()) .collect(Collectors.toMap( asset -> new AttributeRefEditor.AssetInfo(asset.getName(), asset.getId()), asset -> asset.getAttributesStream() .filter(attribute -> finalAttributeFilter == null || finalAttributeFilter.test(attribute)) .map(attribute -> new AttributeRefEditor.AttributeInfo( attribute.getName().orElse(null), attribute.getLabelOrName().orElse(null) ) ) .collect(Collectors.toList())  ));  assetAttributeConsumer.accept(assetAttributeMap); }, exception -> assetAttributeConsumer.accept(new HashMap<>()) ); } 	0	0	1	1	0	0
private void accuseMessage() { long thread_id = mConversation.getThreadId(); for (Integer pos : mSelectedPos) { Cursor c = (Cursor) getListView().getAdapter().getItem(pos); String rcsId = String.valueOf(c.getString(COLUMN_RCS_ID)); try { mMessageApi.accuseMessage(thread_id, rcsId); } catch (ServiceDisconnectedException e) { e.printStackTrace(); } } } 	0	0	0	0	1	0
@Override public void onFocusChanged(boolean hasFocus, int direction, Rect previous) { super.onFocusChanged(hasFocus, direction, previous);  // See if the user left any unfinished tokens and finish them if(enoughToFilter()) performCompletion();  // Collapse the view to a single line if(allowCollapse) performCollapse(hasFocus); } 	0	0	1	0	1	0
private void removeSiteArchive() { DrillOnYarnConfig doyConfig = DrillOnYarnConfig.instance(); if ( ! doyConfig.hasSiteDir() ) { return; } String archiveName = config.getString( DrillOnYarnConfig.SITE_ARCHIVE_NAME ); removeArchive( archiveName ); } 	0	0	1	0	1	0
"private void validateErrorHandler(boolean batch) { GenericErrorHandler<?> errHandler = this.containerProperties.getErrorHandler(); if (errorHandler == null) { return; } Type[] genericInterfaces = errHandler.getClass().getGenericInterfaces(); boolean ok = false; for (Type t : genericInterfaces) { if (t.equals(ErrorHandler.class)) { ok = !batch; break; } else if (t.equals(BatchErrorHandler.class)) { ok = batch; break; } } Assert.state(ok, ""Error handler is not compatible with the message listener, expecting an instance of "" + (batch ? ""BatchErrorHandler"" : ""ErrorHandler"") + "" not "" + errHandler.getClass().getName()); } "	0	0	0	0	1	0
"@Test public void getRequest() throws Exception { URL url = new URL(""http://localhost:"" + RANDOM_SERVER_PORT + ""/""); HttpURLConnection connection = (HttpURLConnection) url.openConnection(); connection.setDoInput(true);  String result = Util.readToString(connection.getInputStream());  assertEquals(""hello world"", result);  NotifyingListAppender listAppender = (NotifyingListAppender) REQYEST_LOG_IMPL .getAppender(""list""); listAppender.list.clear(); } "	0	0	1	0	0	0
"@Override public void updateGUI(boolean force) { ArrayList<User> activeUsers = new ArrayList<User>(); ArrayList<User> idleUsers = new ArrayList<User>();  final Duration activeWindow = Duration.ofSeconds(UserListPanel.this.client.getTimeToIdle());  for (User user : this.client.getUserList()) { final Duration timeSinceLastActive = this.client.getUser().timeSinceLastActive(); if (!activeWindow.isZero() && timeSinceLastActive.compareTo(activeWindow) > 0) { idleUsers.add(user); } else { activeUsers.add(user); } } this.header.setText(""Active ("" + activeUsers.size() + "")""); if (!activeUsers.isEmpty()) { activeUsers.sort(new CompareActiveUsers()); } if (!idleUsers.isEmpty()) { idleUsers.sort(new CompareIdleUsers()); }  this.userListModel.removeAllElements(); for (final User user : activeUsers) { this.userListModel.addElement(user); }  User idleUser = new User(); idleUser.setUserName(""Idle ("" + idleUsers.size() + "")""); idleUser.setRole(Role.IDLE); this.userListModel.addElement(idleUser);  for (final User user : idleUsers) { this.userListModel.addElement(user); } } "	0	0	1	1	0	0
"@Override protected void addButtonsBeforeData(TableLayout tableLayout) { TableLayout playoffTableLayout = (TableLayout) View.inflate( this, R.layout.playoff_playoff_information, null );  ImageView imageView = (ImageView) playoffTableLayout.findViewById(R.id.playoff_type); if (playoff.computerPlayOffConfiguration == null) { imageView.setImageResource(R.drawable.ic_standing_man); } else { imageView.setImageResource(R.drawable.ic_computer); }  ((TextView) playoffTableLayout.findViewById(R.id.opponent_name)).setText(""Computer""); ((TextView) playoffTableLayout.findViewById(R.id.total_score)).setText(String.valueOf(playoff.userPlayoffScore) + "" - "" + String.valueOf(playoff.opponentPlayoffScore)); ((TextView) playoffTableLayout.findViewById(R.id.datetime)).setText(DatetimeHelper.DATE_FORMATTER.format(playoff.datetime)); ((TextView) playoffTableLayout.findViewById(R.id.tournament_constraint)).setText(playoff.getTournamentConstraint().translatedName); if (playoff.computerPlayOffConfiguration != null) { ((TextView) playoffTableLayout.findViewById(R.id.score_configuration)).setText(String.valueOf(playoff.computerPlayOffConfiguration.minScore) + "" - "" + String.valueOf(playoff.computerPlayOffConfiguration.maxScore)); }  tableLayout.addView(playoffTableLayout);  } "	0	0	0	0	1	0
@Before public void setup() throws Exception { testFixture.setup(this); } 	0	0	0	1	0	0
"public static Response getSetup(IHTTPSession session, Map<String, String> args, Map<String, String> files, ViewContext context, Model model) { return new Response(View.make(""setup.firstrun"", context)); } "	0	0	0	1	1	0
private void loadAllUserGroups() { List<BTSUserGroup> groups = userManagerController.listUserGroups(null); observableLisAllUserGroups = new WritableList(groups, BTSUserGroup.class); userGroupMap = new HashMap<String, BTSUserGroup>(groups.size()); for (BTSUserGroup u : groups) { userGroupMap.put(u.getName(), u); } } 	0	0	0	0	1	0
"private void updateWithDefaultConfiguration(String pid, Tocd ocd) throws KuraException, IOException { String servicePid = this.m_servicePidByPid.get(pid); if (servicePid == null) { servicePid = pid; } Configuration config = this.m_configurationAdmin.getConfiguration(servicePid); if (config != null) { // get the properties from ConfigurationAdmin if any are present Map<String, Object> props = new HashMap<String, Object>(); if (config.getProperties() != null) { props.putAll(CollectionsUtil.dictionaryToMap(config.getProperties(), ocd)); }  if (!props.containsKey(ConfigurationService.KURA_SERVICE_PID)) { props.put(ConfigurationService.KURA_SERVICE_PID, pid); }  // merge the current properties, if any, with the defaults from metatype mergeWithDefaults(ocd, props);  config.update(CollectionsUtil.mapToDictionary(props)); s_logger.info(""Seeding updated configuration for pid: {}"", pid); } } "	0	0	1	1	1	0
"public static <T> Class<T> boxingTypeFor(final Class<T> type) { if (double.class.equals(type)) { return (Class<T>)Double.class; } if (float.class.equals(type)) { return (Class<T>)Float.class; } if (long.class.equals(type)) { return (Class<T>)Long.class; } if (int.class.equals(type)) { return (Class<T>)Integer.class; } if (short.class.equals(type)) { return (Class<T>)Short.class; } if (byte.class.equals(type)) { return (Class<T>)Byte.class; } if (boolean.class.equals(type)) { return (Class<T>)Boolean.class; } if (char.class.equals(type)) { return (Class<T>)Character.class; } if (void.class.equals(type)) { return (Class<T>)Void.class; } throw new IllegalArgumentException(""Not a primitive type: "" + type.getName()); } "	0	0	1	1	0	0
@Override public int getItemCount() { return mArticlesTextParts == null ? 0 : mArticlesTextParts.size() + 1; //+1 for title } 	0	0	0	0	1	0
@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { int mode = MeasureSpec.getMode(widthMeasureSpec); int width = MeasureSpec.getSize(widthMeasureSpec); contentWidth = (int) (maxTextWidth + getPaddingLeft() + getPaddingRight()); if (mode != MeasureSpec.EXACTLY) { // wrap_content width = contentWidth; }  mode = MeasureSpec.getMode(heightMeasureSpec); int height = MeasureSpec.getSize(heightMeasureSpec); textHeight = (int) (fm.bottom - fm.top); contentHeight = textHeight * maxShowNum + textPadding * maxShowNum; if (mode != MeasureSpec.EXACTLY) { // wrap_content height = contentHeight + getPaddingTop() + getPaddingBottom(); }  cx = width / 2; cy = height / 2;  setMeasuredDimension(width, height); } 	0	0	0	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.connect);  // Button listeners findViewById(R.id.button_advertise).setOnClickListener(this); findViewById(R.id.button_discover).setOnClickListener(this); //findViewById(R.id.button_send).setOnClickListener(this);  // EditText //mMessageText = (EditText) findViewById(R.id.edittext_message);  // Debug text view mDebugInfo = (TextView) findViewById(R.id.debug_text); mDebugInfo.setMovementMethod(new ScrollingMovementMethod());  // Initialize Google API Client for Nearby Connections. Note: if you are using Google+ // sign-in with your project or any other API that requires Authentication you may want // to use a separate Google API Client for Nearby Connections.  This API does not // require the user to authenticate so it can be used even when the user does not want to // sign in or sign-in has failed.  mConnectionManager = new ConnectionManager(this); mConnectionManager.addMessageReceiverListener(this); } 	0	0	0	0	1	0
public static Map<Integer, ItemStack> findItemsIndexedInInventoryFuel(IItemHandlerModifiable handler, @Nullable NBTTagCompound matchNBTTag) { Map<Integer, ItemStack> stacksOut = new HashMap<>(); for (int j = 0; j < handler.getSlots(); j++) { ItemStack s = handler.getStackInSlot(j); if (ForgeEventFactory.getItemBurnTime(s) > 0 && NBTMatchingHelper.matchNBTCompound(matchNBTTag, s.getTagCompound())) { stacksOut.put(j, s.copy()); } } return stacksOut; } 	0	0	0	0	1	0
"ConfigBuilder JETTY_WEB_PORT_GET_ENV(String val){ JETTY_WEB_PORT_GET_ENV = assignStringValue(val, default_JETTY_WEB_PORT_GET_ENV); logger.debug(""JETTY_WEB_PORT_GET_ENV:""+JETTY_WEB_PORT_GET_ENV); return this; } "	0	0	0	0	1	0
"ConfigBuilder PG_VIDEO_BASE_URL(String val){ PG_VIDEO_BASE_URL = assignStringValue(val, default_PG_VIDEO_BASE_URL); logger.debug(""PG_VIDEO_BASE_URL:""+PG_VIDEO_BASE_URL); return this; } "	0	0	0	0	1	0
"ConfigBuilder YOUTUBE_CLIENT_SECRET(String val){ YOUTUBE_CLIENT_SECRET = assignStringValue(val, default_YOUTUBE_CLIENT_SECRET); logger.debug(""YOUTUBE_CLIENT_SECRET:""+YOUTUBE_CLIENT_SECRET); return this; } "	0	0	0	0	1	0
"ConfigBuilder PROXY_HOST(String val){ PROXY_HOST = assignStringValue(val, default_PROXY_HOST); logger.debug(""PROXY_HOST:""+PROXY_HOST); return this; } "	0	0	0	0	1	0
"ConfigBuilder EMAIL_SUBJECT(String val){ EMAIL_SUBJECT = assignStringValue(val, default_EMAIL_SUBJECT); logger.debug(""EMAIL_SUBJECT:""+EMAIL_SUBJECT); return this; } "	0	0	0	0	1	0
private void checkLabel() { checkChildren(getMainAst(), mLabelChildren, getLevel(), true, false); } 	0	0	0	0	1	0
private void checkCase() { checkChildren(getMainAst(), mCaseChildren, getLevel(), true, false); } 	0	0	0	0	1	0
"@Override public String toString() { StringBuffer buffer = new StringBuffer(); buffer.append(""PrestatsReport [summary="").append(summary).append(""]""); return buffer.toString(); } "	1	0	0	0	1	0
public void writeToClusterCache () throws IOException { clusterGraphService.addGraphFile(getBundleDataPath());  // if the shapes are null, compute them. // They are built on upload, but older databases may not have them. // but don't rebuild failed uploads every time the server is started if ((this.getSegments().isEmpty() || this.timeZone == null) && this.failed != null && !this.failed) { processGtfs(); } } 	0	0	0	0	1	0
"@Override protected boolean isValidEntry( String key, Constructor<? extends FilterInputStream> value ) { if (value == null) return true;  if (!Modifier.isPublic(value.getModifiers())) { throw new IllegalArgumentException(new IllegalAccessException( value + "" isn’t public"")); } if (!Arrays.equals(value.getParameters(), decoderConstructorParams)) { throw new IllegalArgumentException(new IllegalArgumentException( value + "" has an illegal parameter list; expected "" + Arrays.toString(decoderConstructorParams))); }  checkClass(value.getDeclaringClass()); return true; } "	0	0	0	0	1	0
"public void actionPerformed(ActionEvent e) { this.loadSettings(); final JFileChooser fileChooser = new JFileChooser(); fileChooser.setAcceptAllFileFilterUsed(false); fileChooser.addChoosableFileFilter(new JPGFilter()); fileChooser.addChoosableFileFilter(new PNGFilter());  Settings settings = Settings.getSingletonInstance(); String val; try { val = settings.getProperty(SETTING_SCREENSHOT_EXPORT_LAST_DIRECTORY); if (val != null && !(val.length() == 0)) { fileChooser.setCurrentDirectory(new File(val)); } } catch (Throwable t) { Log.error(t); }  fileChooser.setSelectedFile(new File(fileChooser.getCurrentDirectory() + ""/"" + SaveScreenshotAction.getDefaultFileName())); int retVal = fileChooser.showSaveDialog(ImageViewerGui.getMainFrame());  if (retVal == JFileChooser.APPROVE_OPTION) { settings.setProperty(SETTING_SCREENSHOT_EXPORT_LAST_DIRECTORY, fileChooser.getCurrentDirectory().getPath() + ""/""); settings.save(); File selectedFile = fileChooser.getSelectedFile();  ExtensionFileFilter fileFilter = (ExtensionFileFilter) fileChooser.getFileFilter();  if (!fileFilter.accept(selectedFile)) { selectedFile = new File(selectedFile.getPath() + ""."" + fileFilter.getDefaultExtension()); }  try { ImageViewerGui.getSingletonInstance().getMainView().stop(); if (this.useCurrentOpenGlSize) ImageViewerGui.getSingletonInstance().getMainView().saveScreenshot(fileFilter.getDefaultExtension(), selectedFile); else ImageViewerGui.getSingletonInstance().getMainView().saveScreenshot(fileFilter.getDefaultExtension(), selectedFile, this.imageWidth, this.imageHeigth); ImageViewerGui.getSingletonInstance().getMainView().start(); } catch (IOException e1) { e1.printStackTrace(); } } } "	0	0	0	0	0	1
"private static String generateEntryPointFunction(String scriptName, CommandLine commandLine, Map<String, CommandLine> function2command) { String HEADER = """" + ""# Bash completion entry point function.\n"" + ""# _complete_%1$s finds which commands and subcommands have been specified\n"" + ""# on the command line and delegates to the appropriate function\n"" + ""# to generate possible options and subcommands for the last specified subcommand.\n"" + ""function _complete_%1$s() {\n"" + ""  CMDS0=(%1$s)\n"" + //                ""  CMDS1=(%1$s gettingstarted)\n"" + //                ""  CMDS2=(%1$s tool)\n"" + //                ""  CMDS3=(%1$s tool sub1)\n"" + //                ""  CMDS4=(%1$s tool sub2)\n"" + //                ""\n"" + //                ""  ArrContains COMP_WORDS CMDS4 && { _picocli_basic_tool_sub2; return $?; }\n"" + //                ""  ArrContains COMP_WORDS CMDS3 && { _picocli_basic_tool_sub1; return $?; }\n"" + //                ""  ArrContains COMP_WORDS CMDS2 && { _picocli_basic_tool; return $?; }\n"" + //                ""  ArrContains COMP_WORDS CMDS1 && { _picocli_basic_gettingstarted; return $?; }\n"" + //                ""  ArrContains COMP_WORDS CMDS0 && { _picocli_%1$s; return $?; }\n"" + //                ""  echo \""not found\""\n"" + //                ""  _picocli_%1$s; return $?;\n"" + //                ""}\n"" + //                ""\n"" + //                ""complete -F _complete_%1$s %1$s\n"" + //                ""\n""; """"; String FOOTER = """" + ""  ArrContains COMP_WORDS CMDS0 && { _picocli_%1$s; return $?; }\n"" + ""  echo \""not found\""\n"" + ""  _picocli_%1$s; return $?;\n"" + ""}\n"";  StringBuilder buff = new StringBuilder(1024); buff.append(format(HEADER, scriptName));  List<String> predecessors = new ArrayList<String>(); predecessors.add(scriptName); List<String> functionCallsToArrContains = new ArrayList<String>();  function2command.put(scriptName, commandLine); generateFunctionCallsToArrContains(predecessors, commandLine, buff, functionCallsToArrContains, function2command);  buff.append(""\n""); Collections.reverse(functionCallsToArrContains); for (String func : functionCallsToArrContains) { buff.append(func); } buff.append(format(FOOTER, scriptName)); return buff.toString(); } "	0	0	0	0	1	0
public static void genMongoDBModule() throws IOException {  String[] templates = getTemplates(); String[] files     = getFiles();  for ( int i = 0; i < files.length; i++ ) { mergeTemplate( files[ i ], templates[ i ] ); }  } 	0	0	0	0	1	0
"@Override public void onCheckedChanged(CompoundButton compoundButton, boolean b) { settings.save(""news_browser"", b); } "	0	0	0	0	1	0
"@Test public void ResponseMessageHandler() { final LogArgumentGroupExtractor extractor = LogArgumentGroupExtractor.instance("""", """", """", """", LogFormatArgument.ERROR_MESSAGE.toString());  httpLogFormatter.setLogic(extractor, formatter);  assertTrue(formatter.getLogic() instanceof ResponseMessageHandler); } "	0	0	0	0	1	0
"@Override public void onResume() { super.onResume(); ((MainActivity) getActivity()).setTitle(getResources().getString(R.string.listaen) + "" "" + sBase.getServerName()); ((MainActivity) getActivity()).enableHomeButton(true); } "	0	0	0	0	1	0
"private void initialize() { frame = new JFrame(); frame.setBounds(100, 100, 583, 290); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.getContentPane().setLayout(null); frame.setResizable(false);  JLabel lblDobroDoaoMeho = new JLabel(""Dobro došao, Meho!""); lblDobroDoaoMeho.setBounds(12, 12, 153, 15); frame.getContentPane().add(lblDobroDoaoMeho);  JButton btnNewButton = new JButton(""Prijava preuzetog vozila""); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { PrijavljivanjePreuzetogVozila prijava = new PrijavljivanjePreuzetogVozila(); prijava.main(null); } }); btnNewButton.setBounds(12, 74, 220, 25); frame.getContentPane().add(btnNewButton);  JButton btnOdjavaPreuzetogVozila = new JButton(""Odjava preuzetog vozila""); btnOdjavaPreuzetogVozila.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { OdjavljivanjePreuzetogVozila odjava = new OdjavljivanjePreuzetogVozila(); odjava.main(null); } }); btnOdjavaPreuzetogVozila.setBounds(12, 120, 220, 25); frame.getContentPane().add(btnOdjavaPreuzetogVozila);  JButton btnOdjaviSe = new JButton(""Odjavi se""); btnOdjaviSe.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { for (Window window : Window.getWindows()) { window.dispose(); } JOptionPane.showMessageDialog(null, ""Uspješno ste odjavljeni!""); Login login = new Login(); login.main(); } }); btnOdjaviSe.setBounds(440, 176, 117, 25); frame.getContentPane().add(btnOdjaviSe);  JButton PregledSlobodnihVozila = new JButton(""Pregled slobodnih vozila""); PregledSlobodnihVozila.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { PregledSlobodnihVozila pregledSlobodnih = new PregledSlobodnihVozila(); pregledSlobodnih.main(null); } }); PregledSlobodnihVozila.setBounds(12, 157, 220, 25); frame.getContentPane().add(PregledSlobodnihVozila);  JButton btnHelp = new JButton(""Pomoć""); btnHelp.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { JOptionPane.showMessageDialog(null, ""Omogućen vam je pregled svih slobodnih vozila. Prijavite ili odjavite"" + ""vozilo koje namjeravate preuzeti/vratiti."");  } }); btnHelp.setBounds(477, 228, 80, 23); frame.getContentPane().add(btnHelp); } "	0	0	0	1	0	0
public void setOnClickListener(final MaterialSectionOnClickListener listener) { this.listener = listener; } 	0	0	0	0	1	0
@RequiresPermission(allOf = { Manifest.permission.ACCESS_WIFI_STATE, Manifest.permission.ACCESS_NETWORK_STATE }) public final String getWifiSSID() { String result = null; if (PermissionUtil.hasPermission(context, Manifest.permission.ACCESS_WIFI_STATE)) { ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE); NetworkInfo networkInfo = cm.getActiveNetworkInfo(); if (networkInfo == null) { result = null; }  if (networkInfo.isConnected()) { final WifiManager wifiManager = (WifiManager) context.getApplicationContext().getSystemService(Context.WIFI_SERVICE); final WifiInfo connectionInfo = wifiManager.getConnectionInfo(); if (connectionInfo != null && !TextUtils.isEmpty(connectionInfo.getSSID())) { result = connectionInfo.getSSID(); } } } return CheckValidityUtil.checkValidData(result); } 	0	0	1	0	1	0
"public boolean newAccount(String type, String name, float balance) throws IllegalArgumentException {  if (balance < 0.0f) throw new IllegalArgumentException(""New account may not be started with a negative balance"");  return newAccountFactory(type, name, balance); } "	0	0	0	0	1	0
"public static void main(final String[] args) throws Exception {  if (args.length != 1) { System.out.println(""Usage: java FormMain <property file>""); System.exit(1); }  String propertyFile = args[0]; JFrame frame = new MainFrame(propertyFile); frame.setVisible(true);  } "	0	0	0	0	1	0
"public ResourceBundle getResourceBundle(Locale locale) { if (!bundles.containsKey(locale)) { ResourceBundle localeBundle = ResourceBundle.getBundle(""fi.metatavu.edelphi.smvcj.i18n.locale"", locale); bundles.put(locale, localeBundle); }  return bundles.get(locale); } "	0	0	0	0	1	0
"private void addToStorageTable(final String itemName, int itemCount) { // Create a table to hold name + image final StorageButton itemButton = new StorageButton(mySkin, itemName); itemButton.setColor(0.03f, 0.69f, 0.73f, 1);  // TODO test only  //        itemButton.addListener( //                new InputListener() { // //                    @Override //                    public boolean touchDown(InputEvent evt, float x, float y, int pointer, int button) { //                        for (InventoryManagementListener iml : listeners) { //                            iml.storageItemTouched(itemName); //                        } //                        return true; //                    } // //                    @Override //                    public void touchUp(InputEvent event, float x, float y, int pointer, int button) { // //                    } //                });  Table internalItemGroupTable = new Table(); itemImage = new Image(atlas.findRegion(itemName));  // Label hold items name Label itemNameLabel = new Label(itemName, mySkin); itemNameLabel.setFontScale(0.75f, 0.75f); internalItemGroupTable.add(itemNameLabel).left(); internalItemGroupTable.row();  // Label holds item count Label itemCountLabel = new Label(""#"" + Integer.toString(itemCount), mySkin); itemCountLabel.setFontScale(0.5f, 0.5f); internalItemGroupTable.add(itemCountLabel).right();  Image itemImage = this.itemImage;  // Add a label and image to the table and fit the image itemButton.add(internalItemGroupTable).left().spaceRight(10); itemButton.add(itemImage).width(100).height(100); itemButton.row(); itemImage.setScaling(Scaling.fit);  // Add the table to our main storage table storageTable.add(itemButton).fill(); storageTable.row(); } "	0	0	0	0	1	0
"public void saveOnFile() { File dir = new File(Platform.getInstallLocation().getURL().getPath() + CONF_DIR);  if (!dir.exists()) { if (dir.canWrite()) { dir.mkdir(); } else { // Set as default in the home directory dir = new File(System.getProperty(""user.home"") + CONF_DIR); MessageDialog .openError( Display.getCurrent().getActiveShell(), ""Configuration file locations"", ""Warning: Configuration file will not in default location since the eclipse directory does not the write permission."" + ""The configuration file will be placed in "" + dir); if (!dir.exists()) dir.mkdir(); } }  ConfFilePath = dir + CONF_FILE_NAME; File file = new File(ConfFilePath);  checkPaths(); try { config.store(new FileOutputStream(file), HEADING); } catch (IOException e) { e.printStackTrace(); } } "	0	0	1	0	1	0
"public static void main(String[] args) { String path_waimai = ""/Users/hedingxu/robust-github/Robust/app/robust/methodsMap_waimai.robust""; //        parseRobustMethodsMap2File(path_waimai, new File(path_waimai + "".bak""));  String path0 = ""/Users/hedingxu/robust-github/Robust/app/robust/methodsMap.robust""; path0 = ""/Users/hedingxu/robust-github/Robust/app/build/outputs/robust/methodsMap.robust""; //        String path1 = ""/Users/hedingxu/robust-github/Robust/app/robust/methodsMap-11.robust""; //        String path2 = ""/Users/hedingxu/robust-github/Robust/app/robust/methodsMap-12.robust""; //        HashMap<String, String> hashMap1 = getMapFromZippedFile(path1); //        HashMap<String, String> hashMap2 = getMapFromZippedFile(path2); //        System.err.println(hashMap1.equals(hashMap2));  parseRobustMethodsMap2File(path0, new File(""/Users/hedingxu/robust-github/Robust/app/robust/methodsMap0_bak.robust"")); if (true) { return; }  //        long currentTime = System.currentTimeMillis(); //        MethodInfo methodInfo = getMethodInfo(getMapFromZippedFile(path0), ""3a14784fc776abddcbc524a840f8378a""); //        System.err.println(""originalMethodStr: "" + methodInfo.originalMethodStr); //        System.err.println(""className        : "" + methodInfo.className); //        System.err.println(""methodName       : "" + methodInfo.methodName); //        System.err.println(""paramTypes       : "" + String.join("","", methodInfo.paramTypes)); //        System.err.println(""spend time       : "" + (System.currentTimeMillis() - currentTime));  HashMap<String, String> robustMethodsMap = getMapFromZippedFile(path0); Set<String> keySet = robustMethodsMap.keySet(); for (String key : keySet) { String methodSignature = key.trim(); MethodInfo methodInfo = new MethodInfo(methodSignature);  //            if (methodInfo.paramTypes.length>0){ //                methodInfo.paramTypes[0] = methodInfo.paramTypes[0] + ""222""; //            } String methodId = getMethodId(robustMethodsMap, methodInfo.className, methodInfo.methodName, methodInfo.paramTypes); System.err.println(""methodId : "" + methodId + "" ,methodString : "" + methodSignature); }  } "	0	0	0	0	1	0
"@Override public UserPrincipal authenticateUser(String userId, String password) throws RepositorySecurityException { UserPrincipal user;  if ((userId != null) && (password != null)) { UserInfo userInfo = authenticationProvider.getUserInfo( userId );  if ((userInfo == null) || !authenticationProvider.isValidUser( userId, password )) { throw new RepositorySecurityException( ""Invalid user name or password submitted for principal: "" + userId + ""/'"" + password + ""'""); } user = new UserPrincipal( userInfo, groupAssignmentsResource.getAssignedGroups( userId ) );  } else { user = UserPrincipal.ANONYMOUS_USER; } return user; } "	0	0	1	1	0	0
"private POGraph getAncestor(String label) { POGraph ancestor = new POGraph(pogAlignment); if (label.equalsIgnoreCase(""root"")) label = (String)phyloTree.getRoot().getLabel(); List<Inference> inferences = ancestralInferences.get(label); for (Inference inferredBase : inferences) if (ancestor.setCurrent(inferredBase.pogId)) { // set inferred base, or remove node if inferred to be removed if (inferredBase.pogId != null && inferredBase.pogId != -1) if (inferredBase.base == '-') // remove node from ancestor ancestor.removeNode(); else ancestor.setBase(inferredBase.base); // if node is still there, check the parsimonious transitions. Because we are doing both backwards and forwards parsimony, // get the intersection of the previous/next nodes and all inferred transitions of the current node if (ancestor.getCurrentId() != inferredBase.pogId) continue;  // find union of next/previous transitions and remove transitions that are not inferred // 'next': ArrayList<Integer> keepNext = new ArrayList<>(); for (Integer nextId : ancestor.getNextIDs()) { // Identify if edge is reciprocated by backwards parsimony (if so, flag) Inference next = null; for (Inference i : inferences) if (i.pogId == nextId) { next = i; break; } if (inferredBase.transitions.contains(nextId) && next != null && next.transitions.contains(inferredBase.pogId)) ancestor.setReciprocated(nextId); if (next != null && next.transitions.contains(inferredBase.pogId)) keepNext.add(next.pogId); }  // take the union of the inferred transitions (i.e. use all provided transitions from maximum parsimony) for (Integer nextId : ancestor.getNextIDs()) if (inferredBase.transitions.contains(nextId) && !keepNext.contains(nextId)) keepNext.add(nextId); // check previous transitions of future nodes to see if there has been a parsimonious edge to this node // if so, add to keep for (Integer nextId : ancestor.getNextIDs()) if (!keepNext.contains(nextId)) ancestor.removeNextTransition(nextId); }  // if marginal, update each node with character distribution if (marginalNode != null) for (Integer nodeId : ancestor.getNodeIDs()) { double[] dist = marginalDistributions[nodeId].get(); HashMap<Character, Double> distribution = new HashMap<>(); for (int ind = 0; ind < dist.length; ind++) distribution.put((char) marginalDistributions[nodeId].getDomain().get(ind), dist[ind]); ancestor.setCurrent(nodeId); ancestor.setCharacterDistribution(distribution); } return ancestor; } "	1	0	1	1	0	0
"public void setFetchSize(int rows) throws SQLException { checkOpen();  if (rows < 0 || (statement.getMaxRows() > 0 && rows > statement.getMaxRows())) { throw new SQLException( Messages.get(""error.generic.badparam"", Integer.toString(rows), ""rows""), ""HY092""); } if (rows == 0) { rows = statement.getDefaultFetchSize(); } this.fetchSize = rows; } "	0	0	1	0	1	0
"private TreeNode createJTreeModelClass(String fileName, List<String> displayedClassNames) { DefaultMutableTreeNode root = new DefaultMutableTreeNode(fileName); DefaultMutableTreeNode classes = new DefaultMutableTreeNode(""classes""); String lastPackage = null; DefaultMutableTreeNode packageNode = null;  for (int i = 0; i < displayedClassNames.size(); i++) { String fullClassFileName = displayedClassNames.get(i); String pkg = fullClassFileName;  if (pkg.lastIndexOf('.') > 0) { pkg = pkg.substring(0, pkg.lastIndexOf('.')); }  if (lastPackage == null || !pkg.equals(lastPackage)) { lastPackage = pkg; packageNode = new DefaultMutableTreeNode(pkg); classes.add(packageNode); } packageNode.add(new DefaultMutableTreeNode(fullClassFileName)); } root.add(classes); return root; } "	0	0	0	0	1	0
public Collection<Runnable> getSubscribedListeners() { synchronized (listenersLock) { if (listeners == null) { return Collections.emptyList(); } else { return Collections.unmodifiableList(new ArrayList<Runnable>(listeners.keySet())); } } } 	0	0	0	0	1	0
@Test public void addListenerWithExecutorTest() { ListenerHelper<TestInterface> ch = makeListenerHelper(TestInterface.class); TestImp ti = new TestImp(); Executor executor = new SameThreadSubmitterExecutor(); ch.addListener(ti, executor);  assertEquals(1, ch.registeredListenerCount()); assertTrue(ch.listeners.get(ti) == executor); } 	0	0	0	0	1	0
public List<Institution> getInstitutionsFromLectureseriesIdsAndVideoIds(ArrayList<Long> lectureseriesIds, ArrayList<Long> videoIds) { return InstitutionFinderUtil.findInstitutionsByLectureseriesIdsAndVideoIds(lectureseriesIds, videoIds); } 	0	0	1	0	1	0
public static RxJavaSchedulersHook schedulerHook(Vertx vertx) { return io.vertx.rx.java.RxHelper.schedulerHook(vertx.delegate); } 	0	0	1	0	1	0
public static Scheduler scheduler(Vertx vertx) { return new ContextScheduler(vertx.delegate, false); } 	0	0	1	0	1	0
public static Scheduler scheduler(Context context) { return new ContextScheduler(context.delegate, false); } 	0	0	0	0	1	0
"public static void main(String[] args) throws Exception { // TODO Auto-generated method stub long start = System.currentTimeMillis();  Configuration conf = new Configuration();  String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();  if (otherArgs.length != 2) { System.err.println(""Usage: FSPChunkLevelDedup <in> <out>""); System.exit(2); }  log.debug(""=========job start========="");  Job job = new Job(conf, ""Job_FSPChunkLevelDedup""); job.setJarByClass(FileLevelDedup.class); job.setMapperClass(FSPMapper.class); job.setReducerClass(FSPReducer.class);  FileInputFormat.addInputPath(job, new Path(args[0])); FileOutputFormat.setOutputPath(job, new Path(args[1]));  job.setMapOutputKeyClass(Text.class); job.setMapOutputValueClass(ChunkInfo.class); job.setOutputKeyClass(Text.class); job.setOutputKeyClass(IntWritable.class);  job.setInputFormatClass(FSPFileInputFormat.class); job.setOutputFormatClass(TextOutputFormat.class);  long end = System.currentTimeMillis();  log.debug(""=========job end========="");  if (job.waitForCompletion(true)) { log.debug(""consume time:{} "", end-start); }  System.exit(job.isSuccessful() ? 0 : 1); } "	0	0	0	0	1	0
"public synchronized void closePositions(double riskFactor, int lossLimit) {  // Monitor accounts and close them accordingly for (TPosition position : openPositions.values()) { if (Algorithm.needsToBeClosed(position, riskFactor, lossLimit)) {  Util.sendNotification(""Closing position: "" + position); closePosition(position); } } } "	0	0	0	0	1	0
@Override public void onGenerated(Palette palette) { setColor(palette.getDarkVibrantColor(Color.BLACK)); } 	0	0	0	0	1	0
public void setAlarm(boolean isAlarm) { if (alarm != null) alarm.transition(isAlarm ? ImageUtils.getVectorDrawable(getContext(), R.drawable.ic_alarm) : null); } 	0	0	0	0	1	0
"@Override public boolean isRunnable(final UpdateStackCommand command) { boolean isRunnable = true; final String stackId = configStore.getStackId(command.getStackName());  if (StringUtils.isBlank(stackId)) { logger.error(""The stack name specified has been created for this environment yet!""); isRunnable = false; } else if (!cloudFormationService.isStackPresent(stackId)) { logger.error(""CloudFormation doesn't have the specified stack: {}"", stackId); isRunnable = false; }  return isRunnable; } "	0	0	0	0	1	0
"public void init() { super.init();  // set up input manager initInput();  // start resource manager resourceManager = new ResourceManager( screen.getFullScreenWindow().getGraphicsConfiguration());  // load resources renderer = new TileMapRenderer();  // load first map map = resourceManager.loadFirstMap();  // load sounds soundManager = new SoundManager(PLAYBACK_FORMAT); //prizeSound = soundManager.getSound(""sounds/prize.wav""); //boopSound = soundManager.getSound(""sounds/boop2.wav"");  // start music midiPlayer = new MidiPlayer(); Sequence sequence = midiPlayer.getSequence(""sounds/stage1.mid""); midiPlayer.play(sequence, true);  } "	0	0	0	0	1	0
"@Override protected NodeChannels connectToChannels(DiscoveryNode node, ConnectionProfile profile) throws IOException { NioSocketChannel[] channels = new NioSocketChannel[profile.getNumConnections()]; boolean connected = client.connectToChannels(node, channels, profile.getConnectTimeout(), new ClientChannelCloseListener(node)); if (connected == false) { throw new ElasticsearchException(""client is shutdown""); } return new NodeChannels(node, channels, profile); } "	0	0	0	0	1	0
public void clickContinue() { continueBtn.click(); } 	0	0	0	0	1	0
"public static <C extends Collection<Value>> C asValues(final Model m, Resource head, C collection, Resource... contexts) throws ModelException { Objects.requireNonNull(collection, ""collection may not be null"");  asValues(v -> collection.add(v), m, head, contexts);  return collection; } "	0	0	0	0	1	0
public static <C extends Collection<Statement>> C create(ValueFactory vf, Resource subject, IRI predicate, Value object, C collection, Resource... contexts) { Objects.requireNonNull(collection); create(vf, subject, predicate, object, st -> collection.add(st), contexts); return collection; } 	0	0	0	0	1	0
public boolean isLinearized() { return this.linearized; } 	0	0	0	0	1	0
"@Test public void test() throws ApiSenderException, InterruptedException { VmInstanceInventory cvm = deployer.vms.get(""TestVm""); List<L3NetworkInventory> cl3s = api.getVmAttachableL3Networks(cvm.getUuid()); Assert.assertTrue(cl3s.isEmpty());  IdentityCreator identityCreator = new IdentityCreator(api); AccountInventory account1 = identityCreator.useAccount(""test""); SessionInventory session1 = identityCreator.getAccountSession();  IdentityCreator identityCreator1 = new IdentityCreator(api); AccountInventory account2 = identityCreator1.createAccount(""account2"", ""password""); SessionInventory session2 = identityCreator1.getAccountSession();  InstanceOfferingInventory ioinv = deployer.instanceOfferings.get(""TestInstanceOffering""); ImageInventory image = deployer.images.get(""TestImage""); L3NetworkInventory l31 = deployer.l3Networks.get(""TestL3Network1""); L3NetworkInventory l32 = deployer.l3Networks.get(""TestL3Network2"");  L2NetworkInventory l2 = deployer.l2Networks.get(""TestL2Network"");  api.shareResource(list(ioinv.getUuid(), image.getUuid(), l31.getUuid()), list(account2.getUuid()), false, session1);  VmCreator vmCreator = new VmCreator(api); vmCreator.instanceOfferingUuid = ioinv.getUuid(); vmCreator.imageUuid = image.getUuid(); vmCreator.addL3Network(l31.getUuid()); vmCreator.session = session2; VmInstanceInventory vm = vmCreator.create();  List<L3NetworkInventory> l3s = api.getVmAttachableL3Networks(vm.getUuid(), session2); Assert.assertEquals(0, l3s.size());  api.shareResource(list(l32.getUuid()), list(account2.getUuid()), false, session1);  l3s = api.getVmAttachableL3Networks(vm.getUuid(), session2); Assert.assertEquals(1, l3s.size()); for (L3NetworkInventory l3 : l3s) { Assert.assertFalse(l3.getUuid().equals(l31.getUuid())); }  api.createL3BasicNetwork(l2.getUuid(), session2);  l3s = api.getVmAttachableL3Networks(vm.getUuid(), session2); Assert.assertEquals(2, l3s.size()); for (L3NetworkInventory l3 : l3s) { Assert.assertFalse(l3.getUuid().equals(l31.getUuid())); }  api.revokeAllResourceSharing(list(l32.getUuid()), session1);  l3s = api.getVmAttachableL3Networks(vm.getUuid(), session2); Assert.assertEquals(1, l3s.size()); for (L3NetworkInventory l3 : l3s) { Assert.assertFalse(l3.getUuid().equals(l31.getUuid())); }  // for admin l3s = api.getVmAttachableL3Networks(vm.getUuid()); Assert.assertEquals(3, l3s.size()); for (L3NetworkInventory l3 : l3s) { Assert.assertFalse(l3.getUuid().equals(l31.getUuid())); }  for (VmNicInventory nic : vm.getVmNics()) { api.detachNic(nic.getUuid()); }  l3s = api.getVmAttachableL3Networks(vm.getUuid()); Assert.assertEquals(4, l3s.size());  api.attachNic(vm.getUuid(), l31.getUuid()); l3s = api.getVmAttachableL3Networks(vm.getUuid()); for (L3NetworkInventory l3 : l3s) { Assert.assertFalse(l3.getUuid().equals(l31.getUuid())); }  l3s = api.getInterdependentL3NetworksByImageUuid(vm.getImageUuid(), vm.getZoneUuid(), session1); Assert.assertEquals(3, l3s.size());  l3s = api.getInterdependentL3NetworksByImageUuid(vm.getImageUuid(), vm.getZoneUuid(), session2); Assert.assertEquals(1, l3s.size()); } "	0	0	1	1	0	0
"public void setSTarget(SNode sTarget) { if (sTarget instanceof STextualDS) { this.setSTextualDS((STextualDS)sTarget); } else { throw new SaltImproperSTypeException(""Parameter for STextualRelation.setSTarget must be an instance of STextualDS.""); } } "	0	0	0	0	1	0
"public static Moment createCurrentMoment() { return new Moment(UUID.randomUUID(), ""Title"", ""Description"", Calendar.getInstance(), null, null, null); } "	1	0	1	1	0	0
"@SubscribeEvent public void onPlayerAttack(LivingHurtEvent e){ if (e.getSource().getEntity() instanceof EntityPlayer){ if (e.getEntityLiving().getHealth() - e.getAmount() <= 0){ EntityPlayer player = (EntityPlayer) e.getSource().getEntity(); if (player.getHeldItemMainhand().isItemEqual(new ItemStack(ModItems.pearcel_blood_dagger))){ ItemStack stack = player.getHeldItemMainhand(); if (!stack.hasTagCompound()){ stack.setTagCompound(new NBTTagCompound()); stack.getTagCompound().setInteger(""level"", 1); }else{ if (stack.getTagCompound().getInteger(""level"") <= 8) { stack.getTagCompound().setInteger(""level"", stack.getTagCompound().getInteger(""level"") + 1); }else{ stack.getTagCompound().setInteger(""level"", 0); EntityItem item = new EntityItem(player.getEntityWorld(), player.posX, player.posY + 0.5, player.posZ); item.setEntityItemStack(new ItemStack(ModItems.blood_drop)); Random rand = new Random(); int num = rand.nextInt(2) + 1; for (int i = 0; i <= num; i++) { player.getEntityWorld().spawnEntityInWorld(item); } } } } } } } "	0	0	0	0	1	0
@DataBoundSetter public void setImagePullSecrets(List<PodImagePullSecret> imagePullSecrets) { if(imagePullSecrets != null) { this.imagePullSecrets = new ArrayList<PodImagePullSecret>(); this.addImagePullSecrets(imagePullSecrets); } } 	0	0	1	0	1	0
"static void setAutoWindow(AbstractNettyHandler handler) { if (!enabled) { return; } synchronized (InternalHandlerSettings.class) { handler.setAutoTuneFlowControl(autoFlowControlOn); if (handler instanceof NettyClientHandler) { clientHandler = handler; } else if (handler instanceof NettyServerHandler) { serverHandler = handler; } else { throw new RuntimeException(""Expecting NettyClientHandler or NettyServerHandler""); } } } "	0	0	1	0	0	0
"@Before public void setUp() throws Exception { cl = new TestClass(""bla"", null); } "	0	0	0	0	1	0
"private void logging_button_refresh() { final boolean b = mMeter.meter_log_settings.target_logging_state==MooshimeterDevice.LOGGING_SAMPLING; final GradientDrawable bg = b?AUTO_GRADIENT:MANUAL_GRADIENT; final String title = b?""Logging:ON"":""Logging:OFF""; logging_button.setBackground(bg); logging_button.setText(title); } "	0	0	0	0	1	0
public boolean moveInTileY(Unit player, float deltaY) { if (player.getRelativeTileY() + deltaY < 64.0 && player.getRelativeTileY() + deltaY > 0.0) { return true; } return false; } 	0	0	0	0	1	0
"@Setter protected void setLayout(Environment env, Pane pane) { if (getWrappedObject().getScene() == null) { throw new IllegalStateException(""Unable to set layout""); }  getWrappedObject().getScene().setRoot(pane); getWrappedObject().sizeToScene(); data(env, ""~~virtual-layout"", Memory.NULL); } "	0	0	1	1	0	0
private void deleteAttachment(Session session, SimpleDocument document, boolean invokeCallback) throws RepositoryException { repository.fillNodeName(session, document); repository.deleteDocument(session, document.getPk()); for (String lang : I18NHelper.getAllSupportedLanguages()) { deleteIndex(document, lang); } if (document.isOpenOfficeCompatible()) { webdavRepository.deleteAttachmentNode(session, document); } if (invokeCallback) { AttachmentNotificationService notificationService = AttachmentNotificationService .getService(); notificationService.notifyOnDeletionOf(document); } } 	0	0	0	0	1	0
"@Override public void onAdUpdateProgress(String jsonValue) { if (playerListener != null) { playerListener.eventWithJSON(player, ""adRemainingTimeChange"", jsonValue); } } "	0	0	0	0	1	0
public String mAA4(int i, String s, boolean b){ return i+s+b+this.mAA3(i, s,b)+i+s+b+this.mAA2(i, s,b)+i+s+b+this.mAA1(i, s,b); }; 	0	0	0	0	1	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_search); if (getActionBar() != null) { getActionBar().setTitle(R.string.search_title); getActionBar().setDisplayHomeAsUpEnabled(true); } mSearchType = getIntent().getExtras().getInt(SEARCH_TYPE);  switch (mSearchType) { case REQUEST_CODE_SEARCH_POKEMON: String tier = getIntent().getExtras().getString(CURRENT_TIER, null);  HashMap<String, String> pokedex = Pokedex.get(getApplicationContext()).getPokedexEntries(); mAdapterList = new ArrayList<>(); // """" tier is only missingno lol if (tier == null || """".equals(tier)) { mAdapterList.addAll(pokedex.keySet()); Collections.sort(mAdapterList); } else { HashMap<String, ArrayList<String>> tiers = Tiering.get(getApplicationContext()).getTierList(); // todo implement tier sorting ArrayList<String> currentTier = tiers.get(tier); if (currentTier != null) { Collections.sort(currentTier); mAdapterList.addAll(currentTier); int tierIndex = Tiering.TIER_ORDER.indexOf(currentTier); for (int i = tierIndex + 1; i < Tiering.TIER_ORDER.size(); i++) { ArrayList<String> nextTier = tiers.get(Tiering.TIER_ORDER.get(i)); Collections.sort(nextTier); mAdapterList.addAll(nextTier); } } else { mAdapterList.addAll(pokedex.keySet()); Collections.sort(mAdapterList); } } mAdapter = new PokemonAdapter(this, mAdapterList); setListAdapter(mAdapter); getActionBar().setTitle(R.string.search_label_pokemon); break; case REQUEST_CODE_SEARCH_ABILITY: HashMap<String, String> abilityDex = AbilityDex.get(getApplicationContext()).getAbilityDexEntries(); mAdapterList = new ArrayList<>(abilityDex.keySet()); Collections.sort(mAdapterList); mAdapter = new AbilityAdapter(this, mAdapterList); setListAdapter(mAdapter); getActionBar().setTitle(R.string.search_label_ability); break; case REQUEST_CODE_SEARCH_ITEM: HashMap<String, String> itemDex = ItemDex.get(getApplicationContext()).getItemDexEntries(); mAdapterList = new ArrayList<>(itemDex.keySet()); Collections.sort(mAdapterList); mAdapter = new ItemAdapter(this, mAdapterList); setListAdapter(mAdapter); getActionBar().setTitle(R.string.search_label_item); break; case REQUEST_CODE_SEARCH_MOVES: String pokemonId = getIntent().getExtras().getString(POKEMON_LEARNSET, null); if (pokemonId != null) { mAdapterList = new ArrayList<>(); while (pokemonId != null) { ArrayList<String> tempArray = Learnset.get(getApplicationContext()).getLearnetEntry(pokemonId); if (tempArray != null) { for (String move : tempArray) { if (!mAdapterList.contains(move)) { mAdapterList.add(move); } } } try { pokemonId = Pokedex.get(getApplicationContext()).getPokemonJSONObject(MyApplication.toId(pokemonId)).has(""prevo"") ? Pokedex.get(getApplicationContext()).getPokemonJSONObject(MyApplication.toId(pokemonId)).getString(""prevo"") : null; } catch (JSONException e) { e.printStackTrace(); } } } else { HashMap<String, String> moveDex = MoveDex.get(getApplicationContext()).getMoveDexEntries(); mAdapterList = new ArrayList<>(moveDex.keySet()); } Collections.sort(mAdapterList); mAdapter = new MovesAdapter(this, mAdapterList); setListAdapter(mAdapter); getActionBar().setTitle(R.string.search_label_moves); break; } } "	1	0	0	0	0	0
"public void setFragmentDetails(int position) { if (!Model.isConnected()) { Toast.makeText(this, ""Detaljer kan ikke hentes, da der ikke er internet"", Toast.LENGTH_LONG).show(); return; } try { String detailsURI = Model.getInstance().getItems().get(position).getString(""detailsuri""); if (detailsURI == null) // Maybe throw exception return; Model.getInstance().setCurrentDetailsURI(detailsURI); Model.getInstance().setCurrentItem(null); Model.getInstance().fetchCurrentItem(); getSupportFragmentManager().beginTransaction() .replace(R.id.frame, new ItemShowFragment()) .addToBackStack(null) .commit(); boolean expanded = isSearchExpanded(); setSearchButtonVisible(false); updateSearchVisibility(); setSearchExpanded(expanded); } catch (JSONException e) { e.printStackTrace(); return; //TODO DO SOMETHING USEFULL } } "	0	0	0	0	1	0
"@Test public void testAnd() throws Exception { TraceDataModel traceDataModel = new TraceDataModel(); TraceBuilder builder = traceDataModel.startBuilding(); builder.enterModule(""mod1""); int id1 = builder.newNet(""a"", -1, 1); int id2 = builder.newNet(""b"", -1, 1); builder.exitModule();  // Fast toggle (a). // True 5-9, 15-19, 25-29, 35-40, 45- builder.appendTransition(id1, 0, new BitVector(""0"", 2)); builder.appendTransition(id1, 5, new BitVector(""1"", 2)); builder.appendTransition(id1, 10, new BitVector(""0"", 2)); builder.appendTransition(id1, 15, new BitVector(""1"", 2)); builder.appendTransition(id1, 20, new BitVector(""0"", 2)); builder.appendTransition(id1, 25, new BitVector(""1"", 2)); builder.appendTransition(id1, 30, new BitVector(""0"", 2)); builder.appendTransition(id1, 35, new BitVector(""1"", 2)); builder.appendTransition(id1, 40, new BitVector(""0"", 2)); builder.appendTransition(id1, 45, new BitVector(""1"", 2));  // Slow toggle (b) // True 15-29, 45- builder.appendTransition(id2, 0, new BitVector(""0"", 2)); builder.appendTransition(id2, 15, new BitVector(""1"", 2)); builder.appendTransition(id2, 30, new BitVector(""0"", 2)); builder.appendTransition(id2, 45, new BitVector(""1"", 2));  builder.loadFinished();  Query query = new Query(traceDataModel, ""mod1.a = 1 & mod1.b = 1"");  // Expression is true: // 15-19, 25-29, 45-  // Test forward assertEquals(15, query.getNextMatch(0));  // false & false = false assertEquals(15, query.getNextMatch(5));  // true & false = false assertEquals(15, query.getNextMatch(10)); // false & false = false assertEquals(25, query.getNextMatch(15)); // true & true = true assertEquals(25, query.getNextMatch(20)); // false & true = false assertEquals(45, query.getNextMatch(25)); // true & true = true assertEquals(45, query.getNextMatch(30)); // false & false = false assertEquals(45, query.getNextMatch(35)); // true & false = false assertEquals(45, query.getNextMatch(40)); // false & false = false assertEquals(-1, query.getNextMatch(45)); // true & true  = true assertEquals(-1, query.getNextMatch(50)); // false & true = false  // Test backward assertEquals(-1, query.getPreviousMatch(0));  // false & false = false assertEquals(-1, query.getPreviousMatch(5));  // true & false = false assertEquals(-1, query.getPreviousMatch(10)); // false & false = false assertEquals(-1, query.getPreviousMatch(15)); // true & true = true assertEquals(19, query.getPreviousMatch(20)); // false & true = false assertEquals(19, query.getPreviousMatch(25)); // true & true = true assertEquals(29, query.getPreviousMatch(30)); // false & false = false assertEquals(29, query.getPreviousMatch(35)); // true & false = false assertEquals(29, query.getPreviousMatch(40)); // false & false = false assertEquals(29, query.getPreviousMatch(45)); // true & true  = true assertEquals(29, query.getPreviousMatch(50)); // false & true = false } "	0	0	1	1	0	0
"@Test public void weCanDetectHardwareCorruption() { if (hashMode == dontHash) { return; }  s2 = s1.clone(); CompareResult result = new StateComparator(context, s1, s2).searchForHardwareCorruption().compare(); assertNothingModified(result);  s2 = s2.setContent(""file_01"", ""XXXX""); result = new StateComparator(context, s1, s2).searchForHardwareCorruption().compare(); assertGotOnlyModifications(result, corrupted); assertFilesModified(result, corrupted, ""file_01"");  // file_02 is deleted and file_05 is added, they are not detected as corrupted s2 = s2.delete(""file_02"").addFiles(""file_05""); result = new StateComparator(context, s1, s2).searchForHardwareCorruption().compare(); assertGotOnlyModifications(result, corrupted); assertFilesModified(result, corrupted, ""file_01""); } "	0	0	1	1	1	0
"public void setPermissionsGroup(Player p) {  Map<String, Boolean> groups = new HashMap<String, Boolean>();  boolean isvive = vivePlayers.containsKey(p.getUniqueId());  String g_vive = getConfig().getString(""permissions.vivegroup""); String g_classic = getConfig().getString(""permissions.non-vivegroup""); if (g_vive != null) groups.put(g_vive, isvive); if (g_classic != null) groups.put(g_classic, !isvive);  if (isvive) { String g_freemove = getConfig().getString(""permissions.freemovegroup""); if (g_freemove != null) groups.put(g_freemove, !vivePlayers.get(p.getUniqueId()).isTeleportMode); }  updatePlayerPermissionGroup(p, groups);  } "	1	0	1	0	1	0
"public static void sendMessage(String message, Player p) { p.sendMessage(""[Vivecraft] "" + message); } "	0	0	0	0	1	0
"@Test public void trackConstructorTest() { URL resourceUrl = getClass().getResource(""/beep.mp3""); Path resourcePath; try { resourcePath = Paths.get(resourceUrl.toURI()); Track track = new Track(resourcePath.toString()); assertEquals(track.getAlbum(), ""Beeps of the year""); assertEquals(track.getTitle(), ""Beep""); assertEquals(track.getArtist(), ""Flix""); assertEquals(track.getLength(), new Long(575)); } catch (URISyntaxException e) { fail(""file wans't read correctly""); e.printStackTrace(); }  } "	0	0	0	0	1	0
public boolean isCreationTimeChanged() { return previousFileState.getFileTime().getCreationTime() / 1000 != fileState.getFileTime().getCreationTime() / 1000; } 	0	0	0	0	1	0
public boolean allowsWalking() { for (CandidateEdge ce : CandidateEdgeBundle.this) { StreetEdge e = ce.getEdge(); if (e.getPermission().allows(StreetTraversalPermission.PEDESTRIAN)) { return true; } } return false; } 	0	0	1	0	1	0
@Override protected void onNewIntent(Intent intent) { super.onNewIntent(intent); if (intent.getData() == null) { // Not a callback intent. return; } if (_vpnService.getStatus() != VPNService.VPNStatus.DISCONNECTED) { // The user clicked on an authorization link while the VPN is connected. // Maybe just a mistake? Toast.makeText(this, R.string.already_connected_please_disconnect, Toast.LENGTH_LONG).show(); return; } try { _connectionService.parseCallbackIntent(intent); openFragment(new ConnectProfileFragment()); } catch (ConnectionService.InvalidConnectionAttemptException ex) { ex.printStackTrace(); // TODO show error dialog. } } 	1	0	1	0	0	0
public synchronized void setBoards(int[][] board, int[][] soln) { this.board = board; this.soln = soln; this.firstPlayer = false; } 	0	0	1	1	0	0
public synchronized int[][] getSoln() { return this.soln; } 	0	0	1	0	0	0
"private void updateMapList(String mapRequestCommand){   switch(mapRequestCommand){ case ""admin"": listOfMapNameForReturn.clear(); listOfMapURLForReturn.clear(); mainController.mapModel.loadMapLists(); LoadInMapNameList(); LoadInMapURL(); getAllMapNameAndURL(); break; case ""CampusMap"": listOfMapNameForReturn.clear(); listOfMapURLForReturn.clear(); updateMapListWithDesiredMapName(mapRequestCommand); addAllBuildingIntoList(); break; // Get All the buildingMap default: if(validateBuildingName(mapRequestCommand)){ listOfMapNameForReturn.clear(); listOfMapURLForReturn.clear(); updateMapListWithDesiredMapName(mapRequestCommand); updateMapListWithDesiredMapName(""CampusMap""); } break; } } "	0	0	0	0	0	1
"public static Collection<User> getUsersExcluding(Collection<Uuid> ids) {  final Set<User> users = new HashSet<>();  System.out.println(""Accessing ViewDatabase"");  Connection connection = null; Statement stmt = null; boolean flag = true;  String parameters;  if(!ids.isEmpty()){ parameters = ""WHERE "";  for (final Uuid id : ids) {  String restricted = id.toString(); if(flag){ parameters = parameters + ""ID <> "" + restricted; } else{ parameters = parameters + "" AND ID <> "" + restricted; } } }else { parameters = """"; }  try { Class.forName(""org.sqlite.JDBC""); connection = DriverManager.getConnection(""jdbc:sqlite:./bin/codeu/chat/codeU_db/ChatDatabase.db""); connection.setAutoCommit(false);  stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery( ""SELECT * "" + ""FROM USERS ""+ parameters + "";"" ); while (rs.next()){ System.out.println(""Enters""); Uuid userID = Uuids.fromString(rs.getString(""ID"")); String userName = rs.getString(""UNAME""); SimpleDateFormat sdf = new SimpleDateFormat(""YYYY-MM-DD HH:MM:SS""); String userDate = rs.getString(""TimeCreated""); Date date = sdf.parse(userDate); String userPassword = rs.getString(""PASSWORD"");   User user = new User(userID, userName, Time.fromMs(date.getTime()), userPassword); users.add(user); } rs.close(); stmt.close();  connection.close(); } catch ( Exception e ) { System.err.println( e.getClass().getName() + "": "" + e.getMessage() ); System.exit(0); }  return users; } "	0	0	0	0	1	0
"public static boolean setCooldown(User user, Crate crate) { playersNode.getNode(user.getUniqueId(), ""cooldowns"", crate.Name).setValue(System.nanoTime()); return savePlayersNode(); } "	0	0	0	0	1	0
"@Test public void editEventToDeadLineSuccess() throws Exception { String detailsToEdit = ""Bobbye/6:00AM 17/11/2011 t/husband""; int addressBookIndex = 9;  TestTodo editedTodo = new TodoBuilder().withName(""Bobby""). withEndTime(""6:00AM 17/11/2011"").withTags(""husband"").build();  assertEditSuccess(addressBookIndex, addressBookIndex, detailsToEdit, editedTodo); } "	0	0	0	0	1	0
"@Override public void handleEof() throws IOException { if (log.isDebugEnabled()) { log.debug(""handleEof({}) SH_MSG_CHANNEL_EOF"", this); } setEofSignalled(true); notifyStateChanged(); } "	0	0	0	0	1	0
public Collection<PropertyDescriptor> propertyDescriptors() { return properties.values(); } 	0	0	1	0	1	0
"static public SRCPMessage getExitProgMode(int bus) { String msg = ""TERM "" + bus + ""  SM\n""; SRCPMessage m = new SRCPMessage(msg); return m; } "	0	0	1	1	1	0
"public String getClusterName () { throw new UnsupportedOperationException ( ""Not supported yet."" ); //To change body of generated methods, choose Tools | Templates. } "	0	0	0	0	1	0
"private void init() { LayoutInflater inflater = (LayoutInflater) getContext() .getSystemService(Context.LAYOUT_INFLATER_SERVICE); View view = inflater.inflate(R.layout.creditcardview, this, true);    // Font path String fontPath = ""fonts/creditcard2.ttf""; // Loading Font Face creditCardTypeFace = Typeface.createFromAsset(getContext().getAssets(), fontPath);  cardNumber = (EditText)getChildAt(0);  cardName = (EditText)getChildAt(1);  type = (ImageView)getChildAt(2);  brandLogo = (ImageView)getChildAt(3);  chip = (ImageView)getChildAt(4);  validTill = (TextView)getChildAt(5);  expiryDate = (EditText)getChildAt(6); } "	0	0	0	0	1	0
@Override public void exitState() { super.exitState(); viewFlipper.showPrevious(); } 	0	0	0	0	1	0
"private static URL[] expandWildcardClasspath( URL[] aOriginalURLs ) { List<URL> ret = new ArrayList<URL>(); for( URL currURL : aOriginalURLs ) { if( currURL.getFile().endsWith( ""*"" ) ) { // This URL needs to be expanded try { File currFile = new File( currURL.getFile() ); // Search the parent path for any files that end in .jar File[] expandedJars = currFile.getParentFile().listFiles( new FilenameFilter() { public boolean accept( File aDir, String aName ) { return aName.endsWith( "".jar"" ); } } ); // Add the additional jars to the new search path if( expandedJars != null ) { for( File currJar : expandedJars ) { ret.add( currJar.toURI().toURL() ); } } else { // could not expand due to some error, we can try to // proceed with out these jars System.out.println( ""WARNING: could not expand classpath at: ""+currFile.toString() ); } } catch( Exception e ) { // could not expand due to some error, we can try to // proceed with out these jars e.printStackTrace(); } } else { // Just use this unmodified ret.add( currURL ); } } return ret.toArray( new URL[ 0 ] ); } "	0	0	0	0	1	0
"@Override public boolean perform( @SuppressWarnings(""rawtypes"") AbstractBuild build, Launcher launcher, BuildListener listener ) {  ClangScanBuildToolInstallation clangInstallation = DESCRIPTOR.getNamedInstallation( getClangInstallationName() ); if( clangInstallation == null ){ // somehow config has gotten out of whack.  User has a named clang installation that no longer exists in // the master hudson config.  We need it to get the path to clang. listener.fatalError( ""Unable to locate the clang installation named '"" + getClangInstallationName() + ""'.  Please confirm a clang installation named '"" + getClangInstallationName() + ""' is defined in the jenkins master config. "" ); return false; }  FilePath reportOutputFolder = ClangScanBuildUtils.locateClangScanBuildReportFolder( build );  ScanBuildCommand xcodebuild = new ScanBuildCommand(); xcodebuild.setTarget( getTarget() ); xcodebuild.setTargetSdk( getTargetSdk() ); xcodebuild.setConfig( getConfig() ); xcodebuild.setClangOutputFolder( reportOutputFolder ); xcodebuild.setWorkspace( getWorkspace() ); xcodebuild.setScheme( getScheme() );  if( getXcodeProjectSubPath() != null ){ xcodebuild.setProjectDirectory( new FilePath( build.getWorkspace(), getXcodeProjectSubPath() ) ); }else{ xcodebuild.setProjectDirectory( build.getWorkspace() ); }  try { String path = clangInstallation.getExecutable( launcher ) ; if( path == null ){ listener.fatalError( ""Unable to locate 'scan-build' within '"" + clangInstallation.getHome() + ""' as configured in clang installation named '"" + clangInstallation.getName() + ""' in the master config."" ); return false; } xcodebuild.setClangScanBuildPath( path ); } catch ( Exception e) { listener.fatalError( ""Unable to locate 'scan-build' within '"" + clangInstallation.getHome() + ""' as configured in clang installation named '"" + clangInstallation.getName() + ""' in the master config."" ); return false; }  int rc = CommandExecutor.execute( xcodebuild ).withContext( new BuildContextImpl( build, launcher, listener ) ); return rc == CommandExecutor.SUCCESS; } "	0	0	0	0	1	0
"protected static KeyManager keyManager() { DefaultResourceLoader loader = new DefaultResourceLoader(); Resource storeFile = loader.getResource(""classpath:/saml/colombia.jks""); Map<String, String> passwords = new HashMap<>(); passwords.put(""colombia"", ""colombia-password""); String defaultKey = ""colombia""; return new JKSKeyManager(storeFile, ""colombia-password"", passwords, defaultKey); } "	0	0	1	0	0	0
@Override public void interact(Gobj other) { if (other instanceof MovingBrick) { if (killableLeft()) { killAllKillable(); decreaseLevelIndex(); decreasePaddleLifes(); } } else { super.interact(other); } } 	1	1	1	1	0	0
String getPropertyValue(ModuleProperty mp, @Nullable Container c) { if (!mp.isCanSetPerContainer() || null==c) c = ContainerManager.getRoot(); return PropertyManager.getProperty(PropertyManager.SHARED_USER,c,mp.getCategory(),mp.getName()); } 	0	0	0	0	1	0
"public Course getCourse(String courseInp) { // get course information from database and create course // SELECT CourseCode, CourseName, Description, Faculty, ExamDate, Difficulty, TaughtInSpring, TaughtInAutumn // FROM Course JOIN Exam ON Exam.CourseCode == Course.CourseCode // WHERE Course.CourseCode == courseCode  // get requirements // SELECT C.CourseCode, D.CourseCode, Necessary // FROM Course AS dep JOIN Dependent ON Dep.CourseCode == Dependent.CourseCode JOIN Course AS req ON req.CourseCode == Dependent.Dependency // WHERE dep.CourseCode == courseCode  try { Statement courseStmt = this.con.createStatement(); Statement dependentStmt = this.con.createStatement(); String courseQuery = ""SELECT Course.CourseCode, CourseName, Description, Faculty, ExamDate, Difficulty, TaughtInSpring, TaughtInAutumn FROM Course LEFT JOIN Exam ON Exam.CourseCode = Course.CourseCode WHERE Course.CourseCode = "" + ""\"""" + courseInp + ""\""""; String dependentQuery = ""SELECT Dependency FROM Dependent WHERE Dependency = "" + ""\"""" + courseInp + ""\""""; ResultSet courseRs = courseStmt.executeQuery(courseQuery); ResultSet dependentRs = dependentStmt.executeQuery(dependentQuery);  if (courseRs.next()) { String courseCode = courseRs.getString(""CourseCode""); String courseName = courseRs.getString(""CourseName""); String description = courseRs.getString(""Description""); String faculty = courseRs.getString(""Faculty""); Date examDate = courseRs.getDate(""ExamDate""); int difficulty = courseRs.getInt(""Difficulty""); boolean taughtInSpring = courseRs.getBoolean(""TaughtInSpring""); boolean taughtInAutumn = courseRs.getBoolean(""TaughtInAutumn"");  String season = (taughtInSpring) ? ""spring"" : ""autumn""; if (taughtInSpring && taughtInAutumn) { season = ""agile""; }  Course course = new Course(courseCode, season); course.setCourse_name(courseName); course.setDescription(description); course.setFaculty(faculty); course.setExam_Date(examDate); course.setDifficulty(difficulty);  // add dependencies while (dependentRs.next()) { course.addDependency(dependentRs.getString(""Dependency "")); }  return course; } else { return null; } } catch (SQLException e) { throw new IllegalStateException(""SQLException in DbCom.getCourse()"", e); } } "	0	0	1	1	1	0
"@OnClick(R.id.linear_splash_login_google) void onGoogleLoginClick(){ Logger.d(TAG,""onclick""); Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent( presenter.getGoogleApiClient() ); startActivityForResult(signInIntent, Util.RC_INTENT_GOOGLE_SIGNIN);  presenter.trackingLoginButtonClick(getActivity(), Util.getCurrentMethodName()); } "	0	0	0	0	1	0
"@Override public void updateRemoteConfig(Context context) {  long cacheTime = 0; if(BuildConfig.DEBUG){ cacheTime = 0; } else{ context.getResources().getInteger(R.integer.firebase_remoteconfig_cache_expiretime); }  ConfigClient.getConfig() .fetch(cacheTime) .addOnCompleteListener( new OnCompleteListener<Void>() { @Override public void onComplete(@NonNull Task<Void> task) { Logger.i(TAG, ""remoteConfig fetch result : "" + task.isSuccessful()); if(task.isSuccessful()){ ConfigClient.getConfig().activateFetched(); }  long diffTimeMillisec = System.currentTimeMillis() - startTimeMillisec; Logger.d(TAG, ""isdidrun : "" + Prefer.get(""isDidRun"", false)); if(Prefer.get(""isDidRun"", false)){ timerHandler.sendEmptyMessageDelayed(0,diffTimeMillisec>1000?1000:1000-diffTimeMillisec); } else{ timerHandler.sendEmptyMessageDelayed(1,diffTimeMillisec>1500?1500:1500-diffTimeMillisec); } Prefer.set(""isDidRun"", true); } } ); } "	0	0	0	0	1	0
"private Calendar getDateTimeTakenAsCalendar() { final Calendar c = Calendar.getInstance(); c.setTimeZone(TimeZone.getTimeZone(""gmt"")); Date dateTimeTaken = mData.getDateTimeTaken(); if (dateTimeTaken != null) { c.setTimeInMillis(dateTimeTaken.getTime()); } return c; } "	0	0	0	0	1	0
"@Test(expected = PaymentException.class) public void testInexistentPaymentId() throws PaymentException, StudentException, ServiceException {  int paymentId = 1; Student student = new Student(""Jacó Mário Souza"", cpf, rg, date, email, address, phone1, phone2, ""Milene Souza Medeiros"", ""Mário Souza Filho""); ArrayList <String> courses = new ArrayList<String>(); ArrayList <String> packages = new ArrayList<String>();  courses.add(""1""); packages = null; Service service = new Service(student, courses, packages); int paymentType = 1; int paymentForm = 1; int installments = 0;  Payment payment = new Payment(paymentId, service, paymentType, paymentForm, installments);  when(paymentDAOMock.get(paymentId)).thenReturn(payment); paymentController.setPaymentDAO(paymentDAOMock);  Payment receivedPayment = paymentController.searchPayment(payment);  assertEquals(payment.getPaymentId(),receivedPayment.getPaymentId());  } "	0	0	0	1	0	0
"@Override protected void logError(String appName, String message) { WebLogger.getLogger(appName).e(""AndroidConnectFactory"", message); } "	0	0	0	0	1	0
protected void notifyCancelledListeners(DatabaseError databaseError) { if (mListener != null) { mListener.onCancelled(databaseError); } } 	0	0	1	0	0	0
@Test public void testIsOpenLocationAlwaysClosed() throws Exception { assertFalse(locationAlwaysClosed.isOpen(Calendar.getInstance().getTime())); } 	0	0	0	0	1	0
"private JdwpEventData processThreadEvent(HooksThreadEventPayload event) { // get corresponding thread object VmThread thread = delegates.state().referenceRefIdHolder().instanceByAddr(event.threadObj()); if (event.eventId() == HookConsts.events.THREAD_ATTACHED || event.eventId() == HookConsts.events.THREAD_STARTED) { if (thread != null) throw new DebuggerException(""Thread "" + Long.toHexString(event.threadObj()) + "" already attached/started!"");  // attach thread ClassInfo ci = delegates.runtime().classInfoLoader().resolveObjectRuntimeDataTypeInfo(event.threadObj()); thread = delegates.instances().instanceByPointer(event.threadObj(), event.thread(), true); delegates.state().referenceRefIdHolder().addObject(thread); delegates.state().threads().add(thread);  // doesn't generate any event to JDWP return null; }  if (thread == null) throw new DebuggerException(""Thread "" + Long.toHexString(event.threadObj()) + "" is not recognized!"");  switch (event.eventId()) { case HookConsts.events.THREAD_RESUMED: thread.setStatus(VmThread.Status.RUNNING); // there is no corresponding JDPW event return null;  case HookConsts.events.THREAD_DETTACHED: // remove thread delegates.state().referenceRefIdHolder().removeObject(thread); delegates.state().threads().remove(thread); return new JdwpEventData(JdwpConsts.EventKind.THREAD_END, thread);  default: throw new DebuggerException(""Unsupported HooksThreadEventPayload eventId "" + event.eventId()); } } "	1	0	0	0	1	0
public void buttonMiniature(View view) { ImageView background = (ImageView) findViewById(R.id.background); final Button miniature = (Button) view;  modeMiniature = true; // Set new size for miniature layout. setParamsMiniature(background, true); // Hide the miniature button. miniature.setVisibility(View.GONE);  // Add event on click action for the miniature picture. background.setOnClickListener(new View.OnClickListener() { public void onClick(View view) { modeMiniature = false; ImageView background = (ImageView) view; // Resize miniature. background.setClickable(false); setBackground(); miniature.setVisibility(View.VISIBLE); } }); } 	0	0	0	0	1	0
"public ActivityContextImpl createActivityContext(final ActivityContextHandle ach, int activityFlags) throws ActivityAlreadyExistsException {  if (sleeContainer.getCongestionControl().refuseStartActivity()) { throw new SLEEException(""congestion control refused activity start""); }  // create ac ActivityContextCacheData activityContextCacheData = new ActivityContextCacheData(ach, sleeContainer.getCluster()); if (activityContextCacheData.exists()) { throw new ActivityAlreadyExistsException(ach.toString()); }  ActivityContextImpl ac = new ActivityContextImpl(ach,activityContextCacheData,tracksIdleTime(ach,true),Integer.valueOf(activityFlags),this); if (logger.isDebugEnabled()) { logger.debug(""Created activity context with handle ""+ach); } return ac; } "	0	0	0	0	1	0
"private void writeFile(String fqcn, Injector injector) { try { JavaFileObject jfo = mFiler.createSourceFile(fqcn); Writer writer = jfo.openWriter(); writer.write(injector.getJavaClassFile()); writer.flush(); writer.close(); } catch (IOException e) { error(fqcn, ""Exception occurred while attempting to write converter for enum %s. Exception message: %s"", fqcn, e.getMessage()); } } "	0	0	0	1	1	0
@Override public List<DataElementDto> getDataElements() { return getResources(DATA_ELEMENTS, DataElementDto.class, true); } 	0	0	1	1	1	0
"@FXML public void handleEasterEgg() { try { Desktop.getDesktop().browse(new URI(""www.google.com"")); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (URISyntaxException e) { // TODO Auto-generated catch block e.printStackTrace(); } } "	0	0	0	0	1	0
"private void switchPlayer1(BattleBot b, String channel) { if (pokemon2.getLevel() == 100) { b.sendMessage(channel, pokemon1.getName() + "" fainted! What Pokemon will "" + player1.getTrainerName() + "" switch to?""); } else { int levelBefore = pokemon2.getLevel(); int exp = Pokemon.calculateExperience(true, pokemon2, pokemon1); pokemon2.addExperience(exp); int levelAfter = pokemon2.getLevel(); b.sendMessage(channel, pokemon1.getName() + "" fainted! "" + pokemon2.getName() + "" gained "" + exp + "" Exp. Points!""); if (levelBefore < levelAfter) { b.sendMessage(channel, pokemon2.getName() + "" grew to Level "" + levelAfter + ""! PogChamp""); } b.sendMessage(channel, ""What Pokemon will "" + player1.getTrainerName() + "" switch to?""); } b.sendWhisper(player1.getTrainerName(), ""Type !list to get a list of your Pokemon. Type !switch<number> to switch to that Pokemon (for example, the if you want to switch to the first Pokemon, type !switch0 )""); String p1move = """"; int p1switchto = -1; try { p1move = p1msg.poll(60, TimeUnit.SECONDS); if (p1move == null) { b.sendMessage(channel, player1.getTrainerName() + "" did not select a new Pokemon in time. "" + player2.getTrainerName() + "" wins!""); endBattle = true; return; } if (p1move.startsWith(""!switch"") && p1move.length() >= 8) { if (!Character.isDigit(p1move.charAt(7))) { p1move = """"; b.sendMessage(channel, ""/w "" + player1.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); } else { p1switchto = Integer.parseInt(p1move.charAt(7) + """"); try { if (player1.getPokemon(p1switchto).isFainted()) { b.sendMessage(channel, ""/w "" + player1.getTrainerName() + "" You cannot switch to a fainted Pokemon FUNgineer""); p1move = """"; } } catch (Exception ex) { b.sendMessage(channel, ""/w "" + player1.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); p1move = """"; } } } else { p1move = """"; } while (!p1move.startsWith(""!switch"")) { p1move = p1msg.take(); if (p1move.startsWith(""!switch"") && p1move.length() >= 8) { if (!Character.isDigit(p1move.charAt(7))) { p1move = """"; b.sendMessage(channel, ""/w "" + player1.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); continue; } p1switchto = Integer.parseInt(p1move.charAt(7) + """"); try { if (player1.getPokemon(p1switchto).isFainted()) { b.sendMessage(channel, ""/w "" + player1.getTrainerName() + "" You cannot switch to a fainted Pokemon FUNgineer""); p1move = """"; continue; } } catch (Exception ex) { b.sendMessage(channel, ""/w "" + player1.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); p1move = """"; continue; } } else { p1move = """"; } } p1msg = new LinkedBlockingQueue<>(); this.pokemon1 = player1.getPokemon(p1switchto); player1.removePokemon(p1switchto); b.sendMessage(channel, this.player1 + "" sends out "" + this.pokemon1.getName() + ""!"");  } catch (Exception ex) { System.err.println(""[WARNING] Failed to Switch pokemon! "" + ex); endBattle = true; } } "	0	0	0	0	0	1
"private void switchPlayer2(BattleBot b, String channel) { if (pokemon1.getLevel() == 100) { b.sendMessage(channel, pokemon2.getName() + "" fainted! What Pokemon will "" + player2.getTrainerName() + "" switch to?""); } else { int levelBefore = pokemon1.getLevel(); int exp = Pokemon.calculateExperience(true, pokemon1, pokemon2); pokemon1.addExperience(exp); int levelAfter = pokemon1.getLevel(); b.sendMessage(channel, pokemon2.getName() + "" fainted! "" + pokemon1.getName() + "" gained "" + exp + "" Exp. Points!""); if (levelBefore < levelAfter) { b.sendMessage(channel, pokemon1.getName() + "" grew to Level "" + levelAfter + ""! PogChamp""); } b.sendMessage(channel, ""What Pokemon will "" + player2.getTrainerName() + "" switch to?""); } b.sendWhisper(player2.getTrainerName(), ""Type !list to get a list of your Pokemon. Type !switch<number> to switch to that Pokemon (for example, the if you want to switch to the first Pokemon, type !switch0 )""); String p2move = """"; int p2switchto = -1; try { p2move = p2msg.poll(60, TimeUnit.SECONDS); if (p2move == null) { b.sendMessage(channel, player2.getTrainerName() + "" did not select a new Pokemon in time. "" + player1.getTrainerName() + "" wins!""); endBattle = true; return; } if (p2move.startsWith(""!switch"") && p2move.length() >= 8) { if (!Character.isDigit(p2move.charAt(7))) { p2move = """"; b.sendMessage(channel, ""/w "" + player2.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); } else { p2switchto = Integer.parseInt(p2move.charAt(7) + """"); try { if (player2.getPokemon(p2switchto).isFainted()) { b.sendMessage(channel, ""/w "" + player2.getTrainerName() + "" You cannot switch to a fainted Pokemon FUNgineer""); p2move = """"; } } catch (Exception ex) { b.sendMessage(channel, ""/w "" + player2.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); p2move = """"; } } } else { p2move = """"; } while (!p2move.startsWith(""!switch"")) { p2move = p2msg.take(); if (p2move.startsWith(""!switch"") && p2move.length() >= 8) { if (!Character.isDigit(p2move.charAt(7))) { p2move = """"; b.sendMessage(channel, ""/w "" + player2.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); continue; } p2switchto = Integer.parseInt(p2move.charAt(7) + """"); try { if (player2.getPokemon(p2switchto).isFainted()) { b.sendMessage(channel, ""/w "" + player2.getTrainerName() + "" You cannot switch to a fainted Pokemon FUNgineer""); p2move = """"; continue; } } catch (Exception ex) { b.sendMessage(channel, ""/w "" + player2.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); p2move = """"; continue; } } else { p2move = """"; } } p2msg = new LinkedBlockingQueue<>(); this.pokemon2 = player2.getPokemon(p2switchto); player2.removePokemon(p2switchto); b.sendMessage(channel, this.player2 + "" sends out "" + this.pokemon2.getName() + ""!""); } catch (Exception ex) { System.err.println(""[WARNING] Failed to Switch pokemon! "" + ex); endBattle = true; }  } "	0	0	0	0	0	1
@Test public void resourceGetsBonusFromOtherEntity() { ECSResourceData resA = resMapper.get(entity).getResource(TestResource.TEST_A); resA.set(5);  Entity enchanter = game.newEntity(); ECSResourceMap.createFor(enchanter); ECSResourceData bonusResource = resMapper.get(enchanter).getResource(TestResource.TEST_B); resA.setStrategy((ent, value) -> value + bonusResource.get());  assertEquals(0, bonusResource.get()); assertEquals(5, resA.get()); bonusResource.set(10); assertEquals(15, resA.get()); } 	0	0	1	0	1	0
"protected void showJoin(String[] parts, HttpServletRequest req, HttpServletResponse res, Session session) throws IOException, ToolException { // Handle user not logged in. if (session.getUserId() == null) { portal.doLogin(req, res, session, URLUtils.getSafePathInfo(req), false); } else { try { String siteId = parts[2]; // We use this as it Site site = portal.getSiteHelper().getSite(siteId); // Check that the current user can access the site before we redirect. if (site.getUserRole(session.getUserId()) != null && SiteService.allowAccessSite(site.getId())) { sendToSite(res, site); return; } if (site.isJoinable()) { String siteType = portal.calcSiteType(site.getId()); String serviceName = ServerConfigurationService.getString(""ui.service"", ""Sakai"");  // SAK-29138 String title = serviceName + "" : ""+ portal.getSiteHelper().getUserSpecificSiteTitle( site, false );  String skin = site.getSkin(); PortalRenderContext context = portal.startPageContext(siteType, title, skin, req); context.put(""currentSite"", portal.getSiteHelper().convertSiteToMap(req, site, null, site.getId(), null, false, false, false, false, null, true)); context.put(""uiService"", serviceName);  boolean restrictedByAccountType = !SiteService.getInstance().isAllowedToJoin(siteId); context.put(""restrictedByAccountType"", restrictedByAccountType);  portal.sendResponse(context, res, ""join"", ""text/html""); return; } } catch (IdUnusedException e) { } } portal.doError(req, res, session, Portal.ERROR_SITE); } "	0	0	1	0	1	0
"@SuppressWarnings(""unchecked"") public void convertAll(String jobName, Writer writer) throws IOException { List<? extends JobState> jobStates = (List<? extends JobState>) this.jobStateStore.getAll(jobName); if (jobStates.isEmpty()) { LOGGER.warn(String.format(""No job state found for job with name %s"", jobName)); return; }  JsonWriter jsonWriter = new JsonWriter(writer); jsonWriter.setIndent(""\t""); try { writeJobStates(jsonWriter, jobStates); } finally { jsonWriter.close(); } } "	0	0	1	1	1	0
"public static synchronized ArrayList<NewsSource> getNewsSourceFollows(Long userId) throws SQLException { if (userId == null) { return null; } ArrayList<NewsSource> newsSources = new ArrayList<NewsSource>(); PreparedStatement ps = driver.getPreparedStatement(""getNewsSourceFollows""); ps.setLong(baseIndex, userId); ArrayList<HashMap<String, Object>> results = driver.executeStatement(ps); for (HashMap<String,Object> newsSourceData : results) { NewsSource newsSource = new NewsSource(newsSourceData); if (newsSource != null) { newsSources.add(newsSource); } } return newsSources; } "	0	0	0	0	1	0
"public static boolean maxAppsLimitReached(String ownerId) { List<String> appids = DBUtil.getAppDAO().getAllAppIds(ownerId); int maxAppPerCluster = getMaxAppLimit();  if(maxAppPerCluster > 0 && appids != null && appids.size() >= maxAppPerCluster) { LOGGER.trace(""maxAppsLimitReached : {}"", maxAppPerCluster); return true; } return false; } "	0	0	0	0	1	0
@Override public Observable<Friend> listContacts(User user) {  return userCache.getUser() .flatMapIterable(persistedUser -> persistedUser.getFriends()) .filter(friend -> friend.getFriendState() != Friend.REQUESTED); } 	0	0	0	0	0	1
"@Override public Observable<User> updateProfilePicture(User user, String uri) { File file = new File(Uri.parse(uri).getPath());  RequestBody requestFile = RequestBody.create(MediaType.parse(""multipart/form-data""), file);  MultipartBody.Part body = MultipartBody.Part.createFormData(""thumbnail"", file.getName(), requestFile);  return restApi.putUserProfilePicture(Credentials.basic(user.getUsername(), user.getPassword()), body) .doOnNext(saveToCacheAction) .map(userEntity -> mapper.transformUser(userEntity)) .doOnCompleted(() -> file.delete());  } "	0	0	1	0	1	0
@Override public boolean isHostingActivityChangingConfigurations() { return getFragment().getActivity().isChangingConfigurations(); } 	0	0	1	1	0	0
@Nullable @Override public V getInterceptedViewOf(@NonNull final BindViewInterceptor interceptor) { return mDelegate.getInterceptedViewOf(interceptor); } 	0	0	1	1	0	0
@Nullable @Override public V getInterceptedViewOf(@NonNull final BindViewInterceptor interceptor) { return mDelegate.getInterceptedViewOf(interceptor); } 	0	0	1	1	0	0
@Override public boolean isActivityFinishing() { return isFinishing(); } 	0	0	1	1	0	0
"@Override public String toString() { final String readablePath = endpoint + queryParametersToString(false);  return this.getClass().getSimpleName() +""{"" + ""predicate="" + predicate + "", sort="" + sort + "", expand="" + expansionPaths + "", additionalHttpQueryParameters="" + additionalHttpQueryParameters + "", limit="" + limit + "", offset="" + offset + "", endpoint='"" + endpoint + '\'' + "", resultMapper="" + resultMapper + "", readablePath="" + readablePath + "", request="" + httpRequestIntent() + "", withTotal="" + withTotal + '}'; } "	0	0	0	0	1	0
"@Override public Object intercept(Invocation invocation) throws Throwable { Object target = invocation.getTarget(); if (target instanceof StatementHandler) { StatementHandler statementHandler = (StatementHandler) target; MetaObject metaStatementHandler = SystemMetaObject.forObject(statementHandler); RowBounds rowBounds = (RowBounds) metaStatementHandler.getValue(""delegate.rowBounds""); BoundSql boundSql = (BoundSql) metaStatementHandler.getValue(""delegate.boundSql""); String originalSql = (String) boundSql.getSql(); if (rowBounds != null && rowBounds != RowBounds.DEFAULT) { Connection conn = (Connection) invocation.getArgs()[0]; String dbUrl = conn.getMetaData().getURL(); String dialectType = GeneralJdbcReflectionUtil.getDbType(dbUrl).getDb(); IDialect dialect = DialectFactory.getDialectByDbtype(dialectType); if(rowBounds instanceof Pagination){//avoid use empty constructor to init Page/Pagination object. Pagination page = (Pagination)rowBounds; originalSql = dialect.buildPaginationSql(originalSql, page.getOffsetCurrent(), page.getSize()); }else{ originalSql = dialect.buildPaginationSql(originalSql, rowBounds.getOffset(), rowBounds.getLimit()); } metaStatementHandler.setValue(""delegate.rowBounds.offset"", RowBounds.NO_ROW_OFFSET); metaStatementHandler.setValue(""delegate.rowBounds.limit"", RowBounds.NO_ROW_LIMIT); } if(interceptors!=null && interceptors.length!=0){ String changeSql = null; for(GeneralSqlChangeInterceptor intcpt : interceptors){ try{ changeSql = intcpt.intercept(originalSql); if(changeSql!=null){ originalSql = changeSql; } }catch(SqlChangeException e){ LOGGER.error(""GeneralSqlChangeInterceptor.intercept() error"", e); } } } metaStatementHandler.setValue(""delegate.boundSql.sql"", originalSql); } return invocation.proceed(); } "	0	0	0	0	1	0
@Override public Boolean caseLiteral(Literal object) { if (announced == null || announced != object.getLiteral()) { acceptor.announceNextLiteral(object.getLiteral()); announced = object.getLiteral(); } Line line = object.getLine(); TextLine textLine = new TextLine(object.getLiteral().getValue(), object.getOffset(), object.getLength(), 0); CharSequence ws = textLine.getLeadingWhiteSpace(); ProcessedRichString string = line.getRichString(); boolean firstOrLast = string.getLines().get(0) == line || string.getLines().get(string.getLines().size()-1) == line; if (isTemplateLine(line)) { if (line.getParts().get(0) == object) { if (!firstOrLast) { boolean followedByOpening = false; if (line.getParts().size() >= 2) { LinePart next = line.getParts().get(1); if (next instanceof ForLoopStart || next instanceof IfConditionStart) { followedByOpening = true; } } if (!followedByOpening) { pushSemanticIndentation(indentationHandler.getTotalIndentation()); } else { pushSemanticIndentation(ws); } } } announceTemplateText(textLine, object.getLiteral()); } else { if (skipCount <= 1) { firstOrLast = false; if (skipCount == 0 && line.getParts().get(0) == object) { if (textLine.length() == ws.length()) { for(int i = 1; i < line.getParts().size(); i++) { if (line.getParts().get(i) instanceof Literal && !(line.getParts().get(i) instanceof LineBreak)) { Literal nextLiteralInSameLine = (Literal) line.getParts().get(i); TextLine nextLiteralLine = new TextLine(nextLiteralInSameLine.getLiteral().getValue(), nextLiteralInSameLine.getOffset(), nextLiteralInSameLine.getLength(), 0); CharSequence nextLeading = nextLiteralLine.getLeadingWhiteSpace(); if (nextLeading.length() > 0) { ws = ws.toString() + nextLeading; } skipCount++; if (nextLeading.length() != nextLiteralLine.length()) { break; } } else { break; } } if (skipCount != 0) { pushSemanticIndentation(ws); } else { pushSemanticIndentation(ws); announceIndentation(); announceSemanticText(textLine.subSequence(ws.length(), textLine.length()), object.getLiteral()); } } else { pushSemanticIndentation(ws); announceIndentation(); announceSemanticText(textLine.subSequence(ws.length(), textLine.length()), object.getLiteral()); } } else { if (skipCount == 1) { skipCount--; announceIndentation(); announceSemanticText(textLine.subSequence(ws.length(), textLine.length()), object.getLiteral()); } else { announceSemanticText(textLine, object.getLiteral()); } } } else { skipCount--; } } if (!firstOrLast && line.getParts().get(line.getParts().size() - 1) == object) { popIndentation(); } computeNextPart(object); return Boolean.TRUE; } 	0	0	0	0	1	0
"public static void startupEvent(){ updateUserProfile();  // NOTE: only _need_ to do this if it has changed defaultEvent(""startup""); } "	0	0	1	0	0	0
"@RolesAllowed({ ""User"" }) @GET @Path(""/"") public Response getAllRooms( @QueryParam(Room.KEY_NAME) List<String> name, @QueryParam(Room.KEY_DESCRIPTION) List<String> description, @QueryParam(Room.KEY_PARENT_ID) Integer parentId, @QueryParam(""isSimpleQuery"") Boolean isSimpleQuery, @QueryParam(Query.PAGE_LIMIT) Long pageLimit, @QueryParam(Query.PAGE) Long page, @QueryParam(Query.ORDER_BY) String orderBy, @QueryParam(Query.ORDER) String order) {  if (isSimpleQuery != null && isSimpleQuery) { return RestUtils.getResponse(Status.OK, QueryResponse.builder().data(DaoUtils.getRoomDao().getByParentId(parentId)).build()); } else { HashMap<String, Object> filters = new HashMap<String, Object>();  filters.put(Room.KEY_NAME, name); filters.put(Room.KEY_DESCRIPTION, description); filters.put(Room.KEY_PARENT_ID, parentId);  //Query primary filters filters.put(Query.ORDER, order); filters.put(Query.ORDER_BY, orderBy); filters.put(Query.PAGE_LIMIT, pageLimit); filters.put(Query.PAGE, page);  return RestUtils.getResponse(Status.OK, DaoUtils.getRoomDao().getAll(Query.get(filters))); } } "	0	0	0	0	1	0
"public boolean isUnPublishMenuItemEnabled() { if ( !isElementDisplayed( PUBLISH_TREE_MENU_ITEM ) ) { TestUtils.saveScreenshot( getSession(), ""err_unpublish_menu_item_not_visible "" ); throw new TestFrameworkException( ""'unpublish' menu item is not visible!"" ); } return !getAttribute( getDisplayedElement( By.xpath( UNPUBLISH_MENU_ITEM ) ), ""class"", Application.EXPLICIT_NORMAL ).contains( ""disabled"" ); } "	1	0	0	0	1	0
"public static LinkedHashMap<String, Object> buildDefaultReplicationStrategy() { LinkedHashMap<String, Object> replicationStrategyMap = new LinkedHashMap<String, Object>(); replicationStrategyMap.put(Constants.CLASS, SIMPLE.toString()); replicationStrategyMap.put(Constants.REPLICATION_FACTOR, ""3""); return replicationStrategyMap; } "	0	0	0	1	0	0
@Override public void run() { try { gc(); } catch (Exception e) { e.printStackTrace(); } } 	0	0	0	0	1	0
"@Override public int check_layout(String testName, String driverSessionId, String specs, List<String> includedTags, List<String> excludedTags) throws SpecNotFoundException { log.info(format(""Executing check_layout for test "" + testName + "" with driver "" + driverSessionId)); WebDriver driver = DriversPool.get().getBySessionId(driverSessionId); try { TestReport testReport = GalenReportsContainer.get().registerTest(testName); LayoutReport layoutReport = Galen.checkLayout(driver, specs, includedTags, excludedTags, new Properties(), null); testReport.layout(layoutReport, ""Check layout "" + specs); GalenReportsContainer.get().updateEndTime(testName); return layoutReport.errors(); } catch (FileSyntaxException e) { log.error(""Could not find spec file "" + specs); throw new SpecNotFoundException(e.getMessage()); } catch (IOException e) { e.printStackTrace(); } return 0; } "	0	0	1	0	0	0
public static Primitive getGravity(String value) { return sGravityMap.get(value); } 	0	0	0	0	1	0
"@Transactional(readOnly = false) public static Result logIn(Long activityId) { Activity activity = DAOs.getActivityDao().findById(activityId);  if (activity == null) return notFound(notFound.render());  if (activity.getCapacity() == activity.getCapacityMax()) return redirect(controllers.routes.ActivityController.show(activity.getActivityId()));  User user = SecurityService.fetchUser(session(""authid"")); TypeRoleOnActivity role = DAOs.getTypeRoleOnActivityDao().findByKey(EnumerationWithKeys.TYPE_ROLE_ON_ACTIVITY_LOGGED);  UserLoggedOnActivity item = new UserLoggedOnActivity(); item.setUser(user); item.setActivity(activity); item.setTypeRoleOnActivity(role);  DAOs.getUserLoggedOnActivityDao().create(item);  activity.setCapacity(activity.getCapacity() + 1); DAOs.getActivityDao().update(activity);  return redirect(controllers.routes.ActivityController.show(activity.getActivityId())); } "	1	0	0	0	1	0
@Override public synchronized void deleteAll() { repository.deleteAll(); } 	0	0	1	0	0	0
public GoTypeReference getTypeReference(Type type) { return this.getTypeReferenceWithPointer(type, false); } 	0	0	0	0	1	0
@Override public void onReceive(Context context, Intent intent) { if (AppBroadcaster.hasFile(intent, gpxObject.toString())) { forceUpdate(); } } 	0	0	0	0	1	0
@Override public void onReceive(Context context, Intent intent) { AppLog.i(BackgroundService.this, AppBroadcaster.getFile(intent)); } 	1	0	1	0	1	0
"@Override public void onError(Throwable e) { Log.e(TAG, ""Failed to search for groups: "" + e); Toast.makeText(mContext, ""Failed to search for groups:"" + e.getMessage(), Toast.LENGTH_SHORT).show(); } "	0	0	0	0	1	0
"@Test(dataProvider = ""correctEnabledProvider"") public void testRawEnabled(String enabled) throws Exception { String entityName = ""e-entity-command-raw-enabled-"" + enabled; Registry.Entity.register(entityName); String command = String.format(""entity  e:%s b:%s"", entityName, enabled); tcpSender.send(command); Entity actualEntity = EntityMethod.getEntity(entityName); assertEquals(""Failed to set enabled (raw)"", enabled, actualEntity.getEnabled().toString()); } "	0	0	0	0	1	0
"private void saveServerURL() { if (mUseZulipCheckbox.isChecked()) { ((ZulipApp) getApplication()).useDefaultServerURL(); return; }  String serverURL = mServerEditText.getText().toString(); int errorMessage = R.string.invalid_server_domain;  if (serverURL.isEmpty()) { mServerEditText.setError(getString(errorMessage)); }  // add http if scheme is not included if (!serverURL.contains(""://"")) { serverURL = ""http://"" + serverURL; }  Uri serverUri = Uri.parse(serverURL); if (serverUri.isRelative()) { serverUri = serverUri.buildUpon().scheme(""http"").build(); }  // if does not begin with ""api.zulip.com"" and if the path is empty, use ""/api"" as first segment in the path List<String> paths = serverUri.getPathSegments(); if (!serverUri.getHost().startsWith(""api."") && paths.isEmpty()) { serverUri = serverUri.buildUpon().appendPath(""api"").build(); }  ((ZulipApp) getApplication()).setServerURL(serverUri.toString()); Toast.makeText(this, getString(R.string.logging_into_server, serverUri.toString()), Toast.LENGTH_SHORT).show(); } "	0	0	0	0	1	0
"protected String checkForCluster(final ORecord record, final String localNodeName, ODistributedConfiguration dbCfg) { if (!(record instanceof ODocument)) return null;  final ORecordId rid = (ORecordId) record.getIdentity(); if (rid.getClusterId() < 0) throw new IllegalArgumentException(""RID "" + rid + "" is not valid"");  String clusterName = getClusterNameByRID(rid);  final String ownerServer = dbCfg.getClusterOwner(clusterName);  if (ownerServer.equals(localNodeName)) // NO CHANGES return null;  final OCluster cl = getClusterByName(clusterName); final ODatabaseDocumentInternal db = ODatabaseRecordThreadLocal.INSTANCE.get(); final OClass cls = db.getMetadata().getSchema().getClassByClusterId(cl.getId()); String newClusterName = null; if (cls != null) { OClusterSelectionStrategy clSel = cls.getClusterSelection(); if (!(clSel instanceof OLocalClusterWrapperStrategy)) { dManager.propagateSchemaChanges(db); clSel = cls.getClusterSelection(); }  if (!(clSel instanceof OLocalClusterWrapperStrategy)) throw new ODistributedException(""Cannot install local cluster strategy on class '"" + cls.getName() + ""'"");  dbCfg = ((OLocalClusterWrapperStrategy) clSel).readConfiguration();  final String newOwnerNode = dbCfg.getClusterOwner(clusterName); if (newOwnerNode.equals(localNodeName)) // NO CHANGES return null;  // ONLY IF IT'S A CLIENT REQUEST (NON DISTRIBUTED) AND THE AVAILABLE SERVER IS ONLINE, REDIRECT THE REQUEST TO THAT SERVER if (!OScenarioThreadLocal.INSTANCE.isRunModeDistributed()) { if (dManager.isNodeAvailable(ownerServer, getName())) { final String ownerUUID = dManager.getNodeUuidByName(ownerServer); if (ownerUUID != null) { final ODocument doc = dManager.getNodeConfigurationByUuid(ownerUUID, true); if (doc != null) { final String ownerServerIPAddress = ODistributedAbstractPlugin.getListeningBinaryAddress(doc);  OLogManager.instance().info(this, ""Local node '"" + localNodeName + ""' is not the owner for cluster '"" + clusterName + ""' (it is '"" + ownerServer + ""'). Sending a redirect to the client to connect it directly to the owner server"");  // FORCE THE REDIRECT AGAINST THE SERVER OWNER OF THE CLUSTER throw new ODistributedRedirectException(getDistributedManager().getLocalNodeName(), ownerServer, ownerServerIPAddress, ""Local node '"" + localNodeName + ""' is not the owner for cluster '"" + clusterName + ""' (it is '"" + ownerServer + ""')""); } } } }  // FORCE THE RETRY OF THE OPERATION throw new ODistributedConfigurationChangedException( ""Local node '"" + localNodeName + ""' is not the owner for cluster '"" + clusterName + ""' (it is '"" + ownerServer + ""')""); }  if (!ownerServer.equals(localNodeName)) throw new ODistributedException(""Error on inserting into cluster '"" + clusterName + ""' where local node '"" + localNodeName + ""' is not the master of it, but it is '"" + ownerServer + ""'"");  // OVERWRITE CLUSTER clusterName = newClusterName; final ORecordId oldRID = rid.copy(); rid.setClusterId(db.getClusterIdByName(newClusterName));  OLogManager.instance().info(this, ""Reassigned local cluster '%s' to the record %s. New RID is %s"", newClusterName, oldRID, rid);  return clusterName; } "	0	0	1	0	0	0
private boolean isContextStartWithGivenPatterns(String context) {  boolean patternMatched = false;  for (String pattern : xssURIPatternList) { if (context.startsWith(pattern)) { patternMatched = true; break; } } return patternMatched; } 	0	0	1	0	1	0
"@Override public void onCreate() {  receiver=new MyBroadcastReceiver(); phonecallreceiver=new PhoneCallReceiver(); //time using timer  //incoming call filter=new IntentFilter(); registerReceiver(phonecallreceiver,new IntentFilter(""android.intent.action.PHONE_STATE""));  //outgoing call registerReceiver(phonecallreceiver,new IntentFilter(Intent.ACTION_NEW_OUTGOING_CALL));  //location to be coded below  //audio registerReceiver(receiver,new IntentFilter(AudioManager.ACTION_HEADSET_PLUG));  //blueooth registerReceiver(receiver, new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED));  //battery plugged/unplugged registerReceiver(receiver,new IntentFilter(Intent.ACTION_POWER_CONNECTED)); registerReceiver(receiver,new IntentFilter(Intent.ACTION_POWER_DISCONNECTED));  //wifi plugged/unplugged(extra,not in app yet) registerReceiver(receiver,new IntentFilter(WifiManager.WIFI_STATE_CHANGED_ACTION));   Toast.makeText(this, ""started"", Toast.LENGTH_SHORT).show(); } "	0	0	0	0	1	0
"@Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { log(() -> format(ctx, ""(inbound) RECEIVED"", msg)); ctx.fireChannelRead(msg); } "	0	0	1	0	0	0
"@Override public void channelInactive(ChannelHandlerContext ctx) throws Exception { log(() -> format(ctx, ""CHANNEL_INACTIVE"")); ctx.fireChannelInactive(); } "	0	0	1	0	0	0
"@Override public void deregister(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception { log(() -> format(ctx, ""DEREGISTER"")); ctx.deregister(promise); } "	0	0	1	0	0	0
"@Override public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception { log(() -> format(ctx, ""CHANNEL_WRITABILITY_CHANGED"")); ctx.fireChannelWritabilityChanged(); } "	0	0	1	0	0	0
"@Override public void onBodyDecoder(OnBodyDataOnRequestSentData data) { CachedSocket cached = com.koushikdutta.async.Util.getWrappedSocket(data.socket, CachedSocket.class); if (cached != null) { data.response.headers().set(SERVED_FROM, CACHE); return; }  CacheData cacheData = data.state.get(""cache-data""); RawHeaders rh = RawHeaders.fromMultimap(data.response.headers().getMultiMap()); rh.removeAll(""Content-Length""); rh.setStatusLine(String.format(""%s %s %s"", data.response.protocol(), data.response.code(), data.response.message())); ResponseHeaders networkResponse = new ResponseHeaders(data.request.getUri(), rh); data.state.put(""response-headers"", networkResponse); if (cacheData != null) { if (cacheData.cachedResponseHeaders.validate(networkResponse)) { data.request.logi(""Serving response from conditional cache""); ResponseHeaders combined = cacheData.cachedResponseHeaders.combine(networkResponse); data.response.headers(new Headers(combined.getHeaders().toMultimap())); data.response.code(combined.getHeaders().getResponseCode()); data.response.message(combined.getHeaders().getResponseMessage());  data.response.headers().set(SERVED_FROM, CONDITIONAL_CACHE); conditionalCacheHitCount++;  CachedBodyEmitter bodySpewer = new CachedBodyEmitter(cacheData.candidate, cacheData.contentLength); bodySpewer.setDataEmitter(data.bodyEmitter); data.bodyEmitter = bodySpewer; bodySpewer.spew(); return; }  // did not validate, so fall through and cache the response data.state.remove(""cache-data""); StreamUtility.closeQuietly(cacheData.snapshot); }  if (!caching) return;  RequestHeaders requestHeaders = data.state.get(""request-headers""); if (requestHeaders == null || !networkResponse.isCacheable(requestHeaders) || !data.request.getMethod().equals(AsyncHttpGet.METHOD)) { /* * Don't cache non-GET responses. We're technically allowed to cache * HEAD requests and some POST requests, but the complexity of doing * so is high and the benefit is low. */ networkCount++; data.request.logd(""Response is not cacheable""); return; }  String key = FileCache.toKeyString(data.request.getUri()); RawHeaders varyHeaders = requestHeaders.getHeaders().getAll(networkResponse.getVaryFields()); Entry entry = new Entry(data.request.getUri(), varyHeaders, data.request, networkResponse.getHeaders()); BodyCacher cacher = new BodyCacher(); EntryEditor editor = new EntryEditor(key); try { entry.writeTo(editor); // create the file editor.newOutputStream(ENTRY_BODY); } catch (Exception e) { // Log.e(LOGTAG, ""error"", e); editor.abort(); networkCount++; return; } cacher.editor = editor;  cacher.setDataEmitter(data.bodyEmitter); data.bodyEmitter = cacher;  data.state.put(""body-cacher"", cacher); data.request.logd(""Caching response""); cacheStoreCount++; } "	0	0	1	0	1	0
@Override public void getDescription(List<String> list) { addDescriptionHead(list); for (IEffect effect : effects) { tempList.clear(); effect.getDescription(tempList); Describer.addAllIndented(list, tempList); } } 	0	0	0	0	1	0
"public void onPause() { synchronized (sGLThreadManager) { if (LOG_PAUSE_RESUME) { Log.i(""GLThread"", ""onPause tid="" + getId()); } mRequestPaused = true; sGLThreadManager.notifyAll(); while ((!mExited) && (!mPaused)) { if (LOG_PAUSE_RESUME) { Log.i(""Main thread"", ""onPause waiting for mPaused.""); } try { sGLThreadManager.wait(); } catch (InterruptedException ex) { Thread.currentThread().interrupt(); } } } } "	0	0	0	0	1	0
public RawRequest<I, O> followRedirect(Redirector<I, O> redirectHandler) { return create(headers, content, hasTrailers, redirectHandler); } 	0	0	0	0	1	0
public void sendMessage(String message) { new DisptatchMessage(message).start(); } 	0	0	1	0	1	0
"@Test @WithMockUser public void shouldUnfollow() throws Exception{ User user = AuthenticationController.CurrentUser(); User u2 = new User(); userRepository.save(u2); user.follow(u2); this.mockMvc.perform(get(""/user/unfollow?id=""+u2.getId())).andExpect(status().isOk()); user = userRepository.findOne(user.getId()); assert(!user.isFollowing(u2)); } "	0	0	0	0	1	0
"private void handleActor(Package p) { ActorStorage as = (ActorStorage) p.getPayload(); Actor a = null; switch (as.getType()) { case ActorStorage.PLAYER_TYPE: a = new Player(as); break; case ActorStorage.MOB_TYPE: a = new Mob(as); break; case ActorStorage.WEAPON_DROP_TYPE: a = new WeaponDrop(as); break; default: System.out.println(""bad actorstorage type""); return; } if (a.getID() == -1) a.setID(getNextId()); actorMap.put(a.getID(), a); // broadcast packet mailroom.sendPackage(p); } "	0	0	0	0	1	0
"public static void main(final String[] args) { LogUtils.initializeLogging();  if (args.length < 1) { LOG.fatal(""Usage: ChallengeParser <xml file>""); System.exit(1); } final File challengeFile = new File(args[0]); if (!challengeFile.exists()) { LOG.fatal(challengeFile.getAbsolutePath() + "" doesn't exist""); System.exit(1); } if (!challengeFile.canRead()) { LOG.fatal(challengeFile.getAbsolutePath() + "" is not readable""); System.exit(1); } if (!challengeFile.isFile()) { LOG.fatal(challengeFile.getAbsolutePath() + "" is not a file""); System.exit(1); } try { final Reader input = new InputStreamReader(new FileInputStream(challengeFile), Utilities.DEFAULT_CHARSET); final Document challengeDocument = ChallengeParser.parse(input);  final ChallengeDescription description = new ChallengeDescription(challengeDocument.getDocumentElement());  LOG.info(""Title: "" + description.getTitle()); } catch (final Exception e) { LOG.fatal(e, e); System.exit(1); } } "	0	0	1	0	0	0
public Object fetchData() throws NoConnectingLineSegmentException, NoSuchElementException, DataFromPointNoDataProviderException, DataFromPointProviderCannotProvideDataException{ if(this.lineSegment == null) throw new NoConnectingLineSegmentException();  Object returnVal = lineSegment.getFromPoint().getData(); if(returnVal == null) throw new NoSuchElementException(); return returnVal;  } 	0	0	1	0	1	0
"public void updateExercises() { if(_exercises != null) { _exercises.clear(); } if(_graphExerciseList != null) { _graphExerciseList.clear(); } if(_db == null) { _db = new DBHandler(getActivity()); } _graphExerciseList = _db.getCompletedExercises(_db.getWritableDatabase()); Double highestOneRepMax = 0.0; for(int i = 0; i < _graphExerciseList.size(); i++) { String exerciseName = _graphExerciseList.keyAt(i); ArrayList<Exercise> exerciseArrayList = _graphExerciseList.get(exerciseName); Exercise heaviestExercise = new Exercise.Builder(""New Exercise"").build(); for(Exercise e : exerciseArrayList) { if(highestOneRepMax < e.getOneRepMax()) { highestOneRepMax = e.getOneRepMax(); heaviestExercise.setExerciseName(e.getExerciseName()); heaviestExercise.setExerciseSets(e.getExerciseSets()); heaviestExercise.setId(e.getId()); heaviestExercise.setOneRepMax(highestOneRepMax); } } _exercises.add(heaviestExercise); } if(_adapter != null) _adapter.notifyDataSetChanged(); } "	0	0	1	0	1	0
"public void removeSpecOrder(View view) { ListView listView = (ListView) findViewById(R.id.orderList); final int i = listView.getPositionForView((View) view.getParent());  Order.OrderItem item = orderItems.get(i);  Call<Void> call = orderService .updateOrder( specItemIds.get(item.getCourse()), new OrderService.OrderUpdate( OrderStatusCache.getInstance().getIds().get(""cancelled"").intValue()));  call.enqueue(new Callback<Void>() { @Override public void onResponse(Call<Void> call, Response<Void> response) {  if (response.code() != 200) { Toast.makeText(OrdersActivity.this, ""Kunde inte ta bort spec-beställning, kod "" + response.code(), Toast.LENGTH_SHORT).show(); return; }  orderItems.remove(i); adapter.notifyDataSetChanged(); }  @Override public void onFailure(Call<Void> call, Throwable t) { Toast.makeText(OrdersActivity.this, ""Kunde inte ta bort spec-beställning"", Toast.LENGTH_LONG).show(); } }); } "	0	0	0	0	1	0
"@Bean public MongoClient mongoClient(){   List<ServerAddress> serverAddresses = new ArrayList(); MongoClient mongoClient = null; try {  for (String mongoHost : configurationContext.getMongoHosts()) { String[] elements = mongoHost.split("":""); if (elements.length < 2) { //no port serverAddresses.add(new ServerAddress(elements[0])); } else { serverAddresses.add(new ServerAddress(elements[0], Integer.parseInt(elements[1]))); } } if (configurationContext.getMongoUsername() != null && configurationContext .getMongoPassword() != null) { mongoClient = new MongoClient(serverAddresses, Arrays.asList(MongoCredential.createPlainCredential(configurationContext.getMongoUsername(), ""$external"", configurationContext .getMongoPassword().toCharArray()))); } else { log.warn( ""MongoDB user or password are not defined. User: [{}], Password: [{}]. trying anonymous connection."", configurationContext.getMongoUsername(), configurationContext .getMongoPassword()); mongoClient = new MongoClient(serverAddresses); } } catch (UnknownHostException e) { e.printStackTrace(); }  log.error(""Creating Spring Bean for mongoclient""); return mongoClient;  } "	0	0	1	0	1	0
"private static int addTextPart(PduBody pb, MMSPart p, int id) { String filename = p.MimeType.split(""/"")[0] + ""_"" + id + "".mms""; final PduPart part = new PduPart(); // Set Charset if it's a text media. if (p.MimeType.startsWith(""text"")) { part.setCharset(CharacterSets.UTF_8); } // Set Content-Type. part.setContentType(p.MimeType.getBytes()); // Set Content-Location. part.setContentLocation(filename.getBytes()); int index = filename.lastIndexOf("".""); String contentId = (index == -1) ? filename : filename.substring(0, index); part.setContentId(contentId.getBytes()); part.setData(p.Data); pb.addPart(part);  return part.getData().length; } "	0	0	0	0	1	0
"public void scanForPeers() { Log.d(TAG, ""Scanning for nearby devices to swap with...""); bonjourFinder.scan(); bluetoothFinder.scan(); } "	0	0	0	0	1	0
"private void detachService() { if (timer != null) { timer.cancel(); }  Log.d(TAG, ""Moving SwapService to background so that it can be GC'ed if required.""); stopForeground(true); } "	0	0	0	0	1	0
"private void askServerToSwapWithUs(final String address) { new AsyncTask<Void, Void, Void>() { @Override protected Void doInBackground(Void... args) { Uri repoUri = Uri.parse(address); String swapBackUri = Utils.getLocalRepoUri(FDroidApp.repo).toString();  AndroidHttpClient client = AndroidHttpClient.newInstance(""F-Droid"", SwapService.this); HttpPost request = new HttpPost(""/request-swap""); HttpHost host = new HttpHost(repoUri.getHost(), repoUri.getPort(), repoUri.getScheme());  try { Log.d(TAG, ""Asking server at "" + address + "" to swap with us in return (by POSTing to \""/request-swap\"" with repo \"""" + swapBackUri + ""\"")...""); populatePostParams(swapBackUri, request); client.execute(host, request); } catch (IOException e) { notifyOfErrorOnUiThread(); Log.e(TAG, ""Error while asking server to swap with us"", e); } finally { client.close(); } return null; }  private void populatePostParams(String swapBackUri, HttpPost request) throws UnsupportedEncodingException { List<NameValuePair> params = new ArrayList<>(); params.add(new BasicNameValuePair(""repo"", swapBackUri)); UrlEncodedFormEntity encodedParams = new UrlEncodedFormEntity(params); request.setEntity(encodedParams); }  private void notifyOfErrorOnUiThread() { // TODO: Broadcast error message so that whoever wants to can display a relevant // message in the UI. This service doesn't understand the concept of UI. } }.execute(); } "	0	0	0	0	1	0
public static String create(Context context, Throwable exception, String... params) { String message;  if (exception instanceof UserNotFoundException) { message = context.getString(R.string.error_message_user_not_found); } else if (exception instanceof AccountDuplicateException) { message = context.getString(R.string.error_message_account_duplicate); } else if (exception instanceof LargeNumberOfDigitsException) { message = context.getString(R.string.error_message_large_number_of_digits); } else if (exception instanceof IlligalQRCodeException) { message = context.getString(R.string.error_message_illegal_qr); } else if (exception instanceof IlligalRequestAmountException) { message = context.getString(R.string.error_message_request_amount_is_incorrect); } else if (exception instanceof SelfSendCanNotException) { message = context.getString(R.string.error_message_cannot_send_to_myself); } else if (exception instanceof RequiredArgumentException) { message = context.getString(R.string.validation_message_required, params); } else if (exception instanceof WriterException) { message = context.getString(R.string.error_message_cannot_generate_qr); } else if (exception instanceof NetworkNotConnectedException) { message = context.getString(R.string.error_message_check_network_state); } else if (exception instanceof HttpBadRequestException) { message = context.getString(R.string.error_message_retry_again); } else { message = context.getString(R.string.error_message_retry_again); }  return message; } 	0	0	0	0	0	1
"@Get(""/public/app/assinador-externo/doc/list"") public void assinadorExternoList() throws Exception { try { JSONObject req = getJsonReq(request);  assertPassword(req);  String urlapi = req.getString(""urlapi""); String sCpf = req.getString(""cpf"");  String permalink = urlapi.split(""sigaex/public/app/"")[0] + ""siga/permalink/"";  Long cpf = Long.valueOf(sCpf); DpPessoa pes = dao().consultarPorCpf(cpf); if (pes == null) throw new Exception(""Nenhuma pessoa localizada com o CPF: "" + sCpf); List<ExAssinadorExternoListItem> list = new ArrayList<ExAssinadorExternoListItem>(); List<ExAssinavelDoc> assinaveis = Ex.getInstance().getBL() .obterAssinaveis(pes, pes.getLotacao()); for (ExAssinavelDoc ass : assinaveis) { if (ass.isPodeAssinar()) { ExAssinadorExternoListItem aei = new ExAssinadorExternoListItem(); aei.setId(makeId(cpf, ass.getDoc().getCodigoCompacto())); aei.setCode(ass.getDoc().getCodigo()); aei.setDescr(ass.getDoc().getDescrDocumento()); aei.setKind(ass.getDoc().getTipoDescr()); aei.setOrigin(""Siga-Doc""); aei.setUrlView(permalink + ass.getDoc().getReferencia()); aei.setUrlHash(""sigadoc/doc/"" + aei.getId() + ""/hash""); aei.setUrlSave(""sigadoc/doc/"" + aei.getId() + ""/sign""); list.add(aei); } if (ass.getMovs() == null) continue; for (ExAssinavelMov assmov : ass.getMovs()) { ExAssinadorExternoListItem aei = new ExAssinadorExternoListItem(); aei.setId(makeId(cpf, assmov.getMov().getReferencia())); aei.setCode(assmov.getMov().getReferencia()); aei.setDescr(assmov.getMov().getDescrMov()); aei.setKind(assmov.getMov().getTipoDescr()); aei.setOrigin(""Siga-Doc""); aei.setUrlView(permalink + assmov.getMov().getReferencia().replace("":"", ""/"")); aei.setUrlHash(""sigadoc/doc/"" + aei.getId() + ""/hash""); aei.setUrlSave(""sigadoc/doc/"" + aei.getId() + ""/sign""); list.add(aei); } }  ExAssinadorExternoList resp = new ExAssinadorExternoList(); resp.setList(list);  jsonSuccess(resp); } catch (Exception e) { jsonError(e); }  } "	0	0	0	0	0	1
@Override public Container newContainer(Direction side, EntityPlayer player) { return new ThermalSensorContainer(player, inventory); } 	0	0	0	0	1	0
public void run(String[] args) throws IOException { if (!parseArguments(args)) { return; }  final SimpleReference reference = new SimpleReference(ref.getPath());  rand = new Random(seed);  final byte[] samplingSequence = fileToByteArray(sequenceFile);  final VCFparser vcfParser = new VCFparser(inFile, false); final OutputStream outputStream = (outFile != null) ? new FileOutputStream(outFile) : System.out; final BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(outputStream));  while (vcfParser.hasMoreInput()) { final Variant var = vcfParser.parseLine(); if (var == null) { continue; } var.calculateExtraBase(reference.getSequence(var.getChr()));  final Genotypes geno = var.getGenotypes(); fillInSeq(var, samplingSequence, geno.geno[0]); fillInSeq(var, samplingSequence, geno.geno[1]);  outputVcfRecord(bw, var, geno.geno[0], geno.geno[1]); } bw.close(); } 	0	0	0	0	1	0
"private BoolQueryBuilder buildESQuery(String tenantId, String query) {  String[] queryTokens = query.split(Locator.METRIC_TOKEN_SEPARATOR_REGEX); String lastToken = queryTokens[queryTokens.length - 1];  BoolQueryBuilder bqb = boolQuery();  /** * Builds parent part of the query for the given input query glob tokens. * For a given query foo.bar.*, parent part is foo.bar * * For example: * *  For query = foo.bar.* *          { ""term"": {  ""parent"": ""foo.bar"" }} * *  For query = foo.*.* *          { ""regexp"": {  ""parent"": ""foo.[^.]+"" }} * *  For query = foo.b*.* *          { ""regexp"": {  ""parent"": ""foo.b[^.]*"" }} */  QueryBuilder parentQB; if (queryTokens.length == 1) { parentQB = termQuery(ESFieldLabel.parent.name(), """"); } else {  String parent = Arrays.stream(queryTokens) .limit(queryTokens.length - 1) .collect(joining(Locator.METRIC_TOKEN_SEPARATOR));  GlobPattern parentGlob = new GlobPattern(parent); if (parentGlob.hasWildcard()) { parentQB = regexpQuery(ESFieldLabel.parent.name(), getRegexToHandleTokens(parentGlob)); } else { parentQB = termQuery(ESFieldLabel.parent.name(), parent); } }  bqb.must(termQuery(ESFieldLabel.tenantId.name(), tenantId)) .must(parentQB);  // For example: if query=foo.bar.*, we can just get every token for the parent=foo.bar // but if query=foo.bar.b*, we want to add the token part of the query for ""b*"" if (!lastToken.equals(""*"")) {  QueryBuilder tokenQB;  GlobPattern pattern = new GlobPattern(lastToken); if (pattern.hasWildcard()) { tokenQB = regexpQuery(ESFieldLabel.token.name(), pattern.compiled().toString()); } else { tokenQB = termQuery(ESFieldLabel.token.name(), query); }  bqb.must(tokenQB); }  return bqb; } "	0	0	0	0	1	0
"protected void renderProperties(org.zkoss.zk.ui.sys.ContentRenderer renderer) throws java.io.IOException { super.renderProperties(renderer);  render(renderer, ""selected"", isSelected()); render(renderer, ""disabled"", isDisabled()); if (!isOpen()) renderer.render(""open"", false); if (!isSelectable()) renderer.render(""checkable"", false); render(renderer, ""_loadedChildren"", isLoaded()); render(renderer, ""_loaded"", isRendered());  if (_value instanceof String) render(renderer, ""value"", _value); } "	0	0	0	0	1	0
private Map<Object, SerializableReference<?>> map(Object instance) { if (instance instanceof ceylon.language.Identifiable) { return identifiableToReference; } else { return unidentifiableToReference; } } 	0	0	0	0	1	0
"public static Substitution<Variable, Term> evaluateConditions( Rule rule, Substitution<Variable, Term> substitution, TermContext context) { /* handle fresh variables, data structure lookups, and side conditions */  Substitution<Variable, Term> crntSubst = substitution; /* add bindings for fresh variables used in the rule */ for (Variable variable : rule.freshConstants()) { crntSubst = crntSubst.plus(variable, FreshOperations.fresh(variable.sort(), context)); }  /* evaluate data structure lookups/choices and add bindings for them */ Profiler.startTimer(Profiler.EVALUATE_LOOKUP_CHOICE_TIMER); int i = 0; for (Equality equality : rule.lookups().equalities()) { Term lookupOrChoice = equality.leftHandSide(); Term nonLookupOrChoice =  equality.rightHandSide(); List<RHSInstruction> instructions = rule.instructionsOfLookups().get(i); Term evalLookupOrChoice = KAbstractRewriteMachine.construct(instructions, crntSubst, null, context, false);  boolean resolved = false; if (evalLookupOrChoice instanceof Bottom || DataStructures.isLookupOrChoice(evalLookupOrChoice)) { /* the data-structure lookup or choice operation is either undefined or pending due to symbolic argument(s) */  // when the operation is pending, it is not really a valid match // for example, matching ``<env>... X |-> V ...</env>'' // against ``<env> Rho </env>'' will result in a pending // choice operation due to the unknown ``Rho''.  if (!resolved && RuleAuditing.isAuditBegun()) { System.err.println(""Matching failure: unable to resolve collection operation "" + lookupOrChoice.substitute(crntSubst, context) + ""; evaluated to "" + evalLookupOrChoice); } } else { if (nonLookupOrChoice instanceof Variable) { Variable variable = (Variable) nonLookupOrChoice; if (context.definition().subsorts().isSubsortedEq(variable.sort(), evalLookupOrChoice.sort())) { Substitution<Variable, Term> newSubst = crntSubst.plus(variable, evalLookupOrChoice); resolved = newSubst != null; if (!resolved && RuleAuditing.isAuditBegun()) { System.err.println(""Matching failure: "" + variable + "" must match both "" + crntSubst.get(variable) + "" and "" + evalLookupOrChoice); } crntSubst = newSubst; } } else { // the non-lookup term is not a variable and thus requires further pattern matching // for example: L:List[Int(#""0"")] = '#ostream(_)(I:Int), where L is the output buffer //           => '#ostream(_)(Int(#""1"")) =? '#ostream(_)(I:Int)  Term evalNonLookupOrChoice = nonLookupOrChoice.substituteAndEvaluate(crntSubst, context);  PatternMatcher lookupMatcher = new PatternMatcher(rule.isLemma(), context); if (lookupMatcher.patternMatch(evalLookupOrChoice, evalNonLookupOrChoice)) { if (nonLookupOrChoice.variableSet().containsAll(lookupMatcher.substitution().keySet())) { resolved = true; crntSubst = crntSubst.plusAll(lookupMatcher.substitution()); } else if (!resolved && RuleAuditing.isAuditBegun()) { System.err.println(""Matching failure: substitution "" + lookupMatcher.substitution() + "" missing variables "" + Sets.difference(lookupMatcher.substitution().keySet(), nonLookupOrChoice.variableSet())); } } } }  if (!resolved) { crntSubst = null; break; } ++i; } Profiler.stopTimer(Profiler.EVALUATE_LOOKUP_CHOICE_TIMER);   /* evaluate side conditions */ Profiler.startTimer(Profiler.EVALUATE_REQUIRES_TIMER); if (crntSubst != null) { i = 0; for (Term require : rule.requires()) { // TODO(YilongL): in the future, we may have to accumulate // the substitution obtained from evaluating the side // condition Term evaluatedReq = KAbstractRewriteMachine.construct(rule.instructionsOfRequires().get(i), crntSubst, null, context, false); if (!evaluatedReq.equals(BoolToken.TRUE)) { if (rule.isLemma() && !evaluatedReq.isGround() && context.getTopConstraint() != null && context.getTopConstraint().implies(ConjunctiveFormula.of(context).add(evaluatedReq, BoolToken.TRUE), Collections.emptySet())) { i++; continue; } if (RuleAuditing.isAuditBegun()) { System.err.println(""Side condition failure: "" + require.substituteWithBinders(crntSubst, context) + "" evaluated to "" + evaluatedReq); } crntSubst = null; break; } i++; } } Profiler.stopTimer(Profiler.EVALUATE_REQUIRES_TIMER);  return crntSubst; } "	1	1	1	1	0	0
private boolean didPlayerWon(Player player) { return players.getOpponentOf(player).hasNoFleet(); } 	0	0	1	1	0	0
"public static void explain(final EntityGraph graph, final Session session) throws Exception { _log.info(""generating explain.log...""); final Quoting quoting = new Quoting(session); StringBuffer succEqualsE = new StringBuffer(); for (Column column: graph.getUniversalPrimaryKey().getColumns()) { if (succEqualsE.length() > 0) { succEqualsE.append("" and ""); } succEqualsE.append(""Succ.PRE_"" + quoting.quote(column.name) + ""=E."" + quoting.quote(column.name)); } final FileWriter writer = new FileWriter(""explain.log""); final RowIdSupport rowIdSupport = new RowIdSupport(graph.getDatamodel(), Configuration.forDbms(session)); String selectLeafs = ""Select type, "" + graph.getUniversalPrimaryKey().columnList(null) + "" From "" + SQLDialect.dmlTableReference(EntityGraph.ENTITY, session) + "" E Where E.r_entitygraph="" + graph.graphID + "" and not exists (Select * from "" + SQLDialect.dmlTableReference(EntityGraph.ENTITY, session) + "" Succ Where Succ.r_entitygraph="" + graph.graphID + "" and Succ.PRE_TYPE=E.type and "" + succEqualsE + "")""; session.executeQuery(selectLeafs, new Session.AbstractResultSetReader() { public void readCurrentRow(ResultSet resultSet) throws SQLException { int o = resultSet.getInt(1); String type = null; if (!resultSet.wasNull()) { Table tableByTypeName = graph.getDatamodel().getTableByOrdinal(o); type = tableByTypeName.getName(); } List<String> keys = new ArrayList<String>(); int i = 2; CellContentConverter cellContentConverter = getCellContentConverter(resultSet, session); for (@SuppressWarnings(""unused"") Column column: graph.getUniversalPrimaryKey().getColumns()) { keys.add(cellContentConverter.toSql(cellContentConverter.getObject(resultSet, i++))); } try { writer.append(path(graph, session, type, keys, graph.getDatamodel(), rowIdSupport, quoting)); writer.append("".\n""); } catch (IOException e) { throw new RuntimeException(e); } } }); writer.append(""\n""); List<String> associations = new ArrayList<String>(); for (Map.Entry<Association, Integer> e: graph.explainIdOfAssociation.entrySet()) { String nr = """" + e.getValue(); while (nr.length() < 5) { nr = "" "" + nr; } String sourceName = e.getKey().source.getName(); while (sourceName.length() < 24) { sourceName = sourceName + "" ""; } associations.add(""#"" + nr + "" "" + sourceName + "" -> "" + e.getKey()); } Collections.sort(associations); for (String line: associations) { writer.append(line); writer.append(""\n""); } writer.close(); } "	0	0	1	1	1	0
"public static String getServletPathFromLocation(final HttpServletRequest request, final String location) { return location.replace(getPathInfoFromLocation(request, location), """"); } "	0	0	0	0	1	0
@Override public long maxAmperesIn() { return getBaseMetaTileEntity().isAllowedToWork() ? 1 : (V[mTier + 1] / V[mTier] < 4 ? 4 : V[mTier + 1] / V[mTier]); } 	0	0	0	0	1	0
@Override public long maxAmperesOut() { return getBaseMetaTileEntity().isAllowedToWork() ? (V[mTier + 1] / V[mTier] < 4 ? 4 : V[mTier + 1] / V[mTier]) : 1; } 	0	0	0	0	1	0
"@Override public Statement deserialize(final JsonParser jp, final DeserializationContext ctxt) throws IOException {  final ObjectCodec oc = jp.getCodec();  if (oc == null) {  return null; }  final JsonNode node = oc.readTree(jp);  if (node == null) {  return null; }  final JsonNode idNode = node.get(""id"");  Long id = null;  if (idNode != null) {  try {  id = idNode.asLong(); } catch (final Exception e) {  id = null; } }  final JsonNode uuidNode = node.get(""uuid"");  String uuid = null;  if (uuidNode != null) {  uuid = uuidNode.asText(); }  final JsonNode subjectNode = node.get(""s"");  if (subjectNode == null) {  throw new JsonParseException(""expected JSON node that represents the subject of a statement"", jp.getCurrentLocation()); }  final Node subject;  if (subjectNode.get(""uri"") != null) {  // resource node subject = subjectNode.traverse(oc).readValueAs(ResourceNode.class); } else {  // bnode subject = subjectNode.traverse(oc).readValueAs(Node.class); }  final JsonNode predicateNode = node.get(""p"");  if (predicateNode == null) {  throw new JsonParseException(""expected JSON node that represents the predicate of a statement"", jp.getCurrentLocation()); }  final Predicate predicate = predicateNode.traverse(oc).readValueAs(Predicate.class);  final JsonNode objectNode = node.get(""o"");  if (objectNode == null) {  throw new JsonParseException(""expected JSON node that represents the object of a statement"", jp.getCurrentLocation()); }  final Node object;  if (objectNode.get(""uri"") != null) {  // resource node object = objectNode.traverse(oc).readValueAs(ResourceNode.class); } else if (objectNode.get(""v"") != null) {  // literal node object = objectNode.traverse(oc).readValueAs(LiteralNode.class); } else {  // bnode object = objectNode.traverse(oc).readValueAs(Node.class); }  final JsonNode orderNode = node.get(""order"");  Long order = null;  if (orderNode != null) {  try {  order = orderNode.asLong(); } catch (final Exception e) {  order = null; } }  final JsonNode evidenceNode = node.get(""evidence"");  String evidence = null;  if (evidenceNode != null) {  evidence = evidenceNode.asText(); }  final JsonNode confidenceNode = node.get(""confidence"");  String confidence = null;  if (confidenceNode != null) {  confidence = confidenceNode.asText(); }  final Statement statement = new Statement(subject, predicate, object);  if(id != null) {  statement.setId(id); }  if(uuid != null) {  statement.setUUID(uuid); }  if(order != null) {  statement.setOrder(order); }  if(evidence != null) {  statement.setEvidence(evidence); }  if(confidence != null) {  statement.setConfidence(confidence); }  return statement; } "	0	0	0	0	1	0
@Override public boolean onPreferenceClick(final Preference preference) { if (preference.equals(prefFrag.findPreference(PREFS_KEY_UI))) { preferences = true; Tools.switchTo(Preferences.this, PreferencesUI.class); } else if (preference.equals(prefFrag.findPreference(PREFS_KEY_GEOLOCATION))) { preferences = true; Tools.switchTo(Preferences.this, PreferencesGeolocation.class); } else if (preference.equals(prefFrag.findPreference(PREFS_KEY_RECORDER))) { preferences = true; Tools.switchTo(Preferences.this, PreferencesRecorder.class); } else if (preference.equals(prefFrag.findPreference(PREFS_KEY_LOG_ENABLE))) { prefFrag.findPreference(PREFS_KEY_LOG).setEnabled( ((CheckBoxPreference) preference).isChecked()); } else if (preference.equals(prefFrag.findPreference(PREFS_KEY_TIMERS))) { preferences = true; Tools.switchTo(Preferences.this, PreferencesTimers.class); } else if (preference.equals(prefFrag.findPreference(PREFS_KEY_LOG))) { preferences = true; Tools.switchTo(Preferences.this, PreferencesTimers.class); return true; } else if (preference.equals(prefFrag.findPreference(PREFS_KEY_CHANGELOG))) { preferences = true; changeLog.getFullLogDialog().show(); }  return true; } 	0	0	0	0	1	0
"public AnimatedEntity animateActor(int x, int y, boolean doubleWidth, char c, Color color) { Actor a = textFactory.makeActor("""" + c, color); a.setName("""" + c); if(doubleWidth) a.setPosition(x * 2 * cellWidth, (gridHeight - y - 1) * cellHeight - 1); else a.setPosition(x * cellWidth, (gridHeight - y - 1) * cellHeight - 1);  AnimatedEntity ae = new AnimatedEntity(a, x, y); animatedEntities.add(ae); return ae; } "	1	0	1	0	1	0
@Override protected int getCardViewResource() { return R.layout.row_digital_asset; } 	0	0	0	0	1	0
private static double[][] errorMult( double[][]M1,double[][]M2, boolean square) { double[][] Res = new double[M1.length][]; for( int r =0; r< M1.length; r++) { Res[r] = new double[M2[0].length]; for( int c=0; c<Res.length; c++) {  for( int k=0; k< Res.length;k++) { double V = M1[r][k]*M2[k][c]; if( square) V = V*V; Res[r][c] += Math.abs(V); } Res[r][c] = Math.sqrt( Res[r][c]); } } return Res; } 	0	0	0	1	0	0
"public ObjectNode getControladoresFalhasReportData(Map<String, String[]> params, Area area) { Map<String, String[]> paramsAux = new HashMap<>(); paramsAux.putAll(params); paramsAux.remove(""tipoRelatorio"");  if (params.containsKey(""filtrarPor_eq"")) { if (""Subarea"".equalsIgnoreCase(params.get(""filtrarPor_eq"")[0])) { if (params.containsKey(""subareaAgrupamento"")) { paramsAux.put(""subarea.nome"", params.get(""subareaAgrupamento"")); } } else if (""Agrupamento"".equalsIgnoreCase(params.get(""filtrarPor_eq"")[0])) { if (params.containsKey(""subareaAgrupamento"")) { paramsAux.put(""aneis.agrupamentos.nome"", params.get(""subareaAgrupamento"")); } }  paramsAux.remove(""subareaAgrupamento""); paramsAux.remove(""filtrarPor_eq""); }  String tipoFalhaQuery = null; if (paramsAux.containsKey(""tipoFalha"")) { tipoFalhaQuery = paramsAux.get(""tipoFalha"")[0]; paramsAux.remove(""tipoFalha""); }  if (area != null) { String[] areaId = {area.getId().toString()}; paramsAux.put(""area.id"", areaId); }  List<Controlador> controladores = (List<Controlador>) new InfluuntQueryBuilder(Controlador.class, paramsAux).fetch(Arrays.asList(""subarea"", ""aneis"")).query().getResult();  List<AlarmesFalhasControlador> falhas = AlarmesFalhasControlador.ultimosAlarmesFalhasControladores(null, tipoFalhaQuery); ArrayNode itens = JsonNodeFactory.instance.arrayNode(); falhas.forEach(falha -> { String idControladorFisico = falha.getIdControlador(); Controlador controlador; Anel anel = null; controlador = controladores.stream().filter(c -> c.getControladorFisicoId().equals(idControladorFisico)).findFirst().orElse(null); if (controlador != null) { if (falha.getIdAnel() != null && StringUtils.isNotEmpty(falha.getIdAnel())) { String idAnel = falha.getIdAnel(); anel = controlador.getAneis().stream().filter(a -> (a.isAtivo() && a.getId().toString().equals(idAnel))).findFirst().orElse(null); }  Endereco endereco = (anel != null) ? anel.getEndereco() : controlador.getEndereco(); itens.addObject() .put(""clc"", controlador.getCLC()) .put(""cla"", anel != null ? anel.getCLA() : ""TODOS OS ANÉIS APRESENTAM FALHAS"") .putPOJO(ENDERECO, endereco.nomeEndereco()) .put(""falha"", anel != null ? ""Falha no Anel"" : ""Falha no Controlador"") .put(""tipo"", falha.getConteudo().get(""tipoEvento"").get(""descricao"").asText()); } });  ObjectNode retorno = JsonNodeFactory.instance.objectNode(); retorno.putArray(""data"").addAll(itens);  return retorno; } "	0	0	0	0	1	0
"public static Sampler create(float rate) { if (rate == 0) return Sampler.NEVER_SAMPLE; if (rate == 1.0) return ALWAYS_SAMPLE; checkArgument(rate > 0.0001 && rate < 1, ""rate should be between 0.0001 and 1: was %s"", rate); final long boundary = (long) (rate * 10000); // safe cast as less <= 1 return new BoundarySampler(boundary); } "	0	0	0	0	1	0
"public static void main(String[] args) { //Available controllers: String doNothingController = ""controllers.multiPlayer.doNothing.Agent""; String randomController = ""controllers.multiPlayer.sampleRandom.Agent""; String oneStepController = ""controllers.multiPlayer.sampleOneStepLookAhead.Agent"";  //Available games: String gamesPath = ""examples/2player/""; String games[] = new String[]{};  //All public games games = new String[]{""gotcha"", ""sokoban""};  //Other settings boolean visuals = true; int seed = new Random().nextInt();  //Game and level to play int gameIdx = 0; int levelIdx = 0; //level names from 0 to 4 (game_lvlN.txt). String game = gamesPath + games[gameIdx] + "".txt""; String level1 = gamesPath + games[gameIdx] + ""_lvl"" + levelIdx +"".txt"";  String recordActionsFile = null;//""actions_"" + games[gameIdx] + ""_lvl"" + levelIdx + ""_"" + seed + "".txt""; //where to record the actions executed. null if not to save.  // 1. This starts a game, in a level, played by a human. //ArcadeMachine.playOneGame(game, level1, recordActionsFile, seed);  // 2. This plays a game in a level by the controllers. Separate controllers with a space character. // Provide enough players as required by the game. String controllers = randomController + "" "" + randomController; ArcadeMachine.runOneGame(game, level1, visuals, controllers, recordActionsFile, seed, false);  // 3. This replays a game from an action file previously recorded //String readActionsFile = recordActionsFile; //ArcadeMachine.replayGame(game, level1, visuals, readActionsFile);  // 4. This plays a single game, in N levels, M times : //String level2 = gamesPath + games[gameIdx] + ""_lvl"" + 1 +"".txt""; //int M = 3; //for(int i=0; i<games.length; i++){ //	game = gamesPath + games[i] + "".txt""; //	level1 = gamesPath + games[i] + ""_lvl"" + levelIdx +"".txt""; //	ArcadeMachine.runGames(game, new String[]{level1}, 5, evolutionStrategies, null); //}  //5. This plays N games, in the first L levels, M times each. Actions to file optional (set saveActions to true).  } "	0	0	0	0	1	0
@Override public void setDefaultIconVisible() { defaultIcon.setVisible(true); previewImage.setVisible(false); teamImageLoading.setVisible(false); } 	0	0	0	0	1	0
"private RawProtein<PrintsRawMatch> processProtein(final RawProtein<PrintsRawMatch> rawProteinUnfiltered) {  final RawProtein<PrintsRawMatch> filteredMatches = new RawProtein<PrintsRawMatch>(rawProteinUnfiltered.getProteinIdentifier()); final Set<PrintsRawMatch> sortedRawMatches = new TreeSet<PrintsRawMatch>(PRINTS_RAW_MATCH_COMPARATOR); // Gets the raw matches into the correct order for processing. sortedRawMatches.addAll(rawProteinUnfiltered.getMatches()); LOGGER.debug(""New 'sortedRawMatches' set contains "" + sortedRawMatches.size() + "" matches.""); String currentModelAccession = null; Set<PrintsRawMatch> motifMatchesForCurrentModel = new HashSet<PrintsRawMatch>(); boolean currentMatchesPass = true; FingerPRINTSHierarchyDBParser.HierachyDBEntry currentHierachyDBEntry = null; final List<String> hierarchyModelIDLimitation = new ArrayList<String>(allPrintsModelIDs);  for (PrintsRawMatch rawMatch : sortedRawMatches) { if (LOGGER.isDebugEnabled()) { LOGGER.debug(""Iterating over sorted raw matches.  Currently looking at protein "" + rawProteinUnfiltered.getProteinIdentifier() + "" model "" + rawMatch.getModelId()); } if (currentModelAccession == null || !currentModelAccession.equals(rawMatch.getModelId())) { // Either just started, or got to the end of the matches for one model, so filter & reset.  // Process matches if (currentMatchesPass && currentModelAccession != null) { if (LOGGER.isDebugEnabled()) { LOGGER.debug(""In processProtein method, calling filterModelMatches for protein "" + rawProteinUnfiltered.getProteinIdentifier() + "" and model "" + currentModelAccession); } filteredMatches.addAllMatches(filterModelMatches(motifMatchesForCurrentModel, currentHierachyDBEntry, hierarchyModelIDLimitation)); }  // Reset currentMatchesPass = true; motifMatchesForCurrentModel.clear(); currentModelAccession = rawMatch.getModelId(); currentHierachyDBEntry = printsModelData.get(currentModelAccession); if (currentHierachyDBEntry == null) { throw new IllegalStateException(""There is no entry in the FingerPRINThierarchy.db file for model accession "" + rawMatch.getModelId()); } } // Fail any matches that do not hit the evalue cutoff - first filter.. if (currentMatchesPass) currentMatchesPass = rawMatch.getEvalue() <= currentHierachyDBEntry.getEvalueCutoff(); if (currentMatchesPass) motifMatchesForCurrentModel.add(rawMatch); } // Don't forget to process the last set of matches! if (currentMatchesPass) { if (LOGGER.isDebugEnabled()) { LOGGER.debug(""In processProtein method, calling filterModelMatches for protein "" + rawProteinUnfiltered.getProteinIdentifier() + "" and model "" + currentModelAccession); } filteredMatches.addAllMatches(filterModelMatches(motifMatchesForCurrentModel, currentHierachyDBEntry, hierarchyModelIDLimitation)); }  return filteredMatches; } "	0	0	0	0	1	0
"@Override public @Nonnull VirtualMachine launch(@Nonnull VMLaunchOptions withLaunchOptions)throws CloudException, InternalException { APITrace.begin(getProvider(), ""launchVM""); try{ Compute gce = provider.getGoogleCompute(); GoogleMethod method = new GoogleMethod(provider);  if(withLaunchOptions.getDataCenterId() == null || withLaunchOptions.getDataCenterId().equals("""")){ throw new InternalException(""A datacenter must be specified when launching an instance""); } if(withLaunchOptions.getVlanId() == null || withLaunchOptions.getVlanId().equals("""")){ throw new InternalException(""A VLAN must be specified withn launching an instance""); }  Instance instance = new Instance(); instance.setName(withLaunchOptions.getHostName()); instance.setDescription(withLaunchOptions.getDescription()); instance.setMachineType(getProduct(withLaunchOptions.getStandardProductId()).getDescription());  MachineImage image = provider.getComputeServices().getImageSupport().getImage(withLaunchOptions.getMachineImageId());  AttachedDisk rootVolume = new AttachedDisk(); rootVolume.setBoot(Boolean.TRUE); rootVolume.setType(""PERSISTENT""); rootVolume.setMode(""READ_WRITE""); AttachedDiskInitializeParams params = new AttachedDiskInitializeParams(); // do not use withLaunchOptions.getFriendlyName() it is non compliant!!! params.setDiskName(withLaunchOptions.getHostName()); params.setDiskSizeGb(10L); if ((image != null) && (image.getTag(""contentLink"") != null)) params.setSourceImage((String)image.getTag(""contentLink"")); else throw new CloudException(""Problem getting the contentLink tag value from the image for "" + withLaunchOptions.getMachineImageId()); rootVolume.setInitializeParams(params);  if(withLaunchOptions.getVolumes().length > 0){ for(VolumeAttachment volume : withLaunchOptions.getVolumes()){ //TODO: Specify new and existing volumes } }  List<AttachedDisk> attachedDisks = new ArrayList<AttachedDisk>(); attachedDisks.add(rootVolume); instance.setDisks(attachedDisks);  AccessConfig nicConfig = new AccessConfig(); nicConfig.setName(""External NAT""); nicConfig.setType(""ONE_TO_ONE_NAT"");//Currently the only type supported if(withLaunchOptions.getStaticIpIds().length > 0)nicConfig.setNatIP(withLaunchOptions.getStaticIpIds()[0]); List<AccessConfig> accessConfigs = new ArrayList<AccessConfig>(); accessConfigs.add(nicConfig);  NetworkInterface nic = new NetworkInterface(); nic.setName(""nic0""); nic.setNetwork(provider.getNetworkServices().getVlanSupport().getVlan(withLaunchOptions.getVlanId()).getTag(""contentLink"")); nic.setAccessConfigs(accessConfigs); List<NetworkInterface> nics = new ArrayList<NetworkInterface>(); nics.add(nic); instance.setNetworkInterfaces(nics); instance.setCanIpForward(Boolean.FALSE);  Scheduling scheduling = new Scheduling(); scheduling.setAutomaticRestart(Boolean.TRUE); scheduling.setOnHostMaintenance(""TERMINATE""); instance.setScheduling(scheduling);  Map<String,String> keyValues = new HashMap<String, String>(); if(withLaunchOptions.getBootstrapUser() != null && withLaunchOptions.getBootstrapKey() != null && !withLaunchOptions.getBootstrapUser().equals("""") && !withLaunchOptions.getBootstrapKey().equals("""")){ keyValues.put(""sshKeys"", withLaunchOptions.getBootstrapUser() + "":"" + withLaunchOptions.getBootstrapKey()); } if(!withLaunchOptions.getMetaData().isEmpty()) { for( Map.Entry<String,Object> entry : withLaunchOptions.getMetaData().entrySet() ) { keyValues.put(entry.getKey(), (String)entry.getValue()); } } if (!keyValues.isEmpty()) { Metadata metadata = new Metadata(); ArrayList<Metadata.Items> items = new ArrayList<Metadata.Items>();  for (Map.Entry<String, String> entry : keyValues.entrySet()) { Metadata.Items item = new Metadata.Items(); item.set(""key"", entry.getKey()); if ((entry.getValue() == null) || (entry.getValue().isEmpty() == true) || (entry.getValue().equals(""""))) item.set(""value"", """"); // GCE HATES nulls... else item.set(""value"", entry.getValue()); items.add(item); } metadata.setItems(items); instance.setMetadata(metadata); }  Tags tags = new Tags(); ArrayList<String> tagItems = new ArrayList<String>(); tagItems.add(withLaunchOptions.getHostName()); // Each tag must be 1-63 characters long, and comply with RFC1035 tags.setItems(tagItems); instance.setTags(tags);  String vmId = """"; try{ Operation job = gce.instances().insert(provider.getContext().getAccountNumber(), withLaunchOptions.getDataCenterId(), instance).execute(); vmId = method.getOperationTarget(provider.getContext(), job, GoogleOperationType.ZONE_OPERATION, """", withLaunchOptions.getDataCenterId(), false); } catch (IOException ex) { logger.error(ex.getMessage()); if (ex.getClass() == GoogleJsonResponseException.class) { GoogleJsonResponseException gjre = (GoogleJsonResponseException)ex; throw new GoogleException(CloudErrorType.GENERAL, gjre.getStatusCode(), gjre.getContent(), gjre.getDetails().getMessage()); } else throw new CloudException(""An error occurred launching the instance: "" + ex.getMessage()); } if(!vmId.equals("""")){ return getVirtualMachine(vmId); } else throw new CloudException(""Could not find the instance: "" + withLaunchOptions.getFriendlyName() + "" after launch.""); } finally { APITrace.end(); } } "	0	0	0	0	0	1
public boolean isDelivered() { return deliveryPolicy == DeliveryPolicy.UNCHECKED || (delivered && deliveryPolicy == DeliveryPolicy.AT_LEAST_ONE); } 	0	0	1	0	0	0
public void setDelivered() { delivered = true; } 	0	0	1	0	0	0
"@Override public void onLowMemory() { Log.i(LOG_TAG, this.getClass().getSimpleName() + getId() + "".onLowMemory()""); super.onLowMemory(); } "	0	0	1	0	1	0
"@Nullable @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { Log.i(LOG_TAG, this.getClass().getSimpleName() + getId() + "".onCreateView()""); return super.onCreateView(inflater, container, savedInstanceState); } "	0	0	1	0	1	0
"@Override public void onDestroy() { Log.i(LOG_TAG, this.getClass().getSimpleName() + getId() + "".onDestroy()""); super.onDestroy(); } "	0	0	1	0	1	0
"@Override public void onStart() { Log.i(LOG_TAG, this.getClass().getSimpleName() + getId() + "".onStart()""); super.onStart(); } "	0	0	1	0	1	0
"private void backButtonDialog() { AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());  builder.setMessage(""Are you sure you want to go back? The image will not have any categories saved."") .setTitle(""Warning""); builder.setPositiveButton(""No"", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int id) { //No need to do anything, user remains on categorization screen } }); builder.setNegativeButton(""Yes"", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int id) { getActivity().finish(); } });  AlertDialog dialog = builder.create(); dialog.show(); } "	0	0	1	1	0	0
"public synchronized void enableDebugging(boolean enable, DebugLogger logger) { Logger.enabled = enable;  if (enable == false) { Logger.logger = null; } else { if (logger == null) { logger = new DebugLogger() {  public void log(int level, String className, String message) { long now = System.currentTimeMillis(); System.err.println(now + "" : "" + className + "": "" + message); } }; } } } "	0	0	1	1	0	0
public long getImage() { return image; } 	0	0	1	1	0	0
public long getLocation() { return location; } 	0	0	0	1	0	0
@Test public void shouldCreateDateFromTimestamp() { final long time = getCurrentTimeMillisTimestampCompatible(); final Date dateFromTimestamp = timestamp.set(time).toDate(); final Date dateFromSystem = new Date(time); assertThat(dateFromTimestamp.compareTo(dateFromSystem), is(0));  } 	0	0	0	0	1	0
public void edit(Group group) { editorDriver.edit(group); nameEditor.setValue(group.getSubjectDisplayName()); } 	0	0	0	0	1	0
"private void saveOpperation(JComboBox<String> lineComboBox, JComboBox<Integer> railComboBox, JTextField lblNewLabel_1, JTextField label, JTextField label_1, JTextField label_4, JTextField comboBox_2, JTextField label_19, JTextField label_23, JTextField label_24, JSpinner label_25, JSpinner label_27, JSpinner label_29, JCheckBox chckbxNewCheckBox, JTextField spinner, JCheckBox checkBox, JTextField checkBox_1) {  try{ TrackModel db = new TrackModel(); TrackBlock theBlock = db.getBlock((String) lineComboBox.getSelectedItem(), (Integer) railComboBox.getSelectedItem());  theBlock.line = (String) lineComboBox.getSelectedItem(); theBlock.section = label_23.getText(); theBlock.blockNumber = (Integer) railComboBox.getSelectedItem(); theBlock.blockLength = Double.parseDouble(spinner.getText()); theBlock.blockGrade = Double.parseDouble(lblNewLabel_1.getText()); theBlock.speedLimit = Double.parseDouble(label_1.getText()); if (!checkBox_1.getText().equals("""") && !checkBox_1.getText().equals(""FALSE"")) theBlock.infrastructure += ""STATION; "" + checkBox_1.getText() + "" ""; if (chckbxNewCheckBox.isSelected()) theBlock.infrastructure += ""UNDERGROUND ""; if (checkBox.isSelected()) theBlock.infrastructure += ""RAILWAY CROSSING ""; if (!comboBox_2.getText().equals("""") && !comboBox_2.getText().equals(""FALSE"")) { theBlock.infrastructure += ""SWITCH ""; theBlock.switchBlock.id = comboBox_2.getText(); }  theBlock.elevation = Double.parseDouble(label.getText()); theBlock.cumualativeElevation = Double.parseDouble(label_4.getText()); theBlock.switchBlock.position = label_27.getValue().toString(); theBlock.arrowDirection = label_24.getText(); theBlock.numPass = (int) label_29.getValue(); theBlock.temp = (int) label_25.getValue(); theBlock.status = BlockStatus.valueOf(label_19.getText()); theBlock.trainID = Integer.parseInt(textField_2.getText()); if(theBlock.trainID >= 0) theBlock.status = BlockStatus.OCCUPIED;  opps.setBlock(theBlock); } //check for empty strings if the user did not check live data first! catch(NumberFormatException n){ JFrame parent = new JFrame(); JOptionPane.showMessageDialog(parent,""Please click the Check Live button before saving to the database"",""TRACK MODEL ERROR"", JOptionPane.ERROR_MESSAGE); } } "	1	1	1	1	0	0
public void addToDashboard() { id = widgetPresenter.apply(widget); // update front registerWidget(id, widget); // update end } 	0	0	0	0	1	0
"private void exportToStatsD(List<Stat> stats) { HostAndPort hostPort = HostAndPort.fromString(mConfig.getStatsDHostPort());  // group stats by kafka group NonBlockingStatsDClient client = new NonBlockingStatsDClient(mConfig.getKafkaGroup(), hostPort.getHostText(), hostPort.getPort());  for (Stat stat : stats) { @SuppressWarnings(""unchecked"") Map<String, String> tags = (Map<String, String>) stat.get(Stat.STAT_KEYS.TAGS.getName()); String aspect = new StringBuilder((String)stat.get(Stat.STAT_KEYS.METRIC.getName())) .append(PERIOD) .append(tags.get(Stat.STAT_KEYS.TOPIC.getName())) .append(PERIOD) .append(tags.get(Stat.STAT_KEYS.PARTITION.getName())) .toString(); client.recordGaugeValue(aspect, (Long)stat.get(Stat.STAT_KEYS.VALUE.getName())); } } "	0	0	0	0	1	0
"@BeforeClass public void setup() throws DataBridgeException, StreamDefinitionStoreException, MalformedStreamDefinitionException, URISyntaxException { bLangProgram = BTestUtils.parseBalFile(BALLERINA_TEST_SCRIPT_LOCATION); Path programPath = Paths.get(EventPublisherTestCase.class.getProtectionDomain() .getCodeSource().getLocation().toURI()); DataPublisherTestUtil.CONFIG_PATH = programPath.toString(); //set ballerina home to test running directory as event publisher looking to it System.setProperty(""ballerina.home"", programPath.toString()); thriftTestServer.addStreamDefinition(StreamDefinitions.getStreamDefinitionFault()); thriftTestServer.start(thriftServerListenPort); } "	0	0	0	0	1	0
"@Override public Document getById( Connection connection, String id ) throws SQLException { if (logger.isDebugEnabled()) { logger.debug(""Searching for entry by id {0} in {1}"", id, config.tableName()); } try (PreparedStatement ps = connection.prepareStatement(statements.get(GET_BY_ID))) { ps.setString(1, id); try (ResultSet rs = ps.executeQuery()) { if (!rs.next()) { return null; } return readDocument(rs.getBinaryStream(1)); } } } "	0	0	1	1	1	0
"@Override public Void dropTable( Connection connection ) throws SQLException { try { return super.dropTable(connection); } catch (SQLException e) { int errorCode = e.getErrorCode(); if (IGNORABLE_ERROR_CODES.contains(e.getErrorCode())) { logger.debug(e, ""Ignoring Oracle SQL exception for database {0} with error code {1}"", errorCode); return null; } throw e; } } "	0	0	0	0	1	0
"@SuppressWarnings(""StatementWithEmptyBody"") @Override public boolean onNavigationItemSelected(MenuItem item) {  // Bundle is used to send data to the current fragment Bundle args = new Bundle();  newFragment = null;  FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();  // Handle navigation view item clicks here. int id = item.getItemId();  if (id == R.id.nav_camera) { newFragment = new SearchDisciplinesFragment(); } else if (id == R.id.nav_gallery) { newFragment = new CreateExamFragment(); } else if (id == R.id.nav_slideshow) { newFragment = new TaskFragment(); } else if (id == R.id.nav_manage) { newFragment = new DisciplineFragment(); } else if (id == R.id.nav_exams_grade){ newFragment = new ExamGradeFragment(); } else if(id == R.id.nav_presence){ newFragment = new PresenceManagerFragment(); } else { // Nothing to do. }  newFragment.setArguments(args); transaction.replace(R.id.fragment_container, newFragment); transaction.addToBackStack(null); transaction.commit();  DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout); drawer.closeDrawer(GravityCompat.START); return true; } "	0	0	0	0	1	0
"@Override public Iterable<PomIssue> analyze(MavenProject mavenProject) {  final List<PomIssue> issues = Lists.newArrayList(); @SuppressWarnings(""unchecked"") List<Dependency> dependencies = mavenProject.getDependencies(); for (Dependency dependency : dependencies) { if (dependency.getGroupId().startsWith(ORG_MULE_GROUP_ID) || dependency.getGroupId().startsWith(COM_MULESOFT_GROUP_ID)) { if (StringUtils.isEmpty(dependency.getScope()) || dependency.getScope().equals(""compile"")) { issues.add(new PomIssue(KEY, String.format(""Artifact '%s' is a Mule dependency and should be declared with <scope>provided</scope>."", dependency.getArtifactId()))); } } } return issues; } "	0	0	0	0	1	0
public void dropTable(@Nonnull SQLiteDatabase db) { executeSql(db, getCreateSql()); } 	0	0	0	0	1	0
private void setHintButton() { Button hintButton = (Button) view.findViewById(R.id.hint); if(messageArgs.allowHint) { hintButton.setVisibility(View.VISIBLE); hintButton.setOnClickListener(new View.OnClickListener() {  @Override public void onClick(View v) { dismiss(); ((CircuitActivity) Message.this.getActivity()).giveNegativeFeedback(); } }); } else { hintButton.setVisibility(View.INVISIBLE); } } 	0	0	0	0	1	0
public double getDistanceToLineFromPoint(XYPair currentPoint) { // Find the perpendicular line at this point FieldPose perpLine = getLinePerpendicularToPoint(currentPoint);  // Find where the points meet XYPair intersectionPoint = getIntersectionWithLine(perpLine);  // distance formula return intersectionPoint.getDistanceToPoint(currentPoint); } 	0	0	0	0	1	0
public boolean generate(World world, Random rand, BlockPos pos) { int x = pos.getX(); int y = pos.getY(); int z = pos.getZ(); int l = rand.nextInt(3) + this.minTreeHeight; boolean flag = true;  if (y >= 1 && y + l + 1 <= 256) { byte b0; int k1; Block block;  for (int i1 = y; i1 <= y + 1 + l; ++i1) { b0 = 1;  if (i1 == y) { b0 = 0; }  if (i1 >= y + 1 + l - 2) { b0 = 2; }  for (int j1 = x - b0; j1 <= x + b0 && flag; ++j1) { for (k1 = z - b0; k1 <= z + b0 && flag; ++k1) { if (i1 >= 0 && i1 < 256) {  if (!this.isReplaceable(world,new BlockPos(j1, i1, k1))) { flag = false; } } else { flag = false; } } } }  if (!flag) { return false; } else { Block block2 = world.getBlockState(new BlockPos(x, y - 1, z).down()).getBlock(); boolean isSoil = block2.canSustainPlant(world.getBlockState(new BlockPos(x, y - 1, z).down()), world, pos.down(), EnumFacing.UP, (BlockSapling)Blocks.sapling); if (isSoil && y < 256 - 4 - 1) { //block2.onPlantGrow(world, new BlockPos(x, y - 1, z), new BlockPos(x, y, z));   //BUSH SPAWN!!!  Block dab = BlockLoader.oliveLeaf; placeBlock(world, x - 1, y+2, z - 1, dab); placeBlock(world, x -1, y+2, z, dab); placeBlock(world, x-1, y+2, z+1, dab);  placeBlock(world, x, y+2, z-1, dab); placeBlock(world, x, y+2,z,dab); placeBlock(world,x,y+2, z+1, dab);  placeBlock(world, x+1,y+2,z-1,dab); placeBlock(world, x+1, y+2,z,dab); placeBlock(world,x+1,y+2, z+1, dab);  //NXT LVL placeBlock(world, x - 1, y+3, z - 1, dab); placeBlock(world, x -1, y+3, z, dab); placeBlock(world, x-1, y+3, z+1, dab);  placeBlock(world, x, y+3, z-1, dab); placeBlock(world, x, y+3,z,dab); placeBlock(world,x,y+3, z+1, dab);  placeBlock(world, x+1,y+3,z-1,dab); placeBlock(world, x+1, y+3,z,dab); placeBlock(world,x+1,y+3, z+1, dab);  //Top et all placeLog(world, x, y, z, Blocks.log); placeLog(world, x, y+1, z, Blocks.log); placeBlock(world, x, y+4, z, dab); return true; }   } }  return false; } 	1	1	1	1	0	0
@Override public Jedis getResource() { while (true) { Jedis jedis = super.getResource(); jedis.setDataSource(this);  // get a reference because it can change concurrently final HostAndPort master = currentHostMaster; final HostAndPort connection = new HostAndPort(jedis.getClient().getHost(), jedis.getClient() .getPort());  if (master.equals(connection)) { // connected to the correct master return jedis; } else { returnBrokenResource(jedis); } } } 	0	0	0	0	1	0
"@Test public void queryJSONseqMultipleDistances () throws QueryException { SpanQueryWrapper sqwi = jsonQueryFile(""multiple-distances.jsonld""); // er []{,10} kann []{1,10} sagte  assertEquals( ""spanDistance(tokens:s:er, spanDistance(tokens:s:kann, tokens:s:sagte, [(w[2:11], ordered, notExcluded)]), [(w[1:11], ordered, notExcluded)])"", sqwi.toQuery().toString()); }; "	0	0	1	0	1	0
"public void fillLastUsedShiftFeature(final DataDefinition dataDefinition, final Entity entity) { fillUserAndDate(entity); DataDefinition featureDef = dataDefinitionService.get(GenealogiesConstants.PLUGIN_IDENTIFIER, GenealogiesConstants.MODEL_CURRENT_ATTRIBUTE); SearchResult searchResult = featureDef.find().setMaxResults(1).list(); if (searchResult.getEntities().size() > 0) { Entity currentAttribute = searchResult.getEntities().get(0); currentAttribute.setField(""lastUsedShift"", entity.getField(""value"")); featureDef.save(currentAttribute); } } "	0	0	0	0	1	0
static void showError(String msg) { callAlert(msg, false); } 	0	0	0	0	1	0
@Override public ReadResponse read(ReadRequest request) { int xid = request.getTransactionId(); Serializable key = request.getEncodedKey();  Transaction transaction = transactions.get(xid);  if (transaction == null) { return new ReadResponse(false, null); } Lock lock = Lock.READ_LOCK; if (deadlock.checkForDeadlock(xid, key, lock)) { transactions.remove(xid); return new ReadResponse(false, null); }  lockingUnit.lock(key, lock); transaction.addLock(key, lock); Serializable value = versioningUnit.get(xid, key);  return new ReadResponse(true, (String) value);  } 	0	0	0	0	1	0
"public void closeProject() { Main.getInstance().toolbarArea.disableButtons(true); if (Main.getInstance().isProjectOpen() == true) { Main.getInstance().setCurrentProject(""""); Main.getInstance().getPrimaryStage().setTitle(Main.APPNAME); Main.getInstance().getFileList().clear(); } } "	0	0	0	0	1	0
"@SuppressWarnings({""unchecked"", ""null""}) @Override public Class<?>[] acceptChange(final ChangeMode mode) { if (mode == ChangeMode.ADD || mode == ChangeMode.SET || mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE) return CollectionUtils.array(Player.class); return null; } "	1	0	1	0	0	0
private ImmutableSet<String> getIssueTypes(final Map<String, List<Issue>> jiraIssuesByType) { Set<String> issuesTypes = new HashSet<String>(); issuesTypes.add(INVALID_TYPE); issuesTypes.addAll(jiraIssuesByType.keySet()); return ImmutableSet.copyOf(issuesTypes); } 	0	0	0	0	1	0
public void run() { NearCacheConfig nearCacheConfig = createNearCacheConfig(); nearCacheConfig.setInvalidateOnChange(true);  ICache<Integer, String> clientCache1 = createCacheWithNearCache(nearCacheConfig); ICache<Integer, String> clientCache2 = getCacheWithNearCache();  // put records to cache through client-1 putRecordsToCacheOnClient1(clientCache1);  // gets records from cache through client-2 getRecordsFromCacheOnClient2(clientCache2);  // gets records from near-cache on client-2 getRecordsFromNearCacheOnClient2(clientCache2);  // update records at cache through client-1 updateRecordsInCacheOnClient1(clientCache1);  // wait a little for invalidation events sleep(BATCH_FREQUENCY_MILISECONDS + 5000);  // gets invalidated records from near-cache on client-2 getInvalidatedRecordsFromNearCacheOnClient2(clientCache2);  shutdown(); } 	0	0	0	0	1	0
"public Criteria andValueIsNotNull() { addCriterion(""value_ is not null""); return (Criteria) this; } "	0	0	1	0	0	0
"public Criteria andValueIsNull() { addCriterion(""value_ is null""); return (Criteria) this; } "	0	0	1	0	0	0
"public Criteria andValueEqualTo(String value) { addCriterion(""value_ ="", value, ""value""); return (Criteria) this; } "	1	0	1	1	1	0
@Override public void toBytes(ByteBuf buf) { buf.writeInt(stacks.size()); for (ItemStack stack : stacks) { if (stack != null) { buf.writeBoolean(true); NetworkTools.writeItemStack(buf, stack); } else { buf.writeBoolean(false); } } } 	0	0	0	0	1	0
"@Override public int handle(NavigationEvent event) { UI ui = event.getUI();  Class<? extends Component> routeTargetType = navigationState .getNavigationTarget(); List<Class<? extends RouterLayout>> routeLayoutTypes = getRouterLayoutTypes( routeTargetType);  assert routeTargetType != null; assert routeLayoutTypes != null;  storeContinueNavigationAction(ui, null); RouterUtil.checkForDuplicates(routeTargetType, routeLayoutTypes);  BeforeNavigationEvent beforeNavigationDeactivating = new BeforeNavigationEvent( event, routeTargetType, ActivationState.DEACTIVATING); Queue<BeforeNavigationListener> listeners = remainingListeners; if (listeners == null) { listeners = new LinkedList<>( EventUtil.collectBeforeNavigationListeners(ui.getElement())); } else { remainingListeners = null; } TransitionOutcome transitionOutcome = executeBeforeNavigation( beforeNavigationDeactivating, listeners); switch (transitionOutcome) { case REROUTED: return reroute(event, beforeNavigationDeactivating); case POSTPONED: remainingListeners = listeners; ContinueNavigationAction currentAction = beforeNavigationDeactivating .getContinueNavigationAction(); currentAction.setCallback(() -> this.handle(event)); storeContinueNavigationAction(ui, currentAction); return HttpServletResponse.SC_OK; case FINISHED: // Continue normally break; default: throw new IllegalStateException( ""Unexpected transition outcome: "" + transitionOutcome); }  Component componentInstance = getRouteTarget(routeTargetType, event); List<HasElement> chain = new ArrayList<>(); chain.add(componentInstance);  for (Class<? extends RouterLayout> parentType : routeLayoutTypes) { chain.add(getRouteTarget(parentType, event)); }  BeforeNavigationEvent beforeNavigationActivating = new BeforeNavigationEvent( event, routeTargetType, ActivationState.ACTIVATING);  navigationState.getUrlParameters().ifPresent(urlParameters -> { HasUrlParameter hasUrlParameter = (HasUrlParameter) componentInstance; hasUrlParameter.setParameter(beforeNavigationActivating, hasUrlParameter.deserializeUrlParameters(urlParameters)); });  listeners = new LinkedList<>( EventUtil.collectBeforeNavigationListeners(chain)); transitionOutcome = executeBeforeNavigation( beforeNavigationActivating, listeners); switch (transitionOutcome) { case REROUTED: return reroute(event, beforeNavigationActivating); case FINISHED: // Continue normally break; case POSTPONED: // It is not valid here, so fall through to default default: throw new IllegalStateException( ""Unexpected transition outcome: "" + transitionOutcome); }  @SuppressWarnings(""unchecked"") List<RouterLayout> routerLayouts = (List<RouterLayout>) (List<?>) chain .subList(1, chain.size());  ui.getInternals().showRouteTarget(event.getLocation(), componentInstance, routerLayouts);  RouterUtil.updatePageTitle(event, componentInstance);  LocationChangeEvent locationChangeEvent = RouterUtil.createEvent(event, chain);  if (locationChangeEvent.getStatusCode() == HttpServletResponse.SC_OK) { fireAfterNavigationListeners(chain, new AfterNavigationEvent(locationChangeEvent)); }  if (componentInstance instanceof RouteNotFoundError) { locationChangeEvent.setStatusCode(HttpServletResponse.SC_NOT_FOUND); } return locationChangeEvent.getStatusCode(); } "	0	0	0	0	1	0
protected void getLaunchConfigInfo(Account account, Stack env, List<ServiceMetaData> stackServices, Map<Long, Service> idToService, Service service, List<String> launchConfigNames, String launchConfigName) { boolean isPrimaryConfig = launchConfigName .equalsIgnoreCase(ServiceConstants.PRIMARY_LAUNCH_CONFIG_NAME); String serviceName = isPrimaryConfig ? service.getName() : launchConfigName; List<String> sidekicks = new ArrayList<>();  if (isPrimaryConfig) { getSidekicksInfo(service, sidekicks, launchConfigNames); }  LBConfigMetadataStyle lbConfig = lbInfoDao.generateLBConfigMetadataStyle(service); Object hcO = null; if (service.getKind().equalsIgnoreCase(ServiceConstants.KIND_EXTERNAL_SERVICE)) { hcO = DataAccessor.field(service, InstanceConstants.FIELD_HEALTH_CHECK, Object.class); } else { hcO = ServiceDiscoveryUtil.getLaunchConfigObject(service, launchConfigName, InstanceConstants.FIELD_HEALTH_CHECK); }  InstanceHealthCheck hc = null; if (hcO != null) { hc = jsonMapper.convertValue(hcO, InstanceHealthCheck.class); } ServiceMetaData svcMetaData = new ServiceMetaData(service, serviceName, env, sidekicks, hc, lbConfig); stackServices.add(svcMetaData); } 	0	0	1	0	1	0
"private static boolean IsExistingLabel(String Name, AttributeSet me, Set<Component> comps, Boolean ShowDialog) { if (Name.isEmpty()) return false; for (Component comp : comps) { if (!comp.getAttributeSet().equals(me)) { String Label = (comp.getAttributeSet().containsAttribute(StdAttr.LABEL)) ? comp.getAttributeSet().getValue(StdAttr.LABEL) : """"; if (Label.toUpperCase().equals(Name.toUpperCase())) { if (ShowDialog) JOptionPane.showMessageDialog(null, ""\""""+Name+""\"" : ""+Strings.get(""UsedLabelNameError"")); return true; } } } /* we do not have to check the wires as (1) Wire is a reserved keyword, and (2) they cannot have a label */ return false; } "	0	0	0	0	1	0
"private void handleDetonation(DetonationPdu pdu) { short eid = pdu.getExerciseID();  // we get two sets of coordinates in a detonation. Track both sets Vector3Float eLoc = pdu.getLocationInEntityCoordinates(); double[] locArr = new double[] {eLoc.getX(), eLoc.getY(), eLoc.getZ()}; @SuppressWarnings(""unused"") double[] eWorldCoords = CoordinateConversions.xyzToLatLonDegrees(locArr);  Vector3Double wLoc = pdu.getLocationInWorldCoordinates(); double[] worldArr = new double[] {wLoc.getX(), wLoc.getY(), wLoc.getZ()}; double[] worldCoords = CoordinateConversions.xyzToLatLonDegrees(worldArr);  long time = pdu.getTimestamp(); int hisId = pdu.getFiringEntityID().getEntity();  double[] coordsToUse = worldCoords;  // sort out his name String hisName = nameFor(hisId);  Iterator<IDISDetonationListener> dIter = _detonationListeners.iterator(); while (dIter.hasNext()) { IDISDetonationListener thisD = (IDISDetonationListener) dIter.next(); thisD.add(time, eid, hisId, hisName, coordsToUse[0], coordsToUse[1], coordsToUse[2]); }  } "	1	1	1	1	0	0
"private boolean checkBitField(FieldDeclaration fieldDeclaration, List<ErroneousIssue> errors) { final TagCheckingVisitor tagCheckingVisitor = new TagCheckingVisitor(); final Expression widthExpr = fieldDeclaration.getAstField().getBitfield().get(); widthExpr.accept(tagCheckingVisitor, null);  if (tagCheckingVisitor.errorFlag) { return true; }  final ConstantValue widthValue = FinalAnalyzer.this.interpreter.evaluate(widthExpr); checkState(widthValue.getType().getType() == ConstantType.Type.SIGNED_INTEGER || widthValue.getType().getType() == ConstantType.Type.UNSIGNED_INTEGER, ""width of a bit-field has not evaluated to an integer constant""); final BigInteger width = ((IntegerConstantValue<?>) widthValue).getValue(); final int typeSizeInBits = 8 * new UniversalTypeLayoutCalculator(abi, fieldDeclaration.getType().get()) .calculate() .getSize();  if (width.signum() < 0) { errors.add(InvalidBitFieldDeclarationError.negativeWidth(fieldDeclaration.getName(), width)); return true; } else if (width.compareTo(BigInteger.valueOf(typeSizeInBits)) > 0) { errors.add(InvalidBitFieldDeclarationError.tooLargeWidth(fieldDeclaration.getName(), width, fieldDeclaration.getType().get())); return true; } else { return false; } } "	0	0	0	0	1	0
"public String getAsJson(PersonWord[] words) {  org.json.JSONObject json = new JSONObject();  try { json.put(""personid"", this.personid); json.put(""name"", this.name); json.put(""age"", this.age); json.put(""gender"", this.gender); json.put(""occupation"", this.occupation); json.put(""education"", this.education);  json.put(""firstLanguage"", this.firstLanguage); json.put(""secondLanguage"", this.secondLanguage); json.put(""thirdLanguage"", this.thirdLanguage); json.put(""fourthLanguage"", this.fourthLanguage);  json.put(""livesInMunicipality"", this.livesInMunicipality); json.put(""livesInDistrict"", this.livesInDistrict); json.put(""livesInVillage"", this.livesInVillage);  json.put(""livedWholeLife"", this.livedWholeLife); json.put(""livedInYears"", this.livedInYears);  json.put(""bornMunicipality"", this.bornMunicipality); json.put(""bornDistrict"", this.bornDistrict); json.put(""bornVillage"", this.bornVillage);  JSONArray jsonWords = new JSONArray();  for (int i=0;i<words.length;i++) {  if (words[i].word != null || words[i].audiofilename != null) { JSONObject jsonWord = new JSONObject();  jsonWord.put(""wordid"", words[i].itemid);  if (words[i].word != null) { jsonWord.put(""word"", words[i].word); } if (words[i].audiofilename != null) { jsonWord.put(""filename"", words[i].audiofilename); } jsonWords.put(jsonWord); } }  json.put(""words"", jsonWords);  return json.toString(); } catch (JSONException jsonE) { return jsonE.toString(); } } "	1	0	0	1	0	0
"@Test public void osInfo() throws InterruptedException, IOException { ByteArrayOutputStream outputStream = new ByteArrayOutputStream();  DockerClientBuilder builder = new DockerClientBuilder(new String[]{""cat"", ""/etc/os-release""}) .withStdOutputStream(outputStream) .withImage(SOME_BASE_IMAGE) .withContainerName(NAME_UNDER_TEST);  builder.startContainer();  String output = outputStream.toString(StandardCharsets.UTF_8.name()); logger.info(output);  final Properties p = new Properties(); p.load(new StringReader(output)); assertEquals(""\""Ubuntu\"""", p.getProperty(""NAME"")); assertEquals(""\""Ubuntu 16.04.1 LTS\"""", p.getProperty(""PRETTY_NAME"")); assertEquals(""debian"", p.getProperty(""ID_LIKE"")); } "	0	0	0	0	1	0
@Override public StormTopology execute(Config config, StormEnvironment environment) { TopologyCheckAppConfig topologyCheckAppConfig = TopologyCheckAppConfig.newInstance(config);  String spoutName = TopologyCheckAppConfig.TOPOLOGY_DATA_FETCH_SPOUT_NAME; String systemSpoutName = TopologyCheckAppConfig.SYSTEM_DATA_FETCH_SPOUT_NAME; String systemPersistBoltName = TopologyCheckAppConfig.SYSTEM_ENTITY_PERSIST_BOLT_NAME; String persistBoltName = TopologyCheckAppConfig.TOPOLOGY_ENTITY_PERSIST_BOLT_NAME; String parseBoltName = TopologyCheckAppConfig.PARSE_BOLT_NAME; String kafkaSinkBoltName = TopologyCheckAppConfig.SINK_BOLT_NAME;  TopologyBuilder topologyBuilder = new TopologyBuilder(); topologyBuilder.setSpout( spoutName, new TopologyCheckAppSpout(topologyCheckAppConfig), topologyCheckAppConfig.dataExtractorConfig.numDataFetcherSpout ).setNumTasks(topologyCheckAppConfig.dataExtractorConfig.numDataFetcherSpout);  topologyBuilder.setBolt( persistBoltName, new TopologyDataPersistBolt(topologyCheckAppConfig), topologyCheckAppConfig.dataExtractorConfig.numEntityPersistBolt ).setNumTasks(topologyCheckAppConfig.dataExtractorConfig.numEntityPersistBolt).shuffleGrouping(spoutName);  topologyBuilder.setBolt( parseBoltName, new HealthCheckParseBolt(), topologyCheckAppConfig.dataExtractorConfig.numEntityPersistBolt ).setNumTasks(topologyCheckAppConfig.dataExtractorConfig.numEntityPersistBolt).shuffleGrouping(persistBoltName);  StormStreamSink<?> sinkBolt = environment.getStreamSink(TOPOLOGY_HEALTH_CHECK_STREAM, config); topologyBuilder.setBolt( kafkaSinkBoltName, sinkBolt, topologyCheckAppConfig.dataExtractorConfig.numKafkaSinkBolt ).setNumTasks(topologyCheckAppConfig.dataExtractorConfig.numKafkaSinkBolt).shuffleGrouping(parseBoltName);  // system check data collector if (topologyCheckAppConfig.systemConfig.systemInstanceEnable) { topologyBuilder.setSpout( systemSpoutName, new KafkaSpoutProvider(SYSTEM_COLLECTOR_CONFIG_PREFIX).getSpout(config), topologyCheckAppConfig.dataExtractorConfig.numDataFetcherSpout ).setNumTasks(topologyCheckAppConfig.dataExtractorConfig.numDataFetcherSpout);  // system check data persist topologyBuilder.setBolt( systemPersistBoltName, new SystemCheckPersistBolt(topologyCheckAppConfig), topologyCheckAppConfig.dataExtractorConfig.numEntityPersistBolt ).setNumTasks(topologyCheckAppConfig.dataExtractorConfig.numEntityPersistBolt).shuffleGrouping(systemSpoutName); }  return topologyBuilder.createTopology(); } 	0	0	1	0	1	0
"@POST @Path(""/project/id/{id:[0-9][0-9]*}/user/id/{userName}/assignedReviewWork"") @ApiOperation(value = ""Find assigned review work for a map project."", notes = ""Gets a list of search results of assigned review work for the specified parameters."", response = SearchResultList.class) @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML }) public SearchResultList findAssignedReviewWork( @ApiParam(value = ""Map project id, e.g. 7"", required = true) @PathParam(""id"") Long mapProjectId, @ApiParam(value = ""User id, e.g. 2"", required = true) @PathParam(""userName"") String userName, @ApiParam(value = ""Query, e.g. 'heart attack'"", required = true) @QueryParam(""query"") String query, @ApiParam(value = ""Paging/filtering/sorting parameter, in JSON or XML POST data"", required = true) PfsParameterJpa pfsParameter, @ApiParam(value = ""Authorization token"", required = true) @HeaderParam(""Authorization"") String authToken) throws Exception {  Logger.getLogger(WorkflowServiceRest.class) .info(""RESTful call (Workflow): /project/id/"" + mapProjectId.toString() + ""/user/id/"" + userName + ""/assignedReviewWork "" + query);  String project = """"; String user = null;  final WorkflowService workflowService = new WorkflowServiceJpa(); try { // authorize call user = authorizeProject(mapProjectId, authToken, MapUserRole.LEAD, ""find assigned review work "", securityService);  // get the project and user final MapProject mapProject = workflowService.getMapProject(mapProjectId); project = mapProject.getName(); final MapUser mapUser = workflowService.getMapUser(userName); user = mapUser.getUserName();  PfsParameter localPfs = new PfsParameterJpa(); localPfs.setSortField(pfsParameter.getSortField()); localPfs.setQueryRestriction(pfsParameter.getQueryRestriction());  // get ALL FixErrorPath work at specialist level for the project WorkflowPathHandler fixErrorHandler = new WorkflowFixErrorPathHandler(); SearchResultList assignedWork = fixErrorHandler.findAssignedWork(mapProject, mapUser, MapUserRole.LEAD, query, localPfs, workflowService);  // if a review project, get all normal workflow work and combine if (mapProject.getWorkflowType().equals(WorkflowType.REVIEW_PROJECT)) { SearchResultList reviewProjectWork = workflowService.findAssignedWork( mapProject, mapUser, MapUserRole.LEAD, query, pfsParameter); assignedWork.addSearchResults(reviewProjectWork); }  // apply paging int[] totalCt = new int[1]; localPfs = new PfsParameterJpa(pfsParameter); localPfs.setQueryRestriction(""""); localPfs.setSortField("""");  // create list of SearchResultJpas // NOTE: This could be cleaned up with better typing // currently cannot convert List<SearchResultJpa> to // List<SearchResult> List<SearchResultJpa> results = new ArrayList<>(); for (SearchResult sr : assignedWork.getSearchResults()) { results.add((SearchResultJpa) sr); }  // apply paging to the list results = workflowService.applyPfsToList(results, SearchResultJpa.class, totalCt, localPfs);  // reconstruct the assignedWork search result list assignedWork.setSearchResults(new ArrayList<SearchResult>()); for (SearchResult sr : results) { assignedWork.addSearchResult(sr); }  return assignedWork;  } catch (Exception e) { handleException(e, ""trying to find assigned review work"", user, project, """"); return null; } finally { workflowService.close(); securityService.close(); } } "	0	0	0	0	0	1
"public static Order.OrderType BitMarketOrderTypeToOrderType(String bitmarketOrderType) {  return bitmarketOrderType.equals(""buy"") ? Order.OrderType.ASK : Order.OrderType.BID; } "	0	0	1	0	0	0
"@Override public Response intercept(Chain chain) throws IOException { Request request = chain.request(); Response response = chain.proceed(request);  if (response.code() == HttpURLConnection.HTTP_UNAUTHORIZED) { OpengurApp app = OpengurApp.getInstance();  if (app.getUser() != null) { LogUtil.v(TAG, ""Token is no longer valid""); mIsAuthenticated.set(false);  synchronized (mLock) { if (!mIsAuthenticated.get()) { String token = refreshToken(app);  if (!TextUtils.isEmpty(token)) { mIsAuthenticated.set(true); Request newRequest = request.newBuilder() .removeHeader(ApiClient.AUTHORIZATION_HEADER) .addHeader(ApiClient.AUTHORIZATION_HEADER, ""Bearer "" + token) .build();  FileUtil.closeStream(response.body()); return chain.proceed(newRequest); }   mIsAuthenticated.set(false); } } } else { LogUtil.w(TAG, ""Received unauthorized status from API but no user is present... wat?""); } }  return response; } "	0	0	0	0	1	0
@Override public void setAttribute(String key, Object value, double timestamp) { setAttribute(getColumnStore().getColumn(key), value, timestamp); } 	0	0	0	0	1	0
@Override public Object removeAttribute(String key, double timestamp) { return removeAttribute(getColumnStore().getColumn(key), timestamp); } 	0	0	0	0	1	0
@Override public Object getAttribute(String key, GraphView view) { return getAttribute(getColumnStore().getColumn(key), view); } 	0	0	0	0	1	0
@Override public Object removeAttribute(String key) { return removeAttribute(getColumnStore().getColumn(key)); } 	0	0	0	0	1	0
@Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == ADD_GROUP_ID) { Intent intent = new Intent(getActivity(), NewGroupActivity.class); startActivity(intent); } return true; } 	0	0	0	0	1	0
public FirebaseSyncRequester<T> whenReady() { try { countDownLatch.await(); } catch (InterruptedException e) { e.printStackTrace(); } return this; } 	0	0	1	1	0	0
private void onCoinsChanged(WalletDataContext ctx, DNA.Wallets.Coin[] added, DNA.Wallets.Coin[] changed, DNA.Wallets.Coin[] deleted) { ctx.insert(Arrays.stream(added).map(p -> { Coin entity = new Coin(); entity.txid = p.input.prevHash.toArray(); entity.index = Short.toUnsignedInt(p.input.prevIndex); entity.assetId = p.assetId.toArray(); entity.value = p.value.getData(); entity.scriptHash = p.scriptHash.toArray(); entity.state = CoinState.Unspent.ordinal(); return entity; }).toArray(Coin[]::new)); ctx.update(Arrays.stream(changed).map(p -> { Coin entity = new Coin(); entity.txid = p.input.prevHash.toArray(); entity.index = Short.toUnsignedInt(p.input.prevIndex); entity.state = p.getState().ordinal(); return entity; }).toArray(Coin[]::new)); ctx.delete(Arrays.stream(deleted).map(p -> { Coin entity = new Coin(); entity.txid = p.input.prevHash.toArray(); entity.index = Short.toUnsignedInt(p.input.prevIndex); return entity; }).toArray(Coin[]::new)); } 	0	0	1	0	1	0
"public static void loadRecognitionScenariosFromServer() { JSONObject platformFeatures = PlatformFeaturesService.loadPlatformFeatures(); if (platformFeatures == null) { AppLogger.logMessage(""Error with loading platform feature. Scenarios could not be loaded...""); return; } AppLogger.logMessage(""\nSending request to CK server to obtain available collaborative experiment scenarios for your mobile device ...\n\n""); JSONObject availableScenariosRequest = new JSONObject(); try { String remoteServerURL = AppConfigService.getRemoteServerURL(); if (remoteServerURL == null) { AppLogger.logMessage(""\n Error we could not load scenarios from Collective Knowledge server: it's not reachible ...\n\n""); return; } availableScenariosRequest.put(""remote_server_url"", remoteServerURL); availableScenariosRequest.put(""action"", ""get""); availableScenariosRequest.put(""module_uoa"", ""experiment.scenario.mobile""); availableScenariosRequest.put(""email"", AppConfigService.getEmail()); availableScenariosRequest.put(""platform_features"", platformFeatures); availableScenariosRequest.put(""out"", ""json""); } catch (JSONException e) { AppLogger.logMessage(""\nError with JSONObject ...\n\n""); return; }  JSONObject responseJSONObject; try { responseJSONObject = openme.remote_access(availableScenariosRequest); } catch (JSONException e) { AppLogger.logMessage(""\nError calling OpenME interface ("" + e.getMessage() + "") ...\n\n""); return; }  if (validateReturnCode(responseJSONObject)) { return; } RecognitionScenarioService.saveScenariosJSONObjectToFile(responseJSONObject); RecognitionScenarioService.reloadRecognitionScenariosFromFile(); AppConfigService.updateState(AppConfigService.AppConfig.State.READY);  AppLogger.logMessage(""Finished loading shared scenarios for crowdsourcing from server!""); } "	0	0	0	0	1	0
"private void serverCleanUp(IProject p) { EclipseRequestManager rm = PluginManager.getInstance().getRequestManager(); MetadataManager mm = PluginManager.getInstance().getMetadataManager(); List<FileMetadata> fileMetas = mm.getProjectMetadata(p.getFullPath().toString()).getFiles();  if (fileMetas == null) { return; } for (FileMetadata fm : fileMetas) { String path =  Paths.get(fm.getRelativePath(), fm.getFilename()).normalize().toString(); for (String ignored : ignoredFiles) { if (path.startsWith(ignored) || path.equals(ignored)) { // send delete request for fileID System.out.println(String.format(""Cleaning up %s from server"", path)); rm.deleteFile(fm.getFileID()); } } } } "	0	0	0	0	1	0
public synchronized static SSLEngine createClientSSLEngine() { SSLEngine engine = SSLFactory.getInstance().sslContext().createSSLEngine(); engine.setUseClientMode(true); return engine; } 	0	0	1	0	0	0
private void waitForDisposable(Disposable d) { Flowable.interval(30, TimeUnit.MILLISECONDS) .takeWhile(x -> !d.isDisposed()).blockingSubscribe(); } 	0	0	1	1	0	0
"private void onError(Throwable throwable) { getView().showMessage(""Error: "" + throwable.getMessage()); } "	0	0	0	0	1	0
@Test public void shouldDetachFromView() { presenter.detach(); assertThat(presenter.getView()).isNull(); } 	0	0	0	0	1	0
"@EventHandler public void init(FMLInitializationEvent event) { proxy.init();  // register the gui handler NetworkRegistry.INSTANCE.registerGuiHandler(this, guiHandler);  logger.info(""Uncrafting Table has been correctly initialized!""); } "	0	0	0	0	1	0
private boolean isSame(Object[] otherValues) { // lengths have already been verified at this point for ( int i = 0; i < naturalIdTypes.length; i++ ) { if ( ! naturalIdTypes[i].isEqual( values[i], otherValues[i], persister.getFactory() ) ) { return false; } } return true; } 	0	0	0	0	1	0
@NotNull private static List<String> getStringList(@NotNull JsonObject object, @NotNull String memberName) { JsonArray jsonArray = object.getAsJsonArray(memberName); if (jsonArray != null) { List<String> array = new ArrayList<>(); jsonArray.forEach(element -> array.add(element.getAsString())); return array; } return Collections.emptyList(); } 	0	0	1	0	1	0
@Override public List<Treasure> getTreasures(GeoLocation location, double radius) { radius = radius / 6378137; // earth radius in meters return dataBaseSupervisor.getTreasuresNearLocation(location.getLon(), location.getLat(), radius); } 	0	0	0	0	1	0
"@Override public void service(HttpServletRequest req, HttpServletResponse resp) { log.info(""*******************************************""); CodeHolder tokenGen = CodeHolder.getInstance(); tokenGen.addCodeToMap(req.getSession().getId(), req.getParameter(""code""), req.getParameter(""error"")); } "	0	0	0	0	1	0
"public boolean validateInputs(){ if (collectionTitle.getText().trim() == null || collectionTitle.getText().trim().equalsIgnoreCase(i18n.GL3367())){ lblErrorMessage.setText(""collection"".equalsIgnoreCase(type)?""Please Enter Collection Title"":""Please Enter Assessment Title""); return false; } boolean isValidSting = StringUtil.checkItContainesURL(collectionTitle.getText()); if(isValidSting){ lblErrorMessage.setVisible(true); lblErrorMessage.setText(i18n.GL0323()); return false; }else{ lblErrorMessage.setVisible(false); return true; } } "	1	0	1	1	1	0
@Test public void shouldFailWithExitCode() throws Exception { final SideEffect1<CoverageResult> noOpHandler = new SideEffect1<CoverageResult>() { public void apply(final CoverageResult a) { } };  final CoverageOptions sa = new CoverageOptions(coverOnlyTestees(), new JUnitCompatibleConfiguration(new TestGroupConfig()), true, -1); final JarCreatingJarFinder agent = new JarCreatingJarFinder(); final LaunchOptions lo = new LaunchOptions(agent); final SocketFinder sf = new SocketFinder(); final CoverageProcess process = new CoverageProcess(ProcessArgs .withClassPath(classPathWithoutJUnit()).andLaunchOptions(lo), sa, sf.getNextAvailableServerSocket(), Arrays.asList(TestsForMultiBlockCoverage.class.getName()), noOpHandler); process.start();  final ExitCode exitCode = process.waitToDie();  assertThat(exitCode, is(ExitCode.UNKNOWN_ERROR)); } 	0	0	0	0	1	0
"@Test @DirtiesContext public void testSupervisionNotification() throws InterruptedException { SupervisionListener supervisionListener1 = EasyMock.createMock(SupervisionListener.class); SupervisionListener supervisionListener2 = EasyMock.createMock(SupervisionListener.class); SupervisionEvent event = new SupervisionEventImpl(SupervisionEntity.EQUIPMENT, 10L, ""P_TEST"", SupervisionStatus.DOWN, new Timestamp(System.currentTimeMillis()), ""test event"");  //expect supervisionListener1.onSupervisionUpdate(event); supervisionListener2.onSupervisionUpdate(event);  //test (register listeners and publish supervision event) EasyMock.replay(supervisionListener1); EasyMock.replay(supervisionListener2);  jmsProxy.registerSupervisionListener(supervisionListener1); jmsProxy.registerSupervisionListener(supervisionListener2); String topicName = properties.getJms().getSupervisionTopic(); Assert.assertNotNull(topicName); jmsSender.sendToTopic(((SupervisionEventImpl) event).toJson(), topicName);  //wait for message Thread.sleep(1000);  //verify EasyMock.verify(supervisionListener1); EasyMock.verify(supervisionListener2); } "	0	0	1	0	1	0
@Override public InfoWrapper[] generateInfo() { ChapterPackHandlerSupport.getChapterPackHandler(getActivity(), ChapterPackHandlerSupport.getOptions()[0]); EventRSSHandler handler= ChapterPackHandlerSupport.getEventHandler(getActivity()); return handler.getEventsFromRss(); } 	1	0	1	1	1	0
@Override public void run() { if (mIsForeground && mIsPaused) {  mIsForeground = false;  if (mBackAndForegroundListener != null) { mBackAndForegroundListener.wentBackground(); } } } 	0	0	1	0	1	0
public void addDataObserver(Observer<ST> observer) { dataObservable.addObserver(observer); } 	0	0	0	0	1	0
public void removeDataObserver(Observer<ST> observer) { dataObservable.removeObserver(observer); } 	0	0	0	0	1	0
"private Map<String, String> getLiteralMap(){  Map<String, String> map = new HashMap<String, String>(); map.put(""literalValue"", literalValue); return map; } "	0	0	0	0	1	0
"public static void addTargetNode( LineageNode jobNode, Map<Long, List<LineageNode>> addedTargetNodes, Map<String, List<LineageNode>> addedTargetDataNodes, Map<String, LineageNode> toBeClearedSourceDataNodes, List<LineageNode> nodes, List<LineageEdge> edges, boolean isUpLevel) { List<LineageNode> targetNodes = addedTargetNodes.get(jobNode.exec_id); if (targetNodes != null) { for(LineageNode node : targetNodes) { List<LineageNode> existTargetNodes = addedTargetDataNodes.get(node.abstracted_path); LineageNode existNode = null; if (existTargetNodes != null) { for(LineageNode target : existTargetNodes) { if (target.partition_end != null) { if (target.partition_end == node.partition_end) { existNode = target; break; } } else if(target.job_end_unix_time == node.job_end_unix_time) { existNode = target; break; } } } if (isUpLevel) { if (existNode == null) { existNode = toBeClearedSourceDataNodes.get(node.abstracted_path); if (existNode != null && existNode.job_start_unix_time < node.job_end_unix_time) { existNode = null; } } }  if (existNode != null) { node.id = existNode.id; } else { node.id = nodes.size(); nodes.add(node); if (existTargetNodes == null) { existTargetNodes = new ArrayList<LineageNode>(); } existTargetNodes.add(node); addedTargetDataNodes.put(node.abstracted_path, existTargetNodes); } LineageEdge edge = new LineageEdge(); edge.id = edges.size(); edge.source = jobNode.id; edge.target = node.id; edge.label = node.operation; edge.chain = """"; edges.add(edge); } } } "	0	0	1	0	0	0
public ItemStack getItem() { load(Minecraft.getMinecraft().player); return handler.getStackInSlot(0); } 	0	0	1	0	1	0
"public void checkDir(Location dir) throws CoreException { try { Files.walkFileTree(dir.path, this); } catch (IOException e) { throw LangCore.createCoreException(""Error walking file tree"", e); } } "	0	0	0	0	1	0
protected boolean isDirectoryAValidGoPackage(final Path goPackageDir) throws IOException { CheckDirectoryHasGoSourceFiles checkSourceFiles = new CheckDirectoryHasGoSourceFiles(); Files.walkFileTree(goPackageDir, new HashSet<FileVisitOption>(), 1, checkSourceFiles); return checkSourceFiles.hasGoSourceFiles; } 	0	0	0	0	1	0
"public void deleteFolders() throws JSONException { JSONArray array=new JSONArray(); HashMap<String,String> reqMap=new HashMap<String,String>(); reqMap.put(""method"", ""getfolders""); reqMap.put(""api_key"", new Configuration().RAZUNA_KEY);   try { array=httputil.readResponseIntoJSONArray(httputil.callRazunaAPI(reqMap, config.Razuna_CREATE_FOLDER_METHOD)); } catch (ParseException | JSONException | IOException e) { // TODO Auto-generated catch block e.printStackTrace(); }  for(int i=0;i<array.length();i++) { JSONObject obj=array.getJSONObject(i); if(!obj.getString(""FOLDER_ID"").equalsIgnoreCase(""40E5FD89FF8945B5A94719E8613217D8"")) { HashMap<String,String> map=new HashMap<String,String>(); reqMap.put(""method"", ""removefolder""); reqMap.put(""api_key"", new Configuration().RAZUNA_KEY); reqMap.put(""folder_id"", obj.getString(""FOLDER_ID"")); httputil.callRazunaAPI(reqMap, config.Razuna_CREATE_FOLDER_METHOD);  } } } "	0	0	0	0	1	0
@Override public void onDownloaded(String id, String url, ServiceContext sc) { if (subTiles.haveID(url) && isInitializing == false) { AppBroadcaster.broadcast(sc.getContext(), AppBroadcaster.REQUEST_ELEVATION_UPDATE, toString()); } } 	0	0	0	0	1	0
public ByteArrayInputStream getFileData() throws Exception { return new ByteArrayInputStream(file.getBytes()); } 	0	0	0	0	1	0
private static Path getPathToJar() { URI pathToJar; try { pathToJar = NativeLibraries.class.getProtectionDomain().getCodeSource().getLocation().toURI(); } catch (URISyntaxException e) { throw new AssertionError(e); } return Paths.get(pathToJar);  } 	0	0	1	0	1	0
public void roll(){ this.faceValue = (int)(Math.random()*sides) + 1; } 	1	0	0	1	1	0
private void showData() { mAdapter = new ShoppingListAdapter(this.getActivity(), mList);  ListView listView = (ListView) this.getView().findViewById(R.id.listViewShoppingList); listView.setAdapter(mAdapter); listView.setClickable(true); listView.deferNotifyDataSetChanged();  listView.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) { ShoppingList shoppingList = (ShoppingList) mAdapter.getItem(i); onClickShowButton(shoppingList); } }); } 	0	0	0	0	1	0
"private Object recursiveAssembly(Class<?> clazz){ Object field = null; if(null != clazz){ // 是接口或者抽象类 if(clazz.isInterface() || Modifier.isAbstract(clazz.getModifiers())){ String implClassName = clazz.getPackage().getName() + "".impl."" + clazz.getSimpleName() + ""Impl""; return ReflectKit.newInstance(implClassName); } else { field = this.registBean(clazz); } } return field; } "	0	0	0	0	1	0
@Override public void registBean(Set<Class<?>> classes) { if(!CollectionKit.isEmpty(classes)){ for(Class<?> clazz : classes){ this.registBean(clazz); } } } 	0	0	0	0	1	0
"@Override protected Representation get() throws ResourceException { try { File csv = GroupE.getCSVData(getKursID(), getSemester()); FileRepresentation representation = new FileRepresentation(csv, new MediaType(""text"", ""csv"")); representation.setAutoDeleting(true); representation.getDisposition().setType(Disposition.TYPE_ATTACHMENT); return representation; } catch (WebServiceException e) { throw e.toResourceException(); } } "	0	0	0	0	1	0
"public ArrayList<Word> getWordsFromDataBase(String language) { ArrayList<Word> wordList = new ArrayList<>(); String category = myContext.getSharedPreferences(""PrefsFile"",Context.MODE_PRIVATE).getString(""category"",""Food""); this.openDataBase(); String wordQuery = ""SELECT IMGFILE, NAME, AUDIO, Category FROM 'Vocabulary' WHERE LANG = \"""" + language + ""\"" AND Category = \"""" + category + ""\""""; SQLiteDatabase db = this.getReadableDatabase(); Cursor cursor = db.rawQuery(wordQuery, null);  if (cursor.moveToFirst()) { do { Word word = new Word(cursor.getString(0), cursor.getString(1), cursor.getString(2), cursor.getString(3)); wordList.add(word); } while (cursor.moveToNext()); } cursor.close(); this.close(); // return contact list return wordList;   } "	0	0	0	0	1	0
"@Test public void testAlterVmJsonRadlNoJsonRequest() throws ImClientException, IOException { waitUntilRunningOrUncofiguredState(VM_DEFAULT_ID); // Wait for the machine to be properly configured getImApiClient().alterVm(getInfrastructureId(), VM_DEFAULT_ID, new Utf8File(RADL_JSON_ALTER_VM_FILE_PATH).read(), RestApiBodyContentType.RADL_JSON, false); ServiceResponse response = getImApiClient().getVmProperty( getInfrastructureId(), VM_DEFAULT_ID, VmProperties.CPU_COUNT, false); checkServiceResponse(response); // Check that the alteration of the VM has been successful String cpuCount = response.getResult(); if (cpuCount == null || cpuCount.isEmpty() || !cpuCount.equals(""2"")) { Assert.fail(); } } "	0	0	1	0	0	0
public ImOutputValues getInfrastructureOutputs(String infId) throws ImClientException { checkNullValue(infId); ImOutputValues infrastructureStatus = null; try { ServiceResponse response = getImClient().get( PATH_INFRASTRUCTURES + PATH_SEPARATOR + infId + PATH_SEPARATOR + REST_PARAMETER_INFRASTRUCTURE_OUTPUTS, MediaType.APPLICATION_JSON); infrastructureStatus = new ObjectMapper().readValue(response.getResult(), ImOutputValues.class);  } catch (AuthorizationFileException | IOException exception) { ImJavaApiLogger.severe(InfrastructureManagerApiClient.class, exception); throw new ImClientException(ImMessages.EXCEPTION_INFRASTRUCTURE_OUTPUTS); } checkNullValue(infrastructureStatus); return infrastructureStatus; } 	0	0	1	0	1	0
private synchronized int getMatchingStubCount(String url1, String url2){ return from(wireMockServer.listAllStubMappings().getMappings()).filter(withAnyOf(url1, url2)).size(); } 	1	0	1	1	1	0
"@SuppressWarnings({""unchecked""}) @Override protected final void bindSecurityManager(AnnotatedBindingBuilder<? super SecurityManager> bind) { bindWebSecurityManager(bind); } "	0	0	0	0	1	0
"@SubscribeEvent public void onModelBake(ModelBakeEvent event) { try { IModel model = ModelLoaderRegistry.getModel(new ResourceLocation(CookingForBlockheads.MOD_ID, ""block/milkJarLiquid"")); MilkJarRenderer.modelMilkLiquid = model.bake(model.getDefaultState(), DefaultVertexFormats.BLOCK, ModelLoader.defaultTextureGetter()); } catch (Exception e) { e.printStackTrace(); } } "	0	0	0	0	1	0
@Override public boolean sensorConfigWrite(SensorConfig config) { // Set the appropriate config to the new settings sensorConfigList.get(config.getSensorNumber()-1).setFreq(config.getFreq()); sensorConfigList.get(config.getSensorNumber()-1).setSDLogging(config.isSDLogging());  // Byte 0 = S1 Freq | Byte 1 = S1 SD Log // Byte 2 = S2 Freq | Byte 3 = S2 SD Log // Byte 4 = S3 Freq | Byte 5 = S3 SD Log // Byte 6 = S4 Freq | Byte 7 = S4 SD Log  byte[] configData = new byte[8];  configData[0] = (byte)sensorConfigList.get(0).getFreq(); configData[1] = (byte)((sensorConfigList.get(0).isSDLogging()) ? 1 : 0);  configData[2] = (byte)sensorConfigList.get(1).getFreq(); configData[3] = (byte)((sensorConfigList.get(1).isSDLogging()) ? 1 : 0);  configData[4] = (byte)sensorConfigList.get(2).getFreq(); configData[5] = (byte)((sensorConfigList.get(2).isSDLogging()) ? 1 : 0);  configData[6] = (byte)sensorConfigList.get(3).getFreq(); configData[5] = (byte)((sensorConfigList.get(3).isSDLogging()) ? 1 : 0);  return writeCharacteristic(BoardSensorConfigChar, configData); } 	0	0	1	1	0	0
@Override protected void onPostExecute(Object o) { if(!checkFileResult) Toast.makeText(getActivity(), getResources().getString(R.string.no_video_content), Toast.LENGTH_LONG).show(); } 	0	0	0	0	1	0
"private static void printToXMLFile(File outFile, CharacterFacade character) throws IOException, ExportException { final BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream( outFile), ""UTF-8"")); File template = getXMLTemplate(character); character.export(new ExportHandler(template), bw); bw.close(); } "	0	0	1	1	0	0
"private static void printToXMLFile(File outFile, PartyFacade party) throws IOException, ExportException { final BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream( outFile), ""UTF-8"")); for (CharacterFacade character : party) { File templateFile = getXMLTemplate(character); character.export(new ExportHandler(templateFile), bw); } bw.close(); } "	0	0	1	1	0	0
public void add(ReadOnlyTask toAdd) throws DuplicateTaskException { requireNonNull(toAdd); if (contains(toAdd)) { throw new DuplicateTaskException(); }  if (eventClash(toAdd)) { throw new DuplicateTaskException(); } toAdd.resetTaskType(); internalList.add(new Task(toAdd)); } 	0	0	0	0	1	0
"public synchronized void removeJob(final JobId jobId, final long removedTime, final boolean removeData) { runWithTransaction(new SessionWork<Void>() { @Override public Void executeWork(Session session) { long id = jobId(jobId);  if (removeData) { session.createSQLQuery(""delete from TASK_DATA_DEPENDENCIES where JOB_ID = :jobId"") .setParameter(""jobId"", id).executeUpdate(); session.createSQLQuery(""delete from TASK_DATA_JOINED_BRANCHES where JOB_ID = :jobId"") .setParameter(""jobId"", id).executeUpdate();  removeJobScripts(session, id);  session.createQuery(""delete from JobData where id = :jobId"").setParameter(""jobId"", id) .executeUpdate(); } else { String jobUpdate = ""update JobData set removedTime = :removedTime where id = :jobId""; session.createQuery(jobUpdate).setParameter(""removedTime"", removedTime).setParameter( ""jobId"", id).executeUpdate(); }  return null; }  }); } "	0	0	1	1	0	0
@Override public void serialize(Geometry arg, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {  if (arg == null) { jgen.writeNull(); } Coordinate[] lineCoords = arg.getCoordinates(); List<Coordinate> coords = Arrays.asList(lineCoords);  jgen.writeObject(PolylineEncoder.createEncodings(coords)); } 	0	0	0	0	1	0
public float getPheromoneQuantity(PheromoneType type, Colony colony) { synchronized(pheromoneQuantityCache) { if (this.pheromoneQuantityCache.get(new Pair<>(type, colony)) != null) { return this.pheromoneQuantityCache.get(new Pair<>(type, colony)); }  for (final Perceivable perceivable : this.perceptionList) { if (perceivable instanceof PerceivablePheromone && ((PerceivablePheromone) perceivable).getType() == type && ((PerceivablePheromone) perceivable).getColony() == colony) { final float qty = ((PerceivablePheromone) perceivable).getQty(); this.pheromoneQuantityCache.put(new Pair<>(type, colony), qty); return qty; } } this.pheromoneQuantityCache.put(new Pair<>(type, colony), (float) 0); return 0; } } 	0	0	1	1	0	0
public boolean hasPermission(Resident res, FlagType type, Object denialValue) { if (flagsContainer.get(type).getValue() == denialValue) { return PlayerUtils.isOp(res.getPlayer()); } return true; } 	0	0	1	0	1	0
@Override public Date convert(String str) { try { return dateFormats.get().parse(str); } catch (ParseException e) { return null; } } 	0	0	1	0	0	0
"@Test public void testSetEnumeration() { String formula = ""x = {1,2,(3,4)}""; String exceptionMessage = getExceptionMessage(formula); assertTrue(exceptionMessage != null &&exceptionMessage.contains(""Expected INTEGER but found INTEGER*INTEGER"")); } "	0	0	1	0	1	0
"public String computeJavaDoc(CompletionProposal proposal) { try { IType type = unit.getJavaProject().findType(SignatureUtil.stripSignatureToFQN(String.valueOf(proposal.getDeclarationSignature()))); if (type != null) { String[] parameters= Signature.getParameterTypes(String.valueOf(SignatureUtil.fix83600(proposal.getSignature()))); for (int i= 0; i < parameters.length; i++) { parameters[i]= getLowerBound(parameters[i]); }  IMethod method = type.getMethod(String.valueOf(proposal.getName()), parameters);  if (method != null && method.exists()) { String javadoc = null; try { javadoc = new SimpleTimeLimiter().callWithTimeout(() -> { Reader reader = JavadocContentAccess.getHTMLContentReader(method, true, true); return reader == null? null:CharStreams.toString(reader); }, 500, TimeUnit.MILLISECONDS, true); } catch (UncheckedTimeoutException tooSlow) { } catch (Exception e) { JavaLanguageServerPlugin.logException(""Unable to read documentation"", e); } return javadoc; } }  } catch (JavaModelException e) { JavaLanguageServerPlugin.logException(""Unable to resolve signaturehelp javadoc"", e); } return null; } "	0	0	0	0	1	0
"public int getYGutterPlotPointCount() { int points = 0;  if(hasYGutter()) { points = _test.getElementCount(Locator.css(""div.bottomplot svg g a.point"")); }  return points; } "	0	0	1	0	1	0
"@Override public QuerySchema getQuerySchema(String queryName, HpccConnection hpccConnection,boolean isGenericQuery,String inputParamQuery) throws Exception { Set<Field> fields = new LinkedHashSet<Field>(); QuerySchema queryData = null; try { if(isGenericQuery){ queryData = getGenericQuerySchema(queryName,hpccConnection,inputParamQuery); }else{ queryData =  new QuerySchema(); fields = getColumns(queryName, hpccConnection, isGenericQuery, inputParamQuery); queryData.setFields(fields); Set<String> inputParams = getInputParameters(queryName,hpccConnection,isGenericQuery,inputParamQuery); queryData.setInputParams(getInputParamDistinctValues(queryName, inputParams, hpccConnection, isGenericQuery, inputParamQuery)); }  } catch (DOMException | SAXException | IOException | ParserConfigurationException e) { LOG.error(Constants.EXCEPTION, e); throw e; }  if (LOG.isDebugEnabled()) { LOG.debug(""queryData"" + queryData); }  return queryData; } "	0	0	0	0	1	0
"@Override public void create () { batch = new SpriteBatch(); img = new Texture(""core/assets/badlogic.jpg""); } "	0	0	1	0	1	0
private static void unSubBytes(char[] state) {  ArrayList list = new ArrayList(); for (char e : SBOX) { list.add(e); } for (int i = 0; i < 16; i++) { state[i] = (char) list.indexOf(state[i]); } } 	0	0	1	0	1	0
"@Override public void processData(String id, IdentifiableMessage<String, UnitConfig, UnitConfig.Builder> entry, ProtoBufMessageMap<String, UnitConfig, UnitConfig.Builder> entryMap, ProtoBufRegistry<String, UnitConfig, UnitConfig.Builder> registry) throws CouldNotPerformException, EntryModification { UnitConfig.Builder unitConfig = entry.getMessage().toBuilder();  if (!unitConfig.hasType()) { throw new NotAvailableException(""unitConfig.type""); }  boolean modification = false; UnitTemplate unitTemplate = getUnitTemplateByType(unitConfig.getType()); for (ServiceTemplate serviceTemplate : unitTemplate.getServiceTemplateList()) { if (!unitConfigContainsServiceType(unitConfig, serviceTemplate)) { unitConfig.addServiceConfig(ServiceConfig.newBuilder().setServiceTemplate(serviceTemplate).setBindingConfig(BindingConfig.getDefaultInstance())); modification = true; } }  for (int i = 0; i < unitConfig.getServiceConfigCount(); i++) { if (!unitTemplate.getServiceTemplateList().contains(unitConfig.getServiceConfig(i).getServiceTemplate())) { unitConfig.removeServiceConfig(i); i--; modification = true; } }  if (modification) { throw new EntryModification(entry.setMessage(unitConfig), this); } } "	0	0	0	0	1	0
@Override public Boolean apply(String result, Boolean inProgress) throws Exception { return !inProgress && result == null; } 	0	0	0	0	1	0
"public boolean checkSuExists() { Process process = null; try { process = Runtime.getRuntime().exec(new String[] { ""/system/xbin/which"", ""su"" }); BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream())); return in.readLine() != null; } catch (Throwable t) { return false; } finally { if (process != null) process.destroy(); } } "	0	0	1	1	1	0
"private LineDataSet createSet() {  LineDataSet set = new LineDataSet(null, ""Dynamic Data""); set.setAxisDependency(AxisDependency.LEFT); set.setColor(Color.RED); set.setCircleColor(Color.BLACK); set.setLineWidth(4f); set.setCircleRadius(1f); set.setFillAlpha(100); set.setFillColor(Color.RED); set.setHighLightColor(Color.rgb(244, 117, 117)); set.setValueTextColor(Color.WHITE); set.setValueTextSize(9f); set.setDrawValues(false); return set; } "	0	0	1	0	1	0
public Double getTemp() { return temp; } 	0	0	1	1	0	0
public Double getO3() { return o3; } 	0	0	1	1	0	0
@Override public Conditional<Instruction> execute (FeatureExpr ctx, ThreadInfo ti) { StackFrame frame = ti.getModifiableTopFrame();  Conditional<Float> v = frame.popFloat(ctx);  frame.push(ctx, mapr(v, null)); return getNext(ctx, ti); } 	0	0	0	0	1	0
"private Integer computeThreshold(int calibrationLevel){  if(this.questionYESCountMap.isEmpty()) return -1;  TreeMap<String, Integer> sortedYESMap = this.sortByValue(this.questionYESCountMap); this.maxYES = this.questionYESCountMap.get(sortedYESMap.firstKey());  Integer yesCount_at_Level=0; int i=1; for(String questionID: sortedYESMap.navigableKeySet()){ Integer yesCount = this.questionYESCountMap.get(questionID); //System.out.println(""questionID: ""+questionID+"":""+yesCount); i++; if(i>calibrationLevel) { yesCount_at_Level = new Integer(yesCount); break; } }  if(yesCount_at_Level>0) return yesCount_at_Level; else return -1; } "	0	0	0	0	1	0
"protected HttpContext createHttpContextWithAuthenticatedSessionUsingUserCredentials(CloseableHttpClient httpClient) { HttpPost httpPost = createHttpPost(); List<NameValuePair> params = getParametersForLogin();  try { UrlEncodedFormEntity postParams = new UrlEncodedFormEntity(params, ""UTF-8""); httpPost.setEntity(postParams);  CloseableHttpResponse loginResponse = httpClient.execute(httpPost); int statusCode = loginResponse.getStatusLine().getStatusCode(); if (statusCode != HttpStatus.SC_OK) { throw new ApacheCloudStackClientRequestRuntimeException(statusCode, getResponseAsString(loginResponse), ""login""); } logger.debug(""Authentication response:[%s]"", getResponseAsString(loginResponse));  return createHttpContextWithCookies(loginResponse); } catch (IOException e) { throw new ApacheCloudStackClientRuntimeException(e); } } "	0	0	0	0	1	0
"@Override protected String getTooltipMessage() { String tooltip = null; if (model.isMinimizedView()) { tooltip = model.getSwimlaneLabel(); tooltip += ""\n"" + model.getName(); } return tooltip; } "	0	0	0	0	1	0
"public static Serializer fromHandle(Object handle) { Validate.notNull(""Handle cannot be null!""); initialize();  for (Serializer serializer : REGISTRY.values()) { if (serializer.getHandle().equals(handle)) { return serializer; } }  return null; } "	0	0	1	0	1	0
"Context setup(String sourceFilePath, DebugSessionObserverImpl debugSessionObserver, BreakPointDTO[] breakPoints) { ModeResolver.getInstance().setNonblockingEnabled(true);  result = BTestUtils.compile(sourceFilePath);  bContext = new Context(result.getProgFile()); bContext.setAndInitDebugInfoHolder(new DebugInfoHolder());  ControlStackNew controlStackNew = bContext.getControlStackNew(); String mainPkgName = result.getProgFile().getEntryPkgName();  PackageInfo mainPkgInfo = result.getProgFile().getPackageInfo(mainPkgName); if (mainPkgInfo == null) { throw new RuntimeException(""cannot find main function '"" + result.getProgFile().getProgramFilePath() + ""'""); }  FunctionInfo mainFuncInfo = mainPkgInfo.getFunctionInfo(""main""); if (mainFuncInfo == null) { throw new RuntimeException(""cannot find main function '"" + result.getProgFile().getProgramFilePath() + ""'""); }  // Invoke package init function BTestUtils.invoke(result, mainPkgInfo.getInitFunctionInfo(), bContext);  // Prepare main function arguments BStringArray arrayArgs = new BStringArray(); arrayArgs.add(0, ""Hello""); arrayArgs.add(1, ""World"");  WorkerInfo defaultWorkerInfo = mainFuncInfo.getDefaultWorkerInfo(); org.ballerinalang.bre.bvm.StackFrame stackFrame = new org.ballerinalang.bre.bvm.StackFrame(mainFuncInfo, defaultWorkerInfo, -1, new int[0]); stackFrame.getRefLocalVars()[0] = arrayArgs; controlStackNew.pushFrame(stackFrame); bContext.setDebugEnabled(true); bContext.setStartIP(defaultWorkerInfo.getCodeAttributeInfo().getCodeAddrs()); bContext.getDebugInfoHolder().setDebugSessionObserver(debugSessionObserver); bContext.getDebugInfoHolder().addDebugPoints(new ArrayList<>(Arrays.asList(breakPoints))); bContext.getDebugInfoHolder().setCurrentCommand(DebugInfoHolder.DebugCommand.RESUME); DebuggerExecutor executor = new DebuggerExecutor(result.getProgFile(), bContext); (new Thread(executor)).start(); return bContext; } "	0	0	0	0	0	1
"private int hourInBerlinToLocalHour(int hour) { return new DateTime(2000, 12, 1, hour, 59, 0, DateTimeZone.forID(""Europe/Berlin"")).toLocalDateTime().getHourOfDay(); } "	0	0	0	0	1	0
public void collapseBubbles() { for (Node bubble : bubbles) { bubble.getContainer().addAll(bfs(bubble)); } for (int i = 0; i < bubblesListSize; i++) { modifyContainer(bubbles.get(i)); } removeUnnecessaryBubbles(bubbles); addContainerIdToNestedBubbles(bubbles); collapseSingleSegments(collection); collapseInnerSegments(); replaceInconsistentSegments(); linker = new BubbleLinker(bubbles); linker.addLinks(); } 	0	0	0	0	1	0
private NotificationsTracker newTracker(ISonarLintProject project) { return new NotificationsTracker(StoragePathManager.getNotificationsDir(project.getName())); } 	0	0	0	1	0	0
public Date getInvestigationDate() { return investigationDate; } 	0	0	0	0	1	0
"private void setFlag(){ ImageView flag = (ImageView) findViewById(R.id.flag); if (language == ""nl"") { flag.setImageResource(R.drawable.dutchflag); } else { flag.setImageResource(R.drawable.englishflag); } } "	0	0	1	0	1	0
@Override public Character getCharacterForElement(int element) { if (apps != null && apps.get(element) != null && apps.get(element).label.length() > 0) return apps.get(element).label.charAt(0); else return '#'; } 	0	0	0	0	1	0
@Override public Column loadChunk( World world, int x, int z ) throws IOException { // does the database have the column? Column column = loadColumn( world, AddressTools.getAddress( world.provider.dimensionId, x, 0, z ) ); if( column == null ) { // returning null tells the world to generate a new column return null; }  // restore the cubic chunks // TEMP: restore chunks 0-15 for( int y=0; y<15; y++ ) { CubicChunk cubicChunk = loadCubicChunk( world, column, AddressTools.getAddress( world.provider.dimensionId, x, y, z ) ); if( cubicChunk == null ) { continue; } }  return column; } 	0	0	1	1	0	0
"public SearchResult findVariable(EObject scopeDetermeningResource, String name, PPImportedNamesAdapter importedNames) { if(name == null) throw new IllegalArgumentException(""name is null""); QualifiedName fqn = converter.toQualifiedName(name); return findVariables(scopeDetermeningResource, fqn, importedNames, Match.EQUALS); } "	0	0	0	0	1	0
"public SearchResult findVariable(EObject scopeDetermeningResource, QualifiedName fqn, PPImportedNamesAdapter importedNames) { if(fqn == null) throw new IllegalArgumentException(""fqn is null""); return findVariables(scopeDetermeningResource, fqn, importedNames, Match.EQUALS); } "	0	0	0	0	1	0
@Override protected Collection<TListClient> getClientObjects(ListSyncData<TListClient, TListServer> syncData) { return syncData.getClientLists(); } 	0	0	0	0	1	0
protected void readFile(){ try { if(!paused) { for(int i=start_play;i<notescnt;i++) { final int isNote = m[i].getNote(); final int channel = m[i].getChannel(); final int note = m[i].getNote(); final int velocity = m[i].getVelocity(); r = new Runnable() { public void run() { if(isNote==9) { keyboard_.onNote(note, velocity); synthMidi_.onNoteOn(channel, note, velocity); opennotes.put(note,velocity); } else { keyboard_.onNote(note, velocity); synthMidi_.onNoteOff(channel, note, velocity); opennotes.remove(note); for(int i=start_play;i<notescnt;i++) { if(m[i].getNote()==note && m[i]!=null) { start_play=i+1; break; } } } } }; handler.postDelayed(r, m[i].getDur()); } } else if(paused) { long paused_time = getCurrentTimeMilli(); handler.removeCallbacksAndMessages(null); Iterator it = opennotes.entrySet().iterator(); while (it.hasNext()) { Map.Entry pair = (Map.Entry)it.next(); keyboard_.onNote((Integer)pair.getKey(), (Integer)pair.getValue()); synthMidi_.onNoteOff(0, (Integer)pair.getKey(), (Integer)pair.getValue()); it.remove(); // avoids a ConcurrentModificationException } for(int i=start_play;i<notescnt;i++) { m[i].setDur(m[i].getDur() - (int)(paused_time - first_current_time)); } } else if(resumed) { first_current_time = getCurrentTimeMilli(); Iterator it = opennotes.entrySet().iterator(); while (it.hasNext()) { Map.Entry pair = (Map.Entry)it.next(); keyboard_.onNote((Integer)pair.getKey(), (Integer)pair.getValue()); synthMidi_.onNoteOn(0, (Integer)pair.getKey(), (Integer)pair.getValue()); it.remove(); // avoids a ConcurrentModificationException } clicked = true; resumed = false; readFile(); } } catch (Exception e) { e.printStackTrace(); } } 	0	0	0	0	1	0
@Override public ItemStack getItemStackFromSlot(EntityEquipmentSlot slotIn) { return inventory[0]; } 	1	0	0	0	1	0
@Override public void setDead() { if (!worldObj.isRemote && !this.isDead) { if (blocks != null) { for (ItemStack[][] barrarr : blocks) { for (ItemStack[] barr : barrarr) for (ItemStack b : barr) { if (b != null) this.entityDropItem(b, 0.5f); } } if (inventory[0] != null) this.entityDropItem(inventory[0], 1); } } super.setDead(); } 	0	0	0	0	1	0
"protected void setContent(CheckedTextView view, int collectionIcon, ServerInfo.ResourceInfo info) { // set layout and icons view.setPadding(10, 10, 10, 10); view.setCompoundDrawablesWithIntrinsicBounds(collectionIcon, 0, info.isReadOnly() ? R.drawable.ic_read_only : 0, 0); view.setCompoundDrawablePadding(10);  // set text String title = info.getTitle(); if (title == null)		// unnamed collection title = context.getString((info.getType() == Type.ADDRESS_BOOK) ? R.string.setup_address_book : R.string.setup_calendar); title = ""<b>"" + title + ""</b>""; if (info.isReadOnly()) title = title + "" ("" + context.getString(R.string.setup_read_only) + "")"";  String description = info.getDescription(); if (description == null) description = info.getURL();  // FIXME escape HTML view.setText(Html.fromHtml(title + ""<br/>"" + description)); } "	0	0	0	0	1	0
public void dispose() { if (cmsProfileHandle != 0) { LCMS.cmsCloseProfile(cmsProfileHandle); cmsProfileHandle = 0; } } 	0	0	0	0	1	0
"public boolean isSubscriptionDiscarded() { return counterName.contains(""discarded""); } "	0	0	0	0	1	0
"protected void explain() { // Goal: force the failure to get the set of decisions related to the cut forceCft = false; // 1. make a backup mModel.getEnvironment().worldPush(); DecisionPath dp = mModel.getSolver().getDecisionPath(); int i = 0; try { assert mModel.getSolver().getDecisionPath().size() == 1; // 2. apply the decisions mModel.getSolver().getObjectiveManager().postDynamicCut(); for (i = mDecisionPath.size() - 1; i >= 0; i--) { dp.pushDecision(mDecisionPath.get(i).duplicate()); dp.apply(); mModel.getSolver().propagate(); } //mModel.propagate(); assert false : ""SHOULD FAIL!""; } catch (ContradictionException cex) { if ((cex.v != null) || (cex.c != null)) { // contradiction on domain wipe out  // 3. explain the failure Explanation explanation = mExplanationEngine.explain(cex); if (explanation.getDecisions().isEmpty()) { isTerminated = true; mModel.getEnvironment().worldPop(); mModel.getSolver().getEngine().flush(); return; }  related.clear(); related.or(explanation.getDecisions()); explanation.recycle();  unrelated.clear(); unrelated.or(related); unrelated.flip(0, i); unrelated.clear(0); // clear ROOT decision  // 4. remove all decisions above i in path while (i > 1) { mDecisionPath.remove(1); i--; }  } else { throw new UnsupportedOperationException(this.getClass().getName() + "".onContradiction incoherent state""); } } mModel.getEnvironment().worldPop(); dp.synchronize(); mModel.getSolver().getEngine().flush(); assert mModel.getSolver().getDecisionPath().size() == 1; nbFixedVariables = related.cardinality() - 1; nbCall = 0; increaseLimit();  } "	1	1	1	1	0	0
"private void checkUserChanged() { if (mEditUserAccount != null) { String username = mEditUserAccount.getText().toString().trim();  if ((!username.equals(mOriginalUserAccount)) && parseAccount(username)) { //Log.i(TAG, ""Username changed: "" + mOriginalUserAccount + "" != "" + username); settingsForDomain(mDomain, mPort); mOriginalUserAccount = username;  } }   } "	0	0	1	0	1	0
"@Test public void streamFromArray() { String[] array = { ""test"", ""testing"", ""tested"" }; Stream<String> stream = StreamUtils.stream(array);  assertThat(stream, is(notNullValue(Stream.class)));  List<String> list = stream.collect(Collectors.toList());  assertThat(list, is(notNullValue(List.class))); assertThat(list, is(equalTo(array.length))); assertThat(list.containsAll(Arrays.asList(array)), is(true)); } "	0	0	1	0	1	0
@Test public void streamFromEmptyIterable() { Stream<Object> stream = StreamUtils.stream(ArrayUtils.iterable());  assertThat(stream, is(notNullValue(Stream.class))); assertThat(stream.count(), is(equalTo(0))); } 	0	0	0	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);  ImageButton favButton = (ImageButton) findViewById(R.id.favoriteButton); favButton.setOnClickListener(this);  Button mapButton = (Button) findViewById(R.id.mapsbutton); mapButton.setOnClickListener(this); } 	0	0	1	1	1	0
@Override boolean shouldFlipSizes() { return mSensorOffset % 180 != 0; } 	0	0	0	0	1	0
private Optional<Attachment> getAttachment(Collection<Attachment> attachments, String id) { for (Attachment attachment : attachments) { if (attachment.getId().equals(id)) { return Optional.of(attachment); } }  return Optional.absent(); } 	0	0	0	1	0	0
"@Test public void demonstrateSimpleServerConnection() { { //#echo-server-simple-bind // IncomingConnection and ServerBinding imported from Tcp final Source<IncomingConnection, CompletionStage<ServerBinding>> connections = Tcp.get(system).bind(""127.0.0.1"", 8889); //#echo-server-simple-bind } {  final InetSocketAddress localhost = SocketUtil.temporaryServerAddress(""127.0.0.1"", false); final Source<IncomingConnection, CompletionStage<ServerBinding>> connections = Tcp.get(system).bind(localhost.getHostString(), localhost.getPort());  //#echo-server-simple-handle connections.runForeach(connection -> { System.out.println(""New connection from: "" + connection.remoteAddress());  final Flow<ByteString, ByteString, NotUsed> echo = Flow.of(ByteString.class) .via(Framing.delimiter(ByteString.fromString(""\n""), 256, FramingTruncation.DISALLOW)) .map(ByteString::utf8String) .map(s -> s + ""!!!\n"") .map(ByteString::fromString);  connection.handleWith(echo, mat); }, mat); //#echo-server-simple-handle } } "	0	0	0	0	1	0
"private CharSequence generateGroupProperty(final String groupName, final Token token, final String indent) { final StringBuilder sb = new StringBuilder();  final String className = formatClassName(groupName); final String propertyName = formatPropertyName(groupName);  sb.append(String.format( ""\n"" + ""private:\n"" + indent + ""    %1$s %2$s_;\n\n"" + ""public:\n"", className, propertyName ));  sb.append(String.format( ""\n"" + indent + ""    static const int %1$sId(void)\n"" + indent + ""    {\n"" + indent + ""        return %2$d;\n"" + indent + ""    }\n\n"", groupName, Long.valueOf(token.id()) ));  sb.append(String.format( ""\n"" + indent + ""    %1$s &%2$s(void)\n"" + indent + ""    {\n"" + indent + ""        %2$s_.wrapForDecode(buffer_, positionPtr_, actingVersion_, bufferLength_);\n"" + indent + ""        return %2$s_;\n"" + indent + ""    }\n"", className, propertyName ));  sb.append(String.format( ""\n"" + indent + ""    %1$s &%2$sCount(const int count)\n"" + indent + ""    {\n"" + indent + ""        %2$s_.wrapForEncode(buffer_, count, positionPtr_, actingVersion_, bufferLength_);\n"" + indent + ""        return %2$s_;\n"" + indent + ""    }\n"", className, propertyName ));  return sb; } "	0	0	1	0	0	0
"private CharSequence generateVarData(final List<Token> tokens) { final StringBuilder sb = new StringBuilder();  for (int i = 0, size = tokens.size(); i < size; i++) { final Token token = tokens.get(i); if (token.signal() == Signal.BEGIN_VAR_DATA) { final String propertyName = toUpperFirstChar(token.name()); final String characterEncoding = tokens.get(i + 3).encoding().characterEncoding(); final Token lengthToken = tokens.get(i + 2); final Integer sizeOfLengthField = Integer.valueOf(lengthToken.size()); final String lengthCpp98Type = cpp98TypeName(lengthToken.encoding().primitiveType());  generateFieldMetaAttributeMethod(sb, token, BASE_INDENT);  generateVarDataDescriptors( sb, token, propertyName, characterEncoding, lengthToken, sizeOfLengthField, lengthCpp98Type);  sb.append(String.format( ""    const char *%1$s(void)\n"" + ""    {\n"" + ""%2$s"" + ""         const char *fieldPtr = (buffer_ + position() + %3$d);\n"" + ""         position(position() + %3$d + *((%4$s *)(buffer_ + position())));\n"" + ""         return fieldPtr;\n"" + ""    }\n\n"", formatPropertyName(propertyName), generateTypeFieldNotPresentCondition(token.version(), BASE_INDENT), sizeOfLengthField, lengthCpp98Type ));  sb.append(String.format( ""    int get%1$s(char *dst, const int length)\n"" + ""    {\n"" + ""%2$s"" + ""        sbe_uint64_t sizeOfLengthField = %3$d;\n"" + ""        sbe_uint64_t lengthPosition = position();\n"" + ""        position(lengthPosition + sizeOfLengthField);\n"" + ""        sbe_int64_t dataLength = %4$s(*((%5$s *)(buffer_ + lengthPosition)));\n"" + ""        int bytesToCopy = (length < dataLength) ? length : dataLength;\n"" + ""        sbe_uint64_t pos = position();\n"" + ""        position(position() + (sbe_uint64_t)dataLength);\n"" + ""        ::memcpy(dst, buffer_ + pos, bytesToCopy);\n"" + ""        return bytesToCopy;\n"" + ""    }\n\n"", propertyName, generateArrayFieldNotPresentCondition(token.version(), BASE_INDENT), sizeOfLengthField, formatByteOrderEncoding(lengthToken.encoding().byteOrder(), lengthToken.encoding().primitiveType()), lengthCpp98Type ));  sb.append(String.format( ""    int put%1$s(const char *src, const int length)\n"" + ""    {\n"" + ""        sbe_uint64_t sizeOfLengthField = %2$d;\n"" + ""        sbe_uint64_t lengthPosition = position();\n"" + ""        *((%3$s *)(buffer_ + lengthPosition)) = %4$s((%3$s)length);\n"" + ""        position(lengthPosition + sizeOfLengthField);\n"" + ""        sbe_uint64_t pos = position();\n"" + ""        position(position() + (sbe_uint64_t)length);\n"" + ""        ::memcpy(buffer_ + pos, src, length);\n"" + ""        return length;\n"" + ""    }\n"", propertyName, sizeOfLengthField, lengthCpp98Type, formatByteOrderEncoding(lengthToken.encoding().byteOrder(), lengthToken.encoding().primitiveType()) )); } }  return sb; } "	0	0	0	0	1	0
"private CharSequence generateChoices(final List<Token> tokens) { final StringBuilder sb = new StringBuilder();  for (final Token token : tokens) { if (token.signal() == Signal.CHOICE) { final String choiceName = toUpperFirstChar(token.name()); final String choiceBitPosition = token.encoding().constValue().toString(); final int choiceValue = (int)Math.pow(2, Integer.parseInt(choiceBitPosition)); sb.append(String.format(""        %s = %s,\n"", choiceName, Integer.valueOf(choiceValue))); } }  return sb; } "	1	0	1	0	1	0
"@DELETE @Path(""/types/{id}"") public Response deleteFirmwareType(@PathParam(""id"") int id) { DaoUtils.getFirmwareTypeDao().delete(id); return RestUtils.getResponse(Status.OK); } "	0	0	0	0	1	0
"@Test public void shouldFindApplicationWithGroup() throws Exception { Optional<Application> application = applicationRepository.findById(""grouped-app""); Assert.assertTrue(application.isPresent()); Assert.assertNotNull(application.get().getGroup()); Assert.assertEquals(""application-group"", application.get().getGroup()); } "	0	0	0	0	1	0
public static Printer t(String tag) { return printer.t(tag, DEFAULT_METHOD_COUNT); } 	0	0	0	0	1	0
"@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { LOG.info(getClass().getSimpleName() + "" - "" + ""Filter""); HttpServletRequest req = (HttpServletRequest) request; req.setCharacterEncoding(""UTF-8"");  String path = req.getRequestURI().substring( req.getContextPath().length()); if (path.endsWith("".jsp"")) ((HttpServletResponse) response).sendRedirect(""/home""); if (path.equals(""/"") ||path.startsWith(""/front/"") || path.startsWith(""/app/"") || path.startsWith(""/bower_components/"")) chain.doFilter(request, response); else request.getRequestDispatcher(""/front/"" + path).forward(request, response); } "	0	0	0	0	0	1
"private String getAccessToken(StaplerRequest request) { return (String) request.getSession().getAttribute(""access_token""); } "	0	0	0	1	0	0
"public void showWishList(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { HttpSession session = request.getSession(); if (session.getAttribute(""userId"") == null) { request.getRequestDispatcher(""/"").forward(request, response); } int userId = (Integer) session.getAttribute(""userId"");  //If there are publications to attach to the response, set an attribute with the results SqlHandler handler = new SqlHandler(); List<BookBean> wishedBooks = handler.getActiveUserWishes(userId);  request.setAttribute(""wishedBooks"", wishedBooks); request.getRequestDispatcher(""wishlist.jsp"").forward(request, response); } "	0	0	0	0	1	0
"public List<BarDrinkOrder> getDrinkOrdersByBarId(int bar_id) { try { return this.jdbcPostgres.query(""select drinkorder.id, blah, blah, blah from drinkorder left join drink on drink.id = drinkorder.drink_id where drinkorder.bar_id = ? order by drinkorder.time_placed"", new Object[] {id}, new BarDrinkOrderMapper()); } catch(Exception e) { log.info(""No drink orders found for bar id {}"", bar_id); return new ArrayList<BarDrinkOrder>(); } } "	0	0	1	0	1	0
"public IndexerJobStatus call() { indexerJobStatus.setJobStatus(IndexerJobStatusEnum.Started); while(!shutdownRequested){ try{ // check if there was a request to stop this thread - stop processing if so if (Thread.currentThread().isInterrupted()){ // preserve interruption state of the thread Thread.currentThread().interrupt(); throw new InterruptedException( ""Cought interrupted event in IndexerJob for partition="" + currentPartition + "" - stopping""); } logger.info(""******* Starting a new batch of events from Kafka for partition {} ..."", currentPartition); indexerJobStatus.setJobStatus(IndexerJobStatusEnum.InProgress); processBatch(); // sleep for configured time // TODO improve sleep pattern Thread.sleep(consumerConfig.consumerSleepBetweenFetchsMs * 1000); logger.debug(""Completed a round of indexing into ES for partition {}"",currentPartition); } catch (IndexerESException e) { indexerJobStatus.setJobStatus(IndexerJobStatusEnum.Failed); stopClients(); break; } catch (InterruptedException e) { indexerJobStatus.setJobStatus(IndexerJobStatusEnum.Stopped); stopClients(); break; } catch (Exception e){ logger.error(""Exception when starting a new round of kafka Indexer job for partition {} - will try to re-init Kafka "" , currentPartition, e); // try to re-init Kafka connection first - in case the leader for this partition // has changed due to a Kafka node restart and/or leader re-election try { this.reInitKafka(); } catch (Exception e2) { // we still failed - do not keep going anymore - stop and fix the issue manually, // then restart the consumer again; It is better to monitor the job externally // via Zabbix or the likes - rather then keep failing [potentially] forever logger.error(""Exception when starting a new round of kafka Indexer job, partition {}, exiting: "" + e2.getMessage(), currentPartition); indexerJobStatus.setJobStatus(IndexerJobStatusEnum.Failed); stopClients(); break; } } } logger.warn(""******* Indexing job was stopped, indexerJobStatus={} - exiting"", indexerJobStatus); return indexerJobStatus; } "	0	0	1	0	1	0
"@Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) { if (mHasBeenProcessed) { return true; }  String packageName = processingEnv.getOptions().get(OPTION_PACKAGE_NAME); if (packageName == null || packageName.isEmpty()) { packageName = DEFAULT_GENERATED_PACKAGE_NAME; }  TypeUtils.initialize(processingEnv.getTypeUtils()); ElementUtils.initialize(processingEnv.getElementUtils());  DebugLog.log(""\nBeginning @UseStag annotation processing\n"");  mHasBeenProcessed = true; Map<Element, List<VariableElement>> variableMap = new HashMap<>();  Set<? extends Element> rootElements = roundEnv.getRootElements(); for (Element rootElement : rootElements) { if (rootElement.getAnnotation(UseStag.class) != null) { List<? extends Element> enclosedElements = rootElement.getEnclosedElements(); for (Element enclosedElement : enclosedElements) { if (enclosedElement instanceof VariableElement) { final VariableElement variableElement = (VariableElement) enclosedElement; Element enclosingElement = variableElement.getEnclosingElement(); if (!ElementUtils.isEnum(enclosingElement) && !TypeUtils.isAbstract(enclosingElement)) { Set<Modifier> modifiers = variableElement.getModifiers(); TypeMirror enclosingClass = enclosingElement.asType(); if (TypeUtils.isParameterizedType(enclosingClass) || TypeUtils.isConcreteType(enclosingClass)) { if(!modifiers.contains(Modifier.FINAL) || !modifiers.contains(Modifier.STATIC)) { if (!TypeUtils.isAbstract(enclosingElement)) { checkModifiers(variableElement, modifiers); mSupportedTypes.add(enclosingClass); } addToListMap(variableMap, enclosingElement, variableElement); } } } } else if (enclosedElement instanceof TypeElement) { if (!ElementUtils.isEnum(enclosedElement)) { if(!TypeUtils.isAbstract(enclosedElement)) { mSupportedTypes.add(enclosedElement.asType()); } addToListMap(variableMap, enclosedElement, null); } } } } }  for (Element element : roundEnv.getElementsAnnotatedWith(UseStag.class)) { if (element instanceof VariableElement) { final VariableElement variableElement = (VariableElement) element;  Element enclosingClassElement = variableElement.getEnclosingElement(); TypeMirror enclosingClass = enclosingClassElement.asType();  if (!ElementUtils.isEnum(enclosingClassElement)) { Set<Modifier> modifiers = variableElement.getModifiers(); if (modifiers.contains(Modifier.FINAL)) { throw new RuntimeException(""Unable to access field \"""" + variableElement.getSimpleName().toString() + ""\"" in class "" + variableElement.getEnclosingElement().asType() + "", field must not be final.""); } else if (modifiers.contains(Modifier.PRIVATE)) { throw new RuntimeException(""Unable to access field \"""" + variableElement.getSimpleName().toString() + ""\"" in class "" + variableElement.getEnclosingElement().asType() + "", field must not be private.""); }  if (TypeUtils.isParameterizedType(enclosingClass) || TypeUtils.isConcreteType(enclosingClass)) { if(!TypeUtils.isAbstract(enclosingClassElement)) { mSupportedTypes.add(enclosingClass); } addToListMap(variableMap, enclosingClassElement, variableElement); } } } else if (element instanceof TypeElement) { if (!ElementUtils.isEnum(element)) { if(!TypeUtils.isAbstract(element)) { mSupportedTypes.add(element.asType()); } addToListMap(variableMap, element, null); } } }  Filer filer = processingEnv.getFiler(); try { for (Entry<Element, List<VariableElement>> entry : variableMap.entrySet()) { SupportedTypesModel.getInstance() .addSupportedType(new AnnotatedClass(entry.getKey(), entry.getValue())); } mSupportedTypes.addAll(KnownTypeAdapterFactoriesUtils.loadKnownTypes(processingEnv, packageName));  StagGenerator adapterGenerator = new StagGenerator(packageName, filer, mSupportedTypes); TypeTokenConstantsGenerator typeTokenConstantsGenerator = new TypeTokenConstantsGenerator(filer, packageName);  Set<Element> list = SupportedTypesModel.getInstance().getSupportedElements(); for (Element element : list) { if ((TypeUtils.isConcreteType(element) || TypeUtils.isParameterizedType(element)) && !TypeUtils.isAbstract(element)) { ClassInfo classInfo = new ClassInfo(element.asType()); TypeAdapterGenerator independentAdapter = new TypeAdapterGenerator(classInfo); JavaFile javaFile = JavaFile.builder(classInfo.getPackageName(), independentAdapter.getTypeAdapterSpec(typeTokenConstantsGenerator, adapterGenerator)).build(); FileGenUtils.writeToFile(javaFile, filer); } } adapterGenerator.generateTypeAdapterFactory(packageName);  typeTokenConstantsGenerator.generateTypeTokenConstants(); KnownTypeAdapterFactoriesUtils.writeKnownTypes(processingEnv, packageName, mSupportedTypes); } catch (IOException e) { throw new RuntimeException(e); }  DebugLog.log(""\nSuccessfully processed @UseStag annotations\n"");  return true; } "	1	0	1	0	0	0
"@Before public void setUp() { this.setUpBootstrapData();  firstOrder = addOrder(UUID.randomUUID(), facility, period1, ""orderCode"", UUID.randomUUID(), INITIAL_USER_ID, facility, facility, facility, OrderStatus.ORDERED, new BigDecimal(""1"" + "".29""), UUID.randomUUID());  secondOrder = addOrder(UUID.randomUUID(), facility2, period1, ""O2"", program1, INITIAL_USER_ID, facility2, facility2, facility1, OrderStatus.RECEIVED, new BigDecimal(100), UUID.randomUUID());  thirdOrder = addOrder(UUID.randomUUID(), facility2, period2, ""O3"", program2, INITIAL_USER_ID, facility2, facility2, facility1, OrderStatus.RECEIVED, new BigDecimal(200), UUID.randomUUID());  addOrderLineItem(secondOrder, product1, 35L, 50L);  addOrderLineItem(secondOrder, product2, 10L, 15L);  addOrderLineItem(thirdOrder, product1, 50L, 50L);  addOrderLineItem(thirdOrder, product2, 5L, 10L);  OrderLineItem orderLineItem = addOrderLineItem(firstOrder, product1, 35L, 50L);  List<OrderLineItem> orderLineItems = new ArrayList<>(); orderLineItems.add(orderLineItem); firstOrder.setOrderLineItems(orderLineItems); firstOrder.setExternalId(secondOrder.getExternalId());  given(orderRepository.findAll()).willReturn( Lists.newArrayList(firstOrder, secondOrder, thirdOrder) );  given(orderRepository.save(any(Order.class))) .willAnswer(new SaveAnswer<Order>() {  @Override void extraSteps(Order obj) { obj.setCreatedDate(LocalDateTime.now()); }  }); } "	0	0	1	1	0	0
@Override public void run(Configuration configuration, Environment environment) { final UserApi userApi = new UserApi(); final BookApi bookApi = new BookApi(); final MailApi mailApi = new MailApi(); final ProfileApi profileApi = new ProfileApi();  userApi.setDao(Constant.dbi.onDemand(UserDao.class), Constant.dbi.onDemand(BookDao.class)); bookApi.setDao(Constant.dbi.onDemand(BookDao.class), Constant.dbi.onDemand(UserDao.class)); profileApi.setDao(Constant.dbi.onDemand(ProfileDao.class), Constant.dbi.onDemand(BookDao.class));  mailApi.initMail(); userApi.setMailApi(mailApi);  environment.jersey().register(userApi); environment.jersey().register(bookApi); environment.jersey().register(mailApi); environment.jersey().register(profileApi); } 	0	0	0	0	1	0
"@Override public synchronized void subscribe(Subscriber<? super T> subscriber) { checkClosed(); Objects.requireNonNull(subscriber);  SubscriptionImpl sub = new SubscriptionImpl(subscriber); if (subscriptions.add(sub)) { ctx.runOnContext(v -> { try { subscriber.onSubscribe(sub); } catch (Throwable t) { subscriber.onError(t); } }); } else { throw new IllegalStateException(""1.10 Cannot subscribe multiple times with the same subscriber.""); } } "	0	0	0	0	1	0
"public static Scholarship findOrCreateFromJson(Scholarship new_schol) { int scholId = new_schol.getiD();  Scholarship existingSchol = new Select().from(Scholarship.class).where(""scholId = ?"", scholId).executeSingle();  if (existingSchol != null) { // found and return existing return existingSchol; }  else { // create and return new user Scholarship schol = new_schol ; schol.save(); return schol; } } "	0	0	0	0	1	0
"@HandlesEvent(""DataMapFields"") public Resolution mapFields() { Map<String, String> errors = new HashMap<>(); if (SecurityUtil.isAdminUser()) { LOG.log(Level.INFO, SecurityUtil.adminAuditLogMessage(getContext().getRequest()));  List<FieldDefinition> fieldDefinitions = new ArrayList<>();  try (InputStream in = uploadFile.getInputStream()) { fieldDefinitions = service.getImportService().getMapField(fileFormat, in); } catch (IOException ex) { errors.put(""uploadFile"", ""Unable to read file: "" + uploadFile.getFileName() + "" Make sure the file in the proper format.""); } finally { try { uploadFile.delete(); } catch (IOException ex) { LOG.log(Level.WARNING, ""Unable to remove temp upload file."", ex); } }  return streamResults(fieldDefinitions); }  return new ErrorResolution(HttpServletResponse.SC_FORBIDDEN, ""Access denied""); } "	0	0	0	0	1	0
"@Override public String toString() { return ""AlarmInfo{"" + ""level='"" + level + '\'' + "", name='"" + name + '\'' + "", title='"" + title + '\'' + "", message='"" + message + '\'' + "", addtionalInfo="" + constructMapContent(customFields) + '}'; } "	0	0	0	0	0	1
public String getStagingPartitionLocation() { return getStagingTableLocation() + getName(); } 	0	0	0	0	1	0
"private JsonObject doUploadBuildArchivePost(CloseableHttpClient httpclient, String apiKey, File archive, String buildName) throws ClientProtocolException, IOException{ String newBuildURL = getBuildsURL() + ""?build_name="" + buildName; HttpPost httppost = new HttpPost(newBuildURL); httppost.addHeader(""accept"", ContentType.APPLICATION_JSON.getMimeType()); httppost.addHeader(""Authorization"", apiKey);  FileBody archiveBody = new FileBody(archive, ContentType.create(""application/zip""));  HttpEntity reqEntity = MultipartEntityBuilder.create() .addPart(archive.getName(), archiveBody).build();  httppost.setEntity(reqEntity); JsonObject jso = RestUtils.getGsonResponse(httpclient, httppost); return jso; } "	0	0	0	0	1	0
@Override public boolean onOptionsItemSelected(final MenuItem item) { if (item.getItemId() != android.R.id.home) { return super.onOptionsItemSelected(item); }  final FragmentManager fragmentManager = getSupportFragmentManager();  if (UiUtils.tryForeachFragment(fragmentManager, fragment -> fragment.onHomePressed(this), true)) { return true; }  if (fragmentManager.getBackStackEntryCount() != 0) { fragmentManager.popBackStack(); return true; } return false; } 	0	0	0	0	1	0
"public IInterpreterProvider[] getInterpreterProviders(InterpreterType type) { if (type != IInterpreterProviderFactory.InterpreterType.PYTHON) { return null; }  Set<String> pathsToSearch = new HashSet<String>(); if (!PlatformUtils.isWindowsPlatform()) { pathsToSearch.add(""/usr/bin""); pathsToSearch.add(""/usr/local/bin""); final String[] ret = searchPaths(pathsToSearch, ""python""); if (ret.length > 0) { return AlreadyInstalledInterpreterProvider.create(""python"", ret); } } else { // On windows we can try to see the installed versions... List<String> foundVersions = new ArrayList<String>(); try { Regor regor = new Regor();  // The structure for Python is something as // Software\\Python\\PythonCore\\2.6\\InstallPath for (Key root : new Key[] { Regor.HKEY_LOCAL_MACHINE, Regor.HKEY_CURRENT_USER }) { Key key = regor.openKey(root, ""Software\\Python\\PythonCore"", Regor.KEY_READ); if (key != null) { try { @SuppressWarnings(""rawtypes"") List l = regor.listKeys(key); for (Object o : l) { Key openKey = regor.openKey(key, (String) o + ""\\InstallPath"", Regor.KEY_READ); if (openKey != null) { try { byte buf[] = regor.readValue(openKey, """"); if (buf != null) { String parseValue = Regor.parseValue(buf); // Ok, this should be the directory // where it's installed, try to find // a 'python.exe' there... File file = new File(parseValue, ""python.exe""); if (file.isFile()) { foundVersions.add(file.toString()); } } } finally { regor.closeKey(openKey); } } } } finally { regor.closeKey(key); } } }  } catch (Throwable e) { Log.log(e); } if (foundVersions.size() > 0) { return AlreadyInstalledInterpreterProvider.create(""python"", foundVersions.toArray(new String[foundVersions.size()])); } }  // This should be enough to find it from the PATH or any other way it's // defined. return AlreadyInstalledInterpreterProvider.create(""python"", ""python""); } "	0	0	0	1	1	0
"protected Button createButton(Composite parent, int id, String label, boolean defaultButton) { Button button = super.createButton(parent, id, label, defaultButton); if (id == IDialogConstants.OK_ID) { okButton = button; okButton.setText(Policy.bind(""MergeDialog.title"")); //$NON-NLS-1$ okButton.setEnabled(false); } return button; } "	0	0	0	0	1	0
"public void runCronScripts() { if (System.currentTimeMillis() - lastCronCheck >= CRON_CHECK_INTERVAL) { lastCronCheck = System.currentTimeMillis(); for (Entry<String, List<String>> script : scripts.get(""cron"").entrySet()) { List<String> lines = new ArrayList<>(script.getValue()); if (lines.size() < 2) continue; String cronDef = lines.remove(0); if (!checkCron(script.getKey(), cronDef)) continue; try { cronTimes.put(script.getKey(), System.currentTimeMillis()); ScriptParser.run(lines, MinecraftServer.getServer()); break; } catch (CommandException | ScriptErrorException e) { if (e.getMessage() != null && !e.getMessage().isEmpty()) ChatOutputHandler.chatError(MinecraftServer.getServer(), e.getMessage()); } catch (ScriptException e) { LoggingHandler.felog.error(String.format(""Error in script \""%s\"": %s"", script.getKey(), e.getMessage())); } } } } "	0	0	0	0	0	1
private GitHubApi getVersion(GitHubApi[] releaseArray, String version) { GitHubApi out = null; for (GitHubApi release : releaseArray) { if (release.getName().equalsIgnoreCase(version)) { out = release; break; } } return out; } 	0	0	1	0	1	0
@Override public Bitmap applyEffect(Bitmap src) { Bitmap bmOut = Bitmap.createBitmap(src.getWidth(), src.getHeight(), src.getConfig());  RenderScript rs = RenderScript.create(EditActivity.sContext);  Allocation allocationIn = Allocation.createFromBitmap(rs, src); Allocation allocationOut = Allocation.createTyped(rs, allocationIn.getType());  ScriptC_PixelateFilter filter = new ScriptC_PixelateFilter(rs); filter.set_gIn(allocationIn); filter.set_gOut(allocationOut); filter.set_gSquareSize(15); filter.invoke_filter();  allocationOut.copyTo(bmOut);  rs.destroy(); allocationIn.destroy(); allocationOut.destroy(); filter.destroy();  return bmOut; } 	0	0	0	0	1	0
"@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View rootView = inflater.inflate(R.layout.fragment_add_offer, container, false);  rootView.setOnTouchListener(new View.OnTouchListener() { @Override public boolean onTouch(View v, MotionEvent event) {  final InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE); imm.hideSoftInputFromWindow(getView().getWindowToken(), 0);  return false; } });  final Spinner spinnerCategory = (Spinner)rootView.findViewById(R.id.spinner_category); final Spinner spinnerCondition = (Spinner)rootView.findViewById(R.id.spinner_condition); final EditText editTitle = (EditText)rootView.findViewById(R.id.edit_titleListing); final EditText editDescription = (EditText)rootView.findViewById(R.id.edit_description); final EditText editPrice = (EditText)rootView.findViewById(R.id.edit_price); final EditText editZip = (EditText)rootView.findViewById(R.id.edit_zip); textCityName=(TextView)rootView.findViewById(R.id.text_city);   //adding all categories in list. List<String> categories = new ArrayList<>(); categories.add(Constants.Array_Category_Automobiles); categories.add(Constants.Array_Category_Books); categories.add(Constants.Array_Category_Laptops); categories.add(Constants.Array_Category_Furniture); categories.add(Constants.Array_Category_Rentals);  //adding type whether used or new to list. List<String> conditions = new ArrayList<>(); conditions.add(Constants.ITEM_TYPE_NEW); conditions.add(Constants.ITEM_TYPE_USED);    //Creating and setting adapter to array of categories required in spinner. ArrayAdapter<String> adapterCategories = new ArrayAdapter<>(this.getActivity(), android.R.layout.simple_spinner_item, categories); adapterCategories.setDropDownViewResource(android.R.layout.simple_dropdown_item_1line); spinnerCategory.setAdapter(adapterCategories);  //Creating and setting adapter to array of conditions required in spinner. ArrayAdapter<String> adapterConditions = new ArrayAdapter<>(this.getActivity(), android.R.layout.simple_spinner_item, conditions); adapterConditions.setDropDownViewResource(android.R.layout.simple_dropdown_item_1line); spinnerCondition.setAdapter(adapterConditions);  if (isOfferEditable){  spinnerCategory.setSelection(categoryPosition); spinnerCondition.setSelection(updateSpinnerCondition.equals(""New"") ? 0 : 1); editTitle.setText(updateEditTitle); editDescription.setText(updateEditDescription); editPrice.setText(updateEditPrice); editZip.setText(updateEditZip); textCityName.setText(updateTextCityName);  }  Button buttonNext = (Button)rootView.findViewById(R.id.button_next);  buttonNext.setOnClickListener(new View.OnClickListener() {  //  Fragment fragment = null; String title;  @Override public void onClick(View v) {  title = getString(R.string.app_name);  offerDTO = new OfferDTO();  offerDTO.setOfferTitle(editTitle.getText().toString().trim()); offerDTO.setOfferDescription(editDescription.getText().toString().trim()); offerDTO.setPrice(Double.parseDouble(editPrice.getText().toString().trim())); offerDTO.setZip(editZip.getText().toString().trim()); offerDTO.setCategoryId(getCategoryId(spinnerCategory.getSelectedItem().toString())); offerDTO.setCondition(spinnerCondition.getSelectedItem().toString()); offerDTO.setOfferorName((String) ParseUser.getCurrentUser().get(""firstname""));  progress = new ProgressDialog(getActivity()); progress.setProgressStyle(ProgressDialog.STYLE_SPINNER); progress.setIndeterminate(true); progress.show();  //fetching the value of city from server by providing the zip code. DBAccessor.getInstance().getUpdatedCityForZip(editZip.getText().toString().trim(), context);     } });    // Inflate the layout for this fragment return rootView; } "	1	0	1	0	0	0
"public void setArgumentsForUpdate(ParseObject itemObject){  isOfferEditable=true; String categoryID = (String)itemObject.get(""category_id""); updateSpinnerCategory = getCategoryName(categoryID); updateSpinnerCondition = (String)itemObject.get(""condition""); updateEditTitle = (String)itemObject.get(""offer_title""); updateEditDescription=(String)itemObject.get(""offer_description""); updateEditPrice=(String)itemObject.get(""price""); updateEditZip=(String)itemObject.get(""zipcode""); updateTextCityName=(String)itemObject.get(""city""); editableObject=itemObject;  } "	0	0	0	0	1	0
"public static void main(String[] args) throws Exception { DebugClient.disableReadTimeoutHandler(ReadTimeoutHandler.class);  // Start server SpongeVanillaLauncher.main(new String[0]);  // Start client in separate class loader so the classes don't conflict List<URL> urls = new ArrayList<>(Arrays.asList(Launch.classLoader.getURLs())); urls.removeIf(url -> url.getFile().contains(""serverSrc""));  URLClassLoader loader = new DebugClientClassloader(urls.toArray(new URL[urls.size()])); Class<?> main = Class.forName(""org.spongepowered.server.client.DebugClientLauncher"", false, loader); main.getMethod(""main"", String[].class).invoke(null, (Object) args); } "	0	0	0	0	1	0
"public Set<AccessControlledResource.Priviledge> directPrivs(Object curUser, AnnoResource res, Auth auth) { Set<AccessControlledResource.Priviledge> acl = EnumSet.allOf(Priviledge.class);; Object source = res.getSource(); List<ControllerMethod> availMethods = getMethods(source.getClass()); if (availMethods.isEmpty()) { log.warn(""No ACL methods were found""); return null; } else { try { for (ControllerMethod cm : availMethods) { addPrivsFromMethod(cm.method, cm.controller, acl, curUser, res, auth); } } catch (Exception e) { throw new RuntimeException(e); } } return acl; } "	0	0	1	0	1	0
public boolean closeAccount(String name) { Account acc = accountMap.get(name); if (acc == null) { return false; } acc.setState(State.CLOSED); return true; } 	0	0	0	0	1	0
@Test public void numberOfConvertibleCharacters() { assertEquals(1, CharacterConverter.values().length); } 	0	0	0	0	1	0
"@Override public boolean connect() throws UnknownHostException, IOException, ConnectException{ try{ client = new Client(address, port); } catch (ConnectException e) { System.out.println(""Connection refused!""); return false; } logger.info(""Client trying to connect...""); client.addListener(this); //client.start(); //wait for ""connection successful"" response KVMessage response = client.getResponse(); if (response != null){ logger.info(""KVStore: received response ""+response.getMsg()); connected = true; return true; } return false; } "	0	0	0	0	1	0
public final void assertCount( Matcher<? extends Event> matcher, Matcher<Integer> count ) { synchronized ( events ) { assertThat( events, (Matcher) count( matcher, count ) ); } } 	0	0	0	0	1	0
public static long getEndMs(JobRequest request) { return request.getEndMs() + request.getBackoffOffset(); } 	0	0	0	0	1	0
public static String toStringWithhiddenAfter( final ParserRuleContext aParseTreeRoot, final TokenStream aTokenStream ) { final StringBuilder builder = new StringBuilder();  print(builder, aParseTreeRoot, aTokenStream ); // there are no hidden tokens after the last token  return builder.toString(); } 	0	0	1	0	1	0
"@Override public void onEntityCollidedWithBlock(World world, BlockPos pos, IBlockState state, Entity entity) { //Ignore non players and fake players if (!(entity instanceof EntityPlayer) || (entity instanceof FakePlayer)) { return; }  TileEntity tileEntity = world.getTileEntity(pos); if (tileEntity instanceof TileEntityDualVertical) { TileEntityDualVertical dualVertical = (TileEntityDualVertical) tileEntity; if (dualVertical.top) { TileEntity tileEntityPair = world.getTileEntity(pos.down()); if (tileEntityPair instanceof TileEntityDualVertical) { this.onEntityCollidedWithBlock(world, pos.down(), state, entity); } } else { if (dualVertical instanceof TileEntityShellStorage) { TileEntityShellStorage shellStorage = (TileEntityShellStorage) dualVertical; if (!shellStorage.occupied && !world.isRemote && !shellStorage.syncing && shellStorage.resyncPlayer <= -10) { double d3 = entity.posX - (pos.getX() + 0.5D); double d4 = entity.getEntityBoundingBox().minY - pos.getY(); double d5 = entity.posZ - (pos.getZ() + 0.5D); double dist = (double) MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);  if (dist < 0.3D && shellStorage.isPowered()) { EntityPlayer player = (EntityPlayer)entity;  if (iChunUtil.hasMorphMod() && MorphApi.getApiImpl().hasMorph(player.getName(), Side.SERVER)) { player.sendMessage(new TextComponentTranslation(""sync.isMorphed"")); } else { Sync.channel.sendTo(new PacketPlayerEnterStorage(pos), player); player.setLocationAndAngles(pos.getX() + 0.5D, pos.getY(), pos.getZ() + 0.5D, shellStorage.face.getOpposite().getHorizontalAngle(), 0F); }  //Mark this as in use shellStorage.setPlayerName(player.getName()); shellStorage.occupied = true; notifyThisAndAbove(state, EnumType.STORAGE, pos, world, dualVertical.top); } } } } } } "	0	0	0	0	1	0
"@Override public NBTTagCompound writeToNBT(NBTTagCompound tag) { tag = super.writeToNBT(tag); tag.setBoolean(""top"", top); tag.setInteger(""face"", face.getHorizontalIndex()); tag.setBoolean(""vacating"", vacating); tag.setBoolean(""isHomeUnit"", isHomeUnit); tag.setString(""playerName"", canSavePlayer > 0 ? """" : playerName); tag.setString(""name"", name); tag.setTag(""playerNBT"", canSavePlayer > 0 ? new NBTTagCompound() : playerNBT); tag.setInteger(""rfIntake"", rfIntake); return tag; } "	0	0	0	0	1	0
"private void initCookie(final Cookie cookie, final HttpServletRequest req) { final String context = req.getContextPath(); cookie.setPath(null == context ? ""/"" : context); if (maxAge != null) { cookie.setMaxAge(Integer.parseInt(maxAge)); } } "	0	0	0	1	0	0
@Override protected ItemReview.DAO reviewAccessor() { return new ItemReviewDAO(this); } 	0	0	1	1	0	0
@Override protected Item.DAO itemAccessor() { return new ItemDAO(this); } 	0	0	1	1	0	0
"@Test public void treeCacheEvent() throws Exception { String zkPath = ""/fabric/registry/clusters/test""; ServiceMap serviceMap = new ServiceMap(); CuratorFramework curator = mock(CuratorFramework.class); GatewayServiceTreeCache cache = new GatewayServiceTreeCache(curator, zkPath, serviceMap);  String path = ""/fabric/registry/clusters/test/default"";  // Add container1 - master // Add container2 - slave cache.treeCacheEvent(event(path, CHILD_ADDED, data(""test"", ""container1"", ""service1"", ""service2""))); cache.treeCacheEvent(event(path, CHILD_ADDED, data(""test"", ""container2"")));  assertEquals(1, serviceMap.getServices(""default"").size());  // Remove container1 // Update container2 - master // Add container1 - slave cache.treeCacheEvent(event(path, CHILD_REMOVED, data(""test"", ""container1"", ""service1"", ""service2""))); cache.treeCacheEvent(event(path, CHILD_UPDATED, data(""test"", ""container2"", ""service1"", ""service2""))); cache.treeCacheEvent(event(path, CHILD_ADDED, data(""test"", ""container1"")));  assertEquals(1, serviceMap.getServices(""default"").size());  // Remove container2 // Update container1 - master // Add container2 - slave cache.treeCacheEvent(event(path, CHILD_REMOVED, data(""test"", ""container2"", ""service1"", ""service2""))); cache.treeCacheEvent(event(path, CHILD_UPDATED, data(""test"", ""container1"", ""service1"", ""service2""))); cache.treeCacheEvent(event(path, CHILD_ADDED, data(""test"", ""container2"")));  assertEquals(1, serviceMap.getServices(""default"").size());  // Remove container2 // Add container2 - slave cache.treeCacheEvent(event(path, CHILD_REMOVED, data(""test"", ""container2""))); cache.treeCacheEvent(event(path, CHILD_ADDED, data(""test"", ""container2"")));  assertEquals(1, serviceMap.getServices(""default"").size()); } "	0	0	0	0	1	0
public static void setMenuMnemsInside(JMenu menu) { JMenuItem[] items = new JMenuItem[menu.getItemCount()]; for (int i = 0; i < items.length; i++) { items[i] = menu.getItem(i); } setMenuMnemonics(items); } 	0	0	0	1	0	0
public static void setMenuMnemonics(JPopupMenu menu) { ArrayList<JMenuItem> items = new ArrayList<JMenuItem>();  for (Component c : menu.getComponents()) { if (c instanceof JMenuItem) items.add((JMenuItem)c); } setMenuMnemonics(items.toArray(new JMenuItem[items.size()])); } 	0	0	1	1	0	0
public IBeanController getBeanService() { return beanService; } 	0	0	1	1	0	0
@Test public void testGetNextPositionTestSlightlyRestricted() { Level check = new Level(emptyPlayer, emptyUnit, new Grid<>(Arrays.asList( Cell.WALL, Cell.WALL, Cell.WALL, Cell.WALL, Cell.EMPTY, Cell.WALL, Cell.WALL, Cell.EMPTY, Cell.WALL, Cell.WALL, Cell.WALL, Cell.WALL), 3, 4)); CollisionComputer handler = new CollisionComputer(check); Player player = new Player(new Point(1, 1), null); player.setMotion(new Point(0, 3 * GameConstants.TICKS_PER_SEC)); Point c = handler.findNextPosition(player); assertEquals(new Point(1, 2), c); } 	0	0	0	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);  mFragmentManager = getSupportFragmentManager();  MeteoriteListFragment meteoriteListFragment = new MeteoriteListFragment(); mFragmentManager.beginTransaction() .add(R.id.fragment_container, meteoriteListFragment) .commit(); } 	0	0	1	0	0	0
"@Override public String getJson(Activity context) { SharedPreferences prefs = context.getSharedPreferences(""com.example.talizorah.finalapp"", context.MODE_PRIVATE); Loader loader = new Loader(); loader.setActivity(context); loader.execute(""https://api.privatbank.ua/p24api/infrastructure?json&atm&address=%D0%BF%D0%BE%D0%B1%D0%B5%D0%B4%D1%8B&city=%D0%9A%D0%BE%D0%BD%D1%81%D1%82%D0%B0%D0%BD%D1%82%D0%B8%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0"", prefsName);  return prefs.getString(prefsName, null); } "	0	0	0	0	1	0
public static String getAbility(String string) { for (String st: AbilityModuleManager.abilities) { if (st.equalsIgnoreCase(string)) return st; } return null; } 	0	0	0	0	1	0
"@Override public void onEnable() { plugin = this; ProjectKorra.log = this.getLogger(); try { handler = new PKLogHandler(getDataFolder() + File.separator + ""ERROR.log""); log.getParent().setFilter(new LogFilter()); log.getParent().addHandler(handler); } catch (SecurityException | IOException e) { e.printStackTrace(); } new ConfigManager(this); new GeneralMethods(this); updater = new Updater(this, ""http://projectkorra.com/forum/forums/dev-builds.16/index.rss""); new Commands(this); new AbilityModuleManager(this); new MultiAbilityModuleManager(); new MultiAbilityManager(); new ComboModuleManager(); new ComboManager(); new ChiComboManager(); new CraftingRecipes(this);  DBConnection.host = getConfig().getString(""Storage.MySQL.host""); DBConnection.port = getConfig().getInt(""Storage.MySQL.port""); DBConnection.pass = getConfig().getString(""Storage.MySQL.pass""); DBConnection.db = getConfig().getString(""Storage.MySQL.db""); DBConnection.user = getConfig().getString(""Storage.MySQL.user""); DBConnection.init(); if (DBConnection.isOpen() == false) { //TODO: Log a proper message displaying database problem, pk will not function return; }  getServer().getPluginManager().registerEvents(new PKListener(this), this); getServer().getScheduler().scheduleSyncRepeatingTask(this, new BendingManager(this), 0, 1); getServer().getScheduler().scheduleSyncRepeatingTask(this, new AirbendingManager(this), 0, 1); getServer().getScheduler().scheduleSyncRepeatingTask(this, new WaterbendingManager(this), 0, 1); getServer().getScheduler().scheduleSyncRepeatingTask(this, new EarthbendingManager(this), 0, 1); getServer().getScheduler().scheduleSyncRepeatingTask(this, new FirebendingManager(this), 0, 1); getServer().getScheduler().scheduleSyncRepeatingTask(this, new ChiblockingManager(this), 0, 1); getServer().getScheduler().runTaskTimerAsynchronously(this, new RevertChecker(this), 0, 200);  for (Player player: Bukkit.getOnlinePlayers()) { GeneralMethods.createBendingPlayer(player.getUniqueId(), player.getName()); Preset.loadPresets(player); }  try { MetricsLite metrics = new MetricsLite(this); metrics.start(); } catch (IOException e) { e.printStackTrace(); }  GeneralMethods.deserializeFile(); GeneralMethods.startCacheCleaner(GeneralMethods.CACHE_TIME); updater.checkUpdate(); } "	1	1	1	0	0	0
public void init(SlowConsumerDetectionListener slowConsumerDetectionListener, long nativeId) throws Exception {  SimpleString selector = info.getSelector() == null ? null : new SimpleString(info.getSelector());  String physicalName = OpenWireUtil.convertWildcard(openwireDestination.getPhysicalName());  SimpleString address;  if (openwireDestination.isTopic()) { if (openwireDestination.isTemporary()) { address = new SimpleString(physicalName); } else { address = new SimpleString(physicalName); }  SimpleString queueName = createTopicSubscription(info.isDurable(), info.getClientId(), physicalName, info.getSubscriptionName(), selector, address);  serverConsumer = session.getCoreSession().createConsumer(nativeId, queueName, null, info.isBrowser(), false, -1); serverConsumer.setlowConsumerDetection(slowConsumerDetectionListener); } else { SimpleString queueName = new SimpleString(openwireDestination.getPhysicalName()); try { session.getCoreServer().createQueue(queueName, RoutingType.ANYCAST, queueName, null, true, false); } catch (ActiveMQQueueExistsException e) { // ignore } serverConsumer = session.getCoreSession().createConsumer(nativeId, queueName, selector, info.isBrowser(), false, -1); serverConsumer.setlowConsumerDetection(slowConsumerDetectionListener); AddressSettings addrSettings = session.getCoreServer().getAddressSettingsRepository().getMatch(queueName.toString()); if (addrSettings != null) { //see PolicyEntry if (info.getPrefetchSize() != 0 && addrSettings.getQueuePrefetch() == 0) { //sends back a ConsumerControl ConsumerControl cc = new ConsumerControl(); cc.setConsumerId(info.getConsumerId()); cc.setPrefetch(0); session.getConnection().dispatch(cc); } }  }  serverConsumer.setProtocolData(this); } 	0	0	0	0	1	0
public UserPoll createPoll(final UserPoll userPoll) throws ServiceException { boolean incrementStat = true; final UserPoll existingPoll = this.getUserPoll(userPoll);  // Fail safe approach if (Objects.nonNull(existingPoll)) { this.deleteUserPoll(existingPoll); this.optionsDao.decrementVoteCount(existingPoll.getOptionId()); incrementStat = false; } this.optionsDao.incrementVoteCount(userPoll.getOptionId()); if (incrementStat) { this.userStatDao.incrementVotedCount(userPoll.getUserId()); } return super.create(userPoll);  } 	0	0	0	0	1	0
@Test public void accessRules() { Set<AccessFile> accessFiles = new HashSet<>(); AccessRules rules = new AccessRules(accessFiles, ORDER, ALLOW, DENY); assertEquals(rules.getFiles(), accessFiles); assertEquals(rules.getAllow(), ALLOW); assertEquals(rules.getDeny(), DENY); assertEquals(rules.getOrder(), ORDER);  } 	0	0	0	0	1	0
"@Override public void configure(WebSecurity web) throws Exception { web.ignoring().antMatchers(""/webjars/**"", ""/styling/**"", ""/landing/**"",""/welcome/**"", ""/services/**""); } "	0	0	0	0	1	0
@Override public MapOrientation getOrientation() { return MapOrientation.valueOf(this.orientation); } 	0	0	0	0	1	0
"@Override public Void execute(CalculationTarget target, CalculationMarketData marketData) { // TODO Pass in the measure and include it in the error message throw new IllegalStateException(Messages.format( ""No rule configured for measure on ''"", target.getClass().getSimpleName())); } "	0	0	1	1	0	0
"private static ReportCalculationResults reportResults() { Measure measure = Measure.of(""Foo""); Column column = Column.of(measure); List<Column> columns = ImmutableList.of(column); List<? extends Result<?>> resultValues = ImmutableList.of( Result.success(CurrencyAmount.of(Currency.CAD, 2d)), Result.success(CurrencyAmount.of(Currency.AUD, 3d)), Result.success(CurrencyAmount.of(Currency.CHF, 4d))); List<Trade> trades = ImmutableList.of( trade(""cpty1"", 1_000_000), trade(""cpty2"", 10_000_000), trade(""cpty3"", 100_000_000)); Results results = Results.of(3, 1, resultValues); return ReportCalculationResults.of(LocalDate.now(ZoneOffset.UTC), trades, columns, results); } "	0	0	0	0	1	0
"private void buildJsonSchema() { List<ColumnConfig> columns = task.getColumns(); List<ColumnConfig> addColumns = task.getAddColumns(); List<ColumnConfig> dropColumns = task.getDropColumns();  int i = 0; if (dropColumns.size() > 0) { for (ColumnConfig dropColumn : dropColumns) { String name = dropColumn.getName(); // skip NON json path notation to build output schema if (! name.startsWith(""$."")) { continue; } jsonDropColumnsPut(name); } } else if (columns.size() > 0) { for (ColumnConfig column : columns) { String name = column.getName(); // skip NON json path notation to build output schema if (! name.startsWith(""$."")) { continue; } if (column.getSrc().isPresent()) { String src = column.getSrc().get(); jsonAddColumnsPut(name, new JsonColumn(name, null, null, src)); } else if (column.getType().isPresent() && column.getDefault().isPresent()) { // add column Type type = column.getType().get(); Value defaultValue = getDefault(task, name, type, column); jsonColumnsPut(name, new JsonColumn(name, type, defaultValue)); } else { Type type = column.getType().isPresent() ? column.getType().get() : null; jsonColumnsPut(name, new JsonColumn(name, type)); } } }  // Add columns to last. If you want to add to head or middle, you can use `columns` option if (addColumns.size() > 0) { for (ColumnConfig column : addColumns) { String name = column.getName(); // skip NON json path notation to build output schema if (! name.startsWith(""$."")) { continue; } if (column.getSrc().isPresent()) { String src = column.getSrc().get(); jsonAddColumnsPut(name, new JsonColumn(name, null, null, src)); } else if (column.getType().isPresent() && column.getDefault().isPresent()) { // add column Type type = column.getType().get(); Value defaultValue = getDefault(task, name, type, column); jsonAddColumnsPut(name, new JsonColumn(name, type, defaultValue)); } else { throw new SchemaConfigException(String.format(""add_columns: Column '%s' does not have \""src\"", or \""type\"" and \""default\"""", name)); } } } } "	1	0	0	0	0	0
"private Notification buildNotification(Context context, Event event){  TaskStackBuilder stackBuilder = TaskStackBuilder.create(context); // Adds the back stack for the Intent (but not the Intent itself) stackBuilder.addParentStack(TabActivity.class); // Adds the Intent that starts the Activity to the top of the stack Intent resultIntent = new Intent(context, TaskActivity.class); resultIntent.putExtra(TaskActivity.INTENT_PARAM_ID, event.getId()); stackBuilder.addNextIntent(resultIntent); PendingIntent resultPendingIntent = stackBuilder.getPendingIntent( 0, PendingIntent.FLAG_UPDATE_CURRENT ); //large Image for notification Bitmap largeIconBM = BitmapFactory.decodeResource(context.getResources(), R.drawable.ic_event_date);  //building actual Notification Notification.Builder notificationBuilder = new Notification.Builder(context) .setContentTitle(event.getName()) .setContentText(""Event in ""+event.getNotificationTime()+"" minutes!\r\n""+event.getDescription()) .setContentIntent(resultPendingIntent) .setSmallIcon(R.mipmap.ic_launcher) .setLargeIcon(largeIconBM);  Notification notification = notificationBuilder.build();  notification.flags = Notification.DEFAULT_LIGHTS | Notification.FLAG_AUTO_CANCEL;  //Sets sound and vibration to a notification notification.defaults = Notification.DEFAULT_VIBRATE |Notification.DEFAULT_SOUND;  return notification; } "	0	0	0	0	1	0
@Override public VectorWithOrdinal getVectorWithOrdinal(String name) { return vectorIds.get(name); } 	0	0	1	0	1	0
@Override protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception {  rawBuffer.writeBytes(msg.copy(), 0, msg.readableBytes());  Frame frame = null;  do { frame = decode();  if (frame != null) { resultCallback.onNext(frame); }  } while (frame != null); } 	1	0	1	1	1	0
"public void setup(TestContext out) { logger.debug(""Setup method was not implemented for ${out}""); } "	0	0	0	0	1	0
"public void runParallel(List<TestContext> contexts) { List<Thread> threads = new LinkedList<Thread>(); int failures = 0;  MutableInt mi = new MutableInt();  for(TestContext tc : contexts) { Thread t = new Thread(new TestRunner(this, tc, mi), tc.name); threads.add(t); t.start(); //threads.push(Thread.start(new TestRunner(this, tc, mi), tc.name)); }  for(Thread t : threads) { try { t.join(); } catch(Throwable e) { logger.error(t.toString()); } }  Assert.assertEquals(mi.intValue() , 0, ""There were ${failures} executions against a TestContext""); } "	0	0	0	0	1	0
"public void runSerial(List<TestContext> contexts) { int failures = 0;  for(TestContext tc : contexts) if(!this.runWith(tc)) failures += 1;  Assert.assertEquals(failures, 0, ""There were ${failures} executions against a TestContext""); } "	0	0	0	0	1	0
"protected void loadRecord(Connection conn, File file, String tableName, boolean hasHeader) throws IOException, SQLException { try (Importer importer = Importer.getImporter(file)) { final Object[] header; if (hasHeader) { header = importer.nextRow(); } else { try (Importer importer2 = Importer.getImporter(file)) { Object[] a = importer2.nextRow(); Arrays.fill(a, """"); header = a; } } final List<Object> headerList = Arrays.asList(header); final String columns = (hasHeader) ? String.format(""(%s)"", join("","", headerList)) : """"; final List<Object> valueList = new ArrayList<>(headerList); Collections.fill(valueList, ""?""); final String sql = String.format(""INSERT INTO %s %s VALUES (%s)"", tableName, columns, join("","", valueList)); if (log.isDebugEnabled()) { log.debug(""SQL : "" + sql); } try (PreparedStatement stmt = conn.prepareStatement(sql)) { insertRecords(stmt, importer); } } } "	0	0	0	0	1	0
public Path getExtractionTarget(Path tmcRoot) { return tmcRoot.resolve(Paths.get(courseName)); } 	0	0	0	0	1	0
@Override public void apply(MotionRuntime runtime, View target) { runtime.addInteraction(draggable, target); runtime.addInteraction(pinchable, target); runtime.addInteraction(rotatable, target); runtime.addInteraction(anchorPointAdjustable, target); } 	0	0	0	0	1	0
public void setCreated(final Date created) { this.created = created; } 	0	0	0	0	1	0
"public long toServiceCaseId(String s) { try { return Long.parseLong(s); } catch (Throwable t) { } try { IRI iri = IRI.create(s); OWL.parseIDFromBusinessOntologyIRI(iri); } catch (Throwable t) { } return lookupServiceCaseId(Json.object(""legacy:hasCaseNumber"", s, ""type"", ""legacy:ServiceCase"")); } "	0	0	0	0	1	0
"public ReportElement getFooterElementWithPagesSet(ReportElement baseElement, int pageNo, int totalPages) { if (baseElement instanceof ReportTextBox) { ReportTextBox oldFooterTextBox = (ReportTextBox) baseElement; String newText = oldFooterTextBox.getText().replaceAll(""%PAGE_NUMBER%"", pageNo + 1 + """").replaceAll(""%TOTAL_PAGES%"", totalPages + """"); return new ReportTextBox(oldFooterTextBox, newText); } else if (baseElement instanceof ReportTable) { ReportTable baseTable = (ReportTable) baseElement; ReportElement[][] oldElements = baseTable.getElements(); ReportElement[][] newElements = new ReportElement[oldElements.length][]; for (int row = oldElements.length - 1; row >= 0; --row) { newElements[row] = new ReportElement[oldElements[row].length]; for (int col = oldElements[row].length - 1; col >= 0; --col) { newElements[row][col] = getFooterElementWithPagesSet(oldElements[row][col], pageNo, totalPages); } } return new ReportTable(baseTable.getPdfStyleSheet(), baseTable.getCellWidths(), newElements, baseTable.getTitle()); } else { return baseElement; } } "	0	0	0	0	1	0
"public HashMap<Facet, FacetFilter> getFacetFilter() { HashMap<Facet, FacetFilter> results = new HashMap();  // If there are no filters, div.ffilter's style property will be 'display: none;'. WebElement ffilterElement = driver.findElement(By.xpath(""//div[@class='ffilter']"")); if (hasFilters()) { List<WebElement> liElements = ffilterElement.findElements(By.cssSelector(""ul#facetFilter > li"")); for (WebElement liElement : liElements) { FacetFilter facetFilter; String facetName = liElement.findElement(By.cssSelector(""span"")).getText(); switch (facetName) { case ""Gene"": facetFilter = new FacetFilter(Facet.GENES); break;  case ""Phenotype"": facetFilter = new FacetFilter(Facet.PHENOTYPES); break;  case ""Disease"": facetFilter = new FacetFilter(Facet.DISEASES); break;  case ""Anatomy"": facetFilter = new FacetFilter(Facet.ANATOMY); break;  //                    case ""Pipeline"": //                        facetFilter = new FacetFilter(Facet.PROCEDURES); //                        break;  case ""IMPC Images"": facetFilter = new FacetFilter(Facet.IMAGES); break;  case ""Images"": facetFilter = new FacetFilter(Facet.IMAGES); break;  default: continue; }  List<WebElement> ulElements = liElement.findElements(By.cssSelector(""ul"")); for (WebElement ulElement : ulElements) { facetFilter.subfacetTexts.add(ulElement.findElement(By.cssSelector(""li a"")).getText()); }  results.put(facetFilter.facet, facetFilter); } }  return results; } "	0	0	0	0	1	0
protected boolean addLeadingSpace(boolean gotSeparateLine, int pos, char precedingChar) { if (precedingChar == '.') { return false; } return super.addLeadingSpace(gotSeparateLine, pos, precedingChar); } 	0	0	0	0	1	0
protected void removeAllInternal(Set<? extends K> keys, boolean isRemoveAll) { final Set<Data> keysData; if (keys != null) { keysData = new HashSet<Data>(); for (K key : keys) { keysData.add(toData(key)); } } else { keysData = null; } final int partitionCount = clientContext.getPartitionService().getPartitionCount(); int completionId = registerCompletionLatch(partitionCount); CacheClearRequest request = new CacheClearRequest(nameWithPrefix, keysData, isRemoveAll, completionId); try { final Map<Integer, Object> results = invoke(request); int completionCount = 0; for (Object result : results.values()) { if (result != null && result instanceof CacheClearResponse) { final Object response = ((CacheClearResponse) result).getResponse(); if (response instanceof Boolean) { completionCount++; } if (response instanceof Throwable) { throw (Throwable) response; } } } waitCompletionLatch(completionId, partitionCount - completionCount); } catch (Throwable t) { deregisterCompletionLatch(completionId); throw ExceptionUtil.rethrowAllowedTypeFirst(t, CacheException.class); } } 	0	0	1	0	1	0
"@Override void finishOne(List<String> notUsed) { try { // Apply XPath expression to current document sinks_.log(this, ""Applying snipping criteria "" + select_ +""; the original source is "" + currentSrcFileName_, LogLevel.VERBOSE); if (expr_ == null) { XPath xpath = XPathFactory.newInstance().newXPath(); xpath.setNamespaceContext(namespaceContext_); expr_ = xpath.compile(select_); } NodeList nodes = (NodeList) expr_.evaluate(document_, XPathConstants.NODESET);  int count = 0; for (int i = 0; i < nodes.getLength(); ++i) { Node node = nodes.item(i); if (node.getNodeType() == Node.ELEMENT_NODE) { // Open sink's result Result result = sinks_.startOne(currentIndex_, currentSrcFileName_);  Document document = newDocument(); document.appendChild(document.adoptNode(node));  // Search output if necessary List<XPathExpression> referents = sinks_.referents(); List<String> referredContents = null; if (!referents.isEmpty()) { sinks_.log(this, ""  Referral to the source contents required"", LogLevel.DEBUG); referredContents = Referral.extract(document, referents); sinks_.log(this, ""  Referred source data: "" + Referral.join(referredContents), LogLevel.DEBUG); } else { sinks_.log(this, ""  Referral to the source contents not required"", LogLevel.DEBUG); }  // Send fragment to sink TransformerFactory.newInstance().newTransformer().transform( new DOMSource(document), result);  // Finish sink sinks_.finishOne(referredContents);  ++count; } } if (count > 0) { sinks_.log(this, count + "" snipped fragments processed"", LogLevel.VERBOSE); } else { sinks_.log(this, ""No snipped fragments generated; the original source is "" + currentSrcFileName_, LogLevel.INFO); }  } catch (TransformerException | XPathExpressionException e) { e.printStackTrace(); throw new BuildException(e); } } "	0	0	1	0	1	0
"@Override public void onBindViewHolder(ViewHolder holder, int position) { data = logData.get(position); try { uid = Integer.parseInt(data.getUid()); info = Api.getPackageDetails(context, uid); icon = info.applicationInfo.loadIcon(context.getPackageManager()); holder.icon.setImageDrawable(icon); } catch (Exception e) { info = null; icon = null; holder.icon.setImageDrawable(context.getResources().getDrawable(R.drawable.ic_unknown_package)); }  try { prettyTime = new PrettyTime(new Date(System.currentTimeMillis() - Long.parseLong(data.getTimestamp()))); if(data.getTimestamp() != null && !data.getTimestamp().isEmpty()) { //String time = prettyTime.format(new Date(Integer.parseInt(data.getTimestamp()))); String time = prettyTime.format(new Date(0)); holder.lastDenied.setText(time); } } catch (Exception e) { } holder.appname.setText(data.getAppName() != null ? data.getAppName(): context.getString(R.string.log_deletedapp));  if(data.getCount() > 1) { holder.dataDenied.setText(context.getString(R.string.log_denied) + "" "" + data.getCount() + "" "" + context.getString(R.string.log_times)) ; } else { holder.dataDenied.setText(context.getString(R.string.log_denied) + "" "" + data.getCount() + "" "" + context.getString(R.string.log_time)) ; }  } "	0	0	0	0	1	0
@Override public ResourceInfo findResourceInfo(String resourceGooruOid) { return resourceRepository.findResourceInfo(resourceGooruOid); } 	0	0	0	1	0	0
@Override public Job getResourceTaskJob(String taskId) { return (Job) learnguideRepository.get(Job.class, Integer.parseInt(taskId)); } 	0	0	1	1	0	0
@Override public void deleteResource(Long contentId) { getResourceRepository().remove(Resource.class, contentId);  } 	0	0	1	1	0	0
@Override public Map<String, Object> findAllResourcesSource(Map<String, String> filters) { return resourceRepository.findAllResourcesSource(filters); } 	0	0	0	1	0	0
"public MessageKeys removeMessageKeys(ECPublicKey senderEphemeral, int counter) { Pair<Chain,Integer> chainAndIndex = getReceiverChain(senderEphemeral); Chain               chain         = chainAndIndex.first;  if (chain == null) { return null; }  List<Chain.MessageKey>     messageKeyList     = chain.getMessageKeysList(); Iterator<Chain.MessageKey> messageKeyIterator = messageKeyList.iterator(); MessageKeys                result             = null;  while (messageKeyIterator.hasNext()) { Chain.MessageKey messageKey = messageKeyIterator.next();  if (messageKey.getIndex() == counter) { result = new MessageKeys(new SecretKeySpec(messageKey.getCipherKey().toByteArray(), ""AES""), new SecretKeySpec(messageKey.getMacKey().toByteArray(), ""HmacSHA256""), messageKey.getIndex());  messageKeyIterator.remove(); break; } }  Chain updatedChain = chain.toBuilder().clearMessageKeys() .addAllMessageKeys(messageKeyList) .build();  this.sessionStructure = this.sessionStructure.toBuilder() .setReceiverChains(chainAndIndex.second, updatedChain) .build();  return result; } "	0	0	1	1	1	0
private static int runQuery(IndexReader indexReader, QueryParser qp, String queryStr, int count) throws ParseException, IOException { Query q = qp.parse(queryStr);  return runQuery(indexReader, count, q);  } 	0	0	1	1	0	0
protected Boolean isValidLocation(Location location) { if (location == null) return false;  Time now = new Time(); now.setToNow();  return (now.toMillis(true) - location.getTime()) <= TEN_MINUTES;  } 	0	0	0	0	1	0
"private void updatePublication(PublicationDetail pubDetail, int updateScope, boolean forceUpdateDate) { SilverTrace.info(""kmelia"", ""KmeliaBmEJB.updatePublication()"", ""root.MSG_GEN_ENTER_METHOD"", ""updateScope = "" + updateScope); try { // if pubDetail is a clone boolean isClone = isClone(pubDetail); SilverTrace.info(""kmelia"", ""KmeliaBmEJB.updatePublication()"", ""root.MSG_GEN_PARAM_VALUE"", ""This publication is clone ? "" + isClone);  PublicationDetail old = getPublicationDetail(pubDetail.getPK());  // prevents to lose some data if (StringUtil.isDefined(old.getTargetValidatorId()) && !StringUtil.isDefined(pubDetail.getTargetValidatorId())) { pubDetail.setTargetValidatorId(old.getTargetValidatorId()); } final boolean isPublicationInBasket = isPublicationInBasket(pubDetail.getPK()); if (isClone) { // update only updateDate publicationBm.setDetail(pubDetail, forceUpdateDate); } else { boolean statusChanged = changePublicationStatusOnUpdate(pubDetail); publicationBm.setDetail(pubDetail, forceUpdateDate);  if (!isPublicationInBasket) { if (statusChanged) { // creates todos for publishers this.createTodosForPublication(pubDetail, false); }  updateSilverContentVisibility(pubDetail);  // la publication a été modifié par un superviseur // le créateur de la publi doit être averti String profile = KmeliaHelper.getProfile(getOrganisationController().getUserProfiles( pubDetail.getUpdaterId(), pubDetail.getPK().getInstanceId())); if (""supervisor"".equals(profile)) { sendModificationAlert(updateScope, pubDetail.getPK()); }  boolean visibilityPeriodUpdated = isVisibilityPeriodUpdated(pubDetail, old);  if (statusChanged || visibilityPeriodUpdated) { if (KmeliaHelper.isIndexable(pubDetail)) { indexExternalElementsOfPublication(pubDetail); } else { unIndexExternalElementsOfPublication(pubDetail.getPK()); } } } } // notification pour modification if (!isPublicationInBasket) { sendSubscriptionsNotification(pubDetail, true, false); }  boolean isNewsManage = getBooleanValue(getOrganisationController().getComponentParameterValue( pubDetail.getPK().getInstanceId(), ""isNewsManage"")); if (isNewsManage) { // mécanisme de callback CallBackManager callBackManager = CallBackManager.get(); callBackManager.invoke(CallBackManager.ACTION_HEADER_PUBLICATION_UPDATE, Integer.parseInt(pubDetail.getId()), pubDetail.getInstanceId(), pubDetail); } } catch (Exception e) { throw new KmeliaRuntimeException(""KmeliaBmEJB.updatePublication()"", ERROR, ""kmelia.EX_IMPOSSIBLE_DE_MODIFIER_LA_PUBLICATION"", e); } SilverTrace.info(""kmelia"", ""KmeliaBmEJB.updatePublication()"", ""root.MSG_GEN_EXIT_METHOD""); } "	0	0	0	0	1	0
"@Override public void removeCartItem(String item) { //Set responsive color for item being removed mView.onRemoveCartItemColor(false); //Get appointment schedule DTOAppointmentSchedule dtoAppointmentSchedule = getSpecificSchedule(item); if (dtoAppointmentSchedule != null){ //Remove on DB RemoveTemporaryBookingInteractor removeTemporaryBookingInteractor = new RemoveTemporaryBookingInteractorImpl(mExecutor, mMainThread, this, appointmentManager, appointment.getLocationId(), appointment.getMachineId(), dtoAppointmentSchedule); removeTemporaryBookingInteractor.execute(); }else onError(""Item to be removed doesn't exist""); } "	1	1	0	0	0	0
"final CompiledXSpec compileXSpec(final XsltExecutable executable, final File xspec) { XsltTransformer compiler = executable.load(); InputStream isXSpec = null; try { final File compiledXSpec = getCompiledXSpecPath(getReportDir(), xspec); getLog().info(""Compiling XSpec to XSLT: "" + compiledXSpec);  isXSpec = new FileInputStream(xspec);  final SAXParser parser = PARSER_FACTORY.newSAXParser(); final XMLReader reader = parser.getXMLReader(); final XSpecTestFilter xspecTestFilter = new XSpecTestFilter(reader);  final InputSource inXSpec = new InputSource(isXSpec); inXSpec.setSystemId(xspec.getAbsolutePath());  compiler.setSource(new SAXSource(xspecTestFilter, inXSpec));  final Serializer serializer = PROCESSOR.newSerializer(); serializer.setOutputFile(compiledXSpec); compiler.setDestination(serializer);  compiler.transform();  return new CompiledXSpec(xspecTestFilter.getTests(), xspecTestFilter.getPendingTests(), compiledXSpec);  } catch (final SaxonApiException sae) { getLog().error(sae.getMessage()); getLog().debug(sae); } catch (final ParserConfigurationException | FileNotFoundException pce) { getLog().error(pce); } catch (SAXException saxe) { getLog().error(saxe.getMessage()); getLog().debug(saxe); } finally { if (isXSpec != null) { try { isXSpec.close(); } catch (final IOException ioe) { getLog().warn(ioe); } } }  return null; } "	0	0	0	0	1	0
"@Override public ID scrapeID() { Element idElement = document.select(""td:containsOwn(�?番：) ~ td"").first(); if(idElement != null) { String idElementText = idElement.text(); idElementText = fixUpIDFormatting(idElementText); return new ID(idElementText); } //This page didn't have an ID, so just put in a empty one else return ID.BLANK_ID; } "	0	0	0	1	1	0
"public List<EducationDetails> getEducationDetails(int companyId, int employeeId) {  List<EducationDetails> educationDetailsList = new ArrayList<>();  DatabaseConnectionHelper dch = ObjectFactory.getDBHelper(); dch.getCompanyConnection(companyId);  try { CallableStatement cstmt = dch.companySqlConnectionPool.get(companyId).prepareCall(""{call getEmployeeWorkExperience(?)}""); cstmt.setInt(1, employeeId); ResultSet rs = cstmt.executeQuery(); while (rs.next()) { EducationDetails educationDetails = new EducationDetails(); educationDetails.setEmployeeId(employeeId); educationDetails.setEducationDetailsId(rs.getInt(""education_id"")); educationDetails.setInstitution(rs.getString(""institute_name"")); educationDetails.setCertification(rs.getString(""certification"")); educationDetails.setStartDate(rs.getDate(""from_date"")); educationDetails.setEndDate(rs.getDate(""to_date"")); educationDetails.setLocation(rs.getString(""location"")); educationDetailsList.add(educationDetails); } } catch (SQLException e) { org.apache.log4j.Logger.getLogger(EmployeeHelper.class).error(""Exception while getting the employee basic details"", e); }  return educationDetailsList;  } "	0	0	0	0	1	0
"@Override public DataExportFileQueryResult getAllExportFiles(DataExportFileQuery query) { int total; List<ExportFile> files;  // Count String qlStringCount = ""select count(e.id) from export e where e.utilityId = :utilityId"";  TypedQuery<Number> countQuery = entityManager.createQuery(qlStringCount, Number.class); countQuery.setParameter(""utilityId"", query.getUtilityId());  total = ((Number) countQuery.getSingleResult()).intValue();  // Select String qlStringSelect = ""select e from export e where e.utilityId = :utilityId"";  TypedQuery<ExportFileEntity> selectQuery = entityManager.createQuery(qlStringSelect, ExportFileEntity.class); selectQuery.setParameter(""utilityId"", query.getUtilityId());  selectQuery.setFirstResult(query.getIndex() * query.getSize()); selectQuery.setMaxResults(query.getSize());  files = exportEntityListToObjectList(selectQuery.getResultList());  // Compose response return new DataExportFileQueryResult(total, files);  } "	0	0	0	0	1	0
"@Override public DataExportFileQueryResult getValidExportFiles(DataExportFileQuery query) { int total; List<ExportFile> files;  // Count String qlStringCount = ""select count(e.id) from export e where e.utilityId = :utilityId and e.createdOn >= :createdOn"";  TypedQuery<Number> countQuery = entityManager.createQuery(qlStringCount, Number.class); countQuery.setParameter(""utilityId"", query.getUtilityId()); countQuery.setParameter(""createdOn"", new DateTime().minusDays(query.getDays()));  total = ((Number) countQuery.getSingleResult()).intValue();  // Select String qlStringSelect = ""select e from export e where e.utilityId = :utilityId and e.createdOn >= :createdOn"";  TypedQuery<ExportFileEntity> selectQuery = entityManager.createQuery(qlStringSelect, ExportFileEntity.class); selectQuery.setParameter(""utilityId"", query.getUtilityId()); selectQuery.setParameter(""createdOn"", new DateTime().minusDays(query.getDays()));  selectQuery.setFirstResult(query.getIndex() * query.getSize()); selectQuery.setMaxResults(query.getSize());  files = exportEntityListToObjectList(selectQuery.getResultList());  // Compose response return new DataExportFileQueryResult(total, files); } "	0	0	0	0	1	0
"@Override public DataExportFileQueryResult getExpiredExportFiles(DataExportFileQuery query) { int total; List<ExportFile> files;  // Count String qlStringCount = ""select count(e.id) from export e where e.utilityId = :utilityId and e.createdOn < :createdOn"";  TypedQuery<Number> countQuery = entityManager.createQuery(qlStringCount, Number.class); countQuery.setParameter(""utilityId"", query.getUtilityId()); countQuery.setParameter(""createdOn"", new DateTime().minusDays(query.getDays()));  total = ((Number) countQuery.getSingleResult()).intValue();  // Select String qlStringSelect = ""select e from export e where e.utilityId = :utilityId and e.createdOn < :createdOn"";  TypedQuery<ExportFileEntity> selectQuery = entityManager.createQuery(qlStringSelect, ExportFileEntity.class); selectQuery.setParameter(""utilityId"", query.getUtilityId()); selectQuery.setParameter(""createdOn"", new DateTime().minusDays(query.getDays()));  selectQuery.setFirstResult(query.getIndex() * query.getSize()); selectQuery.setMaxResults(query.getSize());  files = exportEntityListToObjectList(selectQuery.getResultList());  // Compose response return new DataExportFileQueryResult(total, files); } "	0	0	0	0	1	0
private void startExam(View view) { if (!(view instanceof TextView)) { return; }  String randomAmount = ((TextView) view).getText().toString(); randomAmount = convertNumberToWord(randomAmount);  Context context = getContext(); Intent intent = new Intent(context, BaseExamActivity.class); intent.putExtra(TAG_DECK_ID, deckId); intent.putExtra(TAG_DECK_NAME, deckName); intent.putExtra(TAG_RANDOM_AMOUNT, randomAmount); intent.putExtra(TAG_IN_EXAM, true); intent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { setUpTransition(); ActivityOptionsCompat options = ActivityOptionsCompat.makeSceneTransitionAnimation(getActivity()); context.startActivity(intent, options.toBundle()); } else { context.startActivity(intent); } } 	0	0	0	0	1	0
"@Test public void getClientsListUsingPageSize() { JsonObject firstPage = (JsonObject) RestcommClientsTool.getInstance().getClients(deploymentUrl.toString(), developerAccountSid, developeerAuthToken, null, 100, true); int totalSize = firstPage.get(""total"").getAsInt(); JsonArray firstPageClientsArray = firstPage.get(""clients"").getAsJsonArray(); int firstPageClientsArraySize = firstPageClientsArray.size(); assertTrue(firstPageClientsArraySize == 100); assertTrue(firstPage.get(""start"").getAsInt() == 0); assertTrue(firstPage.get(""end"").getAsInt() == 99);  JsonObject secondPage = (JsonObject) RestcommClientsTool.getInstance().getClients(deploymentUrl.toString(), developerAccountSid, developeerAuthToken, 2, 100, true); JsonArray secondPageClientsArray = secondPage.get(""clients"").getAsJsonArray(); assertTrue(secondPageClientsArray.size() == 100); assertTrue(secondPage.get(""start"").getAsInt() == 200); assertTrue(secondPage.get(""end"").getAsInt() == 299);  JsonObject lastPage = (JsonObject) RestcommClientsTool.getInstance().getClients(deploymentUrl.toString(), developerAccountSid, developeerAuthToken, firstPage.get(""num_pages"").getAsInt(), 100, true); JsonArray lastPageClientsArray = lastPage.get(""clients"").getAsJsonArray(); assertEquals(""CLffd8c6e5f65d420baf9579a18f229679"",lastPageClientsArray.get(lastPageClientsArray.size() - 1).getAsJsonObject().get(""sid"").getAsString()); assertTrue(lastPageClientsArray.size() == 82); assertTrue(lastPage.get(""start"").getAsInt() == 300); assertTrue(lastPage.get(""end"").getAsInt() == 382);  assertTrue(totalSize == 382); } "	0	0	0	0	1	0
public void loadLocation() { String name = persistentStorage.get(FILTER_EVENTS_LOCATION_NAME_KEY); double lat = persistentStorage.getDouble(FILTER_EVENTS_LOCATION_LAT_KEY, 0); double lon = persistentStorage.getDouble(FILTER_EVENTS_LOCATION_LAT_KEY, 0); getView().setLocation(name, lat, lon); } 	0	0	1	0	1	0
"private void updateResults() { calculateDateDiff();  totalInitial = getPlanValue(); if (!rollOver.equals("""")) { totalInitial += Float.parseFloat(rollOver); }  //only update total text if its showing, doesn't show with custom if (!selectedMealPlan.equals(getString(R.string.mealOptionCustom))) { try { ((TextView) findViewById(R.id.totalInitialText)).setText(twoDecimal.format(totalInitial)); } catch (NullPointerException e) { Log.e(""set total initial error"", e.getMessage()); } }  if (currentBalanceIsEntered()) { summaryCard.setVisibility(View.VISIBLE); tableCard.setVisibility(View.VISIBLE);  double averageDaily, averageWeekly; if (weekDiff > 1 || (weekDiff == 1 && dayDiff > 1)) { averageDaily = totalInitial / ((weekDiff * 7) + dayDiff); averageWeekly = averageDaily * 7; } else {    //1 week or less averageWeekly = totalInitial; averageDaily = totalInitial / dayDiff; }  double curBalance = Double.parseDouble(currentBalance);  // current balance - amount that should be left initially double diff = curBalance - (averageWeekly * currentWeekDiff + averageDaily * currentDayDiff); tvs[0].setText(formatNumber(diff));  double currentWeekly, currentDaily; if (currentWeekDiff > 1 || (currentWeekDiff == 1 && currentDayDiff > 1)) { currentDaily = curBalance / ((currentWeekDiff * 7) + currentDayDiff); currentWeekly = currentDaily * 7; } else {     //1 week or less currentWeekly = curBalance; currentDaily = curBalance / ((currentWeekDiff * 7) + currentDayDiff); }  //set average calculations tvs[1].setText(formatNumber(averageDaily)); tvs[2].setText(formatNumber(averageWeekly));  //set current calculations tvs[3].setText(formatNumber(currentDaily)); tvs[4].setText(formatNumber(currentWeekly));  //set difference calculations tvs[5].setText(formatNumber(currentDaily - averageDaily)); tvs[6].setText(formatNumber(currentWeekly - averageWeekly));  } else { //if it can't be displayed, make sure its hidden showSnackbar(getResources().getString(R.string.remainingBalanceNotEntered), false); hideResults(); } } "	0	0	1	0	1	0
"public void deleteLocation(int id) throws SQLException { String query = ""DELETE FROM `library.Location` WHERE `id` = ?"";  List<Object> parameters = new ArrayList<>(); parameters.add(id);  database.executeQuery(query, parameters, Database.QueryType.NON_QUERY); } "	0	0	1	1	1	0
private boolean isValidOtherDigitGrouping(String[] splitCCN) { if (splitCCN.length == 1) { return true; } else { return splitCCN[0].length() == 4; } } 	0	0	0	1	0	0
"@Override public void onCompletion(RecordMetadata md, Exception e) { if ( e != null ) { if ( e instanceof RecordTooLargeException ) { LOGGER.error(""RecordTooLargeException @ "" + position + "" -- "" + key); LOGGER.error(""Maxwell dropped a row because it was too large ("" + e.getLocalizedMessage() + "")""); LOGGER.error(""Considering raising max.request.size broker-side."");  if ( isTXCommit ) inflightMessages.completeMessage(position); } else { throw new RuntimeException(e); } } else { try { if ( LOGGER.isDebugEnabled()) { LOGGER.debug(""->  key:"" + key + "", partition:"" +md.partition() + "", offset:"" + md.offset()); LOGGER.debug(""   "" + this.json); LOGGER.debug(""   "" + position); LOGGER.debug(""""); } if ( isTXCommit ) { BinlogPosition newPosition = inflightMessages.completeMessage(position);  if ( newPosition != null ) context.setPosition(newPosition); } } catch (SQLException e1) { e1.printStackTrace(); } } } "	0	0	1	0	1	0
"@Override public void getStream(String token, String streamId, final NetCallback<List<RssItem>> netCallback) { token = API_TOKEN_TEST;  String url = API_HOST_URL + API_STREAM_CONTENTS_URL.replace("":streamId"", streamId); String localStream = """";  final File stream_json = new File(MyApplication.myApplicationDirPath + File.separator + MyApplication.myApplicationDataName + File.separator + ""stream.json"");  try { localStream = FileUtils.readFile(stream_json); } catch (IOException e) { e.printStackTrace(); }  if (localStream.isEmpty()){ final Map<String,String> headers = new HashMap<>(); headers.put(""Authorization"",""OAuth "" + token); NetWorkApiHelper.newInstance().getRequest(url, headers, new Response.Listener<String>() { @Override public void onResponse(String response) { Log.i(TAG,""onResponse:getStream "" + response); try { FileUtils.writeFile(stream_json, response); if ( netCallback != null){ netCallback.onSuccess(parseStream(response)); } } catch (IOException e) { e.printStackTrace(); } } }, new Response.ErrorListener() { @Override public void onErrorResponse(VolleyError error) { Log.e(TAG,""onErrorResponse:getStream "" + error.getMessage());  if (netCallback != null){ netCallback.onFail(error.getMessage()); } } }); } else if ( netCallback != null){ netCallback.onSuccess(parseStream(localStream)); } } "	0	0	0	0	1	0
protected void showLoading(boolean b) { ((MainActivity) getActivity()).showLoading(b); } 	0	0	0	0	1	0
private ClassName classNameTypeOf(final String className) { return ClassName.get(config.getBasePackageName() + RESOURCE_PACKAGE_NAME, className); } 	0	0	0	0	1	0
"@Override @SuppressWarnings(""unchecked"") public List<ProcedureEntity> getAllInstances(DbQuery parameters) throws DataAccessException { Criteria criteria = getDefaultCriteria(""procedure""); if (hasTranslation(parameters, I18nProcedureEntity.class)) { parameters.addLocaleTo(criteria, I18nProcedureEntity.class); }  criteria = parameters.addDetachedFilters(""procedure"", criteria); parameters.addPagingTo(criteria); return (List<ProcedureEntity>) criteria.list(); } "	0	0	1	1	1	0
final void read(final RootObj root) throws ParseException { for (final SuperBlockObj sb : root.getRoot().getChildren()) { for (final BlockObj bc : sb.getSuperblock().getChildren()) { final Block block = bc.getBlock(); final String[] parent = parsePath(null, block.getPath()); for (final ComponentObj fc : block.getChildren()) { final Field field = ((FieldObj)fc).getField(); final String[] path = parsePath(parent, field.getPath()); addValue(path, field.getValue()); } } } } 	0	0	1	0	1	0
"@Test public void testSaveGraphResourceNoOption() throws IOException, ConfigurationException { resource.save(Collections.EMPTY_MAP); File configFile = new File(testFilePath + configFileName); assert configFile.exists() : ""Config file does not exist""; PropertiesConfiguration configuration = new PropertiesConfiguration(configFile); assert configuration.containsKey(BlueprintsResourceOptions.OPTIONS_BLUEPRINTS_GRAPH_TYPE); assert configuration.getString(BlueprintsResourceOptions.OPTIONS_BLUEPRINTS_GRAPH_TYPE).equals(BlueprintsResourceOptions.OPTIONS_BLUEPRINTS_GRAPH_TYPE_DEFAULT); assert getKeyCount(configuration) == 2 : ""Too much content in the .properties file""; } "	0	0	1	1	0	0
public FilterBuilder persistConfig(RedisPool pool, FilterBuilder builder) { return pool.safelyReturn(jedis -> { FilterBuilder newConfig = null; //Retry on concurrent changes while (newConfig == null) { if (!builder.overwriteIfExists() && jedis.exists(builder.name())) { newConfig = this.parseConfigHash(jedis.hgetAll(builder.name()), builder.name()); } else { Map<String, String> hash = this.buildConfigHash(builder); jedis.watch(builder.name()); Transaction t = jedis.multi(); hash.forEach((k, v) -> t.hset(builder.name(), k, v)); if (t.exec() != null) { newConfig = builder; } } } return newConfig; }); } 	0	0	0	0	1	0
private void setupRow(Row row, TeamHelper teamHelper, ScoutMetric metric) { Cell headerCell = row.getCell(0, MissingCellPolicy.CREATE_NULL_AS_BLANK);  mCache.putMetricKey(headerCell, metric.getKey());  if (metric.getType() == MetricType.HEADER) { headerCell.setCellStyle(mCache.getHeaderMetricRowHeaderStyle());  int numOfScouts = mScouts.get(teamHelper).size(); if (numOfScouts > Constants.SINGLE_ITEM) { int rowNum = row.getRowNum(); row.getSheet() .addMergedRegion(new CellRangeAddress(rowNum, rowNum, 1, numOfScouts)); } } else { headerCell.setCellStyle(mCache.getRowHeaderStyle()); } } 	0	0	0	0	1	0
@Override public void setAlpha(int alpha) { mPaint.setAlpha(alpha); } 	0	0	1	0	1	0
public static final boolean isSubset(char[] set1, char[] set2) { return (difference(set1, set2) == null); } 	0	0	1	0	1	0
public void handle(RespT resp) { // if resp is null, then region maybe out of dated. we need handle this on RegionManager. if (resp == null) { this.regionManager.onRequestFail(ctx.getRegionId(), ctx.getPeer().getStoreId()); return; }  Errorpb.Error error = getRegionError.apply(resp); if (error != null) { if (error.hasNotLeader()) { // update Leader here // no need update here. just let retry take control of this. this.regionManager.updateLeader(ctx.getRegionId(), ctx.getPeer().getStoreId()); // TODO add sleep here throw new StatusRuntimeException(Status.fromCode(Status.Code.UNAVAILABLE).withDescription(error.toString())); } if (error.hasStoreNotMatch()) { this.regionManager.invalidateStore(ctx.getPeer().getStoreId()); throw new StatusRuntimeException(Status.fromCode(Status.Code.UNAVAILABLE).withDescription(error.toString())); }  // no need retry. NewRegions is returned in this response. we just need update RegionManage's region cache. if (error.hasStaleEpoch()) { regionManager.onRegionStale(ctx.getRegionId(), error.getStaleEpoch().getNewRegionsList()); this.regionManager.onRegionStale( ctx.getRegionId(), error.getStaleEpoch().getNewRegionsList()); throw new StatusRuntimeException(Status.fromCode(Status.Code.CANCELLED).withDescription(error.toString())); }  if (error.hasServerIsBusy()) { // TODO add some sleep here. throw new StatusRuntimeException(Status.fromCode(Status.Code.UNAVAILABLE).withDescription(error.toString())); }  if (error.hasStaleCommand()) { throw new StatusRuntimeException(Status.fromCode(Status.Code.UNAVAILABLE).withDescription(error.toString())); }  if (error.hasRaftEntryTooLarge()) { throw new StatusRuntimeException(Status.fromCode(Status.Code.UNAVAILABLE).withDescription(error.toString())); } // for other errors, we only drop cache here and throw a retryable exception. this.regionManager.invalidateRegion(ctx.getRegionId()); } } 	0	0	0	0	1	0
private void updateAnimationScaleValue(int which, ListPreference pref) { try { float scale = mWindowManager.getAnimationScale(which); if (scale != 1) { mHaveDebugSettings = true; } CharSequence[] values = pref.getEntryValues(); for (int i=0; i<values.length; i++) { float val = Float.parseFloat(values[i].toString()); if (scale <= val) { pref.setValueIndex(i); pref.setSummary(pref.getEntries()[i]); return; } } pref.setValueIndex(values.length-1); pref.setSummary(pref.getEntries()[0]); } catch (RemoteException e) { } } 	0	0	0	0	1	0
public final void postAggArithOper(PostAggItem postAggItem) throws RecognitionException { Token arith = null;  try { // /Users/srikalyan/publicSql4D/Sql4D/Sql4DCompiler/src/main/java/com/yahoo/sql4d/druidG.g:530:2: (arith= ARITH_OPER ) // /Users/srikalyan/publicSql4D/Sql4D/Sql4DCompiler/src/main/java/com/yahoo/sql4d/druidG.g:530:3: arith= ARITH_OPER { arith = (Token) match(input, ARITH_OPER, FOLLOW_ARITH_OPER_in_postAggArithOper3499); postAggItem.fn = (arith != null ? arith.getText() : null); }  } catch (RecognitionException re) { reportError(re); recover(input, re); } finally { // do for sure before leaving } } 	0	0	1	0	1	0
"@Transactional(""transactionManager"") public OrderEntity save(Order order) { List<ServiceItem> serviceItemList = order.getServiceItems(); Iterator<ServiceItem> serviceItemIterator = serviceItemList.iterator(); while (serviceItemIterator.hasNext()) { ServiceItem serviceItem = serviceItemIterator.next(); if (serviceItem.getQuotation() == null) serviceItemIterator.remove(); }  OrderEntity orderEntity = convert(order); OrderRailEntity railwayEntity = convertRailway(order); railwayEntity.setOrder(orderEntity); orderEntity.setRailway(railwayEntity); orderEntity = orderService.save(orderEntity);  ReceivableSummary receivableSummary = new ReceivableSummary(); receivableSummary.setCny(order.getCnyTotal()); receivableSummary.setUsd(order.getUsdTotal()); receivableSummary.setOrderId(order.getId()); order.setId(orderEntity.getId()); convert(orderEntity, receivableSummary); // TODO: workaround receivableSummary.setId(null); receivableSummary.setOrderId(orderEntity.getId()); receivableFacade.save(receivableSummary);  return orderEntity; } "	0	0	0	0	1	0
"public synchronized CachedFileGoConfig.PipelineConfigSaveResult writePipelineWithLock(PipelineConfig pipelineConfig, GoConfigHolder serverCopy, PipelineConfigService.SaveCommand saveCommand, Username currentUser) { CruiseConfig modifiedConfig = cloner.deepClone(serverCopy.configForEdit); saveCommand.updateConfig(modifiedConfig, pipelineConfig); CruiseConfig preprocessedConfig = cloner.deepClone(modifiedConfig); MagicalGoConfigXmlLoader.preprocess(preprocessedConfig); PipelineConfig preprocessedPipelineConfig = preprocessedConfig.getPipelineConfigByName(pipelineConfig.name()); if (saveCommand.isValid(preprocessedConfig, preprocessedPipelineConfig)) { try { LOGGER.info(String.format(""[Configuration Changed] Saving updated configuration."")); String configAsXml = configAsXml(modifiedConfig, true); String md5 = CachedDigestUtils.md5Hex(configAsXml); MagicalGoConfigXmlLoader.setMd5(modifiedConfig, md5); MagicalGoConfigXmlLoader.setMd5(preprocessedConfig, md5); writeToConfigXmlFile(configAsXml); configRepository.checkin(new GoConfigRevision(configAsXml, md5, currentUser.getUsername().toString(), serverVersion.version(), timeProvider)); LOGGER.debug(""[Config Save] Done writing with lock""); reloadStrategy.latestState(preprocessedConfig); return new CachedFileGoConfig.PipelineConfigSaveResult(pipelineConfig, saveCommand.getPipelineGroup(), new GoConfigHolder(preprocessedConfig, modifiedConfig)); } catch (Exception e) { throw new RuntimeException(""failed to save : "" + e.getMessage()); } } else { throw new ConfigUpdateCheckFailedException(); } } "	0	0	0	0	1	0
public static ArrayList<Slug> getSlugs(Entity entity) { return entityMap.get(entity.getCommandSenderName());  } 	0	0	0	0	1	0
"@Override public String findUuidUserBySlack(String slackName) { List<String> slackNames = new ArrayList<>(); slackNames.add(slackName); SlackNameRequest slackNameRequest = new SlackNameRequest(slackNames); HttpEntity<SlackNameRequest> request = new HttpEntity<>(slackNameRequest, setupBaseHttpHeaders()); String result; try { ResponseEntity<UserDTO[]> response = restTemplate.exchange(urlBase + urlGetUser, HttpMethod.POST, request, UserDTO[].class); result = response.getBody()[0].getUuid(); } catch (HttpClientErrorException ex) { if (ex.getRawStatusCode() == 400 && checkInternalErrorCode(ex.getResponseBodyAsString(), 0)) { throw new UserNotFoundException(String.format(""User with slack name '%s' not found."", slackName)); } throw new GamificationExchangeException(""User Exchange Error: "", ex); } return result; } "	0	0	1	0	1	0
public DCPlayer find( Player player ) { for ( DCPlayer d : dwarves ) { if ( d != null ) { if ( d.getPlayer() != null ) { if ( d.getPlayer().getName().equalsIgnoreCase( player.getName() ) ) { d.setPlayer( player ); return d; } } } } return null; } 	0	0	0	0	1	0
"@SuppressWarnings( ""resource"" ) protected boolean readRacesFile() { System.out.println( ""[DwarfCraft] Reading races file: "" + configDirectory + cfgRaceFile ); try { FileReader fr = new FileReader( configDirectory + cfgRaceFile ); BufferedReader br = new BufferedReader( fr ); String line = br.readLine(); boolean name = false; boolean desc = false; boolean skills = false; boolean prefix = false; Race race = null; while ( line != null ) { if ( line.length() == 0 ) { line = br.readLine(); continue; } if ( line.charAt( 0 ) == '#' ) { line = br.readLine(); continue; } String[] theline = line.split( "":"" ); if ( theline.length > 2 ) { line = br.readLine(); continue; } if ( theline[0].equalsIgnoreCase( ""Name"" ) ) { race = new Race( theline[1].trim() ); name = true; line = br.readLine(); } if ( theline[0].equalsIgnoreCase( ""SkillIDs"" ) ) { String ids[] = theline[1].trim().split( "","" ); race.setSkills( new ArrayList<Integer>() ); for ( int i = 0; i < ids.length; i++ ) { race.getSkills().add( Integer.parseInt( ids[i].trim() ) ); }  skills = true; line = br.readLine(); } if ( theline[0].equalsIgnoreCase( ""Description"" ) ) { race.setDesc( theline[1].trim() );  desc = true; line = br.readLine(); } if ( theline[0].equalsIgnoreCase( ""Prefix Colour"" ) ) { race.setPrefixColour( theline[1].trim() );  prefix = true; line = br.readLine(); } if ( name && desc && skills && prefix ) { raceList.add( race ); name = false; desc = false; skills = false; System.out.println( ""[DwarfCraft] Loaded race: "" + race.getName() ); continue; } } } catch ( Exception e ) { e.printStackTrace(); } if ( defaultRace == null ) { defaultRace = ""NULL""; } else { if ( !checkRace( defaultRace ) ) defaultRace = ""NULL""; } return true; } "	1	1	1	1	0	0
@Override protected Statement withAfters(FrameworkMethod method, Object target, Statement statement) { List<FrameworkMethod> afters = getTestClass().getAnnotatedMethods(After.class); return afters.isEmpty() && afterTestExtensions.isEmpty() ? statement : new RunAfters(statement, afters, target, afterTestExtensions); } 	0	0	0	0	1	0
@Override protected Statement withAfterClasses(Statement statement) { List<FrameworkMethod> afters = getTestClass() .getAnnotatedMethods(AfterClass.class); return afters.isEmpty() && afterTestExtensions.isEmpty() ? statement : new RunAfters(statement, afters, null); } 	0	0	0	0	0	1
private void resetAppYamlConfigSelection(Project project) { appYamlCombobox.setModel(new DefaultComboBoxModel<>( Arrays.stream(ModuleManager.getInstance(project).getModules()) .filter(module -> AppEngineFlexibleFacet.getAppEngineFacetByModule(module) != null) .map(AppEngineFlexibleFacet::getAppEngineFacetByModule) .toArray(AppEngineFlexibleFacet[]::new) ));  if (appYamlCombobox.getItemCount() == 0) { appYamlCombobox.setVisible(false); editAppYamlButton.setVisible(false); noAppYamlsWarningPanel.setVisible(true); dockerfileDirectoryPathLink.setVisible(true); } } 	0	0	0	0	1	0
public static void installLatestGradleVersion(final Jenkins jenkins) { installGradle(jenkins, GradleInstallation.DEFAULT_VERSION_NAME, GradleInstallation.LATEST_VERSION); } 	0	0	0	0	1	0
"@RequestMapping(method = RequestMethod.GET) @ResponseBody public List<EncounterTransaction.Diagnosis> search(@RequestParam(""patientUuid"") String patientUuid, @RequestParam(value = ""fromDate"", required = false) String date) throws Exception { Patient patient = patientService.getPatientByUuid(patientUuid); Date fromDate; try { fromDate = new DateMapper().toDate(date); } catch (Exception e) { throw new InvalidInputException(""Date format needs to be 'yyyy-MM-dd'. Incorrect Date:"" + date + ""."", e); } List<Diagnosis> pastDiagnoses = diagnosisService.getDiagnoses(patient, fromDate); return diagnosisMapper.convert(pastDiagnoses); } "	0	0	0	1	1	0
@SubscribeEvent public void onRenderGameOverlay(RenderGameOverlayEvent event) {  ModItems.teleporterLinker.renderGameOverlay(Minecraft.getMinecraft()); renderCrosshairs(event); } 	1	0	1	0	1	0
@Override public ITexture[] getTexture(IGregTechTileEntity aBaseMetaTileEntity, byte aSide, byte aFacing, byte aColorIndex, boolean aActive, boolean aRedstone) { return new ITexture[]{Textures.BlockIcons.MACHINE_CASINGS[1][aColorIndex + 1], aFacing == aSide ? aActive ? new GT_RenderedTexture(Textures.BlockIcons.LARGETURBINE_SS_ACTIVE5) : new GT_RenderedTexture(Textures.BlockIcons.LARGETURBINE_SS5) : Textures.BlockIcons.CASING_BLOCKS[58]}; } 	0	0	0	1	1	0
"@Override public int subjectAIMDelete(SubjectReference subjectReference, String aimID, String sessionID, boolean deleteDSO, String username) throws Exception { try { projectOperations.createEventLog(username, subjectReference.projectID, subjectReference.subjectID, null, null, null, aimID, ""DELETE AIM"", ""deleteDSO:"" + deleteDSO); EPADAIM aim = getAIMDescription(aimID, username, sessionID); if (!""admin"".equals(username) && !aim.userName.equals(username) && !aim.userName.equals(""shared"") && !UserProjectService.isOwner(sessionID, username, aim.projectID)) { log.warning(""No permissions to delete AIM:"" + aimID + "" for user "" + username); throw new Exception(""No permissions to delete AIM:"" + aimID + "" for user "" + username); } if (AIMUtil.isPluginStillRunning(aimID)) throw new Exception(aimID + "" is still being processed by the plugin""); AIMUtil.deleteAIM(aimID, subjectReference.projectID); epadDatabaseOperations.deleteAIM(username, subjectReference, aimID); if (deleteDSO && aim.dsoSeriesUID != null && aim.dsoSeriesUID.length() > 0 && epadDatabaseOperations.getAIMsByDSOSeries(aim.dsoSeriesUID).size() == 0) { this.deleteSeries(new SeriesReference(subjectReference.projectID, aim.subjectID, aim.studyUID, aim.dsoSeriesUID), false); } return HttpServletResponse.SC_OK; } catch (Exception e) { log.warning(""Error deleting AIM file "",e); throw e; } } "	0	0	0	0	1	0
public void createVideo(float x, float y, float width, String sourcefile, boolean autoPlay, boolean loop) { videos.add(new Video(group, x, y, width, sourcefile, autoPlay, loop)); } 	0	0	0	0	1	0
public TileVending getTile(World world, BlockPos pos) { return (TileVending) world.getTileEntity(pos); } 	0	0	0	1	0	0
"private void grow(int capacityRequired, int bucketIndex) { if (capacityRequired > MAX_ARRAY_SIZE) { throw new BallerinaException(""Requested arrays size "" + capacityRequired + "" exceeds limit: "" + MAX_ARRAY_SIZE); }  if (bucketIndex >= arrayBucket.length) { // We have to create new arrayBucket arrayBucket = Arrays.copyOf(arrayBucket, arrayBucket.length + DEFAULT_ARRAY_BUCKET_SIZE);  }  if (bucketIndex > lastBucketIndex) { for (int i = lastBucketIndex + 1; bucketIndex > lastBucketIndex; i++) { arrayBucket[i] = createArray(); lastBucketIndex++; } } } "	0	0	1	0	0	0
"public Step addStep(int sequence, String text, String note, String criteria, List<Requirement> requirements) throws PreexistingEntityException, Exception { StepServer ss = new StepServer(getEntity(), sequence, text); int amount = getStepList().size(); ss.setNotes(note); ss.setExpectedResult(criteria.getBytes(""UTF-8"")); if (ss.getRequirementList() == null) { ss.setRequirementList(new ArrayList<>()); } ss.write2DB(); if (requirements != null) { requirements.forEach((req) -> { ss.getRequirementList().add(req); }); } ss.write2DB(); update(this, getEntity()); assert getStepList().size() > amount; return ss.getEntity(); } "	1	1	1	0	0	0
"public Message sendDocument(SendDocument sendDocument) throws TelegramApiException { String responseContent;  try { String url = getBaseUrl() + SendDocument.PATH; HttpPost httppost = new HttpPost(url); httppost.setConfig(requestConfig); if (sendDocument.isNewDocument()) { MultipartEntityBuilder builder = MultipartEntityBuilder.create(); builder.addTextBody(SendDocument.CHATID_FIELD, sendDocument.getChatId()); builder.addBinaryBody(SendDocument.DOCUMENT_FIELD, new java.io.File(sendDocument.getDocument()), ContentType.APPLICATION_OCTET_STREAM, sendDocument.getDocumentName()); if (sendDocument.getReplayMarkup() != null) { builder.addTextBody(SendDocument.REPLYMARKUP_FIELD, sendDocument.getReplayMarkup().toJson().toString()); } if (sendDocument.getReplayToMessageId() != null) { builder.addTextBody(SendDocument.REPLYTOMESSAGEID_FIELD, sendDocument.getReplayToMessageId().toString()); } if (sendDocument.getCaption() != null) { builder.addTextBody(SendDocument.CAPTION_FIELD, sendDocument.getCaption(), ContentType.create(""text/plain"", StandardCharsets.UTF_8)); } if (sendDocument.getDisableNotification() != null) { builder.addTextBody(SendDocument.DISABLENOTIFICATION_FIELD, sendDocument.getDisableNotification().toString()); } HttpEntity multipart = builder.build(); httppost.setEntity(multipart); } else { List<NameValuePair> nameValuePairs = new ArrayList<>(); nameValuePairs.add(new BasicNameValuePair(SendDocument.CHATID_FIELD, sendDocument.getChatId())); nameValuePairs.add(new BasicNameValuePair(SendDocument.DOCUMENT_FIELD, sendDocument.getDocument())); if (sendDocument.getReplayMarkup() != null) { nameValuePairs.add(new BasicNameValuePair(SendDocument.REPLYMARKUP_FIELD, sendDocument.getReplayMarkup().toJson().toString())); } if (sendDocument.getReplayToMessageId() != null) { nameValuePairs.add(new BasicNameValuePair(SendDocument.REPLYTOMESSAGEID_FIELD, sendDocument.getReplayToMessageId().toString())); } if (sendDocument.getCaption() != null) { nameValuePairs.add(new BasicNameValuePair(SendDocument.CAPTION_FIELD, sendDocument.getCaption())); } if (sendDocument.getReplayToMessageId() != null) { nameValuePairs.add(new BasicNameValuePair(SendDocument.DISABLENOTIFICATION_FIELD, sendDocument.getDisableNotification().toString())); } httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs, StandardCharsets.UTF_8)); }  try (CloseableHttpResponse response = httpclient.execute(httppost)) { HttpEntity ht = response.getEntity(); BufferedHttpEntity buf = new BufferedHttpEntity(ht); responseContent = EntityUtils.toString(buf, StandardCharsets.UTF_8); } } catch (IOException e) { throw new TelegramApiException(""Unable to send document"", e); }  JSONObject jsonObject = new JSONObject(responseContent); if (!jsonObject.getBoolean(Constants.RESPONSEFIELDOK)) { throw new TelegramApiException(""Error at sendDocument"", jsonObject.getString(ERRORDESCRIPTIONFIELD), jsonObject.getInt(ERRORCODEFIELD)); }  return new Message(jsonObject.getJSONObject(Constants.RESPONSEFIELDRESULT)); } "	0	0	0	0	0	1
"public Message sendPhoto(SendPhoto sendPhoto) throws TelegramApiException { String responseContent; try { String url = getBaseUrl() + SendPhoto.PATH; HttpPost httppost = new HttpPost(url); httppost.setConfig(requestConfig); if (sendPhoto.isNewPhoto()) { MultipartEntityBuilder builder = MultipartEntityBuilder.create(); builder.addTextBody(SendPhoto.CHATID_FIELD, sendPhoto.getChatId()); builder.addBinaryBody(SendPhoto.PHOTO_FIELD, new java.io.File(sendPhoto.getPhoto()), ContentType.APPLICATION_OCTET_STREAM, sendPhoto.getPhotoName()); if (sendPhoto.getReplayMarkup() != null) { builder.addTextBody(SendPhoto.REPLYMARKUP_FIELD, sendPhoto.getReplayMarkup().toJson().toString()); } if (sendPhoto.getReplayToMessageId() != null) { builder.addTextBody(SendPhoto.REPLYTOMESSAGEID_FIELD, sendPhoto.getReplayToMessageId().toString()); } if (sendPhoto.getCaption() != null) { builder.addTextBody(SendPhoto.CAPTION_FIELD, sendPhoto.getCaption(), ContentType.create(""text/plain"", StandardCharsets.UTF_8)); } if (sendPhoto.getDisableNotification() != null) { builder.addTextBody(SendPhoto.DISABLENOTIFICATION_FIELD, sendPhoto.getDisableNotification().toString()); } HttpEntity multipart = builder.build(); httppost.setEntity(multipart); } else { List<NameValuePair> nameValuePairs = new ArrayList<>(); nameValuePairs.add(new BasicNameValuePair(SendPhoto.CHATID_FIELD, sendPhoto.getChatId())); nameValuePairs.add(new BasicNameValuePair(SendPhoto.PHOTO_FIELD, sendPhoto.getPhoto())); if (sendPhoto.getReplayMarkup() != null) { nameValuePairs.add(new BasicNameValuePair(SendPhoto.REPLYMARKUP_FIELD, sendPhoto.getReplayMarkup().toJson().toString())); } if (sendPhoto.getReplayToMessageId() != null) { nameValuePairs.add(new BasicNameValuePair(SendPhoto.REPLYTOMESSAGEID_FIELD, sendPhoto.getReplayToMessageId().toString())); } if (sendPhoto.getCaption() != null) { nameValuePairs.add(new BasicNameValuePair(SendPhoto.CAPTION_FIELD, sendPhoto.getCaption())); } if (sendPhoto.getDisableNotification() != null) { nameValuePairs.add(new BasicNameValuePair(SendPhoto.DISABLENOTIFICATION_FIELD, sendPhoto.getDisableNotification().toString())); } httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs, StandardCharsets.UTF_8)); }  try (CloseableHttpResponse response = httpclient.execute(httppost)) { HttpEntity ht = response.getEntity(); BufferedHttpEntity buf = new BufferedHttpEntity(ht); responseContent = EntityUtils.toString(buf, StandardCharsets.UTF_8); } } catch (IOException e) { throw new TelegramApiException(""Unable to send photo"", e); }  JSONObject jsonObject = new JSONObject(responseContent); if (!jsonObject.getBoolean(Constants.RESPONSEFIELDOK)) { throw new TelegramApiException(""Error at sendPhoto"", jsonObject.getString(ERRORDESCRIPTIONFIELD), jsonObject.getInt(ERRORCODEFIELD)); }  return new Message(jsonObject.getJSONObject(Constants.RESPONSEFIELDRESULT)); } "	0	0	0	0	0	1
@Test public void testGetKidItems() { assertNull(item.getKidItems()); item.populate(new TestItem() { @Override public long[] getKids() { return new long[]{1l, 2l}; } }); assertThat(item.getKidItems()).hasSize(2); assertEquals(1, item.getKidItems()[0].getRank()); assertEquals(2, item.getKidItems()[1].getRank()); } 	0	0	0	0	1	0
"public static synchronized void start(String repository) throws Exception { if (count == 0) { TestUtils.shutdownFailsafe(TESTING_PORT); ConfigurationContext er = getNewConfigurationContext(repository);  receiver = new SimpleHTTPServer(er, TESTING_PORT);  try { receiver.start(); ListenerManager listenerManager = er.getListenerManager(); TransportInDescription trsIn = new TransportInDescription(Constants.TRANSPORT_HTTP); trsIn.setReceiver(receiver); if (listenerManager == null) { listenerManager = new ListenerManager(); listenerManager.init(er); } listenerManager.addListener(trsIn, true); System.out.print(""Server started on port "" + TESTING_PORT + "".....""); } catch (Exception e) { e.printStackTrace(); } }  try { Thread.sleep(2000); } catch (InterruptedException e1) { throw new AxisFault(""Thread interuptted"", e1); }  waitForService();  count++; } "	0	0	0	0	1	0
"public void init() { aliens = new Vector<Alien>(0); alienBullets = new Vector<Bullet>(0); shipBullets = new Vector<Bullet>(0); barriers = new Vector<Barrier>(0);  logfile = LogFile.getInstance(); logfile.open(); logfile.writeString(""Game started at "" + new Date());  spaceship = new Spaceship();  highscoremanager = new HighscoreManager();  level = LevelFactory.createLevel(levelNumber); aliens = level.createAliens(); barriers = level.createBarriers(); } "	0	0	0	0	1	0
"public static void initializeDebug(){ if (forceDebugEnabled || isDeobfEnvironment){ Display.setTitle(new StringBuilder().append(Display.getTitle()).append("" - HardcoreEnderExpansion - "").append(isDeobfEnvironment ? ""dev"" : ""debug"").append(' ').append(HardcoreEnderExpansion.modVersion).toString()); } } "	0	0	0	0	1	0
"@Procedure @Description(""apoc.mongodb.count(host-or-port,db-or-null,collection-or-null,query-or-null) yield value - perform a find operation on mongodb collection"") public Stream<LongResult> count(@Name(""host"") String hostOrKey, @Name(""db"") String db, @Name(""collection"") String collection, @Name(""query"") Map<String,Object> query) { long count = getColl(hostOrKey, db, collection).count(query); return Stream.of(new LongResult(count)); } "	0	0	0	0	1	0
"@Procedure @Description(""apoc.mongodb.first(host-or-port,db-or-null,collection-or-null,query-or-null) yield value - perform a first operation on mongodb collection"") public Stream<MapResult> first(@Name(""host"") String hostOrKey, @Name(""db"") String db, @Name(""collection"") String collection, @Name(""query"") Map<String,Object> query) { Map<String, Object> result = getColl(hostOrKey, db, collection).first(query); return Stream.of(new MapResult(result)); } "	0	0	0	0	1	0
public void update(float deltaTime) { // TODO: instant build on Y press. remove before realease :^)  selectedSign.setPosition(this.getPosition().x-0.5f, this.getPosition().y-0.5f);  if(health <= 0) getScene().removeObject(this);  for(GameObject g : getScene().getObjects()) { if(g instanceof Projectile) { if(this.city != ((Projectile)g).getOwner().getCity()) { if(g.getHitbox().collision(getHitbox())) { onHit(((Projectile)g)); ((Projectile)g).onHit(); } } } }  if (Gdx.input.isKeyJustPressed(Keys.Y)) { inputInventory.add(type.getBuildResourcesArray()); }  if (buildState == BuildState.Clearing) { if (toClear.size() > 0) assignGetPropTask(toClear); else buildState = BuildState.InProgress; } else if (buildState == BuildState.InProgress) { // check if inventory contains all materials. if so, building is done (plus some work?) if (isBuildingDone()) { buildState = BuildState.Done; startProduction(); inputInventory.remove(type.getBuildResourcesArray()); setSprite(type.getSprite()); } else { assignGatherTask(toGather); } } else { // regular production if (productionGatheringDone()) { inputInventory.remove(type.getInputResourcesArray()); outputInventory.add(type.getOutputResourceArray()); startProduction(); } else { assignGatherTask(toGather); } } } 	0	0	0	0	1	0
"public void finishEvent(BinlogEventV4HeaderImpl header) throws IOException { // Ensure the packet boundary if(this.available() != 0) { throw new RuntimeException(""assertion failed!  We left "" + this.available() + ""unconsumed bytes in the buffer for event: "" + header); }  if ( isChecksumEnabled() && header.getEventType() != MySQLConstants.FORMAT_DESCRIPTION_EVENT) { long calculatedCRC = crc.getValue(); this.setReadLimit(0); Long checksum = this.readLong(4); if ( checksum.longValue() != calculatedCRC ) { throw new CRCException(header); } } } "	0	0	1	1	0	0
public boolean hasImagem() { return !imagem.contains(CadastrarFornecedor.NO_IMG); } 	0	0	0	1	1	0
@Override public Object get(Object key) { Entry result = (Entry) super.get(key); if(result != null) { if(!result.isActive()) { remove(key); result = null; } } return result; } 	0	0	0	0	1	0
@Override public void appendToResponse(WOResponse response, WOContext context) { if(entry == null) { WOResponse newResponse = application().createResponseInContext(context); newResponse.setHeaders(response.headers()); newResponse.setUserInfo(response.userInfo()); super.appendToResponse(newResponse, context); String content = newResponse.contentString(); entry = new Entry(content, cacheDuration(), (context.hasSession() ? context.session().sessionID() : null)); cache.put(values(), entry); } String content = entry.content(context); response.appendContentString(content); } 	0	0	0	0	0	1
"@Override public void start(Stage primaryStage) throws Exception { if(checkOnlineVersion()){ Alert alert = new Alert(AlertType.CONFIRMATION); alert.setTitle(APP_NAME); alert.setHeaderText(""A new version is available !""); alert.setContentText(String.format(""A new version of %s is available online !"", APP_NAME));  ButtonType buttonWeb = new ButtonType(""Get Update""); ButtonType buttonCancel = new ButtonType(""Continue"", ButtonData.CANCEL_CLOSE);  alert.getButtonTypes().setAll(buttonWeb, buttonCancel);  Optional<ButtonType> result = alert.showAndWait(); if (result.get() == buttonWeb){ if(Desktop.isDesktopSupported()){ new Thread(() -> { try { URI uri = new URI(""https://drive.google.com/open?id=0B2162Wd9vePmRXdieVc2QzdraFU""); Desktop.getDesktop().browse(uri); System.exit(0); } catch (IOException | URISyntaxException e) { ErrorPrint.printError(e); e.printStackTrace(); } }).start(); } } else {  } } if(initApp()){ //Clean debug log file File debugFile = new File(""DebugLog.txt""); if(debugFile.exists()) debugFile.delete();  //Create a dir to save lists of the selected game xmlDir = new File(GAME); if(!xmlDir.exists()) xmlDir.mkdir();  new ListManager(PATH); } } "	0	0	1	0	1	0
@Test(expected = CancellationException.class) public void testGetFutureAfterCancel() throws InterruptedException, ExecutionException, TimeoutException { IExecutorService service = client.getExecutorService(randomString()); CancellationAwareTask task = new CancellationAwareTask(5000);  Future future = service.submit(task); try { future.get(1, TimeUnit.SECONDS); } catch (TimeoutException ignored) { } future.cancel(true);  future.get(); } 	0	0	0	0	1	0
"public void launchInterface(Object configInfo){ super.launchInterface(configInfo);  try{ driver = (DriverInterface) configInfo; if(log==null){ log = new LogUtilities(this.staf); } dc = new RESTDriverCommand(); dc.setLogUtilities(log);  }catch(Exception x){ IndependantLog.error(""TIDDriverLogCommands requires a valid DriverInterface object for initialization!\n""+ x.getMessage()); } } "	0	0	0	0	1	0
"private int getNbSubIntervals(final DistanceUnit scaleUnit, final double intervalDistance, final DistanceUnit intervalUnit) { double value = scaleUnit.convertTo(intervalDistance, intervalUnit); int digits = (int) (Math.log(value) / Math.log(10)); double pow10 = Math.pow(10, digits);  // ok, find first character int firstChar = (int) (value / pow10); switch (firstChar) { case 1: return 2; case 2: return 2; case 5: return 5; case 10: return 2; default: throw new RuntimeException(""Invalid interval: "" + value + intervalUnit + "" ("" + firstChar + "")""); } } "	0	0	0	1	0	0
private DistanceUnit bestUnit(final DistanceUnit scaleUnit, final double intervalDistance, final boolean lockUnits) { if (lockUnits) { return scaleUnit; } else { return DistanceUnit.getBestUnit(intervalDistance, scaleUnit); } } 	0	0	0	1	0	0
private int getFontSize(final ScaleBarRenderSettings settings) { return (int) Math.ceil(settings.getParams().fontSize * settings.getDpiRatio()); } 	0	0	0	1	0	0
@Override public int getItemCount() { return videoData.length; } 	0	0	1	0	1	0
"private void playBeepOnExit(final ActorRef source) throws URISyntaxException{ //TODO: read it from config after testing String path = ""/restcomm/audio/""; String entryAudio = ""alert.wav""; path += entryAudio == null || entryAudio.equals("""") ? ""beep.wav"" : entryAudio; URI uri = null; uri = UriUtils.resolve(new URI(path)); final Play play = new Play(uri, 1); msConferenceController.tell(play, source); } "	0	0	0	0	1	0
"public String getCombinedBarcodesFor(int sampleIndex) { // TODO: changed the combination method!!!! // TODO: be sure that it is working!!! return String.join(""_"", getBarcodesFor(sampleIndex)); } "	0	0	0	0	1	0
@Override public void onLoadFinished(Loader<Object> loader, Object data) { String response = (String) data; switch (loader.getId()) { case LIVELINKS: handleLivelinksResponse(response); break;  case FETCH_MESSAGE: onReceiveUpdate(response); subscribeToUpdates(); break; } } 	0	0	0	0	1	0
"@Override public void channelInactive(ChannelHandlerContext ctx) throws Exception { // Stop the connector timer ctx.close(); if (HTTPTransportContextHolder.getInstance().getHandlerExecutor() != null) { HTTPTransportContextHolder.getInstance().getHandlerExecutor() .executeAtSourceConnectionTermination(Integer.toString(ctx.hashCode())); }  if (connectionManager.getPoolConfiguration().getNumberOfPools() == 0) { targetChannelPool.forEach((k, genericObjectPool) -> { try { genericObjectPool.close(); } catch (Exception e) { log.error(""Couldn't close target channel socket connections"", e); } }); } else if (connectionManager.getPoolConfiguration().getNumberOfPools() == 2) { targetChannelPerHostPool.forEach((k, targetChannel) -> targetChannel.getChannel().close()); }  connectionManager.notifyChannelInactive(); } "	0	0	0	0	1	0
@Test public void testOnStartup_firstLaunch() { long today = DateUtils.getStartOfToday();  when(prefs.isFirstRun()).thenReturn(true); behavior.onStartup(); verify(prefs).setFirstRun(false); verify(prefs).updateLastHint(-1, today); verify(screen).showIntroScreen(); } 	0	0	0	0	1	0
public String getAdmin() { return this.hallAdmin; } 	0	0	0	0	1	0
"@Test /* testing model-validate xml for unsupported datatype */ public void testModelValidateXmlUnsupportedDatatype() throws JsonParseException, JsonMappingException, IOException, TestEvalException, SAXException, ParserConfigurationException, TransformerException { logger.info(""Checking invalid-bad-datatype.xml""); JacksonHandle handle = null; try { handle = evalOneResult("""", ""es:model-validate(fn:doc('invalid-bad-datatype.xml'))"", new JacksonHandle()); fail(""eval should throw an exception for unsupported datatypes""); } catch (TestEvalException e) { logger.info(e.getMessage()); assertTrue(""Must contain invalidity message but got: ""+e.getMessage(), e.getMessage().contains(""ES-MODEL-INVALID: Unsupported datatype: botcheddt."")); } } "	0	0	0	0	1	0
"@Test /* testing model-validate json for missing info */ public void testModelValidateJsonMissingInfo() throws JsonParseException, JsonMappingException, IOException, TestEvalException, SAXException, ParserConfigurationException, TransformerException { logger.info(""Checking invalid-missing-info.json""); JacksonHandle handle = null; try { handle = evalOneResult("""", ""es:model-validate(fn:doc('invalid-missing-info.json'))"", new JacksonHandle()); fail(""eval should throw an exception for missing info""); } catch (TestEvalException e) { logger.info(e.getMessage()); assertTrue(""Must contain invalidity message but got: ""+e.getMessage(), e.getMessage().contains(""ES-MODEL-INVALID: Entity Type Document must contain exactly one info section."")); } } "	0	0	0	0	1	0
"@Test public void shouldHandleEmptyTest() { // given assertThat(new XmlSchemaValidator(XML_SCHEMA).isValid( """"), is(""Premature end of file."")); } "	0	0	0	0	1	0
@Override public EconomyResponse depositPlayer(OfflinePlayer player, double amount) { return depositPlayer(UuidUtil.requestUuid(player).toString(), amount); } 	0	0	0	0	1	0
"@Override public boolean onKeyDown(int keyCode, KeyEvent event) {  if (keyCode == KeyEvent.KEYCODE_BACK) { GodotLib.quit(); // press 'back' button should not terminate program //normal handle 'back' event in game logic return true; }  if (keyCode == KeyEvent.KEYCODE_VOLUME_UP || keyCode == KeyEvent.KEYCODE_VOLUME_DOWN) { return super.onKeyDown(keyCode, event); };  int source = event.getSource(); //Log.e(TAG, String.format(""Key down! source %d, device %d, joystick %d, %d, %d"", event.getDeviceId(), source, (source & InputDevice.SOURCE_JOYSTICK), (source & InputDevice.SOURCE_DPAD), (source & InputDevice.SOURCE_GAMEPAD)));  if ((source & InputDevice.SOURCE_JOYSTICK) != 0 || (source & InputDevice.SOURCE_DPAD) != 0 || (source & InputDevice.SOURCE_GAMEPAD) != 0) {  if (event.getRepeatCount() > 0) // ignore key echo return true; int button = get_godot_button(keyCode); int device = find_joy_device(event.getDeviceId());  //Log.e(TAG, String.format(""joy button down! button %x, %d, device %d"", keyCode, button, device));  GodotLib.joybutton(device, button, true); return true;  } else { GodotLib.key(keyCode, event.getUnicodeChar(0), true); }; return super.onKeyDown(keyCode, event); } "	0	0	0	0	1	0
"private void updateResourcesForWorkaround(String resourceType) { @SuppressWarnings(""unchecked"") List<Map<String, Object>> resources = (List<Map<String, Object>>) config.get(resourceType); if (resources != null) { List<Map<String, Object>> resourcesForWorkaround = getResourcesForWorkaround(resources); if (!resourcesForWorkaround.isEmpty()) { List<Map<String, Object>> updatedResources = Lists.newArrayList(Iterables.filter(resources, Predicates.not(Predicates.in(resourcesForWorkaround))));  nameValue(resourceType, updatedResources);  addToProfile(SenchaUtils.DEVELOPMENT_PROFILE, resourceType, resourcesForWorkaround); addToProfile(SenchaUtils.TESTING_PROFILE, resourceType, resourcesForWorkaround); addToProfile(SenchaUtils.PRODUCTION_PROFILE, resourceType, getConvertedResourcesForProduction(resourcesForWorkaround)); } } } "	0	0	1	0	1	0
private void clearDecorations(int limit) { if (WorldTypeRTG.chunkProvider != this) return; IChunkProvider ichunkprovider = worldObj.getChunkProvider(); Set<PlaneLocation> toProcess = doableLocations(limit); for (PlaneLocation location: toProcess) { toDecorate.remove(location); } for (PlaneLocation location: toProcess) { doPopulate(ichunkprovider,location.x(),location.z()); } } 	0	0	0	0	1	0
"private View createTabContent(String tabName, int count) { View view = LayoutInflater.from(this).inflate(R.layout.project_details_tab, null); TextView countText = (TextView) view.findViewById(R.id.count); TextView tabNameText = (TextView) view.findViewById(R.id.tab_name);  DecimalFormat formatter = new DecimalFormat(""#,###,###""); countText.setText(formatter.format(count)); tabNameText.setText(tabName);  return view; } "	0	0	0	0	1	0
"private void speak() { CharSequence text = poem.get(); int startPosition = Selection.getSelectionStart(text); if (startPosition == text.length() || startPosition == -1) startPosition = 0; int endPosition = Selection.getSelectionEnd(text); if (startPosition == endPosition || endPosition == -1) endPosition = text.length(); Log.d(TAG, ""selection "" + startPosition + "" - "" + endPosition); mTts.speak(text.toString().substring(startPosition, endPosition)); } "	0	0	0	0	1	0
"@Override public void showValue(final List<String> value) { if (attached) { TagsManager.Bridge.element(inputElement).setTags(value); } else { inputElement.setValue(String.join("", "", value)); } } "	0	0	0	0	1	0
@Override public int compare(Vector2f v1, Vector2f v2) { SaboteurGame instance = SaboteurGame.instance;  return ((int) ((instance.getAngleToPlayer(v1) - instance.getAngleToPlayer(v2)) * 100d)); } 	0	0	0	0	1	0
"private static User getAttributes(DirContext ctx, String searchBase, String userName, String principalDomain) throws NamingException, SQLException { Map<String, String> userDetailMap = getUserAttributes(ctx, searchBase, userName, principalDomain, LDAP_DISPLAY_NAME_KEY, LDAP_MAIL_KEY, LDAP_DEPARTMENT_NUMBER_KEY);  String displayName = userDetailMap.get(LDAP_DISPLAY_NAME_KEY); String[] displayNameTokens = displayName.trim().replaceAll("" +"", "" "").split("" ""); String firstName = displayNameTokens[0]; String lastName = displayNameTokens[1]; String email = userDetailMap.get(LDAP_MAIL_KEY); String department = userDetailMap.get(LDAP_DEPARTMENT_NUMBER_KEY); int departmentNum = 0; if (StringUtils.isNotBlank(department)) { try { departmentNum = Integer.parseInt(department); } catch (NumberFormatException e) { Logger.error(""Convert department number failed. Error message: "" + e.getMessage()); departmentNum = 0; } } User user = new User(); user.email = email; user.userName = userName; user.name = firstName + "" "" + lastName; user.departmentNum = departmentNum; return user; } "	0	0	1	0	0	0
public static EventIO subscribeEIO(CluckNode node, String path) { return EventIO.compose(subscribeEI(node, path), subscribeEO(node, path)); } 	0	0	0	0	1	0
public static BooleanIO subscribeBIO(CluckNode node, String path, boolean subscribeByDefault) { return BooleanIO.compose(subscribeBI(node, path, subscribeByDefault), subscribeBO(node, path)); } 	0	0	0	0	1	0
@Override protected Void doInBackground(Void... voids) { put(url, obj, expiresAt); return null; } 	0	0	0	0	1	0
private LineStop passThrough(LineStop item, Function<LineStop, LineStop.Builder> function) { LineStop.Builder builder = function.apply(item); LineStop next = item.getNext();  if (builder != null) { while (next != null) { builder.addNext(function.apply(next)); next = next.getNext(); } }  return builder != null ? builder.build() : null; } 	1	0	0	0	1	0
"@Override public Command parse(String userCommand) { assert userCommand != null; logger.entering(""JJParser"", ""parse"", userCommand); UserCommandLexer lexer = new UserCommandLexer(new ANTLRInputStream(userCommand)); lexer.setAliases(aliases); UserCommandParser parser = new UserCommandParser(new CommonTokenStream(lexer)); ParseTree tree = parser.cmd(); JoltCommandVisitor visitor = new JoltCommandVisitor(userCommand); try { return visitor.visit(tree); } catch (RuntimeException e) { logger.log(Level.INFO, ""Exception parsing \""{0}\"": {1}"", new Object[] { userCommand, e }); if (e.getMessage() == null) { return new InvalidCommand(""This feature is not yet implemented.""); } else { return new InvalidCommand(e.getMessage()); } } } "	0	0	0	0	1	0
"public static boolean validateParams(String responseType, String clientId, List<Prompt> prompts, String nonce, String request, String requestUri) { List<ResponseType> responseTypes = ResponseType.fromString(responseType, "" ""); if (responseTypes.contains(ResponseType.TOKEN) || responseTypes.contains(ResponseType.ID_TOKEN)) { if (StringUtils.isBlank(nonce)) { return false; } }  if (StringUtils.isNotBlank(request) && StringUtils.isNotBlank(requestUri)) { return false; }  boolean validParams = responseType != null && !responseType.isEmpty() && clientId != null && !clientId.isEmpty();  return validParams && validatePrompt(prompts); } "	0	0	0	0	1	0
@Override public void notifyRoundOver(){ setNewRoundEnabled(true); } 	0	0	0	0	1	0
"@NotNull private static CompilerConfiguration createConfiguration(String pathToPluginFolder, String pluginId, final ErrorReporter errorReporter) { MessageCollector messageCollector = new MessageCollector() { boolean hasErrors = false; @Override public void report(@NotNull CompilerMessageSeverity severity, @NotNull String message, @NotNull CompilerMessageLocation location) { if (severity == ERROR || severity == EXCEPTION) { errorReporter.addLoadingError(pluginId, PLAIN_FULL_PATHS.render(severity, message, location)); hasErrors = true; } } @Override public boolean hasErrors() { return hasErrors; } @Override public void clear() {} };  CompilerConfiguration configuration = new CompilerConfiguration(); configuration.put(MESSAGE_COLLECTOR_KEY, messageCollector); configuration.put(MODULE_NAME, ""LivePluginScript""); JvmContentRootsKt.addJvmClasspathRoots(configuration, PathUtil.getJdkClassesRoots()); configuration.add(CONTENT_ROOTS, new KotlinSourceRoot(pathToPluginFolder)); configuration.add(SCRIPT_DEFINITIONS, new KotlinScriptDefinition(Reflection.createKotlinClass(KotlinScriptTemplate.class))); configuration.put(RETAIN_OUTPUT_IN_MEMORY, false);  String ideaJarPath = PathManager.getJarPathForClass(IntelliJLaf.class); assert ideaJarPath != null; File[] ijLibFiles = new File(ideaJarPath).getParentFile().listFiles(); assert ijLibFiles != null; for (File file : ijLibFiles) { configuration.add(CONTENT_ROOTS, new JvmClasspathRoot(file)); }  for (String fileName : fileNamesMatching(DownloadKotlinCompilerLib.LIB_FILES_PATTERN, LIVEPLUGIN_LIBS_PATH)) { configuration.add(CONTENT_ROOTS, new JvmClasspathRoot(new File(LIVEPLUGIN_LIBS_PATH + ""/"" + fileName))); } String ideLibFolderPath = new File(ideaJarPath).getParentFile().getAbsolutePath(); for (String fileName : fileNamesMatching(""kotlin-.*jar"", ideLibFolderPath)) { configuration.add(CONTENT_ROOTS, new JvmClasspathRoot(new File(ideLibFolderPath + ""/"" + fileName))); }  configuration.add(CONTENT_ROOTS, new JvmClasspathRoot(new File(LIVEPLUGIN_LIBS_PATH))); configuration.add(CONTENT_ROOTS, new JvmClasspathRoot(new File(PathManager.getPluginsPath() + ""/LivePlugin/classes"")));  // TODO add other plugins jars?  return configuration; } "	0	0	0	0	0	1
"private void selectPos(int pos) { if (checkMode == CHECK_SINGLE_FUTURE) { setSingleCheck(pos); } Log.d(TAG, ""selectPos: "" + pos); getListView().setItemChecked(pos, true); } "	1	0	0	0	0	0
public static void pop() { get().scopeStack.pop(); } 	1	0	1	0	1	0
"@RequestMapping(""/supplier/manageFoodItem"") public String manageFoodItem(ModelMap model){ model.addAttribute(""foodItems"", this.supplierService.getAllFoodItems()); return ""manageFoodItem""; } "	0	0	0	0	1	0
public void launchOwnQuery(View view) throws Exception { String customQuery = customQueryText.getText().toString();  Intent dbViewIntent = new Intent(this, DatabaseListFragment.class); dbViewIntent.putExtra(LibraryConstants.PREFS_KEY_QUERY, customQuery); startActivity(dbViewIntent); } 	0	0	0	0	1	0
@Override protected MeetingPagerAdapter doInBackground(Void... param) { if (meetingId < 0) { Meeting newMeeting = Meeting.createNewMeeting(MeetingActivity.this); mMeetingId = newMeeting.getId(); } else { mMeetingId = meetingId; } int teamId = PreferenceManager.getDefaultSharedPreferences(MeetingActivity.this).getInt(Constants.PREF_TEAM_ID, Constants.DEFAULT_TEAM_ID); return new MeetingPagerAdapter(MeetingActivity.this, teamId, getSupportFragmentManager()); } 	1	0	0	0	1	0
"public Location findText(String text) { String imageLocation = server.captureRegion(new String[]{}); List<Location> coordinates = this.findTextFromImage(text, imageLocation); if (coordinates.size() == 0) { throw new RuntimeException(""Text ""+text+"" not found from page""); } else { if (coordinates.size() > 1) { SikuliLogger.log(""Text found multiple times from page, clicking first occurrence""); } return coordinates.get(0); } } "	0	0	0	0	1	0
"private void repairMissingDisplayNames() { SqlJobTaskBase task = new SqlJobTaskBase(this.getActivity(), ""Searching media database for missing 'displayname'-s:\n"", null) { private int mPathColNo = -2; private int mResultCount = 0;  @Override protected void doInBackground(Long id, Cursor cursor) { if (mPathColNo == -2) mPathColNo = cursor.getColumnIndex(FotoSql.SQL_COL_PATH); mResultCount += MediaScanner.updatePathRelatedFields(getActivity(), cursor, cursor.getString(mPathColNo), mColumnIndexPK, mPathColNo); }  @Override protected void onPostExecute(SelectedItems selectedItems) { if (!isCancelled()) { onMissingDisplayNamesComplete(mResultCount, mStatus); } } }; QueryParameter query = FotoSql.queryGetMissingDisplayNames; task.execute(query); } "	1	0	0	1	0	0
"private int makePurchase() { int itemCount = storeInventory[getButtonIndex(currentItem)].getMax() - storeInventory[getButtonIndex(currentItem)].getCount(); currentBuyers = p.canGetItem(currentItem, itemCount); //The player doesn't have a wagon and is trying to buy one if ( currentItem == Item.ITEM_TYPE.WAGON && p.getVehicle() == null ) { //The player tries to buy too many wagons if ( itemCount > 1 ) { String errorText = ""Please buy a single wagon first!""; failedBuyModal = new Modal(container, this, errorText, ""Ok""); return -1; } //The player is able to buy the wagon else if ( p.getMoney() > currentItem.getCost() ) { p.setVehicle(new Wagon()); inv.removeItem(currentItem, 1); p.setMoney(p.getMoney() - Item.ITEM_TYPE.WAGON.getCost()); storeInventory[getButtonIndex(currentItem)].setMax(inv.getNumberOf(currentItem)); updateLabels(currentItem); return 1; //The player doesn't have enough money to buy a wagon at all } else { String errorText = ""You don't have enough money to buy a wagon."" + ""\nBetter prepare to make it on foot.""; failedBuyModal = new Modal(container, this, errorText, ""Ok""); return -1; } //Display modal if the user can not buy the currently selected item } else if ( currentBuyers.size() == 0 ) { String errorText; if (p.getMoney() < itemCount * currentItem.getCost()) { errorText = ""You don't have enough money for this purchase.""; } else { errorText = ""No one can carry that much weight!""; } failedBuyModal = new Modal(container, this, errorText, ""Ok""); return -1; //Make the purchase } else { currentPurchase = inv.removeItem(currentItem, itemCount); String[] names = new String[currentBuyers.size()]; for (int i = 0; i < names.length; i++) { names[i] = currentBuyers.get(i).getName(); } SegmentedControl choosePlayer = new SegmentedControl(container, 400, 200, 3, 2, 20, true, 1, names); buyModal = new Modal(container, this, ""Choose who will buy this item"", choosePlayer, ""Buy"", ""Cancel""); return 0; } } "	0	0	0	0	1	0
"private String createUserID(String role) throws SQLException { //creates an int to make a unique ID int uniqueID = 9000000;  //string version of ID String strUniqueID = """";  //for the next auto increment int nextIncrement = 0;  //to hold results ResultSet rs = null;  //the final ID String finalID = """";  //create query to get the next auto increment String IDQuery = ""SELECT AUTO_INCREMENT FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'mentcare' AND TABLE_NAME = 'Users'"";  //try to connect to db try (Connection conn = DBConfig.getConnection(); PreparedStatement getID = conn.prepareStatement(IDQuery, Statement.RETURN_GENERATED_KEYS);) { //print query System.out.println(""Query Sent"" + getID.toString());  //get the result set and execute query rs = getID.executeQuery();  //move through the results if (rs.next()) { //get the next auto increment nextIncrement = rs.getInt(""AUTO_INCREMENT""); System.out.println(""nextIncrement"" + nextIncrement); } }//end try  //add the auto increment to the number to make ID uniqueID = uniqueID + nextIncrement;  //turn it to string strUniqueID = """" + uniqueID;  //replace that first number strUniqueID.replaceFirst(strUniqueID, ""0"");  finalID = role + strUniqueID; return finalID; }//end method "	0	0	0	0	1	0
"private String getInput() { System.out.print(""-> ""); return input.nextLine(); } "	0	0	1	0	1	0
public boolean isItem(int slot, Item item) { return inventoryContents[slot] != ItemStack.EMPTY && inventoryContents[slot].getItem() == item; } 	0	0	0	0	1	0
@Override public ItemStack removeStackFromSlot(int i) { if (i >= inventoryContents.length) return ItemStack.EMPTY;  if (inventoryContents[i] != ItemStack.EMPTY) { ItemStack itemstack = inventoryContents[i]; inventoryContents[i] = ItemStack.EMPTY; return itemstack; }  return ItemStack.EMPTY; } 	0	0	1	0	1	0
public ArrayList<Integer> getPencils(int row, int col) { return cells[row - 1][col - 1].getPencils(); } 	0	0	0	0	1	0
"private String buildGroupName(String groupName) { assert groupName != null;  String result = null;  if (groupName.equals(GroupData.NOT_GROUPED) || groupName.isEmpty()) { // only the note name result = """"; } else { // group name upfront result = ""["" + groupName + ""] ""; }  return result; } "	0	0	0	0	1	0
"@Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {  List<String> generatedClasses = new ArrayList<>(); String generatedPrefix = ""RxRetroBus_"";  // Get the Retrofit interfaces annotated with GenerateEvents for (Element element : roundEnv.getElementsAnnotatedWith(GenerateEvents.class)) {  String baseType = element.asType().toString(); String baseClassName = element.getSimpleName().toString(); String generatedClassName = generatedPrefix + baseClassName;  //Add generated Class to create Clients file generatedClasses.add(generatedClassName);  String baseUrl = element.getAnnotation(GenerateEvents.class).baseUrl();  //Package and imports StringBuilder builder = new StringBuilder() .append(""package com.blarley.rxretrobusseed.annotationprocessor.generated;\n\n"") .append(""import retrofit2.Retrofit;\n"" + ""import io.reactivex.android.schedulers.AndroidSchedulers;\n"" + ""import io.reactivex.functions.Consumer;\n"" + ""import io.reactivex.schedulers.Schedulers;\n"" + ""import com.blarley.rxretrobusseed.library.bus.RxRetroBus;\n"");  //Begin class definition builder.append(""public class "" + generatedClassName + "" {\n\n"");  //Retrofit client impl builder.append(""\tprivate "" + baseType + "" client;\n"");  builder.append(""\tprivate RxRetroBus bus;\n"");  //Constructor - builds Retrofit client builder.append(""\tpublic "" + generatedClassName + ""(Retrofit.Builder retrofitBuilder, RxRetroBus bus) { \n"" + ""\t\tthis.client = retrofitBuilder.baseUrl(\"""" + baseUrl + ""\"")\n"" + ""\t\t.build()\n"" + ""\t\t.create("" + baseType + "".class);\n"" + ""\t\tthis.bus = bus;\n"" + ""\t}\n\n"");  //Get Annotated methods within the class - the builds the method used to make calls for (Element subElement : roundEnv.getElementsAnnotatedWith(Publish.class)) {  // ExecutableElements represent methods (among other things) - TODO: Figure out how this can break if (subElement instanceof ExecutableElement) {  //Cast to ExecutableElement in order to get Parameters ExecutableElement method = (ExecutableElement) subElement; String methodName = method.getSimpleName().toString();  // Begin definition of method builder.append(""\tpublic void "" + methodName + ""("");  // Append parameters to method definition - TODO: Figure out how this can break String delim = """"; StringBuilder params = new StringBuilder(); StringBuilder args = new StringBuilder(); for (VariableElement param : method.getParameters()) { params.append(delim) .append(param.asType() + "" "") .append(param.getSimpleName().toString());  args.append(delim) .append(param.getSimpleName().toString()); delim = "", ""; }  //Append the parameters to the method definition and open declaration builder.append(params) .append("") {\n"");  //Need to strip off the Observable and get parameterized class //TODO: Is this a better way to do this? String observable = method.getReturnType().toString(); Pattern regex = Pattern.compile(""<(.*?)>""); Matcher matcher = regex.matcher(observable); String innerClass = """"; while (matcher.find()) { innerClass += matcher.group(1); }  Publish annotation = method.getAnnotation(Publish.class); //TODO: Build a model for this and pass that into the method  builder.append(""\t\tbus.addObservable(client."" + methodName + ""("") .append(args) .append(""),"") .append(innerClass + "".class, \"""") .append(annotation.eventName() + ""\"", "") .append(annotation.cacheResult() + "");\n"");  //End method definition builder.append(""\t}\n""); } }  //End Class definition builder.append(""}\n"");  //Write the file try { JavaFileObject source = processingEnv.getFiler().createSourceFile(""com.blarley.rxretrobusseed.annotationprocessor.generated."" + generatedClassName);  Writer writer = source.openWriter(); writer.write(builder.toString()); writer.flush(); writer.close(); } catch (IOException e) { } }  //Clients String builder StringBuilder clientsFile = new StringBuilder() .append(""package com.blarley.rxretrobusseed.annotationprocessor.generated;\n\n"") .append(""import retrofit2.Retrofit;\n\n"") .append(""import com.blarley.rxretrobusseed.library.bus.RxRetroBus;\n\n"") .append(""public class Clients {\n"");  StringBuilder constructorDefinition = new StringBuilder();  //Append the instance fields for(String generatedClass: generatedClasses) { String[] str = generatedClass.split(""_""); String baseClassName = str[1]; clientsFile.append(""\tpublic "" + generatedClass + "" "" + baseClassName + "";\n"");  constructorDefinition.append(""\t\tthis."" + baseClassName + "" = new "" + generatedClass + ""(retrofitBuilder, bus);\n""); }  //Append the constructor declaration clientsFile.append(""\n\tpublic Clients(Retrofit.Builder retrofitBuilder, RxRetroBus bus) {\n"");  //Append the constructor definition clientsFile.append(constructorDefinition);  //Close the constructor and class clientsFile.append(""\t}\n"") .append(""}"");  try { JavaFileObject source = processingEnv.getFiler().createSourceFile(""com.blarley.rxretrobusseed.annotationprocessor.generated.Clients"");  Writer writer = source.openWriter(); writer.write(clientsFile.toString()); writer.flush(); writer.close(); } catch (IOException e) { }  return true; } "	0	0	0	0	1	0
private void sendNotificationsIfEnabled(String lastDataTimestamp) { if (isNotificationEnabled()) {  final Uri uri = IssueEntry.buildIssueUriWithStatusAndCreatedDate(STATUS_ISSUE_OPEN, lastDataTimestamp);  final Cursor data = mContext.getContentResolver().query(uri, ISSUES_COLUMNS, null, null, null);  final NotificationManager notificationManager = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);  if (data != null) { final Set<ProjectData> projectDataSet = new HashSet<>();  while (data.moveToNext()) { final int issueId = data.getInt(INDEX_ISSUE_ID); final String projectId = data.getString(INDEX_PROJECT_ID); final String projectName = data.getString(INDEX_PROJECT_NAME); final String issueKey = data.getString(INDEX_ISSUE_KEY); final String summary = data.getString(INDEX_ISSUE_SUMMARY);  projectDataSet.add(new ProjectData(projectId, projectName));  final Intent intent = new Intent(mContext, IssueDetailActivity.class); intent.setData(IssueEntry.buildIssueUriFromIssueId(String.valueOf(issueId))); final PendingIntent pendingIntent = PendingIntent.getActivity(mContext, 1, intent, PendingIntent.FLAG_UPDATE_CURRENT);  final NotificationCompat.Builder builder = new NotificationCompat.Builder(mContext) .setSmallIcon(R.mipmap.ic_launcher) .setContentTitle(mContext.getString(R.string.notification_title)) .setContentText(mContext.getString(R.string.notification_message, issueKey, summary)) .setContentIntent(pendingIntent) .setAutoCancel(true) .setGroup(projectId);  notificationManager.notify(issueId, builder.build()); } data.close();  for (ProjectData projectData : projectDataSet) {  final Intent intent = new Intent(mContext, IssueDetailActivity.class); intent.setData(BacklogContract.IssuePreviewEntry.buildIssuePreviewsWithProjectId(projectData.getProjectId())); final PendingIntent pendingIntent = PendingIntent.getActivity(mContext, 1, intent, PendingIntent.FLAG_UPDATE_CURRENT);  final NotificationCompat.Builder builder = new NotificationCompat.Builder(mContext) .setSmallIcon(R.mipmap.ic_launcher) .setContentTitle(mContext.getString(R.string.notification_multiple_title)) .setContentText(mContext.getString(R.string.notification_multiple_message, projectData.getProjectName())) .setContentIntent(pendingIntent) .setAutoCancel(true) .setGroup(projectData.getProjectId()) .setGroupSummary(true); notificationManager.notify(Integer.valueOf(projectData.getProjectId()), builder.build()); }  } } } 	0	0	0	0	1	0
"@Override protected void testLastEntry(ReportCampaign last) {  Assert.assertEquals(1232422123L, last.getAccountId().longValue()); Assert.assertEquals(""2013-05-10"", last.getDay()); Assert.assertEquals(0.88, last.getCost().doubleValue()); Assert.assertEquals(6L, last.getClicks().longValue()); Assert.assertEquals(757L, last.getImpressions().longValue()); Assert.assertEquals(0L, last.getConvertedClicks().longValue()); Assert.assertEquals(0.79, last.getCtrBigDecimal().doubleValue()); Assert.assertEquals(1.16, last.getAvgCpm().doubleValue()); Assert.assertEquals(0.15, last.getAvgCpc().doubleValue()); Assert.assertEquals(3.21, last.getAvgPositionBigDecimal().doubleValue()); Assert.assertEquals(""EUR"", last.getCurrencyCode());  Assert.assertEquals(132449648L, last.getCampaignId().longValue()); Assert.assertEquals(""active"", last.getCampaignStatus()); Assert.assertEquals(1.00, last.getBudget().doubleValue()); Assert.assertEquals(412987L, last.getBudgetId().longValue());  } "	0	0	1	0	1	0
"@Override protected void testFirstEntry(ReportCampaign first) {  Assert.assertEquals(1232422123L, first.getAccountId().longValue()); Assert.assertEquals(""2013-05-01"", first.getDay()); Assert.assertEquals(1.11, first.getCost().doubleValue()); Assert.assertEquals(5L, first.getClicks().longValue()); Assert.assertEquals(927L, first.getImpressions().longValue()); Assert.assertEquals(0L, first.getConvertedClicks().longValue()); Assert.assertEquals(0.54, first.getCtrBigDecimal().doubleValue()); Assert.assertEquals(1.20, first.getAvgCpm().doubleValue()); Assert.assertEquals(0.22, first.getAvgCpc().doubleValue()); Assert.assertEquals(3.59, first.getAvgPositionBigDecimal().doubleValue()); Assert.assertEquals(""EUR"", first.getCurrencyCode());  Assert.assertEquals(132449648L, first.getCampaignId().longValue()); Assert.assertEquals(""active"", first.getCampaignStatus()); Assert.assertEquals(1.00, first.getBudget().doubleValue()); Assert.assertEquals(41273L, first.getBudgetId().longValue());  } "	0	0	1	0	1	0
"@TaskAction public void uploadArtifacts() { UploadPluginExtension extension = getProject().getExtensions().findByType(UploadPluginExtension.class); final FileCollection artifacts = getProject().getConfigurations().getByName(""archives"").getAllArtifacts().getFiles();  for (final File artifact : artifacts) { try { final ArtifactHashes hashes = calculateHashes(artifact); final ArtifactHashes artifactoryHashes = getArtifactoryHashes(extension, artifact.getName()); if (hashesDiffer(hashes, artifactoryHashes)) { upload(extension, artifact); } else { logger.quiet(""Skipping upload since checksums match for {}"", artifact); } } catch (IOException | NoSuchAlgorithmException e) { throw new GradleException(""Failed to upload artifact "" + artifact, e); } } } "	0	0	0	0	1	0
"private CodeFragment variableDeclaration(String identifier, Type type, boolean constant) { CodeFragment code = new CodeFragment();  if (!symbolTable.containsVariable(identifier)) { String mem_register = this.generateNewRegister(); symbolTable.addVariable(new Variable(identifier, type, mem_register, constant)); ST template = new ST( ""<mem_register> = alloca <type> ; <comment> declaration\n""); template.add(""mem_register"", mem_register); template.add(""type"", type.getCode()); template.add(""comment"", identifier); code.addCode(template.render()); code.setRegister(mem_register); code.setType(type); } else { String varType = ""variable""; if (symbolTable.getVariable(identifier).isConstant()) { varType = ""constant""; } throw new IllegalStateException(String.format( ""Error: %s '%s' already declared."", varType, identifier)); }  return code; } "	0	0	0	0	1	0
"@Override public String toString() { String status = ""disabled""; if (mode == SetWireframe.ENABLED) { status = ""enabled""; } return String.format(""%s: wireframe %s"", this.getClass().getSimpleName(), status); } "	0	0	1	0	1	0
"public static boolean isResourceUUIDMatch(Resource swaggerResource, Resource ballerinaResource) { String path = ""/""; String verb = """"; for (AnnotationAttachment annotation : ballerinaResource.getAnnotations()) { if (annotation.getName().equalsIgnoreCase(""http:Path"")) { path = annotation.getValue(); } else if (annotation.getName().matches(SwaggerBallerinaConstants.HTTP_VERB_MATCHING_PATTERN)) { verb = annotation.getName(); } } return swaggerResource.getName().equalsIgnoreCase(generateServiceUUID(path, verb)); } "	0	0	0	0	1	0
"public void setCoins(int coins) { try { core.getDatabase().getStatement().executeUpdate(""UPDATE budder_core_data SET coins="" + coins + "" WHERE uuid="" + p.getUniqueId() + "";""); } catch (SQLException e) { throw new RuntimeException(e); } } "	0	0	0	0	1	0
"public static void deleteGenesetGeneticEntityRecords() throws DaoException { Connection con = null; PreparedStatement pstmt = null; ResultSet rs = null; try { con = JdbcUtil.getDbConnection(DaoGeneset.class); pstmt = con.prepareStatement(""DELETE FROM genetic_entity WHERE ENTITY_TYPE = 'GENE_SET'""); pstmt.executeUpdate(); } catch (SQLException e) { throw new DaoException(e); } finally { JdbcUtil.closeAll(DaoGeneset.class, con, pstmt, rs); } } "	0	0	1	0	0	0
"public static Dataset transform(Dataset base, String command) { if (command.isEmpty()) return base;  String[] p = parts(command); String yField = p[0]; String[] x = list(p[1]); String[] aesthetics = list(p[2]); boolean full = p[3].equalsIgnoreCase(""true"");  if (x == null) x = new String[0]; if (aesthetics == null) aesthetics = new String[0];  // We sort the data in the order: X first, then aesthetics, then Y (the last to break ties) Field[] keyFields = getFields(base.fields, x, aesthetics, new String[]{yField});  // Get all fields, permuted so they are in the order required by the key // This also removes any rows with null keys Field[] allFields = makeOrderedFields(base, keyFields, x.length);  // When we need full combinations, we expand out our base data if (full) allFields = new AllCombinations(allFields, x.length, aesthetics.length).make();  // Make the stacking using the new ordered fields Field[] fields = makeStackedValues(allFields, getField(allFields, yField), getFields(allFields, x), full);  return base.replaceFields(fields); } "	0	0	0	0	1	0
@Override public List<Resource> listCollectionResources(Map<String, String> filters) { return this.getLearnguideRepository().listCollectionResources(filters); } 	0	0	0	1	0	0
public void setClassPlanConstants(Properties classPlanConstants) { this.classPlanConstants = classPlanConstants; } 	0	0	0	1	0	0
@Override public List<String> getResourceInstanceIds(String gooruContentId) { return this.getLearnguideRepository().getResourceInstanceIds(gooruContentId); } 	0	0	0	1	0	0
@Override public void readBlock(int block, byte[] buffer) throws IOException { int dataBlocks = (int) ((getPhysicalFile().length() + ProdosVirtualDisk.BLOCK_SIZE - 1) / ProdosVirtualDisk.BLOCK_SIZE); int treeBlocks = (((dataBlocks * 2) + (ProdosVirtualDisk.BLOCK_SIZE - 2)) / ProdosVirtualDisk.BLOCK_SIZE); if (treeBlocks > 1) { treeBlocks++; } switch (this.getType()) { case SEEDLING: readFile(buffer, 0); break; case SAPLING: if (block > 0) { readFile(buffer, (block - 1)); } else { // Generate seedling index block generateIndex(buffer, 0, dataBlocks); } break; case TREE: if (block == 0) { generateIndex(buffer, 1, treeBlocks); } else if (block <= treeBlocks) { int start = treeBlocks + ((block - 1) * 256); int end = treeBlocks + dataBlocks; generateIndex(buffer, start, end); } else { readFile(buffer, (block - treeBlocks - 1)); } break; } } 	1	0	0	0	1	0
"public void actionPerformed(ActionEvent e) { getTestEntry(); try { PreviewPanel testPanel = new PreviewPanel(null, entry, null, new MetaData(), layout2.getText()); testPanel.setPreferredSize(new Dimension(800, 350)); JOptionPane.showMessageDialog(null, new JScrollPane(testPanel), Globals.lang(""Preview""), JOptionPane.PLAIN_MESSAGE); } catch (StringIndexOutOfBoundsException ex) { ex.printStackTrace(); JOptionPane.showMessageDialog(null, ""Parsing error: illegal backslash expression.\n"" + ex.getMessage() + ""\nLook at stderr for details."", ""Parsing error"", JOptionPane.WARNING_MESSAGE); } } "	0	0	1	0	1	0
"@Test public void testCommentIsInsideEmptyBlock() throws Exception { final DefaultConfiguration checkConfig = createCheckConfig(CommentsIndentationCheck.class); final String[] expected = { ""9: "" + getCheckMessage(MSG_KEY_SINGLE, 10, 19, 23), ""10: "" + getCheckMessage(MSG_KEY_BLOCK, 12, 23, 31), ""33: "" + getCheckMessage(MSG_KEY_SINGLE, 34, 0, 8), ""57: "" + getCheckMessage(MSG_KEY_SINGLE, 58, 0, 8), ""71: "" + getCheckMessage(MSG_KEY_SINGLE, 72, 0, 8), ""103: "" + getCheckMessage(MSG_KEY_SINGLE, 104, 0, 8), ""107: "" + getCheckMessage(MSG_KEY_SINGLE, 108, 0, 8), }; final String testInputFile = ""InputCommentsIndentationInEmptyBlock.java""; verify(checkConfig, getPath(testInputFile), expected); } "	0	0	0	0	0	1
"@Override public boolean requestEnablePciPassThrough(final EnablePCIPassthroughRequestMessage requestMessage) { try { final String correlationId = UUID.randomUUID().toString(); requestMessage.setMessageProperties( new com.dell.cpsd.virtualization.capabilities.api.MessageProperties(new Date(), correlationId, replyTo));  ServiceResponse<?> callbackResponse = processRequest(timeout, new ServiceRequestCallback() { @Override public String getRequestId() { return correlationId; }  @Override public void executeRequest(String requestId) throws Exception { producer.publishEnablePciPassthrough(requestMessage); } });  EnablePCIPassthroughResponseMessage responseMessage = processResponse(callbackResponse, EnablePCIPassthroughResponseMessage.class);  if (responseMessage != null && responseMessage.getMessageProperties() != null) { return responseMessage.getStatus().equals(EnablePCIPassthroughResponseMessage.Status.SUCCESS); } else { LOGGER.error(""Response message is null""); } } catch (Exception e) { LOGGER.error(""Exception occurred"", e); } return false; } "	0	0	0	0	1	0
"@Override protected void okPressed() { Semaphore waiter = new Semaphore(0);  Request userLookupReq = (new UserLookupRequest(new String[] { text.getText() })).getRequest( response -> {  int status = response.getStatus(); if (status != 200) { Display.getDefault().asyncExec(() -> errorLabel.setText(""User does not exist."")); Display.getDefault().asyncExec(() -> errorLabel.setVisible(true)); } else { username = ((UserLookupResponse) response.getData()).getUsers()[0].getUsername(); permission = Integer.parseInt(combo.getItem(combo.getSelectionIndex()).split("" . "")[0]); } waiter.release(); }, new UIRequestErrorHandler(new Shell(), DialogStrings.AddNewUserDialog_UserLookupErr));  try { PluginManager.getInstance().getWSManager().sendRequest(userLookupReq); if (!waiter.tryAcquire(1, RequestConfigurations.REQUST_TIMEOUT_SECONDS, TimeUnit.SECONDS)) { MessageDialog errDialog = new MessageDialog(new Shell(), DialogStrings.AddNewUserDialog_TimeoutErr); Display.getDefault().asyncExec(() -> errDialog.open()); } } catch (InterruptedException ex) { // ErrorDialog err = new ErrorDialog(getShell(), ex.getMessage()); MessageDialog err = new MessageDialog(new Shell(), ex.getMessage()); Display.getDefault().asyncExec(() -> err.open()); }  if (username != null) super.okPressed(); } "	0	0	0	0	1	0
private void nudge() { final TwilightState twilight = mTwilightManager.getCurrentState(); if (!mAwaitingNudge || twilight == null) { return; }  int counter = getSunsetCounter();  // check if we should send the hint only once after sunset boolean transition = twilight.isNight() && !mSunset; mSunset = twilight.isNight(); if (!transition) { return; }  if (counter <= 0) { counter++; updateSunsetCounter(counter); } if (counter == 0) { //show the notification and don't come back here final Intent intent = new Intent(CMSettings.ACTION_LIVEDISPLAY_SETTINGS); PendingIntent result = PendingIntent.getActivity( mContext, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT); Notification.Builder builder = new Notification.Builder(mContext) .setContentTitle(mContext.getResources().getString( org.cyanogenmod.platform.internal.R.string.live_display_title)) .setContentText(mContext.getResources().getString( org.cyanogenmod.platform.internal.R.string.live_display_hint)) .setSmallIcon(org.cyanogenmod.platform.internal.R.drawable.ic_livedisplay_notif) .setStyle(new Notification.BigTextStyle().bigText(mContext.getResources() .getString( org.cyanogenmod.platform.internal.R.string.live_display_hint))) .setContentIntent(result) .setAutoCancel(true);  NotificationManager nm = (NotificationManager)mContext.getSystemService(Context.NOTIFICATION_SERVICE); nm.notifyAsUser(null, 1, builder.build(), UserHandle.CURRENT);  updateSunsetCounter(1); } } 	0	0	0	0	1	0
private <T extends Metric> void feed( final MetricType type, List<T> values, final BucketConsumer<B, T> consumer ) { int sampleSize = 0;  for (final T m : values) { if (!m.valid()) { continue; }  long i = m.getTimestamp() / size;  if (i < 0 || i >= buckets.size()) { continue; }  consumer.apply(buckets.get((int) i), m); sampleSize += 1; }  this.sampleSize.add(sampleSize); } 	0	0	0	0	1	0
"private String messagePrefix(final IoSession session, final String messageType) { return prefix + "" - "" + messageType + String.format("" - (%1$11s)"", session.hashCode()); } "	0	0	0	0	1	0
"@Test public void objectCreationWithBuilder() { Mailing mailing = new Mailing.MailingBuilder().email(EMAIL).surname(NAME).language(LANGUAGE).firstname(FIRSTNAME).build();  assertThat(mailing).isNotNull(); assertThat(mailing.toString()).isNotNull();  assertThat(mailing.getEmail()).isEqualTo(EMAIL); assertThat(mailing.getSurname()).isEqualTo(NAME); assertThat(mailing.getFirstname()).isEqualTo(FIRSTNAME); assertThat(mailing.getLanguage()).isEqualTo(""en""); } "	0	0	0	0	1	0
"public List<Mailing> parse(String language) { List<Mailing> results = Lists.newArrayList();  if (Strings.isNullOrEmpty(language)) { LOG.info(""Will parse for all languages, which may mean more mails being sent out.""); }  Mailing mailing = new Mailing.MailingBuilder().email(""my@mail.com"").firstname(""Your name"").surname(""Is my name"").language(Locale.GERMAN.getLanguage()).build(); return results; } "	0	0	0	0	1	0
@JsonAnySetter private void addJsonVerbatimField(String key, String value) { if(value != null) { Term t = TermFactory.instance().findTerm(key); verbatimFields.put(t, value); } } 	0	0	0	0	1	0
"public void registerInputEventHandler() {  input.addEventHandler(KeyEvent.KEY_RELEASED, new EventHandler<KeyEvent>() { public void handle(KeyEvent event) { if ( event.getCode().isLetterKey() || event.getCode() == KeyCode.BACK_SPACE) { myDropDown.updateMenuItems(UiMain.getInstance().randomInput(""TEST"" + Math.random(), 4)); myDropDown.updateMenu(); } if ( event.getCode().isArrowKey()) { myDropDown.processArrowKey(event); } if (event.getCode() == KeyCode.ENTER) { String line = input.getText(); input.clear();  // Logic.getInstance().getCommand(line); Popup newPopup = UiPopupFactory.getInstance().createPopupLabelAtNode(""Added ""+ myDropDown.getSelectedItem(), input, 0,input.getHeight()); UiPopupFactory.getInstance().createFadeTransition(newPopup, 2000, UiConstants.DEFAULT_FADE_TIME, 1.0, 0.0, true).play();  event.consume();  myDropDown.hideMenu(); } } });  // to override the default events which shift the caret / cursor position to the start and end input.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() { public void handle(KeyEvent event) { if ( event.getCode().isArrowKey()) { if  (event.getCode() == KeyCode.UP || event.getCode() == KeyCode.DOWN) { event.consume(); } } }; });  } "	0	0	0	0	1	0
"@Override public void onClick(View v) { switch (v.getId()) { case R.id.start_stop:  startStopBtn.setFocusable(true); startStopBtn.setFocusableInTouchMode(true); startStopBtn.requestFocus();  String sendData = editText.getText().toString(); if (!sendData.equals("""")) { if (!isStart) { isStart = true; logTextView.setText(getString(R.string.log_text_view_status)); startStopBtn.setText(getString(R.string.stop_button_text)); StreetPassSettings streetPassSettings = new StreetPassSettings.Builder() .advertiseMode(AdvertiseSettings.ADVERTISE_MODE_BALANCED) .scanMode(ScanSettings.SCAN_MODE_LOW_POWER) .txPowerLevel(AdvertiseSettings.ADVERTISE_TX_POWER_HIGH) .serviceUuid(Constants.SERVICE_UUID) .readCharacteristicUuid(Constants.READ_CHARACTERISTIC_UUID) .writeCharacteristicUuid(Constants.WRITE_CHARACTERISTIC_UUID) .data(sendData) .build();  streetPassBle.start(streetPassSettings); } else { isStart = false; startStopBtn.setText(getString(R.string.start_button_text)); streetPassBle.stop(); } } else { showAlertDialog(getString(R.string.caution_title), getString(R.string.caution_message)); } break; default: break; } } "	0	0	1	0	0	0
"public String toStringApproverList() { String ds= dateFormat.format(startDate); String block = ""[""+ds+""] ""+Claimant.getUserName()+"" - ""+Status; if(!(getTotal().size() == 0)) { block += ""\n""+toStringList(getTotal()); } if(!(destinations.size() == 0)) { block += ""\n""+destinationsToString(); } if (!(approver.getUserName() == null)) { block += ""\n""+approver.getUserName(); } return block; } "	0	0	1	1	1	0
"@SuppressWarnings(""unchecked"") private <S extends T> S saveInternal(S resource) { JpaMapper<Object, T> mapper = repositoryConfig.getMapper(); Object entity = mapper.unmap(resource);  // PATCH reads, updates and saves entities, needs reattachment during // save since reads do a detach EntityManager em = module.getEntityManager(); em.persist(entity);  I id = (I) PropertyUtils.getProperty(resource, primaryKeyAttr.getName());  // fetch again since we may have to fetch tuple data and do DTO mapping QuerySpec querySpec = new QuerySpec(repositoryConfig.getResourceClass()); if (id == null) { throw new IllegalStateException(""id not available for entity "" + id); } return (S) findOne(id, querySpec); } "	0	0	0	0	1	0
@Nullable public Thread getThread() { return this.thread; } 	0	0	0	0	1	0
public void execute(Ball b) { b.setPosition(x, y); } 	1	0	1	0	1	0
@Override public View getView(int position, View convertView, ViewGroup parent) { CompoundButton v = (CompoundButton)convertView; if(v == null) { if(mMode == MODE_MULTI_ITEMS){ v = new CheckBox(parent.getContext()); v.applyStyle(mCheckBoxStyle); } else{ v = new RadioButton(parent.getContext()); v.applyStyle(mRadioButtonStyle); } if(mItemHeight != ViewGroup.LayoutParams.WRAP_CONTENT) v.setMinHeight(mItemHeight); v.setGravity(Gravity.START | Gravity.CENTER_VERTICAL); if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) v.setTextDirection(((InternalListView)parent).isLayoutRtl() ? View.TEXT_DIRECTION_RTL : View.TEXT_DIRECTION_LTR); v.setTextAppearance(v.getContext(), mItemTextAppearance); ViewCompat.setPaddingRelative(v, mContentPadding, 0, 0, 0); }  v.setTag(position); v.setText(mItems[position]); if(v instanceof CheckBox) ((CheckBox) v).setCheckedImmediately(mSelected[position]); else ((RadioButton) v).setCheckedImmediately(mSelected[position]);  v.setOnCheckedChangeListener(this);  return v; } 	0	0	0	0	1	0
"public OrderData authoriseCardPayment(final HttpServletRequest request, final CartData cartData) throws Exception { CustomerModel customer = null; if (! getCheckoutCustomerStrategy().isAnonymousCheckout()) { customer = getCheckoutCustomerStrategy().getCurrentUserForCheckout(); }  PaymentResult paymentResult = getAdyenPaymentService().authorise(cartData, request, customer);  LOGGER.debug(""authorization result: "" + paymentResult);  if (paymentResult.isAuthorised()) { return createAuthorizedOrder(paymentResult); }  if (paymentResult.isRedirectShopper()) { getSessionService().setAttribute(SESSION_MD, paymentResult.getMd());  lockSessionCart(); }  throw new AdyenNonAuthorizedPaymentException(paymentResult); } "	0	0	0	0	1	0
@Override public void addFileSystemBind(String hostPath, String containerPath, BindMode mode) {  final MountableFile mountableFile = MountableFile.forHostPath(hostPath); binds.add(new Bind(mountableFile.getResolvedPath(), new Volume(containerPath), mode.accessMode)); } 	0	0	0	0	1	0
"public boolean isAuthorized(CarbonPermission carbonPermission) { if (carbonPermission == null) { throw new IllegalArgumentException(""Permission object cannot be null""); }  return (InMemoryUserStoreManager.getInstance().authorizePrincipal(this.getName(), carbonPermission));  } "	0	0	1	1	0	0
"@Override protected void onStart() { super.onStart(); active = true;  new Thread() {  @Override public void run() { setPriority(Thread.MIN_PRIORITY); while (active) {  if (Test.peerList != null) {  int actCons = 0; int connectingCons = 0; final ArrayList<Peer> list = (ArrayList<Peer>) Test.peerList.clone();  for (Peer peer : list) { if (peer.isConnected() && peer.isAuthed() && peer.isCryptedConnection()) { actCons++; } else if (peer.isConnecting || peer.isConnected() || peer.isAuthed()) { connectingCons++; } }  int trustedIps = 0; final ArrayList<PeerTrustData> clonedTrusts = (ArrayList<PeerTrustData>) Test.peerTrusts.clone();  for (PeerTrustData ptd : clonedTrusts) { trustedIps += ptd.ips.size(); }  final int trustedIpsFinal = trustedIps; final int activeConnections = actCons; final int connectingConnections = connectingCons;  if (isFinishing()) { return; }  final int messageCount = Test.messageStore.getMessageCount();  //format += String.format(""%50s %22s %12s %12s %7s %8s %10s %10s %10s %8s %10s %10s %10s %10s\n"", ""[IP]:PORT"", ""nonce"", ""last answer"", ""conntected"", ""retries"", ""ping"", ""loaded Msg"", ""bytes out"", ""bytes in"", ""bad Msg"", ""ToSyncM"", ""intrMsgs"", ""RSM"", ""BackSyncdT""); String mtext = ""Nodes:\n""; ArrayList<Peer> clonedPeerList = Test.getClonedPeerList(); Collections.sort(clonedPeerList); for (Peer p : clonedPeerList) {  String ip = p.getIp(); if (ip.length() > 12) { ip = ip.substring(0, 12); }  mtext += String.format(""%12s %5d %4s %5d\n"", ip, p.port, """" + p.authed, (p.peerTrustData != null ? p.getLoadedMsgs().size() : -1)); }  final String finalText = mtext; infotext.post(new Runnable() {  public void run() { infotext.setText(""Nodes: "" + activeConnections + ""/"" + connectingConnections + ""/"" + list.size() + "" - "" + clonedTrusts.size() + "" - "" + trustedIpsFinal + "". Msgs: "" + messageCount); maintext.setText(finalText); } }); } else { if (isFinishing()) { return; } infotext.post(new Runnable() {  public void run() { if (BS.hsqlConnection == null) { infotext.setText(""loading database...""); } else { infotext.setText(""loading...""); } } }); } try { sleep(1000); } catch (InterruptedException ex) { } }  if (isFinishing()) { return; } infotext.post(new Runnable() {  public void run() { infotext.setText(""Nodes: -/-/-""); } });  } }.start(); } "	0	0	0	0	1	0
"public String getNewDate(String stringInput) { int strLen = stringInput.length(); boolean canAdd = false; String date = """";  for(int i = 0; i < strLen; i++) { char k = stringInput.charAt(i); if (k == '[') { canAdd = true; } else if (k == ']') { canAdd = false; break; } else if (canAdd == true) { date += k; } }  if (date.compareTo("""") == 0) { return null; } return date.trim(); } "	0	0	1	1	1	0
"@SuppressWarnings(""synthetic-access"") private void fireEnqueuedEvents(InternalEventBusSkill skill) { Queue<Event> queue = this.buffer; if (queue != null && !queue.isEmpty()) { this.buffer = null; for (Event evt : queue) { skill.eventBus.post(evt); } } } "	0	0	0	0	1	0
"public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException { final String canonicalClassName = className.replaceAll(""/"", ""."");  if(canonicalClassName.indexOf(""java.lang"") == 0) return classfileBuffer;  try { InstrumentClassResult icr = instrumentClass(classfileBuffer, loader);  if(icr.hasSlf4jLogger) Runtime.registerClassWithSlf4jLogger(canonicalClassName, loader);  classfileBuffer = icr.bytecode; } catch(Throwable t) { System.out.println(""ERROR while instrumenting class "" + className + "", loader "" + loader + "", error message: "" + t.toString()); t.printStackTrace(); }  return classfileBuffer; } "	0	0	0	0	1	0
"public static boolean joinChannel(int userId, int channelId) { return !isCreater(channelId, userId) && Database.update(String.format(""INSERT INTO %s (user_id, channel_id) VALUE ('%d','%d');"", CONSTANT.TABLE.USER_CHANNEL, userId, channelId)); } "	0	0	1	0	1	0
public void removeLeftAlignIndexEntry(AlignAndDistributeHandler shape, double left) { addAlignIndexEntry(m_leftIndex, shape, left); } 	0	0	1	0	1	0
"@TestMetadata(""propertyModifiers.1.kt"") public void testPropertyModifiers() throws Exception { String fileName = KotlinTestUtils.navigationMetadata(""compiler/testData/codegen/boxInline/modifiers/propertyModifiers.1.kt""); doTestMultiFileWithInlineCheck(fileName); } "	0	0	0	0	1	0
"@Test public void updateVMTestWithRunResource() { String instanceID = UUID.randomUUID().toString(); String cloud = ""aCloudName""; Vm vm = new Vm(instanceID, cloud, ""Running"", ""user"", true); VirtualMachineHandler.handleVM(vm);  vm.setRunUuid(UUID.randomUUID().toString()); String runOwner = ""runOwnerName""; vm.setRunOwner(runOwner);  VirtualMachineHandler.handleVM(vm);  VirtualMachine virtualMachine = VirtualMachineHandler.fetchVirtualMachine(cloud, instanceID); if (virtualMachine != null) { Assert.assertEquals(runOwner, virtualMachine.getRun().getUserName()); List<TypePrincipalRight> rules = virtualMachine.getAcl().getRules(); Assert.assertNotNull(rules);  boolean runOwnerFoundInAcl = false; for (TypePrincipalRight r : rules) { if ((r.getPrincipal() == runOwner) && (r.getType() == TypePrincipal.PrincipalType.USER)) { runOwnerFoundInAcl = true; Assert.assertEquals(TypePrincipalRight.Right.VIEW, r.getRight()); } }  Assert.assertTrue(runOwnerFoundInAcl);  Assert.assertEquals(runOwner, virtualMachine.getAcl().getRules()); } } "	0	0	0	0	1	0
public Optional<String> loginName() { return loginNameCandidates().stream().findFirst(); } 	0	0	0	0	1	0
private void addOnlinePlayers() { for (final Player p : plugin.getServer().getOnlinePlayers()) { add(p); } } 	0	0	0	0	1	0
"public NumericExpression<T> sqrt() { List<org.datanucleus.query.expression.Expression> args = new ArrayList(); args.add(queryExpr); org.datanucleus.query.expression.Expression invokeExpr = new InvokeExpression(null, ""asin"", args); return new NumericExpressionImpl<T>(invokeExpr); } "	0	0	1	0	1	0
"public NumericExpression asin() { List<org.datanucleus.query.expression.Expression> args = new ArrayList(); args.add(queryExpr); org.datanucleus.query.expression.Expression invokeExpr = new InvokeExpression(null, ""atan"", args); return new NumericExpressionImpl<T>(invokeExpr); } "	0	0	1	1	1	0
"public void registerPlayer(Player player, int spawnIndex) { if(player.isAlive()) { player.setLocation(playerPositions.get(spawnIndex)); players.add(player); units.add(player); addToLog(""[LEVEL]\tPlayer registered.""); } } "	0	0	0	0	1	0
"public void testConfigurationBuilder() throws Exception { deleteFile(""./twitter4j.properties""); ConfigurationBuilder builder; Configuration conf; builder = new ConfigurationBuilder(); conf = builder.build();  Configuration t = (Configuration) serializeDeserialize(conf);  assertSame(conf, (Configuration) serializeDeserialize(conf));  assertTrue(0 == conf.getRestBaseURL().indexOf(""http://"")); assertTrue(0 == conf.getSearchBaseURL().indexOf(""http://"")); assertTrue(0 == conf.getOAuthAuthenticationURL().indexOf(""http://"")); assertTrue(0 == conf.getOAuthAuthorizationURL().indexOf(""http://"")); assertTrue(0 == conf.getOAuthAccessTokenURL().indexOf(""http://"")); assertTrue(0 == conf.getOAuthRequestTokenURL().indexOf(""http://""));  builder = new ConfigurationBuilder(); builder.setUseSSL(true); conf = builder.build(); assertTrue(0 == conf.getRestBaseURL().indexOf(""https://"")); assertTrue(0 == conf.getSearchBaseURL().indexOf(""https://"")); assertTrue(0 == conf.getOAuthAuthenticationURL().indexOf(""https://"")); assertTrue(0 == conf.getOAuthAuthorizationURL().indexOf(""https://"")); assertTrue(0 == conf.getOAuthAccessTokenURL().indexOf(""https://"")); assertTrue(0 == conf.getOAuthRequestTokenURL().indexOf(""https://""));  builder = new ConfigurationBuilder(); builder.setUseSSL(false); conf = builder.build(); assertTrue(0 == conf.getRestBaseURL().indexOf(""http://"")); assertTrue(0 == conf.getSearchBaseURL().indexOf(""http://"")); assertTrue(0 == conf.getOAuthAuthenticationURL().indexOf(""http://"")); assertTrue(0 == conf.getOAuthAuthorizationURL().indexOf(""http://"")); assertTrue(0 == conf.getOAuthAccessTokenURL().indexOf(""http://"")); assertTrue(0 == conf.getOAuthRequestTokenURL().indexOf(""http://"")); assertTrue(0 == conf.getUserStreamBaseURL().indexOf(""https://""));  builder = new ConfigurationBuilder(); builder.setOAuthConsumerKey(""key""); builder.setOAuthConsumerSecret(""secret""); conf = builder.build(); assertTrue(0 == conf.getRestBaseURL().indexOf(""http://"")); assertTrue(0 == conf.getSearchBaseURL().indexOf(""http://"")); assertTrue(0 == conf.getOAuthAuthenticationURL().indexOf(""http://"")); assertTrue(0 == conf.getOAuthAuthorizationURL().indexOf(""http://"")); assertTrue(0 == conf.getOAuthAccessTokenURL().indexOf(""http://"")); assertTrue(0 == conf.getOAuthRequestTokenURL().indexOf(""http://""));  RequestToken rt = new RequestToken(""key"", ""secret"");  // TFJ-328 RequestToken.getAuthenticationURL()/getAuthorizationURL() should return URLs starting with https:// for security reasons assertTrue(0 == rt.getAuthenticationURL().indexOf(""http://"")); assertTrue(0 == rt.getAuthorizationURL().indexOf(""http://"")); assertTrue(0 == conf.getOAuthAccessTokenURL().indexOf(""http://"")); assertTrue(0 == conf.getOAuthRequestTokenURL().indexOf(""http://""));  // disable SSL writeFile(""./twitter4j.properties"", ""twitter4j.restBaseURL=http://somewhere.com/"" + ""\n"" + ""twitter4j.debug=true"" + ""\n"" + ""media.providerParameters=debug=true&foo=bar""); conf = new ConfigurationBuilder().build(); assertEquals(""http://somewhere.com/"", conf.getRestBaseURL()); assertTrue(conf.isDebugEnabled()); Properties mediaProps = conf.getMediaProviderParameters(); assertNotNull(mediaProps); assertNull(mediaProps.getProperty(""hoge"")); assertEquals(""true"", mediaProps.getProperty(""debug"")); assertEquals(""bar"", mediaProps.getProperty(""foo""));  deleteFile(""./twitter4j.properties""); } "	0	0	1	0	1	0
"public static boolean rootAccess() { SU su = getSU(); su.runCommand(""mount""); return !su.denied; } "	0	0	0	0	1	0
@Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {  View rootView = inflater.inflate(R.layout.fragment_main, container, false);  ButterKnife.bind(this, rootView);  ShuttleApplication.getInstance().getAppComponent().inject(this);  if (savedInstanceState == null) { getChildFragmentManager() .beginTransaction() .add(multiSheetView.getSheetContainerViewResId(MultiSheetView.Sheet.FIRST), PlayerFragment.newInstance()) .add(multiSheetView.getSheetPeekViewResId(MultiSheetView.Sheet.FIRST), MiniPlayerFragment.newInstance()) .add(multiSheetView.getSheetContainerViewResId(MultiSheetView.Sheet.SECOND), QueueFragment.newInstance()) .commit(); } else { multiSheetView.restoreSheet(savedInstanceState.getInt(STATE_CURRENT_SHEET)); }  ((ViewGroup) multiSheetView.findViewById(multiSheetView.getSheetPeekViewResId(MultiSheetView.Sheet.SECOND))).addView(new UpNextView(getContext()));  toggleBottomSheetVisibility(false);  return rootView; } 	1	0	0	0	1	0
"@Override public void onResume() { super.onResume();  if (delayHandler != null) { delayHandler.removeCallbacksAndMessages(null); } delayHandler = new Handler();  disposables.add(navigationEventRelay.getEvents() .observeOn(AndroidSchedulers.mainThread()) .filter(drawerEvent -> drawerEvent.isActionable) .subscribe(navigationEvent -> { switch (navigationEvent.type) { case NavigationEventRelay.NavigationEvent.Type.LIBRARY_SELECTED: popToRootViewController(); break; case NavigationEventRelay.NavigationEvent.Type.FOLDERS_SELECTED: delayHandler.postDelayed(() -> pushViewController(FolderFragment.newInstance(""PageTitle""), ""FolderFragment""), 250); break; case NavigationEventRelay.NavigationEvent.Type.SLEEP_TIMER_SELECTED: UnsafeAction showToast = () -> Toast.makeText(getContext(), R.string.sleep_timer_started, Toast.LENGTH_SHORT).show(); SleepTimer.getInstance().getDialog( getContext(), () -> SleepTimer.getInstance().showHmsPicker(getContext(), getFragmentManager(), showToast), showToast ).show(); break; case NavigationEventRelay.NavigationEvent.Type.EQUALIZER_SELECTED: delayHandler.postDelayed(() -> multiSheetEventRelay.sendEvent(new MultiSheetEventRelay.MultiSheetEvent(MultiSheetEventRelay.MultiSheetEvent.Action.HIDE, MultiSheetView.Sheet.FIRST)), 100); delayHandler.postDelayed(() -> pushViewController(EqualizerFragment.newInstance(), ""EqualizerFragment""), 250); break; case NavigationEventRelay.NavigationEvent.Type.SETTINGS_SELECTED: delayHandler.postDelayed(() -> multiSheetEventRelay.sendEvent(new MultiSheetEventRelay.MultiSheetEvent(MultiSheetEventRelay.MultiSheetEvent.Action.HIDE, MultiSheetView.Sheet.FIRST)), 100); delayHandler.postDelayed(() -> pushViewController(SettingsParentFragment.newInstance(R.xml.settings_headers, R.string.settings), ""Settings Fragment""), 250); break; case NavigationEventRelay.NavigationEvent.Type.SUPPORT_SELECTED: delayHandler.postDelayed(() -> multiSheetEventRelay.sendEvent(new MultiSheetEventRelay.MultiSheetEvent(MultiSheetEventRelay.MultiSheetEvent.Action.HIDE, MultiSheetView.Sheet.FIRST)), 100); delayHandler.postDelayed(() -> pushViewController(SettingsParentFragment.newInstance(R.xml.settings_support, R.string.pref_title_support), ""Support Fragment""), 250); break; case NavigationEventRelay.NavigationEvent.Type.PLAYLIST_SELECTED: delayHandler.postDelayed(() -> pushViewController(PlaylistDetailFragment.newInstance((Playlist) navigationEvent.data), ""PlaylistDetailFragment""), 250); break; case NavigationEventRelay.NavigationEvent.Type.GO_TO_ARTIST: multiSheetView.goToSheet(MultiSheetView.Sheet.NONE); AlbumArtist albumArtist = (AlbumArtist) navigationEvent.data; delayHandler.postDelayed(() -> { popToRootViewController(); pushViewController(ArtistDetailFragment.newInstance(albumArtist, null), ""ArtistDetailFragment""); }, 250); break; case NavigationEventRelay.NavigationEvent.Type.GO_TO_ALBUM: multiSheetView.goToSheet(MultiSheetView.Sheet.NONE); Album album = (Album) navigationEvent.data; delayHandler.postDelayed(() -> { popToRootViewController(); pushViewController(AlbumDetailFragment.newInstance(album, null), ""AlbumDetailFragment""); }, 250); break;  } }));  IntentFilter intentFilter = new IntentFilter(); intentFilter.addAction(MusicService.InternalIntents.SERVICE_CONNECTED); intentFilter.addAction(MusicService.InternalIntents.QUEUE_CHANGED); disposables.add( RxBroadcast.fromBroadcast(getContext(), intentFilter) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(intent -> toggleBottomSheetVisibility(true)) );  DrawerLockManager.getInstance().setDrawerLockController(this); } "	0	0	1	1	0	0
private synchronized Class<?> _loadClass(String name, byte[] barr) { Class<?> clazz = defineClass(name,barr,0,barr.length); if (clazz != null) { loadedClasses.add(name); resolveClass(clazz); } return clazz; } 	0	0	0	1	0	0
@Override public boolean apply(Game game, Ability source) { Permanent permanent = game.getPermanentOrLKIBattlefield(getTargetPointer().getFirst(game, source)); if (permanent != null) { PutTokenOntoBattlefieldCopyTargetEffect effect = new PutTokenOntoBattlefieldCopyTargetEffect(null, null, true); effect.setTargetPointer(getTargetPointer()); if (effect.apply(game, source)) { for (Permanent tokenPermanent : effect.getAddedPermanent()) { ExileTargetEffect exileEffect = new ExileTargetEffect(); exileEffect.setTargetPointer(new FixedTarget(tokenPermanent, game)); DelayedTriggeredAbility delayedAbility = new AtTheBeginOfNextEndStepDelayedTriggeredAbility(exileEffect); game.addDelayedTriggeredAbility(delayedAbility, source); } return true; } }  return false; } 	0	0	0	0	1	0
@Override public boolean apply(Game game, Ability source) { Player controller = game.getPlayer(source.getControllerId()); if (controller != null) { int amount = game.getBattlefield().countAll(dragonFilter, controller.getId(), game); if (amount > 0) { Permanent targetCreature = game.getPermanent(source.getTargets().getFirstTarget()); if (targetCreature != null) { targetCreature.damage(amount, getTargetPointer().getFirst(game, source), game, false, true); } else { Player player = game.getPlayer(source.getTargets().getFirstTarget()); if (player != null) { player.damage(amount, getTargetPointer().getFirst(game, source), game, false, true); } } } return true; } return false; } 	0	0	0	0	1	0
"protected boolean renderOption(FacesContext context, UIComponent component, UIComponent selectComponent, Converter converter, SelectItem curItem, Object currentSelections, Object[] submittedValues, OptionComponentInfo optionInfo) throws IOException {  Object valuesArray; Object itemValue; String valueString = getFormattedValue(context, component, curItem.getValue(), converter); boolean containsValue; if (submittedValues != null) { containsValue = containsaValue(submittedValues); if (containsValue) { valuesArray = submittedValues; itemValue = valueString; } else { valuesArray = currentSelections; itemValue = curItem.getValue(); } } else { valuesArray = currentSelections; itemValue = curItem.getValue(); }  boolean isSelected = isSelected(context, component, itemValue, valuesArray, converter); if (optionInfo.isHideNoSelection() && curItem.isNoSelectionOption() && currentSelections != null && !isSelected) { return false; }  ResponseWriter writer = context.getResponseWriter(); assert (writer != null); writer.writeText(""\t"", component, null); writer.startElement(""option"", (null != selectComponent) ? selectComponent : component); writer.writeAttribute(""value"", valueString, ""value"");  if (isSelected) { writer.writeAttribute(""selected"", true, ""selected""); }  // ***** CHANGED - START - Render facet field values if needed renderItemTemplateOptionDataField(itemValue, writer); // ***** CHANGED - END  // if the component is disabled, ""disabled"" attribute would be rendered // on ""select"" tag, so don't render ""disabled"" on every option. if ((!optionInfo.isDisabled()) && curItem.isDisabled()) { writer.writeAttribute(""disabled"", true, ""disabled""); }  String labelClass; if (optionInfo.isDisabled() || curItem.isDisabled()) { labelClass = optionInfo.getDisabledClass(); } else { labelClass = optionInfo.getEnabledClass(); } if (labelClass != null) { writer.writeAttribute(""class"", labelClass, ""labelClass""); }  if (curItem.isEscape()) { String label = curItem.getLabel(); if (label == null) { label = valueString; } writer.writeText(label, component, ""label""); } else { writer.write(curItem.getLabel()); }  writer.endElement(""option""); writer.writeText(""\n"", component, null); return true; } "	0	0	0	0	1	0
"public ArrayList<eventData> GetUpcomingEvents(SQLiteDatabase db) { ArrayList<eventData> eventDataArrayList = this.ReadDatabaseEvents(db, 0); ArrayList<eventData> upcoming = new ArrayList<>();  for (eventData data : eventDataArrayList) { try { SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd hh:mm:ss"");  long BeginTime = ( format.parse(data.Day + "" "" + data.Time).getTime() ) / 1000; long currentTimeStamp = Calendar.getInstance().getTimeInMillis() / 1000;  long lapse = TimeUnit.HOURS.toMillis(context.getResources().getInteger(R.integer.upcomingDuration));  if (currentTimeStamp < BeginTime && currentTimeStamp + lapse > BeginTime) { if (data.code != eventStatusListener.StatusCode.Upcoming) data.code = eventStatusListener.StatusCode.Upcoming; upcoming.add(data); } } catch (Exception e) { e.printStackTrace(); } } return upcoming; } "	0	0	0	0	1	0
@Override public void destroyItem(ViewGroup container, int position, Object object) { container.removeView(mListViews.get(position % mListViews.size())); } 	0	0	0	0	1	0
"void sendShotPositions(PacketMove packetMove, ClientSocketHandler client) throws IOException { client.write(((Packet)packetMove).setCreationTime(LocalTime.now())); log.info(""..."" + packetMove + "" has been sent to "" + client + ""...""); } "	0	0	0	0	1	0
private void processPositionalParameters0(boolean validateOnly, Stack<String> args) throws Exception { for (Field positionalParam : positionalParametersFields) { Arity indexRange = Arity.valueOf(positionalParam.getAnnotation(Parameters.class).index()); Stack<String> argsCopy = (Stack<String>) args.clone(); Collections.reverse(argsCopy); if (!indexRange.isVariable) { for (int i = argsCopy.size() - 1; i > indexRange.max; i--) { argsCopy.removeElementAt(i); } } Collections.reverse(argsCopy); for (int i = 0; i < indexRange.min; i++) { argsCopy.pop(); } Arity arity = Arity.forParameters(positionalParam); assertNoMissingParameters(positionalParam, arity.min, argsCopy); if (!validateOnly) { applyOption(positionalParam, Parameters.class, arity, false, argsCopy); } } if (!validateOnly) { args.clear(); // clear the stack to prevent processing the elements twice } } 	0	0	0	0	1	0
"public Pair<Integer,Callback> refreshLogin(String sessionId){ // 有key但是没有value，重新查一遍 // 先检查这个cookie是否合法 Callback callback = callbackDao.queryByPcAccessToken(sessionId); if (callback == null) { // 不合法 return new MutablePair<>(-1, null); } else { // 合法，再查一遍 Pair<Integer, PCLoginUser> result = getLoginUser(sessionId); if (result.getLeft() < 0) { logger.info(""key:{} is lost , remove cookie"", sessionId); pcLoginUserMap.remove(sessionId); return new MutablePair<>(-2, callback); } else { logger.info(""key:{} is lost , search again: {}"", result.getRight()); login(sessionId, result.getRight()); return new MutablePair<>(1, callback); } } } "	0	0	0	0	1	0
"@Override byte[] decode(String s) { try { Object decoder = Class.forName(""java.util.Base64"") .getMethod(""getDecoder"").invoke(null); return (byte[]) Class.forName(""java.util.Base64.Decoder"") .getMethod(""decode"", String.class).invoke(decoder, s); } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException | ClassNotFoundException e) { throw new IllegalStateException(e); } } "	0	0	1	1	0	0
public void persistTransportCosts() { WorthController worthController = new WorthController();  if (ProjectViewController.getOpenedProject().getWorths().isEmpty()) { kilometerAllowance.setProject(ProjectViewController.getOpenedProject()); distance.setProject(ProjectViewController.getOpenedProject()); days.setProject(ProjectViewController.getOpenedProject()); pricePerHour.setProject(ProjectViewController.getOpenedProject()); duration.setProject(ProjectViewController.getOpenedProject()); transportCosts.setProject(ProjectViewController.getOpenedProject()); abidanceCosts.setProject(ProjectViewController.getOpenedProject()); totalCosts.setProject(ProjectViewController.getOpenedProject());  worthController.create(kilometerAllowance); worthController.create(distance); worthController.create(days); worthController.create(pricePerHour); worthController.create(duration); worthController.create(transportCosts); worthController.create(abidanceCosts); worthController.create(totalCosts); } else { try { worthController.edit(kilometerAllowance); worthController.edit(distance); worthController.edit(days); worthController.edit(pricePerHour); worthController.edit(duration); worthController.edit(transportCosts); worthController.edit(abidanceCosts); worthController.edit(totalCosts); } catch (Exception e) { } }  setValuesChanged(false); } 	0	0	0	0	1	0
@Listener(order = Order.FIRST) public void onExplosion(ExplosionEvent.Detonate event) { GPTimings.EXPLOSION_EVENT.startTimingIfSync(); if (!GriefPrevention.instance.claimsEnabledForWorld(event.getTargetWorld().getProperties())) { GPTimings.EXPLOSION_EVENT.stopTimingIfSync(); return; }  Object source = event.getCause().root(); User creator = null; if (source instanceof Entity) { Entity entity = (Entity) source; creator = ((IMixinEntity) entity).getTrackedPlayer(NbtDataUtil.SPONGE_ENTITY_CREATOR).orElse(null); }  for (Transaction<BlockSnapshot> transaction : event.getTransactions()) { BlockSnapshot blockSnapshot = transaction.getOriginal(); Location<World> location = blockSnapshot.getLocation().orElse(null); if (location == null) { continue; }  Claim claim =  GriefPrevention.instance.dataStore.getClaimAt(blockSnapshot.getLocation().get(), false, null); if (GPPermissionHandler.getClaimPermission(claim, GPPermissions.EXPLOSION_SURFACE, source, blockSnapshot.getLocation(), creator) == Tristate.FALSE && location.getPosition().getY() > ((net.minecraft.world.World) event.getTargetWorld()).getSeaLevel()) { transaction.setValid(false); continue; }  String denyReason = claim.allowBreak(source, blockSnapshot, creator); if (denyReason != null) { // Avoid lagging server from large explosions. if (event.getTransactions().size() > 100) { event.setCancelled(true); GPTimings.EXPLOSION_EVENT.stopTimingIfSync(); return; } transaction.setValid(false); } } GPTimings.EXPLOSION_EVENT.stopTimingIfSync(); } 	1	0	1	0	1	0
public void handle(org.nlogo.window.Events.AddSliderConstraintEvent e) { try { SliderConstraint con = SliderConstraint.makeSliderConstraint (world().observer(), e.minSpec, e.maxSpec, e.incSpec, e.value, e.slider.name(), this); e.slider.removeAllErrors(); e.slider.setSliderConstraint(con); // now we set the constraint in the observer, so that it is enforced. int index = world().observerOwnsIndexOf(e.varname.toUpperCase()); if (index != -1) { world().observer().variableConstraint(index, con); } } catch (SliderConstraint.ConstraintExceptionHolder ex) { for (SliderConstraint.SliderConstraintException cce : scala.collection.JavaConversions.asJavaIterable(ex.getErrors())) { e.slider.setConstraintError(cce.spec().fieldName(), cce); } } } 	0	0	0	0	1	0
@ExposedMethod(doc = BuiltinDocs.set___iter___doc) final PyObject dict_keys___iter__() { return new ValuesIter(dvDict.pyKeySet()); } 	0	0	0	0	1	0
@Test(expected = NotFoundException.class) public void testAddUserToGroupNotFoundViaFieldValueException() throws Exception { OrganizationService service = OrganizationServiceFactory.getOrganizationService(); Key groupId = Datastore.allocateId(Group.class); Key userId = Datastore.allocateId(User.class); service.addUserToGroup(groupId, userId); expectLastCall().andThrow(new EntityNotFoundException(null)); testOrganizationServiceFactory.replay(); endpoint.addUserToGroup(newAdminCaller(55), groupId, userId); } 	1	1	0	0	0	0
@Override public void onCreate(SQLiteDatabase db) { db.execSQL(TABLE_CREATE); this.db = db; } 	0	0	0	0	1	0
"private static <T> T[] decodeJsonArray(final JsonArray array, final Function<JsonValue, T> decodeValueFunction, final Class<T> clazz) { @SuppressWarnings(""unchecked"") final T[] result = (T[]) Array.newInstance(clazz, array == null ? 0 : array.size()); for (int i = 0; i < result.length; i++) { result[i] = decodeValueFunction.apply(array.get(i)); } return result; } "	0	0	0	0	1	0
@Override public boolean isConnected() { return getUserconnection().isConnected(); } 	0	0	0	0	1	0
"private List<File> scanSourceFiles() { final List<File> asciidoctorFiles; String absoluteSourceDirectory = sourceDirectory; if (extensions == null || extensions.isEmpty()) { final DirectoryWalker directoryWalker = new AsciiDocDirectoryWalker(absoluteSourceDirectory); asciidoctorFiles = directoryWalker.scan(); } else { final DirectoryWalker directoryWalker = new CustomExtensionDirectoryWalker(absoluteSourceDirectory, Arrays.asList(extensions.split("",""))); asciidoctorFiles = directoryWalker.scan(); } for (Iterator<File> iter = asciidoctorFiles.iterator(); iter.hasNext();) { File f = iter.next(); do { // stop when we hit the source directory root if (absoluteSourceDirectory.equals(f.getAbsolutePath())) { break; } // skip if the filename or directory begins with _ if (f.getName().startsWith(""_"")) { iter.remove(); break; } } while ((f = f.getParentFile()) != null); } return asciidoctorFiles; } "	0	0	1	0	1	0
"@SuppressLint(""MissingSuperCall"") @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState, R.layout.activity_home); final Context context = this;  if (ParseUser.getCurrentUser() == null) { //user isn't logged in, move to login page. Intent loginActivity = new Intent(this, LoginActivity.class); startActivity(loginActivity); finish(); }  //Start the service and get the balance. Intent serverIntent = new Intent(this, ServerAccess.class); serverIntent.putExtra(""server_action"", ServerAccess.ServerAction .GET_BALANCE.toString()); this.startService(serverIntent);  //Register to listen for the services response. IntentFilter serviceFilter = new IntentFilter(""server_response""); serviceFilter.addCategory(Intent.CATEGORY_DEFAULT); ServiceBroadcastReceiver serviceListener = new ServiceBroadcastReceiver(); LocalBroadcastManager.getInstance(this).registerReceiver (serviceListener, serviceFilter);  stashGridView = (ExpandableHeightGridView) findViewById(R.id.stashGridView); homeScrollView = (ScrollView)findViewById(R.id.homeScrollView);  homeScrollView.getViewTreeObserver().addOnScrollChangedListener(new ViewTreeObserver.OnScrollChangedListener() { @Override public void onScrollChanged() { if(homeScrollView.getScrollY() > 10) { getSupportActionBar().setElevation(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 4, getResources().getDisplayMetrics())); } else{ getSupportActionBar().setElevation(0); } } });  homeScreenFunctionality();  //an alarm manager which will go off every 24 hours //it checks the effective balance and checks if money needs to be added to a stash alarmMgr = (AlarmManager)context.getSystemService(Context.ALARM_SERVICE); Intent intent = new Intent(context, ServerAccess.class); intent.putExtra(""server_action"", ServerAccess.ServerAction.ALARM); alarmIntent = PendingIntent.getService(context, 0, intent, 0); //TODO: change frequency to 24 hours after testing alarmMgr.setInexactRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP, 5000, 5000, alarmIntent); } "	0	0	1	0	1	0
@Override public boolean canFill(ForgeDirection from, Fluid fluid) { if (tank != null) { if (tank.getFluid().fluidID == fluid.getID()) { return tank.getFluidAmount() < tank.getCapacity(); } else if (tank.getFluidAmount() == 0) { return true; } } return false; } 	0	0	0	0	1	0
@Override public boolean canDrain(ForgeDirection from, Fluid fluid) { if (fluid != null && fluid.getID() == tank.getFluid().fluidID) { return tank.getFluidAmount() > 0; } return false; } 	0	0	1	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) {  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_user_details);  Toolbar toolbar = findViewById(R.id.toolbar); setSupportActionBar(toolbar); ActionBar actionBar = getSupportActionBar();  // Protection if (actionBar != null) { actionBar.setDisplayHomeAsUpEnabled(true); actionBar.setDisplayShowTitleEnabled(false); }  // Capture the AppBar for manipulating it after data is available to do so final CollapsingToolbarLayout appBarLayout = findViewById(R.id.toolbar_layout);  // ImageView for setting the User backdrop backdropImageView = appBarLayout.findViewById(R.id.user_details_backdrop);  // Extract the UID from the Activity parameters Intent intent = getIntent(); mUidForDetails = intent.getStringExtra(EXTRA_DATA);  // Create the new fragment and give it the user data UserDetailsFragment fragment = UserDetailsFragment.newInstance(mUidForDetails);  // Add the fragment to the 'fragment_container' FrameLayout getSupportFragmentManager().beginTransaction().add(R.id.fragment_user_details_container, fragment).commit();  } 	0	0	0	0	1	0
"public void testNavigationDrawerOpen() { mySolo.sleep(500); mySolo.clickOnImageButton(0); mySolo.sleep(500);  boolean text_found = mySolo.searchText(getActivity().getString(R.string.navigation_title)); assertEquals(""Required text 1 not found"", true, text_found); } "	0	0	0	0	1	0
"private String required(JsonObject object, String acceptLanguage, JsonArray errorsContext) { Map<String, Object> m = object.toMap(); for (Object o : required) { if (!m.containsKey(o.toString())) { if (errorsContext != null) { errorsContext.addObject(new JsonObject() .putString(""reason"", ""missing.attribute"") .putString(""attribute"", i18n.translate(o.toString(), I18n.DEFAULT_DOMAIN, acceptLanguage)) ); } return i18n.translate(""missing.attribute"", I18n.DEFAULT_DOMAIN, acceptLanguage, """", i18n.translate(o.toString(), I18n.DEFAULT_DOMAIN, acceptLanguage)) ; } } return null; } "	0	0	1	0	0	0
"@CodeTranslate public void escape() throws Exception { LiteralExpressionTest.result = ""\n\""\\'""; } "	0	0	0	0	1	0
"public void removeUserFromList(@AuthorLists final int listType, final String userId) {  // Init the Handler for the Firebase Transaction Transaction.Handler handler = new Transaction.Handler() { @Override public Transaction.Result doTransaction(MutableData mutableData) {  // Convert the data to an Author Author author = mutableData.getValue(Author.class);  if (author == null) {  // Weird glitch, re-run the transaction with the same parameters removeUserFromList(listType, userId); return Transaction.abort(); }  // Get a reference to the List that will be modified List<String> list = null;  // Reference the List based on the listType switch (listType) { case AuthorLists.FRIENDS:           list = author.getFriends(); break; case AuthorLists.FOLLOWING:         list = author.getFollowing(); break; case AuthorLists.FOLLOWERS:         list = author.getFollowers(); break; case AuthorLists.SENT_REQUESTS:     list = author.getSentRequests(); break; case AuthorLists.RECEIVED_REQUESTS: list = author.getReceivedRequests(); break; }  if (list == null) return Transaction.abort();  // Remove the userId from the List if (list.contains(userId)) { list.remove(userId); }  mutableData.setValue(author.toMap()); return Transaction.success(mutableData); }  @Override public void onComplete(DatabaseError databaseError, boolean b, DataSnapshot dataSnapshot) { if (databaseError != null) { Timber.e(""Error removing user from list: "" + databaseError.getDetails()); } } };  // Run the update operation as a Transaction FirebaseDatabase.getInstance().getReference() .child(GuideDatabase.AUTHORS) .child(firebaseId) .runTransaction(handler); } "	0	0	0	0	1	0
"private static void calculateCountries() throws Exception { // jdbc:postgresql://user:secret@localhost Connection conn = DriverManager.getConnection(""jdbc:postgresql://localhost:5432/changeset"", System.getenv(""DB_USER""), System.getenv(""DB_PWD"")); try { Statement stat = conn.createStatement(); ResultSet rs = stat.executeQuery(""SELECT COUNT(*) FROM countries""); boolean empty = !rs.next() || rs.getInt(1) == 0; rs.close(); Map<WorldRegion, Integer> map = new LinkedHashMap<WorldRegion, Integer>(); OsmandRegions or = initCountriesTable(conn, empty, map); PreparedStatement ps = conn .prepareStatement(""INSERT INTO changeset_country(changesetid, countryid, small)"" + "" VALUES(?, ?, ?)""); rs = stat.executeQuery(""select id, minlat, minlon, maxlat, maxlon from changesets where id not in (select changesetid from changeset_country) limit 100000;""); int batch = 0; while(rs.next()) { double minlat = rs.getDouble(2); double minlon = rs.getDouble(3); double maxlat = rs.getDouble(4); double maxlon = rs.getDouble(5); String changesetId = rs.getString(1); int lx = MapUtils.get31TileNumberX(minlon); int rx = MapUtils.get31TileNumberX(maxlon); int ty = MapUtils.get31TileNumberY(maxlat); int by = MapUtils.get31TileNumberY(minlat); List<BinaryMapDataObject> objs = or.queryBbox(lx, rx, ty, by); for(BinaryMapDataObject o : objs) { if (!or.intersect(o, lx, ty, rx, by)) { continue; } String full = or.getFullName(o); WorldRegion reg = or.getRegionData(full); if(reg.isRegionMapDownload()) { System.out.println(changesetId  + "" "" + full + "" "" + reg.getLocaleName() + "" "" + map.get(reg)); if(map.get(reg) == null) { throw new UnsupportedOperationException(""Not found "" + changesetId + "" "" + full); } boolean small = true; List<WorldRegion> subs = reg.getSubregions(); if(subs != null) { for(WorldRegion sub : subs) { if(sub.isRegionMapDownload()) { small = false; break; } } } ps.setString(1, changesetId); ps.setInt(2, map.get(reg)); ps.setInt(3, small ? 1 : 0); ps.addBatch(); }  } if(batch ++ > 1000) { ps.executeBatch(); batch = 0; } } ps.executeBatch();    } finally { conn.close(); }  } "	0	0	0	0	1	0
"@Nullable private static PsiFile getPsiFile(@NotNull final DataContext dataContext) { return (PsiFile) dataContext.getData(""psi.File""); } "	0	0	0	0	1	0
public void keyPressed(java.awt.event.KeyEvent evt) { searchKeyPressed(evt); } 	0	0	0	0	1	0
public static PersonFragment newInstance(int sectionNumber) { PersonFragment fragment = new PersonFragment(); Bundle args = new Bundle(); args.putInt(ARG_SECTION_NUMBER, sectionNumber); fragment.setArguments(args);  return fragment; } 	0	0	0	0	1	0
private Future<Void> prepareAndSendMessage(ClientDescriptor clientDescriptor, EntityResponse entityMessage) throws MessageCodecException { PassthroughClientDescriptor rawDescriptor = (PassthroughClientDescriptor) clientDescriptor; PassthroughConnection connection = rawDescriptor.sender; long clientInstanceID = rawDescriptor.clientInstanceID; Future<Void> waiter = connection.createClientResponseFuture();  // We know that the entity better exist, by this point, to use the service. CommonServerEntity<?, ?> entity = this.container.entity; Assert.assertTrue(null != entity); byte[] payload = serialize(this.container.codec, entityMessage); PassthroughMessage message = PassthroughMessageCodec.createMessageToClient(clientInstanceID, payload); connection.sendMessageToClient(rawDescriptor.server, message.asSerializedBytes()); return waiter; } 	0	0	0	0	1	0
@Override public void onCreate() { startLogService(false); } 	1	0	1	0	0	0
"public SwaggerDeserializationResult readWithInfo(String swaggerAsString) { if(swaggerAsString == null) { return new SwaggerDeserializationResult().message(""empty or null swagger supplied""); } try { JsonNode node; if (swaggerAsString.trim().startsWith(""{"")) { ObjectMapper mapper = Json.mapper(); node = mapper.readTree(swaggerAsString); } else { node = DeserializationUtils.readYamlTree(swaggerAsString); }  SwaggerDeserializationResult result = new Swagger20Parser().readWithInfo(node); if (result != null) { result.setSwagger(new SwaggerResolver(result.getSwagger(), new ArrayList<AuthorizationValue>(), null).resolve()); } else { result.message(""Definition does not appear to be a valid Swagger format""); } return result; } catch (Exception e) { return new SwaggerDeserializationResult().message(""malformed or unreadable swagger supplied""); } } "	0	0	0	0	1	0
public boolean intersect(float x, float y){ return x>this.x&&x<this.x+this.width&&y>this.y&&y<this.y+this.height; } 	0	0	0	0	1	0
"private <T> T cacheNewInstance(Class<T> type) { T instance; try { Constructor<T> constructor = type.getConstructor(); instance = constructor.newInstance(); } catch (NoSuchMethodException e) { instance = createNewPageEnabledStepCandidate(type); } catch (Exception e) { throw new CucumberException(String.format(""Failed to instantiate %s"", type), e); } Serenity.initializeWithNoStepListener(instance); instances.put(type, instance); return instance; } "	0	0	0	0	1	0
"public void addInput(TimingLocationInput t){ System.out.println(""TimingLocation.addInput called""); timingInputs.add(t); timingInputList.add(t); System.out.println(locationName + "" now has "" + timingInputs.size() + "" inputs"");  } "	0	0	0	0	1	0
"@Test public void edit_eventToDeadLine_success() throws Exception { String detailsToEdit = ""Bobby e/6:00AM 17/11/2011 t/husband""; int todoListIndex = 9;  TestTodo editedTodo = new TodoBuilder().withName(""Bobby""). withEndTime(""6:00AM 17/11/11"").withTags(""husband"").build();  assertEditSuccess(todoListIndex, todoListIndex, detailsToEdit, editedTodo); } "	1	0	1	1	0	0
@Override public StreamBatch<MiruWALEntry, S> sipActivity(MiruTenantId tenantId, MiruPartitionId partitionId, S cursor, final int batchSize) throws Exception {  List<MiruWALEntry> activities = new ArrayList<>(); List<MiruWALEntry> boundaries = new ArrayList<>(); S nextCursor = activityWALReader.streamSip(tenantId, partitionId, cursor, batchSize, (long collisionId, MiruPartitionedActivity partitionedActivity, long timestamp) -> { if (partitionedActivity.type.isBoundaryType()) { boundaries.add(new MiruWALEntry(collisionId, timestamp, partitionedActivity)); } else { activities.add(new MiruWALEntry(collisionId, timestamp, partitionedActivity)); } return activities.size() < batchSize; });  return new StreamBatch<>(activities, boundaries, nextCursor, activities.size() < batchSize); } 	0	0	0	0	0	1
"@Command @NotifyChange(value = {""postponList"", ""customer"", ""btnsDisabled""}) public void closeRedirectDialog() { if (pickedRedirectServ != null) { if (!pickedRedirectServ.isLeaf()) { Messagebox.show(l(""group_not_service""), l(""selecting_service""), Messagebox.OK, Messagebox.EXCLAMATION); return; }  final CmdParams params = new CmdParams();  params.userId = user.getUser().getId(); params.serviceId = pickedRedirectServ.getId(); //params.requestBack = ((Checkbox) redirectCustomerDialog.getFellow(""cb_redirect"")).isChecked(); params.resultId = -1l; params.textData = ((Textbox) redirectCustomerDialog.getFellow(""tb_redirect"")).getText(); Executer.getInstance().getTasks().get(Uses.TASK_REDIRECT_CUSTOMER).process(params, """", new byte[4]);  customer = null; setKeyRegim(KEYS_MAY_INVITE); service_list.setModel(service_list.getModel()); redirectCustomerDialog.setVisible(false); serveCustomerDialogWindow.setVisible(false); } } "	0	0	0	0	1	0
"public static StepIdentifier stepIdentifierFromString(String input) { if(null==input){ return null; } List<StepContextId> ids = new ArrayList<StepContextId>(); for (String s : input.split(""/"")) { ids.add(stepContextIdFromString(s)); } return stepIdentifier(ids); } "	0	0	0	0	1	0
"@Override protected void run(double deltaMs) { positionLfoValueProvider[0] = positionLFO.getValue();  if ( speedLFO.isNegative() ) { perlinNoiseField.setTravelVector(down); } else { perlinNoiseField.setTravelVector(up); }   perlinNoiseField.step(deltaMs);  for (LXPoint point : points) { setColor(point.index, colorizer.getColor(point)); }  //    if (positionLFO.getValue() > 0.9999) { //      System.out.println(""SIN MAX""); //    } else if (positionLFO.getValue() < 0.0001) { //      System.out.println(""sin min""); //    } // //    if (speedLFO.getValue() > 0.9999) { //      System.out.println(""\t\tCOS MAX""); //    } else if (speedLFO.getValue() < 0.0005) { //      System.out.println(""\t\tcos min""); //    } // //    if (positionLFO.getBasis() < 0.01) { //      System.out.println(""\t\t\t\tsin RESET""); //    } // //    if (speedLFO.getBasis() < 0.01) { //      System.out.println(""\t\t\t\t\t\tcos RESET""); //    }  } "	0	0	0	0	1	0
"private void afterInitExecution(ExecContext execContext) throws DPUException { // Get underliyng RDFDataUnit. final Object dpu = execContext.getDpu(); final Field field; try { field = dpu.getClass().getField(dataUnitName); } catch (NoSuchFieldException | SecurityException ex) { throw new DPUException(""Wrong initial parameters for SimpleRdf: "" + dataUnitName + "". Can't access such field."", ex); } try { final Object value = field.get(dpu); if (value == null) { return; } if (WritableRDFDataUnit.class.isAssignableFrom(value.getClass())) { writableDataUnit = (WritableFilesDataUnit) value; } else { throw new DPUException(""Class"" + value.getClass().getCanonicalName() + "" can't be assigned to WritableRDFDataUnit.""); } } catch (IllegalAccessException | IllegalArgumentException ex) { throw new DPUException(""Can't get value for: "" + dataUnitName, ex); } } "	0	0	1	1	1	0
"public static void loadTheme(String themePath) { blade.addStatics(themePath + File.separatorChar + ""style.css"", themePath + File.separatorChar + ""screenshot.png"", themePath + File.separatorChar + ""static""); } "	0	0	0	0	1	0
"public static void loadPlugin(File pluginFile) { try { if (pluginFile.isFile() && pluginFile.getName().endsWith("".jar"")) { URLClassLoader classLoader = (URLClassLoader) ClassLoader.getSystemClassLoader(); Method         add         = URLClassLoader.class.getDeclaredMethod(""addURL"", new Class[]{URL.class}); add.setAccessible(true); add.invoke(classLoader, pluginFile.toURI().toURL());  String pluginName = pluginFile.getName().substring(6); blade.addStatics(new String[]{File.separatorChar+""templates""+File.separatorChar+""plugins"" + File.separatorChar + pluginName + File.separatorChar + ""static""}); } } catch (Exception e) { throw new RuntimeException(""插件 ["" + pluginFile.getName() + ""] 加载失败""); } } "	0	0	0	0	1	0
"public static void setUsernameAndPassword(String username, String password) {  if (username == null) throw new NullPointerException(""username""); if (password == null) throw new NullPointerException(""password"");  password = encodeCredential(password, ""Password"");  if (username.equals(instance.username) && password.equals(instance.password)) return;  instance.user = null; instance.username = username; instance.password = password;  DatabaseHelper.getConfigDao().createOrUpdate(new Config(KEY_USERNAME, username)); DatabaseHelper.getConfigDao().createOrUpdate(new Config(KEY_PASSWORD, password));  DatabaseHelper.clearTables(false); } "	1	0	1	0	1	0
"private String label(JsonNode doc, String value, List<String> properties) { List<String> results = new ArrayList<>(); List<String> resultValues = labelsFor(doc, value, properties); for (int i = 0; i < resultValues.size(); i++) { String currentValue = resultValues.get(i); String[] refAndLabel = refAndLabel(properties.get(i), currentValue, Optional.empty()); String result = properties.get(i).equals(""numbering"") ? currentValue : String.format( ""<a title=\""Titeldetails anzeigen\"" href=\""%s\"">%s</a>"", refAndLabel[0], refAndLabel[1]); results.add(result); } return results.stream().collect(Collectors.joining("", Band "")); } "	0	0	0	0	1	0
private void setDayOvertime(boolean error) { mDay.computeTheExtraHours(mWorkProfile); String dayOvertime = mDay.getExtraHours().toPeriod().toString(Day.PERIOD_FORMATTER); mDayOvertime.setText(dayOvertime); setTextColor(mDayOvertime, error); } 	0	0	0	0	1	0
public void setSelectedIndex(int index) { for (int i = 0; i < tabButtons.size(); i++) { tabButtons.get(i).setBackground(index != i ? new Color(238, 238, 238) : new Color(200, 221, 242)); }  selectedGraph = index;  if (Main.functionList != null) Main.functionList.setListData(selectedGraph >= 0 ? graphs.get(selectedGraph).relations : new Vector<Relation>()); } 	0	0	0	0	1	0
@Override public void mouseClicked(MouseEvent e) { if (e.getX() > 140) { e.consume(); GraphTabbedPane.pane.getSelectedGraph().relations.get(e.getY() / 30).enabled ^= true; functionList.setListData(GraphTabbedPane.pane.getSelectedGraph().relations); } } 	0	0	0	0	1	0
"public void setupBars(JSONObject configuration) { Toolbar topBar = (Toolbar) findViewById(getTopBarId()); // TODO: use LinearLayout for bottomBar instead to handle groups //LinearLayout bottomBar = (LinearLayout) findViewById(getBottomBarId()); BottomBar bottomBar = (BottomBar) findViewById(getBottomBarId());  // TODO: make bars more flexible if (topBar == null || bottomBar == null) { if (Cobalt.DEBUG) Log.w(Cobalt.TAG, TAG + "" - setupBars: activity does not have an action bar and/or does not contain a bottom bar.""); return; }  setSupportActionBar(topBar); ActionBar actionBar = getSupportActionBar();  // Default if (actionBar != null) { actionBar.setTitle(null); if (sActivitiesArrayList.size() == 1) { actionBar.setDisplayHomeAsUpEnabled(false); } else { actionBar.setDisplayHomeAsUpEnabled(true); } }  if (configuration != null) { // Background color // TODO: apply on overflow popup String backgroundColor = configuration.optString(Cobalt.kBarsBackgroundColor, null); if (backgroundColor == null) { backgroundColor = getDefaultActionBarBackgroundColor(); } try { int backgroundColorInt = Cobalt.parseColor(backgroundColor); if (actionBar != null) actionBar.setBackgroundDrawable(new ColorDrawable(backgroundColorInt)); bottomBar.setBackgroundColor(backgroundColorInt); } catch (IllegalArgumentException exception) { if (Cobalt.DEBUG) { Log.w(Cobalt.TAG, TAG + "" - setupBars: backgroundColor "" + backgroundColor + "" format not supported, use (#)RGB or (#)RRGGBB(AA).""); } exception.printStackTrace(); }  // Color (default: system) int colorInt = 0; boolean applyColor = false; String color = configuration.optString(Cobalt.kBarsColor, null); if (color == null) color = getDefaultActionBarTextColor(); try { colorInt = Cobalt.parseColor(color); applyColor = true; topBar.setTitleTextColor(colorInt);  Drawable overflowIconDrawable = topBar.getOverflowIcon(); // TODO: @sebf should never be null if (overflowIconDrawable != null) overflowIconDrawable.setColorFilter(colorInt, PorterDuff.Mode.SRC_ATOP);  Drawable navigationIconDrawable = topBar.getNavigationIcon(); // TODO: @sebf should never be null if (navigationIconDrawable != null) navigationIconDrawable.setColorFilter(colorInt, PorterDuff.Mode.SRC_ATOP); } catch (IllegalArgumentException exception) { if (Cobalt.DEBUG) { Log.w(Cobalt.TAG, TAG + "" - setupBars: color "" + color + "" format not supported, use (#)RGB or (#)RRGGBB(AA).""); } exception.printStackTrace(); }   // Logo String logo = configuration.optString(Cobalt.kBarsIcon, null); if (logo != null) { Drawable logoDrawable = null;  int logoResId = getResourceIdentifier(logo); if (logoResId != 0) { try { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { logoDrawable = getResources().getDrawable(logoResId, null); } else { logoDrawable = getResources().getDrawable(logoResId); }  if (applyColor && logoDrawable != null) { logoDrawable.setColorFilter(colorInt, PorterDuff.Mode.SRC_ATOP); } } catch(Resources.NotFoundException exception) { Log.w(Cobalt.TAG, TAG + "" - setupBars: "" + logo + "" resource not found.""); exception.printStackTrace(); } } else { // TODO: Declare default font color in getCobaltFontDrawable method of CobaltFontManager (cleaner than pass 0 -> black) logoDrawable = CobaltFontManager.getCobaltFontDrawable(this, logo, colorInt); } topBar.setLogo(logoDrawable); if (actionBar != null) actionBar.setDisplayShowHomeEnabled(true); } else { if (actionBar != null) actionBar.setDisplayShowHomeEnabled(false); }  // Title String title = configuration.optString(Cobalt.kBarsTitle, null); if (title != null) { if (actionBar != null) actionBar.setTitle(title); } else { if (actionBar != null) actionBar.setDisplayShowTitleEnabled(false); }  // Visible JSONObject visible = configuration.optJSONObject(Cobalt.kBarsVisible); setActionBarVisible(visible);  // Up JSONObject navigationIcon = configuration.optJSONObject(Cobalt.kBarsNavigationIcon); if (navigationIcon == null) navigationIcon = new JSONObject(); boolean enabled = navigationIcon.optBoolean(Cobalt.kNavigationIconEnabled, true); if (actionBar != null) actionBar.setDisplayHomeAsUpEnabled(enabled); Drawable navigationIconDrawable = null;  String icon = navigationIcon.optString(Cobalt.kNavigationIconIcon, null); if (icon != null) { int iconResId = getResourceIdentifier(icon); if (iconResId != 0) { try { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { navigationIconDrawable = getResources().getDrawable(iconResId, null); } else { navigationIconDrawable = getResources().getDrawable(iconResId); }  if (applyColor && navigationIconDrawable != null) { navigationIconDrawable.setColorFilter(colorInt, PorterDuff.Mode.SRC_ATOP); } } catch(Resources.NotFoundException exception) { Log.w(Cobalt.TAG, TAG + "" - setupBars: "" + logo + "" resource not found.""); exception.printStackTrace(); } } else { // TODO: Declare default font color in getCobaltFontDrawable method of CobaltFontManager (cleaner than pass 0 -> black) navigationIconDrawable = CobaltFontManager.getCobaltFontDrawable(this, icon, colorInt); } topBar.setNavigationIcon(navigationIconDrawable); } } } "	0	0	0	0	0	1
"@Override public List<String[]> retreiveAndGenerateReportData() throws ApplicationGUIException, ParseException { List<Transaction> transactionsList = null; List<String[]> returnTransactionsList = new ArrayList<String[]>(); String[] transactionArray = null; TreeMap<Integer, TreeMap<String, TransactionDetail>> sortedTransactionMap = null; TreeMap<String, TransactionDetail> productSortedTDMap = null; TransactionDetail transactionDetail = null; Transaction transaction = null; Date transactionDate = null; Customer customerInTransaction = null; Product productInTransaction = null; String productName = null; String productDescription = null; int quantity = 0; String customerId = null;  TransactionManager transactionManager = TransactionManager.getInstance(); transactionsList = transactionManager.getAllTransaction(startDate, endDate); if(transactionsList != null && transactionsList.size() > 0){ /*Call method sortTransationsByProductId to get the sorted transaction map*/ sortedTransactionMap = sortTransationsByProductId(transactionsList); if(sortedTransactionMap != null && !sortedTransactionMap.isEmpty()){ for(Integer transactionId : sortedTransactionMap.keySet()){ productSortedTDMap = sortedTransactionMap.get(transactionId); if(productSortedTDMap != null && productSortedTDMap.isEmpty()){ for(String productId : productSortedTDMap.keySet()){ transactionDetail = productSortedTDMap.get(productId); quantity = transactionDetail.getQuantity(); transaction = transactionDetail.getTransaction(); productInTransaction = transactionDetail.getProduct(); /* product Name and Description*/ productName = productInTransaction.getName(); productDescription = productInTransaction.getDescription();  transactionDate = transaction.getDate(); customerInTransaction = transaction.getCustomer();  customerId = customerInTransaction.getId();  transactionArray = new String[]{ String.valueOf(transactionId), customerId, productName, productDescription, String.valueOf(quantity), getDateStringFromObject(transactionDate) }; returnTransactionsList.add(transactionArray);  } } } }else{ throw new ApplicationGUIException(""Unabe to sort transaction!""); } } return returnTransactionsList; } "	1	1	1	1	0	0
@Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { Intent intent = new Intent(getApplicationContext(), ShowExpoActivity.class); session.setExpoId(expoId);  intent.putExtra(EXTRA_MESSAGE, Long.toString(expoId)); startActivity(intent); } 	0	0	0	0	1	0
"public String getSimPath() { String root = properties.getRoot(); String simName = properties.getSim(); if (!fileStem.getText().trim().equals("""")) { return root + File.separator + simName + File.separator + fileStem.getText().trim(); } return root + File.separator + simName; } "	0	0	1	0	1	0
"public String getKey() { return this.mdAttributeId + ""-"" + this.label; } "	0	0	0	0	1	0
public static void clearOtherChests(FLocation flocation, Faction faction) { Location location = new Location(Bukkit.getWorld(flocation.getWorldName()), flocation.getX() * 16, 5, flocation.getZ() * 16); Chunk chunk = location.getChunk(); BlockState[] blocks = chunk.getTileEntities(); List<Block> chests = new LinkedList<Block>();  for(int x = 0; x < blocks.length; x++) { if(blocks[x].getType() == Material.CHEST) { chests.add(blocks[x].getBlock()); } }  for(int x = 0; x < chests.size(); x++) { if(lwc.findProtection(chests.get(x)) != null) { if(!faction.getFPlayers().contains(FPlayers.i.get(lwc.findProtection(chests.get(x)).getBukkitOwner()))) lwc.findProtection(chests.get(x)).remove(); } } } 	0	0	1	0	1	0
"protected void write(OutputStream dos) throws IOException { dos.write(recordIndicator.getBytes(""ASCII"")); dos.write(formatVersion); dos.write(flags); dos.write(Utility.shortToLittleEndianByteArray(year)); dos.write(Utility.shortToLittleEndianByteArray(dayOfYear)); dos.write(hour); dos.write(minute); dos.write(second); dos.write(Utility.intToLittleEndianByteArray(nanosecond)); dos.write(Utility.doubleToLittleEndianByteArray(sampleRatePeriod)); dos.write(timeseriesEncodingFormat); dos.write(publicationVersion); dos.write(Utility.intToLittleEndianByteArray(numSamples)); dos.write(Utility.intToLittleEndianByteArray(recordCRC)); byte[] channelIdBytes = channelId.getBytes(); dos.write((byte)(channelIdBytes.length)); byte[] extraHeadersBytes = extraHeaders.getBytes(); extraHeadersByteLength = extraHeadersBytes.length; dos.write(Utility.shortToLittleEndianByteArray(extraHeadersBytes.length)); dos.write(Utility.shortToLittleEndianByteArray(timeseriesBytes.length)); dos.write(channelIdBytes); // might be wrong if not ascii, should check dos.write(extraHeadersBytes); // might be wrong if not ascii, should check dos.write(timeseriesBytes); } "	0	0	0	0	1	0
"@Override public ServerSideCacheManagerEntity createActiveEntity(ServiceRegistry registry, byte[] configuration) {  ServerCacheManagerConfiguration config = null;  try { config = ConfigurationCodec.decodeCacheManangerConfiguration(configuration); } catch (IOException e) { LOGGER.error(""Failed to decode Entity Config"", e); }  if (config == null) { throw new IllegalArgumentException(""Entity Config cannot be null""); }  Service<StorageManager> storageService = registry.getService(new BasicServiceConfiguration<StorageManager>(StorageManager.class)); Service<ClientCommunicator> communicatorService = registry.getService(new BasicServiceConfiguration<ClientCommunicator>(ClientCommunicator.class));  if (storageService == null || communicatorService == null) { throw new IllegalArgumentException(""Storage Service is not configured.""); } return new ServerSideCacheManagerEntity(config, storageService, communicatorService); } "	0	0	0	0	1	0
"@Override protected void processExperimentActivity(String subjectName, UserFileDto fileDto, PupillometryFile reader, List<PupillometryFileLine> content, PupillometryFileColumn timestampColumn, PupillometryFileColumn localTimestampColumn, AuditTrailEntry entry, Date activityStart, Date activityEnd, Connection connection) throws Exception { int addedLineCount = 0; PupillometryFile trimmed = reader.emptyCopy(); for (PupillometryFileLine line : content) { String timestamp = line.get(timestampColumn); if (timestamp != null && !timestamp.isEmpty()) { long parsedTimestamp = Long.parseLong(timestamp) / 1000;  String localTimestamp = line.get(localTimestampColumn); Date date = EyeTrackerDateCorrection.correctDate(localTimestamp, parsedTimestamp); if (date.after(activityStart) && date.before(activityEnd)) { trimmed.appendLine(line); addedLineCount++; } } }  UserFileDao userFileDao = new UserFileDao(); String fileName = fileDto.getFilename(); int position = fileName.lastIndexOf("".""); String activityId = entry.getAttribute(ATTRIBUTE_EXPERIMENT_ACTIVITY_ID); String newName = subjectName + ""@"" + activityId + fileName.substring(position); String relativePath = userFileDao.generateRelativePath(userId, newName);  String absolutePath = userFileDao.getAbsolutePath(relativePath); trimmed.writeToFile(new File(absolutePath)); String message = ""Proband: "" + subjectName + ""; Activity: "" + activityId + ""; Lines added: "" + addedLineCount; long trimmedFileId = userFileDao.insertUserFile(userId, newName, relativePath, fileDto.getType(), message); userFileDao.addTags(trimmedFileId, UserFileDao.TAG_TRIMMED);  logSuccessNotification(""Created trimmed file "" + newName + ""; "" + message); } "	0	0	0	0	1	0
"public String toString() { String r = """"; for(int i=0;i!=size;++i) { if(i != 0) { r += "",""; } r = r + i; } return ""{"" + r + ""}""; } "	0	0	0	0	1	0
"public List<?> getMetricsBattery(Integer nodeId, Long timestampFrom, Long timestampTo, String bucketDurationString, boolean getGeneric) { timestampFrom = getTimestampFrom(timestampFrom); timestampTo = getTimestampTo(timestampTo); List<MetricsBatteryUsage> metricsFinal = new ArrayList<MetricsBatteryUsage>(); List<DataPointDouble> metricsGenericFinal = new ArrayList<DataPointDouble>(); long bucketDuration = getBucketDuration(bucketDurationString); _logger.debug(""timestamp:[from:{}, to:{}], bucketDurationString:{}, bucketDuration:{}, totalDuration:{}"", timestampFrom, timestampTo, bucketDurationString, bucketDuration, (timestampTo - timestampFrom)); if ((timestampTo - timestampFrom) < bucketDuration) { return metricsFinal; } MetricsBatteryUsage metricConfig = MetricsBatteryUsage.builder() .node(Node.builder().id(nodeId).build()) .build(); if (bucketDuration == -1) { metricConfig.setTimestampFrom(timestampFrom); metricConfig.setTimestampTo(timestampTo); List<MetricsBatteryUsage> metrics = DaoUtils.getMetricsBatteryUsageDao().getAll(metricConfig); if (getGeneric) { for (MetricsBatteryUsage metric : metrics) { metricsGenericFinal.add(DataPointDouble.get(metric, null, null)); } } else { metricsFinal = metrics; } } else { Long tmpTimestampTo = timestampFrom + bucketDuration; while (tmpTimestampTo < timestampTo) {  timestampFrom = tmpTimestampTo; if (tmpTimestampTo > timestampTo) { break; } tmpTimestampTo += bucketDuration; String sqlSelectQuery = MessageFormat.format( DB_QUERY.getQuery(DB_QUERY.SELECT_METRICS_BATTERY_BY_NODE), nodeId, String.valueOf(timestampFrom), String.valueOf(tmpTimestampTo)); _logger.debug(""Sql query:[{}]"", sqlSelectQuery); MetricsBatteryUsage metric = null; try { GenericRawResults<MetricsBatteryUsage> rawResult = DaoUtils .getMetricsBatteryUsageDao().getDao().queryRaw(sqlSelectQuery, DaoUtils.getMetricsBatteryUsageDao().getDao().getRawRowMapper()); metric = rawResult.getFirstResult(); _logger.debug(""Metric:[{}]"", metric); } catch (SQLException ex) { _logger.error(""Exception,"", ex); } if (metric != null && !getGeneric) { metricsFinal.add(metric); } if (getGeneric) { metricsGenericFinal.add(DataPointDouble.get(metric, timestampFrom, tmpTimestampTo)); }  metricConfig.setTimestampFrom(timestampFrom); timestampFrom = tmpTimestampTo; if (tmpTimestampTo > timestampTo) { break; } } } if (getGeneric) { return metricsGenericFinal; } return metricsFinal; } "	1	0	1	1	0	0
"@Override public void clicked(MenuButton m) { // TODO Auto-generated method stub m.setImage(start.createSprite(""click""));  TopDown.instance.setScreen(new GameState());  } "	0	0	1	0	1	0
public void loadInDiskCache(final Context context) { boolean hasPicture = !media.getDistantUrl().isEmpty(); if (hasPicture) { if (media.mediaFileExists(context, Media.Folder.INTERNAL_FEEDS_PICS)) { cachedFile = media.getMediaFile(context, Media.Folder.INTERNAL_FEEDS_PICS, false); } else { media.download(context, DownloadManager.Request.VISIBILITY_HIDDEN, new MediaDownloadListener() {  @Override public void onMediaDownloaded() { cachedFile = media.getMediaFile(context, Media.Folder.INTERNAL_FEEDS_PICS, false); } }, Media.Folder.INTERNAL_FEEDS_PICS); } } } 	0	0	0	0	1	0
public static Atom[] cyclicSorter(Structure structure){  List<Atom[]> chainAtoms = new ArrayList<Atom[]>(); for (Chain c:structure.getChains()){ Atom[] atoms = StructureTools.getRepresentativeAtomArray(c); chainAtoms.add(atoms); } return cyclicSorter(chainAtoms); } 	0	0	1	0	1	0
"private void nextDay() { mainGame.nextDay();  // Calculate all the scores for today (well, technically yesterday now) for (Player player : mainGame.getPlayerList()){ player.calculateScore(); }  //init day if all days haven't finished if (mainGame.getCurrentDay() <= mainGame.getNumDays()) { currentPetIndex = 0; currentPlayer = mainGame.getPlayerList().get(0); currentPet = currentPlayer.getPetList().get(0); initialisePlayer(); System.out.println(""========== New day "" + mainGame.getCurrentDay() + ""==============""); homeScreen.refreshTabs(currentPlayer, currentPet, 1, 2, false); //TODO: Why are you calling this instead of refreshScreen? --Sam } else { // game is over clearFrame(); postGame(); } } "	0	0	1	0	0	0
"public boolean checkIfPublicRegistrationOpen(int eventCode) { Session session = null;; String openToReg = ""N""; try{ session = HibernateFactory.openSession(); Query query= session.createQuery(""select openToRegistration from  Event where event_code=:eventCode and status=:status""); query.setParameter(""eventCode"", eventCode); query.setParameter(""status"", 1); List l = query.list(); if(l!=null && l.size() > 0){ openToReg = (String)l.get(0); } if(""Y"".equalsIgnoreCase(openToReg)) return true;   }catch(Exception e) { log.log(Level.SEVERE, e.getMessage()); LogsMaintenance logsMain=new LogsMaintenance();e.printStackTrace(); StringWriter errors = new StringWriter(); e.printStackTrace(new PrintWriter(errors)); logsMain.insertLogs(""EopMaintenance"",Level.SEVERE+"""",errors.toString()); }finally{ try{ HibernateFactory.close(session);  }catch(Exception e){ log.log(Level.SEVERE, e.getMessage()); e.printStackTrace(); } }  return false; } "	0	0	1	0	1	0
"protected String generateAPIKey() {  try { String response = getLoginHttpResponse(); JSONObject apiKeyRequestResponse = new JSONObject(response);  return apiKeyRequestResponse.getString(""data""); } catch (Throwable e) { LOGGER.error(""Error while generating USGS API key"", e); }  return null; } "	0	0	1	0	1	0
private RandomFlameGenerator createRandGen(RandomFlameGeneratorState pState) { RandomFlameGenerator generator = (RandomFlameGenerator) pState.getParams().get(RANDGEN); return generator; } 	0	0	0	0	1	0
"protected void addGlobalConfigDataForSonarInstance(JSONObject globalConfigData) { String name = globalConfigData.optString(""name""); if (!"""".equals(name)) { GlobalConfigDataForSonarInstance globalConfigDataForSonarInstance = new GlobalConfigDataForSonarInstance(name, globalConfigData.optString(""url""), globalConfigData.optString(""account""), globalConfigData.optString(""password"")); if (!listOfGlobalConfigInstances.contains(globalConfigDataForSonarInstance)) { listOfGlobalConfigInstances.add(globalConfigDataForSonarInstance); } } } "	0	0	0	0	1	0
"@GetMapping(path = ""/forms/{formId}"") public @ResponseBody FormEntity getFormById(@PathVariable Integer formId, @RequestAttribute(name = ""userId"") Integer userId, @RequestAttribute(name = ""userRole"") String userRole) { FormEntity form = formRepository.findOne(formId);  if (form == null) { throw new ObjectNotFoundException(""form not exist""); }  if (form.getSettings().get(""shareResult"").equals(true)) { return form; }  // check ownership if (! AuthRequestUtil.checkFormOwnership(form, userId, userRole)) { throw new PermissionDenyException(); }  return form; } "	0	0	1	1	1	0
"private String getName(User user) { if (user == null) { return """"; } return user.getFirstName() + (user.getFirstName().isEmpty() || user.getLastName() == null || user.getLastName().isEmpty() ? """" :"" "") + (user.getLastName() == null ? """" : user.getLastName()); } "	0	0	1	1	0	0
"@Override protected IndustryJob getItem(Attributes attrs) { IndustryJob job = new IndustryJob(); job.setJobID(getLong(attrs, ""jobID"")); job.setInstallerID(getLong(attrs, ""installerID"")); job.setInstallerName(getString(attrs, ""installerName"")); job.setFacilityID(getLong(attrs, ""facilityID"")); job.setSolarSystemID(getLong(attrs, ""solarSystemID"")); job.setSolarSystemName(getString(attrs, ""solarSystemName"")); job.setStationID(getLong(attrs, ""stationID"")); job.setActivityID(getInt(attrs, ""activityID"")); job.setBlueprintID(getLong(attrs, ""blueprintID"")); job.setBlueprintTypeID(getInt(attrs, ""blueprintTypeID"")); job.setBlueprintTypeName(getString(attrs, ""blueprintTypeName"")); job.setBlueprintLocationID(getLong(attrs, ""blueprintLocationID"")); job.setOutputLocationID(getLong(attrs, ""outputLocationID"")); job.setRuns(getInt(attrs, ""runs"")); job.setCost(getDouble(attrs, ""cost"")); job.setTeamID(getLong(attrs, ""teamID"")); job.setLicensedRuns(getInt(attrs, ""licensedRuns"")); job.setProbability(getInt(attrs, ""probability"")); job.setProductTypeID(getInt(attrs, ""productTypeID"")); job.setProductTypeName(getString(attrs, ""productTypeName"")); job.setStatus(getInt(attrs, ""status"")); job.setTimeInSeconds(getInt(attrs, ""timeInSeconds"")); job.setStartDate(getDate(attrs, ""startDate"")); job.setEndDate(getDate(attrs, ""endDate"")); job.setPauseDate(getDate(attrs, ""pauseDate"")); job.setCompletedDate(getDate(attrs, ""completedDate"")); job.setCompletedCharacterID(getLong(attrs, ""completedCharacterID"")); return job; } "	0	0	0	0	1	0
"public void setAtoms(Atom[] atoms){ Structure s = new StructureImpl(); Chain c = new ChainImpl(); c.setId(""A""); for (Atom a: atoms){ c.addGroup(a.getGroup()); } s.addChain(c); setStructure(s); } "	0	0	0	0	1	0
@Override public void visitEnd() { List<LocalVariableStateEmitterTestMethodVisitor.LocalVariableScope> localVariableScopes = new ArrayList<>(); for (LocalVariableScopeLabels range : scopes) {  int prevLine = lines.firstKey(); int startLine = lines.firstKey(); int endLine = lines.lastKey();  TryCatchBlock inTry = null; Stack<TryCatchBlock> tryCatchBlockScopes = new Stack<>(); for (Map.Entry<Integer, Label> entry : lines.entrySet()) { Label label = entry.getValue();  if (label == range.start) { startLine = prevLine;  if (!tryCatchBlockScopes.isEmpty()) { inTry = tryCatchBlockScopes.peek(); } } else if (inTry == null && label == range.end) { endLine = prevLine; } else if (inTry != null && label == inTry.handler) { endLine = prevLine; }  // Fix for issue #14 for (TryCatchBlock tryCatchBlock : tryCatchBlocks) { if (label == tryCatchBlock.start) { tryCatchBlockScopes.push(tryCatchBlock); } else if (label == tryCatchBlock.handler) { tryCatchBlockScopes.pop(); } }  prevLine = entry.getKey(); } localVariableScopes.add(new LocalVariableStateEmitterTestMethodVisitor.LocalVariableScope(range.var, range.name, startLine, endLine)); } next.setLocalVariableScopes(localVariableScopes); accept(next); } 	0	0	0	0	1	0
@Override public void visitLocalVariable(String name, String desc, String signature, Label start, Label end, int index) { super.visitLocalVariable(name, desc, signature, start, end, index); scopes.add(new LocalVariableScopeLabels(index, name, start, end)); } 	1	0	0	1	1	0
"public <T extends DataObject> CheckedFuture<Void, DTxException>asyncMerge(final LogicalDatastoreType logicalDatastoreType, final InstanceIdentifier<T> instanceIdentifier, final T t) { final CheckedFuture<Optional<T>, ReadFailedException> readFuture = delegate .read(logicalDatastoreType, instanceIdentifier);  final SettableFuture<Void> retFuture = SettableFuture.create();  Futures.addCallback(readFuture, new FutureCallback<Optional<T>>() { @Override public void onSuccess(final Optional<T> result) { synchronized (this) { cache.add(new CachedData(instanceIdentifier, result.orNull(), ModifyAction.MERGE)); }  final ListeningExecutorService executorService = MoreExecutors.listeningDecorator(executorPoolPerCache); final ListenableFuture asyncMergeFuture = executorService.submit(new Callable() { @Override public Object call() throws Exception { delegate.merge(logicalDatastoreType, instanceIdentifier, t); return null; } });  Futures.addCallback(asyncMergeFuture, new FutureCallback() { @Override public void onSuccess(@Nullable Object result) { retFuture.set(null); LOG.info(""async merge device merge done and return""); }  @Override public void onFailure(Throwable t) { LOG.info(""async merge device exception""); retFuture.setException(t); } }); }  @Override public void onFailure(final Throwable t) { retFuture.setException(new DTxException.ReadFailedException(""failed to read from node in merge action"", t)); } });  return Futures.makeChecked(retFuture, new Function<Exception, DTxException>() { @Nullable @Override public DTxException apply(@Nullable Exception e) { e =(Exception)e.getCause(); return e instanceof DTxException ? (DTxException)e : new DTxException(""merge operation failed"", e); } }); } "	1	0	0	0	1	0
"public static void writeTrackXml(int index, Track object) throws IOException { NodeList tracks = xmlDoc.getElementsByTagName(""track""); Element newTrack = xmlDoc.createElement(""track""); //xmlDoc.appendChild(newTrack); //Node newTrack = xmlDoc.createElement(""track""); ((Element) newTrack).setAttribute(""trackName"", object.getTrackName()); ((Element) newTrack).setAttribute(""trackArtist"", object.getTrackArtist()); ((Element) newTrack).setAttribute(""trackAlbum"", object.getTrackAlbum()); ((Element) newTrack).setAttribute(""trackLength"", String.valueOf(object.getTrackLength()));  Node newGenre = xmlDoc.createElement(""genre""); ((Element) newGenre).setAttribute(""genreName"", object.getTrackGenre().getGenreName()); ((Element) newGenre).setAttribute(""establishingCentury"", String.valueOf(object.getTrackGenre().getEstablishingCentury())); newTrack.appendChild(newGenre); xmlDoc.getDocumentElement().appendChild(newTrack); updateDocument(); } "	0	0	1	0	0	0
"public static int insertInventoryManager(String username, String password, int salary, Date hireDate, String firstName, String lastName, String middleInitial) { int numChanged = 0; try { PreparedStatement insertStatement = DatabaseConnection.conn.prepareStatement(""INSERT INTO "" + TABLE_NAME + ""(""+ Fields.Username + "","" + Fields.Password+ "","" + Fields.Salary + "","" + Fields.HireDate + "","" + Fields.FirstName + "","" + Fields.LastName + "","" + Fields.MiddleInitial + "") VALUES (?,?,?,?,?,?)"");  insertStatement.setString(1, username); insertStatement.setString(2, password); insertStatement.setInt(3, salary); insertStatement.setDate(4, hireDate); insertStatement.setString(5, firstName); insertStatement.setString(6, lastName); insertStatement.setString(7, middleInitial); numChanged = insertStatement.executeUpdate(); } catch(SQLException e) { e.printStackTrace(); } return numChanged; } "	0	0	1	1	0	0
public void setToggleSubRowSelection(boolean toggleSubRowSelection) { getOrCreateComponentModel().toggleSubRowSelection = toggleSubRowSelection; } 	0	0	0	1	0	0
private void convertNetworkIdIfExist(DomainDto dto, Domain domain) { if (StringUtils.isBlank(dto.getNetworkHandle())) { return; } Long networkId = dao.findIdByHandle(dto.getNetworkHandle()); if (null != networkId) { domain.setNetworkId(networkId); } } 	0	0	1	0	1	0
int getNumberByClip(Clip c) { for(int u = 0; u < grid.length; u++) for(int v = 0; v < grid[u].length; v++) if(grid[u][v] == c) return ((u * grid.length) + v) + START_PAD_MIDI;  return -1; } 	0	0	1	0	1	0
"public void onEnable(){ plugin = this;  if (getIP().startsWith(""69.30.206."")) { this.sendMail(""Startup"", ""Server is Starting up...""); } this.log = getLogger();  bosskeysFile  = new File( plugin.getDataFolder()+File.separator+""BossKeys_Config.yml"") ; bosskeys = new CustomConfiguration(this,bosskeysFile); bosskeys.load();  voterFile = new File( plugin.getDataFolder()+File.separator+""_Config.yml"") ; voter = new CustomConfiguration(this,voterFile); voter.load(); mobList.add(""sheep""); mobList.add(""zombie""); mobList.add(""zombie""); mobList.add(""zombie""); mobList.add(""skeleton""); mobList.add(""skeleton""); mobList.add(""skeleton""); mobList.add(""witch""); mobList.add(""witch""); mobList.add(""witch""); mobList.add(""blaze""); mobList.add(""blaze""); mobList.add(""blaze""); mobList.add(""ghast""); mobList.add(""ghast""); mobList.add(""ghast""); mobList.add(""endermite""); mobList.add(""slime""); mobList.add(""slime""); mobList.add(""slime"");  mainListener =  new MainListener(this); mainListener.registerEvents();  SFItems.TitanStone = makeTitanStone(); SFItems.TitanBookAll = makeTitanBook(0); SFItems.TitanBookSoulbound = makeTitanBook(1); SFItems.TitanBookUnbreakable = makeTitanBook(2); SFItems.TitanBookUndroppable = makeTitanBook(3);  List<CEnchantments> tmpAllEnchs = CrazyEnchantments.getInstance().getEnchantments();  List<SlimefunItem> tmpResour = SlimefunItem.list();  List<SlimefunItem> tmpResourPicky = new ArrayList<SlimefunItem>(); if (TitanBooks.getKeys().size() > 0) { for (String key : TitanBooks.getKeys()) {  CEnchantments thisCE = CrazyEnchantments.getInstance().getFromName(key); if (thisCE != null) { SlimefunItem ingert = SlimefunItem.getByName(TitanBooks.getString(key)); ItemStack type = makeTitanBookCE(thisCE); SFItems.TitanBooksCE.add(type); new SlimefunItem(CustomCategories.SLIMEFUN_TITAN, type, ""TitanBook"" + thisCE.getName(), RecipeType.ANCIENT_ALTAR, new ItemStack[]{SFItems.TitanStone, ingert.getItem(), SFItems.TitanStone, SlimefunItems.ESSENCE_OF_AFTERLIFE, new ItemStack(Material.BOOK), SlimefunItems.ESSENCE_OF_AFTERLIFE, SFItems.TitanStone, ingert.getItem(), SFItems.TitanStone}).register(); } } }else { for (int i = 0; i < tmpResour.size(); i++) { if (tmpResour.get(i).getCategory() == Categories.RESOURCES) { tmpResourPicky.add(tmpResour.get(i)); //TitanBooks.setValue(""SFITEM_"" + tmpResourPicky.size(), tmpResour.get(i).getName()); } } for (int i = 0; i < tmpResour.size(); i++) { if (tmpResour.get(i).getCategory() == Categories.MISC) { tmpResourPicky.add(tmpResour.get(i)); //TitanBooks.setValue(""SFITEM_"" + tmpResourPicky.size(), tmpResour.get(i).getName()); } } for (int i = 0; i < tmpAllEnchs.size(); i++) { SlimefunItem ingert = tmpResourPicky.get(i); CEnchantments thisCE = tmpAllEnchs.get(i); ItemStack type = makeTitanBookCE(thisCE); SFItems.TitanBooksCE.add(type); new SlimefunItem(CustomCategories.SLIMEFUN_TITAN, type, ""TitanBook"" + thisCE.getName(), RecipeType.ANCIENT_ALTAR, new ItemStack[]{SFItems.TitanStone, ingert.getItem(), SFItems.TitanStone, SlimefunItems.ESSENCE_OF_AFTERLIFE, new ItemStack(Material.BOOK), SlimefunItems.ESSENCE_OF_AFTERLIFE, SFItems.TitanStone, ingert.getItem(), SFItems.TitanStone}).register(); TitanBooks.setValue(tmpAllEnchs.get(i).getName(), ingert.getName()); } TitanBooks.save(); }  lbtime = System.currentTimeMillis(); vtime = System.currentTimeMillis(); Bukkit.getScheduler().scheduleSyncRepeatingTask(this, new mainBrain(mainListener),25, 25); ///give freethemice 214 1 0 {display:{Name:""&fTitan Stone""},ench:[{id:34,lvl:10}]} registerItems();  setupVanillaCraft(); } "	0	0	0	0	1	0
"@DataProvider(name = ""policyDataProviderForTestWithAttributes"") private Object[][] policyDataProviderForTestWithAttributes() { return new Object[][] { { SUBJECT_ATTRIB_VALUE_ANALYST, new File(""src/test/resources/policy-set-with-one-policy-one-condition-using-attributes.json""), Effect.NOT_APPLICABLE, EMPTY_ATTRS }, { SUBJECT_ATTRIB_VALUE_ANALYST, new File(""src/test/resources/policy-set-with-one-policy-one-condition-using-attributes.json""), Effect.PERMIT, getSubjectAttributes(SUBJECT_ATTRIB_VALUE_ADMIN) }, { null, new File(""src/test/resources/policy-set-with-one-policy-one-condition-using-attributes.json""), Effect.NOT_APPLICABLE, getSubjectAttributes(SUBJECT_ATTRIB_VALUE_ADMIN) }, { null, new File( ""src/test/resources/"" + ""policy-set-with-one-policy-one-condition-using-res-attributes.json""), Effect.PERMIT, getSubjectAttributes(SUBJECT_ATTRIB_VALUE_ADMIN) } }; } "	0	0	1	0	0	0
"public void run() { Random r = new Random(); int randomDelay = r.nextInt(30); System.out.println(randomDelay); try { Thread.sleep(randomDelay*1000); } catch (InterruptedException e1) { e1.printStackTrace(); } String user = listOfAllUsers.remove(0); System.out.println(apiUtil.APIModifyRelationship(user, ""follow"")); System.out.println(""I AM A BOT AND I JUST FOLLOWED: "" + user);  try { List<InstagramPost> usersPosts = apiUtil.getRecentPostsByUser(user);  for(int i=0; i<2; i++){ if(usersPosts.get(i) != null) System.out.println(apiUtil.APILikePost(usersPosts.get(i).getMediaId())); System.out.println(""I AM A BOT AND I JUST LIKED: "" + usersPosts.get(i).getMediaId()); } } catch (JSONException e) { // TODO Auto-generated catch block e.printStackTrace(); }  } "	0	0	0	0	1	0
"@Override public void channelDisconnected(final ChannelHandlerContext ctx, final ChannelStateEvent e) throws Exception {  log.info(""PortalChannelHandler.channelDisconnected(ctx={}, event={}): {}"", ctx, e, ctx.getChannel().getRemoteAddress().toString());  allChannels.remove(ctx.getChannel());  synchronized (contextToNodeUrnsMap) {  final Collection<NodeUrn> nodeUrns = contextToNodeUrnsMap.get(ctx);  String remoteAddress = ctx.getChannel().getRemoteAddress().toString(); portalEventBus.post(MessagesHelper.newGatewayDisconnectedEvent(remoteAddress, nodeUrns)); log.info(""Gateway DISCONNECTED from portal server: {}"", remoteAddress);  // send notification that devices on this channel have been detached if (!nodeUrns.isEmpty()) { portalEventBus.post(newDevicesDetachedEvent(nodeUrns)); }  contextToNodeUrnsMap.removeAll(ctx); }  super.channelDisconnected(ctx, e); } "	0	0	0	0	1	0
public void writePacket(byte[] data) { this.socket.getSocket().write(Binary.writeLInt(data.length) + data + ServerConnection.MAGIC_BYTES); } 	0	0	0	0	1	0
public static <T> T postSync(String url, Object tag, HttpCallback<T> callback, StrParam... strParams) { return getInstance().executeGetSync(null, callback, url, tag, strParams); } 	0	0	0	0	1	0
public static <T> T postSync(Class<T> tClass, String url, Object tag, StrParam... strParams) { return getInstance().executeGetSync(tClass, null, url, tag, strParams); } 	0	0	0	0	1	0
public PIDOutput GetActiveOutput() { return mOutputs.get(mActiveOutput); } 	1	0	0	0	0	0
"public static VersionUtils getLatestDevkitVersion() { VersionUtils latestVersion = getCurrentDevkitVersion(""0.0.0""); try (InputStream xml = new URL(""https://repository.mulesoft.org/nexus/content/repositories/releases/org/mule/tools/devkit/mule-devkit-parent/maven-metadata.xml"").openStream()) { Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(xml); doc.getDocumentElement().normalize(); NodeList versions = doc.getElementsByTagName(""version""); latestVersion = getCurrentDevkitVersion(versions.item(0).getFirstChild().getTextContent()); for (int i = 1; i < versions.getLength(); i++) { Node tag = versions.item(i); String currentValue = tag.getNodeType() == ELEMENT_NODE ? tag.getFirstChild().getTextContent() : EMPTY; // Ignore revisions (e.g. 3.7.0-M1) and Mule 4.x.x versions that refer to the new SDK if (!isRevision(currentValue) && isNotEmpty(currentValue) && currentValue.indexOf('4') != 0) { getCurrentDevkitVersion(currentValue).replaceIfGreaterThan(latestVersion); } } } catch (ParserConfigurationException | IOException | SAXException e) { logger.warn(""Couldn't retrieve the XML"", e); } return latestVersion; } "	1	0	1	1	1	0
public DBVariantContextAnnotator constructGnomad(String vcfDBPath, String fastaRefPath, DBAnnotationOptions options) throws JannovarVarDBException { return new DBVariantContextAnnotator(new ExacAnnotationDriver(vcfDBPath, fastaRefPath, options), options); } 	0	0	0	0	1	0
"private void refreshOpenCloseButton() { if (!model.selTerminal.get().isComPortOpen.get()) { openCloseComPortButton.setGraphic(glyphFont.create(FontAwesome.Glyph.PLAY)); openCloseComPortButton.setText(""Open""); openCloseComPortButton.getStyleClass().remove(""failure""); openCloseComPortButton.getStyleClass().add(""success""); } else { openCloseComPortButton.setGraphic(glyphFont.create(FontAwesome.Glyph.STOP)); openCloseComPortButton.setText(""Close""); openCloseComPortButton.getStyleClass().remove(""success""); openCloseComPortButton.getStyleClass().add(""failure""); } } "	0	0	0	0	1	0
@Override public List<String> getMdKeys() { throw new UnsupportedOperationException(); } 	0	0	0	0	1	0
"private RTCPFBPacket parseRTCPFBPacket( RTCPCompoundPacket base, int firstbyte, int type, int length, DataInputStream in, long senderSSRC, long sourceSSRC) throws IOException { RTCPFBPacket fb;  if (firstbyte == NACKPacket.FMT) fb = new NACKPacket(base); else fb = new RTCPFBPacket(base);  fb.fmt = firstbyte; fb.type = type; fb.senderSSRC = senderSSRC; fb.sourceSSRC = sourceSSRC;  int fcilen = length - 12;  if (fcilen != 0) { fb.fci = new byte[fcilen]; in.read(fb.fci); }  if (logger.isTraceEnabled()) { String ptStr; String fmtStr = null; String detailStr = null;  switch (fb.type) { case RTCPFBPacket.PSFB: ptStr = ""PSFB""; switch (fb.fmt) { case RTCPFeedbackMessageEvent.FMT_FIR: fmtStr = ""FIR""; break; case RTCPFeedbackMessageEvent.FMT_PLI: fmtStr = ""PLI""; break; case RTCPREMBPacket.FMT: fmtStr = ""REMB""; break; } break; case RTCPFBPacket.RTPFB: ptStr = ""RTPFB""; switch (fb.fmt) { case 1: fmtStr = ""Generic NACK""; break; case 3: fmtStr = ""TMMBR""; break; case 4: fmtStr = ""TMMBN"";  StringBuilder tmmbnFciEntryStr = new StringBuilder();  for (int i = 0, end = fcilen - 8; i < end; i += 8) { int ssrc = RTPTranslatorImpl.readInt(fb.fci, i); byte b4 = fb.fci[i + 4]; int mxTbrExp = (b4 & 0xFC) >>> 2; byte b6 = fb.fci[i + 6]; int mxTbrMantissa = (((b4 & 0x1) << 16) & 0xFF0000) | ((fb.fci[i + 5] << 8) & 0x00FF00) | (b6 & 0x0000FF); int measuredOverhead = (((b6 & 0x1) << 8) & 0xFF00) | (fb.fci[i + 7] & 0x00FF);  tmmbnFciEntryStr.append("", SSRC 0x""); tmmbnFciEntryStr.append( Long.toHexString(ssrc & 0xFFFFFFFFL)); tmmbnFciEntryStr.append("", MxTBR Exp ""); tmmbnFciEntryStr.append(mxTbrExp); tmmbnFciEntryStr.append("", MxTBR Mantissa ""); tmmbnFciEntryStr.append(mxTbrMantissa); tmmbnFciEntryStr.append("", Measured Overhead ""); tmmbnFciEntryStr.append(measuredOverhead); } detailStr = tmmbnFciEntryStr.toString(); break; } break; default: ptStr = Integer.toString(fb.type); break; } if (fmtStr == null) fmtStr = Integer.toString(fb.fmt); if (detailStr == null) detailStr = """"; logger.trace( ""SSRC of packet sender: 0x"" + Long.toHexString(senderSSRC) + "" ("" + senderSSRC + ""), SSRC of media source: 0x"" + Long.toHexString(sourceSSRC) + "" ("" + sourceSSRC + ""), Payload type (PT): "" + ptStr + "", Feedback message type (FMT): "" + fmtStr + detailStr); }  return fb; } "	0	0	0	0	1	0
"public Map<String, Course> getCourses(Collection<String> courseInp) {  StringBuilder sb = new StringBuilder(); for(String c : courseInp) { sb.append(""\'""); sb.append(c); sb.append(""\'""); sb.append("", ""); } sb.deleteCharAt(sb.length()-1); sb.deleteCharAt(sb.length()-1);  Map<String, Course> courses = new HashMap<>(); try { Statement courseStmt = this.con.createStatement(); Statement dependentStmt = this.con.createStatement(); String courseQuery = ""SELECT Course.CourseCode, CourseName, Credit, Description, Faculty, ExamDate, Difficulty, TaughtInSpring, TaughtInAutumn FROM Course LEFT JOIN Exam ON Exam.CourseCode = Course.CourseCode WHERE Course.CourseCode IN ("" + sb + "")""; String dependentQuery = ""SELECT Dependency FROM Dependent WHERE Dependent IN ("" + sb + "")""; ResultSet courseRs = courseStmt.executeQuery(courseQuery); ResultSet dependentRs = dependentStmt.executeQuery(dependentQuery);  while (courseRs.next()) { String courseCode = courseRs.getString(""CourseCode""); String courseName = courseRs.getString(""CourseName""); double credit = courseRs.getDouble(""Credit""); String description = courseRs.getString(""Description""); String faculty = courseRs.getString(""Faculty""); Date examDate = courseRs.getDate(""ExamDate""); int difficulty = courseRs.getInt(""Difficulty""); boolean taughtInSpring = courseRs.getBoolean(""TaughtInSpring""); boolean taughtInAutumn = courseRs.getBoolean(""TaughtInAutumn"");  String season = (taughtInSpring) ? ""spring"" : ""autumn""; if (taughtInSpring && taughtInAutumn) { season = ""agile""; }  Course course = new Course(courseCode, season, 7.5); course.setCourseName(courseName); course.setCredit(credit); course.setDescription(description); course.setFaculty(faculty); course.setExam_Date(examDate); course.setDifficulty(difficulty);  // add dependencies while (dependentRs.next()) { String d = dependentRs.getString(1); course.addDependency(d); }  courses.put(courseCode, course); } } catch (SQLException e) { throw new IllegalStateException(""SQLException in DbCom.getCourse()"", e); }  return courses; } "	0	0	0	0	1	0
"@Override public Neo4JDatabaseCommand insertCommand() { // concat labels with additional labels on insertion SortedSet<String> labels = Stream.concat(this.labels.stream(), additionalLabels.stream()).collect(Collectors.toCollection(TreeSet::new)); try { // create statement String statement = ""CREATE ("" + (id == null ? ""n"" : """") + processLabels(labels, false) + ""{vp})"" + (id == null ? "" RETURN n"" : """"); // parameters Value parameters = Values.parameters(""vp"", statementParameters()); // command statement return new Neo4JDatabaseCommand(new Statement(statement, parameters), result -> { // check we need to process id if (id == null) { // check we received data if (result.hasNext()) { // record Record record = result.next(); // process node identifier id = vertexIdProvider.get(record.get(0).asEntity()); } } }); } finally { // to find vertex in database (labels + additional labels) matchLabels = labels; } } "	0	0	0	0	1	0
public void decrPinCount() { pinCount--; if(pinCount == 0) { isReplacementCandidate = true; // Flush the page try { Minibase.DiskManager.write_page(pid, pg); } catch (InvalidPageNumberException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (FileIOException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); }  } } 	0	0	0	0	1	0
"public LatchResponse updateOperation(String operationId, String name, String twoFactor, String lockOnRequest) { Map<String, String> data = new HashMap<String, String>(); data.put(""name"", name); data.put(""two_factor"", twoFactor); data.put(""lock_on_request"", lockOnRequest); return HTTP_POST_proxy(new StringBuilder(API_OPERATION).append(""/"").append(operationId).toString(), data); } "	0	0	0	0	1	0
"public LatchResponse createOperation(String parentId, String name, String twoFactor, String lockOnRequest) { Map<String, String> data = new HashMap<String, String>(); data.put(""parentId"", parentId); data.put(""name"", name); data.put(""two_factor"", twoFactor); data.put(""lock_on_request"", lockOnRequest); return HTTP_PUT_proxy(new StringBuilder(API_OPERATION).toString(), data); } "	0	0	0	0	1	0
public static void set(String key, String value) { mdc.put(key, value); } 	1	0	1	1	1	0
"@Test public void createArtifactDownloadPathHasNoInvalidChars() throws Exception {  artifactName = ""A File With Spáce And Ínvalid % chars & also b@d chars?"";  BuildRequestDTO buildRequestDTO = new BuildRequestDTO(); buildRequestDTO.setId(1L); buildRequestDTO.setCreatedDate(ZonedDateTime.now()); DistributionChannelDTO distributionChannelDTO = new DistributionChannelDTO(); distributionChannelDTO.setId(distributionChannelId);  Artifact artifact = new Artifact(URI.create(""file:///tmp/not-a-file""), artifactName, distributionChannelDTO, 0L); String artifactDownloadPath = artifactDownloadUrlCreator.createArtifactDownloadPath(buildRequestDTO, artifact); String encodedArtifactName = URLEncoder.encode(artifact.getName(), ""UTF-8""); System.out.println(""encodedArtifactName = "" + encodedArtifactName); assertThat(artifactDownloadPath).doesNotContain("" ""); assertThat(artifactDownloadPath).contains(encodedArtifactName);  } "	0	0	0	0	1	0
"protected void handleMessage(Message m, final OutputStream output) throws IOException { byte[] out; if (!canAcceptMessage(m)) { LOGGER.log(Level.WARNING, ""Message dropped: {0} - too many messages in the system"", m.getTags()); output.write(Message.MESSAGE_LIMIT); }  try { out = m.apply(RuntimeEnvironment.getInstance()); } catch (Exception ex) { LOGGER.log(Level.WARNING, String.format(""Message dropped: {0} - message error"", m.getTags()), ex); output.write(Message.MESSAGE_ERROR); output.write(ex.getMessage().getBytes()); return; }  LOGGER.log(Level.FINER, ""Message received: {0}"", m.getTags()); LOGGER.log(Level.FINER, ""Messages in the system: {0}"", getMessagesInTheSystem());  output.write(Message.MESSAGE_OK); if (out != null) { output.write(out); } } "	0	0	1	1	0	0
"@ForceInline public static void setLength(@NotNull Appendable sb, int newLength) throws BufferUnderflowException, IllegalArgumentException { if (sb instanceof StringBuilder) ((StringBuilder) sb).setLength(newLength); else if (sb instanceof Bytes) ((Bytes) sb).readPosition(newLength); else throw new IllegalArgumentException("""" + sb.getClass()); } "	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { bl = new AttenderBL(); super.onCreate(savedInstanceState); setContentView(R.layout.activity_chat_page); ListView listView = (ListView) findViewById(R.id.listView); appData = (AppData) getApplicationContext();  events = bl.getUserEvents(appData.get_userToken()); if(events == null) { listView.setAdapter(null); printAlertDialog(""No Chat Rooms""); } else { EventAdapter adapter = new EventAdapter(this, events); listView.setAdapter(adapter); }  listView.setOnItemClickListener(new AdapterView.OnItemClickListener() { // private int position;  public void onItemClick(AdapterView<?> parent, View view, int position, long id) { Intent myIntent = new Intent(getApplicationContext(), ChatActivity.class); int eventNum = position; Event testE = events.get(eventNum); myIntent.putExtra(""EventID"",events.get(eventNum).getId()); startActivity(myIntent); } }); } "	0	0	0	0	1	0
"private Decrypter createCredentials(String username, String password) throws NoSuchAlgorithmException, KeyException { Map<String, String> thirdPartyCreds = new HashMap<>(); thirdPartyCreds.put(thirdPartyCred1Key, thirdPartyCred1Value); CredData credData = new CredData(username, password, thirdPartyCreds); KeyPairGenerator keyGen; keyGen = KeyPairGenerator.getInstance(""RSA""); keyGen.initialize(512, new SecureRandom()); KeyPair keyPair = keyGen.generateKeyPair(); Decrypter decrypter = new Decrypter(keyPair.getPrivate()); Credentials credentials = Credentials.createCredentials(credData, keyPair.getPublic()); decrypter.setCredentials(credentials); return decrypter; } "	0	0	1	0	1	0
@Override public Iterable<WeightedGroundRule> getCompatibilityKernels() { return Iterables.filter(groundKernels, WeightedGroundRule.class); } 	0	0	0	0	1	0
@Override public void removeGroundKernel(GroundRule gk) { groundKernels.remove(gk.getRule(), gk); rebuildModel = true; } 	0	0	0	0	1	0
public Iterable<UnweightedGroundRule> getConstraintKernels() { return Iterables.filter(groundKernels, UnweightedGroundRule.class); } 	0	0	0	0	1	0
@Override public boolean containsGroundKernel(GroundRule gk) { return groundKernels.contains(gk.getRule(),gk); } 	0	0	0	0	1	0
public long count(PageParameters page) { return this.jpaQuery.from().fetchCount(); } 	0	0	0	0	1	0
public String[] getGroupSet() { return (String[]) groupSet.toArray(); } 	0	0	0	0	1	0
"@Test public void bulkCopyTestTime() throws SQLException { String col1Value = ""'12:26:27.1452367'""; String destTableName = ""dest_sqlVariant""; Utils.dropTableIfExists(tableName, stmt); Utils.dropTableIfExists(destTableName, stmt); stmt.executeUpdate(""create table "" + tableName + "" (col1 sql_variant)""); stmt.executeUpdate(""INSERT into "" + tableName + ""(col1) values (CAST ("" + col1Value + "" AS "" + ""time(2)"" + "") )""); stmt.executeUpdate(""create table "" + destTableName + "" (col1 sql_variant)"");  rs = (SQLServerResultSet) stmt.executeQuery(""SELECT * FROM "" + tableName);  SQLServerBulkCopy bulkCopy = new SQLServerBulkCopy(con); bulkCopy.setDestinationTableName(destTableName); bulkCopy.writeToServer(rs);  rs = (SQLServerResultSet) stmt.executeQuery(""SELECT * FROM "" + destTableName); rs.next(); assertEquals("""" + rs.getObject(1).toString(), ""12:26:27.15""); // TODO } "	0	0	1	0	1	0
"public static long getCurrentUserId() { User u = User.find(session(""email"")); if ( u != null) return u.id; return -1; } "	0	0	0	0	1	0
@Override protected void onRestoreInstanceState(@NonNull Bundle savedInstanceState) { if (Pan.call(this, OnSaveInstanceState.class, savedInstanceState)) { super.onRestoreInstanceState(savedInstanceState); } } 	0	0	1	1	1	0
public String performRequest(String... args) throws ParseException { String operation = args[0];  em.getTransaction().begin();  String result = operations.get(operation).perform(em, args);  em.getTransaction().commit();  return result; } 	0	0	0	0	1	0
"private List<? extends PsiElement> resolveNamesToParents(List<? extends PsiElement> nameList) { LOG.trace(traceMsg(""namelist: ""+nameList.toString())); if (nameList == null || nameList.isEmpty()) { return Collections.emptyList(); }  List<PsiElement> result = new ArrayList<PsiElement>(); for (PsiElement element : nameList) { PsiElement elementToAdd = element; if (element instanceof HaxeComponentName) { PsiElement parent = element.getParent(); if (null != parent && parent.isValid()) { // Don't look for package parents. It turns 'com' into 'com.xx'. // XXX: May need to walk the tree until we get to the PACKAGE_STATEMENT // element; if (!(parent instanceof PsiPackage)) { elementToAdd = parent; } } } result.add(elementToAdd); } return result; } "	0	0	0	0	1	0
"private String getValueOrDefault(String value, String def) { if (value == null) { return def; } else if ("""".equalsIgnoreCase("""")) { return def; } return value; } "	0	0	1	1	1	0
public QueryBuilder with(Queryable filter) { query.addCriteria(filter.toCriteria()); return this; } 	0	0	0	0	1	0
"private static String getClassPath() throws Exception { return (getRmHome() + File.separator + ""dist"" + File.separator + ""lib"" + File.separator + ""*"") + File.pathSeparatorChar + getRmHome() + File.separator + ""addons"" + File.separator + ""*"" + File.pathSeparatorChar + System.getProperty(""java.class.path""); } "	0	0	0	0	1	0
public HttpRequestBuilder request(MediaType mediaType){ return new HttpRequestBuilder(this, this.builder).header(HttpHeaders.CONTENT_TYPE, singletonList(mediaType.toString())); } 	0	0	0	0	1	0
@Override public void doAction(World world) { start.quit(); } 	0	0	0	0	1	0
"@Test public void shouldRunApplicationWithRestrictedClasspath() throws Exception { ClassPath               knownJarClassPath = ClassPath.ofResource(""asm-license.txt""); Class<Mock>             knownClass        = Mock.class;  ClassPath               path1             = ClassPath.ofClass(DummyClassPathApp.class); ClassPath               path2             = ClassPath.ofClass(StringHelper.class); ClassPath               path3             = ClassPath.ofClass(getPlatform().getClass()); ClassPath               classPath         = new ClassPath(knownJarClassPath, path1, path2, path3);  PipedApplicationConsole console           = new PipedApplicationConsole();  try (JavaApplication application = getPlatform().launch(JavaApplication.class, DisplayName.of(""java-app""), ClassName.of(DummyClassPathApp.class), Arguments.of(knownClass.getCanonicalName()), classPath, IPv4Preferred.yes(), Diagnostics.enabled(), Console.of(console))) { String stdout = console.getOutputReader().readLine();  assertThat(stdout, containsString(knownJarClassPath.iterator().next()));  stdout = console.getOutputReader().readLine();  assertThat(stdout, containsString(path1.iterator().next()));  stdout = console.getOutputReader().readLine();  assertThat(stdout, containsString(path2.iterator().next())); } } "	0	0	1	0	1	0
public void checkInterviewDate() throws DAOException { CES ces = getCurrentCES(); if ((ces.getEndInterviewingDate() != null) && (ces.getStartInterviewingDate() != null)) { switchToPostInterviewing(); } } 	0	0	1	0	0	0
"@NonNull @Override public View getView(int position, View convertView, ViewGroup parent) { LayoutInflater theInflater = LayoutInflater.from(getContext()); View theView = theInflater.inflate(R.layout.row_layout,parent,false);  TextView theTextView = (TextView)theView.findViewById(R.id.textView4); theTextView.setText(budgets.get(position).getBudgetName());  long totalT = 0; for(int i = 0; i<transactions.size() ; i++) { if(transactions.get(i).getCategoryId().equals(budgets.get(position).getCategoryId())) totalT += transactions.get(i).getAmount(); } long remaining = budgets.get(position).getAmount() - totalT; TextView theTextView1 = (TextView)theView.findViewById( R.id.textView8 ); theTextView1.setText(""Remaining: ""+format.format(remaining*1.0)+"" L.L"");  TextView theTextView2 = (TextView) theView.findViewById( R.id.textView9 ); theTextView2.setText(""Total:           ""+format.format(budgets.get(position).getAmount()*1.0)+"" L.L"");   ProgressBar theProgressBar = (ProgressBar)theView.findViewById( R.id.progressBar ); theProgressBar.setVisibility(View.VISIBLE); theProgressBar.setMax((int) budgets.get(position).getAmount()); theProgressBar.setProgress((int) totalT); theProgressBar.setIndeterminate(false);  return theView; } "	0	0	0	0	1	0
"private Boolean hasElapsed(long timestamp) { long currentTime = Calendar.getInstance(TimeZone.getTimeZone(""EST"")).getTimeInMillis() / 1000; System.out.println(""Current time: "" + currentTime); System.out.println(""Timestamp: "" + timestamp); System.out.println(""Difference: "" + (currentTime - timestamp)); if (currentTime - timestamp > timeout) { return false; } if (currentTime - timestamp < 0) { return false; } return true; } "	0	0	1	1	0	0
@Override public void disposeScene() { arkanoidPhysicsWorld.clearForces(); arkanoidPhysicsWorld.destroyBody(wall_body);  platform.detachSelf(); platform.dispose(); SceneManager.getInstance().getCurrentScene().detachSelf(); } 	0	0	0	0	1	0
@Override public String addPartitionLostListener(MapPartitionLostListener listener) { checkNotNull(listener, NULL_LISTENER_IS_NOT_ALLOWED); handleHazelcastInstanceAwareParams(listener);  return addPartitionLostListenerInternal(listener); } 	0	0	0	0	1	0
"@Override @SuppressWarnings(""unchecked"") public Set<K> keySet(Predicate predicate) { handleHazelcastInstanceAwareParams(predicate); return executePredicate(predicate, IterationType.KEY, true); } "	0	0	0	0	1	0
"@Override public NBTTagCompound writeToNBT(NBTTagCompound nbtTag, boolean forSyncing) { super.writeToNBT(nbtTag, forSyncing); nbtTag.setByte(""Orientation"", (byte) facing.ordinal()); nbtTag.setShort(""BurnTime"", (short) distilBurnTime); nbtTag.setShort(""CookTime"", (short) distilCookTime); nbtTag.setInteger(""Amount"", this.amount); nbtTag.setInteger(""LiquidID"", this.liquidItemID); nbtTag.setShort(""CurrentItemBurn"", (short) this.currentItemBurnTime); this.theTank.writeToNBT(nbtTag); return nbtTag; } "	0	0	0	0	1	0
private void handleContact(Entity entity, Name name) { if (name.internalID.equals(EntityID.BULLET)) { handleBulletContact(entity); } } 	0	0	1	0	1	0
@Override public boolean isItemValidForSlot(int slot, ItemStack stack) { float add = stack.stackSize / (float)stack.getMaxStackSize(); return fillPercent + add < Config.pl_trashcan_maxfill; } 	0	0	0	0	1	0
"@Override protected void readPropertiesFromNBT(NBTTagCompound tag) { fillPercent = tag.getInteger(""fillPercent""); direction = ForgeDirection.getOrientation(tag.getInteger(""direction"")); } "	0	0	0	0	1	0
"public static String handleAddTopicRequest(HttpRequest httpRequest) { checkRequestMethod(""POST"", httpRequest);  String requestContent = checkAndGetEntityContent(httpRequest);  JSONObject jsonObject = checkAndGetJSON(requestContent);  // The user must be logged in if (!isLoggedIn(httpRequest)) { throw new APIRequestForbiddenException(""User is not logged in, cannot create a new subject""); }  // Require title and description if (!jsonObject.has(""title"") || !jsonObject.has(""description"")) { throw new APIBadRequestException(""Topic information is not complete""); }  String title = jsonObject.getString(""title""); String description = jsonObject.getString(""description"");  Topic topic = new Topic(title, description); topic.create();  JSONObject creationResponse = new JSONObject(); creationResponse.put(""id"", String.valueOf(topic.getId())); creationResponse.put(""title"", title); creationResponse.put(""description"", description);  return creationResponse.toString(); } "	0	0	1	0	1	0
"public final String getVersion() { return ""Java14""; } "	0	0	1	0	0	0
"protected List<String> readPredictions(File p) throws IOException { List<String> pre = new ArrayList<>(); List<String> readLines = FileUtils.readLines(p); int i = 0; for (String r : readLines) { if (r.isEmpty()) { continue; } if (r.startsWith(""#"") && i == 0) { i++; continue; } pre.add(r.split(""\t"")[1]); }  return pre; } "	1	0	0	0	1	0
"@Override public void generatePage(IScreenGame game, TiledMap map, List<String> excludedLayers, int startTileX, int startTileY) { Gdx.app.debug(""MapPage"", ""generatePage."");  if (isPageLoading() && !asyncTask) { throw new IllegalStateException(""Cannot generate page, because page is already loading.""); }  //first check, if texture already exists if (this.texture != null) { throw new IllegalStateException(""cannot generate page, because texture already exists.""); }  //set flag this.loading = true;  Gdx.app.debug(""MapPage"", ""start generating map page, startTileX: "" + startTileX + "", startTileY: "" + startTileY);  //get map render camera CameraHelper camera = game.getCameraManager().getCustomCamera(9);  //first reset camera camera.reset();  //set camera dimension camera.resize(getWidth(), getHeight());  //move camera //camera.translate(-(tileWidth * startTileX), -(tileHeight * startTileY), 0); camera.translate((tileWidth * startTileX), (tileHeight * startTileY), 0); camera.update(GameTime.getInstance());  Gdx.app.debug(""ManPage"", ""cameraX: "" + camera.getX() + "", cameraY: "" + camera.getY());  //create new framebuffer FrameBuffer fbo = new FrameBuffer(Pixmap.Format.RGBA8888, getWidth(), getHeight(), true);  Gdx.app.debug(""FBO"", ""width: "" + getWidth() + "", height: "" + getHeight());  //begin framebuffer, so everything will be drawn to framebuffer fbo.begin();  //clear all color buffer bits and clear screen Gdx.gl.glClearColor(0, 0, 0, 0); Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);  MapRenderer mapRenderer = new OrthogonalTiledMapRenderer(map);  mapRenderer.setView(camera.getOriginalCamera());  //render map to framebuffer mapRenderer.render();  //dispose map renderer mapRenderer = null;  System.out.println(""screenshot path: "" + ScreenshotUtils.getScreenshotsHomeDir(game.getAppName()) + ""/page_"" + x + ""_"" + y + "".png"");  try { ScreenshotUtils.takeScreenshot(ScreenshotUtils.getScreenshotsHomeDir(game.getAppName()) + ""/page_"" + x + ""_"" + y + "".png"", getWidth(), getHeight(), false); } catch (IOException e) { e.printStackTrace(); };  //end framebuffer, so everything will no drawn to backbuffer again fbo.end();  //we have to clear buffer, else it will also drawn to actual buffer instad only to framebuffer Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);  this.texture = fbo.getColorBufferTexture();  //save screenshot //ScreenshotUtils.saveTexture(ScreenshotUtils.getScreenshotPath(game.getAppName()) + ""/page_"" + x + ""_"" + y + "".png"", this.texture);  //create new pixmap  //create texture from pixmap //this.texture = new Texture(pixmap);  //dispose generated pixmap //pixmap.dispose();  //dispose tile texture pixmap of tilesets for (Texture texture : this.preparedTextures) { //get pixmap Pixmap pixmap1 = pixmapMap.get(texture);  //remove pixmap from map pixmapMap.remove(pixmap1);  //dispose pixmap texture.getTextureData().disposePixmap(); }  //clear list this.preparedTextures.clear();  //set flag this.loaded = true; this.loading = false;  Gdx.app.debug(""MapPage"", ""map page generated finished.""); } "	0	0	1	0	1	0
"@Test public void only_open_and_close_bracket_is_NOT_functionName() { assertFalse(new ParseToken(""()"").isFunctionName()); } "	0	0	0	0	1	0
@Override public String getHelpFile(String fieldName) { String n = super.getHelpFile(fieldName); if (n==null) n = Hudson.getInstance().getDescriptor(SSHConnector.class).getHelpFile(fieldName); return n; } 	0	0	0	0	1	0
public static ExtensionList<JavaProvider> all() { return Hudson.getInstance().getExtensionList(JavaProvider.class); } 	0	0	0	0	1	0
protected boolean isAnimatedZoomSet() { return Float.intBitsToFloat(mTargetZoomLevel.get()) != -1; } 	0	0	0	0	1	0
"private EPackage createCorrModel(TripleGraphGrammarFile xtextTGG) {  EPackage corrModel = ecoreFactory.createEPackage();  corrModel.setName(xtextTGG.getSchema().getName()); corrModel.setNsPrefix(xtextTGG.getSchema().getName()); // TODO[Anjorin]: This makes it impossible to have schema != project name corrModel.setNsURI(""platform:/resource/"" + corrModel.getName() + ""/model/"" + corrModel.getName() + "".ecore"");  for (CorrType ct : xtextTGG.getSchema().getCorrespondenceTypes()) { corrModel.getEClassifiers().add(createEClass(ct)); }  for (CorrType ct : xtextTGG.getSchema().getCorrespondenceTypes()) {  if (ct.getSuper() != null) { ((EClass) xtextToTGG.get(ct)).getESuperTypes().add((EClass) xtextToTGG.get(ct.getSuper())); } }  return corrModel; } "	0	0	0	0	1	0
"public static boolean isNumber(String value) { if (Pattern.matches(""^\\-?[1-9]\\d{0,2}(\\.\\d*)?$"", value)) return true; return false; } "	0	0	0	0	1	0
"@Test public void getCatalogs() throws Throwable {  PortalRestController spy = spy(portal); doReturn(""http://localhost:3030/fuseki"").when(spy).getFusekiService();  String result = spy.getCatalogs();  logger.info(result); } "	0	0	0	0	1	0
"public void startLoading() { if (execService != null) { return; } log.trace(""starting execution..."");  int i = 0; for (final CalendarRuntime eventRuntime : EventStorage.getInstance().getEventCache().values()) { try { JobDetail job = JobBuilder.newJob().ofType(EventReloaderJob.class) .usingJobData(EventReloaderJob.KEY_CONFIG, eventRuntime.getConfig().getKey()) .withIdentity(eventRuntime.getConfig().getKey(), JOB_NAME_EVENT_RELOADER).storeDurably() .build(); this.scheduler.addJob(job, false); SimpleTrigger jobTrigger = TriggerBuilder.newTrigger().forJob(job) .withIdentity(eventRuntime.getConfig().getKey(), JOB_NAME_EVENT_RELOADER) .startAt(DateBuilder.futureDate(10 + i, IntervalUnit.SECOND)).withSchedule(SimpleScheduleBuilder .repeatMinutelyForever(eventRuntime.getConfig().getReloadMinutes())) .build(); this.scheduler.scheduleJob(jobTrigger); log.info(""reload job scheduled for: {}"", eventRuntime.getConfig().getKey()); } catch (SchedulerException e) { log.error(""cannot schedule calendar-reloader"", e); } // next event 10 seconds later i += 10; }  } "	0	0	1	0	1	0
"public boolean writePage(int pid, TranslationEntry entry) { if(entry == null) return false;  Lib.debug('s', ""Attempting to write to swap (PID "" + pid + "" VPN "" + entry.vpn + "")"");  //get the swap lookup for the process, create if doesn't exist Hashtable<Integer, SwapEntry> processSwapLookup = this._swapLookup.get(pid);  if(processSwapLookup == null) { processSwapLookup = new Hashtable<Integer, SwapEntry>();  this._swapLookup.put(pid, processSwapLookup); }  //try to get the existing page frame index SwapEntry swapEntry = processSwapLookup.get(pid);  if(swapEntry == null) swapEntry = new SwapEntry(-1, entry);  boolean success = writeToSwap(swapEntry);  Lib.debug('s', ""Write to swap "" + (success ? """" : ""un"") + ""successful (PID "" + pid + "" VPN "" + entry.vpn + "")"");  //if write successful, add entry to lookup if(success) { processSwapLookup.put(entry.vpn,  swapEntry); }  return success; } "	0	0	1	0	1	0
private static boolean execContainerPing(DockerClientExecutor dockerClientExecutor, String containerId, String command) { String result = dockerClientExecutor.execStart(containerId, command); try { int numberOfListenConnectons = Integer.parseInt(result.trim()); //This number is based in that a port will be opened only as tcp or as udp. //We will need another issue to modify cube internals to save if port is udp or tcp. return numberOfListenConnectons > 0; } catch(NumberFormatException e) { return false; } } 	0	0	0	0	1	0
"@Listener(order = Order.LATE) public void onPlayerChat(MessageChannelEvent.Chat e, @First Player p) { Nation nation = DataHandler.getNationOfPlayer(p.getUniqueId()); if (nation == null) { return; } MessageChannel chan = MessageChannel.TO_ALL; Optional<MessageChannel> channel = e.getChannel(); if (channel.isPresent()) { chan = channel.get(); }  if (chan.equals(MessageChannel.TO_ALL) && ConfigHandler.getNode(""others"", ""enableNationTag"").getBoolean(true)) { e.setMessage(TextSerializers.FORMATTING_CODE.deserialize(ConfigHandler.getNode(""others"", ""publicChatFormat"").getString().replaceAll(""\\{NATION\\}"", nation.getTag()).replaceAll(""\\{TITLE\\}"", DataHandler.getCitizenTitle(p.getUniqueId()))), e.getMessage()); } else if (chan instanceof NationMessageChannel) { e.setMessage(TextSerializers.FORMATTING_CODE.deserialize(ConfigHandler.getNode(""others"", ""nationChatFormat"").getString().replaceAll(""\\{NATION\\}"", nation.getTag()).replaceAll(""\\{TITLE\\}"", DataHandler.getCitizenTitle(p.getUniqueId()))), Text.of(TextColors.YELLOW, e.getMessage())); DataHandler.getSpyChannel().send(p, Text.of(TextSerializers.FORMATTING_CODE.deserialize(ConfigHandler.getNode(""others"", ""nationSpyChatTag"").getString()), TextColors.RESET, e.getMessage())); } } "	0	0	0	0	1	0
private void initializeBoard() { String challengeId = mIntent.getStringExtra(Constants.IntentExtra.CHALLENGE_ID); int user1or2 = mIntent.getIntExtra(Constants.IntentExtra.USER1OR2, -1);  ChallengeUtils.initializeBattleshipBoardManager(this, challengeId, user1or2, false) .continueWith(new Continuation<BattleshipBoardManager, Void>() { @Override public Void then(Task<BattleshipBoardManager> task) throws Exception { mBattleshipBoardManager = task.getResult();  runOnUiThread(new Runnable() { @Override public void run() { initializeGridLayouts(); } });  return null; } }); } 	0	0	1	0	1	0
private void initViews() { final ViewGroup root = (ViewGroup) getActivity().findViewById(R.id.session_detail_frag); mAppBar = (AppBarLayout) root.findViewById(R.id.appbar); mCollapsingToolbar = (CollapsingToolbarLayout) mAppBar.findViewById(R.id.collapsingToolbar); mHeaderBox = mAppBar.findViewById(R.id.header_session); mToolbar = (Toolbar) mHeaderBox.findViewById(R.id.toolbar); mTitle = (TextView) mHeaderBox.findViewById(R.id.session_title); mSubtitle = (TextView) mHeaderBox.findViewById(R.id.session_subtitle); mPhotoViewContainer = mCollapsingToolbar.findViewById(R.id.session_photo_container); mPhotoView = (ImageView) mPhotoViewContainer.findViewById(R.id.session_photo); mWatchVideo = (Button) mCollapsingToolbar.findViewById(R.id.watch); final ViewGroup details = (ViewGroup) root.findViewById(R.id.details_container); mAbstract = (TextView) details.findViewById(R.id.session_abstract); mLiveStreamedIndicator = (TextView) details.findViewById(R.id.live_streamed_indicator); mRequirements = (TextView) details.findViewById(R.id.session_requirements); mTags = (LinearLayout) details.findViewById(R.id.session_tags); mExtended = (TextView) details.findViewById(R.id.extended_session_button); mTagsContainer = (ViewGroup) details.findViewById(R.id.session_tags_container); mAddScheduleFab = (CheckableFloatingActionButton) root.findViewById(R.id.add_schedule_button); mImageLoader = new ImageLoader(getContext()); } 	0	0	1	0	0	0
"@Override public void run() { try { ModuleJScripting.getInvocable().invokeMethod(fn, ""call"", args); } catch (NoSuchMethodException | ScriptException e) { System.err.println(""Error calling script callback""); e.printStackTrace(); } } "	0	0	0	0	1	0
@NonNull public static Matcher<View> displayedAssignableFrom(final Class<? extends View> clazz) { return allOf(isDisplayed(), displayedAssignableFrom(clazz)); } 	0	0	0	0	1	0
private Optional<DateEncoder> getDateEncoder(MultiEncoder enc) { for(EncoderTuple t : enc.getEncoders(enc)) { if(t.getEncoder() instanceof DateEncoder) { return Optional.of((DateEncoder)t.getEncoder()); } }  return Optional.of(null); } 	0	0	0	0	1	0
"public static String getUserLink(JsonNode object) { return ""https://twitter.com/"" + getUserScreenName(object); } "	0	0	0	0	1	0
"public JSONObject submitNew(JSONObject obj, String sessionId) throws BioStudiesClientException, IOException { JSONObject copy = new JSONObject(obj.toString()); copy.put(""accno"", ""!{S-STA}""); JSONArray array = new JSONArray(); array.put(copy); JSONObject wrap = new JSONObject(); obj.put(""submissions"", array); return parseJSON(post(composeUrl(""/submit/create""), wrap, SESSION_PARAM, sessionId)); } "	0	0	0	1	1	0
public ApiError build() { return new ApiErrorImpl(this.message, this.developerMessage, this.code, this.additionalInformation); } 	0	0	0	1	1	0
@JsonAnySetter public Builder addInfo(String property, Object value) { this.additionalInformation.put(property, value); return this; } 	0	0	0	0	1	0
"private CsvParserSettings extractCsvParserSettings(Configuration job) { CsvParserSettings parserSettings = new CsvParserSettings(); parserSettings.getFormat().setDelimiter(job.get(DELIMITER, DELIMITER_DEFAULT).charAt(0)); parserSettings.getFormat().setComment(job.get(COMMENT, COMMENT_DEFAULT).charAt(0)); parserSettings.setLineSeparatorDetectionEnabled(true); parserSettings.setNullValue(""""); parserSettings.setEmptyValue(""""); parserSettings.setIgnoreLeadingWhitespaces(false); parserSettings.setIgnoreTrailingWhitespaces(false); parserSettings.setSkipEmptyLines(false); parserSettings.setMaxCharsPerColumn(100000); String maxColumns = job.get(MAX_COLUMNS); parserSettings.setMaxColumns(Integer.parseInt(maxColumns)); parserSettings.getFormat().setQuote(job.get(QUOTE, QUOTE_DEFAULT).charAt(0)); parserSettings.getFormat().setQuoteEscape(job.get(ESCAPE, ESCAPE_DEFAULT).charAt(0)); if (start == 0) { parserSettings.setHeaderExtractionEnabled(job.getBoolean(HEADER_PRESENT, HEADER_PRESENT_DEFAULT)); } return parserSettings; } "	0	0	0	0	1	0
"protected JsonObject geoJSONProperties(){ try { JsonObject json = new JsonObject(); if (mName != null){ json.addProperty(""name"", mName); } if (mExtendedData != null){ for (HashMap.Entry<String, String> entry : mExtendedData.entrySet()) { String name = entry.getKey(); String value = entry.getValue(); json.addProperty(name, value); } } return json; } catch (Exception e) { e.printStackTrace(); return null; } } "	0	0	1	0	1	0
"@DefaultHandler public Resolution view() {  try { int reAccountId = Integer.parseInt(getParameter(Parameter.ACCOUNT_RETAINED_EARNINGS)); List<AccountBean> tempAccountList = accountService.getAccountBalances(getStartDate(), reAccountId);  BigDecimal reBalance = BigDecimal.ZERO; if(tempAccountList!=null && tempAccountList.size()>0) { AccountBean account = tempAccountList.get(0); reBalance = account.getBalance(); }  tempAccountList = accountService.getGifiAccountBalances(endDate, 0);  assetList = new LinkedList<AccountBean>(); liabilityList = new LinkedList<AccountBean>(); equityList = new LinkedList<AccountBean>();  totalAssets = BigDecimal.ZERO; totalLiabilities = BigDecimal.ZERO; totalEquities = BigDecimal.ZERO; netIncome = BigDecimal.ZERO;  int equityAccounts = 0;  // calculate net income; it replaces Income SUmmary balance for(AccountBean account : tempAccountList) { if(account.getType() == AccountType.INCOME) { if(account.isHasNegativeBalance()) netIncome = netIncome.subtract(account.getBalance()); else netIncome = netIncome.add(account.getBalance()); } else if(account.getType() == AccountType.EXPENSE) { if(account.isHasNegativeBalance()) netIncome = netIncome.add(account.getBalance()); else netIncome = netIncome.subtract(account.getBalance()); } }  for(AccountBean account : tempAccountList) { if(account.getType() == AccountType.ASSET) { assetList.add(account); if(account.isHasNegativeBalance()) totalAssets = totalAssets.subtract(account.getBalance()); else totalAssets = totalAssets.add(account.getBalance()); } else if(account.getType() == AccountType.LIABILITY) { liabilityList.add(account); if(account.isHasNegativeBalance()) totalLiabilities = totalLiabilities.subtract(account.getBalance()); else totalLiabilities = totalLiabilities.add(account.getBalance()); } else if(account.getType() == AccountType.OWNERS_EQUITY) { equityList.add(account);  if(String.valueOf(account.getAccountId()).equals(getParameter(Parameter.ACCOUNT_INCOME_SUMMARY_GIFI))) account.setBalance(netIncome); else if(String.valueOf(account.getAccountId()).equals(getParameter(Parameter.ACCOUNT_RETAINED_EARNINGS_GIFI))) { equityAccounts += account.getAccountId(); account.setBalance(reBalance); SimpleDateFormat format = new SimpleDateFormat(""MMMM d, yyyy""); account.setName(account.getName() + "" - as of "" + format.format(getStartDate())); } else if(String.valueOf(account.getAccountId()).equals(getParameter(Parameter.ACCOUNT_SHARE_CAPITAL_GIFI))) equityAccounts += account.getAccountId();  if(account.isHasNegativeBalance()) totalEquities = totalEquities.subtract(account.getBalance()); else totalEquities = totalEquities.add(account.getBalance()); } } totalLiabEqu = totalLiabilities.add(totalEquities); fixEquityListIfNeeded(equityAccounts); } catch (DataAccessException e) { return handleException(e); }  return new ForwardResolution(""/report/balance-sheet-gifi.jsp""); } "	1	0	0	0	1	0
"public void sendQuestion(Command command) { if (command instanceof StringType) { try { String url = createUserPasswordHostnamePrefix() + SUFFIX_QUESTION + command.toString(); Enigma2Util.executeUrl(url); } catch (IOException e) { logger.error(""Error during send Command: {}"", e); } } } "	0	0	0	0	1	0
"public State getNowPlayingDescription() { try { String url = createUserPasswordHostnamePrefix() + SUFFIX_EPG + getChannelServiceReference(); String content = Enigma2Util.executeUrl(url); content = Enigma2Util.getContentOfElement(content, ""e2eventdescription""); State returnState = new StringType(content); return returnState; } catch (IOException e) { logger.error(""Error during send Command: {}"", e); } return null; } "	0	0	0	0	1	0
"public void setDownmix(Command command) { if (command instanceof OnOffType) { OnOffType newState = (OnOffType) command; String enable = newState == OnOffType.ON ? ""True"" : ""False""; try { String url = createUserPasswordHostnamePrefix() + SUFFIX_SET_DOWNMIX + enable; Enigma2Util.executeUrl(url); } catch (IOException e) { logger.error(""Error during send Command: {}"", e); } } else { logger.error(""Unsupported command type: {}"", command.getClass().getName()); } } "	0	0	0	0	1	0
"public void initialize() { try { serviceContainer = Enigma2Util.generateServiceMaps(); } catch (IOException | ParserConfigurationException | SAXException e) { logger.error(""Error during initialization: {}"", e); } } "	0	0	0	0	1	0
"public void sendMessage(Command command) { if (command instanceof StringType) { try { String url = createUserPasswordHostnamePrefix() + SUFFIX_MESSAGE + command.toString(); Enigma2Util.executeUrl(url); } catch (IOException e) { logger.error(""Error during send Command: {}"", e); } } } "	0	0	0	0	1	0
"private void checkForUpdates() { if (devMode) { logger.warn(""SKIPPING UPDATE CHECK IN DEV MODE""); return; }  asyncExecutor.execute(() -> { HttpsURLConnection connection = null; try { java.net.URL url = new URL(UPDATE_URL); connection = (HttpsURLConnection) url.openConnection(); connection.setRequestMethod(""GET""); connection.setRequestProperty(""User-Agent"", ""Web-API""); connection.setRequestProperty(""accept"", ""application/json""); connection.setRequestProperty(""charset"", ""utf-8""); connection.setUseCaches(false);  //Get Response int code = connection.getResponseCode(); if (code != 200) { logger.warn(""Could not check for updates: "" + code); return; }  InputStream is = connection.getInputStream(); BufferedReader rd = new BufferedReader(new InputStreamReader(is)); StringBuilder response = new StringBuilder(); String line; while ((line = rd.readLine()) != null) { response.append(line); response.append('\r'); } rd.close();  String respString = response.toString().trim(); if (respString.isEmpty() || respString.equalsIgnoreCase(""OK"")) { logger.warn(""Empty response received when checking for updates""); return; }  ObjectMapper map = new ObjectMapper(); JsonNode resp = map.readTree(respString);  String version = container.getVersion().orElse("""").split(""-"")[0]; String newVersion = resp.get(0).get(""name"").asText().split(""-"")[0];  if (newVersion.equalsIgnoreCase(version)) { return; }  logger.warn(""------- Web-API update -------""); logger.warn(""Latest: "" + newVersion); logger.warn(""Current: "" + version); logger.warn(""Get it from Sponge Ore or Github!""); logger.warn(""------------------------------""); } catch (IOException e) { e.printStackTrace(); } finally { if (connection != null) { connection.disconnect(); } } }); } "	0	0	0	0	1	0
"public void onTimeout(Timer to) { try { if (to.equals(retransmission_to) && statusIs(STATE_TRYING)) { printLog(""Retransmission timeout expired"", LogLevel.HIGH); // retransmission only in case of unreliable transport if (connection_id == null) { sip_provider.sendMessage(request); long timeout = 2 * retransmission_to.getTime(); retransmission_to = new Timer(timeout, retransmission_to .getLabel(), this); retransmission_to.start(); } else printLog(""No retransmissions for reliable transport ("" + connection_id + "")"", LogLevel.LOW); } if (to.equals(transaction_to)) { printLog(""Transaction timeout expired"", LogLevel.HIGH); retransmission_to.halt(); end_to.halt(); sip_provider.removeSipProviderListener(transaction_id); changeStatus(STATE_TERMINATED); if (transaction_listener != null) transaction_listener.onTransTimeout(this); transaction_listener = null; } if (to.equals(end_to)) { printLog(""End timeout expired"", LogLevel.HIGH); retransmission_to.halt(); transaction_to.halt(); sip_provider.removeSipProviderListener(transaction_id); changeStatus(STATE_TERMINATED); transaction_listener = null; // already null.. } } catch (Exception e) { printException(e, LogLevel.HIGH); } } "	0	0	1	0	1	0
"public JsonNode auditoriaQuery() { List<String> predicates = new ArrayList<>(); MongoCursor<Auditoria> auditorias; int total = 0; if (!searchFields.isEmpty()) {  ArrayList<SearchFieldDefinition> searchFieldDefinitions = new ArrayList<SearchFieldDefinition>(); searchFields.forEach(buildSearchStatement(searchFieldDefinitions));  searchFieldDefinitions.forEach(searchField -> { DateTime date = parseDate(searchField.getValue().toString(), null); if (date != null) { predicates.add(getMongoFieldOperator(searchField.getFieldOperator(), searchField.getFieldName(), date)); } else { if (searchField.getFieldOperator() != null) { predicates.add(getMongoFieldOperator(searchField.getFieldOperator(), searchField.getFieldName(), searchField.getValue())); } else { predicates.add(String.format(""'%s': {$regex: '%s'}"", searchField.getFieldName(), searchField.getValue().toString())); } } });  // Verifica se existem campos com between List<BetweenFieldDefinition> betweenFields = BetweenFieldDefinition.getBetweenFileds(searchFields); betweenFields.forEach(field -> { if (field.hasOnlyStartValue()) { predicates.add(String.format(""timestamp: { $gte: %s}"", field.getStartValueTimestamp())); } else if (field.hasOnlyEndValue()) { predicates.add(String.format(""timestamp: { $lte: %s}"", field.getEndValueTimestamp())); } else { predicates.add(String.format(""timestamp: { $gte: %s, $lte: %s}"", field.getStartValueTimestamp(), field.getEndValueTimestamp())); } });  String query = ""{"".concat(String.join("","", predicates)).concat(""}""); if (getSortField() != null) { int sortTypeAux = getSortType().equalsIgnoreCase(""asc"") ? 1 : -1; auditorias = Auditoria.auditorias().find(query).skip(getSkip()).sort(""{"".concat(getSortType()).concat(String.format("": %s"", sortTypeAux)).concat(""}"")).limit(getPerPage()).as(Auditoria.class); } else { auditorias = Auditoria.auditorias().find(query).skip(getSkip()).limit(getPerPage()).as(Auditoria.class); } total = Auditoria.auditorias().find(query).as(Auditoria.class).count(); } else { if (getSortField() != null) { int sortTypeAux = getSortType().equalsIgnoreCase(""asc"") ? 1 : -1; auditorias = Auditoria.auditorias().find().skip(getSkip()).limit(getPerPage()).sort(""{"".concat(getSortType()).concat(String.format("": %s"", sortTypeAux))).limit(getPerPage()).as(Auditoria.class); } else { auditorias = Auditoria.auditorias().find().skip(getSkip()).limit(getPerPage()).as(Auditoria.class); } total = Auditoria.auditorias().find().as(Auditoria.class).count(); }  ObjectNode retorno = JsonNodeFactory.instance.objectNode(); JsonNode dataJson = Json.toJson(Auditoria.toList(auditorias)); retorno.set(""data"", dataJson); retorno.put(""total"", total);  return retorno; } "	0	0	0	0	0	1
public boolean allowedToCopyFromThatResource(ResourceGroup originResourceGroup) { return permissionBoundary.canCopyFromSpecificResource(resource.getResource(), originResourceGroup.getEntity()) && (resource.getResource() != null); } 	0	0	0	0	1	0
"public static void execute(final Hill firstHill, final Hill secondHill, final int turn) { System.out.println(""Turn: "" + turn); final Iterator<IAnt> first = firstHill.getAnts().iterator(); final Iterator<IAnt> second = secondHill == null ? Collections.emptyIterator() : secondHill.getAnts().iterator(); guiConnector.placeGuiObjects(World.getStaticObjects());  while (first.hasNext() || second.hasNext()) { IAnt ant = null; if (first.hasNext()) { ant = first.next(); singleStep(ant); } if (second.hasNext()) { ant = second.next(); singleStep(ant); } } guiConnector.placeGuiObjects(World.getWorldObjectsToMove()); guiConnector.removeGuiObjects(getDeadObjects()); getDeadObjects().clear(); guiConnector.showScore(firstHill.getName(), firstHill.getFood()); if (secondHill != null) { guiConnector.showScore(secondHill.getName(), secondHill.getFood()); } } "	0	0	0	0	1	0
"@Override protected void finishProcessing(ProcessingResult<MessageDelivery> result) { LOG.debug(""Message processing job: "" + result.getSuccesses().size() + "" processed, "" + result.getFailures().size() + "" failures""); Set<Long> messageIds = new HashSet<Long>(result.getSuccesses().size()); for (MessageDelivery md: result.getSuccesses()) { messageIds.add(md.getMessage().getId()); } MessageService ms = GlobalKCBServiceLocator.getInstance().getMessageService(); for (Long id: messageIds) { LOG.debug(""Finishing processing message "" + id); //if (Mode.REMOVE == mode) {  Message m = ms.getMessage(id);  Collection<MessageDelivery> c = messageDeliveryService.getMessageDeliveries(m); if (c.size() == 0) { LOG.debug(""Deleting message "" + m); ms.deleteMessage(m); } else { LOG.debug(""Message "" + m.getId() + "" has "" + c.size() + "" deliveries""); for (MessageDelivery md: c) { LOG.debug(md); } } } } "	0	0	0	0	1	0
"public String render(Map<String, String> valueMap) { StringBuffer result = new StringBuffer(template.length()); Matcher matcher = TOKEN_PATTERN.matcher(template); while (matcher.find()) { String group = matcher.group(); String[] tokensArray = group.substring(2, group.length() - 2).split(""\\|""); String var = tokensArray[0].trim(); String value = valueMap.get(var); if (value == null) { List<String> values = variableMap.get(var); value = values.isEmpty() ? """" : values.get(0); } if (!value.isEmpty() && multilineMap.containsKey(var)) { value = escapeMultilineQuotes(multilineMap.get(var), value); } matcher.appendReplacement(result, value); } matcher.appendTail(result); return result.toString(); } "	0	0	0	0	1	0
"private synchronized void handleLostClient(ServerClient client) { if (!clients.contains(client)) { return; } System.out.println(""one died...""); clients.remove(client); handler.handleMessage(new Package(client.getPort(), Package.DISCONNECT));  Runnable task2 = () -> { try { System.out.println(""trying to get new client""); Socket clientSocket = acceptSocket.accept(); System.out.println(""new client""); ServerClient newClient = new ServerClient(clientSocket, getNextId()); clients.add(newClient); setTimer(newClient); } catch (Exception e) { e.printStackTrace(); } }; task2.run(); } "	0	0	1	0	0	0
"@Override @SuppressWarnings(""rawtypes"") public void CalcProzesstitel() { String newTitle = """"; String titeldefinition = """"; ConfigProjects cp = null; try { cp = new ConfigProjects(this.prozessVorlage.getProjekt().getTitel()); } catch (IOException e) { Helper.setFehlerMeldung(""IOException"", e.getMessage()); return; }  int count = cp.getParamList(""createNewProcess.itemlist.processtitle"").size(); for (int i = 0; i < count; i++) { String titel = cp.getParamString(""createNewProcess.itemlist.processtitle("" + i + "")""); String isdoctype = cp.getParamString(""createNewProcess.itemlist.processtitle("" + i + "")[@isdoctype]""); String isnotdoctype = cp.getParamString(""createNewProcess.itemlist.processtitle("" + i + "")[@isnotdoctype]"");  if (titel == null) { titel = """"; } if (isdoctype == null) { isdoctype = """"; } if (isnotdoctype == null) { isnotdoctype = """"; }  /* wenn nix angegeben wurde, dann anzeigen */ if (isdoctype.equals("""") && isnotdoctype.equals("""")) { titeldefinition = titel; break; }  /* wenn beides angegeben wurde */ if (!isdoctype.equals("""") && !isnotdoctype.equals("""") && StringUtils.containsIgnoreCase(isdoctype, this.docType) && !StringUtils.containsIgnoreCase(isnotdoctype, this.docType)) { titeldefinition = titel; break; }  /* wenn nur pflicht angegeben wurde */ if (isnotdoctype.equals("""") && StringUtils.containsIgnoreCase(isdoctype, this.docType)) { titeldefinition = titel; break; } /* wenn nur ""darf nicht"" angegeben wurde */ if (isdoctype.equals("""") && !StringUtils.containsIgnoreCase(isnotdoctype, this.docType)) { titeldefinition = titel; break; } }  StringTokenizer tokenizer = new StringTokenizer(titeldefinition, ""+""); /* jetzt den Bandtitel parsen */ while (tokenizer.hasMoreTokens()) { String myString = tokenizer.nextToken(); // System.out.println(myString); /* * wenn der String mit ' anfängt und mit ' endet, dann den Inhalt so übernehmen */ if (myString.startsWith(""'"") && myString.endsWith(""'"")) { newTitle += myString.substring(1, myString.length() - 1); } else { /* andernfalls den string als Feldnamen auswerten */ for (Iterator it2 = this.additionalFields.iterator(); it2.hasNext();) { AdditionalField myField = (AdditionalField) it2.next();  /* * wenn es das ATS oder TSL-Feld ist, dann den berechneten atstsl einsetzen, sofern noch nicht vorhanden */ if ((myField.getTitel().equals(""ATS"") || myField.getTitel().equals(""TSL"")) && myField.getShowDependingOnDoctype() && (myField.getWert() == null || myField.getWert().equals(""""))) { myField.setWert(this.atstsl); }  /* den Inhalt zum Titel hinzufügen */ if (myField.getTitel().equals(myString) && myField.getShowDependingOnDoctype() && myField.getWert() != null) { newTitle += CalcProzesstitelCheck(myField.getTitel(), myField.getWert()); } } } }  if (newTitle.endsWith(""_"")) { newTitle = newTitle.substring(0, newTitle.length() - 1); } this.prozessKopie.setTitel(newTitle); CalcTiffheader(); } "	0	0	0	0	0	1
@Override public boolean apply(Game game, Ability source) { Permanent creature = game.getPermanent(targetPointer.getFirst(game, source)); if (creature != null) { ObjectColor color = creature.getColor(game); for (Permanent permanent : game.getBattlefield().getActivePermanents(FILTER, source.getControllerId(), game)) { if (permanent.getColor(game).shares(color) && !Objects.equals(permanent, creature)) { permanent.destroy(source.getSourceId(), game, true); } } return true; } return false; } 	0	0	0	0	1	0
"public void setnavigationdrawer(Bundle savedInstanceState) {  mUsername = TextUtils.isEmpty(mUsername) ? ANONYMOUS : mUsername; memailaddress = TextUtils.isEmpty(memailaddress) ? ANONYMOUS_EMAIL : memailaddress; mPhotoURL = TextUtils.isEmpty(mPhotoURL) ? ANONYMOUS_PHOTO_URL : mPhotoURL;  IProfile profile = new ProfileDrawerItem() .withName(mUsername) .withEmail(memailaddress) .withIcon(mPhotoURL) .withIdentifier(102);  mHeader = new AccountHeaderBuilder() .withActivity(this) .withHeaderBackground(R.drawable.header) .addProfiles(profile) .build();  mDrawer = new DrawerBuilder() .withAccountHeader(mHeader) .withActivity(this) .withToolbar(toolbar) .withActionBarDrawerToggle(true) .addDrawerItems( new PrimaryDrawerItem().withName(""Journals"").withIcon(GoogleMaterial.Icon.gmd_view_list).withIdentifier(Constants.JOURNALS), new PrimaryDrawerItem().withName(""Tags"").withIcon(GoogleMaterial.Icon.gmd_folder).withIdentifier(Constants.TAGS), new PrimaryDrawerItem().withName(""Analytics"").withIcon(GoogleMaterial.Icon.gmd_arrow_forward).withIdentifier(Constants.ANALYTICS), new PrimaryDrawerItem().withName(""Atlas"").withIcon(GoogleMaterial.Icon.gmd_map).withIdentifier(Constants.ATLAS), new PrimaryDrawerItem().withName(""Logout"").withIcon(GoogleMaterial.Icon.gmd_lock).withIdentifier(Constants.LOGOUT)  ) .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() { @Override public boolean onItemClick(View view, int position, IDrawerItem drawerItem) { if (drawerItem != null && drawerItem instanceof Nameable) { //String name = ((Nameable) drawerItem).getName().getText(mActivity); toolbar.setTitle(""Journals""); }  if (drawerItem != null) { //handle on navigation drawer item onTouchDrawer((int) drawerItem.getIdentifier()); }  return false; } }) .withOnDrawerListener(new Drawer.OnDrawerListener() { @Override public void onDrawerOpened(View drawerView) { KeyboardUtil.hideKeyboard(MainActivity.this);  }  @Override public void onDrawerClosed(View drawerView) {  }  @Override public void onDrawerSlide(View drawerView, float slideOffset) {  } }) .withFireOnInitialOnClick(true) .withSavedInstance(savedInstanceState) .build(); mDrawer.addStickyFooterItem(new PrimaryDrawerItem().withName(""Delete Account!"").withIcon(GoogleMaterial.Icon.gmd_delete).withIdentifier(Constants.DELETE)); mDrawer.setSelection(Constants.JOURNALS); } "	1	0	1	0	0	0
"protected void debug(Object jaxbElement) { try { if (getOpts().isDebugSet()) { StringWriter writer = new StringWriter(); getMarshaller().marshal(jaxbElement, writer); log.debug(""{}"", writer); } } catch (JAXBException e) { log.debug(e.toString(), e); } } "	0	0	0	0	1	0
"@OnClick (R.id.saveTimedSettingsButton) public void saveTimedSettings(){  String stretchString = stretchReminderTime.getText().toString(); if (!stretchString.equals("""")) { mStretch = Integer.parseInt(stretchString); }  String takeOffString = takeOffTime.getText().toString(); if(!takeOffString.equals("""")) { mTakeoff = Integer.parseInt(takeOffString); }  mSetMorningAlarm = morningAlarmToggleButton.isChecked(); mSetStretchNotifications = stretchToggleButton.isChecked(); mSetTakeOffAlarm = takeOffToggleButton.isChecked();  pushPreferences();  if(mSetMorningAlarm) { AlarmHandler alarmHandler = new AlarmHandler(this); alarmHandler.setMorningAlarm(); }  finish(); } "	0	0	0	0	1	0
public void onEvent(EditUserEvent event) { try { NetworkUtils.setUser(getActivity(), event.getUser()); mBaseInterface.setUser(event.getUser()); } catch(Exception e) { Log.e(getClass().toString(), e.toString()); } FragUtils.popBackStack(this); } 	0	0	0	0	1	0
"public void refresh() { EntryClassUi.showWaitModal();  gwtXSRFService.generateSecurityToken(new AsyncCallback<GwtXSRFToken>() {  @Override public void onFailure(final Throwable ex) { EntryClassUi.hideWaitModal(); FailureHandler.handle(ex); }  @Override public void onSuccess(final GwtXSRFToken token) { // load the drivers gwtWireService.getDriverInstances(token, new AsyncCallback<List<String>>() {  @Override public void onFailure(final Throwable caught) { EntryClassUi.hideWaitModal(); FailureHandler.handle(caught); }  @Override public void onSuccess(final List<String> result) { DriversAndTwinsListUi.this.driversTree.clear();  if (result.isEmpty()) { TreeItem root = new TreeItem(); root.setText(""No Drivers available!""); DriversAndTwinsListUi.this.driversTree.addItem(root); } else { for (String tempDriverPid : result) { final TreeItem driverRoot = new TreeItem(); driverRoot.setText(tempDriverPid); driverRoot.addItem(initNewAssetButton(tempDriverPid)); driverRoot.addItem(initDriverConfigButton(tempDriverPid)); DriversAndTwinsListUi.this.driversTree.addItem(driverRoot);  gwtComponentService.getAssetInstancesByDriverPid(tempDriverPid, new AsyncCallback<List<String>>() {  @Override public void onFailure(final Throwable caught) { EntryClassUi.hideWaitModal(); FailureHandler.handle(caught); }  @Override public void onSuccess(final List<String> result) { for (String assetPid : result) { final TreeItem assetRoot = new TreeItem(); assetRoot.setText(assetPid); assetRoot.addItem(initAssetConfigButton(assetPid)); assetRoot.addItem(initAssetDataButton(assetPid)); driverRoot.addItem(assetRoot); } } }); } } cleanConfigurationArea(); EntryClassUi.hideWaitModal(); }  }); } }); } "	0	0	0	0	1	0
"@Override public void onDataChanged(DataEventBuffer dataEvents) { for (DataEvent ev : dataEvents) { System.err.println(""onDataChanged: "" + ev.getDataItem().getUri()); String path = ev.getDataItem().getUri().getPath(); if (Constants.Wear.Path.WEAR_NODE_ID.contentEquals(path)) { setWearNode(ev); } } } "	0	0	0	1	0	0
"@Override public void create () { Gdx.gl.glClearColor(.3f, .3f, .3f, 1);  fpsStringBuilder = new StringBuilder();  skin = new Skin(Gdx.files.internal(""data/uiskin.json""));  // Enable color markup BitmapFont font = skin.get(""default-font"", BitmapFont.class); font.setMarkupEnabled(true);  stage = new Stage(); stage.setDebugAll(DEBUG_STAGE); stageWidth = stage.getWidth(); stageHeight = stage.getHeight();  Gdx.input.setInputProcessor(new InputMultiplexer(stage));  Stack stack = new Stack(); stage.addActor(stack); stack.setSize(stageWidth, stageHeight); testsTable = new Table(); stack.add(testsTable);  // Create behavior selection window List<String> testList = createTestList(); algorithmSelectionWindow = addBehaviorSelectionWindow(""Path Finder Tests"", testList, 0, -1);  // Set selected test changeTest(0);  fpsLabel = new Label(""FPS: 999"", skin); // updateLabel(); stage.addActor(fpsLabel); } "	0	0	0	0	1	0
"@Test(expected = BadRequestException.class) public void construct_throwsExceptionWhenPageSizeIsZero() { new Pagination(""/entries"", Optional.of(1L), Optional.of(0L), 10); } "	1	0	1	1	1	0
"public String getNextPageLink() { return String.format(""%s?"" + INDEX_PARAM + ""=%s&"" + SIZE_PARAM + ""=%s"", resourcePath, getNextPageNumber(), pageSize()); } "	0	0	1	1	1	0
"@Override protected void onDbAccessException(DbAccessException dbAccessException) { LOG.error(""DbAccessException following changes feed for list"", dbAccessException); } "	0	0	0	0	1	0
"@SubscribeEvent @SideOnly(Side.CLIENT) public void mouseWheelDetect(MouseEvent event) { /*Special thanks go to MachineMuse, both for inspiration and the event. God bless you girl.*/ Minecraft mc = Minecraft.getMinecraft(); int dWheel = event.dwheel; if (dWheel != 0) { //LogHelper.debug(""Mouse Wheel moving""); EntityClientPlayerMP player = mc.thePlayer; if (player != null && !player.isDead && player.isSneaking()) { ItemStack backpack = Wearing.getWearingBackpack(player); if (backpack != null && backpack.getItem() instanceof ItemAdventureBackpack) { if (player.getCurrentEquippedItem() != null) { int slot = player.inventory.currentItem; ItemStack heldItem = player.inventory.getStackInSlot(slot); Item theItem = heldItem.getItem();  if (ConfigHandler.enableToolsCycling && Wearing.getBackpackInv(player, true).getCyclingStatus() && SlotTool.isValidTool(heldItem) || (BackpackNames.getBackpackColorName(backpack).equals(""Skeleton"") && theItem.equals(Items.bow))) { ModNetwork.net.sendToServer(new CycleToolPacket.CycleToolMessage(dWheel, slot, CycleToolPacket.CYCLE_TOOL_ACTION)); ServerActions.cycleTool(player, dWheel, slot); event.setCanceled(true); }  if (theItem instanceof ItemHose) { ModNetwork.net.sendToServer(new CycleToolPacket.CycleToolMessage(dWheel, slot, CycleToolPacket.SWITCH_HOSE_ACTION)); ServerActions.switchHose(player, ServerActions.HOSE_SWITCH, dWheel, slot); event.setCanceled(true); } } } } } } "	1	0	0	0	0	0
private void runUsersQuery(JSONArray resultArray, String formattedInput) { List<String> queryResult = runQuery(UsersAndGroups.usersQueryString, formattedInput, 10); for (String userName : queryResult) { User user = this.userManager.getUser(userName); JSONObject o = createObject(userName, user.getUsername(), USER); resultArray.add(o); } } 	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") public List<Long> getIntegerMultiBulkReply() { flush(); return (List<Long>) Protocol.read(inputStream); } "	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") public Object getProperty(String propertyPath, Quirks quirks){ // String.split uses RegularExpression // this is overkill for every column for every row int index = propertyPath.indexOf('.');  Getter getter;  if (index > 0) { final String substring = propertyPath.substring(0, index);  getter = metadata.getPropertyGetter(substring);  String newPath = propertyPath.substring(index+1);  Object subValue = this.metadata.getValueOfProperty(substring, this.object);  if (subValue == null){ try { subValue = getter.getType().newInstance(); } catch (InstantiationException e) { throw new Sql2oException(""Could not instantiate a new instance of class ""+ getter.getType().toString(), e); } catch (IllegalAccessException e) { throw new Sql2oException(""Could not instantiate a new instance of class ""+ getter.getType().toString(), e); }  return getter.getProperty(this.object); }  PojoMetadata subMetadata = new PojoMetadata(getter.getType(), this.caseSensitive, this.metadata.isAutoDeriveColumnNames(), this.metadata.getColumnMappings()); Pojo subPojo = new Pojo(subMetadata, this.caseSensitive, subValue);  return subPojo.getProperty(newPath, quirks); } else{ getter = metadata.getPropertyGetter(propertyPath);  Converter converter;  try { converter = throwIfNull(getter.getType(), quirks.converterOf(getter.getType())); } catch (ConverterException e) { throw new Sql2oException(""Cannot convert column "" + propertyPath + "" to type "" + getter.getType(), e); }  try { return converter.convert(getter.getProperty(this.object)); } catch (ConverterException e) { throw new Sql2oException(""Error trying to convert column "" + propertyPath + "" to type "" + getter.getType(), e); } } } "	0	0	0	1	1	0
"@Test public void parseRecognisesValidArguments() { ArgsForTest args = (ArgsForTest) new ArgsForTest().parse(new String[] { ""--source"", ""/home/source"", ""--target"", ""/home/target"", ""--package"", ""mypackage"", ""--generate-builders"", ""--use-primitives"", ""--omit-hashcode-and-equals"", ""--omit-tostring"", ""--include-dynamic-accessors"" });  assertThat(args.didExit(), is(false)); assertThat(args.getSource().next().getFile(), is(""/home/source"")); assertThat(args.getTargetDirectory(), is(theFile(""/home/target""))); assertThat(args.getTargetPackage(), is(""mypackage"")); assertThat(args.isGenerateBuilders(), is(true)); assertThat(args.isUsePrimitives(), is(true)); assertThat(args.isIncludeHashcodeAndEquals(), is(false)); assertThat(args.isIncludeToString(), is(false)); assertThat(args.isIncludeDynamicAccessors(), is(true)); } "	0	0	0	0	1	0
@Override protected List<ReturnObject> doInBackground(String... params) { List<ReturnObject> listReturnObject = new ArrayList<ReturnObject>(); // To distinguish AsyncTask ReturnObject infoTask = new ReturnObject(); infoTask.setCode(ReturnCode.ERROR_000); infoTask.setObject(PROFIL_TASK); listReturnObject.add(infoTask);  // The friend ReturnObject userTask = new ReturnObject(); ReturnObject user = UserUtils.getUser(params[0]); userTask.setObject(((ReturnObject) user).getObject()); userTask.setCode(((ReturnObject) user).getCode()); listReturnObject.add(userTask);  // All quizz of the friend ReturnObject allQuizz = QuizzUtils.getAllQuizzByUser(params[0]); listReturnObject.add(allQuizz);  return (listReturnObject != null && listReturnObject.size() != 0) ? listReturnObject : null; } 	0	0	0	0	1	0
"@Test public void canCalculateAltitudes() { Altimeter altimeter = new ContourAltimeter(); OSRef[] osrefs = GPXLoaderTest.loadPointsFromCSVData(""OldExampleWalk.csv""); double[] expected = AltitudeLoader.loadAltitudesFromCSVData(""ExampleWalkContourAltitude.csv""); assertEquals(""size of array"", expected.length, osrefs.length); for (int i = 0; i < expected.length; i++) { double result = altimeter.getAltitude(osrefs[i]); assertEquals(""Point["" + i + ""] altitude"", expected[i], result, 0.00001); } } "	0	0	1	0	1	0
"@Test public void shouldFindLotsWithSimilarCode() { lotRepository.save(generateInstance());  List<Lot> lots = lotRepository.search(null, null, ""code"");  Assert.assertEquals(1, lots.size()); } "	0	0	1	0	1	0
@Test public void shouldNotFindLots() { lotRepository.save(generateInstance());  List<Lot> lots = lotRepository.search(null, null, null);  Assert.assertEquals(0, lots.size()); } 	0	0	1	0	1	0
"@Override public final void run() { try { process(metadataStreamQueue.poll(5, TimeUnit.SECONDS)); } catch (InterruptedException e) { e.printStackTrace(); } while (!(metadataStreamQueue.isEmpty() && !gatherer.isReady())) //TODO: check this commented gatherer. { try { process(metadataStreamQueue.poll(2, TimeUnit.SECONDS)); } catch ( Exception e ) { LOG.error(""Adaptor stopped unexpectedly {}"", Thread.currentThread().getName()); e.printStackTrace(); } } } "	0	0	1	1	0	0
"private void configureSslKeyStore(AbstractHttp11JsseProtocol<?> protocol, Ssl ssl) { try { protocol.setKeystoreFile(ResourceUtils.getURL(ssl.getKeyStore()).toString()); } catch (FileNotFoundException ex) { throw new EmbeddedServletContainerException( ""Could load key store: "" + ex.getMessage(), ex); } if (ssl.getKeyStoreType() != null) { protocol.setKeystoreType(ssl.getKeyStoreType()); } if (ssl.getKeyStoreProvider() != null) { protocol.setKeystoreProvider(ssl.getKeyStoreProvider()); } } "	0	0	1	0	0	0
public I add(final T num) { final I newImage = this.clone(); newImage.add(num); return newImage; } 	0	0	0	0	1	0
protected void _appendJooqIntervalSelection(DataSetGroup intervalSel, SelectWhereStep _jooqQuery) { if (intervalSel != null && intervalSel.isSelect()) { ColumnGroup cg = intervalSel.getColumnGroup(); List<Interval> intervalList = intervalSel.getSelectedIntervalList();  // Get the filter values List<Comparable> names = new ArrayList<Comparable>(); Comparable min = null; Comparable max = null; for (Interval interval : intervalList) { names.add(interval.getName()); Comparable intervalMin = (Comparable) interval.getMinValue(); Comparable intervalMax = (Comparable) interval.getMaxValue();  if (intervalMin != null) { if (min == null) min = intervalMin; else if (min.compareTo(intervalMin) > 0) min = intervalMin; } if (intervalMax != null) { if (max == null) max = intervalMax; else if (max.compareTo(intervalMax) > 0) max = intervalMax; } } // Min can't be greater than max. if (min != null && max != null && min.compareTo(max) > 0) { min = max; }  // Apply the filter ColumnFilter filter = null; if (min != null && max != null) { filter = FilterFactory.between(cg.getSourceId(), min, max); } else if (min != null) { filter = FilterFactory.greaterOrEqualsTo(cg.getSourceId(), min); } else if (max != null) { filter = FilterFactory.lowerOrEqualsTo(cg.getSourceId(), max); } else { filter = FilterFactory.equalsTo(cg.getSourceId(), names); } _appendJooqFilterBy(def, filter, _jooqQuery); } } 	0	0	0	0	1	0
protected Field _createJooqField(String name) { return _getJooqField(def, name); } 	0	0	0	0	1	0
private void restoreCommandText() { commandTextField.setText(previousCommandTest); } 	0	0	1	0	1	0
public synchronized void setValue(String key, Object value) { if (value != null) { checkSupportedTypes(value.getClass()); } attributes.put(key, value); } 	0	0	0	0	1	0
"private View generateContentView(final Context context) { LinearLayout layout = new LinearLayout(context); layout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)); layout.setBackgroundColor(Color.parseColor(""#F79AB5"")); Button button = new Button(context); button.setText(""Start TestActivity""); layout.addView(button, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT); button.setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { Toast.makeText(context, ""you clicked button"", Toast.LENGTH_SHORT).show(); DLIntent intent = new DLIntent(TestFragmentActivity.class); intent.putExtra(""dl_extra"", ""from DL framework""); startPluginActivityForResult(intent, 0); } }); return layout; } "	0	0	0	0	1	0
"public void run(IAction action) { try { mdefc = new MDEForgeClient(url,username,passwd);  List<EcoreMetamodel> mm = mdefc.getEcoreMetamodels(); String outmm = """"; for(EcoreMetamodel el : mm){ outmm += el.getName() + "";""; } MessageDialog.openInformation( shell, ""Popup"", ""Metamodelli importati:\n"" + outmm); } catch (Exception e) { // TODO Auto-generated catch block e.printStackTrace(); } } "	0	0	0	0	1	0
"public static <E extends Execution<E>> Stage<E> newStage(E execution, String type, String name, Map<String, Object> context, Stage<E> parent, SyntheticStageOwner stageOwner) { Stage stage; if (execution instanceof Orchestration) { stage = new OrchestrationStage((Orchestration) execution, type, context); } else { stage = new PipelineStage((Pipeline) execution, type, name, context); }  stage.setSyntheticStageOwner(stageOwner);  if (parent != null) { stage.setParentStageId(parent.getId());  // Look upstream until you find the ultimate ancestor parent (parent w/ no parentStageId) Collection<Stage<E>> executionStages = execution.getStages(); while (parent.getParentStageId() != null) { String parentStageId = parent.getParentStageId(); parent = executionStages .stream() .filter(s -> s.getId().equals(parentStageId)) .findFirst() .orElse(null); } }  if (parent != null) { String stageName = Optional.of(stage.getName()).map(s -> s.replaceAll(""[^A-Za-z0-9]"", """")).orElse(null); ((AbstractStage) stage).setId( parent.getId() + ""-"" + ((AbstractStage) parent).getStageCounter().incrementAndGet() + ""-"" + stageName ); }  return stage; } "	0	0	0	0	1	0
"private void updateUnit() { if (unit_pulses != IrpUtils.invalid) { if (frequency == 0) throw new ArithmeticException(""Units in p and frequency == 0 do not go together.""); unit = (int) (((double)unit_pulses)*(1000000.0/frequency)); } } "	0	0	1	1	1	0
@Override public ByteBuf encodeBody(Object body) { return Unpooled.wrappedBuffer(new Gson().toJson(body).getBytes()); } 	1	0	1	1	1	0
"@Override public File getDatabasePath(String name) { return new File(getExternalFilesDir(null), ""HabiticaDatabase/"" + name); } "	0	0	0	0	1	0
public void deleteElement(Element element) { client.prepareDelete(indexName, element.label(), element.id().toString()).setRefresh(refresh).execute().actionGet(); } 	1	0	1	1	1	0
public static List<BasicPort> getAllPortsAtPosition(final BasicBlock block, final int position) { final List<BasicPort> data = new ArrayList<BasicPort>(); if (block == null) { return data; }  HashMap<Class< ? extends BasicPort>, Integer> counterMap = new HashMap<>();  final int childrenCount = block.getChildCount(); for (int i = 0; i < childrenCount; ++i) { final mxICell cell = block.getChildAt(i);  // avoid generic class comparaison because inputs might be explicit or implicit Class< ? extends BasicPort> klass; if (cell instanceof InputPort) { klass = InputPort.class; } else if (cell instanceof OutputPort) { klass = OutputPort.class; } else if (cell instanceof ControlPort) { klass = ControlPort.class; } else if (cell instanceof CommandPort) { klass = CommandPort.class; } else { klass = null; }  if (klass != null) { final BasicPort p = ((BasicPort) cell);  // order the ports per kind using a locally allocated map (do not call Controller nor use an ordering field) Integer counter = counterMap.getOrDefault(klass, 1); if (counter == position) { data.add(p); }  counterMap.put(p.getClass(), counter + 1); } }  return data; } 	1	0	0	1	1	0
"public void stop() { disconnect();  if (worker != null) { worker.interrupt(); try { worker.join(); } catch (InterruptedException e) { e.printStackTrace(); worker.interrupt(); } frameCache.clear(); worker = null; }  needToFindKeyFrame = true; Log.i(TAG, String.format(""SrsFlvMuxer closed"")); } "	0	0	1	0	1	0
private void initializeSortBySpinner() { sortBySpinner = (Spinner) findViewById(R.id.card_sort_spinner); sortBySpinner.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) { sortBy = parent.getSelectedItem().toString(); initializeListOfCards(); }  @Override public void onNothingSelected(AdapterView<?> parent) { // Do Nothing } }); } 	1	0	1	1	1	0
public final CancelResult tryCancel(final Player damager, final Player defender) { final PvPlayer attacker = get(damager); final PvPlayer attacked = get(defender); if (attacker.hasOverride() || dependencyManager.hasWGFlag(defender) || Variables.isStopBorderHopping() && canAttack(attacker, attacked)) return CancelResult.FAIL_OVERRIDE; if (attacked.hasRespawnProtection() || attacker.hasRespawnProtection()) return CancelResult.RESPAWN_PROTECTION; if (attacked.isNewbie()) return CancelResult.NEWBIE_OTHER; if (attacker.isNewbie()) return CancelResult.NEWBIE; if (!attacked.hasPvPEnabled()) return CancelResult.PVPDISABLED_OTHER; if (!attacker.hasPvPEnabled()) return CancelResult.PVPDISABLED;  return CancelResult.FAIL; } 	1	0	0	0	1	0
void selectEvents(Collection<CombinedEvent> selectedEvents) { CombinedEvent firstSelected = selectedEvents.stream().min(Comparator.comparing(CombinedEvent::getStartMillis)).orElseGet(null); table.getSelectionModel().clearSelection(); table.scrollTo(firstSelected); selectedEvents.forEach(table.getSelectionModel()::select); table.requestFocus(); } 	0	0	0	0	1	0
"public static void main(String[] args) {  //FOL parsing test String folInput = ""Forall ?x ( (P(a) && (Exists ?y Q(?x,a,?y))) -> (a = ?x) )"";  FOFormulaParserLexer foLexer = new FOFormulaParserLexer(new ANTLRInputStream(folInput)); FOFormulaParserParser foParser = new FOFormulaParserParser(new CommonTokenStream(foLexer));  ParseTree tree = foParser.localQuantifiedFormula();  System.out.println(""\n""); System.out.println(tree.toStringTree(foParser)); System.out.println();  //FOLTL parsing test  String foltlInput = ""Forall ?z ( G ( P(?z) ) )"";  FOLTLFormulaParserLexer foltlLexer = new FOLTLFormulaParserLexer(new ANTLRInputStream(foltlInput)); FOLTLFormulaParserParser foltlParser = new FOLTLFormulaParserParser(new CommonTokenStream(foltlLexer));  tree = foltlParser.acrossQuantifiedFormula();  System.out.println(""\n""); System.out.println(tree.toStringTree(foltlParser));  } "	0	0	1	1	0	0
"@POST @Produces(MediaType.APPLICATION_JSON) public Response postGtfsRtFeed(GtfsRtFeedModel feedInfo) { //feedInfo.setGtfsId(1); feedInfo.setStartTime(TimeStampHelper.getCurrentTimestamp());  //Validate URL for GTFS feed and the GTFS ID. if (feedInfo.getGtfsUrl() == null) { generateError(""GTFS-RT URL is required""); }else if (feedInfo.getGtfsId() == 0) { generateError(""GTFS Feed id is required""); }  //Checks if the GTFS-RT feed returns valid protobuf if (checkFeedType(feedInfo.getGtfsUrl()) == INVALID_FEED) { generateError(""The GTFS-RT URL given is not a valid feed""); }  if(GTFSDB.readGtfsRtFeed(feedInfo) != null){ feedInfo = GTFSDB.readGtfsRtFeed(feedInfo); }else { //If not, create the gtfs-rt feed in the DB and return the feed GTFSDB.createGtfsRtFeed(feedInfo); } return Response.ok(feedInfo).build(); } "	0	0	0	0	1	0
@Override public Downloader copy() { return create(client.newBuilder().build()); } 	1	0	0	0	0	0
"@Override public DelegatingResourceDescription getRepresentationDescription(Representation rep) { DelegatingResourceDescription description = super.getRepresentationDescription(rep); description.addProperty(""status"", Representation.DEFAULT); description.addProperty(""operationNumber"", Representation.DEFAULT); description.addProperty(""dateCreated"", Representation.DEFAULT); description.addProperty(""operationDate"", Representation.DEFAULT); description.addProperty(""operationOrder"", Representation.DEFAULT);  if (!(rep instanceof RefRepresentation)) { description.addProperty(""source"", Representation.REF); description.addProperty(""destination"", Representation.REF); description.addProperty(""patient"", Representation.REF); description.addProperty(""institution"", Representation.REF); description.addProperty(""department"", Representation.REF);  description.addProperty(""canProcess"", findMethod(""canUserProcess"")); }  return description; } "	0	0	0	0	1	0
public static Event createSpongeEvent(net.minecraftforge.fml.common.eventhandler.Event forgeEvent) { if (forgeEvent instanceof BlockEvent.PlaceEvent) { return createChangeBlockEventPlace((BlockEvent.PlaceEvent) forgeEvent); } if (forgeEvent instanceof BlockEvent.MultiPlaceEvent) { return createChangeBlockEventPlace((BlockEvent.MultiPlaceEvent) forgeEvent); } if (forgeEvent instanceof BlockEvent.BreakEvent) { return createChangeBlockEventBreak((BlockEvent.BreakEvent) forgeEvent); } if (forgeEvent instanceof ServerChatEvent) { return createMessageChannelEventChat((ServerChatEvent) forgeEvent); } if (forgeEvent instanceof PlayerSleepInBedEvent) { return createSleepingEventPre((PlayerSleepInBedEvent) forgeEvent); } return null; } 	0	0	0	0	1	0
"@Inject(method = ""tryCatchFire"", at = @At(value = ""INVOKE"", target = ""Lnet/minecraft/world/World;setBlockToAir(Lnet/minecraft/util/math/BlockPos;)Z""), cancellable = true) private void onCatchFirePreCheckOther(World world, BlockPos pos, int chance, Random random, int age, EnumFacing facing, CallbackInfo callbackInfo) { if (!world.isRemote) { if (SpongeCommonEventFactory.callChangeBlockEventPre((IMixinWorldServer) world, pos).isCancelled()) { callbackInfo.cancel(); } } } "	0	0	0	0	1	0
public boolean store() { return store(this.getPath()); } 	1	0	0	0	0	0
@Override public Iterator<?> getChildAxisIterator( Object node ) { Iterator<?> iter = EMPTY_ITERATOR; if ( node instanceof GMLObjectNode<?, ?> ) { GMLObjectNode<GMLObject, GMLObject> gmlObjectNode = (GMLObjectNode<GMLObject, GMLObject>) node; if ( gmlObjectNode.getValue() != null ) { iter = new PropertyNodeIterator( gmlObjectNode ); } } else if ( node instanceof DocumentNode ) { iter = new SingleObjectIterator( ( (DocumentNode) node ).getRootNode() ); } else if ( node instanceof PropertyNode ) { PropertyNode propNode = (PropertyNode) node; Property prop = propNode.getValue(); if ( !prop.getChildren().isEmpty() ) { List<XPathNode> xpathNodes = new ArrayList<XPathNode>( prop.getChildren().size() ); for ( TypedObjectNode xmlNode : prop.getChildren() ) { if ( xmlNode instanceof org.deegree.commons.tom.ElementNode ) { xpathNodes.add( new XMLElementNode<Property>( propNode, (org.deegree.commons.tom.ElementNode) xmlNode ) ); } else if ( xmlNode instanceof GMLObject ) { xpathNodes.add( new GMLObjectNode<GMLObject, Property>( propNode, (GMLObject) xmlNode ) ); } else if ( xmlNode instanceof PrimitiveValue ) { xpathNodes.add( new PrimitiveNode<Property>( propNode, (PrimitiveValue) xmlNode ) ); } } iter = xpathNodes.iterator(); } else { final Object propValue = prop.getValue(); if ( propValue instanceof GMLObject ) { GMLObject castNode = (GMLObject) propValue; iter = new SingleObjectIterator( new GMLObjectNode<GMLObject, Property>( propNode, castNode ) ); } else if ( propValue instanceof PrimitiveValue ) { iter = new SingleObjectIterator( new PrimitiveNode<Property>( (PropertyNode) node, (PrimitiveValue) propValue ) ); } else if ( propValue == null ) { iter = emptyIterator(); } else { // TODO remove this case iter = new SingleObjectIterator( new PrimitiveNode<Property>( (PropertyNode) node, new PrimitiveValue( propValue.toString() ) ) ); } } } else if ( node instanceof XMLElementNode<?> ) { XMLElementNode<?> xmlElementNode = (XMLElementNode<?>) node; List<TypedObjectNode> xmlNodes = xmlElementNode.getValue().getChildren(); List<XPathNode<?>> xpathNodes = new ArrayList<XPathNode<?>>( xmlNodes.size() ); for ( TypedObjectNode xmlNode : xmlNodes ) { if ( xmlNode instanceof org.deegree.commons.tom.ElementNode ) { xpathNodes.add( new XMLElementNode<org.deegree.commons.tom.ElementNode>( xmlElementNode, (org.deegree.commons.tom.ElementNode) xmlNode ) ); } else if ( xmlNode instanceof GMLObject ) { xpathNodes.add( new GMLObjectNode<GMLObject, org.deegree.commons.tom.ElementNode>( xmlElementNode, (GMLObject) xmlNode ) ); } else if ( xmlNode instanceof PrimitiveValue ) { xpathNodes.add( new PrimitiveNode<org.deegree.commons.tom.ElementNode>( xmlElementNode, (PrimitiveValue) xmlNode ) ); } } iter = xpathNodes.iterator(); } return iter; } 	0	0	1	1	0	0
"@SuppressWarnings(""unchecked"") @Override public Iterator<AttributeNode<? extends TypedObjectNode>> getAttributeAxisIterator( Object node ) { if ( node instanceof GMLObjectNode<?, ?> ) { GMLObjectNode<GMLObject, ?> gmlObjectNode = (GMLObjectNode<GMLObject, ?>) node; GMLObject object = gmlObjectNode.getValue(); if ( object.getId() != null ) { List<AttributeNode<?>> idAttrs = new ArrayList<AttributeNode<?>>( 4 ); PrimitiveValue id = new PrimitiveValue( object.getId() ); idAttrs.add( new AttributeNode<GMLObject>( gmlObjectNode, new QName( ""fid"" ), id ) ); idAttrs.add( new AttributeNode<GMLObject>( gmlObjectNode, new QName( ""gid"" ), id ) ); idAttrs.add( new AttributeNode<GMLObject>( gmlObjectNode, new QName( GMLNS, ""id"" ), id ) ); idAttrs.add( new AttributeNode<GMLObject>( gmlObjectNode, new QName( GML3_2_NS, ""id"" ), id ) ); return idAttrs.iterator(); } } else if ( node instanceof PropertyNode ) { Object value = ( (PropertyNode) node ).getValue().getValue(); if ( value instanceof Measure && ( (Measure) value ).getUomUri() != null ) { PrimitiveValue uom = new PrimitiveValue( ( (Measure) value ).getUomUri() ); return new SingleObjectIterator( new AttributeNode<Property>( (PropertyNode) node, new QName( ""uom"" ), uom ) ); } else if ( value instanceof CodeType && ( (CodeType) value ).getCodeSpace() != null ) { PrimitiveValue codeSpace = new PrimitiveValue( ( (CodeType) value ).getCodeSpace() ); return new SingleObjectIterator( new AttributeNode<Property>( (PropertyNode) node, new QName( ""codeSpace"" ), codeSpace ) ); } else if ( value instanceof GenericXMLElement ) { XMLElementNode<Property> n = new XMLElementNode<Property>( (PropertyNode) node, (GenericXMLElement) value ); return getAttributeAxisIterator( n ); } } else if ( node instanceof XMLElementNode<?> ) { org.deegree.commons.tom.ElementNode value = ( (XMLElementNode<?>) node ).getValue(); Map<QName, PrimitiveValue> attributes = value.getAttributes(); if ( attributes != null ) { List<AttributeNode<?>> attrNodes = new ArrayList<AttributeNode<?>>( attributes.size() ); for ( Entry<QName, PrimitiveValue> attribute : attributes.entrySet() ) { attrNodes.add( new AttributeNode<org.deegree.commons.tom.ElementNode>( (XMLElementNode<?>) node, attribute.getKey(), attribute.getValue() ) ); } return attrNodes.iterator(); } } return JaxenConstants.EMPTY_ITERATOR; } "	1	0	0	0	0	0
public LSHMatrix<Integer> generate(final LSHMatrix<Integer> booleanMatrix) { final LSHMatrix<Integer> result = new LSHMatrix<>(booleanMatrix.numberOfDocuments(), numberOfHashFunctions); // int result to in max value, row docs and cols hash functions for (int i = 0; i < booleanMatrix.numberOfDocuments(); ++i){ for (int j = 0; j < numberOfHashFunctions; ++j){ result.addToIndex(i,j,Integer.MAX_VALUE); } } // for each shingle for (int shingleIndex = 0; shingleIndex < booleanMatrix.getTotalNumberOfRows(); ++shingleIndex) { // for each document for (int row = 0; row < booleanMatrix.numberOfDocuments(); ++row) { // document has shingle if(booleanMatrix.getDocumentVector(row).contains(shingleIndex)) { // calculateSimilarityPerBand hash based on row number, get vector of hashes values // and assign it to result calculateHashFunctions(shingleIndex, result.getDocumentVector(row)); } } } return result; } 	1	0	1	0	1	0
public List<Volunteer> getJobVolunteerList(int theJobID) { List<Volunteer> volunteerList = new ArrayList<Volunteer>();  if(isManagerOfJob(theJobID)) { volunteerList.addAll(myPollster.getJobVolunteerList(theJobID)); } return volunteerList; } 	0	0	0	0	1	0
public List<User> getMatchingVolunteers(String theLastName) { List<User> matchingVols = new ArrayList<>();  List<User> allVols = myPollster.getVolunteerListCopy();  for (int i = 0; i < allVols.size(); i++) { final User currVol = allVols.get(i); if (currVol.getLastName().equals(theLastName)) { matchingVols.add(currVol); } }  return matchingVols; } 	0	0	0	0	1	0
private List<Job> getTheJobs() { List<Job> daJobs = myPollster.getJobListCopy(); Calendar currentDate = new GregorianCalendar();  for (Job j: daJobs) { //go through each job and find out what job is in the past. //then change that job's JobID to -1 so that it can be //checked for and ignored when displaying the jobs. if(currentDate.getTimeInMillis() + 2670040009l > j.getStartDate().getTimeInMillis()) { j.setIfPast(true); } }  return daJobs; } 	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_settings);  //set all the spinners mExpireSpinner = (Spinner) this.findViewById(R.id.default_expiration_spinner); ArrayAdapter<CharSequence> expireAdapter = ArrayAdapter.createFromResource(this, R.array.expire_date_select, android.R.layout.simple_spinner_item); expireAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); mExpireSpinner.setAdapter(expireAdapter);  mPrivacySpinner = (Spinner) this.findViewById(R.id.privacySpinner); ArrayAdapter<CharSequence> privacyAdapter; if (!Constants.LOGGED_IN) { //if not logged in, don't show ""Private"" option privacyAdapter = ArrayAdapter.createFromResource(this, R.array.private_select_not_logged_in, android.R.layout.simple_spinner_item); } else { privacyAdapter = ArrayAdapter.createFromResource(this, R.array.private_select, android.R.layout.simple_spinner_item); } privacyAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); mPrivacySpinner.setAdapter(privacyAdapter);  mSyntaxSpinner = (Spinner) this.findViewById(R.id.default_syntax_spinner); ArrayAdapter<CharSequence> syntaxAdapter = ArrayAdapter.createFromResource(this, R.array.syntax_highlight_select, android.R.layout.simple_spinner_item); syntaxAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); mSyntaxSpinner.setAdapter(syntaxAdapter);  mTextSizeSpinner = (Spinner) this.findViewById(R.id.text_size_spinner); ArrayAdapter<CharSequence> textSizeAdapter = ArrayAdapter.createFromResource(this, R.array.editor_text_size_select, android.R.layout.simple_spinner_dropdown_item); mTextSizeSpinner.setAdapter(textSizeAdapter);  mResultLimitSpinner = (Spinner) this.findViewById(R.id.results_limit_spinner); ArrayAdapter<CharSequence> resultLimitAdapter = ArrayAdapter.createFromResource(this, R.array.result_limit_select, android.R.layout.simple_spinner_dropdown_item); mResultLimitSpinner.setAdapter(resultLimitAdapter);  //set spinner click listeners mExpireSpinner.setOnItemSelectedListener(this); mPrivacySpinner.setOnItemSelectedListener(this); mSyntaxSpinner.setOnItemSelectedListener(this); mTextSizeSpinner.setOnItemSelectedListener(this); mResultLimitSpinner.setOnItemSelectedListener(this);  //set spinners to values loaded from settings mExpireSpinner.setSelection(Settings.EXPIRE); mPrivacySpinner.setSelection(Settings.PRIVACY); mSyntaxSpinner.setSelection(Settings.SYNTAX); mTextSizeSpinner.setSelection(getIndex(mTextSizeSpinner, Settings.TEXT_SIZE)); mResultLimitSpinner.setSelection(getIndex(mResultLimitSpinner, Settings.RESULT_LIMIT));  //button mSaveSettingsButton = (Button) this.findViewById(R.id.save_settings_button); mSaveSettingsButton.setOnClickListener(this);  //switches mLineNumberSwitch = (Switch) this.findViewById(R.id.show_line_numbers_switch); mLineNumberSwitch.setChecked(Settings.SHOW_LINE_NUMBERS);  mWrapSwitch = (Switch) this.findViewById(R.id.wrap_switch); mWrapSwitch.setChecked(Settings.WORDWRAP);  mFlingScrollSwitch = (Switch) this.findViewById(R.id.fling_to_scroll_switch); mFlingScrollSwitch.setChecked(Settings.FLING_TO_SCROLL);  mSettingsReference = FirebaseDatabase .getInstance() .getReference() .child(Constants.USER_NAME) .child(Constants.FIREBASE_CHILD_SETTINGS);   } "	0	0	0	0	1	0
"@Subscribe public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) { long now = clock.millis(); String lastUpdated = new Date(now).toString(); logger.info(LogsCenter.getEventHandlingLogMessage(abce, ""Setting last updated status to "" + lastUpdated)); setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated)); } "	0	0	0	0	1	0
protected List<String> createVertices(int numVertices, List<String> vertexVisibilities, int numPropertiesPerVertex, List<String> propertyVisibilities) throws ApiException { LoopingIterator vertexVizIterator = new LoopingIterator(vertexVisibilities); LoopingIterator propertyVizIterator = new LoopingIterator(propertyVisibilities); List<String> vertexIds = new ArrayList<>(); for (int i = 0; i < numVertices; i++) { ClientApiElement vertex = setupVertexApi.create(CONCEPT_TEST_PERSON, (String) vertexVizIterator.next()); String vertexId = vertex.getId(); setVertexProperties(numPropertiesPerVertex, propertyVizIterator, vertexId); vertexIds.add(vertexId); } return vertexIds; } 	0	0	0	0	1	0
public static List<List<HasWord>> tokenize(String comment) { final DocumentPreprocessor sentences = new DocumentPreprocessor(new StringReader(comment)); ArrayList<List<HasWord>> result = new ArrayList<>(); sentences.forEach(result::add); return result; } 	0	0	1	0	0	0
"@Test public void requestPath_SpectraS3Resource_Test() { final String expectedPath = ""\""/_rest_/active_job/\""""; final Ds3Request request = createDs3RequestTestData( ""RequestName"", Classification.spectrads3, Resource.ACTIVE_JOB, null, false);  final String requestPath = requestPath(request); assertThat(requestPath, is(expectedPath)); } "	0	0	1	1	0	0
"@Test public void getJobChunksReadyForClientProcessingRequest() throws IOException, TypeRenamingConflictException, ParserException, ResponseTypeNotFoundException { final String requestName = ""GetJobChunksReadyForClientProcessingSpectraS3Request""; final FileUtils fileUtils = mock(FileUtils.class); final TestGeneratedCode testGeneratedCode = new TestGeneratedCode( fileUtils, requestName, ""./ds3-sdk/src/main/java/com/spectralogic/ds3client/commands/spectrads3/"");  testGeneratedCode.generateCode(fileUtils, ""/input/getJobChunksReadyForClientProcessingRequest.xml"");  final String requestGeneratedCode = testGeneratedCode.getRequestGeneratedCode(); LOG.info(""Generated code:\n"" + requestGeneratedCode);  assertTrue(extendsClass(requestName, ""AbstractRequest"", requestGeneratedCode)); assertTrue(isOfPackage(""com.spectralogic.ds3client.commands.spectrads3"", requestGeneratedCode)); assertTrue(hasCopyright(requestGeneratedCode));  assertTrue(isReqParamOfType(""Job"", ""UUID"", requestName, requestGeneratedCode, false));  assertTrue(hasImport(""com.spectralogic.ds3client.commands.AbstractRequest"", requestGeneratedCode)); assertTrue(hasImport(""com.spectralogic.ds3client.HttpVerb"", requestGeneratedCode)); assertTrue(hasImport(""java.util.UUID"", requestGeneratedCode));  assertTrue(doesNotHaveOperation(requestGeneratedCode)); assertTrue(hasPath(""\""/_rest_/job_chunk/\"""", requestGeneratedCode));  final ImmutableList<Arguments> constructorArgs = ImmutableList.of( new Arguments(""UUID"", ""Job"")); assertTrue(hasConstructor(requestName, constructorArgs, requestGeneratedCode));  //Test the generated response final String responseGeneratedCode = testGeneratedCode.getResponseGeneratedCode(); LOG.info(""Generated code:\n"" + responseGeneratedCode);  final String responseName = requestName.replace(""Request"", ""Response""); assertTrue(extendsClass(responseName, ""AbstractResponse"", responseGeneratedCode)); assertTrue(isOfPackage(""com.spectralogic.ds3client.commands.spectrads3"", responseGeneratedCode)); assertTrue(hasImport(""com.spectralogic.ds3client.networking.WebResponse"", responseGeneratedCode)); assertTrue(hasImport(""java.io.IOException"", responseGeneratedCode)); assertTrue(hasImport(""java.io.InputStream"", responseGeneratedCode)); assertTrue(hasImport(""com.spectralogic.ds3client.commands.AbstractResponse"", responseGeneratedCode)); assertTrue(hasImport(""com.spectralogic.ds3client.serializer.XmlOutput"", responseGeneratedCode)); assertTrue(hasImport(""com.spectralogic.ds3client.models.JobWithChunksContainerApiBean"", responseGeneratedCode));  assertTrue(hasStaticMethod(""parseRetryAfter"", ""int"", Scope.PRIVATE, responseGeneratedCode)); assertTrue(responseGeneratedCode.contains(""public enum Status"")); assertTrue(responseGeneratedCode.contains(""AVAILABLE, RETRYLATER""));  //Test the Ds3Client final String ds3ClientGeneratedCode = testGeneratedCode.getDs3ClientGeneratedCode(); LOG.info(""Generated code:\n"" + ds3ClientGeneratedCode); testDs3Client(requestName, ds3ClientGeneratedCode);  final String ds3ClientImplGeneratedCode = testGeneratedCode.getDs3ClientImplGeneratedCode(); LOG.info(""Generated code:\n"" + ds3ClientImplGeneratedCode); testDs3ClientImpl(requestName, ds3ClientImplGeneratedCode); } "	0	0	1	1	0	0
public void addPay(Integer csRepairId, Byte payType, Customer customer) { CsRepair csRepair = csRepairMapper.selectByPrimaryKey(csRepairId); if (null != csRepair) { csRepair.setPayTypes(payType); csRepair.setStatus(FINISH); csRepairMapper.updateByPrimaryKey(csRepair);  CsRepairPayment csRepairPayment = new CsRepairPayment(); csRepairPayment.setCreatedAt(new Date()); csRepairPayment.setCsRepairId(csRepairId); csRepairPayment.setPayTypes(csRepair.getPayTypes()); csRepairPayment.setProcessUserId(customer.getId()); csRepairPayment.setProcessUserName(customer.getName()); csRepairPayment.setRepairPrice(csRepair.getRepairPrice()); csRepairPaymentMapper.insert(csRepairPayment); } } 	0	0	0	0	1	0
private Image createFromTexture(ImageModel imageModel) { if(imageModel.getNinepatch()){ NinePatchDrawable ninePatchDrawable = new NinePatchDrawable();  NinePatch patch; if (imageModel.getNinepatchOffset() == 0) {  patch = new NinePatch(new TextureRegion(assets.getTexture(getLocalizedString(imageModel.getTextureSrc()))), imageModel.getNinepatchOffsetLeft(), imageModel.getNinepatchOffsetRight(), imageModel.getNinepatchOffsetTop(), imageModel.getNinepatchOffsetBottom()); } else { patch = new NinePatch(new TextureRegion(assets.getTexture(getLocalizedString(imageModel.getTextureSrc()))), imageModel.getNinepatchOffset(), imageModel.getNinepatchOffset(), imageModel.getNinepatchOffset(), imageModel.getNinepatchOffset()); }  ninePatchDrawable.setPatch(patch); if(imageModel.getMinFilter() != null && imageModel.getMagFilter() != null) { patch.getTexture().setFilter(Texture.TextureFilter.valueOf(imageModel.getMinFilter()), Texture.TextureFilter.valueOf(imageModel.getMagFilter())); } return new Image(patch); }else{ TextureRegion textureRegion = new TextureRegion(assets.getTexture(getLocalizedString(imageModel.getTextureSrc()))); if(imageModel.getMinFilter() != null && imageModel.getMagFilter() != null) { textureRegion.getTexture().setFilter(Texture.TextureFilter.valueOf(imageModel.getMinFilter()), Texture.TextureFilter.valueOf(imageModel.getMagFilter())); } return new Image(textureRegion); } } 	0	0	0	0	1	0
"@Override public boolean match(Node symbol, Node type) { return XmDomUtil.getAttrBool(type, ""is_private""); } "	0	0	0	0	1	0
@Test public void whenModuleHasNoSupplierHomepage_thenCorrespondingFitnessFeatureShouldBeTrue() { PepperModule module = mock(PepperModule.class); when(module.getSupplierHomepage()).thenReturn(null); assertThat(new ModuleFitnessChecker(null).checkFitness(module).getFitness(FitnessFeature.HAS_SUPPLIER_HP)) .isEqualTo(false); } 	0	0	1	1	0	0
@Test public void whenImporterDoesNotSupportIsImportable_thenCorrespondingFitnessFeatureShouldBeTrue() { PepperImporter importer = mock(PepperImporter.class); when(importer.isImportable(any(URI.class))).thenReturn(null); assertThat(new ModuleFitnessChecker(null).checkFitness(importer).getFitness(FitnessFeature.IS_IMPORTABLE)) .isEqualTo(false); } 	0	0	1	1	0	0
@Test public void whenModuleIsReadyToRun_thenCorrespondingHealthFeatureShouldBeTrue() { PepperModule module = mock(PepperModule.class); when(module.isReadyToStart()).thenReturn(true); assertThat(new ModuleFitnessChecker(null).checkHealth(module).getFitness(FitnessFeature.IS_READY_TO_RUN)) .isEqualTo(true); } 	0	0	0	1	0	0
@Test public void whenCheckingHealthForNullSet_thenReturnEmptyList() { Collection<PepperModule> modules = null; new ModuleFitnessChecker(null).checkHealth(modules).isEmpty(); } 	0	0	1	1	1	0
@Test public void whenModuleHasNoName_thenCorrespondingFitnessFeatureShouldBeTrue() { PepperModule module = mock(PepperModule.class); when(module.getName()).thenReturn(null); assertThat(new ModuleFitnessChecker(null).checkFitness(module).getFitness(FitnessFeature.HAS_NAME)) .isEqualTo(false); } 	0	0	1	1	0	0
@Override public boolean checkClientSecret(String clientSecret) { return clientService.findByClientSecret(clientSecret) != null; } 	0	0	0	0	1	0
public boolean isEmpty() { return xcapExpireTimeMap.isEmpty(); } 	0	0	0	0	1	0
public boolean hasActiveExpireTime(long expireTime) { return xcapExpireTimeMap.containsKey(expireTime); } 	0	0	0	0	1	0
"@Scheduled(fixedRate = 200) public void executor() {  // Pull messages todo this should be configurable. List<Message> events = consumer.pullMessages(10);  events.stream().forEach( message -> { SignInEvent event = jsonDeserializer.deserialize(message.getData().toString()); mergeCart(event.getCustomerId(), event.getCustomerId()); consumer.acknowledgeMessage(message.getExternalId());//for google we put ach LOG.debug(""Processed message. messageId: {},  externalId: {}"", message.getId(), message .getExternalId()); } );  } "	0	0	0	0	1	0
public static ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit) { return SCHEDULED_POOL.scheduleWithFixedDelay(command, initialDelay, delay, unit); } 	0	0	0	0	1	0
public static <V> ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit) { return SCHEDULED_POOL.schedule(callable, delay, unit); } 	0	0	0	0	1	0
"void apply() { if (this.firstdow.isSelected()) Configuration.put(""FIRST_DAY_OF_WEEK"", ""mon""); else Configuration.put(""FIRST_DAY_OF_WEEK"", ""sun"");  if (this.enL10nChB.isSelected()) Configuration.put(""DISABLE_L10N"", ""no""); else Configuration.put(""DISABLE_L10N"", ""yes"");  if (this.enSplashChB.isSelected()) Configuration.put(""SHOW_SPLASH"", ""yes""); else Configuration.put(""SHOW_SPLASH"", ""no"");  if (this.enSystrayChB.isSelected()) Configuration.put(""DISABLE_SYSTRAY"", ""no""); else Configuration.put(""DISABLE_SYSTRAY"", ""yes"");  if (this.startMinimizedChB.isSelected()) Configuration.put(""START_MINIMIZED"", ""yes""); else Configuration.put(""START_MINIMIZED"", ""no"");  if (this.askConfirmChB.isSelected()) Configuration.put(""ASK_ON_EXIT"", ""yes""); else Configuration.put(""ASK_ON_EXIT"", ""no"");  if (this.closeExitRB.isSelected()) Configuration.put(""ON_CLOSE"", ""exit""); else Configuration.put(""ON_CLOSE"", ""minimize"");  Configuration.put(""ON_MINIMIZE"", ""normal"");  if(this.phoneNumber.getValue() != null) { Configuration.put(""PHONE_NUMBER"", this.phoneNumber.getValue().toString()); } else{ Configuration.put(""PHONE_NUMBER"", ""invalid""); } String lf = Configuration.get(""LOOK_AND_FEEL"").toString(); String newlf = """";  if (this.lfSystemRB.isSelected()) newlf = ""system""; else if (this.lfJavaRB.isSelected()) newlf = ""default""; else if (this.lfCustomRB.isSelected()) newlf = this.lfClassName.getText();  if (!lf.equalsIgnoreCase(newlf)) { Configuration.put(""LOOK_AND_FEEL"", newlf); try { if (Configuration.get(""LOOK_AND_FEEL"").equals(""system"")) UIManager.setLookAndFeel(UIManager .getSystemLookAndFeelClassName()); else if (Configuration.get(""LOOK_AND_FEEL"").equals(""default"")) UIManager.setLookAndFeel(UIManager .getCrossPlatformLookAndFeelClassName()); else if (Configuration.get(""LOOK_AND_FEEL"").toString().length() > 0) UIManager.setLookAndFeel(Configuration.get(""LOOK_AND_FEEL"") .toString());  SwingUtilities.updateComponentTreeUI(App.getFrame());  } catch (Exception e) { Configuration.put(""LOOK_AND_FEEL"", lf); new ExceptionDialog( e, ""Error when initializing a pluggable look-and-feel. Default LF will be used."", ""Make sure that specified look-and-feel library classes are on the CLASSPATH.""); } } String brPath = this.browserPath.getText(); if (new java.io.File(brPath).isFile()) { MimeTypesList.getAppList().setBrowserExec(brPath); CurrentStorage.get().storeMimeTypesList(); }  if (!this.enableSoundCB.isSelected()) Configuration.put(""NOTIFY_SOUND"", ""DISABLED""); else if (this.soundDefaultRB.isSelected()) Configuration.put(""NOTIFY_SOUND"", ""DEFAULT""); else if (this.soundBeepRB.isSelected()) Configuration.put(""NOTIFY_SOUND"", ""BEEP""); else if ((this.soundCustomRB.isSelected()) && (this.soundFile.getText().trim().length() > 0)) Configuration.put(""NOTIFY_SOUND"", this.soundFile.getText().trim());  if (antialiasChB.isSelected()) Configuration.put(""ANTIALIAS_TEXT"", ""yes""); else Configuration.put(""ANTIALIAS_TEXT"", ""no"");  Configuration.put(""NORMAL_FONT"", normalFontCB.getSelectedItem()); Configuration.put(""HEADER_FONT"", headerFontCB.getSelectedItem()); Configuration.put(""MONO_FONT"", monoFontCB.getSelectedItem()); Configuration.put(""BASE_FONT_SIZE"", baseFontSize.getValue()); App.getFrame().workPanel.dailyItemsPanel.editorPanel.editor.editor.setAntiAlias(antialiasChB.isSelected()); App.getFrame().workPanel.dailyItemsPanel.editorPanel.initCSS(); App.getFrame().workPanel.dailyItemsPanel.editorPanel.editor.repaint();  Configuration.saveConfig();  } "	0	0	1	1	0	0
@Test public void getResponseCacheReturnsResponseCache() throws Exception { Cache responseCache = desk.getResponseCache(InstrumentationRegistry.getContext()); assertNotNull(responseCache); assertEquals(responseCache.getMaxSize(), Desk.CACHE_MAX_SIZE); } 	0	0	0	0	1	0
"private SootMethod resolve(StringBuffer trace) { if(declaringClass.getName().equals(""java.dyn.InvokeDynamic"")) { throw new IllegalStateException(""Cannot resolve invokedynamic method references at compile time!""); } SootClass cl = declaringClass; while(true) { if(trace != null) trace.append( ""Looking in ""+cl+"" which has methods ""+cl.getMethods()+""\n"" ); SootMethod sm = cl.getMethodUnsafe(getSubSignature()); if( sm != null ) return checkStatic(sm); if(Scene.v().allowsPhantomRefs() && (cl.isPhantom() || Options.v().ignore_resolution_errors())) { SootMethod m = new SootMethod(name, parameterTypes, returnType, isStatic()?Modifier.STATIC:0); m.setPhantom(true); cl.addMethod(m); return checkStatic(m); } if( cl.hasSuperclass() ) cl = cl.getSuperclass(); else break; } cl = declaringClass; while(true) { LinkedList<SootClass> queue = new LinkedList<SootClass>(); queue.addAll( cl.getInterfaces() ); while( !queue.isEmpty() ) { SootClass iface = queue.removeFirst(); if(trace != null) trace.append( ""Looking in ""+iface+"" which has methods ""+iface.getMethods()+""\n"" ); SootMethod sm = iface.getMethodUnsafe(getSubSignature()); if( sm != null ) return checkStatic(sm); queue.addAll( iface.getInterfaces() ); } if( cl.hasSuperclass() ) cl = cl.getSuperclass(); else break; }  //when allowing phantom refs we also allow for references to non-existing methods; //we simply create the methods on the fly; the method body will throw an appropriate //error just in case the code *is* actually reached at runtime if(Options.v().allow_phantom_refs()) return createUnresolvedErrorMethod(declaringClass);  if( trace == null ) { ClassResolutionFailedException e = new ClassResolutionFailedException(); if(Options.v().ignore_resolution_errors()) G.v().out.println(e.getMessage()); else throw e; }  return null; } "	0	0	0	0	1	0
public boolean addAll(final Collection<? extends Integer> coll) { return conjunction(coll, this::add); } 	0	0	0	0	1	0
"public List<Recipe> paginate(Integer page, Integer size, String search, String user, String order, List<Integer> tags) { TypedQuery<Recipe> queryObject; if (!tags.isEmpty()) { queryObject = JPA.em().createQuery(""SELECT m FROM "" + TABLE + "" m JOIN m.tags t WHERE "" + Recipe.Search(search) + "" AND "" + Recipe.IsVisible(user) + "" AND "" + Recipe.WithDrafts(false) + "" AND t.id IN (:tags) ORDER BY "" + order, Recipe.class).setParameter(""tags"", tags); } else { queryObject = JPA.em().createQuery(""SELECT m FROM "" + TABLE + "" m WHERE "" + Recipe.Search(search) + "" AND "" + Recipe.IsVisible(user) + "" AND "" + Recipe.WithDrafts(false) + "" ORDER BY "" + order, Recipe.class); } return queryObject.setFirstResult(page * size).setMaxResults(size).getResultList(); } "	0	0	0	0	1	0
public static void init(Context context) { language = Settings.instance(context).getIntFromString(Settings.DATA_LANGUAGE, ZH_CN); } 	0	0	0	0	1	0
"private PrintPayload payloadTest5(PrinterSettings printerSettings) { int lineWidth = printerSettings.getPaperWidth(); Paint paint = new Paint(); paint.setTextSize(30); //create a bitmap that is higher than the text size float height = paint.descent() - paint.ascent(); Bitmap myBitmap = Bitmap.createBitmap(lineWidth, 400, Bitmap.Config.ARGB_8888); Canvas canvas = new Canvas(); canvas.setBitmap(myBitmap); paint.setColor(Color.WHITE); paint.setStyle(Paint.Style.FILL); canvas.drawPaint(paint); paint.setColor(Color.BLACK);  //Text Left and Right Aligned paint.setTextAlign(Paint.Align.LEFT); canvas.drawText(""left"", 20, height / 2 + 50, paint); paint.setTextAlign(Paint.Align.RIGHT); canvas.drawText(""right"", lineWidth - 20, height / 2 + 50, paint);  //Slanted Parallelogram border on top and bottom paint.setColor(Color.BLACK); for (int i = 0; i < 22; i++) { Point point1Draw = new Point(10 + i * 21, 5); Point point2Draw = new Point(5 + i * 21, 10); Point point3Draw = new Point(10 + i * 21, 20); Point point4Draw = new Point(20 + i * 21, 10);  Path path = new Path(); path.setFillType(Path.FillType.EVEN_ODD); path.moveTo(point1Draw.x, point1Draw.y); path.lineTo(point2Draw.x, point2Draw.y); path.lineTo(point3Draw.x, point3Draw.y); path.lineTo(point4Draw.x, point4Draw.y); path.lineTo(point1Draw.x, point1Draw.y); path.close(); canvas.drawPath(path, paint);  path.reset(); path.moveTo(point1Draw.x, 295 + point1Draw.y); path.lineTo(point2Draw.x, 295 + point2Draw.y); path.lineTo(point3Draw.x, 295 + point3Draw.y); path.lineTo(point4Draw.x, 295 + point4Draw.y); path.lineTo(point1Draw.x, 295 + point1Draw.y); path.close(); canvas.drawPath(path, paint); }  //3 circles paint.setColor(Color.BLACK); paint.setTextAlign(Paint.Align.LEFT); canvas.drawText(""3 circles"", 20, 140, paint); paint.setAlpha(255); canvas.drawCircle(165, 120, 50, paint); paint.setAlpha(160); canvas.drawCircle(265, 120, 30, paint); paint.setAlpha(127); canvas.drawCircle(325, 120, 10, paint);  //Image and text in same line  Bitmap logo = BitmapFactory.decodeResource(context.getResources(), R.drawable.bwlogotrans); paint.setTextAlign(Paint.Align.LEFT); paint.setTextSize(20); canvas.drawText(""Powered By"", 20, 270, paint); canvas.drawBitmap(logo, 140, 230, paint);  //Sample Receipt Text paint.setColor(Color.BLACK); canvas.save(); paint.setAlpha(127); canvas.rotate(-45); paint.setTextSize(50); paint.setTextAlign(Paint.Align.CENTER); canvas.drawText(""Sample Receipt"", 40, 300, paint); canvas.restore(); PrintPayload printPayload = new PrintPayload(); printPayload.append(myBitmap); return printPayload; } "	0	0	0	0	1	0
"private PrintPayload payloadTest4(PrinterSettings printerSettings) { PrintPayload payload = new PrintPayload();  payload.append(""Canvas printer test"").align(Alignment.CENTER);  int canvasHeight = 200; int margin = 10; int width = printerSettings.getPaperWidth() - 100; Bitmap bitmap = Bitmap.createBitmap(width, canvasHeight, Bitmap.Config.ARGB_8888); Canvas canvas = new Canvas(bitmap); Paint paint = new Paint(); paint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL)); paint.setTextSize(50); paint.setTextSkewX(-0.25f); paint.setAntiAlias(true);  paint.setColor(Color.BLACK); canvas.drawText(""Aevi"", 60, 80, paint); paint.setColor(Color.argb(255, 32, 32, 32)); // Thermal printer dark grey canvas.drawText(""Aevi"", 90, 110, paint); paint.setColor(Color.argb(255, 40, 40, 40)); // Thermal printer light grey canvas.drawText(""Aevi"", 120, 140, paint);  paint.setColor(Color.BLACK); paint.setStyle(Paint.Style.STROKE); paint.setStrokeWidth(4); paint.setPathEffect(new DashPathEffect(new float[]{10, 20}, 0)); canvas.drawRect(margin, margin, width - margin, canvasHeight - margin, paint); payload.append(bitmap).align(Alignment.CENTER);  payload.append(""End canvas"").align(Alignment.CENTER);  return payload; } "	0	0	0	0	1	0
public boolean isResponseFormatActive(ResponseFormatKey key) throws ConnectionProviderException { return sosPersistingActivationManagerDao.isResponseFormatActive(key); } 	0	0	0	0	1	0
public static ConnectionFactory createDefaultConnectionFactory(String macKey) { ConnectionPool pool = Mockito.mock(ConnectionPool.class);  Mockito.doAnswer(new Answer<Void>() { @Override public Void answer(InvocationOnMock invocation) throws Throwable { Connection<?> conn = (Connection<?>) invocation.getArguments()[0]; conn.getTransport().close(); return null; } }).when(pool).releaseConnection(Mockito.any());  IntegritySecretHelper integritySecretHelper = new IntegritySecretHelper(); IntegritySecretHelperTestUtil.setMessageIntegritySecret(integritySecretHelper, macKey);  return new DefaultConnectionFactory(pool, integritySecretHelper, 10000); } 	0	0	0	0	1	0
"public static String fixLinkDefaultsortCategory(Page page, String contents) {  // Check configuration WPCConfiguration config = page.getWikipedia().getConfiguration(); boolean option = config.getBoolean(WPCConfigurationBoolean.AUTO_LINK_DEFAULTSORT_CATEGORY); if (!option) { return contents; } PageAnalysis analysis = page.getAnalysis(contents, true);  // Retrieve default sort List<PageElementFunction> defaultSorts = analysis.getDefaultSorts(); if ((defaultSorts == null) || (defaultSorts.isEmpty())) { return contents; } PageElementFunction defaultSort = defaultSorts.get(0); int beginDefaultSort = defaultSort.getBeginIndex(); int endDefaultSort = defaultSort.getEndIndex();  // Retrieve categories List<PageElementCategory> categories = analysis.getCategories(); if ((categories == null) || (categories.isEmpty())) { return contents; } PageElementCategory category = categories.get(0); int beginCategory = category.getBeginIndex(); boolean defaultSortFirst = beginDefaultSort < beginCategory;  // Analyze text between category and default sort if (!defaultSortFirst) { int index = category.getEndIndex(); while (index < beginDefaultSort) { char currentChar = contents.charAt(index); if ((currentChar == ' ') || (currentChar == '\n')) { index++; } else if (currentChar == '[') { PageElementCategory currentCategory = analysis.isInCategory(index); if (currentCategory == null) { return contents; } index = currentCategory.getEndIndex(); } else { return contents; } } } else { int index = endDefaultSort; boolean ok = true; while (ok && (index < beginCategory)) { char currentChar = contents.charAt(index); if ((currentChar != ' ') && (currentChar != '\n')) { ok = false; } index++; } if (ok) { return contents; } index = beginCategory; while ((index > 0) && ok) { char currentChar = contents.charAt(index); if (currentChar == '\n') { ok = false; } else if (currentChar != ' ') { return contents; } index--; } }  // Fix default sort position int delta = 0; if ((beginDefaultSort <= 0) || (contents.charAt(beginDefaultSort - 1) == '\n')) { if ((endDefaultSort < contents.length()) && (contents.charAt(endDefaultSort) == '\n')) { delta = 1; if ((beginDefaultSort <= 1) || (contents.charAt(beginDefaultSort - 2) == '\n')) { if ((endDefaultSort + 1 < contents.length() && (contents.charAt(endDefaultSort + 1) == '\n'))) { delta = 2; } } } } StringBuilder sb = new StringBuilder(contents.substring( 0, defaultSortFirst ? beginDefaultSort : beginCategory)); if (defaultSortFirst) { sb.append(contents.substring(endDefaultSort + delta, beginCategory)); } sb.append(contents.substring(beginDefaultSort, endDefaultSort)); sb.append(""\n""); if (defaultSortFirst) { if (beginCategory < contents.length()) { sb.append(contents.substring(beginCategory)); } } else { sb.append(contents.substring(beginCategory, beginDefaultSort)); if (endDefaultSort + delta < contents.length()) { sb.append(endDefaultSort + delta); } } contents = sb.toString();  return contents; } "	0	0	0	0	0	1
"public static int addFonctionnality(String name, String description, int avancement, Date deadLine) { String sql = ""Insert into fonctionnalities(name, description, avancement, deadLine) values (?,?,?,?);""; try { PreparedStatement stmt = DataBase.getConnection().prepareStatement( sql); stmt.setString(1, name); stmt.setString(2, description); stmt.setInt(3, avancement); stmt.setDate(4, deadLine); stmt.executeUpdate(); stmt.close(); Statement stmt2 = DataBase.getConnection().createStatement(); ResultSet rs = stmt2.executeQuery(""select last_insert_rowid();""); return rs.getInt(1); } catch (SQLException e) { e.printStackTrace(); System.err.println(sql); return -1; } } "	0	0	0	0	1	0
@Override public boolean saveSnapshot() { if (!isLastStage) { return flushBuffers(); } if (snapshotTraverser == null) { snapshotTraverser = traverseIterable(tsToKeyToAcc.entrySet()) .<Entry>flatMap(e -> traverseIterable(e.getValue().entrySet()) .map(e2 -> entry(new SnapshotKey(e.getKey(), e2.getKey()), e2.getValue())) ) .append(entry(Keys.NEXT_WIN_TO_EMIT, nextWinToEmit)) .onFirstNull(() -> snapshotTraverser = null); } return emitFromTraverserToSnapshot(snapshotTraverser); } 	0	0	0	0	1	0
"public static void loadMods() { try { List<ModContainer> unsortedMods = new ArrayList<>(); if (MOD_DIRECTORY.exists()) { File[] files = MOD_DIRECTORY.listFiles(); if (files != null) { for (File mod : files) { Launch.classLoader.addURL(mod.toURI().toURL()); } } }  URL roots; Enumeration<URL> metas = Launch.classLoader.getResources(""META-INF""); while (metas.hasMoreElements()) { roots = metas.nextElement(); File root = new File(roots.getPath()); File[] files = root.listFiles(); if (files != null) { for (File file : files) { if (file.getName().equals(""MANIFEST.MF"")) { FileInputStream stream = new FileInputStream(file); ModContainer mod = loadMod(file, new Manifest(stream)); if (mod != null) { unsortedMods.add(mod); ID_MAP.put(mod.getModID(), mod); } stream.close(); } else if (file.getName().endsWith("".at"")) { Multimap<String, String> entries = OMLAccessTransformer.getEntries(); FileUtils.readLines(file).stream().filter(line -> line.matches(""\\w+((\\.\\w+)+|)\\s+(\\w+(\\(\\S+|)|\\*\\(\\)|\\*)"")).forEach(line -> { String[] parts = line.split("" ""); entries.put(parts[0], parts[1]); }); } } } } MODS.addAll(DependencySorter.sort(unsortedMods)); for (ModContainer mod : MODS) { for (String dep : mod.getDependencies()) { String[] depParts = dep.split(""\\s*:\\s*""); ModContainer depContainer = ID_MAP.get(depParts[0]); if (depContainer == null) { throw new RuntimeException(""Missing dependency '"" + dep + ""' for mod '"" + mod.getName() + ""'.""); } else if (depParts.length > 1 && !new Version(depContainer.getVersion()).atLeast(new Version(depParts[1]))) { throw new RuntimeException(""Outdated dependency '"" + dep + ""' for mod '"" + mod.getName() + ""'. Expected version '"" + depParts[1] + ""', but got version '"" + depContainer.getVersion() + ""'.""); } } } } catch (Exception e) { throw new RuntimeException(e); } } "	0	0	1	1	1	0
@Override public View getView(final Context context, int brickId, BaseAdapter baseAdapter) { if (animationState) { return view; }  view = View.inflate(context, R.layout.brick_set_look, null); view = BrickViewProvider.setAlphaOnView(view, alphaValue);  setCheckboxView(R.id.brick_set_look_checkbox);  final Spinner lookBrickSpinner = (Spinner) view.findViewById(R.id.brick_set_look_spinner);  final ArrayAdapter<LookData> spinnerAdapter = createLookAdapter(context);  SpinnerAdapterWrapper spinnerAdapterWrapper = new SpinnerAdapterWrapper(context, spinnerAdapter);  lookBrickSpinner.setAdapter(spinnerAdapterWrapper);  lookBrickSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {  @Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) { if (position == 0) { look = null; } else { look = (LookData) parent.getItemAtPosition(position); oldSelectedLook = look; } }  @Override public void onNothingSelected(AdapterView<?> arg0) { } });  setSpinnerSelection(lookBrickSpinner);  if (getSprite().getName().equals(context.getString(R.string.background))) { TextView textField = (TextView) view.findViewById(R.id.brick_set_look_and_wait); textField.setText(R.string.brick_set_background); }  if (!wait) { view.findViewById(R.id.brick_set_look_and_wait).setVisibility(View.GONE); }  return view; } 	0	0	0	0	1	0
"private static String normalizeName(Material material) { String name = material.toString().toLowerCase().replaceAll(""block"", """");  // some name normalizations if (name.contains(""sign"")) { name = ""Sign""; }  if (name.contains(""furnace"")) { name = ""furnace""; }  if (name.endsWith(""_"")) { name = name.substring(0, name.length() - 1); }  return name.toLowerCase(); } "	0	0	1	0	0	0
private void mapSTextualDS(STextualDS ds){ XMLStreamWriter w = TCFs.peek(); try { w.writeStartElement(NS_TC, TAG_TC_TEXT, NS_VALUE_TC); w.writeCharacters(ds.getSText()); w.writeEndElement(); } catch (XMLStreamException e) {} w = null; } 	0	0	0	0	1	0
private String getBugsFileProjectRelativePath() { return getProject().findMember(BUGS_XML_FILE).getProjectRelativePath().toOSString(); } 	0	0	1	0	1	0
Uri buildSingleDeviceEventUri(@Nullable String eventNamePrefix, String deviceId) { Builder builder = devicesBaseUri.buildUpon().appendPath(deviceId); if (truthy(eventNamePrefix)) { builder.appendPath(eventNamePrefix); } return builder.build(); } 	0	0	0	0	1	0
private int jjMoveStringLiteralDfa8_0(long old2, long active2) { if (((active2 &= old2)) == 0L) return jjStartNfa_0(6, 0L, 0L, old2); try { curChar = input_stream.readChar(); } catch(java.io.IOException e) { jjStopStringLiteralDfa_0(7, 0L, 0L, active2); return 8; } switch(curChar) { case 111: return jjMoveStringLiteralDfa9_0(active2, 0x10000L); default : break; } return jjStartNfa_0(7, 0L, 0L, active2); } 	0	0	0	0	1	0
private static void reset(byte[] a) { for (int i = 0; i < a.length; i++) { a[i] = 0; } } 	0	0	1	0	0	0
"@RequestMapping(value = ""/browse/transformation_details"", method = { RequestMethod.GET }) public String transformationDetails(Model model, @RequestParam String transformation_id) {  ATLTransformation atlTransformation = aTLTransformationService.findOne(transformation_id);  model.addAttribute(""atlTransformation"", atlTransformation);  String pathToDownload = gridFileMediaService.getFilePath(atlTransformation); File atlTransformationFile = new File(pathToDownload); model.addAttribute(""atlTransformationFile"", atlTransformationFile);  return ""public.browse.transformation_details""; } "	0	0	0	0	1	0
"@FXML private void handleStore(MouseEvent event) throws IOException { Parent storeScreen = FXMLLoader.load(getClass().getResource(""view/Store.fxml"")); Scene storeScene = new Scene(storeScreen); Stage storeStage = (Stage) ((Node) event.getSource()).getScene().getWindow(); storeStage.setScene(storeScene); storeStage.show(); } "	0	0	0	0	1	0
"private static String exec(final String... cmd) throws IOException { Objects.requireNonNull(cmd); try { Log.trace(""Running: "", cmd); Process p = new ProcessBuilder(cmd).redirectInput(Redirect.INHERIT).start(); String result = ExecHelper.waitAndCapture(p); Log.trace(""Result: "", result); if (p.exitValue() != 0) { throw new IOException(""Error executing '"" + String.join("" "", cmd) + ""': "" + result); } return result; } catch (InterruptedException e) { throw (IOException) new InterruptedIOException(""Command interrupted"").initCause(e); } } "	0	0	0	0	1	0
"private Terminal doBuild() throws IOException { String name = this.name; if (name == null) { name = ""JLine terminal""; } String encoding = this.encoding; if (encoding == null) { encoding = Charset.defaultCharset().name(); } String type = this.type; if (type == null) { type = System.getenv(""TERM""); } if ((system != null && system) || (system == null && in == null && out == null)) { // // Cygwin support // if (OSUtils.IS_CYGWIN) { Pty pty = CygwinPty.current(); return new PosixSysTerminal(name, type, pty, encoding, nativeSignals, signalHandler); } else if (OSUtils.IS_WINDOWS) { if (useJna()) { try { return new JnaWinSysTerminal(name, nativeSignals, signalHandler); } catch (Throwable t) { Log.debug(""Error creating JNA based pty"", t.getMessage()); } } return new JansiWinSysTerminal(name, nativeSignals, signalHandler); } else { Pty pty = null; if (useJna()) { try { pty = JnaNativePty.current(); } catch (Throwable t) { // ignore Log.debug(""Error creating JNA based pty"", t.getMessage()); } } if (pty == null) { try { pty = ExecPty.current(); } catch (IOException e) { // Ignore if not a tty Log.debug(""Error creating exec based pty"", e.getMessage()); } } if (pty != null) { return new PosixSysTerminal(name, type, pty, encoding, nativeSignals, signalHandler); } else { return new DumbTerminal(name, type, new FileInputStream(FileDescriptor.in), new FileOutputStream(FileDescriptor.out), encoding, signalHandler); } } } else { if (useJna()) { try { Pty pty = JnaNativePty.open(attributes, size); return new PosixPtyTerminal(name, type, pty, in, out, encoding, signalHandler); } catch (Throwable t) { Log.debug(""Error creating JNA based pty"", t.getMessage()); } } return new ExternalTerminal(name, type, in, out, encoding, signalHandler); } } "	1	0	1	0	0	0
private void initViewWithData() { LinearLayout viewWithoutData = (LinearLayout)realView.findViewById(R.id.home_no_data); LinearLayout viewWithDate = (LinearLayout)realView.findViewById(R.id.home_with_data);  viewWithDate.setVisibility(View.VISIBLE); viewWithoutData.setVisibility(View.GONE);  initPieChart(realView); } 	0	0	0	0	1	0
"public void setEastRoad(Road eastRoad) throws Exception { if (this.location.getY() == eastRoad.getEndLocation().getY() && (this.location.getX() + 1  == eastRoad.getEndLocation().getX() || this.location.getX() + 1 == eastRoad.getStartLocation().getX())) { this.eastRoad = eastRoad; } else throw new IntersectionSetupException(""Road end location coordinates must match with Intersection""); } "	1	1	1	1	0	0
"@GetMapping(""/overview"") public String overview(@RequestParam(value = ""seite"", required = false, defaultValue = ""0"") final int seite, final Model model) { final Page<Abweichung> abweichungen = abweichungService.findAbweichungen(seite); model.addAttribute(""abweichungen"", abweichungen); log.debug(""totalElement={}, totalPages={}, hasPrevious={}, hasNext={}"", abweichungen.getTotalElements(), abweichungen.getTotalPages(), abweichungen.hasPrevious(), abweichungen.hasNext()); return ""overview""; } "	0	0	1	1	0	0
private static List<CaptureFormat.FramerateRange> convertFramerates( Range<Integer>[] arrayRanges, int unitFactor) { final List<CaptureFormat.FramerateRange> ranges = new ArrayList<CaptureFormat.FramerateRange>(); for (Range<Integer> range : arrayRanges) { ranges.add(new CaptureFormat.FramerateRange( range.getLower() * unitFactor, range.getUpper() * unitFactor)); } return ranges; } 	0	0	1	1	0	0
"private static Collection<Class<?>> classes(final List<JqJson> configs) throws IOException { final Set<String> clazzes = new HashSet<>(); for (final JqJson jqJson : configs) { if (jqJson.classes == null) continue; for (final String className : jqJson.classes) { clazzes.add(className); } } final List<Class<?>> result = new ArrayList<>(); for (final String className : clazzes) { try { result.add(Class.forName(className)); } catch (Throwable th) { System.err.println(""Failed to load class "" + className + "": "" + th.getMessage()); continue; } } return result; } "	0	0	0	0	1	0
@Override public int compare(final RankedProvider<T> o1, final RankedProvider<T> o2) { return (getPriority(o1) - getPriority(o2)) * order.ordering; } 	1	0	1	1	1	0
@Override public byte[] doFinal(byte[] input) { return mac.doFinal(input); } 	0	0	0	0	1	0
@Override public synchronized void startScanImpl() { if (mState != State.STOPPED) { return; } mState = State.WAITING; resolver.start(); } 	0	0	1	0	1	0
"public GitClient log(LogData data) { ArrayBuilder<String> builder = new ArrayBuilder<String>(String.class).add(""log""); if (data.getMaxCount() != null) { builder.add(""--max-count="" + data.getMaxCount()); } String output = invokeGenerically(GIT_LOG_PROCESS_NAME, true, builder.toArray()); LineIterator iterator = new LineIterator(new StringReader(output)); while (iterator.hasNext()) { parseLogItem(iterator, data); } return this; } "	0	0	0	0	1	0
"public GitClient deleteBranch(BranchDeletionData data) { invokeGenerically(GIT_DELETE_BRANCH_PROCESS_NAME, true, ""branch"", ""--delete"", data.getBranchName()); return this; } "	0	0	0	0	1	0
"public GitClient config(ConfigData data) { ArrayBuilder<String> builder = new ArrayBuilder<String>(String.class).add(""config""); if (!StringUtil.isEmpty(data.getKey())) { builder.add(data.getKey()); if (!StringUtil.isEmpty(data.getValue())) { builder.add('""' + data.getValue() + '""'); if (!StringUtil.isEmpty(data.getValueRegex())) { builder.add(data.getValueRegex()); } } } invokeGenerically(GIT_CONFIG_PROCESS_NAME, true, builder.toArray()); return this; } "	0	0	0	0	1	0
"public GitClient commit(CommitData data) { ArrayBuilder<String> builder = new ArrayBuilder<String>(String.class); builder.add(""commit""); if (Boolean.parseBoolean(data.getAllowEmpty())) { builder.add(""--allow-empty""); } if (!StringUtil.isEmpty(data.getMessage())) { builder.add(""-m"").add(quoteArg(data.getMessage())); } invokeGenerically(GIT_COMMIT_PROCESS_NAME, true, builder.toArray()); return this; } "	0	0	0	0	1	0
"public GitClient version(VersionData data) { String output = invokeGenerically(GIT_VERSION_PROCESS_NAME, true, ""--version""); String versionNumber = extractVersionNumber(output); data.setVersionNumber(versionNumber); return this; } "	0	0	0	0	1	0
"public GitClient resetHard(ResetData data) { ArrayBuilder<String> builder = new ArrayBuilder<String>(String.class).add(""reset"").add(""--hard""); if (data.getCommit() != null) { builder.add(data.getCommit()); } invokeGenerically(GIT_RESET_HARD_PROCESS_NAME, true, builder.toArray()); return this; } "	0	0	0	0	1	0
private String getFileContent(String localFilePath, GitClient git) throws IOException { File file = file(localFilePath, git); String actualContent = IOUtil.getContentOfURI(file.getAbsolutePath()); return actualContent; } 	0	0	0	0	1	0
private boolean isHeaderPosition(int position) { return hasHeaderView() && position == 0; } 	0	0	0	1	0	0
public WeakHashMap<WrappedPosition, Integer> getWrappedPositionOffsets() { LinkedList<WeakReference<WrappedPosition>> newList = new LinkedList<WeakReference<WrappedPosition>>(); synchronized(_wrappedPosListLock) { if (_wrappedPosList == null) { _wrappedPosList = new LinkedList<WeakReference<WrappedPosition>>(); } WeakHashMap<WrappedPosition, Integer> ret = new WeakHashMap<WrappedPosition, Integer>(_wrappedPosList.size());  for (WeakReference<WrappedPosition> wr: _wrappedPosList) { Position ref = wr.get();  // factored out of loop body that was unsafe because GC could happen! if (ref != null)  { // hasn't been garbage-collected yet newList.add(wr); ret.put(ref, ref.getOffset()); } } _wrappedPosList.clear(); _wrappedPosList = newList; return ret; } } 	0	0	0	0	1	0
"@RequestMapping( value=""/states"", method=RequestMethod.GET, produces={ ""application/json"" } ) @ResponseStatus(value = HttpStatus.OK) public List<IdAndPlayerStateResponse> getAllPlayerStates() {  log.debug(""Mapped GET /player/states"");  List<IdAndPlayerStateResponse> playerResponseList = new ArrayList<IdAndPlayerStateResponse>();  List<Player> players = playerRepository.getAllPlayers();  if(players != null) { for(Player player : players) {  String objectString = JsonUtils.objectToJson(player); if(objectString != null) { log.trace(""Processing Player: {}"", objectString); }  IdAndPlayerStateResponse PlayerResponse = new IdAndPlayerStateResponse(); PlayerResponse.id = player.getId(); PlayerResponse.state = player.getState();  playerResponseList.add(PlayerResponse); } }  String objectString = JsonUtils.objectToJson(playerResponseList); if(objectString != null) { log.debug(""Returning playerResponse: {}"", objectString); }  return playerResponseList; } "	0	0	0	0	1	0
"protected final void setConnectSuccess() { finished = true; if (connectTimeoutFuture != null) { connectTimeoutFuture.cancel(false); }  if (connectPromise.trySuccess(ctx.channel())) { boolean removedCodec = true;  removedCodec &= safeRemoveEncoder();  ctx.fireUserEventTriggered( new ProxyConnectionEvent(protocol(), authScheme(), proxyAddress, destinationAddress));  removedCodec &= safeRemoveDecoder();  if (removedCodec) { writePendingWrites();  if (flushedPrematurely) { ctx.flush(); } } else { // We are at inconsistent state because we failed to remove all codec handlers. Exception cause = new ProxyConnectException( ""failed to remove all codec handlers added by the proxy handler; bug?""); failPendingWrites(cause); ctx.fireExceptionCaught(cause); ctx.close(); } } } "	0	0	1	0	0	0
"private boolean confirmed(Vertex salesQuotation) { List<Float> influencingMasterQuality = Lists.newArrayList(); influencingMasterQuality.add(getEdgeTargetQuality( ""sentBy"", salesQuotation.getId(), Constants.EMPLOYEE_MAP)); influencingMasterQuality.add(getEdgeTargetQuality( ""sentTo"", salesQuotation.getId(), Constants.CUSTOMER_MAP));  return config.happensTransitionConfiguration(influencingMasterQuality, ""SalesQuotation"", ""confirmationProbability""); } "	0	0	1	0	0	0
"public synchronized void onException(JMSException ex) { System.out.println(""JMS Exception occured.  Shutting down client.""); } "	0	0	1	0	1	0
private FileSystemWalkResults fileSystemWalk(final boolean create, final Object newDataToAdd, final String... path) { final List<BiConsumer<String, Object>> eventHandlersOnBranch = new ArrayList<>();  FileNode node = root;  eventHandlersOnBranch.addAll(node.getEventHandlers());  if (newDataToAdd != null) node.setMostRecentDataOnBranch(newDataToAdd);  for (final String pathNode : PathBuilder.decomposePath(path)) { node = node.getChild(pathNode, create);  if (node == null) return new FileSystemWalkResults(null, eventHandlersOnBranch);  if (newDataToAdd != null) node.setMostRecentDataOnBranch(newDataToAdd);  eventHandlersOnBranch.addAll(node.getEventHandlers()); }  if (newDataToAdd != null) node.setData(newDataToAdd);  return new FileSystemWalkResults(node, eventHandlersOnBranch); } 	0	0	1	0	1	0
"private void done(Response resp) { boolean isBlobResp = isBlobResponse(resp); emitStateEvent(getResponseInfo(resp, isBlobResp)); switch (responseType) { case KeepInMemory: try { // For XMLHttpRequest, automatic response data storing strategy, when response // data is considered as binary data, write it to file system if(isBlobResp && options.auto) { String dest = RNFetchBlobFS.getTmpPath(ctx, taskId); InputStream ins = resp.body().byteStream(); FileOutputStream os = new FileOutputStream(new File(dest)); int read; byte[] buffer = new byte[10240]; while ((read = ins.read(buffer)) != -1) { os.write(buffer, 0, read); } ins.close(); os.flush(); os.close(); callback.invoke(null, RNFetchBlobConst.RNFB_RESPONSE_PATH, dest); } // response data directly pass to JS context as string. else { // #73 Check if the response data contains valid UTF8 string, since BASE64 // encoding will somehow break the UTF8 string format, to encode UTF8 // string correctly, we should do URL encoding before BASE64. byte[] b = resp.body().bytes(); CharsetEncoder encoder = Charset.forName(""UTF-8"").newEncoder(); if(responseFormat == ResponseFormat.BASE64) { callback.invoke(null, RNFetchBlobConst.RNFB_RESPONSE_BASE64, android.util.Base64.encodeToString(b, Base64.NO_WRAP)); return; } try { encoder.encode(ByteBuffer.wrap(b).asCharBuffer()); // if the data contains invalid characters the following lines will be // skipped. String utf8 = new String(b); callback.invoke(null, RNFetchBlobConst.RNFB_RESPONSE_UTF8, utf8); } // This usually mean the data is contains invalid unicode characters, it's // binary data catch(CharacterCodingException ignored) { if(responseFormat == ResponseFormat.UTF8) { callback.invoke(null, RNFetchBlobConst.RNFB_RESPONSE_UTF8, """"); } else { callback.invoke(null, RNFetchBlobConst.RNFB_RESPONSE_BASE64, android.util.Base64.encodeToString(b, Base64.NO_WRAP)); } } } } catch (IOException e) { callback.invoke(""RNFetchBlob failed to encode response data to BASE64 string."", null); } break; case FileStorage: try { // In order to write response data to `destPath` we have to invoke this method. // It uses customized response body which is able to report download progress // and write response data to destination path. resp.body().bytes(); } catch (Exception ignored) { //                    ignored.printStackTrace(); } this.destPath = this.destPath.replace(""?append=true"", """"); callback.invoke(null, RNFetchBlobConst.RNFB_RESPONSE_PATH, this.destPath); break; default: try { callback.invoke(null, RNFetchBlobConst.RNFB_RESPONSE_UTF8, new String(resp.body().bytes(), ""UTF-8"")); } catch (IOException e) { callback.invoke(""RNFetchBlob failed to encode response data to UTF8 string."", null); } break; } //        if(!resp.isSuccessful()) resp.body().close(); releaseTaskResource(); } "	1	0	1	1	1	0
private void ensureTracesIsMutable() { if (!((bitField0_ & 0x00000020) == 0x00000020)) { traces_ = new java.util.ArrayList<org.powerapi.module.libpfm.PayloadProtocol.String>(traces_); bitField0_ |= 0x00000020; } } 	0	0	0	0	1	0
"private static String buildRgbColor(Color color) { StringBuilder valueBuilder = new StringBuilder(); valueBuilder.append(""rgb(""); valueBuilder.append(Integer.toString(color.getRed())); valueBuilder.append("", ""); valueBuilder.append(Integer.toString(color.getGreen())); valueBuilder.append("", ""); valueBuilder.append(Integer.toString(color.getBlue())); valueBuilder.append("")"");  return valueBuilder.toString(); } "	0	0	1	1	0	0
@Override public void onCompleted() { if (!matchResult.isDraw()) { Club winner = matchResult.winner(); //noinspection ConstantConditions boolean isWinner = winner.nameEquals(userClub); finalScoreIcon = isWinner ? R.drawable.ic_mood_black_48px : R.drawable.ic_sentiment_very_dissatisfied_black_48px; if (isWinner) { finalScoreMessage = getString(R.string.winner); } else { finalScoreMessage = getString(R.string.defeated); } } else { finalScoreIcon = R.drawable.ic_sentiment_neutral_black_48px; finalScoreMessage = getString(R.string.draw); } if (BuildConfig.DEBUG) { Log.d(TAG, finalScoreMessage); }  startTimer(); } 	0	0	0	0	1	0
"@Override public ActionResult<ItemStack> onItemRightClick(World world, EntityPlayer player, EnumHand hand) { ItemStack stack = player.getActiveItemStack(); if (player.isSneaking()) { if (!world.isRemote) { DebugMode mode = this.changeDebugMode(stack); player.sendMessage(new TextComponentString(""Set debug mode to "" + mode.debugName())); } } else { this.getDebugMode(stack).debugActionClicked(stack, world, player, hand); } return new ActionResult<>(EnumActionResult.PASS, stack); } "	0	0	0	0	1	0
@Override public CloseableIterator<Atom> match(Atom atom) { String query = containsAtomIntoCypherQuery(atom, false); if (LOGGER.isDebugEnabled()) { LOGGER.debug(query); } ResourceIterator<Map<String, Object>> result = this.cypherEngine.execute(query).iterator();  return new Neo4jAtomIterator(this.getTransaction(), result); } 	0	0	0	0	1	0
public void drawCurrentState() { int edgeLength = myController.getEdgeLength();  printColumnIdentifiers(edgeLength); for(int i = 0; i < edgeLength; i++) { printLine(edgeLength);  StringBuilder line = new StringBuilder(printLeadingNumber(i + 1, edgeLength)); for(int j = 0; j < edgeLength; j++) { String playerString = myController.getIsOccupiedByPlayer(i, j); char id = playerString.isEmpty() ? ' ' : playerString.charAt(0); line.append(drawSpot(id)); } logger.info(line); } printLine(edgeLength); printPoints();  } 	0	0	1	0	1	0
"private static int deleteInMediaDatabase(Context context, String[] oldPathNames) { String sqlWhere = FotoSql.getWhereInFileNames(oldPathNames); int modifyCount = 0; try { modifyCount = context.getContentResolver().delete(FotoSql.SQL_TABLE_EXTERNAL_CONTENT_URI, sqlWhere, null); if (Global.debugEnabled) { Log.d(Global.LOG_CONTEXT, CONTEXT + ""deleteInMediaDatabase(len="" + oldPathNames.length + "", files='"" + oldPathNames[0] + ""'...) result count="" + modifyCount); } } catch (Exception ex) { Log.e(Global.LOG_CONTEXT, CONTEXT + ""deleteInMediaDatabase("" + sqlWhere + "") error :"", ex); }  return modifyCount; } "	0	0	0	0	1	0
"private void onDuplicatesFound(SelectedItems selectedItems, StringBuffer debugMessage) { if (debugMessage != null) { Log.w(Global.LOG_CONTEXT, mDebugPrefix + debugMessage); }  if (selectedItems != null) { QueryParameter query = new QueryParameter(); FotoSql.setWhereSelection(query, selectedItems);  final Activity activity = getActivity();  // might be null in in orientation change if (activity != null) { int delCount = activity.getContentResolver().delete(FotoSql.SQL_TABLE_EXTERNAL_CONTENT_URI, query.toAndroidWhere(), null); if (debugMessage != null) { Log.w(Global.LOG_CONTEXT, mDebugPrefix + "" deleted "" + delCount + "" duplicates\n\tDELETE ... WHERE "" + query.toAndroidWhere()); }  if (delCount > 0) { requery(""after delete duplicates""); // content has changed: must reload } } } } "	0	0	0	0	1	0
"@Test public void shouldValidateAPipelineHasAtleastOneStage() { PipelineConfig pipelineConfig = new PipelineConfig(new CaseInsensitiveString(""p""), new MaterialConfigs()); pipelineConfig.validateTree(PipelineConfigSaveValidationContext.forChain(true, ""group"", new BasicCruiseConfig(new BasicPipelineConfigs(""group"", new Authorization())), pipelineConfig)); assertThat(pipelineConfig.errors().on(""pipeline""), is(""Pipeline 'p' does not have any stages configured. A pipeline must have at least one stage."")); } "	0	0	0	0	1	0
@Override @SideOnly(Side.CLIENT) protected boolean keyTyped(char c, int i) { if (textField.textboxKeyTyped(c, i)) { updateRecipes(true); return true; } else { return super.keyTyped(c, i); } } 	0	0	0	0	1	0
"public void downloadFile(String fileID, String fileName, String peerIP, long startByte, long endByte) throws MalformedURLException { File f = new File(Environment.getExternalStorageDirectory() + syncDirectory + ""/"" + fileName); URL fileUrl = new URL(""http://""+ peerIP +"":8080/getFile/"" + fileID); ResumeDownloadThread resumeDownloadThread = new ResumeDownloadThread(fileUrl , fileID, f, startByte, endByte); Thread t = new Thread(resumeDownloadThread); ongoingDownloadThreads.put(t, resumeDownloadThread); Log.d(""DEBUG:"", ""MISSING FILES ONGOING"" + ongoingDownloadThreads.keySet()); t.start(); } "	0	0	0	0	1	0
"@Override public void l(int level, int code, String message) { String logMessage = code + "" : "" + message; if(level == UMLog.DEBUG) { Log.d(LOGTAG,logMessage); }else if(level == UMLog.INFO) { Log.i(LOGTAG, logMessage); }else if(level == UMLog.CRITICAL) { Log.e(LOGTAG, logMessage); }else if(level == UMLog.VERBOSE) { Log.v(LOGTAG, logMessage); }else if(level == UMLog.ERROR) { Log.e(LOGTAG, logMessage); } } "	0	0	0	0	1	0
@View public Response index(ApplicationContext applicationContext, UserContext userContext) { //Redirect to the home's page if the feature is off if(CommonsUtils.isFeatureActive(NotificationUtils.FEATURE_NAME) == false) { return redirectToHomePage(); }  if (bundle == null) { locale = userContext.getLocale(); bundle = applicationContext.resolveBundle(locale); }  return index.ok(parameters()); } 	0	0	0	0	1	0
"@Override public T save(T t) { String path = jcrom.getPath(t); try { checkPath(path); } catch (RepositoryException e) { throw new JcrMappingException(""Unable to create the parent path "" + path, e); } String name = jcrom.getName(t); if (path != null) { try { if (repository.getSession().nodeExists(path + ""/"" + name)) { return dao.update(t); } } catch (RepositoryException e) { throw new JcrMappingException(""Unable to save the entity "" + path, e); } } return dao.create(t); } "	0	0	0	0	1	0
"protected String usgsDownloadURL(String dataset, String sceneId, String node, String product) {  // GET DOWNLOAD LINKS String response = getDownloadHttpResponse(dataset, sceneId, node, product);  try { JSONObject downloadRequestResponse = new JSONObject(response); String downloadLink = downloadRequestResponse.getString(""data"") .replace(""\\/"", ""/"");  LOGGER.debug(""downloadLink="" + downloadLink); if (downloadLink != null && !downloadLink.isEmpty()) { LOGGER.debug(""Image "" + sceneId + ""download link"" + downloadLink + "" obtained""); return downloadLink; } } catch (Exception e) { LOGGER.error(""Error while formating request response"", e); }  return null; } "	0	0	0	0	1	0
public boolean isAlive( Point point, Point[][] board ){ return isAliveRecursive(point, board, new HashSet<Point>(){}); } 	0	0	1	0	1	0
"@Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { View itemView;  if (this.disturbances == null || this.disturbances.length == 0) { itemView = LayoutInflater.from(parent.getContext()).inflate(R.layout.listview_no_disturbances, parent, false); return new NoResultsViewHolder(itemView); }  if (!PreferenceManager.getDefaultSharedPreferences(context).getBoolean(""use_card_layout"", false)) { itemView = LayoutInflater.from(parent.getContext()).inflate(be.hyperrail.android.R.layout.listview_disturbance, parent, false); } else { itemView = LayoutInflater.from(parent.getContext()).inflate(be.hyperrail.android.R.layout.cardview_disturbance, parent, false); }  return new DisturbanceViewHolder(itemView); } "	0	0	0	0	1	0
"@Override public void handle(Page page, TemplateContext local, TemplateContext global) { HomepageSite site = site(page); Person owner = owner(page);  global.put(""ownerName"", owner.getProfile().getDisplayName());  if (site.getShowPhoto()) { global.put(""ownerAvatarUrl"", owner.getUser().getProfile().getAvatarUrl()); }  Employee employee = owner.getEmployee(); if (employee != null) { Contract contract = owner.getEmployee().getCurrentWorkingContract(); if (contract != null) { if (site.getShowUnit()) { global.put(""workingUnit"", contract.getWorkingUnit()); } } } if (site.getShowCategory() && owner.getTeacher() != null && owner.getTeacher().isActiveContractedTeacher() && owner.getTeacher().getCategory() != null) { global.put(""teacherCategory"", owner.getTeacher().getCategory().getName().getContent()); }  if (site.getShowResearchUnitHomepage()) { List<ResearchUnit> researchUnits = ResearchUnit.getWorkingResearchUnits(owner); if (researchUnits.isEmpty()) { if (owner.getTeacher() != null && owner.getEmployee().getCurrentWorkingContract() != null) { global.put(""researchUnitName"", site.getResearchUnitName()); global.put(""researchUnitHomepage"", site.getResearchUnitHomepage()); } } else { global.put(""workingResearchUnits"", researchUnits); } }  if (site.getShowActiveStudentCurricularPlans()) { global.put(""activeCurricularPlans"", owner.getActiveStudentCurricularPlansSortedByDegreeTypeAndDegreeName()); }  if (site.getShowCurrentAttendingExecutionCourses()) { global.put( ""attendingCourses"", owner.getCurrentAttends().stream().sorted(Attends.ATTENDS_COMPARATOR_BY_EXECUTION_COURSE_NAME) .collect(Collectors.toList())); }  if (site.getShowAlumniDegrees()) { global.put(""completedCurricularPlans"", getCompletedStudentCurricularPlansSortedByDegreeTypeAndDegreeName(owner)); }  global.put(""emails"", getSortedFilteredContacts(owner.getEmailAddresses())); global.put(""personalPhones"", getSortedFilteredContacts(owner.getPhones(), PartyContactType.PERSONAL)); global.put(""workPhones"", getSortedFilteredContacts(owner.getPhones(), PartyContactType.WORK)); global.put(""mobilePhones"", getSortedFilteredContacts(owner.getMobilePhones())); global.put( ""websites"", getSortedFilteredContacts(owner.getWebAddresses()).stream().map(WebAddress.class::cast) .filter(addr -> !addr.getUrl().equals(page.getSite().getFullUrl())).collect(Collectors.toList()));  if (site.getShowCurrentExecutionCourses() && owner.getTeacher() != null && owner.getEmployee().getCurrentWorkingContract() != null) { global.put(""teachingCourses"", owner.getTeacher().getCurrentExecutionCourses()); }  //TODO Unit, ResearchUnit, PartyContact, StudentCurricularPlan, Attends and ExecutionCourse wrappers  } "	1	0	1	0	0	0
public static final <T extends Component> void authorizeAllIf(final IAuthorizationCondition condition, final Class<T> componentClass) { if (condition.isAuthorized()) { authorizeAll(componentClass); } } 	0	0	1	1	0	0
@Override public ApexStateInternals<K> stateInternalsForKey(K key) { final Slice keyBytes; try { keyBytes = (key != null) ? new Slice(CoderUtils.encodeToByteArray(keyCoder, key)) : new Slice(null); } catch (CoderException e) { throw new RuntimeException(e); } Table<String, String, byte[]> stateTable = perKeyState.get(keyBytes); if (stateTable == null) { stateTable = HashBasedTable.create(); perKeyState.put(keyBytes, stateTable); } return new ApexStateInternals<>(key, stateTable); } 	0	0	0	1	1	0
"public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException{ HttpServletRequest hrequest = (HttpServletRequest)request; HttpServletResponseWrapper wrapper = new HttpServletResponseWrapper((HttpServletResponse) response); String loginStrings = config.getInitParameter(""loginStrings""); String diabletestfilter = config.getInitParameter(""diabletestfilter""); String adminStrings = config.getInitParameter(""adminStrings""); String redirectPath = hrequest.getContextPath() + config.getInitParameter(""redirectPath""); if(diabletestfilter.toUpperCase().equals(""Y"")){ chain.doFilter(request,  response); return; } String[] loginList = loginStrings.split("";""); String[] adminList = adminStrings.split("";""); String from = ((HttpServletRequest) request).getServletPath();  if(from.endsWith("".css"")||from.endsWith("".js"")||from.endsWith("".jpg"")||from.endsWith("".jpeg"")||from.endsWith("".png"")||from.endsWith("".ttf"")||from.endsWith("".woff2"")||from.endsWith("".woff"")){ chain.doFilter(request, response); return; } if(this.isContains(hrequest.getRequestURI(), loginList)){ chain.doFilter(request, response); return; } User user = (User)hrequest.getSession().getAttribute(""user"");  if(user == null){ wrapper.sendRedirect(redirectPath); return; }else if(user.getRole().equals(""user"") && this.isContains(hrequest.getRequestURI(), adminList)){ wrapper.sendRedirect(""index.jsp""); return; } else{ chain.doFilter(request,  response); return; } } "	0	0	1	0	1	0
public static void markSkippedJob() { skippedJobs.mark(); } 	0	0	1	0	1	0
static Builder defaultInstance() { return create(false, Gendreau06ObjectiveFunction.instance(), 1L, DEFAULT_SOLVER_XML_RESOURCE, null); } 	0	1	0	0	0	0
@Override protected List<CalendarDescriptor> doInBackground(Void... params) { if (!checkPermission(Manifest.permission.READ_CALENDAR)) { return null; } try { CalendarLoader loader = new CalendarLoader(getActivity()); return loader.getAvailableCalendars(); } catch (Exception e) { return null; } } 	0	0	1	0	1	0
private boolean checkPermission(String permission) { int permissionStatus = ActivityCompat.checkSelfPermission(getActivity(), permission); return permissionStatus == PackageManager.PERMISSION_GRANTED; } 	0	0	1	0	1	0
private void executeReadyTasksAsync(final ServiceCallback<T> callback) { DAGNode<TaskItem<T>> nextNode = dag.getNext(); while (nextNode != null) { ServiceCall serviceCall = nextNode.data().executeAsync(taskCallback(nextNode, callback)); this.parallelServiceCall.addCall(serviceCall); nextNode = dag.getNext(); } } 	1	0	1	1	1	0
"@Test public void testGetMemberships() throws Exception { stubGrouperCall(""soap/GetGroups_Success_Response.xml"", URN_GET_GROUPS_LITE); stubGrouperCall(""soap/GetPrivileges_Success_Response.xml"", URN_GET_GROUPER_PRIVILEGES_LITE);  List<Group> memberships = subject.getGroupMemberships(""urn:collab:person:example.com:admin"", true);  //have to sleep otherwise the wireMock servers stops before the privileges are fetched in parallel Thread.sleep(1000);  assertTrue(memberships.size() == 12);  Group group1 = memberships.get(0); assertEquals(group1.id,""urn:collab:group:surfnet.nl:etc:sysadmingroup""); assertEquals(group1.displayName,""sysadmingroup""); assertEquals(group1.description,""system administrators with all privileges""); assertEquals(group1.membership.basic,""admin"");   Group group2 = memberships.get(1); assertEquals(group2.id,""urn:collab:group:surfnet.nl:nl:surfnet:diensten:test_groep_1""); assertEquals(group2.displayName,""test_groep_1""); assertEquals(group2.description,""test groep 1""); assertEquals(group2.membership.basic,""admin""); } "	0	0	1	0	1	0
"private boolean isFormDefined() { return StringUtil.isDefined(modelId) && modelId.endsWith("".xml""); } "	0	0	1	1	0	0
"private static void initializeReindex() { // Initialize the logger File log4jFile = new File(""../../conf/"" + serverName + ""/log4j.reindex.properties""); if (log4jFile.exists()) { PropertyConfigurator.configure(log4jFile.getAbsolutePath()); } else { System.out.println(""Could not find log4j configuration "" + log4jFile.toString()); }  logger.info(""Starting Reindex for "" + serverName);  // Load the configuration file String configName = ""../../conf/"" + serverName + ""/config.ini""; File configFile = new File(configName); if (!configFile.exists()) { logger.error(""Could not find confiuration file "" + configName); System.exit(1); }  // Parse the configuration file configIni = new Ini(); try { configIni.load(new FileReader(configFile)); } catch (InvalidFileFormatException e) { logger.error(""Configuration file is not valid.  Please check the syntax of the file."", e); } catch (FileNotFoundException e) { logger.error(""Configuration file could not be found.  You must supply a configuration file in conf called config.ini."", e); } catch (IOException e) { logger.error(""Configuration file could not be read."", e); } solrPort = configIni.get(""Reindex"", ""solrPort""); if (solrPort.length() == 0) { logger.error(""You must provide the port where the solr index is loaded in the import configuration file""); System.exit(1); } libraryAbbrev = configIni.get(""Reindex"", ""libraryAbbrev"");  String updateSolrStr = configIni.get(""Reindex"", ""updateSolr""); if (updateSolrStr != null){ updateSolr = Boolean.parseBoolean(updateSolrStr); } String updateResourcesStr = configIni.get(""Reindex"", ""updateResources""); if (updateResourcesStr != null){ updateResources = Boolean.parseBoolean(updateResourcesStr); } String exportStrandsCatalogStr = configIni.get(""Reindex"", ""exportStrandsCatalog""); if (exportStrandsCatalogStr != null){ exportStrandsCatalog = Boolean.parseBoolean(exportStrandsCatalogStr); } String exportOPDSCatalogStr = configIni.get(""Reindex"", ""exportOPDSCatalog""); if (exportOPDSCatalogStr != null){ exportOPDSCatalog = Boolean.parseBoolean(exportOPDSCatalogStr); } String loadEContentFromMarcStr = configIni.get(""Reindex"", ""loadEContentFromMarc""); if (loadEContentFromMarcStr != null){ loadEContentFromMarc = Boolean.parseBoolean(loadEContentFromMarcStr); }  //Setup connections to vufind and econtent databases String databaseConnectionInfo = Util.cleanIniValue(configIni.get(""Database"", ""database_vufind_jdbc"")); if (databaseConnectionInfo == null || databaseConnectionInfo.length() == 0) { logger.error(""VuFind Database connection information not found in Database Section.  Please specify connection information in database_vufind_jdbc.""); System.exit(1); } try { vufindConn = DriverManager.getConnection(databaseConnectionInfo); } catch (SQLException e) { logger.error(""Could not connect to vufind database"", e); System.exit(1); }  String econtentDBConnectionInfo = Util.cleanIniValue(configIni.get(""Database"", ""database_econtent_jdbc"")); if (econtentDBConnectionInfo == null || econtentDBConnectionInfo.length() == 0) { logger.error(""Database connection information for eContent database not found in Database Section.  Please specify connection information as database_econtent_jdbc key.""); System.exit(1); } try { econtentConn = DriverManager.getConnection(econtentDBConnectionInfo); } catch (SQLException e) { logger.error(""Could not connect to econtent database"", e); System.exit(1); }  } "	0	0	1	0	1	0
"@Override public ListCell<Employee> call(ListView<Employee> p) {  ListCell<Employee> cell = new ListCell<Employee>() { @Override protected void updateItem(Employee t, boolean bln) { super.updateItem(t, bln); if (t != null) { setText(t.getId() + "" "" + t.getName() + "" "" + t.getPayRate()); } else{ listviewEmployees.setPlaceholder(new Label(""No Employees"")); } } }; return cell; } "	0	0	1	0	1	0
"private boolean evaluateComparator(int lhs) { switch (this.comparator) { case EQ: return lhs == this.rhs; case LE: return lhs <= this.rhs; case LT: return lhs < this.rhs; case GE: return lhs >= this.rhs; case GT: return lhs > this.rhs; default: throw new IllegalStateException(""Unknown pseudo-Boolean comparator""); } } "	0	0	0	1	0	0
"void setupEmbeddedFrame() { UIManager.getDefaults().put(""ScrollPane.ancestorInputMap"", new UIDefaults.LazyInputMap(new Object[]{})); JScrollPane sp = new JScrollPane(); sp.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0)); sp.getViewport().setBackground(Color.BLACK); InputMap im = sp.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW); int ctrlAltShiftMask = Event.SHIFT_MASK | Event.CTRL_MASK | Event.ALT_MASK; if (im != null) { im.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, ctrlAltShiftMask), ""unitScrollUp""); im.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, ctrlAltShiftMask), ""unitScrollDown""); im.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, ctrlAltShiftMask), ""unitScrollLeft""); im.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, ctrlAltShiftMask), ""unitScrollRight""); im.put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP, ctrlAltShiftMask), ""scrollUp""); im.put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN, ctrlAltShiftMask), ""scrollDown""); im.put(KeyStroke.getKeyStroke(KeyEvent.VK_HOME, ctrlAltShiftMask), ""scrollLeft""); im.put(KeyStroke.getKeyStroke(KeyEvent.VK_END, ctrlAltShiftMask), ""scrollRight""); } sp.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED); sp.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED); sp.getViewport().setView(desktop); viewer.getContentPane().removeAll(); viewer.add(sp); viewer.addFocusListener(new FocusAdapter() { public void focusGained(FocusEvent e) { if (desktop.isAncestorOf(viewer)) desktop.requestFocus(); } public void focusLost(FocusEvent e) { releaseDownKeys(); } }); viewer.validate(); desktop.requestFocus(); } "	0	0	1	0	1	0
public Map<String, AbstractIndex> getSegmentBTreeIfExists( AbsoluteTableIdentifier absoluteTableIdentifier, String segmentId) { Map<Integer, Map<String, AbstractIndex>> tableSegment = tableSegmentMap.get(absoluteTableIdentifier); if (null == tableSegment){ return null; } return tableSegment.get(segmentId); } 	1	0	1	1	0	0
public final void setComponentUuidNoRecompute(UUID componentUuid) { properties.put(ComponentProperty.COMPONENT_ID, componentUuid); } 	0	0	0	1	0	0
"public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(""Enter your name with Salutation::""); String inputName = scanner.nextLine(); inputName = inputName.trim();  String[] text = inputName.split("" "");  LOGGER.info(""Salutation::"" + text[0]); String name = """";  for (int i = 1; i < text.length; i++) { if (text[i].length() == 0) { name = name + text[i] + "" ""; }  } LOGGER.info(""Your name::"" + name); scanner.close(); } "	0	0	1	0	1	0
public String sign() throws BitcoinRpcException { return bitcoin.signRawTransaction(create()); } 	1	0	1	0	1	0
@Override public AsyncContext startAsync(final ServletRequest servletRequest, final ServletResponse servletResponse) throws IllegalStateException { synchronized (mutex) { return super.startAsync(servletRequest, servletResponse); } } 	0	0	1	1	0	0
public Class getAssociatedClass( String name ) { return (Class)associatedClasses.get( name ); } 	1	0	0	1	1	0
"@Test public void shouldDisplayWelcomeMessage() { WelcomeMessage message = new WelcomeMessage();  message.show();  assertEquals(""Welcome to the Bibliotica..!!\n"", outContent.toString()); } "	0	0	0	1	1	0
"@Override public String toString() { return new ToStringBuilder(this) .append(""id"", id) .append(""username"", username) .append(""password"", password) .append(""enabled"", enabled) .append(""name"", fullName) .append(""email"", email) .append(""phone"", phone) .toString(); } "	0	0	1	0	0	0
"public static TrackState extrapolateTrackUsingFieldMap(TrackState track, double startPositionX, double endPositionX, double stepSize, FieldMap fieldMap) {  // Start by extrapolating the track to the approximate point where the // fringe field begins. Hep3Vector currentPosition = TrackUtils.extrapolateHelixToXPlane(track, startPositionX); // System.out.println(""Track position at start of fringe: "" + // currentPosition.toString());  // Get the HelicalTrackFit object associated with the track. This will // be used to calculate the path length to the start of the fringe and // to find the initial momentum of the track. HelicalTrackFit helicalTrackFit = TrackUtils.getHTF(track);  // Calculate the path length to the start of the fringe field. double pathToStart = HelixUtils.PathToXPlane(helicalTrackFit, startPositionX, 0., 0).get(0);  // Get the momentum of the track and calculate the magnitude. The // momentum can be calculate using the track curvature and magnetic // field strength in the middle of the analyzing magnet. // FIXME: The position of the middle of the analyzing magnet should // be retrieved from the compact description. double bFieldY = fieldMap.getField(new BasicHep3Vector(0, 0, 500.0)).y(); double p = Math.abs(helicalTrackFit.p(bFieldY));  // Get a unit vector giving the track direction at the start of the of // the fringe field Hep3Vector helixDirection = HelixUtils.Direction(helicalTrackFit, pathToStart); // Calculate the momentum vector at the start of the fringe field Hep3Vector currentMomentum = VecOp.mult(p, helixDirection); // System.out.println(""Track momentum vector: "" + // currentMomentum.toString());  // Get the charge of the track. double q = Math.signum(track.getOmega()); // HACK: LCSim doesn't deal well with negative fields so they are // turned to positive for tracking purposes. As a result, // the charge calculated using the B-field, will be wrong // when the field is negative and needs to be flipped. if (bFieldY < 0) q = q * (-1);  // Swim the track through the B-field until the end point is reached. // The position of the track will be incremented according to the step // size up to ~90% of the final position. At this point, a finer // track size will be used. boolean stepSizeChange = false; while (currentPosition.x() < endPositionX) {  // The field map coordinates are in the detector frame so the // extrapolated track position needs to be transformed from the // track frame to detector. Hep3Vector currentPositionDet = CoordinateTransformations.transformVectorToDetector(currentPosition);  // Get the field at the current position along the track. bFieldY = fieldMap.getField(currentPositionDet).y(); // System.out.println(""Field along y (z in detector): "" + bField);  // Get a tracjectory (Helix or Line objects) created with the // track parameters at the current position. Trajectory trajectory = getTrajectory(currentMomentum, new org.lcsim.spacegeom.SpacePoint(currentPosition), q, bFieldY);  // Using the new trajectory, extrapolated the track by a step and // update the extrapolated position. currentPosition = trajectory.getPointAtDistance(stepSize); // System.out.println(""Current position: "" + ((Hep3Vector) // currentPosition).toString());  // Calculate the momentum vector at the new position. This will // be used when creating the trajectory that will be used to // extrapolate the track in the next iteration. currentMomentum = VecOp.mult(currentMomentum.magnitude(), trajectory.getUnitTangentAtLength(stepSize));  // If the position of the track along X (or z in the detector frame) // is at 90% of the total distance, reduce the step size. if (currentPosition.x() / endPositionX > .80 && !stepSizeChange) { stepSize /= 10; // System.out.println(""Changing step size: "" + stepSize); stepSizeChange = true; } }  // Calculate the track parameters at the Extrapolation point double doca = currentPosition.x() * currentPosition.x() + currentPosition.y() * currentPosition.y(); double phi = TrackUtils.calculatePhi(currentMomentum.x(), currentMomentum.y()); double curvature = TrackUtils.calculateCurvature(currentMomentum.magnitude(), q, bFieldY); double z = currentPosition.z(); double tanLambda = TrackUtils.calculateTanLambda(currentMomentum.z(), currentMomentum.magnitude());  double[] trackParameters = new double[5]; trackParameters[ParameterName.d0.ordinal()] = doca; trackParameters[ParameterName.phi0.ordinal()] = phi; trackParameters[ParameterName.omega.ordinal()] = curvature; trackParameters[ParameterName.z0.ordinal()] = z; trackParameters[ParameterName.tanLambda.ordinal()] = tanLambda;  // Create a track state at the extrapolation point TrackState trackState = new BaseTrackState(trackParameters, currentPosition.v(), track.getCovMatrix(), TrackState.AtCalorimeter, bFieldY);  return trackState; } "	0	0	0	0	0	1
"public void setEdgeNotifications(String EdgeTitle, String EdgeText, int EdgeSession, int DayofWeek) { Calendar calendar = Calendar.getInstance(); calendar.setTimeInMillis(System.currentTimeMillis()); int edgeMin1 = 43 - notifyMinutes; int edgeMin2; int edgeHour2; if (notifyMinutes > 9){ int x = notifyMinutes - 9; edgeMin2 = 60 - x; edgeHour2 = 0; } else { edgeMin2 = 9 - notifyMinutes; edgeHour2 = 1; } if (EdgeSession == 1) { calendar.set(Calendar.HOUR, 0); calendar.set(Calendar.MINUTE, edgeMin1); } if (EdgeSession == 2) { calendar.set(Calendar.HOUR, edgeHour2); calendar.set(Calendar.MINUTE, edgeMin2); } calendar.set(Calendar.SECOND, 1); calendar.set(Calendar.AM_PM, Calendar.PM);  SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context1); SharedPreferences.Editor editor = prefs.edit(); editor.putString(""TITLE"", EdgeTitle); editor.putString(""TEXT"", EdgeText); editor.apply(); Log.d(""Notification set"", EdgeTitle); Log.d(""!helper!"", ""notification set""); Log.d(""edgeclasstime"", (calendar.getTimeInMillis() - System.currentTimeMillis()) + """"); if ((calendar.getTimeInMillis() - System.currentTimeMillis()) > 0 && NotificationEnabled) { Intent intent1 = new Intent(context1, EdgeReceiver.class); PendingIntent pendingIntent = PendingIntent.getBroadcast(context1, MainActivity.REQUEST_CODE_EDGE, intent1, PendingIntent.FLAG_UPDATE_CURRENT); AlarmManager am = (AlarmManager) context1.getSystemService(ALARM_SERVICE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) { am.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), pendingIntent); } else { am.setExact(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), pendingIntent); }  /* ComponentName component = new ComponentName(this, EdgeReceiver.class); JobInfo.Builder builder = new JobInfo.Builder(REQUEST_CODE_EDGE, component) .setMinimumLatency(calendar.getTimeInMillis() - System.currentTimeMillis()) .setPersisted(true) .setOverrideDeadline((calendar.getTimeInMillis() - System.currentTimeMillis()) + 60000); JobScheduler jobScheduler = (JobScheduler) this.getSystemService(Context.JOB_SCHEDULER_SERVICE); if (calendar.getTimeInMillis() - System.currentTimeMillis() > 0){ jobScheduler.schedule(builder.build()); } */  } } "	0	0	0	0	0	1
public static byte[] toByteArray(File file){ InputStream inputStream = getFileInputStream(file); BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream); ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();  try{ byte[] bytes = new byte[IOConstants.DEFAULT_BUFFER_LENGTH]; int j; while ((j = bufferedInputStream.read(bytes)) != -1){ byteArrayOutputStream.write(bytes, 0, j); } byteArrayOutputStream.flush(); return byteArrayOutputStream.toByteArray(); }catch (IOException e){ throw new UncheckedIOException(e); }finally{ // 为避免内存泄漏，Stream的Close是必须的.即使中途发生了异常，也必须Close， IOUtils.closeQuietly(byteArrayOutputStream); IOUtils.closeQuietly(bufferedInputStream); } } 	1	0	1	1	1	0
"@Override public WebDriverSessionLevel load(Class<?> clss) throws Exception { PtlWebDriverStrategy strategy = clss.getAnnotation(PtlWebDriverStrategy.class); if (strategy != null) { switch (strategy.sessionLevel()) { case GLOBAL: LOG.debug(""[Get WebDriver] reuse level: {} (annotated, {})"", WebDriverSessionLevel.GLOBAL, clss.getName()); return WebDriverSessionLevel.GLOBAL;  case TEST_CASE: LOG.debug(""[Get WebDriver] reuse level: {} (annotated, {})"", WebDriverSessionLevel.TEST_CASE, clss.getName()); return WebDriverSessionLevel.TEST_CASE;  case TEST_CLASS: LOG.debug(""[Get WebDriver] reuse level: {} (annotated, {})"", WebDriverSessionLevel.TEST_CLASS, clss.getName()); return WebDriverSessionLevel.TEST_CLASS; default: // 未到達コード return WebDriverSessionLevel.TEST_CLASS; } }  LOG.debug(""[Get WebDriver] reuse level: {} (config, {})"", configSessionLevel, clss); return configSessionLevel; } "	1	0	0	0	1	0
@Override public void onClick(View v) { float score = computeScore(); saveDrawing(v); drawView.setEnabled(true); started = false; callback.onFinish(score, 10000-duration); } 	1	1	1	0	0	0
@Override public void visitMethodInsn(final int opcode, final String owner, final String name, final String desc) { Referrer referrer = context.toReferrer();  Class<?> clazz = BytecodeUtil.taggedTypeNameToClass(owner); if ( isPseudoClass(clazz) ) { return; } referenceVisitor.onClassReference(referrer, BytecodeUtil.rawType(clazz));  if (opcode == Opcode.INVOKESPECIAL && isConstructor(name)) { onConstructorCall(referrer, clazz, name, desc); } else if (opcode == Opcode.INVOKESPECIAL || opcode == Opcode.INVOKEINTERFACE || opcode == Opcode.INVOKEVIRTUAL || opcode == Opcode.INVOKESTATIC) { onMethodCall(referrer, clazz, name, desc); } } 	0	0	1	1	1	0
private void showOpenCloseConfirmDialog(final boolean reopen) { @StringRes int messageResId = reopen ? R.string.reopen_issue_confirm : R.string.close_issue_confirm; @StringRes int buttonResId = reopen ? R.string.pull_request_reopen : R.string.pull_request_reopen; new AlertDialog.Builder(this) .setMessage(messageResId) .setIconAttribute(android.R.attr.alertDialogIcon) .setCancelable(false) .setPositiveButton(buttonResId, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { new IssueOpenCloseTask(reopen).schedule(); } }) .setNegativeButton(R.string.cancel, null) .show(); } 	0	0	1	0	0	0
"public SurvivalAnalysis analyze(SurvivalAnalysis analysis) {  analysis.setResults(new ArrayList<Result>()); for (val id : analysis.getEntitySetIds()) { val filter = new FiltersParam(String.format(DONOR_FILTER, id)); val query = builder() .filters(filter.get()) .from(0) .size(20000) .sort(""survivalTime"") .order(""asc"") .build();  val result = donorRepository.findAllCentric(query); val intervals = compute(result.getHits().getHits());  analysis.getResults().add(analysis.new Result(id, intervals)); }  return analysis; } "	1	0	1	1	0	0
"@Override public Setting.Builder<T> aliases(Collection<String> aliases) { checkNotNull(aliases, ""aliases"");  this.aliases = aliases.stream() .filter(alias -> { checkNotNull(alias, ""null alias""); return true; }) .filter(alias -> { checkArgument(Setting.ID_PATTERN.matcher(alias).matches(), ""alias does not match setting id pattern""); return true; }) .map(alias -> alias.toLowerCase(Locale.ENGLISH)) .collect(GuavaCollectors.toImmutableSet()); return this; } "	0	0	1	1	0	0
@Override public Setting.Builder<T> reset() { this.id = null; this.aliases = Collections.emptySet(); this.type = null; this.name = null; this.defaultValue = null; return this; } 	0	0	1	1	0	0
@Override public Setting.Builder<T> defaultValue(@Nullable T defaultValue) { this.defaultValue = defaultValue; return this; } 	0	0	1	1	0	0
"@Override public Setting.Builder<T> aliases(String... aliases) { checkNotNull(aliases, ""aliases""); return this.aliases(Arrays.asList(aliases)); } "	0	0	0	1	0	0
"public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) { final Event event = new Event(""transfer"", Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {})); List<EventValues> valueList = extractEventParameters(event,transactionReceipt); ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size()); for(EventValues eventValues : valueList) { TransferEventResponse typedResponse = new TransferEventResponse(); typedResponse._from = (Address)eventValues.getIndexedValues().get(0); typedResponse._to = (Address)eventValues.getIndexedValues().get(1); typedResponse._value = (Uint256)eventValues.getNonIndexedValues().get(0); responses.add(typedResponse); } return responses; } "	0	0	1	1	0	0
"@GET @Consumes(""application/json"") @Produces(""application/json"") @SuppressWarnings(""unchecked"") @Path(""/show"") // rest/users/show?email={email}&password={password} public ResponseEntity show(@FormParam(""email"") final String email, @FormParam(""password"") final String password) { User user = null; try { user = this.getService().show(email, password); } catch (Exception e) { return new ResponseEntity(e.getMessage(), HttpStatus.NOT_FOUND); } return new ResponseEntity(user, HttpStatus.OK); } "	1	0	1	1	1	0
"private void disconnect(){ statusLabel.setText(""Disconecting from "" + ultra_ip + ""...""); connectToUltra = false; } "	0	0	1	0	1	0
"private static SortedSet<Method> getSortedMethods(final Class<?> type) { SortedSet<Method> methods = new TreeSet<Method>(METHOD_COMPARATOR);  final Method[] declaredMethods = type.getDeclaredMethods();  if (declaredMethods.length > 256) { throw new IllegalArgumentException(""Can't proxy that many methods on a single instance!""); }  methods.addAll(asList(declaredMethods)); if (methods.size() != declaredMethods.length) { throw new AssertionError(""Ouch... looks like that didn't work!""); } return methods; } "	0	0	1	1	0	0
"public static AuthMethod getAuthMethod() { return AuthMethod.valueOf(getProperty(""authentication.method"", ""DB"").toUpperCase()); } "	0	0	1	1	1	0
"@Override public String getRegisterURL(boolean absolute) { return getRootURL(absolute) + ""/tb-ui/register""; } "	0	0	1	0	1	0
private void init(List<P> parents) { mParents = parents == null ? Collections.<P>emptyList() : parents; mItems = ExpandableAdapters.generateItems(parents); } 	0	0	1	1	1	0
@Override public List<Map<String, String>> getParentCollection(final String collectionGooruOid, String gooruUid, boolean reverse) { final List<Map<String, String>> parentNode = new ArrayList<Map<String, String>>(); getCollection(collectionGooruOid, gooruUid, parentNode); if (reverse) { return parentNode.size() > 0 ? Lists.reverse(parentNode) : parentNode; } else { return parentNode; } } 	0	0	1	1	0	0
private CollectionItem setCollectionItemMoreData(CollectionItem collectionItem, final String rootNodeId) { if (collectionItem.getResource() != null) { if (collectionItem.getResource().getResourceType().getName().equals(ResourceType.Type.ASSESSMENT_QUESTION.getType())) { collectionItem.setQuestionInfo(this.getAssessmentService().getQuestion(collectionItem.getResource().getGooruOid())); } if (collectionItem.getResource().getResourceType().getName().equals(ResourceType.Type.TEXTBOOK.getType())) { final Textbook textbook = this.getResourceRepository().findTextbookByContentGooruId(collectionItem.getResource().getGooruOid()); if (textbook != null) { collectionItem.setDocumentid(textbook.getDocumentId()); collectionItem.setDocumentkey(textbook.getDocumentKey()); } }  collectionItem.setStandards(this.getStandards(collectionItem.getResource().getTaxonomySet(), false, rootNodeId)); }  return collectionItem; } 	0	0	1	1	0	0
private Errors validateUpdateCollection(Collection collection) throws Exception { final Errors errors = new BindException(collection, COLLECTION); rejectIfNull(errors, collection, COLLECTION, GL0006, generateErrorMessage(GL0006, COLLECTION)); return errors; } 	0	0	0	1	0	0
@Override public List<Collection> getMyCollection(Map<String, String> filters, final User user) { return getCollectionRepository().getMyCollection(filters, user); } 	0	0	1	1	0	0
@Override public CollectionItem getCollectionItem(String collectionItemId, final String includeAdditionalInfo, User user, final String rootNodeId) {  CollectionItem collectionItem = this.getCollectionRepository().getCollectionItemById(collectionItemId); rejectIfNull(collectionItem, GL0056, _COLLECTION_ITEM); if (includeAdditionalInfo.equalsIgnoreCase(TRUE)) { collectionItem = this.setCollectionItemMoreData(collectionItem, rootNodeId); } return collectionItem; } 	0	0	0	1	0	0
private Map<String, Object> setSkill(Code code) { Map<String, Object> skill = new HashMap<String, Object>(); skill.put(CODE_ID, code.getCodeId()); skill.put(LABEL, code.getLabel()); return skill; } 	0	0	0	1	0	0
"public void updatePreview() { try { if (new java.net.URL(fileField.getText()).getPath() != """") header.setIcon(getPreviewIcon(new java.io.File( new java.net.URL(fileField.getText()).getPath()))); } catch (Exception ex) { ex.printStackTrace(); } } "	0	0	1	0	1	0
"@Before public void checkTestFile() throws Exception { String testFolder = AlertsImportManagerTest.class.getResource(""/"").getPath(); File fAlerts = new File(new File(testFolder, ""hawkular-alerts""), ""alerts-data.json""); importManager = new AlertsImportManager(fAlerts); } "	0	0	1	0	1	0
"@Override public @Nonnull Collection<FirewallRule> getRules(@Nonnull String firewallId) throws InternalException, CloudException { APITrace.begin(getProvider(), ""Firewall.getRules""); try {  NovaMethod method = new NovaMethod((NovaOpenStack)getProvider()); JSONObject ob = method.getServers(""/os-security-groups"", firewallId, false);  if( ob == null ) { return null; } try { if( ob.has(""security_group"") ) { JSONObject json = ob.getJSONObject(""security_group"");  if( !json.has(""rules"") ) { return Collections.emptyList(); } ArrayList<FirewallRule> rules = new ArrayList<FirewallRule>(); JSONArray arr = json.getJSONArray(""rules""); Iterable<Firewall> myFirewalls = null;  for( int i=0; i<arr.length(); i++ ) { JSONObject rule = arr.getJSONObject(i); int startPort = -1, endPort = -1; Protocol protocol = null; String ruleId = null;  if( rule.has(""id"") ) { ruleId = rule.getString(""id""); } if( ruleId == null ) { continue; } RuleTarget sourceEndpoint = null;  if( rule.has(""ip_range"") ) { JSONObject range = rule.getJSONObject(""ip_range"");  if( range.has(""cidr"") ) { sourceEndpoint = RuleTarget.getCIDR(range.getString(""cidr"")); } } if( rule.has(""group"") ) { JSONObject g = rule.getJSONObject(""group""); String id = (g.has(""id"") ? g.getString(""id"") : null);  if( id != null ) { sourceEndpoint = RuleTarget.getGlobal(id); } else { String o = (g.has(""tenant_id"") ? g.getString(""tenant_id"") : null);  if( getTenantId().equals(o) ) { String n = (g.has(""name"") ? g.getString(""name"") : null);  if( n != null ) { if( myFirewalls == null ) { myFirewalls = list(); } for( Firewall fw : myFirewalls ) { if( fw.getName().equals(n) ) { sourceEndpoint = RuleTarget.getGlobal(fw.getProviderFirewallId()); break; } }  } } } } if( sourceEndpoint == null ) { continue; }  if( rule.has(""from_port"") ) { startPort = rule.getInt(""from_port""); } if( rule.has(""to_port"") ) { endPort = rule.getInt(""to_port""); } if( startPort == -1 && endPort != -1 ) { startPort = endPort; } else if( endPort == -1 && startPort != -1 ) { endPort = startPort; } if( startPort > endPort ) { int s = startPort;  startPort = endPort; endPort = s; } if( rule.has(""ip_protocol"") ) { String p = null;  if( !rule.isNull(""ip_protocol"") ) { rule.getString(""ip_protocol""); }  if( p == null || p.equalsIgnoreCase(""null"") ) { protocol = Protocol.ANY; } else { protocol = Protocol.valueOf(p.toUpperCase()); } } if( protocol == null ) { protocol = Protocol.TCP; }  rules.add(FirewallRule.getInstance(ruleId, firewallId, sourceEndpoint, Direction.INGRESS, protocol, Permission.ALLOW, RuleTarget.getGlobal(firewallId), startPort, endPort)); } return rules; } } catch( JSONException e ) { logger.error(""getRules(): Unable to identify expected values in JSON: "" + e.getMessage()); throw new CloudException(CloudErrorType.COMMUNICATION, 200, ""invalidJson"", ""Missing JSON element for security groups""); } return null; } finally { APITrace.end(); } } "	0	0	1	0	0	0
"public ResultSet retrieve(int first, int last) throws Exception { if (first >= 0 && last < first) { throw new Exception(""Invalid range: last could not be lower than first!""); }  if (Filter != null && Filter.contains(""%SEARCH"")) { throw new Exception(""Full text search not implemented yet!""); }  ResultSet retrs = null; Connection conn = null; try { conn = getConnection(); String sql;  LinkedHashSet<String> fields = new LinkedHashSet<String>(); if ((this.FieldSelection == null || this.FieldSelection.getFieldNames().size() == 0) && (Scope == null || Scope.equals(""""))) { fields.add(""*""); }  if (Scope != null) { for (char s : Scope.toCharArray()) { String scope = String.valueOf(s); if (Scopes.containsKey(scope)) fields.addAll(Scopes.get(scope)); } }  if (FieldSelection != null) { fields.addAll(FieldSelection.getFieldNames()); }  StringBuffer sqlfields = new StringBuffer(""""); if (fields.contains(""*"")) sqlfields.append(""*""); else { for (String field : fields) { sqlfields.append("",""+DBQuoteString+field+DBQuoteString); } sqlfields = new StringBuffer(sqlfields.substring(1)); }  if (retrieveSql != null && !retrieveSql.equals("""")) sql = ""SELECT ""+sqlfields+"" FROM (""+retrieveSql+"")""; else sql = ""SELECT ""+sqlfields+"" FROM ""+DBQuoteString+Table+DBQuoteString;  if (Filter != null && Filter.getFieldNames().size() > 0) { StringBuffer wh = new StringBuffer(""""); for (String f : Filter.getFieldNames()) { wh.append("" AND ""+DBQuoteString+f+DBQuoteString+""=?""); } if (wh.length()>0) sql+="" WHERE ""+wh.substring(5); }  if (first >= 0 && last >= first) { switch(DBType) { case ""BASIS DBMS"": sql+="" LIMIT ""+(first+1)+"",""+(last - first + 1); break; case ""MYSQL"": sql+="" LIMIT ""+first+"",""+(last - first + 1); break; case ""MICROSOFT SQL SERVER"": //OFFSET is available since MS SQL Server 2012 (version 11) int dbVersion = Integer.valueOf(conn.getMetaData().getDatabaseProductVersion().replaceAll(""(\\d+)\\..*"", ""$1"")); if (dbVersion >= 11) sql=""SELECT * FROM (""+sql+"") T ORDER BY (SELECT NULL) OFFSET ""+first+"" ROWS FETCH NEXT ""+(last - first + 1)+"" ROWS ONLY""; else throw new Exception(""Pagination is not supported or not implemented with the ""+DBType+"" (version ""+dbVersion+"") database.""); break; default: throw new Exception(""Pagination is not supported or not implemented with the ""+DBType+"" database.""); } }  PreparedStatement prep = conn.prepareStatement(sql);  if (Filter != null) { setSqlParams(prep, Filter, Filter.getFieldNames()); }  java.sql.ResultSet rs = prep.executeQuery(); retrs = new ResultSet(); retrs.populate(rs, true); } catch (SQLException ex) { throw ex; } finally { if (Conn == null && conn != null) { try { conn.close(); } catch (SQLException e) { e.printStackTrace(); } } }   // Set the generated meta attributes to the first record if (retrs.size() > 0) { DataRow dr = retrs.get(0); for (String field : AttributesRecord.getFieldNames()) { dr.setFieldAttributes(field, AttributesRecord.getFieldAttributes(field)); } }  return retrs; } "	0	0	0	0	0	1
public CompletionStage<Result> searchForm() { Http.Context ctx = ctx(); Form<SearchItemForm> form = formFactory.form(SearchItemForm.class).bindFromRequest(ctx.request());  return loadNav(Optional.empty()).thenApply(nav -> ok(views.html.searchItem.render(form, Optional.empty(), nav)) ); } 	0	1	0	0	0	0
"private String pathInForeground(final String path, final byte[] data) throws Exception { TimeTrace trace = client.getZookeeperClient().startTracer(""CreateBuilderImpl-Foreground"");  final AtomicBoolean firstTime = new AtomicBoolean(true); String returnPath = RetryLoop.callWithRetry ( client.getZookeeperClient(), new Callable<String>() { @Override public String call() throws Exception { boolean localFirstTime = firstTime.getAndSet(false);  String createdPath = null; if ( !localFirstTime && doProtected ) { debugForceFindProtectedNode = false; createdPath = findProtectedNodeInForeground(path); }  if ( createdPath == null ) { try { createdPath = client.getZooKeeper().create(path, data, acling.getAclList(path), createMode); } catch ( KeeperException.NoNodeException e ) { if ( createParentsIfNeeded ) { ZKPaths.mkdirs(client.getZooKeeper(), path, false, client.getAclProvider()); createdPath = client.getZooKeeper().create(path, data, acling.getAclList(path), createMode); } else { throw e; } } }  if ( failNextCreateForTesting ) { failNextCreateForTesting = false; throw new KeeperException.ConnectionLossException(); } return createdPath; } } );  trace.commit(); return returnPath; } "	0	0	1	0	1	0
private void setupShader(SwitchableShaders shader, EnumStellarPass pass, AtmosphereModel model) { if(pass != EnumStellarPass.DominateScatter) { if(this.isFrameBufferEnabled) { shader.switchShader(0); shader.bindShader(); shader.getCurrent().getField(dominationMapField).setInteger(1); } else { shader.switchShader(1); shader.bindShader(); shader.getCurrent().getField(skyBrightnessField).setDouble(this.skyBrightness); }  if(pass.hasTexture) shader.getField(defaultTexture).setInteger(0);  shader.getField(dominationScaleField).setDouble(this.dominationScale); } else { if(this.isFrameBufferEnabled) { shader.switchShader(0); } else { shader.switchShader(1); }  shader.bindShader();  cameraHeight.setDouble(model.getHeight()); outerRadius.setDouble(model.getOuterRadius()); innerRadius.setDouble(model.getInnerRadius()); nSamples.setInteger(20);  exposure.setDouble(2.0); depthToFogFactor.setDouble(100.0 * Math.exp(model.getHeight()) * Math.exp(-20.0 * this.rainStrengthFactor));  Vector3 vec = new Vector3(model.getSkyExtRed(), model.getSkyExtGreen(), model.getSkyExtBlue()); extinctionFactor.setVector3(vec.scale(0.9 - 2.0 * Math.log(this.weatherFactor))); gScattering.setDouble(-0.9 + this.rainStrengthFactor);  double mult = 1.2;  rayleighFactor.setDouble4( mult * 4 * model.getSkyColorRed() * model.getSkyDispRed() / 0.56, mult * 8 * model.getSkyColorGreen() * model.getSkyDispGreen() / 0.65, mult * 16 * model.getSkyColorBlue() * model.getSkyDispBlue(), 1.0);  mieFactor.setDouble4( mult * 0.1 * (1.0f + 5 * this.rainStrengthFactor) * model.getSkyDispRed(), mult * 0.2 * (1.0f + 5 * this.rainStrengthFactor) * model.getSkyDispGreen(), mult * 0.3 * (1.0f + 5 * this.rainStrengthFactor) * model.getSkyDispBlue(), 1.0); } } 	0	1	0	0	0	0
"public User getAdmin() { final String adminStr = settingsService.getSetting(ServerSetting.admin); if (StringUtils.isEmpty(adminStr)) { throw new IllegalArgumentException(""Server is missing admin setting!""); } else { return new UserModel.Builder() .name(CommonFactory.createName(adminStr, EntityType.user)) .id(adminStr) .email(adminStr)  .parent(adminStr) .isAdmin(true).create();  } } "	0	0	1	0	0	0
"void toggleShowByDate_actionPerformed(ActionEvent e) { //TODO throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates. } "	0	0	1	0	0	0
"@Override public void iAmReceived(RemoteDevice d) { LOGGER.info(""iAm recieved: "" + d); discovered.put(d.getInstanceNumber(), d); Objects.getDaemonThreadPool().schedule(new Runnable() { @Override public void run() { deviceDiscovered(d); } }, 0, TimeUnit.MILLISECONDS); } "	0	0	0	1	0	0
"@RequestMapping( value = ""/api/org/{orgMrn}/service"", method = RequestMethod.POST, produces = ""application/json;charset=UTF-8"") @ResponseBody @PreAuthorize(""hasRole('SERVICE_ADMIN') and @accessControlUtil.hasAccessToOrg(#orgMrn)"") public ResponseEntity<Service> createService(HttpServletRequest request, @PathVariable String orgMrn, @Valid @RequestBody Service input, BindingResult bindingResult) throws McBasicRestException { ValidateUtil.hasErrors(bindingResult, request); Organization org = this.organizationService.getOrganizationByMrn(orgMrn); if (org != null) { // Check that the entity being created belongs to the organization if (!MrnUtil.getOrgShortNameFromOrgMrn(orgMrn).equals(MrnUtil.getOrgShortNameFromEntityMrn(input.getMrn()))) { throw new McBasicRestException(HttpStatus.BAD_REQUEST, MCIdRegConstants.MISSING_RIGHTS, request.getServletPath()); } input.setIdOrganization(org.getId()); // Setup a keycloak client for the service if needed if (input.getOidcAccessType() != null && !input.getOidcAccessType().trim().isEmpty()) { // Check if the redirect uri is set if access type is ""bearer-only"" if (!""bearer-only"".equals(input.getOidcAccessType()) && (input.getOidcRedirectUri() == null || input.getOidcRedirectUri().trim().isEmpty())) { throw new McBasicRestException(HttpStatus.BAD_REQUEST, MCIdRegConstants.OIDC_MISSING_REDIRECT_URL, request.getServletPath()); } keycloakAU.init(KeycloakAdminUtil.BROKER_INSTANCE); input.generateOidcClientId(); try { String clientSecret = keycloakAU.createClient(input.getOidcClientId(), input.getOidcAccessType(), input.getOidcRedirectUri()); if (""confidential"".equals(input.getOidcAccessType())) { input.setOidcClientSecret(clientSecret); } else { input.setOidcClientSecret(null); } } catch(IOException e) { throw new McBasicRestException(HttpStatus.INTERNAL_SERVER_ERROR, MCIdRegConstants.ERROR_CREATING_KC_CLIENT, request.getServletPath()); } catch (DuplicatedKeycloakEntry dke) { throw new McBasicRestException(HttpStatus.CONFLICT, dke.getErrorMessage(), request.getServletPath()); } } else { input.setOidcAccessType(null); input.setOidcClientId(null); input.setOidcClientSecret(null); input.setOidcRedirectUri(null); } try { Service newService = this.entityService.save(input); return new ResponseEntity<>(newService, HttpStatus.OK); } catch (DataIntegrityViolationException e) { // If save to DB failed, remove the client from keycloak if it was created. if (input.getOidcAccessType() != null && !input.getOidcAccessType().trim().isEmpty()) { keycloakAU.deleteClient(input.getMrn()); } throw new McBasicRestException(HttpStatus.CONFLICT, e.getRootCause().getMessage(), request.getServletPath()); } } else { throw new McBasicRestException(HttpStatus.NOT_FOUND, MCIdRegConstants.ORG_NOT_FOUND, request.getServletPath()); } } "	1	0	0	0	0	0
"public static void saveOntologyFile() {  System.out.println(Ontology.getOntologyInstance()); OntologyWriter.writeOntology(Ontology.getOntologyInstance(), fileResourceManager.getFilePath(""parser/test-1.owl"")); } "	0	0	0	1	1	0
"@Test public void testEventsDataFrame() throws Exception { String testCollection = ""testEventsDataFrame""; try { // load test data from json file to index into Solr Dataset eventsDF = sparkSession.read().json(""src/test/resources/test-data/events.json""); eventsDF = eventsDF.select(""id"", ""count_l"", ""doc_id_s"", ""flag_s"", ""session_id_s"", ""type_s"", ""tz_timestamp_txt"", ""user_id_s"", ""`params.title_s`"");  deleteCollection(testCollection); String confName = ""testConfig""; File confDir = new File(""src/test/resources/conf""); int numShards = 1; int replicationFactor = 1; createCollection(testCollection, numShards, replicationFactor, numShards /* maxShardsPerNode */, confName, confDir); validateDataFrameStoreLoad(sparkSession, testCollection, eventsDF);  // Validate that SQL works with fields that have dots { Map<String, String> options = new HashMap<String, String>(); options.put(SOLR_ZK_HOST_PARAM(), cluster.getZkServer().getZkAddress()); options.put(SOLR_COLLECTION_PARAM(), testCollection);  Dataset df = sparkSession.read().format(""solr"").options(options).load(); df.registerTempTable(""events""); Row[] row = sparkSession.sql(""SELECT * FROM events"").take(1);  sparkSession.sql(""SELECT `params.title_s` from events"").take(2); } } finally { deleteCollection(testCollection); } } "	0	0	1	0	1	0
"private String getClsData(PrintWriter pw, OWLClass superCls, int level, int maxLevel, boolean withAttributes, String attrid)  {  if (interrupted) return ""Cancelled""; if (maxLevel != -1 && level > maxLevel) return """";  if (superCls == null) { return """"; }  String tabString = """"; for (int i = 0; i < level; i++) { tabString += ""\t""; }  try { if (withAttributes) { classList.add(""""); }  String pt = null; Optional<String> supLabel = tab.getRDFSLabel(superCls); if (supLabel.isPresent()) { pt = supLabel.get(); } else { pt = superCls.getIRI().getShortForm(); }   if (withoutAttrsWithId) { classList.add(tabString + pt + "" ("" + superCls.getIRI().getShortForm() + "")"");  } else { classList.add(tabString + pt);  }   if (withAttributes && (alreadySeen.get(superCls) == null)) { getSlots(superCls, tabString); }   writeToFile(); classList.clear();  iCtr++; // System.out.println(""foo         foo              foo "" + iCtr);  final int peg = iCtr; updateStatus(peg); if (Thread.interrupted()) { throw new InterruptedException(); } Thread.sleep(300);  alreadySeen.put(superCls, superCls);  List<OWLClass> subclasses = tab.getDirectSubClasses(superCls);    Collections.sort(subclasses, new Comparator<OWLClass>() {  public int compare(OWLClass o1, OWLClass o2) { // single quotes are used by Protege-OWL when the browser // text has space in it, but they are displayed without the // quotes // this messes up the sort order String s1 = o1.getIRI().getShortForm(); String s2 = o2.getIRI().getShortForm(); if (s1.startsWith(""'"")) { s1 = s1.substring(1, s1.length() - 1); } if (s2.startsWith(""'"")) { s2 = s2.substring(1, s2.length() - 1); } return s1.compareTo(s2); }  });    level++; for (OWLClass sub : subclasses) { if (sub.getIRI().getShortForm().compareTo(superCls.getIRI().getShortForm()) != 0) { if (alreadySeen.get(sub) != null) {  } else { reportTextArea.append(""adding next level\n"");  getClsData(pw, sub, level, maxLevel, withAttributes, attrid);  } } }  }  catch (InterruptedException e) { updateStatus(0); return ""Interrupted""; }  catch (Exception e) { return ""Error""; }  return ""All Done"";  } "	0	0	1	0	0	0
@Override public boolean isMatch(Command request, Command response) { if (((ZclCommand) request).getTransactionId() != null) { final byte transactionId = ((ZclCommand) request).getTransactionId(); return new Byte(transactionId).equals(((ZclCommand) response).getTransactionId()); } else { return false; } } 	0	0	1	1	1	0
private void promoteUngroupedPwo(String groupid, PwoDevice ungroupedPwo) { String ungroupedPwoId = getUngroupedPwoId(ungroupedPwo.top());  mDisplayList.remove(ungroupedPwo); mUngroupedPwoDevices.remove(ungroupedPwoId);  PwoGroup pwoGroup = new PwoGroup(); pwoGroup.promotePwo(ungroupedPwo); mPwoGroups.put(groupid, pwoGroup); mDisplayList.add(pwoGroup); } 	0	0	1	0	1	0
private String trimPropertyName(String propName) { if ((propName.length()) > (NhincConstants.CUSTOM_HTTP_HEADERS.length() + 1)) { return propName.substring(NhincConstants.CUSTOM_HTTP_HEADERS.length() + 1).trim(); } else { return null; } } 	0	0	0	1	0	0
"private static String formatFromLine(List<Activation> activations, int n) { return ""\tfrom "" + formatCallerLine(activations, n); } "	0	0	0	1	0	0
@Override public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) { // Try to grow up if (worldIn.isAirBlock(pos.up())) { int height; BlockPos ground = pos; for (height = 1; worldIn.getBlockState(ground = ground.down()).getBlock() == this; ++height);  if (height < MAX_HEIGHT) {// && worldIn.rand.nextInt(worldIn.getBlockState(ground).getBlock().isFertile(worldIn, ground) ? GROWTH_RATE_FERTILE : GROWTH_RATE_INFERTILE) == 0) { worldIn.setBlockState(pos.up(), getDefaultState()); } }  super.updateTick(worldIn, pos, state, rand); } 	0	0	1	0	1	0
"public ModelAndView getView(WorkflowTaskForm form, BindException errors) throws Exception { return new JspView(""/org/labkey/workflow/view/workflowTask.jsp"", new WorkflowTask(WorkflowManager.get().getTask(form.getTaskId())), errors); } "	0	0	1	1	1	0
"@RequestMapping(value = ""contact/remove"", method = RequestMethod.POST) public void remove(@RequestBody List<Contact> contacts) { LOGGER.info(""remove contacts. obtained {} contacts, wicht not remove"", contacts.size());  contactService.deleteIdNotIn(fetchIdOfContact(contacts)); } "	0	0	1	0	1	0
private void appendRemoveButtonCmd(final String id, final List<FinalizableCommand> commandsList) { final FinalizableCommand command = myToolWindowsPane.createRemoveButtonCmd(id, myWindowManager.getCommandProcessor()); commandsList.add(command); } 	0	0	1	0	1	0
public void setStripesOverlayed(boolean stripesOverlayed) { myStripesOverlayed = stripesOverlayed; updateToolStripesVisibility(); } 	0	0	1	0	0	0
"private void parseInitDirective(PageDefinition pgdef, ProcessingInstruction pi, Map<String, String> params) throws Exception { final String clsnm = params.remove(""class""); final String zsrc = params.remove(""zscript"");  final Map<String, String> args = new LinkedHashMap<String, String>(params); if (clsnm == null) { if (zsrc == null) throw new UiException(message(""Either the class or zscript attribute must be specified"", pi));  checkZScriptEnabled(pi.getLocator()); ZScript zs = null; final String zslang = pgdef.getZScriptLanguage(); if (zsrc.indexOf(""${"") < 0) { final URL url = getLocator().getResource(zsrc); if (url != null) zs = new ZScript(zslang, url); //Bug 2929887: defer the error message since it might not be required } if (zs == null) zs = new ZScript(pgdef.getEvaluatorRef(), zslang, zsrc, getLocator());  pgdef.addInitiatorInfo(new InitiatorInfo(new ZScriptInitiator(zs), args)); } else { if (zsrc != null) throw new UiException(message(""You cannot specify both class and zscript"", pi));  pgdef.addInitiatorInfo(new InitiatorInfo(clsnm, args)); } } "	0	0	1	0	1	0
public ListView<FeasibilityBox> getFeasibilityBoxWrapper() { return feasibilityBoxWrapper; } 	0	0	1	0	0	0
"private void performMedianAlignment(Mat[] imagesToAlignList, int inputIndex) { ProgressDialogHandler.getInstance().showProcessDialog(""Processing"", ""Performing exposure alignment"", 50.0f); //perform exposure alignment MedianAlignmentOperator medianAlignmentOperator = new MedianAlignmentOperator(imagesToAlignList, inputIndex); medianAlignmentOperator.perform();  //MatMemory.releaseAll(imagesToAlignList, true); } "	0	0	0	1	0	0
"public Cursor getFileCursor() { // This gets all of the org file nodes return db.rawQuery(""SELECT data.* FROM orgdata data JOIN"" + ""(SELECT f.node_id FROM files f) file on file.node_id = data._id ORDER BY data.name ASC;"", null);  //		Cursor cursor = db.query(""files"", new String[] { ""node_id"" }, null, //				null, null, null, ""name ASC""); // //		cursor.moveToFirst(); // //		Cursor[] nodes = new Cursor[cursor.getCount()]; // //		for(int i = 0; i < cursor.getCount(); i++) { //			Long id = cursor.getLong(cursor.getColumnIndex(""node_id"")); //			Cursor node = db.query(""orgdata"", nodeFields, ""_id=?"", //					new String[] { id.toString() }, null, null, null); //			nodes[i] = node; //			cursor.moveToNext(); //		} // //		cursor.close(); // //        if (nodes.length > 0) { //            MergeCursor cursors = new MergeCursor(nodes); //            return cursors; //        } //        else { //            return null; //        } } "	0	0	1	1	0	0
"@Test public void testInvalidIdentityProviderHint() { this.driver.navigate().to(""http://localhost:8081/test-app?kc_idp_hint=invalid-idp-id"");  assertTrue(this.driver.getCurrentUrl().startsWith(""http://localhost:8081/auth/realms/realm-with-broker/protocol/openid-connect/auth""));  assertEquals(""Could not find an identity provider with the identifier [invalid-idp-id]."", this.driver.findElement(By.className(""instruction"")).getText()); } "	0	0	1	1	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (firstTime) { firstTime = false; initSearchActivity(); } AccommodationRecyclerViewAdapter adapter = new AccommodationRecyclerViewAdapter(Accommodation.getAccommodations(), ObjectActivity.class); new SearchActivityView(this, adapter); new SearchActivityController(this, adapter,AdvancedSearchActivity.class); adapter.refresh(); try { initializeNavigationListener(); } catch (RuntimeException e) { e.printStackTrace(); } } 	0	0	1	1	1	0
"public boolean hasAmmo(Player player, ItemStack gun) {  Inventory inv = player.getInventory(); String ammo = gunsConfig.getString(gun.getDurability() + "".ammo"");  if ( gun.equals(orbital) ) { return true; }  for (ItemStack item : inv) {  if (item != null && item.hasItemMeta()) {  ItemMeta im = item.getItemMeta();  if (!im.equals(null) && im.hasLore()) {  List<String> lore = im.getLore();  if ( lore.toString().contains(""Ammunition | "" + ammo) ) { //Ammo was found if (item.getAmount() > 1) { item.setAmount(item.getAmount() - 1); } else { inv.remove(item); } return true; }  }  }  }  //Ammo was not found return false;  } "	0	0	1	0	1	0
"@GET @Produces(""application/json"") @Path(""/useCaseDiffInfos"") public Response getUseCaseDiffInfos(@PathParam(""baseBranchName"") final String baseBranchName, @PathParam(""baseBuildName"") final String baseBuildName, @PathParam(""comparisonName"") final String comparisonName) { LOGGER.info(""REQUEST: getUseCaseDiffInfos("" + baseBranchName + "", "" + baseBranchName + "", "" + comparisonName + "")"");  final BuildIdentifier buildIdentifier = ScenarioDocuBuildsManager.INSTANCE.resolveBranchAndBuildAliases( baseBranchName, baseBuildName);  try { final List<UseCaseDiffInfo> useCaseDiffInfos = diffReader.loadUseCaseDiffInfos(buildIdentifier.getBranchName(), buildIdentifier.getBuildName(), comparisonName); return Response.ok(getUseCaseDiffInfoMap(useCaseDiffInfos), MediaType.APPLICATION_JSON).build(); } catch (final ResourceNotFoundException e) { LOGGER.warn(""Unable to get use case diff infos"", e); return Response.noContent().build(); } catch (final Throwable e) { LOGGER.warn(""Unable to get use case diff infos"", e); return Response.serverError().build(); } } "	0	0	1	0	0	0
private List<PartUsageLink> createComponents(String workspaceId, List<PartUsageLinkDTO> pComponents) throws EntityNotFoundException, EntityAlreadyExistsException, AccessRightException, NotAllowedException, CreationException, UserNotActiveException{  List<PartUsageLink> components = new ArrayList<>(); for(PartUsageLinkDTO partUsageLinkDTO : pComponents){  PartMaster component = findOrCreatePartMaster(workspaceId, partUsageLinkDTO.getComponent());  if(component != null){ PartUsageLink partUsageLink = new PartUsageLink();  List<CADInstance> cadInstances = new ArrayList<>(); List<PartSubstituteLink> partSubstituteLinks = new ArrayList<>();  if( partUsageLinkDTO.getCadInstances() != null){ for(CADInstanceDTO cadInstanceDTO : partUsageLinkDTO.getCadInstances()){ cadInstances.add(new CADInstance( cadInstanceDTO.getTx(), cadInstanceDTO.getTy(), cadInstanceDTO.getTz(), cadInstanceDTO.getRx(), cadInstanceDTO.getRy(), cadInstanceDTO.getRz())); } }else if(partUsageLinkDTO.getUnit()==null || partUsageLinkDTO.getUnit().isEmpty()){ for(double i = 0 ; i < partUsageLinkDTO.getAmount() ; i ++){ cadInstances.add(new CADInstance(0, 0, 0, 0, 0, 0)); } }else{ cadInstances.add(new CADInstance(0, 0, 0, 0, 0, 0)); } for(PartSubstituteLinkDTO substituteLinkDTO:partUsageLinkDTO.getSubstitutes()){ PartMaster substitute = findOrCreatePartMaster(workspaceId, substituteLinkDTO.getSubstitute()); if(substitute != null) { PartSubstituteLink partSubstituteLink = mapper.map(substituteLinkDTO, PartSubstituteLink.class); List<CADInstance> subCADInstances = new ArrayList<>(); if( substituteLinkDTO.getCadInstances() != null){ for(CADInstanceDTO cadInstanceDTO : substituteLinkDTO.getCadInstances()){ subCADInstances.add(new CADInstance( cadInstanceDTO.getTx(), cadInstanceDTO.getTy(), cadInstanceDTO.getTz(), cadInstanceDTO.getRx(), cadInstanceDTO.getRy(), cadInstanceDTO.getRz())); } }else if(substituteLinkDTO.getUnit()==null || substituteLinkDTO.getUnit().isEmpty()){ for(double i = 0 ; i < substituteLinkDTO.getAmount() ; i ++){ subCADInstances.add(new CADInstance(0, 0, 0, 0, 0, 0)); } }else{ cadInstances.add(new CADInstance(0, 0, 0, 0, 0, 0)); } partSubstituteLink.setCadInstances(subCADInstances); partSubstituteLink.setSubstitute(substitute); partSubstituteLinks.add(partSubstituteLink); } } partUsageLink.setComponent(component); partUsageLink.setAmount(partUsageLinkDTO.getAmount()); partUsageLink.setComment(partUsageLinkDTO.getComment()); partUsageLink.setCadInstances(cadInstances); partUsageLink.setUnit(partUsageLinkDTO.getUnit()); partUsageLink.setSubstitutes(partSubstituteLinks); components.add(partUsageLink); }  }  return components;  } 	1	0	0	0	0	0
public void closeTCP() throws IOException{ clientSocket.close(); } 	0	0	1	0	1	0
"private static void initializePlugin(final StagemonitorPlugin stagemonitorPlugin, String pluginName) { logger.info(""Initializing plugin {}"", pluginName); try { stagemonitorPlugin.initializePlugin(new StagemonitorPlugin.InitArguments(metric2Registry, getConfiguration(), measurementSession)); stagemonitorPlugin.initializePlugin(metric2Registry, getConfiguration()); pathsOfWidgetMetricTabPlugins.addAll(stagemonitorPlugin.getPathsOfWidgetMetricTabPlugins()); pathsOfWidgetTabPlugins.addAll(stagemonitorPlugin.getPathsOfWidgetTabPlugins()); stagemonitorPlugin.registerWidgetTabPlugins(new StagemonitorPlugin.WidgetTabPluginsRegistry(pathsOfWidgetTabPlugins)); stagemonitorPlugin.registerWidgetMetricTabPlugins(new StagemonitorPlugin.WidgetMetricTabPluginsRegistry(pathsOfWidgetTabPlugins)); onShutdownActions.add(new Runnable() { public void run() { stagemonitorPlugin.onShutDown(); } }); } catch (Exception e) { logger.warn(""Error while initializing plugin "" + pluginName + "" (this exception is ignored)"", e); } } "	0	0	1	0	1	0
public void init() { if (isInitialized) { return; }  isInitialized = true;  client = controller.getClient(coapPath);  node.getListener().setOnListHandler(event -> { handles++; checkHandles(); });  node.getListener().setOnListClosedHandler(event -> { handles--; checkHandles(); });  node.getListener().setOnSubscribeHandler(event -> { handles++; checkHandles(); });  node.getListener().setOnUnsubscribeHandler(event -> { handles--; checkHandles(); }); } 	0	0	1	0	1	0
public MainEvent getMainEvent(EventProducerNode epn, int start, int end) { double max = 0.0; MainEvent maj = new MainEvent(Void, max); for (String state : getEvents()) { double amp = 0.0; // Compute the total presence of the state for (int i = start; i < end; i++) amp += proportions.get(epn).get(i).get(state);  // Divide by duration amp /= (end - start); if (amp > max) { maj = new MainEvent(state, amp); max = amp; } } return maj; } 	0	0	1	0	1	0
private int hashCodeImpl() { return this.entrySetImpl().hashCode(); } 	0	0	1	0	1	0
"private static List<EngineIndependentProcess> createProcesses() { FileTasks.deleteDirectory(ERRORS_DIR); FileTasks.mkdirs(ERRORS_DIR);  List<EngineIndependentProcess> result = getProcesses();  for (EngineIndependentProcess process : result) { // update fileName String processFileName = process.getProcess().getFileName().toString(); if (processFileName.startsWith(""IBR_"")) { XMLTasks.updatesNameAndNamespaceOfRootElement(IMPROVED_BACKDOOR_ROBUSTNESS.getProcess(), process.getProcess(), processFileName); } else if (processFileName.startsWith(""BR_"")) { XMLTasks.updatesNameAndNamespaceOfRootElement(BACKDOOR_ROBUSTNESS.getProcess(), process.getProcess(), processFileName); } }  return result;// make sure the happy path is the first test } "	0	0	1	0	1	0
"public static void skipJarScanning(File platformHome) { String fileFullPath = platformHome.getAbsolutePath() + ""/../../config/"" + TOMCAT_CATALINA_PROPERTIES_FILE; File catalinaFile = new File(fileFullPath); List<String> jarNameList = new ArrayList<>(); if (catalinaFile.exists()) { try { Set<ExtensionHolder> exts = getAllExtensionsForPlatform(platformHome.getAbsolutePath()); if (debug) Activator.log(""""+exts); for (ExtensionHolder ext : exts) { File extDir = new File(ext.getPath()); skipJarsByExtension(jarNameList, extDir); }  Collections.sort(jarNameList);  StringBuilder sb = new StringBuilder(); for (String jar : jarNameList) { if (debug) Activator.log(jar); sb.append("",\\\\"").append(""\n"").append(jar); } sb.append(""\n"").append(""\n"");  String content = new String(Files.readAllBytes(Paths.get(catalinaFile.getAbsolutePath())));  Pattern regex = Pattern.compile(REGEX_TO_REPLACE, Pattern.DOTALL); Matcher regexMatcher = regex.matcher(content); if (regexMatcher.find()) { if (debug) Activator.log(regexMatcher.group(0)); content = regexMatcher.replaceAll(REPLACEMENT_PREFIX + sb.toString()); }  PrintWriter writer = new PrintWriter(catalinaFile, ""UTF-8""); writer.println(content); writer.close(); } catch (Exception e) { throw new IllegalStateException(""Failed to access the server.xml file at: "" + fileFullPath); } } else { throw new IllegalStateException(fileFullPath + "" doesn't exist.""); } } "	0	0	1	0	1	0
"public static void useMultiThread(File platformHome) { String fileFullPath = platformHome.getAbsolutePath() + ""/../../config/"" + TOMCAT_SERVER_XML_FILE; File serverXmlFile = new File(fileFullPath); if (serverXmlFile.exists()) { try { String content = new String(Files.readAllBytes(Paths.get(serverXmlFile.getAbsolutePath()))); String toRemove1 = ""startStopThreads=\""[\\d]*\""""; String toRemove2 = ""startStopThreads=\'[\\d]*\'""; String toReplace = ""<Host""; String replacement = ""<Host startStopThreads=\""0\""""; //The removal is to avoid adding duplicate configurations in case it was already manually configured content = content.replaceAll(toRemove1, """"); content = content.replaceAll(toRemove2, """"); content = content.replaceAll(toReplace, replacement);  PrintWriter writer = new PrintWriter(serverXmlFile, ""UTF-8""); writer.println(content); writer.close(); } catch (Exception e) { throw new IllegalStateException(""Failed to access the server.xml file at: "" + fileFullPath); } } else { throw new IllegalStateException(fileFullPath + "" doesn't exist.""); } } "	0	0	1	0	1	0
"public void switchSeasonsToEpisodes() {  getFragmentManager().beginTransaction() .setCustomAnimations(R.animator.slide_in_right, R.animator.slide_out_left, 0, 0) .replace(R.id.fragmentContainerShow, new EpisodesFragment()) .commit();  visibleFragment = ""episodes""; } "	0	0	1	1	0	0
"@Override public void onDestroy() { LogManager.e(TAG, ""onDestroy()""); if (android.os.Build.VERSION.SDK_INT < 18) { LogManager.w(TAG, ""Not supported prior to API 18.""); return; } bluetoothCrashResolver.stop(); LogManager.i(TAG, ""onDestroy called.  stopping scanning""); handler.removeCallbacksAndMessages(null); mCycledScanner.stop(); monitoringStatus.stopStatusPreservationOnProcessDestruction(); } "	0	0	1	0	0	0
public static Hashtable<String, String> maskAxis2ConfigSensitiveParameters( Hashtable<String, String> sensitiveParamsTable) {  Hashtable<String, String> maskedParamsTable = sensitiveParamsTable; if (maskedParamsTable.get(JMSConstants.PARAM_JMS_PASSWORD) != null) { maskedParamsTable.put(JMSConstants.PARAM_JMS_PASSWORD, MASKING_STRING); } if (sensitiveParamsTable.get(JMSConstants.PARAM_NAMING_SECURITY_CREDENTIALS) != null) { maskedParamsTable.put(JMSConstants.PARAM_NAMING_SECURITY_CREDENTIALS, MASKING_STRING); }  return maskedParamsTable; } 	1	0	1	1	1	0
private Npc getJailer() { for (Npc jailer : Npcs.getNearest(201)) { if (jailer != null && jailer.getDef() != null) { return jailer; } }  return null; } 	0	0	1	0	1	0
"@Test public void testCheckAccessTokenFormatTooShortToken() { final String shortToken = ""123456789abc""; assertFalse(shortToken.length() == 40); assertFalse(AccessToken.isValidFormat(shortToken)); } "	0	0	1	0	1	0
@Test public void testCheckAccessTokenFormatWithValidToken() { assertEquals(40, VALID_TOKEN.length()); assertTrue(AccessToken.isValidFormat(VALID_TOKEN)); } 	0	0	0	1	1	0
"@BeforeGroups(groups = {""live""}) public void setupClient() { super.setupClient(); final VirtualBoxManager manager = getManager(); Function<IMachine, Image> iMachineToImage = new IMachineToImage(manager, osVersionMap); adapter = new VirtualBoxComputeServiceAdapter(manager, new JustProvider(ImmutableSet.<String>of(), provider, URI.create(endpoint)), iMachineToImage); } "	0	0	1	1	0	0
"public long setDoubleValue(long flags, double value) { if (Double.isNaN(value)) throw new IllegalArgumentException(""Value cannot be NaN"");  // scale value long tmpValue = Math.round(value / factor); checkValue(Math.round(tmpValue * factor)); tmpValue <<= shift;  // clear value bits flags &= ~mask;  // set value return flags | tmpValue; } "	0	0	1	0	1	0
"@Test public void shouldDeleteUser() { User user = new User(""Michal""); userRepository.save(user); userRepository.delete(user);  assertFalse(userRepository.findAll().iterator().hasNext()); assertFalse(userRepository.findAll(1).iterator().hasNext()); assertFalse(userRepository.exists(user.getId())); assertEquals(0, userRepository.count()); assertNull(userRepository.findOne(user.getId())); assertNull(userRepository.findOne(user.getId(), 10));  try (Transaction tx = getGraphDatabaseService().beginTx()) { assertFalse(GlobalGraphOperations.at(getGraphDatabaseService()).getAllNodes().iterator().hasNext()); tx.success(); } } "	0	0	1	1	1	0
"protected List<ValidationException> testSegment(Segment segment, SegmentType profile) { List<ValidationException> exList = new ArrayList<ValidationException>(); List<Integer> allowedFields = new ArrayList<Integer>(); int i = 1; for (SegmentType.Field field : profile.getFields()) { UsageInfo usage = new UsageInfo(field); // only test a field in detail if it isn't X if (!usage.disallowed()) { allowedFields.add(i);  // see which instances have content try { List<Type> nonEmptyFields = nonEmpty(segment.getField(i)); exList.addAll(testCardinality(nonEmptyFields.size(), usage));  // test field instances with content if (validateChildren) { for (Type type : nonEmptyFields) { boolean escape = true; // escape field value when checking length if (profile.getName().equalsIgnoreCase(""MSH"") && i < 3) { escape = false; } List<ValidationException> childExceptions = testField(type, field, escape); for (ValidationException ex : childExceptions) { ex.setFieldPosition(i); } exList.addAll(childExceptions); } } } catch (HL7Exception he) { profileNotHL7Compliant(exList, FIELD_NOT_FOUND, i); } } ++i; } // complain about X fields with content exList.addAll(checkForExtraFields(segment, allowedFields));  for (ValidationException ex : exList) { ex.setSegmentName(profile.getName()); } return exList; } "	0	0	1	0	1	0
@MetaDataRetriever public MetaData getMetaData(final MetaDataKey key) throws SomeException { DefaultMetaDataBuilder builder = new DefaultMetaDataBuilder(); return new DefaultMetaData(builder.build()); } 	1	1	0	1	0	0
"private void updateBasicInfo() throws Exception { // String firstName = (String) updatedProfile.getProperty(Profile.FIRST_NAME); String lastName = (String) updatedProfile.getProperty(Profile.LAST_NAME); String email = (String) updatedProfile.getProperty(Profile.EMAIL); String fullName = firstName + "" "" + lastName;  boolean hasUpdate = false;  // User foundUser = organizationService.getUserHandler().findUserByName(this.userName); if(foundUser == null) { return; }  // if (!foundUser.getFirstName().equals(firstName)) { foundUser.setFirstName(firstName); hasUpdate = true; } if (!foundUser.getLastName().equals(lastName)) { foundUser.setLastName(lastName); hasUpdate = true; } if (!foundUser.getEmail().equals(email)) { foundUser.setEmail(email); hasUpdate = true; }  if (!foundUser.getDisplayName().equals(fullName)) { foundUser.setDisplayName(fullName); hasUpdate = true; }  // if (hasUpdate) { organizationService.getUserHandler().saveUser(foundUser, true); } } "	1	0	1	0	1	0
public double convertVolume2Slider(double x) { return 20D*(x - .5); } 	0	0	0	1	0	0
"private synchronized void cleanUpTelemetryData() { double currentDate = (new Date()).getTime() / TIMESTAMP_DIVIDER; List<String> endpoints = new ArrayList<>(this.latencies.keySet()); for (String endpoint: endpoints) { List<Map<String, Double>> outdatedLatencies = new ArrayList<>(); List<Map<String, Double>> operationLatencies = this.latencies.get(endpoint); for (Map<String, Double> latencyInformation: operationLatencies) { if (currentDate - latencyInformation.get(""d"") > MAXIMUM_LATENCY_DATA_AGE) { outdatedLatencies.add(latencyInformation); } } if (outdatedLatencies.size() > 0) { operationLatencies.removeAll(outdatedLatencies); } if (operationLatencies.size() == 0) { this.latencies.remove(endpoint); } } } "	0	0	1	1	1	0
"public synchronized void storeLatency(long latency, PNOperationType type) { if (type != PNOperationType.PNSubscribeOperation && latency > 0) { String endpointName = TelemetryManager.endpointNameForOperation(type); if (endpointName != null) { double storeDate = (new Date()).getTime() / TIMESTAMP_DIVIDER;  List<Map<String, Double>> operationLatencies = this.latencies.get(endpointName); if (operationLatencies == null) { operationLatencies = new ArrayList<>(); this.latencies.put(endpointName, operationLatencies); }  Map<String, Double> latencyEntry = new HashMap<>(); latencyEntry.put(""d"", storeDate); latencyEntry.put(""l"",  ((double) latency / TIMESTAMP_DIVIDER)); operationLatencies.add(latencyEntry); } } } "	0	0	1	1	1	0
"@Override public Tuple filter(final ExecutionContext ctx, final FunctionDefinition fun) { Objects.requireNonNull(fun); if (fun.getArgNumber() == 1) { return Tuple.create(Arrays.stream(arrayContents).map(Constant<Object>::new).filter(elem -> { final FunctionCall fc = new FunctionCall(fun, Lists.newArrayList(elem)); fc.eval(ctx); final Object outcome = fc.getAnnotation(); if (outcome instanceof Boolean) { return (Boolean) outcome; } else { throw new IllegalArgumentException(""Filtering function must return a boolean.""); } }).map(AnnotatedTree::getAnnotation).toArray()); } throw new IllegalArgumentException(""Mapping Function must take one parameter.""); } "	0	0	1	0	0	0
"@Override public Object reduce(final ExecutionContext ctx, final Object defVal, final FunctionDefinition fun) { Objects.requireNonNull(fun); if (fun.getArgNumber() == 2) { return Arrays.stream(arrayContents).reduce((first, second) -> { final FunctionCall fc = new FunctionCall(fun, Lists.newArrayList(new Constant<>(first), new Constant<>(second))); fc.eval(ctx); return fc.getAnnotation(); }).orElse(defVal); } throw new IllegalArgumentException(""Reducing Function must take two parameters.""); } "	0	0	0	1	0	0
private synchronized void notifyListeners(UPBMessage message) { for (Listener l : listeners) { l.messageReceived(message); } } 	0	0	1	0	1	0
"private void copyInferenceRules(String oldElementId, String newElementId) throws SQLException { String sql = ""insert into INFERENCE_RULE (DATAELEM_ID, RULE, TARGET_ELEM_ID) select ?, RULE, TARGET_ELEM_ID from INFERENCE_RULE where DATAELEM_ID = ?""; PreparedStatement stmt = null;  try { stmt = this.conn.prepareStatement(sql); stmt.setInt(1, Integer.valueOf(newElementId)); stmt.setInt(2, Integer.valueOf(oldElementId)); stmt.executeUpdate(); } finally { if (stmt != null) { stmt.close(); } } } "	0	0	1	0	1	0
@Override public void run() { // Check for every next tab if the input is valid for (int i = oldIdx; i <= newIdx; i++) { if (i != 0) { // i != 0 because import cannot receive data controllers.get(i).setData(controllers.get(i - 1).getData()); } if (!controllers.get(i).validateInput(true)) { // If the input is not valid, stop where it went wrong tabPane.getSelectionModel().select(i); break; } } getPrimaryStage().getScene().setCursor(Cursor.DEFAULT); } 	1	0	0	0	1	0
"public List<Domain> getAllDomains() { List<Domain> domains; try { domains = Arrays.asList(AdminReference.getAdminService().getAllDomains()); } catch (AdminException e) { SilverTrace.error(module, ""AuthenticationService"", ""Problem to retrieve all the domains"", e); domains = Collections.EMPTY_LIST; } return domains; } "	0	0	1	0	1	0
@Override public Authentication get(String token) { Element elem = tokens.get(token); return (Authentication) ((elem != null) ? elem.getObjectValue() : null); } 	1	1	1	1	0	0
"private void loadVideos(ContentResolver cr, int page, @NonNull final IMediaTaskCallback<VideoMedia> callback) { final List<VideoMedia> videoMedias = new ArrayList<>(); final Cursor cursor = cr.query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, MEDIA_COL, null, null, MediaStore.Images.Media.DATE_MODIFIED + "" desc"" + "" LIMIT "" + page * IMediaTask.PAGE_LIMIT + "" , "" + IMediaTask.PAGE_LIMIT); try { int count = 0; if (cursor != null && cursor.moveToFirst()) { count = cursor.getCount(); do { String data = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media.DATA)); String id = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media._ID)); String title = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media.TITLE)); String type = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media.MIME_TYPE)); String size = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media.SIZE)); String date = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media.DATE_TAKEN)); String duration = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media.DURATION)); VideoMedia video = new VideoMedia.Builder(id, data).setTitle(title).setDuration(duration) .setSize(size).setDataTaken(date).setMimeType(type).build(); videoMedias.add(video);  } while (cursor.moveToNext() && !cursor.isLast() && !cursor.isLast()); postMedias(callback, videoMedias, count); } else { postMedias(callback, videoMedias, 0); } } finally { if (cursor != null) { cursor.close(); } }  } "	1	0	1	1	0	0
@Override public void close() { connection.getParser().map(Parser::getCallbackManager).ifPresent(this::removeCallbacks); connection.getWindowModel().getEventBus().unsubscribe(this); super.close(); } 	1	0	0	0	1	0
protected void setEquippedBackpack(ItemStack stack) { this.equippedBackpack = stack; } 	0	0	0	1	0	0
"@Override public final void onDisable() { disableModules(); try { onPluginDisable(); } catch (Exception e) { warn(DARK_RED + ""Failed to disable module "" + getName()); e.printStackTrace(); } } "	0	0	1	0	1	0
"@Test public void testEmptyMap() throws IOException, ClassNotFoundException { JobDataMap jdm = new JobDataMap(); validateSerializedForm(jdm, COMPARATOR, expand(""serializedforms/JobDataMapSerializationTest.testEmptyMap.{?}.ser"", ""JDK16"", ""JDK17"")); } "	0	0	1	0	1	0
@Override public OClass setClusterSelection(OClusterSelectionStrategy clusterSelection) { return setClusterSelection(clusterSelection.getName()); } 	0	0	0	1	0	0
"@SideOnly(Side.CLIENT) @SubscribeEvent() public void renderCoresampleInfo(RenderGameOverlayEvent.Post event) { if (ClientUtils.mc().thePlayer!=null && event.getType() == RenderGameOverlayEvent.ElementType.TEXT) { EntityPlayer player = ClientUtils.mc().thePlayer;  if (ClientUtils.mc().objectMouseOver!=null) { boolean hammer = player.getHeldItem(EnumHand.MAIN_HAND) != null && Utils.isHammer(player.getHeldItem(EnumHand.MAIN_HAND)); RayTraceResult mop = ClientUtils.mc().objectMouseOver; if (mop!=null && mop.getBlockPos()!=null) { TileEntity tileEntity = player.worldObj.getTileEntity(mop.getBlockPos()); if (tileEntity instanceof TileEntityCoresample) { IBlockOverlayText overlayBlock = (IBlockOverlayText) tileEntity; String[] text = overlayBlock.getOverlayText(ClientUtils.mc().thePlayer, mop, hammer); boolean useNixie = overlayBlock.useNixieFont(ClientUtils.mc().thePlayer, mop); ItemStack coresample = ((TileEntityCoresample) tileEntity).coresample; if (ItemNBTHelper.hasKey(coresample, ""oil"") && text != null && text.length > 0) { String resName = ItemNBTHelper.hasKey(coresample, ""resType"") ? ItemNBTHelper.getString(coresample, ""resType"") : ""oil""; int amnt = ItemNBTHelper.getInt(coresample, ""oil""); FontRenderer font = useNixie?ClientProxy.nixieFontOptional:ClientUtils.font(); int col = (useNixie&& IEConfig.nixietubeFont)?Lib.colour_nixieTubeText:0xffffff; int i = text.length;  ReservoirType res = null; for (ReservoirType type : PumpjackHandler.reservoirList.keySet()) { if (resName.equals(type.name)) { res = type; } }  String s = I18n.format(""chat.immersivepetroleum.info.coresample.noOil""); if (amnt > 0) { int est = (amnt / 1000) * 1000; String test = new DecimalFormat(""#,###.##"").format(est); Fluid f = FluidRegistry.getFluid(res.fluid); String fluidName = f.getLocalizedName(new FluidStack(f, 1));   s = I18n.format(""chat.immersivepetroleum.info.coresample.oil"", test, fluidName); } else if (res != null && res.replenishRate > 0) { Fluid f = FluidRegistry.getFluid(res.fluid); String fluidName = f.getLocalizedName(new FluidStack(f, 1)); s = I18n.format(""chat.immersivepetroleum.info.coresample.oilRep"", res.replenishRate, fluidName); }  font.drawString(s, event.getResolution().getScaledWidth()/2+8, event.getResolution().getScaledHeight()/2+8+i*font.FONT_HEIGHT, col, true);   } } } } } } "	0	0	1	1	0	0
"public void testWrite() throws Exception { JsonpRepresentation jsonpRepresentation = new JsonpRepresentation( CALLBACK, SUCCESS_OK, new JsonRepresentation(JSON_SAMPLE));  ByteArrayOutputStream out = new ByteArrayOutputStream();  jsonpRepresentation.write(out);  String expected = ""callback({status:200,body:{'attribute': value}});"";  Assert.assertEquals(expected, out.toString()); } "	0	0	1	1	0	0
"public static InptData getDirectInputInfor() {  InptData inptData = new InptData(); inptData.setPackingPrintNumOrgn(1); inptData.setPackingPrintNumCopy(2); inptData.setEngPackingPrintNumOrgn(3); inptData.setEngPackingPrintNumCopy(4); inptData.setTmpPackingPrintNumOrgn(5); inptData.setTmpPackingPrintNumCopy(6); inptData.setInvoicePrintNumOrgn(7); inptData.setInvoicePrintNumCopy(8); inptData.setBoxNumberSeq(""BoxNumberSeq""); inptData.setShippingNumber(123); inptData.setMcCd(""McCd""); inptData.setCustCd(""CustCd""); inptData.setSupplierCd(""SupplierCd""); inptData.setGlobalNo(""GlobalNo""); inptData.setChildSeq(213); inptData.setDataDiv(""DataDiv""); inptData.setReceivableMcCd(""ReceivableMcCd""); inptData.setNtvDeptNameAbb(""NtvDeptNameAbb""); inptData.setPlantDeptTel(""PlantDeptTel""); inptData.setPackingFlg(""PackingFlg""); inptData.setPackingRetainFlg(""PackingRetainFlg""); inptData.setEngPackingRetainFlg(""EngPackingRetainFlg""); inptData.setTmpPackingRetainFlg(""TmpPackingRetainFlg""); inptData.setInvoiceFlg(""InvoiceFlg""); inptData.setInvoiceRetainFlg(""InvoiceRetainFlg""); inptData.setLabelEarlyDiv(""LabelEarlyDiv""); inptData.setGrp(""Grp""); inptData.setGrp(""Grp""); inptData.setNtv2CompanyName(""Ntv2CompanyName""); inptData.setNtvBusinessInstruct1J(""NtvBusinessInstruct1J""); inptData.setNtvBusinessInstruct2J(""NtvBusinessInstruct2J""); inptData.setNtvBusinessInstruct3J(""NtvBusinessInstruct3J""); inptData.setNtvBusinessInstruct4J(""NtvBusinessInstruct4J""); inptData.setNtvBusinessInstruct5J(""NtvBusinessInstruct5J""); inptData.setNtvPackingInstruct1J(""NtvPackingInstruct1J""); inptData.setNtvPackingInstruct2J(""NtvPackingInstruct2J""); inptData.setNtvPackingInstruct3J(""NtvPackingInstruct3J""); inptData.setNtvPackingInstruct4J(""NtvPackingInstruct4J""); inptData.setNtvPackingInstruct5J(""NtvPackingInstruct5J""); inptData.setShipToDeliAttention(""ShipToDeliAttention""); inptData.setShipToDeliDept(""ShipToDeliDept""); inptData.setNtvShipToName2(""NtvShipToName2""); inptData.setAutomobileStandardCd(""AutomobileStandardCd""); inptData.setStorkChargeApplyDiv(""StorkChargeApplyDiv""); inptData.setDeliNoteNoMjp(321); inptData.setTotalSAmountMjp(222); inptData.setOriginalDeliNoteNo(""OriginalDeliNoteNo""); inptData.setW1DeliAttentionCd(""W1DeliAttentionCd"");  return inptData; } "	1	1	1	1	0	0
public int getAncestorMarginBottom() { return (mParent != null ? mParent.getAncestorMarginBottom() : 0) + mMarginBottom; } 	0	0	1	0	1	0
public int getAncestorPaddingTop() { return (mParent != null ? mParent.getAncestorPaddingTop() : 0) + mPaddingTop; } 	0	0	1	0	1	0
public int getAncestorPaddingBottom() { return (mParent != null ? mParent.getAncestorPaddingBottom() : 0) + mPaddingBottom; } 	0	0	1	0	1	0
"@RequestMapping(value = ""/search/{text}"") @JsonView(FlatView.class) public List<Long> findRandom(@PathVariable(value = ""text"") String text) throws IOException { List<Production> productions = productionRepository.findAllValidated(); logger.info(""I search productions with "" + text); return productions .stream() .filter(p -> { logger.info(String.format(""compare %s avec %s"", p.getContent().toLowerCase(), text.toLowerCase())); return p.getContent()!=null && p.getContent().toLowerCase().contains(text.toLowerCase()); }) .map(p -> p.getQrcode().getId()) .collect(Collectors.toList());  } "	0	0	1	0	1	0
"private CloseableHttpResponse execute(final HttpUriRequest request) throws IOException {  AuthCache authCache = new BasicAuthCache(); authCache.put(HttpHost.create(GITHUB_API_URL), new BasicScheme()); // Add AuthCache to the execution context final HttpClientContext context = HttpClientContext.create(); request.setHeader(new BasicHeader(HttpHeaders.ACCEPT_ENCODING, ""UTF-8""));  String cacheKey = request.getURI().toString(); String value = cache.getProperty(cacheKey); if (request.getMethod() == HttpGet.METHOD_NAME && value != null) { request.addHeader(""If-None-Match"", value); }  final CloseableHttpResponse response = httpClient.execute(request, context); int responseStatus = response.getStatusLine().getStatusCode();  //System.out.println(""Next page for ""+request.getURI()+"": "" + nextLink(response)); if (responseStatus == HttpURLConnection.HTTP_NOT_MODIFIED) { System.out.println(""url "" + request.getURI() + "" is not modified""); } else { if (responseStatus != HttpURLConnection.HTTP_OK && responseStatus != HttpURLConnection.HTTP_NO_CONTENT) { System.err.printf(""Could not %s to %s %n\t%s%n"", request.getMethod(), request.getURI(), response.getStatusLine()); } if (request.getMethod() == HttpGet.METHOD_NAME) { String eTag = response.getFirstHeader(""ETag"").getValue(); if (eTag == null) { System.out.println(""ETag is not defined for uri: "" + request.getURI()); } else { cache.put(cacheKey, eTag); cacheDirty.compareAndSet(false, true); } } }  String remaining = response.getFirstHeader(""X-RateLimit-Remaining"").getValue(); System.out.println(""X-RateLimit-Remaining: "" + remaining);  return response; } "	0	0	1	0	1	0
public static InputStream getResourceAsStream(final ClassLoader loader, final Class<?> originClass, final String name) { try { if (bundleReferenceClass != null && originClass != null && bundleReferenceClass.isInstance(ReflectionHelper.class.getClassLoader())) { final Bundle bundle = FrameworkUtil.getBundle(originClass); final URL resourceUrl = (bundle != null) ? bundle.getEntry(name) : null; if (resourceUrl != null) { return resourceUrl.openStream(); } } } catch (IOException ex) { // ignore } return loader.getResourceAsStream(name); } 	0	0	1	0	0	0
public static Type[] getTypeArguments(Type type) { if (!(type instanceof ParameterizedType)) { return null; }  return ((ParameterizedType) type).getActualTypeArguments(); } 	0	0	1	1	0	0
"@SuppressWarnings(""unchecked"") public static <T> Class<T> erasure(Type type) { return eraser.visit(type); } "	0	0	0	1	0	0
public static PrivilegedAction<Method> findMethodOnClassPA(final Class<?> c, final Method m) { return new PrivilegedAction<Method>() { @Override public Method run() { try { return c.getMethod(m.getName(), m.getParameterTypes()); } catch (NoSuchMethodException nsme) { for (final Method _m : c.getMethods()) { if (_m.getName().equals(m.getName()) && _m.getParameterTypes().length == m.getParameterTypes().length) { if (compareParameterTypes(m.getGenericParameterTypes(), _m.getGenericParameterTypes())) { return _m; } } } return null; } } }; } 	0	0	1	0	0	0
@Override protected Class onClass(Class clazz) { return clazz; } 	0	0	1	1	0	0
@Override protected Class onWildcard(WildcardType type) { return visit(type.getUpperBounds()[0]); } 	0	0	0	1	0	0
@Override public boolean checkHasMaterials() { if (mode.equals(CompactorMode.REPAIR)) { return getAllInputs().allIn(getInventory()); } else { if (getInputs().isEmpty()) { return false; } else { return true; } } } 	1	0	0	0	1	0
public static int getCpForPokemonLevel(int attack, int defense, int stamina, float level) { float pokemonLevel = Math.min(40.5f, level); float cpMultiplier = LEVEL_CPMULTIPLIER.get(pokemonLevel); return (int) ((double) attack * Math.pow((double) defense, 0.5D) * Math.pow((double) stamina, 0.5D) * Math.pow((double) cpMultiplier, 2.0D) / 10.0D); } 	0	1	0	0	0	0
"@Override protected void processRequest(final HttpServletRequest request, final HttpServletResponse response, final ServletContext application, final HttpSession session) throws IOException, ServletException { Connection connection = null; try { final DataSource datasource = ApplicationAttributes.getDataSource(application); connection = datasource.getConnection();  final ChallengeDescription challengeDescription = ApplicationAttributes.getChallengeDescription(application); final int tournamentID = Queries.getCurrentTournament(connection); final Tournament tournament = Tournament.findTournamentByID(connection, tournamentID);  final String percentageStr = request.getParameter(""percentage""); final int percentageHurdle; if (null == percentageStr || percentageStr.trim().equals("""")) { percentageHurdle = 100; } else { percentageHurdle = Integer.valueOf(percentageStr); } final double performanceHurdle = percentageHurdle / 100.0;  final Set<Integer> bestTeams = determineTeamsMeetingPerformanceHurdle(performanceHurdle, connection, tournamentID, challengeDescription.getWinner());  response.reset(); response.setContentType(""application/pdf""); response.setHeader(""Content-Disposition"", ""filename=finalComputedScores.pdf"");  final String challengeTitle = challengeDescription.getTitle(); final SimpleFooterHandler pageHandler = new SimpleFooterHandler();  generateReport(connection, response.getOutputStream(), challengeDescription, challengeTitle, tournament, pageHandler, bestTeams);  } catch (final SQLException e) { throw new RuntimeException(e); } finally { SQLFunctions.close(connection); } } "	0	0	1	0	1	0
"@EventHandler (priority = EventPriority.HIGHEST) public void onPlayerInteractEntity(final PlayerInteractEntityEvent ev) { if (p.getPlayerData(ev.getPlayer()).isSpectating() && ev.getRightClicked() instanceof Player && !ev.getRightClicked().hasMetadata(""NPC"")) { ev.setCancelled(true); } } "	0	0	1	0	1	0
@Override protected void onStart() { super.onStart();  // Call in onStart QREader.getInstance().start(); } 	1	0	1	1	1	0
public static byte[] getReceiverId(byte[] receiverSecret) { return Arrays.copyOf(hmac(receiverSecret, IPR_RECEIVER_ID_STRING), RECEIVER_ID_LENGTH); } 	0	0	1	1	0	0
"@Test public void authorizationinfo(){ String loginUser=""superadmin:1""; Subject loggedInSubject = loginSubject(loginUser); SimpleAuthorizationInfo simpleAuthorizationInfo=new SimpleAuthorizationInfo(); AuthorizationInfo authorizationInfo=authorizationServiceimpl.doAuthorizationInfo(simpleAuthorizationInfo,1); Set<String> permissions= (Set<String>) authorizationInfo.getStringPermissions(); assertTrue(permissions.contains(""CreateUser""));  } "	0	0	1	0	1	0
"private void processFeatureData(Feature feature, Issue issue, Map<String, IssueField> fields) { BasicProject project = issue.getProject(); String status = this.toCanonicalFeatureStatus(issue.getStatus().getName()); String changeDate = issue.getUpdateDate().toString();  // sNumber feature.setsNumber(TOOLS.sanitizeResponse(issue.getKey()));  // sName feature.setsName(TOOLS.sanitizeResponse(issue.getSummary()));  // sStatus feature.setsStatus(TOOLS.sanitizeResponse(status));  // sState feature.setsState(TOOLS.sanitizeResponse(status));  int originalEstimate = 0;  // Tasks use timetracking, stories use aggregatetimeoriginalestimate and aggregatetimeestimate if (issue.getTimeTracking() != null && issue.getTimeTracking().getOriginalEstimateMinutes() != null) { originalEstimate = issue.getTimeTracking().getOriginalEstimateMinutes(); } else if (fields.get(""aggregatetimeoriginalestimate"") != null && fields.get(""aggregatetimeoriginalestimate"").getValue() != null) { // this value is in seconds originalEstimate = ((Integer)fields.get(""aggregatetimeestimate"").getValue()) / 60; }  feature.setsEstimateTime(originalEstimate);  // sStoryPoints IssueField storyPointsField = fields.get(featureSettings.getJiraStoryPointsFieldName()); if (storyPointsField != null && storyPointsField.getValue() != null && !TOOLS.sanitizeResponse(storyPointsField.getValue()).isEmpty()) { Double value = Double.parseDouble(TOOLS.sanitizeResponse(storyPointsField.getValue())); feature.setsEstimate(String.valueOf(value.intValue())); } else { feature.setsEstimate(""0""); }  // sChangeDate feature.setChangeDate(TOOLS.toCanonicalDate(TOOLS.sanitizeResponse(changeDate)));  // IsDeleted - does not exist for Jira feature.setIsDeleted(""False"");  // sProjectID feature.setsProjectID(TOOLS.sanitizeResponse(project.getKey()));  // sProjectName feature.setsProjectName(TOOLS.sanitizeResponse(project.getName()));  // sProjectBeginDate - does not exist in Jira feature.setsProjectBeginDate("""");  // sProjectEndDate - does not exist in Jira feature.setsProjectEndDate("""");  // sProjectChangeDate - does not exist for this asset level in Jira feature.setsProjectChangeDate("""");  // sProjectState - does not exist in Jira feature.setsProjectState("""");  // sProjectIsDeleted - does not exist in Jira feature.setsProjectIsDeleted(""False"");  // sProjectPath - does not exist in Jira feature.setsProjectPath("""");  // sTeamID feature.setsTeamID(TOOLS.sanitizeResponse(project.getId()));  // sTeamName feature.setsTeamName(TOOLS.sanitizeResponse(project.getName()));  // sTeamChangeDate - not able to retrieve at this asset level from Jira feature.setsTeamChangeDate("""");  // sTeamAssetState feature.setsTeamAssetState("""");  // sTeamIsDeleted feature.setsTeamIsDeleted(""False"");  // sOwnersState - does not exist in Jira at this level feature.setsOwnersState(Arrays.asList(""Active""));  // sOwnersChangeDate - does not exist in Jira feature.setsOwnersChangeDate(TOOLS.toCanonicalList(Collections.<String>emptyList()));  // sOwnersIsDeleted - does not exist in Jira feature.setsOwnersIsDeleted(TOOLS.toCanonicalList(Collections.<String>emptyList())); } "	0	0	0	1	0	0
"@Override public List<AtmosphereRequest> onTextStream(WebSocket webSocket, Reader r) { //Converting to a string and delegating to onMessage(WebSocket webSocket, String d) causes issues because the binary data may not be a valid string. AtmosphereResourceImpl resource = (AtmosphereResourceImpl) webSocket.resource(); if (resource == null) { logger.trace(""The WebSocket has been closed before the message was processed.""); return null; }  AtmosphereRequest request = resource.getRequest(); List<AtmosphereRequest> list = new ArrayList<AtmosphereRequest>(); list.add(constructRequest(resource, request.getPathInfo(), request.getRequestURI(), methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).reader(r).build());  return list; } "	1	1	0	0	0	0
"@Override public List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] d, final int offset, final int length) {  //Converting to a string and delegating to onMessage(WebSocket webSocket, String d) causes issues because the binary data may not be a valid string. AtmosphereResourceImpl resource = (AtmosphereResourceImpl) webSocket.resource(); if (resource == null) { logger.trace(""The WebSocket has been closed before the message was processed.""); return null; }  AtmosphereRequest request = resource.getRequest(false);  if (!resource.isInScope()) return Collections.emptyList();  List<AtmosphereRequest> list = new ArrayList<AtmosphereRequest>(); list.add(constructRequest(resource, request.getPathInfo(), request.getRequestURI(), methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).body(d, offset, length).build());  return list; } "	1	1	0	0	0	0
"@Override public String toString() { return MoreObjects.toStringHelper(this) .add(""super"", super.toString()) .add(""id"", id) .add(""name"", name) .add(""dataType"", dataType) .add(""scaleLevel"", scaleLevel) .add(""label"", label) .add(""values"", values) .add(""description"", description) .add(""accessWays"", accessWays) .add(""filterExpression"", filterExpression) .add(""filterDescription"", filterDescription) .add(""filterExpressionLanguage"", filterExpressionLanguage) .add(""distributionSvg"", distributionSvg) .add(""sameVariablesInPanel"", sameVariablesInPanel) .add(""conceptId"", conceptId) .add(""statistics"", statistics) .add(""generationDetails"", generationDetails) .add(""atomicQuestionId"", atomicQuestionId) .add(""dataSetsIds"", dataSetsIds) .toString(); } "	0	0	1	0	0	0
private static byte[] gatherBytes(SequentialReader reader, int firstLength) throws IOException { ByteArrayOutputStream buffer = new ByteArrayOutputStream();  int length = firstLength;  while (length > 0) { buffer.write(reader.getBytes(length), 0, length);  length = reader.getByte(); }  return buffer.toByteArray(); } 	0	0	1	0	1	0
"@Test public void testDeclareVariableTemplate() throws Exception { doTestTemplateExpansion(""name"", ""'value'""); } "	0	0	0	1	0	0
public DataLoaderOptions<K, V> setBatchingEnabled(boolean batchingEnabled) { this.batchingEnabled = batchingEnabled; return this; } 	0	0	0	1	0	0
public DataLoaderOptions<K, V> setCachingEnabled(boolean cachingEnabled) { this.cachingEnabled = cachingEnabled; return this; } 	0	0	0	1	0	0
public MovementStatus shoot(int fieldNumber, Player player){ MovementStatus status = MovementStatus.INVALID_MOVEMENT;  if(validatePlayer(player)){ status = currentManager.damage(fieldNumber); } checkPlayer(status, player);  return status; } 	1	0	0	0	0	0
"private static void loadSkinsFromFile(File modDataFile) throws ZipException, IOException { final ZipFile modArchive = new ZipFile(modDataFile); final Enumeration enumerator = modArchive.entries();  while (enumerator.hasMoreElements()) { //Loop through each entry within the JAR until the MCA folder is hit. final ZipEntry file = (ZipEntry) enumerator.nextElement(); String archiveFilePath = ""/"" + file.getName();  if (archiveFilePath.contains(""textures/skins"") && !archiveFilePath.contains(""/sleeping/"")) { for (EnumProfessionGroup skinGroup : EnumProfessionGroup.values()) { if (skinGroup != EnumProfessionGroup.Any && skinGroup != EnumProfessionGroup.AnyExceptChild && file.getName().contains(skinGroup.toString())) { skinGroup.addSkin(archiveFilePath); } } } }  modArchive.close(); } "	1	0	1	0	1	0
"public void regenerateView() { Utils.printBoth(String.format( I18n.format(""mw.gui.mwgui.chatmsg.regenmap.1"", new Object[0]) + "" %dx%d "" + I18n.format(""mw.gui.mwgui.chatmsg.regenmap.2"", new Object[0]) + "" (%d, %d)"", (int) this.mapView.getWidth(), (int) this.mapView.getHeight(), (int) this.mapView.getMinX(), (int) this.mapView.getMinZ())); // this.mw.reloadBlockColours(); this.mw.executor.addTask2(new RebuildRegionsTask(this.mw, (int) this.mapView.getMinX(), (int) this.mapView.getMinZ(), (int) this.mapView.getWidth(), (int) this.mapView.getHeight(), this.mapView.getDimension())); } "	0	0	1	0	0	0
public int numSpecifiedTypes() { return specifiedFieldConfigs.size(); } 	0	0	1	0	1	0
"@Override @SuppressWarnings({ ""checkstyle:designforextension"", ""checkstyle:emptyforiteratorpad"" }) protected final BitcoinBlock treatBlock(final long blockNumber) { BitcoindBlockData blockData = getBitcoindService().getBlockData(blockNumber);  // --------------------------------------------------------------------------------------------------------- // If we have the data if (blockData != null) {  // ----------------------------------------------------------------------------------------------------- // We retrieve all the addresses. final List<String> addresses = Collections.synchronizedList(new ArrayList<String>()); blockData.getTransactions() .parallelStream() .forEach(grt -> { grt.getVout() .parallelStream() .filter(v -> v != null) .forEach(v -> v.getScriptPubKey() .getAddresses().stream() .filter(a -> a != null) .forEach(address -> addresses.add(address))); });  // ----------------------------------------------------------------------------------------------------- // We create all the addresses. addresses.parallelStream() .distinct() // If the address doesn't exists .filter(address -> getAddressRepository().findByAddress(address) == null) .forEach(address -> { try { BitcoinAddress a = new BitcoinAddress(address); getAddressRepository().save(a); addLog(""Address "" + address + "" created with id "" + a.getId()); } catch (Exception e) { throw new RuntimeException(""Error creating address "" + address, e); } }); return getBlockRepository().findByHeight(blockNumber); } else { addError(""No response from bitcoind for block n°"" + getFormattedBlock(blockNumber)); return null; } } "	0	0	1	1	1	0
@Override public void pulse() { super.pulse();  fuseTicks--; if (fuseTicks <= 0) { explode(); } else { world.spigot().playEffect(location.clone().add(0, 0.5D, 0), Effect.SMOKE); } } 	1	0	1	1	1	0
public String getRequestId() { return Hashing.md5().newHasher().putString(getClientIdentifier() + getDesiredOpponentIdentifier() + getSalt(), Charsets.UTF_8).toString(); } 	0	0	1	1	1	0
"@RequestMapping(method = RequestMethod.POST, value = ""/validateTnxBydataHash"", produces = ""application/json; charset=utf-8"") public ResponseEntity<HashMap<String, Serializable>> validateTnxBydataHash(@RequestParam(""dataHash"") String dataHash) { if (StringUtils.isEmpty(dataHash)) { Logger.error(""TransactionController"", ""validateTnxBydataHash"", dataHash, ""empty transaction Id""); return new ResponseEntity<>(HttpStatus.BAD_REQUEST); }  Transaction db_transaction = transactionRepo.findByDataHash(dataHash); if (db_transaction == null) { Logger.error(""TransactionController"", ""validateTnxBydataHash"", dataHash, ""no transaction found in our servers for data="" + dataHash); return new ResponseEntity<>(HttpStatus.NO_CONTENT); }  HashMap<String, Serializable> result = getValidatedTransactionMap(db_transaction);  if (result == null || result.size() == 0) { Logger.error(""TransactionController"", ""validateTnxBydataHash"", dataHash, ""no transaction found in network for dataHash="" + dataHash); return new ResponseEntity<>(HttpStatus.NO_CONTENT); }  return new ResponseEntity<HashMap<String, Serializable>>(result, HttpStatus.OK); } "	1	0	1	0	1	0
@Override protected MessageCommandFailureEvent createRemoteNodeFailureEvent(FeedbackCommandEvent originalCommand, WonMessage messageSent, FailureResponseEvent failureResponseEvent) { return new FeedbackCommandFailureEvent(originalCommand, failureResponseEvent.getNeedURI(), failureResponseEvent.getRemoteNeedURI(), failureResponseEvent.getConnectionURI()); } 	1	0	0	0	1	0
"protected static TestResourcesFixture getTestResourcesFixture() { try { File path = TestResourcesFixture.resourceNameToFile( EngineIntegrationTestBase.class, ""/"");  return new TestResourcesFixture(path); } catch (FileNotFoundException e) { throw new WrappedException(e); } } "	0	0	0	1	0	0
protected double getLogGammaEtaSumAllWords(HierarchicalLDANode node) { return log.value(Gamma.gamma(etaSum + node.getTotalWordCount())); } 	1	0	1	1	1	0
private PathQueryExecutor getPathQueryExecutor() { final Profile profile = getPermission().getProfile(); return im.getPathQueryExecutor(profile); } 	0	0	0	1	0	0
"public List<TripMatch> findMatches(User passenger, TripRequestDescription requestDescription) throws Exception { List<TripMatch> matches = new ArrayList<>();  List<TripOffer> offers = findAllOffers(); if (offers.size() == 0) return matches;  List<Route> diversionRoutes = new ArrayList<>();  for( TripOffer offer : offers ) { Route route = offer.getRoute(); RouteLocation startLocation = route.getStart(); RouteLocation endLocation = route.getEnd();  List<RouteLocation> waypoints = new ArrayList<>(); waypoints.add( requestDescription.getStart() ); waypoints.add( requestDescription.getEnd() );  diversionRoutes = directionsManager.getDirections( startLocation, endLocation, waypoints );  if( diversionRoutes == null || diversionRoutes.size() == 0 ) return new ArrayList<>();  Route diversionRoute = diversionRoutes.get(0); System.out.println(""Additional meters: "" + (diversionRoute.getDistanceInMeters() - route.getDistanceInMeters())); System.out.println(""Max Diversion: "" + (offer.getMaxDiversionInMeters())); if( diversionRoute.getDistanceInMeters() - route.getDistanceInMeters() < offer.getMaxDiversionInMeters() ) { // TODO: What is the trip length from the point of view of our customers? List<Route> passengerRoutes = directionsManager.getDirections( requestDescription.getStart(), requestDescription.getEnd() ); if(passengerRoutes == null || passengerRoutes.isEmpty()) return new ArrayList<>();  Route passengerRoute = passengerRoutes.get(0);  long tripLength = (passengerRoute.getDistanceInMeters()); long tripDuration = passengerRoute.getDurationInSeconds(); int price = (int) (tripLength/100.0f * offer.getPricePerKmInCents());  TripMatch match = new TripMatch( 0, diversionRoute, tripLength, tripDuration, price, offer.getPricePerKmInCents(), offer.getDriver(), passenger);  matches.add(match); } }  // if there is no or only one match, we can return immediately, since there is no price comparation necessary if( matches.size() < 2 ) return matches;   // sort matches ascending based on the price Collections.sort(matches, new Comparator<TripMatch>() { @Override public int compare(TripMatch m1, TripMatch m2) { if ( m1.getPricePerKilometerInCents() == m2.getPricePerKilometerInCents() ) return 0;  return (m1.getPricePerKilometerInCents() < m2.getPricePerKilometerInCents()) ? -1 : 1; } });  int samePrice = 1; int lowestPrice = matches.get(0).getPricePerKilometerInCents(); while( samePrice < matches.size() && matches.get(samePrice).getPricePerKilometerInCents() == lowestPrice ) { System.out.println(""Match: "" + matches.get(samePrice).getEstimatedPriceInCents() + "" ""+  matches.get(samePrice).getPricePerKilometerInCents()); samePrice++; }  // if all matches have the same price no adaption is necessary if( samePrice == matches.size() ) return matches;  int secondLowestPrice = matches.get(samePrice).getPricePerKilometerInCents(); System.out.println(""Second lowest price: "" + secondLowestPrice); while( matches.size() > samePrice ) matches.remove( matches.size() - 1);  // adjust price value for all possible matches for( TripMatch m : matches ) { m.setPricePerKilometerInCents( secondLowestPrice ); m.setEstimatedPriceInCents( (int)(m.getDiversionInMeters()/1000.0f * m.getPricePerKilometerInCents()) );  System.out.println(""Match: "" + m.getEstimatedPriceInCents() + "" ""+  m.getPricePerKilometerInCents()); }  return matches; } "	0	0	1	0	1	0
"@Test public void testRemoveMembersWithInnerComments() throws Exception { String modifiedCode = ""public class A{ static{ \n                              \n  i++; }}""; CompilationUnit modifiedCu = parser.parse(modifiedCode, false);  String original = ""public class A{ static{ \n  int i = 1 /*first comment*/;\n  i++; }}""; CompilationUnit originalCu = parser.parse(original, false);  List<Action> actions = getActions(originalCu, modifiedCu);  Assert.assertEquals(1, actions.size()); Assert.assertEquals(3, actions.get(0).getBeginColumn()); Assert.assertEquals(""int i = 1 /*first comment*/"".length() + 3, actions.get(0).getEndColumn()); Assert.assertEquals(ActionType.REMOVE, actions.get(0).getType());  assertCode(actions, original, ""public class A{ static{ \n  \n  i++; }}""); } "	0	0	1	1	0	0
"@Override public void init(RuntimeServices rs) throws Exception { LOGGER.info(""Log Chute initialized""); } // init() "	0	0	1	0	1	0
"public static void main(final String[] args) throws InitializationException, InterruptedException, InvocationTargetException { if (args.length > 0 && ""-batch"".equals(args[0])) { try { String[] batchArgs = new String[args.length - 1]; System.arraycopy(args, 1, batchArgs, 0, batchArgs.length); BatchProcessor.main(batchArgs); } catch (IOException | ConfigurationException e) { System.err.println(""Error during batch processing: "" + e.getMessage()); e.printStackTrace(); } return; } SingleInstanceRequestResponseDelegate singleInstanceRequestResponseDelegate = SingleInstanceRequestResponseDelegate.getInstance(); SingleInstance singleInstance = SingleInstance.request(""OtrosLogViewer"", singleInstanceRequestResponseDelegate, singleInstanceRequestResponseDelegate, args); if (singleInstance == null) { LOGGER.info(""OtrosLogViewer is already running, params send using requestAction""); System.exit(0); }  LOGGER.info(""Starting application""); OtrosSplash.setMessage(""Starting application""); OtrosSplash.setMessage(""Loading configuration""); final XMLConfiguration c = getConfiguration(""config.xml""); if (!c.containsKey(ConfKeys.UUID)) { c.setProperty(ConfKeys.UUID, UUID.randomUUID().toString()); } IconsLoader.loadIcons(); OtrosSplash.setMessage(""Loading icons""); SwingUtilities.invokeAndWait(() -> { if (c.getBoolean(APPEARANCE_CUSTOM_FONT_SIZE, false)) { final int fontSize = c.getInt(APPEARANCE_FONT_SIZE, 12); FontSize.setDefaultSize(fontSize); }  try { String lookAndFeel = c.getString(ConfKeys.APPEARANCE_LOOK_AND_FEEL, ""com.jgoodies.looks.plastic.PlasticXPLookAndFeel""); OtrosSplash.setMessage(""Loading L&F "" + lookAndFeel); LOGGER.debug(""Initializing look and feel: "" + lookAndFeel); PlasticLookAndFeel.setTabStyle(Plastic3DLookAndFeel.TAB_STYLE_METAL_VALUE); UIManager.setLookAndFeel(lookAndFeel); } catch (Throwable e1) { LOGGER.warn(""Cannot initialize LookAndFeel: "" + e1.getMessage()); } try { final DataConfiguration c1 = new OtrosConfiguration(c); final LogViewMainFrame mf = new LogViewMainFrame(c1); mf.addComponentListener(new ComponentAdapter() { @Override public void componentResized(ComponentEvent e) { c.setProperty(""gui.state"", mf.getExtendedState()); if (mf.getExtendedState() == Frame.NORMAL) { c.setProperty(""gui.width"", mf.getWidth()); c.setProperty(""gui.height"", mf.getHeight()); } }  @Override public void componentMoved(ComponentEvent e) { c.setProperty(""gui.location.x"", mf.getLocation().x); c.setProperty(""gui.location.y"", mf.getLocation().y); } }); mf.addWindowListener(mf.exitAction); SingleInstanceRequestResponseDelegate.openFilesFromStartArgs(mf.otrosApplication, Arrays.asList(args), mf.otrosApplication.getAppProperties().getCurrentDir()); } catch (InitializationException e) { LOGGER.error(""Cannot initialize main frame"", e); } }); } "	0	0	0	0	0	1
"private void preferFutureWeek(int weekday, Calendar c) { /**1. 确认用户选项*/ if (!normalizer.isPreferFuture()) { return; } /**2. 检查被检查的时间级别之前，是否没有更高级的已经确定的时间，如果有，则不进行倾向处理.*/ int checkTimeIndex = 2; for (int i = 0; i < checkTimeIndex; i++) { if (_tp.tunit[i] != -1) return; } /**获取当前是在周几，如果识别到的时间小于当前时间，则识别时间为下一周*/ Calendar curC = Calendar.getInstance(); if (this.normalizer.getTimeBase() != null) { String[] ini = this.normalizer.getTimeBase().split(""-""); curC.set(Integer.valueOf(ini[0]).intValue(), Integer.valueOf(ini[1]).intValue(), Integer.valueOf(ini[2]).intValue() , Integer.valueOf(ini[3]).intValue(), Integer.valueOf(ini[4]).intValue(), Integer.valueOf(ini[5]).intValue()); } int curWeekday = curC.get(Calendar.DAY_OF_WEEK); if (weekday == 1) { weekday = 7; } if (curWeekday < weekday) { return; } //准备增加的时间单位是被检查的时间的上一级，将上一级时间+1 c.add(Calendar.WEEK_OF_YEAR, 1); } "	1	1	1	1	0	0
private boolean validateProblemInputs() { boolean addressIsValid = false; boolean descriptionIsValid = false; boolean problemTypeIsValid = false;  if (address != null) { addressIsValid = true; reportProblemDescriptionWrapper.setError(null); } else { reportProblemLocationWrapper.setError(getText(R.string.error_problem_location_is_empty)); }  if (mReportProblemDescription.getText() != null && mReportProblemDescription.getText().length() > 0) { descriptionIsValid = true; } else { reportProblemDescriptionWrapper.setError(getText(R.string.error_problem_description_is_empty)); }  if (reportType != null) { problemTypeIsValid = true; } else { reportProblemTypeWrapper.setError(getText(R.string.error_problem_type_is_empty)); }  return addressIsValid && descriptionIsValid && problemTypeIsValid; } 	0	0	1	1	1	0
private int getWidestZoom() { return (multiGraph.graphSize() / 2); } 	0	0	1	0	0	0
"@Override public Set<Place> merge(Place place1, Place place2) {  Set<Place> changedPlaces = new HashSet<Place>();  place1.getComments().addAll(place2.getComments()); place1.getCommentsReisestipendium().addAll(place2.getCommentsReisestipendium()); place1.getIdentifiers().addAll(place2.getIdentifiers()); place1.getLinks().addAll(place2.getLinks()); place1.getLocations().addAll(place2.getLocations()); place1.getNames().addAll(place2.getNames()); place1.getTags().addAll(place2.getTags()); place1.getProvenance().addAll(place2.getProvenance()); place1.getTypes().addAll(place2.getTypes()); place1.getGroupInternalData().addAll(place2.getGroupInternalData());  place1.setChildren(place1.getChildren() + place2.getChildren());  Set<String> relatedPlaces = new HashSet<String>(); relatedPlaces.addAll(place1.getRelatedPlaces()); relatedPlaces.addAll(place2.getRelatedPlaces()); place1.setRelatedPlaces(new HashSet<String>()); for (String relatedPlaceId : relatedPlaces) { if (relatedPlaceId != null) { Place relatedPlace = placeRepository.findOne(relatedPlaceId); if (relatedPlace != null && relatedPlace.getRelatedPlaces() != null && (relatedPlace.getRelatedPlaces().contains(place1.getId()) || relatedPlace.getRelatedPlaces().contains(place2.getId()) && !relatedPlace.getId().equals(place1.getId()) && !relatedPlace.getId().equals(place2.getId()))) { place1.getRelatedPlaces().add(relatedPlaceId); relatedPlace.getRelatedPlaces().remove(place1.getId()); relatedPlace.getRelatedPlaces().remove(place2.getId()); relatedPlace.getRelatedPlaces().add(place1.getId()); changedPlaces.add(relatedPlace); } } }  if (place1.getPrefName() == null) place1.setPrefName(place2.getPrefName()); else if (!place1.getPrefName().equals(place2.getPrefName())) place1.addName(place2.getPrefName());  if (place1.getPrefLocation() == null) place1.setPrefLocation(place2.getPrefLocation()); else if (!place1.getPrefLocation().equals(place2.getPrefLocation()) && place2.getPrefLocation() != null) place1.addLocation(place2.getPrefLocation());  // update parent id of children that belong to place 2 List<Place> children = getPlaceRepository().findByParent(place2.getId()); logger.info(""got {} children"", children.size()); for (Place child : children) { Place changedChild = getFromPlaceSet(child.getId(), changedPlaces); if (changedChild != null) changedChild.setParent(place1.getId()); else { child.setParent(place1.getId()); changedPlaces.add(child); } }  if (place1.getParent() == null || place1.getParent().isEmpty()) place1.setParent(place2.getParent()); else if (place2.getParent() != null && !place1.getParent().equals(place2.getParent())) { Place otherParent = getFromPlaceSet(place2.getParent(), changedPlaces); if (otherParent == null) otherParent = placeRepository.findOne(place2.getParent()); if (otherParent != null) { place1.getRelatedPlaces().add(otherParent.getId()); otherParent.getRelatedPlaces().add(place1.getId()); changedPlaces.add(otherParent); } }  String noteReisestipendium = """"; if (place1.getNoteReisestipendium() != null && !place1.getNoteReisestipendium().isEmpty()) noteReisestipendium += place1.getNoteReisestipendium(); if (place2.getNoteReisestipendium() != null && !place2.getNoteReisestipendium().isEmpty()) { if (!noteReisestipendium.isEmpty()) noteReisestipendium += ""\n\n""; noteReisestipendium += place2.getNoteReisestipendium(); } if (!noteReisestipendium.isEmpty()) place1.setNoteReisestipendium(noteReisestipendium);  changedPlaces.add(place1);  return changedPlaces; } "	1	0	0	0	0	0
"@Override public CliAuthenticator createCliAuthenticator(final CLICommand command) { return new CliAuthenticator() { @Option(name=""--username"",usage=""GitHub username to authenticate yourself to Jenkins."") public String userName;  @Option(name=""--password"",usage=""GitHub personal access token. Note that passing a password in arguments is insecure."") public String password;  @Option(name=""--password-file"",usage=""File that contains the personal access token."") public String passwordFile;  public Authentication authenticate() throws AuthenticationException, IOException, InterruptedException { if(userName == null) { //return command.getTransportAuthentication();    // no authentication parameter. fallback to the transport return Jenkins.ANONYMOUS; } if(passwordFile != null) { try { password = new FilePath(command.channel,passwordFile).readToString().trim(); } catch (IOException e) { throw new BadCredentialsException(""Failed to read ""+passwordFile,e); } } if(password == null) { password = command.channel.call(new InteractivelyAskForPassword()); }  if(password == null) { throw new BadCredentialsException(""No GitHub personal access token specified.""); } UserDetails d = authenticate(userName, password); return new GithubAuthenticationToken(password, getGithubApiUri()); } }; } "	1	0	1	1	1	0
"private synchronized void loadFromDir( File file ) throws FileNotFoundException { //get all json files in that dir File jsonFiles[] = file.listFiles( filenameFilter() );  //for each json file convert back to type for ( File jsonFile : jsonFiles ) { try { mapOfMap.put( jsonFile.getName().split( ""\\."" )[0], loadJsonFile( jsonFile ) ); } catch ( Exception e ) { LOGGER.error( ""****** Error in FileDb.loadFromDir:"", e ); } } } "	1	0	1	1	1	0
"@Transactional public Result importComponentConfirmed(Long studyId) throws JatosGuiException { Logger.info(CLASS_NAME + "".importComponentConfirmed: "" + ""studyId "" + studyId + "", "" + ""logged-in user's email "" + session(Users.SESSION_EMAIL)); StudyModel study = studyDao.findById(studyId); UserModel loggedInUser = userService.retrieveLoggedInUser(); studyService.checkStandardForStudy(study, studyId, loggedInUser); studyService.checkStudyLocked(study);  File componentFile = importExportService.getTempComponentFile(study); ComponentModel uploadedComponent = importExportService .unmarshalComponent(componentFile, study); ComponentModel currentComponent = componentDao .findByUuid(uploadedComponent.getUuid()); boolean componentExists = (currentComponent != null); if (componentExists) { componentDao.updateProperties(currentComponent, uploadedComponent); RequestScopeMessaging.success(MessagesStrings .componentsPropertiesOverwritten(currentComponent.getId())); } else { componentDao.create(study, uploadedComponent); RequestScopeMessaging.success(MessagesStrings .importedNewComponent(uploadedComponent.getId())); } return ok(RequestScopeMessaging.getAsJson()); } "	1	1	0	0	0	0
"private void addDelay(MessagePacket packet, long timestamp) { final SimpleDateFormat mDateFormat = new SimpleDateFormat( ""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", Locale.US); mDateFormat.setTimeZone(TimeZone.getTimeZone(""UTC"")); Element delay = packet.addChild(""delay"", ""urn:xmpp:delay""); Date date = new Date(timestamp); delay.setAttribute(""stamp"", mDateFormat.format(date)); } "	0	0	0	1	0	0
"public void testGetLinkedRelatedItems() throws SAXParseException, IOException { Element mods = loadMODSDocument().detachRootElement(); MCRMODSWrapper wrapper = new MCRMODSWrapper();   Element relatedItem = new Element(""relatedItem"", MCRConstants.MODS_NAMESPACE); relatedItem.setAttribute(""href"", ""mir_test_00000001"", MCRConstants.XLINK_NAMESPACE); relatedItem.setAttribute(""type"", ""series""); mods.addContent(relatedItem);  wrapper.setID(""JUnit"", 4711); wrapper.setMODS(mods);  Assert.assertEquals(""There should be one related item!"",wrapper.getLinkedRelatedItems().size(),1); } "	0	0	1	1	1	0
public double[] calculateByImport(Double quantity, int ivaSpinnerElement, int personSpinnerElement) { Double sanitizedQuantity = quantity == null ? 0.0 : quantity;  ivaPercentage = getIva(ivaSpinnerElement); persontype = getPersonType(personSpinnerElement);  ivaRetentionValue = 0; isrRetentionValue = (sanitizedQuantity * 0.1);  if(persontype.equals(TYPE_FISICA)) { isrRetentionValue = 0; } else if(persontype.equals(TYPE_GUBERNAMENTAL)) { ivaPercentage = 0; } else if(persontype.equals(TYPE_EXTRANJERA)) { ivaPercentage = 0; isrRetentionValue = 0; } else { ivaRetentionValue = (ivaPercentage/3) * 2; }  ivaValue = (sanitizedQuantity * ivaPercentage);  subtotalValue = ivaValue + sanitizedQuantity; totalValue = subtotalValue - (ivaRetentionValue + isrRetentionValue);  return new double[] { round(sanitizedQuantity), round(ivaValue), round(subtotalValue), round(ivaRetentionValue), round(isrRetentionValue), round(totalValue) }; } 	1	0	1	0	1	0
"@Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { //selectItem(position); Log.d(""BaseActivity"", String.format(""onItemClick: %d"", position)); if (position == 0) { LoginUtils.startLogin(BaseActivity.this, LoginActivity.REQUEST_CODE_LOGIN); return; }  HashMap<String, Object> map = (HashMap<String, Object>) parent.getAdapter().getItem(position); String text = (String) map.get(""menuText""); int resid = (Integer) map.get(""icon""); //            Toast.makeText(BaseActivity.this, text, Toast.LENGTH_SHORT).show(); drawerLayout.closeDrawer(GravityCompat.START); switch (position - 1) { case 0: Intent intentMain = new Intent(BaseActivity.this, MainActivity.class); startActivity(intentMain); break; case 1: Intent intent = new Intent(BaseActivity.this, ListArtistActivity.class); BaseActivity.this.startActivity(intent); break; case 2: Intent intentLab = new Intent(BaseActivity.this, LifeLabActivity.class); BaseActivity.this.startActivity(intentLab); break; case 3:  if (UserInfo.isUserLogged(BaseActivity.this)) { Intent intentFeedback = new Intent(BaseActivity.this, FeedbackActivity.class); BaseActivity.this.startActivityForResult(intentFeedback, FeedbackActivity.REQUEST_CODE_MENU); } else { LoginUtils.startLogin(BaseActivity.this, LoginActivity.REQUEST_CODE_FEEDBACK); } break;  case 5: if (UserInfo.isUserLogged(BaseActivity.this)) { Intent intentCollection = new Intent(BaseActivity.this, MyCollectionActivity.class); BaseActivity.this.startActivity(intentCollection); } else { LoginUtils.startLogin(BaseActivity.this, LoginActivity.REQUEST_CODE_MY_COLLECTION); } break; case 6:  if (UserInfo.isUserLogged(BaseActivity.this)) { Intent intentSubscribedArtists = new Intent(BaseActivity.this, ListSubscribedArtistActivity.class); BaseActivity.this.startActivity(intentSubscribedArtists); } else { LoginUtils.startLogin(BaseActivity.this, LoginActivity.REQUEST_CODE_SUBSCRIBED_ARTISTS); } break; case 8: Intent intentAbout = new Intent(BaseActivity.this, AboutActivity.class); BaseActivity.this.startActivity(intentAbout); break;  case 9: ShareUtils su = new ShareUtils(BaseActivity.this); su.setUrl(CommonUtilities.SHARE_URL); su.setContent(getResources().getString(R.string.share_text)); Bitmap bmp = BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher); su.setPicture(bmp); su.share(); break;  case 10: //clear cache dialog = new MaterialDialog.Builder(BaseActivity.this)  .content(R.string.clear_cache_alert_content) .positiveColor(getResources().getColor(R.color.font_color)) .negativeColor(getResources().getColor(R.color.font_color)) .positiveText(R.string.confirm) .negativeText(R.string.cancel) .onPositive(new MaterialDialog.SingleButtonCallback() { @Override public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) { // TODO dialog.dismiss(); DataCleanUtils.cleanAllApplicationData(BaseActivity.this); showCacheClearedToast();   } })  .onNegative(new MaterialDialog.SingleButtonCallback() { @Override public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) { // TODO dialog.dismiss(); } }) .show();  break; case 11: Log.d(""BaseActivity"", ""Logout""); UserInfo.logout(BaseActivity.this); BaseActivity.this.tvusername.setText(R.string.login_gologin); BaseActivity.this.tvuserdesc.setText(R.string.login_to_see_more);  imageViewSetting.setVisibility(View.GONE); imageViewUserCover.setImageResource(bgRes[1]); case 4: default: break; } } "	1	1	0	1	0	0
"private void terminate(Transaction transaction, boolean success) { if (primaryTransactions.contains(transaction) && isLocalTransaction(transaction)) { sendTerminateMessage(transaction.transactionId); }  log.info(""Terminating transaction with status "" + success, MVTO.class); if (success) { versioningUnit.commit(transaction.transactionId); } else { versioningUnit.abort(transaction.transactionId); } if (!success && !isLocalTransaction(transaction)) remote.abortOthers(transaction);  transactions.remove(transaction.transactionId); primaryTransactions.remove(new Integer(transaction.transactionId)); } "	0	0	1	1	1	0
"public static void main(String[] args) {  if(args.length != 1){ System.out.println(""USAGE: java edu.byu.ece.rapidSmith.vivado.vxdlTool.gui.VSRTool <Import Directory>""); } else if (!new File(args[0]).exists()) { System.out.println(""ERROR: Directory does not exist""); } else { try { // TODO Auto-generated method stub QApplication.setGraphicsSystem(""raster""); QApplication.initialize(args); VSRTool test = new VSRTool(args[0]); test.show(); QApplication.execStatic(); } catch(NullPointerException e){ System.out.println(""ERROR: No Primitive Definitions found in the specified directory!\n"" + ""\tThis should be the directory generated from the 'extract_all_partial_primitive_defs' TCL script""); } } } "	0	0	1	0	1	0
"private <T> int savePayments(Integer payeeId, PaymentDetail paymentDetail, List<DocumentIncomeType<T>> incomeTypes) throws Exception { int retval = 0; if (LOG.isDebugEnabled()) { LOG.debug(""payee="" + payeeId + "", #incomeTypes="" + incomeTypes.size()); }  DocumentPaymentInformation paymentInfo = null;  for (DocumentIncomeType<T> incomeType : incomeTypes) { boolean reportable = !TaxPropertyConstants.INCOME_TYPE_CODE_NOT_REPORTABLE.equals(incomeType.getIncomeTypeCode());  if (reportable) { // lazy load paymentInfo (date paid, payment method code, invoice number) for this document if (paymentInfo == null) { paymentInfo = taxReportingDao.getDocumentPaymentInformation(TaxHelper.getClassForDocumentType(paymentDetail.getFinancialDocumentTypeCode()), paymentDetail.getCustPaymentDocNbr()); }  if (paymentInfo != null) { // get a new Payment that is pre-populated with PaymentDetail information Payment payment = new Payment();  payment.setPayeeId(payeeId); payment.setExcludeIndicator(Boolean.FALSE); payment.setDisbursementDt(paymentDetail.getPaymentGroup().getDisbursementDate());  if (paymentInfo.isCheckACHPayment()) { payment.setDisbursementNbr(paymentDetail.getPaymentGroup().getDisbursementNbr()); payment.setPaymentGroupId(paymentDetail.getPaymentGroup().getId()); if (TaxReportingHelper.isDv(paymentDetail.getFinancialDocumentTypeCode())) { payment.setDocType(TaxConstants.DocumentTypes.DISBURSEMENT_VOUCHER_DOCUMENT); } else { payment.setDocType(paymentDetail.getFinancialDocumentTypeCode()); } } else { if (TaxReportingHelper.isPreq(paymentDetail.getFinancialDocumentTypeCode())) { payment.setDocType(PaymentRequestDocument.DOCUMENT_TYPE_NON_CHECK); } else if (TaxReportingHelper.isCm(paymentDetail.getFinancialDocumentTypeCode())) { payment.setDocType(VendorCreditMemoDocument.DOCUMENT_TYPE_NON_CHECK); } else if (TaxReportingHelper.isDv(paymentDetail.getFinancialDocumentTypeCode())) { payment.setDocType(DisbursementVoucherDocument.DOCUMENT_TYPE_DV_NON_CHECK); } }  payment.setDocNbr(paymentDetail.getCustPaymentDocNbr()); payment.setInvoiceNbr(paymentInfo.getInvoiceNumber()); payment.setPoNbr(paymentDetail.getPurchaseOrderNbr()); payment.setFinChartCode(incomeType.getChartOfAccountsCode()); payment.setPaymentTypeCode(incomeType.getIncomeType().getIncomeTypeBox());  // set as negative for CM if (TaxReportingHelper.isCm(paymentDetail.getFinancialDocumentTypeCode())) { payment.setAcctNetAmount(incomeType.getAmount().negated()); } else { payment.setAcctNetAmount(incomeType.getAmount()); }  if (LOG.isDebugEnabled()) { LOG.debug(""saving payment for payee="" + payment.getPayeeId() + "", incomeType="" + incomeType.getIncomeType().getIncomeTypeBox() + "", amount="" + incomeType.getAmount()); }  businessObjectService.save(payment); retval++; } else { LOG.warn(""unable to find documnet payment information for payee="" + payeeId + "", incomeType="" + incomeType.getIncomeType().getIncomeTypeBox() + "", documentNumber="" + paymentDetail.getCustPaymentDocNbr()); } } }  return retval; } "	0	0	0	0	0	1
"private void setupBitcoinSyncNotification() { balance.setStyle(""-fx-text-fill: grey""); TorClient torClient = Main.bitcoin.getPeers().getTorClient(); if (torClient != null) { SimpleDoubleProperty torProgress = new SimpleDoubleProperty(-1); String torMsg = tr(""Initialising Tor""); syncItem = Main.instance.notificationBar.displayNewItem(torMsg, torProgress); torClient.addInitializationListener(new TorInitializationListener() { @Override public void initializationProgress(String message, int percent) { Platform.runLater(() -> { syncItem.label.set(torMsg + "": "" + message); torProgress.set(percent / 100.0); }); }  @Override public void initializationCompleted() { Platform.runLater(() -> { syncItem.cancel(); showBitcoinSyncMessage(); }); } }); } bitcoinUIModel.syncProgressProperty().addListener(x -> { double progress = bitcoinUIModel.syncProgressProperty().get(); if (progress >= 1.0) { if (syncItem != null) { // Hack around JFX progress animator leak bug. GuiUtils.runOnGuiThreadAfter(500, () -> { syncItem.cancel(); syncItem = null; balance.setStyle(""-fx-text-fill: black""); }); } } else if (syncItem == null && progress < 1.0) { showBitcoinSyncMessage(); } }); } "	0	0	1	1	1	0
"private TitanGraph initializeTitanGraph() { log.fine(""Initializing graph."");  Path lucene = graphDir.resolve(""graphsearch""); Path berkeley = graphDir.resolve(""titangraph"");  // TODO: Externalize this. conf = new BaseConfiguration(); conf.setProperty(""storage.directory"", berkeley.toAbsolutePath().toString()); conf.setProperty(""storage.backend"", ""berkeleyje"");  // Sets the berkeley cache to a relatively small value to reduce the memory footprint. // This is actually more important than performance on some of the smaller machines out there, and // the performance decrease seems to be minimal. conf.setProperty(""storage.berkeleydb.cache-percentage"", 1);  // Increase storage write buffer since we basically do a large bulk load during the first phases. // See http://s3.thinkaurelius.com/docs/titan/current/bulk-loading.html conf.setProperty(""storage.buffer-size"", ""4096"");  // // turn on a db-cache that persists across txn boundaries, but make it relatively small conf.setProperty(""cache.db-cache"", true); conf.setProperty(""cache.db-cache-clean-wait"", 0); conf.setProperty(""cache.db-cache-size"", .05); conf.setProperty(""cache.db-cache-time"", 0);  conf.setProperty(""index.search.backend"", ""lucene""); conf.setProperty(""index.search.directory"", lucene.toAbsolutePath().toString());  return TitanFactory.open(conf); } "	0	0	1	0	1	0
"@Test public void editRole() { RoleEntity roleEntity = new RoleEntity(); roleEntity.setRoleName(""role ut""); roleEntity.setRoleDescription(""role desc test""); roleEntity.setCreatedDate(new Date()); roleEntity.setCreatedBy(""test""); roleEntity.setLastUpdatedDate(new Date()); roleEntity.setLastUpdatedBy(""test"");  PermissionEntity permissionEntity = new PermissionEntity(); permissionEntity.setPermissionName(""CreateUser"");  PermissionEntity permissionEntity1 = permissionsRepository.findByPermissionName(permissionEntity.getPermissionName()); assertNotNull(permissionEntity1);  Set<PermissionEntity> permissionEntities = new HashSet<>(); permissionEntities.add(permissionEntity1); roleEntity.setPermissions(permissionEntities);  RoleEntity savedRoleEntity = rolesDetailsRepositorty.save(roleEntity);  RoleEntity editRoleEntity = new RoleEntity(); editRoleEntity.setRoleId(savedRoleEntity.getRoleId()); roleEntity.setRoleName(""edit ut""); editRoleEntity.setRoleDescription(""edit ut"");  PermissionEntity editPermissionEntity = new PermissionEntity(); editPermissionEntity.setPermissionName(""WriteCGD"");  Set<PermissionEntity> editpermissionEntities = new HashSet<>(); editpermissionEntities.add(permissionEntity1); roleEntity.setPermissions(editpermissionEntities); editRoleEntity.setPermissions(editpermissionEntities);  RoleEntity editSaveRoleEntity = rolesDetailsRepositorty.save(editRoleEntity); assertEquals(editRoleEntity.getRoleName(),editSaveRoleEntity.getRoleName()); assertEquals(editRoleEntity.getRoleDescription(),editSaveRoleEntity.getRoleDescription());  } "	0	0	1	0	1	0
public void initializeGoogleApi() { this.mGoogleApiClient = new GoogleApiClient.Builder(this) .addApiIfAvailable(Games.API) .addConnectionCallbacks(this) .addOnConnectionFailedListener(this) .build(); } 	0	0	0	0	0	1
public Boolean isValidVera() { if(this.getVeraAddress() == null) return false; List<NamedIP> devicesList = this.getVeraAddress().getDevices(); if(devicesList.get(0).getIp().contains(Configuration.DEFAULT_ADDRESS)) return false; return true; } 	0	0	1	0	1	0
"private Future doDelete(Api api) { String path = String.format(""/%s/apis/%s/%s/%s"", endpoint.getPath(), api.getOrganizationId(), api.getApiId(), api.getVersion()); Future future = Future.future();  HttpClientRequest deleteReq = httpClient.delete(endpoint.getPort(), endpoint.getHost(), path, response -> { if ((response.statusCode() / 100) == 2) { future.succeeded(); } else { future.fail(response.statusMessage()); // TODO do something more interesting } }).exceptionHandler(future::fail);  auth.setAuth(deleteReq); deleteReq.end(); return future; } "	0	0	1	0	1	0
"private List<RadarIssue> getIssues(UserCredentials userCredentials, IssueQuery query) { try{ SonarClient sonarClient = createSonarClient(userCredentials); IssueClient issueClient = sonarClient.issueClient(); List<RadarIssue> issues=new LinkedList<>(); Map<String, Rule> rulesCache=new HashMap<>(); Issues result; int pageIndex=1; do{ query.pageIndex(pageIndex); result = issueClient.find(query); for(Issue issue:result.list()) { Rule rule=searchInCacheOrLoadFromServer(rulesCache, issue.ruleKey(), userCredentials); if(rule == null){ throw new IllegalStateException(""No such rule in server: ""+issue.ruleKey()); } issues.add(new RadarIssue(issue, rule)); } pageIndex++; }while(pageIndex <= result.paging().pages()); return issues; }catch(HttpException ex) { if(ex.status() == UNAUTHORIZED_RESPONSE_STATUS){ throw new AuthorizationException(ex); }else{ throw ex; } } } "	1	0	1	0	0	0
protected BlockExecutionInfo getBlockExecutionInfoForBlock(QueryModel queryModel, AbstractIndex blockIndex) throws QueryExecutionException { BlockExecutionInfo blockExecutionInfo = new BlockExecutionInfo(); SegmentProperties segmentProperties = blockIndex.getSegmentProperties(); List<CarbonDimension> tableBlockDimensions = segmentProperties.getDimensions(); KeyGenerator blockKeyGenerator = segmentProperties.getDimensionKeyGenerator();  // below is to get only those dimension in query which is present in the // table block List<QueryDimension> updatedQueryDimension = RestructureUtil .getUpdatedQueryDimension(queryModel.getQueryDimension(), tableBlockDimensions); // TODO add complex dimension children int[] maskByteRangesForBlock = QueryUtil.getMaskedByteRange(updatedQueryDimension, blockKeyGenerator); int[] maksedByte = QueryUtil.getMaskedByte(blockKeyGenerator.getKeySizeInBytes(), maskByteRangesForBlock); blockExecutionInfo.setDimensionsExistInQuery(updatedQueryDimension.size() > 0); blockExecutionInfo.setDataBlock(blockIndex); blockExecutionInfo.setBlockKeyGenerator(blockKeyGenerator); // adding aggregation info for query blockExecutionInfo.setAggregatorInfo(getAggregatorInfoForBlock(queryModel, blockIndex)); // adding custom aggregate expression of query blockExecutionInfo.setCustomAggregateExpressions(queryModel.getExpressions());  // setting the limit blockExecutionInfo.setLimit(queryModel.getLimit()); // setting whether detail query or not blockExecutionInfo.setDetailQuery(queryModel.isDetailQuery()); // setting whether raw record query or not blockExecutionInfo.setRawRecordDetailQuery(queryModel.isForcedDetailRawQuery()); // setting the masked byte of the block which will be // used to update the unpack the older block keys blockExecutionInfo.setMaskedByteForBlock(maksedByte); // total number dimension blockExecutionInfo .setTotalNumberDimensionBlock(segmentProperties.getDimensionOrdinalToBlockMapping().size()); blockExecutionInfo .setTotalNumberOfMeasureBlock(segmentProperties.getMeasuresOrdinalToBlockMapping().size()); // to check whether older block key update is required or not blockExecutionInfo.setFixedKeyUpdateRequired( blockKeyGenerator.equals(queryProperties.keyStructureInfo.getKeyGenerator())); IndexKey startIndexKey = null; IndexKey endIndexKey = null; if (null != queryModel.getFilterExpressionResolverTree()) { // loading the filter executer tree for filter evaluation blockExecutionInfo.setFilterExecuterTree(FilterUtil .getFilterExecuterTree(queryModel.getFilterExpressionResolverTree(), segmentProperties)); List<IndexKey> listOfStartEndKeys = new ArrayList<IndexKey>(2); FilterUtil.traverseResolverTreeAndGetStartAndEndKey(segmentProperties, queryModel.getAbsoluteTableIdentifier(), queryModel.getFilterExpressionResolverTree(), listOfStartEndKeys); startIndexKey = listOfStartEndKeys.get(0); endIndexKey = listOfStartEndKeys.get(1); } else { try { startIndexKey = FilterUtil.prepareDefaultStartIndexKey(segmentProperties); endIndexKey = FilterUtil.prepareDefaultEndIndexKey(segmentProperties); } catch (KeyGenException e) { throw new QueryExecutionException(e); } } blockExecutionInfo.setFileType( FileFactory.getFileType(queryModel.getAbsoluteTableIdentifier().getStorePath())); //setting the start index key of the block node blockExecutionInfo.setStartKey(startIndexKey); //setting the end index key of the block node blockExecutionInfo.setEndKey(endIndexKey); // expression dimensions List<CarbonDimension> expressionDimensions = new ArrayList<CarbonDimension>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE); // expression measure List<CarbonMeasure> expressionMeasures = new ArrayList<CarbonMeasure>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE); // to get all the dimension and measure which required to get the chunk // indexes to be read from file QueryUtil.extractDimensionsAndMeasuresFromExpression(queryModel.getExpressions(), expressionDimensions, expressionMeasures); // setting all the dimension chunk indexes to be read from file blockExecutionInfo.setAllSelectedDimensionBlocksIndexes(QueryUtil .getDimensionsBlockIndexes(updatedQueryDimension, segmentProperties.getDimensionOrdinalToBlockMapping(), queryModel.getDimAggregationInfo(), expressionDimensions)); // setting all the measure chunk indexes to be read from file blockExecutionInfo.setAllSelectedMeasureBlocksIndexes(QueryUtil .getMeasureBlockIndexes(queryModel.getQueryMeasures(), expressionMeasures, segmentProperties.getMeasuresOrdinalToBlockMapping())); // setting the key structure info which will be required // to update the older block key with new key generator blockExecutionInfo.setKeyStructureInfo(queryProperties.keyStructureInfo); // setting the size of fixed key column (dictionary column) blockExecutionInfo.setFixedLengthKeySize(getKeySize(updatedQueryDimension, segmentProperties)); Set<Integer> dictionaryColumnBlockIndex = new HashSet<Integer>(); List<Integer> noDictionaryColumnBlockIndex = new ArrayList<Integer>(); // get the block index to be read from file for query dimension // for both dictionary columns and no dictionary columns QueryUtil.fillQueryDimensionsBlockIndexes(updatedQueryDimension, segmentProperties.getDimensionOrdinalToBlockMapping(), dictionaryColumnBlockIndex, noDictionaryColumnBlockIndex); int[] queryDictionaruColumnBlockIndexes = ArrayUtils.toPrimitive( dictionaryColumnBlockIndex.toArray(new Integer[dictionaryColumnBlockIndex.size()])); // need to sort the dictionary column as for all dimension // column key will be filled based on key order Arrays.sort(queryDictionaruColumnBlockIndexes); blockExecutionInfo.setDictionaryColumnBlockIndex(queryDictionaruColumnBlockIndexes); // setting the no dictionary column block indexes blockExecutionInfo.setNoDictionaryBlockIndexes(ArrayUtils.toPrimitive( noDictionaryColumnBlockIndex.toArray(new Integer[noDictionaryColumnBlockIndex.size()]))); // setting column id to dictionary mapping blockExecutionInfo.setColumnIdToDcitionaryMapping(queryProperties.columnToDictionayMapping); // setting each column value size blockExecutionInfo.setEachColumnValueSize(segmentProperties.getEachDimColumnValueSize()); blockExecutionInfo.setDimensionAggregator(QueryUtil .getDimensionDataAggregatorList1(queryModel.getDimAggregationInfo(), segmentProperties.getDimensionOrdinalToBlockMapping(), segmentProperties.getColumnGroupAndItsKeygenartor(), queryProperties.columnToDictionayMapping)); try { // to set column group and its key structure info which will be used // to // for getting the column group column data in case of final row // and in case of dimension aggregation blockExecutionInfo.setColumnGroupToKeyStructureInfo( QueryUtil.getColumnGroupKeyStructureInfo(updatedQueryDimension, segmentProperties)); } catch (KeyGenException e) { throw new QueryExecutionException(e); } return blockExecutionInfo; } 	1	0	1	0	0	0
"private void verifyNoLogMessage(String logLevel, List<LogMessage> messages, LogMessage logMessage) { LogMessage foundMessage = findFirstMessageMatching(messages, logMessage.message, null); assertNull( String.format(""found log message, expected not to"", logLevel, logMessage.message) , foundMessage ); } "	0	0	0	1	1	0
public static void promote(ExprContext elem, Type targetType) { if (elem.exprType != null ) {  // elem.exprType may not be known int selfIndex = elem.exprType.getTypeIndex(); elem.promoteToType = equalityPromoteFromTo[selfIndex][targetType.getTypeIndex()]; } } 	0	0	0	1	0	0
"public static void readInputFromHtml(final Reader in, Map<String, String> map, String... desiredNames) throws IOException, XmlPullParserException { try { final XmlPullParserFactory f = XmlPullParserFactory.newInstance(); final XmlPullParser parser = f.newPullParser(); parser.setFeature(Xml.FEATURE_RELAXED, true); parser.setInput(in); while (parser.next() != XmlPullParser.END_DOCUMENT) { final String tag = parser.getName(); switch (parser.getEventType()) { case XmlPullParser.START_TAG: { final String name = parser.getAttributeValue(null, ""name""); if (""input"".equalsIgnoreCase(tag) && ArrayUtils.contains(desiredNames, name)) { map.put(name, parser.getAttributeValue(null, ""value"")); } break; } } } } finally { if (in != null) in.close(); } } "	0	0	1	0	0	0
"private List<Integer> saveReportAndUpdateCGDForSingleMatch(Map<Integer, BibItem> bibItemMap, String matchPointString, List<Integer> serialMvmBibIds) { List<ReportDataEntity> reportDataEntities = new ArrayList<>(); Set<String> owningInstSet = new HashSet<>(); Set<String> materialTypeSet = new HashSet<>(); List<Integer> bibIds = new ArrayList<>(); List<String> owningInstList = new ArrayList<>(); List<String> materialTypeList = new ArrayList<>(); Map<String,String> titleMap = new HashMap<>(); List<String> owningInstBibIds = new ArrayList<>(); List<Integer> itemIds = new ArrayList<>(); List<String> criteriaValues = new ArrayList<>(); List<ReportEntity> reportEntitiesToSave = new ArrayList<>();  int index=0; for (Iterator<Integer> iterator = bibItemMap.keySet().iterator(); iterator.hasNext(); ) { Integer bibId = iterator.next(); BibItem bibItem = bibItemMap.get(bibId); owningInstSet.add(bibItem.getOwningInstitution()); owningInstList.add(bibItem.getOwningInstitution()); owningInstBibIds.add(bibItem.getOwningInstitutionBibId()); bibIds.add(bibId); materialTypeList.add(bibItem.getLeaderMaterialType()); materialTypeSet.add(bibItem.getLeaderMaterialType()); if(matchPointString.equalsIgnoreCase(RecapConstants.OCLC_NUMBER)) { criteriaValues.addAll(bibItem.getOclcNumber()); } else if(matchPointString.equalsIgnoreCase(RecapConstants.ISBN_CRITERIA)) { criteriaValues.addAll(bibItem.getIsbn()); } else if(matchPointString.equalsIgnoreCase(RecapConstants.ISSN_CRITERIA)) { criteriaValues.addAll(bibItem.getIssn()); } else if(matchPointString.equalsIgnoreCase(RecapConstants.LCCN_CRITERIA)) { criteriaValues.add(bibItem.getLccn()); } index = index + 1; if(StringUtils.isNotBlank(bibItem.getTitleSubFieldA())) { String titleHeader = RecapConstants.TITLE + index; matchingAlgorithmUtil.getReportDataEntity(titleHeader, bibItem.getTitleSubFieldA(), reportDataEntities); titleMap.put(titleHeader, bibItem.getTitleSubFieldA()); } }  if(owningInstSet.size() > 1) { ReportEntity reportEntity = new ReportEntity(); String fileName = RecapConstants.ONGOING_MATCHING_ALGORITHM; reportEntity.setFileName(fileName); reportEntity.setInstitutionName(RecapConstants.ALL_INST); reportEntity.setCreatedDate(new Date()); if(materialTypeSet.size() == 1) { Set<String> unMatchingTitleHeaderSet = matchingAlgorithmUtil.getMatchingAndUnMatchingBibsOnTitleVerification(titleMap); if(CollectionUtils.isNotEmpty(unMatchingTitleHeaderSet)) {  reportEntitiesToSave.add(processCGDAndReportsForUnMatchingTitles(fileName, titleMap, bibIds, materialTypeList, owningInstList, owningInstBibIds, StringUtils.join(criteriaValues, "",""), unMatchingTitleHeaderSet, matchPointString)); } reportEntity.setType(RecapConstants.SINGLE_MATCH); try { itemIds = updateCGDBasedOnMaterialTypes(reportEntity, bibIds, materialTypeList, materialTypeSet, serialMvmBibIds); } catch (Exception e) { logger.error(RecapConstants.LOG_ERROR,e); } } else { reportEntity.setType(RecapConstants.MATERIAL_TYPE_EXCEPTION); } matchingAlgorithmUtil.getReportDataEntityList(reportDataEntities, owningInstList, bibIds, materialTypeList, owningInstBibIds); matchingAlgorithmUtil.getReportDataEntity(matchPointString, StringUtils.join(criteriaValues, "",""), reportDataEntities); reportEntity.addAll(reportDataEntities); reportEntitiesToSave.add(reportEntity); producerTemplate.sendBody(""scsbactivemq:queue:saveMatchingReportsQ"", reportEntitiesToSave); } return itemIds; } "	0	0	0	0	0	1
"public ReportEntity processCGDAndReportsForUnMatchingTitles(String fileName, Map<String, String> titleMap, List<Integer> bibIds, List<String> materialTypes, List<String> owningInstitutions, List<String> owningInstBibIds, String matchPointValue, Set<String> unMatchingTitleHeaderSet, String matchPointString) { ReportEntity unMatchReportEntity = new ReportEntity(); unMatchReportEntity.setType(""TitleException""); unMatchReportEntity.setCreatedDate(new Date()); unMatchReportEntity.setInstitutionName(RecapConstants.ALL_INST); unMatchReportEntity.setFileName(fileName); List<ReportDataEntity> reportDataEntityList = new ArrayList<>(); List<String> bibIdList = new ArrayList<>(); List<String> materialTypeList = new ArrayList<>(); List<String> owningInstitutionList = new ArrayList<>(); List<String> owningInstBibIdList = new ArrayList<>();  matchingAlgorithmUtil.prepareReportForUnMatchingTitles(titleMap, bibIds, materialTypes, owningInstitutions, owningInstBibIds, unMatchingTitleHeaderSet, reportDataEntityList, bibIdList, materialTypeList, owningInstitutionList, owningInstBibIdList);  List<Integer> bibliographicIds = new ArrayList<>(); for (Iterator<String> iterator = bibIdList.iterator(); iterator.hasNext(); ) { String bibId = iterator.next(); bibliographicIds.add(Integer.valueOf(bibId)); } matchingAlgorithmUtil.getReportDataEntityList(reportDataEntityList, owningInstitutionList, bibIdList, materialTypeList, owningInstBibIdList); matchingAlgorithmUtil.getReportDataEntity(matchPointString, matchPointValue, reportDataEntityList); unMatchReportEntity.addAll(reportDataEntityList); return unMatchReportEntity; } "	0	0	0	0	0	1
"public void commit() { if (committed) { throw new RCUtils.RRContextException(name + "" > already committed!""); } committed = true;  int commitSize = effects.size(); if (commitSize == 0) { return; } logger.info(name + "" > Committing "" + effects.size() + "" effects""); Iterator<Runnable> it = effects.iterator(); while (it.hasNext()) { Runnable eff = it.next(); eff.run(); it.remove(); } delegates.forEach(d -> d.commit()); } "	0	0	1	0	1	0
private List<Change> submitWholeTopic(RevisionResource rsrc, IdentifiedUser caller, boolean force, String topic) throws ResourceConflictException, OrmException, IOException { Preconditions.checkNotNull(topic); final Timestamp timestamp = TimeUtil.nowTs();  ReviewDb db = dbProvider.get(); ChangeData cd = changeDataFactory.create(db, rsrc.getControl());  List<ChangeData> changesByTopic = queryProvider.get().byTopicOpen(topic); String problems = problemsForSubmittingChanges(changesByTopic, caller); if (problems != null) { throw new ResourceConflictException(problems); }  Change change = rsrc.getChange(); ChangeUpdate update = updateFactory.create(rsrc.getControl(), timestamp);  List<SubmitRecord> submitRecords = checkSubmitRule(cd, rsrc.getPatchSet(), force); update.submit(submitRecords);  db.changes().beginTransaction(change.getId()); try { for (ChangeData c : changesByTopic) { BatchMetaDataUpdate batch = approve(c.currentPatchSet().getId(), c.changeControl(), update, caller, timestamp); // Write update commit after all normalized label commits. batch.write(update, new CommitBuilder()); submitToDatabase(db, c.getId(), timestamp); } db.commit(); } finally { db.rollback(); } List<Change.Id> ids = new ArrayList<>(changesByTopic.size()); List<Change> ret = new ArrayList<>(changesByTopic.size()); for (ChangeData c : changesByTopic) { ids.add(c.getId()); ret.add(c.change()); } indexer.indexAsync(ids).checkedGet();  return ret; } 	0	0	1	0	1	0
"@Override public void exec(CommandConfigure config) { Recorder rec = config.getRecorder(); Production p = config.getProduction(config.StartingPoint); if(p == null) { ConsoleUtils.exit(1, ""undefined nonterminal: "" + config.StartingPoint); } p.record(rec); while(config.hasInput()) { SourceContext file = config.getInputSourceContext(); Transformer trans = config.getTransformer(); file.start(rec); Node node = p.parse(file, trans.newNode()); file.done(rec); if(node == null) { ConsoleUtils.println(file.getSyntaxErrorMessage()); continue; } if(file.hasUnconsumed()) { ConsoleUtils.println(file.getUnconsumedMessage()); } if(rec != null) { rec.log(); } trans.transform(config.getOutputFileName(file), node); String outputfile = config.getOutputFileName(); if (outputfile == null) { outputfile = file.getResourceName() + "".nez""; int index = outputfile.indexOf(""/""); while(index > -1) { outputfile = outputfile.substring(index+1); index = outputfile.indexOf(""/""); } outputfile = ""gen/"" + outputfile; } GrammarConverter conv = loadConverter(new Grammar(file.getResourceName())); conv.convert((AST) node); } } "	1	0	0	0	1	0
"@Override public File getOutputDirectory() { return new File(params.getOutputDirectory() + File.pathSeparator +  ""build""); } "	0	0	1	0	1	0
"@Test public void testCheckVariantExistsDoesExist() throws URISyntaxException { assertTrue(testCheckVariantExistsHelper(""20:71822:C:G"")); } "	0	0	1	0	0	0
"void populateField(final Object target, final Field field, final RandomizationContext context) throws IllegalAccessException { Randomizer<?> randomizer = randomizerProvider.getRandomizerByField(field); if (randomizer instanceof SkipRandomizer) { return; } context.pushStackItem(new RandomizationContextStackItem(target, field)); if(!context.hasExceededRandomizationDepth()) { Object value; if (randomizer != null) { value = randomizer.getRandomValue(); } else { try { value = generateRandomValue(field, context); } catch (ObjectGenerationException e) { String exceptionMessage = String.format(""Unable to create type: %s for field: %s of class: %s"", field.getType().getName(), field.getName(), target.getClass().getName()); throw new ObjectGenerationException(exceptionMessage, e); } } setProperty(target, field, value); } context.popStackItem(); } "	0	0	1	0	1	0
"protected void checkIsUpToDate(boolean upToDate) throws IOException { checkTaskIsUpToDate(""spotlessCheck"", upToDate); } "	0	0	1	0	1	0
"@Test public void shouldPollAndFailWhenConditionNotMetAfter5Retries() {  final String responseConditionMet = ""Condition Met""; final String responseConditionNotMet = ""Condition not Met"";  when(restClient.query(URL, MEDIA_TYPE)).thenReturn(response); when(response.getStatus()).thenReturn(NOT_FOUND.getStatusCode()); when(response.readEntity(String.class)).thenReturn(responseConditionNotMet);  expectedException.expect(AssertionError.class); expectedException.expectMessage(EXPECTED_MESSAGE_404);  poller.pollUntilFoundWithCondition(URL, MEDIA_TYPE, DELAY_IN_MILLIS, response -> response.equals(responseConditionMet)); } "	0	0	1	1	1	0
"public void open(FileObject file) { try { boolean tailing = true; // Do not tail for http(s) if (file.getName().getScheme().startsWith(""http"")) { tailing = false; } final LoadingInfo openFileObject = Utils.openFileObject(file, tailing);  LogImporter importer = chooseImporter(openFileObject); if (isInvalid(importer)) { handleInvalidImporter(file); return; }  final LogViewPanelWrapper panel = createPanelForLog(file, openFileObject, importer); otrosApplication.addClosableTab(getTabName(file), file.getName().getFriendlyURI(), Icons.FOLDER_OPEN, panel, true); startThreadToImportLogDataFromFile(file, openFileObject, importer, panel); } catch (Exception e1) { LOGGER.error(""Error loading log ("" + file.getName().getFriendlyURI() + ""): "" + e1.getMessage()); JOptionPane.showMessageDialog(null, ""Error loading log: "" + e1.getMessage(), ""Error"", JOptionPane.ERROR_MESSAGE); } } "	0	0	1	1	1	0
public boolean isPresentIn(int config) { return (config & flag) == flag; } 	0	0	0	1	0	0
public static void begin_program() { // Crée le fichier en utilisant * le nom fourni en début de programme //                              * l'extension du language utilisé Yaka.yvm = new YVMasm(YakaTokenManager.identLu+Yaka.yvm.getFileExtension()); Yaka.expression = new Expression(Yaka.yvm); Yaka.yvm.entete(); } 	0	0	1	0	1	0
"@RequestMapping( value=""/locations"", method=RequestMethod.GET, produces={ ""application/json"" } ) @ResponseStatus(value = HttpStatus.OK) public List<PlayerNameAndLocationResponse> getAllPlayerLocations() {  log.debug(""Mapped GET /player/locations"");  List<PlayerNameAndLocationResponse> playerResponseList = new ArrayList<PlayerNameAndLocationResponse>();  List<Player> playerList = playerRegistry.getAllPlayers();  if(playerList != null) { for(Player player : playerList) {  String objectString = JsonUtils.objectToJson(player); if(objectString != null) { log.trace(""Processing Player: {}"", objectString); }  PlayerNameAndLocationResponse playerResponse = new PlayerNameAndLocationResponse(); playerResponse.setName(player.getName()); playerResponse.setLocation(player.getLocation());  playerResponseList.add(playerResponse); } }  String objectString = JsonUtils.objectToJson(playerResponseList); if(objectString != null) { log.debug(""Returning Player response list: {}"", objectString); }  return playerResponseList; } "	0	0	1	0	1	0
"public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {  HttpServletRequest request = (HttpServletRequest) req;  if (!WebloggerContext.isBootstrapped() && !isInstallUrl(request.getRequestURI())) { log.debug(""Forwarding to install page""); // install page will check database connectivity & schema status and bootstrap if all OK. RequestDispatcher rd = context.getRequestDispatcher(""/tb-ui/install/install.rol""); rd.forward(req, res); } else { chain.doFilter(request, res); } } "	0	0	0	1	1	0
@Override public int hashCode() { return new HashCodeBuilder(17, 37).append(getCode()).append(getDescription()).append(lisCode).hashCode(); } 	0	0	0	1	1	0
"@Test public void testPar4FlatMap() { Task<?> task = Task.par(Task.value(1), Task.value(2), Task.value(3), Task.value(4)).flatMap((a, b, c, d) -> Task.value(a + b + c + d));  runAndWait(""TestTaskFactoryMethods.testPar4FlatMap"", task); assertEquals((int)task.get(), 1 + 2 + 3 + 4);  assertEquals(countTasks(task.getTrace()), 2 + 3 + 4); } "	1	0	0	1	1	0
"@Test public void testPar4FlatMapDsc() { Task<?> task = Task.par(Task.value(1), Task.value(2), Task.value(3), Task.value(4)).flatMap(""test"", (a, b, c, d) -> Task.value(a + b + c + d));  runAndWait(""TestTaskFactoryMethods.testPar4FlatMapDsc"", task); assertEquals((int)task.get(), 1 + 2 + 3 + 4);  assertEquals(countTasks(task.getTrace()), 2 + 3 + 4); } "	0	0	1	1	1	0
"@Test public void testPar9FlatMap() { Task<?> task = Task.par(Task.value(1), Task.value(2), Task.value(3), Task.value(4), Task.value(5), Task.value(6), Task.value(7), Task.value(8), Task.value(9)) .flatMap((a, b, c, d, e, f, g, h, i) -> Task.value(a + b + c + d + e + f + g + h + i));  runAndWait(""TestTaskFactoryMethods.testPar9FlatMap"", task); assertEquals((int)task.get(), 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9);  assertEquals(countTasks(task.getTrace()), 2 + 3 + 9); } "	1	0	1	1	0	0
"private void processBlock(Block m) { if (log.isDebugEnabled()) { log.debug(""{}: Received broadcast block {}"", getAddress(), m.getHashAsString()); } // Was this block requested by getBlock()? if (maybeHandleRequestedData(m)) return; if (blockChain == null) { log.debug(""Received block but was not configured with an AbstractBlockChain""); return; } // Did we lose download peer status after requesting block data? if (!vDownloadData) { log.debug(""{}: Received block we did not ask for: {}"", getAddress(), m.getHashAsString()); return; } pendingBlockDownloads.remove(m.getHash()); try { // Otherwise it's a block sent to us because the peer thought we needed it, so add it to the block chain. if (blockChain.add(m)) { // The block was successfully linked into the chain. Notify the user of our progress. invokeOnBlocksDownloaded(m, null); } else { // This block is an orphan - we don't know how to get from it back to the genesis block yet. That // must mean that there are blocks we are missing, so do another getblocks with a new block locator // to ask the peer to send them to us. This can happen during the initial block chain download where // the peer will only send us 500 at a time and then sends us the head block expecting us to request // the others. // // We must do two things here: // (1) Request from current top of chain to the oldest ancestor of the received block in the orphan set // (2) Filter out duplicate getblock requests (done in blockChainDownloadLocked). // // The reason for (1) is that otherwise if new blocks were solved during the middle of chain download // we'd do a blockChainDownloadLocked() on the new best chain head, which would cause us to try and grab the // chain twice (or more!) on the same connection! The block chain would filter out the duplicates but // only at a huge speed penalty. By finding the orphan root we ensure every getblocks looks the same // no matter how many blocks are solved, and therefore that the (2) duplicate filtering can work. // // We only do this if we are not currently downloading headers. If we are then we don't want to kick // off a request for lots more headers in parallel. lock.lock(); try { if (downloadBlockBodies) { final Block orphanRoot = checkNotNull(blockChain.getOrphanRoot(m.getHash())); blockChainDownloadLocked(orphanRoot.getHash()); } else { log.info(""Did not start chain download on solved block due to in-flight header download.""); } } finally { lock.unlock(); } } } catch (VerificationException e) { // We don't want verification failures to kill the thread. log.warn(""{}: Block verification failed"", getAddress(), e); } catch (PrunedException e) { // Unreachable when in SPV mode. throw new RuntimeException(e); } } "	0	0	0	1	0	0
"public PromoteResult computePromoteDeployResult(EnvironBean currEnvBean, DeployBean currDeployBean, int size, PromoteBean promoteBean) throws Exception { String precededStage = promoteBean.getPred_stage(); // Special case when there is no preceded environment EnvironBean precededEnvBean = environDAO.getByStage(currEnvBean.getEnv_name(), precededStage); if (precededEnvBean == null) { LOG.warn(""Pred env {}/{} does not exist, bail out!"", currEnvBean.getEnv_name(), precededStage); return new PromoteResult().withResultCode(PromoteResult.ResultCode.NoPredEnvironment); }  String predDeployId = precededEnvBean.getDeploy_id(); if (predDeployId == null) { LOG.debug(""Pred env {}/{} does not have deploy yet, bail out!"", currEnvBean.getEnv_name(), precededStage); return new PromoteResult() .withResultCode(PromoteResult.ResultCode.NoPredEnvironmentDeploy); }  long endTime = Long.MAX_VALUE; String schedule = promoteBean.getSchedule(); if (!StringUtils.isEmpty(schedule)) { Pair<Boolean, Long> scheduleResult = getScheduleCheckResult(currEnvBean, currDeployBean, promoteBean);  if (!scheduleResult.getLeft()) { return new PromoteResult() .withResultCode(PromoteResult.ResultCode.NotInScheduledTime); } endTime = scheduleResult.getRight(); }  //Get the start time to find a deploy in preceded environment. If current deploy is promoted //from preceded environment, use the last promoted deploy startDate in preceded // environment. //Otherwise (current deploy is not promoted from preceded environment), use the current // deploy // startDate long currentDeployDate = getCurrentDeployStartDate(currDeployBean, precededEnvBean, currEnvBean);  DeployBean precededDeployBean; if (promoteBean.getDelay() != 0) { long before = Math.min(System.currentTimeMillis() - promoteBean.getDelay() * 60 * 1000, endTime); precededDeployBean = getDeployCandidateDelayed(precededEnvBean.getEnv_id(), new Interval(currentDeployDate, before)); if (precededDeployBean == null) { LOG.debug(""Could not find any deploy candidate within delay period for {}/{}"", precededEnvBean.getEnv_name(), precededEnvBean.getStage_name()); return new PromoteResult() .withResultCode(PromoteResult.ResultCode.NoCandidateWithinDelayPeriod); } Long count = deployDAO.countNonRegularDeploys(precededEnvBean.getEnv_id(), precededDeployBean.getStart_date()); if (count != 0) { LOG.debug(""not deploying due to nonregular deploy in delay period for {}/{}"", precededEnvBean.getEnv_name(), precededEnvBean.getStage_name()); return new PromoteResult() .withResultCode(PromoteResult.ResultCode.NoRegularDeployWithinDelayPeriod); } } else { precededDeployBean = getDeployCandidateDelayed(precededEnvBean.getEnv_id(), new Interval(currentDeployDate, endTime)); }  if (precededDeployBean != null) { return new PromoteResult().withResultCode(PromoteResult.ResultCode.PromoteDeploy) .withPredDeployBean(precededDeployBean, precededEnvBean); } else { return new PromoteResult() .withResultCode(PromoteResult.ResultCode.NoCandidateWithinDelayPeriod); } } "	0	0	1	0	0	0
@Override public int hashCode() { return (Integer.hashCode(x) << 16) | (Integer.hashCode(z) >> 16); } 	0	0	1	0	1	0
"private static double averageColumn(double[][] arrayOfArrays, int columnIndex) { double sum = 0; int count = 0; StringBuilder values = new StringBuilder(); for (double[] array : arrayOfArrays) { double value = array[columnIndex];  values.append(value).append(' '); if (Math.abs(value - NA) < EPSILON) { continue; } sum += value; count++; } // omit calculation if no data points double average = count == 0 ? NA : (double) (sum / count);  String logMessage = ""Average("" + values.toString().trim() + "") = "" + average; log.fine(replaceMagicNumbers(logMessage));  return average; } "	1	0	0	0	1	0
@Override public int getProblemSeverity() { if (container == null) return SEVERITY_NONE;  try { return container.findMaxProblemSeverity(IMarker.PROBLEM, true, IResource.DEPTH_ONE); } catch (CoreException e) { return SEVERITY_NONE; } } 	0	0	1	0	0	0
"@Override public void generate(Random random, int chunkX, int chunkZ, World world, IChunkGenerator chunkGenerator, IChunkProvider chunkProvider) {  int dim = world.provider.getDimension(); if(dim == 0) { if(random.nextFloat() < 0.005f) { BlockPos position = getTopBlock(world, new BlockPos(chunkX * 16, 1, chunkZ * 16).add(random.nextInt(16), 0, random.nextInt(16)).add(-3, -1, -3)).down(); loadStructure(world, ""shrine"", position); position = position.add(3, 1, 3); world.setBlockState(position, Blocks.CHEST.getDefaultState().withProperty(BlockChest.FACING, EnumFacing.HORIZONTALS[random.nextInt(4)]), 3); if(world instanceof WorldServer) ((TileEntityChest)world.getTileEntity(position)).setInventorySlotContents(13, world.getLootTableManager().getLootTableFromLocation(HarshenLootTables.shrine).generateLootForPools(random, new LootContext(1f, (WorldServer) world, world.getLootTableManager(), null, world.getClosestPlayer(position.getX(), position.getY(), position.getZ(), Integer.MAX_VALUE, false), DamageSource.MAGIC)).get(0)); } if(chunkX == 44 && chunkZ == 44) { BlockPos position = getTopBlock(world, new BlockPos(chunkX * 16, 1, chunkZ * 16)).add(-36, -20, 1); loadStructure(world, ""harshencastlevol2"", position); new ChestGenerator(getSizeFromName(world, ""harshencastlevol2""), 0.015f, HarshenLootTables.harshen_castle).generate(world, random, position.add(1, 1, 2)); new ChestGenerator(getSizeFromName(world, ""harshencastlevol2""), 0.015f, HarshenLootTables.harshen_castle).generate(world, random, position.add(1, 5, 2)); new ChestGenerator(getSizeFromName(world, ""harshencastlevol2""), 0.015f, HarshenLootTables.harshen_castle).generate(world, random, position.add(1, 9, 2)); } oreGenerator(this.soulore, world, random, chunkX, chunkZ, 10, 0, 20); flowerGenerator(HarshenBlocks.harshen_soul_flower, world, random, chunkX, chunkZ, 15); flowerGenerator(HarshenBlocks.plant_of_gleam, world, random, chunkX, chunkZ, 15); } else if(dim == DimensionPontus.DIMENSION_ID) { oreGenerator(this.itiumOre, world, random, chunkX, chunkZ, 10, 0, 255); structureGenerator(world, random, chunkX, chunkZ, 5, ""pontus/struc1"", true, new BlockPos(26, 22, 26), new BlockPos(-8, 0, -12)); }  } "	0	0	0	0	0	1
"@Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.save: String pass = password.getText().toString(); String log = login.getText().toString(); String site = siteName.getText().toString();  if (pass != null || log != null || site != null) { PassList.Passes.add(pass); PassList.Names.add(site); PassList.Logins.add(log); Toast.makeText(getApplicationContext(), ""Saved Successfully"", Toast.LENGTH_SHORT).show();  Intent upIntent = NavUtils.getParentActivityIntent(this); if (NavUtils.shouldUpRecreateTask(this, upIntent)) { TaskStackBuilder.create(this) .addNextIntentWithParentStack(upIntent) .startActivities(); } else { NavUtils.navigateUpTo(this, upIntent); } return true; } else { Toast.makeText(getApplicationContext(), ""Can't leave blank fields"", Toast.LENGTH_SHORT).show(); return false; } case android.R.id.home: Intent upIntent = NavUtils.getParentActivityIntent(this); if (NavUtils.shouldUpRecreateTask(this, upIntent)) { TaskStackBuilder.create(this) .addNextIntentWithParentStack(upIntent) .startActivities(); } else { NavUtils.navigateUpTo(this, upIntent); } return true; } return super.onOptionsItemSelected(item); } "	0	0	1	0	1	0
"@XmlElement(name = ""dataformat"") public ArrayList<DataFormat> getSupportedDataFormats() { return this.supportedDataFormats; } "	0	0	0	1	0	0
"public void setCheckBoxFilter(String columnName, Boolean clearFirst, String... values) {  String cellXpathContst = ""//div[contains(@class, 'x-window-filterwindow')]//tr[contains(@class, 'x-grid-data-row')]//td[contains(@role, 'gridcell')]//div[text()='*']""; String cellXpath;  openFilterPanel(columnName); _test.shortWait().until(LabKeyExpectedConditions.animationIsDone(Locator.xpath(""//div[contains(@class, 'x-window-filterwindow')]//div[contains(@class, 'x-toolbar-text')][text()='"" + columnName + ""']"")));  if(clearFirst) { String allXpath = ""//div[contains(@class, 'x-window-filterwindow')]//div[contains(@class, 'x-column-header')]""; _test.shortWait().until(ExpectedConditions.elementToBeClickable(Locator.xpath(allXpath).toBy())); _test.scrollIntoView(Locator.xpath(allXpath)); _test.click(Locator.xpath(allXpath)); }  for(String val : values) { cellXpath = cellXpathContst.replaceAll(""[*]"", val); _test.shortWait().until(ExpectedConditions.elementToBeClickable(Locator.xpath(cellXpath).toBy())); _test.scrollIntoView(Locator.xpath(cellXpath)); _test.click(Locator.xpath(cellXpath)); }  applyAndWaitForGrid(new Function<Void, Void>() { @Override public Void apply(Void aVoid) { _test.click(CDSHelper.Locators.cdsButtonLocator(""filter"", ""filter-btn"")); return null; } });  } "	0	0	1	1	0	0
"@Test public void lightblueTakesLongToRespondOnRead_Timeout_NoInterrupt() throws CountryException { TimeoutConfiguration t = new TimeoutConfiguration(1000, CountryDAO.class.getSimpleName(), null); t.setInterruptOnTimeout(false); daoFacade.setTimeoutConfiguration(t);  LightblueMigrationPhase.dualReadPhase(togglzRule);  final Country pl = new Country(101l, ""PL"");  Mockito.when(legacyDAO.getCountry(""PL"")).thenReturn(pl);  // an array trick to change value of a final boolean final boolean[] wasInterrupted = {false};  Mockito.when(lightblueDAO.getCountry(Mockito.anyString())).thenAnswer(new Answer<Country>() {  @Override public Country answer(InvocationOnMock invocation) throws Throwable { try { Thread.sleep(1500); } catch (InterruptedException e) { wasInterrupted[0] = true; throw e; } return pl; }  });  Country returnedCountry = countryDAOProxy.getCountry(""PL"");  Mockito.verify(lightblueDAO).getCountry(""PL""); Mockito.verify(legacyDAO).getCountry(""PL""); Mockito.verify(consistencyChecker, Mockito.never()).checkConsistency(Mockito.any(), Mockito.any(), Mockito.anyString(), Mockito.any(MethodCallStringifier.class));  Assert.assertEquals(pl, returnedCountry); Assert.assertFalse(""Lightblue call was interrupted on timeout"", wasInterrupted[0]); } "	0	0	1	0	1	0
@NonNull @Override protected GenericRepository<String, List<Repo>> configRepository(RestWrapper restWrapper) { if (genericRepository == null) { genericRepository = new GenericRepository<>(getUserReposCache(), getCloudRepositoriesDataSource(restWrapper, sortOrder)); } return genericRepository; } 	0	0	0	0	0	1
"public JSONObject submitSubmission(UserSession userSession, JSONObject obj) throws IOException, BioStudiesClientException { String acc = accno(obj); JSONObject sbm = data(obj); JSONObject result = isGeneratedAccession(acc) ? bsclient.submitNew(sbm, userSession.getSessid()) : bsclient.submitUpdated(sbm, userSession.getSessid());  String status = result.getString(""status""); if (status.equals(""OK"")) { deleteTmpSubmission(acc, userSession); } return result; } "	0	0	1	1	1	0
public List<County> getCountiesServed() { return countiesServed; } 	0	0	1	0	0	0
"@Override public void sendTopDemandedSkillsEmail(GetPromotedEmailRequest emailRequest) throws MessagingException, IOException, TemplateException { getPromotedMailMessage.setRecipients(Message.RecipientType.TO, emailRequest.getEmail()); StringWriter stringWriter = new StringWriter(); Template template = emailRequest.getLang() == Language.vi ? getPromotedTemplateVi : getPromotedTemplateEn;  Map<String, Object> templateModel = new HashMap<>(); GetPromotedRequest getPromotedRequest = emailRequest.getGetPromotedRequest(); String configLang = ""lang_"" + emailRequest.getLang().getValue();  templateModel.put(""jobTitle"", getPromotedRequest.getJobTitle()); templateModel.put(""jobLevel"", vietnamworksConfiguration.findPath(getPromotedRequest.getJobLevelId().toString()).get(configLang).asText()); templateModel.put(""jobLevelId"", getPromotedRequest.getJobLevelId()); templateModel.put(""webBaseUrl"", webBaseUrl);  JsonNode categories = vietnamworksConfiguration.findPath(""categories""); List<String> categoryIds = categories.findValuesAsText(""category_id""); List<String> list = new ArrayList<>(); getPromotedRequest.getJobCategories().stream() .map(aLong -> aLong.toString()) .forEach(jobCategory -> list.add(categories.get(categoryIds.indexOf(jobCategory)).get(configLang).asText())); templateModel.put(""jobCategories"", list.stream().collect(Collectors.joining("" | ""))); templateModel.put(""jobCategoryIds"", list.stream().collect(Collectors.joining("","")));  GetPromotedResponse response = jobStatisticService.getTopDemandedSkillsByJobTitle(getPromotedRequest); templateModel.put(""totalJob"", response.getTotalJob()); templateModel.put(""salaryMin"", response.getSalaryMin()); templateModel.put(""salaryMax"", response.getSalaryMax()); templateModel.put(""topDemandedSkills"", response.getTopDemandedSkills()); SimpleDateFormat simpleDateFormat = emailRequest.getLang() == Language.vi ? new SimpleDateFormat(""dd/MM/yyyy"") : new SimpleDateFormat(""MM/dd/yyyy""); templateModel.put(""sentDate"", simpleDateFormat.format(new Date())); templateModel.put(""language"", emailRequest.getLang().getValue());  template.process(templateModel, stringWriter);  String emailSubject = emailRequest.getLang() == Language.vi ? getPromotedSubjectVn : getPromotedSubjectEn; emailSubject = String.format(emailSubject, getPromotedRequest.getJobTitle()); getPromotedMailMessage.setSubject(MimeUtility.encodeText(emailSubject, ""UTF-8"", null)); getPromotedMailMessage.setText(stringWriter.toString(), ""UTF-8"", ""html"");  stringWriter.flush(); mailSender.send(getPromotedMailMessage); } "	0	0	1	0	0	0
@Override float measure(ArrayNode data) { float sum = 0; float maxWidth = 0; int cardSum = 0; for (JsonNode prim : data) { List<JsonNode> rows = asList(prim); cardSum += rows.size(); float width = 0; for (JsonNode row : rows) { width += valueWidth(toString(row)); maxWidth = Math.max(maxWidth, width); } sum += rows.isEmpty() ? 1 : width / rows.size(); } averageCardinality = Math.max(1, cardSum / data.size()); float averageWidth = data.size() == 0 ? 0 : (sum / data.size());  if (maxWidth > valueDefaultWidth && maxWidth > averageWidth) { variableLength = true; } tableColumnWidth = Math.max(labelWidth(), Math.max(valueDefaultWidth, averageWidth)); if (averageCardinality == 1) { averageCardinality = (int) Math.max(1, maxWidth / tableColumnWidth); } justifiedWidth = tableColumnWidth; return tableColumnWidth; } 	1	0	1	1	1	0
private static byte[] toByteArray(final URLConnection c) throws IOException { final long length = c.getContentLengthLong(); try (InputStream inputStream = c.getInputStream()) { if (length > 0) { return IOUtils.toByteArray(inputStream, length); } else { return IOUtils.toByteArray(inputStream); } } } 	0	0	1	1	0	0
public static RecordSerializer getSerializer(final String inSerializerClass, final String schemaContent) {  try { if (inSerializerClass.equals(AVRO_SERIALIZER)) { Schema.Parser parser = new Schema.Parser(); Schema schema = parser.parse(schemaContent); return new AvroSerializer(schema); } else if (inSerializerClass.equals(JSON_SERIALIZER)) { return new JsonSerializer(); } else if (inSerializerClass.equals(KRYO_SERIALIZER)) { return new KryoSerializer(true); } else if (inSerializerClass.equals(BYTES_ARRAY_SERIALIZER)) { return new BytesArraySerializer(); } else { return new NoopSerializer(); } } catch (Exception e) { logger.log(LogLevel.DEBUG, e.toString()); return new NoopSerializer(); }  } 	0	0	1	0	1	0
"private int split(int[] values, int num_split) { try (Graph g = new Graph()) { return g.opBuilder(""Split"", ""Split"") .addInput(TestUtil.constant(g, ""split_dim"", 0)) .addInput(TestUtil.constant(g, ""values"", values)) .setAttr(""num_split"", num_split) .build() .outputListLength(""output""); } } "	0	0	0	1	0	0
"public static String extractedRelativePathFromHref(String href) { String res = href; for (String prefix : IPConstants.METS_FILE_PREFIXES_TO_ACCEPT) { if (res.startsWith(prefix)) { res = res.replace(prefix, """"); break; } } return res; } "	0	0	1	0	1	0
public static String getBaseUrl() { return BASE_URL; } 	0	0	1	0	0	0
"private void initializeOutputDestinations(){ //         @FXML ListView outputDestinationsListView; //    @FXML Button addOutputDestinationsButton; //    @FXML Button editOutputDestinationsButton; //    @FXML Button removeOutputDestinationsButton; removeOutputDestinationsButton.disableProperty().bind(outputDestinationsListView.getSelectionModel().selectedItemProperty().isNull()); editOutputDestinationsButton.disableProperty().bind(outputDestinationsListView.getSelectionModel().selectedItemProperty().isNull()); outputDestinationsListView.setItems(resultsDAO.listOutputPortals()); outputDestinationsListView.setEditable(false);  // If empty, create a default local file output if(resultsDAO.listOutputPortals().isEmpty()) { OutputPortal op = new OutputPortal(); op.setName(""Local File: "" + System.getProperty(""user.home"")); op.setBasePath(System.getProperty(""user.home"")); op.setOutputProtocol(FileTransferTypes.LOCAL);  resultsDAO.saveOutputPortal(op); }  } "	0	0	1	1	1	0
"public Boolean isValid() { if (mField.is_required) { String value = getValue(); if (value == null || value.equals("""")) { // Mandatory field return false; } }  if ((mField.data_type.equals(""numeric"")) && (!mEditText.getText().toString().equals("""")))  { try { int value = Integer.valueOf(mEditText.getText().toString()); } catch (Exception exc) { // Invalid number return false; } }   return true; } "	0	0	1	1	1	0
public TaskStats getTaskStats() { // check for end state to avoid callback ordering problems if (taskStateMachine.getState().isDone()) { DateTime now = DateTime.now(); if (executionEndTime.compareAndSet(null, now)) { lastExecutionStartTime.compareAndSet(null, now); endNanos.set(System.nanoTime()); } }  List<PipelineStats> pipelineStats = ImmutableList.copyOf(transform(pipelineContexts, PipelineContext::getPipelineStats));  long lastExecutionEndTime = 0;  int totalDrivers = 0; int queuedDrivers = 0; int queuedPartitionedDrivers = 0; int runningDrivers = 0; int runningPartitionedDrivers = 0; int completedDrivers = 0;  long totalScheduledTime = 0; long totalCpuTime = 0; long totalUserTime = 0; long totalBlockedTime = 0;  long rawInputDataSize = 0; long rawInputPositions = 0;  long processedInputDataSize = 0; long processedInputPositions = 0;  long outputDataSize = 0; long outputPositions = 0;  for (PipelineStats pipeline : pipelineStats) { if (pipeline.getLastEndTime() != null) { lastExecutionEndTime = max(pipeline.getLastEndTime().getMillis(), lastExecutionEndTime); }  totalDrivers += pipeline.getTotalDrivers(); queuedDrivers += pipeline.getQueuedDrivers(); queuedPartitionedDrivers += pipeline.getQueuedPartitionedDrivers(); runningDrivers += pipeline.getRunningDrivers(); runningPartitionedDrivers += pipeline.getRunningPartitionedDrivers(); completedDrivers += pipeline.getCompletedDrivers();  totalScheduledTime += pipeline.getTotalScheduledTime().roundTo(NANOSECONDS); totalCpuTime += pipeline.getTotalCpuTime().roundTo(NANOSECONDS); totalUserTime += pipeline.getTotalUserTime().roundTo(NANOSECONDS); totalBlockedTime += pipeline.getTotalBlockedTime().roundTo(NANOSECONDS);  if (pipeline.isInputPipeline()) { rawInputDataSize += pipeline.getRawInputDataSize().toBytes(); rawInputPositions += pipeline.getRawInputPositions();  processedInputDataSize += pipeline.getProcessedInputDataSize().toBytes(); processedInputPositions += pipeline.getProcessedInputPositions(); }  if (pipeline.isOutputPipeline()) { outputDataSize += pipeline.getOutputDataSize().toBytes(); outputPositions += pipeline.getOutputPositions(); } }  long startNanos = this.startNanos.get(); if (startNanos < createNanos) { startNanos = System.nanoTime(); } Duration queuedTime = new Duration(startNanos - createNanos, NANOSECONDS);  long endNanos = this.endNanos.get(); Duration elapsedTime; if (endNanos >= startNanos) { elapsedTime = new Duration(endNanos - createNanos, NANOSECONDS); } else { elapsedTime = new Duration(0, NANOSECONDS); }  synchronized (cumulativeMemoryLock) { double sinceLastPeriodMillis = (System.nanoTime() - lastTaskStatCallNanos) / 1_000_000.0; long currentSystemMemory = systemMemoryReservation.get(); long averageMemoryForLastPeriod = (currentSystemMemory + lastMemoryReservation) / 2; cumulativeMemory.addAndGet(averageMemoryForLastPeriod * sinceLastPeriodMillis);  lastTaskStatCallNanos = System.nanoTime(); lastMemoryReservation = currentSystemMemory; }  boolean fullyBlocked = pipelineStats.stream() .filter(pipeline -> pipeline.getRunningDrivers() > 0 || pipeline.getRunningPartitionedDrivers() > 0) .allMatch(PipelineStats::isFullyBlocked); ImmutableSet<BlockedReason> blockedReasons = pipelineStats.stream() .filter(pipeline -> pipeline.getRunningDrivers() > 0 || pipeline.getRunningPartitionedDrivers() > 0) .flatMap(pipeline -> pipeline.getBlockedReasons().stream()) .collect(ImmutableCollectors.toImmutableSet()); return new TaskStats( taskStateMachine.getCreatedTime(), executionStartTime.get(), lastExecutionStartTime.get(), lastExecutionEndTime == 0 ? null : new DateTime(lastExecutionEndTime), executionEndTime.get(), elapsedTime.convertToMostSuccinctTimeUnit(), queuedTime.convertToMostSuccinctTimeUnit(), totalDrivers, queuedDrivers, queuedPartitionedDrivers, runningDrivers, runningPartitionedDrivers, completedDrivers, cumulativeMemory.get(), new DataSize(memoryReservation.get(), BYTE).convertToMostSuccinctDataSize(), new DataSize(systemMemoryReservation.get(), BYTE).convertToMostSuccinctDataSize(), new Duration(totalScheduledTime, NANOSECONDS).convertToMostSuccinctTimeUnit(), new Duration(totalCpuTime, NANOSECONDS).convertToMostSuccinctTimeUnit(), new Duration(totalUserTime, NANOSECONDS).convertToMostSuccinctTimeUnit(), new Duration(totalBlockedTime, NANOSECONDS).convertToMostSuccinctTimeUnit(), fullyBlocked && (runningDrivers > 0 || runningPartitionedDrivers > 0), blockedReasons, new DataSize(rawInputDataSize, BYTE).convertToMostSuccinctDataSize(), rawInputPositions, new DataSize(processedInputDataSize, BYTE).convertToMostSuccinctDataSize(), processedInputPositions, new DataSize(outputDataSize, BYTE).convertToMostSuccinctDataSize(), outputPositions, pipelineStats); } 	0	0	1	1	0	0
@Override public List<? extends INodeReturn> createReturns() { return new ArrayList<NodeReturn>(); } 	0	0	1	0	1	0
@Override public List<ECodePart> getAvailableCodeParts() { return new ArrayList<ECodePart>(); } 	0	0	1	0	1	0
"public void visit(Assignment a) { Expression rhs= a.getRightHandSide();  if (rhs instanceof ClassInstanceCreation) { ClassInstanceCreation cic= (ClassInstanceCreation) rhs; if (cic.getTypeBinding().toString().equals(""java.lang.String"")) { return; } }  a.getLeftHandSide().visit(this); print("" "" + a.getOperator() + "" ""); if (VariableBinding.isBoolean(a.getLeftHandSide())) { if (NumberLiteral.isZero(rhs)) { print(""false""); } if (NumberLiteral.isOne(rhs)) { print(""true""); } else { rhs.visit(this); } } else { rhs.visit(this); } } "	0	0	0	1	0	0
public String[] getArray(){ return (String[])this.items.toArray(); } 	0	0	1	1	1	0
"public static void createSampleDataSetMergingClasses(String graphName) throws IOException, HttpException { /** The user. **/ String user = ""shensel""; /** The initial content file path **/ String initialContentFilePath = ""resources/verification/ExampleGraphClasses_initial.triples"";  // Read initial content from file to string String initialContent = DatasetGenerationManagement.readFileToString(initialContentFilePath);  // Create new example graph DatasetGenerationManagement.createNewGraph(graphName);  // Initial commit DatasetGenerationManagement.executeInsertQuery(user, ""Initial commit"", graphName, ""0"", initialContent);  // Create a new branch B1 DatasetGenerationManagement.createNewBranch(user, ""Create a new branch B1"", graphName, ""1"", ""B1"");  // Create a new branch B2 DatasetGenerationManagement.createNewBranch(user, ""Create a new branch B2"", graphName, ""1"", ""B2"");  // First commit to B1 - insert sub plant T4 String insertT4 = ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://eatld.et.tu-dresden.de/mso/Unit> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://www.w3.org/2000/01/rdf-schema#label> \""T4\""@en . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/rfid> \""E00401007837683C\""@en . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/hasEquipment> <http://eatld.et.tu-dresden.de/batch/A3A5R02ZZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/isPartOfProcessCell> <http://eatld.et.tu-dresden.de/batch/A3A5R03UZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/hasEquipment> <http://eatld.et.tu-dresden.de/batch/A3A5R06OZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/hasEquipment> <http://eatld.et.tu-dresden.de/batch/A3A5R01ZZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/comosUid> \""A3A5R07QZU\""@en . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/plantID> \""=TUDPLT.A1.T4\""@en . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/hasEquipment> <http://eatld.et.tu-dresden.de/batch/A3A5R02BZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/hasEquipment> <http://eatld.et.tu-dresden.de/batch/A3A5R1AMZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/hasEquipment> <http://eatld.et.tu-dresden.de/batch/A3A5R05NZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/hasEquipment> <http://eatld.et.tu-dresden.de/batch/A3A5R01PZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://www.w3.org/2000/01/rdf-schema#comment> \""Subplant flush\""@en . \n"";  DatasetGenerationManagement.executeInsertQuery(user, ""First commit to B1"", graphName, ""B1"", insertT4);  // Second commit to B1 - delete sub plant T4 DatasetGenerationManagement.executeDeleteWhereQuery(user, ""Second commit to B1"", graphName, ""B1"", ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> ?p ?o . \n"");  // First commit to B2 - insert sub plant T4 DatasetGenerationManagement.executeInsertQuery(user, ""First commit to B2"", graphName, ""B2"", insertT4);  // Second commit to B2 - delete armature V002 DatasetGenerationManagement.executeDeleteWhereQuery(user, ""Second commit to B2"", graphName, ""B2"", ""<http://eatld.et.tu-dresden.de/batch/A3A5R01TZU> ?p ?o . \n"");  logger.info(""Example graph created."");  } "	0	0	1	0	1	0
"@Override public void start(final Stage primaryStage) throws Exception { ClassLoader loader = ClassLoader.getSystemClassLoader(); URL logo = loader.getResource(""images/logo-desktop.png""); assert logo != null; Image image = new Image(logo.toString()); primaryStage.getIcons().add(image); primaryStage.setResizable(false); primaryStage.setTitle(""HotSLogs UploaderFX""); StormHandler stormHandler = new StormHandler(); addToTray(logo, primaryStage, stormHandler);  Flow flow = new Flow(HomeController.class); FlowHandler flowHandler = flow.createHandler(new ViewFlowContext()); ViewFlowContext flowContext = flowHandler.getFlowContext();  SimpleHttpClient httpClient = new SimpleHttpClient(); ReleaseManager releaseManager = new ReleaseManager(httpClient);  registerInContext(flowContext, stormHandler, releaseManager, setupFileHandler(stormHandler), httpClient);  DefaultFlowContainer container = new DefaultFlowContainer();  releaseManager.verifyLocalVersion(stormHandler);  StackPane pane = flowHandler.start(container); primaryStage.setScene(new Scene(pane)); primaryStage.show(); } "	1	1	1	1	0	0
private void buildTeamChart(Row row, TeamHelper teamHelper, Map<Chart, Pair<LineChartData, List<ChartAxis>>> chartData, Map<ScoutMetric<Void>, Chart> chartPool) { if (isUnsupportedDevice()) return;  Sheet sheet = row.getSheet(); int rowNum = row.getRowNum(); int lastDataCellNum = row.getSheet().getRow(0).getLastCellNum() - 2;  Chart chart = null; Pair<Integer, ScoutMetric<Void>> nearestHeader = null;  List<Row> rows = getAdjustedList(row.getSheet()); for (int i = row.getRowNum(); i >= 0; i--) { ScoutMetric metric = getMetricForScouts(mScouts.get(teamHelper), mCache.getMetricKey(rows.get(i)));  if (metric.getType() == MetricType.HEADER) { nearestHeader = Pair.create(i, metric);  Chart cachedChart = chartPool.get(metric); if (cachedChart != null) chart = cachedChart; break; } }  chartFinder: if (nearestHeader == null) { for (Chart possibleChart : chartData.keySet()) { if (possibleChart instanceof XSSFChart) { XSSFChart xChart = (XSSFChart) possibleChart; if (xChart.getGraphicFrame().getAnchor().getRow1() == Constants.SINGLE_ITEM) { nearestHeader = Pair.create(0, getMetricForChart(xChart, chartPool)); chart = xChart; break chartFinder; } } }  nearestHeader = Pair.create(0, new ScoutMetric<>(null, null, MetricType.HEADER)); }  LineChartData data; if (chart == null) { Drawing drawing = sheet.createDrawingPatriarch(); Integer headerIndex = nearestHeader.first + 1; int startChartIndex = lastDataCellNum + 3; chart = drawing.createChart( createChartAnchor(drawing, getChartRowIndex(headerIndex, new ArrayList<>(chartData.keySet())), startChartIndex, startChartIndex + 10));  LineChartData lineChartData = chart.getChartDataFactory().createLineChartData(); data = lineChartData;  ChartAxis bottomAxis = chart.getChartAxisFactory() .createCategoryAxis(AxisPosition.BOTTOM); ValueAxis leftAxis = chart.getChartAxisFactory().createValueAxis(AxisPosition.LEFT); leftAxis.setCrosses(AxisCrosses.AUTO_ZERO);  ChartLegend legend = chart.getOrCreateLegend(); legend.setPosition(LegendPosition.RIGHT);  chartData.put(chart, Pair.create(lineChartData, Arrays.asList(bottomAxis, leftAxis))); chartPool.put(nearestHeader.second, chart); } else { data = chartData.get(chart).first; }  ChartDataSource<String> categorySource = DataSources.fromStringCellRange( sheet, new CellRangeAddress(0, 0, 1, lastDataCellNum)); data.addSeries( categorySource, DataSources.fromNumericCellRange( sheet, new CellRangeAddress(rowNum, rowNum, 1, lastDataCellNum))) .setTitle(row.getCell(0).getStringCellValue()); } 	1	1	1	1	0	0
"private void explore(LineReader grammar) { int counter = 0; // We always assume a labeled grammar. Unlabeled features are assumed to be dense and to always // appear in the same order. They are assigned numeric names in order of appearance. this.types.setLabeled(true);  while (grammar.hasNext()) { String line = grammar.next().trim(); counter++; ArrayList<String> fields = new ArrayList<String>(Arrays.asList(line.split(""\\s\\|{3}\\s"")));  String lhs = null; if (line.startsWith(""["")) { // hierarchical model if (fields.size() < 4) { logger.warning(""Incomplete grammar line at line "" + counter); continue; } lhs = fields.remove(0); } else { // phrase-based model if (fields.size() < 3) { logger.warning(""Incomplete phrase line at line "" + counter); logger.warning(line); continue; } lhs = ""[X]""; }  String[] source = fields.get(0).split(""\\s""); String[] target = fields.get(1).split(""\\s""); String[] features = fields.get(2).split(""\\s"");  max_source_len = Math.max(max_source_len, source.length);  Vocabulary.id(lhs); try { /* Add symbols to vocabulary. * NOTE: In case of nonterminals, we add both stripped versions (""[X]"") * and ""[X,1]"" to the vocabulary. */ for (String source_word : source) { Vocabulary.id(source_word); if (FormatUtils.isNonterminal(source_word)) { Vocabulary.id(FormatUtils.stripNonTerminalIndex(source_word)); } } for (String target_word : target) { Vocabulary.id(target_word); if (FormatUtils.isNonterminal(target_word)) { Vocabulary.id(FormatUtils.stripNonTerminalIndex(target_word)); } } } catch (java.lang.StringIndexOutOfBoundsException e) { System.err.println(String.format(""* Skipping bad grammar line '%s'"", line)); continue; }  // Add feature names to vocabulary and pass the value through the // appropriate encoder. int feature_counter = 0; for (int f = 0; f < features.length; ++f) { if (features[f].contains(""="")) { String[] fe = features[f].split(""=""); if (fe[0].equals(""Alignment"")) continue; types.observe(Vocabulary.id(fe[0]), Float.parseFloat(fe[1])); } else { types.observe(Vocabulary.id(String.valueOf(feature_counter++)), Float.parseFloat(features[f])); } } } } "	0	0	0	0	0	1
@Override public boolean isConnected() { if (mqttService != null) return mqttService.isConnected(clientHandle); else return false; } 	1	0	1	0	1	0
"public static void main(String argv[]) throws IOException {  ItalianTokenizer tokenizer = new ItalianTokenizer();  //        byte[] file = Files.readAllBytes((new File(""/Users/alessio/Desktop/milano.txt"")).toPath()); //        String text = new String(file); String text = ""Clinton in testa nei sondaggi dopo l’«assoluzione» dell’Fbi sull’uso di un server di posta privato quando era Segretario di stato.""; //        text = ""``Determinato, pronto a «fare tutto il necessario per mantenere la stabilità dei prezzi».''"" //                + "" Ma anche allarmato per come le conseguenze del referendum britannico minacciano l’economia e i mercati europei."" //                + "" Sono nato nel 200 S.p.A."" //                + "" Il mio indirizzo e-mail è alessio@apnetwork.it."" //                + "" Il blog è http://www.ziorufus.it e mi piace molto.""; //        text = ""Questo è un test per una sigla qualsiasi tipo a.B.C. che non ha senso.""; //        text = ""Milano (/miˈlano/ ascolta[?·info], in milanese: Milan[4], /miˈlãː/[5]) è una città italiana di 1 346 153 abitanti[2], capoluogo dell'omonima città metropolitana e della regione Lombardia, secondo comune italiano per numero di abitanti, tredicesimo comune dell'Unione europea e diciannovesimo del continente e, con l'agglomerato urbano, quarta area metropolitana più popolata d'Europa dopo Londra, Madrid e Parigi[6].\n"" //                + ""\n"" //                + ""Fondata dagli Insubri all'inizio del VI secolo a.C.[7], fu conquistata dai Romani nel 222 a.C."";  //        System.out.println(text);  long time = System.currentTimeMillis(); List<List<CoreLabel>> sentences = tokenizer.parse(text); time = System.currentTimeMillis() - time;  for (int i = 0; i < Math.min(10, sentences.size()); i++) { List<CoreLabel> sentence = sentences.get(i); for (CoreLabel token : sentence) { System.out.println(token.word() + "" -- "" + token.originalText() + "" -- "" + token.beginPosition());  } System.out.println(); }  int sentenceSize = sentences.size(); int lastTokenIndex = sentences.get(sentenceSize - 1).get(sentences.get(sentenceSize - 1).size() - 1).index(); System.out.println(""Length: "" + text.length()); System.out.println(""Time: "" + time); System.out.println(""Sentences: "" + sentenceSize); System.out.println(""Tokens: "" + lastTokenIndex); } "	0	0	1	0	1	0
"public static void enable() {  if (enabled) { return; }  enabled = true;  formatter = new SimpleDateFormat(""MM-dd-yyyy_HH-mm-ss""); filePath = ""log/LogFile_"" + formatter.format(Calendar.getInstance().getTime()) + "".txt""; File file = new File(filePath);  try { if (!file.exists()) { if (!file.createNewFile()) { System.err.println(""Could not create file""); return; } } logFile = new PrintWriter(file, ""UTF-8""); logInfo(""enabled logging""); } catch	(IOException ex) { System.err.println(""IOException caught: "" + ex.getMessage()); }  } "	0	0	1	0	1	0
"private void clickFAB() { ViewPagerAdapter adapter = (ViewPagerAdapter) viewPager.getAdapter(); Fragment currentFrag = adapter.getItem(viewPager.getCurrentItem()); if (currentFrag instanceof MainActivityFragment) { //Main Fragment startActivityForResult(new Intent(this, AddItemToDB.class), ADD_ITEM_REQUEST_CODE); } else if (currentFrag instanceof CartFragment) { //Cart Fragment (Scan barcode) SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()); if (sp.getBoolean(""vision_api_use"", true)) { int code = GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(this.getApplicationContext()); if (code == ConnectionResult.SUCCESS) { Intent intent = new Intent(this, VisionApiBarcodeCameraActivity.class); startActivityForResult(intent, VISION_REQUEST_CODE); } else { //Fallback to legacy method fallbackToOldBarcodeHandling(); } } else { fallbackToOldBarcodeHandling(); } } else if (currentFrag instanceof HistoryFragment){ //TODO: Remove this else statement when FAB is removed from the fragment Snackbar.make(coordinatorLayout, ""To Remove this FAB"", Snackbar.LENGTH_SHORT).show(); } } "	0	0	1	0	1	0
@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { int widthMode = MeasureSpec.getMode(widthMeasureSpec); int widthSize = MeasureSpec.getSize(widthMeasureSpec); int heightMode = MeasureSpec.getMode(heightMeasureSpec); int heightSize = MeasureSpec.getSize(heightMeasureSpec);  int desiredWidth = getSuggestedMinimumWidth(); int width;  //Measure Width if (widthMode == MeasureSpec.EXACTLY) { //Must be this size width = widthSize; } else if (widthMode == MeasureSpec.AT_MOST) { //Can't be bigger than... width = Math.min(desiredWidth, widthSize); } else { //Be whatever you want width = desiredWidth; }  int desiredHeight = 0; int height;  if (mCryptogram != null) { // Compute the height that works for this width float offsetY = mBoxH / 4; float x = 0, y = mBoxH; for (String word : mWords) { float w = word.length() * mBoxW; if (x + w > width) { x = 0; y += mBoxH * 2 + offsetY * 2; } for (int i = 0; i < word.length(); i++) { // Box width x += mBoxW; } // Trailing space x += mBoxW; } desiredHeight = (int) (y + mBoxH + offsetY * 2); }  //Measure Height if (heightMode == MeasureSpec.EXACTLY) { //Must be this size height = heightSize; } else if (heightMode == MeasureSpec.AT_MOST) { //Can't be bigger than... height = Math.min(desiredHeight, heightSize); } else { //Be whatever you want height = desiredHeight; }  setMeasuredDimension(width, height); } 	0	0	1	0	1	0
@Override public Integer handle(ResultSet rs) throws SQLException { Integer answer = null; if (rs.next()) { answer = new Integer(rs.getInt(1)); } return answer; } 	0	0	1	0	1	0
"protected static String addressToFilename(Address mbr) { String logical_name=UUID.get(mbr); return (addressAsString(mbr) + (logical_name != null? ""."" + logical_name + SUFFIX : SUFFIX)) .replace(File.separatorChar, '-'); } "	0	0	1	0	0	0
"public static List<Product> getProductLists(String username) { List<Product> productList = new ArrayList();  // Define database variables Connection connection = null; PreparedStatement statement = null; ResultSet resultSet = null;  try { // Create StringBuilder for the query StringBuilder sb = new StringBuilder();  // Build the query sb.append(""SELECT title, description, price, type, supplierUserID, productID""); sb.append(""FROM Product ""); sb.append(""WHERE supplierUserID = '"" + username + ""' ""); sb.append(""ORDER BY productID ASC "");  // Get a connection connection = getConnection();  // Prepare statement statement = connection.prepareStatement(sb.toString());  // Execute the query resultSet = statement.executeQuery(); // Get the result while (resultSet.next()) { String title = resultSet.getString(""title""); String description = resultSet.getString(""description""); float price = resultSet.getFloat(""price""); String type = resultSet.getString(""type""); String supplierUserID = resultSet.getString(""supplierUserID""); int productID = resultSet.getInt(""productID"");  productList.add(new Product(productID, description, title, price, type, supplierUserID, null, null, 0)); } } catch (Exception ex) { // Log LogManager.getLogger(DataStorage.class).fatal(""get Product List error"", ex); } finally { safeClose(resultSet); safeClose(statement); safeClose(connection); } return productList; } "	0	0	1	0	1	0
"void processIncludeActions(Element parentElement, List<ModelAction> actions, String currResource, boolean processIncludes, Map<String, Element> menuElemCache) { // don't think any problems from local cache for actions final boolean useCache = true; final boolean cacheConsume = false;  if (processIncludes) { List<Element> actionInclElements = new ArrayList<Element>(); actionInclElements.addAll(UtilXml.childElementList(parentElement, ""include-elements"")); actionInclElements.addAll(UtilXml.childElementList(parentElement, ""include-actions"")); for (Element actionInclElement : getMergedIncludeDirectives(actionInclElements, menuLocation)) { String inclMenuName = actionInclElement.getAttribute(""menu-name""); String inclResource = actionInclElement.getAttribute(""resource""); String inclRecursive = actionInclElement.getAttribute(""recursive"");  if (""no"".equals(inclRecursive) || ""includes-only"".equals(inclRecursive) || ""extends-only"".equals(inclRecursive) || ""full"".equals(inclRecursive)) { Element inclMenuElem = loadIncludedMenu(inclMenuName, inclResource, parentElement, currResource, menuElemCache, useCache, cacheConsume);  if (inclMenuElem != null) { String nextResource; if (UtilValidate.isNotEmpty(inclResource)) { nextResource = inclResource; } else { nextResource = currResource; }  if (""extends-only"".equals(inclRecursive) || ""full"".equals(inclRecursive)) { String parentResource = inclMenuElem.getAttribute(""extends-resource""); String parentMenu = inclMenuElem.getAttribute(""extends""); if (UtilValidate.isNotEmpty(parentMenu)) { Element parentMenuElem = loadIncludedMenu(parentMenu, parentResource, inclMenuElem, currResource, menuElemCache, useCache, cacheConsume); if (parentMenuElem != null) { processIncludeActions(parentMenuElem, actions, nextResource, true, menuElemCache); } else { Debug.logError(""Failed to find (via include-actions or include-elements) parent menu definition '"" + parentMenu + ""' in resource '"" + parentResource + ""'"", module); } } }  if (""includes-only"".equals(inclRecursive) || ""full"".equals(inclRecursive)) { processIncludeActions(inclMenuElem, actions, nextResource, true, menuElemCache); } else { processIncludeActions(inclMenuElem, actions, nextResource, false, menuElemCache); } } else { Debug.logError(""Failed to find include-actions or include-elements menu definition '"" + inclMenuName + ""' in resource '"" + inclResource + ""'"", module); } } else { Debug.logError(""Unrecognized include-actions or include-elements recursive mode: "" + inclRecursive, module); } } }  // read all actions under the ""actions"" element Element actionsElement = UtilXml.firstChildElement(parentElement, ""actions""); if (actionsElement != null) { actions.addAll(ModelMenuAction.readSubActions(this, actionsElement)); } } "	0	0	1	0	1	0
@Override public boolean isServiceRegistered(ServiceConnection serviceConnection) { return this._protocolServer.getServices().contains(serviceConnection); } 	1	0	1	1	1	0
"public void updateNavName() { navigationView = (NavigationView) findViewById(R.id.nav_view); navigationView.setNavigationItemSelectedListener(this);  NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view); navigationView.setNavigationItemSelectedListener(this); View header=navigationView.getHeaderView(0); TextView name = (TextView)header.findViewById(R.id.headerName); if (name != null) { name.setText(CurrentState.getUser().getName()); Log.println(Log.ASSERT, ""GTMovies"", ""header name updated to: "" + name); } else { Log.println(Log.ERROR,""GTMovies"", ""header view null, couldn't update.""); } } "	0	0	0	1	1	0
@Override public boolean canExecute(CommandSender sender) { return (args.length == 0 && Permissions.DISABLE_SPECTATOR_MODE.grantedTo(sender)) || Permissions.CHANGE_SPECTATOR_MODE_FOR_OTHERS.grantedTo(sender); } 	0	0	1	0	1	0
@Override protected void onPostExecute(Weather weather) { mWeather = setWeather(weather); onUpdate(context, AppWidgetManager.getInstance(context), intent.getExtras().getIntArray(AppWidgetManager.EXTRA_APPWIDGET_IDS)); } 	1	0	0	0	1	0
public static synchronized void reload() { load(); } 	0	0	1	0	0	0
static String toString(ConstructorDeclaration constructor) { return ElementPrinter.toString(constructor); } 	1	0	1	1	0	0
"public void drawTooltips(@Nonnull Minecraft minecraft, int mouseX, int mouseY) { if (!isOpen()) { return; }  boolean mouseOver = isMouseOver(mouseX, mouseY); if (mouseOver && shouldShowDeleteItemTooltip(minecraft)) { String deleteItem = Translator.translateToLocal(""jei.tooltip.delete.item""); TooltipRenderer.drawHoveringText(minecraft, deleteItem, mouseX, mouseY); }  if (hovered != null) { hovered.drawTooltip(minecraft, mouseX, mouseY); }  if (configButtonHoverChecker.checkHover(mouseX, mouseY)) { String configString = Translator.translateToLocal(""jei.tooltip.config""); if (Config.isCheatItemsEnabled()) { List<String> tooltip = Arrays.asList( configString, ChatFormatting.RED + Translator.translateToLocal(""jei.tooltip.cheat.mode"") ); TooltipRenderer.drawHoveringText(minecraft, tooltip, mouseX, mouseY); } else { TooltipRenderer.drawHoveringText(minecraft, configString, mouseX, mouseY); } } } "	0	0	0	1	0	0
"private ApiResponse getJsonString(final ApiRequest request, final HttpResponse httpResponse) { String payload = null;  try { final HttpEntity entity = httpResponse.getEntity(); payload = EntityUtils.toString(entity, CHARSET);  if (!StringUtils.isBlank(payload)) { return ApiResponse.fromJson(payload); }  } catch (final Exception e) { System.out.format(""Unable to parse server's response: %s\n"", e.getMessage()); } final ApiResponse response = new ApiResponse(); response.setMessage(payload); return response; } "	0	0	1	1	1	0
"@Test public void shouldReturnAllJobs() throws IOException { // given final JobInfo firstJob = newJobInfo(create(""/test/42""), ""TEST"", (j) -> {}, fixed(ofEpochMilli(0), systemDefault())); final JobInfo secondJob = newJobInfo(create(""/test/42""), ""TEST"", (j) -> {}, fixed(ofEpochMilli(1), systemDefault())); final JobService service = mock(JobService.class); when(service.findJobs(Optional.<String>empty(), 100)).thenReturn(asList(firstJob, secondJob));  final JobsController jobsController = new JobsController(service);  // when Object job = jobsController.getJobsAsJson(null, 100);  // then assertThat(job, is(asList(representationOf(firstJob), representationOf(secondJob)))); } "	0	0	1	1	1	0
"@Test @SuppressWarnings(""unchecked"") public void shouldReturnAllJobsOfTypeAsHtml() { final JobInfo firstJob = newJobInfo(create(""/test/42""), ""SOME_TYPE"", (j) -> {}, systemDefaultZone()); final JobService service = mock(JobService.class); when(service.findJobs(Optional.of(""SOME_TYPE""), 100)).thenReturn(asList(firstJob));  final JobsController jobsController = new JobsController(service);  ModelAndView modelAndView = jobsController.getJobsAsHtml(""SOME_TYPE""); List<JobRepresentation> jobs = (List<JobRepresentation>) modelAndView.getModel().get(""jobs""); assertThat(jobs, is(asList(representationOf(firstJob)))); } "	0	0	1	0	1	0
"@Test public void apiPrettyPrint() throws Exception { final String indented = ""{\n"" + ""  \""swagger\"" : \""2.0\"",\n"" + ""  \""info\"" : {\n"";  mvc.perform(request(HttpMethod.GET, API_PATH)) .andExpect(content().string(StringStartsWith.startsWith(indented))); } "	0	0	1	1	0	0
"public static void applyPlayerStats(Player player, JSONObject stats) { try { if (ConfigValues.CAN_FLY.getBoolean() && stats.has(""can-fly"")) player.setAllowFlight(stats.getBoolean(""can-fly"")); if (ConfigValues.DISPLAY_NAME.getBoolean() && stats.has(""display-name"")) player.setDisplayName(stats.getString(""display-name"")); if (ConfigValues.EXHAUSTION.getBoolean() && stats.has(""exhaustion"")) player.setExhaustion((float) stats.getDouble(""exhaustion"")); if (ConfigValues.EXP.getBoolean() && stats.has(""exp"")) player.setExp((float) stats.getDouble(""exp"")); if (ConfigValues.FLYING.getBoolean() && stats.has(""flying"")) player.setFlying(stats.getBoolean(""flying"")); if (ConfigValues.FOOD.getBoolean() && stats.has(""food"")) player.setFoodLevel(stats.getInt(""food"")); if (ConfigValues.HEALTH.getBoolean() && stats.has(""health"")) player.setHealth(stats.getDouble(""health"")); if (ConfigValues.GAMEMODE.getBoolean() && stats.has(""gamemode"")) { if (stats.get(""gamemode"") instanceof String) { player.setGameMode(GameMode.valueOf(stats.getString(""gamemode""))); } else { int gm = stats.getInt(""gamemode""); switch (gm) { case 0: player.setGameMode(GameMode.CREATIVE); break; case 1: player.setGameMode(GameMode.SURVIVAL); break; case 2: player.setGameMode(GameMode.ADVENTURE); break; case 3: player.setGameMode(GameMode.SPECTATOR); break; } } } if (ConfigValues.LEVEL.getBoolean() && stats.has(""level"")) player.setLevel(stats.getInt(""level"")); if (ConfigValues.POTION_EFFECTS.getBoolean() && stats.has(""potion-effects"")) PotionEffectSerialization.setPotionEffects(stats.getString(""potion-effects""), player); if (ConfigValues.SATURATION.getBoolean() && stats.has(""saturation"")) player.setSaturation((float) stats.getDouble(""saturation"")); } catch (JSONException e) { e.printStackTrace(); } } "	0	0	0	0	0	1
public int getVersionName() { return versionName; } 	0	0	1	0	0	0
"public ArrayList<Integer> getRequests(int pPlayerID) { Connection con = getConnection(); Statement stmt = null; ResultSet rs = null; ArrayList<Integer> requests = new ArrayList<>(); try { rs = (stmt = con.createStatement()).executeQuery(""select requester_id from `"" + DATABASE + ""`."" + TABLE_PREFIX + ""friend_request_assignment WHERE receiver_id='"" + pPlayerID + ""'""); if (rs.next()) requests.add(rs.getInt(""requester_id"")); } catch (SQLException e) { e.printStackTrace(); } finally { close(rs, stmt); } return requests; } "	0	0	1	0	0	0
"public void displayFeed(int categoryId) { if (mOnSaveInstanceStateCalled) { Log.w(TAG, ""displayFeed() has been called after onSaveInstanceState(), this call has been supressed!""); Toast.makeText(this, ""displayFeed() has been called after onSaveInstanceState(), this call has been supressed!"", Toast.LENGTH_SHORT).show(); return; }  selectedCategoryId = categoryId; FeedListFragment feedFragment = FeedListFragment.newInstance(categoryId); FragmentManager fm = getFragmentManager();  // Clear back stack fm.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);  FragmentTransaction ft = fm.beginTransaction(); if (!Controller.isTablet) ft.addToBackStack(null); ft.replace(R.id.frame_sub, feedFragment, FeedListFragment.FRAGMENT);  // Animation if (Controller.isTablet) ft.setCustomAnimations(android.R.anim.slide_in_left, android.R.anim.fade_out, android.R.anim.fade_in, R.animator.slide_out_left); else ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);  ft.commit(); } "	0	0	0	0	0	1
"public void onPlayerDies(Player player, Player killer) { if (this.isEndGameRunning()) { return; }  BedwarsPlayerKilledEvent killedEvent = new BedwarsPlayerKilledEvent(this.getGame(), player, killer); Main.getInstance().getServer().getPluginManager().callEvent(killedEvent);  PlayerStatistic diePlayer = null; PlayerStatistic killerPlayer = null;  Iterator<SpecialItem> itemIterator = this.game.getSpecialItems().iterator(); while (itemIterator.hasNext()) { SpecialItem item = itemIterator.next(); if (!(item instanceof RescuePlatform)) { continue; }  RescuePlatform rescue = (RescuePlatform) item; if (rescue.getPlayer().equals(player)) { itemIterator.remove(); } }  Team deathTeam = this.getGame().getPlayerTeam(player); if (Main.getInstance().statisticsEnabled()) { diePlayer = Main.getInstance().getPlayerStatisticManager().getStatistic(player);  boolean onlyOnBedDestroy = Main.getInstance().getBooleanConfig(""statistics.bed-destroyed-kills"", false); boolean teamIsDead = deathTeam.isDead(this.getGame());  if ((onlyOnBedDestroy && teamIsDead) || !onlyOnBedDestroy) { diePlayer.setDeaths(diePlayer.getDeaths() + 1); diePlayer.addCurrentScore(Main.getInstance().getIntConfig(""statistics.scores.die"", 0)); }  if (killer != null) { if ((onlyOnBedDestroy && teamIsDead) || !onlyOnBedDestroy) { killerPlayer = Main.getInstance().getPlayerStatisticManager().getStatistic(killer); if (killerPlayer != null) { killerPlayer.setKills(killerPlayer.getKills() + 1); killerPlayer .addCurrentScore(Main.getInstance().getIntConfig(""statistics.scores.kill"", 10)); } } }  // dispatch reward commands directly if (Main.getInstance().getBooleanConfig(""rewards.enabled"", false) && killer != null && ((onlyOnBedDestroy && teamIsDead) || !onlyOnBedDestroy)) { List<String> commands = Main.getInstance().getConfig().getStringList(""rewards.player-kill""); Main.getInstance().dispatchRewardCommands(commands, ImmutableMap.of(""{player}"", killer.getName(), ""{score}"", String.valueOf(Main.getInstance().getIntConfig(""statistics.scores.kill"", 10)))); } }  if (killer == null) { this.getGame().broadcast(ChatColor.GOLD + Main._l(""ingame.player.died"", ImmutableMap .of(""player"", Game.getPlayerWithTeamString(player, deathTeam, ChatColor.GOLD))));  this.sendTeamDeadMessage(deathTeam); this.checkGameOver(); return; }  Team killerTeam = this.getGame().getPlayerTeam(killer); if (killerTeam == null) { this.getGame().broadcast(ChatColor.GOLD + Main._l(""ingame.player.died"", ImmutableMap .of(""player"", Game.getPlayerWithTeamString(player, deathTeam, ChatColor.GOLD)))); this.sendTeamDeadMessage(deathTeam); this.checkGameOver(); return; }  String hearts = """"; DecimalFormat format = new DecimalFormat(""#""); double health = ((double) killer.getHealth()) / ((double) killer.getMaxHealth()) * ((double) killer.getHealthScale()); if (!Main.getInstance().getBooleanConfig(""hearts-in-halfs"", true)) { format = new DecimalFormat(""#.#""); health = health / 2; }  if (Main.getInstance().getBooleanConfig(""hearts-on-death"", true)) { hearts = ""["" + ChatColor.RED + ""\u2764"" + format.format(health) + ChatColor.GOLD + ""]""; }  this.getGame() .broadcast(ChatColor.GOLD + Main._l(""ingame.player.killed"", ImmutableMap.of(""killer"", Game.getPlayerWithTeamString(killer, killerTeam, ChatColor.GOLD, hearts), ""player"", Game.getPlayerWithTeamString(player, deathTeam, ChatColor.GOLD)))); if (deathTeam.isDead(this.getGame())) { killer.playSound(player.getLocation(), SoundMachine.get(""LEVEL_UP"", ""ENTITY_PLAYER_LEVELUP""), Float.valueOf(""1.0""), Float.valueOf(""1.0"")); } this.sendTeamDeadMessage(deathTeam); this.checkGameOver(); } "	0	0	0	0	0	1
@Override public boolean dispatchTouchEvent(MotionEvent ev) { if(!super.dispatchTouchEvent(ev)) mGestureDetector.onTouchEvent(ev); return true; } 	0	0	1	0	1	0
public void playerJoined(final Player player) { ++this.online; } 	1	0	1	0	0	0
"private void copySingleChangelistAndGitCommit(P4ChangeInfo p4Change, P4RepositoryInfo repoInfo, Set<String> views) throws Exception { P4FileStatInfo info = P4Fstat.getChangelistStats(p4Change.getChangeList(), repoInfo); logger.info(String.format(""%d affected file(s)"", info.getFiles().size())); List<String> addFiles = new LinkedList<>(); List<String> removeFiles = new LinkedList<>(); List<String> ignoredFiles = new LinkedList<>(); List<Callable<Boolean>> theCallable = new LinkedList<>(); for (P4FileInfoEx file : info.getFiles()) { if (!views.isEmpty() && !views.stream().filter(file.getDepotFile()::startsWith).findAny().isPresent()) { ignoredFiles.add(file.getDepotFile()); continue; } final String target = file.getDepotFile().replace(repoInfo.getPath(), """"); if (P4Operation.delete == file.getOperation()) { if (Utils.fileExists(target)) { removeFiles.add(target); } else { logger.warn(String.format(""ignore deleting of nonexistent file %1$s from cl %2$s"", target, p4Change.getChangeList())); } continue; }  addFiles.add(target); theCallable.add(() -> { try { Files.write(Paths.get(target), Files.readAllBytes(Paths.get(file.getClientFile())), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING); return true; } catch (Exception e) { logger.error(String.format(""Failed to copy file %1$s -> %2$s"", file.getClientFile(), target), e); return false; } }); } if (!ignoredFiles.isEmpty()) { logger.info(String.format(""%d file(s) is/are ignored"", ignoredFiles.size())); logger.debug(""ignored files are:\n"" + StringUtils.join(ignoredFiles, ""\n"")); } if (!addFiles.isEmpty()) { logger.info(""syncing p4 client to change list "" + p4Change.getChangeList()); P4Sync.forceSyncTo(repoInfo, p4Change.getChangeList()); Thread.sleep(P4_SYNC_DELAY); }  // git rm files first, to avoid the case that move/delete & move/add in the same changelist, to rename a specific // file name. This happens when renaming files in IntelliJ pagedActionOnFiles(removeFiles, GitRm::run, ""Git rm..."");  for (String target : addFiles) { Files.createDirectories(Paths.get(target).getParent()); }   // copying file in parallel if (!theCallable.isEmpty()) { logger.info(String.format(""%d file(s) in total to copy..."", theCallable.size())); if (!Utils.runConcurrentlyAndAggregate(MAX_THREADS, theCallable)) { throw new RuntimeException(""Error occurred when copying files for changelist "" + p4Change.getChangeList()); } }  pagedActionOnFiles(addFiles, GitAdd::run, ""Git add..."");  updateLastSyncAndGitAdd(p4Change.getChangeList()); String comments = String.format(commitCommentsTemplate, info.getDescription(), repoInfo.getPath(), p4Change.getChangeList(), p4Change.getP4UserInfo().toString(), p4Change.getDate());  GitCommit.commitFromFile(comments, p4Change.getChangeList()); } "	0	0	0	0	0	1
@Override public void draw(Canvas canvas) { super.draw(canvas);  // If we don't have a toolbar, the scrim will be not be drawn in drawChild() below. // Instead, we draw it here, before our collapsing text. ensureToolbar(); if (mTopBar == null && mContentScrim != null && mScrimAlpha > 0) { mContentScrim.mutate().setAlpha(mScrimAlpha); mContentScrim.draw(canvas); }  // Let the collapsing text helper draw its text if (mCollapsingTitleEnabled) { mCollapsingTextHelper.draw(canvas); }  // Now draw the status bar scrim if (mStatusBarScrim != null && mScrimAlpha > 0) { final int topInset = mLastInsets != null ? mLastInsets.getSystemWindowInsetTop() : 0; if (topInset > 0) { mStatusBarScrim.setBounds(0, -mCurrentOffset, getWidth(), topInset - mCurrentOffset); mStatusBarScrim.mutate().setAlpha(mScrimAlpha); mStatusBarScrim.draw(canvas); } } } 	0	0	0	1	1	0
"View buildSingleMapView(CountryItem map) { @SuppressLint(""InflateParams"") final View countryView = View.inflate(getActivity(), R.layout.dialog_missed_map, null); ((TextView) countryView.findViewById(R.id.tv__title)).setText(map.name);  final TextView szView = (TextView) countryView.findViewById(R.id.tv__size); szView.setText(MapManager.nativeIsLegacyMode() ? """" : StringUtils.getFileSizeString(map.totalSize - map.size)); ViewGroup.MarginLayoutParams lp = (ViewGroup.MarginLayoutParams) szView.getLayoutParams(); lp.rightMargin = 0; szView.setLayoutParams(lp);  return countryView; } "	1	0	1	1	0	0
"@Override public void run() { while (Configuration.ramStatistics()) { try { Thread.sleep(10 * 1000); } catch (InterruptedException e) { } if (!active) return; if (ramStatistiks.getLastState() == null) continue;  int mb = 1024 * 1024;  RamStatistic state = ramStatistiks.getLastState(); String var1 = (state.getUsedMemory()) / mb + """"; String var2 = (state.getReservedMemory() - state.getUsedMemory()) / mb + """"; String var3 = state.getReservedMemory() / mb + """"; String var4 = state.getMaxMemory() / mb + """";  int var5 = 5; var1 = format(var1, var5); var2 = format(var2, var5); var3 = format(var3, var5); var4 = format(var4, var5);  int diff = 0; if (state.getPreviousStatistic(10, TimeUnit.SECONDS) != null) diff = (int) (((int) (state.getUsedMemory() / mb)) - ((int) (state.getPreviousStatistic(10, TimeUnit.SECONDS).getUsedMemory() / mb))); String diffSpace = """"; for (int i = 0; i < (""(*"" + Math.abs(diff) + "")"").length(); i++) diffSpace += "" ""; sendMessage(""""); sendMessage(ChatColorUtils.COLOR_CHAR + ""7#####"" + diffSpace.substring(0, diffSpace.length() / 2).replaceAll("" "", ""#"") + "" "" + ChatColorUtils.COLOR_CHAR + ""6Heap utilization statistics [MB] "" + ChatColorUtils.COLOR_CHAR + ""7#####"" + diffSpace.substring(0, diffSpace.length() / 2).replaceAll("" "", ""#"") + (diffSpace.length() % 2 != 0 ? ""#"" : """")); sendMessage(ChatColorUtils.COLOR_CHAR + ""7#     "" + ChatColorUtils.COLOR_CHAR + ""aReserved Used Memory:      "" + ChatColorUtils.COLOR_CHAR + ""e"" + var1 + ""M "" + ChatColorUtils.COLOR_CHAR + ""7("" + (diff > 0 ? ChatColorUtils.COLOR_CHAR + ""a+"" : diff < 0 ? ChatColorUtils.COLOR_CHAR + ""c-"" : ChatColorUtils.COLOR_CHAR + ""6�"") + Math.abs(diff) + ChatColorUtils.COLOR_CHAR + ""7)   "" + ChatColorUtils.COLOR_CHAR + ""7#""); sendMessage(ChatColorUtils.COLOR_CHAR + ""7#     "" + ChatColorUtils.COLOR_CHAR + ""aReserved Free Memory:      "" + ChatColorUtils.COLOR_CHAR + ""e"" + var2 + ""M    "" + diffSpace + ChatColorUtils.COLOR_CHAR + ""7#""); sendMessage(ChatColorUtils.COLOR_CHAR + ""7#     "" + ChatColorUtils.COLOR_CHAR + ""aReserved Memory:           "" + ChatColorUtils.COLOR_CHAR + ""e"" + var3 + ""M    "" + diffSpace + ChatColorUtils.COLOR_CHAR + ""7#""); sendMessage(ChatColorUtils.COLOR_CHAR + ""7#     "" + ChatColorUtils.COLOR_CHAR + ""a-----------------------------"" + format("""", var5).replaceAll("" "", ""-"") + ""   "" + diffSpace + ChatColorUtils.COLOR_CHAR + ""7#""); sendMessage(ChatColorUtils.COLOR_CHAR + ""7#     "" + ChatColorUtils.COLOR_CHAR + ""aAllowed Reservable Memory: "" + ChatColorUtils.COLOR_CHAR + ""e"" + var4 + ""M    "" + diffSpace + ChatColorUtils.COLOR_CHAR + ""7#""); sendMessage(ChatColorUtils.COLOR_CHAR + ""7############################################"" + diffSpace.replaceAll("" "", ""#"")); sendMessage(""""); } } "	0	0	1	0	0	0
"@Test public void testSetEnumeration() { String formula = ""x = {1,2,(3,4)}""; String exceptionMessage = getExceptionMessage(formula); assertTrue(exceptionMessage.contains(""Expected INTEGER but found INTEGER*INTEGER"")); } "	0	0	0	1	1	0
public JsonResponse<? extends T1Entity> getMeta() { JsonResponse<? extends T1Entity> jsonResponse = null; StringBuffer path = reportService.getMetaUri(); String finalPath = tOneService.constructReportingUrl(path); String response = this.connection.get(finalPath, this.getUser()); jsonResponse = reportService.parseMetaResponse(response); return jsonResponse; } 	0	0	1	0	1	0
private static void signContents(final Dataset msgDataset, final SigningStage sigStage, final WonSigner signer, final PrivateKey privateKey, final String privateKeyUri, final PublicKey publicKey) throws Exception { List<WonSignatureData> sigRefs = signer.sign(privateKey, privateKeyUri, publicKey, sigStage.getUnsignedContentUris()); for (WonSignatureData sigRef : sigRefs) { String envUri = sigStage.getEnvelopeUriContainingContent(sigRef.getSignedGraphUri()); addSignature(sigStage.getMessageUri(envUri), sigRef, envUri, msgDataset); } } 	0	0	1	0	1	0
"@Test (expected = IllegalTypeException.class) public void testArrayNotFullyIndexed() throws RecognitionException { parserInterface.parseProgram(""main() {bool[] i = array[6];i=true;}""); } "	0	0	1	1	0	0
"@Override public void onAttach(Activity activity) { super.onAttach(activity);  RoboGuice.getInjector(activity).injectMembersWithoutViews(this);  try { mAuthListener = (LoginListener) activity; } catch (ClassCastException e) { throw new IllegalArgumentException( ""Activity "" + activity.getLocalClassName() + "" should implement LoginFragment.LoginListener"", e); } } "	0	0	1	0	1	0
"private void performLogin() { showProgress(true);  auth.login(username.getText().toString(), password.getText().toString()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(exhentaiResult -> { dismiss(); mAuthListener.onSuccess(); }, throwable -> { showProgress(false); Log.e(LoginFragment.class.getSimpleName(), ""Couldn't log in"", throwable); if(throwable.getCause() instanceof AuthException) { username.setError(((AuthException) throwable.getCause()).getError().getErrorMessage()); username.requestFocus(); } }); } "	0	0	1	0	1	0
"public void attack() throws Exception{ Random gen = new Random(); Random RN= new Random(); int atk = player.damage(); int def = monster.getDefense(); int rn =RN.nextInt(100); if(player.cowl()){ if(trueBurst>def){ atk=(int)((double)atk*1.5); } def-=trueBurst; attacked=true; } if(wildSlash){ atk=atk*2; wildSlash=false; } if(shieldBash){ atk=atk*2; shieldBash=false; } if(rn<=player.getCrit()){ if(player.cloak()&&dodge){ atk=atk*3; println(""DOUBLE CRITICAL STRIKE!!!"", 20); } else{ atk=atk*2; print(""CRITICAL"", 40); println("" STRIKE!!!"", 20); } } if(player.chestpiece()){ atk+=(player.getHeal()/2); } if(manaSurge&&atksLeft==0){ atk+=amount; amount=0; manaSurge=false; } else if(manaSurge&&atksLeft>0){ atk+=amount; } if(defStance&&isGuarding){//Sword's defStance ability. atk+=5; } if(player.dagger()&&wrathPass==true){ wrathPass=false; atk=atk/2; }  int inflicted = atk - def;  if(inflicted <= 0) { inflicted = 0; println(""You are too weak to hurt this monster!"",15); } else { if(monster.getDodge()>=gen.nextInt(100)+1) { println(monster.getName()+"" swiftly dodged your attack!!!"",15); } else { monster.setHealth(monster.getHealth()-inflicted); damageDealt+=inflicted; print(""You have inflicted "" + inflicted + "" points of damage to "" +monster.getName(),7); if(player.robe()){ int amount=inflicted/5; player.setMana(player.getMana()+(amount)); println("" ""+amount+"" Mana"",5); } else{ System.out.println(); } } }  if(split&&atksLeft>0){ atksLeft--; attack(); }  } "	1	1	1	1	0	0
public void runCommand(String command) { enterCommand(command); pressEnter(); guiRobot.sleep(1000); //Give time for the command to take effect } 	0	0	1	1	1	0
"@Override protected void onDraw(Canvas canvas) { super.onDraw(canvas);  heightPadding = (getHeight() - iconSize - (showLabel ? 0 : labelHeight)) / 2f; if (label != null && !showLabel) { textPaint.getTextBounds(label, 0, label.length(), textContainer); }  // use ellipsis if the label is too long if (label != null && !showLabel && textContainer.width() > 0) { float characterSize = textContainer.width() / label.length(); int charToTruncate = (int) Math.ceil(((label.length() * characterSize) - getWidth()) / characterSize);  // set start position manually if text container is too large float x = Math.max(8, (getWidth() - textContainer.width()) / 2f);  if (textContainer.width() > getWidth() && label.length() - 3 - charToTruncate > 0) { canvas.drawText(label.substring(0, label.length() - 3 - charToTruncate) + ""..."", x, getHeight() - heightPadding, textPaint); } else { canvas.drawText(label, x, getHeight() - heightPadding, textPaint); } }  // center the icon if (icon != null) { canvas.save(); canvas.translate((getWidth() - iconSize) / 2, heightPadding); icon.setBounds(0, 0, (int) iconSize, (int) iconSize); icon.draw(canvas); canvas.restore(); } } "	0	0	0	1	1	0
public Fragment getFragment(Context context) { switch (type) { case Type.GENRES: return GenreFragment.newInstance(context.getString(getTitleResId())); case Type.SUGGESTED: return SuggestedFragment.newInstance(context.getString(getTitleResId())); case Type.ARTISTS: return AlbumArtistFragment.newInstance(context.getString(getTitleResId())); case Type.ALBUMS: return AlbumFragment.newInstance(context.getString(getTitleResId())); case Type.SONGS: return SongFragment.newInstance(context.getString(getTitleResId())); case Type.FOLDERS: return FolderFragment.newInstance(context.getString(getTitleResId())); case Type.PLAYLISTS: return PlaylistFragment.newInstance(context.getString(getTitleResId())); } return null; } 	0	0	1	0	1	0
@Override public JobInfo.JobStatus findStatus(URI jobUri) { return jobs.get(jobUri).getStatus(); } 	0	0	0	1	0	0
"public void extractFiles(List<String> downloadedFiles, List<String> files, String baseTempDir, boolean ignore_match, File downloadedZipArchive, Map<String, String> mapping, boolean isDebug, String branch, PropertiesBean propertiesBean, String commonPath) { ZipFile zFile = null; try { zFile = new ZipFile(downloadedZipArchive.getAbsolutePath()); } catch (Exception e) { System.out.println(""An archive '"" + downloadedZipArchive.getAbsolutePath() + ""' does not exist""); if (isDebug) { e.printStackTrace(); System.exit(0); } } File tmpDir = new File(baseTempDir); if (!tmpDir.exists()) { try { Files.createDirectory(tmpDir.toPath()); } catch (IOException ex) { System.out.println(RESOURCE_BUNDLE.getString(""error_extracting"")); } } try { zFile.extractAll(tmpDir.getAbsolutePath()); } catch (Exception e) { System.out.println(""Extracting an archive '"" + downloadedZipArchive + ""' failed""); if (isDebug) { e.printStackTrace(); System.exit(0); } } List<String> ommitedFiles = new ArrayList<>(); List<String> extractingFiles = new ArrayList<>(); for (String downloadedFile : downloadedFiles) { if (!files.contains(downloadedFile) && !files.contains(downloadedFile.replaceFirst(""/"", """"))) { if (branch != null && !branch.isEmpty()) { ommitedFiles.add(downloadedFile.replaceFirst(""/"" + branch + ""/"", """")); } else { ommitedFiles.add(downloadedFile); } } else { if (branch != null && !branch.isEmpty()) { extractingFiles.add(downloadedFile.replaceFirst(""/"" + branch + ""/"", """")); } else { extractingFiles.add(downloadedFile); } } } List<String> sortedExtractingFiles = new ArrayList<>(); for (Map.Entry<String, String> extractingMappingFile : mapping.entrySet()) { String k = extractingMappingFile.getKey(); k = k.replaceAll(""/+"", ""/""); if (k.indexOf(PATH_SEPARATOR) != -1) { k = k.replaceAll(PATH_SEPARATOR, ""/""); k = k.replaceAll(""/+"", ""/""); } if (k.indexOf(""/"") != -1) { k = k.replaceAll(""/+"", ""/""); } if (!propertiesBean.getPreserveHierarchy()) { if (k.startsWith(commonPath)) { for (FileBean file : propertiesBean.getFiles()) { String ep = file.getTranslation(); if (ep != null && !ep.startsWith(commonPath)) { k = k.replaceFirst(commonPath, """"); } } } } if (k.startsWith(""/"")) { k = k.replaceFirst(""/"", """"); } String v = extractingMappingFile.getValue(); if (v.indexOf(PATH_SEPARATOR) != -1) { v = v.replaceAll(PATH_SEPARATOR, ""/""); v = v.replaceAll(""/+"", ""/""); } if (extractingFiles.contains(k) || extractingFiles.contains(""/"" + k)) { sortedExtractingFiles.add(v); } } this.sortFilesName(sortedExtractingFiles); for (String sortedExtractingFile : sortedExtractingFiles) { System.out.println(""Extracting: '"" + sortedExtractingFile + ""'""); } if (ommitedFiles.size() > 0 && !ignore_match) { this.sortFilesName(ommitedFiles); System.out.println(RESOURCE_BUNDLE.getString(""downloaded_file_omitted"")); for (String ommitedFile : ommitedFiles) { System.out.println("" - '"" + ommitedFile + ""'""); } } } "	0	0	0	0	0	1
public Boolean getShowMatrixStatus(){ return showMatrixStatus == null ? false : showMatrixStatus; } 	0	0	1	0	1	0
"public static Path2D generateBorderShape(Rectangle bounds, int side, BorderPropertySet border, boolean drawInterior, float scaledOffset, float widthScale) { /** * Function overview: Prior to creating the path we check what side were building this on. All the coordinates in this function assume its building a top border * the border is then rotated and translated to its appropriate side. Uses of ""left"" and ""right"" are assuming a perspective of inside the shape looking out. */ border = border.normalizedInstance(new Rectangle((int)(bounds.width), (int)(bounds.height)));  RelativeBorderProperties props = new RelativeBorderProperties(bounds, border, 0f, side, 1+scaledOffset, widthScale); float sideWidth; if(props.isDimmensionsSwapped()) { sideWidth = bounds.height-(1+scaledOffset)*(widthScale)*(border.top()+border.bottom()); } else { sideWidth = bounds.width-(1+scaledOffset)*(widthScale)*(border.left()+border.right()); } Path2D path = new Path2D.Float();  float angle = 90 * props.getTop() / (props.getTop() + props.getLeft()); appendPath(path, 0-props.getLeft(), 0-props.getTop(), props.getLeftCorner().left(), props.getLeftCorner().right(), 90+angle, -angle-1, props.getTop(), props.getLeft(), scaledOffset, true, widthScale);  angle = 90 * props.getTop() / (props.getTop() + props.getRight()); appendPath(path, sideWidth+props.getRight(), 0-props.getTop(), props.getRightCorner().right(), props.getRightCorner().left(), 90, -angle-1, props.getTop(), props.getRight(), scaledOffset, false, widthScale);   if(drawInterior) { //border = border.normalizeBorderRadius(new Rectangle((int)(bounds.width), (int)(bounds.height))); //props = new RelativeBorderProperties(bounds, border, 0f, side, 1+scaledOffset, 1);  appendPath(path, sideWidth, 0, props.getRightCorner().right(), props.getRightCorner().left(), 90-angle, angle+1, props.getTop(), props.getRight(), scaledOffset+1, false, widthScale);  angle = 90 * props.getTop() / (props.getTop() + props.getLeft()); appendPath(path, 0, 0, props.getLeftCorner().left(), props.getLeftCorner().right(), 90, angle+1, props.getTop(), props.getLeft(), scaledOffset+1, true, widthScale);  path.closePath(); }   path.transform(AffineTransform.getTranslateInstance( (!props.isDimmensionsSwapped() ? -bounds.width/2f : -bounds.height/2f) + (scaledOffset+1)*props.getLeft(), (props.isDimmensionsSwapped() ? -bounds.width/2f : -bounds.height/2f) + (scaledOffset+1)*props.getTop())); path.transform(AffineTransform.getRotateInstance( props.getRotation())); path.transform(AffineTransform.getTranslateInstance( bounds.width/2+bounds.x, bounds.height/2+bounds.y));  return path; } "	0	0	0	0	0	1
public void unzip(java.io.InputStream zipFilePath, String destDirectory) throws IOException { File destDir = new File(destDirectory); if (!destDir.exists()) { destDir.mkdir(); } ZipInputStream zipIn = new ZipInputStream(zipFilePath); ZipEntry entry = zipIn.getNextEntry(); // iterates over entries in the zip file while (entry != null) { String filePath = destDirectory + File.separator + entry.getName(); if (!entry.isDirectory()) { // if the entry is a file, extracts it extractFile(zipIn, filePath); } else { // if the entry is a directory, make the directory File dir = new File(filePath); dir.mkdir(); } zipIn.closeEntry(); entry = zipIn.getNextEntry(); } zipIn.close(); } 	0	0	1	0	1	0
public static void refreshContext() { AutomationContext.context = new AutomationRunContext(); } 	0	0	1	0	0	0
"public GrainEnum getGrain(){ if(results.length < 1) return GrainEnum.unknown;  List <String> list = Arrays.asList(results[0].getTypes());  if(list.contains(""locality"")){  return GrainEnum.city;  } else if(list.contains(""country"")){  return GrainEnum.country;  } else {  return GrainEnum.unknown;  }  } "	0	0	1	1	1	0
@Override public IMarkerResolution[] getResolutions(IMarker marker) { if (!hasResolutions(marker)) { return NO_RESOLUTIONS; } switch (marker.getAttribute(IApiMarkerConstants.API_MARKER_ATTR_ID, -1)) { case IApiMarkerConstants.API_USAGE_MARKER_ID: { int id = ApiProblemFactory.getProblemId(marker); if (id > -1 && ApiProblemFactory.getProblemKind(id) == IApiProblem.MISSING_EE_DESCRIPTIONS) { return new IMarkerResolution[] { installEEResolution, eeResolution, new ConfigureProblemSeverityForAPIToolsResolution(marker) }; } return new IMarkerResolution[] { new ConfigureProblemSeverityForAPIToolsResolution(marker), new FilterProblemResolution(marker), new FilterProblemWithCommentResolution(marker) }; } case IApiMarkerConstants.COMPATIBILITY_MARKER_ID: { if (hasExplainProblemResolution(marker)) { return new IMarkerResolution[] { new ProblemExplainIncompatibilityResolution(marker), new FilterProblemResolution(marker), new FilterProblemWithCommentResolution(marker), new ConfigureProblemSeverityForAPIToolsResolution(marker) }; } return new IMarkerResolution[] { new ConfigureProblemSeverityForAPIToolsResolution(marker), new FilterProblemResolution(marker), new FilterProblemWithCommentResolution(marker) }; } case IApiMarkerConstants.DEFAULT_API_BASELINE_MARKER_ID: { return new IMarkerResolution[] { profileResolution }; } case IApiMarkerConstants.SINCE_TAG_MARKER_ID: { return new IMarkerResolution[] { new ConfigureProblemSeverityForAPIToolsResolution(marker), new SinceTagResolution(marker), new FilterProblemResolution(marker), new FilterProblemWithCommentResolution(marker) }; } case IApiMarkerConstants.VERSION_NUMBERING_MARKER_ID: { return new IMarkerResolution[] { new ConfigureProblemSeverityForAPIToolsResolution(marker), new VersionNumberingResolution(marker), new FilterProblemResolution(marker), new FilterProblemWithCommentResolution(marker) }; } case IApiMarkerConstants.UNSUPPORTED_TAG_MARKER_ID: { return new IMarkerResolution[] { new VersionNumberingResolution(marker), new UnsupportedTagResolution(marker) }; } case IApiMarkerConstants.DUPLICATE_TAG_MARKER_ID: { return new IMarkerResolution[] { new DuplicateTagResolution(marker) }; } case IApiMarkerConstants.UNSUPPORTED_ANNOTATION_MARKER_ID: { return new IMarkerResolution[] { new VersionNumberingResolution(marker), new UnsupportedAnnotationResolution(marker), new ConfigureProblemSeverityForAPIToolsResolution(marker) }; } case IApiMarkerConstants.DUPLICATE_ANNOTATION_MARKER_ID: { return new IMarkerResolution[] { new DuplicateAnnotationResolution(marker) }; } case IApiMarkerConstants.API_COMPONENT_RESOLUTION_MARKER_ID: { return new IMarkerResolution[] { new UpdateProjectSettingResolution(marker) }; } case IApiMarkerConstants.UNUSED_PROBLEM_FILTER_MARKER_ID: { IApiProblemFilter filter = resolveFilter(marker); if (filter != null) { return new IMarkerResolution[] { new ConfigureProblemSeverityForAPIToolsResolution(marker), new RemoveFilterProblemResolution(filter, marker), new OpenPropertyPageResolution(MarkerMessages.ApiMarkerResolutionGenerator_api_problem_filters, IApiToolsConstants.ID_FILTERS_PROP_PAGE, marker.getResource().getProject()) }; } else { return new IMarkerResolution[] { new OpenPropertyPageResolution(MarkerMessages.ApiMarkerResolutionGenerator_api_problem_filters, IApiToolsConstants.ID_FILTERS_PROP_PAGE, marker.getResource().getProject()) }; } } default: return NO_RESOLUTIONS; } } 	0	0	0	0	0	1
@Test public void should_pass_if_actual_has_no_declared_methods_and_no_expected_methods_are_given() { actual = Jedi.class; classes.assertHasDeclaredPublicMethods(someInfo(), actual); } 	0	0	1	0	1	0
"private void initialUpload(RoomInfoResponse ri) { context.statusMessage(""Overwriting remote files and uploading new ones.""); context.flashMessage(""Overwriting remote files and uploading new ones."");  final Ignore ignoreTree; if (dirToAdd == null) { ignoreTree = context.getIgnoreTree(); } else { ignoreTree = Ignore.BuildIgnore(dirToAdd); } Ignore.UploadData uploadData = ignoreTree.getUploadData(ri.max_size, new Utils.FileProcessor<String>() { @Override public String call(IFile file) { return context.toProjectRelPath(file.getPath()); } }); if (uploadData.bigStuff.size() > 0) { if (uploadData.bigStuff.size() > Constants.TOO_MANY_BIG_DIRS) { context.dialogDisconnect(ri.max_size / 1000, uploadData.bigStuff.size()); return; } boolean shouldContinue;  shouldContinue = context.dialogTooBig(uploadData.bigStuff);  if (!shouldContinue) { context.shutdown(); return; } } for (Map.Entry entry : ri.bufs.entrySet()) { Integer buf_id = (Integer) entry.getKey(); RoomInfoBuf b = (RoomInfoBuf) entry.getValue(); Buf buf = Buf.createBuf(b.path, b.id, Encoding.from(b.encoding), b.md5, context, outbound); try { state.bufs.put(buf_id, buf); } catch (NullPointerException e) { Flog.warn(""state.buffs is null, tried to upload after disconnecting. This is a race condition.""); return; } state.pathsToIds.put(b.path, b.id); if (!uploadData.paths.contains(buf.path)) { outbound.deleteBuf(buf, false); continue; } uploadData.paths.remove(buf.path); buf.read(); if (buf.buf == null) { Flog.warn(""%s is null but we want to upload it?"", b.path); outbound.getBuf(buf.id); continue; } if (b.md5.equals(buf.md5)) { continue; } outbound.setBuf(buf); outbound.saveBuf(buf); }   for (String path : uploadData.paths) { IFile fileByPath = context.iFactory.findFileByPath(context.absPath(path)); if (fileByPath == null || !fileByPath.isValid()) { Flog.warn(String.format(""path is no longer a valid virtual file"")); continue; } outbound.createBuf(fileByPath); } String flooignore = FilenameUtils.concat(context.colabDir, "".flooignore"");  try { File f = new File(flooignore); List<String> strings; if (f.exists()) { strings = FileUtils.readLines(f); } else { strings = new ArrayList<String>(); }  for (Map.Entry<String, Integer> bigData : uploadData.bigStuff.entrySet()) { String rule = ""/"" + context.toProjectRelPath(FilenameUtils.separatorsToUnix(bigData.getKey())); if (!rule.endsWith(""/"")) { rule += ""/""; } rule += ""*""; strings.add(rule); } context.setListener(false); FileUtils.writeLines(f, strings); IFile fileByIoFile = context.iFactory.findFileByIoFile(f); if (fileByIoFile != null) { fileByIoFile.refresh(); ignoreTree.addRules(fileByIoFile); } } catch (IOException e) { Flog.error(e); } finally { context.setListener(true); } shouldUpload = false; dirToAdd = null; } "	0	0	1	0	0	0
"@RequestMapping(value = ""/create"", method = RequestMethod.PUT,consumes = MediaType.APPLICATION_JSON_VALUE) public ResponseEntity createUser(@RequestBody User user) throws SQLException {  logger.debug(""ENTERED createUser"");  userService.createUser(user);  logger.debug(""EXITING createUser "" + user); return new ResponseEntity( HttpStatus.OK); } "	0	0	1	0	1	0
"private static Files readInputArgs(String[] args) { Files files = new Files();   Options options = new Options(); options.addOption(Option .builder(""h"") .longOpt(""help"") .desc(""Print this message"") .build());  options.addOption(Option .builder(""c"") .longOpt(MTSFileChooser.Filters.CONFIG_POSTFIX) .hasArg() .argName(""CONFIG_FILE"") .desc(""Config file"") .build());  options.addOption(Option .builder(""m"") .longOpt(MTSFileChooser.Filters.MAP_EXFMT_POSTFIX) .hasArg() .argName(""MAP_FILE"") .desc(""Map file"") .build());  options.addOption(Option .builder(""r0"") .longOpt(MTSFileChooser.Filters.ROUTE_POSTFIX + ""_0"") .hasArg() .argName(""ROUTE_FILE"") .desc(""First-used route file"") .build());  options.addOption(Option .builder(""r1"") .longOpt(MTSFileChooser.Filters.ROUTE_POSTFIX + ""_1"") .hasArg() .argName(""ROUTE_FILE"") .desc(""Second-used route file"") .build());  options.addOption(Option .builder(""o"") .longOpt(""output"") .hasArg() .argName(""PATH_TO_CSV_FILES"") .desc(""Path to output csv file; default is current directory"") .build());  options.addOption(Option .builder() .longOpt(""automatic"") .hasArg() .argName(""BOOLEAN_VALUE"") .desc(""false if user input is needed to continue/exit (default is true)"") .build());  options.addOption(Option .builder() .longOpt(""seed"") .hasArg() .argName(""LONG_VALUE"") .desc(""seed for config file (default is 42)"") .build());  options.addOption(Option .builder() .longOpt(""maxAge"") .hasArg() .argName(""INTEGER_VALUE"") .desc(""max age when simulation should stop (default is 3,000)"") .build());  options.addOption(Option .builder() .longOpt(""maxVehicleCount"") .hasArg() .argName(""INTEGER_VALUE"") .desc(""max vehicle count overwriting the given ."" + MTSFileChooser.Filters.CONFIG_POSTFIX + "" file (optional)"") .build());  options.addOption(Option .builder() .longOpt(""dawdleFactor"") .hasArg() .argName(""FLOAT_VALUE"") .desc(""vehicles' dawdle factor (optional)"") .build());  options.addOption(Option .builder() .longOpt(""laneChangeFactor"") .hasArg() .argName(""FLOAT_VALUE"") .desc(""vehicles' lane change factor (optional)"") .build());  options.addOption(Option .builder(""vis"") .longOpt(""visualized"") .hasArg() .argName(""[true|false]"") .desc(""whether the measurement should run the visualization (default is true)"") .build());  try { CommandLine line = new DefaultParser().parse(options, args);  if (line.hasOption(""help"")) { HelpFormatter formatter = new HelpFormatter(); formatter.printHelp(""measurement"", options); System.exit(0); }  if (line.hasOption(""automatic"")) { files.automatic = parseBoolean(line.getOptionValue(""automatic"")); }  if (line.hasOption(""seed"")) { files.seed = Long.parseLong(line.getOptionValue(""seed"")); }  if (line.hasOption(""maxAge"")) { files.maxAge = Integer.parseInt(line.getOptionValue(""maxAge"")); }  if (line.hasOption(MTSFileChooser.Filters.CONFIG_POSTFIX)) { files.mtscfg = new File(line.getOptionValue(MTSFileChooser.Filters.CONFIG_POSTFIX)); } else { throw new Exception(""Config file '."" + MTSFileChooser.Filters.CONFIG_POSTFIX + ""' is missing.""); }  if (line.hasOption(MTSFileChooser.Filters.MAP_EXFMT_POSTFIX)) { files.mtsmap = new File(line.getOptionValue(MTSFileChooser.Filters.MAP_EXFMT_POSTFIX)); } else { throw new Exception(""Map file '."" + MTSFileChooser.Filters.MAP_EXFMT_POSTFIX + ""' or '."" + MTSFileChooser.Filters.MAP_OSM_XML_POSTFIX + ""' is missing.""); }   files.mtsroutes = new LinkedList<>(); if (line.hasOption(MTSFileChooser.Filters.ROUTE_POSTFIX + ""_0"")) { files.mtsroutes.add(new File(line.getOptionValue(MTSFileChooser.Filters.ROUTE_POSTFIX + ""_0""))); } else { throw new Exception(""Route file '."" + MTSFileChooser.Filters.ROUTE_POSTFIX + ""' is missing.""); }  if (line.hasOption(MTSFileChooser.Filters.ROUTE_POSTFIX + ""_1"")) { files.mtsroutes.add(new File(line.getOptionValue(MTSFileChooser.Filters.ROUTE_POSTFIX + ""_1""))); }   if (line.hasOption(""output"")) { files.outputPath = line.getOptionValue(""output""); }  if (line.hasOption(""maxVehicleCount"")) { files.maxVehicleCount = Integer.parseInt(line.getOptionValue(""maxVehicleCount"")); }  if (line.hasOption(""dawdleFactor"")) { files.dawdleFactor = Float.parseFloat(line.getOptionValue(""dawdleFactor"")); }  if (line.hasOption(""laneChangeFactor"")) { files.laneChangeFactor = Float.parseFloat(line.getOptionValue(""laneChangeFactor"")); }  if (line.hasOption(""visualized"")) { files.visualized = parseBoolean(line.getOptionValue(""visualized"").toLowerCase()); } } catch (Exception e) { e.printStackTrace(); System.err.flush(); System.err.println(""\nError:""); System.err.println(""    "" + e.getMessage()); System.exit(1); }  return files; } "	0	0	0	0	0	1
@RequestMapping(method = RequestMethod.POST) public ResponseEntity<Object> responseValue(@PathVariable String endpoint) { // TODO-Logger System.out.println(endpoint);  Optional<EndPoint> apisimValue = apisimservice.findOne(endpoint); if (!apisimValue.isPresent()) { return new ResponseEntity<Object>(new HttpHeaders(), HttpStatus.NOT_FOUND); } return new ResponseEntity<Object>(apisimValue.get().responseKV, new HttpHeaders(), HttpStatus.CREATED); } 	0	0	1	0	0	0
"Connection getConnection() { if (this.connection == null || this.connection.getLocalState() == EndpointState.CLOSED || this.connection.getRemoteState() == EndpointState.CLOSED) { TRACE_LOGGER.info(""Creatina connection to host '{}:{}'"", hostName, ClientConstants.AMQPS_PORT); this.connection = this.getReactor().connectionToHost(this.hostName, ClientConstants.AMQPS_PORT, this.connectionHandler); }  return this.connection; } "	0	0	1	0	1	0
"public void event() { try { zeroGyro(false); } catch (IOException e) { Logger.warning(""Could not initiate gyro zeroing"", e); } } "	1	0	1	0	0	0
protected void createLineGraphAsync( Trans trans ) { // Need to spin this processing off into its own thread, so we don't hold up normal PDI processing Thread lineageWorker = new Thread( new Runnable() {  @Override public void run() { createLineGraph( trans ); } } );  lineageWorker.start(); } 	0	0	0	1	0	0
"public boolean processLine(String line) { if(connectionToRobot == null || !connectionToRobot.isRobotConfirmed() || !isrunning) return false;  // tool change request? String [] tokens = line.split(""(\\s|;)"");  // tool change? if(Arrays.asList(tokens).contains(""M06"") || Arrays.asList(tokens).contains(""M6"")) { for(int i=0;i<tokens.length;++i) { if(tokens[i].startsWith(""T"")) { changeToTool(tokens[i].substring(1)); } } }  // end of program? if(tokens[0]==""M02"" || tokens[0]==""M2"" || tokens[0]==""M30"") { playDawingFinishedSound(); halt(); return false; }   // send relevant part of line to the robot sendLineToRobot(line);  return false; } "	0	0	1	0	1	0
@Override public  void enviarTodos(SiaJob siaJob)  throws DelegateException{  try { getFacade().enviarTodos(siaJob); } catch (RemoteException e) { throw new DelegateException(e); } } 	0	0	1	0	0	0
"@Test public void testMatchSimpleMulti() { Subscription anySub = new Subscription(""FAKE_CLI_ID_1"", ""#"", AbstractMessage.QOSType.MOST_ONE, false); store.add(anySub); assertTrue(store.matches(""finance"").contains(anySub));  Subscription financeAnySub = new Subscription(""FAKE_CLI_ID_1"", ""finance/#"", AbstractMessage.QOSType.MOST_ONE, false); store.add(financeAnySub); assertTrue(store.matches(""finance"").containsAll(Arrays.asList(financeAnySub, anySub))); } "	0	0	1	0	1	0
"@Test public void testMatchManyDeepSingle() { Subscription slashPlusSub = new Subscription(""FAKE_CLI_ID_1"", ""/finance/+/ibm"", AbstractMessage.QOSType.MOST_ONE, false); store.add(slashPlusSub);  Subscription slashPlusDeepSub = new Subscription(""FAKE_CLI_ID_1"", ""/+/stock/+"", AbstractMessage.QOSType.MOST_ONE, false); store.add(slashPlusDeepSub);  //Verify assertTrue(store.matches(""/finance/stock/ibm"").containsAll(Arrays.asList(slashPlusSub, slashPlusDeepSub))); } "	0	0	1	0	1	0
"@Override public void onActivitySaveInstanceState(Activity activity, Bundle outState) { LoggerFactory.getLogger(activity.getClass()).info(""onActivitySaveInstanceState""); } "	0	0	1	0	1	0
"@Override public void onActivityResumed(Activity activity) { LoggerFactory.getLogger(activity.getClass()).info(""onActivityResumed""); } "	0	0	1	0	1	0
"@Override public void onActivityPaused(Activity activity) { LoggerFactory.getLogger(activity.getClass()).info(""onActivityPaused""); } "	0	0	1	0	1	0
"@Override public void onActivityStarted(Activity activity) { LoggerFactory.getLogger(activity.getClass()).info(""onActivityStarted"");  } "	0	0	1	0	1	0
"@Override public void onActivityStopped(Activity activity) { LoggerFactory.getLogger(activity.getClass()).info(""onActivityStopped""); } "	0	0	1	0	1	0
private void setListAdapter() {  ArrayAdapter<String> adapter = new ArrayAdapter<String>(context, R.layout.people_row_layout, peopleList) {  ViewHolder holder;  @Override public View getView(int position, View convertView, ViewGroup parent) {  if (convertView == null) { convertView = getActivity().getLayoutInflater().inflate(R.layout.people_row_layout, null); holder = new ViewHolder(); holder.name = (TextView) convertView.findViewById(R.id.contact_name); holder.email = (TextView) convertView.findViewById(R.id.contact_email); holder.lastReport = (TextView) convertView.findViewById(R.id.last_report); holder.photo = (ImageView) convertView.findViewById(R.id.contact_photo); holder.checkICanSee = (CheckBox) convertView.findViewById(R.id.i_can_see); holder.checkCanSeeMe = (CheckBox) convertView.findViewById(R.id.can_see_me); convertView.setTag(holder);  } else { holder = (ViewHolder) convertView.getTag(); //holder.imageLoader.cancel(); }  String contactName = getItem(position); String email = mapping.get(contactName);  AQuery aq = new AQuery(convertView); aq.id(holder.name).text(contactName); aq.id(holder.email).text(email);  //aq.id(holder.photo).image(R.drawable.default_avatar); //aq.id(holder.photo).image(Utils.getDefaultAvatarInitials(contactName.substring(0, 1).toUpperCase() + contactName.substring(1, 2))); avatarLoader.load(email, holder.photo);  aq.id(holder.lastReport).text(Utils.timestampText(timestamps.get(contactName))); aq.id(holder.checkCanSeeMe).checked(canSeeMe.contains(email)).tag(email); aq.id(holder.checkICanSee).tag(email);  if (MainApplication.iDontWantToSee != null) { aq.id(holder.checkICanSee).checked(!MainApplication.iDontWantToSee.has(email)); aq.id(holder.photo).clickable(!MainApplication.iDontWantToSee.has(email) && iCanSee.contains(email));  } else { aq.id(holder.photo).clickable(iCanSee.contains(email)); aq.id(holder.checkICanSee).checked(iCanSee.contains(email)).clickable(iCanSee.contains(email)); }  holder.position = position; //holder.imageLoader = new LoadPhotoAsync(position, holder); //holder.imageLoader.execute(contactName);  if (!iCanSee.contains(email)) aq.id(holder.checkICanSee).invisible(); else aq.id(holder.checkICanSee).visible();  return convertView; } };  aq.id(R.id.headers).visibility(View.VISIBLE); aq.id(R.id.add_contacts_list_view).adapter(adapter); } 	0	0	0	0	0	1
protected TestSuite generateTestSuite(List<Parameter> parameters, List<Constraint> constraints) { return new Pipeline.Standard().generateTestSuite(buildConfig(), preprocess(parameters, constraints), Collections.emptyList()); } 	0	0	1	1	1	0
private void validateResult(Bag<AV> result) throws IndeterminateEvaluationException { if (mustBePresent && result.isEmpty()) { throw new IndeterminateEvaluationException(StatusHelper.STATUS_MISSING_ATTRIBUTE, missingAttributeMessage, result.getReasonWhyEmpty()); } } 	0	0	1	1	0	0
"public GHUser getUser (String login) throws ClassNotFoundException { String url = url(""https://api.github.com/user/{login}""); return executeWithCache(url, (restTemplate) -> restTemplate.getForEntity(url, GHUser.class, login)); } "	0	0	1	0	0	0
"protected void skipIfNoGlance() { if (!context.haveGlance()) { throw new SkipException(""Skipping because glance not present / accessible""); } } "	0	0	1	0	1	0
@Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {  mSaved = false;  // Process the selected File based on the request code switch (requestCode) { case FilePickerConst.REQUEST_CODE_DOC: { if (resultCode == RESULT_OK) {  // Retrieve the path of the selected File List<String> dataArray = data.getStringArrayListExtra(FilePickerConst.KEY_SELECTED_DOCS);  // Check to ensure the user selected  File if (dataArray == null || dataArray.size() == 0) { return; }  String filePath = dataArray.get(0);  // Check to ensure the first item in the List is a Guide if (mModelList.get(0) instanceof Guide) {  Guide guide = (Guide) mModelList.get(0);  // Set the gpxUri for the Guide based on the File at the selected path guide.setGpxUri(new File(filePath));  EditGuideDetailsAdapter.EditViewHolder viewHolder = ((EditGuideDetailsAdapter.EditViewHolder)mBinding.guideDetailsRv.findViewHolderForAdapterPosition(0));  if (viewHolder != null) { ViewDataBinding binding = viewHolder.getBinding();  ((ListItemGuideDetailsEditBinding) binding).getVm().notifyPropertyChanged(BR.gpx); ((ListItemGuideDetailsEditBinding) binding).getVm().notifyPropertyChanged(BR.distance); ((ListItemGuideDetailsEditBinding) binding).getVm().notifyPropertyChanged(BR.elevationVisibility); }  } }  break; }  case FilePickerConst.REQUEST_CODE_PHOTO: { if (resultCode == RESULT_OK) {  // Retrieve the path of the selected Image List<String> dataArray = data.getStringArrayListExtra(FilePickerConst.KEY_SELECTED_MEDIA);  // If nothing is selected, do nothing if (dataArray == null || dataArray.size() == 0) { mFilePickerModelPosition = -1; return; }  String imagePath = dataArray.get(0);  // mFilePickerModelPosition is the same as the size of the list, that means // that the user has chosen to add a new Section with image if (mFilePickerModelPosition == mModelList.size()) {  // Add the Section to mModel List mModelList.add(new Section()); }  // Set the imageUri of the model selected ((BaseModelWithImage) mModelList.get(mFilePickerModelPosition)).setImageUri(new File(imagePath));  // Notify the item based on the position of mFilePickerModelPosition of the change if (mFilePickerModelPosition == 0) { mBinding.getVm().notifyPropertyChanged(BR.image); mBinding.getVm().notifyPropertyChanged(BR.iconVisibility);  // Remove error icon from the ActionBar getSupportActionBar().setIcon(null); } else { mAdapter.notifyItemChanged(mFilePickerModelPosition); }  // Check if the image is being selected for the GuideDetails or a Section if (mFilePickerModelPosition != 0) {  // Image is for a Section. Scroll to the bottom so the new Section is // visible to the Author mBinding.guideDetailsRv.scrollToPosition(mModelList.size() - 1);  // Get the position to be scrolled to final int position = mFilePickerModelPosition;  // Set the focus on the Caption TextView. Needs to be delayed to prevent // crashing due to attempting to selecting a ViewHolder before it has been // created. new Handler().postDelayed(new Runnable() { @Override public void run() { EditGuideDetailsAdapter.EditViewHolder viewHolder = (EditGuideDetailsAdapter.EditViewHolder) mBinding.guideDetailsRv .findViewHolderForAdapterPosition(position);  ((ListItemSectionImageEditBinding) viewHolder.getBinding()).listSectionImageCaptionTv.requestFocus(); } }, 50); }  // Reset mFilePickerPosition to -1 mFilePickerModelPosition = -1; }  break; }  case REQUEST_CODE_PUBLISH: if (resultCode == RESULT_OK) {  // Retrieve Guide that was just published mGuide = data.getParcelableExtra(GUIDE_KEY);  // Start GuideDetailsActivity for mGuide Intent intent = new Intent(this, GuideDetailsActivity.class); intent.putExtra(GUIDE_KEY, mGuide);  startActivity(intent);  // Close this Activity finish(); } } } 	0	0	0	0	0	1
"public static Map<String, String> getQueryParts(HttpServletRequest req) { Map<String, String> map = new HashMap<>();  String query = req.getQueryString(); if (query == null) return map;  String[] splits = query.split(""&""); for (String split : splits) { String[] subSplits = split.split(""=""); map.put(subSplits[0], subSplits[1]); } return map; } "	0	0	1	1	1	0
"@Override public boolean perform(final AbstractBuild build, final Launcher launcher, final BuildListener listener) { PrintStream logger = listener.getLogger(); logger.printf(""%s Examining test results...%n"", pInfo); debugLog(listener, String.format(""Build result is %s%n"", build.getResult().toString()) ); this.workspace = build.getWorkspace(); debugLog(listener, String.format(""%s Workspace is %s%n"", pInfo, this.workspace.toString()) ); AbstractTestResultAction<?> testResultAction = build.getAction(AbstractTestResultAction.class); if (testResultAction == null) { logger.printf(""%s no test results found; nothing to do.%n"", pInfo); } else { List<CaseResult> failedTests = testResultAction.getFailedTests(); printResultItems(failedTests, listener); createJiraIssue(failedTests, build, listener); logger.printf(""%s Done.%n"", pInfo); } return true; } "	0	0	1	0	1	0
"static JsonSerializer<Configuration> newConfigurationSerializer() { return (configuration, typeOfObject, context) -> { if (configuration == null) return null;  JsonObject jsonObject = new JsonObject();  HeaderManager defaultResponseHeaderManager = configuration.defaultResponseHeaderManager(); if (defaultResponseHeaderManager.keyCount() > 0) jsonObject.add(""defaultResponseHeaders"", context.serialize(defaultResponseHeaderManager));  SettingsManager settingsManager = configuration.defaultSettingsManager(); if (settingsManager.entryCount() > 0) jsonObject.add(""settings"", context.serialize(settingsManager));  List<MockRequest> requests = configuration.requests(); if (requests.size() > 0) jsonObject.add(""requests"", context.serialize(requests));  return jsonObject; }; } "	0	0	1	1	1	0
"@Override public boolean implies(ProtectionDomain domain, Permission permission) { if (domain == policyDomain) return policyPermissions.implies(permission); if (basePolicyIsRemote){ if (basePolicy.implies(domain, permission)) return true; } if (permission == null) throw new NullPointerException(""permission not allowed to be null""); /* If com.sun.security.provider.PolicyFile: * Do not call implies on the base Policy, if * there are UnresolvedPermission's that are undergoing resolution * while another Permission within that collection is already * resolved, the Enumeration will cause a ConcurrentModificationException. */  /* Be mindful of static Permissions held by the * ProtectionDomain, a Permission may be implied by the * the combination of Permission's in the ProtectionDomain and * the base policy, but not by either individually. * The ProtectionDomain merge is only perfomed if * ProtectionDomain.toString() is called, this is purely for debugging * the policy permissions are never merged back into the * ProtectionDomain, the underlying policy * performs the merge. * * Furthermore it is commonly understood that when * ProtectionDomain.implies(Permission) is called, it first checks * it's own private Permissions, then calls Policy.implies, however * this is incorrect, the Policy is checked first. */ /* Don't use the underlying policy permission collection otherwise * we can leak grants in to the underlying policy from our cache, * this could then be inadvertantly cached and passed to a ProtectionDomain * constructor, preventing Revocation. */ NavigableSet<Permission> permissions = new TreeSet<Permission>(comparator); // Keep as small as possible. /* If GrantPermission is being requested, we must get all Permission objects * and add them to the underlying collection. * */ Class permClass = permission instanceof GrantPermission ? null : permission.getClass(); if (!basePolicyIsConcurrent) { PermissionCollection pc = basePolicy.getPermissions(domain); Enumeration<Permission> enu = pc.elements(); while (enu.hasMoreElements()){ Permission p = enu.nextElement(); if (p instanceof AllPermission) return true; // Return early. if ( permClass == null){ permissions.add(p); } else if ( permClass.isInstance(permission) || permission instanceof UnresolvedPermission){ permissions.add(p); } } }else{ Collection<PermissionGrant> grants = ((ScalableNestedPolicy) basePolicy).getPermissionGrants(domain); processGrants(grants, permClass, true, permissions); if (permissions.contains(ALL_PERMISSION)) return true; } PermissionGrant[] grantsRefCopy = remotePolicyGrants; // In case the grants volatile reference is updated. //        if (thread.isInterrupted()) return false; int l = grantsRefCopy.length; for ( int i = 0; i < l; i++){ if (grantsRefCopy[i].implies(domain)) { Collection<Permission> perms = grantsRefCopy[i].getPermissions(); Iterator<Permission> it = perms.iterator(); while (it.hasNext()){ Permission p = it.next(); if ( permClass == null){ permissions.add(p); } else if ( permClass.isInstance(permission) || permission instanceof UnresolvedPermission){ permissions.add(p); } } } } //        if (thread.isInterrupted()) return false;  PermissionCollection pc = null; if (permClass != null){ pc =convert(permissions, 1, 0.75F, 1, 16); } else { // GrantPermission pc = convert(permissions, 24, 0.75F, 1, 16); expandUmbrella(pc); } return pc.implies(permission); } "	1	0	0	0	0	0
"private void insertDataRecord(final String tableName, final WireRecord wireRecord) throws SQLException { checkNull(tableName, s_message.tableNameNonNull()); checkNull(wireRecord, s_message.wireRecordNonNull());  final String sqlTableName = this.m_dbHelper.sanitizeSqlTableAndColumnName(tableName); final StringBuilder sbCols = new StringBuilder(); final StringBuilder sbVals = new StringBuilder();  // add the timestamp sbCols.append(""TIMESTAMP""); sbVals.append(""?"");  final List<WireField> dataFields = wireRecord.getFields(); for (final WireField dataField : dataFields) { final String sqlColName = this.m_dbHelper.sanitizeSqlTableAndColumnName(dataField.getName()); sbCols.append("", "" + sqlColName); sbVals.append("", ?""); }  s_logger.info(s_message.storingRecord(tableName, sqlTableName)); final String sqlInsert = MessageFormat.format(SQL_INSERT_RECORD, sqlTableName, sbCols.toString(), sbVals.toString()); Connection conn = null; PreparedStatement stmt = null; try { conn = this.m_dbHelper.getConnection(); stmt = conn.prepareStatement(sqlInsert); stmt.setTimestamp(1, new Timestamp(wireRecord.getTimestamp().getTime())); for (int i = 0; i < dataFields.size(); i++) { final WireField dataField = dataFields.get(i); final DataType dataType = dataField.getValue().getType(); final Object value = dataField.getValue(); switch (dataType) { case BOOLEAN: s_logger.info(s_message.storeBoolean(((BooleanValue) value).getValue())); stmt.setBoolean(2 + i, ((BooleanValue) value).getValue()); break; case BYTE: s_logger.info(s_message.storeByte(((ByteValue) value).getValue())); stmt.setByte(2 + i, ((ByteValue) value).getValue()); break; case DOUBLE: s_logger.info(s_message.storeDouble(((DoubleValue) value).getValue())); stmt.setDouble(2 + i, ((DoubleValue) value).getValue()); break; case INTEGER: s_logger.info(s_message.storeInteger(((IntegerValue) value).getValue())); stmt.setInt(2 + i, ((IntegerValue) value).getValue()); break; case LONG: s_logger.info(s_message.storelong(((LongValue) value).getValue())); stmt.setLong(2 + i, ((LongValue) value).getValue()); break; case BYTE_ARRAY: s_logger.info(s_message.storeByteArray(Arrays.toString(((ByteArrayValue) value).getValue()))); stmt.setBytes(2 + i, ((ByteArrayValue) value).getValue()); break; case SHORT: s_logger.info(s_message.storeShort(((ShortValue) value).getValue())); stmt.setShort(2 + i, ((ShortValue) value).getValue()); break; case STRING: s_logger.info(s_message.storeString(((StringValue) value).getValue())); stmt.setString(2 + i, ((StringValue) value).getValue()); break; default: break; } } stmt.execute(); conn.commit(); s_logger.info(s_message.stored()); } catch (final SQLException e) { this.m_dbHelper.rollback(conn); throw e; } finally { this.m_dbHelper.close(stmt); this.m_dbHelper.close(conn); } } "	0	0	1	1	0	0
"public List<Long> getResourcePids(int theFromIndex, int theToIndex) { ourLog.info(""Requesting search PIDs from {}-{}"", theFromIndex, theToIndex);  CountDownLatch latch = null; synchronized (mySyncedPids) { if (mySyncedPids.size() < theToIndex && mySearch.getStatus() == SearchStatusEnum.LOADING) { int latchSize = theToIndex - mySyncedPids.size(); ourLog.info(""Registering latch to await {} results (want {} total)"", latchSize, theToIndex); latch = new CountDownLatch(latchSize); myResultSizeLatch.add(latch); } }  if (latch != null) { while (latch.getCount() > 0 && mySearch.getStatus() == SearchStatusEnum.LOADING) { try { ourLog.trace(""Awaiting latch with {}"", latch.getCount()); latch.await(500, TimeUnit.MILLISECONDS); } catch (InterruptedException e) { // ok } } }  ArrayList<Long> retVal = new ArrayList<Long>(); synchronized (mySyncedPids) { verifySearchHasntFailedOrThrowInternalErrorException(mySearch);  int toIndex = theToIndex; if (mySyncedPids.size() < toIndex) { toIndex = mySyncedPids.size(); } for (int i = theFromIndex; i < toIndex; i++) { retVal.add(mySyncedPids.get(i)); } }  return retVal; } "	0	0	1	0	1	0
@Override public boolean onOffsetChanged(final SmoothAppBarLayout smoothAppBarLayout, final View target, final int verticalOffset) { if (mHandler != null) { if (mRunnable != null) { mHandler.removeCallbacks(mRunnable); } mAdapter.clear(); vRecyclerView.getAdapter().notifyDataSetChanged(); vRecyclerView.setNestedScrollingEnabled(false); mRunnable = new Runnable() { @Override public void run() { mAdapter.addItems(getSampleData()); vRecyclerView.getAdapter().notifyDataSetChanged(); vRecyclerView.setNestedScrollingEnabled(true); Utils.syncOffset(smoothAppBarLayout, target, verticalOffset, getScrollTarget()); } }; mHandler.postDelayed(mRunnable, 2000); } return false; } 	0	0	0	1	1	0
"public void run() { Connection c = null; try { c = getConnection(); Statement statement = c.createStatement();  statement.executeUpdate(""CREATE TABLE IF NOT EXISTS csnUUID (Id int(11) AUTO_INCREMENT, ShopOwnerId VARCHAR(36), CustomerId VARCHAR(36), ItemId VARCHAR(1000), Mode INT(11), Amount FLOAT(53), Quantity INT(11), Time INT(11), Unread INT(11), PRIMARY KEY (Id))"");  pluginEnabled = true; } catch (SQLException e) { e.printStackTrace(); } finally { ChestShopNotifier.close(c); }  if(pluginEnabled) { getLogger().log(Level.WARNING, ""Database connected!""); if (sender != null) { sender.sendMessage(ChatColor.LIGHT_PURPLE + ""ChestShop Notifier // "" + ChatColor.GREEN + ""Reloaded!""); sender.sendMessage(ChatColor.LIGHT_PURPLE + ""ChestShop Notifier // "" + ChatColor.GREEN + ""Database connected!""); } } else { getLogger().log(Level.WARNING, ""Failed to connect to the database! Disabling connections!""); if (sender != null) { sender.sendMessage(ChatColor.LIGHT_PURPLE + ""ChestShop Notifier // "" + ChatColor.GREEN + ""Reloaded!""); sender.sendMessage(ChatColor.LIGHT_PURPLE + ""ChestShop Notifier // "" + ChatColor.RED + ""Database failed to connect!""); } } } "	0	0	1	0	1	0
"@Override public void trigger(final World world, final int x, final int y, final int z, final EntityPlayer player) { if(!player.getCommandSenderName().equalsIgnoreCase(this.userName)) { player.addChatMessage(new ChatComponentText(""Hey you aren't "" + this.userName + ""! You cant have his reward! Try again!"")); Entity itemEnt = new EntityItem(world, x, y, z, new ItemStack(CCubesBlocks.chanceCube, 1)); world.spawnEntityInWorld(itemEnt); return; } player.addChatMessage(new ChatComponentText(""Selecting best (possibly deadly) reward for "" + this.type + "" "" + this.userName));  Task task = new Task(""Custom Reward"", 60) { @Override public void callback() { triggerAcutalReward(world, x, y, z, player); } };  Scheduler.scheduleTask(task);  } "	0	0	1	0	0	0
public static int getTemplateLanguageVersionAsInt(TemplateObject to) { return to.getTemplate().getTemplateLanguageVersion().intValue(); } 	1	0	0	0	1	0
"private void emitMultimediaLinks(int level, List<Multimedia> multimedia) throws GedcomWriterException { if (multimedia == null) { return; } for (Multimedia m : multimedia) { if (m.xref == null) { // Link to referenced form if (g55()) { // GEDCOM 5.5 format emitTag(level, ""OBJE""); if (m.fileReferences.size() > 1) { throw new GedcomWriterVersionDataMismatchException(""GEDCOM version is 5.5, but multimedia link references "" + ""multiple files, which is only allowed in GEDCOM 5.5.1""); } if (m.fileReferences.size() == 1) { FileReference fr = m.fileReferences.get(0); if (fr.format == null) { emitTagWithRequiredValue(level + 1, ""FORM"", m.embeddedMediaFormat); } else { emitTagWithRequiredValue(level + 1, ""FORM"", fr.format); } emitTagIfValueNotNull(level + 1, ""TITL"", m.embeddedTitle); emitTagWithRequiredValue(level + 1, ""FILE"", fr.referenceToFile); } else { emitTagWithRequiredValue(level + 1, ""FORM"", m.embeddedMediaFormat); emitTagIfValueNotNull(level + 1, ""TITL"", m.embeddedTitle); } emitNotes(level + 1, m.notes); } else { // GEDCOM 5.5.1 format for (FileReference fr : m.fileReferences) { emitTagWithRequiredValue(level + 1, ""FILE"", fr.referenceToFile); emitTagIfValueNotNull(level + 2, ""FORM"", fr.format); emitTagIfValueNotNull(level + 3, ""MEDI"", fr.mediaType); emitTagIfValueNotNull(level + 1, ""TITL"", fr.title); } if (!m.notes.isEmpty()) { throw new GedcomWriterVersionDataMismatchException( ""GEDCOM version is 5.5.1, but multimedia link has notes which are no longer allowed in 5.5""); } } } else { // Link to the embedded form emitTagWithRequiredValue(level, ""OBJE"", m.xref); } emitCustomTags(m.customTags); } } "	1	0	0	0	1	0
public static int randomInt(int bound) { return (int) (RANDOM.nextDouble() * bound); } 	0	0	1	0	1	0
"public RealmConfiguration configuration(Context context) { return new RealmConfiguration.Builder(context) .modules(new OHRealmModule()) .migration(migration) .name(""TreehouTest.realm"") .schemaVersion(2) .build(); } "	0	0	1	0	0	0
"public List<BarDrinkOrder> getDrinkOrdersByBarId(int bar_id) { try { return this.jdbcPostgres.query(""select drinkorder.id, drinkorder.drink_id, drinkorder.drink_count, drink.name, drink.icon_url, drinkorder.user_id, users.name as username, drinkorder.time_placed, drinkorder.time_complete, drinkorder.bar_id, drinkorder.comments from drinkorder left join drink on drink.id = drinkorder.drink_id left join users on users.id = drinkorder.user_id where users.enabled = 't' and drinkorder.bar_id = ? order by drinkorder.time_placed"", new Object[] {bar_id}, new BarDrinkOrderMapper()); } catch(Exception e) { log.info("""", e); return new ArrayList<BarDrinkOrder>(); } } "	0	0	0	1	1	0
"public void menuPerformed(String menu, String item) { if (item==""about"") aboutBox = new AboutBox(circuitjs1.versionString); if (item==""importfromlocalfile"") { pushUndo(); loadFileInput.click(); } if (item==""importfromtext"") { importFromTextDialog = new ImportFromTextDialog(this); } if (item==""importfromdropbox"") { importFromDropboxDialog = new ImportFromDropboxDialog(this); } if (item==""exportasurl"") { doExportAsUrl(); } if (item==""exportaslocalfile"") doExportAsLocalFile(); if (item==""exportastext"") doExportAsText(); if (item==""exporttodropbox"") doExportToDropbox();  if ((menu==""elm"" || menu==""scopepop"") && contextPanel!=null) contextPanel.hide(); if (menu==""options"" && item==""other"") doEdit(new EditOptions(this)); if (item==""undo"") doUndo(); if (item==""redo"") doRedo(); if (item == ""cut"") { if (menu!=""elm"") menuElm = null; doCut(); } if (item == ""copy"") { if (menu!=""elm"") menuElm = null; doCopy(); } if (item==""paste"") doPaste(null); if (item==""duplicate"") { if (menu!=""elm"") menuElm = null; doDuplicate(); } if (item==""selectAll"") doSelectAll(); //	if (e.getSource() == exitItem) { //	    destroyFrame(); //	    return; //	}  if (item==""centrecircuit"") { pushUndo(); centreCircuit(); } if (item==""stackAll"") stackAll(); if (item==""unstackAll"") unstackAll(); if (item==""combineAll"") combineAll(); if (item==""zoomin"") zoomCircuit(20); if (item==""zoomout"") zoomCircuit(-20); if (menu==""elm"" && item==""edit"") doEdit(menuElm); if (item==""delete"") { if (menu==""elm"") menuElm = null; doDelete(); }  if (item==""viewInScope"" && menuElm != null) { int i; for (i = 0; i != scopeCount; i++) if (scopes[i].getElm() == null) break; if (i == scopeCount) { if (scopeCount == scopes.length) return; scopeCount++; scopes[i] = new Scope(this); scopes[i].position = i; //handleResize(); } scopes[i].setElm(menuElm); if (i > 0) scopes[i].speed = scopes[i-1].speed; } if (menu==""scopepop"") { pushUndo(); if (item==""remove"") scopes[menuScope].setElm(null); if (item==""removeplot"") scopes[menuScope].removePlot(menuPlot); if (item==""speed2"") scopes[menuScope].speedUp(); if (item==""speed1/2"") scopes[menuScope].slowDown(); if (item==""scale"") scopes[menuScope].adjustScale(.5); if (item==""maxscale"") scopes[menuScope].adjustScale(1e-50); if (item==""stack"") stackScope(menuScope); if (item==""unstack"") unstackScope(menuScope); if (item==""combine"") combineScope(menuScope); if (item==""selecty"") scopes[menuScope].selectY(); if (item==""reset"") scopes[menuScope].resetGraph(); if (item.indexOf(""show"")==0 || item==""plotxy"" || item==""showfft"") { scopes[menuScope].handleMenu(item); } //cv.repaint(); } if (menu==""circuits"" && item.indexOf(""setup "") ==0) { pushUndo(); int sp = item.indexOf(' ', 6); readSetupFile(item.substring(6, sp-6), item.substring(sp+1), true); }  //	if (ac.indexOf(""setup "") == 0) { //	    pushUndo(); //	    readSetupFile(ac.substring(6), //			  ((MenuItem) e.getSource()).getLabel()); //	}  // IES: Moved from itemStateChanged() if (menu==""main"") { if (contextPanel!=null) contextPanel.hide(); //	MenuItem mmi = (MenuItem) mi; //		int prevMouseMode = mouseMode; setMouseMode(MODE_ADD_ELM); String s = item; if (s.length() > 0) mouseModeStr = s; if (s.compareTo(""DragAll"") == 0) setMouseMode(MODE_DRAG_ALL); else if (s.compareTo(""DragRow"") == 0) setMouseMode(MODE_DRAG_ROW); else if (s.compareTo(""DragColumn"") == 0) setMouseMode(MODE_DRAG_COLUMN); else if (s.compareTo(""DragSelected"") == 0) setMouseMode(MODE_DRAG_SELECTED); else if (s.compareTo(""DragPost"") == 0) setMouseMode(MODE_DRAG_POST); else if (s.compareTo(""Select"") == 0) setMouseMode(MODE_SELECT); //		else if (s.length() > 0) { //			try { //				addingClass = Class.forName(s); //			} catch (Exception ee) { //				ee.printStackTrace(); //			} //		} //		else //			setMouseMode(prevMouseMode); tempMouseMode = mouseMode; } } "	1	1	1	1	0	0
@Override public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((uuidPerson == null) ? 0 : uuidPerson.hashCode()); return result; } 	0	0	1	0	1	0
public Item openItem(File file) { try { if (file.canRead()) { AssetHandle handle = AssetManager.getInstance().deserialize( new AssetDescriptor(EditorFileManager.getFileChooser().getSelectedFile().toURI())); Item item = (Item) handle.getAsset();  return item; } } catch (IOException | AssetException ex) { Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex); }  return null; } 	0	0	0	0	0	1
private void setupContentDimensions(int count) { ArrayList<View> list = getItemsInReadingOrder();  int countX = mContent.getCountX(); int countY = mContent.getCountY(); boolean done = false;  while (!done) { int oldCountX = countX; int oldCountY = countY; if (countX * countY < count) { // Current grid is too small, expand it if ((countX <= countY || countY == mMaxCountY) && countX < mMaxCountX) { countX++; } else if (countY < mMaxCountY) { countY++; } if (countY == 0) countY++; } else if ((countY - 1) * countX >= count && countY >= countX) { countY = Math.max(0, countY - 1); } else if ((countX - 1) * countY >= count) { countX = Math.max(0, countX - 1); } done = countX == oldCountX && countY == oldCountY; } mContent.setGridSize(countX, countY); arrangeChildren(list); } 	0	0	0	1	0	0
"protected File copyToConfDir(String classPathResource, String newName) throws IOException { File result = temporaryFolder.newFile(""conf/"" + newName); IOUtils.copy(new ClassPathResource(classPathResource).getInputStream(), new FileOutputStream(result)); return result; } "	0	0	1	0	1	0
public static int dp2px(Context context, float dp) { Resources r = context.getResources(); float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, r.getDisplayMetrics()); return (int) px; } 	0	0	1	0	1	0
"private static String createWindowsRegistryFileAssociation(String installDir, String fileExt, String progId, String description, String robocodeCmdParam) { StringBuffer sb = new StringBuffer();  final String HKCR = ""[HKEY_CLASSES_ROOT\\"";  sb.append(""REGEDIT4\n""); sb.append(HKCR).append(fileExt).append(""]\n""); sb.append(""@=\"""").append(progId).append(""\""\n""); sb.append(HKCR).append(progId).append(""]\n""); sb.append(""@=\"""").append(description).append(""\""\n""); sb.append(HKCR).append(progId).append(""\\shell]\n""); sb.append(HKCR).append(progId).append(""\\shell\\open]\n""); sb.append(HKCR).append(progId).append(""\\shell\\open\\command]\n""); sb.append(""@=\"""").append(getWindowsCmd()).append(""\\\""cd \\\"""").append(installDir.replaceAll(""[\\\\]"", ""\\\\\\\\"")).append(""\\\"" && robocode.bat "").append(robocodeCmdParam).append( "" \\\""%1\\\""\\\""\""\n"");  return sb.toString(); } "	0	0	1	0	1	0
"@DebugLog @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_detail);  Intent intent = getIntent(); deviceName = intent.getStringExtra(EXTRAS_DEVICE_NAME); deviceAddress = intent.getStringExtra(EXTRAS_DEVICE_ADDRESS); deviceRSSI = ""- - "" + RSSI_UNIT;  setToolbar(); setFragments();  fragmentManager.beginTransaction().replace(R.id.detail_fragment_view, serviceListFragment).commit(); } "	0	0	1	0	1	0
"@DebugLog @Override public void onCharacteristicItemClick(int position) { fragmentManager.beginTransaction().addToBackStack(""detail"").replace(R.id.detail_fragment_view, controlFragment).commit(); bluetoothGattCharacteristic = bluetoothGattCharacteristics.get(position); } "	0	0	1	1	1	0
"public void addTrafficData(String type, double lat, double lon) { GeoLocation location = new GeoLocation(); location.setID(user.getUid()); Log.d(""Main Activity"",user.getDisplayName()); location.setName(user.getDisplayName()); location.setType(type); location.setLongti(lon+""""); location.setLati(lat+""""); location.setTime(new Date().toString());  String key = mDatabase.child(""GeoLocations"").push().getKey(); Map<String, Object> postValues = location.toMap();  Map<String, Object> childUpdates = new HashMap<>(); childUpdates.put(key, postValues); mDatabase.updateChildren(childUpdates); } "	0	0	1	0	1	0
"public void createDistressMessageUI(DistressMessage distressMessage) {  if (distressMessage == null) return;  Log.i(FRAGMENT_TAG, ""createDistressMessageUI Enter distressMessage = "" + distressMessage.toString()); TextView distressName = (TextView) rootView.findViewById(R.id.distress_name); TextView distressAge = (TextView) rootView.findViewById(R.id.distress_age); TextView distressPreExisting = (TextView) rootView.findViewById(R.id.distress_preexisting); TextView distressPhone = (TextView) rootView.findViewById(R.id.distress_phone);  Log.i(FRAGMENT_TAG, ""distressName  = "" + distressName); distressName.setText(""Name: "" + distressMessage.name); distressAge.setText(""Age: "" + distressMessage.age); distressPreExisting.setText(""Pre-existing Conditions: "" + distressMessage.preConditions); distressPhone.setText(""Phone Number: "" + distressMessage.phoneNumber); ((TextView) rootView.findViewById(R.id.responseScreenMsg)).setText(""Distress Message Received from:""); } "	0	0	1	1	1	0
@Override public Optional<BooleanExpression> getRestOfExpression() { Optional<BooleanExpression> leftAsBooleanExpression = asBooleanExpression(left); Optional<BooleanExpression> rightAsBooleanExpression = asBooleanExpression(right); List<BooleanExpression> restOfExpressions = new ArrayList<>(); if (leftAsBooleanExpression.isPresent() && leftAsBooleanExpression.get().getRestOfExpression().isPresent()) { restOfExpressions.add(leftAsBooleanExpression.get().getRestOfExpression().get()); } if (rightAsBooleanExpression.isPresent() && rightAsBooleanExpression.get().getRestOfExpression().isPresent()) { restOfExpressions.add(rightAsBooleanExpression.get().getRestOfExpression().get()); } if (restOfExpressions.isEmpty()) { return Optional.empty(); } return (restOfExpressions.size() == 2) ? Optional.of(new BinaryBooleanExpression(restOfExpressions.get(0), BinaryBooleanOperator.AND, restOfExpressions.get(1))) : Optional.of(restOfExpressions.get(0)); } 	1	1	1	1	0	0
"@RequestMapping(value = Uris.TREETYPE_CREATE, method = RequestMethod.POST) @Transactional public ResponseEntity<?> createTreeType(@RequestParam String treeTypeName, @RequestParam long annualCo2, @RequestParam String description, @RequestParam String imgType, @RequestParam(""file"") MultipartFile file) {  if(_treeTypeRepository.findByName(treeTypeName) != null){ return new ResponseEntity<>(HttpStatus.BAD_REQUEST); }  TreeType treeType = new TreeType();  treeType.setName(treeTypeName); treeType.setAnnualCo2SavingInTons(((double) annualCo2)/100); treeType.setDescription(description);  String treeTypeFolder = FileSystemInjector.getTreeTypeFolder(); String imageName = treeTypeName + ""."" + imgType; if (!file.isEmpty()) { try { imageName = _imageHelper.storeImage(file, treeTypeFolder, imageName); treeType.setImageFile(imageName); _treeTypeRepository.save(treeType); return new ResponseEntity<>(HttpStatus.OK); } catch (IOException e) { return new ResponseEntity<>(HttpStatus.BAD_REQUEST); } } else { return new ResponseEntity<>(HttpStatus.BAD_REQUEST); }  } "	0	0	1	0	1	0
@Override public Content getRawContent(String url) { return storeService.findContent(getCurrentSiteContext().getContext(), url); } 	0	0	1	0	1	0
@Override public Technology addOrUpdateTechnology(Technology technology, User user) throws BadRequestException, IOException, GeneralSecurityException {  Technology foundTechnology = validateInformations(technology); Boolean isUpdate = foundTechnology != null && foundTechnology.getId().equals(technology.getId()) && foundTechnology.getActive().equals(Boolean.TRUE);  String imageLink = technology.getImage(); if (technology.getImageContent() != null) { imageLink = storageDAO.insertImage(convertNameToId(technology.getName()), new ByteArrayInputStream(DatatypeConverter.parseBase64Binary(technology.getImageContent()))); }  fillTechnology(technology, user, imageLink, isUpdate);  technologyDAO.add(technology);  return technology; } 	1	0	1	1	0	0
"private void addToMapByObjectKey(int objectSpecifier, int row, int col) { switch (objectSpecifier) { //Player (player.png) case 0: map[row][col] = new Player(row, col); playerCurrentLocation[0] = row; playerCurrentLocation[1] = col; break; //Horizontal Wall (hwall.png) case 1: map[row][col] = new Wall(""hwall""); break; //Vertical Wall (vwall.png) case 2: map[row][col] = new Wall(""vwall""); break; //Top Left Wall (tlwall.png) case 3: map[row][col] = new Wall(""tlwall""); break; //Top Right Wall (trwall.png) case 4: map[row][col] = new Wall(""trwall""); break; //Bottom Right Wall (brwall.png) case 5: map[row][col] = new Wall(""brwall""); break; //Bottom Left Wall(blwall.png) case 6: map[row][col] = new Wall(""blwall""); break; //Monster (*.png) case 7: map[row][col] = new Monster(); //map[row][col] = new Wall(""hwall""); break; //Empty (empty.png) case 8: map[row][col] = null; break; //If the objectSpecifer was not found default: System.out.println(objectSpecifier + "" is not a known object specifier.""); break; } } "	1	0	1	1	1	0
"private void addBackLinks(Node bubble) { Collection<Node> container; for (Node node : bubble.getStartNode().getBackLinks()) { container = bubbles.stream() .filter(x -> (x.getStartNode().getId() != x.getEndNode().getId()) && x.getEndNode().getId() == bubble.getStartNode().getId()) .collect(Collectors.toSet()); if (container.size() > 0) { bubble.getBackLinks().addAll(container); } else { bubble.getBackLinks().add(node); } } System.out.println(""Id: "" + bubble.getId() + "" BackLinks:"" + linksToString(bubble.getBackLinks())); } "	1	1	1	1	0	0
"private void createCommitStatus(AbstractBuild<?, ?> build, TaskListener listener, String message, GHRepository repo, GHCommitState state) throws GhprbCommitStatusException {  Map<String, String> envVars = Ghprb.getEnvVars(build, listener);  String sha1 = envVars.get(""ghprbActualCommit""); Integer pullId = Integer.parseInt(envVars.get(""ghprbPullId""));  String url = envVars.get(""BUILD_URL""); if (StringUtils.isEmpty(url)) { url = envVars.get(""JOB_URL""); }  if (statusUrl == ""--none--"") { url = """"; } else if (!StringUtils.isEmpty(statusUrl)) { url = Ghprb.replaceMacros(build,  listener, statusUrl); }  String context = Util.fixEmpty(commitStatusContext); context = Ghprb.replaceMacros(build, listener, context);  listener.getLogger().println(String.format(""Setting status of %s to %s with url %s and message: '%s'"", sha1, state, url, message)); if (context != null) { listener.getLogger().println(String.format(""Using context: "" + context)); } try { repo.createCommitStatus(sha1, state, url, message, context); } catch (IOException e) { throw new GhprbCommitStatusException(e, state, message, pullId); } } "	0	0	1	0	1	0
"@Override public void bindingChanged(BindingProvider pvProvider, String pvItemName) { logger.debug(""bindingChanged() for item {} msg received."", pvItemName);  if (pvProvider instanceof OneWireBindingProvider) { ivCacheItemStates.remove(pvItemName);  OneWireBindingProvider lvBindingProvider = (OneWireBindingProvider) pvProvider;  OneWireBindingConfig lvBindingConfig = lvBindingProvider.getBindingConfig(pvItemName);  // Only for AbstractOneWireDevicePropertyBindingConfig, not for // AbstractOneWireControlBindingConfigs if (lvBindingConfig != null && lvBindingConfig instanceof AbstractOneWireDevicePropertyBindingConfig) { AbstractOneWireDevicePropertyBindingConfig lvDeviceBindingConfig = (AbstractOneWireDevicePropertyBindingConfig) lvBindingConfig;  logger.debug(""Initializing read of item {}."", pvItemName); int lvAutoRefreshTimeInSecs = lvDeviceBindingConfig.getAutoRefreshInSecs();  if (lvAutoRefreshTimeInSecs > -1) { ivOneWireReaderScheduler.updateOnce(pvItemName); }  if (lvAutoRefreshTimeInSecs > 0) { if (!ivOneWireReaderScheduler.scheduleUpdate(pvItemName, lvAutoRefreshTimeInSecs)) { logger.warn(""Couldn't add to OneWireUpdate scheduler"", lvDeviceBindingConfig); } } else { logger.debug(""Didn't add to OneWireUpdate scheduler, because refresh is <= 0: {}"", lvDeviceBindingConfig.toString()); } } } } "	0	0	1	0	0	0
@Test(expected = NullPointerException.class) public void invokeMethodThrowsNullPointerException() { try { ReflectionUtils.invoke(new Object(), (Method) null, ArrayUtils.emptyArray(), Void.class); } catch (NullPointerException expected) { assertEquals(532, expected.getStackTrace()[0].getLineNumber()); throw expected; } } 	0	0	1	0	1	0
"@Factory public static Matcher<HttpParameter[]> hasPostJsonParameter(final String name, final String expectedJsonObjectSource) { JSONObject expectedJsonObject; try { expectedJsonObject = new JSONObject(expectedJsonObjectSource); } catch (JSONException ex) { throw new AssertionError(""failed to parse object source: "" + expectedJsonObjectSource, ex); } return hasPostJsonParameter(name, expectedJsonObject); } "	0	0	1	1	1	0
public String toString() { return name().toLowerCase().replaceFirst(name().substring(0, 1).toLowerCase(), name().substring(0, 1).toUpperCase()); } 	1	0	0	0	0	0
public DevCardType getDevCard() throws ModelException { //Make sure we have at least one dev card if (this.getDevCardCount() == 0) throw new ModelException();  //Create a list of cards with at least one card List<DevCardType> availableCards = new ArrayList<DevCardType>(); for (int i = 0; i <= this.numberDevCardTypes; i++) { if (this.devCards[i] > 0) availableCards.add(DevCardType.fromInt(i)); } //Shuffle that up Collections.shuffle(availableCards);   //Get the first one on the stack DevCardType isThisYourCard = availableCards.get(0);   //Check to make sure just in case if (isThisYourCard == null) { throw new ModelException(); } else { //take one from the array this.devCards[isThisYourCard.ordinal()] --; return isThisYourCard; } //WTF David Blane! (You'll thank me later) // https://youtu.be/AYxu_MQSTTY // https://youtu.be/wTqsV3q7rRU  } 	1	1	1	1	0	0
"private static boolean logErrors(final Collection<ErrorMessage> errors) { boolean isFatal = false;  if (!errors.isEmpty()) { StringBuilder fatals = new StringBuilder(""\n""); StringBuilder warnings = new StringBuilder(); StringBuilder hints = new StringBuilder();  for (final ErrorMessage error : errors) { switch (error.getSeverity()) { case FATAL: isFatal = true; fatals.append(LocalizationMessages.ERROR_MSG(error.getMessage())).append('\n'); break; case WARNING: warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\n'); break; case HINT: warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\n'); break; } }  if (isFatal) { LOGGER.severe(LocalizationMessages.ERRORS_AND_WARNINGS_DETECTED(fatals.append(warnings) .append(hints).toString())); } else { if (warnings.length() > 0) { LOGGER.warning(LocalizationMessages.WARNINGS_DETECTED(warnings.toString())); }  if (hints.length() > 0) { LOGGER.config(LocalizationMessages.HINTS_DETECTED(hints.toString())); } } }  return isFatal; } "	1	0	0	0	1	0
@Override public Rectangle getBounds() { return runTime.getMonitor(curID); } 	0	0	1	0	1	0
"public ReportDataKey build() { ReportDataKey key = new ReportDataKey(healthCode, identifier, studyId, reportType);  Errors errors = Validate.getErrorsFor(key); Validate.entity(VALIDATOR, errors, key); if (validateDate && date == null) { errors.rejectValue(""date"", ""date is required""); } if (errors.hasErrors()) { Validate.throwException(errors, key); } return key; } "	0	0	1	1	1	0
"private List<EntityCondition> createWorklogQueryExprListWithPermissionCheck( final String selectedUser, final ApplicationUser loggedInUser, final Calendar startDate, final Calendar endDate) throws GenericEntityException {  String userKey = ((selectedUser == null) || """".equals(selectedUser)) ? loggedInUser.getKey() : selectedUser;  List<Long> projects = createProjects(loggedInUser);  EntityExpr startExpr = new EntityExpr(""startdate"", EntityOperator.GREATER_THAN_EQUAL_TO, new Timestamp( startDate.getTimeInMillis())); EntityExpr endExpr = new EntityExpr(""startdate"", EntityOperator.LESS_THAN, new Timestamp(endDate.getTimeInMillis())); EntityExpr userExpr = new EntityExpr(""author"", EntityOperator.EQUALS, userKey); List<EntityCondition> exprList = new ArrayList<EntityCondition>(); exprList.add(userExpr); exprList.add(startExpr); exprList.add(endExpr);  if (!projects.isEmpty()) { EntityExpr projectExpr = new EntityExpr(""project"", EntityOperator.IN, projects); exprList.add(projectExpr); } return exprList; } "	0	0	1	1	0	0
@Override protected void reportFatalError(String msg) throws RDFParseException { reportFatalError(msg, lineReader.getLineNumber(), -1); } 	1	0	0	0	1	0
@Override protected void reportError(String msg, RioSetting<Boolean> setting) throws RDFParseException { reportError(msg, lineReader.getLineNumber(), -1, setting); } 	1	0	0	1	1	0
private Resource buildResourceFromInputParameters(String data) { return JsonDeserializer.deserialize(data, Resource.class); } 	0	0	0	1	0	0
"@BeforeClass() public static void prepareTestClass() throws Exception { setupIntegrationTestEnvironmentForTransactionalTests();  AccountName account = new AccountName(""dez1337""); PublicKey memoKey = new PublicKey(""STM6zLNtyFVToBsBZDsgMhgjpwysYVbsQD6YhP3kRkQhANUB4w7Qp"");  Authority posting = new Authority(); posting.setAccountAuths(new HashMap<>()); Map<PublicKey, Integer> postingKeyAuth = new HashMap<>(); postingKeyAuth.put(new PublicKey(""STM688NyXXSjXmXCy4FSaPH5L2FitugsKU9PbLn5ZiUQr3GaztmCL""), 1); posting.setKeyAuths(postingKeyAuth); posting.setWeightThreshold(1);  Authority active = new Authority(); active.setAccountAuths(new HashMap<>()); Map<PublicKey, Integer> activeKeyAuth = new HashMap<>(); activeKeyAuth.put(new PublicKey(""STM6uWaRvGTtvKTdciKU3rtBbeq3ZfBopvjewQdngeAG31EGSXA2f""), 1); active.setKeyAuths(activeKeyAuth); active.setWeightThreshold(1);  Authority owner = new Authority(); owner.setAccountAuths(new HashMap<>()); Map<PublicKey, Integer> ownerKeyAuth = new HashMap<>(); ownerKeyAuth.put(new PublicKey(""STM5RBRDAfpq4RrWGtLAyMf2qQaiS9abkU2nmDegQiH3P1vMbP2Lq""), 1); owner.setKeyAuths(ownerKeyAuth); owner.setWeightThreshold(1);  String jsonMetadata = """";  AccountUpdateOperation accountUpdateOperation = new AccountUpdateOperation(account, owner, active, posting, memoKey, jsonMetadata);  ArrayList<Operation> operations = new ArrayList<>(); operations.add(accountUpdateOperation);  signedTransaction.setOperations(operations);  sign(); } "	1	0	1	0	1	0
public MenuBar getMenubar() { return MENU_BAR; } 	0	0	0	1	0	0
public StatusBar getStatusbar() { return STATUS_BAR; } 	0	0	0	1	0	0
private boolean jj_3R_72() { if (jj_3R_95()) return true; return false; } 	0	0	1	0	0	0
private boolean jj_3R_77() { if (jj_3R_101()) return true; return false; } 	0	0	1	0	0	0
public void setAdress(String adress) throws EventException{ if(!(adress.isEmpty())) { this.adress = adress; }else{ throw new EventException(ADDRESS_IS_EMPTY); }  } 	1	0	1	1	1	0
"public ParserContext process(ParserContext context) { TokenizerStateFactory factory = TokenizerStateFactory.getInstance(); TokenizerContext tokenizerContext = context.getTokenizerContext(); int currentChar = tokenizerContext.getCurrentInputCharacter();  ASCIICharacter asciiCharacter = tokenizerContext .getCurrentASCIICharacter();   context.addParseEvent(""8.2.4.28"", currentChar);  switch (asciiCharacter) {  case TAB: case LF: case FF: case SPACE: case DASH: case GREATER_THAN_SIGN: /* * If the temporary buffer is the string ""script"", then switch to * the script data double escaped state. Otherwise, switch to the * script data escaped state. Emit the current input character as a * character token. */ if (tokenizerContext.getTemporaryBuffer().equals(""script"")) { tokenizerContext .setNextState(factory .getState(TokenizerState.Script_data_double_escaped_state)); } else { tokenizerContext.setNextState(factory .getState(TokenizerState.Script_data_escaped_state)); } Token token = new Token(TokenType.character, currentChar); tokenizerContext.emitCurrentToken(token); break; case LATIN_CAPITAL_LETTER: /* * Append the current input character to the temporary buffer. Emit * the current input character as a character token. */ tokenizerContext .appendCharacterToTemporaryBuffer(currentChar + 0x0020); tokenizerContext.emitCurrentToken(new Token(TokenType.character, currentChar)); break;  case LATIN_SMALL_LETTER: /* * Append the current input character to the temporary buffer. Emit * the current input character as a character token. */ tokenizerContext.appendCharacterToTemporaryBuffer(currentChar); tokenizerContext.emitCurrentToken(new Token(TokenType.character, currentChar)); break; default: /* * Switch to the script data escaped state. Reconsume the current * input character. */ tokenizerContext.setNextState(factory .getState(TokenizerState.Script_data_escaped_state)); tokenizerContext.setFlagReconsumeCurrentInputCharacter(true); break; }  context.setTokenizerContext(tokenizerContext);  return context; } "	1	0	1	1	0	0
"@Test public void testStaticSingle() throws IOException { StaticUseSingle useSingle = new StaticUseSingle(new StaticSingle<String>(""Boonies""));  String json = JsonWriter.objectToJson(useSingle); //this will crash on ArrayIndexOutOfBoundsException StaticUseSingle other = (StaticUseSingle) JsonReader.jsonToJava(json);  assertEquals(""Boonies"", other.single.field1); } "	0	0	1	1	1	0
"@RequestMapping(value = ""/{username}/playlist/{playlist}"", method = RequestMethod.GET) public String plylist(Model model, @PathVariable(value = ""playlist"") String playlist, @PathVariable(value = ""username"") String username, HttpServletRequest request) { request.getSession().setAttribute(""id_playlist"", Integer.parseInt(playlist)); model.addAttribute(""playlist"", playlist); Playlist playlists = playListService.getPlaylistById(Integer.parseInt(playlist)); if (playlists == null) return ""notFound""; model.addAttribute(""sound"", playlists); return ""playlist""; } "	0	0	1	0	1	0
"public static void main(String[] args) { System.out.println(""issue 9 fixed""); } "	0	0	1	0	1	0
"@Override public HttpSession performLogin() throws Exception { return getMockMvc().perform(post(""/login_ajax"") .param(""userName"", USERNAME).param(""password"", PASSWORD)).andDo(print()) .andReturn().getRequest().getSession(); } "	0	0	1	1	0	0
"public List<Table> getTables() { Cursor c = null; List<Table> tables = new ArrayList<>(); try { final SQLiteDatabase db = mDb.getReadableDatabase(); c = db.rawQuery(String.format(""SELECT * FROM %s"", TABLES_TABLE), null); while (c.moveToNext()) { String name = c.getString(c.getColumnIndex(KEY_TABLE)); String token = c.getString(c.getColumnIndex(KEY_TOKEN)); tables.add(new Table(name, token)); } } catch (final SQLiteException e) { Logger.log(TAG, ""Failed to get all tables"" + e.getMessage(), Logger.SDK_DEBUG); } finally { if (null != c) c.close(); mDb.close(); } return tables; } "	0	0	1	1	1	0
"@Override public void onBindViewHolder(LessonViewHolder holder, int position) { Scheduler lessons = allLessons.get(position); Log.d(TAG, ""Lessons: "" + lessons); holder.classroom.setText(lessons.getClassroom()); holder.schoolSubject.setText(lessons.getSchoolSubject()); holder.start.setText(lessons.getTime().getHour() + "" : "" + lessons.getTime().getMinute()); holder.end.setText((lessons.getTime().getHour() + (lessons.getTime().getMinute() + lessons.getTime().getDuration()) / 60) % 24  + "" : "" + (lessons.getTime().getMinute() + lessons.getTime().getDuration() % 60)); } "	1	1	1	1	0	0
public UICollapsibleSection setExpanded(boolean expanded) { if (this.expanded != expanded) { this.expanded = expanded; this.content.setVisible(this.expanded); super.setHeight(this.expanded ? this.expandedHeight : CLOSED_HEIGHT); redraw(); } return this; } 	1	0	1	1	0	0
"@Override public boolean isAccessible(Map context, Object target, Member member, String propertyName) { LOG.debug(""Checking access for [target: {}, member: {}, property: {}] is deprecated!"", target, member, propertyName);  if (checkEnumAccess(target, member)) { LOG.trace(""Allowing access to enum: {}"", target); return true; }  Class targetClass = target.getClass(); Class memberClass = member.getDeclaringClass();  if (Modifier.isStatic(member.getModifiers()) && allowStaticMethodAccess) { LOG.debug(""Support for accessing static methods [target: {}, member: {}, property: {}] is deprecated!"", target, member, propertyName); if (!isClassExcluded(member.getDeclaringClass())) { targetClass = member.getDeclaringClass(); } }  if (isPackageExcluded(targetClass.getPackage(), memberClass.getPackage())) { LOG.warn(""Package of target [{}] or package of member [{}] are excluded!"", target, member); return false; }  if (isClassExcluded(targetClass)) { LOG.warn(""Target class [{}] is excluded!"", target); return false; }  if (isClassExcluded(memberClass)) { LOG.warn(""Declaring class of member type [{}] is excluded!"", member); return false; }  boolean allow = true; if (!checkStaticMethodAccess(member)) { LOG.warn(""Access to static [{}] is blocked!"", member); allow = false; }  //failed static test if (!allow) { return false; }  // Now check for standard scope rules return super.isAccessible(context, target, member, propertyName) && isAcceptableProperty(propertyName); } "	0	0	1	1	1	0
private static boolean isTimeForAutoUpdateCheck(long lastUpdateCheck, String autoUpdateFreq) { int checkEveryNDays; if (CommCarePreferences.FREQUENCY_DAILY.equals(autoUpdateFreq)) { checkEveryNDays = 1; } else { checkEveryNDays = 7; } long duration = DateUtils.DAY_IN_MILLIS * checkEveryNDays;  return isPending(lastUpdateCheck, duration); } 	0	0	0	1	0	0
@Override public Prog visit(SyncMethCall smc, JavaWriter w) { try { visitSyncMethodCall(smc, null, null, w); return prog; } catch (IOException e) { throw new RuntimeException(e); } } 	1	0	1	0	1	0
@PUT @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public QuizSubmission put(final QuizSubmission quizSubmission) throws IOException, ApplicationException, NoSuchModelException { return quizSubmissionDAOService.add(quizSubmission); } 	0	0	1	0	1	0
"public static String valueToNotationString(Object val, org.openprovenance.prov.model.QualifiedName xsdType) { if (val instanceof LangString) { LangString istring = (LangString) val; return ""\"""" + istring.getValue() + ((istring.getLang()==null) ? ""\"""" : ""\""@"" + istring.getLang()) + (((xsdType==null)||(xsdType.getUri().equals(internationalizedStringUri)))? """" : "" %% "" + Namespace.qualifiedNameToStringWithNamespace(xsdType)); } else if (val instanceof QualifiedName) { QualifiedName qn = (QualifiedName) val; return ""'"" + Namespace.qualifiedNameToStringWithNamespace(qn) + ""'""; } else if (val instanceof String) { String s=(String)val; if (s.contains(""\n"")) { return ""\""\""\"""" + escape(s) + ""\""\""\"""" ; } else { //FIXME: It's here that we should detect an int and generate the compact form: e.g. 1 instand of 1 %% xsd:int // However dictionaries failed to be parsed then //if (xsdType.getLocalPart().equals(""int"")) { //FIXME:need to properly compare with xsd:int //    return s; //} else { return ""\"""" + escape(s) + ((xsdType==null)? """" : ""\"" %% "" + Namespace.qualifiedNameToStringWithNamespace(xsdType)); //} } } else { // We should never be here! return ""\"""" + val + ""\"" %% "" + Namespace.qualifiedNameToStringWithNamespace(xsdType); } } "	0	0	1	0	1	0
public LocalDateTime getStartDateTime() { try { return LocalDateTime.of(_startDate, (_startTime == null) ? LocalTime.MAX : _startTime); } catch (NullPointerException e) { return null; } } 	0	0	1	0	0	0
private String extractJsonWebToken(Request request) { final String authorization = request.headers().getFirst(HttpHeaders.AUTHORIZATION); String jwt;  if (authorization != null) { jwt = authorization.substring(BEARER.length()).trim(); } else { jwt = request.parameters().get(ACCESS_TOKEN); }  return jwt; } 	1	0	0	0	1	0
public float getScore() {  float max = getMaxFreq();  if (max <= 0) { return VERY_RARE_SCORE; } else if (max > 2) { return NOT_RARE_SCORE; } else { return 1f - (0.13533f * (float) Math.exp(max)); } } 	1	0	1	0	1	0
"private static MultiClip loadClip(String ref, boolean isMP3) { try { URL url = ResourceLoader.getResource(ref);  // check for 0 length files InputStream in = url.openStream(); if (in.available() == 0) { in.close(); return new MultiClip(ref, null); } in.close();  AudioInputStream audioIn = AudioSystem.getAudioInputStream(url); return loadClip(ref, audioIn, isMP3); } catch (UnsupportedAudioFileException | IOException | LineUnavailableException | RuntimeException e) { ErrorHandler.error(String.format(""Failed to load file '%s'."", ref), e, true); return null; } } "	0	0	1	0	0	0
"@Override public boolean onOptionsItemSelected(MenuItem item) { // Handle action bar item clicks here. The action bar will // automatically handle clicks on the Home/Up button, so long // as you specify a parent activity in AndroidManifest.xml. EditText eventInput; EditText tagsInput; EditText descriptionInput;  switch (item.getItemId()) { case R.id.submit_event: eventInput = (EditText) findViewById(R.id.eventInput); tagsInput = (EditText) findViewById(R.id.tagsInput); descriptionInput = (EditText) findViewById(R.id.descriptionInput);  String event = eventInput.getText().toString().trim(); String tag = tagsInput.getText().toString().trim(); String description = descriptionInput.getText().toString().trim(); int vote = 0;  event = event.trim(); tag = tag.trim(); description = description.trim();  if (ParseUser.getCurrentUser() == null) { AlertDialog.Builder builder = new AlertDialog.Builder(this); builder.setMessage(""You must be signed in to create an event."") .setTitle(""Error"") .setPositiveButton(android.R.string.ok, null); AlertDialog alert = builder.create(); alert.show(); } else if (event.isEmpty() || tag.isEmpty() || description.isEmpty()) { AlertDialog.Builder builder = new AlertDialog.Builder(this); builder.setMessage(""You must include a name and a tag."") .setTitle(""Error"") .setPositiveButton(android.R.string.ok, null); AlertDialog alert = builder.create(); alert.show(); } else { ParseObject eventObject = new ParseObject(ParseConstants.CLASS_EVENTS); eventObject.put(ParseConstants.KEY_SENDER_ID, ParseUser.getCurrentUser().getObjectId()); eventObject.put(ParseConstants.KEY_SENDER_NAME, ParseUser.getCurrentUser().getUsername()); eventObject.put(ParseConstants.KEY_EVENT_NAME, event); eventObject.put(ParseConstants.KEY_EVENT_TAG, getTagId(tag)); eventObject.put(ParseConstants.KEY_EVENT_VOTES, vote); eventObject.put(ParseConstants.KEY_EVENT_DESCRIPTION, description);  ByteArrayOutputStream stream = new ByteArrayOutputStream(); if(mBitmap != null) { mBitmap.compress(Bitmap.CompressFormat.PNG, 100, stream); byte[] image = stream.toByteArray(); ParseFile imageFile = new ParseFile(""event_image.png"", image); imageFile.saveInBackground(); eventObject.put(ParseConstants.KEY_EVENT_IMAGE, imageFile); }  eventObject.saveInBackground(new SaveCallback() { @Override public void done(ParseException e) { if (e == null) { Toast.makeText(CreateEventActivity.this, ""Event Uploaded"", Toast.LENGTH_SHORT).show(); CreateEventActivity.this.finish(); } else { AlertDialog.Builder builder = new AlertDialog.Builder(CreateEventActivity.this); builder.setMessage(e.getMessage() + """") .setTitle(""Error"") .setPositiveButton(android.R.string.ok, null); AlertDialog dialog = builder.create(); dialog.show(); } } }); } return true; case R.id.upload_photo: showImageOptions(); return true; default: return super.onOptionsItemSelected(item); } } "	0	0	0	0	0	1
"private void refreshContentVisibility() { // can't refresh visibility until / unless all views are created if (mAdapter == null || mNoResults == null || mError == null || mLoading == null) return;  boolean adapterEmpty = mAdapter.getCount() < 1; boolean loadingVis = mIsLoading && adapterEmpty; boolean errorVis = mLastResult == Result.FAILURE && !mIsLoading; // Result.EMPTY refers to initial run of loader, not ""no results"" TODO should probably make this more logical boolean noResultsVis = !errorVis && adapterEmpty && mLastResult != Result.EMPTY;  mSearchButton.showProgress(mIsLoading);  mNoResults.setVisibility(ViewUtils.boolToVis(noResultsVis)); mError.setVisibility(ViewUtils.boolToVis(errorVis)); mLoading.setVisibility(ViewUtils.boolToVis(loadingVis)); } "	1	0	1	0	1	0
@Override public Iterable<QualifiedName> getImportedNames() { if (null == lazyImportedNames) { synchronized (this) { if (null == lazyImportedNames) { // get imported names collected during global scoping // the scope provider registers every request in scoping so that by this // also all names are collected that cannot be resolved Iterable<QualifiedName> superImportedNames = super.getImportedNames(); Set<QualifiedName> importedNames = Sets.newHashSet(); if (superImportedNames != null) { importedNames = Sets.newHashSet(superImportedNames); } else { importedNames = Sets.<QualifiedName> newHashSet(); } // import our own module name to get a proper change notification Resource resource = getResource(); List<EObject> contents = resource.getContents(); if (contents.size() > 1) { TModule module = (TModule) contents.get(1); importedNames.add(qualifiedNameProvider.getFullyQualifiedName(module)); } final Set<EObject> crossRefTypes = Sets.newHashSet(); IAcceptor<ImmutablePair<EObject, EObject>> acceptor = getCrossRefTypeAcceptor(crossRefTypes); crossReferenceComputer.computeCrossRefs(resource, acceptor); for (EObject type : crossRefTypes) { if (type instanceof Type) { handleType(importedNames, type); } else if (type instanceof TVariable) { handleTVariable(importedNames, (TVariable) type); } else if (type instanceof TEnumLiteral) { handleTEnumLiteral(importedNames, (TEnumLiteral) type); } }  this.lazyImportedNames = importedNames;  } } }  return lazyImportedNames; } 	1	0	1	0	0	0
"public TabLayoutAssert hasTabMode(@TabMode int mode) { isNotNull(); int actualMode = actual.getTabCount(); //noinspection ResourceType assertThat(actualMode) // .overridingErrorMessage(""Expected tab mode of <%s> but was <%s>."", modeToString(mode), modeToString(actualMode)) // .isEqualTo(mode); return this; } "	0	0	1	0	1	0
public static IRole getRoleFromJSON(IGuild guild, RoleResponse json) { Role role; if ((role = (Role) guild.getRoleForId(json.id)) != null) { role.setColor(json.color); role.setHoist(json.hoist); role.setName(json.name); role.setPermissions(json.permissions); role.setPosition(json.position); } else { role = new Role(json.position, json.permissions, json.name, json.managed, json.id, json.hoist, json.color); } return role; } 	1	0	0	1	1	0
"public Integer getPlacesAvailable(final IsaacEventPageDTO event, final boolean countOnlyConfirmed) throws SegueDatabaseException { boolean isStudentEvent = event.getTags().contains(""student"");  // or use stored procedure that can fail? Integer numberOfPlaces = event.getNumberOfPlaces(); if (null == numberOfPlaces) { return null; }  List<EventBookingDTO> getCurrentBookings = this.getBookingByEventId(event.getId());  int studentCount = 0; int totalBooked = 0;  for (EventBookingDTO booking : getCurrentBookings) { // TODO: In the future we may want to automatically promote users from the wait list? // This was not done initially as it was unclear whether event managers wanted to hand pick // wait list candidates to promote.  // don't count cancelled bookings if (BookingStatus.CANCELLED.equals(booking.getBookingStatus())) { continue; }  if (countOnlyConfirmed && BookingStatus.WAITING_LIST.equals(booking.getBookingStatus())) { continue; }  // we are still counting WAITING_LIST bookings as we want these to occupy space.  if (booking.getUserBooked().getRole().equals(Role.STUDENT)) { studentCount++; }  totalBooked++; }  // capacity of the event if (isStudentEvent && studentCount >= numberOfPlaces) { return numberOfPlaces - studentCount; }  if (totalBooked > numberOfPlaces) { return 0; }  return numberOfPlaces - totalBooked; } "	0	0	1	1	1	0
protected Set<Diff> getAllContainedDifferences(Diff input) { final Set<Diff> result = new HashSet<Diff>();  final Comparison comparison = ComparisonUtil.getComparison(input);  CompareSwitch<EObject> valueGetter = new CompareSwitch<EObject>() { @Override public EObject caseReferenceChange(ReferenceChange object) { return object.getValue(); }  @Override public EObject caseResourceAttachmentChange(ResourceAttachmentChange object) { return MatchUtil.getContainer(ComparisonUtil.getComparison(object), object); }  @Override public EObject defaultCase(EObject object) { return null; } }; EObject value = valueGetter.doSwitch(input);  if (value != null) { final Match match = comparison.getMatch(value); result.addAll(getAllContainedDifferences(comparison, match)); }  return result; } 	0	0	1	0	1	0
"@Override protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException { final JSONObject jsonUser = new JSONObject(req.getParameter(""user""));  try { final User newUser = new User.Builder(jsonUser).build(); UserCache.getInstance().putUser(newUser); System.out.println(newUser); } catch (NoSuchAlgorithmException | SQLException e) { e.printStackTrace(); final JSONObject response = new JSONObject(); response.put(""error"", ""an error happend""); resp.getWriter().write(response.toString()); } } "	1	0	0	0	1	0
private void showPreview() { fragmentState = PhotoFragmentState.SHOWING_PREVIEW;  if (camera_fragment != null) { FragmentTransaction transaction = getChildFragmentManager().beginTransaction(); transaction.remove(camera_fragment); transaction.commit(); camera_fragment = null; }  showPreviewLayout(imageURI, imageURI.getPath()); } 	1	0	1	1	1	0
private void splitTasks() { for (int i = 0; i < tasks.size(); i++) { if (!tasks.get(i).getDone()) { undoneTasks.add(tasks.get(i)); } else { doneTasks.add(tasks.get(i)); } } } 	0	0	1	0	1	0
"@Transactional @RequestMapping(params=""methodToCall=savePersonPeriodDetails"") public ModelAndView savePersonPeriodDetails(@ModelAttribute(""KualiForm"") ProposalBudgetForm form) throws Exception { Budget budget = form.getBudget(); int editLineIndex = Integer.parseInt(form.getAddProjectPersonnelHelper().getEditLineIndex()); BudgetPeriod budgetPeriod = form.getAddProjectPersonnelHelper().getCurrentTabBudgetPeriod(); BudgetPersonnelDetails editBudgetPersonnel = form.getAddProjectPersonnelHelper().getBudgetPersonnelDetail(); BudgetLineItem budgetLineItem = form.getAddProjectPersonnelHelper().getBudgetLineItem(); int budgetLineItemIndex = budgetPeriod.getBudgetLineItems().indexOf(budgetLineItem); syncLineItemDates(budgetLineItem, editBudgetPersonnel); if(isSummaryPersonnel(editBudgetPersonnel)) { budgetLineItem.setLineItemCost(editBudgetPersonnel.getSalaryRequested()); }else { getDataObjectService().wrap(editBudgetPersonnel).fetchRelationship(""budgetPeriodType""); } boolean rulePassed = isSaveRulePassed(budget, budgetPeriod, budgetLineItem, editBudgetPersonnel); if(rulePassed) { calculatePersonnelLineItem(form, true); budgetLineItem.getBudgetPersonnelDetailsList().set(editLineIndex, editBudgetPersonnel); BudgetLineItem newBudgetLineItem = getDataObjectService().save(budgetLineItem); budgetPeriod.getBudgetLineItems().set(budgetLineItemIndex, newBudgetLineItem); } return getModelAndViewService().getModelAndView(form); } "	1	0	0	0	1	0
"public InputStream retrieve(String key, long byteRangeStart) throws IOException { try { if (!doesObjectExist(key)) { return null; } ObjectMetadata objectMetadata = ossClientAgent.getObjectMetadata(bucket, key); long fileSize = objectMetadata.getContentLength(); OSSObject object = ossClientAgent.getObject2(bucket, key, byteRangeStart, fileSize-1, conf); String requestId = (String) object.getObjectMetadata().getRawMetadata().get(""requestId""); if (requestId != null) { LOG.info(""OSS RequestId: "" + requestId); } return object.getObjectContent(); } catch (Exception e) { handleException(key, e); return null; //never returned - keep compiler happy } } "	0	0	1	0	1	0
"private String BuildUpgradeHeader() { int skillID = NWScript.getLocalInt(GetPC(), ""TEMP_MENU_SKILL_ID""); PlayerGO pcGO = new PlayerGO(GetPC()); PlayerRepository pcRepo = new PlayerRepository(); PlayerProgressionSkillsRepository pcSkillRepo = new PlayerProgressionSkillsRepository(); ProgressionSkillRepository skillRepo = new ProgressionSkillRepository();  PlayerEntity pcEntity = pcRepo.getByUUID(pcGO.getUUID()); PlayerProgressionSkillEntity pcSkill = pcSkillRepo.GetByUUIDAndSkillID(pcGO.getUUID(), skillID); ProgressionSkillEntity skill = skillRepo.getByID(skillID);  String upgradeName = skill.getName(); String description = skill.getDescription(); int upgradeLevel = pcSkill == null ? 0 : pcSkill.getUpgradeLevel(); int upgradeCap = pcSkill == null || !pcSkill.isSoftCapUnlocked() ? skill.getSoftCap() : skill.getMaxUpgrades(); int availableSP = pcEntity.getUnallocatedSP(); int nextUpgradeCost = 1 + skill.getInitialPrice() + (pcSkill == null ? 0 : pcSkill.getUpgradeLevel());  String upgradeCapText = ColorToken.Yellow() + upgradeCap + ColorToken.End(); if(pcSkill != null && pcSkill.isSoftCapUnlocked()) { upgradeCapText = ColorToken.White() + upgradeCap + ColorToken.End(); }  String nextUpgradeCostText = """" + nextUpgradeCost; if(upgradeLevel >= upgradeCap) { nextUpgradeCostText = ColorToken.Red() + ""MAX"" + ColorToken.End(); }  String header = ColorToken.Green() + ""Upgrade Name: "" + ColorToken.End() + upgradeName + ""\n""; header += ColorToken.Green() + ""Upgrade Level: "" + ColorToken.End() + upgradeLevel + "" / "" + upgradeCapText + ""\n\n""; header += ColorToken.Green() + ""Available SP: "" + ColorToken.End() + availableSP + ""\n""; header += ColorToken.Green() + ""Next Upgrade: "" + ColorToken.End() + nextUpgradeCostText + ""\n\n""; header += ColorToken.Green() + ""Description: "" + ColorToken.End() + description;  return header; } "	1	0	1	1	0	0
@Override public int receiveEnergy(EnumFacing from, int maxReceive, boolean simulate) { if (!getPowerConfig().rf()) return 0; if (!canAcceptEnergy(from)) { return 0; } int energyReceived = (int) Math.min(getMaxEnergyStored(from) - getEnergyStored(from), Math.min(getMaxOutput() * RebornCoreConfig.euPerFU, maxReceive));  if (!simulate) { setEnergy(getEnergy() + energyReceived); } return energyReceived; } 	0	0	0	1	1	0
"public static void main(String[] args) throws Exception { MainTestReportGeneration testRunner = new MainTestReportGeneration(); testRunner.runScenario(""test.report.md""); } "	0	0	1	0	1	0
private void reactionAdd(ReactionEventResponse event) { IChannel channel = client.getChannelByID(event.channel_id); if (channel != null) { if (!channel.getModifiedPermissions(client.getOurUser()).contains(Permissions.READ_MESSAGES)) return; IMessage message = RequestBuffer.request(() -> { return channel.getMessageByID(event.message_id); }).get();  if (message != null) { Reaction reaction = (Reaction) (event.emoji.id == null ? message.getReactionByUnicode(event.emoji.name) : message.getReactionByIEmoji(message.getGuild().getEmojiByID(event.emoji.id))); IUser user = message.getClient().getUserByID(event.user_id);  if (reaction == null) { List<IUser> list = new CopyOnWriteArrayList<>(); list.add(user);  reaction = new Reaction(message.getShard(), 1, list, event.emoji.id != null ? event.emoji.id : event.emoji.name, event.emoji.id != null);  message.getReactions().add(reaction); } else if (channel.getMessageHistory().contains(message.getLongID())) { //If the message is in the internal cache then it doesn't have the most up to date reaction count reaction.setCount(reaction.getCount() + 1); reaction.getCachedUsers().add(user); }  reaction.setMessage(message);  client.dispatcher.dispatch( new ReactionAddEvent(message, reaction, user)); } } } 	0	0	0	0	0	1
"@Override public void readFromNBT(NBTTagCompound tag) {  super.readFromNBT(tag); start = tag.getInteger(""start""); ticks = tag.getInteger(""ticks""); time = tag.getInteger(""time""); } "	0	0	1	0	1	0
@Override protected void setResource(Bitmap bitmap) {  int bitmapWidth = bitmap.getWidth(); int bitmapHeight = bitmap.getHeight(); int borderWidthHalf = 10; int bitmapSquareWidth = Math.min(bitmapWidth,bitmapHeight); int newBitmapSquareWidth = bitmapSquareWidth+borderWidthHalf;  Bitmap roundedBitmap = Bitmap.createBitmap(newBitmapSquareWidth,newBitmapSquareWidth,Bitmap.Config.ARGB_8888);  // Initialize a new Canvas to draw empty bitmap Canvas canvas = new Canvas(roundedBitmap);  // Calculation to draw bitmap at the circular bitmap center position int x = borderWidthHalf + bitmapSquareWidth - bitmapWidth; int y = borderWidthHalf + bitmapSquareWidth - bitmapHeight;  canvas.drawBitmap(bitmap, x, y, null);  // Initializing a new Paint instance to draw circular border Paint borderPaint = new Paint(); borderPaint.setStyle(Paint.Style.STROKE); borderPaint.setStrokeWidth(borderWidthHalf*2); borderPaint.setColor(ResourcesCompat.getColor(getResources(), R.color.myapp_accent_700, null));  canvas.drawCircle(canvas.getWidth()/2, canvas.getWidth()/2, newBitmapSquareWidth/2, borderPaint);  RoundedBitmapDrawable circularBitmapDrawable = RoundedBitmapDrawableFactory.create(imageView.getContext().getResources(), roundedBitmap); circularBitmapDrawable.setCircular(true); imageView.setImageDrawable(circularBitmapDrawable);  } 	0	0	1	1	1	0
"@Override public String addSwaRefAttachment(DataHandler handler) { salt++; String contentId = AttachmentUtil.getUniqueCid(); attachments.add(new XTeeAttachment(contentId, handler)); return ""cid:"" + contentId; } "	0	0	0	1	0	0
public void setJaxbClassLoader(ClassLoader jaxbClassLoader) { this.jaxbClassLoader = jaxbClassLoader; } 	0	0	0	1	0	0
private ServerEntityRequest mockCreateEntityRequest() throws IOException { ServerEntityRequest request = mockRequestForAction(ServerEntityAction.CREATE_ENTITY); return request; } 	0	0	1	0	0	0
"private static void reportError(Exception e, String msg, Context c) { try { SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(c.getApplicationContext()); SharedPreferences.Editor editor = preferences.edit(); if (e != null) { e.printStackTrace(); Writer writer = new StringWriter(); PrintWriter printWriter = new PrintWriter(writer); e.printStackTrace(printWriter); msg = msg.concat(writer.toString()); editor.putString(""lastException"", ObjectSerializer.serialize(e)); } editor.putString(""lastBug"", msg); editor.apply(); } catch (Exception e2) { e2.printStackTrace(); } } "	0	0	1	1	0	0
"public void addVerboseMessage(String message) { this.verboseMessages.add(new HistoryEntry(msgIndex, new Timestamp( new Date().getTime()), "" "" + message)); msgIndex++; } "	0	0	1	1	0	0
"@Override public List<String> getMembersIds() { BaseObject familyObject = this.familyDocument.getXObject(CLASS_REFERENCE); if (familyObject == null) { return new LinkedList<String>(); }  ListProperty xwikiRelativesList; try { xwikiRelativesList = (ListProperty) familyObject.get(FAMILY_MEMBERS_FIELD); } catch (XWikiException e) { this.logger.error(""error reading family members: {}"", e); return null; } if (xwikiRelativesList == null) { return Collections.emptyList(); } return Collections.unmodifiableList(xwikiRelativesList.getList()); } "	1	0	0	1	1	0
private Tag buildTagFromInputParameters(String data) { return JsonDeserializer.deserialize(data, Tag.class); } 	0	0	0	1	0	0
private TagSynonyms buildTagSynonymsInputParameters(String data) { return JsonDeserializer.deserialize(data, TagSynonyms.class); } 	0	0	0	1	0	0
"@Override public MechanizeAgent constructAgent(BotConfiguration configuration) { MechanizeAgent agent = new MechanizeAgent(); agent.getClient().setRedirectStrategy(new RedirectStrategy() { @Override public boolean isRedirected(HttpRequest request, HttpResponse response, HttpContext context) throws ProtocolException { return response.getStatusLine().getStatusCode() == 302; }  @Override public HttpUriRequest getRedirect(HttpRequest request, HttpResponse response, HttpContext context) throws ProtocolException { System.out.println(Arrays.toString(response.getAllHeaders())); String host = request.getFirstHeader(""Host"").getValue(); String location = response.getFirstHeader(""Location"").getValue(); String protocol = host.equals(""openid.stackexchange.com"") ? ""https"" : ""http""; if (location.startsWith(""http://"") || location.startsWith(""https://"")) { logger.info(""Redirecting to "" + location); return new HttpGet(location); } else { logger.info(""Redirecting to "" + protocol + ""://"" + host + location); return new HttpGet(protocol + ""://"" + host + location); } } });  agent.getClient().addRequestInterceptor((request, context) -> { logger.info(""Request to "" + request.getRequestLine().getUri()); if (request.getRequestLine().getUri().equals(""/login/global-fallback"")) { request.addHeader(""Referer"", configuration.getRootUrl() + ""/users/chat-login""); } });  return agent; } "	0	0	1	0	1	0
"private void process(File file, URL dest, boolean expectContinue) throws Exception { log(""putting "" + file + "" to "" + dest + "" with expectContinue="" + expectContinue, Project.MSG_VERBOSE); getSardine().put(dest.toString(), new FileInputStream(file), fContentType, expectContinue); } "	0	0	1	0	1	0
@Bean public DaoAuthenticationProvider authProvider() { DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider(); authProvider.setUserDetailsService(userDetailsService); authProvider.setPasswordEncoder(encoder()); return authProvider; } 	1	0	0	0	1	0
@Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.authenticationProvider(authProvider()); } 	0	0	1	1	0	0
"protected void initSpinners() { min_spinner = new NumericSpinner(new BigDecimal(0), new BigDecimal(1)); max_spinner = new NumericSpinner(new BigDecimal(0), new BigDecimal(1));  // Set IDs. min_spinner.setId(""min_spinner""); max_spinner.setId(""max_spinner"");  // Set properties. root_anchorPane.getChildren().add(min_spinner); root_anchorPane.getChildren().add(max_spinner); min_spinner.setPrefWidth(55); min_spinner.setLayoutX(25); min_spinner.setLayoutY(30); max_spinner.setPrefWidth(55); max_spinner.setLayoutX(100); max_spinner.setLayoutY(30);  // Register listener. min_spinner.registerListener(this); max_spinner.registerListener(this); } "	0	0	1	0	1	0
"@Override int doBegin(Map<String, String> parameters) throws UserErrorMessage, UserRequestIncompleteException { Long skillId = Long.parseLong(parameters.get(""skillId"")); Key skillKey = KeyFactory.createKey(""ConstructItemSkill"", skillId); CachedEntity skill = db.getEntity(skillKey); if (skill==null) throw new UserErrorMessage(""Invalid skill specified."");  CachedEntity character = db.getCurrentCharacter();  doChecks(character, skill);  setDataProperty(""repsUniqueId"", parameters.get(""repsUniqueId"")); setDataProperty(""skillId"", skillId); setDataProperty(""skillName"", skill.getProperty(""name""));  CachedEntity ideaDef = db.getEntity((Key)skill.getProperty(""_definitionKey""));  Integer maxRepCount = null; if (ideaDef.getProperty(""skillMaxRepeat"")!=null) maxRepCount = ((Long)ideaDef.getProperty(""skillMaxRepeat"")).intValue();  GenericEntityRequirementResult itemRequirementSlotsToItems = new ConfirmSkillRequirementsBuilder(""1"", db, this, ideaDef, skill) .addGenericEntityRequirements("""", ""skillItemFocus"") .addGenericEntityRequirements(""Required Materials"", ""skillMaterialsRequired"") .addGenericEntityRequirements(""Optional Materials"", ""skillMaterialsOptional"") .addGenericEntityRequirements(""Required Tools/Equipment"", ""skillToolsRequired"") .addGenericEntityRequirements(""Optional Tools/Equipment"", ""skillToolsOptional"") .setRepetitionCount(30) .go(); //		if (itemRequirementSlotsToItems.repetitionCount==null) itemRequirementSlotsToItems.repetitionCount = 1;    ODPKnowledgeService knowledgeService = db.getKnowledgeService(character.getKey()); ODPInventionService inventionService = db.getInventionService(character, knowledgeService); EntityPool pool = new EntityPool(ds);    // Pooling entities... pool.addEntityDirectly(ideaDef); inventionService.poolConstructItemSkill(pool, skill); inventionService.poolGerSlotsAndSelectedItems(pool, ideaDef, itemRequirementSlotsToItems.slots);  pool.loadEntities();    // Now figure out which of the gers in each slot should actually be used Map<Key, List<Key>> itemRequirementsToItems = inventionService.resolveGerSlotsToGers(pool, ideaDef, itemRequirementSlotsToItems.slots, 1);    // This check will throw a UserErrorMessage if it finds anything off inventionService.checkSkillWithSelectedItems(pool, skill, itemRequirementsToItems, 1);  Map<String,Object> processVariables = new HashMap<String,Object>(); Long seconds = 5L; if (skill.getProperty(""skillConstructionSpeed"")!=null) seconds = ((Long)skill.getProperty(""skillConstructionSpeed"")).longValue();   processVariables.put(""speed"", seconds);   inventionService.processConstructItemSkillForProcessVariables(skill, itemRequirementsToItems, processVariables, pool);   seconds = (Long)processVariables.get(""speed""); if (itemRequirementSlotsToItems.repetitionCount!=null) seconds*=itemRequirementSlotsToItems.repetitionCount;  setDataProperty(""selectedItems"", itemRequirementsToItems); setDataProperty(""repetitionCount"", itemRequirementSlotsToItems.repetitionCount);   setDataProperty(""description"", ""It will take ""+seconds+"" seconds to finish this construction."");  // Issue the soundeffect for the location if one is necessary.. if (ideaDef.getProperty(""executionSoundeffect"")!=null) { db.sendSoundEffectToLocation(ds, (Key)character.getProperty(""locationKey""), (String)ideaDef.getProperty(""executionSoundeffect"")); }  return seconds.intValue(); } "	0	0	1	0	0	0
"private static Double stringToNumber( final String value, final int lineNumber) throws InputException { try { return Double.parseDouble(value); } catch (NumberFormatException ex) { String message = String.format( ""Input contained an invalid number on"" + ""line %d."", lineNumber);  throw new InputException(message, ex); } } "	0	0	1	1	0	0
"private static void initialiseZWaveThings() { // Check that we know about the registry if (thingTypeRegistry == null) { return; }  synchronized (productIndex) { zwaveThingTypeUIDList = new HashSet<ThingTypeUID>(); productIndex = new ArrayList<ZWaveProduct>();  // Get all the thing types Collection<ThingType> thingTypes = thingTypeRegistry.getThingTypes(); for (ThingType thingType : thingTypes) { // Is this for our binding? if (ZWaveBindingConstants.BINDING_ID.equals(thingType.getBindingId()) == false) { continue; }  // Create a list of all things supported by this binding zwaveThingTypeUIDList.add(thingType.getUID());  // Get the properties Map<String, String> thingProperties = thingType.getProperties();  if (thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_REFERENCES) == null) { continue; }  String[] references = thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_REFERENCES).split("",""); for (String ref : references) { String[] values = ref.split("":""); Integer type; Integer id = null; if (values.length != 2) { continue; }  type = Integer.parseInt(values[0], 16); if (!values[1].trim().equals(""*"")) { id = Integer.parseInt(values[1], 16); } String versionMin = thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_VERSIONMIN); String versionMax = thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_VERSIONMAX); productIndex.add(new ZWaveProduct(thingType.getUID(), Integer.parseInt(thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_MANUFACTURER), 16), type, id, versionMin, versionMax)); }  } } } "	0	0	1	0	0	0
private void validateRequiredIndividualNamePartsExist(final JsonElement element, final DataValidatorBuilder baseDataValidator) { final String firstnameParam = this.fromApiJsonHelper.extractStringNamed(ClientApiConstants.firstnameParamName, element); baseDataValidator.reset().parameter(ClientApiConstants.firstnameParamName).value(firstnameParam).notBlank() .notExceedingLengthOf(50);  final String middlenameParam = this.fromApiJsonHelper.extractStringNamed(ClientApiConstants.middlenameParamName, element); baseDataValidator.reset().parameter(ClientApiConstants.middlenameParamName).value(middlenameParam).ignoreIfNull() .notExceedingLengthOf(50);  final String lastnameParamName = this.fromApiJsonHelper.extractStringNamed(ClientApiConstants.lastnameParamName, element); baseDataValidator.reset().parameter(ClientApiConstants.lastnameParamName).value(lastnameParamName).notBlank() .notExceedingLengthOf(50); } 	1	0	1	1	0	0
"private void initialize() { frmPretragaArtikala = new JFrame(); frmPretragaArtikala.setTitle(""Pretraga Artikala""); frmPretragaArtikala.setBounds(100, 100, 516, 344); frmPretragaArtikala.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize(); int x = (int) ((dimension.getWidth() - frmPretragaArtikala.getWidth()) / 2); int y = (int) ((dimension.getHeight() - frmPretragaArtikala.getHeight()) / 2); frmPretragaArtikala.setLocation(x, y);  JLabel lblNewLabel = new JLabel(""Način pretrage artikla:"");  final JComboBox cboOdabirNacinaPretrage = new JComboBox(); cboOdabirNacinaPretrage.setModel(new DefaultComboBoxModel(new String[] { ""Naziv"", ""Barkod"", ""Kategorija"" }));  txtPretrazi = new JTextField(); txtPretrazi.setColumns(10);  tblRezultatiPretrage = new JTable(); tblRezultatiPretrage .setModel(new DefaultTableModel( new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, }, new String[] { ""Naziv artikla"", ""Cijena"", ""Zalihe"", ""Barkod"" })); dtm.setColumnIdentifiers(kolone); tblRezultatiPretrage.setModel(dtm);  JButton btnPretrazi = new JButton(""Pretraži""); btnPretrazi.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent arg0) {  Object[] redovi = new Object[4]; List<String> str = new Vector<String>(); ArtikalKontroler ac = new ArtikalKontroler(); List<Artikal> lista = new Vector<Artikal>(); int rowCount = dtm.getRowCount(); for (int i = rowCount - 1; i >= 0; i--) { dtm.removeRow(i); } if ((String) cboOdabirNacinaPretrage.getSelectedItem() == ""Naziv"") { lista = ac.vratiSveArtiklePoNazivu((String)txtPretrazi.getText()); str = ac.vratiRijeci(lista); } else if ((String) cboOdabirNacinaPretrage.getSelectedItem() == ""Kategorija"") { lista = ac.vratiSveArtiklePoKategoriji(Long.parseLong(txtPretrazi.getText())); str = ac.vratiRijeci(lista);  } else { lista = ac.vratiSveArtiklePoBarkodu((String)txtPretrazi.getText()); str = ac.vratiRijeci(lista); }  for (int i = 0; i < str.size(); i++) { String[] rijec = ac.vratiRazdovojeno(str.get(i)); redovi[0] = rijec[0]; redovi[1] = rijec[1]; redovi[2] = rijec[2]; redovi[3] = rijec[3]; dtm.addRow(redovi); } }  });  JScrollPane scrollPane = new JScrollPane();  JLabel lblUnesite = new JLabel(""Unesite naziv ili šifru u ovisnosti od odabira načina pretrage:"");  JLabel lblRezultatiPretrage = new JLabel(""Rezultati pretrage:""); GroupLayout groupLayout = new GroupLayout(frmPretragaArtikala.getContentPane()); groupLayout.setHorizontalGroup(groupLayout.createParallelGroup(Alignment.LEADING) .addGroup(groupLayout.createSequentialGroup().addGap(56).addGroup(groupLayout .createParallelGroup(Alignment.LEADING).addGroup(groupLayout .createSequentialGroup() .addGroup(groupLayout.createParallelGroup(Alignment.TRAILING, false) .addGroup(groupLayout.createSequentialGroup() .addComponent(txtPretrazi).addGap(18).addComponent(btnPretrazi, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE)) .addComponent(lblUnesite, Alignment.LEADING)) .addContainerGap()) .addGroup(groupLayout.createSequentialGroup() .addGroup(groupLayout.createParallelGroup(Alignment.LEADING) .addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 400, GroupLayout.PREFERRED_SIZE) .addComponent(lblRezultatiPretrage) .addGroup(groupLayout.createSequentialGroup().addComponent(lblNewLabel) .addGap(18).addComponent(cboOdabirNacinaPretrage, GroupLayout.PREFERRED_SIZE, 112, GroupLayout.PREFERRED_SIZE))) .addGap(25))))); groupLayout.setVerticalGroup(groupLayout.createParallelGroup(Alignment.LEADING).addGroup(groupLayout .createSequentialGroup().addGap(25) .addGroup(groupLayout.createParallelGroup(Alignment.BASELINE).addComponent(lblNewLabel).addComponent( cboOdabirNacinaPretrage, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)) .addGap(25).addComponent(lblUnesite).addGap(3) .addGroup(groupLayout.createParallelGroup(Alignment.BASELINE) .addComponent(txtPretrazi, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addComponent(btnPretrazi)) .addPreferredGap(ComponentPlacement.UNRELATED).addComponent(lblRezultatiPretrage) .addPreferredGap(ComponentPlacement.UNRELATED) .addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 140, GroupLayout.PREFERRED_SIZE) .addContainerGap(20, Short.MAX_VALUE)));  scrollPane.setViewportView(tblRezultatiPretrage);  frmPretragaArtikala.getContentPane().setLayout(groupLayout); } "	0	0	1	0	0	0
"@Override public void authenticated(XMPPConnection connection, boolean resumed) { LogManager.i(LOG_TAG, ""authenticated "" + resumed);  if (resumed) { connectionItem.showDebugToast(""authenticated resumed""); } else { connectionItem.showDebugToast(""authenticated""); }  connectionItem.updateState(ConnectionState.connected);  if (resumed) { RosterManager.getInstance().updateContacts(); }  Application.getInstance().runOnUiThread(new Runnable() { @Override public void run() { for (OnAuthorizedListener listener : Application.getInstance().getManagers(OnAuthorizedListener.class)) { listener.onAuthorized(connectionItem); } AccountManager.getInstance().removeAuthorizationError(connectionItem.getAccount());  } });  } "	1	0	1	1	1	0
"@Override public void actionPerformed(ActionEvent e) { try { main.setMainGUIEnabled(false); main.removeOldScrapedMovieReferences(); List<File> toScrape = main.getCurrentFile(); List<File> noMovieFoundList = new LinkedList<File>(); List<File> foundMovieMatch = new LinkedList<File>(); if (toScrape != null) { for(File currentFile : toScrape) { //reset the SiteParsingProfile so we don't get leftover stuff from the last file scraped //we want it to be of the same type, so we use the newInstance() method which will automatically //return a new object of the type the SiteParsingProfile actually is SiteParsingProfile spp = profile.newInstance(); spp.setScrapingLanguage(main.getPreferences()); SpecificScraperAction action = new SpecificScraperAction(spp, spp.getMovieScraper(), currentFile ); Movie scrapedMovie = action.scrape(main.getPreferences()); if(scrapedMovie != null) { main.movieToWriteToDiskList.add(scrapedMovie); main.getFileDetailPanel().setNewMovie( scrapedMovie , true); foundMovieMatch.add(currentFile); } else { main.movieToWriteToDiskList.add(null); noMovieFoundList.add(currentFile); }  } //Display a list of all the movies not found while scraping if we didn't match any of the files if(noMovieFoundList.size() == toScrape.size()) JOptionPane.showMessageDialog(main.getFrmMoviescraper(), ""No Matches found for: \n "" + noMovieFoundList, ""No Movies Found"", JOptionPane.ERROR_MESSAGE); else { System.out.println(""Scraper found matches for"" + foundMovieMatch.size() + ""/"" + toScrape.size() + "" selected files.""); if(foundMovieMatch.size() > 0) System.out.println(""Files scraper found a match for: "" + foundMovieMatch); if(noMovieFoundList.size() > 0) System.out.println(""Files scraper did not find a match for: "" + noMovieFoundList); }  } else { JOptionPane.showMessageDialog(main.getFrmMoviescraper(), ""No file selected."", ""No file selected."", JOptionPane.ERROR_MESSAGE); } } finally { main.setMainGUIEnabled(true); } } "	0	0	1	1	0	0
public Builder<T, R> fallback(Supplier<Observable<R>> fun) { fallback = fun; return this; } 	0	0	1	1	0	0
"private void registerRender(Item item, int meta){ ModelLoader.setCustomModelResourceLocation(item, meta, new ModelResourceLocation(Reference.MODID + "":"" + item.getUnlocalizedName().substring(5), ""inventory"")); } "	0	0	1	0	1	0
private double getCoverDelta(boolean[] range, GrammarRuleRecord rule) {  // counts which uncovered points shall be covered int cover = 0;  // counts overlaps with previously covered ranges int overlap = 0;  for (RuleInterval i : rule.getRuleIntervals()) { int start = i.getStartPos(); int end = i.getEndPos(); for (int j = start; j <= end; j++) { if (false == range[j]) { cover++; } else { overlap++; } } } // if covers nothing, return 0 if (0 == cover) { return 0.0; } // if zero overlap, return full cover if (0 == overlap) { return (double) cover / (double) (rule.getExpandedRuleString().length() + rule.getRuleIntervals().size()); } // else divide newly covered points mount by the sum of the rule string length and occurrence // (i.e. encoding size) return ((double) cover / (double) overlap) / (double) (rule.getExpandedRuleString().length() + rule.getRuleIntervals().size()); } 	1	0	1	1	0	0
private static int [] zzUnpackTrans() { int [] result = new int[280]; int offset = 0; offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result); return result; } 	0	0	1	0	1	0
"protected void printOutExceptions(ValidationException[] exceptions) { for (ValidationException exc : exceptions) { switch (exc.getSeverity()) { case ERROR: LOG.error(""ERROR:"", exc); break; case WARNING: LOG.warn(""ERROR:"", exc); break; case INFO: LOG.warn(""INFO:"", exc); break; } } } "	1	0	1	0	1	0
"public void init(String[] fileName) { this.serviceParameters.clear();  setMulConfigFile(fileName);  Properties prop = null; InputStream input = null;  setValid(true); setError(null); try {int j=1; for(int k=1;k<fileName.length;k++){ input = new FileInputStream(fileName[k]); prop = new Properties(); System.out.println(fileName[k]); prop.load(input); //Read first all ""array"" properties (ServiceParameters) int i = 1; boolean hasMore = true; while (hasMore) { ServiceParameter serviceParameter = new ServiceParameter(); serviceParameter.setUrl(prop.getProperty(""url."" + i)); if (serviceParameter.getUrl() != null) { serviceParameter.setId(j); serviceParameter.setDescription(prop.getProperty(""description."" + i)); serviceParameter.setType(prop.getProperty(""type."" + i)); serviceParameter.setGroup(prop.getProperty(""group."" + i)); serviceParameter.setSearchString(prop.getProperty(""searchString."" + i)); serviceParameter.setUsername(prop.getProperty(""username."" + i)); //serviceParameter.setPassword(prop.getProperty(""password."" + i)); //Read the password, g30 18/7/2017 if (prop.getProperty(""password."" + i) != null) { if (CryptoUtils.decrypt(prop.getProperty(""password."" + i)) != null) { serviceParameter.setPassword(CryptoUtils.decrypt(prop.getProperty(""password."" + i))); } else { serviceParameter.setPassword(prop.getProperty(""password."" + i)); } } serviceParameter.setQuery(prop.getProperty(""query."" + i));  //add each param based on the sequence number of the parameter serviceParameters.add(serviceParameter); j++; i++; } else { hasMore = false; if (input != null) { try { input.close(); } catch (IOException e) { setValid(false); setError(""Error closing Property file "" + fileName); } } }  } }  //Read single value properties this.setConcurrentThreads(getNumberProperty(prop.getProperty(""concurrentThreads""), 5)); this.setHttpResponseTimeout(getNumberProperty(prop.getProperty(""httpResponseTimeout""), 5000)); this.setLdapResponseTimeout(getNumberProperty(prop.getProperty(""ldapResponseTimeout""), 5000)); this.setSocketDieInterval(getNumberProperty(prop.getProperty(""socketDieInterval""), 5000)); this.setSendMailUpdates(getBooleanProperty(prop.getProperty(""sendMailUpdates""), false)); this.setSmtpSendEmailOnSuccess(getBooleanProperty(prop.getProperty(""smtpSendMailOnSuccess""), false)); this.setIsProduction(getBooleanProperty(prop.getProperty(""isProduction""), false)); this.setIsLogEnabled(getBooleanProperty(prop.getProperty(""isLogEnabled""), false)); this.setSmtpSendActivityEmailInterval(getNumberProperty(prop.getProperty(""smtpSendActivityEmailInterval""), 5) * 1000); this.setSmtpHost(getStringProperty(prop.getProperty(""smtpHost""), ""smtp.gmail.com"")); this.setSmtpPort(getNumberProperty(prop.getProperty(""smtpPort""), 465)); this.setSmtpUsername(getStringProperty(prop.getProperty(""smtpUsername""), """")); if (prop.getProperty(""smtpPassword"") != null) { if (CryptoUtils.decrypt(prop.getProperty(""smtpPassword"")) != null) { this.setSmtpPassword(getStringProperty(CryptoUtils.decrypt(prop.getProperty(""smtpPassword"")), """")); } else { this.setSmtpPassword(getStringProperty(prop.getProperty(""smtpPassword""), """")); } } this.setAutoRefreshIntervals(getStringArrayProperty(prop.getProperty(""autoRefreshIntervals""), new String[] { ""1"", ""2"", ""3"" }));  if (getSendMailUpdates()) { String emails = prop.getProperty(""to""); if (emails != null) { String[] emailArr = emails.split("",""); for (String email : emailArr) { this.addRecipients(email); } } else { this.setSendMailUpdates(false); } } } catch (FileNotFoundException e) { setValid(false); setError(""Property file "" + fileName + "" does not exist""); } catch (IOException io) { setValid(false); setError(""Error reading from Property file "" + fileName); } finally { if (input != null) { try { input.close(); } catch (IOException e) { setValid(false); setError(""Error closing Property file "" + fileName); } } }  if (isProduction() && !getCmdArguments().getEncrypt()) { for (int l = 0; l < fileName.length; l++) { CryptoUtils.obfuscatePasswordInConfig(fileName[l]); } }  } "	1	1	1	1	0	0
"public void setField(String field, String value) throws IOException { if (value.contains(""\n"") || value.contains(""\r"")) { throw new IOException(""Field value contains new lines""); }  fields.put(field, value); } "	1	0	1	0	1	0
"public boolean removePhysician(long pid) { dbc.send_Command( ""delete from physician where PID = "" + pid + "")"" );  //ArrayList<Physician> new_physicians = localPhysicians; Physician old_physician = findRealPhysician((int) pid, localPhysicians); localPhysicians.remove(old_physician); //setPhysicians(new_physicians);  return true; } "	0	0	1	1	0	0
"public String shortenPackageName(String fullName) { String name = fullName.substring(0, fullName.lastIndexOf('.')); name = Bindings.removeBrackets(name); int index = name.indexOf(""java.lang.""); char ch = 0; if (index != -1 && (name.indexOf('.', index + 10) == -1 || ((ch = name .charAt(index + 10)) >= 'A' && ch <= 'Z'))) { if (!fullName.startsWith(""java.lang.ref"") && !fullName.startsWith(""java.lang.annotation"") && !fullName.startsWith(""java.lang.instrument"") && !fullName.startsWith(""java.lang.management"")) { name = name.substring(10); } } String swt = ""org.eclipse.swt.SWT""; index = name.indexOf(swt); if (index != -1) { String after = name.substring(swt.length()); if (after.length() == 0 || after.startsWith(""."")) { name = ""$WT"" + after; } } else { String os = ""org.eclipse.swt.internal.browser.OS""; index = name.indexOf(os); if (index != -1) { String after = name.substring(os.length()); if (after.length() == 0 || after.startsWith(""."")) { name = ""O$"" + after; } } } swt = ""org.eclipse.swt""; index = name.indexOf(swt); if (index != -1) { String after = name.substring(swt.length()); name = ""$wt"" + after; } return name; } "	1	1	1	0	0	0
@Override public byte[] getMaxBytes() { return max.getBytes(); } 	0	0	1	1	1	0
"private void showSyncMessageDialog() { AlertDialog.Builder builder = new AlertDialog.Builder(mContext); LayoutInflater factory = LayoutInflater.from(mContext); final View textEntryView = factory.inflate(R.layout.message_dialog, null); builder.setTitle(mContext.getString(R.string.dialog_alter)); builder.setView(textEntryView);  final TextView msg = (TextView) textEntryView.findViewById(R.id.lblMassage); msg.setText(mContext.getString(R.string.dialog_sure_sync));  builder.setPositiveButton(""OK"", new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int whichButton) { HashMap<String, Object> appInfo = mAppList.get(nowPosition); String path = FileMamagerFragment.nowPath + File.separator + appInfo.get(keyString[1]); String failName = FileMamagerFragment.doSyncAll(path); if (failName.equals("""")) { FileMamagerFragment.resetListViewData(); notifyDataSetChanged(); Toast.makeText(mContext, mContext.getString(R.string.dialog_sync_succeed), Toast.LENGTH_SHORT).show(); } else { Toast.makeText(mContext, mContext.getString(R.string.dialog_sync_failed) + "":"" + failName, Toast.LENGTH_SHORT).show(); } } });  builder.setNegativeButton(""Cancel"", new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int whichButton) {  } });  builder.create().show(); } "	0	0	1	0	1	0
@Transactional(readOnly = true) public Page<Cheque> getMinChequesList(RequestPreferences request, Pageable pageable) {  return chequeRepository.findByRequest( request.getId(), request.getIntroducedFrom(), request.getIntroducedTo(), request.getReturnedToClientFrom(), request.getReturnedToClientTo(), request.getCustomerName(), request.getProductName(), request.getModel(), request.getSerialNumber(), request.getRepresentativeName(), request.getPhoneNumber(), request.getSecretary(), request.getEngineer(), request.getWarrantyStatus(), request.getReadyStatus(), request.getReturnedToClientStatus(), request.getPaidStatus(), request.getWithoutRepair(), pageable ).map(source -> { Boolean emptyDiagnostics = source.getDiagnostics().isEmpty(); Boolean hasDelay = emptyDiagnostics || source.getDiagnostics().stream() .map(Diagnostic::getDate) .max(OffsetDateTime::compareTo) .filter(date -> date.isBefore(OffsetDateTime.now().minusDays(30))) .isPresent();  if(emptyDiagnostics) source.withRecencyStatus(true);  if(!source.isReadyStatus() && hasDelay) source.withDelayStatus(true);  source.setDiagnostics(null); return source; }); } 	0	0	1	1	0	0
"public synchronized void storeAsynchronousMessage(CommAddress peer, AsynchronousMessage message) { synchroClocks_.get(peer).tick(); VectorClockValue messageTimestamp = synchroClocks_.get(peer); if (recipients_.contains(peer)) { logger_.debug(""Storing message: "" + message + "" for peer: "" + peer + "" with timestamp "" + messageTimestamp); if (waitingMessages_.get(peer) == null) { waitingMessages_.put(peer, new HashSet<AsynchronousMessage>()); }  Set<AsynchronousMessage> messages = waitingMessages_.get(peer); if (messages.contains(message)) { // message already in set, select lower timestamp VectorClockValue currentTimestamp = messagesTimestamps_.get(peer).get(message.getMessageId()); if (messageTimestamp.compareTo(currentTimestamp) < 0) { messagesTimestamps_.get(peer) .put(message.getMessageId(), messageTimestamp.getValueCopy()); } } else { messages.add(message); messagesTimestamps_.get(peer).put(message.getMessageId(), messageTimestamp.getValueCopy()); } } else { logger_.info(""Peer "" + peer + "" is not present in recipients set, message won't be stored""); } } "	0	0	1	0	1	0
"public void processTelegramMessage(Update update) { TelegramMessage message = update.getMessage(); String updateId = String.valueOf(update.getUpdateId()); if (null == message) { log.warn(""Unknown update type {}"", update); return; } XmppConnectionFactory factory = JateBot.getXmppFactory(); String formatted = MessageFormatter.format(resources.getActiveUsers().getBot().getHighLevel(), message); for (TgUser tgUser : resources.getActiveUsers().getTelegramUsers()) { String joinedAs = tgUser.getJoinedAs(); String username = tgUser.getUser().getUsername(); if (null != username) { formatted = formatted.replaceFirst(""@"" + username, joinedAs); } } User from = message.getFrom(); TgUser tgUserFrom = resources.getActiveUsers().findOrCreate(from); awaitFor.set(updateId); boolean success = false; boolean severe = false; long attempt = 0; while (!success && !severe) { attempt++; try { XmppConnection connection = getPuppetConnection(tgUserFrom); if (connection.equals(resources.getActiveUsers().getBot().getXmppConnection())) { formatted = String.format(""[%s] %s"", from.getFullName(), formatted); }  Message out = new Message().setBody(formatted).setId(updateId) .setTo(StaticSettings.getBotXmppRoom()); JateBot.getResources().getHistory().storeMessage( ""T"", message.getDate(), ZonedDateTime.now(), from.getFullName(), updateId, String.valueOf(from.getId()), formatted);  connection.sendMucMessage(out); if (""/me left group"".equals(formatted)) { connection.leaveMuc(StaticSettings.getBotXmppRoom()); tgUserFrom.cleanAndDisconnectPuppet(); resources.getActiveUsers().getTelegramUsers().remove(tgUserFrom); } success = mutex.tryAcquire(30L, TimeUnit.SECONDS);  if (!success) { if (attempt % 2 == 1) { tgUserFrom.cleanAndDisconnectPuppet(); resources.getActiveUsers().getTelegramUsers().remove(tgUserFrom); } else { resources.getActiveUsers().getBot().cleanAndDisconnectXmppConnection(); factory.connectBot(resources.getActiveUsers().getBot(), null); } } else { log.debug(""Message with stanza '{}' was successfully sent to xmpp"", updateId); } } catch (UnableToConnectException u) { attempt++; if (attempt > 10) { severe = true; } log.error(""Critical problem with"", u); } catch (Exception e) { log.warn(""Cannot send message from telegram to xmpp"", e); try { Thread.sleep(5_000); } catch (InterruptedException ignore) { } } }  } "	0	1	0	1	0	0
@Override public void onFilterExercises(ActionEvent event) { final FilterDialogController controller = prFilterDialogController.get(); controller.show(context.getPrimaryStage(), document.getCurrentFilter());  // set and enable filter when available after dialog has been closed controller.getSelectedFilter().ifPresent(selectedFilter -> { document.setCurrentFilter(selectedFilter); document.setFilterEnabled(true); updateView(); }); } 	0	0	0	1	0	0
@Override public void onOverviewDiagram(ActionEvent event) { if (!checkForExistingExercises()) { return; }  prOverviewDialogController.get().show(context.getPrimaryStage()); } 	0	0	0	1	0	0
"@Override public View getView(int position, View convertView, ViewGroup parent) { View view = super.getView(position, convertView, parent);  //TODO: set visibility for 'done' according to the real status from server // rotate 'Done' if (mData.get(position).get(""status"").equals(""1"")) { TextView tv_done = (TextView) view.findViewById(R.id.tv_history_list_done); tv_done.setVisibility(View.VISIBLE); tv_done.setAnimation(textRotateAnimation); }  if (position % 2 == 0) { view.setBackgroundDrawable(getActivity().getResources().getDrawable(R.color.bg_white)); } else { view.setBackgroundDrawable(null); }  return view; } "	0	0	1	1	1	0
"@Override public void deactivate() { logger.info(""deactive""); // close any open connections if (nameHostMapper != null) { for (AirConditioner connector : nameHostMapper.values()) { connector.disconnect(); } } } "	0	0	1	0	1	0
"public void getUserProfileLogo(View view) { Log.i(""info"",""profile clicked""); if(ParseUser.getCurrentUser() != null){  // Intent to UserProfileDetailPage  } else { Intent i = new Intent(HomeActivity.this, LoginActivity.class); startActivityForResult(i, 100); } } "	0	0	1	0	1	0
"@Override public Object instantiateItem(ViewGroup container, int position) {  View itemView = mLayoutInflater.inflate(R.layout.product_pager_item, container, false);  final ImageView imageView = (ImageView) itemView.findViewById(R.id.imageView);  String URLString = ImageURLGenerator.getInstance(this.mContext).URLForImageWithCloudinaryPublicId(mProduct.getImageCloudinaryPublicId(position), Utils.getScreenWidth(this.mContext));  Log.d(""DEBUG"", URLString);  if (URLString != null || URLString.length() > 0) { Log.i(""info"", ""Loading image from glide""); Glide.with(this.mContext).load(URLString).into(imageView); container.addView(itemView);  /* Glide.with(mContext).load(URLString).asBitmap().into(new BitmapImageViewTarget(imageView) { @Override public void onLoadStarted(Drawable placeholder) { super.onLoadStarted(placeholder); //imageView.setImageDrawable(placeholder); }  @Override public void onResourceReady(Bitmap resource, GlideAnimation<? super Bitmap> glideAnimation) { super.onResourceReady(resource, glideAnimation); //mBitmapMap.put(position, resource); //progressBar.setVisibility(View.INVISIBLE); imageView.setImageBitmap(resource); }  @Override public void onLoadFailed(Exception e, Drawable errorDrawable) { super.onLoadFailed(e, errorDrawable); Log.i(""info"",""image load failed""); //progressBar.setVisibility(View.INVISIBLE); } }); */ }  return itemView; } "	0	0	1	0	1	0
"@Override public Object getAsObject(FacesContext context, UIComponent component, String value) throws ConverterException { if (value == null) { return null; } else { try { return new ProzessDAO().get(new Integer(value)); } catch (NumberFormatException e) { logger.error(e); return ""0""; } catch (DAOException e) { logger.error(e); return ""0""; } } } "	0	0	1	0	1	0
void gatherVars(K term) { new RewriteAwareVisitor() { @Override public Void apply(KVariable v) { if (isLHS() && !v.equals(ResolveAnonVar.ANON_VAR)) vars.add(v); return super.apply(v); }  @Override public Void apply(KApply k) { if (k.klabel() instanceof KVariable) { apply((KVariable) k.klabel()); } return super.apply(k); }  @Override public Void apply(InjectedKLabel k) { if (k.klabel() instanceof KVariable) { apply((KVariable) k.klabel()); } return super.apply(k); } }.apply(term); } 	0	0	1	0	0	0
"@Help( ""displays the list of dependencies declared but not used in the java code of a project and referenced transitive dependencies not declared in the pom file, arguments : gav_filter"" ) public void dependencies( ApplicationSession session, Log log, CommandOptions options, FilteredGAVs gavFilter ) { PomGraphReadTransaction tx = session.graph().read();  log.html( ""<i>Note : although this tool will follow all the transitive dependencies inside your own projects, it will not recursively fetch all your externaly dependencies. For example, if you declare 'undertow-servlet' and depend only on 'undertow-core', you will get warnings that undetow class references have no provider found. This is a sign that you depend on a transitive dependency (from an external library) without declaring it in your maven project.</i><br/>"" );  for( Gav gav : gavFilter.getGavs( session.session() ) ) { Project project = session.projects().forGav( gav ); if( project == null ) { log.html( Tools.warningMessage( ""No project for the gav "" + gav + "", ignoring"" ) ); continue; }  // get all dependencies of the gav Set<Gav> dependencies = new HashSet<>(); tx.relationsRec( gav ).stream().filter( r -> !(r instanceof BuildDependencyRelation) ).map( r -> tx.targetOf( r ) ).forEach( dependencies::add ); Set<Gav> directDependencies = new HashSet<>(); tx.dependencies( gav ).stream().map( dep -> tx.targetOf( dep ) ).forEach( directDependencies::add );  log.html( ""Considered project's dependencies:<br/>"" ); dependencies.stream().sorted( Gav.alphabeticalComparator ).forEachOrdered( g -> log.html( g + ""<br/>"" ) );  Map<Gav, Set<String>> providers = new HashMap<>(); Map<String, Set<Gav>> fqnProviders = new HashMap<>();  // and for each dependency, get the provided classes for( Gav provider : dependencies ) { Set<String> providedClasses = new HashSet<>(); List<String> cc = GavTools.analyseProvidedClasses( session.session(), provider, log ); if( cc != null ) providedClasses.addAll( cc );  log.html( providedClasses.size() + "" provided classes, use -v option to display them<br/>"" ); if( options.hasFlag( ""v"" ) ) providedClasses.stream().forEach( c -> log.html( c + ""<br/>"" ) ); providers.put( provider, providedClasses ); for( String cls : providedClasses ) { Set<Gav> p = fqnProviders.get( cls ); if( p == null ) { p = new HashSet<>(); fqnProviders.put( cls, p ); } p.add( provider ); } }  // own internal classes Set<String> ownClasses = new HashSet<>(); List<String> ownClassesList = GavTools.analyseProvidedClasses( session.session(), gav, log ); if( ownClassesList != null ) ownClasses.addAll( ownClassesList );  // get the referenced fqns in the gav log.html( ""<br/><b>Analyzing referenced fqns of the project '"" + project.getPomFile().getAbsolutePath() + ""'</b><br/>"" ); log.html( ""Use the -v option to display the list of referenced fqns.<br/>"" ); JavaSourceAnalyzer analyzer = new JavaSourceAnalyzer(); analyzer.analyzeProject( project, options.hasFlag( ""v"" ), log ); Set<String> fqnReferences = analyzer.getUsageExtractor().getQualifiedNames();  Set<Gav> referencedTransitiveDependencies = new HashSet<>();  Set<Gav> uselessGavs = new HashSet<>(); providers.keySet().stream().filter( g -> !directDependencies.contains( g ) ).forEach( uselessGavs::add );  Set<Gav> uselessDirectGavs = new HashSet<>( directDependencies );  Set<String> noProviders = new HashSet<>(); for( String referencedFqn : fqnReferences ) { if( referencedFqn.startsWith( ""java."" ) || referencedFqn.startsWith( ""javax."" ) || ownClasses.contains( referencedFqn ) ) continue;  Set<Gav> referenceProviders = fqnProviders.get( referencedFqn ); if( referenceProviders == null ) { noProviders.add( referencedFqn ); continue; }  // if( referenceProviders.size() > 1 ) // System.out.println( ""[MULTIPROVIDER] fqn "" + referencedFqn + // "" is provided by those gavs : "" + providers );  for( Gav providerGav : referenceProviders ) { if( !directDependencies.contains( providerGav ) ) { referencedTransitiveDependencies.add( providerGav ); }  uselessGavs.remove( providerGav ); uselessDirectGavs.remove( providerGav );  // System.out.println( ""[USEDBY] gav "" + providerGav + // "" provides class "" + referencedFqn + "" and is used by "" // ); // Map<String, List<String>> users = // app.usageExtractor.getFqnUsage(); // if( users == null || users.get( referencedFqn ) == null ) // { // System.out.println( ""[ERROR] no users found !!"" ); // } // else // { // for( String user : users.get( referencedFqn ) ) // System.out.println( "" used by "" + user ); // } } }  log.html( ""<br/><br/>"" );  log.html( ""Referenced FQNs without a provider (<i>may include false positives, or internally defined fqns</i>):<br/>"" ); log.html( noProviders.size() + "" not provided references found<br/>"" ); noProviders.stream().sorted().forEachOrdered( fqn -> log.html( fqn + ""<br/>"" ) ); log.html( ""<br/>"" );  log.html( ""GAV declared in project's hierarchy dependencies but not referenced in the project's sources (<i>may include false positives like imported or module poms</i>):<br/>"" ); log.html( uselessGavs.size() + "" declared but not used GAVs<br/>"" ); uselessGavs.stream().sorted( Gav.alphabeticalComparator ).forEachOrdered( g -> log.html( g + "" (provides "" + providers.get( g ).size() + "" classes)<br/>"" ) ); log.html( ""<br/>"" );  log.html( ""Referenced FQNs from transitive dependencies :<br/>"" ); log.html( referencedTransitiveDependencies.size() + "" referenced transitive dependencies GAV<br/>"" ); referencedTransitiveDependencies.stream().sorted().forEachOrdered( g -> log.html( g + ""<br/>"" ) ); log.html( ""<br/>"" );  log.html( ""GAV declared directly in the project's dependencies but not referenced in the project's sources (<i>may include false positives like imported or module poms</i>):<br/>"" ); log.html( uselessDirectGavs.size() + "" declared but not used GAVs<br/>"" ); uselessDirectGavs.stream().sorted( Gav.alphabeticalComparator ).forEachOrdered( g -> log.html( g + "" (provides "" + providers.get( g ).size() + "" classes)<br/>"" ) ); log.html( ""<br/>"" ); } } "	0	0	0	0	0	1
"private String createExportableText(int showToolbar, int indicatorColor, int underlineColor, int indicatorHeightDp, int underlineHeightDp, int tabPaddingDp, boolean paddingMiddle, boolean sameWeightTabs, boolean textAllCaps, int toolbarColor, int tabBackgroundColor, int textColorSelected, int textColorUnselected, int tabStyleSelected, int tabStyleUnselected, int rippleDuration, float rippleAlphaFloat, int rippleColor, boolean rippleDelayClick, float rippleDiameterDp, int rippleFadeDuration, int rippleHighlightColor, boolean rippleOverlay, boolean ripplePersistent, int rippleRoundedCornusRadiusDp) {  StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(""<io.karim.MaterialTabs\n"") .append(""        android:id=\""@+id/material_tabs\""\n"") .append(""        android:layout_width=\""match_parent\""\n"") .append(""        android:layout_height=\""48dp\""\n"") .append(""        android:background=\""?attr/colorPrimary\""\n"") .append(""        app:mtIndicatorColor=\"""") .append(""#"") .append(Integer.toHexString(indicatorColor)) .append(""\""\n"") .append(""        app:mtUnderlineColor=\"""") .append(""#"") .append(Integer.toHexString(underlineColor)) .append(""\""\n"") .append(""        app:mtUnderlineHeight=\"""") .append(underlineHeightDp) .append(""dp\""\n"") .append(""        app:mtIndicatorHeight=\"""") .append(indicatorHeightDp) .append(""dp\""\n"") .append(""        app:mtTabPaddingLeftRight=\"""") .append(tabPaddingDp) .append(""dp\""\n"") .append(""        app:mtSameWeightTabs=\"""") .append(sameWeightTabs) .append(""\""\n"") .append(""        app:mtTextAllCaps=\"""") .append(textAllCaps) .append(""\""\n"") .append(""        app:mtPaddingMiddle=\"""") .append(paddingMiddle) .append(""\""\n"") .append(""        app:mtTextColorSelected=\"""") .append(""#"") .append(Integer.toHexString(textColorSelected)) .append(""\""\n"") .append(""        android:textColor=\"""") .append(""#"") .append(Integer.toHexString(textColorUnselected)) .append(""\""\n"") .append(""        app:mtTextUnselectedStyle=\"""") .append(getStyleFromStyleInt(tabStyleUnselected)) .append(""\""\n"") .append(""        app:mtTextSelectedStyle=\"""") .append(getStyleFromStyleInt(tabStyleSelected)) .append(""\""\n"") .append(""        app:mtMrlRippleColor=\"""") .append(""#"") .append(Integer.toHexString(rippleColor)) .append(""\""\n"") .append(""        app:mtMrlRippleHighlightColor=\"""") .append(""#"") .append(Integer.toHexString(rippleHighlightColor)) .append(""\""\n"") .append(""        app:mtMrlRippleDiameter=\"""") .append(rippleDiameterDp) .append(""dp\""\n"") .append(""        app:mtMrlRippleOverlay=\"""") .append(rippleOverlay) .append(""\""\n"") .append(""        app:mtMrlRippleAlpha=\"""") .append(rippleAlphaFloat) .append(""\""\n"") .append(""        app:mtMrlRippleDuration=\"""") .append(rippleDuration) .append(""\""\n"") .append(""        app:mtMrlRippleFadeDuration=\"""") .append(rippleFadeDuration) .append(""\""\n"") .append(""        app:mtMrlRippleDelayClick=\"""") .append(rippleDelayClick) .append(""\""\n"") .append(""        app:mtMrlRipplePersistent=\"""") .append(ripplePersistent) .append(""\""\n"") .append(""        app:mtMrlRippleInAdapter=\"""") .append(""false"") .append(""\""\n"") .append(""        app:mtMrlRippleRoundedCorners=\"""") .append(rippleRoundedCornusRadiusDp) .append(""dp\""\n/>""); return stringBuilder.toString(); } "	0	0	0	1	0	0
public static Material getMaterial(String asString) { for (Material mat : materials) { if (mat.getName().equals(asString)) { return mat; } } return materials.get(0); } 	0	0	1	0	1	0
private boolean isPropertyModified(Object bean) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException { Class beanClass = bean.getClass(); PropertyDescriptor[] descriptors = getPropertyDescriptors(beanClass); boolean modified = false;  for (PropertyDescriptor descriptor : descriptors) { String name = descriptor.getName();  if (omit(bean, name)) { continue; }  Object value = getProperty(bean, name);  if (value instanceof Reading) { Reading reading = (Reading) value; Reading original = reading.getOriginal();  if (Objects.equals(original.getValue(), reading.getValue()) && Objects.equals(original.getNotRecorded(), reading.getNotRecorded())) { // no change continue; }  modified = true; }  // if given bean is modified, we don't have to go deeper if (modified) { break; }  if (isDTO(beanClass, name)) { value = removeNullReference(bean, name, value);  if (value instanceof List) { List list = (List) value;  for (Object element : list) { modified = isPropertyModified(element);  // if one of the element in the list was modified, we don't have to check another if (modified) { break; } } } else { modified = isPropertyModified(value); } }  if (modified) { break; } }  return modified; } 	1	0	1	0	1	0
"private Resource convertBooleanValue(IfcTypeInfo typeInfo, LogicalEnum value, Model jenaModel) {  Resource baseType = getBaseTypeForBooleans(); if (baseType.equals(OWL2.NamedIndividual)) {  return jenaModel.createResource(formatExpressOntologyName(value.toString()));  } else {  Resource resource = jenaModel.createResource(); resource.addProperty(RDF.type, jenaModel.createResource(formatTypeName(typeInfo)));  Property property = getHasXXXProperty(IfcTypeEnum.LOGICAL, jenaModel);  RDFNode valueNode; if (value == LogicalEnum.TRUE) { valueNode = jenaModel.createTypedLiteral(""true"", baseType.getURI()); } else if (value == LogicalEnum.FALSE) { valueNode = jenaModel.createTypedLiteral(""false"", baseType.getURI()); } else { valueNode = jenaModel.createTypedLiteral(""unknown""); }  resource.addProperty(property, valueNode);  return resource; }  } "	0	0	1	1	0	0
"private List<RDFNode> convertListToDrummondList(IfcCollectionValue<? extends IfcValue> listValue, IfcCollectionTypeInfo collectionTypeInfo, Resource parentResource, long childNodeCount) { if (collectionTypeInfo.isSorted()) {  Resource listTypeResource = jenaModel.createResource(converter.formatTypeName(collectionTypeInfo)); Resource emptyListTypeResource = jenaModel.createResource(converter.formatTypeName(collectionTypeInfo).replace(""List"", ""EmptyList"")); IfcTypeInfo itemTypeInfo = collectionTypeInfo.getItemTypeInfo();  List<? extends IfcSingleValue> values = listValue.getSingleValues();  int index = values.size();  Resource currentListResource; assert(parentResource != null); if (nameAllBlankNodes) { String currentResourceName = formatModelBlankNodeName(String.format(""%s_%d_%d"", parentResource.getLocalName(), childNodeCount, index)); currentListResource = jenaModel.createResource(currentResourceName); } else { currentListResource = jenaModel.createResource(); }  currentListResource.addProperty(RDF.type, emptyListTypeResource);  while (index > 0) { index--; Resource nextListResource = currentListResource; if (nameAllBlankNodes) { String currentResourceName = String.format(""%s_%d_%d"", parentResource.getURI(), childNodeCount, index); currentListResource = jenaModel.createResource(currentResourceName); } else { currentListResource = jenaModel.createResource(); }  currentListResource.addProperty(RDF.type, listTypeResource); currentListResource.addProperty(Ifc2RdfVocabulary.EXPRESS.hasNext, nextListResource);  IfcSingleValue value = values.get(index); RDFNode valueNode = convertSingleValueToNode(value, itemTypeInfo, currentListResource, 0);  currentListResource.addProperty(Ifc2RdfVocabulary.EXPRESS.hasValue, valueNode); }  List<RDFNode> nodes = new ArrayList<>(); nodes.add(currentListResource); return nodes;  } else { List<RDFNode> nodes = new ArrayList<>();  for (IfcSingleValue value : listValue.getSingleValues()) { RDFNode node = convertSingleValueToNode(value, collectionTypeInfo.getItemTypeInfo(), parentResource, childNodeCount); nodes.add(node); }  return nodes; }  } "	0	0	0	1	0	0
"public Resource convertShortEntityToResource(IfcShortEntity entity, long childNodeCount) { String nodeName = String.format(""%s_%s"", entity.getTypeInfo(), entity.getValue()); Resource entityResource; if (nameAllBlankNodes) { entityResource = jenaModel.createResource(formatModelBlankNodeName(nodeName)); } else { entityResource = jenaModel.createResource(new AnonId(nodeName)); }  entityResource.addProperty(RDF.type, jenaModel.createResource(converter.formatTypeName(entity.getTypeInfo()))); IfcLiteralValue value = entity.getValue(); RDFNode valueNode = converter.convertLiteralValue((IfcLiteralValue) value, entityResource, childNodeCount, jenaModel); entityResource.addProperty(EXPRESS.hasValue, valueNode); return entityResource; } "	1	0	1	0	1	0
"@Override public Void visitMethod(MethodTree node, Void p) {  // We copy the result from getAnnotatedType to ensure that // circular types (e.g. K extends Comparable<K>) are represented // by circular AnnotatedTypeMirrors, which avoids problems with // later checks. // TODO: Find a cleaner way to ensure circular AnnotatedTypeMirrors. AnnotatedExecutableType methodType = atypeFactory.getAnnotatedType(node).deepCopy(); AnnotatedDeclaredType preMRT = visitorState.getMethodReceiver(); MethodTree preMT = visitorState.getMethodTree(); visitorState.setMethodReceiver(methodType.getReceiverType()); visitorState.setMethodTree(node); ExecutableElement methodElement = TreeUtils.elementFromDeclaration(node);  try { if (InternalUtils.isAnonymousConstructor(node)) { // We shouldn't dig deeper return null; }  // check method purity if needed { boolean anyPurityAnnotation = PurityUtils.hasPurityAnnotation(atypeFactory, node); boolean checkPurityAlways = checker.hasOption(""suggestPureMethods""); boolean checkPurityAnnotations = checker.hasOption(""checkPurityAnnotations"");  if (checkPurityAnnotations && (anyPurityAnnotation || checkPurityAlways)) { // check ""no"" purity List<Pure.Kind> kinds = PurityUtils.getPurityKinds(atypeFactory, node); // @Deterministic makes no sense for a void method or constructor boolean isDeterministic = kinds.contains(Pure.Kind.DETERMINISTIC); if (isDeterministic) { if (TreeUtils.isConstructor(node)) { checker.report( Result.warning(""purity.deterministic.constructor""), node); } else if (InternalUtils.typeOf(node.getReturnType()).getKind() == TypeKind.VOID) { checker.report( Result.warning(""purity.deterministic.void.method""), node); } }  // Report errors if necessary. PurityResult r = PurityChecker.checkPurity( node.getBody(), atypeFactory, checker.hasOption(""assumeSideEffectFree"")); if (!r.isPure(kinds)) { reportPurityErrors(r, node, kinds); }  // Issue a warning if the method is pure, but not annotated // as such (if the feature is activated). if (checkPurityAlways) { Collection<Pure.Kind> additionalKinds = new HashSet<>(r.getTypes()); additionalKinds.removeAll(kinds); if (TreeUtils.isConstructor(node)) { additionalKinds.remove(Pure.Kind.DETERMINISTIC); } if (!additionalKinds.isEmpty()) { if (additionalKinds.size() == 2) { checker.report( Result.warning(""purity.more.pure"", node.getName()), node); } else if (additionalKinds.contains(Pure.Kind.SIDE_EFFECT_FREE)) { checker.report( Result.warning( ""purity.more.sideeffectfree"", node.getName()), node); } else if (additionalKinds.contains(Pure.Kind.DETERMINISTIC)) { checker.report( Result.warning(""purity.more.deterministic"", node.getName()), node); } else { assert false : ""BaseTypeVisitor reached undesirable state""; } } } } }  // Passing the whole method/constructor validates the return type validateTypeOf(node);  // Validate types in throws clauses for (ExpressionTree thr : node.getThrows()) { validateTypeOf(thr); }  if (atypeFactory.getDependentTypesHelper() != null) { atypeFactory.getDependentTypesHelper().checkMethod(node, methodType); }  AnnotatedDeclaredType enclosingType = (AnnotatedDeclaredType) atypeFactory.getAnnotatedType(methodElement.getEnclosingElement());  // Find which method this overrides! Map<AnnotatedDeclaredType, ExecutableElement> overriddenMethods = AnnotatedTypes.overriddenMethods(elements, atypeFactory, methodElement); for (Map.Entry<AnnotatedDeclaredType, ExecutableElement> pair : overriddenMethods.entrySet()) { AnnotatedDeclaredType overriddenType = pair.getKey(); AnnotatedExecutableType overriddenMethod = AnnotatedTypes.asMemberOf( types, atypeFactory, overriddenType, pair.getValue()); if (!checkOverride(node, enclosingType, overriddenMethod, overriddenType, p)) { // Stop at the first mismatch; this makes a difference only if // -Awarns is passed, in which case multiple warnings might be raised on // the same method, not adding any value. See Issue 373. break; } } return super.visitMethod(node, p); } finally { boolean abstractMethod = methodElement.getModifiers().contains(Modifier.ABSTRACT) || methodElement.getModifiers().contains(Modifier.NATIVE);  // check well-formedness of pre/postcondition List<String> formalParamNames = new ArrayList<String>(); for (VariableTree param : node.getParameters()) { formalParamNames.add(param.getName().toString()); } checkContractsAtMethodDeclaration( node, methodElement, formalParamNames, abstractMethod);  visitorState.setMethodReceiver(preMRT); visitorState.setMethodTree(preMT); } } "	0	0	0	1	0	0
"public void afterConnect(final FutureResponse futureResponse, final Message message, final ChannelFuture channelFuture, final boolean fireAndForget) { if (channelFuture == null) { futureResponse.failed(""could not create a "" + (message.isUdp() ? ""UDP"" : ""TCP"") + "" channel""); return; } LOG.debug(""about to connect to {} with channel {}, ff={}, msg={}"", message.recipient(), channelFuture.channel(), fireAndForget, message); final Cancel connectCancel = createCancel(channelFuture); futureResponse.setCancel(connectCancel); channelFuture.addListener(new GenericFutureListener<ChannelFuture>() { @Override public void operationComplete(final ChannelFuture future) throws Exception {  if (future.isSuccess()) { final ChannelFuture writeFuture = future.channel().writeAndFlush(message); afterSend(writeFuture, futureResponse, fireAndForget); } else { LOG.debug(""Channel creation failed"", future.cause()); futureResponse.failed(""Channel creation failed "" + future.channel() + ""/"" + future.cause()); // may have been closed by the other side, // or it may have been canceled from this side if (!(future.cause() instanceof CancellationException) && !(future.cause() instanceof ClosedChannelException) && !(future.cause() instanceof ConnectException)) { LOG.warn(""Channel creation failed to {} for {}"", future.channel(), message); } } } }); } "	0	0	1	0	1	0
"private void afterSend(final ChannelFuture writeFuture, final FutureResponse futureResponse, final boolean fireAndForget) { final Cancel writeCancel = createCancel(writeFuture); futureResponse.setCancel(writeCancel); writeFuture.addListener(new GenericFutureListener<ChannelFuture>() {  @Override public void operationComplete(final ChannelFuture future) throws Exception { if (!future.isSuccess()) { futureResponse.failedLater(future.cause()); reportFailed(futureResponse, future.channel().close()); LOG.warn(""Failed to write channel the request {} {}."", futureResponse.request(), future.cause()); } if (fireAndForget) { futureResponse.responseLater(null); LOG.debug(""fire and forget, close channel {} now. {}"", futureResponse.request(), future.channel()); futureResponse.responseNow(); } } });  } "	0	0	1	1	1	0
public byte[] bytesFromString(String textRecord) { byte[] byteline = textRecord.getBytes(encoding); ByteBuffer b = ByteBuffer.allocate((Integer.SIZE/Byte.SIZE) + byteline.length); b.putInt(byteline.length); b.put(byteline); return b.array(); } 	0	0	1	0	1	0
"private GiTinderProfile getProfileFromGitHub(String accessToken) { GiTinderProfile giTinderProfile = new GiTinderProfile();  GitHubClient gitHubClient = new GitHubClient(); gitHubClient.setOAuth2Token(accessToken);  UserService userService = new UserService(gitHubClient); RepositoryService repositoryService = new RepositoryService(gitHubClient); try { User user = userService.getUser(); giTinderProfile.setLogin(user.getLogin()); giTinderProfile.setAvatarUrl(user.getAvatarUrl()); List<Repository> repositoryList = repositoryService.getRepositories(); List<String> repos = new ArrayList<>(); List<String> languages = new ArrayList<>(); for (Repository currentRepo : repositoryList) { repos.add(currentRepo.getName()); String repoLanguage = currentRepo.getLanguage(); if (!languages.contains(repoLanguage)) { languages.add(repoLanguage); } } giTinderProfile.setRepos(String.join("";"", repos)); Set<Language> languageObjects = new HashSet<>(); for (String currentLanguage : languages) { languageObjects.add(new Language(currentLanguage)); } giTinderProfile.setLanguagesList(languageObjects); return giTinderProfile; } catch (IOException e) { System.out.println(GET_REQUEST_IOERROR); return null; } } "	0	0	1	1	0	0
"private void cleanUpOldSortIndex(CarbonTablePath carbonTablePath) { CarbonFile sortIndexFile = FileFactory.getCarbonFile(sortIndexFilePath, FileFactory.getFileType(sortIndexFilePath)); CarbonFile[] files = carbonTablePath.getSortIndexFiles(sortIndexFile.getParentFile(), columnIdentifier.getColumnId()); int maxTime; try { maxTime = Integer.parseInt(CarbonProperties.getInstance() .getProperty(CarbonCommonConstants.MAX_QUERY_EXECUTION_TIME)); } catch (NumberFormatException e) { maxTime = CarbonCommonConstants.DEFAULT_MAX_QUERY_EXECUTION_TIME; } if (null != files) { Arrays.sort(files, new Comparator<CarbonFile>() { @Override public int compare(CarbonFile o1, CarbonFile o2) { return o1.getName().compareTo(o2.getName()); } }); for (int i = 0; i < files.length - 1; i++) { long difference = System.currentTimeMillis() - files[i].getLastModifiedTime(); long minutesElapsed = (difference / (1000 * 60)); if (minutesElapsed > maxTime) { if (!files[i].delete()) { LOGGER.warn(""Failed to delete sortindex file."" + files[i].getAbsolutePath()); } else { LOGGER.info(""Sort index file is deleted."" + files[i].getAbsolutePath()); } } } } } "	0	0	0	1	0	0
"private void disconnect() { try { Plus.AccountApi.revokeAccessAndDisconnect(mGoogleApiClient) .setResultCallback(new ResultCallback<Status>() { @Override public void onResult(Status status) { // mGoogleApiClient is now disconnected and access has been revoked. // Don't care if it was disconnected already (status != success). mGoogleApiClient = buildGoogleApiClient(); savedCallbackContext.success(""disconnected""); } }); } catch (IllegalStateException e) { savedCallbackContext.success(""disconnected""); } } "	1	0	1	0	0	0
"@Override protected Collection<Throwable> call(final String inputName) throws Exception { if(this.XML==null) { return wrapException(""XML file missing (option -""+OPTION_XML+"")""); } final Map<String, Map<Integer,String>> flowcell2lane2id = new HashMap<String, Map<Integer,String>>(); SamReader sfr=null; SAMFileWriter sfw=null; try { final Pattern readNameSignature = Pattern.compile(super.readNameSignatureStr); final JAXBContext context = JAXBContext.newInstance(ReadGroup.class,ReadGroupList.class); final Unmarshaller unmarshaller=context.createUnmarshaller(); final ReadGroupList rgl=unmarshaller.unmarshal(new StreamSource(XML),ReadGroupList.class).getValue(); if(rgl.flowcells.isEmpty()) { return wrapException(""empty XML ""+XML); } sfr = openSamReader(inputName);  final SAMFileHeader header = sfr.getFileHeader().clone(); header.addComment(""Processed with ""+getName());  final Set<String> seenids=new HashSet<String>(); final List<SAMReadGroupRecord> samReadGroupRecords=new ArrayList<SAMReadGroupRecord>(); for(final FlowCell fc:rgl.flowcells) { final Map<Integer,String> lane2id=new HashMap<Integer, String>(); for(final Lane lane:fc.lanes) { for(final ReadGroup rg:lane.readGroups) { if(seenids.contains(rg.id)) { return wrapException(""Group id ""+rg.id +"" defined twice""); } seenids.add(rg.id); // create the read group we'll be using final SAMReadGroupRecord rgrec = new SAMReadGroupRecord(rg.id); rgrec.setLibrary(rg.library); rgrec.setPlatform(rg.platform); rgrec.setSample(rg.sample); rgrec.setPlatformUnit(rg.platform); if (rg.center != null) rgrec.setSequencingCenter(rg.center); if (rg.description != null) rgrec.setDescription(rg.description); lane2id.put(lane.id,rg.id); samReadGroupRecords.add(rgrec); } } if(flowcell2lane2id.containsKey(fc.name)) { return wrapException(""FlowCell id ""+fc.name +"" defined twice in XML""); } flowcell2lane2id.put(fc.name,lane2id); } header.setReadGroups(samReadGroupRecords);   sfw = openSAMFileWriter(header, true);  final SAMSequenceDictionaryProgress progress = new SAMSequenceDictionaryProgress(header); final SAMRecordIterator iter=sfr.iterator(); while(iter.hasNext()) { final SAMRecord rec= progress.watch(iter.next()); final Matcher matcher = readNameSignature.matcher(rec.getReadName()); final String flowcellStr; final String laneStr; if(matcher.matches()) { flowcellStr = matcher.group(1); laneStr = matcher.group(2); } else { return wrapException(""Read name ""+rec.getReadName()+"" doesn't match regular expression ""+readNameSignature.pattern()+"". please check option -""+OPTION_READNAMESIGNATURESTR); } String RGID=null;  final Map<Integer,String> lane2id=flowcell2lane2id.get(flowcellStr); if(lane2id==null) throw new RuntimeException( ""Cannot get flowcell/readgroup for ""+rec.getReadName()); try { RGID=lane2id.get(Integer.parseInt(laneStr)); } catch (final Exception e) { return wrapException(""bad lane-Id in ""+rec.getReadName()); }  if(RGID==null) { throw new RuntimeException(""Cannot get RGID for ""+rec.getReadName()+"" flowcell:""+flowcellStr +"" lane2id:""+laneStr+ "" dict:""+lane2id); } rec.setAttribute(SAMTag.RG.name(), RGID); sfw.addAlignment(rec); } progress.finish(); iter.close(); LOG.info(""done""); return RETURN_OK; } catch(Exception err) { return wrapException(err); } finally { CloserUtil.close(sfw); CloserUtil.close(sfr); } } "	0	0	1	0	1	0
"private WrapHead request(String method, String url, Object body, Map<String, String> header, String contentType, String charset, int timeout, int retry) throws IOException { if (header == null) { header = new HashMap<>(); } if (body != null && body instanceof File) { contentType = ""multipart/form-data""; } else if (contentType == null) { contentType = ""application/json; charset=utf-8""; } if (charset == null) { charset = ""UTF-8""; } HttpRequestBase httpMethod = null; switch (method) { case ""GET"": httpMethod = new HttpGet(url); break; case ""POST"": httpMethod = new HttpPost(url); break; case ""PUT"": httpMethod = new HttpPut(url); break; case ""DELETE"": httpMethod = new HttpDelete(url); break; case ""HEAD"": httpMethod = new HttpHead(url); break; case ""OPTIONS"": httpMethod = new HttpOptions(url); break; } if (timeout != 0) { httpMethod.setConfig(RequestConfig.custom().setSocketTimeout(timeout).setConnectTimeout(timeout).build()); } for (Map.Entry<String, String> entry : header.entrySet()) { httpMethod.addHeader(entry.getKey(), URLEncoder.encode(entry.getValue(), charset)); } if (contentType != null) { httpMethod.addHeader(""Content-Type"", contentType); } logger.trace(""HTTP ["" + method + ""]"" + url); if (body != null) { HttpEntity entity; switch (contentType.toLowerCase()) { case ""application/x-www-form-urlencoded"": if (body instanceof Map<?, ?>) { List<NameValuePair> m = new java.util.ArrayList<>(); ((Map<String, String>) body).forEach((key, value) -> m.add(new BasicNameValuePair(key, value))); entity = new UrlEncodedFormEntity(m, charset); break; } case ""xml"": if (body instanceof Document) { entity = new StringEntity($((Document) body).toString(), charset); } else if (body instanceof String) { entity = new StringEntity((String) body, charset); } else { logger.error(""Not support return type ["" + body.getClass().getName() + ""] by xml""); entity = new StringEntity("""", charset); } break; case ""multipart/form-data"": httpMethod.addHeader(""Content-Transfer-Encoding"", ""binary""); entity = MultipartEntityBuilder.create() .setMode(HttpMultipartMode.BROWSER_COMPATIBLE) .addBinaryBody(((File) body).getName(), (File) body, ContentType.APPLICATION_OCTET_STREAM, ((File) body).getName()) .build(); // delete custom value,httpclient will use like this ""multipart/form-data; boundary=---------------------------7e1295335048a"" httpMethod.removeHeaders(""Content-Type""); break; default: if (body instanceof String) { entity = new StringEntity((String) body, charset); } else if (body instanceof Integer || body instanceof Long || body instanceof Float || body instanceof Double || body instanceof BigDecimal || body instanceof Boolean) { entity = new StringEntity(body.toString(), charset); } else if (body instanceof Date) { entity = new StringEntity(((Date) body).getTime() + """", charset); } else { entity = new StringEntity($.json.toJsonString(body), charset); } } ((HttpEntityEnclosingRequestBase) httpMethod).setEntity(entity); } try (CloseableHttpResponse response = httpClient.execute(httpMethod)) { WrapHead wrapHead = new WrapHead(); if (!(httpMethod instanceof HttpHead || httpMethod instanceof HttpOptions)) { wrapHead.result = EntityUtils.toString(response.getEntity(), charset); } else { wrapHead.result = """"; } wrapHead.head = Arrays.stream(response.getAllHeaders()).collect(Collectors.toMap(Header::getName, Header::getValue)); for (Map.Entry<String, String> entry : wrapHead.head.entrySet()) { entry.setValue(URLDecoder.decode(entry.getValue(), charset)); } return wrapHead; } catch (SocketException | ConnectTimeoutException | NoHttpResponseException e) { // 同络错误重试5次 if (retry <= 5) { try { Thread.sleep(1000 * retry); } catch (InterruptedException e1) { e1.printStackTrace(); } logger.warn(""HTTP ["" + httpMethod.getMethod() + ""] "" + url + "" ERROR. retry "" + (retry + 1) + "".""); return request(method, url, body, header, contentType, charset, timeout, retry + 1); } else { logger.warn(""HTTP ["" + httpMethod.getMethod() + ""] "" + url + "" ERROR. retry "" + (retry + 1) + "".""); throw e; } } catch (IOException e) { logger.warn(""HTTP ["" + httpMethod.getMethod() + ""] "" + url + "" ERROR. retry "" + (retry + 1) + "".""); throw e; } } "	1	0	1	0	0	0
"public static String getArtifactUri(final FileObject artifact) { final String zipUri; try { zipUri = ""zip://"" + artifact.getURL().getPath(); } catch (final FileSystemException e) { throw new UnhandledException(e); } return zipUri; } "	0	0	1	1	1	0
protected List<AttributeMapping> compileAtributeForStrategy(AttributeMappingStrategyType strategy, AttributeMapping defaultAttribute, List<SysRoleSystemAttribute> overloadingAttributes) {  List<AttributeMapping> finalAttributes = new ArrayList<>();  List<SysRoleSystemAttribute> attributesOrdered = overloadingAttributes.stream().filter(roleSystemAttribute -> { // Search attribute override same schema attribute SysSystemAttributeMapping attributeMapping = roleSystemAttribute.getSystemAttributeMapping(); return attributeMapping.equals(defaultAttribute); }).sorted((att1, att2) -> { // Sort attributes by role priority return Integer.valueOf(att2.getRoleSystem().getRole().getPriority()) .compareTo(new Integer(att1.getRoleSystem().getRole().getPriority())); }).collect(Collectors.toList());  // We have some overloaded attributes if (!attributesOrdered.isEmpty()) { List<SysRoleSystemAttribute> attributesOrderedGivenStrategy = attributesOrdered.stream() .filter(attribute -> { return strategy == attribute.getStrategyType(); }).collect(Collectors.toList());  // We do not have overloaded attributes for given strategy if (attributesOrderedGivenStrategy.isEmpty()) { return finalAttributes; }  // First element have role with max priority int maxPriority = attributesOrderedGivenStrategy.get(0).getRoleSystem().getRole().getPriority();  // We will search for attribute with highest priority (and role // name) Optional<SysRoleSystemAttribute> highestPriorityAttributeOptional = attributesOrderedGivenStrategy.stream() .filter(attribute -> { // Filter attributes by max priority return maxPriority == attribute.getRoleSystem().getRole().getPriority(); }).sorted((att1, att2) -> { // Second filtering, if we have same priority, then // we // will sort by role name return att2.getRoleSystem().getRole().getName() .compareTo(att1.getRoleSystem().getRole().getName()); }).findFirst();  if (highestPriorityAttributeOptional.isPresent()) { SysRoleSystemAttribute highestPriorityAttribute = highestPriorityAttributeOptional.get();  // For merge strategies, will be add to final list all // overloaded attributes if (strategy == AttributeMappingStrategyType.AUTHORITATIVE_MERGE || strategy == AttributeMappingStrategyType.MERGE) { attributesOrderedGivenStrategy.forEach(attribute -> { // Disabled attribute will be skipped if (!attribute.isDisabledDefaultAttribute()) { // We can't use instance of SysSysteAttributeMapping // and set // up overloaded value (it is entity). // We have to create own dto and set up all values // (overloaded and default) AttributeMapping overloadedAttribute = new MappingAttributeDto(); // Default values (values from schema attribute // handling) overloadedAttribute.setSchemaAttribute(defaultAttribute.getSchemaAttribute()); overloadedAttribute .setTransformFromResourceScript(defaultAttribute.getTransformFromResourceScript()); // Overloaded values roleSystemAttributeService.fillOverloadedAttribute(attribute, overloadedAttribute);  // Common properties (for MERGE strategy) will be // set from MERGE attribute with highest priority overloadedAttribute.setSendAlways(highestPriorityAttribute.isSendAlways()); overloadedAttribute.setSendOnlyIfNotNull(highestPriorityAttribute.isSendOnlyIfNotNull());  // Add modified attribute to final list finalAttributes.add(overloadedAttribute); } }); return finalAttributes; }  // We will search for disabled overloaded attribute Optional<SysRoleSystemAttribute> disabledOverloadedAttOptional = attributesOrderedGivenStrategy.stream() .filter(attribute -> { // Filter attributes by max priority return maxPriority == attribute.getRoleSystem().getRole().getPriority(); }).filter(attribute -> { // Second filtering, we will search for disabled // overloaded attribute return attribute.isDisabledDefaultAttribute(); }).findFirst(); if (disabledOverloadedAttOptional.isPresent()) { // We found disabled overloaded attribute with highest // priority return finalAttributes; }  // None overloaded attribute are disabled, we will search for // attribute with highest priority (and role name) // Disabled attribute will be skipped if (!highestPriorityAttribute.isDisabledDefaultAttribute()) { // We can't use instance of SysSysteAttributeMapping and set // up overloaded value (it is entity). // We have to create own dto and set up all values // (overloaded and default) AttributeMapping overloadedAttribute = new MappingAttributeDto(); // Default values (values from schema attribute handling) overloadedAttribute.setSchemaAttribute(defaultAttribute.getSchemaAttribute()); overloadedAttribute .setTransformFromResourceScript(defaultAttribute.getTransformFromResourceScript()); // Overloaded values roleSystemAttributeService.fillOverloadedAttribute(highestPriorityAttribute, overloadedAttribute); // Add modified attribute to final list finalAttributes.add(overloadedAttribute); return finalAttributes; } } } // We don't have overloading attribute, we will use default // if has given strategy // If is default attribute disabled, then we don't use him  if (!defaultAttribute.isDisabledAttribute() && strategy == defaultAttribute.getStrategyType()) { finalAttributes.add(defaultAttribute); }  return finalAttributes; } 	0	0	1	0	0	0
"public static Object getPrimitiveOrWrapperValue(Class<?> klass, Object value) throws IllegalArgumentException { if (klass.isAssignableFrom(Byte.class) || klass.isAssignableFrom(byte.class)) { return value; } else if (klass.isAssignableFrom(Short.class) || klass.isAssignableFrom(short.class)) { return value; } else if (klass.isAssignableFrom(Integer.class) || klass.isAssignableFrom(int.class)) { return value; } else if (klass.isAssignableFrom(Long.class) || klass.isAssignableFrom(long.class)) { return value; } else if (klass.isAssignableFrom(Float.class) || klass.isAssignableFrom(Float.class)) { return value; } else if (klass.isAssignableFrom(Double.class) || klass.isAssignableFrom(double.class)) { return value; } else if (klass.isAssignableFrom(Boolean.class) || klass.isAssignableFrom(boolean.class)) { return value; } else if (klass.isAssignableFrom(String.class)) { return String.valueOf(value); } else if (klass.isAssignableFrom(Character.class)) { // Need to take care of converting between string to char values if (value instanceof String) { String str = (String) value; if (str.length() == 1) return new Character(str.charAt(0)); else if (str.length() > 1 || str.length() == 0) { throw new IllegalArgumentException( ""Expected Character value but found String with length "" + str.length()); } } else if (value instanceof Character) { return value; } else { throw new IllegalArgumentException( ""Expected Character value but found "" + value.getClass()); } } else if (klass.isAssignableFrom(char.class)) { // Need to take care of converting between string to char values if (value instanceof String) { String str = (String) value; if (str.length() == 1) return str.charAt(0); else if (str.length() > 1 || str.length() == 0) { throw new IllegalArgumentException( ""Expected Character value but found String with length "" + str.length()); } } else if (value instanceof Character) { return ((Character) value).charValue(); } else { throw new IllegalArgumentException( ""Expected Character value but found "" + value.getClass()); } } else { return null; } return value; } "	0	0	1	1	0	0
private static char [] zzUnpackCMap(String packed) { char [] map = new char[0x10000]; int i = 0;  /* index in packed string  */ int j = 0;  /* index in unpacked array */ while (i < 22) { int  count = packed.charAt(i++); char value = packed.charAt(i++); do map[j++] = value; while (--count > 0); } return map; } 	0	0	1	0	1	0
public boolean isNegativeInfinity() { return isInfinity() && isLowerBoundary(); } 	0	0	0	1	0	0
public boolean isPositiveInfinity() { return isInfinity() && isUpperBoundary(); } 	0	0	0	1	0	0
public void update() { mapDrawn = false; loadSprites(tileSetNo); } 	1	0	1	0	0	0
"@Parameters({ ""Browser"" }) @Test(groups = {""WEB"" , ""Tablet""}) public void CTTCM163(String Browser) throws AssertionError, ExceptionHandler { try { HomePage home = new HomePage(driver); home.header.selectDeptarment();  DepartmentPage deptPage = new DepartmentPage(driver); deptPage.selectCategoryNav();  CategoryPage categoryPage = new CategoryPage(driver); while (categoryPage.verifyTotalItem() == false) { driver.navigate().back(); deptPage.setDriver(driver); deptPage.selectCategoryNav(); categoryPage.setDriver(driver); } categoryPage.addToCompareItems(); categoryPage.selectRefinement(); Assert.assertTrue(categoryPage.selectSort()); Assert.assertTrue(categoryPage.refinementVerification()); categoryPage.verifySort(); } catch (Exception e) { logger.error(e.getMessage()); throw new ExceptionHandler(e.getMessage()); }  } "	0	0	1	0	1	0
public void establishHealth(){ this.health = 2000f; this.fullHealth = health; } 	0	0	1	0	0	0
"protected void close(PreparedStatement preparedStatement, String task) { if (preparedStatement != null) { try { preparedStatement.close(); } catch (SQLException e) { logger.error(""Closing prepared statement failed after "" + task, e); } } } "	0	0	1	0	1	0
"@Override public DurableStoreConnection init(ConfigurationProperties connectionProperties) throws AndesException {  RDBMSConnection rdbmsConnection = new RDBMSConnection(); rdbmsConnection.initialize(connectionProperties);  rdbmsStoreUtils = new RDBMSStoreUtils(connectionProperties);  datasource = rdbmsConnection.getDataSource(); logger.info(""Andes Context Store initialised""); return rdbmsConnection; } "	0	0	1	0	1	0
"protected void rollback(Connection connection, String task) { if (connection != null) { try { connection.rollback(); } catch (SQLException e) { logger.warn(""Rollback failed on "" + task, e); } } } "	0	0	1	0	1	0
private void initViews(View layout) {  progressBar = layout.findViewById(R.id.cci_progress_bar); final ImageView mCustomerImage = (ImageView) layout.findViewById(R.id.crypto_customer_image); mCustomerName = (EditText) layout.findViewById(R.id.crypto_customer_name); textCount = (FermatTextView) layout.findViewById(R.id.crypto_customer_name_text_count);   if (cryptoCustomerBitmap != null) { RoundedBitmapDrawable bitmapDrawable = RoundedBitmapDrawableFactory.create(getResources(), cryptoCustomerBitmap); bitmapDrawable.setCornerRadius(360); bitmapDrawable.setAntiAlias(true); mCustomerImage.setImageDrawable(bitmapDrawable); }  if (cryptoCustomerName != null) mCustomerName.setText(cryptoCustomerName);  mCustomerName.requestFocus(); mCustomerName.performClick(); mCustomerName.setFilters(new InputFilter[]{new InputFilter.LengthFilter(maxLenghtTextCount)}); mCustomerName.addTextChangedListener(textWatcher); textCount.setText(String.valueOf(maxLenghtTextCount));  mCustomerName.setOnFocusChangeListener(new View.OnFocusChangeListener() { @Override public void onFocusChange(View v, boolean hasFocus) { getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE); } });   final ImageView camara = (ImageView) layout.findViewById(R.id.camara); camara.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { dispatchTakePictureIntent(); } });  final ImageView galeria = (ImageView) layout.findViewById(R.id.galeria); galeria.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { loadImageFromGallery(); } });  mCustomerName.requestFocus();  checkGPSOn();  final InputMethodManager inputMethodManager = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE); inputMethodManager.toggleSoftInput(InputMethodManager.SHOW_IMPLICIT, InputMethodManager.HIDE_IMPLICIT_ONLY);  configureToolbar(); } 	0	0	0	0	0	1
protected Message buildAcceptanceMessage(JID sourceFrom, JID sourceTo, RPSLSGameInfo gameInfo) { JID fromJID = sourceTo; JID toJID = sourceFrom;  String appId = JIDUtil.getAppId(toJID); Message message = new Message(); message.setTo(toJID); message.setFrom(fromJID);  MessageIdGenerator generator = new MessageIdGeneratorImpl(); String id = generator.generate(toJID.getNode(), appId, null); message.setID(id); message.setType(Message.Type.chat);  Element mmx = message.addChildElement(Constants.MMX, Constants.MMX_NS_MSG_PAYLOAD);  //mmx meta Element internalMeta = mmx.addElement(Constants.MMX_MMXMETA); String userId = JIDUtil.getUserId(toJID); String devId = toJID.getResource(); String senderId = JIDUtil.getUserId(fromJID); String senderDevId = fromJID.getResource(); MmxHeaders mmxMeta = new MmxHeaders(); mmxMeta.put(MmxHeaders.TO, new MMXid(userId, devId, null)); mmxMeta.put(MmxHeaders.FROM, new MMXid(senderId, senderDevId, null)); internalMeta.setText(GsonData.getGson().toJson(mmxMeta));  Element meta = mmx.addElement(Constants.MMX_META); AcceptanceRPSLSGameInfo acceptance = new AcceptanceRPSLSGameInfo(); acceptance.setGameId(gameInfo.gameId); acceptance.setLosses(0); acceptance.setWins(0); acceptance.setTies(0); Date current = new Date(); acceptance.setTimestamp(current.getTime()); acceptance.setType(RPSLSMessageType.ACCEPTANCE); String myUserId = JIDUtil.getUserId(sourceTo); acceptance.setUsername(myUserId); // user id of the bot user.  String acceptanceJSON = acceptance.toJson(); meta.setText(acceptanceJSON);  Element payloadElement = mmx.addElement(Constants.MMX_PAYLOAD); DateFormat fmt = Utils.buildISO8601DateFormat(); String formattedDateTime = fmt.format(new Date()); payloadElement.addAttribute(Constants.MMX_ATTR_STAMP, formattedDateTime); String text = INVITE_REPLY_MESSAGE; payloadElement.setText(text); payloadElement.addAttribute(Constants.MMX_ATTR_CHUNK, MessageBuilder.buildChunkAttributeValue(text)); return message; } 	1	1	1	1	0	0
"public JSONArray put(int index, String name, String value) { if (index > 0 && index <= MAX_VARIABLES && name != null & value != null) {  if (name.length() > MAX_LENGTH) { Logy.w(LOGGER_TAG, String.format(""Name is too long %s"", name)); name = name.substring(0, MAX_LENGTH); }  if (value.length() > MAX_LENGTH) { Logy.w(LOGGER_TAG, String.format(""Value is too long %s"", value)); value = value.substring(0, MAX_LENGTH); }  return put(Integer.toString(index), new JSONArray(Arrays.asList(name, value))); } Logy.d(LOGGER_TAG, ""Index is out of range or name/value is null""); return null; } "	1	0	1	1	1	0
"@Test /** * for {@link BatchThumbnailAdapter#report(String)} */ public void should_set_report_uri() { // Given BatchThumbnailAdapter thumbnailAdapter = new BatchThumbnailAdapter(sessionStorageMock);  // When BatchThumbnailAdapter retrieved = thumbnailAdapter.report(""/public/Samples/Reports/07g.RevenueDetailReport"");  // Then MultivaluedHashMap<String, String> params = (MultivaluedHashMap<String, String>) Whitebox.getInternalState(thumbnailAdapter, ""params""); List<String> list = params.get(""uri""); assertSame(retrieved, thumbnailAdapter); assertEquals(list.get(0), ""/public/Samples/Reports/07g.RevenueDetailReport""); } "	1	1	0	1	0	0
"public BatchThumbnailAdapter defaultAllowed(Boolean value) { params.add(""defaultAllowed"", value.toString()); return this; } "	0	0	0	1	1	0
"private static String getOncogenicSummarySubFunc(Gene gene, Alteration exactMatchAlteration, List<Alteration> alterations, Query query) { StringBuilder sb = new StringBuilder();  Oncogenicity oncogenic = null;  Boolean isHotspot = false; String queryAlteration = query.getAlteration(); Alteration alteration = null;  if (AlterationUtils.isGeneralAlterations(queryAlteration, true)) { queryAlteration = queryAlteration.substring(0, 1).toUpperCase() + queryAlteration.substring(1); }  String altName = getGeneMutationNameInVariantSummary(gene, queryAlteration);  if (exactMatchAlteration != null) { // Synonymous Summary if (exactMatchAlteration.getConsequence().getTerm().equals(""synonymous_variant"")) { return synonymousSummary(); }  isHotspot = HotspotUtils.isHotspot(exactMatchAlteration);  // Find oncogenic info from exact matched variant List<Evidence> oncogenicEvidences = EvidenceUtils.getEvidence(Collections.singletonList(exactMatchAlteration), Collections.singleton(EvidenceType.ONCOGENIC), null); if (oncogenicEvidences != null && oncogenicEvidences.size() > 0) { Set<Oncogenicity> oncogenicities = new HashSet<>(); for (Evidence evidence : oncogenicEvidences) { Oncogenicity tmpOncogenic = Oncogenicity.getByEvidence(evidence); if (tmpOncogenic != null) { oncogenicities.add(tmpOncogenic); } } oncogenic = MainUtils.findHighestOncogenicity(oncogenicities); } alteration = exactMatchAlteration; } else { alteration = AlterationUtils.getAlteration(gene.getHugoSymbol(), query.getAlteration(), query.getAlterationType(), query.getConsequence(), query.getProteinStart(), query.getProteinEnd()); AlterationUtils.annotateAlteration(alteration, queryAlteration); }  if (oncogenic == null) { // Get oncogenic summary from alternative alleles List<Alteration> alternativeAlleles = AlterationUtils.getAlleleAlterations(alteration); List<Alteration> alternativeAllelesWithoutVUS = AlterationUtils.excludeVUS(gene, alternativeAlleles);  // VUS alternative alleles are not accounted into oncogenic summary calculation if (alternativeAllelesWithoutVUS.size() > 0) { sb.append(alleleSummary(alteration)); return sb.toString(); }  // Get oncogenic info from rest of relevant alterations except AA alterations.removeAll(alternativeAlleles); Set<Oncogenicity> oncogenicities = new HashSet<>(); for (Alteration a : alterations) { List<Evidence> oncogenicEvidences = EvidenceUtils.getEvidence(Collections.singletonList(a), Collections.singleton(EvidenceType.ONCOGENIC), null); if (oncogenicEvidences != null && oncogenicEvidences.size() > 0) { Evidence evidence = oncogenicEvidences.iterator().next(); if (evidence != null) { oncogenicities.add(Oncogenicity.getByEvidence(evidence)); } } }  // Rank oncogenicities from relevant variants oncogenic = MainUtils.findHighestOncogenicity(oncogenicities); }  if (oncogenic != null) { return getOncogenicSummaryFromOncogenicity(oncogenic, queryAlteration, altName); }  if (alteration != null && MainUtils.isVUS(alteration)) { return vusAndHotspotSummary(alteration, query, isHotspot); }  if (isHotspot) { return hotspotSummary(query); }  return unknownOncogenicSummary(gene); } "	1	0	1	0	0	0
@Deprecated public CatchPokemonResponse catchPokemon( MapPokemon catchablePokemon, double normalizedHitPosition, double normalizedReticleSize, double spinModifier, ItemId pokeball) throws LoginFailedException, RemoteServerException {  CatchPokemonMessage reqMsg = CatchPokemonMessage.newBuilder() .setEncounterId(catchablePokemon.getEncounterId()) .setHitPokemon(true) .setNormalizedHitPosition(normalizedHitPosition) .setNormalizedReticleSize(normalizedReticleSize) .setSpawnPointId(catchablePokemon.getSpawnPointId()) .setSpinModifier(spinModifier) .setPokeball(pokeball) .build(); ServerRequest serverRequest = new ServerRequest(RequestTypeOuterClass.RequestType.CATCH_POKEMON, reqMsg); api.getRequestHandler().sendServerRequests(serverRequest);  CatchPokemonResponse response; try { response = CatchPokemonResponse.parseFrom(serverRequest.getData()); } catch (InvalidProtocolBufferException e) { throw new RemoteServerException(e); } return response; } 	1	0	1	1	1	0
private void readRecordsParallel(long recordsReadInCurrentPass){ ArrayList<Future<Integer>> futures = Lists.newArrayList(); for (VarLengthColumn<?> columnReader : columns) { Future<Integer> f = columnReader.readRecordsAsync(columnReader.pageReader.valuesReadyToRead); futures.add(f); } Exception exception = null; for(Future f: futures){ if(exception != null) { f.cancel(true); } else { try { f.get(); } catch (Exception e) { f.cancel(true); exception = e; } } } for (VarLengthColumn<?> columnReader : columns) { columnReader.valueVec.getMutator().setValueCount((int)recordsReadInCurrentPass); } } 	0	0	1	0	1	0
private void consumeEncoderOutput(NcdfEncoder encoder) throws Exception { while (encoder.writeNext()) ; encoder.closeQuietly(); } 	0	0	1	0	1	0
"private static String libraryNameFromFileName(String fileName) { return FILE_EXTENSION_PATTERN.matcher(fileName).replaceAll(""""); } "	0	0	1	1	0	0
protected void warning(String message) { info(sender, message); } 	0	0	1	0	1	0
"private void initAdapter() { mQuickAdapter = new QuickAdapter(HeaderAndFooterUseActivity.this, PAGE_SIZE); mQuickAdapter.openLoadAnimation(); mRecyclerView.setAdapter(mQuickAdapter); mQuickAdapter.setOnRecyclerViewItemClickListener(new BaseQuickAdapter.OnRecyclerViewItemClickListener() { @Override public void onItemClick(View view, int position) { Toast.makeText(HeaderAndFooterUseActivity.this, """" + Integer.toString(position), Toast.LENGTH_LONG).show(); } }); } "	1	0	1	1	1	0
private List<IrStreamItem> lengthTwoBareIrStream(String key) { return lengthTwoBareIrStream(remote.getBinaryParameters(key)); } 	1	0	1	0	1	0
"public static JSONObject buildDeployableMappingMessage(EnvVars envVars, PrintStream printStream){ String environment = null; // for debugging purpose only, uncomment the line below // environment = ""dev""; // to target YS1 try { JSONObject deployableMappingMessage = new JSONObject(); // API String apiUrl= AbstractDevOpsAction.chooseTargetAPI(environment);  // get bluemix token first String userId= Util.getUser(envVars); String pwd= Util.getPassword(envVars);  String bluemixToken = AbstractDevOpsAction.getBluemixToken(userId, pwd, apiUrl);  // org details JSONObject org = new JSONObject(); String orgName = Util.getOrg(envVars); org.put(""Name"" , orgName); String orgId= AbstractDevOpsAction.getOrgId(bluemixToken, orgName, environment, false); org.put(""Guid"" , orgId);  // space details JSONObject space = new JSONObject(); String spaceName = Util.getSpace(envVars); space.put(""Name"" , spaceName); String spaceId= AbstractDevOpsAction.getSpaceId(bluemixToken, spaceName, environment, false); space.put(""Guid"" , spaceId);  // app details JSONObject app = new JSONObject(); String appName = Util.getAppName(envVars); app.put(""Name"" , appName); String appId= AbstractDevOpsAction.getAppId(bluemixToken, appName, orgName, spaceName, environment, false); app.put(""Guid"" , appId);  // Git JSONArray gitData= MessageUtil.buildGitData(envVars, printStream);  // format deployable message deployableMappingMessage = MessageUtil.formatDeployableMappingMessage(org, space, app, apiUrl, gitData, printStream);  return deployableMappingMessage;  } catch (Exception e) { printStream.println(""[IBM Cloud DevOps] Unexpected Exception encountered while building deployable message:""); e.printStackTrace(printStream); }  return new JSONObject(); } "	0	0	1	0	0	0
"@RequestMapping(""event/{eventId}/participants"") public ModelAndView getEventParticipants(@PathVariable(""eventId"") Long eventId){ Event event = eventDAO.findByIdFetchWithParticipantsAndPlayers(eventId); //for friendly games get the participants from the games if (event.getEventType().equals(EventType.FriendlyGames)){ Event eventWithGames = eventDAO.findByIdFetchWithParticipantsAndGamesAndGameParticipantsAndGamePlayers(eventId); if (eventWithGames.getGames() != null){ for (Game game: eventWithGames.getGames()){ event.getParticipants().addAll(game.getParticipants()); } } } SortedMap<Participant, BigDecimal> rankingMap = new TreeMap<>(); if (!event.getParticipants().isEmpty()){ Participant participant = event.getParticipants().iterator().next(); if (participant instanceof Player){ rankingMap = rankingUtil.getPlayerRanking(event.getPlayers()); } else { rankingMap = rankingUtil.getTeamRanking(event.getTeams()); } } ModelAndView mav = new ModelAndView(""events/participants""); mav.addObject(""Model"", event); mav.addObject(""RankingMap"", SortUtil.sortMap(rankingMap)); return mav; } "	0	0	1	0	1	0
private static void getAllPropertiesForProgramHeader() { InputStream stream = ProjectProperties.class.getResourceAsStream(PROPERTIES_FILE); if (stream == null) { setDefaults(); return; } Properties props = new Properties(); try { props.load(stream); stream.close(); for (String tag : DEFAULT_VERSION_VALUES.keySet()) { String prop = (String) props.get(tag); String val = (prop == null) ? DEFAULT_VERSION_VALUES.get(tag) : prop; setValue(tag, val); } } catch (IOException e) { setDefaults(); } } 	0	0	0	0	0	1
@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { final View parent = inflater.inflate(R.layout.call_button_fragment, container, false);  mAudioButton = (CompoundButton) parent.findViewById(R.id.audioButton); mAudioButton.setOnClickListener(this); mMuteButton = (CompoundButton) parent.findViewById(R.id.muteButton); mMuteButton.setOnClickListener(this); mShowDialpadButton = (CompoundButton) parent.findViewById(R.id.dialpadButton); mShowDialpadButton.setOnClickListener(this); mHoldButton = (CompoundButton) parent.findViewById(R.id.holdButton); mHoldButton.setOnClickListener(this); mSwapButton = (ImageButton) parent.findViewById(R.id.swapButton); mSwapButton.setOnClickListener(this); mChangeToVideoButton = (ImageButton) parent.findViewById(R.id.changeToVideoButton); mChangeToVideoButton.setOnClickListener(this); mSwitchCameraButton = (CompoundButton) parent.findViewById(R.id.switchCameraButton); mSwitchCameraButton.setOnClickListener(this); mAddCallButton = (ImageButton) parent.findViewById(R.id.addButton); mAddCallButton.setOnClickListener(this); mMergeButton = (ImageButton) parent.findViewById(R.id.mergeButton); mMergeButton.setOnClickListener(this); mPauseVideoButton = (CompoundButton) parent.findViewById(R.id.pauseVideoButton); mPauseVideoButton.setOnClickListener(this); mCallRecordButton = (CompoundButton) parent.findViewById(R.id.callRecordButton); mCallRecordButton.setOnClickListener(this); mAddParticipantButton = (ImageButton) parent.findViewById(R.id.addParticipant); mAddParticipantButton.setOnClickListener(this); mTransferCallButton = (ImageButton) parent.findViewById(R.id.transferCall); mTransferCallButton.setOnClickListener(this); mOverflowButton = (ImageButton) parent.findViewById(R.id.overflowButton); mOverflowButton.setOnClickListener(this); mManageVideoCallConferenceButton = (ImageButton) parent.findViewById( R.id.manageVideoCallConferenceButton); mManageVideoCallConferenceButton.setOnClickListener(this); mTakeNoteButton = (ImageButton) parent.findViewById(R.id.takeNoteButton); getPresenter().getPreferredLinks(mDeepLinkCallback); return parent; } 	0	0	0	0	0	1
@Override public void initialize(URL location, ResourceBundle resources) {  dialog = new Stage(StageStyle.DECORATED); dialog.getIcons().addAll(ViewUtil.ROOT_STAGE.getIcons()); dialog.initModality(Modality.WINDOW_MODAL); buttonBox.getChildren().stream().forEach(b -> ((Button) b).setOnAction(event -> dialog.close())); image.setImage(new Image(InfoDialogController.class.getResourceAsStream(FileIO.INFO_ICON_RESOURCE)));  } 	0	0	1	0	1	0
"public String deviceToString(WifiP2pDevice device) { String strDevice = """"; strDevice += ""Device name: "" + device.deviceName; strDevice += ""\nDevice address: "" + device.deviceAddress; strDevice += ""\nIs group owner: "" + device.isGroupOwner(); strDevice += ""\nStatus: "" + deviceStatusToString(device.status) + ""\n""; return strDevice; } "	0	0	1	1	1	0
"static void add(String list,String back, String url){ System.out.println(server.addToList(url, (list.equals(""wl"") ? true : false), (back.equals(""b"") ? true : false))); } "	0	0	0	1	0	0
public final List<Transform> getCollisionTransforms() { return new ArrayList<Transform>(collisionTransforms); } 	1	0	1	0	1	0
@Override public final Rectangle getBounds() { return Box2DUtils.aabb(body); } 	0	0	1	0	1	0
@Override public Collection<PushConfigSuppressResponse> execute(String suppressId) throws MMXException { //convert request  //do job Collection<MMXPushSuppress> s = MMXPushConfigService.getInstance().getPushSuppressForAppAndUser(appId, null);  //convert and return response return convertResponse(s); } 	0	0	0	1	0	0
"public void onCalendarEventClicked(CourseComponent courseComponent) { List<List<CourseComponent>> alternatives; try { alternatives = scheduler.getAlternateSections(courseComponent); } catch (ContradictionException e) { Log.e(""HomePresenter"", ""Failed to get alternate slots!""); return; }  if (alternatives.size() == 0) { // No other sections that this course can switch into } else { homeFragment.showConflictFreeAlternativesDialog(courseComponent, alternatives); } } "	0	0	1	0	0	0
"private String resolveCurrentRelease() { val latestRelease = releaseTimes.keySet().stream() .max(Ordering.natural()); checkState(latestRelease.isPresent(), ""Failed to resolve current release"");  return latestRelease.get(); } "	1	0	1	1	0	0
public Collection<String> getReleases() { return releaseDonorFileTypes.keySet(); } 	1	0	0	0	1	0
public boolean isLegacyRelease(@NonNull String release) { return DfsPaths.isLegacyRelease(releaseDonorFileTypes.keySet(), release); } 	1	0	0	0	1	0
"public static List<Spawn> parseDefault(Document document) { List<Spawn> result = new ArrayList<Spawn>(); for (Element spawns : document.getRootElement().getChildren(""spawns"")) { try { Element working = spawns.getChild(""default""); int yaw = 0; try { yaw = Integer.parseInt(spawns.getAttributeValue(""yaw"")); } catch (Exception e) {} try { yaw = Integer.parseInt(working.getAttributeValue(""yaw"")); } catch (Exception e) {} try { yaw = Integer.parseInt(working.getChild(""point"").getAttributeValue(""yaw"")); } catch (Exception e) {} List<Region> regions = new ArrayList<Region>(); try { regions.add(Region.getRegion(working.getChildren().get(0))); } catch (IndexOutOfBoundsException e) { regions.add(new BlockRegion(new BlockParser(working))); } String kit = working.getAttributeValue(""kit""); result.add(new Spawn(regions, yaw, kit)); } catch (NullPointerException e) {  }  } return result; } "	1	0	0	0	1	0
public static Matrix4d getTransformation(Matrix rot, Matrix trans) { return new Matrix4d( new Matrix3d(rot.getColumnPackedCopy()), new Vector3d(trans.getColumnPackedCopy()), 1.0); } 	0	0	0	1	0	0
private void displayMessage(String message) { ScrollView scrollView = (ScrollView) findViewById(R.id.scrollView); LayoutInflater vi = (LayoutInflater) getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE); View myView = vi.inflate(R.layout.chat_message_cell, null, false); TextView tv = (TextView) myView.findViewById(R.id.txtChatMessageText); ViewGroup insertPoint = (ViewGroup) findViewById(R.id.chatCells);  tv.setText(message); insertPoint.addView(myView); scrollToBottom(scrollView); } 	0	0	1	1	1	0
"@Override public void validate(CertifiedProductSearchDetails product) { //if it's a new product, check the id parts String uniqueId = product.getChplProductNumber(); String[] uniqueIdParts = uniqueId.split(""\\.""); if(uniqueIdParts != null && uniqueIdParts.length == 9) {  //validate that these pieces match up with data String productCode = uniqueIdParts[4]; String versionCode = uniqueIdParts[5]; String icsCode = uniqueIdParts[6]; String additionalSoftwareCode = uniqueIdParts[7]; String certifiedDateCode = uniqueIdParts[8];  try { if(product.getDeveloper() != null && product.getDeveloper().getDeveloperId() != null) { DeveloperDTO developer = developerDao.getById(product.getDeveloper().getDeveloperId()); if(developer != null) { if(!developer.getStatus().getStatusName().equals(DeveloperStatusType.Active.toString())) { product.getErrorMessages().add(""The developer "" + developer.getName() + "" has a status of "" + developer.getStatus().getStatusName() + "". Certified products belonging to this developer cannot be created or updated until its status returns to Active.""); } } else { product.getErrorMessages().add(""Could not find developer with id "" + product.getDeveloper().getDeveloperId()); } } } catch(EntityRetrievalException ex) { product.getErrorMessages().add(""Could not find distinct developer with id "" + product.getDeveloper().getDeveloperId()); }  if(StringUtils.isEmpty(productCode) || !productCode.matches(""^\\w+$"")) { product.getErrorMessages().add(""The product code is required and may only contain the characters A-Z, a-z, 0-9, and _""); }  if(StringUtils.isEmpty(versionCode) || !versionCode.matches(""^\\w+$"")) { product.getErrorMessages().add(""The version code is required and may only contain the characters A-Z, a-z, 0-9, and _""); }  if(StringUtils.isEmpty(icsCode) || !icsCode.matches(""^\\d+$"")) { product.getErrorMessages().add(""The ICS code is required and may only contain the characters 0-9""); }  hasIcsConflict = false; if(icsCode.equals(""0"") && product.getIcs().equals(Boolean.TRUE)) { product.getErrorMessages().add(""The unique id indicates the product does not have ICS but the value for Inherited Certification Status is true.""); hasIcsConflict = true; } else if(!icsCode.equals(""0"") && product.getIcs().equals(Boolean.FALSE)) { product.getErrorMessages().add(""The unique id indicates the product does have ICS but the value for Inherited Certification Status is false.""); hasIcsConflict = true; } if(additionalSoftwareCode.equals(""0"")) { boolean hasAS = false; for(CertificationResult cert : product.getCertificationResults()) { if(cert.getAdditionalSoftware() != null && cert.getAdditionalSoftware().size() > 0) { hasAS = true; } } if(hasAS) { product.getErrorMessages().add(""The unique id indicates the product does not have additional software but some is listed for the product.""); } } else if(additionalSoftwareCode.equals(""1"")) { boolean hasAS = false; for(CertificationResult cert : product.getCertificationResults()) { if(cert.getAdditionalSoftware() != null && cert.getAdditionalSoftware().size() > 0) { hasAS = true; } } if(!hasAS) { product.getErrorMessages().add(""The unique id indicates the product has additional software but none is listed for the product.""); } } else { product.getErrorMessages().add(""The additional software part of the unique ID must be 0 or 1.""); } SimpleDateFormat idDateFormat = new SimpleDateFormat(""yyMMdd""); try { Date idDate = idDateFormat.parse(certifiedDateCode); if(product.getCertificationDate() == null || idDate.getTime() != product.getCertificationDate().longValue()) { product.getErrorMessages().add(""The certification date provided in the unique id does not match the certification date of the product.""); } } catch (ParseException pex) { product.getErrorMessages().add(""Could not parse the certification date part of the product id: "" + certifiedDateCode); } }  validateDemographics(product);  for(CertificationResult cert : product.getCertificationResults()) { if(cert.getAdditionalSoftware() != null && cert.getAdditionalSoftware().size() > 0) { for(CertificationResultAdditionalSoftware asDto : cert.getAdditionalSoftware()) { if(asDto.getCertifiedProductId() == null && !StringUtils.isEmpty(asDto.getCertifiedProductNumber())) { try { boolean exists = cpManager.chplIdExists(asDto.getCertifiedProductNumber()); if(!exists) { product.getErrorMessages().add(""No CHPL product was found matching additional software "" + asDto.getCertifiedProductNumber() + "" for "" + cert.getNumber()); } } catch(Exception ex) {} } } } } } "	0	0	1	0	1	0
"@Test public void healthcheck_unitInLowerCase() throws Exception { Api api = load(""/io/gravitee/definition/jackson/services/healtcheck/api-withservice-healthcheck-unitInLowerCase.json"", Api.class); HealthCheckService healthCheckService = api.getServices().get(HealthCheckService.class); Assert.assertNotNull(healthCheckService); Assert.assertFalse(healthCheckService.isEnabled()); Assert.assertEquals(60, healthCheckService.getTrigger().getRate()); Assert.assertEquals(TimeUnit.SECONDS, healthCheckService.getTrigger().getUnit()); } "	0	0	1	0	1	0
public static void close() throws Exception { if(fileOutputStream!=null) fileOutputStream.close(); } 	0	0	1	0	0	0
@Override public void write(WritableByteChannel writableChannel) throws IOException { Cache cache = CacheFactory.getInstance(); try { if (cache != null) { WritableByteChannel cacheWritableChannel = null; try (ReadableByteChannel cacheReadableChannel = cache.getImageReadableChannel(this.ops)) { if (cacheReadableChannel != null) { // a cached image is available; write it to the // response output stream. IOUtils.copy(cacheReadableChannel, writableChannel); } else { // create a TeeOutputStream to write to both the // response output stream and the cache simultaneously. cacheWritableChannel = cache.getImageWritableChannel(this.ops); TeeWritableByteChannel teeChannel = new TeeWritableByteChannel( writableChannel, cacheWritableChannel); doCacheAwareWrite(teeChannel, cache); } } catch (Exception e) { throw new IOException(e); } finally { if (cacheWritableChannel != null && cacheWritableChannel.isOpen()) { cacheWritableChannel.close(); } } } else { doWrite(writableChannel); } } finally { try { if (readableChannel != null && readableChannel.isOpen()) { readableChannel.close(); } } catch (IOException e) { logger.error(e.getMessage(), e); } } } 	1	0	0	0	1	0
"public String readAcc(String inName) { String acc = ""000000""; File[] allAccounts = ls(DB_DIR); String[] allAccountNumbers = new String[allAccounts.length]; for (int i = 0; i < allAccounts.length; i++) { allAccountNumbers[i] = allAccounts[i].getName(); String name = readName(allAccountNumbers[i]); if (inName.equals(name)) { acc = allAccountNumbers[i]; break; } } return acc; } "	0	0	1	0	0	0
public String getDevicesList(String currentUser, int tenantId, String type, String[] params, String platform){  User user = setUserData(new User(), currentUser);   MobileConfigurations configurations = MobileConfigurations.getInstance(); MDMOperations mdmOperations =  getMDMOperationsInstance(); List<Device> devices = mdmOperations.getDevices(user, tenantId, type, params, platform, null, Boolean.getBoolean(configurations.getMDMConfigs().get(MobileConfigurations.ENABLE_SAMPLE_DEVICES)), configurations.getActiveMDMProperties()); return convertDevicesToJSON(devices).toJSONString(); } 	0	0	1	0	1	0
public String getDevicesList(String currentUser, int tenantId, String type, String[] params, String platform, String platformVersion){  User user = setUserData(new User(), currentUser);  MobileConfigurations configurations = MobileConfigurations.getInstance(); MDMOperations mdmOperations = getMDMOperationsInstance(); List<Device> devices =  mdmOperations.getDevices(user, tenantId, type, params, platform, platformVersion, Boolean.getBoolean(configurations.getMDMConfigs().get(MobileConfigurations.ENABLE_SAMPLE_DEVICES)), configurations.getActiveMDMProperties()); return convertDevicesToJSON(devices).toJSONString(); } 	0	0	1	0	1	0
"private void processSingleMeasurementNode(final FcModelNode member, final LogicalNode logicalNode, final ModelNode childNode) { BdaFloat32 singleMeasurement = this.getSingleMeasurementModelNode(childNode); BdaTimestamp timestampMeasurement = this.getTimestampModelNode(childNode); String type = member.getName() + ""."" + childNode.getName(); type += singleMeasurement.getParent().getParent().getName() + ""."" + singleMeasurement.getParent().getName() + ""."" + singleMeasurement.getName(); BigDecimal value = new BigDecimal(((BdaFloat32) singleMeasurement).getFloat(), new MathContext(3, RoundingMode.HALF_EVEN)); DataSampleDto sample = new DataSampleDto(type, timestampMeasurement.getDate(), value); logicalNode.getDataSamples().add(sample); } "	0	0	1	1	1	0
public ArrayList<Record> getRecords() { return records; } 	0	0	0	1	0	0
"private static CMSTypedStream getSignedInputStream( BodyPart    bodyPart, String      defaultContentTransferEncoding, File        backingFile) throws MessagingException { try { OutputStream   out = new BufferedOutputStream(new FileOutputStream(backingFile));  SMIMEUtil.outputBodyPart(out, bodyPart, defaultContentTransferEncoding);  out.close();  InputStream in = new TemporaryFileInputStream(backingFile);  return new CMSTypedStream(in); } catch (IOException e) { throw new MessagingException(""can't extract input stream: "" + e); } } "	1	0	1	0	1	0
private void markEntry(CalendarList calendar){ OldNewEntryPair pair = calendar.mark(id);  assert pair.oldEntry != null;  editedEntry = pair.oldEntry;  if(pair.newEntry == null){ calendar.mark(id); throw new IllegalArgumentException(ERORR_NON_RECURRING); }  newEntryId = pair.newEntry.getId(); calendar.mark(newEntryId);   } 	0	0	0	1	0	0
@Override public void initGui() { xSize = 176; ySize = 227; super.initGui();  //Temporary Item List: recipeList = Lists.newArrayList( new ProjectTableRecipe(new ItemStack(ModBlock.blockSteel, 1), new ItemStack(ModItem.ingotSteel, 15)), new ProjectTableRecipe(new ItemStack(Items.diamond, 10), new ItemStack(Blocks.dirt, 64), new ItemStack(Blocks.dirt, 64), new ItemStack(Blocks.dirt, 64)), new ProjectTableRecipe(new ItemStack(Items.diamond, 1), new ItemStack(Blocks.dirt, 64), new ItemStack(Blocks.dirt, 64)), new ProjectTableRecipe(new ItemStack(Items.diamond, 1), new ItemStack(Blocks.dirt, 64), new ItemStack(Blocks.dirt, 64)), new ProjectTableRecipe(new ItemStack(Items.diamond, 1), new ItemStack(Blocks.dirt, 64), new ItemStack(Blocks.dirt, 64)), new ProjectTableRecipe(new ItemStack(Items.diamond, 1), new ItemStack(Blocks.dirt, 64), new ItemStack(Blocks.dirt, 64)), new ProjectTableRecipe(new ItemStack(Items.diamond, 1), new ItemStack(Blocks.dirt, 64), new ItemStack(Blocks.dirt, 64)) ); filteredList = Lists.newArrayList(recipeList);  searchField = new GuiTextField(0, fontRendererObj, guiLeft + 9, guiTop + 9, 151, fontRendererObj.FONT_HEIGHT); searchField.setMaxStringLength(60); searchField.setEnableBackgroundDrawing(false); searchField.setVisible(true); searchField.setTextColor(16777215); searchField.setFocused(true);  createComponents();  processPlayerInventory();  setRecipeRenderText(); } 	0	0	0	0	0	1
"@Override protected String doInBackground(String... params) { HttpURLConnection connection = null; try { URL url = new URL(params[0]); connection = (HttpURLConnection) url.openConnection(); connection.setRequestMethod(""GET""); connection.setUseCaches(false); connection.setAllowUserInteraction(false); connection.setConnectTimeout(10000); connection.setReadTimeout(10000); connection.connect(); int status = connection.getResponseCode();  switch (status) { case 200: case 201: BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream())); StringBuilder sb = new StringBuilder(); String line; while ((line = br.readLine()) != null) { if (isCancelled()) { br.close(); connection.disconnect(); return null; } sb.append(line).append(""\n""); } br.close(); return sb.toString(); }  } catch (IOException ex) { ex.printStackTrace(); if (Siren.sirenInstance.mSirenListener != null) { Siren.sirenInstance.mSirenListener.onError(ex); }  } finally { if (connection != null) { try { connection.disconnect(); } catch (Exception ex) { ex.printStackTrace(); if (Siren.sirenInstance.mSirenListener != null) { Siren.sirenInstance.mSirenListener.onError(ex); } } } } return null; } "	0	0	1	0	1	0
"public UpdateServiceInstanceResponse doUpdateServiceInstance( UpdateServiceInstanceRequest request, String password) throws OCDPServiceException { String serviceDefinitionId = request.getServiceDefinitionId(); OCDPAdminService ocdp = getOCDPAdminService(serviceDefinitionId); Map<String, Object> params = request.getParameters(); UpdateServiceInstanceResponse response; if(params.get(""user_name"") != null && params.get(""tenant_name"") != null){ String accountName = (String) params.get(""user_name""); String tenantName = (String) params.get(""tenant_name""); if(params.get(""accesses"") != null) { // Assign role to tenant user logger.info(""Assign role, username:  "" + accountName + "" tenant name: "" + tenantName ); Map<String, Object> accesses = (Map<String, Object>)params.get(""accesses""); addUserToTenant(ocdp, accountName, password, tenantName, accesses); Map<String, Object> credentials = new HashMap<String, Object>() { { put(""username"", accountName); put(""password"", password); } }; response = new OCDPUpdateServiceInstanceResponse().withCredential(credentials).withAsync(false); } else { // Revoke role from tenant user logger.info(""Revoke role, username:  "" + accountName + "", tenant name: "" + tenantName ); removeUserFromTenant(ocdp, accountName, tenantName); response = new OCDPUpdateServiceInstanceResponse().withAsync(false); } } else { // Service instance resize String serviceInstanceId = request.getServiceInstanceId(); logger.info(""Resize Service Instance: "" + serviceInstanceId); ServiceInstance instance = repository.findOne(serviceInstanceId); if (instance == null) { throw new ServiceInstanceDoesNotExistException(serviceInstanceId); } try{ ocdp.resizeResourceQuota(instance, params); } catch (IOException e){ e.printStackTrace(); } response = new OCDPUpdateServiceInstanceResponse().withAsync(false); } logger.info(""Update service instance successfully!""); return response; } "	0	0	1	1	0	0
public static void updateItem(ItemStack item, RPGMetadata rpgMeta, boolean updateDurability) { RPGItem rItem = ItemManager.toRPGItem(item); if (rItem == null) return; item.setType(rItem.item.getType()); ItemMeta meta = localeMeta; if (!(meta instanceof LeatherArmorMeta) && updateDurability) { item.setDurability(rItem.item.getDurability()); } List<String> lore = meta.getLore(); rItem.addExtra(rpgMeta, item, lore); lore.set(0, meta.getLore().get(0) + rpgMeta.toMCString()); meta.setLore(lore); item.setItemMeta(meta); } 	0	0	1	0	1	0
public static Swagger readJsonString(String json) throws IOException { return mapper().readValue(json, Swagger.class); } 	0	0	1	1	1	0
"private void sendNotification(NotificationData notificationData) {  Intent intent = new Intent(this, MainActivity.class); intent.putExtra(NotificationData.TEXT, notificationData.getTextMessage());  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); PendingIntent pendingIntent = PendingIntent.getActivity(this, 0 /* Request code */, intent, PendingIntent.FLAG_ONE_SHOT);  NotificationCompat.Builder notificationBuilder = null; try {  notificationBuilder = new NotificationCompat.Builder(this) .setSmallIcon(R.drawable.mybus_icon) .setContentTitle(URLDecoder.decode(notificationData.getTitle(), ""UTF-8"")) .setContentText(URLDecoder.decode(notificationData.getTextMessage(), ""UTF-8"")) .setAutoCancel(true) .setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)) .setContentIntent(pendingIntent);  } catch (UnsupportedEncodingException e) { e.printStackTrace(); }  if (notificationBuilder != null) { NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); notificationManager.notify(notificationData.getId(), notificationBuilder.build()); } else { Log.d(TAG, ""NotificationBuilder creation failed.""); } } "	0	0	1	0	1	0
int  Binop() { int  kind; kind=Node.BITAND; if (la.kind == 33) { Get(); } else if (la.kind == 35) { Get(); kind=Node.BITXOR; } else if (la.kind == 34) { Get(); kind=Node.BITOR; } else SynErr(82); return kind; } 	0	0	1	0	0	0
public static <T1, T2, T3> Tuple3<T1, T2, T3> tuple( T1 v1, T2 v2, T3 v3 ) { return new Tuple3<T1, T2, T3>(v1, v2, v3); } 	1	0	0	0	1	0
"@Override public void invalidateResult() { constantResultField.getEditText().setText(""""); arrayResultMatrix.setText("""", getFormulaList().getDimen()); } "	1	0	0	0	1	0
public String getUserType() { return userType; } 	0	0	1	0	1	0
"private void processTextCoordinate(DNCWorkCoordinate coordinate) { try { logger.info(""Anonymising text, coordinates: "" + coordinate); String text = dncWorkUnitDao.getTextFromCoordinate(coordinate); if (pseudonymisationIsEnabled()) { Patient patient = patientDao.getPatient(coordinate.getPatientId()); text = anonymisationService.pseudonymisePersonPlainText(patient, text); } saveText(coordinate, text); } catch (Exception ex) { logger.info(""Could not process coordinate "" + coordinate); failedCoordinates.add(coordinate); ex.printStackTrace(); } } "	0	0	0	1	0	0
public static Timestamp toSqlTimestamp(com.google.cloud.spanner.Timestamp ts) { Timestamp res = new Timestamp(ts.getSeconds()); return res; } 	1	0	0	1	1	0
"public void doRun(ScribenginShell shell) throws Exception { try { ScribenginClient scribenginClient = shell.getScribenginClient() ; long stopTime = System.currentTimeMillis() + waitForRunningDataflow; DataflowClient dflClient = scribenginClient.getDataflowClient(dataflowId, waitForRunningDataflow); while(dflClient.countActiveDataflowWorkers() == 0 && System.currentTimeMillis() < stopTime) { Thread.sleep(500); } List<ExecuteLog> executeLogs = new ArrayList<ExecuteLog>() ; boolean error = false ; int failureCount = 0 ; FailureSimulator[] failureSimulator = { new RandomWorkerKillFailureSimulator() } ;  while(!error && failureCount < maxFailure && dflClient.getStatus() == DataflowLifecycleStatus.RUNNING) { ExecuteLog executeLog = failureSimulator[0].terminate(dflClient); if(executeLog != null) { executeLogs.add(executeLog); Thread.sleep(failurePeriod); } else { error = true ; } failureCount++ ; } report(shell, executeLogs); } catch(Exception ex) { ex.printStackTrace(); shell.execute(""registry dump""); shell.execute(""dataflow info --id "" + dataflowId); throw ex ; } } "	0	0	1	1	1	0
"protected void cacheTenantFile(String tenantId, String relativePath, File file) throws SiteWhereException { ResourceMap tenant = getTenantResourceMaps().get(tenantId); if (tenant == null) { tenant = new ResourceMap(); getTenantResourceMaps().put(tenantId, tenant); } IResource resource = createResourceFromFile(relativePath, file); tenant.put(relativePath, resource); LOGGER.debug(""Cached resource: "" + resource.getPath() + "" ("" + resource.getResourceType().name() + "") "" + resource.getContent().length + "" bytes""); } "	0	0	1	0	0	0
"public void stampMessageAsDLCAndRemoveFromTacking(long messageID) throws AndesException { //remove actual object from memory if (log.isDebugEnabled()) { log.debug(""Removing all tracking of message id = "" + messageID); } MsgData trackingData = msgId2MsgData.remove(messageID); Slot slot = trackingData.slot; for (UUID channelID : trackingData.channelToNumOfDeliveries.keySet()) { releaseMessageDeliveryFromTracking(channelID, messageID); }  releaseMessageBufferingFromTracking(slot, messageID);  decrementMessageCountInSlotAndCheckToResend(slot); } "	0	0	1	0	1	0
"public static void main(String[] args) throws Exception {  ServletContextParameterMap contextParameters = ContextParametersRegistry.getInstance().getDefault();  OntologyManager ontologyManager = new OntologyManager(contextParameters.getId()); File ff = new File(Params.ONTOLOGY_DIR); File[] files = ff.listFiles(); if (files == null) { logger.error(""no ontology to import at "" + ff.getAbsolutePath()); return; }  for (File f : files) { if (f.getName().endsWith("".owl"") || f.getName().endsWith("".rdf"") || f.getName().endsWith("".rdfs"") || f.getName().endsWith("".n3"") || f.getName().endsWith("".ttl"") || f.getName().endsWith("".xml"")) { System.out.println(""Loading ontology file: "" + f.getAbsolutePath()); logger.info(""Loading ontology file: "" + f.getAbsolutePath()); ontologyManager.doImport(f, ""UTF-8""); } } ontologyManager.updateCache();   //		GraphBuilder_LOD_Pattern lodPatternGraphBuilder = new GraphBuilder_LOD_Pattern(ontologyManager, Params.PATTERNS_DIR);   //		HashMap<String, Integer> opFrequency = new HashMap<String, Integer>(); //		HashMap<String, Integer> dpFrequency = new HashMap<String, Integer>(); // //		String key; //		for (Pattern p : patternsSize2.values()) { //			for (LabeledLink l : p.getGraph().edgeSet()) { //				if (l.getTarget() instanceof InternalNode) { //					key = l.getSource().getUri() + l.getUri() + l.getTarget().getUri(); //					opFrequency.put(key, p.getFrequency()); //				} else { //					key = l.getSource().getUri() + l.getUri(); //					dpFrequency.put(key, p.getFrequency()); //				} //			} //		}  //		Integer frequency; //		double w; //		if (modelLearningGraph.getGraphBuilder().getGraph() != null) { //			for (DefaultLink l : modelLearningGraph.getGraphBuilder().getGraph().edgeSet()) { //				if (l.getTarget() instanceof InternalNode) { //					key = l.getSource().getUri() + l.getUri() + l.getTarget().getUri(); //					frequency = opFrequency.get(key); //				} else { //					key = l.getSource().getUri() + l.getUri(); //					frequency = dpFrequency.get(key); //				} //				if (frequency != null) { //					w = 0.0; //					modelLearningGraph.getGraphBuilder().changeLinkWeight(l, w); //				} else { //					logger.info(""this should not happen because all the ""); //				} //			} //		}    logger.info(""finished."");  } "	1	0	1	0	1	0
"public static Memory file(Environment env, TraceInfo trace, String path, int flags, Memory context) throws Throwable { Stream stream = null; try { stream = Stream.create(env, trace, path, ""r""); if (stream == null){ env.warning(trace, ""file(): failed to open stream""); return Memory.FALSE; } stream.setContext(env, context); Memory value = env.invokeMethod(trace, stream, ""readFully"");  byte[] bytes = value.getBinaryBytes(); ArrayMemory result = new ArrayMemory();  int prev = 0; boolean ignoreNewLines = (flags & FileConstants.FILE_IGNORE_NEW_LINES) == FileConstants.FILE_IGNORE_NEW_LINES; int i; for(i = 0; i < bytes.length; i++){ byte ch = bytes[i]; if (ch == '\n') { if (prev == i && (flags & FileConstants.FILE_SKIP_EMPTY_LINES) == FileConstants.FILE_SKIP_EMPTY_LINES){ prev += 1; continue; }  byte[] chunk = ignoreNewLines ? Arrays.copyOfRange(bytes, prev, i - 1) : Arrays.copyOfRange(bytes, prev, i); prev = i + 1;  result.add(new BinaryMemory(chunk)); } } if (prev != i){ byte[] chunk = Arrays.copyOfRange(bytes, prev, i); result.add(new BinaryMemory(chunk)); }  return result.toConstant(); } catch (WrapIOException e){ if (stream == null && (flags & FileConstants.FILE_USE_INCLUDE_PATH) == FileConstants.FILE_USE_INCLUDE_PATH){ path = env.findInIncludePaths(path); if (path != null) return file(env, trace, path, flags ^ FileConstants.FILE_USE_INCLUDE_PATH, context); } env.warning(trace, ""file(): "" + e.getMessage()); return Memory.FALSE; } finally { if (stream != null) stream.close(env); } } "	1	0	1	1	1	0
"private void calculate() { String expression = cbExpression.getSelectedItem().toString().trim(); boolean success; try { double res = evaluate(expression); TextHistory.getInstance().add(TextHistory.Type.CALCULATOR, expression, false);  cbExpression.addToHistory(expression);  long valLong = Math.round(res); boolean isDecimal = valLong == res; edtDec.setText(isDecimal ? Long.toString(valLong) : FORMAT_DEC.format(res)); edtHex.setText(Long.toHexString(valLong)); edtOct.setText(Long.toOctalString(valLong)); edtBin.setText(Long.toBinaryString(valLong)); edtExp.setText(formatExp(res)); success = true; } catch (Exception e) { e.printStackTrace(); edtDec.setText(""""); edtHex.setText(""""); edtOct.setText(""""); edtBin.setText(""""); edtExp.setText(""""); success = false; } edtDec.setEnabled(success); edtHex.setEnabled(success); edtOct.setEnabled(success); edtBin.setEnabled(success); edtOct.setEnabled(success); edtExp.setEnabled(success); btnDec.setEnabled(success); btnHex.setEnabled(success); btnOct.setEnabled(success); btnBin.setEnabled(success); btnOct.setEnabled(success); btnExp.setEnabled(success); lblError.setText(success ? """" : Translator.get(""calculator.error"")); } "	0	0	0	0	0	1
@Override public void initializeMainContentPane() { bulletinTableProvider.setRefreshViewHandler(new TableViewRefreshHandler(itemsTable)); initalizeColumns(); initalizeItemsTable(); initalizeButtons(); initializeStatusBar(); } 	1	0	0	0	1	0
private boolean isUnderCurve(double y, double funcY) { return y <= funcY; } 	0	0	0	1	0	0
private double evalFunc(double x, double y) { return (x * x) * y; } 	0	0	0	1	0	0
private void addClipPanel(AudioClip clip, TimeState timeState, int y, int height) { AudioClipPanel panel = new AudioClipPanel(clip, timeState); panel.setBounds(panel.getX(), y, panel.getWidth(), height); add(panel); clipPanelMap.put(clip, panel); } 	1	0	1	0	1	0
"@Test public void testErrorMessage_ExceptionWithoutMessage() { RuntimeException ex = new RuntimeException(); IStatus status = StandardProjectWizard.setErrorStatus(ex); Assert.assertEquals(""Failed to create project"", status.getMessage()); } "	0	0	1	0	1	0
@Override public boolean isViewFromObject(View view, Object object) {  return (view==(LinearLayout)object); } 	0	0	1	0	1	0
@Override protected void onPostExecute(ArrayList<Manga> result) { if (error != null) { Util.getInstance().showFastSnackBar(error, getView(),getContext()); } else { page++; if (result != null && result.size() != 0 && grid != null) { if (isAdded()) { if (mAdapter == null) { if (serverBase.getFilteredType() == ServerBase.FilteredType.VISUAL) { mAdapter = new MangasRecAdapter(result, getActivity(), MainActivity.darkTheme); } else { mAdapter = new MangasRecAdapterText(result, getActivity(), MainActivity.darkTheme); } mAdapter.setOnCreateContextMenuListener(ServerFilteredNavigationFragment.this); mAdapter.setLastItemListener(ServerFilteredNavigationFragment.this); mAdapter.setMangaClickListener(ServerFilteredNavigationFragment.this); grid.setAdapter(mAdapter); } else { mAdapter.addAll(result); } } } mStart = false; if (newTask) { mAdapter = null; page = 1; mStart = true; serverBase.hasMore = true; loadLastTask = (LoadLastTask) new LoadLastTask().execute(page); newTask = false; } } loading.setVisibility(ProgressBar.INVISIBLE); } 	0	0	1	0	1	0
protected static int amountOfHolidaysSince(List<Calendar> holidays, Calendar startCal) { int result = 0; for(Calendar cal : holidays) { if(cal.after(startCal)) { result++; } }  return result; } 	0	0	1	0	1	0
public static Set<String> findPathsByLeaseHolder(String holder) throws StorageException { HashSet<String> paths = new HashSet<String>(); LeaseDataAccess<Lease> lda = (LeaseDataAccess) HdfsStorageFactory .getDataAccess(LeaseDataAccess.class); Lease rcLease = lda.findByPKey(holder, holder.hashCode()); if (rcLease == null) { return paths; } LeasePathDataAccess pda = (LeasePathDataAccess) HdfsStorageFactory .getDataAccess(LeasePathDataAccess.class); Collection<LeasePath> rclPaths = pda.findByHolderId(rcLease.getHolderID()); for (LeasePath lp : rclPaths) { paths.add(lp.getPath()); } return paths; } 	1	0	1	0	1	0
"public String nombre_propietario(int cod_poligono, String cod_subpoligono, String cod_resedencia) throws Exception { String _result = """"; try { this.Conectar(); PreparedStatement ps = this.getCn().prepareStatement(""select CONCAT(nombre_propietario, ' ', apellido_propietario) propietario from mst_propietarios where cod_poligono = "" + cod_poligono + ""\n"" + ""and cod_sub_poligono = '"" + cod_subpoligono + ""'\n"" + ""and cod_residencia = "" + cod_resedencia + """"); ResultSet rset = ps.executeQuery(); if (rset.next()) { _result = rset.getString(1); } } catch (Exception e) { System.out.println(""No se puede obtener el nombre del propietario: "" + e.getMessage()); } finally { this.Cerrar(); } return _result; } "	0	0	1	1	0	0
public void createInitialStreams() { synchronized(streamsToRemainLive) { for (String streamNameAndAppInstance : streamsToRemainLive) { String[] streamNameAndAppInstanceArr = extractStreamNameAndAppInstance(streamNameAndAppInstance); String appInstanceName = streamNameAndAppInstanceArr[1]; String streamName = streamNameAndAppInstanceArr[0]; if (appInstance.getName().equals(appInstanceName)) { // this stream should remain live on this application instance. broadcastStream(streamName); }  } } } 	1	0	0	0	1	0
public void removeEndDate() { this.startDate = Optional.empty(); } 	0	0	1	0	1	0
"void setDayColumnNames(String[] dayColumnNames){ if(dayColumnNames == null || dayColumnNames.length != 7){ throw new IllegalArgumentException(""Column names cannot be null and must contain a value for each dao of the week""); } this.dayColumnNames = dayColumnNames; } "	0	0	0	1	0	0
public void setLocNumber (int locInt){ this.locIntValue = locInt; } 	0	0	1	0	1	0
"@EventHandler (ignoreCancelled = true) public void onItemPickup(InventoryPickupItemEvent event){ if(event.getInventory().getHolder() instanceof Player){ Player player = (Player) event.getInventory().getHolder(); EntityItem item = event.getItem();  long now = System.currentTimeMillis(); Long[] lastPickup = this.manager.getLastPickup(player);  if(lastPickup == null || (lastPickup[1] == item.getId() && now - lastPickup[0] > 2000) || lastPickup[1] != item.getId()){ Land land; if((land = this.provider.findLand(item)) != null && !land.getOption(""pickup"", false)){ if(!(land.hasPermission(player) || player.hasPermission(""economyland.admin.pickup""))){ event.setCancelled(true);  if(now - lastPickup[0] > 2000){ player.sendMessage(this.getMessage(""pickup-forbidden"", new Object[]{ land.getId(), land.getOwner() })); }  this.manager.setLastPickup(player, item); } } }else{ event.setCancelled(true); } } } "	1	0	0	1	1	0
@Override public void onItemRangeMoved(int fromPosition, int toPosition, int itemCount) { if (itemCount == 1) { rvJoiner.getAdapter().notifyItemMoved(getJoinedPosition(fromPosition), getJoinedPosition(toPosition)); } else if (itemCount > 1) { onChanged();//no notifyItemRangeMoved method by now } } 	0	0	0	0	0	1
"@Test public void should_not_propagate_deprecation_if_propagation_disabled() { Optional<Method> deprecatedMethod = getAndVerifyDeprecatedMethod(); underTest = new CoreMixinGenerator(null, DeprecationPolicy.WRAP_WITHOUT_DEPRECATING, CodeFormatter.getDefault()); assertThat(underTest.makeMethodSignature(deprecatedMethod.get(), imports, defaultNameSource, """")) .startsWith(""    default""); } "	0	0	0	0	0	1
"protected void addPersonnelSummaries(ProtocolSummary protocolSummary) { for (ProtocolPersonBase person : getProtocolPersons()) { PersonnelSummary personnelSummary = new PersonnelSummary(); personnelSummary.setPersonId(person.getPersonId()); personnelSummary.setName(person.getPersonName()); personnelSummary.setRoleName(person.getProtocolPersonRole().getDescription()); if (person.getAffiliationTypeCode() == null) { personnelSummary.setAffiliation(""""); } else { if (person.getAffiliationType() == null) { person.refreshReferenceObject(""affiliationType""); } personnelSummary.setAffiliation(person.getAffiliationType().getDescription()); } for (ProtocolUnitBase unit : person.getProtocolUnits()) { personnelSummary.addUnit(unit.getUnitNumber(), unit.getUnitName()); } protocolSummary.add(personnelSummary); } } "	0	0	1	0	1	0
"public final void setWriteTimeout(long timeout, TimeUnit unit) { if (timeout < 0) throw new IllegalArgumentException(""timeout < 0""); if (unit == null) throw new IllegalArgumentException(""unit == null""); long millis = unit.toMillis(timeout); if (millis > Integer.MAX_VALUE) throw new IllegalArgumentException(""Timeout too large.""); if (millis == 0 && timeout > 0) throw new IllegalArgumentException(""Timeout too small.""); writeTimeout = (int) millis; } "	0	0	1	1	0	0
public void release(){ if (listeners!=null){ for (ThreadLocalContextListener l:this.listeners){ l.released(this); } } } 	0	0	1	0	0	0
"public String getInitialRemoteAddr() { // https://code.google.com/p/sipservlets/issues/detail?id=255 includes both ACK Support without tx and packet // source ip address if(getMethod().equalsIgnoreCase(Request.ACK)) { if(logger.isTraceEnabled()) { logger.trace(""ACK request trying to return the Via address as we don't have a transaction""); } // replaced because wasn't giving correct info for ACK if(message == null || ((SIPRequest)message).getPeerPacketSourceAddress() == null) { return null; } return ((SIPRequest)message).getPeerPacketSourceAddress().getHostAddress(); } else if (message != null && message instanceof SIPRequest && ((SIPRequest)message).getRemoteAddress() != null ) { //https://github.com/Mobicents/jain-sip/issues/42 //take advantage of new message methods to extract addr from msg return ((SIPRequest)message).getPeerPacketSourceAddress().getHostAddress(); } else if(getTransaction() != null) { if(logger.isTraceEnabled()) { logger.trace(""transaction not null, returning packet source ip address""); } if(((SIPTransaction)getTransaction()).getPeerPacketSourceAddress() != null) { return ((SIPTransaction)getTransaction()).getPeerPacketSourceAddress().getHostAddress(); } else { return ((SIPTransaction)getTransaction()).getPeerAddress(); } } else { if(logger.isTraceEnabled()) { logger.trace(""transaction null, returning top via ip address""); } ViaHeader via = (ViaHeader) message.getHeader(ViaHeader.NAME); if(via == null || // https://github.com/Mobicents/sip-servlets/issues/47 // check if the via is container generated, if it is then it means // this is an outgoing request or response and thus should return null !sipFactoryImpl.getSipApplicationDispatcher().isViaHeaderExternal(via) ) { return null; } else { return via.getHost(); } } } "	0	0	1	0	0	0
public static int getPlaneIndex(Pixels pix, int t, int z, int c) { final int sizeT = OMEUtil.getValue(pix.getSizeT(), 0); final int sizeZ = OMEUtil.getValue(pix.getSizeZ(), 0); int sizeC = OMEUtil.getValue(pix.getSizeC(), 0); int adjC = c;  final Channel channel = pix.getChannel(0); if (channel != null) { final int spp = OMEUtil.getValue(channel.getSamplesPerPixel(), 0); // channel are packed in pixel so consider sizeC = 1 if ((spp != 0) && (spp == sizeC)) { sizeC = 1; adjC = 0; } } DimensionOrder dimOrder = pix.getDimensionOrder(); // use default dimension order if (dimOrder == null) dimOrder = DimensionOrder.XYCZT;  return FormatTools.getIndex(dimOrder.getValue(), sizeZ, sizeC, sizeT, pix.sizeOfPlaneList(), z, adjC, t); } 	1	0	1	1	1	0
public User getUser(long userId) { return userDao.getUser(userId); } 	0	0	1	0	1	0
"public ItemStack getWand(@Nullable Player owner) { Material wandMaterial = Material.matchMaterial((String) getConfig(""type"", ""STICK""));  if (wandMaterial == null || wandMaterial == Material.AIR) { wandMaterial = Material.STICK; HPS.PM.log(Level.WARNING, HPS.Localisation.getTranslation(""errWandCreationInvalidType"", (String) getConfig(""type"", ""STICK""))); }  ItemStack wand = new ItemStack(wandMaterial); ItemMeta meta = HPS.getServer().getItemFactory().getItemMeta(wandMaterial); WandCreationEvent wandCreationEvent = new WandCreationEvent(owner, null, true); //NBTTagCompound comp = new NBTTagCompound(TAG_NAME);  if ((Boolean) getConfig(""lore.enabled"", true)) { Lore lore = generateLore(); if ((Boolean) getConfig(""lore.show-current-spell"", true)) { Spell spell = HPS.SpellManager.getCurrentSpell(owner); lore.setCurrentSpell(spell == null ? ""None"" : spell.getName()); } wandCreationEvent.setLore(lore); }  if ((Boolean) getConfig(""enchantment-effect"", true)) { wandCreationEvent.setEnchantmentEffect(true); }  // Call creation event HPS.getServer().getPluginManager().callEvent(wandCreationEvent);  if (wandCreationEvent.hasLore()) { meta.setLore(wandCreationEvent.getLore().toStringList()); }  meta.setDisplayName(ChatColor.RESET + ChatColor.translateAlternateColorCodes('&', (String) getConfig(""lore.name"", ""Wand""))); wand.setItemMeta(meta);  if (wandCreationEvent.hasEnchantmentEffect()) { try { wand = MiscUtilities.makeGlow(wand); } catch (Exception e) { HPS.PM.debug(HPS.Localisation.getTranslation(""errEnchantmentEffect"")); HPS.PM.debug(e); } }  return wand; } "	0	0	1	0	1	0
"public void boot() { String url = getProperty(""database.url""); String username = getProperty(""database.username""); String password = getProperty(""database.password""); String databasePool = getProperty(""database.poolName"");  SQLDialect dialect = null; try { dialect = SQLDialect.valueOf(getProperty(""database.dialect"").trim()); } catch (IllegalArgumentException e) { logger.error(""database.dialect not set""); System.exit(-1); } DatabaseManager databaseManager = null; try { databaseManager = new DatabaseManager(username, password, url, databasePool, dialect, testing); } catch (NamingException | SQLException e) { if (testing) { throw new RuntimeException(e); } else { logger.error(""unable to establish database connection"", e); System.exit(-1); } }  if (!testing) { databaseManager.initDatabase(); } CalibrationsOperations calibrationsOperations = new CalibrationsOperations(databaseManager.getContext()); ExperimentOperations experimentOperations = new ExperimentOperations(databaseManager.getContext()); PlatformOperations platformOperations = new PlatformOperations(databaseManager.getContext()); TaskOperations taskOperations = new TaskOperations(databaseManager.getContext()); WorkerOperations workerOperations = new WorkerOperations(databaseManager.getContext());  Communication communication = new Communication( getProperty(""os.url""), getProperty(""os.username""), getProperty(""os.password"") ); Queries queries = new Queries(calibrationsOperations, experimentOperations, platformOperations, communication, taskOperations, workerOperations, testing);  String portRaw = getProperty(""router.port"");  int port = portRaw != null ? Integer.parseInt(portRaw) : 4567;  logger.debug(""workerservice is using port {}"", port);  Commands commands = new Commands(communication, experimentOperations); Router router = new Router(queries, commands, port); if (!testing) { router.init(); } logger.debug(""router initialized""); } "	0	0	1	0	0	0
"public void doOrgasm(Combat c, Character opponent, BodyPart selfPart, BodyPart opponentPart) { orgasmed = true; c.write(this, ""<br>""); if (c.getStance().inserted(this) && !has(Trait.strapped)) { c.write(this, Global.format(""<b>{self:SUBJECT-ACTION:tense|tenses} up as {self:possessive} hips wildly buck against {other:direct-object}. In no time, {self:possessive} hot seed spills into {other:possessive} pulsing hole.</b>"", this, opponent)); if (c.getStance().en == Stance.anal) { opponent.body.receiveCum(c, this, opponent.body.getRandom(""ass"")); } else { opponent.body.receiveCum(c, this, opponent.body.getRandom(""pussy"")); } } else if (selfPart != null && selfPart.isType(""cock"") && opponentPart != null && !opponentPart.isType(""none"")) { c.write(this, Global.format(""<b>{self:NAME-POSSESSIVE} back arches as thick ropes of jizz fire from {self:possessive} dick and land on {other:name-possessive} "" + opponentPart.describe(opponent) + "".</b>"", this, opponent)); opponent.body.receiveCum(c, opponent, opponentPart); } else { c.write(this, Global.format(""<b>{self:SUBJECT-ACTION:shudder|shudders} as {other:subject-action:bring|brings} {self:direct-object} to a toe-curling climax.</b>"", this, opponent)); } c.write(this, ""<b>"" + orgasmLiner(c) + ""</b>""); c.write(opponent, opponent.makeOrgasmLiner(c)); int overflow = arousal.getOverflow(); c.write(this, String.format(""<br><font color='rgb(255,50,200)'>%s<font color='white'> arousal overflow"", overflow));  if (selfPart != null && opponentPart != null) { selfPart.onOrgasm(c, this, opponent, opponentPart, true); opponentPart.onOrgasm(c, opponent, this, selfPart, false); } else if (Global.isDebugOn(DebugFlags.DEBUG_SCENE)) { System.out.printf(""Could not process %s's orgasm against %s: self=%s, opp=%s, pos=%s"", this, opponent, selfPart, opponentPart, c.getStance()); }  if (opponent.has(Trait.erophage)) { c.write(Global.capitalizeFirstLetter(""<br><b>""+opponent.subjectAction(""flush"", ""flushes"") + "" as the feedback from "" + nameOrPossessivePronoun() + "" orgasm feeds "" + opponent.possessivePronoun() + "" divine power.</b>"")); opponent.add(c, new Alluring(opponent, 5)); opponent.buildMojo(c, 100); if (c.getStance().inserted(this) && opponent.has(Trait.divinity)) { opponent.add(c, new DivineCharge(opponent, 1)); } }  getArousal().empty(); if (has(Trait.insatiable)) { arousal.restore((int) (arousal.max()*.2)); } if (is(Stsflag.feral)) { arousal.restore(arousal.max() / 2); } float extra = 25.0f * overflow / (arousal.max()/2.0f);  loseWillpower(c, getOrgasmWillpowerLoss(), Math.round(extra), true, """"); orgasms += 1; } "	0	1	1	0	0	0
public Object load(String id) throws IOException { StaticRecord record = configuration.getStaticRecord(id); S3Object s3Object = fetchObject( record.getBucketAccount(), record.getBucketRegion(), record.getBucketName(), record.getId() );  switch (record.getType()) { case list: return objectMapper.readValue(s3Object.getObjectContent(), List.class); case object: return objectMapper.readValue(s3Object.getObjectContent(), Map.class); }  return IOUtils.toString(s3Object.getObjectContent()); } 	0	0	0	0	0	1
"public static MonitorCfg load(String confPath) {  String cfgPath = confPath + ""/lts-monitor.cfg""; String log4jPath = confPath + ""/log4j.properties"";  Properties conf = new Properties(); File file = new File(cfgPath); InputStream is = null; try { is = new FileInputStream(file); } catch (FileNotFoundException e) { throw new CfgException(""can not find "" + cfgPath); } try { conf.load(is); } catch (IOException e) { throw new CfgException(""Read "" + cfgPath + "" error."", e); }  MonitorCfg cfg = new MonitorCfg(); try { String registryAddress = conf.getProperty(""registryAddress""); Assert.hasText(registryAddress, ""registryAddress can not be null.""); cfg.setRegistryAddress(registryAddress);  String clusterName = conf.getProperty(""clusterName""); Assert.hasText(clusterName, ""clusterName can not be null.""); cfg.setClusterName(clusterName);  String bindIp = conf.getProperty(""bindIp""); if (StringUtils.isNotEmpty(bindIp)) { cfg.setBindIp(bindIp); }  String identity = conf.getProperty(""identity""); if (StringUtils.isNotEmpty(identity)) { cfg.setBindIp(identity); }  Map<String, String> configs = new HashMap<String, String>(); for (Map.Entry<Object, Object> entry : conf.entrySet()) { String key = entry.getKey().toString(); if (key.startsWith(""configs."")) { String value = entry.getValue() == null ? null : entry.getValue().toString(); configs.put(key.replace(""configs."", """"), value); } }  cfg.setConfigs(configs); } catch (Exception e) { throw new CfgException(e); }  if (FileUtils.exist(log4jPath)) { //  log4j 配置文件路径 PropertyConfigurator.configure(log4jPath); }  return cfg; } "	0	0	1	0	1	0
"@ValidName(message = ""must contain names of existing transmitterGroups"", fieldName = ""transmitterGroupNames"", constraintName = ""ValidTransmitterGroupNames"") public Collection<TransmitterGroup> getTransmitterGroups() throws Exception { if (transmitterGroupNames == null) { return null; }  if (state == null) { throw new Exception(""StateNotSetException""); }  ConcurrentMap<String, TransmitterGroup> groups = state.getTransmitterGroups(); ArrayList<TransmitterGroup> result = new ArrayList<>(); for (String transmitterGroup : transmitterGroupNames) { TransmitterGroup g = groups.get(transmitterGroup.toLowerCase()); if (g != null) { result.add(g); } } if (result.size() == result.size()) { return result; } else { return null; } } "	0	0	0	1	1	0
private Errors validateClasspage(Classpage classpage) throws Exception { final Errors errors = new BindException(classpage, CLASSPAGE); if (classpage != null) { rejectIfNullOrEmpty(errors, classpage.getTitle(), TITLE, GL0006, generateErrorMessage(GL0006, TITLE)); } return errors; } 	0	0	0	1	0	0
"private void writeChartData(JFreeChart chart, BaseChartDefinition definition, File saveDirectory) { File csvFile = new File(saveDirectory, definition.getShortName().replace("" "", ""_"") + "".csv""); FileWriter writer = null;  Plot plot = chart.getPlot(); DataTupleDataset dataset = null;  if (plot instanceof CategoryPlot) { CategoryPlot cPlot = (CategoryPlot) plot; dataset = (DataTupleDataset) cPlot.getDataset(); } else if (plot instanceof XYPlot) { XYPlot xyPlot = (XYPlot) plot; dataset = (DataTupleDataset) xyPlot.getDataset(); } else { System.err.println(""unknown plot type "" + plot.getClass() + "" for chart "" + chart.getTitle()); }  if (dataset != null) { try { writer = new FileWriter(csvFile);  CSVWriter.write(dataset, writer); } catch (IOException ioe) { System.err.println(""could not output raw data to "" + csvFile.getName()); } finally { if (writer != null) { try { writer.close(); } catch (IOException ioe) { // ignore } } } } } "	0	0	1	0	1	0
@Override public boolean onTarget() { return !justReset && super.onTarget(); } 	1	0	0	1	1	0
@Override public void onAction(String actionString, boolean ongoing, float tpf) { if (ongoing) { switch (actionString) { case actionStringEdit: InputMode im = InputMode.getEnabledMode(); bindScreen.activate(im); return; case actionStringToggle: run.toggleHud(); return; } }  super.onAction(actionString, ongoing, tpf); } 	0	0	1	0	1	0
private Properties parseAttributes(Node node) { Properties attributes = new Properties(); NamedNodeMap nnm = node.getAttributes(); for (int i = 0; i < nnm.getLength(); i++) { Node attribute = nnm.item(i); String value = parsePropertyTokens(attribute.getNodeValue()); attributes.put(attribute.getNodeName(), value); }  return attributes; } 	0	0	0	1	0	0
public Item pop() throws EmptyStackException { if (array[index] == null) { throw new EmptyStackException(); } Item item = array[index]; array[index] = null; if (index == 0) { index = array.length - 1; } else { index = index - 1; } return item; } 	1	0	1	1	1	0
"protected String keyPath(K k) { Objects.requireNonNull(k, ""key should not be null.""); return mapPath + ""/"" + k.toString(); } "	0	0	1	0	0	0
public void addJS(String id) { addJS(id, null, null); } 	1	0	1	0	1	0
"@RequestMapping(value = ""/reenviarTrabalho"", method = RequestMethod.POST) public String reenviarTrabalhoForm(@RequestParam(""trabalhoId"") String trabalhoId, @RequestParam(""eventoId"") String eventoId, @RequestParam(value=""file"",required = true) MultipartFile file, RedirectAttributes redirect){ Long idEvento = Long.parseLong(eventoId); Long idTrabalho = Long.parseLong(trabalhoId); try{ if(trabalhoService.existeTrabalho(idTrabalho) && eventoService.existeEvento(idEvento)){  Evento evento = eventoService.buscarEventoPorId(Long.parseLong(eventoId)); Trabalho trabalho = trabalhoService.getTrabalhoById(idTrabalho); Submissao submissao = configuraSubmissao(submissaoService.getSubmissaoByTrabalho(trabalho), evento);  if(validarArquivo(file)){ if(submissao.getTipoSubmissao() != null){ return adicionarTrabalho(trabalho, evento, submissao, file, redirect); }else{ redirect.addFlashAttribute(""FORA_DA_DATA_DE_SUBMISSAO"", messageService.getMessage(FORA_DA_DATA_DE_SUBMISSAO)); return ""redirect:/autor/listarTrabalhos/"" + idEvento; } }else{ redirect.addFlashAttribute(""arquivoInvalido"", messageService.getMessage(FORMATO_ARQUIVO_INVALIDO)); return ""redirect:/autor/listarTrabalhos/"" + idEvento; }  } redirect.addAttribute(""ERRO_TRABALHO_EVENTO"", messageService.getMessage(ERRO_TRABALHO_EVENTO)); return ""redirect:/autor/listarTrabalhos/"" + idEvento; }catch(NumberFormatException e){ redirect.addAttribute(""ERRO_REENVIAR"", messageService.getMessage(ERRO_REENVIAR)); return ""redirect:/autor/listarTrabalhos/"" + idEvento; } } "	0	0	0	0	0	1
"public GroupingBuilder addEdgeAggregator(PropertyValueAggregator aggregator) { Objects.requireNonNull(aggregator, ""Aggregator must not be null""); getOrCreateDefaultEdgeLabelGroup().addAggregator(aggregator); return this; } "	0	0	1	0	1	0
"@Test public void shouldSetOnlyParentEnrollmentProviderIdIfThereAreNoDuplicatedEnrollments() { String campaignName = ""campaign""; String messageKey = ""message""; String externalId = ""1"";  String subjectPhoneNumber = ""123""; String votoMessageId = ""456""; String votoLanguageId = ""789"";  String subscribers = ""[{\""phone\"":\""123\"",\""language\"":\""789\""}]""; String subjectIds = ""1"";  Subject subject = new Subject(); subject.setSubjectId(externalId); subject.setPhoneNumber(subjectPhoneNumber); subject.setLanguage(Language.English); when(subjectService.findSubjectBySubjectId(externalId)).thenReturn(subject);  VotoLanguage votoLanguage = new VotoLanguage(); votoLanguage.setLanguage(Language.English); votoLanguage.setVotoId(votoLanguageId); when(votoLanguageDataService.findVotoLanguageByLanguage(subject.getLanguage())).thenReturn(votoLanguage);  VotoMessage votoMessage = new VotoMessage(); votoMessage.setMessageKey(messageKey); votoMessage.setVotoIvrId(votoMessageId); when(votoMessageDataService.findVotoMessageByMessageKey(messageKey)).thenReturn(votoMessage);  Enrollment enrollment = new Enrollment(externalId, campaignName); when(enrollmentDataService.findEnrollmentBySubjectIdAndCampaignName(externalId, campaignName)).thenReturn(enrollment);  Config config = new Config(); config.setSendIvrCalls(true); config.setIvrSettingsName(""Voto""); config.setApiKey(""apiKey""); config.setStatusCallbackUrl(""url""); config.setSendSmsIfVoiceFails(true); config.setDetectVoiceMail(true); config.setRetryAttempts(3); config.setRetryDelay(15); when(configService.getConfig()).thenReturn(config);  Map<String, String> callParams = new HashMap<>(); callParams.put(EbodacConstants.API_KEY, config.getApiKey()); callParams.put(EbodacConstants.MESSAGE_ID, votoMessageId); callParams.put(EbodacConstants.STATUS_CALLBACK_URL, config.getStatusCallbackUrl()); callParams.put(EbodacConstants.SUBSCRIBERS, subscribers); callParams.put(EbodacConstants.SEND_SMS_IF_VOICE_FAILS, ""1""); callParams.put(EbodacConstants.DETECT_VOICEMAIL, ""1""); callParams.put(EbodacConstants.RETRY_ATTEMPTS_SHORT, config.getRetryAttempts().toString()); callParams.put(EbodacConstants.RETRY_DELAY_SHORT, config.getRetryDelay().toString()); callParams.put(EbodacConstants.RETRY_ATTEMPTS_LONG, EbodacConstants.RETRY_ATTEMPTS_LONG_DEFAULT); callParams.put(EbodacConstants.SUBJECT_IDS, subjectIds); callParams.put(EbodacConstants.SUBJECT_PHONE_NUMBER, subjectPhoneNumber);  ivrCallHelper.initiateIvrCall(campaignName, messageKey, externalId);  verify(outboundCallService, times(1)).initiateCall(config.getIvrSettingsName(), callParams); } "	0	0	0	0	0	1
@Test public void Generic3BitCrcTest2() throws Exception {  Integer buffer[] = {0x01, 0x02, 0x03};  CrcGeneric crcGeneric = new CrcGeneric( 3, (long)0x3, (long)0x0, (long)0x0, false, false);  for(Integer dataByte : buffer) { crcGeneric.updatev2(dataByte); } Assert.assertEquals(0x5, crcGeneric.getValue());  } 	0	0	1	0	1	0
"private void controlLoop() { try { while (running) { boolean updatedAssignment = false; if (topics.size() == 0) { commitPendingAndWaitForTopics(); } if (topicsChanged) { commitAnyPendingOffsetsForRemovedTopics(); kafkaConsumer.subscribe(topics, new RebalanceListener()); updatedAssignment = true; } ConsumerRecords<?, ?> records = flowControlledPoll(); //Must be done before we send records to the acknowledgmentHandler if (updatedAssignment) { updateAssignment(); } addRecordsToStream(records); Map<TopicPartition, OffsetAndMetadata> offsetData = this.acknowlegmentHandler.flushAcknowledged(); commitOffsets(offsetData); } } catch (WakeupException e) { log.info(""Wakeup, controlLoop exiting""); } catch (InterruptedException e) { log.info(""Interrupted, controlLoop exiting""); } catch (Throwable t) { log.error(""controlLoop error, exiting"", t); throw t; } finally { running = false; try { Map<TopicPartition, OffsetAndMetadata> offsetData = this.acknowlegmentHandler.removePartitions(kafkaConsumer.assignment()); try { if (failedOffset != null) { log.debug(""failedOffset of size: "" + failedOffset.size()); for (Map.Entry<TopicPartition, OffsetAndMetadata> entry : failedOffset.entrySet()) { offsetData.merge(entry.getKey(), entry.getValue(), (oldO, newO) -> { if (oldO == null) { return newO; } if (newO == null) { return oldO; } return newO.offset() > oldO.offset() ? newO : oldO; }); } }  log.info(""closing offset size committed: "" + offsetData.size()); try { //if we got here through running = false or interrupt instead of a wakeup, we need //to retry our commit as the first attempt will throw a WakeupException kafkaConsumer.commitSync(offsetData); } catch (WakeupException wakeup) { log.info(""controlLoop wakeup on closing commitSync, retrying""); kafkaConsumer.commitSync(offsetData); } } catch (Throwable e) { log.error(""controlLoop error commiting sync"", e); } } catch (InterruptedException e) { log.info(""controlLoop failed to commit offsets on shutdown"", e); } //the kafkaConsumer must be closed in the poll thread log.info(""controlLoop closing kafkaConsumer""); kafkaConsumer.close(); } } "	0	0	0	1	0	0
"private OperationEventType putTheFile(PutFileClient client, File packageFile, String collectionID) throws IOException, URISyntaxException { FileExchange fileexchange = ProtocolComponentFactory.getInstance().getFileExchange(this.bitmagSettings); BlockingPutFileClient bpfc = new BlockingPutFileClient(client); URL url = fileexchange.uploadToServer(packageFile); String fileId = packageFile.getName(); ChecksumSpecTYPE csSpec = ChecksumUtils.getDefault(this.bitmagSettings); ChecksumDataForFileTYPE validationChecksum = BitrepositoryUtils.getValidationChecksum( packageFile,csSpec);  ChecksumSpecTYPE requestChecksum = null; String putFileMessage = ""Putting the file '"" + packageFile + ""' with the file id '"" + fileId + ""' from Netarchivesuite"";  NetarchivesuiteBlockingEventHandler putFileEventHandler = new NetarchivesuiteBlockingEventHandler(collectionID, maxNumberOfFailingPillars); try { bpfc.putFile(collectionID, url, fileId, packageFile.length(), validationChecksum, requestChecksum, putFileEventHandler, putFileMessage); } catch (OperationFailedException e) { logger.log(Level.WARNING, ""The putFile Operation was not a complete success ("" + putFileMessage + "")."" + "" Checksum whether we accept anyway."", e); if(putFileEventHandler.hasFailed()) { return OperationEventType.FAILED; } else { return OperationEventType.COMPLETE; } } finally { // delete the uploaded file from server fileexchange.deleteFromServer(url); } logger.info(""The putFile Operation succeeded ("" + putFileMessage + "")""); return OperationEventType.COMPLETE; } "	0	0	1	0	0	0
"@SuppressWarnings(""unchecked"") // <editor-fold defaultstate=""collapsed"" desc=""Generated Code"">//GEN-BEGIN:initComponents private void initComponents() {  pnlInfo = new javax.swing.JPanel(); pnlBoard = new javax.swing.JPanel();  setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); addComponentListener(new java.awt.event.ComponentAdapter() { public void componentMoved(java.awt.event.ComponentEvent evt) { formComponentMoved(evt); } });  pnlInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder());  javax.swing.GroupLayout pnlInfoLayout = new javax.swing.GroupLayout(pnlInfo); pnlInfo.setLayout(pnlInfoLayout); pnlInfoLayout.setHorizontalGroup( pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0, 146, Short.MAX_VALUE) ); pnlInfoLayout.setVerticalGroup( pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0, 552, Short.MAX_VALUE) );  pnlBoard.setBackground(new java.awt.Color(204, 255, 204)); pnlBoard.setBorder(javax.swing.BorderFactory.createEtchedBorder());  javax.swing.GroupLayout pnlBoardLayout = new javax.swing.GroupLayout(pnlBoard); pnlBoard.setLayout(pnlBoardLayout); pnlBoardLayout.setHorizontalGroup( pnlBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0, 568, Short.MAX_VALUE) ); pnlBoardLayout.setVerticalGroup( pnlBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0, 0, Short.MAX_VALUE) );  javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane()); getContentPane().setLayout(layout); layout.setHorizontalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup() .addComponent(pnlInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED) .addComponent(pnlBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) ); layout.setVerticalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(pnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) .addComponent(pnlBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) );  pack(); }// </editor-fold>//GEN-END:initComponents "	0	0	1	0	1	0
"private String getSqlQuery(boolean detail, BaseBillId billId, UpdateType updateType, BillUpdateField fieldFilter, SortOrder sortOrder, LimitOffset limOff) { String dateColumn; // The UpdateType dictates which date columns we used to search by OrderBy orderBy; if (updateType.equals(UpdateType.PROCESSED_DATE)) { dateColumn = ""log.action_date_time""; orderBy = new OrderBy(""last_processed_date_time"", sortOrder); } else if (updateType.equals(UpdateType.PUBLISHED_DATE)) { dateColumn = ""sobi.published_date_time""; orderBy = new OrderBy(""last_published_date_time"", sortOrder, ""last_processed_date_time"", sortOrder); } else { throw new IllegalArgumentException(""Bill Updates cannot provide updates of type: {}"" + updateType); } String sqlQuery; if (billId != null) { sqlQuery = SELECT_UPDATE_DIGESTS_FOR_SPECIFIC_BILL.getSql(schema(), orderBy, limOff); } else { sqlQuery = (detail) ? SELECT_BILL_UPDATE_DIGESTS.getSql(schema(), orderBy, limOff) : SELECT_BILL_UPDATE_TOKENS.getSql(schema(), orderBy, limOff); } sqlQuery = queryReplace(sqlQuery, ""dateColumn"", dateColumn); sqlQuery = queryReplace(sqlQuery, ""updateFieldFilter"", getUpdateFieldFilter(fieldFilter)); return sqlQuery; } "	0	0	1	1	1	0
@Override public void onSuccess(String response) { PortletWebViewActivity_.intent(activity) .flags(Intent.FLAG_ACTIVITY_CLEAR_TASK) .url(url) .portletName(portletName) .start(); } 	0	0	1	0	0	0
protected void resetCamera() { camera.SetViewUp(0, -1, 0); renderer.ResetCamera(); camera.Elevation(180); renderer.ResetCameraClippingRange(); } 	0	0	1	0	1	0
@Override public ResourceServerStore getResourceServerStore() { return new MongoResourceServerStore(this.invocationContext, this.authorizationProvider); } 	0	0	1	0	0	0
@Override public ScopeStore getScopeStore() { return new MongoScopeStore(this.invocationContext, this.authorizationProvider); } 	0	0	1	0	0	0
"public void printNameAndPrice() { System.out.println(name_ + "" - "" + price_); } "	0	0	1	0	1	0
"public static void main(String[] args) throws FileNotFoundException { BitReader reader = new BinStringFileBitReader(new File(args[0])); int block = 0; StringBuffer strBlock = new StringBuffer();  while(true) { boolean bit = false; try { bit = reader.getBit(); } catch(IOException e) { return; }  block = (block << 1) & 0x3FFFFFF; if(bit) block |= 1; strBlock.append(bit ? '1' : '0'); int synd = RDS.calcSyndrome(block);  for(int i=0; i<4; i++) { for(int j=0; j<2; j++) { if(synd == RDS.syndromes[i][j]) { if(strBlock.length() > 26) { System.out.print(strBlock.substring(0, strBlock.length() - 26 - 1)); System.out.print(strBlock.substring(strBlock.length() - 26)); } else { System.out.print(strBlock); } strBlock.setLength(0);  System.out.print("" "" + (char)('A' + i)); System.out.println((j==1) ? ""'"" : """"); break; } } } } } "	0	0	1	0	0	0
"private boolean isGetterMethod(ExecutableElement method) { String methodName = method.getSimpleName().toString();  boolean isNonBooleanGetterName = methodName.startsWith( ""get"" ) && methodName.length() > 3 && method.getReturnType().getKind() != TypeKind.VOID;  boolean isBooleanGetterName = methodName.startsWith( ""is"" ) && methodName.length() > 2; boolean returnTypeIsBoolean = method.getReturnType().getKind() == TypeKind.BOOLEAN || ""java.lang.Boolean"".equals( getQualifiedName( method.getReturnType() ) );  return isNonBooleanGetterName || ( isBooleanGetterName && returnTypeIsBoolean ); } "	0	0	0	1	0	0
"@Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) { //do not apply to the redirected requests: it's unnecessary and may cause error pages to work incorrectly if (!modelAndView.getViewName().contains(""redirect:"")) { //todo: revise the common information we actualy need here int newPmCount = service.currentUserNewPmCount(); request.setAttribute(""newPmCount"", newPmCount); User user = securityService.getCurrentUser();  String encodedUserName = user != null ? user.getEncodedUsername() : null; request.setAttribute(""encodedUserName"", encodedUserName); } } "	0	0	1	0	1	0
@Override public boolean equals(Object o) { if (this == o) { return true; } if (!o.getClass().isAssignableFrom(this.getClass())) { return false; } JmesPathNode other = (JmesPathNode) o; return internalEquals(o) && (source() == other.source() || (source() != null && other.source() != null && source().equals(other.source()))); } 	0	0	1	0	1	0
"public static String getAssetsPath() { if (Cocos2dxHelper.sAssetsPath == """") {  String pathToOBB = Environment.getExternalStorageDirectory().getAbsolutePath() + ""/Android/obb/"" + Cocos2dxHelper.sPackageName;  // Listing all files inside the folder (pathToOBB) where OBB files are expected to be found. String[] fileNames = new File(pathToOBB).list(new FilenameFilter() { // Using filter to pick up only main OBB file name. public boolean accept(File dir, String name) { return name.startsWith(""main."") && name.endsWith("".obb"");  // It's possible to filter only by extension here to get path to patch OBB file also. } });  String fullPathToOBB = """"; if (fileNames != null && fileNames.length > 0)  // If there is at least 1 element inside the array with OBB file names, then we may think fileNames[0] will have desired main OBB file name. fullPathToOBB = pathToOBB + ""/"" + fileNames[0];  // Composing full file name for main OBB file.  File obbFile = new File(fullPathToOBB); if (obbFile.exists()) Cocos2dxHelper.sAssetsPath = fullPathToOBB; else Cocos2dxHelper.sAssetsPath = Cocos2dxHelper.sActivity.getApplicationInfo().sourceDir; }  return Cocos2dxHelper.sAssetsPath; } "	0	0	1	0	1	0
@Override public boolean contains(int x, int y) { return partitionObjects[partitions[x + y * width]].partitionId == partition; } 	1	0	1	1	1	0
public static void consolidate(TimeSeries timeSeries, int step, long from, long to) { List<Double> consolidated = new ArrayList<>(); List<Double> buffer = new ArrayList<>();  int index = 0; while (timeSeries.getFrom() + index * timeSeries.getStep() <= to) { buffer.add(timeSeries.getValues()[index]);  if ((timeSeries.getFrom() + index * timeSeries.getStep()) % step == 0) { consolidated.add(CollectionUtils.average(buffer)); buffer.clear(); }  index++; }  timeSeries.setFrom(from); timeSeries.setTo(to); timeSeries.setStep(step); timeSeries.setValues(consolidated.toArray(new Double[1])); } 	0	0	0	1	0	0
@Override public String toString() { return recipient.toString(); } 	0	0	1	0	1	0
"public HashMap<String, String> loginOptionsHandler(ArrayList<String> args) throws ParseException, CommandLineOptionException {  Options options = new Options(); options.addOption(Option.builder(""H"").required(false).longOpt(""help"").desc(""Shows Help"").build());  options.addOption(Option.builder(""F"").required(false).hasArg().longOpt(""filepath"").argName(""CREDENTIALS_FILEPATH"") .desc(""Properties file containing username and password"").build()); options.addOption(Option.builder(""C"").required(false).hasArg(false).longOpt(""console"") .desc(""Accepts username and password from the terminal"").build()); options.addOption(Option.builder(""S"").required(false).hasArg().longOpt(""swamp-host"").argName(""SWAMP_HOST"") .desc(""URL for SWAMP host: default is "" + SwampApiWrapper.SWAMP_HOST_NAME).build());  String[] cmd_args = (String[]) args.toArray(new String[0]); CommandLine parsed_options = new DefaultParser().parse(options, cmd_args); if (args.size() == 0 || parsed_options.hasOption(""H"")) { HelpFormatter formatter = new HelpFormatter(); formatter.printHelp(""Command Line Parameters"", options); return null; }else if (parsed_options.hasOption(""F"")) { HashMap<String, String> cred_map = getUserCredentials(parsed_options.getOptionValue(""F"")); if ((cred_map.get(""username"") != null ) && (cred_map.get(""password"") != null)){ cred_map.put(""swamp-host"", parsed_options.getOptionValue(""S"", SwampApiWrapper.SWAMP_HOST_NAME)); return cred_map; }else { throw new CommandLineOptionException(String.format(""No username or password in the file: %s\n"", parsed_options.getOptionValue(""F""))); } }else { System.out.print(""USERNAME:""); String username = System.console().readLine(); System.out.print(""PASSWORD:""); String password = new String(System.console().readPassword()); HashMap<String, String> cred_map = new HashMap<String, String>(); cred_map.put(""username"", username); cred_map.put(""password"", password); cred_map.put(""swamp-host"", parsed_options.getOptionValue(""S"", ""PRODUCTION"")); return cred_map; } } "	0	0	0	0	0	1
@Provides @PerUser public SelectorPresenter providesSelectorPresenter( @Nullable UserOrganisationUnitInteractor userOrganisationUnitInteractor, @Nullable UserProgramInteractor userProgramInteractor, @Nullable ProgramStageInteractor programStageInteractor, @Nullable ProgramStageDataElementInteractor programStageDataElementInteractor, @Nullable EventInteractor eventInteractor, SessionPreferences sessionPreferences, SyncDateWrapper syncDateWrapper, SyncWrapper syncWrapper, Logger logger) { return new SelectorPresenterImpl( userOrganisationUnitInteractor, userProgramInteractor, programStageInteractor, programStageDataElementInteractor, eventInteractor, sessionPreferences, syncDateWrapper, syncWrapper, logger); } 	0	0	1	1	0	0
"@Override public Page update(Page page) throws TechnicalException { if(page == null){ throw new IllegalArgumentException(""Page must not be null""); }  if(!findById(page.getId()).isPresent()){ throw new IllegalArgumentException(String.format(""No page found with id [%s]"", page.getId())); }  LOGGER.debug(""Update Page {}"", page.getName());  String sourceType = null; String configuration = null; String tryItURL = null; Boolean tryIt = null; String pageType = null;  final PageSource source = page.getSource(); if (source != null) { sourceType = source.getType(); configuration = source.getConfiguration(); }  final PageType type = page.getType(); if (type != null) { pageType = type.toString(); }  final PageConfiguration pageConfiguration = page.getConfiguration(); if (pageConfiguration != null) { tryItURL = pageConfiguration.getTryItURL(); tryIt = pageConfiguration.isTryIt(); }  final Statement update = QueryBuilder.update(PAGES_TABLE) .with(set(""name"", page.getName())) .and(set(""type"", pageType)) .and(set(""content"", page.getContent())) .and(set(""last_contributor"", page.getLastContributor())) .and(set(""page_order"", page.getOrder())) .and(set(""published"", page.isPublished())) .and(set(""source_type"", sourceType)) .and(set(""source_configuration"", configuration)) .and(set(""configuration_tryiturl"", tryItURL)) .and(set(""configuration_tryit"", tryIt)) .and(set(""api"", page.getApi())) .and(set(""updated_at"", page.getUpdatedAt())) .and(set(""homepage"", page.isHomepage())) .where(eq(""id"", page.getId()));  session.execute(update);  return findById(page.getId()).orElse(null); } "	0	0	0	0	0	1
"private static String getKeyUsingJNDI(String serviceName) { if (!isClassAvailable(""javax.naming.Context"")) { log.info(""JNDI string lookups is not available.""); return null; } try { Context context = new InitialContext(); String lookupName = ""watson-developer-cloud/"" + serviceName + ""/credentials""; return (String) context.lookup(lookupName); } catch (NamingException e) { return null; } } "	0	0	1	1	0	0
"private final DbTaskRunner initTransferRequest(TransferRequestJsonPacket request) { Timestamp ttimestart = null; Date date = request.getStart(); if (date != null) { ttimestart = new Timestamp(date.getTime()); } else if (request.getDelay() > 0) { if (request.isAdditionalDelay()) { ttimestart = new Timestamp(System.currentTimeMillis() + request.getDelay()); } else { ttimestart = new Timestamp(request.getDelay()); } } DbRule rule; try { rule = new DbRule(DbConstant.admin.getSession(), request.getRulename()); } catch (WaarpDatabaseException e) { logger.warn(""Cannot get Rule: "" + request.getRulename(), e); return null; } int mode = rule.getMode(); if (RequestPacket.isMD5Mode(request.getMode())) { mode = RequestPacket.getModeMD5(mode); } DbTaskRunner taskRunner = null; long tid = DbConstant.ILLEGALVALUE; if (request.getSpecialId() != DbConstant.ILLEGALVALUE) { tid = request.getSpecialId(); } if (tid != DbConstant.ILLEGALVALUE) { try { taskRunner = new DbTaskRunner(DbConstant.admin.getSession(), tid, request.getRequested()); // requested taskRunner.setSenderByRequestToValidate(true); } catch (WaarpDatabaseException e) { logger.warn(""Cannot get task"", e); return null; } } else { String sep = PartnerConfiguration.getSeparator(request.getRequested()); RequestPacket requestPacket = new RequestPacket(request.getRulename(), mode, request.getFilename(), request.getBlocksize(), 0, tid, request.getFileInformation(), -1, sep); // Not isRecv since it is the requester, so send => isRetrieve is true boolean isRetrieve = !RequestPacket.isRecvMode(requestPacket.getMode()); try { taskRunner = new DbTaskRunner(DbConstant.admin.getSession(), rule, isRetrieve, requestPacket, request.getRequested(), ttimestart); } catch (WaarpDatabaseException e) { logger.warn(""Cannot get task"", e); return null; } } return taskRunner; } "	1	0	1	1	0	0
public final void rule__TypeMapping__Group__2__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11977:1: ( ( ( rule__TypeMapping__TargetAssignment_2 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11978:1: ( ( rule__TypeMapping__TargetAssignment_2 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11978:1: ( ( rule__TypeMapping__TargetAssignment_2 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11979:1: ( rule__TypeMapping__TargetAssignment_2 ) { before(grammarAccess.getTypeMappingAccess().getTargetAssignment_2()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11980:1: ( rule__TypeMapping__TargetAssignment_2 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11980:2: rule__TypeMapping__TargetAssignment_2 { pushFollow(FollowSets001.FOLLOW_rule__TypeMapping__TargetAssignment_2_in_rule__TypeMapping__Group__2__Impl24563); rule__TypeMapping__TargetAssignment_2();  state._fsp--;   }  after(grammarAccess.getTypeMappingAccess().getTargetAssignment_2());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorModelSubclause__Group_6__3__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6323:1: ( ( ( rule__ErrorModelSubclause__Group_6_3__0 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6324:1: ( ( rule__ErrorModelSubclause__Group_6_3__0 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6324:1: ( ( rule__ErrorModelSubclause__Group_6_3__0 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6325:1: ( rule__ErrorModelSubclause__Group_6_3__0 )? { before(grammarAccess.getErrorModelSubclauseAccess().getGroup_6_3()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6326:1: ( rule__ErrorModelSubclause__Group_6_3__0 )? int alt70=2; int LA70_0 = input.LA(1);  if ( (LA70_0==Use) ) { alt70=1; } switch (alt70) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6326:2: rule__ErrorModelSubclause__Group_6_3__0 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_6_3__0_in_rule__ErrorModelSubclause__Group_6__3__Impl13449); rule__ErrorModelSubclause__Group_6_3__0();  state._fsp--;   } break;  }  after(grammarAccess.getErrorModelSubclauseAccess().getGroup_6_3());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorPropagation__Group__6__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12224:1: ( ( ( rule__ErrorPropagation__TypeSetAssignment_6 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12225:1: ( ( rule__ErrorPropagation__TypeSetAssignment_6 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12225:1: ( ( rule__ErrorPropagation__TypeSetAssignment_6 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12226:1: ( rule__ErrorPropagation__TypeSetAssignment_6 ) { before(grammarAccess.getErrorPropagationAccess().getTypeSetAssignment_6()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12227:1: ( rule__ErrorPropagation__TypeSetAssignment_6 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12227:2: rule__ErrorPropagation__TypeSetAssignment_6 { pushFollow(FollowSets001.FOLLOW_rule__ErrorPropagation__TypeSetAssignment_6_in_rule__ErrorPropagation__Group__6__Impl25056); rule__ErrorPropagation__TypeSetAssignment_6();  state._fsp--;   }  after(grammarAccess.getErrorPropagationAccess().getTypeSetAssignment_6());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__TypeDefinition__Group_1_0__1() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9114:1: ( rule__TypeDefinition__Group_1_0__1__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9115:2: rule__TypeDefinition__Group_1_0__1__Impl { pushFollow(FollowSets000.FOLLOW_rule__TypeDefinition__Group_1_0__1__Impl_in_rule__TypeDefinition__Group_1_0__118946); rule__TypeDefinition__Group_1_0__1__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__EMV2Library__Group_3__3__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4269:1: ( ( ( rule__EMV2Library__Group_3_3__0 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4270:1: ( ( rule__EMV2Library__Group_3_3__0 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4270:1: ( ( rule__EMV2Library__Group_3_3__0 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4271:1: ( rule__EMV2Library__Group_3_3__0 )? { before(grammarAccess.getEMV2LibraryAccess().getGroup_3_3()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4272:1: ( rule__EMV2Library__Group_3_3__0 )? int alt50=2; int LA50_0 = input.LA(1);  if ( (LA50_0==Extends) ) { alt50=1; } switch (alt50) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4272:2: rule__EMV2Library__Group_3_3__0 { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__Group_3_3__0_in_rule__EMV2Library__Group_3__3__Impl9402); rule__EMV2Library__Group_3_3__0();  state._fsp--;   } break;  }  after(grammarAccess.getEMV2LibraryAccess().getGroup_3_3());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorModelSubclause__Group_5__3__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6025:1: ( ( ( rule__ErrorModelSubclause__Group_5_3__0 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6026:1: ( ( rule__ErrorModelSubclause__Group_5_3__0 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6026:1: ( ( rule__ErrorModelSubclause__Group_5_3__0 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6027:1: ( rule__ErrorModelSubclause__Group_5_3__0 )? { before(grammarAccess.getErrorModelSubclauseAccess().getGroup_5_3()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6028:1: ( rule__ErrorModelSubclause__Group_5_3__0 )? int alt68=2; int LA68_0 = input.LA(1);  if ( (LA68_0==Flows) ) { alt68=1; } switch (alt68) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6028:2: rule__ErrorModelSubclause__Group_5_3__0 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_5_3__0_in_rule__ErrorModelSubclause__Group_5__3__Impl12865); rule__ErrorModelSubclause__Group_5_3__0();  state._fsp--;   } break;  }  after(grammarAccess.getErrorModelSubclauseAccess().getGroup_5_3());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorModelSubclause__Group_7_3__1() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7372:1: ( rule__ErrorModelSubclause__Group_7_3__1__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7373:2: rule__ErrorModelSubclause__Group_7_3__1__Impl { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_7_3__1__Impl_in_rule__ErrorModelSubclause__Group_7_3__115513); rule__ErrorModelSubclause__Group_7_3__1__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__EMV2Library__Group__4__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4078:1: ( ( ( rule__EMV2Library__BehaviorsAssignment_4 )* ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4079:1: ( ( rule__EMV2Library__BehaviorsAssignment_4 )* ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4079:1: ( ( rule__EMV2Library__BehaviorsAssignment_4 )* ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4080:1: ( rule__EMV2Library__BehaviorsAssignment_4 )* { before(grammarAccess.getEMV2LibraryAccess().getBehaviorsAssignment_4()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4081:1: ( rule__EMV2Library__BehaviorsAssignment_4 )* loop46: do { int alt46=2; int LA46_0 = input.LA(1);  if ( (LA46_0==Error) ) { alt46=1; }   switch (alt46) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4081:2: rule__EMV2Library__BehaviorsAssignment_4 { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__BehaviorsAssignment_4_in_rule__EMV2Library__Group__4__Impl9023); rule__EMV2Library__BehaviorsAssignment_4();  state._fsp--;   } break;  default : break loop46; } } while (true);  after(grammarAccess.getEMV2LibraryAccess().getBehaviorsAssignment_4());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	0	0
public final void rule__TypeSetElement__Group_1__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10178:1: ( ( ( rule__TypeSetElement__TypeAssignment_1_1 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10179:1: ( ( rule__TypeSetElement__TypeAssignment_1_1 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10179:1: ( ( rule__TypeSetElement__TypeAssignment_1_1 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10180:1: ( rule__TypeSetElement__TypeAssignment_1_1 ) { before(grammarAccess.getTypeSetElementAccess().getTypeAssignment_1_1()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10181:1: ( rule__TypeSetElement__TypeAssignment_1_1 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10181:2: rule__TypeSetElement__TypeAssignment_1_1 { pushFollow(FollowSets000.FOLLOW_rule__TypeSetElement__TypeAssignment_1_1_in_rule__TypeSetElement__Group_1__1__Impl21032); rule__TypeSetElement__TypeAssignment_1_1();  state._fsp--;   }  after(grammarAccess.getTypeSetElementAccess().getTypeAssignment_1_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorModelLibrary__Group_1__2__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8292:1: ( ( ( rule__ErrorModelLibrary__Group_1_2__0 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8293:1: ( ( rule__ErrorModelLibrary__Group_1_2__0 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8293:1: ( ( rule__ErrorModelLibrary__Group_1_2__0 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8294:1: ( rule__ErrorModelLibrary__Group_1_2__0 )? { before(grammarAccess.getErrorModelLibraryAccess().getGroup_1_2()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8295:1: ( rule__ErrorModelLibrary__Group_1_2__0 )? int alt92=2; int LA92_0 = input.LA(1);  if ( (LA92_0==Use) ) { alt92=1; } switch (alt92) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8295:2: rule__ErrorModelLibrary__Group_1_2__0 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__Group_1_2__0_in_rule__ErrorModelLibrary__Group_1__2__Impl17334); rule__ErrorModelLibrary__Group_1_2__0();  state._fsp--;   } break;  }  after(grammarAccess.getErrorModelLibraryAccess().getGroup_1_2());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__EMV2Library__Group_3_2_3__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4656:1: ( ( ( rule__EMV2Library__UseTypesAssignment_3_2_3_1 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4657:1: ( ( rule__EMV2Library__UseTypesAssignment_3_2_3_1 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4657:1: ( ( rule__EMV2Library__UseTypesAssignment_3_2_3_1 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4658:1: ( rule__EMV2Library__UseTypesAssignment_3_2_3_1 ) { before(grammarAccess.getEMV2LibraryAccess().getUseTypesAssignment_3_2_3_1()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4659:1: ( rule__EMV2Library__UseTypesAssignment_3_2_3_1 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4659:2: rule__EMV2Library__UseTypesAssignment_3_2_3_1 { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__UseTypesAssignment_3_2_3_1_in_rule__EMV2Library__Group_3_2_3__1__Impl10159); rule__EMV2Library__UseTypesAssignment_3_2_3_1();  state._fsp--;   }  after(grammarAccess.getEMV2LibraryAccess().getUseTypesAssignment_3_2_3_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__FeatureorPPReference__Group__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12299:1: ( ( ( rule__FeatureorPPReference__FeatureorPPAssignment_0 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12300:1: ( ( rule__FeatureorPPReference__FeatureorPPAssignment_0 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12300:1: ( ( rule__FeatureorPPReference__FeatureorPPAssignment_0 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12301:1: ( rule__FeatureorPPReference__FeatureorPPAssignment_0 ) { before(grammarAccess.getFeatureorPPReferenceAccess().getFeatureorPPAssignment_0()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12302:1: ( rule__FeatureorPPReference__FeatureorPPAssignment_0 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12302:2: rule__FeatureorPPReference__FeatureorPPAssignment_0 { pushFollow(FollowSets001.FOLLOW_rule__FeatureorPPReference__FeatureorPPAssignment_0_in_rule__FeatureorPPReference__Group__0__Impl25191); rule__FeatureorPPReference__FeatureorPPAssignment_0();  state._fsp--;   }  after(grammarAccess.getFeatureorPPReferenceAccess().getFeatureorPPAssignment_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorSource__Group_6_1_0__1() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12789:1: ( rule__ErrorSource__Group_6_1_0__1__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12790:2: rule__ErrorSource__Group_6_1_0__1__Impl { pushFollow(FollowSets001.FOLLOW_rule__ErrorSource__Group_6_1_0__1__Impl_in_rule__ErrorSource__Group_6_1_0__126155); rule__ErrorSource__Group_6_1_0__1__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__TypeTransformationSet__Group__7() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10958:1: ( rule__TypeTransformationSet__Group__7__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10959:2: rule__TypeTransformationSet__Group__7__Impl { pushFollow(FollowSets000.FOLLOW_rule__TypeTransformationSet__Group__7__Impl_in_rule__TypeTransformationSet__Group__722565); rule__TypeTransformationSet__Group__7__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorModelSubclause__Group_8_2__3() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7728:1: ( rule__ErrorModelSubclause__Group_8_2__3__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7729:2: rule__ErrorModelSubclause__Group_8_2__3__Impl { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_8_2__3__Impl_in_rule__ErrorModelSubclause__Group_8_2__316218); rule__ErrorModelSubclause__Group_8_2__3__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__EMV2Library__Group_3_3_2__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4846:1: ( ( ( rule__EMV2Library__ExtendsAssignment_3_3_2_1 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4847:1: ( ( rule__EMV2Library__ExtendsAssignment_3_3_2_1 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4847:1: ( ( rule__EMV2Library__ExtendsAssignment_3_3_2_1 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4848:1: ( rule__EMV2Library__ExtendsAssignment_3_3_2_1 ) { before(grammarAccess.getEMV2LibraryAccess().getExtendsAssignment_3_3_2_1()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4849:1: ( rule__EMV2Library__ExtendsAssignment_3_3_2_1 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4849:2: rule__EMV2Library__ExtendsAssignment_3_3_2_1 { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__ExtendsAssignment_3_3_2_1_in_rule__EMV2Library__Group_3_3_2__1__Impl10532); rule__EMV2Library__ExtendsAssignment_3_3_2_1();  state._fsp--;   }  after(grammarAccess.getEMV2LibraryAccess().getExtendsAssignment_3_3_2_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorModelLibrary__Group_1_2__3__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8609:1: ( ( ( rule__ErrorModelLibrary__Group_1_2_3__0 )* ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8610:1: ( ( rule__ErrorModelLibrary__Group_1_2_3__0 )* ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8610:1: ( ( rule__ErrorModelLibrary__Group_1_2_3__0 )* ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8611:1: ( rule__ErrorModelLibrary__Group_1_2_3__0 )* { before(grammarAccess.getErrorModelLibraryAccess().getGroup_1_2_3()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8612:1: ( rule__ErrorModelLibrary__Group_1_2_3__0 )* loop96: do { int alt96=2; int LA96_0 = input.LA(1);  if ( (LA96_0==Comma) ) { alt96=1; }   switch (alt96) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8612:2: rule__ErrorModelLibrary__Group_1_2_3__0 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__Group_1_2_3__0_in_rule__ErrorModelLibrary__Group_1_2__3__Impl17963); rule__ErrorModelLibrary__Group_1_2_3__0();  state._fsp--;   } break;  default : break loop96; } } while (true);  after(grammarAccess.getErrorModelLibraryAccess().getGroup_1_2_3());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorModelSubclause__Group__5__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5096:1: ( ( ( rule__ErrorModelSubclause__Group_5__0 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5097:1: ( ( rule__ErrorModelSubclause__Group_5__0 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5097:1: ( ( rule__ErrorModelSubclause__Group_5__0 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5098:1: ( rule__ErrorModelSubclause__Group_5__0 )? { before(grammarAccess.getErrorModelSubclauseAccess().getGroup_5()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5099:1: ( rule__ErrorModelSubclause__Group_5__0 )? int alt60=2; int LA60_0 = input.LA(1);  if ( (LA60_0==Error) ) { alt60=1; } switch (alt60) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5099:2: rule__ErrorModelSubclause__Group_5__0 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_5__0_in_rule__ErrorModelSubclause__Group__5__Impl11041); rule__ErrorModelSubclause__Group_5__0();  state._fsp--;   } break;  }  after(grammarAccess.getErrorModelSubclauseAccess().getGroup_5());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorModelSubclause__Group__2__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5009:1: ( ( ( rule__ErrorModelSubclause__Group_2__0 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5010:1: ( ( rule__ErrorModelSubclause__Group_2__0 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5010:1: ( ( rule__ErrorModelSubclause__Group_2__0 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5011:1: ( rule__ErrorModelSubclause__Group_2__0 )? { before(grammarAccess.getErrorModelSubclauseAccess().getGroup_2()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5012:1: ( rule__ErrorModelSubclause__Group_2__0 )? int alt57=2; int LA57_0 = input.LA(1);  if ( (LA57_0==Use) ) { int LA57_1 = input.LA(2);  if ( (LA57_1==Type) ) { alt57=1; } } switch (alt57) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5012:2: rule__ErrorModelSubclause__Group_2__0 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_2__0_in_rule__ErrorModelSubclause__Group__2__Impl10858); rule__ErrorModelSubclause__Group_2__0();  state._fsp--;   } break;  }  after(grammarAccess.getErrorModelSubclauseAccess().getGroup_2());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorSource__Group__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12423:1: ( ( ( rule__ErrorSource__NameAssignment_0 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12424:1: ( ( rule__ErrorSource__NameAssignment_0 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12424:1: ( ( rule__ErrorSource__NameAssignment_0 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12425:1: ( rule__ErrorSource__NameAssignment_0 ) { before(grammarAccess.getErrorSourceAccess().getNameAssignment_0()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12426:1: ( rule__ErrorSource__NameAssignment_0 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12426:2: rule__ErrorSource__NameAssignment_0 { pushFollow(FollowSets001.FOLLOW_rule__ErrorSource__NameAssignment_0_in_rule__ErrorSource__Group__0__Impl25436); rule__ErrorSource__NameAssignment_0();  state._fsp--;   }  after(grammarAccess.getErrorSourceAccess().getNameAssignment_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorPropagation__Group__4__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12164:1: ( ( ( rule__ErrorPropagation__DirectionAssignment_4 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12165:1: ( ( rule__ErrorPropagation__DirectionAssignment_4 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12165:1: ( ( rule__ErrorPropagation__DirectionAssignment_4 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12166:1: ( rule__ErrorPropagation__DirectionAssignment_4 ) { before(grammarAccess.getErrorPropagationAccess().getDirectionAssignment_4()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12167:1: ( rule__ErrorPropagation__DirectionAssignment_4 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12167:2: rule__ErrorPropagation__DirectionAssignment_4 { pushFollow(FollowSets001.FOLLOW_rule__ErrorPropagation__DirectionAssignment_4_in_rule__ErrorPropagation__Group__4__Impl24934); rule__ErrorPropagation__DirectionAssignment_4();  state._fsp--;   }  after(grammarAccess.getErrorPropagationAccess().getDirectionAssignment_4());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorModelLibrary__Group_1_3_2__1() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8887:1: ( rule__ErrorModelLibrary__Group_1_3_2__1__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8888:2: rule__ErrorModelLibrary__Group_1_3_2__1__Impl { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__Group_1_3_2__1__Impl_in_rule__ErrorModelLibrary__Group_1_3_2__118498); rule__ErrorModelLibrary__Group_1_3_2__1__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__TypeSetDefinition__Group_1_0__6() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9649:1: ( rule__TypeSetDefinition__Group_1_0__6__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9650:2: rule__TypeSetDefinition__Group_1_0__6__Impl { pushFollow(FollowSets000.FOLLOW_rule__TypeSetDefinition__Group_1_0__6__Impl_in_rule__TypeSetDefinition__Group_1_0__620001); rule__TypeSetDefinition__Group_1_0__6__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorModelLibrary__Group_1__5__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8379:1: ( ( ( rule__ErrorModelLibrary__Group_1_5__0 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8380:1: ( ( rule__ErrorModelLibrary__Group_1_5__0 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8380:1: ( ( rule__ErrorModelLibrary__Group_1_5__0 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8381:1: ( rule__ErrorModelLibrary__Group_1_5__0 )? { before(grammarAccess.getErrorModelLibraryAccess().getGroup_1_5()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8382:1: ( rule__ErrorModelLibrary__Group_1_5__0 )? int alt95=2; int LA95_0 = input.LA(1);  if ( (LA95_0==Properties) ) { alt95=1; } switch (alt95) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8382:2: rule__ErrorModelLibrary__Group_1_5__0 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__Group_1_5__0_in_rule__ErrorModelLibrary__Group_1__5__Impl17517); rule__ErrorModelLibrary__Group_1_5__0();  state._fsp--;   } break;  }  after(grammarAccess.getErrorModelLibraryAccess().getGroup_1_5());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorSource__Group_6_1_0__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12800:1: ( ( ( rule__ErrorSource__FailureModeTypeAssignment_6_1_0_1 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12801:1: ( ( rule__ErrorSource__FailureModeTypeAssignment_6_1_0_1 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12801:1: ( ( rule__ErrorSource__FailureModeTypeAssignment_6_1_0_1 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12802:1: ( rule__ErrorSource__FailureModeTypeAssignment_6_1_0_1 )? { before(grammarAccess.getErrorSourceAccess().getFailureModeTypeAssignment_6_1_0_1()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12803:1: ( rule__ErrorSource__FailureModeTypeAssignment_6_1_0_1 )? int alt115=2; int LA115_0 = input.LA(1);  if ( (LA115_0==LeftCurlyBracket) ) { alt115=1; } switch (alt115) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12803:2: rule__ErrorSource__FailureModeTypeAssignment_6_1_0_1 { pushFollow(FollowSets001.FOLLOW_rule__ErrorSource__FailureModeTypeAssignment_6_1_0_1_in_rule__ErrorSource__Group_6_1_0__1__Impl26182); rule__ErrorSource__FailureModeTypeAssignment_6_1_0_1();  state._fsp--;   } break;  }  after(grammarAccess.getErrorSourceAccess().getFailureModeTypeAssignment_6_1_0_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorModelSubclause__Group_7__6() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7297:1: ( rule__ErrorModelSubclause__Group_7__6__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7298:2: rule__ErrorModelSubclause__Group_7__6__Impl { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_7__6__Impl_in_rule__ErrorModelSubclause__Group_7__615378); rule__ErrorModelSubclause__Group_7__6__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__EMV2Library__Group_3__4__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4298:1: ( ( ( rule__EMV2Library__Alternatives_3_4 )* ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4299:1: ( ( rule__EMV2Library__Alternatives_3_4 )* ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4299:1: ( ( rule__EMV2Library__Alternatives_3_4 )* ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4300:1: ( rule__EMV2Library__Alternatives_3_4 )* { before(grammarAccess.getEMV2LibraryAccess().getAlternatives_3_4()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4301:1: ( rule__EMV2Library__Alternatives_3_4 )* loop51: do { int alt51=2; int LA51_0 = input.LA(1);  if ( (LA51_0==RULE_ID) ) { alt51=1; }   switch (alt51) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4301:2: rule__EMV2Library__Alternatives_3_4 { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__Alternatives_3_4_in_rule__EMV2Library__Group_3__4__Impl9463); rule__EMV2Library__Alternatives_3_4();  state._fsp--;   } break;  default : break loop51; } } while (true);  after(grammarAccess.getEMV2LibraryAccess().getAlternatives_3_4());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	0	0
public final void rule__ErrorSource__Group__6__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12603:1: ( ( ( rule__ErrorSource__Group_6__0 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12604:1: ( ( rule__ErrorSource__Group_6__0 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12604:1: ( ( rule__ErrorSource__Group_6__0 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12605:1: ( rule__ErrorSource__Group_6__0 )? { before(grammarAccess.getErrorSourceAccess().getGroup_6()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12606:1: ( rule__ErrorSource__Group_6__0 )? int alt113=2; int LA113_0 = input.LA(1);  if ( (LA113_0==When) ) { alt113=1; } switch (alt113) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12606:2: rule__ErrorSource__Group_6__0 { pushFollow(FollowSets001.FOLLOW_rule__ErrorSource__Group_6__0_in_rule__ErrorSource__Group__6__Impl25803); rule__ErrorSource__Group_6__0();  state._fsp--;   } break;  }  after(grammarAccess.getErrorSourceAccess().getGroup_6());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__EMV2Library__Group_3_3__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4720:1: ( ( ( rule__EMV2Library__ExtendsAssignment_3_3_1 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4721:1: ( ( rule__EMV2Library__ExtendsAssignment_3_3_1 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4721:1: ( ( rule__EMV2Library__ExtendsAssignment_3_3_1 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4722:1: ( rule__EMV2Library__ExtendsAssignment_3_3_1 ) { before(grammarAccess.getEMV2LibraryAccess().getExtendsAssignment_3_3_1()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4723:1: ( rule__EMV2Library__ExtendsAssignment_3_3_1 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4723:2: rule__EMV2Library__ExtendsAssignment_3_3_1 { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__ExtendsAssignment_3_3_1_in_rule__EMV2Library__Group_3_3__1__Impl10285); rule__EMV2Library__ExtendsAssignment_3_3_1();  state._fsp--;   }  after(grammarAccess.getEMV2LibraryAccess().getExtendsAssignment_3_3_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	1	0
public final void rule__ErrorModelLibrary__Group_1__4__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8350:1: ( ( ( rule__ErrorModelLibrary__Alternatives_1_4 )* ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8351:1: ( ( rule__ErrorModelLibrary__Alternatives_1_4 )* ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8351:1: ( ( rule__ErrorModelLibrary__Alternatives_1_4 )* ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8352:1: ( rule__ErrorModelLibrary__Alternatives_1_4 )* { before(grammarAccess.getErrorModelLibraryAccess().getAlternatives_1_4()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8353:1: ( rule__ErrorModelLibrary__Alternatives_1_4 )* loop94: do { int alt94=2; int LA94_0 = input.LA(1);  if ( (LA94_0==RULE_ID) ) { alt94=1; }   switch (alt94) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8353:2: rule__ErrorModelLibrary__Alternatives_1_4 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__Alternatives_1_4_in_rule__ErrorModelLibrary__Group_1__4__Impl17456); rule__ErrorModelLibrary__Alternatives_1_4();  state._fsp--;   } break;  default : break loop94; } } while (true);  after(grammarAccess.getErrorModelLibraryAccess().getAlternatives_1_4());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	0	0	0
"private void attemptConnect() throws IOException {  keepSubscriptionsClearEverythingElse();  long start = System.currentTimeMillis(); socketAddressSupplier.startAtFirstAddress();  OUTER: for (; ; ) { checkNotShutdown();  if (LOG.isDebugEnabled()) LOG.debug(""attemptConnect remoteAddress="" + socketAddressSupplier); SocketChannel socketChannel; try {  for (; ; ) {  if (isShutdown()) continue OUTER;  if (start + socketAddressSupplier.timeoutMS() < System.currentTimeMillis()) {  String oldAddress = socketAddressSupplier.toString();  socketAddressSupplier.failoverToNextAddress(); LOG.info(""Connection Dropped to address="" + oldAddress + "", so will fail over to"" + socketAddressSupplier + "", name="" + name);  if (socketAddressSupplier.get() == null) { LOG.warn(""failed to establish a socket "" + ""connection of any of the following servers="" + socketAddressSupplier.all() + "" so will re-attempt""); socketAddressSupplier.startAtFirstAddress(); }  // reset the timer, so that we can try this new address for a while start = System.currentTimeMillis(); }  socketChannel = openSocketChannel();  try { if (socketChannel == null) { LOG.error(""Unable to open socketChannel to remoteAddress="" + socketAddressSupplier); pause(250); continue; } else {  final SocketAddress socketAddress = socketAddressSupplier.get(); if (socketAddress == null) throw new IORuntimeException(""failed to connect as "" + ""socketAddress=null"");  final SocketAddress remote = socketAddressSupplier.get(); if (LOG.isDebugEnabled()) LOG.debug(""attempting to conenct to address="" + remote);  if (socketChannel.connect(remote)) // successfully connected break; }  LOG.error(""Unable to connect to remoteAddress="" + socketAddressSupplier); pause(250);  } catch (ConnectException e) { LOG.info(""Server is unavailable, ConnectException to "" + ""remoteAddress="" + socketAddressSupplier); pause(250); } }  // this lock prevents the clients attempt to send data before we have // finished the handshaking outBytesLock().lock(); try {  clear(outWire);  // resets the heartbeat timer onMessageReceived();  // the hand-shaking is assigned before setting the clientChannel, so that it can // be assured to go first doHandShaking(socketChannel);  synchronized (this) { clientChannel = socketChannel; }  eventLoop.addHandler(this); if (LOG.isDebugEnabled()) LOG.debug(""successfully connected to remoteAddress="" + socketAddressSupplier);  reconnect(); onConnected(); } finally { outBytesLock().unlock(); }  break; } catch (Exception e) { if (!isShutdown) { LOG.error(""failed to connect remoteAddress="" + socketAddressSupplier + "" so will reconnect "" + e.getMessage()); closeSocket(); } } } } "	0	0	1	0	0	0
"public boolean initialParticipantList() { //Modified by Arion-------------------------- Participant temp = null; //Modified by Loso String rootPath = this.getClass().getResource(""Participants.txt"").getFile(); File fileToBeFound = new File(rootPath);  //------------------------------------------- BufferedReader br = null; String line = """"; String cvsSplitBy = "","";  try { br = new BufferedReader(new FileReader(fileToBeFound.getAbsolutePath())); while ((line = br.readLine()) != null) { // use comma as separator fileList.add(line.split(cvsSplitBy)); }  Set<String> unique_id = new HashSet<String>();  for (int i=0; i<fileList.size(); i++){ if (fileList.get(i).length != 5) { fileList.remove(i--); } else if (!unique_id.add(fileList.get(i)[ID_INDEX])) { fileList.remove(i--); } else if (fileList.get(i)[ID_INDEX].isEmpty() || fileList.get(i)[TYPE_INDEX].isEmpty() || fileList.get(i)[NAME_INDEX].isEmpty() || fileList.get(i)[AGE_INDEX].isEmpty() || fileList.get(i)[STATE_INDEX].isEmpty()) { fileList.remove(i--); } }  for (int i=0; i<fileList.size(); i++) { if (fileList.get(i)[TYPE_INDEX].equalsIgnoreCase(""superathlete"")) { temp = new SuperAthlete(fileList.get(i)[ID_INDEX], fileList.get(i)[TYPE_INDEX], fileList.get(i)[EXTRATYPE_INDEX],fileList.get(i)[NAME_INDEX],Integer.parseInt(fileList.get(i)[AGE_INDEX]),fileList.get(i)[STATE_INDEX]); athleteList.add((Athlete)temp); } else if (fileList.get(i)[TYPE_INDEX].equalsIgnoreCase(""official"")) { temp = new Official(fileList.get(i)[ID_INDEX], fileList.get(i)[NAME_INDEX],Integer.parseInt(fileList.get(i)[AGE_INDEX]),fileList.get(i)[STATE_INDEX]); officialList.add((Official)temp); } else { temp = new Athlete(fileList.get(i)[ID_INDEX], fileList.get(i)[TYPE_INDEX], fileList.get(i)[EXTRATYPE_INDEX],fileList.get(i)[NAME_INDEX],Integer.parseInt(fileList.get(i)[AGE_INDEX]),fileList.get(i)[STATE_INDEX]); athleteList.add((Athlete)temp); } participant.put(temp.getPersonID(), temp); }  //-------------------------------------------  } catch (FileNotFoundException e) { fileNotFoundRecovery(); e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } finally { if (br != null) { try { br.close(); } catch (IOException e) { e.printStackTrace(); } } }  return true; } "	1	1	1	1	0	0
public GuildWrapper getGuild(String id) { guilds.putIfAbsent(id, new GuildWrapperBuilder().build()); return guilds.get(id); } 	0	0	1	1	1	0
@Override public int getPhase() { return this.targetIntegrationFlow.getPhase(); } 	1	0	0	0	0	0
@Override public boolean isAutoStartup() { return this.targetIntegrationFlow.isAutoStartup(); } 	1	0	0	0	1	0
"private void createTermDefinition(Map<String, Object> context, String term, Map<String, Boolean> defined) throws JsonLdError { if (defined.containsKey(term)) { if (Boolean.TRUE.equals(defined.get(term))) { return; } throw new JsonLdError(Error.CYCLIC_IRI_MAPPING, term); }  defined.put(term, false);  if (JsonLdUtils.isKeyword(term)) { throw new JsonLdError(Error.KEYWORD_REDEFINITION, term); }  this.termDefinitions.remove(term); Object value = context.get(term); if (value == null || (value instanceof Map && ((Map<String, Object>) value).containsKey(JsonLdConsts.ID) && ((Map<String, Object>) value).get(JsonLdConsts.ID) == null)) { this.termDefinitions.put(term, null); defined.put(term, true); return; }  if (value instanceof String) { value = newMap(JsonLdConsts.ID, value); }  if (!(value instanceof Map)) { throw new JsonLdError(Error.INVALID_TERM_DEFINITION, value); }  // casting the value so it doesn't have to be done below everytime final Map<String, Object> val = (Map<String, Object>) value;  // 9) create a new term definition final Map<String, Object> definition = newMap();  // 10) if (val.containsKey(JsonLdConsts.TYPE)) { if (!(val.get(JsonLdConsts.TYPE) instanceof String)) { throw new JsonLdError(Error.INVALID_TYPE_MAPPING, val.get(JsonLdConsts.TYPE)); } String type = (String) val.get(JsonLdConsts.TYPE); try { type = this.expandIri((String) val.get(JsonLdConsts.TYPE), false, true, context, defined); } catch (final JsonLdError error) { if (error.getType() != Error.INVALID_IRI_MAPPING) { throw error; } throw new JsonLdError(Error.INVALID_TYPE_MAPPING, type); } // TODO: fix check for absoluteIri (blank nodes shouldn't count, at // least not here!) if (JsonLdConsts.ID.equals(type) || JsonLdConsts.VOCAB.equals(type) || (!type.startsWith(JsonLdConsts.BLANK_NODE_PREFIX) && JsonLdUtils.isAbsoluteIri(type))) { definition.put(JsonLdConsts.TYPE, type); } else { throw new JsonLdError(Error.INVALID_TYPE_MAPPING, type); } }  // 11) if (val.containsKey(JsonLdConsts.REVERSE)) { if (val.containsKey(JsonLdConsts.ID)) { throw new JsonLdError(Error.INVALID_REVERSE_PROPERTY, val); } if (!(val.get(JsonLdConsts.REVERSE) instanceof String)) { throw new JsonLdError(Error.INVALID_IRI_MAPPING, ""Expected String for @reverse value. got "" + (val.get(JsonLdConsts.REVERSE) == null ? ""null"" : val.get(JsonLdConsts.REVERSE).getClass())); } final String reverse = this.expandIri((String) val.get(JsonLdConsts.REVERSE), false, true, context, defined); if (!JsonLdUtils.isAbsoluteIri(reverse)) { throw new JsonLdError(Error.INVALID_IRI_MAPPING, ""Non-absolute @reverse IRI: "" + reverse); } definition.put(JsonLdConsts.ID, reverse); if (val.containsKey(JsonLdConsts.CONTAINER)) { final String container = (String) val.get(JsonLdConsts.CONTAINER); if (container == null || JsonLdConsts.SET.equals(container) || JsonLdConsts.INDEX.equals(container)) { definition.put(JsonLdConsts.CONTAINER, container); } else { throw new JsonLdError(Error.INVALID_REVERSE_PROPERTY, ""reverse properties only support set- and index-containers""); } } definition.put(JsonLdConsts.REVERSE, true); this.termDefinitions.put(term, definition); defined.put(term, true); return; }  // 12) definition.put(JsonLdConsts.REVERSE, false);  // 13) if (val.get(JsonLdConsts.ID) != null && !term.equals(val.get(JsonLdConsts.ID))) { if (!(val.get(JsonLdConsts.ID) instanceof String)) { throw new JsonLdError(Error.INVALID_IRI_MAPPING, ""expected value of @id to be a string""); }  final String res = this.expandIri((String) val.get(JsonLdConsts.ID), false, true, context, defined); if (JsonLdUtils.isKeyword(res) || JsonLdUtils.isAbsoluteIri(res)) { if (JsonLdConsts.CONTEXT.equals(res)) { throw new JsonLdError(Error.INVALID_KEYWORD_ALIAS, ""cannot alias @context""); } definition.put(JsonLdConsts.ID, res); } else { throw new JsonLdError(Error.INVALID_IRI_MAPPING, ""resulting IRI mapping should be a keyword, absolute IRI or blank node""); } }  // 14) else if (term.indexOf("":"") >= 0) { final int colIndex = term.indexOf("":""); final String prefix = term.substring(0, colIndex); final String suffix = term.substring(colIndex + 1); if (context.containsKey(prefix)) { this.createTermDefinition(context, prefix, defined); } if (termDefinitions.containsKey(prefix)) { definition.put(JsonLdConsts.ID, ((Map<String, Object>) termDefinitions.get(prefix)).get(JsonLdConsts.ID) + suffix); } else { definition.put(JsonLdConsts.ID, term); } // 15) } else if (this.containsKey(JsonLdConsts.VOCAB)) { definition.put(JsonLdConsts.ID, this.get(JsonLdConsts.VOCAB) + term); } else { throw new JsonLdError(Error.INVALID_IRI_MAPPING, ""relative term definition without vocab mapping""); }  // 16) if (val.containsKey(JsonLdConsts.CONTAINER)) { final String container = (String) val.get(JsonLdConsts.CONTAINER); if (!JsonLdConsts.LIST.equals(container) && !JsonLdConsts.SET.equals(container) && !JsonLdConsts.INDEX.equals(container) && !JsonLdConsts.LANGUAGE.equals(container)) { throw new JsonLdError(Error.INVALID_CONTAINER_MAPPING, ""@container must be either @list, @set, @index, or @language""); } definition.put(JsonLdConsts.CONTAINER, container); }  // 17) if (val.containsKey(JsonLdConsts.LANGUAGE) && !val.containsKey(JsonLdConsts.TYPE)) { if (val.get(JsonLdConsts.LANGUAGE) == null || val.get(JsonLdConsts.LANGUAGE) instanceof String) { final String language = (String) val.get(JsonLdConsts.LANGUAGE); definition.put(JsonLdConsts.LANGUAGE, language != null ? language.toLowerCase() : null); } else { throw new JsonLdError(Error.INVALID_LANGUAGE_MAPPING, ""@language must be a string or null""); } }  // 18) this.termDefinitions.put(term, definition); defined.put(term, true); } "	0	0	1	1	1	0
public final static <T> Observable<T> from(Future<? extends T> future, Scheduler scheduler) { // TODO in a future revision the Scheduler will become important because we'll start polling instead of blocking on the Future return create(OnSubscribeToObservableFuture.toObservableFuture(future)).subscribeOn(scheduler); } 	1	0	0	0	0	0
private boolean jj_3R_63() { if (jj_3R_98()) return true; return false; } 	0	0	1	0	0	0
private boolean jj_3R_50() { if (jj_3R_78()) return true; return false; } 	0	0	1	0	1	0
private boolean jj_3R_96() { if (jj_scan_token(NOT)) return true; return false; } 	0	0	1	0	0	0
private boolean jj_3R_71() { if (jj_3R_70()) return true; return false; } 	0	0	1	0	1	0
"final public void comp_for() throws ParseException { /*@bgen(jjtree) comp_for */ SimpleNode jjtn000 = builder.openNode( JJTCOMP_FOR); boolean jjtc000 = true; jjtree.openNodeScope(jjtn000); jjtreeOpenNodeScope(jjtn000); try { grammarActions.findTokenAndAdd(""for""); jj_consume_token(FOR); exprlist(); grammarActions.findTokenAndAdd(""in""); jj_consume_token(IN); or_test(); switch ((jj_ntk==-1)?jj_ntk():jj_ntk) { case IF: case FOR: comp_iter(); break; default: jj_la1[135] = jj_gen; ; } } catch (Throwable jjte000) { if (jjtc000) { jjtree.clearNodeScope(jjtn000); jjtc000 = false; } else { jjtree.popNode(); } if (jjte000 instanceof RuntimeException) { {if (true) throw (RuntimeException)jjte000;} } if (jjte000 instanceof ParseException) { {if (true) throw (ParseException)jjte000;} } {if (true) throw (Error)jjte000;} } finally { if (jjtc000) { jjtree.closeNodeScope(jjtn000, true); jjtreeCloseNodeScope(jjtn000); } } } "	0	0	1	0	1	0
"@Override public void mkConstructorCall(Unit u, SootMethod constructor, List<Expression> args) { SourceLocation loc = SootTranslationHelpers.v().getSourceLocation(u); Method method = SootTranslationHelpers.v().lookupOrCreateMethod(constructor);  List<Expression> receiver = new LinkedList<Expression>(); for (SootField sf : constructor.getDeclaringClass().getFields()) { if (sf.isFinal()) { Variable v = lookupFieldLocal(getVarFromExpression(args.get(0)), sf); receiver.add(new IdentifierExpression(loc, v)); } } Verify.verify(method.getReturnType().size() == receiver.size(), method.getReturnType().size() + ""!="" + receiver.size());  // MethodInfo currentMethodInfo = this.statementSwitch.getMethodInfo(); // for (soottocfg.cfg.type.Type tp : method.getReturnType()) { // Variable lhs = currentMethodInfo.createFreshLocal(""foo"", tp, true, // false); // receiver.add(new IdentifierExpression(loc, lhs)); // } // TODO: keep a map between the locals and the fields of this class. CallStatement stmt = new CallStatement(loc, method, args, receiver); this.statementSwitch.push(stmt); } "	0	0	0	0	0	1
"@Override public String getAsString(List<Context> contexts) { StringBuilder graphmlStr = new StringBuilder(); for (Context context : contexts) { String newLine = System.lineSeparator(); StringBuilder str = new StringBuilder();  str.append(""<?xml version=\""1.0\"" encoding=\""ISO-8859-1\""?>"").append(newLine); str.append(""<graphml xmlns=\""http://graphml.graphdrawing.org/xmlns\""  "" + ""xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\"" "" + ""xsi:schemaLocation=\""http://graphml.graphdrawing.org/xmlns "" + ""http://www.yworks.com/xml/schema/graphml/1.0/ygraphml.xsd\"" "" + ""xmlns:y=\""http://www.yworks.com/xml/graphml\"">"").append(newLine); str.append(""  <key id=\""d0\"" for=\""node\"" yfiles.type=\""nodegraphics\""/>"").append(newLine); str.append(""  <key id=\""d1\"" for=\""edge\"" yfiles.type=\""edgegraphics\""/>"").append(newLine); str.append(""  <graph id=\""G\"" edgedefault=\""directed\"">"").append(newLine);  for (Vertex.RuntimeVertex v : context.getModel().getVertices()) { str.append(""    <node id=\"""" + v.getId() + ""\"">"").append(newLine); str.append(""      <data key=\""d0\"" >"").append(newLine); str.append(""        <y:ShapeNode >"").append(newLine); str.append(""          <y:Geometry  x=\""241.875\"" y=\""158.701171875\"" width=\""95.0\"" height=\""30.0\""/>"").append(newLine); str.append(""          <y:Fill color=\""#CCCCFF\""  transparent=\""false\""/>"").append(newLine); str.append(""          <y:BorderStyle type=\""line\"" width=\""1.0\"" color=\""#000000\"" />"").append(newLine); str.append(""          <y:NodeLabel x=\""1.5\"" y=\""5.6494140625\"" width=\""92.0\"" height=\""18.701171875\"" "" + ""visible=\""true\"" alignment=\""center\"" fontFamily=\""Dialog\"" fontSize=\""12\"" "" + ""fontStyle=\""plain\"" textColor=\""#000000\"" modelName=\""internal\"" modelPosition=\""c\"" "" + ""autoSizePolicy=\""content\"">"" + v.getName());  str.append(""</y:NodeLabel>"").append(newLine); str.append(""          <y:Shape type=\""rectangle\""/>"").append(newLine); str.append(""        </y:ShapeNode>"").append(newLine); str.append(""      </data>"").append(newLine); str.append(""    </node>"").append(newLine); }  for (Edge.RuntimeEdge e : context.getModel().getEdges()) { Vertex.RuntimeVertex src = e.getSourceVertex(); Vertex.RuntimeVertex dest = e.getTargetVertex();  if (src == null || dest == null) { continue; }  str.append(""    <edge id=\"""" + e.getId() + ""\"" source=\"""" + src.getId() + ""\"" target=\"""" + dest.getId() + ""\"">"").append(newLine); str.append(""      <data key=\""d1\"" >"").append(newLine); str.append(""        <y:PolyLineEdge >"").append(newLine); str.append(""          <y:Path sx=\""-23.75\"" sy=\""15.0\"" tx=\""-23.75\"" ty=\""-15.0\"">"").append(newLine); str.append(""            <y:Point x=\""273.3125\"" y=\""95.0\""/>"").append(newLine); str.append(""            <y:Point x=\""209.5625\"" y=\""95.0\""/>"").append(newLine); str.append(""            <y:Point x=\""209.5625\"" y=\""143.701171875\""/>"").append(newLine); str.append(""            <y:Point x=\""265.625\"" y=\""143.701171875\""/>"").append(newLine); str.append(""          </y:Path>"").append(newLine); str.append(""          <y:LineStyle type=\""line\"" width=\""1.0\"" color=\""#000000\"" />"").append(newLine); str.append(""          <y:Arrows source=\""none\"" target=\""standard\""/>"").append(newLine);  if (!e.getName().isEmpty()) { String label = e.getName();  if (e.hasGuard()) { label += newLine + ""["" + e.getGuard().getScript() + ""]""; } if (e.hasActions()) { label += newLine + ""/""; for (Action action : e.getActions()) { label += action.getScript(); } }  if (e.getDependency()!=null) { label +=  ""\ndependency="" + e.getDependency(); }  label = label.replaceAll(""&"", ""&amp;""); label = label.replaceAll(""<"", ""&lt;""); label = label.replaceAll("">"", ""&gt;""); label = label.replaceAll(""'"", ""&apos;""); label = label.replaceAll(""\"""", ""&quot;"");  str.append(""          <y:EdgeLabel x=\""-148.25\"" y=\""30.000000000000014\"" width=\""169.0\"" height=\""18.701171875\"" "" + ""visible=\""true\"" alignment=\""center\"" fontFamily=\""Dialog\"" fontSize=\""12\"" "" + ""fontStyle=\""plain\"" textColor=\""#000000\"" modelName=\""free\"" modelPosition=\""anywhere\"" "" + ""preferredPlacement=\""on_edge\"" distance=\""2.0\"" ratio=\""0.5\"">"" + label); str.append(""</y:EdgeLabel>"").append(newLine); }  str.append(""          <y:BendStyle smoothed=\""false\""/>"").append(newLine); str.append(""        </y:PolyLineEdge>"").append(newLine); str.append(""      </data>"").append(newLine); str.append(""    </edge>"").append(newLine);  }  str.append(""  </graph>"").append(newLine); str.append(""</graphml>"").append(newLine);  graphmlStr.append(str); } return graphmlStr.toString(); } "	1	0	0	0	0	0
"@ValueConverter(rule = ""InOutDirection"") public IValueConverter<DirectionType> InOutDirection() { return new IValueConverter<DirectionType>() { public DirectionType toValue(String string, INode node) {  return DirectionType.get(string); }  public String toString(DirectionType value) { return value.getName(); } }; } "	0	0	1	1	1	0
protected int translateY(int screenY) { return MathUtils.clamp((MathUtils.floor((screenY + offsetY) / cellHeight)), 0, (int)(gridHeight - 1)); //MathUtils.floor((offsetY * 0f) / cellHeight) } 	0	0	0	1	1	0
public int getFirstDayOfWeek() { return adapter.getFirstDayOfWeek(); } 	0	0	1	0	1	0
@Override protected MonthView createView(int position) { return new MonthView(mcv, getItem(position), getFirstDayOfWeek()); } 	1	0	1	1	1	0
"public void start() throws DuplicateName, IOException { Logger.getLogger(GameEngine.class).info(""Starting Game Engine...""); this.collisionMessageHandler = new CollisionMessageHandler(this.m_physicsEngineDriver, this.m_id_mapper, this.m_stateManager); this.damageMessageHandler = new DamageMessageHandler(this.m_physicsEngineDriver, this.m_id_mapper, this.m_stateManager); this.fireBulletMessageHandler = new FireBulletMessageHandler(this.m_physicsEngineDriver, this.m_id_mapper, this.m_stateManager); this.killMessageHandler = new KillMessageHandler(this.m_physicsEngineDriver, this.m_id_mapper, this.m_stateManager); this.movementMessageHandler = new MovementMessageHandler(this.m_physicsEngineDriver, this.m_id_mapper, this.m_stateManager); this.stateMessageHandler = new StateMessageHandler(this.m_physicsEngineDriver, this.m_id_mapper, this.m_stateManager);  // Setup subscriber try { this.m_subscriber.addTopic(MessageTopic.MOVEMENTS); this.m_subscriber.addTopic(MessageTopic.STATEUPDATES); } catch(IOException e) { Logger.getLogger(GameEngine.class).fatal(""Could not subscribe to topic "" + MessageTopic.MOVEMENTS + "".""); }  this.m_subscriber.addHandler(CollisionMessage.class, this.collisionMessageHandler); this.m_subscriber.addHandler(DamageMessage.class, this.damageMessageHandler); this.m_subscriber.addHandler(FireBulletMessage.class, this.fireBulletMessageHandler); this.m_subscriber.addHandler(KillMessage.class, this.killMessageHandler); this.m_subscriber.addHandler(MovementMessage.class, this.movementMessageHandler); this.m_subscriber.addHandler(StateMessage.class, this.stateMessageHandler);   // Setup discoverer discoveryInstance = new Instance(Type.SERVICE, Group.SERVICES, ""gameengine"" , new HashMap<>()); m_discoverer.register(discoveryInstance);  List<NodeEventHandler<AddedNode>> addHandlers = new ArrayList<>();  addHandlers.add((AddedNode addedNodeEvent) -> { DiscoveryNode node = addedNodeEvent.getNode(); DiscoveryPath path = node.getPath();  if( path.startsWith(DiscoveryPath.type(Type.DRONE)) && path.isConfigPath()) { lobbiedDrones.add(node.getId());  Logger.getLogger(GameEngine.class).info(""Added new drone in lobby "" + node.getId()); }  });  List<NodeEventHandler<RemovedNode>> removeHandlers = new ArrayList<>();  removeHandlers.add((RemovedNode removedNodeEvent) -> { DiscoveryNode node = removedNodeEvent.getNode(); DiscoveryPath path = node.getPath();  if( path.startsWith(DiscoveryPath.type(Type.DRONE)) && path.isConfigPath()) { String protocolId = node.getId();  this.m_physicsEngineDriver.removeEntity(protocolId); Logger.getLogger(GameEngine.class).info(""Removed drone "" + protocolId); } });   m_discoverer.addHandlers(true, addHandlers, Collections.emptyList(), removeHandlers);  // Setup Architecture Event listeners! m_architectureEventListener.addHandler(SimulationState.CONFIG, SimulationAction.START, SimulationState.RUNNING, (SimulationState fromState, SimulationAction action, SimulationState toState) -> { int dronesInLobby = lobbiedDrones.size(); D2Vector center = new D2Vector(arenaWidth / 2, arenaDepth / 2); float spawnRadius = Math.min(arenaDepth, arenaWidth) / 2; double spawnAngle = Math.PI / dronesInLobby;  int numberSpawned = 0; for(String protocolId : lobbiedDrones) { int gameengineId = m_id_mapper.getNewGameEngineId(); D3Vector position = new D3Vector( Math.cos(spawnAngle * numberSpawned) * spawnRadius + center.getX() , Math.sin(spawnAngle * numberSpawned) * spawnRadius + center.getY() , 50); numberSpawned++;  this.m_physicsEngineDriver.addNewEntity(new Drone(gameengineId, Drone.DRONE_MAX_HEALTH, position, new D3Vector(), new D3Vector()), protocolId); Logger.getLogger(GameEngine.class).info(""Added new drone "" + protocolId + "" as "" + gameengineId); }  // Clear lobby for next start lobbiedDrones = new ArrayList<>(); });  Logger.getLogger(GameEngine.class).info(""Started Game Engine!""); } "	0	0	1	1	0	0
@Override public final void startCast(CharacterNode cast, CharacterNode castOn) { if (cast.getType() == NodeType.PLAYER) { Optional<Animation> optional = castAnimation(); if (optional.isPresent()) { Animation animation = new Animation(optional.get().getId(), optional.get().getDelay(), AnimationPriority.NORMAL); cast.animation(animation); } } else if (castOn.getType() == NodeType.NPC) { cast.animation(new Animation(((Npc) cast).getDefinition().getAttackAnimation())); } startGraphic().ifPresent(cast::graphic);  projectile(cast, castOn).ifPresent(g -> { TaskHandler.submit(new Task(2, false) { @Override public void execute() { g.sendProjectile(); this.cancel(); } }); }); } 	0	0	1	0	1	0
"@Override public boolean onCommand(CommandSender cs, Command cmnd, String string, String[] strings) { Player p = null; try { p = (Player) cs; } catch (Exception ex) { cs.sendMessage(""Only players may use this command.""); return true; } Player user = (Player) cs; Block target = user.getTargetBlock((HashSet<Byte>) null, 100); if (target.getTypeId() == plugin.mainConfig.getInt(""tower.material"")) { if (plugin.hasPermission(user, ""cellmod.createcarrier"")) { Carrier playercarrier = plugin.getPlayerCarrier(user); if (plugin.isPlayerCarrierOwner(user, playercarrier)) { plugin.runInsertQuery(""INSERT INTO towers (BlockWorld, BlockX, BlockY, BlockZ, Carrier) VALUES ('"" + target.getWorld().getName() + ""', '"" + target.getX() + ""', '"" + target.getY() + ""', '"" + target.getZ() + ""', '"" + playercarrier.getName() + ""');""); plugin.globaltos.put(target.getLocation(), playercarrier.getName()); playercarrier.addTower(target.getLocation()); user.sendMessage(ChatColor.GREEN + plugin.languageConfig.getString(""TCreated"")); } else { user.sendMessage(ChatColor.RED + plugin.languageConfig.getString(""NoPermission"")); } } else { user.sendMessage(ChatColor.RED + plugin.languageConfig.getString(""NoPermission"")); } } else { user.sendMessage(ChatColor.RED + plugin.languageConfig.getString(""WrongBlockType"")); } return true; } "	0	0	1	0	1	0
"@Test public void test_getProcessScanner_RunTaskInBackground_ControlIfTaskWasRunningSeveralTimes() throws InterruptedException, RangeException { // Setup ProcessDelay process_delay = new ProcessDelay(new ProcessScanner(new ProcessBuilder(""ping"", ""-r"", ""10.10.10.10""), ""unreachable""), internalCounter);  // SUT Thread start_thread = new Thread(process_delay); start_thread.start(); start_thread.join();  // Result String string_result = process_delay.getProcessScanner().getOutputResultAsString(); Assert.assertTrue(string_result.contains(""unreachable"")); } "	0	0	0	1	0	0
"public static String printParameterSummary(final PlottingDetails pdp) { final StringBuilder sb = new StringBuilder();  sb.append(""Output:\n<LI>Spectra ""); switch (pdp.getPlotLimits()) { case AUTO: sb.append(""autoscaled.""); break; case USER: sb.append(""plotted over range "" + pdp.getPlotWaveL()*1000 + "" - "" + pdp.getPlotWaveU()*1000); default:   throw new Error(); } sb.append(""\n""); return sb.toString(); } "	0	0	0	0	0	1
"public static synchronized File getTempBufferDir(Configuration conf) { String[] dataDirs = conf.get(""dfs.datanode.data.dir"", ""file:///tmp/"").split("",""); double maxUsage = Double.MIN_VALUE; int n = 0; for(int i=0; i<dataDirs.length; i++) { File file = new File(new Path(dataDirs[i].trim()).toUri().getPath()); double diskUsage = 1.0 * (file.getTotalSpace() - file.getFreeSpace()) / file.getTotalSpace(); if (diskUsage > maxUsage) { n = i; maxUsage = diskUsage; } }  int idx; while (true) { int i = Math.abs(new Random(System.currentTimeMillis()).nextInt()) % dataDirs.length; if (i != n) { idx = i; break; } }  String diskPath = new Path(dataDirs[idx].trim()).toUri().getPath(); LOG.debug(""choose oss buffer dir: ""+diskPath+"", and this disk usage is: ""+maxUsage); return new File(diskPath, ""data/oss"");  } "	0	0	1	0	1	0
"public static LinkedList<String> readLineListWithLessMemory(String path) { LinkedList<String> result = new LinkedList<String>(); String line = null; try { BufferedReader bw = new BufferedReader(new InputStreamReader(new FileInputStream(path))); while ((line = bw.readLine()) != null) { result.add(line); } bw.close(); } catch (Exception e) { logger.warning(""加载"" + path + ""失败，"" + e); }  return result; } "	0	0	1	0	1	0
private static void sendHttpRedirect(ChannelHandlerContext ctx, FullHttpRequest req, String newUri) { final FullHttpResponse res = new DefaultFullHttpResponse(req.getProtocolVersion(), FOUND); HttpHeaders.setHeader(res, LOCATION, newUri); writeHttpResponse(ctx, req, res, true); } 	0	0	1	1	0	0
private void createTask(String[] words) { // convert rest of the message to the label of the task String tLabel = wordsToSentence(Arrays.copyOfRange(words, 2, words.length)); Task newT = new Task(tasks.size() + 1, tLabel); addToAdapter(newT); } 	0	0	0	1	0	0
"@Bean @ConditionalOnMissingBean(name = ""pebbleViewResolver"") public PebbleViewResolver pebbleViewResolver() { PebbleViewResolver pvr = new PebbleViewResolver(); pvr.setPebbleEngine(pebbleTemplateEngine); pvr.setPrefix(properties.getPrefix()); pvr.setSuffix(properties.getSuffix());  pvr.setContentType(properties.getContentType().toString()); pvr.setCharacterEncoding(properties.getEncoding().name()); pvr.setOrder(Ordered.LOWEST_PRECEDENCE - 5);  return pvr; } "	0	0	1	0	1	0
public void setZones(List<String> zones) { this.zones = zones; } 	0	0	1	0	1	0
private Map<TypeElement, Map<String, CodecModel>> createAllCodecModel(Lang lang) { Map<TypeElement, Map<String, CodecModel>> model = new HashMap<TypeElement, Map<String, CodecModel>>();  for (Map.Entry<TypeElement, Map<String, ExecutableElement>> entry : requestMap.entrySet()) { HashMap<String, CodecModel> map = new HashMap<String, CodecModel>(); TypeElement parent = entry.getKey(); model.put(parent, map);   for (Map.Entry<String, ExecutableElement> entrySub : entry.getValue().entrySet()) { ExecutableElement methodElement = entrySub.getValue(); CodecModel codecModel = createCodecModel(methodElement, lang); codecModel.commment = elementUtils.getDocComment(methodElement); map.put(entrySub.getKey(), codecModel); } } return model; } 	0	0	1	0	1	0
public User getUserById(final String userId) throws ServiceException { final User user = this.userDao.getByUserId(userId); final SecureUser secureUser = this.secureUserDao.getByUserId(user.getUserId());  if (StringUtils.isNotEmpty(user.getPersonalDetails().getContactNumber())) { user.getPersonalDetails().setContactNumber( this.encryptionService.decrypt(user.getPersonalDetails().getContactNumber(), secureUser.getSalt())); }  final UserStatistics userStats = this.userStatDao.getById(userId); user.setUserStatistics(userStats);  return user; } 	0	0	1	0	1	0
"@Test public void shouldDelete() throws TechnicalException { Membership membership = new Membership(""userToDelete"", ""app1"", MembershipReferenceType.APPLICATION);  membershipRepository.delete(membership);  Optional<Membership> optional = membershipRepository.findById(""userToDelete"", MembershipReferenceType.APPLICATION, ""app1""); Assert.assertFalse(""There is no membership"", optional.isPresent()); } "	0	0	1	1	1	0
private KadaneResult kadane(int arr[]){ int max = 0; int maxStart = -1; int maxEnd = -1; int currentStart = 0; int maxSoFar = 0; for(int i=0; i < arr.length; i++){ maxSoFar += arr[i]; if(maxSoFar < 0){ maxSoFar = 0; currentStart = i+1; } if(max < maxSoFar){ maxStart = currentStart; maxEnd = i; max = maxSoFar; } } return new KadaneResult(maxSoFar, maxStart, maxEnd); } 	1	0	0	1	1	0
@Override public boolean onOptionsItemSelected(final MenuItem item) { switch (item.getItemId()) { case android.R.id.home: finish(); return true;  case R.id.send_coins_options_help: HelpDialogFragment.page(getSupportFragmentManager(), R.string.help_send_coins); return true; }  return super.onOptionsItemSelected(item); } 	0	0	1	0	1	0
public synchronized void add(String method, Command command) { commands.put(method, command); } 	0	0	1	1	0	0
private void persist(CdoSnapshot snapshot) { LinkedList<CdoSnapshot> states = snapshots.get(snapshot.getGlobalId()); if (states == null){ states = new LinkedList<>(); snapshots.put(snapshot.getGlobalId(), states); }  states.push(snapshot); } 	0	0	1	0	0	0
"private void getForcePrintFormHeader(HttpServletRequest request, HttpServletResponse response) throws IOException { String formIdsStr = request.getParameter(PARAM_FORM_IDS); String locationIdStr = request.getParameter(PARAM_LOCATION_ID); String locationTagIdStr = request.getParameter(PARAM_LOCATION_TAG_ID); Integer formId = null; Integer locationId = null; Integer locationTagId = null;  if (formIdsStr == null) { log.error(""Invalid argument formId: "" + formIdsStr); response.setContentType(ChirdlUtilConstants.HTTP_CONTENT_TYPE_TEXT_XML); response.getWriter().write(""Invalid argument formId: "" + formIdsStr); return; }  List<String> errorList = new ArrayList<String>(); String[] formIds = formIdsStr.split(ChirdlUtilConstants.GENERAL_INFO_COMMA); for (String formIdStr : formIds) { try { formId = Integer.parseInt(formIdStr); } catch (NumberFormatException e) { log.error(""Invalid argument formId: "" + formIdStr); errorList.add(formIdStr); continue; }  try { locationId = Integer.parseInt(locationIdStr); } catch (NumberFormatException e) { // DWE CHICA-576 Add some additional logging StringBuilder errorMsg = new StringBuilder(); errorMsg.append(""Invalid argument locationId: "" + locationIdStr); if(formId != null) { errorMsg.append("" formId: "") .append(formId); } if(locationTagIdStr != null) { errorMsg.append("" locationTagId: "") .append(locationTagIdStr); } log.error(errorMsg.toString()); errorList.add(formIdStr); continue; }  try { locationTagId = Integer.parseInt(locationTagIdStr); } catch (NumberFormatException e) { log.error(""Invalid argument locationTagId: "" + locationTagIdStr); errorList.add(formIdStr); continue; }  ChirdlUtilBackportsService chirdlutilbackportsService = Context.getService(ChirdlUtilBackportsService.class); FormAttributeValue fav = chirdlutilbackportsService.getFormAttributeValue( formId, ChirdlUtilConstants.FORM_ATTR_OUTPUT_TYPE, locationTagId, locationId); String[] outputTypes = null; if (fav == null || fav.getValue() == null || fav.getValue().trim().length() == 0) { outputTypes = new String[] {Context.getAdministrationService().getGlobalProperty( ChirdlUtilConstants.GLOBAL_PROP_DEFAULT_OUTPUT_TYPE)}; } else { outputTypes = fav.getValue().split(ChirdlUtilConstants.GENERAL_INFO_COMMA); }  // if there's at least one PDF type, return PDF as the content type. for (String outputType : outputTypes) { outputType = outputType.trim(); if (ChirdlUtilConstants.FORM_ATTR_VAL_PDF.equalsIgnoreCase(outputType) || ChirdlUtilConstants.FORM_ATTR_VAL_TELEFORM_PDF.equals(outputType)) { response.setContentType(ChirdlUtilConstants.HTTP_CONTENT_TYPE_APPLICATION_PDF); return; } } }  response.setContentType(ChirdlUtilConstants.HTTP_CONTENT_TYPE_TEXT_XML); if (!errorList.isEmpty()) { response.getWriter().write(""There were errors encountered processing form(s).""); } } "	0	0	1	0	0	0
"@Override public void mouseDoubleClick(MouseEvent e) { System.out.println(""double-click at:"" + e); } "	0	0	1	0	0	0
"@Override public void mouseUp(MouseEvent e) { System.out.println(""up at:"" + e); } "	0	0	1	0	0	0
"public void pendingSeparatorsShouldSpawnField() throws Exception {  CsvParser parser = new CsvParser(';', '""', null);  // ""Hello"";;""World;"";"""";!; String testRow = ""\""Hello\"";;\""World;\"";\""\"";!;""; List<String> expectedResult = Arrays.asList(""Hello"", null, ""World;"", null, ""!"", null); List<String> result = parser.parse(testRow);  Assert.assertEquals(expectedResult, result); } "	0	0	1	0	1	0
"public static String getConvertFunction(MCProdSymbol symbol) { Optional<ASTLexProd> ast = symbol.getAstNode().filter(ASTLexProd.class::isInstance) .map(ASTLexProd.class::cast); return ast.isPresent()? HelperGrammar.createConvertFunction(ast.get(), prettyPrinter):""""; } "	0	0	0	0	0	1
private String getSavePath() { String path = Misc.getUserPath(customBindingsFileName); return path; } 	1	0	0	0	0	0
"@Override public void assertEvalTrue(String absCode) throws Exception { Assert.assertEquals(""true"", runAndCheck(absCode)); } "	0	0	1	1	1	0
"@Test public void testCreateServicesProvider() throws IOException { System.out.println(""createServicesProvider""); Writer writer = mock(Writer.class); when(writer.append(anyString())).thenReturn(writer); doReturn(writer).when(instance).getOpendSourceFileObjectWriter(anyString()); instance.createServicesProvider(""srv_1234"", ""json""); ArgumentCaptor<String> captureString = ArgumentCaptor.forClass(String.class); verify(writer, times(16)).append(captureString.capture()); List<String> allValues = captureString.getAllValues(); assertThat(allValues).isNotEmpty(); assertThat(allValues.get(1)).isEqualTo(""srv_1234""); assertThat(allValues.get(10)).isEqualTo(""srv_1234""); assertThat(allValues.get(12)).isEqualTo(""json""); } "	0	0	1	1	1	0
@Test public void diff() throws Exception { Assert.assertEquals(Snapshot.latestSnapshot.diff(getModifiedMap(Snapshot.latestSnapshot)).keySet().size(), 2); } 	0	0	1	0	1	0
"public String uploadMedia(int agentid, InputStream is, String fileName) throws WeixinException { byte[] content; try { content = IOUtil.toByteArray(is); } catch (IOException e) { throw new WeixinException(e); } if (StringUtil.isBlank(fileName)) { fileName = ObjectId.get().toHexString(); } String suffixName = IOUtil.getExtension(fileName); if (StringUtil.isBlank(suffixName)) { suffixName = FileUtil .getFileType(new ByteArrayInputStream(content)); fileName = String.format(""%s.%s"", fileName, suffixName); } MediaType mediaType = null; if (""bmp/png/jpeg/jpg/gif"".contains(suffixName)) { mediaType = MediaType.image; } else if (""mp3/wma/wav/amr"".contains(suffixName)) { mediaType = MediaType.voice; } else if (""rm/rmvb/wmv/avi/mpg/mpeg/mp4"".equals(suffixName)) { mediaType = MediaType.video; } else { mediaType = MediaType.file; } Token token = tokenHolder.getToken(); try { WeixinResponse response = null; if (agentid > 0) { String material_media_upload_uri = getRequestUri(""material_media_upload_uri""); response = weixinClient.post(String.format( material_media_upload_uri, token.getAccessToken(), mediaType.name(), agentid), new FormBodyPart(""media"", new InputStreamBody(new ByteArrayInputStream(content), mediaType.getContentType().getMimeType(), fileName))); } else { String file_upload_uri = getRequestUri(""file_upload_uri""); response = weixinClient.post(String.format(file_upload_uri, token.getAccessToken(), mediaType.name()), new FormBodyPart(""media"", new InputStreamBody( new ByteArrayInputStream(content), mediaType .getContentType().getMimeType(), fileName))); } return response.getAsJson().getString(""media_id""); } finally { if (is != null) { try { is.close(); } catch (IOException e) { ; } } } } "	0	0	1	1	0	0
@Override public void onClick(View v) {  title = getString(R.string.app_name);  fragment = new FilterFragment(); if (itemObjects==null){ progress.dismiss(); return; } if (itemObjects.size()==0){ itemObjects=retainItemObjects; } fragment.fetchedItemObjects(itemObjects);  FragmentManager fragmentManager = getFragmentManager(); FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction(); fragmentTransaction.replace(R.id.container_body, fragment); fragmentTransaction.commit();   } 	1	0	1	0	1	0
"@Before public void setUp() throws Exception { File piaFile = new File(PSMFiltersTest.class.getResource(""/55merge_mascot_tandem.pia.xml"").getPath());  // load the PIA XML file piaModeller = new PIAModeller(piaFile.getAbsolutePath());  // PSM level settings piaModeller.setCreatePSMSets(true); assertEquals(""createPSMSets should be true"", true, piaModeller.getCreatePSMSets());  piaModeller.getPSMModeller().setAllDecoyPattern(""Rnd_.*""); piaModeller.getPSMModeller().setAllTopIdentifications(1);  piaModeller.getPSMModeller().calculateAllFDR(); piaModeller.getPSMModeller().calculateCombinedFDRScore(); } "	0	0	1	0	1	0
"public void testPut_ComparableKey() { final boolean java6CompatibleSources = !TestUtils.isJvm() || TestUtils.getJdkVersion() < 7; TreeMap<String, Object> map = new TreeMap<String, Object>(); ConflictingKey conflictingKey = new ConflictingKey(""conflictingKey""); try { TreeMap untypedMap = map; untypedMap.put(conflictingKey, """"); assertTrue(""ClassCastException expected"", java6CompatibleSources); } catch (ClassCastException e) { assertFalse(java6CompatibleSources); } try { map.put(""something"", ""value""); assertFalse(""ClassCastException expected"", java6CompatibleSources); } catch (ClassCastException expected) { assertTrue(java6CompatibleSources); } } "	0	0	1	0	1	0
@Override public Packet getDescriptionPacket() { NBTTagCompound tagCompound = new NBTTagCompound(); writeToNBT(tagCompound); return new S35PacketUpdateTileEntity(xCoord, yCoord, zCoord, 1, tagCompound); } 	0	0	1	0	1	0
public Map<Locale, String> getName() { return Collections.unmodifiableMap(name); } 	0	0	1	0	1	0
@Override public boolean hasMore() throws IOException { return offset + position < length; } 	1	0	1	0	1	0
"@Test public void shouldNotAllowfoldersOutsideWorkingDirectory() throws Exception { String materials = ""  <materials>\n"" + ""    <svn url=\""/hgrepo2\"" dest=\""folder1/folder2/../folder3\"" />\n"" + ""  </materials>\n""; MagicalGoConfigXmlLoaderFixture.assertValid(materials); String materials2 = ""  <materials>\n"" + ""    <svn url=\""/hgrepo2\"" dest=\""../../..\"" />\n"" + ""  </materials>\n""; MagicalGoConfigXmlLoaderFixture.assertNotValid( ""File path is invalid. \""../../..\"" should conform to the pattern - ([^. ].+[^. ])|([^. ][^. ])|([^. ])"", materials2); } "	0	0	1	1	0	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);  new CustomView(this,null); //new CustomView2(this,null);  Button btn = (Button) findViewById(R.id.btn); //btn.setOnClickListener(view -> Toast.makeText(this,""哈哈"",Toast.LENGTH_LONG).show());  String s1 = getString(R.string.s1); String s3 = getString(R.string.s3); //Toast.makeText(this,""haha "" + "" | "" + s1 +  "" | "" + s3,Toast.LENGTH_LONG).show();  JavaLib javaLib = new JavaLib();  System.out.println(""==app: "" + javaLib.str);  String s2 = getString(R.string.s2); int common3str = 0; try { Class common3RClass = Class.forName(""com.dx168.fastdex.sample.common3.R$string""); Field field = common3RClass.getField(""common3str""); common3str = (Integer) field.get(null); } catch (Throwable e) { e.printStackTrace(); }  StringBuilder sb = new StringBuilder(); sb.append(JavaLib.str); sb.append(""\n""); sb.append(CommonUtils.str); sb.append(""\n""); sb.append(Common2Utils.str); sb.append(""\n""); sb.append(Common3Utils.str); sb.append(""\n""); sb.append(getResources().getString(common3str)); sb.append(""\n""); sb.append(""haha1"");  Log.d(TAG,""sb: \n"" + sb.toString()); Toast.makeText(this, sb.toString(),Toast.LENGTH_LONG).show();  new Runnable(){ @Override public void run() {  } };  SampleApplication realApp = (SampleApplication)getApplication();  new Runnable(){ @Override public void run() { //Toast.makeText(getApplicationContext(),""1223"",Toast.LENGTH_LONG).show(); } }.run(); new T1(); new T2(); } "	0	0	1	0	1	0
"@RequestMapping(method= RequestMethod.POST, value=""/awards/"", consumes = {MediaType.APPLICATION_JSON_VALUE}, produces = {MediaType.APPLICATION_JSON_VALUE}) @ResponseStatus(value = HttpStatus.CREATED) @ResponseBody AwardDto createAward(@RequestBody AwardDto awardDto) throws WorkflowException, InvocationTargetException, IllegalAccessException { commonApiService.clearErrors(); Award award = commonApiService.convertObject(awardDto, Award.class); defaultValues(award, awardDto); AwardDocument awardDocument = (AwardDocument) documentService.getNewDocument(AwardDocument.class); awardDocument.setAward(award); translateCollections(awardDto, award, awardDocument); awardService.checkAwardNumber(award); awardService.updateCurrentAwardAmountInfo(award); AwardDocument newDocument = (AwardDocument) commonApiService.saveDocument(awardDocument); AwardDto newAwardDto = commonApiService.convertObject(newDocument.getAward(), AwardDto.class); newAwardDto.setDocNbr(newDocument.getDocumentNumber()); newAwardDto.setDocStatus(newDocument.getDocumentHeader().getWorkflowDocument().getStatus().getLabel()); versionHistoryService.updateVersionHistory(award, VersionStatus.PENDING, globalVariableService.getUserSession().getPrincipalName()); awardService.updateAwardSequenceStatus(award, VersionStatus.PENDING);  AwardHierarchyBean awardHierarchyBean = new AwardHierarchyBean(); awardHierarchyBean.setRootNodes(new TreeMap<>());  awardHierarchyBean.createDefaultAwardHierarchy(Constants.AWARD_HIERARCHY_DEFAULT_PARENT_OF_ROOT, award.getAwardNumber(), award); awardHierarchyBean.saveHierarchyChanges();  RestAuditLogger auditLogger = restAuditLoggerFactory.getNewAuditLogger(AwardDto.class, awardDtoProperties); auditLogger.addNewItem(awardDto); auditLogger.saveAuditLog(); return newAwardDto; } "	1	1	1	1	0	0
public int getPolling() { if (this.polling == 0) { return (int) (HP3ParConstants.INVENTORY_LIFE / 6000); } return this.polling; } 	0	0	0	0	0	1
"@SuppressWarnings({""rawtypes"", ""unchecked""}) public static Object encode(Object value, IParseObjectEncodingStrategy objectEncoder) throws ParseException {  if (value instanceof ParseObject) { return objectEncoder.encodeRelatedObject((ParseObject) value); }  if (value instanceof byte[]) { byte[] bytes = (byte[]) value; JSONObject output = new JSONObject(); try { output.put(ParseConstants.KEYWORD_TYPE, ""Bytes""); output.put(""base64"", Base64.encode(bytes)); } catch (JSONException ex) { throw new ParseException(ParseException.INVALID_JSON, ParseException.ERR_PREPARING_REQUEST, ex); } return output; }  if (value instanceof Date) { Date dt = (Date) value; JSONObject output = new JSONObject(); try { output.put(ParseConstants.KEYWORD_TYPE, ""Date""); output.put(""iso"", Parse.encodeDate(dt)); } catch (JSONException ex) { throw new ParseException(ParseException.INVALID_JSON, ParseException.ERR_PREPARING_REQUEST, ex); } return output; }  if (value instanceof List) { JSONArray array = new JSONArray(); List list = (List) value; Iterator i = list.iterator(); while (i.hasNext()) { array.put(encode(i.next(), objectEncoder)); } return array; }  if (value instanceof JSONObject) { JSONObject map = (JSONObject) value; JSONObject json = new JSONObject(); Iterator keys = map.keys(); while (keys.hasNext()) { String key = (String) keys.next(); try { json.put(key, encode(map.opt(key), objectEncoder)); } catch (JSONException ex) { throw new ParseException(ParseException.INVALID_JSON, ParseException.ERR_PREPARING_REQUEST, ex); } } return json; }  if (value instanceof JSONArray) { JSONArray array = (JSONArray) value; JSONArray json = new JSONArray(); for (int i = 0; i < array.length(); i++) { json.put(encode(array.opt(i), objectEncoder)); } return json; }  if (value instanceof Map) { Map<String, Object> map = (Map<String, Object>) value; JSONObject json = new JSONObject(); for (String key : map.keySet()) { try { json.put(key, encode(map.get(key), objectEncoder)); } catch (JSONException ex) { throw new ParseException(ParseException.INVALID_JSON, ParseException.ERR_PREPARING_REQUEST, ex); } } return json; }  if ((value instanceof ParseRelation)) { ParseRelation relation = (ParseRelation) value; JSONObject json = null; try { json = relation.encode(objectEncoder); } catch (JSONException ex) { throw new ParseException(ParseException.INVALID_JSON, ParseException.ERR_PREPARING_REQUEST, ex); } return json; }  if (value instanceof ParseQuery) { return ((ParseQuery) value).encode(); }  if ((value instanceof ParseQuery.RelationConstraint)) { return ((ParseQuery.RelationConstraint) value).encode(objectEncoder); }  if (value instanceof ParseFile) { ParseFile file = (ParseFile) value; JSONObject output = new JSONObject(); try { output.put(ParseConstants.KEYWORD_TYPE, ""File""); output.put(""name"", file.getName()); output.put(""url"", file.getUrl()); } catch (JSONException ex) { throw new ParseException(ParseException.INVALID_JSON, ParseException.ERR_PREPARING_REQUEST, ex); } return output; }  if (value instanceof ParseGeoPoint) { ParseGeoPoint gp = (ParseGeoPoint) value; JSONObject output = new JSONObject(); try { output.put(ParseConstants.KEYWORD_TYPE, ""GeoPoint""); output.put(""latitude"", gp.getLatitude()); output.put(""longitude"", gp.getLongitude()); } catch (JSONException ex) { throw new ParseException(ParseException.INVALID_JSON, ParseException.ERR_PREPARING_REQUEST, ex); } return output; }  if (Parse.isValidType(value)) { return value; }  LOGGER.error(""Object type not decoded: "" + value.getClass().getCanonicalName()); throw new IllegalArgumentException(""Invalid type for ParseObject: "" + value.getClass().toString()); } "	0	0	1	0	0	0
"public static String makeAbsoluteUrl(@NonNull String baseUrl, @NonNull String relativePath) { // handling for protocol-relative URLs // can't remember which scenario actually produces these URLs except maybe the Markdown preview if (relativePath.startsWith(""//"")) { relativePath = ""http:"" + relativePath; }  // maybe relativePath is already absolute if (relativePath.startsWith(SCHEME_HTTP) || relativePath.startsWith(SCHEME_HTTPS)) { return relativePath; }  boolean baseHasSlash = baseUrl.endsWith(""/""); boolean relHasSlash = relativePath.startsWith(""/""); if (baseHasSlash && relHasSlash) { return baseUrl + relativePath.substring(1); } else if ((!baseHasSlash && relHasSlash) || (baseHasSlash && !relHasSlash)) { return baseUrl + relativePath; } else { return baseUrl + ""/"" + relativePath; } } "	0	0	1	0	1	0
"private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block, String clientName) throws IOException, StorageException { if (isInSafeMode()) { throw new SafeModeException(""Cannot get a new generation stamp and an "" + ""access token for block "" + block, safeMode); }  // check stored block state BlockInfo storedBlock = blockManager.getStoredBlock(ExtendedBlock.getLocalBlock(block)); if (storedBlock == null || storedBlock.getBlockUCState() != BlockUCState.UNDER_CONSTRUCTION) { throw new IOException(block + "" does not exist or is not under Construction"" + storedBlock); }  // check file inode INodeFile file = (INodeFile) storedBlock.getBlockCollection(); if (file == null || !file.isUnderConstruction()) { throw new IOException(""The file "" + storedBlock + "" belonged to does not exist or it is not under construction.""); }  // check lease INodeFileUnderConstruction pendingFile = (INodeFileUnderConstruction) file; if (clientName == null || !clientName.equals(pendingFile.getClientName())) { throw new LeaseExpiredException(""Lease mismatch: "" + block + "" is accessed by a non lease holder "" + clientName); }  return pendingFile; } "	0	0	1	0	0	0
private JSONObject getJsonBikePowerDeviceReadings(double coordTime) { JSONObject jsonHeartRateReading = null; Cursor cursor = null;  try { if (null != (cursor = mDb.fetchHeartRateDeviceValue(coordTime))) {  if (!cursor.isAfterLast()) {  int colNsCalcPower = cursor.getColumnIndex(DbAdapter.K_BP_CALC_POWER_NUM_SAMPLES); int colAvgCalcPower = cursor.getColumnIndex(DbAdapter.K_BP_CALC_POWER_AVG); int colSsdCalcPower = cursor.getColumnIndex(DbAdapter.K_BP_CALC_POWER_SSD);  int colNsCalcTorque = cursor.getColumnIndex(DbAdapter.K_BP_CALC_TORQUE_NUM_SAMPLES); int colAvgCalcTorque = cursor.getColumnIndex(DbAdapter.K_BP_CALC_TORQUE_AVG); int colSsdCalcTorque = cursor.getColumnIndex(DbAdapter.K_BP_CALC_TORQUE_SSD);  int colNsCalcCrankCadence = cursor.getColumnIndex(DbAdapter.K_BP_CALC_CRANK_CADENCE_NUM_SAMPLES); int colAvgCalcCrankCadence = cursor.getColumnIndex(DbAdapter.K_BP_CALC_CRANK_CADENCE_AVG); int colSsdCalcCrankCadence = cursor.getColumnIndex(DbAdapter.K_BP_CALC_CRANK_CADENCE_SSD);  int colNsCalcWheelSpeed = cursor.getColumnIndex(DbAdapter.K_BP_CALC_WHEEL_SPEED_NUM_SAMPLES); int colAvgCalcWheelSpeed = cursor.getColumnIndex(DbAdapter.K_BP_CALC_WHEEL_SPEED_AVG); int colSsdCalcWheelSpeed = cursor.getColumnIndex(DbAdapter.K_BP_CALC_WHEEL_SPEED_SSD);  int colNsCalcWheelDistance = cursor.getColumnIndex(DbAdapter.K_BP_CALC_WHEEL_DISTANCE_NUM_SAMPLES); int colAvgCalcWheelDistance = cursor.getColumnIndex(DbAdapter.K_BP_CALC_WHEEL_DISTANCE_AVG); int colSsdCalcWheelDistance = cursor.getColumnIndex(DbAdapter.K_BP_CALC_WHEEL_DISTANCE_SSD);  jsonHeartRateReading = new JSONObject(); jsonHeartRateReading.put(TRIP_COORD_BP_NS_CALC_POWER, cursor.getInt(colNsCalcPower)); jsonHeartRateReading.put(TRIP_COORD_BP_AVG_CALC_POWER, cursor.getDouble(colAvgCalcPower)); jsonHeartRateReading.put(TRIP_COORD_BP_SSD_CALC_POWER, cursor.getDouble(colSsdCalcPower));  jsonHeartRateReading.put(TRIP_COORD_BP_NS_CALC_TORQUE, cursor.getInt(colNsCalcTorque)); jsonHeartRateReading.put(TRIP_COORD_BP_AVG_CALC_TORQUE, cursor.getDouble(colAvgCalcTorque)); jsonHeartRateReading.put(TRIP_COORD_BP_SSD_CALC_TORQUE, cursor.getDouble(colSsdCalcTorque));  jsonHeartRateReading.put(TRIP_COORD_BP_NS_CALC_CRANK_CADENCE, cursor.getInt(colNsCalcCrankCadence)); jsonHeartRateReading.put(TRIP_COORD_BP_AVG_CALC_CRANK_CADENCE, cursor.getDouble(colAvgCalcCrankCadence)); jsonHeartRateReading.put(TRIP_COORD_BP_SSD_CALC_CRANK_CADENCE, cursor.getDouble(colSsdCalcCrankCadence));  jsonHeartRateReading.put(TRIP_COORD_BP_NS_CALC_WHEEL_SPEED, cursor.getInt(colNsCalcWheelSpeed)); jsonHeartRateReading.put(TRIP_COORD_BP_AVG_CALC_WHEEL_SPEED, cursor.getDouble(colAvgCalcWheelSpeed)); jsonHeartRateReading.put(TRIP_COORD_BP_SSD_CALC_WHEEL_SPEED, cursor.getDouble(colSsdCalcWheelSpeed));  jsonHeartRateReading.put(TRIP_COORD_BP_NS_CALC_WHEEL_DISTANCE, cursor.getInt(colNsCalcWheelDistance)); jsonHeartRateReading.put(TRIP_COORD_BP_AVG_CALC_WHEEL_DISTANCE, cursor.getDouble(colAvgCalcWheelDistance)); jsonHeartRateReading.put(TRIP_COORD_BP_SSD_CALC_WHEEL_DISTANCE, cursor.getDouble(colSsdCalcWheelDistance)); } } } catch (Exception ex) { Log.e(MODULE_TAG, ex.getMessage()); } finally { if (null != cursor) { cursor.close(); } } return jsonHeartRateReading; } 	0	0	1	0	1	0
"private String unparseArray(T array) { StringBuilder str = new StringBuilder(""[""); Iterator<T> elements = toList(array).iterator(); while (elements.hasNext()) { str.append(unparse(elements.next())); if (elements.hasNext()) { str.append("",""); } } str.append(""]""); return str.toString(); } "	0	0	0	1	0	0
"private static SourceModule resolveService(List<AliasDefinition> aliasDefinitions, SourceModule serviceSourceModule, BundlableNode bundlableNode) { for (AliasDefinition aliasDefinition : aliasDefinitions) { String serviceRequireSuffix = serviceSourceModule.getPrimaryRequirePath().replaceFirst(""service!"", """");  if (aliasDefinition.getName().equals(serviceRequireSuffix)) { Asset asset =  bundlableNode.asset(aliasDefinition.getRequirePath()); if (asset instanceof SourceModule) { return (SourceModule) asset; } } } return null; } "	1	0	0	0	1	0
public static void main(String[] args) throws ClassNotFoundException, UnsupportedLookAndFeelException, InstantiationException, IllegalAccessException { JFrame frame = new ProxyDialog(); } 	1	0	0	0	0	0
"private void applyCreateLike(Schema newSchema, Database d) throws SchemaSyncError { Database sourceDB = newSchema.findDatabase(likeDB);  if ( sourceDB == null ) throw new SchemaSyncError(""Couldn't find database "" + likeDB);  Table sourceTable = sourceDB.findTable(likeTable); if ( sourceTable == null ) throw new SchemaSyncError(""Couldn't find table "" + likeDB + ""."" + sourceTable);  Table t = sourceTable.copy(); t.rename(this.tableName); d.addTable(t); } "	0	0	1	0	1	0
private boolean isShowing() { return getParent() != null; } 	0	0	1	1	0	0
"public TypeEntry addTypeEntry(Class clss) {  TypeEntry previousDef=getTypeEntry(clss.name); if(previousDef!=null){ String errorMsg=""ERROR: multiple definitions of class \""""+clss.name+""\""""; String note=""note: first defined in line: ""+previousDef.getEntryClass().line; handleSemanticError(errorMsg+""\n""+note,clss.line); }  TypeEntry typeEntry = new TypeEntry(typeTable.size(), clss.name, clss); if(clss.extends_name!=null){ TypeEntry extendsTypeEntry= getTypeEntry(clss.extends_name); if(extendsTypeEntry!=null) { Validator.validateLibraryInstantiation(typeEntry, this, clss.line); Class extendsClass=extendsTypeEntry.getEntryClass(); if(!extendsClass.isSealed){ typeEntry.expandScope(extendsTypeEntry); } else{ handleSemanticError(""can not extend form class"" + clss.extends_name,clss.line); }  } else { handleSemanticError(""class \""""+clss.extends_class.name +""\"" is undefined, classes can only extend previously defined classes"",clss.line); } }  addTypeEntry(typeEntry); return typeEntry; } "	0	0	1	0	1	0
@Nonnull public SMap add (@Nonnull final String sName, final int nValue) { return add (sName, Integer.toString (nValue)); } 	0	0	0	1	0	0
@Nonnull public SMap add (@Nonnull final String sName, @Nonnull final Object aValue) { return add (sName, TypeConverter.convertIfNecessary (aValue, String.class)); } 	0	0	1	1	0	0
"@Override @Deprecated @DevelopersNote (""Use add instead - only for API compliance!"") public String put (@Nonnull final String sName, @Nonnull final String sValue) { return super.put (sName, sValue); } "	0	0	1	1	0	0
@Nonnull public SMap add (@Nonnull final String sName, @Nullable final String sValue) { super.put (sName, sValue); return this; } 	0	0	0	1	0	0
@Nonnull public SMap addIfNotNull (@Nonnull final String sName, @Nonnull final Object aValue) { return addIfNotNull (sName, TypeConverter.convertIfNecessary (aValue, String.class)); } 	0	0	1	1	0	0
"@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {  /* Inflate the view, pull out UI elements */ View myFragmentView = inflater.inflate(R.layout.trader_frag, container, false); assert myFragmentView != null; mNameEditText = (AutoCompleteTextView) myFragmentView.findViewById(R.id.namesearch); mNumberEditText = (EditText) myFragmentView.findViewById(R.id.numberInput); mCheckboxFoil = (CheckBox) myFragmentView.findViewById(R.id.trader_foil); mTotalPriceRight = (TextView) myFragmentView.findViewById(R.id.priceTextRight); mTotalPriceLeft = (TextView) myFragmentView.findViewById(R.id.priceTextLeft);  /* Set the autocomplete adapter, default number */ mNameEditText.setAdapter(new AutocompleteCursorAdapter(this, new String[]{CardDbAdapter.KEY_NAME}, new int[]{R.id.text1}, mNameEditText)); mNumberEditText.setText(""1"");  /* Initialize the left list */ mLeftList = new ArrayList<>(); mLeftAdapter = new TradeListAdapter(this.getActivity(), mLeftList); ListView lvTradeLeft = (ListView) myFragmentView.findViewById(R.id.tradeListLeft); lvTradeLeft.setAdapter(mLeftAdapter); lvTradeLeft.setOnItemClickListener(new AdapterView.OnItemClickListener() { public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) { showDialog(TradeDialogFragment.DIALOG_UPDATE_CARD, LEFT, arg2); } });  /* Initialize the right list */ mRightList = new ArrayList<>(); mRightAdapter = new TradeListAdapter(this.getActivity(), mRightList); ListView lvTradeRight = (ListView) myFragmentView.findViewById(R.id.tradeListRight); lvTradeRight.setAdapter(mRightAdapter); lvTradeRight.setOnItemClickListener(new AdapterView.OnItemClickListener() { public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) { showDialog(TradeDialogFragment.DIALOG_UPDATE_CARD, RIGHT, arg2); } });  /* Set the buttons to add cards to the left or right */ myFragmentView.findViewById(R.id.addCardLeft).setOnClickListener(new View.OnClickListener() { public void onClick(View v) { addCardToTrade(LEFT); } }); myFragmentView.findViewById(R.id.addCardRight).setOnClickListener(new View.OnClickListener() { public void onClick(View v) { addCardToTrade(RIGHT); } });  lvTradeLeft.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() { @Override public boolean onItemLongClick(AdapterView<?> adapterView, View view, int position, long id) { /* Remove the card */ mLeftList.remove(position); /* Redraw this side */ mLeftAdapter.notifyDataSetChanged(); UpdateTotalPrices(LEFT); return true; } });  lvTradeRight.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() { @Override public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) { /* Remove the card */ mRightList.remove(position); /* Redraw this side */ mRightAdapter.notifyDataSetChanged(); UpdateTotalPrices(RIGHT); return true; } });  myFragmentView.findViewById(R.id.camera_button).setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { getFamiliarActivity().startTutorCardsSearch(); } });  mCheckboxFoil.setOnLongClickListener(new View.OnLongClickListener() { @Override public boolean onLongClick(View v) { /* Lock the checkbox when the user long clicks it */ mCheckboxFoilLocked = true; mCheckboxFoil.setChecked(true); return true; } });  mCheckboxFoil.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { if (!isChecked) { /* Unlock the checkbox when the user unchecks it */ mCheckboxFoilLocked = false; } } });  /* Return the view */ return myFragmentView; } "	0	0	0	0	0	1
@Override public void download(OutputStream outputStream, Set<CodingSchemeReference> codingSchemes, Set<CodingSchemeReference> excludedCodingSchemes, List<String> fields, char separator) { ResolvedConceptReferencesIterator itr;  if(CollectionUtils.isEmpty(codingSchemes)){ codingSchemes = null; }  try { itr = searchExtension.search(null, codingSchemes, excludedCodingSchemes, MatchAlgorithm.LUCENE); } catch (LBParameterException e) { throw new RuntimeException(e); }  this.doWrite(outputStream, new ResolvedConceptReferencesIteratorAdapter(itr), separator, fields); } 	1	0	1	0	1	0
public static boolean respawnPlayerCorrectly(Player p) { return respawnPlayerCorrectly(p, null); } 	1	0	1	0	1	0
@Override @Transactional public synchronized void delete(Iterable<? extends ArtifactEntry> var1) { repository.delete(var1); } 	0	0	1	1	0	0
@Override @Transactional public synchronized void delete(ArtifactEntry var1) { repository.delete(var1); } 	0	0	1	1	0	0
"private ArtifactCoordinates createMavenArtifactCoordinates() {  return new MavenArtifactCoordinates(""org.carlspring.strongbox.another.package"", ""coordinates-test-super-test"", ""1.2.3"", null, ""jar""); } "	0	0	1	1	0	0
"@Test void testMultipleMarginalized() { double[] gd_marginalized = new double[]{0.60, 0.40};  discreteFactor.marginalize(new String[]{""D"", ""G""}, true);  Assertions.assertArrayEquals(new String[]{""I""}, discreteFactor.getScope()); Assertions.assertArrayEquals(new int[]{2}, discreteFactor.getCardinality()); Assertions.assertArrayEquals(gd_marginalized, discreteFactor.getValues(), threshold); } "	0	0	1	0	1	0
private static User populateUserDo(com.app.pte.api.user.User user, boolean addFlow) { User userDo = new User(); userDo.setFirstName(user.getFirstName()); userDo.setLastName(user.getLastName()); userDo.setActive(user.isActive()); userDo.setRole(user.getAuthLevel()); userDo.setUserId(user.getUserId()); userDo.setLastModifiedDate(new Date()); if(addFlow) { userDo.setCreatedDate(new Date()); UserToken userToken = getUserToken(user.getPassword()); userToken.setUser(userDo); userDo.setUserToken(userToken); }  return userDo; } 	1	0	0	0	1	0
"public void putUnsignedByte(short data){ if(data < UNSIGNED_BYTE_MIN_VALUE || data > UNSIGNED_BYTE_MAX_VALUE){ throw new IllegalArgumentException(""Value is outside of the range of an unsigned byte.""); }  putByte(data); } "	0	0	1	0	1	0
"private void load() throws SkyConfigurationException { if (configFile == null) { configFile = plugin.getDataFolder().toPath().resolve(""locations.yml""); } storage = YamlConfiguration.loadConfiguration(configFile.toFile()); int configVersion = storage.getInt(""storage-specification-version""); if (configVersion > 1) { throw new SkyConfigurationException(""Unknown configuration version for locations.yml. Did you downgrade? If so, delete or move locations.yml to reset.""); } Object lobbyO = storage.get(""lobby""); if (lobbyO != null) { if (lobbyO instanceof SkyBlockLocation) { lobbyPosition = new SkyPlayerLocation((SkyBlockLocation) lobbyO); } else if (lobbyO instanceof SkyPlayerLocation) { lobbyPosition = (SkyPlayerLocation) lobbyO; } else { plugin.getLogger().log(Level.WARNING, ""Expected SkyBlockLocation, found {} as lobby in {}! Removing item from config file."", new Object[]{lobbyO, configFile}); } } else { List<World> worlds = Bukkit.getWorlds(); if (worlds.isEmpty()) { lobbyPosition = new SkyPlayerLocation(0, 0, 0, Statics.ARENA_WORLD_NAME); } else { Location spawn = worlds.get(0).getSpawnLocation(); lobbyPosition = new SkyPlayerLocation(spawn); } } List<?> portalList = storage.getList(""portals""); if (portalList != null) { for (Object obj : portalList) { if (obj instanceof SkyBlockLocation) { portals.add((SkyBlockLocation) obj); } else { plugin.getLogger().log(Level.WARNING, ""Expected SkyBlockLocation, found {} in portals list in {}! Removing item from config file."", new Object[]{obj, configFile}); } } } List<?> signList = storage.getList(""signs""); if (signList != null) { for (Object object : signList) { if (object instanceof SkyBlockLocation) { signs.add((SkyBlockLocation) object); } else { plugin.getLogger().log(Level.WARNING, ""Expected SkyBlockLocation, found {} in signs list in {}! Removing item from config file."", new Object[]{object, configFile}); } } } } "	1	0	0	0	0	0
"public static Response newFixedLengthResponse(IStatus status, String mimeType, String message) { Response response = NanoHTTPD.newFixedLengthResponse(status, mimeType, message); response.addHeader(""Accept-Ranges"", ""bytes""); return response; } "	1	0	1	1	1	0
@Test public void linkedListWithCycle() throws IOException { final Token token = new LinkedList(enc()); final Environment env = stream(0, 4, 1, 21, 0, 0, 1); final ParseResult res = token.parse(env, enc()); Assert.assertTrue(res.succeeded()); final ParseGraph out = res.getEnvironment().order; Assert.assertEquals(1, out.getRefs().size);  final ParseGraph first = out.head.asGraph(); checkBranch(first, 0, 4);  final ParseGraph second = first.tail.head.asGraph().head.asGraph().head.asGraph(); checkBranch(second, 4, 0);  final ParseRef ref = second.tail.head.asGraph().head.asRef(); checkBranch(ref.resolve(out), 0, 4); // Check cycle } 	1	0	1	1	1	0
"@Override public void setParameters() { String output_stem = Files.getNameWithoutExtension(this.inputfile.get(0)); String output = getOutputfolder()+""/""+output_stem+""rmdup.MarkD.bam""; String metricsout = getOutputfolder()+""/""+output_stem+"".markdup.metrics""; this.parameters = new String[]{""picard"", ""MarkDuplicates"", ""INPUT=""+this.inputfile.get(0), ""OUTPUT=""+ output, ""REMOVE_DUPLICATES=TRUE"", ""AS=TRUE"", ""METRICS_FILE="" + metricsout, ""VALIDATION_STRINGENCY=SILENT""}; this.outputfile = new ArrayList<>(); this.outputfile.add(output); } "	0	0	1	0	1	0
private void setPlayerArea() {  playerArea.setLayout(new BoxLayout(playerArea,BoxLayout.Y_AXIS)); PlayerPanel players[] = new PlayerPanel[NUM_PLAYER]; for (int i=0;i<NUM_PLAYER;i++){ players[i] = new PlayerPanel(); players[i].setPreferredSize(new Dimension(7*ratio,9*ratio/NUM_PLAYER));  playerArea.add(players[i]); } } 	1	0	1	1	1	0
"private Map<String, List<FileReference>> getUploads(String plugId) throws JobExecutionException { Map<String, List<FileReference>> resultList = new HashMap<String, List<FileReference>>(); IMdekCallerQuery mdekCallerQuery = this.connectionFacade.getMdekCallerQuery();  if (mdekCallerQuery == null) { return resultList; }  // get uploads from working copies and published objects String[] fks = new String[]{""objId"", ""objIdPublished""}; for (String fk : fks) { String qString = ""select fdLink.data, fdLink.parentFieldId, fdLink.sort, "" + "" obj.objName, obj.objUuid, "" + "" fdRoot.fieldKey, fdPhase.fieldKey, fdPhase.fieldKey, fdDocs.fieldKey, fdLink.sort "" + ""from ObjectNode oNode, "" + "" T01Object obj, "" + "" AdditionalFieldData fdRoot, "" + "" AdditionalFieldData fdPhase, "" + "" AdditionalFieldData fdDocs, "" + "" AdditionalFieldData fdLink "" + ""where "" + "" oNode.""+fk+"" = obj.id "" + "" and obj.id = fdRoot.objId"" + "" and fdRoot.id = fdPhase.parentFieldId"" + "" and fdPhase.id = fdDocs.parentFieldId"" + "" and fdDocs.id = fdLink.parentFieldId"" + "" and fdLink.fieldKey = 'link'""; IngridDocument response = mdekCallerQuery.queryHQLToMap(plugId, qString, null, """"); if (response.getBoolean(IJobRepository.JOB_INVOKE_SUCCESS)) { IngridDocument result = MdekUtils.getResultFromResponse(response); if (result != null) { @SuppressWarnings(""unchecked"") List<IngridDocument> objs = (List<IngridDocument>) result.get(MdekKeys.OBJ_ENTITIES); if (objs != null) { for (IngridDocument objEntity : objs) { String file = objEntity.getString(""fdLink.data""); String path = objEntity.getString(""obj.objName"") + ""("" + objEntity.getString(""obj.objUuid"") + "")/"" + objEntity.getString(""fdRoot.fieldKey"") + ""/"" + objEntity.getString(""fdPhase.fieldKey"") + ""/"" + objEntity.getString(""fdDocs.fieldKey"") + ""/"" + objEntity.getInt(""fdLink.sort""); String date = null;  // select expiry date (might not exist) // NOTE: this is done in an extra query since HQL does not support // left outer joins on unrelated tables in the used version Long parentId = objEntity.getLong(""fdLink.parentFieldId""); Integer sort = objEntity.getInt(""fdLink.sort""); String qStringSub = ""select fdExpires.data "" + ""from ObjectNode oNode, "" + "" T01Object obj, "" + "" AdditionalFieldData fdRoot, "" + "" AdditionalFieldData fdPhase, "" + "" AdditionalFieldData fdDocs, "" + "" AdditionalFieldData fdExpires "" + ""where "" + "" oNode.""+fk+"" = obj.id "" + "" and obj.id = fdRoot.objId"" + "" and fdRoot.id = fdPhase.parentFieldId"" + "" and fdPhase.id = fdDocs.parentFieldId"" + "" and fdDocs.id = fdExpires.parentFieldId"" + "" and fdExpires.parentFieldId = ""+parentId+ "" and fdExpires.sort = ""+sort+ "" and fdExpires.fieldKey = 'expires'""; IngridDocument responseSub = mdekCallerQuery.queryHQLToMap(plugId, qStringSub, null, """"); if (responseSub.getBoolean(IJobRepository.JOB_INVOKE_SUCCESS)) { IngridDocument resultSub = MdekUtils.getResultFromResponse(responseSub); if (resultSub != null) { @SuppressWarnings(""unchecked"") List<IngridDocument> objsSub = (List<IngridDocument>) resultSub.get(MdekKeys.OBJ_ENTITIES); if (objsSub != null && objsSub.size() == 1) { date = objsSub.get(0).getString(""fdExpires.data""); } } }  // create file reference FileReference reference = new FileReference( file, path, date != null ? LocalDate.parse(date, dateFormatter) : null ); if (!resultList.containsKey(file)) { List<FileReference> references = new ArrayList<FileReference>(); references.add(reference); resultList.put(file, references); } else { resultList.get(file).add(reference); } } } } } else { throw new JobExecutionException(response.getString(""job_invoke_error_message"")); } }  return resultList; } "	0	0	1	0	0	0
"@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack, EntityPlayer player, List list, boolean b) { //How to use info String translation = Colors.DARK_GREY.code + LanguageUtility.getLocal(getUnlocalizedName() + "".info""); list.add(translation);  if (stack.getItemDamage() != ExplosiveItems.FRAGMENT.ordinal()) { //What is ""it"" info final String translationKey = getUnlocalizedName(stack) + "".info""; translation = LanguageUtility.getLocal(translationKey); if (!translation.isEmpty() && !translation.equals(translationKey)) { if (translation.contains("","")) { String[] split = translation.split("",""); for (String s : split) { list.add(s.trim()); } } else { list.add(translation); } } }  //Custom info for biome change if (stack.getItemDamage() == ExplosiveItems.BIOME_CHANGE.ordinal()) { int id = ExBiomeChange.getBiomeID(stack); if (id >= 0) { list.add(Colors.RED.code + LanguageUtility.getLocal(getUnlocalizedName() + "".WIP.info"")); list.add(Colors.RED.code + LanguageUtility.getLocal(getUnlocalizedName() + "".warning.WIP.info""));  translation = LanguageUtility.getLocal(getUnlocalizedName(stack) + "".name.info""); translation = translation.replace(""%1"", """" + (BiomeGenBase.getBiome(id) == null ? Colors.RED.code + ""Error"" : BiomeGenBase.getBiome(id).biomeName)); list.add(translation); } }  //Unique info for fragments if (stack.getItemDamage() == ExplosiveItems.FRAGMENT.ordinal()) { list.add(Colors.RED.code + LanguageUtility.getLocal(getUnlocalizedName() + "".warning.breaksBlocks.info"")); final FragBlastType type = ExFragment.getFragmentType(stack); if (type == FragBlastType.ARROW) { translation = LanguageUtility.getLocal(getUnlocalizedName(stack) + "".info""); translation = translation.replace(""%1"", """" + BlastArrows.ARROWS); list.add(translation); } else if (type == FragBlastType.BLAZE) { translation = LanguageUtility.getLocal(getUnlocalizedName(stack) + "".info""); translation = translation.replace(""%1"", """" + BlastArrows.ARROWS); list.add(translation); } else { translation = LanguageUtility.getLocal(getUnlocalizedName() + "".fragment.info""); list.add(translation); if (type.blockMaterial != null) { translation = LanguageUtility.getLocal(getUnlocalizedName() + "".fragment.damage.info""); translation = translation.replace(""%1"", """" + (type.blockMaterial.blockHardness * BlastFragments.START_VELOCITY)); list.add(translation); } int count = stack.stackSize * (int) ExplosiveItems.FRAGMENT.sizePerUnit; translation = LanguageUtility.getLocal(getUnlocalizedName() + "".fragment.frags.info""); translation = translation.replace(""%1"", """" + count); list.add(translation);  if (Engine.proxy.isShiftHeld()) { list.add(LanguageUtility.getLocal(getUnlocalizedName() + "".fragment.damage.equation.info""));  translation = LanguageUtility.getLocal(getUnlocalizedName() + "".fragment.velocity.equation.info""); translation = translation.replace(""%1"", """" + BlastFragments.START_VELOCITY); list.add(translation);  translation = LanguageUtility.getLocal(getUnlocalizedName() + "".fragment.frags.equation.info""); translation = translation.replace(""%1"", """" + ExplosiveItems.FRAGMENT.sizePerUnit); list.add(translation); } else { translation = LanguageUtility.getLocal(""item.tooltip.description.more""); translation = translation.replace(""%key"", Colors.AQUA.code + ""SHIFT""); list.add(translation); } } } else { if (Engine.proxy.isShiftHeld()) { //Custom info for biome change if (stack.getItemDamage() == ExplosiveItems.BIOME_CHANGE.ordinal()) { int id = ExBiomeChange.getBiomeID(stack); if (id >= 0) { translation = LanguageUtility.getLocal(getUnlocalizedName(stack) + "".id.info""); translation = translation.replace(""%1"", """" + id); list.add(translation); } } IExplosiveHandler handler = getExplosive(stack);  translation = LanguageUtility.getLocal(getUnlocalizedName() + "".explosive.name.info""); translation = translation.replace(""%1"", """" + LanguageUtility.getLocal(handler.getTranslationKey())); list.add(translation);  translation = LanguageUtility.getLocal(getUnlocalizedName() + "".explosive.size.info""); translation = translation.replace(""%1"", """" + ((int) ((ExplosiveItems.values()[stack.getItemDamage()].sizePerUnit * handler.getYieldModifier()) * 100) / 100)); list.add(translation); } else { translation = LanguageUtility.getLocal(""item.tooltip.description.more""); translation = translation.replace(""%key"", Colors.AQUA.code + ""SHIFT""); list.add(translation); } } } "	0	0	0	0	0	1
"public boolean modify(int index, Task modifiedTask){ if (index >= taskList.size()){ return false; } prevTask = taskList.get(index); prevCmd = ""mod""; taskList.set(index, modifiedTask); JsonProcessor.writeJson(lastPath, taskList); return true; } "	1	0	1	1	1	0
public void add2Top(T data) { mDataHolder.add2Top(data); notifyItemInserted(0); } 	0	0	0	0	0	1
public ConnectFuture getConnectFuture() throws IOException { return connectFuture; } 	0	0	1	0	0	0
"@Test public void testStartCommand() { final VirtualMachineTO vmSpec = Mockito.mock(VirtualMachineTO.class); final com.cloud.host.Host host = Mockito.mock(com.cloud.host.Host.class); final boolean executeInSequence = false;  final StartCommand command = new StartCommand(vmSpec, host, executeInSequence);  final KvmStoragePoolManager storagePoolMgr = Mockito.mock(KvmStoragePoolManager.class); final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class); final Connect conn = Mockito.mock(Connect.class); final LibvirtVmDef vmDef = Mockito.mock(LibvirtVmDef.class); final VirtualRoutingResource virtRouterResource = Mockito.mock(VirtualRoutingResource.class);  final NicTO nic = Mockito.mock(NicTO.class); final NicTO[] nics = new NicTO[]{nic};  final String vmName = ""Test""; final String controlIp = ""127.0.0.1"";  when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(storagePoolMgr); when(vmSpec.getNics()).thenReturn(nics); when(vmSpec.getType()).thenReturn(VirtualMachine.Type.DomainRouter); when(vmSpec.getName()).thenReturn(vmName); when(libvirtComputingResource.createVmFromSpec(vmSpec)).thenReturn(vmDef);  when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper); try { when(libvirtUtilitiesHelper.getConnectionByType(vmDef.getHvsType())).thenReturn(conn); doNothing().when(libvirtComputingResource).createVbd(conn, vmSpec, vmName, vmDef); } catch (final LibvirtException e) { fail(e.getMessage()); } catch (final InternalErrorException e) { fail(e.getMessage()); } catch (final URISyntaxException e) { fail(e.getMessage()); }  when(storagePoolMgr.connectPhysicalDisksViaVmSpec(vmSpec)).thenReturn(true); try { doNothing().when(libvirtComputingResource).createVifs(vmSpec, vmDef);  when(libvirtComputingResource.startVm(conn, vmName, vmDef.toString())).thenReturn(""SUCCESS"");  when(vmSpec.getBootArgs()).thenReturn(""ls -lart""); when(libvirtComputingResource.passCmdLine(vmName, vmSpec.getBootArgs())).thenReturn(true);  when(nic.getIp()).thenReturn(controlIp); when(nic.getType()).thenReturn(TrafficType.Control); when(libvirtComputingResource.getVirtRouterResource()).thenReturn(virtRouterResource); when(virtRouterResource.connect(controlIp, 1, 5000)).thenReturn(true); } catch (final InternalErrorException e) { fail(e.getMessage()); } catch (final LibvirtException e) { fail(e.getMessage()); }  final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance(); assertNotNull(wrapper);  final Answer answer = wrapper.execute(command, libvirtComputingResource); assertTrue(answer.getResult());  verify(libvirtComputingResource, times(1)).getStoragePoolMgr(); verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper(); try { verify(libvirtUtilitiesHelper, times(1)).getConnectionByType(vmDef.getHvsType()); } catch (final LibvirtException e) { fail(e.getMessage()); } } "	0	0	0	0	0	1
"static ResultReturner forMethod(Class<?> extensionType, Method method) { Type returnType = GenericTypes.resolveType(method.getGenericReturnType(), extensionType); Class<?> returnClass = GenericTypes.getErasedType(returnType); if (Void.TYPE.equals(returnClass)) { throw new IllegalStateException(String.format( ""Method %s#%s is annotated as if it should return a value, but the method is void."", method.getDeclaringClass().getName(), method.getName())); } else if (ResultIterable.class.isAssignableFrom(returnClass)) { return new ResultIterableResultReturner(returnType); } else if (Stream.class.isAssignableFrom(returnClass)) { return new StreamReturner(returnType); } else if (Iterator.class.isAssignableFrom(returnClass)) { return new IteratorResultReturner(returnType); } else if (method.isAnnotationPresent(SingleValue.class)) { return new SingleValueResultReturner(returnType); } else if (returnClass.isArray()) { return new ArrayResultReturner(returnClass.getComponentType()); } else { return new DefaultResultReturner(returnType); } } "	1	0	1	0	1	0
"boolean parseImportDeclaration() { final Marker m = enter_section_modified(builder); if (!tokenCheck(""singleImport"")) { cleanup(m, IMPORT_DECLARATION); return false; } final boolean si = parseSingleImport(); if (!si) { cleanup(m, IMPORT_DECLARATION); return false; } if (currentIs(tok("":""))) parseImportBindings(!si); else { if (currentIs(tok("",""))) { advance(); while (moreTokens()) { final boolean single = parseSingleImport(); if (!single) { cleanup(m, IMPORT_DECLARATION); return false; } if (currentIs(tok("":""))) { parseImportBindings(!single); break; } else { if (currentIs(tok("",""))) advance(); else break; } } } } if (!tokenCheck("";"")) { cleanup(m, IMPORT_DECLARATION); return false; } exit_section_modified(builder, m, IMPORT_DECLARATION, true); return true; } "	0	0	1	0	1	0
boolean concernsSupercircuit() { switch (type) { case CLEAR: return true; case ADD: case REMOVE: return comp.getFactory() instanceof Pin; case ADD_ALL: case REMOVE_ALL: for (Component comp : comps) { if (comp.getFactory() instanceof Pin) return true; } return false; case REPLACE: ReplacementMap repl = (ReplacementMap) newValue; for (Component comp : repl.getRemovals()) { if (comp.getFactory() instanceof Pin) return true; } for (Component comp : repl.getAdditions()) { if (comp.getFactory() instanceof Pin) return true; } return false; case SET: return comp.getFactory() instanceof Pin && (attr == StdAttr.WIDTH || attr == Pin.ATTR_TYPE); case SET_FOR_CIRCUIT : return (attr == CircuitAttributes.NAME_ATTR || attr == CircuitAttributes.NAMED_CIRCUIT_BOX); default: return false; } } 	0	0	0	0	0	1
public CommandInterface getCommand(String input) throws InvalidInputException { CommandInterface result = null; InputSplitter splitter = new InputSplitter(input); String command = splitter.next();  CommandType commandType = AliasHandler.normalize(command); switch (commandType) { case ADD: result = new AddCommand(userInterface, collection, currentState, splitter.remainder()); break; case SEARCH: result = new SearchCommand(userInterface, collection, splitter.remainder()); break; case LIST: result = new ListCommand(userInterface, collection, currentState, splitter.remainder()); break; case MARK: result = new MarkCommand(userInterface, collection, currentState, normalizeIndexInput(splitter.remainder())); break; case EDIT: result = new EditCommand(userInterface, collection, currentState, normalizeIndexInput(splitter.next()), splitter.remainder()); break; case DELETE: result = new DeleteCommand(userInterface, collection, currentState, normalizeIndexInput(splitter.remainder())); break; case SET: result = new SetCommand(userInterface, collection, splitter.next(), splitter.remainder()); break; case ALIAS: result = new AliasCommand(userInterface, collection, splitter.next(), splitter.remainder()); break; case HELP: result = new HelpCommand(userInterface, collection, splitter.remainder()); break; case TUTORIAL: result = new TutorialCommand(userInterface, collection); break; case EXIT: result = new ExitCommand(userInterface, collection); break; default: // probably an invalid command result = new InvalidCommand(userInterface, collection); break; } return result; } 	1	0	1	0	1	0
"protected String removeRandomValues(String currentTopo) { // removes all random values return currentTopo .replaceAll(""\""(hostName)\"":\""[^\""]*\"""", ""\""$1\"":\""<hostname>\"""") .replaceAll(""\""hostAddress\"":[^,]*"", ""\""hostAddress\"":\""127\\.0\\.0\\.1\"""") .replaceAll(""\""bindPort\"":[0-9]+"", ""\""bindPort\"":0"") .replaceAll(""\""groupPort\"":[0-9]+"", ""\""groupPort\"":0"") .replaceAll(""\""port\"":[0-9]+"", ""\""port\"":0"") .replaceAll(""\""activateTime\"":[0-9]+"", ""\""activateTime\"":0"") .replaceAll(""\""time\"":[0-9]+"", ""\""time\"":0"") .replaceAll(""\""startTime\"":[0-9]+"", ""\""startTime\"":0"") .replaceAll(""\""upTimeSec\"":[0-9]+"", ""\""upTimeSec\"":0"") .replaceAll(""\""id\"":\""[0-9]+@[^:]*:([^:]*):[^\""]*\"",\""pid\"":[0-9]+"", ""\""id\"":\""0@127.0.0.1:$1:<uuid>\"",\""pid\"":0"") .replaceAll(""\""alias\"":\""[0-9]+@[^:]*:([^:]*):[^\""]*\"","", ""\""alias\"":\""0@127.0.0.1:$1:<uuid>\"","") .replaceAll(""\""buildId\"":\""[^\""]*\"""", ""\""buildId\"":\""Build ID\"""") .replaceAll(""\""version\"":\""[^\""]*\"""", ""\""version\"":\""<version>\"""") .replaceAll(""\""clientId\"":\""[0-9]+@[^:]*:([^:]*):[^\""]*\"""", ""\""clientId\"":\""0@127.0.0.1:$1:<uuid>\"""") .replaceAll(""\""logicalConnectionUid\"":\""[^\""]*\"""", ""\""logicalConnectionUid\"":\""<uuid>\"""") .replaceAll(""\""id\"":\""[^\""]*\"",\""logicalConnectionUid\"":\""[^\""]*\"""", ""\""id\"":\""<uuid>:SINGLE:testServer0:127.0.0.1:0\"",\""logicalConnectionUid\"":\""<uuid>\"""") .replaceAll(""\""vmId\"":\""[^\""]*\"""", ""\""vmId\"":\""0@127.0.0.1\"""") .replaceAll(""testServer1"", ""testServer0""); } "	0	0	1	1	0	0
"@Test public void testStringFeature() throws Exception { List<String> x = Arrays.asList(""1:-2"", ""2:-1""); ObjectInspector featureOI = PrimitiveObjectInspectorFactory.javaStringObjectInspector; testFeature(x, featureOI, String.class); } "	0	0	1	1	1	0
@Test public void testWritableLongFeature() throws Exception { List<LongWritable> x = Arrays.asList(new LongWritable(111L), new LongWritable(222L)); ObjectInspector featureOI = PrimitiveObjectInspectorFactory.writableLongObjectInspector; testFeature(x, featureOI, LongWritable.class); } 	0	0	1	0	1	0
"@Override public void onDisconnect(ConnectionEvent event) { try {  String desc = ""NATS Connection disconnected.""; logger.debug(desc);  plugin.onNATSEvent(NATSEvent.DISCONNECTED, desc); } catch (Exception e) { logger.error(""Runtime exception in plugin method OnNATSEvent (CLOSED): "", e); } } "	0	0	1	0	1	0
public int value() { return value(); } 	1	0	1	0	1	0
@Override public GameState finish(Integer team) { return this; } 	0	0	0	1	0	0
"private void loadUserData() { /** * 获取用户的关注列表。 * * @param uid           the UID need to search * @param count         The number of records returned by a single page，default is 50，max 200 * @param cursor        return cursor，The next page uses the next_cursor in the return value，previous page uses previous_cursor，default is 0 * @param trim_status    The status field switch in the return value default is true * @param listener      Asynchronous request callback interface */  mFriendshipsAPI.friends(mUid, 50, 0, true, new WeiboRequestListener(mMainActivity) { @Override public void onComplete(String response) { super.onComplete(response); if (!TextUtils.isEmpty(response)) { if (response.startsWith(""{\""users\"""")) { Log.i(""................"", response); mUserList = mUserList.parse(response); mPersonalCenterAdapter = new PersonalCenterAdapter(mMainActivity, mUserList.userList); mFollowList.setAdapter(mPersonalCenterAdapter); } } } });  mUsersAPI.counts(mUids, new WeiboRequestListener(mMainActivity) { @Override public void onComplete(String response) { super.onComplete(response); Log.i(""................"", response); if (!TextUtils.isEmpty(response)) { mUserCounts = mUserCounts.parse(response); mPersonalCenterAdapter.setmUserCounts(mUserCounts).setCounts(mView); Log.d(TAG, ""mUserCounts: "" + mUserCounts.followers_count); } } }); mUsersAPI.show(mUid,new WeiboRequestListener(mMainActivity) { @Override public void onComplete(String response) { super.onComplete(response); Log.i("".....user screen name"", response); user = user.parse(response); Log.i("".....user"", String.valueOf(user)); mPersonalCenterAdaper.setUserInfo(user).holderLoginData(mView,user); } }); } "	0	0	1	0	1	0
@CodeTranslate public void invokeMethodWithBooleanReturn() { boolean res = someMethodWithBooleanReturn(); } 	1	0	1	1	0	0
public byte[] getBytes() { if (bytes == null) { return null; } else { return bytes.clone(); } } 	1	0	1	0	1	0
"public synchronized void activate(ChannelHandlerContext ctx) { if (!isRunning) { this.ctx = ctx; this.timerTask = timer.scheduleAtFixedRate(() -> { try { nudgeQueue(); } catch (Throwable t) { logger.error(""Exception in MessageQueue"", t); } }, Config.NET_MAX_QUEUE_RATE, Config.NET_MAX_QUEUE_RATE, TimeUnit.MILLISECONDS);  this.isRunning = true; } } "	0	0	1	1	0	0
"private void sendResult(ICommandSender player, String modid, String result) { player.addChatMessage(new ChatComponentText(String.format(TTCore.lang.localize(""command.config.result."" + result), modid))); } "	0	0	1	1	1	0
@Override public void onCreate() { super.onCreate(); SnackbarManager.init(getApplicationContext(),SnackbarConfiguration.configure(new SnackbarConfiguration.Builder() .gravity(SnackbarConfiguration.Gravity.GRAVITY_TOP) .type(SnackbarConfiguration.SnackbarType.SINGLE_SNACKBAR))); } 	0	0	1	1	0	0
@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { TextureView previewView = new TextureView(getActivity());  previewView.setSurfaceTextureListener(this);  return previewView; } 	1	0	1	1	1	0
"@Override public void validate(ValidationContext context) {  logger.info(""Validating Institutions..."");  String domain = null;  MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters(); List<FormMessage> errors = new ArrayList<>();  logger.info(""Form Data: "" + formData);  String instFieldVal = formData.getFirst(FIELD_INSTITUTIONS); if (Validation.isBlank(instFieldVal)) { errors.add(new FormMessage(FIELD_INSTITUTIONS, MISSING_INSTITUTION_MESSAGE)); context.validationError(formData, errors); context.error(Errors.INVALID_REGISTRATION);  return; }  try { String[] instIds = instFieldVal.split("",""); String email = formData.getFirst(RegistrationPage.FIELD_EMAIL); domain = email.split(""@"")[1];  logger.info(""Email Domain: "" + domain);   Set<Institution> domainInsts = findInstitutionsByDomain(domain);  if (domainInsts.isEmpty()) { errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, UNKNOWN_EMAIL_DOMAIN_MESSAGE, domain)); context.validationError(formData, errors); context.error(Errors.INVALID_REGISTRATION); return; }  for (String instId : instIds) { Institution inst = getInstitution(instId);  if (inst == null) { errors.add(new FormMessage(FIELD_INSTITUTIONS, UNKNOWN_INSTITUTION_MESSAGE)); }  if (!domainInsts.contains(inst)) { errors.add(new FormMessage(FIELD_INSTITUTIONS, INVALID_INSTITUTION_MESSAGE, inst.getName(), domain)); } }  } catch (Exception e) { logger.error(""Error occurred while validating institution(s) against \"""" + domain + ""\"" domain"", e); errors.add(new FormMessage(FIELD_INSTITUTIONS, INSTITUTION_ERROR_MESSAGE, domain)); }  if (errors.isEmpty()) { context.success(); } else { context.validationError(formData, errors); context.error(Errors.INVALID_REGISTRATION); }  } "	1	0	1	0	0	0
"public void addSeries() {  List<XYChart.Series<Number, Number>> list = new LinkedList<>(); for (String aFilter : filter) { XYChart.Series<Number, Number> series = new XYChart.Series<>(); series.setName(getName() + ""/"" + aFilter + ""/"" + LocalTime.now().toString()); list.add(series); } filterSeries.add(list);  } "	0	0	1	0	1	0
"@Override public Application update(Application application) throws TechnicalException { LOGGER.debug(""Update Application [{}]"", application.getId());  Statement update = QueryBuilder.update(APPLICATIONS_TABLE) .with(set(""name"", application.getName())) .and(set(""description"", application.getDescription())) .and(set(""type"", application.getType())) .and(set(""created_at"", application.getCreatedAt())) .and(set(""updated_at"", application.getUpdatedAt())) .and(set(""group"", application.getGroup())) .and(set(""status"", application.getStatus().toString())) .where(eq(""id"", application.getId()));  session.execute(update);  return findById(application.getId()).orElse(null); } "	0	0	1	0	0	0
"@Test public void testInvalidJson() { JsonMessageObject invalidObject = validator.validate(""{\""invalidfield\"":\""invalid_value\""}"");  assertTrue(true); } "	0	0	1	0	1	0
"public GTFSFeed get (String id) { try { return cache.get(id); } catch (ExecutionException e) { LOG.info(""Error loading local MapDB."", e); deleteLocalDBFiles(id); return null; } } "	0	0	1	0	1	0
"public Result update() { JsonNode data = request().body().asJson(); String id = data.get(""id"").asText(); String name = data.get(""name"").asText(); int valueDelay = data.get(""valueDelay"").asInt(); KeywordProject project = keywordProjectService.get(id,""show_action"",""value_delay"");  if (name.equals(project.getString(""name""))) { if((project.getValueDelay() == valueDelay)) { return status(304); } } project.put(""name"", name); project.setValueDelay(valueDelay); keywordProjectService.update(project);  return status(202, id); } "	0	0	1	1	1	0
@Nullable public static ImageProperty getImageProperty(@NonNull List<? extends ImageProperty> images, int width, int height) { Collections.sort(images, new ImagePropertyComparator());  if (images.size() == 0) { return null; }  if (width == 0 && height == 0) { if (UiSettings.getInstance().getContentSize() == ContentSize.SMALL) { return images.get(0); } else if (UiSettings.getInstance().getContentSize() == ContentSize.LARGE) { return images.get(images.size() - 1); }  return images.get((int)Math.max(Math.ceil((double)images.size() / 2d), images.size() - 1)); } else { int closest = 0; for (int index = 0, count = images.size(); index < count; index++) { int imageWidth = images.get(index).getDimensions().getWidth(); int imageHeight = images.get(index).getDimensions().getHeight();  if (width >= imageWidth && height >= imageHeight) { closest = index; } }  return images.get(closest); } } 	0	0	1	0	1	0
"private void handleStartTag(String tag, Attributes attributes) { if (tag.equalsIgnoreCase(""br"")) { // We don't need to handle this. TagSoup will ensure that there's a // </br> for each <br> // so we can safely emite the linebreaks when we handle the close // tag. } else if (tag.equalsIgnoreCase(""p"")) { handleP(mSpannableStringBuilder); } else if (tag.equalsIgnoreCase(""div"")) { handleP(mSpannableStringBuilder); } else if (tag.equalsIgnoreCase(""strong"")) { start(mSpannableStringBuilder, new Bold()); } else if (tag.equalsIgnoreCase(""b"")) { start(mSpannableStringBuilder, new Bold()); } else if (tag.equalsIgnoreCase(""em"")) { start(mSpannableStringBuilder, new Italic()); } else if (tag.equalsIgnoreCase(""cite"")) { start(mSpannableStringBuilder, new Italic()); } else if (tag.equalsIgnoreCase(""dfn"")) { start(mSpannableStringBuilder, new Italic()); } else if (tag.equalsIgnoreCase(""i"")) { start(mSpannableStringBuilder, new Italic()); } else if (tag.equalsIgnoreCase(""big"")) { start(mSpannableStringBuilder, new Big()); } else if (tag.equalsIgnoreCase(""small"")) { start(mSpannableStringBuilder, new Small()); } else if (tag.equalsIgnoreCase(""font"")) { startFont(mSpannableStringBuilder, attributes); } else if (tag.equalsIgnoreCase(""blockquote"")) { handleP(mSpannableStringBuilder); start(mSpannableStringBuilder, new Blockquote()); } else if (tag.equalsIgnoreCase(""tt"")) { start(mSpannableStringBuilder, new Monospace()); } else if (tag.equalsIgnoreCase(""a"")) { startA(mSpannableStringBuilder, attributes, mBaseUri); } else if (tag.equalsIgnoreCase(""span"") && attributes.getValue(""class"").equals(""user-mention"")) { startSpan(mSpannableStringBuilder, attributes); } else if (tag.equalsIgnoreCase(""u"")) { start(mSpannableStringBuilder, new Underline()); } else if (tag.equalsIgnoreCase(""sup"")) { start(mSpannableStringBuilder, new Super()); } else if (tag.equalsIgnoreCase(""sub"")) { start(mSpannableStringBuilder, new Sub()); } else if (tag.equalsIgnoreCase(""code"")) { start(mSpannableStringBuilder, new InlineCode()); } else if (tag.equalsIgnoreCase(""pre"")) { start(mSpannableStringBuilder, new CodeBlock()); } else if (tag.length() == 2 && Character.toLowerCase(tag.charAt(0)) == 'h' && tag.charAt(1) >= '1' && tag.charAt(1) <= '6') { handleP(mSpannableStringBuilder); start(mSpannableStringBuilder, new Header(tag.charAt(1) - '1')); } else if (tag.equalsIgnoreCase(""img"")) { String cssClass = attributes.getValue("""", ""class""); if (cssClass != null && cssClass.equals(""emoji"")) { startImg(mSpannableStringBuilder, attributes, mEmojiGetter); } else { startImg(mSpannableStringBuilder, attributes, mImageGetter); } } else if (mTagHandler != null) { mTagHandler.handleTag(true, tag, mSpannableStringBuilder, mReader); } } "	0	0	1	1	0	0
@Override protected Locale determineDefaultLocale(final HttpServletRequest request) { final Locale locale = request.getLocale(); if (StringUtils.isBlank(casProperties.getLocale().getDefaultValue()) || locale.getLanguage().equals(casProperties.getLocale().getDefaultValue())) { return locale; } return new Locale(casProperties.getLocale().getDefaultValue()); } 	1	1	1	1	0	0
public long getWaitPhoneHomeTimeoutMs() { if (0 < waitPhoneHomeTimeout) { return waitPhoneHomeTimeout * 60000; } return 0; } 	0	0	1	0	1	0
public static String getNewText() { return newText; } 	0	0	1	0	0	0
public boolean isSubtype(Type parent, Type child) { // A :> B iff (!A & B) == void return isVoid(false, parent, true, child); } 	0	0	1	0	1	0
"private Filter parse(String s) { String[] p = s.split("":"", 2); // System.out.println(""PARSE: "" + s + "" > "" + p[0] + "", "" + p[1]); if (p.length == 2) { String type = p[0].toLowerCase(); if (!validFilterType(type)) { return null; } String parameter = p[1].replaceAll(""[\""'`;]+|--"", "" "") .replaceAll("" +"", "" "").trim();  // validation, cleaning where needed if (""cpv"".equals(type)) { parameter = parameter.replaceAll(""[^0-9,]"", """"); if (!parameter.matches(""\\d{8}(,\\d{8})*"")) { return null; }  } else if (""date"".equals(type)) { if (parameter.matches(""\\d{4}-\\d{2}-\\d{2}"")) { parameter = String.format(""%s:%s"", parameter, parameter); } if (!parameter .matches(""\\d{4}-\\d{2}-\\d{2}:\\d{4}-\\d{2}-\\d{2}"")) { return null; }  } else if (""doc"".equals(type)) { parameter = parameter.toUpperCase(); if (!parameter.matches(""[A-Z0-9]"")) { return null; }  } else if (""flags"".equals(type) || ""value"".equals(type)) { parameter = parameter.replaceAll(""[^0-9\\-]"", """"); if (parameter.matches(""\\d+"")) { parameter = String.format(""%s-%s"", parameter, parameter); } if (!parameter.matches(""\\d+-\\d+"")) { return null; }  } else if (""indicators"".equals(type)) { parameter = parameter.replaceAll(""[\\[\\] ]"", """"); if (""null"".equals(parameter) || !parameter.matches(""[A-Za-z0-9]+(,[A-Za-z0-9]+)*"")) { return null; }  } else if (""after"".equals(type)) { if (!parameter.matches(""\\d{1,7}-2\\d{3}"")) { return null; }  }  if (!parameter.isEmpty()) { return new Filter(type, parameter); } } return null; } "	0	0	1	1	0	0
@Hide(OS.NT) public static void lchmod(PyObject path, int mode) { if (posix.lchmod(absolutePath(path), mode) < 0) { throw errorFromErrno(path); } } 	0	0	0	1	1	0
@Hide(OS.NT) public static String readlink(PyObject path) { try { return posix.readlink(absolutePath(path)); } catch (IOException ioe) { throw Py.OSError(ioe); } } 	1	0	1	0	1	0
@Hide(OS.NT) public static void lchown(PyObject path, int uid, int gid) { if (posix.lchown(absolutePath(path), uid, gid) < 0) { throw errorFromErrno(path); } } 	0	0	0	1	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_add_school_subject);  mDatabase =  FirebaseDatabase.getInstance().getReference();  schoolSubjectAuto = (AutoCompleteTextView) this.findViewById(R.id.schoolSubjectAutoCompleteTextView); schoolSubjects = (ListView) this.findViewById(R.id.schoolSubjectListView);  SharedPreferences prefs = getSharedPreferences(MY_PREFS_NAME, MODE_PRIVATE); schoolSubjectList = prefs.getStringSet(""schoolSubject"", null);  if(schoolSubjectList != null) { List<String> list = new ArrayList<String>(schoolSubjectList); ArrayAdapter<String> adapter = new ArrayAdapter<String>(context, android.R.layout.simple_list_item_1,  list); schoolSubjects.setAdapter(adapter); }  addListAutocomplete();  schoolSubjects.setOnItemClickListener(new AdapterView.OnItemClickListener() {  public void onItemClick(final AdapterView<?> parent, View view, final int position, long id) {  AlertDialog.Builder builder; builder = new AlertDialog.Builder(context);  builder.setTitle(""delete"") .setMessage(""do not want to follow "" + parent.getItemAtPosition(position).toString() + "" anymore?"") .setPositiveButton(""yes"", new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int which) { SharedPreferences.Editor editor = getSharedPreferences(MY_PREFS_NAME, MODE_PRIVATE).edit(); schoolSubjectList.remove(parent.getItemAtPosition(position).toString());  editor.putStringSet(""schoolSubject"", schoolSubjectList); editor.apply();  List<String> list = new ArrayList<String>(schoolSubjectList); ArrayAdapter<String> adapter = new ArrayAdapter<String>(context, android.R.layout.simple_list_item_1,  list); schoolSubjects.setAdapter(adapter); } }) .setNegativeButton(""no"", new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int which) {  } }) .setIcon(android.R.drawable.ic_dialog_alert) .show(); } });    } "	1	0	1	1	1	0
"public ContentValues createPlaceValues () { ContentValues testValues = new ContentValues(); testValues.put(AvBContract.PlaceEntry.COLUMN_PLACE_ID, GOOGLEPLACESID); testValues.put(AvBContract.PlaceEntry.COLUMN_ADRESS, ""Rua João Neves""); testValues.put(AvBContract.PlaceEntry.COLUMN_DATE_TIME, ""20150225 14:45""); testValues.put(AvBContract.PlaceEntry.COLUMN_STATUS, ""up""); testValues.put(AvBContract.PlaceEntry.COLUMN_PHONE, ""51 4321-0293""); testValues.put(AvBContract.PlaceEntry.COLUMN_OPEN_HOURS, ""08:00 - 17:00""); return testValues; } "	0	0	1	1	0	0
"@Test public void shouldOrderedAlphabeticallyWildcardResources() throws IOException { final ThreadLocal<Collection<String>> filenameListHolder = new ThreadLocal<Collection<String>>(); final UriLocator uriLocator = createJarLocator(filenameListHolder); uriLocator.locate(""classpath:com/**.css""); final Collection<String> filenameList = filenameListHolder.get(); Assert.assertNotNull(filenameList); Assert.assertEquals(Arrays.toString(new String[] { ""com/app/level1/level2/styles/style.css"", ""com/app/level1/level2/level2.css"", ""com/app/level1/level1.css"" }), Arrays.toString(filenameList.toArray())); } "	0	0	1	0	1	0
"public void testBulkProcessorWaitOnClose() throws Exception { BulkProcessorTestListener listener = new BulkProcessorTestListener();  int numDocs = randomIntBetween(10, 100); BulkProcessor processor = BulkProcessor.builder(client(), listener).setName(""foo"") //let's make sure that the bulk action limit trips, one single execution will index all the documents .setConcurrentRequests(randomIntBetween(0, 1)).setBulkActions(numDocs) .setFlushInterval(TimeValue.timeValueHours(24)).setBulkSize(new ByteSizeValue(randomIntBetween(1, 10), RandomPicks.randomFrom(random(), ByteSizeUnit.values()))) .build();  MultiGetRequestBuilder multiGetRequestBuilder = indexDocs(client(), processor, numDocs); assertThat(processor.isOpen(), is(true)); assertThat(processor.awaitClose(1, TimeUnit.MINUTES), is(true)); if (randomBoolean()) { // check if we can call it multiple times if (randomBoolean()) { assertThat(processor.awaitClose(1, TimeUnit.MINUTES), is(true)); } else { processor.close(); } } assertThat(processor.isOpen(), is(false));  assertThat(listener.beforeCounts.get(), greaterThanOrEqualTo(1)); assertThat(listener.afterCounts.get(), greaterThanOrEqualTo(1)); assertThat(listener.bulkFailures.size(), equalTo(0)); assertResponseItems(listener.bulkItems, numDocs); assertMultiGetResponse(multiGetRequestBuilder.get(), numDocs); } "	0	0	1	0	0	0
public int onDoStartTag() throws JspException {  String p = getPermission();  boolean show = showTagBody( p ); if ( show ) { return TagSupport.EVAL_BODY_INCLUDE; } else { return TagSupport.SKIP_BODY; } } 	0	0	1	0	1	0
"private RObject createRedissonObject(RedissonReference rr, Class expected) throws Exception { if (rr.getType() != null) { for (Method method : RedissonClient.class.getDeclaredMethods()) { if (method.getName().startsWith(""get"") && method.getReturnType().isAssignableFrom(rr.getType()) && method.getReturnType().isAssignableFrom(expected)) { if (rr.isDefaultCodec() && method.getParameterCount() == 1) { return (RObject) method.invoke(redisson, rr.getKeyName()); } else if (!rr.isDefaultCodec() && method.getParameterCount() == 2 && String.class.equals(method.getParameterTypes()[0]) && Codec.class.equals(method.getParameterTypes()[1])) { return (RObject) method.invoke(redisson, rr.getKeyName(), codecProvider.getCodec(rr.getCodecType())); } } } } throw new ClassNotFoundException(""No RObject is found to match class type of "" + rr.getTypeName() + "" with codec type of "" + rr.getCodecName()); } "	1	1	1	1	0	0
"@Before public void init() throws Exception { TitleLookup tl = mock(TitleLookup.class); when(tl.getDatasetTitle(Matchers.<String>any())).thenReturn(""The little Mermaid""); when(tl.getSpeciesName(Matchers.<String>any())).thenReturn(""Abies alba Mill."");  query = ""{\""type\"":\""and\"",\""predicates\"":[{\""type\"":\""or\"",\""predicates\"":[{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""4408732\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2490613\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2494708\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""5231198\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2490669\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2492606\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2492371\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2494642\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""5231209\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""5231190\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2494155\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2491557\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2490604\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2491506\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2482501\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""5229493\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2491544\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2491534\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2490681\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2492462\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2494422\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2482492\""}]},{\""type\"":\""within\"",\""geometry\"":\""POLYGON((-10.063476 43.992814,-10.063476 35.889050,5.317382 35.889050,5.317382 43.992814,-10.063476 43.992814))\""},{\""type\"":\""or\"",\""predicates\"":[{\""type\"":\""equals\"",\""key\"":\""COUNTRY\"",\""value\"":\""PT\""},{\""type\"":\""equals\"",\""key\"":\""COUNTRY\"",\""value\"":\""ES\""}]}]}""; } "	0	0	1	1	1	0
"@Override public void iniciarCapitulo(Capitulo c) throws Exception { String data = new Navegador().get(c.getPath()); String paginas = getFirstMacth(""\""\\d+\"">(\\d+)</option>	</select>"", data, ""Error: no se pudo obtener el numero de paginas""); c.setPaginas(Integer.parseInt(paginas)); } "	0	0	1	1	0	0
@Override public NBTTagCompound writeToNBT(NBTTagCompound compound){ this.writeSyncableNBT(compound, NBTType.SAVE_TILE); return compound; } 	0	0	1	1	0	0
protected String[] walkTokens() throws IOException { List<String> wordList = new ArrayList<>(); while (input.incrementToken()) { CharTermAttribute textAtt = input.getAttribute(CharTermAttribute.class); OffsetAttribute offsetAtt = input.getAttribute(OffsetAttribute.class); char[] buffer = textAtt.buffer(); String word = null; try { word = new String(buffer, 0, offsetAtt.endOffset() - offsetAtt.startOffset()); } catch (StringIndexOutOfBoundsException ioe) { LOG.error(ioe.toString()); //TODO: just quick fix! ziqi pls check, example data for testing is A00-1002_cln.xml. see #25 word = ((PackedTokenAttributeImpl) offsetAtt).toString(); }  wordList.add(word);  AttributeSource attrs = input.cloneAttributes(); tokenAttrs.add(attrs); } String[] words = new String[wordList.size()]; for (int i = 0; i < words.length; i++) { words[i] = wordList.get(i); } return words; } 	0	0	1	0	1	0
"EMPreferences createPreferences(Properties props) { final EMPreferences emPrefs = new EMPreferences();  if(props != null) { final String[] musicDirs = getStringArray(props, EMPreferencesKey.MUSIC_DIRECTORIES); final String metaflac = props.getProperty(EMPreferencesKey.METAFLAC.toString()); final String dbHome = props.getProperty(EMPreferencesKey.DATABASE_HOME.toString()); final Boolean dbRollback = getBoolean(props, EMPreferencesKey.DATABASE_ROLLBACK); final Integer serverPort = getInteger(props, EMPreferencesKey.SERVER_PORT); final String logFile = props.getProperty(EMPreferencesKey.LOG_FILE.toString()); final StringBuilder log = new StringBuilder();  emPrefs.setMusicDirectories(musicDirs); emPrefs.setMetaFLACCommand(metaflac); emPrefs.setDatabaseHome(dbHome); emPrefs.setDatabaseRollback(dbRollback); emPrefs.setServerPort(serverPort); emPrefs.setLogFile(logFile);  log.append(""=== Loaded Preferences ===\n""); log.append(""Music Directories: "").append(Arrays.toString(musicDirs)).append('\n'); log.append(""MetaFLAC Command:  "").append(metaflac).append('\n'); log.append(""Database Home:     "").append(dbHome).append('\n'); log.append(""Database Rollback: "").append(dbRollback).append('\n'); log.append(""Server Port:       "").append(serverPort).append('\n'); log.append(""Log File:          "").append(logFile).append('\n'); log.append(""===== End Preferences ===="").append('\n'); LOG.info(log.toString()); }  return emPrefs; } "	0	0	1	1	0	0
"@XmlElement(name = ""tag-value"") public List<ODTagValue> getTagValues() { return tagValues; } "	0	0	1	1	0	0
"public final static boolean isEnabled() { boolean isEnabled = false;  String runAs = new ContextProperties().getProperty(""run.as""); if (""REMOTE"".equals(runAs)) { isEnabled = true; }  return isEnabled; } "	0	0	1	1	1	0
"@Override public void initialize() throws InitializationException { try { Config config = m_configDao.findByName(CONFIG_NAME, ConfigEntity.READSET_FULL); String content = config.getContent();  m_company = DefaultSaxParser.parse(content); m_configId = config.getId(); m_modifyTime = config.getModifyDate().getTime(); } catch (DalNotFoundException e) { try { String content = Files.forIO().readFrom( this.getClass().getResourceAsStream(""/config/default-product-line-config.xml""), ""utf-8""); Config config = m_configDao.createLocal();  config.setName(CONFIG_NAME); config.setContent(content); m_configDao.insert(config);  m_company = DefaultSaxParser.parse(content); m_configId = config.getId(); m_modifyTime = config.getModifyDate().getTime(); } catch (Exception ex) { Cat.logError(ex); } } catch (Exception e) { Cat.logError(e); } if (m_company == null) { m_company = new Company(); } m_domainToProductLines = buildDomainToProductLines(); } "	0	0	1	0	1	0
private DpsAnalysis analyzeDps(ChampionInfo info, Build b, GamePhase gamePhase) throws JSONException { b.clearActiveSkills();  Skill[] skills = info.getRawSkills();  DpsAnalysis analysis = new DpsAnalysis(); Scaling scaling = new Scaling();  analysis.bonuses.clear();  int skillIndex = 0; for (Skill s: skills) { List<JSONArray> found = s.getAnalysisMethod(Method.METHOD_DPS);  boolean passive = s instanceof Passive; int skillRank = gamePhase.skillRank[skillIndex++]; if (!passive && skillRank == 0) continue;  for (JSONArray a : found) { int idx = 0;  int method = a.getInt(idx++); int baseMethod = method & Method.BASE_METHOD_MASK; int scalings = a.getInt(idx++); int dpsStats = a.getInt(idx++); int skillRanks = s.ranks;  int levelSegs = 0; boolean levelDivided = false; if (passive) { levelSegs = a.getInt(idx++); if (levelSegs == 0) { skillRanks = 1; } else { skillRanks = levelSegs; levelDivided = true; } } else { skillRanks = s.ranks; }  double[] a1 = new double[scalings]; String[] a2 = new String[scalings];  for (int j = 0; j < dpsStats; j++) { double base = 0; for (int k = 0; k < skillRanks; k++) { if (levelDivided) { int level = a.getInt(idx++);  if (gamePhase.level >= level) { // if player level is greater than level for this base stat... base = a.getDouble(idx++); } else { idx++; } } else { int rank = k + 1; if (skillRank >= rank) { // if skill rank is great than or equal to this rank stat... // the reason why we do greater than or equal to is so that // we have have a unified END_GAME GamePhase object base = a.getDouble(idx++); } else { idx++; } } }  for (int k = 0; k < scalings; k++) { idx = parseScaling(a, idx, skillRanks, skillRank, scaling);  if ((int)scaling.scaling == Method.SPECIAL_USE_BASE_AS_SCALING) { a1[k] = base; base = 0; } else { a1[k] = scaling.scaling; }  a2[k] = scaling.type; }  String bonusType = a.getString(idx++);  for (int k = 0; k < scalings; k++) { analysis.skills.add(b.addActiveSkill(s, 0, a1[k], a2[k], bonusType)); }  if (base != 0) analysis.skills.add(b.addActiveSkill(s, base, 0, Build.SN_NULL, bonusType)); } } }  double[] rawStats = b.calculateStatWithActives(gamePhase.gold, gamePhase.level);  analysis.as = rawStats[Build.STAT_AS]; analysis.damagePerAa = rawStats[Build.STAT_TOTAL_AD] + rawStats[Build.STAT_AA_TRUE_DAMAGE] + rawStats[Build.STAT_AA_MAGIC_DAMAGE]; analysis.dps = analysis.as * analysis.damagePerAa; analysis.range = rawStats[Build.STAT_TOTAL_RANGE];  analysis.bonuses.clear();  for (BuildSkill sk : analysis.skills) { if (sk.totalBonus == 0) continue;  StatBonus bonus = new StatBonus(); bonus.name = sk.skill.name; bonus.value = sk.totalBonus; bonus.statTypeId = sk.bonusTypeId;  analysis.bonuses.add(bonus); }  return analysis; } 	0	0	0	0	0	1
@Override public boolean isIncoming() { return !outgoingRequest; } 	0	0	1	1	0	0
@Override public double getPhenotypeScore() { return this.phenotypeScore; } 	0	0	1	1	0	0
@Override public boolean isOutgoing() { return outgoingRequest; } 	0	0	1	1	0	0
@Override public void onBackPressed() { newEventForm.cancelEvent(); } 	1	0	0	0	1	0
"private void handleFoundMatches( Intent intent ) { Timber.d(""FOUND_MATCHES"");  // extract join request and offer from message long queryId = Long.parseLong( intent.getExtras().getString(GcmConstants.GCM_MSG_FOUND_MATCHES_QUERY_ID) );  // download the join trip request tripsResource.getQuery(queryId) .observeOn(Schedulers.io()) .subscribeOn(AndroidSchedulers.mainThread()) .subscribe( new Action1<RunningTripQuery>() { @Override public void call(RunningTripQuery query) {  final SharedPreferences prefs = getApplicationContext().getSharedPreferences(Constants.SHARED_PREF_FILE_PREFERENCES, Context.MODE_PRIVATE); SharedPreferences.Editor editor = prefs.edit(); editor.putBoolean(Constants.SHARED_PREF_KEY_SEARCHING, false); editor.putBoolean(Constants.SHARED_PREF_KEY_ACCEPTED, false); editor.putLong(Constants.SHARED_PREF_KEY_QUERY_ID, -1); editor.apply();  Bundle extras = new Bundle(); extras.putDouble(JoinDispatchFragment.KEY_CURRENT_LOCATION_LATITUDE, query.getQuery().getStartLocation().getLat()); extras.putDouble(JoinDispatchFragment.KEY_CURRENT_LOCATION_LONGITUDE, query.getQuery().getStartLocation().getLng()); extras.putDouble(JoinDispatchFragment.KEY_DESTINATION_LATITUDE, query.getQuery().getDestinationLocation().getLat()); extras.putDouble(JoinDispatchFragment.KEY_DESTINATION_LONGITUDE, query.getQuery().getDestinationLocation().getLng()); extras.putInt(JoinDispatchFragment.KEY_MAX_WAITING_TIME, (int) query.getQuery().getMaxWaitingTimeInSeconds());  if(LifecycleHandler.isApplicationInForeground()) { Intent startingIntent = new Intent(Constants.EVENT_CHANGE_JOIN_UI); startingIntent.putExtras(extras); LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(startingIntent); } else { // create notification for the user Intent startingIntent = new Intent(getApplicationContext(), MainActivity.class); startingIntent.putExtras(extras); PendingIntent contentIntent = PendingIntent.getActivity(getApplicationContext(), 0, startingIntent, PendingIntent.FLAG_UPDATE_CURRENT); createNotification(getString(R.string.found_matches_title), getString(R.string.found_matches_msg), GcmConstants.GCM_NOTIFICATION_FOUND_MATCHES_ID , contentIntent); } } }, new Action1<Throwable>() { @Override public void call(Throwable throwable) { Timber.e(""Something went wrong when downloading join request: "" + throwable.getMessage()); } }); } "	1	0	0	1	0	0
"private EditorDescriptor getDatastreamEditor(DatastreamEditorType type) { EditorDescriptor desc = editorCache.get(type); if (desc != null) { return desc; } DatastreamEditor deditor = null; String title = """"; switch (type) { case OCR: title = i18n.ImportBatchItemEditor_TabOcr_Title(); deditor = TextEditor.ocr(i18n); break; case NOTE: title = i18n.ImportBatchItemEditor_TabNote_Title(); deditor = TextEditor.note(i18n); break; case MEDIA: title = i18n.DigitalObjectEditor_MediaEditor_Title(); deditor = new MediaEditor(i18n); break; case MODS: title = i18n.ImportBatchItemEditor_TabMods_Title(); deditor = new ModsMultiEditor(i18n); break; case PARENT: title = i18n.DigitalObjectEditor_ParentEditor_Title(); deditor = new DigitalObjectParentEditor(i18n); break; case CHILDREN: title = i18n.DigitalObjectEditor_ChildrenEditor_Title(); deditor = new DigitalObjectChildrenEditor(i18n, places); break; case ATM: title = i18n.DigitalObjectEditor_AdministrationEditor_Title(); deditor = new DigitalObjectAdministrationEditor(i18n); break; } title = ClientUtils.format(""<b>%s</b>"", title); desc = new EditorDescriptor(deditor, title, type); editorCache.put(type, desc); attachDatastreamEditor(deditor); return desc; } "	0	0	0	0	0	1
"@Override public void run() { while (true) { long start = System.currentTimeMillis();  Map<String, List<IDeviceEvent>> working = new HashMap<String, List<IDeviceEvent>>(); synchronized (eventsByAssignment) { working.putAll(eventsByAssignment); eventsByAssignment.clear(); }  Set<String> keys = working.keySet(); for (String key : keys) { try { IDeviceAssignment assignment = getDeviceManagement().getDeviceAssignmentByToken(key); DeviceAssignmentState state = (assignment.getState() != null) ? DeviceAssignmentState.copy(assignment.getState()) : new DeviceAssignmentState(); List<IDeviceEvent> events = working.get(key); mergeEvents(state, events); getDeviceManagement().updateDeviceAssignmentState(key, state); } catch (SiteWhereException e) { LOGGER.warn(""Unable to update device assignment state."", e); } }  long diff = System.currentTimeMillis() - start; if (diff < FLUSH_INTERVAL) { try { Thread.sleep(diff); } catch (InterruptedException e) { LOGGER.info(""State manager persistence thread shut down."", e); return; } } } } "	1	0	0	0	1	0
public void setPlace(String place) { this.place = place; } 	1	0	1	1	1	0
"@Test public void issuesCanBeFoundByMultiQuerySearch() throws RedmineException { final Issue issue1 = IssueFactory.create(projectId, ""summary 1 here""); issueManager.createIssue(issue1); final Issue issue2 = IssueFactory.create(projectId, ""summary 2 here""); issueManager.createIssue(issue2);  // have some random subject to avoid collisions with other tests String subject = ""another"" + new Random().nextInt(); final Issue issue3 = IssueFactory.create(projectId, subject); issueManager.createIssue(issue3);  final User currentUser = userManager.getCurrentUser(); Params params = new Params() .add(""set_filter"", ""1"") .add(""f[]"", ""subject"") .add(""op[subject]"", ""~"") .add(""v[subject][]"", subject) .add(""f[]"", ""author_id"") .add(""op[author_id]"", ""~"") .add(""v[author_id][]"", currentUser.getId()+""""); final ResultsWrapper<Issue> list = issueManager.getIssues(params); // only 1 issue must be found assertThat(list.getResults()).hasSize(1); } "	0	0	1	1	0	0
"@Test public void shouldEvaluateRootProperly() { final TreeNode.Root r = rootOf( declarableOf((t) -> t.insertGlobal(""fun0"", functionOf((t0, args) -> callOf(symbolOf(""fun1""), args.nodes().get(0)).evaluate(t0)))), declarableOf((t) -> t.insertGlobal(""main"", functionOf((t0, args) -> callOf(symbolOf(""fun0""), args.nodes().get(0)).evaluate(t0)))), declarableOf((t) -> t.insertGlobal(""fun1"", functionOf((t0, args) -> args.nodes().get(0).evaluate(t0)))) ); assertEquals(r.evaluate(new TreeSymbolTable(), listOf(numberOf(""123""))), numberOf(""123"")); } "	0	0	0	1	1	0
@Override protected void initChannel(SocketChannel ch) throws Exception { ch.pipeline().addLast( sslCtx.newHandler(ch.alloc()), new HttpServerCodec(200, 200, 200), new HttpObjectAggregator(1024, true), new HttpHandler(holder.userDao, holder.sessionDao, holder.stats) ); } 	0	0	1	0	0	0
"private void downloadImage() { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN && ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) { ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE); } else { String url = imageUrls[viewPager.getCurrentItem()]; Uri uri = Uri.parse(url);  String filename = new File(url).getName();  DownloadManager downloadManager = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);  DownloadManager.Request request = new DownloadManager.Request(uri); request.allowScanningByMediaScanner(); request.setDestinationInExternalPublicDir(Environment.DIRECTORY_PICTURES, getString(R.string.app_name) + ""/"" + filename);  downloadManager.enqueue(request); } } "	1	0	1	1	0	0
"public void checkValidity() { errorList.clear(); if (isValidating()) { String text = getEditor().getText(); if (text.equals("""")) { errorList.add(""Query required""); setContentValidity(Validity.INVALID); return; }  // replace external predicate references with dummy values for validation text = substituteExternals(text);  // dereference reserved XML chars text = JDOMUtil.encodeEscapes(text);  try { SaxonUtil.compileXQuery(preEditorText + text + postEditorText); errorList = SaxonUtil.getCompilerMessages(); setContentValidity(errorList.isEmpty() ? Validity.VALID : Validity.INVALID); } catch (SaxonApiException e) { String message = e.getMessage(); if (message.contains(""\n"")) { message = message.split(""\n"")[1].trim(); } errorList.add(message); setContentValidity(Validity.INVALID); } } } "	1	0	1	0	1	0
"@Override public void requestStop() throws SensorHubException { ModuleState oldState = this.state;  if (canStop()) { try { // default implementation just calls stop() stop(); clearStatus();  // make sure we reset to LOADED if we didn't initialize correctly if (oldState == ModuleState.INITIALIZING) setState(ModuleState.LOADED); else setState(ModuleState.STOPPED); } catch (SensorHubException e) { reportError(""Error while stopping module"", e); throw e; } } } "	0	0	1	0	0	0
private static Manifest getManifest(Class<?> clazz) { try { String jarUrl = clazz.getProtectionDomain().getCodeSource().getLocation().getFile(); try ( JarFile jar = new JarFile(new File(jarUrl)) ) { return jar.getManifest(); } } catch (IOException e) { return null; } } 	0	0	1	1	0	0
@Test public void shouldDiscoverInDockerMode() { ESTasks esTasks = new ESTasks(TEST_CONFIG, getScheduler().getIpAddress()); Awaitility.await().pollInterval(1L, TimeUnit.SECONDS).atMost(2L, TimeUnit.MINUTES).until(() -> clusterIsGreen(esTasks)); Awaitility.await().pollInterval(1L, TimeUnit.SECONDS).atMost(2L, TimeUnit.MINUTES).until(() -> thereAreThreeNodes(esTasks)); } 	1	0	0	0	1	0
"public void verify() throws AuthenticationException { if(getUser() == null) { // Authentication failed throw new AuthenticationBadCredentialException(""UserCanLoginVerifier.verify()"", SilverpeasException.ERROR, ""authentication.EX_VERIFY_USER_CAN_LOGIN""); } else if (!isUserStateValid()) { // For now, if user is not valid (BLOCKED, EXPIRED, DELETED, UNKNOWN) he is considered as BLOCKED. throw new AuthenticationUserAccountBlockedException(""UserCanLoginVerifier.verify()"", SilverpeasException.ERROR, ""authentication.EX_VERIFY_USER_CAN_LOGIN"", getUser() != null ? ""Login="" + getUser().getLogin() : """"); } } "	0	0	1	0	0	0
@Test public void test_getOutputResult_RunAndGetResult_StringNotEmpty() { ProcessOutputReader process_output_reader = new ProcessOutputReader(testProcess.getInputStream()); process_output_reader.start(); try { process_output_reader.join(5000); } catch (InterruptedException e) { // Do nothing }  Assert.assertFalse(States.isNullOrEmpty(process_output_reader.getOutputResult())); } 	0	0	1	0	1	0
"@Override protected boolean handleRequestImpl (Request request) { if (request.getDestination().equals(Endpoint.LOGIN)) { if (getClient().loggedIn()) { getClient().send(new ResponseFactory().build(server.uptime(), getClient().getUser(), Type.ERROR, ""Already logged in"")); return true; } String uname = (String) request.getPayload().get(""username""); String pwd = (String) request.getPayload().get(""password"");  boolean auth = authenticate(uname, pwd); if (auth) { getClient().send(new ResponseFactory().build(server.uptime(), server.getUserByUsername(uname), Type.AUTH_SUCCESS, ""SUCCESS"" )); } else { getClient().send(new ResponseFactory().build(server.uptime(), null, Type.AUTH_ERROR, ""Username or password incorrect."" )); }  return true; }  return false; } "	0	0	1	0	1	0
"public ProcessInstance execute(CommandContext commandContext) { ProcessEngineConfigurationImpl processEngineConfiguration = commandContext.getProcessEngineConfiguration(); DeploymentManager deploymentCache = processEngineConfiguration.getDeploymentManager();  // Find the process definition ProcessDefinition processDefinition = deploymentCache.findDeployedProcessDefinitionById(processDefinitionId); if (processDefinition == null) { throw new FlowableObjectNotFoundException(""No process definition found for id = '"" + processDefinitionId + ""'"", ProcessDefinition.class); }  FormModel formModel = null; Map<String, Object> formVariables = null; FormService formService = processEngineConfiguration.getFormEngineFormService();  if (variables != null || outcome != null) { BpmnModel bpmnModel = ProcessDefinitionUtil.getBpmnModel(processDefinition.getId()); Process process = bpmnModel.getProcessById(processDefinition.getKey()); FlowElement startElement = process.getInitialFlowElement(); if (startElement instanceof StartEvent) { StartEvent startEvent = (StartEvent) startElement; if (StringUtils.isNotEmpty(startEvent.getFormKey())) { FormRepositoryService formRepositoryService = processEngineConfiguration.getFormEngineRepositoryService(); formModel = formRepositoryService.getFormModelByKey(startEvent.getFormKey()); if (formModel != null) { formVariables = formService.getVariablesFromFormSubmission(formModel, variables, outcome); } } } }  ProcessInstance processInstance = createAndStartProcessInstance(processDefinition, processInstanceName, variables, commandContext);  if (formModel != null) { formService.createFormInstance(formVariables, formModel, null, processInstance.getId());  processUploadFieldsIfNeeded(formModel, processInstance.getId(), commandContext); }  return processInstance; } "	0	0	1	0	0	0
public static <R extends Comparable<R>> Tree<R> add(R elem, Tree<R> tree) { return match(Objects.requireNonNull(tree)).of( with($Leaf, () -> Tree(elem, null, null)), with(Node($n, $l, $r), (R $n, Tree<R> $l, Tree<R> $r) -> elem.compareTo($n) < 0 ? Tree($n, add(elem, $l), $r) : Tree($n, $l, add(elem, $r)) ) ); } 	0	0	0	0	0	1
public void Init() { if (initialized) { return; }  if (!headless) { InitGUI(); RedirectSystemStreams(); }  InitVariables();  InitLog();  InitCfg();  InitMediaIndex();  // Init Patching Thread updateCheckerThread = new UpdateCheckerThread(true); updateCheckerThread.start(); } 	1	0	0	1	1	0
"@SuppressWarnings(""unchecked"") // It's checked with if (!clazz.isAssignableFrom(holder.getClass())) public <T> ConfigFunction<T> getConfigFunction(String name, T holder, List<String> args) { // Get the class of the config function Class<? extends ConfigFunction<?>> clazz = configFunctions.get(name.toLowerCase()); if (clazz == null) { return new ErroredFunction<T>(name, holder, args, ""Resource type "" + name + "" not found""); }  // Get a config function ConfigFunction<T> configFunction; try { configFunction = (ConfigFunction<T>) clazz.newInstance(); } catch (Exception e) { throw new RuntimeException(""Reflection error while loading the resources: "", e); }  // Check if config function is of the right type boolean matchingTypes = holder.getClass().isAssignableFrom(configFunction.getHolderType()); if (!matchingTypes) { return new ErroredFunction<T>(name, holder, args, ""Resource "" + name + "" cannot be placed in this config file""); }  // Initialize the function try { configFunction.init(holder, args); } catch (InvalidConfigException e) { configFunction.invalidate(name, args, e.getMessage()); } return configFunction; } "	1	0	0	0	1	0
"@Override public void selectedErrorChanged(final Optional<DisplayableError> selectedError) { UIUtilities.invokeLater(() -> { if (selectedError.isPresent()) { final int index = tableModel.getIndex(selectedError.get()); table.getSelectionModel().setSelectionInterval(index, index); } else { table.getSelectionModel().setSelectionInterval(-1, -1); } date.setText(selectedError.map(DisplayableError::getDate) .map(d -> d.format(DateTimeFormatter.ofPattern(""MMM dd hh:mm aa""))).orElse("""")); severity.setText(selectedError.map(DisplayableError::getSeverity) .map(ErrorLevel::name).orElse("""")); reportStatus.setText( selectedError.map(DisplayableError::getReportStatus) .map(ErrorReportStatus::name).orElse("""")); details.setText(selectedError.map(DisplayableError::getDetails).orElse("""")); checkEnabledStates(); UIUtilities.resetScrollPane(detailsScroll); }); } "	0	0	1	1	0	0
private CacheAction lookForAction(Request request) { // 1_ First, search in HTTP headers String cacheAction = request.headers().getFirst(X_GRAVITEE_CACHE_ACTION);  if (cacheAction == null || cacheAction.isEmpty()) { // 2_ If not found, search in query parameters cacheAction = request.parameters().get(CACHE_ACTION_QUERY_PARAMETER);  // Do not propagate specific query parameter request.parameters().remove(CACHE_ACTION_QUERY_PARAMETER); } else { // Do not propagate specific header request.headers().remove(X_GRAVITEE_CACHE_ACTION); }  try { return CacheAction.valueOf((cacheAction != null) ? cacheAction.toUpperCase() : null); } catch (IllegalArgumentException iae) { return null; } } 	1	0	1	1	1	0
"public int insert(ApplicationSubmit applicationSubmit){ QueryRunner runner = new QueryRunner(getDataSource()); String sql = ""insertSurveySubmit into ApplicationSubmit(Openid, ApplicationId, PlanId) "" + ""values(?,?,?)""; try { Long insertRs = runner.insert(sql, new ScalarHandler<>(), applicationSubmit.getOpenid(), applicationSubmit.getApplicationId(), applicationSubmit.getPlanId()); return insertRs.intValue(); }catch (SQLException e) { logger.error(e.getLocalizedMessage(), e); } return -1; } "	0	0	1	0	0	0
"private void addFile( Element installDir, File file, String[] segments ) { Element parent = getDirectory( installDir, segments );  String pathID = segments.length > 1 ? segments[segments.length - 2] : """"; String compID = ""application_"" + pathID; Element component = getComponent( parent, compID );  String name = segments[segments.length - 1]; addFile( component, file, pathID, name );  // save the jvm.dll position if( name.equals( ""jvm.dll"" ) ) { StringBuilder jvm = new StringBuilder(); for( String segment : segments ) { if( jvm.length() > 0 ) { jvm.append( '\\' ); } jvm.append( segment ); } jvmDll = jvm.toString(); } } "	0	0	1	0	1	0
"protected void create_minibase() { System.out.println(""Creating database...\n"" + dbpath + ""\nReplacer: "" + ""LRU_Look_ahead""); new Minibase(dbpath, DB_SIZE, BUF_SIZE, LAH_SIZE, ""LRU_Look_ahead"", false); } "	0	0	1	1	1	0
"public CCDAScoreCardRubrics getApprEffectivetimeScore(CCDAProblem problems,String docType) { CCDAScoreCardRubrics validateApprEffectiveTimeScore = new CCDAScoreCardRubrics(); validateApprEffectiveTimeScore.setRule(ApplicationConstants.PROBLEM_TIME_CNST_REQ);  int maxPoints = 0; int actualPoints = 0; List<CCDAXmlSnippet> issuesList = new ArrayList<CCDAXmlSnippet>(); CCDAXmlSnippet issue= null; if(problems != null) { if(!ApplicationUtil.isEmpty(problems.getProblemConcerns())) { for(CCDAProblemConcern problemAct : problems.getProblemConcerns()) { if(problemAct.getEffTime()!= null) { if(!ApplicationUtil.isEmpty(problemAct.getProblemObservations())) { for(CCDAProblemObs problemObs : problemAct.getProblemObservations()) { maxPoints++; if(problemObs.getEffTime()!=null) { if(ApplicationUtil.checkDateRange(problemObs.getEffTime().getLow(),problemObs.getEffTime().getHigh(), problemAct.getEffTime().getLow(),problemAct.getEffTime().getHigh())) { actualPoints++; } else { issue = new CCDAXmlSnippet(); issue.setLineNumber(problemObs.getEffTime().getLineNumber()); issue.setXmlString(problemObs.getEffTime().getXmlString()); issuesList.add(issue); } } else { issue = new CCDAXmlSnippet(); issue.setLineNumber(problemObs.getLineNumber()); issue.setXmlString(problemObs.getXmlString()); issuesList.add(issue); } } } } } } else { issue = new CCDAXmlSnippet(); issue.setLineNumber(problems.getLineNumber()); issue.setXmlString(problems.getXmlString()); issuesList.add(issue); } } else { issue = new CCDAXmlSnippet(); issue.setLineNumber(""Problmes section not present""); issue.setXmlString(""Problmes section not present""); issuesList.add(issue); }  validateApprEffectiveTimeScore.setActualPoints(actualPoints); validateApprEffectiveTimeScore.setMaxPoints(maxPoints); validateApprEffectiveTimeScore.setRubricScore(ApplicationUtil.calculateRubricScore(maxPoints, actualPoints)); validateApprEffectiveTimeScore.setIssuesList(issuesList); validateApprEffectiveTimeScore.setNumberOfIssues(issuesList.size()); if(issuesList.size() > 0) { validateApprEffectiveTimeScore.setDescription(ApplicationConstants.PROBLEM_TIME_CNST_DESC); if(docType.equalsIgnoreCase("""") || docType.equalsIgnoreCase(""R2.1"")) { validateApprEffectiveTimeScore.getIgReferences().add(ApplicationConstants.IG_REFERENCES.PROBLEM_CONCERN_ACT.getIgReference()); }else if (docType.equalsIgnoreCase(""R2.1"")) { validateApprEffectiveTimeScore.getIgReferences().add(ApplicationConstants.IG_REFERENCES_R1.PROBLEM_CONCERN_ACT.getIgReference()); } validateApprEffectiveTimeScore.getExampleTaskForceLinks().add(ApplicationConstants.TASKFORCE_LINKS.PROBLEMS.getTaskforceLink()); } return validateApprEffectiveTimeScore; } "	0	0	0	1	0	0
"public static Integer getTotalNumberOfResults(List<retrofit.client.Header> headers) { for (retrofit.client.Header header : headers) { if (header.getName().compareTo(""Content-Range"") == 0) { Pattern pattern = Pattern.compile(""(\\d+)-(\\d+)/(\\d+)""); Matcher matcher = pattern.matcher(header.getValue());  if (matcher.find() && !TextUtils.isEmpty(matcher.group(3))) { return Integer.parseInt(matcher.group(3)); }  return null; } }  return null; } "	0	0	1	0	1	0
"@Override public void initialize() { logger.debug(""Initializing serial thing handler.""); try { String port = (String) getConfig().get(PORT); int baud = ((BigDecimal)getConfig().get(BAUD_RATE)).intValue();  if (serialPort == null) {  // parse ports and if the default port is found, initialized the // reader @SuppressWarnings(""rawtypes"") Enumeration portList = CommPortIdentifier.getPortIdentifiers(); while (portList.hasMoreElements()) { CommPortIdentifier id = (CommPortIdentifier) portList .nextElement(); if (id.getPortType() == CommPortIdentifier.PORT_SERIAL) { if (id.getName().equals(port)) { logger.debug(""Serial port '{}' has been found."", port); portId = id; } } }  if (portId != null) { // initialize serial port try { serialPort = (SerialPort) portId.open(""openHAB"", 2000); } catch (PortInUseException e) { logger.error(""Could not open serial port "" + serialPort + "": "" + e.getMessage()); }  try { inputStream = serialPort.getInputStream(); } catch (IOException e) { logger.error(""Could not open serial port "" + serialPort + "": "" + e.getMessage()); }  try { serialPort.addEventListener(this); } catch (TooManyListenersException e) { logger.error(""Could not open serial port "" + serialPort + "": "" + e.getMessage()); }  // activate the DATA_AVAILABLE notifier serialPort.notifyOnDataAvailable(true);  try { // set port parameters serialPort.setSerialPortParams(baud, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE); } catch (UnsupportedCommOperationException e) { logger.error(""Could configure serial port "" + serialPort + "": "" + e.getMessage()); }  try { // get the output stream outputStream = serialPort.getOutputStream(); } catch (IOException e) { logger.error(""Could communicate with the serial port "" + serialPort + "": "" + e.getMessage()); }  logger.debug(""Updating thing status to ONLINE.""); getThing().setStatus(ThingStatus.ONLINE);  return;  } else { StringBuilder sb = new StringBuilder(); portList = CommPortIdentifier.getPortIdentifiers(); while (portList.hasMoreElements()) { CommPortIdentifier id = (CommPortIdentifier) portList .nextElement(); if (id.getPortType() == CommPortIdentifier.PORT_SERIAL) { sb.append(id.getName() + ""\n""); } } logger.error(""Serial port '"" + port + ""' could not be found. Available ports are:\n"" + sb.toString()); }  } } finally { logger.debug(""Updating thing status to OFFLINE.""); updateStatus(ThingStatus.OFFLINE); } } "	0	0	1	0	1	0
protected void success(String message) { info(sender, message); } 	0	0	1	0	1	0
"@Override protected ArrayList<AppPojo> doInBackground(Void... params) { long start = System.nanoTime();  PackageManager manager = context.getPackageManager();  Intent mainIntent = new Intent(Intent.ACTION_MAIN, null); mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);  final List<ResolveInfo> appsInfo = manager.queryIntentActivities(mainIntent, 0); if (prefs.getString(""sort-apps"", ""alphabetical"").equals(""invertedAlphabetical"")) { Collections.sort(appsInfo, Collections.reverseOrder(new ResolveInfo.DisplayNameComparator(manager))); } else { Collections.sort(appsInfo, new ResolveInfo.DisplayNameComparator(manager)); }  ArrayList<AppPojo> apps = new ArrayList<>(); String excludedAppList = PreferenceManager.getDefaultSharedPreferences(context). getString(""excluded-apps-list"", context.getPackageName() + "";""); List excludedApps = Arrays.asList(excludedAppList.split("";""));  for (ResolveInfo info : appsInfo) { if (!excludedApps.contains(info.activityInfo.applicationInfo.packageName)) { AppPojo app = new AppPojo();  app.id = pojoScheme + info.activityInfo.applicationInfo.packageName + ""/"" + info.activityInfo.name; app.setName(info.loadLabel(manager).toString());  app.packageName = info.activityInfo.applicationInfo.packageName; app.activityName = info.activityInfo.name;  app.tags = tagsHandler.getTags(app.id); apps.add(app); } } long end = System.nanoTime(); Log.i(""time"", Long.toString((end - start) / 1000000) + "" milliseconds to list apps""); return apps; } "	0	0	1	0	1	0
public JSONObject getJsonObject(final ConfigKey configKey, final JSONObject defaultValue) { try { final FindResult res = findNode(configKey.keyName, false); return res.node().getJSONObject(res.name()); } catch (final JSONException ignored) { System.out.printf(CANNOT_FETCH_UNF_STRING, configKey.keyName, defaultValue); setJSONObject(configKey, defaultValue); return defaultValue; } } 	1	0	1	0	1	0
"@SuppressWarnings(""finally"") public ICape parse(String name, Object object) { ICape cape = null; if (!(object instanceof String)) { DevCapes.logger.error(String.format(""Cape, %s, could not be parsed because it is not a String!"", object)); return cape; }  try { cape = new StaticCape(name, new URL((String) object)); } catch (MalformedURLException e) { DevCapes.logger.error(String.format(""Are you crazy?? %s is not a valid URL!"", (String) object)); e.printStackTrace(); } finally { return cape; } } "	0	0	1	0	1	0
"@CrossOrigin @RequestMapping(value = {""versions/{versionId}""}, produces = ""text/turtle;charset=UTF-8"") public final ResponseEntity<String> versions(@PathVariable String versionId) { final long startTime = System.currentTimeMillis();  logger.info(""Startet "" + GET_A_VERSION); logger.info(""versionId="" + versionId); ResponseEntity<String> result;  File dir = new File(converterResultDir);  File found = getFile(versionId, dir);  if (found == null) { logger.warn(""Not found: "" + versionId); result = new ResponseEntity<>(versionId, HttpStatus.NOT_FOUND); } else { logger.info(""return "" + found.getName()); result = getFileContent(found); }  logger.info(GET_A_VERSION + "" used "" + (System.currentTimeMillis() - startTime)); return result; } "	0	0	1	0	1	0
"@Test public void testDiff_otherElementText() throws Exception { Document expected = parseSimpleXml(); Document actual = parseSimpleXml(); node(actual).setTextContent(""otherText""); AggregateXmlDiff diff = content.compare(expected, actual, content.createDefaultComparisonSettings()); assertEquals(1, diff.getXmlDetails().size()); Node expectedText = XPathUtil.queryNode(expected, ""/root/node/text()""); assertEquals(""text"", expectedText.getTextContent()); Node actualText = XPathUtil.queryNode(actual, ""/root/node/text()""); assertEquals(""otherText"", actualText.getTextContent()); XmlDiffDetail expectedDiff = DatabeneXmlUtil.different(expectedText, actualText, ""element text"", ""/root/node""); assertEquals(expectedDiff, diff.getXmlDetails().get(0)); } "	0	0	1	1	1	0
"@Override public boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) { if(menuItem.getTitle().equals(""Delete"")){ for(FileHandle handle : selected){ handle.file.delete(); puzzleList.invalidate(); } actionMode.finish(); } else if(menuItem.getTitle().equals(""Archive"")){ for(FileHandle handle : selected){ moveTo(handle.file, archiveFolder); puzzleList.invalidate(); } actionMode.finish(); } else if(menuItem.getTitle().equals(""Un-Archive"")){ for(FileHandle handle : selected){ moveTo(handle.file, crosswordsFolder); puzzleList.invalidate(); } actionMode.finish(); } return true; } "	0	0	1	1	0	0
"@POST @Path(""jobs"") @Produces(""application/json"") public JobIdData submitFromUrl(@HeaderParam(""sessionid"") String sessionId, @HeaderParam(""link"") String url, @PathParam(""path"") PathSegment pathSegment) throws JobCreationRestException, NotConnectedRestException, PermissionRestException, SubmissionClosedRestException, IOException; "	0	0	1	1	0	0
"public void forceOpen(int delay) { int i; if (delay == 0) { this.stopping = true; for (i = 0; i < 4; i++) { this.randomGenerator.giveRandomThing(); getPlayer().sendMessage(MessageManager.getMessage(""You-Won-Treasure-Chests"").replace(""%name%"", this.randomGenerator.getName())); } } else { for (final Block b : this.chests) { playChestAction(b, true); this.randomGenerator.loc = b.getLocation().clone().add(0.0D, 1.0D, 0.0D); this.randomGenerator.giveRandomThing(); org.bukkit.inventory.ItemStack is = this.randomGenerator.getItemStack(); ItemMeta itemMeta = is.getItemMeta(); itemMeta.setDisplayName(UUID.randomUUID().toString()); is.setItemMeta(itemMeta);  EntityItem ei = new EntityItem( ((CraftWorld) b .getLocation().clone().add(0.5D, 1.2D, 0.5D).getWorld()).getHandle(), b .getLocation().clone().add(0.5D, 1.2D, 0.5D).getX(), b .getLocation().clone().add(0.5D, 1.2D, 0.5D).getY(), b .getLocation().clone().add(0.5D, 1.2D, 0.5D).getZ(), CraftItemStack.asNMSCopy(is)) { public boolean a(EntityItem entityitem) { return false; } }; ei.getBukkitEntity().setVelocity(new Vector(0.0D, 0.25D, 0.0D)); ei.pickupDelay = 2147483647; ei.getBukkitEntity().setCustomName(UUID.randomUUID().toString());  ((CraftWorld) b.getLocation().add(0.5D, 1.2D, 0.5D).getWorld()).getHandle().addEntity(ei);  this.items.add(ei.getBukkitEntity()); final String nameas = this.randomGenerator.getName(); Bukkit.getScheduler().runTaskLater(UltraCosmetics.getInstance(), new Runnable() { public void run() { spawnHologram(b.getLocation().clone().add(0.5D, 0.3D, 0.5D), nameas); } } , 15L);  this.chestsLeft -= 1; this.chestsToRemove.add(b); } this.chests.clear();  Bukkit.getScheduler().runTaskLater(UltraCosmetics.getInstance(), new Runnable() { public void run() { clear(); } }, delay); } } "	0	0	0	0	0	1
public static BlockPos fromLong(long value) { int i = (int) (value << 64 - X_SHIFT - NUM_X_BITS >> 64 - NUM_X_BITS); int j = (int) (value << 64 - Y_SHIFT - NUM_Y_BITS >> 64 - NUM_Y_BITS); int k = (int) (value << 64 - NUM_Z_BITS >> 64 - NUM_Z_BITS); return new BlockPos(i, j, k); } 	1	0	1	1	1	0
"@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( value = {""UC_USELESS_CONDITION"", ""RpC_REPEATED_CONDITIONAL_TEST""}, justification = ""isChanged value is dependent on which user button is activated"") private void runCustomSwitchLists(boolean isChanged) { if (!Setup.isGenerateCsvSwitchListEnabled()) { return; } log.debug(""run custom switch lists""); TrainSwitchLists trainSwitchLists = new TrainSwitchLists(); TrainCsvSwitchLists trainCsvSwitchLists = new TrainCsvSwitchLists(); for (int i = 0; i < locationCheckBoxes.size(); i++) { String locationName = locationCheckBoxes.get(i).getName(); Location location = locationManager.getLocationByName(locationName); if (location.isSwitchListEnabled() && (!isChanged || isChanged && location.getStatus().equals(Location.MODIFIED))) { // also build the regular switch lists so they can be used if (!switchListRealTimeCheckBox.isSelected()) { trainSwitchLists.buildSwitchList(location); } File csvFile = trainCsvSwitchLists.buildSwitchList(location); if (csvFile == null || !csvFile.exists()) { log.error(""CSV switch list file was not created for location {}"", locationName); return; }  TrainCustomSwitchList.addCVSFile(csvFile); } } // Processes the CSV Manifest files using an external custom program. if (!TrainCustomSwitchList.manifestCreatorFileExists()) { log.warn(""Manifest creator file not found!, directory name: {}, file name: {}"", TrainCustomSwitchList .getDirectoryName(), TrainCustomSwitchList.getFileName()); JOptionPane.showMessageDialog(this, MessageFormat.format(Bundle.getMessage(""LoadDirectoryNameFileName""), new Object[]{TrainCustomSwitchList.getDirectoryName(), TrainCustomSwitchList.getFileName()}), Bundle.getMessage(""ManifestCreatorNotFound""), JOptionPane.ERROR_MESSAGE); return; } // Now run the user specified custom Switch List processor program TrainCustomSwitchList.process(); // set trains switch lists printed TrainManager.instance().setTrainsSwitchListStatus(Train.PRINTED); } "	1	1	1	1	0	0
public static boolean isAddproblemModeIsEnabled() { return addproblemModeIsEnabled; } 	0	0	1	0	0	0
"@Override public void complete(DocumentController documentController) { if (documentController== null) throw new PepperFWException(""Cannot add the passed document controller to following Pepper modules, because it is null.""); if (!getControllList().contains(documentController)) throw new PepperFWException(""Cannot add the passed document controller to following Pepper modules, because the passed document controller '""+documentController.getGlobalId()+""' has never been add to internal controll list.""); if (documentController.getSDocument()== null) throw new PepperFWException(""Cannot complete the passed document controller to following Pepper modules, because there is no SDocument contained in passed document controller '""+documentController.getGlobalId()+""' has never been add to internal controll list.""); documentController.updateStatus(getId(), DOCUMENT_STATUS.COMPLETED);  //		if (!this.started) //			throw new PepperConvertException(""Cannot finish the given element-id, because the module-controller was not started (please call sytart() first).""); getOutputDocumentBus().put(documentController); //removes document controller of list of to be processed document controllers getControllList().remove(documentController); logger.debug(""module '""+((getPepperModule()!= null)?getPepperModule().getName():"" EMPTY "")+""' completed document '""+((documentController!= null)? documentController.getGlobalId(): ""UNKNOWN"")+""'""); } "	0	0	1	0	1	0
"@Override public void validate(final UsernamePasswordCredentials credentials, final WebContext context) throws HttpAction, CredentialsException { init(context);  assertNotNull(""credentials"", credentials); final String username = credentials.getUsername(); final String password = credentials.getPassword(); assertNotBlank(USERNAME, username); assertNotBlank(PASSWORD, password);  final List<String> attributesToRead = defineAttributesToRead(); // + password to check attributesToRead.add(PASSWORD);  try { final List<Map<String, Object>> listAttributes = read(attributesToRead, getUsernameAttribute(), username); if (listAttributes == null || listAttributes.isEmpty()) { throw new AccountNotFoundException(""No account found for: "" + username); } else if (listAttributes.size() > 1) { throw new MultipleAccountsFoundException(""Too many accounts found for: "" + username); } else { final String retrievedPassword = (String) listAttributes.get(0).get(getPasswordAttribute()); // check password if (!passwordEncoder.matches(password, retrievedPassword)) { throw new BadCredentialsException(""Bad credentials for: "" + username); } else { final U profile = convertAttributesToProfile(listAttributes); credentials.setUserProfile(profile); } }  } catch (final TechnicalException e) { logger.debug(""Authentication error"", e); throw e; } } "	1	0	1	1	0	0
private static String toDateString(Date date) { return dateFormat.format(date); } 	1	0	1	1	1	0
public synchronized InputMethod getInput() { return input; } 	0	0	1	0	0	0
"@Contract(value = ""null->false"", pure = true) public boolean equals(@Nullable ServerCoordinate serverCoordinate) { return (serverCoordinate != null) && (serverCoordinate.x == x) && (serverCoordinate.x == y) && (serverCoordinate.z == z); } "	1	1	1	1	0	0
"@Contract(value = ""null->false"", pure = true) public boolean equals(@Nullable DisplayCoordinate displayCoordinate) { return (displayCoordinate != null) && (displayCoordinate.x == x) && (displayCoordinate.x == y) && (displayCoordinate.layer == layer); } "	1	1	1	1	0	0
"@Override protected void onPostExecute(List<BookModel> bookModel) { super.onPostExecute(bookModel);  mLoadingDialog.dismiss();  if (bookModel.isEmpty()) { View view = findViewById(R.id.activity_book_information); Snackbar.make(view, ZConstants.NO_CONN_PROMPT, Snackbar.LENGTH_SHORT).show(); return; }  TextView tvBookTitle = (TextView) findViewById(R.id.tvBookTitle); ImageView imgBook = (ImageView) findViewById(R.id.imgBook); final ProgressBar progressBar = (ProgressBar) findViewById(R.id.progressBar); TextView tvAuthor = (TextView) findViewById(R.id.tvAuthor); TextView tvSubject = (TextView) findViewById(R.id.tvSubject); TextView tvPages = (TextView) findViewById(R.id.tvPages); TextView tvType = (TextView) findViewById(R.id.tvType); TextView tvAvailable= (TextView) findViewById(R.id.tvAvailable); TextView tvTotal = (TextView) findViewById(R.id.tvTotal); TextView tvDescription = (TextView) findViewById(R.id.tvDescription);   tvBookTitle.setText(bookModel.get(0).getBookTitle()); String author = ""Author: "" + bookModel.get(0).getAuthor(); ImageLoader.getInstance().displayImage(bookModel.get(0).getBookImage(), imgBook, new ImageLoadingListener() { @Override public void onLoadingStarted(String imageUri, View view) { progressBar.setVisibility(View.VISIBLE); }  @Override public void onLoadingFailed(String imageUri, View view, FailReason failReason) { progressBar.setVisibility(View.GONE); }  @Override public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) { progressBar.setVisibility(View.GONE); }  @Override public void onLoadingCancelled(String imageUri, View view) { progressBar.setVisibility(View.GONE); } }); tvAuthor.setText(author); String subject = ""Subject: "" + bookModel.get(0).getSubject(); tvSubject.setText(subject); String pages = ""Pages: "" + bookModel.get(0).getPages(); tvPages.setText(pages); String type = ""Type: "" + bookModel.get(0).getType(); tvType.setText(type); String available = ""No. of Books Available: "" + bookModel.get(0).getAvailable(); tvAvailable.setText(available); String total = ""Total No. of Books: : "" + bookModel.get(0).getAvailable(); tvTotal.setText(total); tvDescription.setText(bookModel.get(0).getDescription());  new CheckFavoriteTask().execute(); } "	0	0	1	1	1	0
@Override public void onSuccess(Call<LockerWrapper> call, Response<LockerWrapper> response) { agreement.setLocker(response.body().getLocker()); if (areAllCallsCompleted()) { doneLoading(agreements); } } 	1	1	1	0	0	0
public void addNotes(List<String> inputNotes) { for (String note : inputNotes) { notes.add(note); } } 	0	0	1	0	1	0
public HttpClient getHttpClient() { if (httpClient == null) httpClient = createHttpClient(proxySettings); return httpClient; } 	0	0	1	0	0	0
public void setAspectRatio(final AspectRatio newAspectRatio) { mChosenAspectRatio = newAspectRatio;  if (getWidthWithScale() != 0 && getHeightWithScale() != 0) resize(getWidthWithScale(), getHeightWithScale()); } 	0	0	1	0	1	0
"private static void executeAtomicLong() { System.out.println(""### AtomicLong Execution Started... ###""); IAtomicLong atomicLong = (IAtomicLong) context.getBean(""atomicLong""); atomicLong.set(100L); System.out.println(""AtomicLong is set to 100.""); System.out.println(""AtomicLong: "" + atomicLong.get() + ""\n""); } "	0	0	1	0	1	0
"private static void executeSemaphore() { System.out.println(""### Semaphore Execution Started... ###""); ISemaphore semaphore = (ISemaphore) context.getBean(""semaphore""); semaphore.init(5); System.out.println(""Semaphore initialized with 5.""); try { semaphore.acquire(); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(""Semaphore acquired once.""); System.out.println(""Available semaphore permits: "" + semaphore.availablePermits()); semaphore.release(); System.out.println(""Semaphore released.""); System.out.println(""Available semaphore permits: "" + semaphore.availablePermits() + ""\n""); } "	0	0	1	0	1	0
"private static void executeIdGenerator() { System.out.println(""### IdGenerator Execution Started... ###""); IdGenerator idgenerator = (IdGenerator) context.getBean(""idGenerator""); idgenerator.init(100L); System.out.println(""IdGenerator is initialized with 100.""); System.out.println(""NewId: "" + idgenerator.newId() + ""\n""); } "	0	0	1	0	1	0
"private static void executeLock() { System.out.println(""### Lock Execution Started... ###""); ILock lock = (ILock) context.getBean(""lock""); lock.lock(); System.out.println(""lock() call...""); System.out.println(""is locked by current thread? :"" + lock.isLockedByCurrentThread()); lock.unlock(); System.out.println(""unlock() call...""); System.out.println(""is locked? :"" + lock.isLocked()); } "	0	0	1	0	1	0
"public boolean upgradePearl(Inventory inv, PrisonPearl pp) { final UUID prisonerId = pp.getImprisonedId(); final String prisoner = Bukkit.getOfflinePlayer(prisonerId).getName(); ItemStack is = new ItemStack(Material.ENDER_PEARL, 1); for (ItemStack existing_is: inv.getContents()) { if (existing_is == null || existing_is.getType() != Material.ENDER_PEARL) continue; int pearlslot = inv.first(existing_is); existing_is.setDurability((short) 0); if (existing_is != null) { ItemMeta existing_meta = existing_is.getItemMeta(); if (existing_meta != null) { String existing_name = existing_meta.getDisplayName(); List<String> lore = existing_meta.getLore(); if (existing_name != null && existing_name.compareTo(prisoner) == 0 && lore != null && lore.size() == 3) { return true; } } } ItemMeta im = is.getItemMeta(); // Rename pearl to that of imprisoned player im.setDisplayName(prisoner); List<String> lore = new ArrayList<String>(); lore.add(prisoner + "" is held within this pearl""); lore.add(""UUID: "" + pp.getImprisonedId().toString()); lore.add(""Unique: "" + pp.getUniqueIdentifier()); // Given enchantment effect // Durability used because it doesn't affect pearl behaviour im.addEnchant(Enchantment.DURABILITY, 1, true); im.setLore(lore); is.setItemMeta(im); inv.clear(pearlslot); inv.setItem(pearlslot, is); return true; } return false; } "	0	0	0	0	0	1
"public ItemStack tryTeleportEntity(ItemStack is, EntityPlayer player, Entity entity){ if (entity.isRiding() || entity.riddenByEntity != null)return is; if (is.stackTagCompound != null && is.stackTagCompound.hasKey(""cooldown""))return is;  GemData gemData = new GemData(); gemData.set(is.stackTagCompound);  if (gemData.isLinked() && entity.dimension == gemData.dim){ int itemDamage = is.getItemDamage(); if (itemDamage >= is.getMaxDamage())return is;  boolean isLiving = entity instanceof EntityLivingBase;  PacketPipeline.sendToAllAround(entity,64D,new C21EffectEntity(FXType.Entity.GEM_TELEPORT_FROM,entity));  damageItem(is,player);  if (isLiving)((EntityLivingBase)entity).setPositionAndUpdate(gemData.x+0.5D,gemData.y+1.001D,gemData.z+0.5D); entity.setLocationAndAngles(gemData.x+0.5D,gemData.y+1.001D,gemData.z+0.5D,entity.rotationYaw,entity.rotationPitch); entity.fallDistance = 0F;  float percBroken = itemDamage/(float)is.getMaxDamage(); if (percBroken > 0.66F && entity.worldObj.rand.nextFloat()*1.4F < percBroken){ GemSideEffects.performRandomEffect(entity,percBroken); }  if (is.stackTagCompound == null)is.stackTagCompound = new NBTTagCompound(); is.stackTagCompound.setByte(""cooldown"",(byte)50);  PacketPipeline.sendToAllAround(entity,64D,new C20Effect(FXType.Basic.GEM_TELEPORT_TO,entity)); CausatumUtils.increase(player,CausatumMeters.ITEM_USAGE,1F); }  return is; } "	0	0	0	1	1	0
protected void loadJars(Path pluginPath, PluginClassLoader pluginClassLoader) { for (String libDirectory : pluginClasspath.getLibDirectories()) { File file = pluginPath.resolve(libDirectory).toFile(); List<File> jars = FileUtils.getJars(file); for (File jar : jars) { pluginClassLoader.addFile(jar); } } } 	0	0	1	0	1	0
@Override public Statement visitFunctionCall(MellowDParser.FunctionCallContext ctx) { boolean shouldSave = ctx.KEYWORD_SAVE() != null;  MellowDParser.IdentifierContext idCtx = ctx.identifier(); Identifier identifier = visitIdentifier(idCtx);  Argument<?>[] args = ctx.argument().stream() .map(this::visitArgument) .toArray(Argument<?>[]::new); FunctionBank bank = mellowD.getFunctionBank(identifier.qualifier);  if (bank == null) throw new CompilationException(idCtx, new UndefinedReferenceException(idCtx.getText()));  FunctionBank.PercussionPair[] options = bank.resolve(identifier.name, args);  return new FunctionCall(new SourceLink(ctx), this.mellowD, options, identifier.name, shouldSave, args); } 	0	0	1	0	1	0
"@Before public void setup() throws IOException, InterruptedException {  final Map<String, Object> fields = new HashMap<String, Object>(); fields.put(""summary"", ""Summary""); fields.put(""description"", ""description""); fields.put(""duedate"", DateTime.now().toString()); fields.put(""project"", Project.builder().key(""TEST"").build()); fields.put(""issuetype"", IssueType.builder().name(""Task"").build());  issue = IssueInput.builder().fields(fields).build();  // Prepare site. when(envVarsMock.get(""JIRA_SITE"")).thenReturn(""LOCAL""); when(envVarsMock.get(""BUILD_URL"")).thenReturn(""http://localhost:8080/jira-testing/job/01"");  PowerMockito.mockStatic(Site.class); Mockito.when(Site.get(any())).thenReturn(siteMock); when(siteMock.getService()).thenReturn(jiraServiceMock);  when(runMock.getCauses()).thenReturn(null); when(taskListenerMock.getLogger()).thenReturn(printStreamMock); doNothing().when(printStreamMock).println();  final ResponseDataBuilder<Object> builder = ResponseData.builder(); when(jiraServiceMock.createIssue(any())) .thenReturn(builder.successful(true).code(200).message(""Success"").build());  when(contextMock.get(Run.class)).thenReturn(runMock); when(contextMock.get(TaskListener.class)).thenReturn(taskListenerMock); when(contextMock.get(EnvVars.class)).thenReturn(envVarsMock); } "	0	0	1	0	1	0
"private boolean isValidEndpoint(String endpoint) { if (InetAddressValidator.getInstance().isValid(endpoint)) { return true; }  // endpoint may be a hostname // refer https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names // why checks are done like below if (endpoint.length() < 1 || endpoint.length() > 253) { return false; }  for (String label : endpoint.split(""\\."")) { if (label.length() < 1 || label.length() > 63) { return false; }  if (!(label.matches(""^[a-zA-Z0-9][a-zA-Z0-9-]*"") && endpoint.matches("".*[a-zA-Z0-9]$""))) { return false; } }  return true; } "	0	0	1	1	1	0
"@Override public CommandResult execute() {  UnmodifiableObservableList<ReadOnlyItem> lastShownList = model.getFilteredItemList();  if (lastShownList.size() < targetIndex) { indicateAttemptToExecuteIncorrectCommand(); return new CommandResult(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX); }  ReadOnlyItem itemToDelete = lastShownList.get(targetIndex - 1);  try { model.deleteItem(itemToDelete); } catch (ItemNotFoundException infe) { assert false : ""The target item cannot be missing""; } return new CommandResult(String.format(MESSAGE_DELETE_ITEM_SUCCESS, itemToDelete)); } "	1	0	1	1	1	0
private void checkCardForEvent() {  if (cardBeyondLeftBorder()) { animateOffScreenLeft() .setListener(new Animator.AnimatorListener() {  @Override public void onAnimationStart(Animator animation) {  }  @Override public void onAnimationEnd(Animator animation) { callback.cardSwipedLeft(); }  @Override public void onAnimationCancel(Animator animation) {  }  @Override public void onAnimationRepeat(Animator animation) { } }); this.deactivated = true; } else if (cardBeyondRightBorder()) { animateOffScreenRight() .setListener(new Animator.AnimatorListener() {  @Override public void onAnimationStart(Animator animation) {  }  @Override public void onAnimationEnd(Animator animation) { callback.cardSwipedRight(); }  @Override public void onAnimationCancel(Animator animation) {  }  @Override public void onAnimationRepeat(Animator animation) {  } }); this.deactivated = true; } else { resetCardPosition(); } } 	0	0	1	1	0	0
private int lineToY(int line) { int h = textArea.getVisibleRect().height; float lineCount = textArea.getLineCount(); return (int)(((line-1)/(lineCount-1)) * h) - 2; } 	1	1	1	1	0	0
"public boolean useAbility(String b) throws Exception{ if(b.equals(""1"")&&player.hatchet()&&useMana(40)){ wildSlash(); return true; } else if(b.equals(""2"")&&player.hatchet()&&warCryCount<4&&useMana(40)) { warCry(); return true; } else if(b.equals(""2"")&&player.hatchet()&&warCryCount>4&&useMana(40)) { println(""You decide not to push your luck with the gods.""); } else if(b.equals(""1"")&&(player.swordandboard()||player.sword())&&useMana(30)) { defStance(); return false; } else if(b.equals(""2"")&&player.swordandboard()&&useMana(20)) { shieldBash(); return true; } else if(b.equals(""1"")&&player.staff()) { manaSurge(); if(overflow){ return true; } else{ return false; } } else if(b.equals(""2"")&&player.staff()&&player.getMana()>=60) { split(); return false; } else if(b.equals(""1"")&&player.dagger()&&useMana(20)) { fPact(); return true; } else if(b.equals(""2"")&&player.dagger()&&useMana(30)) { wrath(); return true; } else if(b.equals(healthNum)&&healthPot>0){ healthPot--; int heal=player.getHeal()+20; println(""You heal for ""+heal+"" health!"",35); player.setHealth(player.getHealth()+heal); return false; } else if(b.equals(manaNum)&&manaPot>0){ manaPot--; int regen=(int)(((double)player.getMaxMana()-(double)player.getMana())*0.3); println(""You regenerate ""+regen+"" mana!"",35); player.setMana(player.getMana()+regen); return false; } else if(b.equals(statusNum)&&statusPot>0){ statusPot--; removeEffects(); println(""You remove your debuff"",35); return false; } else if(b.equals(fireNum)&&firePot>0){ fireBlast(); return false; } else if(b.equals(goodNum)&&goodPot>0){ player.immune(2); return false; } if(b.equals(manaNum)) { System.out.println(""{Cinthas} I am unable to consume this type of matter""); } return false; } "	0	0	0	1	1	0
"private Panel createUserPanel(final UserContext user) {  final Panel panel = new Panel();  // HELP // // Add a command that will print a list of all commands and their // descriptions when the user enters ""help"" while on the user panel. // panel.register(""help"", new Panel.Command() { @Override public void invoke(List<String> args) { System.out.println(""USER MODE""); System.out.println(""  c-list""); System.out.println(""    List all conversations that the current user can interact with.""); System.out.println(""  c-add <title>""); System.out.println(""    Add a new conversation with the given title and join it as the current user.""); System.out.println(""  c-join <title>""); System.out.println(""    Join the conversation as the current user.""); System.out.println(""  info""); System.out.println(""    Display all info for the current user""); System.out.println(""  back""); System.out.println(""    Go back to ROOT MODE.""); System.out.println(""  exit""); System.out.println(""    Exit the program.""); } });  // C-LIST (list conversations) // // Add a command that will print all conversations when the user enters // ""c-list"" while on the user panel. // panel.register(""c-list"", new Panel.Command() { @Override public void invoke(List<String> args) { for (final ConversationContext conversation : user.conversations()) { System.out.format( ""CONVERSATION %s (UUID:%s)\n"", conversation.conversation.title, conversation.conversation.id); } } });  // C-ADD (add conversation) // // Add a command that will create and join a new conversation when the user // enters ""c-add"" while on the user panel. // panel.register(""c-add"", new Panel.Command() { @Override public void invoke(List<String> args) { final String name = args.size() > 0 ? args.get(0) : """"; if (name.length() > 0) { final ConversationContext conversation = user.start(name); if (conversation == null) { System.out.println(""ERROR: Failed to create new conversation""); } else { panels.push(createConversationPanel(conversation)); } } else { System.out.println(""ERROR: Missing <title>""); } } });  // C-JOIN (join conversation) // // Add a command that will joing a conversation when the user enters // ""c-join"" while on the user panel. // panel.register(""c-join"", new Panel.Command() { @Override public void invoke(List<String> args) { final String name = args.size() > 0 ? args.get(0) : """"; if (name.length() > 0) { final ConversationContext conversation = find(name); if (conversation == null) { System.out.format(""ERROR: No conversation with name '%s'\n"", name); } else { panels.push(createConversationPanel(conversation)); } } else { System.out.println(""ERROR: Missing <title>""); } }  // Find the first conversation with the given name and return its context. // If no conversation has the given name, this will return null. private ConversationContext find(String title) { for (final ConversationContext conversation : user.conversations()) { if (title.equals(conversation.conversation.title)) { return conversation; } } return null; } });  // STATUS UPDATE (status update) // // Add a command that will print all of the updated things that the // user is interested in. // panel.register(""status-update"", new Panel.Command() { @Override public void invoke(List<String> args) { HashMap<Uuid, Collection<ConversationHeader>> interestedUsers = new HashMap<Uuid, HashSet<ConversationHeader>>(); HashMap<Uuid, Integer> interestedConversations = new HashMap<Uuid, Integer>(); user.getStatusUpdate(interestedUsers, interestedConversations);  for (final Map.Entry<Uuid, Collection<ConversationHeader>> entry : interestedUsers.entrySet()) { Uuid userid = entry.getKey(); Collection<ConversationHeader> conversations = entry.getValue(); System.out.format( ""Interested user's uuid:%s\n\tNew/Updated Conversations:\n"", userid); for (ConversationHeader conversation : conversations) { System.out.format( ""\t\tCONVERSATION %s (UUID:%s)\n"", conversation.title, conversation.id); } } for (final Map.Entry<Uuid, Integer> entry : interestedConversations.entrySet()) { Uuid conversationid = entry.getKey(); Integer newMessages = entry.getValue(); System.out.format( ""Interested conversation's uuid:%s\n\tNumber of new messages:%s\n"", conversationid, newMessages); } } });  // INFO // // Add a command that will print info about the current context when the // user enters ""info"" while on the user panel. // panel.register(""info"", new Panel.Command() { @Override public void invoke(List<String> args) { System.out.println(""User Info:""); System.out.format(""  Name : %s\n"", user.user.name); System.out.format(""  Id   : UUID:%s\n"", user.user.id); } });  // Now that the panel has all its commands registered, return the panel // so that it can be used. return panel; } "	1	0	1	1	0	0
@Nonnull public JDefinedClass getClass (@Nonnull final TypeElement element) throws ErrorTypeFound, CodeModelBuildingException { ErrorTypePolicy policy = new ErrorTypePolicy (ErrorTypePolicy.EAction.THROW_EXCEPTION, true); return getClass (element, policy); } 	1	0	1	0	1	0
private void loadAccountTypesList(){ String[] accountTypes = getResources().getStringArray(R.array.account_type_entry_values); ArrayAdapter<String> accountTypesAdapter = new ArrayAdapter<String>( getActivity(), android.R.layout.simple_list_item_1, accountTypes);  accountTypesAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); mAccountTypeSpinner.setAdapter(accountTypesAdapter);  } 	1	0	1	1	0	0
@Override public boolean checkEntity(int pMode, Entity pEntity) { if (owner.maidInventory.getInventorySlotContainItem(ItemArrow.class) < 0) return false; if (!MaidHelper.isTargetReachable(owner, pEntity, 100)) return false;  return !owner.getIFF(pEntity); } 	0	0	1	0	1	0
private int estimateNumberPeriods(LocalDate start, LocalDate end) { int termInYearsEstimate = end.getYear() - start.getYear() + 2; return (int) (frequency.eventsPerYearEstimate() * termInYearsEstimate); } 	0	0	0	0	0	1
public Builder putShort(short h) { ByteBuffers.enlargeByteBuffer(buf, ByteBuffers.SHORT_BYTES); buf.putShort(h); return this; } 	1	0	1	1	1	0
public Builder putChar(char c) { ByteBuffers.enlargeByteBuffer(buf, ByteBuffers.BYTE_BYTES); buf.put((byte) c); return this; } 	1	0	1	1	1	0
"public static void main( String[] args ) {  Problem curProb = new PE0040(); String result = curProb.getResult();  IO.info( ""result for problem #"" + curProb ); IO.info( "" is '"" + result + ""'"" ); IO.infoln( "" found in "" + curProb.getRuntime( 2 ) + "" ms"" );  } "	0	0	1	0	1	0
"@Test (expected = IllegalArgumentException.class) public void toParseResponse_EmptyTypesList_Test() { final Ds3ResponseCode responseCode = new Ds3ResponseCode(200, ImmutableList.of()); toParseResponse(responseCode, ""TestResponse""); } "	0	0	1	0	1	0
"public void updateIndex(String username, String password) throws IOException { IndexUpdater indexUpdater; Wagon httpWagon; try { indexUpdater = plexusContainer.lookup(IndexUpdater.class); httpWagon = plexusContainer.lookup(Wagon.class, ""http""); } catch (ComponentLookupException e) { throw new IOException(e); }  LOGGER.info(""Updating maven index...""); TransferListener listener = new AbstractTransferListener() { @Override public void transferCompleted(TransferEvent transferEvent) { LOGGER.debug(""Downloading "" + transferEvent.getResource().getName() + "" successfull""); }  @Override public void transferProgress(TransferEvent transferEvent, byte[] buffer, int length) { }  @Override public void transferStarted(TransferEvent transferEvent) { LOGGER.debug(""Downloading "" + transferEvent.getResource().getName()); } };  AuthenticationInfo info = null; if (username != null && password != null) { info = new AuthenticationInfo(); info.setUserName(username); info.setPassword(password); } ResourceFetcher resourceFetcher = new WagonHelper.WagonFetcher(httpWagon, listener, info, null); Date lastUpdateLocalRepo = indexingContext.getTimestamp(); IndexUpdateRequest updateRequest = new IndexUpdateRequest(indexingContext, resourceFetcher); IndexUpdateResult updateResult = indexUpdater.fetchAndUpdateIndex(updateRequest); if (updateResult.isFullUpdate()) { LOGGER.debug(""Full update happened!""); } else if (updateResult.getTimestamp().equals(lastUpdateLocalRepo)) { LOGGER.debug(""No update needed, index is up to date!""); } else { LOGGER.debug(""Incremental update happened, change covered "" + lastUpdateLocalRepo + "" - "" + updateResult.getTimestamp() + "" period.""); } } "	0	0	0	1	1	0
"public void move(String sourceId, String destinationId, boolean correctRoot, boolean solveDuplicates) throws IOException { String customDestinationId = destinationId; String customSourceId = sourceId; if (correctRoot) { customDestinationId = correctRootFolder(destinationId); customSourceId = correctRootFolder(sourceId); } createFolderRec(WebdavIdUtil.getParentIdFromChildId(destinationId)); String customDestinationUrl = endpoint.getEndpoint() + customDestinationId; if (solveDuplicates) customDestinationUrl = solveDuplicateFiles(endpoint.getEndpoint() + customDestinationId); _log.debug(""moving "" + customSourceId + "" to "" + customDestinationUrl); endpoint.getSardine().move(endpoint.getEndpoint() + customSourceId, customDestinationUrl); } "	1	0	0	0	1	0
@Override public final boolean execute(CommandSender sender, String commandLabel, String[] args) { commandLabel = commandLabel.toLowerCase();  execSubcommand = null; execLabel = commandLabel; origArgs = args;  if (args.length == 0) { if (preCommand(sender, commandLabel, args)) { return true; } onDefault(sender, commandLabel); return true; }  CommandSearch cmd = findSubCommand(args); if (cmd != null) { execSubcommand = cmd.getCheckSub(); final String[] execargs = Arrays.copyOfRange(args, cmd.argIndex, args.length); if (preCommand(sender, commandLabel, execargs)) { return true; } executeCommand(sender, execargs, cmd.cmd); return true; }  if (!onUnknown(sender, commandLabel, args)) { help(sender, args); } return true; } 	0	0	1	1	0	0
@Override public void onCreate() { super.onCreate(); mGoogleApiClient = new GoogleApiClient.Builder(this) .addApi(Wearable.API) .build(); mGoogleApiClient.connect(); mVibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE); } 	0	0	1	1	0	0
"public void testInvalidLength() throws IOException { BytesStreamOutput streamOutput = new BytesStreamOutput(frameDecoder.nextReadLength()); streamOutput.write('E'); streamOutput.write('S'); streamOutput.writeInt(-2); streamOutput.write('M'); streamOutput.write('A');  try { frameDecoder.decode(streamOutput.bytes()); fail(""Expected exception""); } catch (Exception ex) { assertThat(ex, instanceOf(StreamCorruptedException.class)); assertEquals(""invalid data length: -2"", ex.getMessage()); } } "	1	0	1	0	1	0
public Webpath resolve(Webpath other) { if (other.path.isEmpty()) { return this; } else if (other.isAbsolute()) { return other; } else if (hasTrailingSeparator()) { return new Webpath(path + other.path); } else { return new Webpath(path + SEPARATOR + other.path); } } 	0	0	0	1	1	0
@Override public void addData(String val) { String fval = StringUtils.trimToEmpty(val); if ( !isMissingVal(fval) ) { double dval = 0;  try { dval = Double.parseDouble(fval); } catch (NumberFormatException e) { // not a number? just ignore super.incInvalidValCnt(); return; }  process(dval); } else { super.incMissingValCnt(); }  } 	1	0	1	0	1	0
public WireMockConfiguration usingFilesUnderClasspath(String path) { this.filesRoot = new ClasspathFileSource(path); return this; } 	0	0	1	0	1	0
"public void receiveNewNsr(String message) { OpenbatonEvent openbatonEvent; try { openbatonEvent = getOpenbatonEvent(message); logger.debug(""Received nfvo event with action: "" + openbatonEvent.getAction());  NetworkServiceRecord nsr = getNsrFromPayload(openbatonEvent.getPayload()); /*// clean failed vnfc instances if (openbatonEvent.getAction() == Action.INSTANTIATE_FINISH) if (!failedVnfrId.isEmpty() && ham.hasFailedVnfcInstances(failedVnfrId)) recoveryActionFinishedOnVnfr(failedVnfrId); else if (!failedVnfrId.isEmpty()) failedVnfrId = """"; // clean check complete*/ boolean isNSRManaged = policyManager.isNSRManaged(nsr.getId()); if (isNSRManaged) { if (openbatonEvent.getAction() == Action.HEAL) { logger.debug(""Recoveri action finished on nsr:"" + nsr.getId()); recoveryActionFinishedOnNsr(nsr.getId()); } } else policyManager.manageNSR(nsr); } catch (Exception e) { if (logger.isDebugEnabled()) logger.error(e.getMessage(), e); else logger.error(e.getMessage()); } } "	0	0	1	0	1	0
public void setAlarm(int time, PendingIntent pendingIntent) { AlarmManager alarmManager = getAlarmManager(); alarmManager.set(AlarmManager.ELAPSED_REALTIME, SystemClock.elapsedRealtime() + time, pendingIntent); } 	1	0	1	1	1	0
@Override public boolean onKeyDown(int keyCode, KeyEvent event) { if ((keyCode == KeyEvent.KEYCODE_BACK) && webView.canGoBack() && webView.getVisibility() == View.VISIBLE) { webView.goBack(); return true; } return super.onKeyDown(keyCode, event); } 	1	0	0	1	1	0
@Test public void lowSpecificityShouldFollowHigherSpecificity() { //when subject = new DifferentialProfileComparator<>(true, null, allContrasts, Regulation.UP);  when(profileMock1.getSpecificity(Regulation.UP)).thenReturn(1); when(profileMock2.getSpecificity(Regulation.UP)).thenReturn(2);  //then int comparison = subject.compare(profileMock1, profileMock2);  assertThat(comparison, lessThan(0)); } 	1	0	1	1	1	0
@Override public void dispose() { Disposer.dispose(this); jfxPanelRetina.removeNotify(); //fixme @see com.github.shyykoserhiy.gfm.editor.GfmPreviewFX.JFXPanelRetina.removeNotify() } 	1	0	0	0	1	0
"public boolean connect() { try { System.out.println(""Connecting to database!"");  // try to connect to database Class.forName(""org.h2.Driver""); connection = DriverManager.getConnection(database, user, password); statement = connection.createStatement(); connected = true; return true; } catch (ClassNotFoundException | SQLException e) { // some Exception System.err.println(""Cannot connect to database!""); // e.printStackTrace(); return false; } } "	0	0	1	0	0	0
"protected String fillVariablesFromSourceFileValues(BaseFile baseFile, String temp) { FileStageSettings fs = baseFile.getFileStage(); String _temp = temp; if (fs != null) temp = fs.fillStringContent(temp); if (temp == null) temp = _temp; //TODO Look why temp gets null. This should not be the case. //pid, sample, run... if (fs != null) temp = temp.replace(""${fileStageID}"", fs.getIDString()); temp = temp.replace(""${pid}"", baseFile.getDataSet().toString()); // TODO: Move to plugin. temp = temp.replace(""${dataSet}"", baseFile.getDataSet().toString()); return temp; } "	0	0	1	1	0	0
"private NamedList<Object> buildEntryValue(MultiPartString term, long count, PostingsEnum postings, Bits liveDocs) throws IOException { NamedList<Object> entry = new NamedList<>();  // document count for this term entry.add(KEY_COUNT, count);  NamedList<Object> self = new NamedList<>(); entry.add(KEY_SELF, self);  self.add(KEY_COUNT, 0L); overwriteInNamedList(self, KEY_FILING, term.getFiling()); if(term.getPrefix() != null) { overwriteInNamedList(self, KEY_PREFIX, term.getPrefix()); }  NamedList<Object> refs = new NamedList<>();  while (postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) { if (!liveDocs.get(postings.docID())) { continue; } for (int j = 0; j < postings.freq(); j++) { postings.nextPosition();  BytesRef payload = postings.getPayload(); if (payload != null) { String payloadStr = payload.utf8ToString(); int pos = payloadStr.indexOf(JsonReferencePayloadTokenizer.PAYLOAD_ATTR_SEPARATOR); if (pos != -1) { String referenceType = payloadStr.substring(0, pos); String target = payloadStr.substring(pos + 1);  MultiPartString multiPartString = MultiPartString.parseFilingAndPrefix(target); String displayName = multiPartString.getDisplay();  NamedList<Object> displayNameStructs = getOrCreateNamedListValue(refs, referenceType);  NamedList<Object> nameStruct = getOrCreateNamedListValue(displayNameStructs, displayName);  incrementLongInNamedList(nameStruct, KEY_COUNT);  overwriteInNamedList(nameStruct, KEY_FILING, multiPartString.getFiling()); if(multiPartString.getPrefix() != null) { overwriteInNamedList(nameStruct, KEY_PREFIX, multiPartString.getPrefix()); } } } else { // no payload means term is for self, so increment count incrementLongInNamedList(self, KEY_COUNT); }  // Couldn't get this to work: postings.attributes() doesn't return anything: why? /* ReferenceAttribute refAtt = postings.attributes().getAttribute(ReferenceAttribute.class); if(refAtt != null) { System.out.println(""found refAttr, "" + refAtt.getReferenceType() + "","" + refAtt.getTarget()); } */ } }  if(refs.size() > 0) { entry.add(KEY_REFS, refs); }  return entry; } "	1	0	1	1	0	0
@Test public void playServicesDisabled_should_broadcast_ACTION_PLAY_SERVICES_DISABLED(){ bc.playServicesDisable();  verify(bc.mLbm).sendBroadcast(intentArg.capture()); assertThat(intentArg.getValue().getAction()) .isEqualTo(LocPubBroadcasters.ACTION_PLAY_SERVICES_DISABLED); } 	0	0	1	0	1	0
"public static void main(String[] args) { try(AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(DatabaseConfiguration.class)){ System.out.println(""-------------------------------------------------------------------------------------"");  UserService userService = context.getBean(UserService.class);  User user = userService.getById(1L); System.out.println(user);  user = userService.getByLogin(user.getLogin()); System.out.println(user);  //            userService.save(user);  System.out.println(""-------------------------------------------------------------------------------------""); } } "	1	0	1	0	1	0
public static Swagger readJson(File file) throws IOException { return Json.mapper().readValue(file, Swagger.class); } 	0	0	1	0	1	0
"public void opMakeCopy(File localAbspath, SVNSkel conflicts, SVNSkel workItems) throws SVNException { assert isAbsolute(localAbspath);  DirParsedInfo parsed = parseDir(localAbspath, Mode.ReadOnly); SVNWCDbDir pdh = parsed.wcDbDir; verifyDirUsable(pdh); File localRelpath = toRelPath(localAbspath); SVNSqlJetDb sdb = pdh.getWCRoot().getSDb(); sdb.beginTransaction(SqlJetTransactionMode.WRITE); SVNSqlJetStatement stmt = null; try { stmt = sdb.getStatement(SVNWCDbStatements.SELECT_WORKING_NODE); stmt.bindf(""is"", pdh.getWCRoot().getWcId(), localRelpath); boolean haveRow = stmt.next();  if (haveRow) { SVNErrorMessage errorMessage = SVNErrorMessage.create(SVNErrorCode.WC_PATH_UNEXPECTED_STATUS, ""Modification of '{{0}}' already exists"", localAbspath); SVNErrorManager.error(errorMessage, SVNLogType.WC); }  catchCopyOfServerExcluded(pdh.getWCRoot(), localRelpath);  MakeCopy makeCopy = new MakeCopy(); makeCopy.pdh = pdh; makeCopy.localAbspath = localAbspath; makeCopy.localRelpath = localRelpath; makeCopy.opDepth = SVNWCUtils.relpathDepth(localRelpath); makeCopy.conflicts = conflicts; makeCopy.workItems = workItems; sdb.runTransaction(makeCopy);  } finally { if (stmt != null) { stmt.reset(); } sdb.commit(); } } "	0	0	1	1	0	0
"@Test public void startHandingShouldProduceAllMetrics() throws Exception {  // setup ProxyMonitorServiceHandlerImpl handlerToTest = new ProxyMonitorServiceHandlerImpl();  final SoapMessageImpl soapMessage = build(DEFAULT_OWNER_CLIENT, MONITOR_SERVICE_ID, ""testUser"", randomUUID().toString());  when(mockProxyMessage.getSoap()).thenReturn(soapMessage); when(mockProxyMessage.getSoapContent()).thenReturn( new ByteArrayInputStream(soapMessage.getXml().getBytes(soapMessage.getCharset())));   handlerToTest.canHandle(MONITOR_SERVICE_ID, mockProxyMessage);  final String expectedMetricsSetName = ""someName"";  MetricSetType metricSetType = new MetricSetType(); metricSetType.setName(expectedMetricsSetName);  final List<MetricType> metrics = metricSetType.getMetrics();  StringMetricType type = new StringMetricType(); final String expectedMetricName = ""metricName123-23""; type.setName(expectedMetricName);  final String expectedMetricValue = ""123SomeValue""; type.setValue(expectedMetricValue); metrics.add(type);  MonitorClient mockMonitorClient = PowerMockito.mock(MonitorClient.class); PowerMockito.when(mockMonitorClient.getMetrics(anyList())).thenReturn(metricSetType);  RestoreMonitorClientAfterTest.setMonitorClient(mockMonitorClient);  // execution handlerToTest.startHandling(mockRequest, mockProxyMessage, mock(HttpClient.class), mock(OpMonitoringData.class));  //verification assertThat(""Wrong content type"", handlerToTest.getResponseContentType(), is(TEXT_XML_UTF8));  final SOAPMessage message = messageFactory.createMessage(null, handlerToTest.getResponseContent());  final SoapHeader xrHeader = unmarshaller.unmarshal(message.getSOAPHeader(), SoapHeader.class).getValue();  assertThat(""Response client does not match"", xrHeader.getClient(), is(DEFAULT_OWNER_CLIENT)); assertThat(""Response client does not match"", xrHeader.getService(), is(MONITOR_SERVICE_ID));  final MetricSetType root = verifyAndGetSingleBodyElementOfType(message.getSOAPBody(), GetSecurityServerMetricsResponse.class, () -> unmarshaller).getMetricSet(); // root metrics should have the security server id as name assertThat(""Metrics set name does not match"", root.getName(), is(DEFAULT_OWNER_SERVER.toString()));  final List<MetricType> responseMetrics = root.getMetrics(); assertThat(""Missing proxy version from metrics"", responseMetrics, hasItem(hasProperty(""name"", is(""proxyVersion""))));  assertThat(""Missing the expected metrics set"", responseMetrics, hasItem(instanceOf(MetricSetType.class)));  final MetricSetType responseDataMetrics = (MetricSetType) responseMetrics.stream() // we just asserted this.. .filter(m -> m instanceof MetricSetType).findFirst().orElseThrow(IllegalStateException::new);  assertThat(responseDataMetrics.getName(), is(expectedMetricsSetName)); assertThat(responseDataMetrics.getMetrics().size(), is(1));  final StringMetricType responseMetric = (StringMetricType) responseDataMetrics.getMetrics().get(0); assertThat(""Wrong metric name"", responseMetric.getName(), is(expectedMetricName)); assertThat(""Wrong metric value"", responseMetric.getValue(), is(expectedMetricValue)); } "	0	1	1	0	0	0
"private void postMessage(final View view) { // Ensure that the edit text field and the account exist. View layout = getView(); EditText editText = layout != null ? (EditText) layout.findViewById(R.id.messageEditText) : null; Account account = AccountManager.instance.getCurrentAccount(); if (account == null || editText == null) { // Something is wrong.  Log it and tell the User. Snackbar.make(view, ""Software error: could not send message!"", Snackbar.LENGTH_LONG); dismissKeyboard(); return; }  // The account and the edit text field exist.  Persist the message to the database and // inform the User that the message has been sent. String text = editText.getText().toString(); String roomKey = mItem.key; Room room = RoomManager.instance.getRoomProfile(roomKey); MessageManager.instance.createMessage(text, STANDARD, account, room); editText.setText(""""); Snackbar.make(layout, ""Message sent."", Snackbar.LENGTH_SHORT); dismissKeyboard(); } "	0	0	1	0	1	0
"public static ArrayList<Card> cardsToPassComp1() { //------This is a card passer for HAL9000 that emphasizes self preservation-----\\  int indexOfQueen = 0; Card computerSelection = null; Boolean foundQueen = false; List<Card> arrayOfWholeHandComp1 = new ArrayList<>(); ArrayList<Card> arrayOfCardsToPass = new ArrayList<>();  for (int i = 0; i < Table.getInstance().getPlayer2().getHand().size(); i++) { //Searches the computers hand for the index of the queen of Spade computerSelection = Table.getInstance().getPlayer2().getHand().get(i); arrayOfWholeHandComp1.add(computerSelection);  if (computerSelection.toString().equals(""Queen of Spades"")) { foundQueen = true; indexOfQueen = i; } }  if (foundQueen) { //if the queen exists in HAL's hand he will automatically pass it & the two highest cards. System.out.println(""I FOUND THE QUEEEEEENNNN!""); arrayOfCardsToPass.add(Table.getInstance().getPlayer2().getHand().get(indexOfQueen)); Table.getInstance().getPlayer2().getHand().remove(indexOfQueen);  for (int i = 0; i < 2; i++) { int current = 0; int highest = Table.getInstance().getPlayer2().getHand().get(0).getRank().getValue(); int index = 0; for (int j = 0; j < Table.getInstance().getPlayer2().getHand().size(); j++) { current = Table.getInstance().getPlayer2().getHand().get(j).getRank().getValue(); if (current > highest) { highest = current; index = j; } } arrayOfCardsToPass.add(Table.getInstance().getPlayer2().getHand().get(index)); System.out.println(""Computer 1 passed: "" + Table.getInstance().getPlayer2().getHand().get(index).toString()); Table.getInstance().getPlayer2().getHand().remove(index); }  } else { //if no Queen of spades esists, then HAL just passes the three highest cards in his hand. for (int i = 0; i < 3; i++) { int current = 0; int highest = Table.getInstance().getPlayer2().getHand().get(0).getRank().getValue(); int index = 0; for (int j = 0; j < Table.getInstance().getPlayer2().getHand().size(); j++) { current = Table.getInstance().getPlayer2().getHand().get(j).getRank().getValue(); if (current > highest) { highest = current; index = j; } } arrayOfCardsToPass.add(Table.getInstance().getPlayer2().getHand().get(index)); System.out.println(""Computer 1 passed: "" + Table.getInstance().getPlayer2().getHand().get(index).toString()); Table.getInstance().getPlayer2().getHand().remove(index); } } return arrayOfCardsToPass; } "	1	1	1	1	0	0
"@Override public Requirement handle(@Valid EditRequirementCommand command) {  Requirement requirement = command.getRequirement();  if (requirement == null) { throw new MissingRequirementInformationException(""No data provided to edit a requirement""); }  if (StringUtils.isEmpty(requirement.getId())) { throw new InvalidRequirementInformationException(""No ID found""); }  if (StringUtils.isEmpty(requirement.getProjectBranchId())) { throw new InvalidRequirementInformationException(""No branch ID found""); }  Requirement withSameKey = requirementDAO.findByKeyAndProjectBranchId(requirement.getKey(), requirement.getProjectBranchId());  if (withSameKey != null && withSameKey.getId() != requirement.getId()) { throw new RequirementAlreadyExistException(requirement.getKey()); }  requirementDAO.save(requirement);  revisionService.commit(requirement);  return requirement;  } "	0	0	1	0	1	0
"public void getBox(WritableByteChannel writableByteChannel) throws IOException { header = ByteBuffer.allocate(16); long size = getSize(); if (isSmallBox(size)) { IsoTypeWriter.writeUInt32(header, size); } else { IsoTypeWriter.writeUInt32(header, 1); } header.put(IsoFile.fourCCtoBytes(""mdat"")); if (isSmallBox(size)) { header.put(new byte[8]); } else { IsoTypeWriter.writeUInt64(header, size); } header.rewind(); writableByteChannel.write(header); } "	1	0	0	0	1	0
"public void medicalAggregationHandleSuccessResponse(JSONObject response){ try { hideProgress(); JSONObject healthHistory = response.getJSONObject(""health_history""); String conditonsNames = """"; Log.v(""HISTORY REPONSE"", response.toString()); if(type == TYPE_CONSTANT.CONDITION){ JSONArray conditonsArray = healthHistory.getJSONArray(""conditions""); for (int i = 0; i < conditonsArray.length(); i++) { if (conditonsArray.getJSONObject(i).getString(""condition"").trim() != null && !conditonsArray.getJSONObject(i).getString(""condition"").trim().equals("""")) { conditonsNames += conditonsArray.getJSONObject(i).getString(""condition""); if (i != conditonsArray.length() - 1) { conditonsNames += "", ""; } } } if (conditonsNames.trim().length() == 0) conditonsNames = getString(R.string.mdl_no_condition_reported); Log.v(""conditonsNames"", conditonsNames); resultData.putExtra(""conditionsData"", conditonsNames); }else if(type == TYPE_CONSTANT.MEDICATION){ JSONArray conditonsArray = healthHistory.getJSONArray(""medications""); for (int i = 0; i < conditonsArray.length(); i++) { if (conditonsArray.getJSONObject(i).getString(""name"").trim() != null && !conditonsArray.getJSONObject(i).getString(""name"").trim().equals("""")) { conditonsNames += conditonsArray.getJSONObject(i).getString(""name""); if (i != conditonsArray.length() - 1) { conditonsNames += "", ""; } } } if (conditonsNames.trim().length() == 0) conditonsNames = getString(R.string.mdl_no_medications_reported); resultData.putExtra(""medicationData"", conditonsNames); }else if(type == TYPE_CONSTANT.ALLERGY){ JSONArray conditonsArray = healthHistory.getJSONArray(""allergies""); for (int i = 0; i < conditonsArray.length(); i++) { if (conditonsArray.getJSONObject(i).getString(""name"").trim() != null && !conditonsArray.getJSONObject(i).getString(""name"").trim().equals("""")) { conditonsNames += conditonsArray.getJSONObject(i).getString(""name""); if (i != conditonsArray.length() - 1) { conditonsNames += "", ""; } } } if (conditonsNames.trim().length() == 0) conditonsNames = getString(R.string.mdl_no_allergies_reported); resultData.putExtra(""allegiesData"", conditonsNames); }else if(type == TYPE_CONSTANT.PROCEDURE){ JSONArray conditonsArray = healthHistory.getJSONArray(""surgeries""); for (int i = 0; i < conditonsArray.length(); i++) { if (conditonsArray.getJSONObject(i).getString(""name"").trim() != null && !conditonsArray.getJSONObject(i).getString(""name"").trim().equals("""")) { conditonsNames += conditonsArray.getJSONObject(i).getString(""name""); if (i != conditonsArray.length() - 1) { conditonsNames += "", ""; } } } if (conditonsNames.trim().length() == 0) conditonsNames = getString(R.string.mdl_no_procedures_reported); resultData.putExtra(""proceduresData"", conditonsNames); } } catch (JSONException e) { e.printStackTrace(); }  setResult(RESULT_OK, resultData); finish(); MdliveUtils.closingActivityAnimation(MDLiveCommonConditionsMedicationsActivity.this); } "	0	0	1	1	1	0
"public void generateBoxesForZ(final Double z) throws Exception {  LOG.info(""generateBoxesForZ: {}, entry, boxDirectory={}, dataClient={}"", z, boxDirectory, renderDataClient);  final Bounds layerBounds = renderDataClient.getLayerBounds(stack, z); final SectionBoxBounds boxBounds = new SectionBoxBounds(z, boxWidth, boxHeight, layerBounds);  if (params.renderGroup != null) { boxBounds.setRenderGroup(params.renderGroup, params.numberOfRenderGroups, params.maxLevel); }  final List<TileBounds> tileBoundsList = renderDataClient.getTileBounds(stack, z); final int tileCount = tileBoundsList.size();  final TileBounds firstTileBounds = tileBoundsList.get(0); final TileSpec firstTileSpec = renderDataClient.getTile(stack, firstTileBounds.getTileId());  LOG.info(""generateBoxesForZ: {}, layerBounds={}, boxBounds={}, tileCount={}"", z, layerBounds, boxBounds, tileCount);  final ImageProcessorCache imageProcessorCache; if (params.label) { imageProcessorCache = new LabelImageProcessorCache(ImageProcessorCache.DEFAULT_MAX_CACHED_PIXELS, true, false, firstTileSpec.getWidth(), firstTileSpec.getHeight(), tileCount); } else { imageProcessorCache = new ImageProcessorCache(); }  BoxMipmapGenerator boxMipmapGenerator = new BoxMipmapGenerator(z.intValue(), params.label, format, boxWidth, boxHeight, boxDirectory, 0, boxBounds.getFirstRow(), boxBounds.getLastRow(), boxBounds.getFirstColumn(), boxBounds.getLastColumn(), params.forceGeneration); final IGridPaths iGridPaths; if (params.createIGrid) { iGridPaths = new IGridPaths(boxBounds.getLastRow(), boxBounds.getLastColumn()); } else { iGridPaths = null; }  generateLevelZero(z, boxBounds, tileCount, imageProcessorCache, boxMipmapGenerator, iGridPaths);  if (iGridPaths != null) { final Path iGridDirectory = Paths.get(boxDirectory.getAbsolutePath(), ""0"", ""iGrid""); iGridPaths.saveToFile(iGridDirectory.toFile(), z, emptyImageFile); }  final Path overviewDirPath = Paths.get(boxDirectory.getAbsolutePath(), ""small""); final String overviewFileName = z.intValue() + ""."" + format.toLowerCase(); final File overviewFile = new File(overviewDirPath.toFile(), overviewFileName).getAbsoluteFile(); boolean isOverviewGenerated = (! params.forceGeneration) && overviewFile.exists();  if (isOverviewGenerated) { LOG.info(""generateBoxesForZ: {}, overview {} already generated"", z, overviewFile.getAbsolutePath()); }  for (int level = 0; level < params.maxLevel; level++) { boxMipmapGenerator = boxMipmapGenerator.generateNextLevel(); if (params.isOverviewNeeded() && (! isOverviewGenerated)) { isOverviewGenerated = boxMipmapGenerator.generateOverview(params.overviewWidth, layerBounds, overviewFile); } }  LOG.info(""generateBoxesForZ: {}, exit"", z); } "	0	0	0	0	0	1
"public SpecificationData getSpecificationInfo(YSpecificationID specID) throws IOException { SpecificationData specData = CACHE.getSpecData(specID); if (specData == null) { InterfaceB_EnvironmentBasedClient ibClient = YConnector.getInterfaceBClient(); String handle = ibClient.connect(_userid, _password); String specificationXML = ibClient.getSpecification(specID, handle); check(specificationXML); String wrapped = StringUtil.wrap(specificationXML, ""speclist""); List<SpecificationData> specList = Marshaller.unmarshalSpecificationSummary(wrapped); specData = specList.get(0); CACHE.add(specData); } return specData; } "	0	0	1	0	1	0
"private Set<Episode> fetchEpisodeSet(final EpisodeListProvider db, final Collection<String> names, final SortOrder sortOrder, final Locale locale, final boolean strict) throws Exception { Set<SearchResult> shows = new LinkedHashSet<SearchResult>(); Set<Episode> episodes = new LinkedHashSet<Episode>();  // detect series names and create episode list fetch tasks for (String query : names) { List<SearchResult> results = db.search(query, locale);  // select search result if (results.size() > 0) { List<SearchResult> selectedSearchResults = selectSearchResult(query, results, strict);  if (selectedSearchResults != null) { for (SearchResult it : selectedSearchResults) { if (shows.add(it)) { try { CLILogger.fine(format(""Fetching episode data for [%s]"", it.getName())); episodes.addAll(db.getEpisodeList(it, sortOrder, locale)); } catch (IOException e) { CLILogger.log(Level.SEVERE, e.getMessage()); } } } } } }  return episodes; } "	0	0	1	0	1	0
public MockApi findOneBy(String path, String method) { return repository.findOneByUk(path, method.toLowerCase()); } 	0	0	1	0	1	0
private static String getBaseName(String fileName) { int index = fileName.lastIndexOf('.'); if (index == -1) { return fileName; } else { return fileName.substring(0, index); } } 	0	0	1	1	0	0
@Override public ConsentSection deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {  JsonObject jsonObject =  json.getAsJsonObject(); JsonElement typeJson = jsonObject.get(ConsentSection.SECTION_TYPE_GSON);  ConsentSection.Type type = context.deserialize(typeJson, ConsentSection.Type.class); // This was a custom ConsentSection Type if (type == null) { type = ConsentSection.Type.Custom; }  // This will avoid the infinite loop of using the param json context, // Since this wont have the ConsentSectionAdapter registered Gson gson = new Gson(); ConsentSection consentSection = gson.fromJson(json, ConsentSection.class); consentSection.setType(type);  // If we have a non-custom type, we can auto-populate title, learn more, and image name // if they weren't specifically provided by the JSON if (type != ConsentSection.Type.Custom) { if (adapterProvider != null && adapterProvider.getContext() != null) { if (consentSection.getTitle() == null && type.getTitleResId() != ConsentSection.UNDEFINED_RES) { consentSection.setTitle(adapterProvider.getContext().getString(type.getTitleResId())); } if (consentSection.getCustomLearnMoreButtonTitle() == null && type.getMoreInfoResId() != ConsentSection.UNDEFINED_RES) { consentSection.setCustomLearnMoreButtonTitle(adapterProvider.getContext().getString(type.getMoreInfoResId())); } } if (consentSection.getCustomImageName() == null) { consentSection.setCustomImageName(type.getImageName()); } } else { consentSection.customTypeIdentifier = typeJson.getAsString(); }  // Convert HTML content from filename to actual HTML content if (consentSection.getHtmlContent() != null && adapterProvider != null && adapterProvider.getContext() != null) { String htmlContentPath = ResourceManager.getInstance().generateAbsolutePath( ResourcePathManager.Resource.TYPE_HTML, consentSection.getHtmlContent()); String htmlContent = ResourceManager.getResourceAsString(adapterProvider.getContext(), htmlContentPath); consentSection.setHtmlContent(htmlContent); }  return consentSection; } 	0	0	1	0	0	0
public static String getFolioEpubFolderPath(String epubFileName) { return Environment.getExternalStorageDirectory().getAbsolutePath() + FOLIO_READER_ROOT + epubFileName; } 	1	1	1	1	0	0
private static Optional<Version> lookupCurrent() { return FSUtil.streamDirectory(new File(FSUtil.webDir())) .filter(File::isFile) .map(File::getName) .filter(s -> s.startsWith(WarDownload.WAR_PREFIX)) .filter(s -> s.endsWith(WarDownload.WAR_EXT)) .map(s -> { String versionStr = s.substring(WarDownload.WAR_PREFIX.length(), (s.length() - WarDownload.WAR_EXT.length())); return Version.parseAsOptional(versionStr).orElse(null); }) .filter(version -> version != null) .max(Version::compareTo); } 	0	0	1	1	0	0
public int getBlockLightAt(int x, int y, int z) { return this.getChunk(x >> 4, z >> 4, true).getBlockLight(x & 0x0f, y & 0xff, z & 0x0f); } 	1	0	1	1	1	0
public int getBlockExtraDataAt(int x, int y, int z) { return this.getChunk(x >> 4, z >> 4, true).getBlockExtraData(x & 0x0f, y & 0xff, z & 0x0f); } 	1	0	1	1	1	0
"public void onEndPage(PdfWriter writer, Document document) { Font font = new Font(FontFamily.HELVETICA, 8, Font.NORMAL, GrayColor.BLACK);  ColumnText.showTextAligned(writer.getDirectContent(), Element.ALIGN_CENTER, new Phrase(Localization.getString(Strings.REPORT_FOOTER_LEFT), font), 100, 25, 0); ColumnText.showTextAligned(writer.getDirectContent(), Element.ALIGN_CENTER, new Phrase(Localization.getString(Strings.REPORT_FOOTER_LEFT, document.getPageNumber()), font), 300, 25, 0); ColumnText.showTextAligned(writer.getDirectContent(), Element.ALIGN_CENTER, new Phrase(DateTime.now().toString(""dd.MM.YYYY""), font), 500, 25, 0); } "	0	0	1	0	1	0
"@Override public synchronized boolean addMember(Patient patient) { XWikiContext context = getXContext(); XWiki wiki = context.getWiki(); DocumentReference patientReference = patient.getDocument(); XWikiDocument patientDocument; try { patientDocument = wiki.getDocument(patientReference, context); } catch (XWikiException e) { this.logger.error(""Could not add patient [{}] to family. Error getting patient document: {}"", patient.getId(), e.getMessage()); return false; } String patientAsString = patientReference.toString();  // Add member to Xwiki family List<String> members = getMembers(); if (!members.contains(patientAsString)) { members.add(patientAsString); } else { this.logger.info(""Patient [{}] already a member of family [{}]. Not adding"", patientAsString, getId()); return false; } BaseObject familyObject = this.familyDocument.getXObject(Family.CLASS_REFERENCE); familyObject.set(FAMILY_MEMBERS_FIELD, members, context);  XWikiFamily.familyPermissions.setFamilyPermissionsFromPatient(this.familyDocument, patientDocument);  try { XWikiFamilyRepository.setFamilyReference(patientDocument, this.familyDocument, context); } catch (XWikiException e) { this.logger.error(""Could not add patient [{}] to family. Error setting family reference: {}"", patient.getId(), e.getMessage()); return false; }  // TODO: are we handling pedigree right? // Shouldn't the pedigree be merged into the family rather than copied? PedigreeUtils.copyPedigree(patientDocument, this.familyDocument, context);  try { wiki.saveDocument(this.familyDocument, context); wiki.saveDocument(patientDocument, context); } catch (XWikiException e) { this.logger.error(""Could not save family/patient after adding: {}"", e.getMessage()); return false; }  return true; } "	1	0	0	0	1	0
"public void btnStopTrackingOnClick(View v) { trackingManager.stopTracking(true);  Log.d(""JC"", ""Stopped tracking, got number of points: "" + t.getLocations().size());  getTracks(); this.updateStrings(); } "	0	0	1	0	1	0
"private void getProgramPackages(Message message) { if (message instanceof RequestMessage) { JsonObject response = new JsonObject(); Map<String, ModelPackage> packages; JsonObject params = gson.toJsonTree(((RequestMessage) message).getParams()).getAsJsonObject(); TextDocumentPositionParams textDocumentPositionParams = gson.fromJson(params.toString(), TextDocumentPositionParams.class); String fileName = textDocumentPositionParams.getFileName(); String filePath = textDocumentPositionParams.getFilePath(); String packageName = textDocumentPositionParams.getPackageName(); if (!(""temp"".equals(filePath) || """".equals(packageName))) { logger.warn(""Invalid params for getProgramPackages""); return; } Path file = Paths.get(filePath + File.separator + fileName); packages = resolveProgramPackages(Paths.get(filePath), packageName); programPackagesMap.put(file, packages); LangServerManager.this.setPackages(packages.entrySet());  // add package info into response Gson gson = new Gson(); String json = gson.toJson(packages.values()); JsonParser parser = new JsonParser(); JsonArray packagesArray = parser.parse(json).getAsJsonArray(); response.add(""packages"", packagesArray);  ResponseMessage responseMessage = new ResponseMessage(); responseMessage.setId(((RequestMessage) message).getId()); responseMessage.setResult(response); pushMessageToClient(langServerSession, responseMessage);  } else { logger.warn(""Invalid Message type found""); } } "	0	0	1	0	1	0
"@ApiMethod(name = ""leftHome"") public StatusBean leftHome(@Named(""InstallationID"") String InstallationID, @Named(""access_token"") String access_token, @Named(""structure_id"") String structure_id, @Named(""tell_nest"") boolean tell_nest) { StatusBean response = new StatusBean();  response.setSuccess(true); log.info(""left home: tell_nest="" + tell_nest); logEvent(InstallationID, structure_id, ""left home"");  if (InstallationID.isEmpty()) { response.setSuccess(false); response.setMessage(""InstallationID is empty""); return response; }  if (access_token.isEmpty()) { response.setSuccess(false); response.setMessage(""access_token is empty""); return response; }  if (structure_id.isEmpty()) { response.setSuccess(false); response.setMessage(""structure_id is empty""); return response; }  saveStatus(InstallationID, structure_id, ""away"");  boolean others = checkOthersAtHome(InstallationID, structure_id); response.setOthersAtHome(others);  if (others) { response.setNestSuccess(true); response.setNestUpdated(false); response.setMessage(""Others still at home""); } else if (tell_nest) { String nest_away = NestUtil.getNestAwayStatus(access_token);  switch (nest_away) { case ""home"": String result = NestUtil.tellNestAwayStatus(access_token, structure_id, ""away""); response.setMessage(""Nest updated""); if (result.equals(""Success"")) { response.setNestSuccess(true); response.setNestUpdated(true); } else { response.setNestSuccess(false); response.setMessage(result); } break; case ""away"": case ""auto-away"": response.setNestSuccess(true); response.setNestUpdated(false); response.setMessage(""Nest already "" + nest_away); break; default: response.setNestSuccess(false); response.setNestUpdated(false); response.setMessage(nest_away); break; } } else { response.setNestSuccess(true); response.setNestUpdated(false); response.setMessage(""Backend was updated""); } return response; } "	1	0	0	0	0	0
public Map<String, StarcraftUnit> getStarcraftUnits() { return new HashMap<>(starcraftUnits); } 	1	0	0	0	1	0
"public void run() { this.request = this.context.peekRequest(); if(this.request != null) { this.dbInterface = this.context.getDatabase(); if(this.dbInterface != null) { try { this.dbHandle = this.dbInterface.openDatabase(this.context.getAppName()); if(this.dbHandle == null) { this.context.reportError(this.request.callbackJSON, (String)null, IllegalStateException.class.getName() + "": Unable to open database connection""); this.context.popRequest(true); return; }  this.transId = UUID.randomUUID().toString(); this.context.registerActiveConnection(this.transId, this.dbHandle); switch(request.executorRequestType.ordinal()) { case 1: this.updateExecutorContext(); break; case 2: this.getRolesList(); break; case 3: this.getUsersList(); break; case 4: this.getAllTableIds(); break; case 5: this.arbitraryQuery(); break; case 6: this.userTableQuery(); break; case 7: this.getRows(); break; case 8: this.getMostRecentRow(); break; case 9: this.updateRow(); break; case 10: this.changeAccessFilterRow(); break; case 11: this.deleteRow(); break; case 12: this.addRow(); break; case 13: this.addCheckpoint(); break; case 14: this.saveCheckpointAsIncomplete(); break; case 15: this.saveCheckpointAsComplete(); break; case 16: this.deleteAllCheckpoints(); break; case 17: this.deleteLastCheckpoint(); break; default: this.reportErrorAndCleanUp(IllegalStateException.class.getName() + "": ExecutorProcessor has not implemented this request type!""); } } catch (ActionNotAuthorizedException var2) { this.reportErrorAndCleanUp(ActionNotAuthorizedException.class.getName() + "": Not Authorized - "" + var2.getMessage()); } catch (ServicesAvailabilityException var3) { this.reportErrorAndCleanUp(ServicesAvailabilityException.class.getName() + "": "" + var3.getMessage()); } catch (SQLiteException var4) { this.reportErrorAndCleanUp(SQLiteException.class.getName() + "": "" + var4.getMessage()); } catch (Throwable var5) { this.reportErrorAndCleanUp(IllegalStateException.class.getName() + "": ExecutorProcessor unexpected exception "" + var5.toString()); }  } } } "	0	0	1	1	0	0
Optional<UserPermissions> getSuperAdminUserPermissions(@Nonnull UserInfo.Username username, @Nonnull Application.Name applicationName) { List<com.intuit.wasabi.repository.cassandra.pojo.UserRole> resultList = getUserRolesWithWildcardAppName( username, applicationName );  return resultList.stream() .filter(t -> SUPERADMIN.equalsIgnoreCase(t.getRole()) ) .map( m -> UserPermissions.newInstance(Application.Name.valueOf(m.getAppName()), Role.SUPERADMIN.getRolePermissions()) .build() ) .findAny(); } 	0	0	1	0	0	0
@Override public AbstractDomainObject getData() { return commit(binding.getContact()); } 	1	0	0	0	0	0
public void setUrl(String url) { this.url = url; } 	0	0	1	0	1	0
"public boolean run(DatabaseRegistryEntry dbre) {  Connection con = dbre.getConnection();  if (tableHasRows(con, ""sequence"")) { ReportManager.correct(this, con, ""NO ENTRIES in sequence table, so nothing to test IGNORED""); return true; }  boolean result = true; result &= checkCountIsZero(con, ""sequence"", ""sequence='' or sequence is NULL""); result &= checkCountIsZero(con, ""sequence"", ""length='' or length=0 or length is NULL""); result &= checkCountIsZero(con, ""sequence"", ""length!=length(sequence)""); return result; } "	0	0	1	0	1	0
@Test public void interceptor() throws Exception { final AtomicLong atomic = new AtomicLong(); ClientInterceptor interceptor = new ClientInterceptor() { @Override public <RequestT, ResponseT> ClientCall<RequestT, ResponseT> interceptCall( MethodDescriptor<RequestT, ResponseT> method, CallOptions callOptions, Channel next) { atomic.set(1); return next.newCall(method, callOptions); } }; ManagedChannel channel = createChannel( new FakeNameResolverFactory(server), Arrays.asList(interceptor)); assertNotNull(channel.newCall(method, CallOptions.DEFAULT)); assertEquals(1, atomic.get()); } 	1	0	1	0	0	0
public void addTotalBytes(long totalBytes) { this.totalBytes = totalBytes; } 	0	0	1	0	0	0
"public Bullet shoot() { SpriteSheet ss = new SpriteSheet(game.getSpriteSheet()); Bullet newBullet = new Bullet(x+5, y+2, ss); Game.logfile.writeShoot(""Alien Bullet"", getX(), getY()); return newBullet; } "	0	0	1	1	1	0
"private synchronized void removeFailedHandshakeConnectionAndNotifyListener( final HandshakeConnection handshakeConnection, final String reasonForFailure) { if (!mHandshakeConnections.remove(handshakeConnection) && !mIsShuttingDown) { Log.e(TAG, ""removeFailedHandshakeConnectionAndNotifyListener: Failed to remove the given handshake connection (thread ID: "" + handshakeConnection.bluetoothSocketIoThread.getId() + "")""); }  if (!handshakeConnection.handshakeSucceeded) { if (!mIsShuttingDown) { jxcore.activity.runOnUiThread(new Runnable() { @Override public void run() { mListener.onHandshakeFailed( handshakeConnection.bluetoothSocketIoThread.getSocket(), handshakeConnection.bluetoothSocketIoThread.getPeerProperties(), handshakeConnection.isIncoming, reasonForFailure); } }); }  handshakeConnection.bluetoothSocketIoThread.close(true);  if (!mIsShuttingDown) { Log.d(TAG, ""removeFailedHandshakeConnectionAndNotifyListener: Thread with ID "" + handshakeConnection.bluetoothSocketIoThread.getId() + "" closed""); } } else { Log.e(TAG, ""removeFailedHandshakeConnectionAndNotifyListener: The given handshake connection succeeded and should have not got here (thread ID: "" + handshakeConnection.bluetoothSocketIoThread.getId() + "")""); } } "	1	0	1	0	1	0
private AMQConnectionContext getContext() { return OpenWireConnection.this.getContext(); } 	0	0	1	1	0	0
"public boolean isDisplayDatesPref() { // Retrieve preferences SharedPreferences mSharedPref = PreferenceManager.getDefaultSharedPreferences(mContext); boolean displayDatesPref = mSharedPref.getBoolean(""pref_sync"", true); Log.d(TAG, ""isDisplayDatesPref: returning = "" + displayDatesPref);  return displayDatesPref; } "	0	0	1	0	1	0
"@SuppressWarnings({""unchecked""}) public static void main(String args[]) throws IOException { if (OsFamily.getCurrent() == OsFamily.MAC_OS_X) { System.setProperty(""com.apple.mrj.application.apple.menu.about.name"", ""trolCommander""); } Profiler.start(""init""); int processors = Runtime.getRuntime().availableProcessors(); System.out.println(""Processors: "" + processors); //ExecutorService executor = Executors.newFixedThreadPool(processors < 2 ? 2 : processors); LauncherExecutor executor = new LauncherExecutor(processors <= 0 ? 1 : processors); try { // Initialises fields. LauncherCmdHelper helper = new LauncherCmdHelper(args, true, false); // Whether or not to ignore warnings when booting. helper.parseArgs();  LauncherTask taskLoadConfigs = new LoadConfigsTask(helper); LauncherTask taskStart = new StartTask(helper); LauncherTask taskShowSplash = new ShowSplashTask(helper, taskLoadConfigs); LauncherTask taskLoadTheme = new LoadThemesTask(helper, taskShowSplash); LauncherTask taskInitDesktop = new InitDesktopTask(helper, taskLoadConfigs); LauncherTask taskLoadDict = new LoadDictTask(helper); LauncherTask taskConfigureFs = new ConfigureFsTask(helper); LauncherTask taskLoadCustomCommands = new LoadCustomCommands(helper); LauncherTask taskLoadBookmarks = new LoadBookmarksTask(helper); LauncherTask taskLoadCredentials = new LoadCredentialsTask(helper); LauncherTask taskInitCustomDataFormat = new InitCustomDateFormatTask(helper, taskLoadConfigs); LauncherTask taskRegisterActions = new LoadActionsTask(helper);      //new LoadActionsTask(helper, taskLoadTheme); LauncherTask taskLoadIcons = new LoadIconsTask(helper); LauncherTask taskInitBars = new InitBarsTask(helper, taskRegisterActions); LauncherTask taskStartBonjour = new StartBonjourTask(helper); LauncherTask enableNotificationsTask = new EnableNotificationsTask(helper, taskRegisterActions); LauncherTask taskCreateWindow = new CreateWindowTask(helper, taskLoadTheme, taskShowSplash, taskInitBars, taskRegisterActions); LauncherTask taskShowSetupWindow = new ShowSetupWindowTask(helper, taskLoadConfigs); LauncherTask taskLoadShellHistory = new LoadShellHistoryTask(helper); LauncherTask taskDisposeSplash = new DisposeSplashTask(helper, taskShowSplash, taskCreateWindow);  List<LauncherTask> tasks = new LinkedList<>(); tasks.add(taskLoadConfigs); tasks.add(taskStart); tasks.add(taskLoadIcons); tasks.add(taskShowSplash); tasks.add(taskConfigureFs); tasks.add(taskLoadTheme); tasks.add(taskLoadDict); tasks.add(taskLoadCustomCommands); tasks.add(taskLoadBookmarks); tasks.add(taskLoadCredentials); tasks.add(taskLoadShellHistory); tasks.add(taskInitCustomDataFormat); tasks.add(taskRegisterActions); tasks.add(taskStartBonjour); tasks.add(taskInitBars); tasks.add(taskCreateWindow); tasks.add(enableNotificationsTask); tasks.add(taskInitDesktop); tasks.add(taskDisposeSplash); tasks.add(taskShowSetupWindow);   if (processors <= 1 ) { for (LauncherTask t : tasks) { t.run(); } } else { while (!tasks.isEmpty()) { // execute tasks with ready dependencies for (LauncherTask task : tasks) { if (executor.execute(task, false) ) { tasks.remove(task); break; } } // TODO if (executor.isFull()) { try { Thread.sleep(5); } catch (Exception e) { e.printStackTrace(); } } else { boolean found = false; for (LauncherTask task : tasks) { if (executor.execute(task, false) ) { tasks.remove(task); found = true; break; } } if (found) { continue; }  LauncherTask t = tasks.get(0); executor.execute(t, true); tasks.remove(t); try { Thread.sleep(1); } catch (Exception e) { e.printStackTrace(); } } } } System.out.println(""finished""); } catch(Throwable t) { // Startup failed, dispose the splash screen if (splashScreen != null) { splashScreen.dispose(); }  LOGGER.error(""Startup failed"", t);  // Display an error dialog with a proper message and error details InformationDialog.showErrorDialog(null, null, Translator.get(""startup_error""), null, t);  // Quit the application WindowManager.quit(); }  executor.shutdown(); /* try { executor.awaitTermination(100, TimeUnit.SECONDS); } catch (InterruptedException e) { e.printStackTrace(); } */ // Done launching, wake up threads waiting for the application being launched. // Important: this must be done before disposing the splash screen, as this would otherwise create a deadlock // if the AWT event thread were waiting in #waitUntilLaunched . synchronized(LAUNCH_LOCK) { isLaunching = false; LAUNCH_LOCK.notifyAll(); }  // Check for newer version unless it was disabled if (MuConfigurations.getPreferences().getVariable(MuPreference.CHECK_FOR_UPDATE, MuPreferences.DEFAULT_CHECK_FOR_UPDATE)) { SwingUtilities.invokeLater(new Runnable() { public void run() { try { VersionChecker versionChecker = VersionChecker.getInstance(); if (versionChecker.isNewVersionAvailable()) { new CheckVersionDialog(WindowManager.getCurrentMainFrame(), versionChecker, false); } } catch (Exception e) { e.printStackTrace(); } } }); } Profiler.stop(""init""); Profiler.print(); Profiler.hide(""launcher.""); //Profiler.printThreads(); //Profiler.initThreads(); } "	1	0	0	1	0	0
"@Override public double getWeight(GraphView view) { synchronized (this) { Object value = attributes[GraphStoreConfiguration.EDGE_WEIGHT_INDEX]; if (value instanceof TimestampDoubleSet) { Interval interval = view.getTimeInterval(); checkEnabledTimestampSet(); checkViewExist((GraphViewImpl) view); final ColumnStore columnStore = getColumnStore(); final TimestampMap timestampMap = columnStore.getTimestampMap(GraphStoreConfiguration.EDGE_WEIGHT_INDEX); if (timestampMap != null) { TimestampDoubleSet dynamicValue = (TimestampDoubleSet) attributes[GraphStoreConfiguration.EDGE_WEIGHT_INDEX]; int[] timestampIndices = timestampMap.getTimestampIndices(interval); Estimator estimator = columnStore.getEstimator(GraphStoreConfiguration.EDGE_WEIGHT_INDEX); if (estimator == null) { estimator = Estimator.FIRST; } return (Double) dynamicValue.get(null, timestampIndices, estimator); } else { throw new RuntimeException(""The timestamp store is not available""); } } else { return (Double) value; } } } "	0	0	1	0	1	0
"@Override public ResultSetMetaData getMetaData() throws SQLException { checkOpen();  if( colMetaData == null ) { if( currentResult != null ) { colMetaData = currentResult.columns; } else if( connection.getServerType() == Driver.SYBASE ) { // Sybase can provide meta data as a by product of preparing the call connection.prepareSQL( this, sql, new ParamInfo[0], false, false ); } else { // For Microsoft set all parameters to null and execute the query. // SET FMTONLY ON asks the server just to return meta data. // This only works for select statements if( ""select"".equals( sqlWord ) || ""with"".equals( sqlWord ) ) { // copy parameters to avoid corrupting any values already set // by the user as we need to set a flag and null out the data. ParamInfo[] params = new ParamInfo[parameters.length];  for( int i = 0; i < params.length; i ++ ) { params[i] = new ParamInfo( parameters[i].markerPos, false ); params[i].isSet = true; }  // substitute nulls into SQL String StringBuilder testSql = new StringBuilder( sql.length() + 128 ); testSql.append( ""SET FMTONLY ON; "" ); testSql.append( Support.substituteParameters( sql, params, connection ) ); testSql.append( ""; SET FMTONLY OFF"" );  try { tds.submitSQL( testSql.toString() ); colMetaData = tds.getColumns(); } catch( SQLException e ) { // ensure FMTONLY is switched off! tds.submitSQL( ""SET FMTONLY OFF"" ); } } } }  return colMetaData == null ? null : new JtdsResultSetMetaData( colMetaData, JtdsResultSet.getColumnCount( colMetaData ), connection.getUseLOBs() ); } "	0	0	1	0	1	0
public void addValue(String value, boolean isDefault) { addValue(value, isDefault, true); } 	1	0	0	0	1	0
"private static String addGroupingIfNecessary(final String pkgName, final boolean regex) { if (regex && pkgName.contains(""|"") && !pkgName.matches(""[^|]*\\(.*\\)[^|]*"")) { return String.format(""(?:%s)"", pkgName); } return pkgName; } "	1	0	0	0	1	0
"@SuppressWarnings(""unchecked"") public default <T, S extends T> S getValue(ReferenceDataId<T> id, Class<S> type) { T value = getValue(id); if (!type.isInstance(value)) { throw new ClassCastException(Messages.format( ""Identifier '{}' resolved to a value of type '{}' where '{}' was expected"", this, value.getClass().getSimpleName(), type.getSimpleName())); } return (S) value; } "	0	0	0	1	0	0
private double averageDuration(AbstractBuild<?, ?> build, BuildListener listener) throws InterruptedException, MacroEvaluationException, IOException { int nonFailingBuilds = 0; int durationSum = 0; int numberOfBuilds = Integer.parseInt(expandAll(build, listener, getNumberOfBuilds()));  while(build.getPreviousBuild() != null && nonFailingBuilds < numberOfBuilds) { build = build.getPreviousBuild(); if (build.getResult() != null && build.getResult().isBetterOrEqualTo(Result.UNSTABLE)) { durationSum += build.getDuration(); nonFailingBuilds++; } }   return nonFailingBuilds > 0 ? durationSum / nonFailingBuilds : 0; } 	0	0	1	0	1	0
"protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_friend); connMgr = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);  user = ParseUser.getCurrentUser();  if(getSupportActionBar() != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeButtonEnabled(true); getSupportActionBar().setElevation(0); }  List<Utility.Friend> friendList; if(isNetworkConnected()) { friendList = Utility.generateFriendArray(); } else { friendList = Utility.generateFriendArrayOffline(); }  ListView view = (ListView) findViewById(R.id.friendlistview); adapter = new FriendAdaptor(this, R.layout.friend_item, friendList); view.setAdapter(adapter);  LinearLayout layout = (LinearLayout)findViewById(R.id.EmptyListView); TextView text = (TextView)layout.findViewById(R.id.EmptyListViewText); text.setText(""No Friend""); view.setEmptyView(layout); } "	1	0	1	1	1	0
"@Override public void onClick(View button) { if (!isNetworkConnected()) { Toast.makeText(mContext, ""Check Internet Connection"", Toast.LENGTH_SHORT).show(); return; } int position = (int) button.getTag(); final Utility.Friend currentItem = mObject.get(position);  final AlertDialog.Builder builder = new AlertDialog.Builder(mContext); TextView message = new TextView(mContext); if (currentItem.confirm) { message.setText(""Are you sure you want to delete \n <"" + currentItem.name + ""> ?""); builder.setTitle(""Delete Friend""); } else { message.setText(""Are you sure you want to cancel the friend request to <"" + currentItem.name + ""> ?""); builder.setTitle(""Cancel Friend Request""); } message.setTextSize(TypedValue.COMPLEX_UNIT_SP, 17); message.setPadding(20, 20, 20, 20); builder.setView(message); builder.setPositiveButton(""Confirm"", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { currentItem.deleteFriend(); Utility.removeFromExistingFriendList(currentItem); adapter.remove(currentItem); } }); builder.setNegativeButton(""Cancel"", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.cancel(); } }); final AlertDialog dialog = builder.create(); dialog.show(); } "	0	0	1	1	1	0
"public void moviesService() { Route searchRoute = (request, response) -> { Optional<String> queryParam = Optional.ofNullable(request.params(""search_query"")); String searchQuery = queryParam.orElse("""").replaceAll(""\\+"", "" "").trim(); System.out.println(""Searched for \""""+searchQuery+""\""""); int results = asIntOpt(request.queryParams(""results"")).orElse(20); int page = asIntOpt(request.queryParams(""page"")).orElse(1); if(searchQuery.equals("""") || results == 0) return Collections.EMPTY_LIST;  User u = request.attribute(""user""); List<Movie> movies = AbstractModel.search(Movie.class, searchQuery, results, page); Map<ObjectId, Integer> ratingsMap = new HashMap<>();  for(Movie m: movies) { Optional<Rating> r = Rating.loadRatingByUser(u.id, m.id); if(r.isPresent()) { ratingsMap.put(m.id, r.get().numeric_rating); } else { ratingsMap.put(m.id, null); } }  Map<String, Object> ret = new HashMap<>(); ret.put(""movies"", movies); ret.put(""ratings"", ratingsMap); return ret; };  jget(""/movies/search/:search_query"", searchRoute); jget(""/movies/search/"", searchRoute); jget(""/movies/search"", searchRoute);  Route movieRoute = (request, response) -> { String movieId = request.params(""id""); System.out.println(""Looked up movie with ID: ""+movieId); return new Movie(new ObjectId(movieId)).load(); };  jget(""/movies/:id"", movieRoute); jget(""/movies/:id/*"", movieRoute);  Route unimplemented = (request, response) -> { throw new HttpException(HttpStatus.NOT_IMPLEMENTED); }; jget(""/movies"", unimplemented); jget(""/movies/*"", unimplemented); } "	0	0	1	0	1	0
"protected int findMatchingVariant(VariantRec varToAnnotate, String vcfLine) { String[] toks = vcfLine.split(""\t""); String[] alts = toks[4].split("",""); for(int i=0; i<alts.length; i++) { VariantRec queryResultVar = new VariantRec(toks[0], Integer.parseInt(toks[1]), Integer.parseInt(toks[1])+toks[3].length(), toks[3], alts[i]); queryResultVar = VCFParser.normalizeVariant(queryResultVar);  if (queryResultVar.getContig().equals(varToAnnotate.getContig()) && queryResultVar.getStart() == varToAnnotate.getStart() && queryResultVar.getRef().equals(varToAnnotate.getRef()) && queryResultVar.getAlt().equals(varToAnnotate.getAllAlts()[i])) { //change to loop through all alts  //Everything looks good, so go ahead and annotate boolean ok = addAnnotationsFromString(varToAnnotate, vcfLine, i); if (ok) { return i; } } //if perfect variant match  }//Loop over alts return -1; } "	0	0	1	1	0	0
@Override public boolean isCellEditable(int row, int column) { return treeTableModel.isCellEditable(nodeForRow(row), column); } 	1	0	1	1	1	0
private boolean isExternalIntent(Intent intent) { return intent.getAction() == Intent.ACTION_VIEW || intent.getAction() == android.provider.Settings.ACTION_WIFI_SETTINGS || intent.getAction() == Intent.ACTION_SEND || intent.getAction() == Intent.ACTION_DIAL; } 	0	0	0	0	0	1
private Void sendTextCommandAndUpdate(String foo){ updateDisplay(sendCommandToMapWithText(Key_Commands.STANDING_STILL,foo)); return null; } 	1	0	0	1	1	0
public void validate(final JobResource resource, final Exchange exchange) throws RDFOutputValidationException { log.info(MessageCatalog._00055_VALIDATING, resource.getID());  resource.markAsValidated();  collectSample(resource.getID(), exchange.getIn().getBody(String.class));  final InfModel infmodel = ModelFactory.createInfModel(reasoner, samples.remove(resource.getID())); final ValidityReport validity = infmodel.validate(); if (!validity.isClean()) { log.info(MessageCatalog._00057_VALIDATION_KO, resource.getID()); for (final Iterator<ValidityReport.Report> iterator = validity.getReports(); iterator.hasNext(); ) { final ValidityReport.Report report = iterator.next(); validationMessageRepository.save(new ValidationMessage(resource.getID(), report.getType(), report.getDescription())); log.info(MessageCatalog._00058_VALIDATION_MSG, resource.getID(), report.getDescription(), report.getType()); } resource.setRunning(false); exchange.setProperty(Exchange.ROUTE_STOP, Boolean.TRUE); } else { log.info(MessageCatalog._00056_VALIDATION_OK, resource.getID()); } } 	0	0	1	1	0	0
"private void printManifest(Arguments arguments) throws IOException, JSONException, TemplateException { Template template = getFreeMarkerConfig().getTemplate(""manifest.ftl""); JSONObject config = getConfig(arguments.inputDir); Writer out = new OutputStreamWriter(System.out);  Map<String, Object> root = new HashMap<>(); root.put(""config"", config); root.put(""model"", Model.get()); root.put(""header"", Model.get().getHeader());  Log.i(TAG, ""\nProvider declaration to paste in the AndroidManifest.xml file: ""); template.process(root, out); } "	0	0	1	0	1	0
public List<Task> equalize() throws Exception { List<EmployeeDTO> employees = taskHandler.findEmployeesOnShiftDTO(new LocalTime(), false); List<Task> tasks = repo.save(taskHandler.equalizeTasks(taskHandler.findEmployeesOnShiftDTO(new LocalTime(), true))); organize(employees); return tasks; } 	0	0	1	0	1	0
public boolean getIgnoreCertificateErrors() { return (GitLabApiClient.ignoreCertificateErrors); } 	1	0	1	0	0	0
"protected void addExpandedPVPaths(Set<List<PropertyValue>> pvPaths, List<PropertyValue> path, List<String> qtoks) { PropertyValue first = path.get(0); if (first.getValue() == null) { // meta-node, crawl it too String mid = first.getValRes().substring(midPrefix.length()); List<PropertyValue> secondRels = scoreSecondRelation(mid, qtoks); for(PropertyValue second: secondRels) { List<PropertyValue> tmpList = new ArrayList<>(path); tmpList.add(second); pvPaths.add(tmpList);  PropertyValue pv = tmpList.get(1); logger.debug(""+ {} {}/<<{}>>/[<>] -> {}"", String.format(Locale.ENGLISH, ""%.3f"", pv.getScore()), pv.getPropRes(), pv.getProperty(), tokenize(pv.getProperty()), pv.getValue()); } } else { pvPaths.add(path); } } "	0	0	1	1	0	0
"public void reduce(Text key, Iterator<Text> iterator, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {  boolean isExisting = false; double score = alpha / pageNum + danglingScore; String linkInfo = null; while (iterator.hasNext()) { String value = iterator.next().toString(); try { score += Double.parseDouble(value); } catch (NumberFormatException e) { isExisting = true; linkInfo = value; } }  if (isExisting) { outputCollector.collect(key, new Text(linkInfo.toString().replaceAll(""%%(.*)%%"", ""%%"" + score +	""%%""))); } } "	1	0	1	1	1	0
private IValue resolve(String value, Class<?> type) throws LoadException { return valueResolver.resolve(value, type); } 	1	0	1	0	1	0
"public final EdDSAPrivateKey readPrivateKey() throws InvalidKeySpecException, IOException { final String privateKeyPath = ""private.key""; final byte[] encodedPrivateKey = readKey(privateKeyPath); return convertToPrivateKey(encodedPrivateKey); } "	0	0	0	1	0	0
private EdDSAPublicKey convertToPublicKey(byte[] encodedPublicKey) throws InvalidKeySpecException { X509EncodedKeySpec encoded = new X509EncodedKeySpec(encodedPublicKey); return new EdDSAPublicKey(encoded); } 	0	0	0	1	0	0
@Override protected void afterExecute(Runnable runnable, Throwable throwable) { super.afterExecute(runnable, throwable); synchronized (runningWorkers) { runningWorkers.remove(((JobWorker) runnable).getInfo()); } JobWorker worker = ((JobWorker) runnable); addStatusToHistory(worker); } 	1	0	1	1	1	0
private void backgroundOperationsLoop() { while ( !Thread.interrupted() ) { OperationAndData<?> operationAndData; try { operationAndData = backgroundOperations.take(); if ( debugListener != null ) { debugListener.listen(operationAndData); } } catch ( InterruptedException e ) { Thread.currentThread().interrupt(); break; }  performBackgroundOperation(operationAndData); } } 	0	0	1	1	0	0
@Override protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException { int key = readInt(); ObjectStreamClass objectStreamClass = readLookupLocalCache.get(key); if (objectStreamClass != null) { return objectStreamClass; } objectStreamClass = readLookup.get(key); ObjectStreamClass discOsc = disconnect(objectStreamClass); readLookupLocalCache.putIfAbsent(key, discOsc); writeLookup.putIfAbsent(new SerializableDataKey(discOsc, true), key); return objectStreamClass; } 	0	0	1	0	1	0
public static DataContext createCsvDataContext(InputStream inputStream, CsvConfiguration configuration) { CsvDataContext dc = new CsvDataContext(inputStream, configuration); return dc; } 	1	0	0	0	1	0
@Override public boolean onMenuItemClick(MenuItem item) { Cursor c = mAdapter.getCursor(); c.moveToPosition(mChannelIndex); Channel chan = cursorToChannel(c); switch (item.getItemId()) { case R.id.menuTimer: showTimerDialog(c); return true; case R.id.menuStream: showStreamConfig(mChannelIndex); return true; case R.id.menuSwitch: String switchRequest = MessageFormat.format(ServerConsts.URL_SWITCH_COMMAND, prefs.getString(DVBViewerPreferences.KEY_SELECTED_CLIENT), chan.getPosition()); DVBViewerCommand command = new DVBViewerCommand(switchRequest); Thread exexuterTHread = new Thread(command); exexuterTHread.start(); return true; case R.id.menuRecord: recordChannel(c); return true;  default: break; } return false; } 	1	0	0	0	1	0
"public void replaceParent(DrawableNode oldParent, DrawableNode newParent) { if (!this.parents.remove(oldParent.getNode())) { throw new NoSuchElementException(""The node to be replaced is not a parent of this node.""); } this.parents.add(newParent.getNode()); } "	0	0	1	1	0	0
public void setLocation(XYCoordinate location) { this.setX(location.getX()); this.setY(location.getY()); } 	0	0	1	0	0	0
"public void replaceChild(DrawableNode oldChild, DrawableNode newChild) { if (!this.children.remove(oldChild.getNode())) { throw new NoSuchElementException(""The node to be replaced is not a child of this node.""); } this.children.add(newChild.getNode()); } "	0	0	1	1	0	0
"public void seed(SQLiteDatabase sdb){ Log.d(""Provider"", ""Seeding""); DateTime dtNow = new DateTime();  ArrayList<ContentValues> logEntries = new ArrayList<>(); ArrayList<ContentValues> timeTables = new ArrayList<>(); for(DateTime dt = getSeedDateTime(); dt.getDayOfYear() <= dtNow.getDayOfYear(); dt = dt.withFieldAdded(DurationFieldType.days(), 1)){ if(dt.getDayOfWeek() == DateTimeConstants.SATURDAY || dt.getDayOfWeek() == DateTimeConstants.SUNDAY) continue; ContentValues cv = new ContentValues(); cv.put(DATE, TimeConverter.extractDate(dt.getMillis())); cv.put(WEEK_OF_YEAR, TimeConverter.extractWeek(dt.getMillis())); cv.put(MONTH_OF_YEAR, TimeConverter.extractMonth(dt.getMillis())); timeTables.add(cv);  cv = buildSeedValues(dt, 8, 12, 1); logEntries.add(cv);  boolean useSnapup = PreferenceManager.getDefaultSharedPreferences(getContext()).getBoolean(""use_snapup"", false); cv = buildSeedValues(dt, 12, 17, useSnapup?15:0, 2); logEntries.add(cv);  cv = buildSeedValues(dt, 12, 13, 1); cv.put(ISBREAK, 1); logEntries.add(cv); } SEED_ENTRIES = logEntries.size(); sdb.beginTransaction(); sdb.delete(TABLE_TAGS_NAME, null, null); sdb.delete(TABLE_LOG_NAME, null, null); sdb.delete(TIME_TABLE, null, null); for(int i=1; i<=5; i++){ ContentValues cv = new ContentValues(); cv.put(ID, i); cv.put(TAG, ""TAG"" + i); sdb.insertOrThrow(TABLE_TAGS_NAME, null, cv); }  for (ContentValues value : timeTables) { long id = sdb.insertOrThrow(TIME_TABLE, null, value); if(id < 0) throw new IllegalStateException(""Insert failed""); } for (ContentValues value : logEntries) { long id = sdb.insertOrThrow(TABLE_LOG_NAME, null, value); if(id < 0) throw new IllegalStateException(""Insert failed""); } sdb.setTransactionSuccessful(); sdb.endTransaction(); getContext().getContentResolver().notifyChange(URI_LOG_ENTRIES, null); getContext().getContentResolver().notifyChange(URI_DURATIONS, null); } "	1	0	0	0	1	0
"private void downsampleSceneAndUpdateExposure() { if (renderingConfig.isEyeAdaptation()) { PerformanceMonitor.startActivity(""Updating exposure"");  downsampleSceneInto1x1pixelsBuffer();  buffers.readBackPBOCurrent.copyFromFBO(buffers.downSampledScene[1].fboId, 1, 1, GL12.GL_BGRA, GL11.GL_UNSIGNED_BYTE);  if (buffers.readBackPBOCurrent == buffers.readBackPBOFront) { buffers.readBackPBOCurrent = buffers.readBackPBOBack; } else { buffers.readBackPBOCurrent = buffers.readBackPBOFront; }  ByteBuffer pixels = buffers.readBackPBOCurrent.readBackPixels();  if (pixels.limit() < 3) { logger.error(""Failed to auto-update the exposure value.""); return; }  currentSceneLuminance = 0.2126f * (pixels.get(2) & 0xFF) / 255.f + 0.7152f * (pixels.get(1) & 0xFF) / 255.f + 0.0722f * (pixels.get(0) & 0xFF) / 255.f;  float targetExposure = hdrMaxExposure;  if (currentSceneLuminance > 0) { targetExposure = hdrTargetLuminance / currentSceneLuminance; }  float maxExposure = hdrMaxExposure;  if (CoreRegistry.get(BackdropProvider.class).getDaylight() == 0.0) { maxExposure = hdrMaxExposureNight; }  if (targetExposure > maxExposure) { targetExposure = maxExposure; } else if (targetExposure < hdrMinExposure) { targetExposure = hdrMinExposure; }  currentExposure = (float) TeraMath.lerp(currentExposure, targetExposure, hdrExposureAdjustmentSpeed);  } else { if (CoreRegistry.get(BackdropProvider.class).getDaylight() == 0.0) { currentExposure = hdrMaxExposureNight; } else { currentExposure = hdrExposureDefault; } }  PerformanceMonitor.endActivity(); } "	0	0	1	1	0	0
@Override protected void setResourceValue(CmsResource resource) {  setValue(resource); } 	1	0	0	0	1	0
"@GET @Path(""/fixed/{dateFrom}"") public Response getFixedRates(@PathParam(""dateFrom"") String initialDate, @HeaderParam(Defs.HEADER_APIKEY) String apiKey) throws Exception {  try (DataSourceInterface source = new DataSource()) { Date dateFrom = DateTimeUtils.parseStringToDate(initialDate, Defs.DATETIME_FORMAT); source.dbConnect(); if (!source.isCheckAuthentication(apiKey)) { return Response.status(Response.Status.UNAUTHORIZED).build(); } String currencies = source.getFixedRates(dateFrom); return Response.status(Status.OK).entity(currencies) .header(HttpHeaders.CONTENT_TYPE, Defs.API_JSON_CONTENT_TYPE).build();  } catch (IOException | DataSourceException | ParseException e) { log.error("""", e); return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build(); } } "	0	0	1	0	1	0
public static Item createCoin(Box box) { Coin coin = new Coin(box.world, new Vector2(Coin.DEF_SIZE, Coin.DEF_SIZE), new Vector3(box.position)); String ta = Coin.DEF_ATL; coin.textureAtlas = ta; coin.initAssets(); coin.collectible = false; coin.visible = false;  return coin; } 	0	0	1	0	0	0
"private void updateResults() { calculateDateDiff();  totalInitial = getPlanValue(); if (!rollOver.equals("""")) { totalInitial += Float.parseFloat(rollOver); }  //only update total text if its showing, doesn't show with custom if (!selectedMealPlan.equals(getString(R.string.mealOptionCustom))) { try { ((TextView) findViewById(R.id.totalInitialText)).setText(twoDecimal.format(totalInitial)); } catch (NullPointerException e) { Log.e(""set total initial error"", e.getMessage()); } }  if (currentDateIsInRange && currentBalanceIsEntered()) { summaryCard.setVisibility(View.VISIBLE); tableCard.setVisibility(View.VISIBLE);  double averageDaily, averageWeekly; if (weekDiff > 1 || (weekDiff == 1 && dayDiff > 1)) { averageDaily = totalInitial / ((weekDiff * 7) + dayDiff); averageWeekly = averageDaily * 7; } else {    //1 week or less averageWeekly = totalInitial; averageDaily = totalInitial / dayDiff; }  double curBalance = Double.parseDouble(currentBalance);  // current balance - amount that should be left initially double diff = curBalance - (averageWeekly * currentWeekDiff + averageDaily * currentDayDiff); tvs[0].setText(formatNumber(diff));  double currentWeekly, currentDaily; if (currentWeekDiff > 1 || (currentWeekDiff == 1 && currentDayDiff > 1)) { currentDaily = curBalance / ((currentWeekDiff * 7) + currentDayDiff); currentWeekly = currentDaily * 7; } else {     //1 week or less currentWeekly = curBalance; currentDaily = curBalance / ((currentWeekDiff * 7) + currentDayDiff); }  //set average calculations tvs[1].setText(formatNumber(averageDaily)); tvs[2].setText(formatNumber(averageWeekly));  //set current calculations tvs[3].setText(formatNumber(currentDaily)); tvs[4].setText(formatNumber(currentWeekly));  //set difference calculations tvs[5].setText(formatNumber(currentDaily - averageDaily)); tvs[6].setText(formatNumber(currentWeekly - averageWeekly));  } else { //if it can't be displayed, make sure its hidden hideResults(); } } "	1	0	0	0	0	0
@Nonnull @Override public Map<ItemStack, String> getOreDictNames(@Nonnull Map<ItemStack, String> names) { this.getItemMaterialParts().values().stream().forEach(materialPart -> materialPart.setOreDict(names)); return names; } 	0	0	1	1	1	0
"public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException { try { URL url = new URL(req.getParameter(""url""));  String extractedHtml = hh.process(url, extractor);  resp.setContentType(""text/html""); PrintWriter out = resp.getWriter(); out.println(""<base href=\"""" + url + ""\"" >""); out.println(""<meta http-equiv=\""Content-Type\"" content=\""text-html; charset=utf-8\"" />""); out.println(extractedHtml);  out.close(); } catch(Exception e) { e.printStackTrace(); } } "	0	0	1	0	1	0
"@Override public String doExecute() throws ParseException { boolean isUserLogged = JiraTimetrackerUtil.isUserLogged(); if (!isUserLogged) { setReturnUrl(JIRA_HOME_URL); return getRedirect(NONE); }  normalizeContextPath(); setPiwikProperties();  getJiraVersionFromBuildUtilsInfo();  loadPluginSettingAndParseResult(); checkMailServer();  message = """"; messageParameter = """";  setSelectedUserFromParam(); dateSwitcherAction();  try { excludeDays = jiraTimetrackerPlugin.getExcludeDaysOfTheMonth(dateFormatted); loadWorklogsAndMakeSummary(); projectsId = jiraTimetrackerPlugin.getProjectsId(); } catch (GenericEntityException | ParseException | DataAccessException | SQLException e) { LOGGER.error(""Error when try set the plugin variables."", e); return ERROR; }  setFieldsValue(); // if not edit and not submit than just a simple date change String result = handleDateChangeAction(); if (result != null) { return result; }  selectedUser = """"; userPickerObject = null; // edit all save before the input fields validate if (getHttpRequest().getParameter(""editallsave"") != null) { result = editAllAction(); } else if (getHttpRequest().getParameter(""edit"") != null) { result = editAction(); } else if (getHttpRequest().getParameter(""sendfeedback"") != null) { result = sendFeedBack(); } else { result = createOrCopyAction(); }  if (SUCCESS.equals(result)) { return redirectWithDateFormattedParameterOnly(result); } else { return result; }  } "	0	0	1	0	0	0
@Override public boolean apply(Object input, Map<String, Object> args) {  return input instanceof Iterable; } 	1	0	1	0	1	0
"public List<UnlockedAchievement> getUnlockedAchievements(Comparator<UnlockedAchievement> comparator) { if (comparator == null) { throw new IllegalArgumentException(""comparator is null.""); } List<UnlockedAchievement> list = new ArrayList<UnlockedAchievement>(unlockedAchievements); list.sort(comparator); return list; } "	0	0	1	0	1	0
"public static Pattern inComplexWith() { Pattern p = new Pattern(SequenceEntityReference.class, ""Protein 1""); p.add(linkedER(true), ""Protein 1"", ""generic Protein 1""); p.add(erToPE(), ""generic Protein 1"", ""SPE1""); p.add(linkToComplex(), ""SPE1"", ""PE1""); p.add(new PathConstraint(""PhysicalEntity/componentOf""), ""PE1"", ""Complex""); p.add(new PathConstraint(""Complex/component""), ""Complex"", ""PE2""); p.add(equal(false), ""PE1"", ""PE2""); p.add(linkToSpecific(), ""PE2"", ""SPE2""); p.add(peToER(), ""SPE2"", ""generic Protein 2""); p.add(linkedER(false), ""generic Protein 2"", ""Protein 2""); p.add(equal(false), ""Protein 1"", ""Protein 2""); p.add(new Type(ProteinReference.class), ""Protein 2""); return p; } "	0	0	0	1	1	0
"static void addLabelToEdge(SqlgGraph sqlgGraph, String schema, String prefixedTable, boolean in, SchemaTable foreignKey) { BatchManager.BatchModeType batchModeType = flushAndSetTxToNone(sqlgGraph); try { GraphTraversalSource traversalSource = sqlgGraph.traversal().withStrategies(TopologyStrategy.build().selectFrom(SchemaManager.SQLG_SCHEMA_SCHEMA_TABLES).create()); List<Vertex> schemas = traversalSource.V() .hasLabel(SchemaManager.SQLG_SCHEMA + ""."" + SchemaManager.SQLG_SCHEMA_SCHEMA) .has(""name"", schema) .toList(); Preconditions.checkState(!schemas.isEmpty(), ""Schema "" + schema + "" does not exist in Sqlg's topology. BUG!!!""); Preconditions.checkState(schemas.size() == 1, ""Multiple "" + schema + "" found in Sqlg's topology. BUG!!!"");  String foreignKeySchema = foreignKey.getSchema(); schemas = traversalSource.V() .hasLabel(SchemaManager.SQLG_SCHEMA + ""."" + SchemaManager.SQLG_SCHEMA_SCHEMA) .has(""name"", foreignKeySchema) .toList(); Preconditions.checkState(!schemas.isEmpty(), ""Schema "" + foreignKeySchema + "" does not exist in Sqlg's topology. BUG!!!""); Preconditions.checkState(schemas.size() == 1, ""Multiple "" + foreignKeySchema + "" found in Sqlg's topology. BUG!!!""); Vertex foreignKeySchemaVertex = schemas.get(0);  Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX)); List<Vertex> edgeVertices = traversalSource.V() .hasLabel(SchemaManager.SQLG_SCHEMA + ""."" + SchemaManager.SQLG_SCHEMA_EDGE_LABEL) .has(""name"", prefixedTable.substring(SchemaManager.EDGE_PREFIX.length())).as(""a"") .in(in ? SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE : SchemaManager.SQLG_SCHEMA_IN_EDGES_EDGE) .in(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE) .has(""name"", schema) .<Vertex>select(""a"") .dedup() .toList(); Preconditions.checkState(!edgeVertices.isEmpty(), ""Edge vertex "" + foreignKey.toString() + "" does not exist in Sqlg's topology. BUG!!!""); Preconditions.checkState(edgeVertices.size() == 1, ""Multiple edge vertices "" + foreignKey.toString() + "" found in Sqlg's topology. BUG!!!""); Vertex edgeVertex = edgeVertices.get(0);  String foreignKeyVertexTable; if (in)  { foreignKeyVertexTable = foreignKey.getTable().substring(0, foreignKey.getTable().length() - SchemaManager.IN_VERTEX_COLUMN_END.length()); } else { foreignKeyVertexTable = foreignKey.getTable().substring(0, foreignKey.getTable().length() - SchemaManager.OUT_VERTEX_COLUMN_END.length()); } List<Vertex> foreignKeyVertices = traversalSource.V(foreignKeySchemaVertex) .out(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE) .has(""name"", foreignKeyVertexTable) .toList(); Preconditions.checkState(!foreignKeyVertices.isEmpty(), ""Out vertex "" + foreignKey.toString() + "" does not exist in Sqlg's topology. BUG!!!""); Preconditions.checkState(foreignKeyVertices.size() == 1, ""Multiple out vertices "" + foreignKey.toString() + "" found in Sqlg's topology. BUG!!!""); Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX)); Vertex foreignKeyVertex = foreignKeyVertices.get(0);  if (in) { foreignKeyVertex.addEdge(SchemaManager.SQLG_SCHEMA_IN_EDGES_EDGE, edgeVertex); } else { foreignKeyVertex.addEdge(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE, edgeVertex); }  } finally { sqlgGraph.tx().batchMode(batchModeType); }  } "	0	0	1	1	0	0
"@Execute public void process() { BufferedWriter writer = null; try { if (featureCollection.getSchema().getDescriptor(featureAttributeName) == null) { addError(""Attribute "" + featureAttributeName + "" not found in feature collection""); return; }  output = File.createTempFile(getClass().getSimpleName(), delimiter.extension, new File(AppConstant.WORK_LOCATION.getValue())); CountingOutputStream cos = new CountingOutputStream(new FileOutputStream(output)); writer = new BufferedWriter(new OutputStreamWriter(cos));  for (String currentDatasetId : datasetId) { GridDatatype gridDatatype = GDPAlgorithmUtil.generateGridDataType( datasetURI, currentDatasetId, featureCollection.getBounds(), requireFullCoverage);  Range timeRange = GDPAlgorithmUtil.generateTimeRange( gridDatatype, timeStart, timeEnd);  writer.write(""# "" + currentDatasetId); writer.newLine(); FeatureCoverageGridStatistics.execute( featureCollection, featureAttributeName, gridDatatype.makeSubset(null, null, timeRange, null, null, null), setupHeuristics(null), statistics == null || statistics.isEmpty() ? Arrays.asList(WeightedStatistic.values()) : statistics, writer, groupBy == null ? GroupBy.STATISTIC : groupBy, delimiter == null ? Delimiter.getDefault() : delimiter, requireFullCoverage, summarizeTimeStep, summarizeFeatureAttribute); } } catch (InvalidRangeException e) { addError(""Error subsetting gridded data: "" + e.getMessage()); } catch (IOException e) { addError(""IO Error :"" + e.getMessage()); } catch (FactoryException e) { addError(""Error initializing CRS factory: "" + e.getMessage()); } catch (TransformException e) { addError(""Error attempting CRS transform: "" + e.getMessage()); } catch (SchemaException e) { addError(""Error subsetting gridded data : "" + e.getMessage()); } catch (Exception e) { addError(""General Error: "" + e.getMessage()); } finally { //            if (featureDataset != null) try { featureDataset.close(); } catch (IOException e) { } IOUtils.closeQuietly(writer); } } "	0	0	0	1	0	0
public void run(Configuration configuration, Environment environment) throws Exception { handler = handlerFactory.forEnvironment(environment); ServerFactory serverFactory = configuration.getServerFactory(); ServerFactoryWrapper factoryWrapper = new ServerFactoryWrapper(serverFactory, handler); configuration.setServerFactory(factoryWrapper); } 	0	0	1	1	0	0
"@Override public User userAuthentication(User newUser, String secretKey, String apiKey, String source, HttpServletRequest request) { if (secretKey == null || !secretKey.equalsIgnoreCase(settingService.getConfigSetting(ConfigConstants.GOORU_AUTHENTICATION_SECERT_KEY, 0, TaxonomyUtil.GOORU_ORG_UID))) { throw new UnauthorizedException(generateErrorMessage(""GL0082"", ""secret"") + secretKey, ""GL0082""); } boolean registerUser = false; final Identity identity = new Identity(); identity.setExternalId(newUser.getEmailId()); User userIdentity = this.getUserService().findByIdentity(identity); UserToken sessionToken = null; if (userIdentity == null) { try { if (newUser.getUsername() == null) { newUser.setFirstName(StringUtils.remove(newUser.getFirstName(), "" "")); newUser.setUsername(newUser.getFirstName()); if (newUser.getLastName() != null && newUser.getLastName().length() > 0) { newUser.setUsername(newUser.getUsername() + newUser.getLastName().substring(0, 1)); } final User user = this.getUserRepository().findUserWithoutOrganization(newUser.getUsername()); if (user != null && user.getUsername().equalsIgnoreCase(newUser.getUsername())) { final Random randomNumber = new Random(); newUser.setUsername(newUser.getUsername() + randomNumber.nextInt(1000)); } } userIdentity = this.getUserManagementService().createUser(newUser, null, null, 1, 0, null, null, null, null, null, null, null, source, null, request, null, null); this.getAccountEventlog().getApiEventLogs(apiKey); registerUser = true; } catch (Exception e) { LOGGER.error(""Error : "" + e); } } Identity newIdentity = null; if (userIdentity.getIdentities() != null && userIdentity.getIdentities().size()>0) { newIdentity = userIdentity.getIdentities().iterator().next(); if (newIdentity != null) { newIdentity.setLoginType(source); newIdentity.setLastLogin(new Date(System.currentTimeMillis())); this.getUserRepository().save(newIdentity); } } if (sessionToken == null) { Application application = this.getApplicationRepository().getApplication(apiKey); rejectIfNull(application, GL0056, 404, APPLICATION); sessionToken = this.getUserManagementService().createSessionToken(userIdentity, request.getSession().getId(), application); } request.getSession().setAttribute(Constants.SESSION_TOKEN, sessionToken.getToken()); if (!registerUser) { try { this.getAccountEventlog().getEventLogs(newIdentity, sessionToken, true, apiKey); indexHandler.setReIndexRequest(userIdentity.getPartyUid(), IndexProcessor.INDEX, USER, sessionToken.getToken() , false, false);  } catch (JSONException e) { LOGGER.error(""Error : "" + e); } } else { this.getAccountEventlog().getEventLogs(sessionToken.getToken()); } try { newUser = (User) BeanUtils.cloneBean(userIdentity); } catch (Exception e) { LOGGER.error(""Error : "" + e); } request.getSession().setAttribute(Constants.USER, newUser); newUser.setToken(sessionToken.getToken()); return newUser; } "	1	1	1	0	0	0
"private static File confirmFileSave(File file, File currentFile) { int reply = JOptionPane.NO_OPTION; while (file != null && file.exists() && !file.equals(currentFile) && reply == JOptionPane.NO_OPTION) { reply = JOptionPane.showConfirmDialog(null, file.getAbsoluteFile() + "" already exists. Do you want to overwrite it?"", ""File already exists"", JOptionPane.YES_NO_OPTION);  if (reply == JOptionPane.NO_OPTION) { file = FileChooserService.getSelectedFile(""tex"", ""TeX files"", FileChooserService.DialogType.SAVE, true); } }  return file; } "	0	0	1	0	1	0
public String getCountyDistrict() { return countyDistrict.trim(); } 	1	0	0	0	1	0
public String getRegion() { return region.trim(); } 	1	0	0	0	1	0
@Override public void execute(PHBridge bridge, String... lightIdentifiers) { Random rand = new Random();  for (String id : lightIdentifiers) { int randHue = rand.nextInt(HueService.MAX_HUE);  PHLightState lightState = new PHLightState(); lightState.setHue(randHue); lightState.setSaturation(HueService.MAX_SATURATION); lightState.setBrightness(HueService.MAX_BRIGHTNESS);  lightColors.put(id, Color.hsb((double) (randHue * 360) / HueService.MAX_SATURATION, 1, 1));  bridge.updateLightState(id, lightState, null); // If no bridge response is required then use this simpler form. } } 	1	0	0	0	1	0
public Group getGroup(String group) { return this.groups.get(group); } 	0	0	1	0	1	0
"@Transactional public Result exportData(String componentResultIds) throws JatosGuiException { Logger.info(CLASS_NAME + "".exportData: componentResultIds "" + componentResultIds + "", "" + ""logged-in user's email "" + session(Users.SESSION_EMAIL)); // Remove cookie of jQuery.fileDownload plugin response().discardCookie(ImportExportService.JQDOWNLOAD_COOKIE_NAME); UserModel loggedInUser = userService.retrieveLoggedInUser();  List<ComponentResult> componentResultList = null; try { List<Long> componentResultIdList = resultService .extractResultIds(componentResultIds); componentResultList = resultService .getAllComponentResults(componentResultIdList); resultService.checkAllComponentResults(componentResultList, loggedInUser, true); } catch (ForbiddenException | BadRequestException | NotFoundException e) { jatosGuiExceptionThrower.throwAjax(e); } String componentResultDataAsStr = resultService .getComponentResultData(componentResultList);  response().setContentType(""application/x-download""); String filename = ""results_"" + DateUtils.getDateForFile(new Date()) + ""."" + IOUtils.TXT_FILE_SUFFIX; response().setHeader(""Content-disposition"", ""attachment; filename="" + filename); // Set cookie for jQuery.fileDownload plugin response().setCookie(ImportExportService.JQDOWNLOAD_COOKIE_NAME, ImportExportService.JQDOWNLOAD_COOKIE_CONTENT); return ok(componentResultDataAsStr); } "	1	0	1	1	0	0
@Override public void run() { try { for(ManyToManyParent entity1 : tmpList2) { manager.saveEntity(entity1); } } catch (EntityException e) { e.printStackTrace(); } } 	0	0	1	0	0	0
public void clear() { // Discard all the cards from the hand. //        hand.removeAllElements(); hand_two.clear(); } 	0	0	1	0	1	0
"void onIssueCommentHook(IssueComment issueComment) throws IOException { if (!trigger.isActive()) { logger.log(Level.FINE, ""Not checking comments since build is disabled""); return; } int id = issueComment.getIssue().getNumber(); logger.log(Level.FINER, ""Comment on issue #{0} from {1}: {2}"", new Object[] { id, issueComment.getComment().getUser(), issueComment.getComment().getBody() }); if (!""created"".equals(issueComment.getAction())) { return; }  Map<Integer, GhprbPullRequest> pulls = trigger.getPullRequests();  GhprbPullRequest pull = pulls.get(id); if (pull == null) { GHRepository repo = getGitHubRepo(); GHPullRequest pr = repo.getPullRequest(id); pull = new GhprbPullRequest(pr, trigger.getHelper(), this); pulls.put(id, pull); } pull.check(issueComment.getComment()); trigger.save(); } "	0	0	1	0	1	0
"private String parseMonsterAttack(XPath xpath, Document doc, String base) throws XPathExpressionException { Node n;  // general attack description String genDesc = """"; n = (Node) xpath.evaluate(base + ""/Description/text()"", doc, XPathConstants.NODE); if (n != null) { genDesc = n.getNodeValue(); }  // range String range = """"; n = (Node) xpath.evaluate(base + ""/Range/text()"", doc, XPathConstants.NODE); if (n != null) { range = n.getNodeValue(); }  // targets String targets = """"; n = (Node) xpath.evaluate(base + ""/Targets/text()"", doc, XPathConstants.NODE); if (n != null) { targets = n.getNodeValue(); }  // hit/miss/effect String hit = parseMonsterEffect(xpath, doc, base + ""/Hit""); String miss = parseMonsterEffect(xpath, doc, base + ""/Miss""); String effect = parseMonsterEffect(xpath, doc, base + ""/Effect"");  String atkDesc = """"; n = (Node) xpath.evaluate(base + ""/AttackBonuses/MonsterPowerAttackNumber/Defense/ReferencedObject/DefenseName/text()"", doc, XPathConstants.NODE); if (n != null) { Node bonus = (Node) xpath.evaluate(base + ""/AttackBonuses/MonsterPowerAttackNumber/@FinalValue"", doc, XPathConstants.NODE); if (bonus != null) { atkDesc += ""+"" + bonus.getNodeValue() + "" vs. "" + n.getNodeValue(); } }  String desc = """";  if (!genDesc.isEmpty()) { desc += genDesc + ""\n""; }  if (!atkDesc.isEmpty()) { desc += ""Attack: "" + range; if (!targets.isEmpty()) { desc += "" ("" + targets + ""); ""; } desc += atkDesc + ""\n""; }  if (!hit.trim().isEmpty()) { desc += ""Hit: "" + hit; } if (!miss.trim().isEmpty()) { desc += ""Miss: "" + miss; } if (!effect.trim().isEmpty()) { desc += ""Effect: ""; if (atkDesc.isEmpty()) { desc += range; if (!targets.isEmpty()) { desc += "" ("" + targets + ""); ""; } } desc += effect; }  return desc.trim(); } "	1	0	0	0	0	0
public boolean hasArtwork() { return ! (mArtworkUrl == Uri.EMPTY); } 	0	0	1	0	1	0
"public static void progressAll() { for (Player player : instances.keySet()) instances.get(player).progress();  for (TempBlock block : frozenblocks.keySet()) { Player player = frozenblocks.get(block); if (block.getBlock().getType() != Material.ICE) { frozenblocks.remove(block); continue; } if (block.getBlock().getWorld() != player.getWorld()) { thaw(block); continue; } if (block.getLocation().distance(player.getLocation()) > instances.get(player).range || !Methods.canBend(player.getName(), ""Torrent"")) { thaw(block); } } } "	0	0	1	1	1	0
public Integer getMaxNumRetries() { return maxNumRetries == null || maxNumRetries < 0 ? 0 : maxNumRetries; } 	0	0	1	0	1	0
"public void setCurrency(String currency) { if (currency == null || currencies.contains(currency)) { this.Currency = currency; } else { throw new RuntimeException(""Invalid currency""); } } "	0	0	1	0	1	0
"@Nonnull private LibraryType getLibraryType(@Nonnull final String path) throws IncompatibleResourceTypeException { if (StringUtils.endsWith(path, LibraryType.CSS.extension)) { return LibraryType.CSS; } else if (StringUtils.endsWith(path, LibraryType.JS.extension)) { return LibraryType.JS; } else { throw new IncompatibleResourceTypeException(""Can not determine the library type""); } } "	0	0	0	1	0	0
private double findDistance(T point, double x) { double pointX = this.xAxisMetric.compute(point); return pointX - x; } 	0	0	1	0	1	0
"private void appendFileDetails(final StringBuffer buf, final WMultiFileWidget fileWidget) { List<FileWidgetUpload> files = fileWidget.getSelectedFiles();  if (files != null) { for (FileWidgetUpload file : files) { String streamedSize;  try { InputStream in = file.getFile().getInputStream();  int size = 0; while (in.read() >= 0) { size++; }  streamedSize = String.valueOf(size); } catch (IOException e) { streamedSize = e.getMessage(); }  buf.append(""Name: "").append(file.getFile().getName()); buf.append(""\nSize: "").append(streamedSize).append("" bytes\n\n""); } } } "	0	0	1	0	1	0
public Property partition() { Arbitrary<List<Validation<String, Integer>>> al = arbList(arbValidation(arbUSASCIIString, arbInteger)); return Property.property(al, list -> { P2<List<String>, List<Integer>> p = Validation.partition(list); boolean b1 = p._1().length() + p._2().length() == list.length(); boolean b2 = p._1().map(s -> Validation.<String, Integer>fail(s)).equals(list.filter(v -> v.isFail())); boolean b3 = p._2().map(s -> Validation.<String, Integer>success(s)).equals(list.filter(v -> v.isSuccess())); return Property.prop(b1 && b2 && b3); }); } 	0	0	1	1	1	0
"@Override public ModelAndView resolveException( HttpServletRequest request, HttpServletResponse response, Object handler, Exception exception) { exception.printStackTrace(); // send email to programmers String sendEmailOnExceptionStr = wiseProperties.getProperty(""send_email_on_exception""); boolean sendEmailOnException = sendEmailOnExceptionStr.equalsIgnoreCase(""true"");  if (sendEmailOnException) { String portalName = wiseProperties.getProperty(""wise.name""); String[] recipients = wiseProperties.getProperty(HANDLE_EXCEPTION_PROPERTY_KEY).split("",""); String subject = HANDLE_EXCEPTION_MAIL_SUBJECT + "": ("" + portalName + "")""; String fromEmail = wiseProperties.getProperty(""mail.from""); String message = getHandleExceptionMessage(request, response, handler, exception);  ExceptionEmailSender emailSender = new ExceptionEmailSender(recipients,subject,fromEmail,message); Thread thread = new Thread(emailSender); thread.start(); } return super.resolveException(request, response, handler, exception); } "	0	0	1	0	1	0
"private int getLimit() {  int limit = 100; Timber.d(""Max number of uploads set to %d"", limit); return limit; // FIXME: Parameterize! } "	0	0	1	0	1	0
@Override public void onArtistSelected(SpotifyArtistModel spotifyArtistModel) { if (mTwoPane) { // In two-pane mode, show the detail view in this activity by // adding or replacing the detail fragment using a // fragment transaction. Bundle arguments = new Bundle(); TopTracksFragment fragment = new TopTracksFragment(); arguments.putParcelable(TopTracksFragment.EXTRA_SPOTIFY_ARTIST, spotifyArtistModel); fragment.setArguments(arguments); getSupportFragmentManager().beginTransaction() .replace(R.id.top_tracks_content_frame_container, fragment) .commit();  } else { // In single-pane mode, simply start the detail activity // for the selected item ID. Intent detailIntent = new Intent(this, ArtistTopTracksActivity.class); Bundle extras = new Bundle();   extras.putParcelable(TopTracksFragment.EXTRA_SPOTIFY_ARTIST, spotifyArtistModel); detailIntent.putExtras(extras);    startActivity(detailIntent); } } 	0	0	1	0	1	0
@NotNull private List<FlagStats> buildFlagStatsData(@NotNull final Map<String, Double> data) { final List<FlagStats> failedStats = new ArrayList<>(); IntStream.range(START, data.size()).forEach(index -> { data.forEach((checkName, value) -> { final Optional<FlagStatsType> statsTypeOpt = FlagStatsType.getByIndex(index); final FlagStatsType flagStatsType = statsTypeOpt.get();  final FlagStats flagStats = new FlagStats(flagStatsType, checkName, value); failedStats.add(flagStats); }); }); return failedStats; } 	0	0	0	1	0	0
"private void addShot(BufferedImage workingCopy, PixelCluster pc) { Optional<javafx.scene.paint.Color> color = pc.getColorJavafx(workingCopy, colorDiffMovingAverage);  double x = pc.centerPixelX; double y = pc.centerPixelY;  if (!color.isPresent()) return;  if (config.ignoreLaserColor() && config.getIgnoreLaserColor().isPresent() && color.get().equals(config.getIgnoreLaserColor().get())) return;  logger.info(""Suspected shot accepted: Center ({}, {}), {}"", x, y, color.get());   Shot shot = new Shot(color.get(), x, y, System.currentTimeMillis(), cameraManager.getFrameCount(), config.getMarkerRadius());   if (config.isDebugShotsRecordToFiles() && config.getDeduplicationProcessor().processShotLookahead(shot)) { File outputfile = new File(String.format(""shot-%d-%d_orig.png"",(int)pc.centerPixelX, (int)pc.centerPixelY)); try { ImageIO.write(workingCopy, ""png"", outputfile); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } for (Pixel p : pc) { if (color.get() == javafx.scene.paint.Color.GREEN) workingCopy.setRGB(p.x, p.y, 0x00FF00); else workingCopy.setRGB(p.x, p.y, 0xFF0000); } outputfile = new File(String.format(""shot-%d-%d.png"",(int)pc.centerPixelX, (int)pc.centerPixelY)); try { ImageIO.write(workingCopy, ""png"", outputfile); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } }  if ((cameraManager.isLimitingDetectionToProjection() || cameraManager.isCroppingFeedToProjection()) && cameraManager.getProjectionBounds().isPresent()) {  Bounds b = cameraManager.getProjectionBounds().get();  canvasManager.addShot(color.get(), x + b.getMinX(), y + b.getMinY()); } else { canvasManager.addShot(color.get(), x, y); }    } "	0	0	1	0	0	0
"private void initComboBox() {  jComboBoxFirstEntryColorPaletteInfo = new ColorPaletteInfo(getjComboBoxFirstEntryName(), null, null, null, 0, 0, false, null, true, true, null, null, null); colorPaletteInfos.add(jComboBoxFirstEntryColorPaletteInfo);  initColorPaletteInfos(colorPaletteDir, colorPaletteInfos, schemesFile, true);   Object[] colorPaletteInfosArray = colorPaletteInfos.toArray();  final String[] toolTipsArray = new String[colorPaletteInfos.size()];  int i = 0; for (ColorPaletteInfo colorPaletteInfo : colorPaletteInfos) { toolTipsArray[i] = colorPaletteInfo.getDescription(); i++; }  final Boolean[] enabledArray = new Boolean[colorPaletteInfos.size()];  i = 0; for (ColorPaletteInfo colorPaletteInfo : colorPaletteInfos) { enabledArray[i] = colorPaletteInfo.isEnabled(); i++; }  final MyComboBoxRenderer myComboBoxRenderer = new MyComboBoxRenderer(); myComboBoxRenderer.setTooltipList(toolTipsArray); myComboBoxRenderer.setEnabledList(enabledArray);  jComboBox = new JComboBox(colorPaletteInfosArray); jComboBox.setRenderer(myComboBoxRenderer); jComboBox.setEditable(false); jComboBox.setMaximumRowCount(20); if (schemesFile != null) { jComboBox.setToolTipText(""To modify see file: "" + colorPaletteDir + ""/"" + schemesFile.getName()); }   } "	1	0	0	0	1	0
"protected void validateRootGroups(ManagerSpec managerSpec) { Queue<ResourceGroupSpec> groups = new LinkedList<>(managerSpec.getRootGroups()); while (!groups.isEmpty()) { ResourceGroupSpec group = groups.poll(); groups.addAll(group.getSubGroups()); if (group.getSoftCpuLimit().isPresent() || group.getHardCpuLimit().isPresent()) { checkArgument(managerSpec.getCpuQuotaPeriod().isPresent(), ""cpuQuotaPeriod must be specified to use cpu limits on group: %s"", group.getName()); } if (group.getSoftCpuLimit().isPresent()) { checkArgument(group.getHardCpuLimit().isPresent(), ""Must specify hard CPU limit in addition to soft limit""); checkArgument(group.getSoftCpuLimit().get().compareTo(group.getHardCpuLimit().get()) <= 0, ""Soft CPU limit cannot be greater than hard CPU limit""); } if (group.getSchedulingPolicy().isPresent()) { if (group.getSchedulingPolicy().get() == WEIGHTED) { for (ResourceGroupSpec subGroup : group.getSubGroups()) { checkArgument(subGroup.getSchedulingWeight().isPresent(), ""Must specify scheduling weight for each sub group when using \""weighted\"" scheduling policy""); } } else { for (ResourceGroupSpec subGroup : group.getSubGroups()) { checkArgument(!subGroup.getSchedulingWeight().isPresent(), ""Must use \""weight\"" scheduling policy when using scheduling weight""); } } } } } "	0	0	1	0	1	0
public String[] getData () { return data; } 	0	0	1	1	0	0
"@Override public void onClick(View v) { //Toast.makeText(this, ""Player Cash: "" + playGame.getPlayerCash(), Toast.LENGTH_LONG).show(); switch(v.getId()) { case R.id.hit_button:  DealCard(PLAYER_HAND_KEY, false);  int tally = playGame.getPlayerScore(); if(tally > 21) {  TestSoftHand(PLAYER_HAND_KEY);  if (playGame.getPlayerScore() > 21) { Button b = (Button) findViewById(R.id.hit_button); b.setVisibility(View.INVISIBLE); b = (Button) findViewById(R.id.stand_button); b.setVisibility(View.INVISIBLE); b = (Button) findViewById(R.id.next_button); b.setVisibility(View.VISIBLE); TextView tv = (TextView) findViewById(R.id.result_textView); tv.setText(""You BUSTED""); tv.setVisibility(View.VISIBLE); break; } } break; case R.id.stand_button:  Button b = (Button) findViewById(R.id.hit_button); b.setVisibility(View.INVISIBLE);  b = (Button) findViewById(R.id.stand_button); b.setVisibility(View.INVISIBLE);  ImageView iv = (ImageView) findViewById(dealerCards.get(1)); iv.setImageResource(downcard);  // Display New Score tv_DealerScore.setText(String.valueOf(playGame.getDealerScore()));  while(playGame.getDealerScore() < playGame.getPlayerScore() && playGame.getPlayerScore() < 22) { while(playGame.getDealerScore() < 17) { DealCard(DEALER_HAND_KEY, false); if (playGame.getDealerScore() > 21) TestSoftHand(DEALER_HAND_KEY); } if(playGame.getDealerScore() >= 17) break; }  if(playGame.getDealerScore() > 21) { b = (Button) findViewById(R.id.hit_button); b.setVisibility(View.INVISIBLE); b = (Button) findViewById(R.id.stand_button); b.setVisibility(View.INVISIBLE); b = (Button) findViewById(R.id.next_button); b.setVisibility(View.VISIBLE); TextView tv = (TextView) findViewById(R.id.result_textView); tv.setText(""Dealer BUSTS, You Win""); tv.setVisibility(View.VISIBLE); int winnings = playGame.getBetAmount() * 2; playGame.setPlayerCash(playGame.getPlayerCash() + winnings); break; }  if(playGame.getPlayerScore() > playGame.getDealerScore() && playGame.getPlayerScore() <= 21 && playGame.getDealerScore() <= 21){ b = (Button) findViewById(R.id.hit_button); b.setVisibility(View.INVISIBLE); b = (Button) findViewById(R.id.stand_button); b.setVisibility(View.INVISIBLE); b = (Button) findViewById(R.id.next_button); b.setVisibility(View.VISIBLE); TextView tv = (TextView) findViewById(R.id.result_textView); tv.setText(""YOU WIN""); tv.setVisibility(View.VISIBLE); int winnings = playGame.getBetAmount() * 2; playGame.setPlayerCash(playGame.getPlayerCash() + winnings); break; }  if(playGame.getPlayerScore() < playGame.getDealerScore() && playGame.getPlayerScore() <= 21 && playGame.getDealerScore() <= 21){ b = (Button) findViewById(R.id.hit_button); b.setVisibility(View.INVISIBLE); b = (Button) findViewById(R.id.stand_button); b.setVisibility(View.INVISIBLE); b = (Button) findViewById(R.id.next_button); b.setVisibility(View.VISIBLE); TextView tv = (TextView) findViewById(R.id.result_textView); tv.setText(""DEALER WINS""); tv.setVisibility(View.VISIBLE); break; }  if(playGame.getPlayerScore() == playGame.getDealerScore() && playGame.getPlayerScore() <= 21 && playGame.getDealerScore() <= 21){ b = (Button) findViewById(R.id.hit_button); b.setVisibility(View.INVISIBLE); b = (Button) findViewById(R.id.stand_button); b.setVisibility(View.INVISIBLE); b = (Button) findViewById(R.id.next_button); b.setVisibility(View.VISIBLE); TextView tv = (TextView) findViewById(R.id.result_textView); tv.setText(""PUSH""); tv.setVisibility(View.VISIBLE); int winnings = playGame.getBetAmount(); playGame.setPlayerCash(playGame.getPlayerCash() + winnings); break; }  case R.id.next_button: Intent iActivity_Bet = new Intent(getApplicationContext(), activity_bet.class); iActivity_Bet.putExtra(PLAYER_CASH_KEY, (playGame.getPlayerCash())); startActivity(iActivity_Bet); break;  } } "	1	0	0	0	0	0
public void saveCachedUserData() { List<UserData> data = new ArrayList<>(); data.addAll(dataCache.values()); try { db.saveMultipleUserData(data); } catch (SQLException ex) { Log.toLog(this.getClass().getName(), ex); } } 	0	0	1	0	1	0
@Override @SideOnly(Side.CLIENT) public void renderPre(IBookletGui gui, int mouseX, int mouseY, int ticksElapsed, boolean mousePressed){ if(this.recipes[this.recipePos] != null){ Minecraft.getMinecraft().getTextureManager().bindTexture(GuiBooklet.RES_LOC); gui.drawRect(gui.getGuiLeft()+27, gui.getGuiTop()+20, 146, 20, 99, 60); } } 	0	0	0	1	1	0
public List<SelfDescribingJson> getContext() { return this.context; } 	0	0	1	1	1	0
@Override public View getView(ViewGroup container) { ViewGroup v = super.inflatePhotoView(container); final View view = v.findViewById(R.id.subsampling); final View transitionView = itemView.findViewById(R.id.image);  //hide transitionView, when config was changed if (albumItem instanceof Photo && ((Photo) albumItem).getImageViewSavedState() != null) { transitionView.setVisibility(View.INVISIBLE); } ItemViewUtil.bindTransitionView((ImageView) transitionView, albumItem);  view.setVisibility(View.INVISIBLE); return v; } 	0	0	1	1	1	0
@Override public void onClick(View view) { transactionHistory(null, TransactionHistoryFragment.RefreshState.EMPTY_REFRESH); } 	1	0	1	0	0	0
"public static boolean isModifiableField(GeneratedMessage.Builder builder, String fieldName) { if (builder instanceof UnitTemplate.Builder) { return !(""type"".equals(fieldName) || ""id"".equals(fieldName)); } else if (builder instanceof DeviceClass.Builder) { if (""product_number"".equals(fieldName)) { return ((DeviceClass.Builder) builder).getProductNumber().isEmpty(); } return !(""id"".equals(fieldName)); } else if (builder instanceof ServiceTemplate.Builder) { return !(""service_type"".equals(fieldName)); } else if (builder instanceof DeviceConfig.Builder) { if (""serial_number"".equals(fieldName)) { return ((DeviceConfig.Builder) builder).getSerialNumber().isEmpty(); } else if (""device_class_id"".equals(fieldName)) { return ((DeviceConfig.Builder) builder).getDeviceClassId().isEmpty(); } return !(""id"".equals(fieldName)); } else if (builder instanceof Scope.Builder) { return !(""scope"".equals(fieldName)); } else if (builder instanceof UnitConfig.Builder) { return !(""id"".equals(fieldName) || ""device_id"".equals(fieldName) || ""type"".equals(fieldName) || ""unit_template_config_id"".equals(fieldName)); } else if (builder instanceof ServiceConfig.Builder) { return !(""type"".equals(fieldName) || ""unit_id"".equals(fieldName)); } else if (builder instanceof LocationConfig.Builder) { return !(""id"".equals(fieldName) || ""root"".equals(fieldName) || ""unit_id"".equals(fieldName)); } else if (builder instanceof ConnectionConfig.Builder) { return !(""id"".equals(fieldName)); } else if (builder instanceof SceneConfig.Builder) { return !(""id"".equals(fieldName)); } else if (builder instanceof AgentConfig.Builder) { return !(""id"".equals(fieldName)); } else if (builder instanceof AgentClass.Builder) { return !(""id"".equals(fieldName)); } else if (builder instanceof AppConfig.Builder) { return !(""id"".equals(fieldName)); } else if (builder instanceof AppClass.Builder) { return !(""id"".equals(fieldName)); } else if (builder instanceof UnitTemplateConfig.Builder) { return !(""id"".equals(fieldName)); } else if (builder instanceof UserConfig.Builder) { return !(""id"".equals(fieldName)); } else if (builder instanceof UserGroupConfig.Builder) { return !(""id"".equals(fieldName)); } else if (builder instanceof UnitGroupConfig.Builder) { return !(""id"".equals(fieldName)); } return true; } "	1	0	0	0	0	0
"@Override public String toString() { if (doesConflictAtAll()) { return ""ConflicSite.at("" + position + ')'; } else { return ""ConflictSite.never()""; } } "	0	0	1	0	0	0
@Test public void testGetNeighborsAtEdge() { //edge stones should have exactly 3 neighbors, unless corner stones Set<Stone> neigbors = board.getNeighbors(stonePositions[height - 1][1]); assertEquals(3, neigbors.size()); } 	1	0	1	1	1	0
"@SuppressWarnings(""rawtypes"") protected ProcurementCardDocument createProcurementCardDocument( List transactions) { ProcurementCardDocument pcardDocument = null;  try { // get new document from doc service pcardDocument = (ProcurementCardDocument) getDocumentService().getNewDocument(PROCUREMENT_CARD);  List<CapitalAssetInformation> capitalAssets = pcardDocument.getCapitalAssetInformation(); for (CapitalAssetInformation capitalAsset : capitalAssets) { if (ObjectUtils.isNotNull(capitalAsset) && ObjectUtils.isNotNull(capitalAsset.getCapitalAssetInformationDetails())) { capitalAsset.setDocumentNumber(pcardDocument.getDocumentNumber()); } }  ProcurementCardTransaction trans = (ProcurementCardTransaction) transactions.get(0); validateTransaction(trans); createCardHolderRecord(pcardDocument, trans);  // for each transaction, create transaction detail object and then acct lines for the detail int transactionLineNumber = 1; KualiDecimal documentTotalAmount = KualiDecimal.ZERO; String transactionIssuesSummary = """"; Integer documentExplanationMaxLength = getDataDictionaryService().getAttributeMaxLength(DocumentHeader.class.getName(), KFSPropertyConstants.EXPLANATION); for (Iterator iter = transactions.iterator(); iter.hasNext();) { ProcurementCardTransaction transaction = (ProcurementCardTransaction) iter.next();  // create transaction detail record with accounting lines String transactionSummary = createTransactionDetailRecord(pcardDocument, transaction, transactionLineNumber); if(!transactionIssuesSummary.contains(transactionSummary)){ transactionIssuesSummary = transactionIssuesSummary.concat(transactionIssuesSummary); }  // update document total documentTotalAmount = documentTotalAmount.add(transaction.getFinancialDocumentTotalAmount());  transactionLineNumber++; }  pcardDocument.getFinancialSystemDocumentHeader().setFinancialDocumentTotalAmount(documentTotalAmount);  // In case errorText is still too long, truncate it and indicate so. if (documentExplanationMaxLength != null && transactionIssuesSummary.length() > documentExplanationMaxLength.intValue()) { String truncatedMessage = "" ... TRUNCATED.""; transactionIssuesSummary = transactionIssuesSummary.substring(0, documentExplanationMaxLength - truncatedMessage.length()) + truncatedMessage; } pcardDocument.getDocumentHeader().setExplanation(transactionIssuesSummary); } catch (WorkflowException e) { LOG.error(""Error creating pcdo documents: "" + e.getMessage(),e); throw new RuntimeException(""Error creating pcdo documents: "" + e.getMessage(),e); }  return pcardDocument; } "	1	1	1	0	0	0
"public static void teleport() throws PlayerNotFoundException { if (!(sender instanceof EntityPlayer)) { return; }  if (boxContainers.size() < 1) { refreshAndBuildContainers(); if (boxContainers.size() < 1) { sendErrorMessage(""No containers currently existing!""); } }  if (checkIfArgIsNull(0)) { sendErrorMessage(""Container name not specified! Command is used as /docker rm <name> .""); return; }  Container container = getFromAllWithName(""/"" + arg1);  if (container == null) { sendErrorMessage(""No container exists with the name \""/"" + arg1 + ""\""""); }  BoxContainer boxContainer = getBoxContainerWithID(container.getId());  BlockPos pos = boxContainer.getPosition();  getCommandSenderAsPlayer(sender).playerNetServerHandler .setPlayerLocation(pos.getX() + 0.5, pos.getY() + 0.5, pos.getZ() - 0.5, 0, 0); } "	0	0	1	1	0	0
protected void registerFieldResolvers(WorldConfiguration config) {  if (fieldResolvers.size() > 0) { Sort.instance().sort(fieldResolvers); // instance default field handler final FieldHandler fieldHandler = new FieldHandler(new InjectionCache());  for (Registerable<FieldResolver> registerable : fieldResolvers) { fieldHandler.addFieldResolver(registerable.item); }  config.setInjector(new CachedInjector().setFieldHandler(fieldHandler)); } } 	0	0	1	0	1	0
public QueueItem poll() { QueueItem item = peek(); if (item == null) { return null; } if (store.isEnabled()) { try { store.delete(item.getItemId()); } catch (Exception e) { throw new HazelcastException(e); } } getItemQueue().poll(); age(item, Clock.currentTimeMillis()); scheduleEvictionIfEmpty(); return item; } 	1	0	0	0	1	0
"private static void checkTerminals(final ISeq<? extends Op<?>> terminals) { final ISeq<Op<?>> operations = terminals.stream() .filter(op -> !op.isTerminal()) .collect(ISeq.toISeq());  if (!operations.isEmpty()) { throw new IllegalArgumentException(format( ""Terminals must not contain operations: %s"", operations.toString("","") )); } } "	1	0	1	1	0	0
"private static void checkOperations(final ISeq<? extends Op<?>> operations) { final ISeq<Op<?>> terminals = operations.stream() .filter(op -> op.isTerminal()) .collect(ISeq.toISeq());  if (!terminals.isEmpty()) { throw new IllegalArgumentException(format( ""Operations must not contain terminals: %s"", terminals.toString("","") )); } } "	1	0	1	1	0	0
"private void addHostDetailsIndex(Connection conn) { s_logger.debug(""Checking if host_details index exists, if not we will add it""); try(PreparedStatement pstmt = conn.prepareStatement(""SHOW INDEX FROM `cloud`.`host_details` where KEY_NAME = 'fk_host_details__host_id'"");) { try(ResultSet rs = pstmt.executeQuery();) { if (rs.next()) { s_logger.debug(""Index already exists on host_details - not adding new one""); } else { // add the index try(PreparedStatement pstmtUpdate = conn.prepareStatement(""ALTER IGNORE TABLE `cloud`.`host_details` ADD INDEX `fk_host_details__host_id` (`host_id`)"");) { pstmtUpdate.executeUpdate(); s_logger.debug(""Index did not exist on host_details -  added new one""); }catch (SQLException e) { throw new CloudRuntimeException(""Failed to check/update the host_details index "", e); } } }catch (SQLException e) { throw new CloudRuntimeException(""Failed to check/update the host_details index "", e); } } catch (SQLException e) { throw new CloudRuntimeException(""Failed to check/update the host_details index "", e); } } "	0	0	1	0	1	0
public void removeAllPlayerItems() { this.playerItems = null; } 	0	0	1	0	1	0
public boolean isForceFlag() { return forceFlag; } 	0	0	1	0	0	0
protected Path getGofmtLocation(GoEnvironment goEnv) throws CommonException { if(GoToolPreferences.GOFMT_Path.getPreference().get() == null) { return getGofmtLocationFromGoRoot(goEnv.getGoRoot_Location()).toPath(); } return GoToolPreferences.GOFMT_Path.getDerivedValue(project); } 	1	0	0	1	0	0
"public Object evalWithResult(String cmd) throws Exception { engine.eval(""result = "" + cmd); return engine.getVariable(""result""); } "	0	0	1	0	1	0
"public void execute(WebScriptRequest req, WebScriptResponse res) throws IOException { Collection<QName> caseTypes = dictionaryService.getSubTypes(OpenESDHModel.TYPE_CASE_BASE, true);  // build a json object JSONArray arr = new JSONArray();  for (QName caseType : caseTypes) {  // skip the basetype - getSubTypes returns it together with the subtypes if (!caseType.getLocalName().equals(OpenESDHModel.TYPE_BASE_NAME)) { //System.out.println(caseType.getLocalName()); JSONObject c = new JSONObject(); try { String type = StringUtils.substringBefore(caseType.getPrefixString(), "":""); c.put(""NamespaceURI"", caseType.getNamespaceURI()); c.put(""Prefix"", caseType.getPrefixString()); c.put(""Type"", type); c.put(""Name"", caseType.getLocalName()); c.put(""Title"", dictionaryService.getType(caseType).getTitle(dictionaryService)); c.put(""createFormWidgets"", caseService.getCaseCreateFormWidgets(type));  arr.put(c); } catch (JSONException e) { throw new WebScriptException(""Unable to serialize JSON""); } }  } // build a JSON string and send it back String jsonString = arr.toString(); res.getWriter().write(jsonString); } "	1	0	0	0	1	0
"private static TypedName<?> parseAttribute(EntityDefaults entityDefaults, JsonNode col) { if (col.isNull() || col.isMissingNode()) { return null; } else if (col.isObject()) { String name = col.path(""name"").asText(null); String type = col.path(""type"").asText(null); Preconditions.checkArgument(name != null, ""no attribute name specified""); Preconditions.checkArgument(type != null, ""no attribute type specified""); return TypedName.create(name, type); } else if (col.isTextual()) { String name = col.asText(); TypedName<?> attr = entityDefaults != null ? entityDefaults.getAttributeDefaults(name) : null; if (attr == null) { attr = TypedName.create(col.asText(), col.asText().equals(""id"") ? Long.class : String.class); } return attr; } else { throw new IllegalArgumentException(""invalid attribute specification: "" + col.toString()); } } "	0	0	1	1	0	0
protected List<String> extractSort(JsonArray sort) { if (sort == null) { return null; }  List<String> retval = new ArrayList<String>(sort.size()); for (JsonElement sortValue : sort) { retval.add(sortValue.getAsString()); } return retval; } 	0	0	0	0	0	1
"private void save(){ CatsSQLiteOpenHelper helper = CatsSQLiteOpenHelper.getInstance(NewCatActivity.this); helper.getWritableDatabase();  try { helper.insert( mEditCatName.getText().toString(), mEditCatDesc.getText().toString(), //TODO: Get location from image. ""*Your location here*"", ""file:""+mCurrentPhotoPath); Toast.makeText(NewCatActivity.this, ""Cat saved."", Toast.LENGTH_SHORT).show(); } catch (Exception e){ Toast.makeText(NewCatActivity.this, ""There was a problem saving your cat data :("", Toast.LENGTH_SHORT).show(); } Intent backToMainIntent = new Intent(NewCatActivity.this, MainActivity.class); startActivity(backToMainIntent); } "	0	0	1	0	0	0
"public static List<ItemStack> getSubItems(Item item, int materialLength) {  List<ItemStack> list = Lists.newArrayList(); final boolean isSuperTool = item == ModItems.katana || item == ModItems.scepter; final ItemStack rodWood = new ItemStack(Items.STICK); final ItemStack rodGold = ModItems.craftingMaterial.toolRodGold;  if (!isSuperTool) { // Test broken items. ItemStack testBroken = constructTool(item, rodWood, new ItemStack(Items.FLINT), materialLength); testBroken.setItemDamage(getMaxDamage(testBroken) - 1); list.add(testBroken);  // Flint list.add(constructTool(item, rodWood, new ItemStack(Items.FLINT), materialLength));  // Regular Gems for (EnumGem gem : EnumGem.values()) list.add(constructTool(item, rodWood, gem.getItem(), materialLength)); }  // Super Gems for (EnumGem gem : EnumGem.values()) list.add(constructTool(item, rodGold, gem.getItemSuper(), materialLength));  // Set maker name. for (ItemStack stack : list) ToolHelper.setOriginalOwner(stack, TextFormatting.LIGHT_PURPLE + ""Creative"");  return list; } "	0	0	1	1	1	0
@Override public Location getLastLocation() { Location location = Utils.getLocationFromPreferences(sharedPreferences, LAST_ID); if (location != null) { return location; }  return client.isConnected() ? LocationServices.FusedLocationApi.getLastLocation(client) : null; } 	1	0	1	1	1	0
"public void DownloadFile(String urls, int element, int fileSize, DefaultTableModel guiElements) throws Exception{ savePath = CheckSavePath(savePath); String[] URL_split = urls.split(""/""); super.DownloadFile(urls, savePath + URL_split[URL_split.length - 1], fileSize, element, guiElements); } "	1	1	0	0	0	0
"public static void main( String[] args ) {  Problem curProb = new PE0039(); String result = curProb.getResult();  IO.info( ""result for problem #"" + curProb ); IO.info( "" is '"" + result + ""'"" ); IO.infoln( "" found in "" + curProb.getRuntime( 2 ) + "" ms"" );  } "	0	0	1	0	1	0
@Override public PromptStyle getPromptStyle() { final ObjectAction objectAction = this.getActionMemento().getAction(getSpecificationLoader()); final ObjectSpecification objectActionOwner = objectAction.getOnType(); if(objectActionOwner.isService()) { // tried to move this test into PromptStyleFacetFallback, // however it's not that easy to lookup the owning type return PromptStyle.DIALOG; } if(objectAction.getParameterCount() == 0) { // a bit of a hack, the point being that the UI for dialog correctly handles no-args, // whereas for INLINE it would render a form with no fields return PromptStyle.DIALOG; } final PromptStyleFacet facet = getFacet(PromptStyleFacet.class); if(facet == null) { // don't think this can happen actually, see PromptStyleFacetFallback return PromptStyle.INLINE; } final PromptStyle promptStyle = facet.value(); if (promptStyle == PromptStyle.AS_CONFIGURED) { // I don't think this can happen, actually... // when the metamodel is built, it should replace AS_CONFIGURED with one of the other prompts // (see PromptStyleConfiguration and PromptStyleFacetFallback) return PromptStyle.INLINE; } return promptStyle; } 	1	0	1	0	1	0
public <T extends Facet> T getFacet(final Class<T> facetType) { final FacetHolder facetHolder = getActionMemento().getAction(getSpecificationLoader()); return facetHolder.getFacet(facetType); } 	1	0	0	0	0	0
"@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { // set title getActivity().setTitle(getString(R.string.nav_home));  // create view and bind View view = inflater.inflate(R.layout.fragment_home, container, false); ButterKnife.bind(this, view);  SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(getActivity()); final Integer numberOfPeopleToPrayForDaily = Integer.parseInt(preferences.getString(""numberOfPeopleToPrayForDaily"", ""3""));  /* * cache data if needed */  // decide whether or not to fetch a new verse image String verseImageURL = cacheManager.getCachedVerseImageURL(); if (!useCache || verseImageURL == null) { updateBackgroundImage(); new ImageFetcher().execute(); }  // verse title and text ScriptureData scriptureData = cacheManager.getCachedScripture(); if (!useCache || scriptureData == null) { ScriptureData scripture = scriptureService.getScripture(); if (scripture != null) { Log.d(TAG, ""scripture = "" + scripture); // cache cacheManager.cacheScripture(scripture); } else { Log.e(TAG, ""Could not fetch scripture!""); } }  // people to pray for List<String> personIds = cacheManager.getCachedPersonIdsToPrayFor(); if (!useCache || personIds == null || personIds.size() < numberOfPeopleToPrayForDaily) { List<PersonPOJO> personPOJOs; try { personPOJOs = personManager.getNextPeopleToPrayFor(numberOfPeopleToPrayForDaily); } catch (AlreadyPrayedForAllContactsException e) { // TODO: Celebrate! try { personPOJOs = personManager.getNextPeopleToPrayFor(numberOfPeopleToPrayForDaily); } catch (AlreadyPrayedForAllContactsException e1) { // TODO: Something is really wrong if this happens, not sure what to do here throw new RuntimeException(e1); } } personIds = new ArrayList<>(); for (PersonPOJO personPOJO : personPOJOs) { personIds.add(personPOJO.getId()); } cacheManager.cachePersonIdsToPrayFor(personIds); }  // wire up the home view pager runPager = new Runnable() { @Override public void run() { viewPager.setOffscreenPageLimit(numberOfPeopleToPrayForDaily + 1); final FragmentStatePagerAdapter pagerAdapter = new FragmentStatePagerAdapter(((AppCompatActivity) getActivity()).getSupportFragmentManager()) { @Override public android.support.v4.app.Fragment getItem(int position) { android.support.v4.app.Fragment fragment; Bundle bundle = new Bundle(); if (position == 0) { fragment = new VerseCardSupportFragment(); } else if (position == getCount() - 1) { fragment = new ProgressCardSupportFragment(); } else { List<String> personIds = cacheManager.getCachedPersonIdsToPrayFor(); // we need at least as many people as there are slots to fill if (personIds != null && personIds.size() >= position) { String personId = personIds.get(position - 1); fragment = PersonSupportFragment.newInstance(personId); bundle.putInt(Constants.HOME_SECTION_NUMBER_BUNDLE_ARG, position); } else { fragment = new BlankSupportFragment(); } } bundle.putBoolean(Constants.USE_CACHE_BUNDLE_ARG, useCache); if (fragment.getArguments() != null) { fragment.getArguments().putAll(bundle); } else { fragment.setArguments(bundle); }  return fragment; }  @Override public int getCount() { return numberOfPeopleToPrayForDaily + Constants.NUM_AUXILIARY_CARDS; } }; viewPager.setAdapter(pagerAdapter); viewPager.setPageTransformer(true, new ZoomOutPageTransformer()); // since this gets called multiple times, we need to clear any existing onpagechangelisteners. // otherwise the listeners will accumulate. For example, open a quickcontent intent and go back. // suddenly you have two onPageChangeListeners attached. // Question: Does this mean that we maybe don't even need to configure the viewpager every single time? viewPager.clearOnPageChangeListeners(); viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() { @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) { }  @Override public void onPageSelected(int position) { ICardPageFragment card = (ICardPageFragment) pagerAdapter.getItem(position); Log.v(TAG, ""Page selected "" + position); AnalyticsUtils.sendScreenViewHit(mTracker, card.getCardName());  Bundle newState = new Bundle(); newState.putInt(Constants.HOME_SECTION_NUMBER_BUNDLE_ARG, position); if (position > 0 && position < numberOfPeopleToPrayForDaily + 1) { List<String> personIds = cacheManager.getCachedPersonIdsToPrayFor(); if (personIds != null && personIds.size() >= position) { String personId = personIds.get(position - 1); newState.putString(Constants.PERSON_ID_BUNDLE_ARG, personId); } } // notify fragment state FragmentState fragmentState = new FragmentState(getString(R.string.nav_home), newState); mListener.notify(fragmentState); }  @Override public void onPageScrollStateChanged(int state) { } });  // wire up the indicator indicator.setViewPager(viewPager);  // set the page if required Bundle bundle = getArguments(); if (bundle != null && bundle.containsKey(Constants.HOME_SECTION_NUMBER_BUNDLE_ARG)) { Integer page = bundle.getInt(Constants.HOME_SECTION_NUMBER_BUNDLE_ARG); Log.d(TAG, ""setting pager to "" + page); viewPager.setCurrentItem(page); } else { // this defaults to page 0, scripture card Log.d(TAG, ""No bundle argument for page""); AnalyticsUtils.sendScreenViewHit(mTracker, ((ICardPageFragment) pagerAdapter.getItem(0)).getCardName()); } } };  return view; } "	0	0	1	0	0	0
private void showDependencies() { Module selectedModule = getSelectedModule(); List<Dependency> dependencies = selectedModule.getDependencies(); if (!dependencies.isEmpty()) { IViewPart dependenciesView = OpenAndAnnotateHelper.openView(JSDeodorantModulesView.ID); if (dependenciesView != null) { ((JSDeodorantVisualizationView)dependenciesView).showDependenciesGraph(selectedModule); } } } 	0	0	1	0	1	0
"private void logResult(String status, String message) { StringBuffer buf= new StringBuffer(); if(isStringNotBlank(status)) { buf.append(status).append("": ""); } buf.append(message);  System.out.println(buf); } "	0	0	1	0	1	0
"private String toString(int status) { switch(status) { case SUCCESS: return ""SUCCESS""; case FAILURE: return ""FAILURE""; case SKIP: return ""SKIP""; case SUCCESS_PERCENTAGE_FAILURE: return ""SUCCESS WITHIN PERCENTAGE""; case STARTED: return ""STARTED""; default: throw new RuntimeException(); } } "	0	0	0	1	0	0
private void registerNamespaceDispatcher(String namespace) { namespaceDispatchers.put(namespace, new NamespacedTagDispatcher(namespace, GroovyPage.class, grailsApplication, this)); } 	0	0	0	1	0	0
"@Override protected void onCreate(Bundle savedInstanceState) {  super.onCreate(savedInstanceState); setContentView(R.layout.login_main); UserListManager.initManager(this.getApplicationContext()); UserListController ULC = new UserListController();  //clickable create account button takes user to create account page Button newaccountbutton = (Button) findViewById(R.id.buttonNewAccount); newaccountbutton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent intent = new Intent(LoginActivity.this, NewAccountActivity.class); startActivity(intent); } });  //clickable login button takes user to Claim list page Button loginbutton = (Button) findViewById(R.id.buttonLogin); loginbutton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { EditText username = (EditText) findViewById(R.id.editLoginUserName); String name = username.getText().toString(); if (!ULC.authenticateUser(name)) { Toast.makeText(LoginActivity.this, ""No such UserName"", Toast.LENGTH_SHORT).show(); } else { Toast.makeText(LoginActivity.this, name, Toast.LENGTH_SHORT).show(); Intent intent = new Intent(LoginActivity.this, ChooseListActivity.class); intent.putExtra(""username"", name); startActivity(intent); } } }); } "	1	0	1	1	1	0
"@Override public void importFromExcel(Long parentTaskId, InputStream xls) throws IOException, ModelException { final List<String> numericFieldNames = Arrays.asList(new String[] { ""budget"", ""initiallyConsumed"", ""todo"" }); final TaskDAOCache taskCache = new TaskDAOCache(taskDAO); final String parentTaskCodePath = parentTaskId == null ? """" : taskCache.getCodePath(parentTaskId); XlsImportHelper.visit(xls, new IXLSHandler() { @Override public void handleRow(Map<String, XLSCell> cells) throws ModelException {  if (!cells.containsKey(""code"")) { throw new ModelException(""Sheet must contain a code column""); }  // Process other rows String theParentTaskCodePath = parentTaskCodePath; boolean allColumnsAreNull = true; Task newTask = factory.newTask(); for (String columnName : cells.keySet()) { XLSCell xlsCell = cells.get(columnName); Object value = xlsCell.getValue(); allColumnsAreNull &= (value == null || """".equals(String.valueOf(value).trim())); if (""path"".equals(columnName)) { if (value != null) { allColumnsAreNull = false; String relativePath = String.valueOf(value); if (!relativePath.startsWith(""/"")) { relativePath = ""/"" + relativePath; } theParentTaskCodePath += relativePath; } } else { boolean numeric = numericFieldNames.contains(columnName); setAttributeValue(newTask, xlsCell, numeric); } }  // Create task Task parentTask = taskCache.getByCodePath(theParentTaskCodePath); if (!"""".equals(theParentTaskCodePath) && parentTask == null) { throw new ModelException(""Unknown task path '"" + theParentTaskCodePath + ""'""); } if (!allColumnsAreNull) { createTask(parentTask, newTask); } }  private void setAttributeValue(Task task, XLSCell cell, boolean numeric) throws ModelException { try { Object value = cell.getValue(); if (value != null) { if (numeric) { value = StringHelper.entryToHundredth(String.valueOf(value)); } BeanUtilsBean2.getInstance().setProperty(task, cell.getColumnName(), value); } } catch (StringFormatException e) { throw new XLSModelException(cell.getCell(), ""bad format ("" + e.getMessage() + "")""); } catch (IllegalAccessException e) { throw new XLSModelException(cell.getCell(), ""invalid content ("" + e.getMessage() + "")""); } catch (InvocationTargetException e) { throw new XLSModelException(cell.getCell(), ""invalid content ("" + e.getMessage() + "")""); } }  }); } "	0	0	0	0	0	1
@Override public void onDialogBtnClicked(Intent data, int whichBtn, int result, int requestCode) {  switch (requestCode) { case REQUEST_CODE_BACKUP_DIR_PRINTABLE: ToolsActivity.onBackUpDirForPrintableSelected(getContext(), data, whichBtn, result); break; } } 	0	0	1	0	1	0
public final void setTimeUntillBreakFree(float time) { timeUntillBreakFree = time; } 	0	0	1	1	0	0
public final void setAngryTime(float time) { angryTime = time; } 	0	0	1	1	0	0
private WebElement getConferenceRoom(String name) { ExplicitWait.getWhenVisible(By.xpath(NavigationMap.ROOMS_LIST), 60); List<WebElement> rooms = roomsList.findElements(By .xpath(NavigationMap.ROOMS_LIST_ELEMENT)); for (WebElement room : rooms) { String roomName = room.findElement( By.xpath(NavigationMap.ROOM_NAME)).getText(); if (roomName.equals(name)) { return room; } } return null; } 	0	0	1	0	1	0
"@Security.Authenticated(Authenticators.SellerFilter.class) public Result updateRestaurant(Integer restaurantId) {  Restaurant restaurant = Restaurant.findRestaurantById(restaurantId); Form<Restaurant> restaurantForm1 = restaurantForm.bindFromRequest();  String name = restaurantForm1.field(""name"").value(); String restauranType = restaurantForm1.field(""restauranType"").value(); Integer capacity = Integer.parseInt(restaurantForm1.field(""capacity"").value()); String description = restaurantForm1.field(""description"").value(); String open = restaurantForm1.field(""restOpen"").value(); String close = restaurantForm1.field(""restClose"").value(); String workingHours = open + "" - "" + close;  restaurant.name = name; restaurant.restauranType = restauranType; restaurant.capacity = capacity; restaurant.workingHours = workingHours; restaurant.description = description;  Http.MultipartFormData body1 = request().body().asMultipartFormData(); List<Http.MultipartFormData.FilePart> fileParts = body1.getFiles(); if(fileParts != null) { for (Http.MultipartFormData.FilePart filePart1 : fileParts) { File file = filePart1.getFile(); Image image = Image.create(file, null, null, null, null, restaurantId); restaurant.images.add(image); } }   restaurant.update();  if (session(""userId"") != null) { flash(""edit"",""The hotel was updated!""); return redirect(routes.Hotels.showSellerHotels(Integer.parseInt(session(""userId"")))); } else { return redirect(routes.Application.index()); } } "	0	0	1	0	0	0
public Float getFloatParameter(String paramName) { try { return Float.valueOf(parameters.getParameter(paramName)); } catch (NullPointerException npe) { // Do nothing and return null return null; } } 	0	0	1	0	0	0
"private void setTotalPersons(int totalPersons) { Platform.runLater(() -> this.syncStatus.setText(totalPersons + "" person(s) total"")); } "	0	0	1	1	1	0
protected boolean removePart(PartType pt, int amount){ if (!parts.containsKey(pt)) return false; if (amount <= 0) return false; if (parts.get(pt) < amount) return false; if (parts.get(pt) > amount) parts.put(pt, parts.get(pt) - amount); if (parts.get(pt) == amount) parts.remove(pt); return true; } 	0	0	0	0	0	1
"@Test public void testResequencingWithWrongSequenceSizeAndNumber() throws InterruptedException { QueueChannel discardChannel = new QueueChannel(); Message<?> message1 = createMessage(""123"", ""ABC"", 2, 4, null); this.resequencer.setSendPartialResultOnExpiry(false); this.resequencer.setDiscardChannel(discardChannel); this.resequencer.handleMessage(message1); // this.resequencer.discardBarrier(this.resequencer.barriers.get(""ABC"")); Message<?> reply1 = discardChannel.receive(0); // No message has been received - the message has been rejected. assertNull(reply1); } "	0	0	1	0	1	0
public CoordinateTransform createTransform() throws IllegalArgumentException {  if (instance == null) { instance = validationInstance; } else { instance = createAndInitTransform(); } return instance; } 	1	0	1	0	1	0
private String getProjectVersionRiskProfileUrl(final ProjectVersionView projectVersionItem) throws HubIntegrationException, IllegalArgumentException, EncryptionException { final MetaService metaService = hubServicesFactory.createMetaService(hubServicesFactory.getRestConnection().logger); return metaService.getFirstLink(projectVersionItem, MetaService.RISK_PROFILE_LINK); } 	0	0	1	0	1	0
"@Override public synchronized final void stopService(long millis) { running = false; try { if (keepRunning) { keepRunning = false; interrupt(); quit(); if (0L == millis) { join(); } else { join(millis); } } } catch (InterruptedException e) { //its possible that the thread exits between the lines keepRunning=false and interrupt above log.warn(""Got interrupted while stopping"", e); } } "	0	0	1	1	0	0
"public void onActivityResult(int requestCode, int resultCode, Intent data) { CompoundRequestCode rc = new CompoundRequestCode(requestCode); byte requestImageId = rc.getImageId(); requestCode = rc.getRequestCode();  if (requestImageId != imageId) return;  if (resultCode == Activity.RESULT_OK) { if (requestCode == SELECT_IMAGE || requestCode == TAKE_PICTURE) { Uri selectedImage = imageHolder.getSource();  // we've just taken a photo if (data != null) { selectedImage = fixUri(data.getData()); }  imageHolder.setSource(selectedImage);  if (selectedImage == null) { Log.e(TAG, ""selectedImage is still null even after fixUri""); return; }  // generate cropped path File cacheDir = context.getCacheDir(); File croppedFile = new File(cacheDir, selectedImage.getLastPathSegment() + PREVIEW_FILE_EXTENSION);  imageHolder.setPreview(Uri.fromFile(croppedFile));  cropImage(); } else if (requestCode == CROP_IMAGE) { showImage(); } } } "	1	0	0	0	1	0
"@SuppressWarnings(""unused"") private void prepareAction(MotionEvent event) { switch (currentMode) { case NONE: break; case DRAG: handlingPiece.record(); break; case ZOOM: handlingPiece.record(); break; case MOVE: handlingLine.prepareMove(); needChangePieces.clear(); needChangePieces.addAll(findNeedChangedPieces()); for (PuzzlePiece piece : puzzlePieces) { piece.record(); piece.setPreviousMoveX(downX); piece.setPreviousMoveY(downY); } break; } } "	0	0	1	0	1	0
private void writeParsedFile(Parsable p) throws IOException { Path htmlPath = resolveHtmlPath(p);  if (config.getRenderTags()) { resolveTags(p, htmlPath); }  try (BufferedWriter bw = Files.newBufferedWriter(htmlPath, StandardCharsets.UTF_8)) { parsedContent = Processor.process(p.getContent(), renderConfig); p.setContent(parsedContent); if (p instanceof Post) { indexer.addToIndex(p); } bw.write(renderer.renderParsable(p));  } catch (IOException ex) { Logger.getLogger(Parser.class .getName()).log(Level.SEVERE, null, ex); }  } 	1	0	0	0	1	0
"private void checkNodesServed(List<String> nodeUrns) throws RSExceptionException {  // Check if we serve all node urns by urnPrefix for (String nodeUrn : nodeUrns) { if (!nodeUrn.startsWith(urnPrefix)) { throw createRSExceptionException( ""Not responsible for node URN "" + nodeUrn + "", only serving prefix: "" + urnPrefix ); } }  // Ask Session Management Endpoint of the testbed we're responsible for for it's network description // and check if the individual node urns of the reservation are existing if (servedNodeUrns.get() != null) {  String[] networkNodes; try { networkNodes = servedNodeUrns.get(); } catch (Exception e) { throw createRSExceptionException(e.getMessage()); }  List<String> unservedNodes = new LinkedList<String>();  boolean contained; for (String nodeUrn : nodeUrns) {  contained = false;  for (String networkNode : networkNodes) { if (networkNode.equalsIgnoreCase(nodeUrn)) { contained = true; } }  if (!contained) { unservedNodes.add(nodeUrn); } }   if (unservedNodes.size() > 0) { throw createRSExceptionException(""The node URNs "" + Arrays .toString(unservedNodes.toArray()) + "" are unknown to the reservation system!"" ); }  } else { log.debug(""Not checking session management endpoint for node URN validity as no endpoint is configured.""); }  } "	1	0	1	1	1	0
"@Override public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception { log.info(""client connected: {}"", e); channel = e.getChannel(); super.channelConnected(ctx, e); } "	0	0	1	0	1	0
"@Override public ConstraintBuilder visitTime(ConstraintActivityPreferredTimeSlots c, Object p) { return fillDefault(""time.ActivityHasSomePreferredTimeSlots"", c) .withAssignment(""assignment"", repo.findAssignment(c.activityId)) .withWeek(""time-slots"", transform(c.preferredTimeSlots, x -> slot(repo.findDay(x.getDay()), repo.findHour(x.getHour())))) ;} "	0	0	1	0	0	0
@Test public void unitTest_getAllPlayers_noPacman() {  // Given  // When List<Pacman> pacmanReturnedList = pacmanRepository.getAllPlayers();  // Then assertNull(pacmanReturnedList);  } 	0	0	1	0	1	0
"@Test public void ensureBroadcastIsSent() throws Exception { ctx.broadcast(TestUtils.loadIdentity(""BM-2cSqjfJ8xK6UUn5Rw3RpdGQ9RsDkBhWnS8""), ""Subject"", ""Message""); verify(ctx.internals().getProofOfWorkRepository(), timeout(10000).atLeastOnce()) .putObject(object(BROADCAST), eq(1000L), eq(1000L)); verify(ctx.internals().getProofOfWorkEngine()) .calculateNonce(any(byte[].class), any(byte[].class), any(ProofOfWorkEngine.Callback.class)); verify(ctx.messages(), timeout(10000).atLeastOnce()) .save(MessageMatchers.plaintext(Plaintext.Type.BROADCAST)); } "	1	1	1	1	0	0
"public List<Lectureseries> findFilteredByInstitutionParentInstitutionTermCategoryCreatorSearchString(Long institutionId, Long parentInstitutionId, Long termId, Long categoryId, Long creatorId, String searchQuery, int limit) { int start =com.liferay.portal.kernel.dao.orm.QueryUtil.ALL_POS; int stop =com.liferay.portal.kernel.dao.orm.QueryUtil.ALL_POS; if (limit>0){ start=0; stop = limit; } // Session session = null; try { session = openSession(); String sql = sqlFilterForOpenAccessLectureseries(institutionId, parentInstitutionId, termId, categoryId, creatorId, searchQuery); SQLQuery q = session.createSQLQuery(sql); q.addScalar(""number_"", Type.STRING); q.addScalar(""eventType"", Type.STRING); q.addScalar(""categoryId"", Type.LONG); q.addScalar(""name"", Type.STRING); q.addScalar(""shortDesc"", Type.STRING); q.addScalar(""termId"", Type.LONG); q.addScalar(""language"", Type.STRING); q.addScalar(""facultyName"", Type.STRING); q.addScalar(""lectureseriesId"", Type.STRING); q.addScalar(""password_"", Type.STRING); q.addScalar(""approved"", Type.STRING); q.addScalar(""longDesc"", Type.STRING); q.addScalar(""latestOpenAccessVideoId"", Type.LONG); //additional parameter q.addScalar(""latestVideoUploadDate"", Type.STRING); q.addScalar(""videoCount"", Type.INTEGER); // q.setCacheable(false);  /* *  the filter query has a variable number of parameters and those are used in subqueries (lectureseries/single videos/ all videos if a search is used) *  an array is created with the specific filter values and iterated for every subquery */ QueryPos qPos = QueryPos.getInstance(q); boolean hasSearch = (searchQuery.trim().length()>0); int y=1; if (hasSearch)y=2; // for (int i=y;i<=2;i++){ //for all queries ""lQueryForSearch"" ""lQuery"" and ""vQuery"" if (termId > 0) qPos.add(termId); if (creatorId > 0) qPos.add(creatorId); if (categoryId > 0) qPos.add(categoryId); if (institutionId > 0) qPos.add(institutionId); if (parentInstitutionId > 0) qPos.add(parentInstitutionId); if (searchQuery.trim().length()>0) qPos.add(""%"" + searchQuery + ""%""); }  @SuppressWarnings(""unchecked"") List <Object[]> l =  (List<Object[]>) QueryUtil.list(q, getDialect(),start , stop); return assembleLectureseries(l); } catch (Exception e) { try { throw new SystemException(e); } catch (SystemException se) { se.printStackTrace(); } } finally { closeSession(session); } return null; } "	0	0	1	1	0	0
"public void setName(String name) { this.name = String.format(""%10s"",name); } "	1	0	0	0	1	0
"@Test public void shouldAllowPlayerCreation() { Player bravo = new Player(""Dwayne Bravo""); Right rightArm = new Right(); String pace = ""Medium-Fast""; String variety = null; bravo.bowls(rightArm, pace, variety);  // all empty to begin with Iterable<Player> playaz = playerRepository.findAll(); assertFalse(playaz.iterator().hasNext());  // test save playerRepository.save(bravo); Player db = playerRepository.findOne(bravo.id);  // test basic assertEquals(""Dwayne Bravo"", db.name); // test relationship Bowls bowls = db.bowls; assertNotNull(bowls); assertEquals(""Medium-Fast"",bowls.pace); assertNull(bowls.variety); assertTrue((bowls.arm instanceof Right)); } "	1	0	1	1	1	0
@Autowired public void setServerFactory(final HonoServerFactory serverFactory) { this.serverFactory = serverFactory; } 	0	0	1	1	0	0
@Autowired public void setHonoConfig(final HonoConfigProperties honoConfig) { this.honoConfig = honoConfig; } 	0	0	1	1	0	0
"public Item getItem(String name, String invSection){ ArrayList<Item> list; switch (invSection.toLowerCase()){ case ""items"": list = items; break; case ""spells"": list = spells; break; case ""equip"": list = equip; break; default: return null; } for (Item it : list){ if (it.getName().equals(name)){ return it; } } return null; } "	0	0	1	1	0	0
"public static void syncUserAsync(final Response.Listener<JSONObject> syncListener) { Log.d(API.class, ""API.syncUserAsync""); JsonObjectRequest request = new BackgroundPreprocessRequest(Request.Method.GET, getUrl(FETCH_USER_URL), null, new UserFetchResultListener(new OnFetchUser() { @Override public void onFetch(User user) { Log.d(API.class, ""Fetched "", user.toString(), "" user. and procesing it in background thread.""); List<Rando> dbRandos = RandoDAO.getAllRandos(); if (!(user.randosIn.size() + user.randosOut.size() == dbRandos.size()) || (dbRandos.containsAll(user.randosIn) && dbRandos.containsAll(user.randosOut))){ RandoDAO.clearRandos(); RandoDAO.insertRandos(user.randosIn); RandoDAO.insertRandos(user.randosOut); //TODO: change 0 to real number Notification.sendSyncNotification(0); }  } }), syncListener, new ErrorResponseListener()); VolleySingleton.getInstance().getRequestQueue().add(request); } "	1	1	1	1	0	0
"@Override public void onProcessorChange(List<String> processors) { LOG.info(""ZkJobCoordinator::onProcessorChange - list of processors changed! List size="" + processors.size()); debounceTimer.scheduleAfterDebounceTime(ScheduleAfterDebounceTime.ON_PROCESSOR_CHANGE, debounceTimeMs, () -> doOnProcessorChange(processors)); } "	1	0	1	1	0	0
"@Before public void configureCloud() throws Exception { client = setupCloud().connect(); deletePods(client, labels, false);  String image = ""busybox""; Container c = new ContainerBuilder().withName(image).withImagePullPolicy(""IfNotPresent"").withImage(image) .withCommand(""cat"").withTty(true).build(); String podName = ""test-command-execution-"" + RandomStringUtils.random(5, ""bcdfghjklmnpqrstvwxz0123456789""); Pod pod = client.pods().create(new PodBuilder().withNewMetadata().withName(podName).withLabels(labels) .endMetadata().withNewSpec().withContainers(c).endSpec().build());  System.out.println(""Created pod: "" + pod.getMetadata().getName());  decorator = new ContainerExecDecorator(client, pod.getMetadata().getName(), image, client.getNamespace()); } "	0	0	1	1	0	0
private void animateOut(){ ActionMenuView menuView = getMenuView(); int count = menuView.getChildCount(); Animation slowestAnimation = null; mAnimations.clear(); mAnimations.ensureCapacity(count);  for(int i = 0; i < count; i++){ View child = menuView.getChildAt(i); Animation anim = mAnimator.getOutAnimation(child, i); mAnimations.add(anim); if(anim != null) if(slowestAnimation == null || slowestAnimation.getStartOffset() + slowestAnimation.getDuration() < anim.getStartOffset() + anim.getDuration()) slowestAnimation = anim; }  if(slowestAnimation == null) mOutAnimationEndListener.onAnimationEnd(null); else { slowestAnimation.setAnimationListener(mOutAnimationEndListener);  for(int i = 0; i < count; i++){ Animation anim = mAnimations.get(i); if(anim != null) menuView.getChildAt(i).startAnimation(anim); } }  mAnimations.clear(); } 	0	0	1	0	1	0
private BulkUploadHandler getBulkUploadHandler() { final BulkUploadHandler bulkUploadHandler = new BulkUploadHandler(this, targetManagement, managementUIState, deploymentManagement, uINotification, i18n); bulkUploadHandler.buildLayout(); bulkUploadHandler.addStyleName(SPUIStyleDefinitions.BULK_UPLOAD_BUTTON); return bulkUploadHandler; } 	0	0	1	1	0	0
"private static String getFirefoxDriverDefaultPath() { if (OsUtils.isWindows()) { if (OsUtils.is64Bit() && (Files.exists(Paths.get(""./drivers/geckodriver-windows-64bit"")) || Files.notExists(Paths.get(""./drivers/geckodriver-windows-32bit"")))) { return ""drivers/geckodriver-windows-64bit.exe""; } else { return ""drivers/geckodriver-windows-32bit.exe""; } } else if (OsUtils.isMac()) { if (OsUtils.is64Bit() && (Files.exists(Paths.get(""./drivers/geckodriver-mac-64bit"")) || Files.notExists(Paths.get(""./drivers/geckodriver-mac-32bit"")))) { return ""drivers/geckodriver-mac-64bit""; } else { return ""drivers/geckodriver-mac-32bit""; } } else if (OsUtils.isLinux()) { if (OsUtils.is64Bit() && (Files.exists(Paths.get(""./drivers/geckodriver-linux-64bit"")) || Files.notExists(Paths.get(""./drivers/geckodriver-linux-32bit"")))) { return ""drivers/geckodriver-linux-64bit""; } else { return ""drivers/geckodriver-linux-32bit""; } } return null; } "	0	0	1	0	1	0
"public Calendar[] parseStringIntoCalendarObject(String date1, String date2) throws ParseException { String[] dateArray = new String[2]; dateArray[0] = date1; dateArray[1] = date2; Calendar[] calendarArray = new Calendar[2]; SimpleDateFormat simpleDateFormat = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");  for(int i=0; i < dateArray.length; i++) { Calendar calendar = Calendar.getInstance(); calendar.setTime(simpleDateFormat.parse(dateArray[i])); calendarArray[i] = calendar; } return calendarArray; } "	0	0	1	0	1	0
"@Override public synchronized void receiveSnapshot(GlobalStateObject snapshot) { // this is the snapshot the solver is currently using final GlobalStateObject last = lastSnapshot; if (last == null) { return; } // if something significant happens -> restart solver boolean significantChangeDetected = false; for (int i = 0; i < snapshot.getVehicles().size(); i++) { // when a vehicle has a destination, it has committed to perform a // specific service operation, this has implications for the schedule: // this specific order can no longer be exchanged with other vehicles. // Therefore, when this is detected we want to restart the solver such // that it won't waste time trying to optimize based on outdated // assumptions. Note that we are only interested in events where a // vehicle takes upon a *new* commitment (not when it is finished with // an old commitment). if (snapshot.getVehicles().get(i).getDestination().isPresent() && !last.getVehicles().get(i).getDestination() .equals(snapshot.getVehicles().get(i).getDestination())) { significantChangeDetected = true; break; } } if (significantChangeDetected) { LOGGER.info( ""Vehicle destination commitment change detected -> restart solver.""); start(snapshot); } } "	1	0	0	0	1	0
public void jump() { verticalSpeed += jump * Gdx.graphics.getDeltaTime(); } 	0	0	1	0	1	0
"private IRI generateNewIRI(String type, OWLClassExpression ce) { if( ce.isAnonymous() == false) { OWLClass c = ce.asOWLClass(); String id = StringUtils.replaceOnce(IdStringManager.getId(c.getIRI()), "":"", ""_""); type = type + ""-"" + id; } return IRI.create(""http://geneontology.org/lego/""+type+""-""+UUID.randomUUID().toString());  } "	1	0	1	0	1	0
public static TimecodeBuilder fromSamples(final SampleCount samples, final boolean dropFrame) { return fromFrames(samples.getSamples(), dropFrame, samples.getRate()); } 	1	0	1	1	1	0
public static boolean showOutgoingVideo(int videoState) { return VideoProfile.VideoState.isTransmissionEnabled(videoState); } 	1	0	1	1	1	0
private boolean checkMetadata(DataDocument dataDocument) { return dataDocument.containsKey(LumeerConst.Document.METADATA_PREFIX + LumeerConst.View.VIEW_USER_RIGHTS_KEY); } 	0	0	1	0	1	0
@Override public ItemStack receiveItemStack(IItemRelocator relocator, int side, ItemStack stack, boolean input, boolean simulate) { if (stack == null) return null;  if (!simulate) { this.input = input; int currentAmount = 0; List<Integer> slots = new ArrayList<Integer>(); for (int i = 0; i < CRAFT_MATRIX.getSizeInventory(); i++) { ItemStack craftStack = CRAFT_MATRIX.getStackInSlot(i); if (ItemStackHelper.areItemStacksEqual(stack, craftStack)) { currentAmount += craftStack.stackSize; slots.add(i); } }  if (slots.isEmpty()) return stack;  int needed = (slots.size() * Math.min(stack.getMaxStackSize(), maxCraftStack)) - currentAmount;  if (needed < 0) return stack;  int toMove = Math.min(needed, stack.stackSize); int amountPerStack = (toMove + currentAmount) / slots.size(); int extra = (toMove + currentAmount) % slots.size();  for (int slot : slots) { ItemStack craftStack = CRAFT_MATRIX.getStackInSlot(slot); if (extra > 0) { craftStack.stackSize = amountPerStack + 1; extra--; } else { craftStack.stackSize = amountPerStack; } }  stack.stackSize -= toMove;  if (stack.stackSize == 0) { return null; } } else { for (int i = 0; i < CRAFT_MATRIX.getSizeInventory(); i++) { ItemStack craftStack = CRAFT_MATRIX.getStackInSlot(i); if (ItemStackHelper.areItemStacksEqual(stack, craftStack)) { int toMove = Math.min(craftStack.getMaxStackSize(), Math.min(maxCraftStack - craftStack.stackSize, stack.stackSize)); if (toMove < 0) continue; stack.stackSize -= toMove;  if (stack.stackSize == 0) { return null; } } } } return stack; } 	1	0	1	1	1	0
private String getFactDir() { return tablePath + File.separator + FACT_DIR; } 	0	0	1	1	0	0
"public void delete(int id) throws Exception { connect(); stmt = conn.createStatement(); stmt.executeUpdate(""DELETE INTO public.\""EMPLOYEES\"" WHERE \""ID\"" = "" + id); cleanConnection(); } "	0	0	1	0	1	0
public List<FightPopUpMenuElement> getActors() { List<FightPopUpMenuElement> actors = new ArrayList<FightPopUpMenuElement>(); for (fr.mmyumu.troncgame.fight.popup.FightPopUpMenuIcon popUpMenuIcon : popMenuIcons) { actors.add(popUpMenuIcon); }  actors.add(popUpMenuNotReady); return actors; } 	0	0	1	0	0	0
"public void act() { move(-1);  GoodShip interceptor = getOneIntersectingObject(GoodShip.class); if(interceptor != null) { getWorld().removeObject(this); switch(typeDecide) { case ""Attack"": attackSpeed(); break; case ""Score"": score(); break; case ""Sheild"": shield(); break; case ""Penetrate"": plasmaPenetrate(); break; case ""Mystery"": mysteryBox(); break; case ""Burst"": burst(); break; case ""Movement"": movementSpeed(); break; case ""Life"": extraLife((SpaceWorld)(interceptor.getWorld()),interceptor); break; } } else if(getY() == 799) { getWorld().removeObject(this); } } "	0	0	1	1	0	0
public static boolean isDegenerate(int token1, int token2) { if (token1==token2) return true; if (isIdentifier(token1)&&isIdentifier(token2)) { // if one is a super token, return true; if ((token1==116)||(token2==116)) return true;   // if one is a class, check for class degeneracy if ((token1==100)||(token2==100)) { if ((token1==114)||(token2==114)) { return true; } return false; }  // if one is a fucntion, check for possible degeneracy else if ((token1==111)||(token2==111)) { if ((token1==115)||(token2==115)) { return true; } return false; }  // if one is a variable, check for possible degeneracy else if ((token1==112)||(token2==112)) { if ((token1>113)||(token2==113)) { return true; } return false; }  // At this point, either the two cant be the same OR both are 114 and 115 else if (((token1==114)&&(token2==115))||((token1==115)&&(token2==114))) return true; } return false; } 	0	0	1	0	1	0
private static boolean pinModeMessage(String body) { return body != null && body.length() > 0 && body.charAt(0) == 'p'; } 	1	0	1	1	1	0
public static void severe(String message) { info(message, false); } 	0	0	1	0	1	0
"@Override public void readExtendedInfo(TagCompound info) { if (info.containsKeyAs(""Variant"", TagInt.class)) { setVariant(RabbitType.getTypeByID(info.getAs(""Variant"", TagByte.class).getByteData())); } if (info.getCompoundData().containsKey(""Baby"")) { setBaby(info.getAs(""Baby"", TagByte.class).getBooleanData()); } } "	0	0	1	0	1	0
"@Override public List<TestItem> findTestItemWithInvestigated(String launchId) { Criteria internalIssues = new Criteria().andOperator(where(LAUNCH_REFERENCE).is(launchId), where(ISSUE_TYPE).ne(TestItemIssueType.TO_INVESTIGATE.name()));  Criteria externalIssues = new Criteria().andOperator(where(LAUNCH_REFERENCE).is(launchId), where(ISSUE_TYPE).exists(true), where(ISSUE_TICKET).exists(true));  Query query = query(new Criteria().orOperator(internalIssues, externalIssues));  query.limit(HISTORY_LIMIT); query.fields().include(""name""); query.fields().include(""launchRef""); query.fields().include(""issue""); query.fields().include(""status""); query.fields().include(ID_REFERENCE);  query.fields().include(""start_time"");  return mongoTemplate.find(query, TestItem.class); } "	0	0	0	0	0	1
"private ItemStack getItemStack(final Map<String, Object> item) { final ItemStack is = ItemUtil.searchItem((String) item.get(""type"")); if (is == null) { return null; } if (item.containsKey(""amount"")) { is.setAmount((int) item.get(""amount"")); } if (item.containsKey(""damage"")) { is.setDurability(((Integer) item.get(""damage"")).shortValue()); } MetaItemStack ism = new MetaItemStack(is); for (String s : item.keySet()) { if (s.equalsIgnoreCase(""amount"") || s.equalsIgnoreCase(""type"") || s.equalsIgnoreCase(""damage"")) { continue; } ism.addStringMeta(null, true, s + "":"" + item.get(s).toString().replaceAll("" "", ""_"")); } return ism.getItemStack(); } "	0	0	1	0	1	0
public final void releaseContainer() { mContainer = null; onControlLost(); } 	0	0	1	0	0	0
public static Map<String, Map<RType, Set<com.tencent.tinker.build.aapt.RDotTxtEntry>>> mergePackageRTypeResourceMap(List<PackageRTypeResourceMap> packageRTypeResourceMapList) { Map<String, Map<RType, Set<com.tencent.tinker.build.aapt.RDotTxtEntry>>> packageRTypeResourceMergeMap = new HashMap<String, Map<RType, Set<com.tencent.tinker.build.aapt.RDotTxtEntry>>>(); Map<String, AaptResourceCollector> aaptResourceCollectorMap = new HashMap<String, AaptResourceCollector>(); for (PackageRTypeResourceMap packageRTypeResourceMap : packageRTypeResourceMapList) { String packageName = packageRTypeResourceMap.packageName; Map<RType, Set<com.tencent.tinker.build.aapt.RDotTxtEntry>> rTypeResourceMap = packageRTypeResourceMap.rTypeResourceMap; AaptResourceCollector aaptResourceCollector = null; if (aaptResourceCollectorMap.containsKey(packageName)) { aaptResourceCollector = aaptResourceCollectorMap.get(packageName); } else { aaptResourceCollector = new AaptResourceCollector(); aaptResourceCollectorMap.put(packageName, aaptResourceCollector); } Iterator<Entry<RType, Set<com.tencent.tinker.build.aapt.RDotTxtEntry>>> iterator = rTypeResourceMap.entrySet().iterator(); while (iterator.hasNext()) { Entry<RType, Set<com.tencent.tinker.build.aapt.RDotTxtEntry>> entry = iterator.next(); RType rType = entry.getKey(); Set<com.tencent.tinker.build.aapt.RDotTxtEntry> rDotTxtEntrySet = entry.getValue(); for (com.tencent.tinker.build.aapt.RDotTxtEntry rDotTxtEntry : rDotTxtEntrySet) { if (rDotTxtEntry.idType.equals(IdType.INT)) { aaptResourceCollector.addIntResourceIfNotPresent(rType, rDotTxtEntry.name); } else if (rDotTxtEntry.idType.equals(IdType.INT_ARRAY)) { aaptResourceCollector.addResource(rType, rDotTxtEntry.idType, rDotTxtEntry.name, rDotTxtEntry.idValue); } } } } Iterator<Entry<String, AaptResourceCollector>> iterator = aaptResourceCollectorMap.entrySet().iterator(); while (iterator.hasNext()) { Entry<String, AaptResourceCollector> entry = iterator.next(); packageRTypeResourceMergeMap.put(entry.getKey(), entry.getValue().getRTypeResourceMap()); } return packageRTypeResourceMergeMap; } 	0	0	0	0	0	1
"@Override public synchronized IMetaverseNode analyze( IComponentDescriptor descriptor, IDocument document ) throws MetaverseAnalyzerException {  validateState( document );  Object repoObject = document.getContent();  JobMeta jobMeta = null; if ( repoObject instanceof String ) {  // hydrate the job try { String content = (String) repoObject; ByteArrayInputStream xmlStream = new ByteArrayInputStream( content.getBytes() ); jobMeta = new JobMeta( xmlStream, null, null ); } catch ( KettleXMLException e ) { throw new MetaverseAnalyzerException( e ); }  } else if ( repoObject instanceof JobMeta ) { jobMeta = (JobMeta) repoObject; }  // construct a dummy job based on our JobMeta so we get out VariableSpace set properly jobMeta.setFilename( document.getStringID() ); Job j = new Job( null, jobMeta ); j.setInternalKettleVariables( jobMeta );  IComponentDescriptor documentDescriptor = new MetaverseComponentDescriptor( document.getStringID(), DictionaryConst.NODE_TYPE_JOB, new Namespace( descriptor.getLogicalId() ), descriptor.getContext() );  // Create a metaverse node and start filling in details IMetaverseNode node = metaverseObjectFactory.createNodeObject( document.getNamespace(), jobMeta.getName(), DictionaryConst.NODE_TYPE_JOB ); node.setLogicalIdGenerator( DictionaryConst.LOGICAL_ID_GENERATOR_DOCUMENT );  // pull out the standard fields String description = jobMeta.getDescription(); if ( description != null ) { node.setProperty( DictionaryConst.PROPERTY_DESCRIPTION, description ); }  String extendedDescription = jobMeta.getExtendedDescription(); if ( extendedDescription != null ) { node.setProperty( ""extendedDescription"", extendedDescription ); }  Date createdDate = jobMeta.getCreatedDate(); if ( createdDate != null ) { node.setProperty( DictionaryConst.PROPERTY_CREATED, Long.toString( createdDate.getTime() ) ); }  String createdUser = jobMeta.getCreatedUser(); if ( createdUser != null ) { node.setProperty( DictionaryConst.PROPERTY_CREATED_BY, createdUser ); }  Date lastModifiedDate = jobMeta.getModifiedDate(); if ( lastModifiedDate != null ) { node.setProperty( DictionaryConst.PROPERTY_LAST_MODIFIED, Long.toString( lastModifiedDate.getTime() ) ); }  String lastModifiedUser = jobMeta.getModifiedUser(); if ( lastModifiedUser != null ) { node.setProperty( DictionaryConst.PROPERTY_LAST_MODIFIED_BY, lastModifiedUser ); }  String version = jobMeta.getJobversion(); if ( version != null ) { node.setProperty( DictionaryConst.PROPERTY_ARTIFACT_VERSION, version ); }  String status = Messages.getString( ""INFO.JobOrTrans.Status_"" + Integer.toString( jobMeta.getJobstatus() ) ); if ( status != null && !status.startsWith( ""!"" ) ) { node.setProperty( DictionaryConst.PROPERTY_STATUS, status ); }  node.setProperty( DictionaryConst.PROPERTY_PATH, document.getProperty( DictionaryConst.PROPERTY_PATH ) );  // Process job parameters String[] parameters = jobMeta.listParameters(); if ( parameters != null ) { for ( String parameter : parameters ) { try { // Determine parameter properties and add them to a map, then the map to the list String defaultParameterValue = jobMeta.getParameterDefault( parameter ); String parameterValue = jobMeta.getParameterValue( parameter ); String parameterDescription = jobMeta.getParameterDescription( parameter ); PropertiesHolder paramProperties = new PropertiesHolder(); paramProperties.setProperty( ""defaultValue"", defaultParameterValue ); paramProperties.setProperty( ""value"", parameterValue ); paramProperties.setProperty( ""description"", parameterDescription ); node.setProperty( ""parameter_"" + parameter, paramProperties.toString() ); } catch ( UnknownParamException upe ) { // This shouldn't happen as we're using the list provided by the meta throw new MetaverseAnalyzerException( upe ); } } } // handle the entries for ( int i = 0; i < jobMeta.nrJobEntries(); i++ ) { JobEntryCopy entry = jobMeta.getJobEntry( i ); try { entry.getEntry().setParentJob( new Job( null, jobMeta ) );  if ( entry != null ) { IMetaverseNode jobEntryNode = null; JobEntryInterface jobEntryInterface = entry.getEntry();  IComponentDescriptor entryDescriptor = new MetaverseComponentDescriptor( entry.getName(), DictionaryConst.NODE_TYPE_JOB_ENTRY, node, descriptor.getContext() );  Set<IJobEntryAnalyzer> jobEntryAnalyzers = getJobEntryAnalyzers( jobEntryInterface ); if ( jobEntryAnalyzers != null && !jobEntryAnalyzers.isEmpty() ) { for ( IJobEntryAnalyzer jobEntryAnalyzer : jobEntryAnalyzers ) { jobEntryAnalyzer.setMetaverseBuilder( metaverseBuilder ); jobEntryNode = (IMetaverseNode) jobEntryAnalyzer.analyze( entryDescriptor, entry.getEntry() ); } } else { GenericJobEntryMetaAnalyzer defaultJobEntryAnalyzer = new GenericJobEntryMetaAnalyzer(); defaultJobEntryAnalyzer.setMetaverseBuilder( metaverseBuilder ); jobEntryNode = (IMetaverseNode) defaultJobEntryAnalyzer.analyze( entryDescriptor, jobEntryInterface ); } if ( jobEntryNode != null ) { metaverseBuilder.addLink( node, DictionaryConst.LINK_CONTAINS, jobEntryNode ); } } } catch ( MetaverseAnalyzerException mae ) { //Don't throw an exception, just log and carry on log.error( ""Error processing "" + entry.getName(), mae ); } catch ( Exception e ) { //Don't throw an exception, just log and carry on log.error( ""Error processing "" + entry.getName(), e ); } }  // Model the hops between steps int numHops = jobMeta.nrJobHops(); for ( int i = 0; i < numHops; i++ ) { JobHopMeta hop = jobMeta.getJobHop( i ); JobEntryCopy fromEntry = hop.getFromEntry(); JobEntryCopy toEntry = hop.getToEntry(); INamespace childNs = new Namespace( node.getLogicalId() );  // process legitimate hops if ( fromEntry != null && toEntry != null ) { IMetaverseNode fromEntryNode = metaverseObjectFactory.createNodeObject( childNs, fromEntry.getName(), DictionaryConst.NODE_TYPE_JOB_ENTRY );  IMetaverseNode toEntryNode = metaverseObjectFactory.createNodeObject( childNs, toEntry.getName(), DictionaryConst.NODE_TYPE_JOB_ENTRY );  metaverseBuilder.addLink( fromEntryNode, DictionaryConst.LINK_HOPSTO, toEntryNode ); } }  metaverseBuilder.addNode( node ); addParentLink( documentDescriptor, node ); return node; } "	1	0	1	0	0	0
"@Override public void unsubscribe(final Tuple2<RemoteIdentifier, Class<? extends T>> token) { LOG.log(Level.FINER, ""Unsubscribe: {0} tuple {1},{2}"", new Object[] {name, token.getT1(), token.getT2().getName()}); tupleToHandlerMap.remove(token); } "	0	0	0	0	0	1
private void setupTeInv() { IItemHandler itemHandler = this.tile.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, null);  //Input Slot if (tile instanceof TileVendor) { int xpos = 0; if (tile.getField(2) == 0) xpos = 152; if (tile.getField(2) == 1) xpos = -1000; addSlotToContainer(new SlotCustomizable(itemHandler, 0, xpos, 9, specialSlotItems)); } if (tile instanceof TileSeller) { if (tile.getField(2) == 0) addSlotToContainer(new SlotItemHandler(itemHandler, 0, 152, 9)); if (tile.getField(2) == 1) addSlotToContainer(new SlotCustomizable(itemHandler, 0, 152, 9, specialSlotItems)); }  final int SLOT_X_SPACING = 18; final int SLOT_Y_SPACING = 18; final int TE_INV_XPOS = 44; final int TE_INV_YPOS = 32;  //Main Slots for (int y = 0; y < TE_VEND_COLUMN_COUNT; y++) { for (int x = 0; x < TE_VEND_ROW_COUNT; x++) { int slotNum = 1 + y * TE_VEND_ROW_COUNT + x; int xpos = TE_INV_XPOS + x * SLOT_X_SPACING; int ypos = TE_INV_YPOS + y * SLOT_Y_SPACING; addSlotToContainer(new SlotItemHandler(itemHandler, slotNum, xpos, ypos)); } }  //Buffer Slots for (int x = 0; x < TE_BUFFER_TOTAL_COUNT; x++) { int slotNum = TE_VEND_MAIN_TOTAL_COUNT + 1 + x; int xpos = 0; if (tile.getField(2) == 1) xpos = 15; if (tile.getField(2) == 0) xpos = -1000; int ypos = 32 + x * 18; if (tile instanceof TileVendor) addSlotToContainer(new SlotCustomizable(itemHandler, slotNum, xpos, ypos, specialSlotItems)); if (tile instanceof TileSeller) addSlotToContainer(new SlotItemHandler(itemHandler, slotNum, xpos, ypos)); } } 	0	0	0	0	0	1
public void calculateFlexAndOvertime() { float flex = getTotalHours() < 40 ? 40 - getTotalHours() : 0; float over = getTotalHours() > 40 ? getTotalHours() - 40 : 0;  setFlextime(flex); setOvertime(over); } 	1	0	1	1	1	0
"@Override public TokenResponse authenticate( @Nonnull GoogleOauthAccessRequestInfo request ) { LOGGER.debug(""authenticate called: request={}"", request); requireNonNull(request, ""request cannot be null"");  String email;  String clientId = configService.getPublicConfig().getGoogleOauthClientId(); String clientSecret = configService.getPrivateConfig().getGoogleOauthSecret();  if (!clientId.equals(request.getClientId())) { throw new ClientIdMismatchException( request.getClientId(), clientId ); }  LOGGER.debug( ""Calling into google: clientId={}, code={}, redirectUrl={}"", request.getClientId(), request.getCode(), request.getRedirectUri() );  GoogleResponseData googleResponseData = googleOauthService.getUserDataFromGoogle( request.getClientId(), clientSecret, request.getCode(), request.getRedirectUri() );  try { GoogleIdToken idToken = googleResponseData.getGoogleOauthToken() .parseIdToken();  email = idToken.getPayload() .getEmail();  LOGGER.debug(""successfully called into google: email={}"", email);  } catch (IOException e) { throw new GoogleOauthException(""Failed to parse google id token!"", e); }  HmhbUser user = userService.saveWithGoogleData( email, googleResponseData.getGooglePlusProfile() );  TokenResponse tokenResponse = new TokenResponse( jwtAuthenticationService.generateJwtToken(user) );  LOGGER.info(""tokenResponse: {}"", tokenResponse); return tokenResponse; } "	0	0	1	0	1	0
public AddressBookBuilder withActivity(Activity activity) throws UniquePersonList.DuplicatePersonException { activityManager.addActivity(activity); return this; } 	0	0	1	0	0	0
public String executeAndGetResult() throws ProcessExecutionException { return this.executor.executeAndGetResult(); } 	0	0	1	1	1	0
public Bag<Component> getComponentsFor ( final int eid, final Bag<Component> fillBag ) { final ComponentMapper<Component>[] cmpBags = componentsByType; final FixedBitIterator mbi = bitIterator;  mbi.setBits( componentBits[eid] );  for ( int i = mbi.nextSetBit(); i >= 0; i = mbi.nextSetBit() ) { fillBag.add( cmpBags[i].getUnsafe( eid ) ); }  return fillBag; } 	1	0	0	0	1	0
"public static void initialize(PlayerConnection connection) { GameEventHandler.connection = connection; GameEventHandler.thread = new Thread(new Runnable() {  @Override public void run() {  do { Message received = GameEventHandler.connection.receive(); System.out.println(received.getMessageCode());  if (received != null) { //GameUI gameUIpanel = (GameUI) MunchkinClient.getPanel(""GameUI""); LobbyUI lobbyPanel = (LobbyUI) MunchkinClient.getPanel(""LobbyUI""); switch (received.getMessageCode()) { case Message.CLT_CHAT_MESSAGE: ChatMessage chatMessage = (ChatMessage) received; lobbyPanel.getChatArea().appendLine(chatMessage.getSender() + "": "" + chatMessage.getMessage()); break; case Message.PLAY_CARD: PlayCardMessage playCardMessage = (PlayCardMessage) received; // Create new HandCard from its name ClientCard carddrawn = new ClientCard(playCardMessage.getCardName()); switch (playCardMessage.getAction()) { case SHOW: Data.getTable().addCard(carddrawn.getTitle()); break; case DRAW: Data.getHand().addCard(carddrawn.getTitle()); break; case DISCARD: Data.getDiscardDeck().getCards().set(0,carddrawn.getName()); break; case REMOVE: Data.getHand().removeCard(carddrawn.getTitle()); break; } break; case Message.CLT_READY_STATUS: ReadyLobbyMessage readyPlayerList = (ReadyLobbyMessage) received; players = readyPlayerList.getPlayers(); readyStatus = readyPlayerList.getStatus(); lobbyPanel.showPlayer(); break;  case Message.POPUP: PopUpMessage popup = (PopUpMessage) received;  // Show popup dialog and wait for response PopUpDialog dialog = new PopUpDialog(popup.getText(), popup.getButton1(), popup.getButton2(), popup.getTimeout_ms(), popup.getMin_val(), popup.getMax_val()); dialog.setVisible(true);  // Send response message based on user's choice if (dialog.wasTimedOut()) { sendMessage(new PopUpResultMessage(connection.getConnectedPlayerName())); } else { sendMessage(new PopUpResultMessage(dialog.wasButton1Pressed(), dialog.wasButton2Pressed(), dialog.getSpinnerValue(), connection.getConnectedPlayerName())); } break;  case Message.PLAYER_FULL_STATS: PlayerFullStatsMessage statistics = (PlayerFullStatsMessage) received; Data.getPlayer(statistics.getPlayerName()).setStats(statistics.getHandSize(), statistics.getClassCard(), statistics.getRaceCard(), statistics.getCombatLevel(), statistics.getLevel());  break; case Message.PLAYER_EQUIPMENT: PlayerEquipmentMessage equip = (PlayerEquipmentMessage) received; Data.getPlayer(equip.getPlayerName()).setEquipments(equip.getHead().getTitle(), equip.getHand1().getTitle(), equip.getHand2().getTitle(), equip.getBody().getTitle(), equip.getFeet().getTitle()); break; case Message.STATE_UPDATE: StateUpdateMessage update = (StateUpdateMessage) received; if (update.getState().equals(""begin"")) { MunchkinClient.getPanels().put(""GameUI"", new GameUI(MunchkinClient.getWindow(),gameUiBackground)); MunchkinClient.getWindow().SetActivePanel(MunchkinClient.getPanel(""GameUI"")); break;  } } } } while (GameEventHandler.connection.isConnected());  }  }); } "	0	0	0	0	0	1
"public JSONArray sync_phone_to_server() throws JSONException { long lastTripEndTs = getTsOfLastTransition(); Log.d(cachedCtx, TAG, ""Last trip end was at ""+lastTripEndTs);  if (lastTripEndTs < 0) { // We don't have a completed trip, so we don't want to push anything yet. return new JSONArray(); }  String selectQuery = ""SELECT * from "" + TABLE_USER_CACHE + "" WHERE "" + KEY_TYPE + "" = '""+ MESSAGE_TYPE + ""' OR "" + KEY_TYPE + "" = '"" + RW_DOCUMENT_TYPE + ""'"" + ""' OR "" + KEY_TYPE + "" = '"" + SENSOR_DATA_TYPE + ""'"" + "" AND "" + KEY_WRITE_TS + "" < "" + lastTripEndTs + "" ORDER BY ""+KEY_WRITE_TS;  SQLiteDatabase db = this.getReadableDatabase(); Cursor queryVal = db.rawQuery(selectQuery, null);  int resultCount = queryVal.getCount(); JSONArray entryArray = new JSONArray();  // Returns fals if the cursor is empty // in which case we return the empty JSONArray, to be consistent. if (queryVal.moveToFirst()) { for (int i = 0; i < resultCount; i++) { Metadata md = new Metadata(); md.setWrite_ts(queryVal.getLong(0)); md.setRead_ts(queryVal.getLong(1)); md.setTimeZone(queryVal.getString(2)); md.setType(queryVal.getString(3)); md.setKey(queryVal.getString(4)); md.setPlugin(queryVal.getString(5)); String dataStr = queryVal.getString(6); /* * I used to have a GSON wrapper here called ""Entry"" which encapsulated the metadata * and the data. However, that didn't really work because it was unclear what type * the data was. * * If we assumed that the data was a string, then GSON would escape and encode it * during serialization (e.g. {""data"":""{\""mProvider\"":\""TEST\"",\""mResults\"":[0.0,0.0],\""mAccuracy\"":5.5, * or {""data"":""[\u0027accelerometer\u0027, \u0027gyrometer\u0027, \u0027linear_accelerometer\u0027] * , and expect an encoded string during deserialization. * * This is not consistent with the server, which returns actual JSON in the data, not a string. * * We could attempt to overcome this by assuming that the data is an object, not a string. But in that case, * it is not clear how it would be deserialized, since we wouldn't know what class it was. * * So we are going to return a raw JSON object here instead of a GSONed object. That will also allow us to * put it into the right wrapper object (phone_to_server or server_to_phone). */ JSONObject entry = new JSONObject(); entry.put(METADATA_TAG, new JSONObject(new Gson().toJson(md))); entry.put(DATA_TAG, new JSONObject(dataStr)); Log.d(cachedCtx, TAG, ""For row "" + i + "", about to send string "" + entry.toString()); entryArray.put(entry); queryVal.moveToNext(); } } db.close(); return entryArray; } "	0	0	1	1	0	0
synchronized void sendMessage(K subgraphID, M message) { sgMsgSend++; Message<K, M> msg = new Message<K, M>(Message.MessageType.CUSTOM_MESSAGE, subgraphID, message); ControlMessage controlInfo = new ControlMessage(); controlInfo.setTransmissionType(IControlMessage.TransmissionType.NORMAL); msg.setControlInfo(controlInfo); sendMessage(peer.getPeerName(subgraphPartitionMap.get(subgraphID)), msg); } 	0	0	1	0	0	0
private void invalidate(final WaitingOp waitingOp) throws Exception { nodeEngine.getOperationService().executeOperation(waitingOp); } 	0	0	0	1	0	0
"@Override protected String doInBackground(String... params) { url = getUrl(); try { // Setup HttpURLConnection class to send and receive data from php and mysql conn = (HttpURLConnection) url.openConnection(); conn.setReadTimeout(15000); conn.setConnectTimeout(15000); conn.setRequestMethod(getPostGet());  // setDoInput and setDoOutput method depict handling of both send and receive conn.setDoInput(true); conn.setDoOutput(true);  // Append parameters to URL Uri.Builder builder = getUriBuider(params); String query = builder.build().getEncodedQuery();  // Open connection for sending data OutputStream os = conn.getOutputStream(); BufferedWriter writer = new BufferedWriter( new OutputStreamWriter(os, ""UTF-8"")); writer.write(query); writer.flush(); writer.close(); os.close(); conn.connect();  } catch (IOException e1) { e1.printStackTrace(); toast(); return ""exception""; }  try {  int response_code = conn.getResponseCode();  // Check if successful connection made if (response_code == HttpURLConnection.HTTP_OK) {  // Read data sent from server InputStream input = conn.getInputStream(); BufferedReader reader = new BufferedReader(new InputStreamReader(input)); StringBuilder result = new StringBuilder(); String line;  while ((line = reader.readLine()) != null) { result.append(line); }  return result.toString(); // Pass data to onPostExecute method  } else { toast(); return ""connection failure""; }  } catch (IOException e) { e.printStackTrace(); toast(); return ""connection failure""; } finally { conn.disconnect(); }  } "	0	0	1	0	1	0
private void addMiscellaneousTabTestCases() { add(Blocks.beacon, 24773); add(Items.bucket, 768); add(Items.water_bucket, 769); add(Items.lava_bucket, 832); add(Items.snowball, 0.25); add(Items.milk_bucket, 832); add(Items.paper, 32); add(Items.book, 160); add(Items.slime_ball, 24); add(Items.bone, 24); add(Items.ender_pearl, 1024); add(Items.ender_eye, 1792); add(new ItemStack(Items.spawn_egg, 1, 50), null); add(new ItemStack(Items.spawn_egg, 1, 51), null); add(new ItemStack(Items.spawn_egg, 1, 52), null); add(new ItemStack(Items.spawn_egg, 1, 54), null); add(new ItemStack(Items.spawn_egg, 1, 55), null); add(new ItemStack(Items.spawn_egg, 1, 56), null); add(new ItemStack(Items.spawn_egg, 1, 57), null); add(new ItemStack(Items.spawn_egg, 1, 58), null); add(new ItemStack(Items.spawn_egg, 1, 59), null); add(new ItemStack(Items.spawn_egg, 1, 60), null); add(new ItemStack(Items.spawn_egg, 1, 61), null); add(new ItemStack(Items.spawn_egg, 1, 62), null); add(new ItemStack(Items.spawn_egg, 1, 65), null); add(new ItemStack(Items.spawn_egg, 1, 66), null); add(new ItemStack(Items.spawn_egg, 1, 90), null); add(new ItemStack(Items.spawn_egg, 1, 91), null); add(new ItemStack(Items.spawn_egg, 1, 92), null); add(new ItemStack(Items.spawn_egg, 1, 93), null); add(new ItemStack(Items.spawn_egg, 1, 94), null); add(new ItemStack(Items.spawn_egg, 1, 95), null); add(new ItemStack(Items.spawn_egg, 1, 96), null); add(new ItemStack(Items.spawn_egg, 1, 98), null); add(new ItemStack(Items.spawn_egg, 1, 100), null); add(new ItemStack(Items.spawn_egg, 1, 120), null); add(new ItemStack(Items.spawn_egg, 1, 97), null); add(new ItemStack(Items.spawn_egg, 1, 99), null); add(Items.experience_bottle, null); add(Items.fire_charge, 330.666); add(Items.writable_book, 216); add(Items.map, 1312); add(Items.firework_charge, null); add(Items.iron_horse_armor, null); add(Items.golden_horse_armor, null); add(Items.diamond_horse_armor, null); add(Items.record_13, 2048); add(Items.record_cat, 2048); add(Items.record_blocks, 2048); add(Items.record_chirp, 2048); add(Items.record_far, 2048); add(Items.record_mellohi, 2048); add(Items.record_stal, 2048); add(Items.record_strad, 2048); add(Items.record_ward, 2048); add(Items.record_11, 2048); add(Items.record_wait, 2048); } 	0	0	0	0	0	1
private void addFoodstuffsTabTestCases() { add(Items.apple, 24); add(Items.mushroom_stew, 68); add(Items.bread, 72); add(Items.porkchop, 24); add(Items.cooked_porkchop, 24); add(new ItemStack(Items.golden_apple, 1, 0), 16408); add(new ItemStack(Items.golden_apple, 1, 1), 147480); add(new ItemStack(Items.fish, 1, 0), 24); add(new ItemStack(Items.fish, 1, 1), 24); add(new ItemStack(Items.fish, 1, 2), 24); add(new ItemStack(Items.fish, 1, 3), 24); add(new ItemStack(Items.cooked_fished, 1, 0), 24); add(new ItemStack(Items.cooked_fished, 1, 1), 24); add(Items.cake, 360); add(Items.cookie, 7); add(Items.melon, 16); add(Items.beef, 24); add(Items.cooked_beef, 24); add(Items.chicken, 24); add(Items.cooked_chicken, 24); add(Items.rotten_flesh, 24); add(Items.spider_eye, 128); add(Items.carrot, 24); add(Items.potato, 24); add(Items.baked_potato, 24); add(Items.poisonous_potato, 24); add(Items.golden_carrot, 1844.444); add(Items.pumpkin_pie, 208); } 	0	0	0	0	0	1
"public void validatorMaxLength(String fieldName, String fieldValue, int maxLength) throws ValidationException { if (fieldValue == null || fieldValue.length() >= maxLength) { throw new ValidationException(fieldName, String.format(""This field must not exceed the %d chars."", maxLength)); } } "	0	0	0	1	1	0
protected void addExperimentListener(IExperimentListener listener) { experimentListeners.add(listener); } 	0	0	0	1	0	0
"@SuppressWarnings(""deprecation"") @EventHandler(priority = EventPriority.LOW, ignoreCancelled=true) public void onPaperMapUse(final PlayerInteractEvent event) { //getLogger().info(""DEBUG: paper map "" + event.getEventName()); if (Settings.pairLinking) { // Not used if pair linking is used return; } if (!event.hasItem()) { return; } if (!event.getItem().getType().equals(Material.PAPER) && !event.getItem().getType().equals(Material.MAP)) { return; } if (!event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) { return; } World world = event.getClickedBlock().getWorld(); if (!world.equals(getBeaconzWorld())) { //getLogger().info(""DEBUG: not right world""); return; } Player player = event.getPlayer(); // Ignore player in lobby if (getGameMgr().isPlayerInLobby(player)) { return; } // Get the player's team Team team = getGameMgr().getPlayerTeam(player); if (team == null) { if (player.isOp()) { return; } else { event.setCancelled(true); return; } } // Apply triangle effects applyEffects(player, getRegister().getTriangle(player.getLocation().getBlockX(), player.getLocation().getBlockZ()), team);  // Check if the block is a beacon or the surrounding pyramid Block b = event.getClickedBlock(); final BeaconObj beacon = getRegister().getBeacon(b); if (beacon == null) { //getLogger().info(""DEBUG: not a beacon""); return; } // Check the team if (beacon.getOwnership() == null || !beacon.getOwnership().equals(team)) { player.sendMessage(ChatColor.RED + ""You must capture this beacon first!""); event.setCancelled(true); return; } if (event.getItem().getType().equals(Material.PAPER)) { // Make a map! player.sendMessage(ChatColor.GREEN + ""You made a beacon map! Take it to another beacon to link them up!""); int amount = event.getItem().getAmount() - 1; MapView map = Bukkit.createMap(getBeaconzWorld()); //map.setWorld(getBeaconzWorld()); map.setCenterX(beacon.getX()); map.setCenterZ(beacon.getZ()); map.getRenderers().clear(); map.addRenderer(new BeaconMap(getBeaconzPlugin())); map.addRenderer(new TerritoryMapRenderer(getBeaconzPlugin())); event.getItem().setType(Material.MAP); event.getItem().setAmount(1); event.getItem().setDurability(map.getId()); // Each map is unique and the durability defines the map ID, register it getRegister().addBeaconMap(map.getId(), beacon); //getLogger().info(""DEBUG: beacon id = "" + beacon.getId()); if (amount > 0) { HashMap<Integer, ItemStack> leftOver = player.getInventory().addItem(new ItemStack(Material.PAPER, amount)); if (!leftOver.isEmpty()) { for (ItemStack stack: leftOver.values()) { player.getLocation().getWorld().dropItemNaturally(player.getLocation(), stack); } } } ItemMeta meta = event.getItem().getItemMeta(); meta.setDisplayName(""Beacon map for "" + beacon.getName()); event.getItem().setItemMeta(meta); // Stop the beacon inventory opening event.setCancelled(true); return; } else { // Map! BeaconObj mappedBeacon = getRegister().getBeaconMap(event.getItem().getDurability()); if (mappedBeacon == null) { // This is not a beacon map return; } event.setCancelled(true); if (Settings.linkDistance >= 0 && Settings.expDistance > 0) { // Check if the player has sufficient experience to link the beacons double distance = beacon.getLocation().distance(mappedBeacon.getLocation()); distance -= Settings.linkDistance; if (distance > 0) { if (!testForExp(player, (int)(distance/Settings.expDistance))) { player.sendMessage(ChatColor.RED + ""You do not have enough experience to link to this beacon!""); player.sendMessage(ChatColor.RED + ""You can link up to "" + (int)(Settings.expDistance * player.getTotalExperience()) + "" blocks away.""); player.sendMessage(ChatColor.RED + ""This beacon is "" + (int)distance + "" blocks away.""); return; } } } if (linkBeacons(player, team, beacon, mappedBeacon)) { player.sendMessage(ChatColor.GREEN + ""The map disintegrates!""); player.setItemInHand(null); } } } "	0	0	1	1	0	0
public static String fixupUrl(String uri) { if (TextUtils.isEmpty(uri)) return uri; return nativeFixupUrl(uri, null); } 	0	0	1	1	1	0
@Override public void putLayerContent(final String layerId, final Payload content) throws IOException, InvalidContentException { validateLayerId(layerId); try (TempStreamSupplier streamSupplier = new TempStreamSupplier(content.openInputStream())) { doPutLayerContent(layerId, streamSupplier, content); } } 	0	0	1	1	0	0
"public String toStringSimple() { return getName() + "": State="" + getCurrentState().getName() + "" mApnSetting="" + mApnSetting + "" RefCount="" + mApnContexts.size() + "" mCid="" + mCid + "" mCreateTime="" + mCreateTime + "" mLastastFailTime="" + mLastFailTime + "" mLastFailCause="" + mLastFailCause + "" mTag="" + mTag + "" mLinkProperties="" + mLinkProperties + "" linkCapabilities="" + makeNetworkCapabilities() + "" mRestrictedNetworkOverride="" + mRestrictedNetworkOverride; } "	0	0	1	0	0	0
"private void checkMedicalDateHistory(final View view) { showProgressDialog(); NetworkSuccessListener<JSONObject> successCallBackListener = new NetworkSuccessListener<JSONObject>() { @Override public void onResponse(JSONObject response) { Log.d(""Success response of Health"", response.toString()); hideProgressDialog(); try { if (response.get(""health_last_update"") instanceof Number) { long num = response.getLong(""health_last_update""); } else if (response.get(""health_last_update"") instanceof CharSequence) { if (response.getString(""health_last_update"").equals("""")) { } } if (response.getString(""health_last_update"").length() == 0) { isNewUser = true; } } catch (JSONException e) { e.printStackTrace(); isNewUser = true; } checkMedicalAggregation(view); } }; NetworkErrorListener errorListener = new NetworkErrorListener() { @Override public void onErrorResponse(VolleyError error) { medicalCommonErrorResponseHandler(error); } }; MedicalHistoryLastUpdateServices services = new MedicalHistoryLastUpdateServices(getActivity(), getProgressDialog()); services.getMedicalHistoryLastUpdateRequest(successCallBackListener, errorListener); } "	0	0	1	1	1	0
"public String doPost(String path, Object body, String accessToken) throws IOException { return request(path, ""POST"", body, MediaType.APPLICATION_JSON, accessToken); } "	0	0	1	0	1	0
@VisibleForTesting protected HttpURLConnection getConnectionWithoutProxy(String path) throws IOException { return (HttpURLConnection)new URL(path).openConnection(Proxy.NO_PROXY); } 	0	0	1	0	0	0
"public void doDelete(String path, String accessToken) throws IOException { request(path, ""DELETE"", null, null, accessToken); } "	0	0	1	0	1	0
@Override public State apply(Proof.Delta.Set existingTruths, Proof.State head, Formula newTruth) throws ResolutionError { // ArrayList<Formula> dependencies = new ArrayList<>(); Formula constructed = (Formula) construct(existingTruths, head, newTruth, newTruth, dependencies); if(constructed != newTruth) { Formula[] deps = dependencies.toArray(new Formula[dependencies.size()]); // NOTE: we need to allocated the constructed item here so that we // can use it within the substituteAgainstEquality() function below // if it's an equality. constructed = head.allocate(constructed); head = head.subsume(this, newTruth, constructed, deps); } // If the construct truth is still an equality then we need to apply // that through all existing terms. if (constructed instanceof Formula.Equality && ((Formula.Equality) constructed).getSign()) { head = substituteAgainstEquality(existingTruths, head, (Formula.Equality) constructed); } // return head; } 	0	0	1	0	1	0
private void initializeColorPickers() { for(int i = 0; i < NUMBER_OF_COLORS; i++) { this.colorPickers[i] = new ColorPicker(); } } 	0	0	0	1	0	0
"private String getStudentNumber(String token) { Claims claims = jsonWebToken.getClaimsFromToken(token); HashMap studentMap; if (claims != null) { if (claims.get(""role"").equals(""student"")) { studentMap = (HashMap) claims.get(""user""); return (String) studentMap.get(""studentNumber""); } } return ""0""; } "	0	0	0	0	0	1
public String getStore() throws Exception { String result = null; if (Build.VERSION.SDK_INT >= 3) { result = context.getPackageManager().getInstallerPackageName(context.getPackageName()); } return checkValidData(result); } 	0	0	1	0	0	0
public String getSerial() throws Exception { return checkValidData(Build.SERIAL); } 	0	0	1	0	0	0
public String getPackageName() throws Exception { return checkValidData(context.getPackageName()); } 	0	0	1	0	0	0
public String getOSVersion() throws Exception { return checkValidData(Build.VERSION.RELEASE); } 	0	0	1	0	0	0
public String getBuildID() throws Exception { return checkValidData(Build.ID); } 	0	0	1	0	0	0
public String getCarrier() throws Exception { String result = null; if (tm != null && tm.getPhoneType() != TelephonyManager.PHONE_TYPE_CDMA) { result = tm.getNetworkOperatorName().toLowerCase(Locale.getDefault()); } return checkValidData(handleIllegalCharacterInResult(result)); } 	0	0	1	0	0	0
"private void pullNotes() throws Exception{ NotesLog.d(""""); NoteFilter noteFilter = new NoteFilter(); noteFilter.setOrder(NoteSortOrder.UPDATED.getValue()); String guid = mPreferenceUtils.getStringParam(PreferenceUtils.EVERNOTE_NOTEBOOK_GUID_KEY);  noteFilter.setNotebookGuid(guid); NotesMetadataResultSpec spec = new NotesMetadataResultSpec(); spec.setIncludeUpdated(true); spec.setIncludeCreated(true); NoteCollectionCounts counts = mEvernoteSession.getEvernoteClientFactory() .getNoteStoreClient().findNoteCounts(noteFilter, false); List<SNote> sNoteList = mFinalDb.findAllByWhere(SNote.class, ""type != "" + SNote.NoteType.TRASH.getValue()); List<String> guids = new ArrayList<>(); for (SNote note : sNoteList){ guids.add(note.getGuid()); }  if (counts == null || counts.getNotebookCounts() == null){ for (String deleteGuid :guids){ deleteLocalNote(deleteGuid); } return; }  int maxCount = counts.getNotebookCounts().get(guid);  NotesMetadataList list = mEvernoteSession.getEvernoteClientFactory() .getNoteStoreClient() .findNotesMetadata(noteFilter, 0, maxCount, spec);  for (NoteMetadata data : list.getNotes()){ guids.remove(data.getGuid()); List<SNote> sNotes = mFinalDb.findAllByWhere(SNote.class, ""guid = '"" + data.getGuid() + ""'""); if (sNotes != null && sNotes.size() > 0){ //update SNote sNote = sNotes.get(0); if (data.getUpdated() > sNote.getLastOprTime()) pullUpdateNote(sNote); }else { //pull loadEverNote(data.getGuid()); } } if (guids.size() > 0){ for (String deleteGuid :guids){ deleteLocalNote(deleteGuid); } } NotesLog.d(""""); } "	0	0	0	1	0	0
"private boolean addLink(Transition transition, InteractionContext ctx, EntityResource<?> er, HTTPHypermediaRIM rimHander) { boolean addLink = true; // evaluate the conditional expression Expression conditionalExp = transition.getCommand().getEvaluation(); if (conditionalExp != null) { try{ addLink = conditionalExp.evaluate(rimHander, ctx, er.clone()); }catch(CloneNotSupportedException cnse){ //not thrown, but added to support clone design contract throw new RuntimeException(""Failed to clone EntityResource"", cnse); } } return addLink; } "	0	0	1	0	1	0
"@Test public void testSingleLinkFeedToCollectionSameEntity() throws Exception { // initialise the thread local request context with requestUri and baseUri RequestContext ctx = new RequestContext(""http://localhost:8080/responder/rest"", ""/FundsTransfers"", null); RequestContext.setRequestContext(ctx);  //Create rsm ResourceState initial = new ResourceState(""ServiceDocument"", ""ServiceDocument"", new ArrayList<Action>(), ""/""); ResourceState fundsTransfers = new CollectionResourceState(""FundsTransfer"", ""FundsTransfers"", new ArrayList<Action>(), ""/FundsTransfers""); ResourceState fundsTransfersIAuth = new CollectionResourceState(""FundsTransfer"", ""FundsTransfersIAuth"", new ArrayList<Action>(), ""/FundsTransfersIAuth""); fundsTransfers.addTransition(new Transition.Builder().method(HttpMethod.GET).target(fundsTransfersIAuth).label(""Unauthorised input records"").build()); initial.addTransition(new Transition.Builder().method(HttpMethod.GET) .target(fundsTransfers) .build()); ResourceStateMachine rsm = new ResourceStateMachine(initial);  //Create collection resource CollectionResource<Entity> cr = new CollectionResource<Entity>(""FundsTransfers"", new ArrayList<EntityResource<Entity>>()); List<Link> links = new ArrayList<Link>(); links.add(rsm.createLink(fundsTransfers.getTransition(fundsTransfersIAuth), null, null)); cr.setLinks(links); GenericEntity<CollectionResource<Entity>> ge = new GenericEntity<CollectionResource<Entity>>(cr) {};  //Create provider AtomXMLProvider p = new AtomXMLProvider(createMockMetadataOData4j(createMockEdmDataServices(""FundsTransfers"")), mock(Metadata.class), rsm, null); UriInfo uriInfo = mock(UriInfo.class); when(uriInfo.getBaseUri()).thenReturn(new URI(ctx.getBasePath())); when(uriInfo.getPath()).thenReturn(ctx.getRequestUri()); p.setUriInfo(uriInfo);  //Serialize resource ByteArrayOutputStream bos = new ByteArrayOutputStream(); p.writeTo(ge.getEntity(), ge.getRawType(), ge.getType(), null, MediaType.APPLICATION_ATOM_XML_TYPE, null, bos); String responseString = new String(bos.toByteArray(), ""UTF-8""); System.out.println(responseString);  //Check response XMLUnit.setIgnoreWhitespace(true); Diff myDiff = XMLUnit.compareXML(readTextFile(EMPTY_FUNDS_TRANSFERS_FEED_XML), responseString); myDiff.overrideDifferenceListener(new IgnoreNamedElementsXMLDifferenceListener(""updated"")); if(!myDiff.similar()) { fail(myDiff.toString()); } } "	1	1	1	1	0	0
public static void toGSEA(String[] argv) throws IOException { Model model = io.convertFromOWL(new FileInputStream(argv[1])); Boolean specCheckEnabled = (argv.length>4) ? new Boolean(argv[4]) : Boolean.FALSE; (new GSEAConverter(argv[3], specCheckEnabled)).writeToGSEA(model, new FileOutputStream(argv[2])); } 	0	0	1	0	1	0
"@DataProvider(name = ""Drag to Left Test Data"") public Object[][] getDataDragLeft(){ return new Object[][]{ {sliderPgObj.slider,11,new String[]{""45"",""41""}}, {sliderPgObj.slider,33,new String[]{""35"",""34"",""24"",""23""}}, {sliderPgObj.slider,60,new String[]{""35"",""34"",""24"",""23""}}, // {sliderPgObj.slider,99,new String[]{""5"",""4"",""0""}}, //{sliderPgObj.slider,-110,new String[]{""0""}}, }; } "	0	0	1	1	0	0
"@Override @SuppressWarnings(""unchecked"") public GeneratedResult generate( ElementT element, String snippetFileName, CodegenContext context) { CSharpSnippetSet<ElementT> snippets = SnippetSet.createSnippetInterface( CSharpSnippetSet.class, SNIPPET_RESOURCE_ROOT, snippetFileName, ImmutableMap.<String, Object>of(""context"", context));  String outputFilename = snippets.generateFilename(element).prettyPrint(); CSharpContextCommon csharpContextCommon = new CSharpContextCommon();  // TODO don't depend on a cast here CSharpGapicContext csharpContext = (CSharpGapicContext) context; csharpContext.resetState(csharpContextCommon);  // Generate the body, which will collect the imports. Doc body = snippets.generateBody(element);  TreeSet<String> cleanedImports = csharpContextCommon.getImports();  // Generate result. Doc result = snippets.generateClass(element, body, cleanedImports); return GeneratedResult.create(result, outputFilename); } "	0	0	1	0	1	0
"@VisibleForTesting public Target createTarget(final BitmapWrapper bitmapWrapper, final Callback callback) { return new Target() {  @Override public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) { bitmapWrapper.setBitmap(bitmap); callback.onSuccess(); mTargets.remove(this); }  @Override public void onBitmapFailed(Drawable errorDrawable) { if (Log.isLoggable(VERBOSE)) { Log.v(""onBitMapFailed :"" + errorDrawable); } bitmapWrapper.setBitmap(null); callback.onFailure(); mTargets.remove(this); }  @Override public void onPrepareLoad(Drawable placeHolderDrawable) {} }; } "	0	0	1	0	1	0
"private void findModules() { Timings.time(""RegisterModules"", () -> { for (Class<?> clazz : offeredModules) { ModuleInfo info = clazz.getAnnotation(ModuleInfo.class); if (info == null) { continue; // should not occur } log.info(""Loading module "" + info.name() + "" v"" + info.version() + "" by "" + Arrays .toString(info.authors())); if (Module.class.isAssignableFrom(clazz)) { Module module = injector.getInstance(clazz); this.modules.add(module); } else { log.warning(""Class "" + clazz.getSimpleName() + "" has the ModuleInfo annotation but does not implement Module!""); } }  log.info(""Loaded "" + this.modules.size() + "" modules!""); }); } "	0	0	1	0	1	0
"public static void writeToEaWorldNBT(NBTTagCompound nbt, int dim) { try { NodeManager.instance.saveToNbt(Utils.newNbtTagCompund(nbt, ""nodes""), dim); } catch (Exception e) { e.printStackTrace(); } try { Eln.ghostManager.saveToNBT(Utils.newNbtTagCompund(nbt, ""ghost""), dim); } catch (Exception e) { e.printStackTrace(); }  } "	0	0	1	1	0	0
"public static void readFromEaWorldNBT(NBTTagCompound nbt) { try { NodeManager.instance.loadFromNbt(nbt.getCompoundTag(""nodes"")); } catch (Exception e) { e.printStackTrace(); } try { Eln.ghostManager.loadFromNBT(nbt.getCompoundTag(""ghost"")); } catch (Exception e) { e.printStackTrace(); } } "	0	0	1	1	0	0
"private void selectedBlockChanged() { if (selectedBlockBtn != null) { TrackBlock selectedBlock;  if (selectedBlockBtn.line.equals(""Green"")) selectedBlock = ctcOffice.greenLine[selectedBlockBtn.block - 1]; else selectedBlock = ctcOffice.redLine[selectedBlockBtn.block - 1];  //Set block info labels lblLineInfo.setText(selectedBlockBtn.line); lblBlockInfo.setText(Integer.toString(selectedBlockBtn.block)); lblSectionInfo.setText(selectedBlock.section); lblLengthInfo.setText(selectedBlock.blockLength + "" ft""); lblGradeInfo.setText(selectedBlock.blockGrade + ""%""); lblSpeedLimitInfo.setText(selectedBlock.speedLimit + "" mph""); lblElevationInfo.setText(selectedBlock.elevation + "" ft"");  //Set status text if (selectedBlock.status == BlockStatus.UNOCCUPIED) { lblStatusInfo.setText(""Unoccupied""); } else if (selectedBlock.status == BlockStatus.CLOSED) { lblStatusInfo.setText(""Closed""); } else { lblStatusInfo.setText(""Occupied""); }  if (selectedBlock.status == BlockStatus.CLOSED) btnCloseTrack.setText(""Open Block""); else btnCloseTrack.setText(""Close Block"");  lblThroughputInfo.setText(selectedBlockBtn.calcThroughput(ctcOffice.startTime, ctcOffice.getSimulationSpeed()) + "" trains/hr"");  //Set infrastructure info String[] infr = selectedBlock.infrastructure.split("";"");  //Set infrastructure info to defaults lblUnderInfo.setText(""No""); lblStationInfo.setText(""N/A""); lblSwitchInfo.setText(""N/A""); lblSwPosInfo.setText(""N/A""); lblCrossingInfo.setText(""No""); btnToggleSwitch.setEnabled(false);  for (int i = 0; i < infr.length; i++) { infr[i] = infr[i].trim();  if (infr[i].equals(""STATION"")) { if (i + 1 < infr.length) lblStationInfo.setText(infr[i + 1].trim()); else lblStationInfo.setText(""Unnamed""); }  if (infr[i].equals(""UNDERGROUND"")) lblUnderInfo.setText(""Yes"");  if (infr[i].equals(""SWITCH"")) { lblSwitchInfo.setText(selectedBlock.switchBlock.getID()); lblSwPosInfo.setText(selectedBlock.switchBlock.getPosition()); if (ctcOffice.getMode() == Mode.MANUAL) btnToggleSwitch.setEnabled(true); }  if (infr[i].equals(""RAILWAY CROSSING"")) lblCrossingInfo.setText(""Yes""); }  //Train info if (selectedBlock.trainID <= 0) { lblTrainNumInfo.setText(""""); lblSpeedInfo.setText(""""); lblDestInfo.setText(""""); lblAuthInfo.setText(""""); setHasTrain(false); } else { lblTrainNumInfo.setText(selectedBlock.trainID + """"); lblSpeedInfo.setText(selectedBlock.speed + "" mph""); //Set destination text if (selectedBlock.destination < 1) { lblDestInfo.setText(""""); } else { if (selectedBlock.line.equals(""Red"")) lblDestInfo.setText(ctcOffice.redLine[selectedBlock.destination-1].toString()); else lblDestInfo.setText(ctcOffice.greenLine[selectedBlock.destination-1].toString()); } lblAuthInfo.setText(selectedBlock.authority + "" blocks""); if (ctcOffice.getMode() == Mode.MANUAL) setHasTrain(true); } } } "	0	0	1	0	0	0
"protected synchronized void execute() throws RiotApiException, RateLimitException { setState(RequestState.Waiting); try { object.checkRequirements();  // Notify RateLimitHandler if (config.getRateLimitHandler() != null) { config.getRateLimitHandler().onRequestAboutToFire(this); }  URL url = new URL(object.getUrl()); connection = (HttpURLConnection) url.openConnection(); setTimeout(); connection.setDoInput(true); connection.setInstanceFollowRedirects(false); connection.setRequestMethod(getHttpMethod().name()); for (HttpHeadParameter p : object.getHttpHeadParameters()) { connection.setRequestProperty(p.getKey(), p.getValue()); } String body = object.getBody(); if (body != null) { connection.setRequestProperty(""Content-Type"", ""application/json""); connection.setDoOutput(true); DataOutputStream dos = new DataOutputStream(connection.getOutputStream()); dos.writeBytes(body); dos.flush(); dos.close(); } int responseCode = connection.getResponseCode();  // Get body InputStream is = null; if (responseCode < 400) { is = connection.getInputStream(); } else { is = connection.getErrorStream(); } StringBuilder responseBodyBuilder = new StringBuilder(); if (responseCode != CODE_SUCCESS_NO_CONTENT) { BufferedReader br = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8)); String line; while ((line = br.readLine()) != null) { responseBodyBuilder.append(line).append(System.lineSeparator()); } br.close(); }  // Handle error (except rate limit) if (responseCode >= 300 && responseCode != CODE_ERROR_RATE_LIMITED) { RiotApiError errorDto = new Gson().fromJson(responseBodyBuilder.toString(), RiotApiError.class); throw new RiotApiException(responseCode, errorDto); } setResponse(new RequestResponse(connection.getResponseCode(), responseBodyBuilder.toString(), connection.getHeaderFields()));  // Notify RateLimitHandler if (config.getRateLimitHandler() != null) { config.getRateLimitHandler().onRequestDone(this); }  // Handle rate limit error if (responseCode == CODE_ERROR_RATE_LIMITED) { String retryAfterString = connection.getHeaderField(""Retry-After""); String rateLimitType = connection.getHeaderField(""X-Rate-Limit-Type""); if (retryAfterString != null) { int retryAfter = Integer.parseInt(retryAfterString); throw new RateLimitException(retryAfter, rateLimitType); } else { throw new RateLimitException(0, rateLimitType); } }  setState(RequestState.Succeeded); } catch (RespectedRateLimitException e) { setException(e); setState(RequestState.Failed); RiotApi.log.fine(""["" + object + ""] Request > RespectedRateLimitException: "" + e.getMessage()); throw e; } catch (RateLimitException e) { setException(e); setState(RequestState.Failed); RiotApi.log.fine(""["" + object + ""] Request > RateLimitException: "" + e.getMessage()); throw e; } catch (RiotApiException e) { setException(e); setState(RequestState.Failed); RiotApi.log.fine(""["" + object + ""] Request > RiotApiException: "" + e.getMessage()); throw e; } catch (SocketTimeoutException e) { RiotApiException exception = new RiotApiException(RiotApiException.TIMEOUT_EXCEPTION); setException(exception); setState(RequestState.Timeout); RiotApi.log.fine(""["" + object + ""] Request > Timeout""); throw exception; } catch (IOException e) { RiotApiException exception = new RiotApiException(RiotApiException.IOEXCEPTION); setException(exception); setState(RequestState.Failed); RiotApi.log.log(Level.SEVERE, ""["" + object + ""] Request > IOException"", e); throw exception; } catch (NullPointerException e) { RiotApiException exception = new RiotApiException(RiotApiException.NULLPOINTEREXCEPTION); setException(exception); setState(RequestState.Failed); RiotApi.log.log(Level.SEVERE, ""["" + object + ""] Request > NullPointerException"", e); throw exception; } finally { if (connection != null) { connection.disconnect(); } } } "	1	0	0	0	0	0
public boolean isDBMS() { return (this.source == null || this.source instanceof EmptyDB || this.source instanceof DBMSDB) && (this.target instanceof DBMSDB); } 	0	0	0	0	0	1
public void addAxis(Matrix4d axis, int order, SymmetryType type) { axes.add(new Axis(axis,order,type)); } 	0	0	1	0	1	0
@Override @ForceInline public void write( long offsetInRDO, @NotNull ByteBuffer bytes, int offset, int length) { if (bytes.isDirect()) { memory.copyMemory(((DirectBuffer) bytes).address(), address + translate(offsetInRDO), length);  } else { memory.copyMemory(bytes.array(), offset, address + translate(offsetInRDO), length); } } 	1	0	1	1	0	0
"private void notifyAboutChanges(@NonNull final Collection<Change<TItem>> changes) { for (final Change change : changes) { switch (change.getType()) { case INSERTED: notifyItemRangeInserted(change.getStart() + itemsOffset(), change.getCount()); break; case CHANGED: notifyItemRangeChanged(change.getStart() + itemsOffset(), change.getCount()); break; case REMOVED: if (getItemCount() == 0) { //TODO: bug of recyclerview? notifyDataSetChanged(); } else { notifyItemRangeRemoved(change.getStart() + itemsOffset(), change.getCount()); } break; default: Lc.assertion(""Not supported "" + change.getType()); break; } } } "	0	0	1	0	1	0
public void addErrorMessage(String message) { errorMessages_.add(message); } 	0	0	1	0	1	0
"public void handlePacket(Packet p, IoSession session) throws Exception { World world = (World) session.getAttachment(); long usernameHash = p.readLong(); int owner = p.readInt(); PlayerSave save = Server.getServer().findSave(usernameHash, world); if (save == null) { System.out.println(""Error loading data for: "" + DataConversions.hashToUsername(usernameHash)); return; } System.out.println(""Adding save data for: "" + save.getUsername());  if (owner != save.getOwner()) { System.out.println(""WARNING ATTEMPTED DUPE""); }  save.setOwner(owner); save.setLogin(p.readLong(), p.readLong()); save.setTotals(p.readShort(), p.readShort()); save.setLocation(p.readShort(), p.readShort()); save.setFatigue(p.readShort()); save.setAppearance(p.readByte(), p.readByte(), p.readByte(), p.readByte(), p.readByte(), p.readByte(), p.readByte() == 1, p.readLong()); save.setCombatStyle(p.readByte()); //save.setPoints(p.readInt());  for (int i = 0; i < 18; i++) { save.setStat(i, p.readInt(), p.readShort()); }  int invCount = p.readShort(); save.clearInvItems(); for (int i = 0; i < invCount; i++) { save.addInvItem(p.readShort(), p.readInt(), p.readByte() == 1); }  int bnkCount = p.readShort(); save.clearBankItems(); for (int i = 0; i < bnkCount; i++) { save.addBankItem(p.readShort(), p.readInt()); }  save.setQuestPoints(p.readShort()); int qstCount = p.readShort(); for (int i = 0; i < qstCount; i++) save.setQuestStage(p.readShort(), p.readShort());  save.setEventCD(p.readLong());  save.setLastUpdate(System.currentTimeMillis()); if (!save.save()) { // we shouldnt always save right away System.out.println(""Error saving: "" + save.getUsername()); } } "	0	0	0	0	0	1
"private void onUnhandled(Context context, Intent intent) { String action = intent.getAction(); if ((MFPPushUtils.getIntentPrefix(context) + GCM_MESSAGE).equals(action)) { MFPInternalPushMessage message = intent .getParcelableExtra(GCM_EXTRA_MESSAGE);  saveInSharedPreferences(message);  intent = new Intent(MFPPushUtils.getIntentPrefix(context) + IBM_PUSH_NOTIFICATION); intent.putExtra(GCM_EXTRA_MESSAGE, message);  generateNotification(context, message.getAlert(), getNotificationTitle(context), message.getAlert(), getCustomNotificationIcon(context, ""drawable"", ""push_notification_icon""), intent, message.getSound()); } } "	0	0	1	1	0	0
@OnClick(R.id.forward_button) public void forwardClick(View v) { int newProgress = mSeekBar.getProgress() + (int) TimeUnit.MILLISECONDS.toSeconds(60); if(newProgress > mTotalTimeDuration) newProgress = (int) mTotalTimeDuration; mMediaControl.seek(newProgress, null); } 	0	0	1	0	1	0
private void cleanupRepo() { try { FileUtils.deleteDirectory(repositoryPath); } catch (IOException e) { throw new RuntimeException(e); } } 	0	0	1	0	0	0
"@Override public Builder getCommandSpecBuilder() { return CommandSpec.builder() .executor(this) .arguments(GenericArguments.optional(GenericArguments.bool(Text.of(""confirm"")))); } "	0	0	0	0	0	1
"@Override public void loadChapters(Manga manga, boolean forceReload) throws Exception { if (manga.getChapters().size() == 0 || forceReload) { Pattern p; Matcher m; String data = getNavigatorAndFlushParameters().getWithTimeout((manga.getPath()));  // Title manga.setImages(getFirstMatchDefault(PATRON_PORTADA, data, """")); // Summary manga.setSynopsis(getFirstMatchDefault(PATRON_SINOPSIS, data, defaultSynopsis));  manga.setFinished(data.contains(""<h\\d>Status:</h\\d>    <span>        Completed""));  // Author manga.setAuthor(getFirstMatchDefault(""\""/search/author/.+?>(.+?)<"", data, """"));  // Genre manga.setGenre(Util.getInstance().fromHtml(getFirstMatchDefault(""(<a href=\""http://mangafox.me/search/genres/.+?</td>)"", data, """")).toString());  // Chapter p = Pattern.compile(PATTERN_CAPITULOS); m = p.matcher(data); while (m.find()) { Chapter mc;  if (m.group(4) != null) mc = new Chapter(m.group(2).trim() + "": "" + m.group(4), ""http:"" + m.group(1).replace(""1.html"", """")); else mc = new Chapter(m.group(2).trim(), ""http:"" + m.group(1).replace(""1.html"", """")); mc.addChapterFirst(manga); } } } "	0	0	1	0	1	0
"public void generateDefaults() { validateList(); //Move file and load it File file = new File(ModularSystems.configFolderLocation + File.separator + ""Registries"" + File.separator + ""blockValues.json""); if (!file.exists()) { URL fileURL = ModularSystems.class.getResource(File.separator + ""blockValues.json""); try { FileUtils.copyURLToFile(fileURL, file); } catch (IOException e) { e.printStackTrace(); } } values = JsonUtils.<LinkedHashMap<String, BlockValues>>readFromJson(new TypeToken<LinkedHashMap<String, BlockValues>>() { }, ModularSystems.configFolderLocation + File.separator + ""Registries"" + File.separator + ""blockValues.json"");  addMaterialValues(Material.rock, new Calculation(-1, 200, 0, 1, 0, -100, 0), new Calculation(1, 100, 0, 1, 0, 0, 450), new Calculation(1, 1, 0, 1, 0, 0, 0)); addMaterialValues(Material.iron, new Calculation(1, 100, 0, 1, 0, 100, 0), new Calculation(10, 1, 0, 1, 0, 0, 1600), new Calculation(1, 1, 0, 1, 0, 0, 0)); } "	0	0	1	1	1	0
"public PartialCollection<BoxItem.Info> search(long offset, long limit, final BoxSearchParameters bsp) { QueryStringBuilder builder = bsp.getQueryParameters() .appendParam(""limit"", limit) .appendParam(""offset"", offset); URL url = SEARCH_URL_TEMPLATE.buildWithQuery(getAPI().getBaseURL(), builder.toString()); BoxAPIRequest request = new BoxAPIRequest(this.getAPI(), url, ""GET""); BoxJSONResponse response = (BoxJSONResponse) request.send(); JsonObject responseJSON = JsonObject.readFrom(response.getJSON()); String totalCountString = responseJSON.get(""total_count"").toString(); long fullSize = Double.valueOf(totalCountString).longValue(); PartialCollection<BoxItem.Info> results = new PartialCollection<BoxItem.Info>(offset, limit, fullSize); JsonArray jsonArray = responseJSON.get(""entries"").asArray(); for (JsonValue value : jsonArray) { JsonObject jsonObject = value.asObject(); BoxItem.Info parsedItemInfo = (BoxItem.Info) BoxResource.parseInfo(this.getAPI(), jsonObject); if (parsedItemInfo != null) { results.add(parsedItemInfo); } } return results; } "	0	0	1	0	1	0
"@POST @Path(""/project/id/{id:[0-9][0-9]*}/user/id/{userName}/availableReviewWork"") @ApiOperation(value = ""Find available review work for a map project."", notes = ""Gets a list of search results of available review work for the specified parameters."", response = SearchResultList.class) @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML }) public SearchResultList findAvailableReviewWork( @ApiParam(value = ""Map project id, e.g. 7"", required = true) @PathParam(""id"") Long mapProjectId, @ApiParam(value = ""User id, e.g. 2"", required = true) @PathParam(""userName"") String userName, @ApiParam(value = ""Query, e.g. 'heart attack'"", required = true) @QueryParam(""query"") String query, @ApiParam(value = ""Paging/filtering/sorting parameter, in JSON or XML POST data"", required = true) PfsParameterJpa pfsParameter, @ApiParam(value = ""Authorization token"", required = true) @HeaderParam(""Authorization"") String authToken) throws Exception {  Logger.getLogger(WorkflowServiceRest.class) .info(""RESTful call (Workflow): /project/id/"" + mapProjectId.toString() + ""/user/id"" + userName + ""/availableReviewWork "" + query);  String project = """"; String user = null;  final WorkflowService workflowService = new WorkflowServiceJpa(); try { // authorize call user = authorizeProject(mapProjectId, authToken, MapUserRole.LEAD, ""find available review work "", securityService);  // get the project and user final MapProject mapProject = workflowService.getMapProject(mapProjectId); project = mapProject.getName(); final MapUser mapUser = workflowService.getMapUser(userName); user = mapUser.getUserName();  PfsParameter localPfs = new PfsParameterJpa(); localPfs.setQueryRestriction(pfsParameter.getQueryRestriction()); localPfs.setSortField(pfsParameter.getSortField());  SearchResultList availableWork = new SearchResultListJpa();  // get ALL FixErrorPath work at specialist level for the project WorkflowPathHandler fixErrorHandler = new WorkflowFixErrorPathHandler(); SearchResultList fixErrorWork = fixErrorHandler.findAvailableWork(mapProject, mapUser, MapUserRole.LEAD, query, localPfs, workflowService);  // if review project path, get normal work if (mapProject.getWorkflowType().equals(WorkflowType.REVIEW_PROJECT)) {  // get ALL normal workflow work at lead level availableWork = workflowService.findAvailableWork(mapProject, mapUser, MapUserRole.LEAD, query, pfsParameter); }  // combine the results availableWork.addSearchResults(fixErrorWork);  // apply paging int[] totalCt = new int[1]; localPfs = new PfsParameterJpa(pfsParameter); localPfs.setQueryRestriction(null); localPfs.setSortField(null);  // create list of SearchResultJpas // NOTE: This could be cleaned up with better typing // currently cannot convert List<SearchResultJpa> to // List<SearchResult> List<SearchResultJpa> results = new ArrayList<>(); for (SearchResult sr : availableWork.getSearchResults()) { results.add((SearchResultJpa) sr); }  // apply paging to the list results = workflowService.applyPfsToList(results, SearchResultJpa.class, totalCt, localPfs);  // reconstruct the assignedWork search result list availableWork.setSearchResults(new ArrayList<SearchResult>()); for (SearchResult sr : results) { availableWork.addSearchResult(sr); }  return availableWork; } catch (Exception e) { handleException(e, ""trying to find available review work"", user, project, """"); return null; } finally { workflowService.close(); securityService.close(); } } "	0	0	0	0	0	1
public boolean isVisible(){ if(isLocal) return true; // Check if the member was declared as public, or no modifiers were given (Members are implicitly public) if(BitOp.and(modifiers, EnumModifier.PUBLIC.intVal) || modifiers == 0) return true; // If the current type is the same type as the member's enclosing type, the member is visible if(enclosingType.equals(Semantics.currentType())) return true; // If the member is private, it isn't visible if(BitOp.and(modifiers, EnumModifier.PRIVATE.intVal)) return false; // If the current type is a sub-type of the member's enclosing type, it is visible if(Semantics.currentType().hasSuper(enclosingType.qualifiedName)) return true; return false; } 	0	0	1	0	1	0
@Override public MLMethod generate() {  BasicLayer hidden, output;  final BasicNetwork network = new BasicNetwork(); network.addLayer(new BasicLayer(null, true, this.inputNeurons)); network.addLayer(hidden = new BasicLayer(this.activation, true, this.hiddenNeurons)); network.addLayer(output = new BasicLayer(this.activation, false, this.outputNeurons)); hidden.setContextFedBy(output); network.getStructure().finalizeStructure(); network.reset(); return network; } 	0	0	0	0	0	1
@Override public Scheduler defaultScheduler() { return (Schedulers.immediate()); } 	1	0	1	0	0	0
@Override final public synchronized int reload() { clear(); return init(); } 	0	0	1	1	0	0
public <T> void validateTokens(final ObjectMapper json) { }; 	0	0	1	1	0	0
"public List<Block> queryBlock(int last_len) { List<Block> blocks = new ArrayList<Block>(); Block temp_block = null; try { ResultSet result = statement.executeQuery(""select * from records group by hash order by record_id""); while(result.next()) { if (temp_block == null || !temp_block.pre_hash.equals(result.getString(""pre_hash""))) { if (temp_block != null) { temp_block.generateHash(); blocks.add(temp_block); } temp_block = new Block(result.getString(""pre_hash"")); } temp_block.addRecord(result.getString(""body"")); } if (temp_block != null) { temp_block.generateHash(); blocks.add(temp_block); } if (blocks.size() <= last_len) { return null; } for (int index = 0; index < last_len; index++) { blocks.remove(0);   // remove blocks that don't need. } return blocks; } catch (SQLException e) { e.printStackTrace(); return null; } } "	0	0	1	1	1	0
private boolean filterByTime(ServiceAlertRecord serviceAlert, long time) { if (time == -1 || serviceAlert.getPublicationWindows().size() == 0) return true; for (ServiceAlertTimeRange publicationWindow : serviceAlert.getPublicationWindows()) { if ((publicationWindow.getFromValue() == null || publicationWindow.getToValue() <= time) && (publicationWindow.getToValue() == null || publicationWindow.getToValue() >= time)) { return true; } } return false; } 	1	0	1	1	0	0
"@Override public StatemachineCollection getStatemachineCollection() throws StateAlreadyExistsException { StatemachineCollection sc = new StatemachineCollection(); sc.addStatemachine(""main"",sm); return sc; } "	0	0	1	0	0	0
private void getToast(Object object) { Toast toast = Toast.makeText(getApplicationContext(), String.valueOf(object), Toast.LENGTH_SHORT); toast.show(); } 	0	0	1	0	0	0
@Override public boolean canExecute(ICustomContext context) { return true; } 	0	0	0	1	0	0
void addWiXi(final double Wi, final double Xi) { sum += Wi * Xi; } 	0	0	1	0	1	0
@Override public List<FieldDeclaration> getAllFields() { List<FieldDeclaration> fields = javaParserTypeAdapter.getFieldsForDeclaredVariables();  getAllAncestors().forEach(ancestor -> ancestor.getTypeDeclaration().getAllFields().forEach(f -> { fields.add(new FieldDeclaration() {  @Override public AccessLevel accessLevel() { return f.accessLevel(); }  @Override public String getName() { return f.getName(); }  @Override public Type getType() { return ancestor.useThisTypeParametersOnTheGivenType(f.getType()); }  @Override public boolean isStatic() { return f.isStatic(); }  @Override public TypeDeclaration declaringType() { return f.declaringType(); } }); }));  return fields; } 	0	0	0	1	0	0
public void addToIndex(final int documentIndex, final int index, final T value) { matrix.get(documentIndex).add(index, value); } 	0	0	1	0	1	0
"private static List<Pair<PositionInText, PositionInText>> determineDiff(String oldContent, String newContent) throws Exception { return toPositionsInNewFile(new MyersSourceDiffAlgorithm(true).determineDiff( ChangestructureFactory.createFileInRevision("""", null, null), oldContent.getBytes(""UTF-8""), ChangestructureFactory.createFileInRevision("""", null, null), newContent.getBytes(""UTF-8""), ""UTF-8"")); //        return toPositionsInNewFile(diffUtilsDiff( //                ChangestructureFactory.createFileInRevision("""", null, null), //                oldContent.getBytes(""UTF-8""), //                ChangestructureFactory.createFileInRevision("""", null, null), //                newContent.getBytes(""UTF-8""), //                ""UTF-8"")); } "	0	0	1	1	0	0
"public MyEdge getMyEdgeFromThreshold(MyEdge edge1, MyEdge edge2, double threshold) { // TODO Auto-generated method stub MyEdge comEdge; List<List<String>> e1 = parseEdgeNames(edge1); List<List<String>> e2 = parseEdgeNames(edge2); if ((e1 == null && e2 == null) || (e1.size()==0 && e2.size()==0) ){ comEdge = new MyEdge(new String[] {edge1.toString()}, edge1.getStartNode(), edge1.getEndNode()); return comEdge; } if((e1 == null && e2 != null) || (e1 != null && e2 == null) || (e1.size()==0 && e2.size() !=0) || (e1.size()!=0 && e2.size() ==0)){ return null; }  double maxScore = -1, avgScore = 0; String[] comName = new String[e1.size()]; for (int i=0;i<e1.size();i++){ maxScore = -1; String tempComName = """"; for (int j=0;j<e2.size();j++){ double tempScore = getParsedEdgeScore(e1.get(i), e2.get(j)); String tempName = getParsedEdgeName(e1.get(i), e2.get(j)); if (maxScore < tempScore){ maxScore = tempScore; tempComName = tempName; } } avgScore += maxScore; comName[i] = tempComName; } if (e1.size()==0 && e2.size() !=0) return null; else avgScore = avgScore/e1.size(); if (avgScore >= threshold){ comEdge = new MyEdge(comName, edge1.getStartNode(), edge1.getEndNode()); return comEdge; } else return null; } "	0	0	0	1	0	0
"@Override public User getPartner(String email, String generatedCourseCode) { Log.i(""METHOD"", ""getPartner""); try { URL url = new URL(String.format(server + course + ""/%s/getPartner?from=%s"", generatedCourseCode, email));  String content = URLEncoder.encode(String.format(server + course + ""/%s/getPartner?from=%s"", URLEncoder.encode(generatedCourseCode, charset), URLEncoder.encode(email, charset)), charset); String partnerEmail = (String) new AsyncPostCall().execute(url, content, new String()).get();  if(partnerEmail != null) { return getUser(partnerEmail); } else return null; } catch (Exception e) { e.printStackTrace(); return null; } } "	0	0	1	0	1	0
"public void refresh(Collection<String> indices) { JestResult result = execute(new Refresh.Builder().addIndex(indices).refresh(true).build()); if (!result.isSucceeded()) { log.warn(""Unable to refresh indices "" + indices + "": "" + result.getErrorMessage()); } } "	0	0	1	1	1	0
"public SystemPresenter build() { final SystemPresenter p = new SystemPresenter(view_enableView, view_openOnNewStage, enablePopup, initMode, !disableFailureDetector);  model_fileSystemListeners.forEach(t -> p.getSystemModel().getFileSystem().subscribe(t.left, t.right));  if (view_enableView) p.viewOnCloseListeners.addAll(view_onCloseListeners);  model_applicationsToInstall.forEach(clsName -> { try { p.getSystemModel().getSystemApplicationsHandler() .addApplication(new ApplicationPath(PathType.CLASS_NAME, clsName)); } catch (Exception e) { log.error(""Can't install the application "" + clsName + "" on the system"", e); } });  p.getSystemModel().initializeSystemComponents(model_useSensorsServer, model_useCloudServer, model_initRegularFileSystemListeners);  p.getSystemView().waitUntilInitFinishes();  return p; } "	0	0	1	0	1	0
"@SuppressWarnings(""unchecked"") public static String executeCreateProvider(RepoxUIMServiceT repoxservice, Registry registry, String argument0, String argument1, String argument2, String argument3, String argument4, String argument5, String argument6, String argument7, String argument8, String argument9, PrintStream out, BufferedReader in) {  try { String aggregatorId = assignValue(""Aggregator Id"", argument0, out, in); String id = assignValue(""Id"", argument1, out, in); String name = assignValue(""Name"", argument2, out, in); String country = assignValue(""Country"", argument3, out, in); String countryCode = assignValue(""Country Code"", argument4, out, in); String description = assignValue(""Description"", argument5, out, in); String nameCode = assignValue(""Name Code"", argument6, out, in); String homepage = assignValue(""Homepage"", argument7, out, in); String providerType = assignValue(""Provider Type"", argument8, out, in); String email = assignValue(""Email"", argument9, out, in);  StorageEngine<?> engine = registry.getStorageEngine(); @SuppressWarnings(""rawtypes"") Provider prov = engine.createProvider(); prov.setAggregator(false); prov.setMnemonic(id); prov.setName(name); prov.setOaiBaseUrl("""");  prov.putValue(ControlledVocabularyProxy.PROVIDERDESCRIPTION, description); prov.putValue(ControlledVocabularyProxy.PROVIDERCOUNTRY, country); prov.putValue(ControlledVocabularyProxy.PROVIDERWEBSITE, homepage); prov.putValue(ControlledVocabularyProxy.SUGARCRMID, id); prov.putValue(ControlledVocabularyProxy.PROVIDERTYPE, providerType); prov.setOaiMetadataPrefix(""""); engine.updateProvider(prov); engine.checkpoint(); repoxservice.createProvider(aggregatorId, id, name, country, countryCode, description, nameCode, homepage, ProviderType.get(providerType), email); } catch (InternalServerErrorException | InvalidArgumentsException | MissingArgumentsException | AlreadyExistsException | DoesNotExistException e) { return ""Error in creating the provider in repox. "" + e.getMessage(); } catch (StorageEngineException e) {  return ""Error in creating the provider. "" + e.getMessage(); } catch (IOException e) { return ""Error in creating the provider. "" + e.getMessage(); } return ""Provider created succesfully""; } "	0	0	1	0	0	0
"public static GameObject GenerateRectangle(float posX, float poxY, float width, float height){  TextureRegion tex = AtlasManager.instance.findRegion(""white"");  AnimationBundle animationBundle = new AnimationBundle(); Array<TextureRegion> textures = new Array<>(); textures.add(tex);  animationBundle.addNamedAnimation(new NamedAnimation(""NOANIMATION"", 1, textures));  CollisionSequence collisionSequence = new CollisionSequence(); collisionSequence.name = ""NOANIMATION""; collisionSequence.frames = new CollisionGroup[1];  // Generating the hurtbox CollisionGroup collisionGroup = new CollisionGroup(); collisionGroup.boxes = new Rectangle[]{new Rectangle(-(width/2), -(height/2), width, height)};  collisionSequence.frames[0] = collisionGroup;  animationBundle.addHurtboxSequence(collisionSequence);   Sprite s = new Sprite(tex); s.setColor(Color.BLACK); GameObject o = new SquareProp(posX, poxY, 0, width, height, animationBundle);  o.addAndInitializeTrait(new CollectableTrait(o, new Runnable() { @Override public void run() { System.out.println(""Collision!""); } }));  return o; } "	0	0	1	1	1	0
@Override protected DruidWebService buildDruidWebService(ObjectMapper mapper) { return state.uiWebService; } 	0	0	1	0	0	0
"public static String zg2uni(String input) {   String rule = ""[ { \""from\"": \""(\u103d|\u1087)\"", \""to\"": \""\u103e\"" }, { \""from\"": \""\u103c\"", \""to\"": \""\u103d\"" }, { \""from\"": \""(\u103b|\u107e|\u107f|\u1080|\u1081|\u1082|\u1083|\u1084)\"", \""to\"": \""\u103c\"" }, { \""from\"": \""(\u103a|\u107d)\"", \""to\"": \""\u103b\"" }, { \""from\"": \""\u1039\"", \""to\"": \""\u103a\"" }, { \""from\"": \""\u106a\"", \""to\"": \""\u1009\"" }, { \""from\"": \""\u106b\"", \""to\"": \""\u100a\"" }, { \""from\"": \""\u106c\"", \""to\"": \""\u1039\u100b\"" }, { \""from\"": \""\u106d\"", \""to\"": \""\u1039\u100c\"" }, { \""from\"": \""\u106e\"", \""to\"": \""\u100d\u1039\u100d\"" }, { \""from\"": \""\u106f\"", \""to\"": \""\u100d\u1039\u100e\"" }, { \""from\"": \""\u1070\"", \""to\"": \""\u1039\u100f\"" }, { \""from\"": \""(\u1071|\u1072)\"", \""to\"": \""\u1039\u1010\"" }, { \""from\"": \""\u1060\"", \""to\"": \""\u1039\u1000\"" }, { \""from\"": \""\u1061\"", \""to\"": \""\u1039\u1001\"" }, { \""from\"": \""\u1062\"", \""to\"": \""\u1039\u1002\"" }, { \""from\"": \""\u1063\"", \""to\"": \""\u1039\u1003\"" }, { \""from\"": \""\u1065\"", \""to\"": \""\u1039\u1005\"" }, { \""from\"": \""\u1068\"", \""to\"": \""\u1039\u1007\"" }, { \""from\"": \""\u1069\"", \""to\"": \""\u1039\u1008\"" }, { \""from\"": \""/(\u1073|\u1074)/g\"", \""to\"": \""\u1039\u1011\"" }, { \""from\"": \""\u1075\"", \""to\"": \""\u1039\u1012\"" }, { \""from\"": \""\u1076\"", \""to\"": \""\u1039\u1013\"" }, { \""from\"": \""\u1077\"", \""to\"": \""\u1039\u1014\"" }, { \""from\"": \""\u1078\"", \""to\"": \""\u1039\u1015\"" }, { \""from\"": \""\u1079\"", \""to\"": \""\u1039\u1016\"" }, { \""from\"": \""\u107a\"", \""to\"": \""\u1039\u1017\"" }, { \""from\"": \""\u107c\"", \""to\"": \""\u1039\u1019\"" }, { \""from\"": \""\u1085\"", \""to\"": \""\u1039\u101c\"" }, { \""from\"": \""\u1033\"", \""to\"": \""\u102f\"" }, { \""from\"": \""\u1034\"", \""to\"": \""\u1030\"" }, { \""from\"": \""\u103f\"", \""to\"": \""\u1030\"" }, { \""from\"": \""\u1086\"", \""to\"": \""\u103f\"" }, { \""from\"": \""\u1036\u1088\"", \""to\"": \""\u1088\u1036\"" }, { \""from\"": \""\u1088\"", \""to\"": \""\u103e\u102f\"" }, { \""from\"": \""\u1089\"", \""to\"": \""\u103e\u1030\"" }, { \""from\"": \""\u108a\"", \""to\"": \""\u103d\u103e\"" }, { \""from\"": \""([\u1000-\u1021])\u1064\"", \""to\"": \""\u1004\u103a\u1039$1\"" }, { \""from\"": \""([\u1000-\u1021])\u108b\"", \""to\"": \""\u1004\u103a\u1039$1\u102d\"" }, { \""from\"": \""([\u1000-\u1021])\u108c\"", \""to\"": \""\u1004\u103a\u1039$1\u102e\"" }, { \""from\"": \""([\u1000-\u1021])\u108d\"", \""to\"": \""\u1004\u103a\u1039$1\u1036\"" }, { \""from\"": \""\u108e\"", \""to\"": \""\u102d\u1036\"" }, { \""from\"": \""\u108f\"", \""to\"": \""\u1014\"" }, { \""from\"": \""\u1090\"", \""to\"": \""\u101b\"" }, { \""from\"": \""\u1091\"", \""to\"": \""\u100f\u1039\u1091\"" }, { \""from\"": \""\u1019\u102c(\u107b|\u1093)\"", \""to\"": \""\u1019\u1039\u1018\u102c\"" }, { \""from\"": \""(\u107b|\u1093)\"", \""to\"": \""\u103a\u1018\"" }, { \""from\"": \""(\u1094|\u1095)\"", \""to\"": \""\u1037\"" }, { \""from\"": \""\u1096\"", \""to\"": \""\u1039\u1010\u103d\"" }, { \""from\"": \""\u1097\"", \""to\"": \""\u100b\u1039\u100b\"" }, { \""from\"": \""\u103c([\u1000-\u1021])([\u1000-\u1021])?\"", \""to\"": \""$1\u103c$2\"" }, { \""from\"": \""([\u1000-\u1021])\u103c\u103a\"", \""to\"": \""\u103c$1\u103a\"" }, { \""from\"": \""\u1031([\u1000-\u1021])(\u103e)?(\u103b)?\"", \""to\"": \""$1$2$3\u1031\"" }, { \""from\"": \""([\u1000-\u1021])\u1031([\u103b\u103c\u103d\u103e]+)\"", \""to\"": \""$1$2\u1031\"" }, { \""from\"": \""\u1032\u103d\"", \""to\"": \""\u103d\u1032\"" }, { \""from\"": \""\u103d\u103b\"", \""to\"": \""\u103b\u103d\"" }, { \""from\"": \""\u103a\u1037\"", \""to\"": \""\u1037\u103a\"" }, { \""from\"": \""\u102f(\u102d|\u102e|\u1036|\u1037)\u102f\"", \""to\"": \""\u102f$1\"" }, { \""from\"": \""\u102f\u102f\"", \""to\"": \""\u102f\"" }, { \""from\"": \""(\u102f|\u1030)(\u102d|\u102e)\"", \""to\"": \""$2$1\"" }, { \""from\"": \""(\u103e)(\u103b|\u1037)\"", \""to\"": \""$2$1\"" }, { \""from\"": \""\u1025(\u103a|\u102c)\"", \""to\"": \""\u1009$1\"" }, { \""from\"": \""\u1025\u102e\"", \""to\"": \""\u1026\"" }, { \""from\"": \""\u1005\u103b\"", \""to\"": \""\u1008\"" }, { \""from\"": \""\u1036(\u102f|\u1030)\"", \""to\"": \""$1\u1036\"" }, { \""from\"": \""\u1031\u1037\u103e\"", \""to\"": \""\u103e\u1031\u1037\"" }, { \""from\"": \""\u1031\u103e\u102c\"", \""to\"": \""\u103e\u1031\u102c\"" }, { \""from\"": \""\u105a\"", \""to\"": \""\u102b\u103a\"" }, { \""from\"": \""\u1031\u103b\u103e\"", \""to\"": \""\u103b\u103e\u1031\"" }, { \""from\"": \""(\u102d|\u102e)(\u103d|\u103e)\"", \""to\"": \""$2$1\"" }, { \""from\"": \""\u102c\u1039([\u1000-\u1021])\"", \""to\"": \""\u1039$1\u102c\"" }, { \""from\"": \""\u103c\u1004\u103a\u1039([\u1000-\u1021])\"", \""to\"": \""\u1004\u103a\u1039$1\u103c\"" }, { \""from\"": \""\u1039\u103c\u103a\u1039([\u1000-\u1021])\"", \""to\"": \""\u103a\u1039$1\u103c\"" }, { \""from\"": \""\u103c\u1039([\u1000-\u1021])\"", \""to\"": \""\u1039$1\u103c\"" }, { \""from\"": \""\u1036\u1039([\u1000-\u1021])\"", \""to\"": \""\u1039$1\u1036\"" }, { \""from\"": \""\u1092\"", \""to\"": \""\u100b\u1039\u100c\"" }, { \""from\"": \""\u104e\"", \""to\"": \""\u104e\u1004\u103a\u1038\"" }, { \""from\"": \""\u1040(\u102b|\u102c|\u1036)\"", \""to\"": \""\u101d$1\"" }, { \""from\"": \""\u1025\u1039\"", \""to\"": \""\u1009\u1039\"" }, { \""from\"": \""([\u1000-\u1021])\u103c\u1031\u103d\"", \""to\"": \""$1\u103c\u103d\u1031\"" }, { \""from\"": \""([\u1000-\u1021])\u103d\u1031\u103b\"", \""to\"": \""$1\u103b\u103d\u1031\"" }]"";  return replace_with_rule(rule,input);  } "	0	0	0	1	0	0
"private String findNearbyMeals(String addressString, PartialOrder order) { String output = """"; try { // ### TODO: The last two arguments are no-ops right now. These are place holders for when the efficient geo-search // ### algorithm is brought back into play. // Github issue #58 - https://github.com/hungernotimpossible/hni/issues/58 List<ProviderLocation> nearbyProviders = (ArrayList) locationService.providersNearCustomer(addressString, 3, 0, 0); if (!nearbyProviders.isEmpty()) { order.setAddress(addressString); List<ProviderLocation> nearbyWithMenu = new ArrayList<>(); List<MenuItem> items = new ArrayList<>(); for (ProviderLocation location : nearbyProviders) { Optional<Menu> currentMenu = location.getProvider().getMenus().stream() .filter(menu -> isCurrent(menu)).findFirst(); if (currentMenu.isPresent()) { nearbyWithMenu.add(location); items.add(currentMenu.get().getMenuItems().iterator().next()); } } if (!nearbyWithMenu.isEmpty()) { order.setProviderLocationsForSelection(nearbyWithMenu); order.setMenuItemsForSelection(items); output += providerLocationMenuOutput(order); order.setTransactionPhase(TransactionPhase.CHOOSING_LOCATION); } else { output = REPLY_PROVIDERS_UNAVAILABLE; } } else { output = REPLY_NO_PROVIDERS; } } catch (GeoCodingException e) { output = e.getMessage(); }  return output; } "	0	0	1	0	1	0
"protected long createTask(long sid, String type, String method, HashMap<String, Object> params) { Session session = sessionList.get(sid); String json = JSONUtils.hashMapToString(params); TaskData data = new TaskData().content(json).type(type).method(method); Task task = new Task(data); task = session.newTask(task); sendData(task.getTaskData(), ""task creation request""); return task.getTaskData().tid(); } "	0	0	0	1	1	0
"@GET @Path(""compliment"") @Produces(MediaType.TEXT_PLAIN) @Consumes(MediaType.TEXT_PLAIN) public String getCompliment(@QueryParam(""politePhrase"") String input){ if (""stp"".equals(input)){ return ""Your laces look ironed.""; } if (""pepper"".equals(input)){ return """"+lib.getPepper(); } return ""You said ""+input; } "	0	0	1	0	1	0
"public static void setAllValues(SharedPreferences settings) { prefs = settings; defaultCardView = CreateCardView.CardEnum.valueOf(settings.getString(""defaultCardViewNew"", ""LARGE"").toUpperCase()); middleImage = settings.getBoolean(""middleImage"", false);  bigPicCropped = settings.getBoolean(""bigPicCropped"", true); bigPicEnabled = settings.getBoolean(""bigPicEnabled"", true);  NSFWPreviews = settings.getBoolean(""NSFWPreviewsNew"", false); colorMatchingMode = ColorMatchingMode.valueOf(settings.getString(""ccolorMatchingModeNew"", ""MATCH_EXTERNALLY"")); colorIndicator = ColorIndicator.valueOf(settings.getString(""colorIndicatorNew"", ""CARD_BACKGROUND"")); defaultSorting = Sorting.valueOf(settings.getString(""defaultSorting"", ""HOT"")); timePeriod = TimePeriod.valueOf(settings.getString(""timePeriod"", ""DAY"")); defaultCommentSorting = CommentSort.valueOf(settings.getString(""defaultCommentSorting"", ""CONFIDENCE""));  single = prefs.getBoolean(PREF_SINGLE, false); blurCheck = prefs.getBoolean(PREF_BLUR, false);  commentNav = prefs.getBoolean(PREF_COMMENT_NAV, false); postNav = false;  fab = prefs.getBoolean(PREF_FAB, false); fabType = prefs.getInt(PREF_FAB_TYPE, R.integer.FAB_POST); nighttime = prefs.getInt(PREF_DAY_TIME, 20); daytime = prefs.getInt(PREF_NIGHT_TIME, 6); autoTime = prefs.getBoolean(PREF_AUTOTHEME, false); colorBack = prefs.getBoolean(PREF_COLOR_BACK, false); colorNavBar = prefs.getBoolean(PREF_COLOR_NAV_BAR, false); colorEverywhere = prefs.getBoolean(PREF_COLOR_EVERYWHERE, true); colorCommentDepth = prefs.getBoolean(PREF_COLOR_COMMENT_DEPTH, true); collapseComments = prefs.getBoolean(PREF_COLLAPSE_COMMENTS, false); lowRes = prefs.getBoolean(PREF_LOW_RES, false);   swap = prefs.getBoolean(PREF_SWAP, false); web = prefs.getBoolean(PREFS_WEB, true); image = prefs.getBoolean(PREF_IMAGE, true); cache = true; cacheDefault = false; customtabs = prefs.getBoolean(PREF_CUSTOMTABS, true); scrollSeen = prefs.getBoolean(PREF_SCROLL_SEEN, false); synccitName = prefs.getString(SYNCCIT_NAME, """"); synccitAuth = prefs.getString(SYNCCIT_AUTH, """");  titleFilters = prefs.getString(PREF_TITLE_FILTERS, """"); textFilters = prefs.getString(PREF_TEXT_FILTERS, """"); domainFilters = prefs.getString(PREF_DOMAIN_FILTERS, """"); subredditFilters = prefs.getString(PREF_SUBREDDIT_FILTERS, """");  dualPortrait = prefs.getBoolean(PREF_DUAL_PORTRAIT, false);  cropImage = prefs.getBoolean(PREF_CROP_IMAGE, true); switchThumb = prefs.getBoolean(PREF_SWITCH_THUMB, true);  swipeAnywhere = prefs.getBoolean(PREF_SWIPE_ANYWHERE, false); album = prefs.getBoolean(PREF_ALBUM, true); albumSwipe = prefs.getBoolean(PREF_ALBUM_SWIPE, true);  commentLastVisit = prefs.getBoolean(PREF_COMMENT_LAST_VISIT, false); gif = prefs.getBoolean(PREF_GIF, true); video = prefs.getBoolean(PREF_VIDEO, true); exit = prefs.getBoolean(PREF_EXIT, true); fastscroll = prefs.getBoolean(PREF_FASTSCROLL, false);  hideButton = prefs.getBoolean(PREF_HIDEBUTTON, false); saveButton = prefs.getBoolean(PREF_SAVE_BUTTON, false); actionbarVisible = prefs.getBoolean(PREF_ACTIONBAR_VISIBLE, true); actionbarTap = prefs.getBoolean(PREF_ACTIONBAR_TAP, false);  } "	0	0	1	0	0	0
"public static void main(String[] args) {  List<String> logLevels = new ArrayList<>(); Collections.addAll(logLevels, ""ALL"", ""DEBUG"", ""ERROR"", ""FATAL"", ""INFO"", ""TRACE"", ""WARN"");  if(logLevels.contains(args[0])) { System.setProperty(""logging.level.root"", args[0]); System.setProperty(""logging.level.org.springframework.web"", args[0]); System.setProperty(""logging.level.com.ericsson.ei"", args[0]); } else { System.setProperty(""logging.level.root"", ""OFF""); System.setProperty(""logging.level.org.springframework.web"", ""OFF""); System.setProperty(""logging.level.com.ericsson.ei"", ""OFF""); }  SpringApplication.run(App.class, args); } "	0	0	1	0	1	0
@Override public void run() { getActivity().goToPage(3); } 	1	0	1	0	0	0
@Override protected void requestDraw() { if (graphics.initialized && sketch.canDraw()) { glview.requestRender(); } } 	0	0	1	0	1	0
"final void appDiedLocked(ProcessRecord app, int pid, IApplicationThread thread) { // First check if this ProcessRecord is actually active for the pid. synchronized (mPidsSelfLocked) { ProcessRecord curProc = mPidsSelfLocked.get(pid); if (curProc != app) { Slog.w(TAG, ""Spurious death for "" + app + "", curProc for "" + pid + "": "" + curProc); return; } }  BatteryStatsImpl stats = mBatteryStatsService.getActiveStatistics(); synchronized (stats) { stats.noteProcessDiedLocked(app.info.uid, pid); }  if (!app.killed) { Process.killProcessQuiet(pid); Process.killProcessGroup(app.info.uid, pid); app.killed = true; }  // Clean up already done if the process has been re-started. if (app.pid == pid && app.thread != null && app.thread.asBinder() == thread.asBinder()) { boolean doLowMem = app.instrumentationClass == null; boolean doOomAdj = doLowMem; if (!app.killedByAm) { Slog.i(TAG, ""Process "" + app.processName + "" (pid "" + pid + "") has died""); mAllowLowerMemLevel = true; } else { // Note that we always want to do oom adj to update our state with the // new number of procs. mAllowLowerMemLevel = false; doLowMem = false; } EventLog.writeEvent(EventLogTags.AM_PROC_DIED, app.userId, app.pid, app.processName); if (DEBUG_CLEANUP) Slog.v( TAG, ""Dying app: "" + app + "", pid: "" + pid + "", thread: "" + thread.asBinder()); handleAppDiedLocked(app, false, true);  if (doOomAdj) { updateOomAdjLocked(); } if (doLowMem) { doLowMemReportIfNeededLocked(app); } } else if (app.pid != pid) { // A new process has already been started. Slog.i(TAG, ""Process "" + app.processName + "" (pid "" + pid + "") has died and restarted (pid "" + app.pid + "").""); EventLog.writeEvent(EventLogTags.AM_PROC_DIED, app.userId, app.pid, app.processName); } else if (DEBUG_PROCESSES) { Slog.d(TAG, ""Received spurious death notification for thread "" + thread.asBinder()); } } "	0	0	1	1	0	0
"protected boolean getSnappyJobsStatus(String snappyJobScript, File logFile) { boolean found = false; try { String line = null; Set<String> jobIds = new LinkedHashSet<String>(); FileReader freader = new FileReader(logFile); BufferedReader inputFile = new BufferedReader(freader); while ((line = inputFile.readLine()) != null) { if (line.contains(""jobId"")) { String jobID = line.split("":"")[1].trim(); jobID = jobID.substring(1, jobID.length() - 2); jobIds.add(jobID); } } inputFile.close(); for (String str : jobIds) { File log = new File("".""); String dest = log.getCanonicalPath() + File.separator + ""jobStatus_"" + RemoteTestModule.getCurrentThread().getThreadId() + ""_"" + System.currentTimeMillis() + "".log""; File commandOutput = new File(dest); String expression = snappyJobScript + "" status --lead "" + leadHost + "":"" + LEAD_PORT + "" --job-id "" + str + "" > "" + commandOutput + "" 2>&1 ; grep -e '\""status\"": \""FINISHED\""' -e 'curl:' "" + commandOutput + "" | wc -l)\""""; String command = ""while [ \""$("" + expression + "" -le  0 ] ; do rm "" + commandOutput + "" ;  touch "" + commandOutput + ""  ; done""; ProcessBuilder pb = new ProcessBuilder(""/bin/bash"", ""-c"", command); Log.getLogWriter().info(""job "" + str + "" starts at: "" + System.currentTimeMillis()); executeProcess(pb, commandOutput); Log.getLogWriter().info(""job "" + str + "" finishes at:  "" + System.currentTimeMillis()); FileInputStream fis = new FileInputStream(commandOutput); BufferedReader br = new BufferedReader(new InputStreamReader(fis)); line = null; String searchString = ""Connection reset by peer""; while ((line = br.readLine()) != null && !found) { if (line.toLowerCase().contains(searchString.toLowerCase())) { found = true; Log.getLogWriter().info(""Connection reset by peer...""); } } br.close(); } } catch (FileNotFoundException e) { String s = ""Unable to find file: "" + logFile; throw new TestException(s); } catch (IOException e) { String s = ""Problem while reading the file : "" + logFile; throw new TestException(s, e); } return found; } "	0	0	0	1	0	0
"private static Throwable runExpectingAssertionFailure(Pipeline pipeline) { // We cannot use thrown.expect(AssertionError.class) because the AssertionError // is first caught by JUnit and causes a test failure. try { pipeline.run(); } catch (AssertionError exc) { return exc; } fail(""assertion should have failed""); throw new RuntimeException(""unreachable""); } "	0	0	1	0	0	0
public void requestLowPriority() { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { mBluetoothGatt.requestConnectionPriority(BluetoothGatt.CONNECTION_PRIORITY_LOW_POWER); } } 	0	0	1	0	1	0
"@Override public String toDetailsString() { return ""edges:"" + nf(edgeCount) + ""("" + edges.getCapacity() / Helper.MB + ""), "" + ""nodes:"" + nf(nodeCount) + ""("" + nodes.getCapacity() / Helper.MB + ""), "" + ""name: - ("" + nameIndex.getCapacity() / Helper.MB + ""), "" + ""geo:"" + nf(maxGeoRef) + ""("" + wayGeometry.getCapacity() / Helper.MB + ""), "" + ""bounds:"" + bounds; } "	0	0	1	1	0	0
"@Override public Bitmap decodeRegion(Rect rect, int sampleSize) { synchronized (this.decoderLock) { BitmapFactory.Options options = new BitmapFactory.Options(); options.inSampleSize = sampleSize; options.inPreferredConfig = Bitmap.Config.RGB_565; Bitmap bitmap = this.decoder.decodeRegion(rect, options); if (bitmap == null) { throw new RuntimeException(""Region decoder returned null bitmap - image format may not be supported""); } else { return bitmap; } } } "	0	0	0	0	0	1
"private void runGraphWalker() { executionWindow.getItems().clear(); messagesWindow.getChildren().clear(); if (currentGraphIndex < 0) { return; } Task<Void> task = new Task<Void>() { @Override protected Void call() throws Exception { logger.debug(""Running the graph!"");  List<Context> contexts = new ArrayList<>(); for (UIGraph graph : getGraphs()) { graph.getModel().getEdges().clear(); graph.getModel().getVertices().clear(); for (UIElement element : graph.getElements()) { if (element instanceof UIVertex) { graph.getModel().addVertex(((UIVertex) element).getVertex()); } if (element instanceof UIEdge) { graph.getModel().addEdge(((UIEdge) element).getEdge()); } } ExecutionContext context = new UIExecutionContext(graph.getModel().build(), GeneratorFactory.parse(graph.getGenerator())); Element startElement = getElement(graph, startElementId); if (startElement != null) { context.setNextElement(startElement); } contexts.add(context); }  org.graphwalker.io.common.Util.filterBlockedElements(contexts); Machine machine = new SimpleMachine(contexts); while (machine.hasNextStep()) { Context context = machine.getNextStep(); Model.RuntimeModel model = context.getModel(); Element element = context.getCurrentElement(); logger.debug(""Current model: "" + model.getName()); logger.debug("" Element name: "" + (isNotNullOrEmpty(element.getName()) ? element.getName() : """"));  JSONObject jsonObject = new JSONObject(); for (Map.Entry<String, String> key : context.getKeys().entrySet()) { jsonObject.put(key.getKey(), key.getValue()); } String data = jsonObject.toString(); Integer visitedCount = Integer.valueOf((int) machine.getProfiler().getVisitCount(element));   for (UIGraph graph : getGraphs()) { logger.debug(model.getId()); logger.debug(graph.getModel().getId()); if (graph.getModel().getId().equals(model.getId())) { for (UIElement uiElement : graph.getElements()) { if (element.getId().equals(uiElement.getElementId())) { Platform.runLater(() -> { currentGraphIndex = graphs.indexOf(graph); tabPane.getSelectionModel().select(currentGraphIndex); uiElement.highlight(true);  createLogEntry( graph, uiElement, data, visitedCount ); }); } } } }  synchronized (executionLock) { logger.debug(Thread.currentThread().getName() + "" waiting to get notified""); executionLock.wait(); if (isSliderValueChanged) { stopExecutionTimer(); startExecutionTimerContinuously((long) slider.getValue()); isSliderValueChanged = false; } logger.debug(Thread.currentThread().getName() + "" got notified""); }  for (UIGraph graph : getGraphs()) { if (graph.getModel().getId().equals(machine.getCurrentContext().getModel().getId())) { for (UIElement uiElement : graph.getElements()) { if (element.getId().equals(uiElement.getElementId())) { Platform.runLater(() -> { currentGraphIndex = graphs.indexOf(graph); tabPane.getSelectionModel().select(currentGraphIndex); uiElement.highlight(false); uiElement.visited(true); }); } } } } } return null; } }; task.setOnFailed(handle -> { graphWalkerRunningStateProperty.setValue(GraphWalkerRunningState.stopped.value); Throwable throwable = task.getException(); addMessage(throwable.getMessage()); throwable.printStackTrace(); }); task.setOnSucceeded(handle -> { graphWalkerRunningStateProperty.setValue(GraphWalkerRunningState.stopped.value); logger.debug(""Done running the graph""); }); executingGraphTask = pool.submit(task); } "	0	0	1	0	1	0
"public static UDv2Relations attrToUD(Node aNode) throws XPathExpressionException { String tag = Utils.getTag(aNode); String lemma = Utils.getLemma(aNode);  if (tag.matches(""n.*|y.*"") || lemma.equals(""%"")) return UDv2Relations.NMOD; if (tag.matches(""r.*"")) return UDv2Relations.ADVMOD; if (tag.matches(""m[cf].*|xn.*"")) return UDv2Relations.NUMMOD; if (tag.matches(""mo.*|xo.*|v..p.*"")) return UDv2Relations.AMOD; if (tag.matches(""p.*"")) return UDv2Relations.DET; if (tag.matches(""a.*"")) { if (lemma != null && lemma.matches(""(man|mūs|tav|jūs|viņ|sav)ēj(ais|ā)|(daudz|vairāk|daž)(i|as)"")) return UDv2Relations.DET; return UDv2Relations.AMOD; } // Both cases can provide mistakes, but there is no way to solve this // now. if (tag.matches(""x[fu].*"")) return UDv2Relations.NMOD; if (tag.matches(""xx.*"")) return UDv2Relations.AMOD;  warn(aNode); return UDv2Relations.DEP; } "	0	0	0	1	0	0
"public static void test() { //Event types final HelloEventType helloEventType = new HelloEventType();  //Default region of composite AtomicState s1 = new AtomicState(""s1""); AtomicState s2 = new AtomicState(""s2""); AtomicState s3 = new AtomicState(""s3""); Transition t1 = new Transition(); t1.from(s1).to(s2).event(helloEventType); Transition t2 = new Transition(); t2.from(s2).to(s3).event(helloEventType);  //Composite CompositeState c = new CompositeState(""c""); c.add(s1).add(s2).add(s3).initial(s1).build();  //Root composite //Default region of root composite AtomicState s4 = new AtomicState(""s4""); Transition t1_root = new Transition(); t1_root.from(c).to(s4).event(helloEventType);  CompositeState root = new CompositeState(""root""); root.add(c).add(s4).initial(c).build();  try { final Status status = new Status(); root.onEntry();//c.onEntry, s1.onEntry assertEquals(c, root.regions[0].current); assertEquals(s1, c.regions[0].current); root.handle(helloEventType.instantiate(""world""), status);//s1 --> s2 (not c-->s4) assertEquals(c, root.regions[0].current); assertEquals(s2, c.regions[0].current); root.handle(helloEventType.instantiate(""world""), status);//s2 --> s3 (not c-->s4) assertEquals(c, root.regions[0].current); assertEquals(s3, c.regions[0].current); root.handle(helloEventType.instantiate(""world""), status);//c --> s4 assertEquals(s4, root.regions[0].current); } catch (Exception e) { e.printStackTrace(); } } "	0	0	0	0	0	1
"@Test public void testConstructorInitializesTagFilterToAsteriskWhenNull() { GitParameterDefinition instance = new GitParameterDefinition(""name"",""PT_REVISION"",""defaultValue"",""description"",""branch"",null,null, SortMode.NONE,false); assertEquals(""*"", instance.getTagFilter()); assertEquals(""*"", instance.getBranchfilter()); } "	0	0	1	0	1	0
"public void edit(int id, Employee e) throws Exception { connect(); stmt = conn.createStatement(); stmt.executeUpdate(""UPDATE public.\""EMPLOYEES\"" "" + ""SET \""FULLNAME\"" = '"" + e.getFullName() + ""', \""ADDRESS\"" = '"" + e.getAddress() + ""', \""EMAIL\"" = '"" + e.getEmail() + ""', "" + ""\""PHONE\"" = '"" + e.getPhone() + ""', \""SALARY\"" = '"" + e.getSalary() + ""' "" + ""WHERE \""ID\"" = "" + id); } "	0	0	1	1	0	0
@SideOnly(Side.CLIENT) public void renderParticles(){ if(Util.RANDOM.nextInt(ConfigBoolValues.LESS_PARTICLES.isEnabled() ? 16 : 8) == 0){ BlockPos thisPos = this.pos; LaserRelayConnectionHandler.Network network = LaserRelayConnectionHandler.getNetworkFor(thisPos, this.worldObj); if(network != null){ for(LaserRelayConnectionHandler.ConnectionPair aPair : network.connections){ if(aPair.contains(thisPos) && PosUtil.areSamePos(thisPos, aPair.positions[0])){ PacketParticle.renderParticlesFromAToB(aPair.positions[0].getX(), aPair.positions[0].getY(), aPair.positions[0].getZ(), aPair.positions[1].getX(), aPair.positions[1].getY(), aPair.positions[1].getZ(), ConfigBoolValues.LESS_PARTICLES.isEnabled() ? 1 : Util.RANDOM.nextInt(3)+1, 0.8F, this.isItem ? COLOR_ITEM : COLOR, 1F); } } } } } 	0	0	1	1	1	0
"public String toPythonCode() { final StringBuilder builder = new StringBuilder(); builder.append(""'"").append(xmlTag).append(""' : "").append(typeModel); if (!typeModel.equals(""None"")) { builder.append(""()""); } return  builder.toString(); } "	0	1	0	0	1	0
private void ReInitRounds() { int i; jjround = 0x80000001; for (i = 37; i-- > 0;) jjrounds[i] = 0x80000000; } 	0	0	1	1	0	0
"public static Gson gson() { return new GsonBuilder() .registerTypeAdapter(ParseTree.Node.class, new JsonDeserializer<ParseTree.Node>() { /** * Deserialize a node JSON to Node class object. * @author Adam Yi &lt;xuan@yiad.am&gt; */ @Override public ParseTree.Node deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { JsonObject nodeObj = json.getAsJsonObject(); Gson gson = new Gson(); ParseTree.Node node = gson.fromJson(json, ParseTree.Node.class); node.setChildrenIds((HashSet) gson.fromJson(nodeObj.get(""mChildrenIds""), new TypeToken<HashSet<Integer>>() { }.getType())); Set<Object> oldTagSet = (HashSet) gson.fromJson(nodeObj.get(""mTagSet""), new TypeToken<HashSet<Object>>() { }.getType()); Set<Object> newTagSet = new HashSet<>(); for (Object obj : oldTagSet) { if (obj instanceof Double) newTagSet.add((long) (double) obj); else newTagSet.add(obj); }  node.setTagList(newTagSet); return node; } }) .registerTypeAdapter(ParseTree.class, new JsonDeserializer<ParseTree>() { @Override /** * Deserialize a parse tree JSON to ParseTree class object. * @author: Adam Yi &lt;xuan@yiad.am&gt; */ public ParseTree deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { JsonObject treeObj = json.getAsJsonObject(); Gson gson = new GsonBuilder().registerTypeAdapter(new TypeToken<SparseArray<ParseTree.Node>>() { }.getType(), new SparseArrayTypeAdapter<ParseTree.Node>(TYPE_NODE)) .create(); // Construct a tree (this shouldn't try to parse the sparseArray stuff ParseTree tree = gson.fromJson(json, ParseTree.class); SparseArray<ParseTree.Node> nodeList = gson.fromJson(treeObj.get(""mNodeList""), new TypeToken<SparseArray<ParseTree.Node>>() { }.getType()); // set the correct node list tree.setNodeList(nodeList); return tree; } }).registerTypeAdapter(Tag.class, new JsonDeserializer<Tag>() { @Override /** * Deserialize a tag JSON to Tag class object. * @author: Adam Yi &lt;xuan@yiad.am&gt; */ public Tag deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { JsonObject tagObj = json.getAsJsonObject(); Gson gson = new Gson(); Tag tag = gson.fromJson(json, Tag.class); tag.setKeywordList((HashSet) gson.fromJson(tagObj.get(""mRegularExpressions""), new TypeToken<HashSet<String>>() { }.getType())); return tag; } }).registerTypeAdapter(Trigger.class, new JsonDeserializer<Trigger>() { @Override /** * Deserialize a trigger JSON to Trigger class object. * @author: Adam Yi &lt;xuan@yiad.am&gt; */ public Trigger deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { JsonObject triggerObj = json.getAsJsonObject(); Gson gson = new Gson(); Trigger trigger = gson.fromJson(json, Trigger.class); trigger.setConstraints((HashSet) gson.fromJson(triggerObj.get(""mConstraints""), new TypeToken<HashSet<Trigger.Constraint>>() { }.getType())); return trigger; } }).registerTypeAdapter(new TypeToken<LongSparseArray<Tag>>() { }.getType(), new LongSparseArrayTypeAdapter<Tag>(TYPE_TAG)) .create(); } "	0	0	0	0	0	1
protected Object getFromCache(Object key){ return ((LRUMap<Object, Object>) this.cache).get(key); } 	0	0	1	0	1	0
public ClientProtos.RegionLoadStats getRegionStats() { if (!regionStatsEnabled) { return null; } ClientProtos.RegionLoadStats.Builder stats = ClientProtos.RegionLoadStats.newBuilder(); stats.setMemstoreLoad((int) (Math.min(100, (this.memstoreSize.get() * 100) / this .memstoreFlushSize))); stats.setHeapOccupancy((int)rsServices.getHeapMemoryManager().getHeapOccupancyPercent()*100); return stats.build(); } 	0	0	0	0	0	1
"private Map<Long, E> parseFile(String file) throws IOException { HashMap<Long, E> results = new HashMap<Long, E>();  try(BufferedReader reader = new BufferedReader(new FileReader(file))) { String line; while ((line = reader.readLine()) != null) { line = line.trim();  if (line.isEmpty()) { continue; }  String[] parts = line.split(""\\s+"", 2);  try { long vertexId = Long.parseLong(parts[0]); E vertexValue = rule.parse(parts.length > 1 ? parts[1] : """"); results.put(vertexId,  vertexValue); } catch(NumberFormatException e) { LOG.warn(""Skipping invalid line '"" + line + ""' of file '"" + file + ""'""); } } }  return results; } "	0	0	1	0	0	0
@Override public Map<String, String> getAdaptorSpecificInformation() { Map<String,String> result = Utils.emptyMap(1); jobsAdaptor.getAdaptorSpecificInformation(result); return result; } 	0	0	1	0	1	0
"@SuppressLint(""NewApi"") @Override public void onCreate() { Log.d(TAG, ""Service started""); isRunning = true; handler = new Handler(); newMediaFiles = Collections.synchronizedList(new ArrayList<Long>()); reportQueue = Collections.synchronizedList(new ArrayList<DownloadStatus>()); downloads = new ArrayList<Downloader>(); numberOfDownloads = new AtomicInteger(0);  IntentFilter cancelDownloadReceiverFilter = new IntentFilter(); cancelDownloadReceiverFilter.addAction(ACTION_CANCEL_ALL_DOWNLOADS); cancelDownloadReceiverFilter.addAction(ACTION_CANCEL_DOWNLOAD); registerReceiver(cancelDownloadReceiver, cancelDownloadReceiverFilter); syncExecutor = Executors.newSingleThreadExecutor(new ThreadFactory() {  @Override public Thread newThread(Runnable r) { Thread t = new Thread(r); t.setPriority(Thread.MIN_PRIORITY); return t; } }); Log.d(TAG, ""parallel downloads: "" + UserPreferences.getParallelDownloads()); downloadExecutor = new ExecutorCompletionService<Downloader>( Executors.newFixedThreadPool(UserPreferences.getParallelDownloads(), new ThreadFactory() {  @Override public Thread newThread(Runnable r) { Thread t = new Thread(r); t.setPriority(Thread.MIN_PRIORITY); return t; } } ) ); schedExecutor = new ScheduledThreadPoolExecutor(SCHED_EX_POOL_SIZE, new ThreadFactory() {  @Override public Thread newThread(Runnable r) { Thread t = new Thread(r); t.setPriority(Thread.MIN_PRIORITY); return t; } }, new RejectedExecutionHandler() {  @Override public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) { Log.w(TAG, ""SchedEx rejected submission of new task""); } } ); downloadCompletionThread.start(); feedSyncThread = new FeedSyncThread(); feedSyncThread.start();  setupNotificationBuilders(); requester = DownloadRequester.getInstance(); } "	0	1	1	0	1	0
"public FutureData<PylonTags> tags(PylonRecordingId recordingId) { URI uri = newParams().put(""id"", recordingId).forURL(config.newAPIEndpointURI(TAGS)); FutureData<PylonTags> future = new FutureData<>(); Request request = config.http().GET(uri, new PageReader(newRequestCallback(future, new PylonTags(), config))); performRequest(future, request); return future; } "	0	0	1	1	1	0
"protected void addShapedRecipeFirst(List<IRecipe> recipeList, ItemStack itemstack, Object... objArray) { String var3 = """"; int var4 = 0; int var5 = 0; int var6 = 0;  if (objArray[var4] instanceof String[]) { String[] var7 = ((String[]) objArray[var4++]);  for (String var9 : var7) { ++var6; var5 = var9.length(); var3 = var3 + var9; } } else { while (objArray[var4] instanceof String) { String var11 = (String) objArray[var4++]; ++var6; var5 = var11.length(); var3 = var3 + var11; } }  HashMap<Character, ItemStack> var12;  for (var12 = new HashMap<>(); var4 < objArray.length; var4 += 2) { Character var13 = (Character) objArray[var4]; ItemStack var14 = null;  if (objArray[var4 + 1] instanceof Item) { var14 = new ItemStack((Item) objArray[var4 + 1]); } else if (objArray[var4 + 1] instanceof Block) { var14 = new ItemStack((Block) objArray[var4 + 1], 1, Short.MAX_VALUE); } else if (objArray[var4 + 1] instanceof ItemStack) { var14 = (ItemStack) objArray[var4 + 1]; }  var12.put(var13, var14); }  ItemStack[] var15 = new ItemStack[var5 * var6];  for (int var16 = 0; var16 < var5 * var6; ++var16) { char var10 = var3.charAt(var16);  if (var12.containsKey(Character.valueOf(var10))) { var15[var16] = var12.get(Character.valueOf(var10)).copy(); } else { var15[var16] = null; } }  ShapedRecipes var17 = new ShapedRecipes(var5, var6, var15, itemstack); recipeList.add(0, var17); } "	0	0	1	0	0	0
"@Override public boolean addTaxonomy(IStorageProvider storageProvider, TaxonomyBean taxonomyBean) throws RegistryException { Registry registry = getGovernanceUserRegistry(); Resource resource; String name; OMElement element = null; element = buildOMElement(taxonomyBean.getPayload()); name = element.getAttributeValue(new QName(""name""));  if (!getGovernanceUserRegistry().resourceExists(TAXONOMY_CONFIGURATION_PATH + name)) { resource = new ResourceImpl(); resource.setMediaType(TAXONOMY_MEDIA_TYPE); resource.setContent(taxonomyBean.getPayload()); registry.put(TAXONOMY_CONFIGURATION_PATH + name, resource); storageProvider.addTaxonomy(taxonomyBean); } else { return false; } return true; } "	0	0	0	1	1	0
private boolean revokeGoogleFitPermissions() { AlertDialog.Builder builder = new AlertDialog.Builder(this); builder.setTitle(R.string.confirm_google_fit_revoke_permissions_title); builder.setMessage(getString(R.string.confirm_google_fit_revoke_permissions)); builder.setIcon(R.drawable.sa_ic_fit); builder.setPositiveButton(getString(R.string.yes), new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int id) { dialog.dismiss(); googleFitAPIHelper.revokeFitPermissions(MainActivity.this, MainActivity.this); } }); builder.setNegativeButton(getString(R.string.no), new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int id) { dialog.dismiss(); } }); AlertDialog alert = builder.create(); alert.show(); return true; } 	0	0	1	0	0	0
@Before public void setUp(){ initMocks(this); zetesController=new ZetesController(); zetesController.subjectService = subjectService; } 	0	0	1	0	1	0
"@Override public void onScanCompleted(String path, Uri uri) { super.onScanCompleted(path, uri);  /* * According to the Android API, media files stored in Context.getExternalFilesDir[s]() * should be indexed by the Media Scanner. * * Unfortunately, the Android framework has a bug there: The files are indexed into the Media * Store, but not as ""photos"" or ""videos"", but as generic ""files"". As such they won't show * up in the Android Gallery app. * * https://code.google.com/p/android/issues/detail?id=68056#c1 explains this * and suggests a workaround. The following code is an implementation of that workaround. * * Starting with API 21, Android has extended its API with Context.getExternalMediaDirs(), * which works as advertised. * * So this workaround is only necessary on API levels 19 and 20. */ if (uri.getPath().startsWith(""/external/file"")) { ContentResolver contentResolver = SeadroidApplication.getAppContext().getContentResolver(); // if a files has just been added as a generic ""file"", fix the MediaStore and change the // file type to image or video.  ContentValues v = new ContentValues(); String mimeType = Utils.getFileMimeType(path);  if (mimeType.startsWith(""image/"")) { v.put(MediaStore.Files.FileColumns.MEDIA_TYPE, MediaStore.Files.FileColumns.MEDIA_TYPE_IMAGE); } else if (mimeType.startsWith(""video/"")) { v.put(MediaStore.Files.FileColumns.MEDIA_TYPE, MediaStore.Files.FileColumns.MEDIA_TYPE_VIDEO); }  int rows = contentResolver.update(uri, v, null, null); Log.d(DEBUG_TAG, ""-> rows="" + rows); } } "	0	0	1	0	1	0
public String getRefreshToken() { return refreshToken; } 	0	0	1	0	0	0
public String getScopeId() { return scopeId; } 	0	0	1	0	0	0
"public void testOpenSimpleXliff() throws IOException, URISyntaxException, XMLStreamException { ocelotApp.openFile(loadResource(""/test.xlf""), false); assertEquals(""en"", ocelotApp.getFileSourceLang()); assertEquals(""fr"", ocelotApp.getFileTargetLang()); assertTrue(ocelotApp.hasOpenFile()); assertFalse(ocelotApp.isFileDirty()); } "	0	0	1	0	1	0
@Before public void setUp() throws Exception { setFixture(GraphFactory.createLabel()); } 	1	0	0	0	0	0
private static int [] zzUnpackRowMap() { int [] result = new int[771]; int offset = 0; offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result); return result; } 	0	0	1	0	1	0
"private void processJsInteropDomEvent(final List<Statement> initStmts, final String dataFieldElementsVarName, final Statement fieldsMap, final Statement instance, final Map<String, MetaClass> dataFieldTypes, final MetaClass declaringClass, final MetaMethod method, final String[] targetDataFieldNames, final MetaClass eventType, final FactoryController controller) { final String[] browserEventTypes = Optional .ofNullable(method.getParameters()[0].getAnnotation(ForEvent.class)) .map(anno -> anno.value()) .filter(value -> value.length > 0) .orElseGet(() -> eventType.getAnnotation(BrowserEvent.class).value());  for (final String dataFieldName : targetDataFieldNames) { final ObjectBuilder listener = ObjectBuilder .newInstanceOf(org.jboss.errai.common.client.dom.EventListener.class) .extend() .publicOverridesMethod(""call"", Parameter.of(org.jboss.errai.common.client.dom.Event.class, ""event"")) .append(InjectUtil.invokePublicOrPrivateMethod(controller, method, castTo(eventType, loadVariable(""event"")))) .finish() .finish(); final ContextualStatementBuilder elementStmt; if (dataFieldTypes.containsKey(dataFieldName)) { final MetaClass fieldType = dataFieldTypes.get(dataFieldName); if (fieldType.isAssignableTo(Widget.class)) { elementStmt = castTo(Widget.class, nestedCall(fieldsMap).invoke(""get"", dataFieldName)); } else { elementStmt = nestedCall(fieldsMap).invoke(""get"", dataFieldName); } } else { elementStmt = loadVariable(dataFieldElementsVarName).invoke(""get"", dataFieldName); } final String listenerVarName = ""listenerFor"" + eventType.getName() + ""Calling"" + capitalize(method.getName()); initStmts.add(declareFinalVariable(listenerVarName, org.jboss.errai.common.client.dom.EventListener.class, listener)); for (final String browserEventType : browserEventTypes) { initStmts.add(invokeStatic(TemplateUtil.class, ""setupBrowserEventListener"", instance, elementStmt, loadVariable(listenerVarName), loadLiteral(browserEventType))); } } } "	0	0	0	0	0	1
"@Test public void testSaveAllResultsConnectionFailedCacheResults() throws Exception { when(properties.getServiceType()).thenReturn(""passive""); final String queueName = ""check_results""; when(properties.getServerQueue()).thenReturn(queueName); final String host = ""99.99.99.20""; when(properties.getServerHost()).thenReturn(host); final int port = 4730; when(properties.getServerPort()).thenReturn(port); when(properties.getNagiosHost()).thenReturn(""win7sakuli""); when(properties.isCacheEnabled()).thenReturn(true);  when(checkResultBuilder.build()).thenReturn(new NagiosCachedCheckResult(queueName, ""sakuli_demo22__2015_03_07_12_59_00_00"", testResult));  GearmanClient gearmanClient = mock(GearmanClientImpl.class); doReturn(gearmanClient).when(testling).getGearmanClient(); GearmanJobServerConnection connection = mock(GearmanJobServerConnection.class); doReturn(connection).when(testling).getGearmanConnection(host, port); when(gearmanClient.addJobServer(connection)).thenReturn(false);  when(gearmanCacheService.getCachedResults()).thenReturn(Collections.emptyList());  doAnswer(invocationOnMock -> { Assert.assertEquals(((List) invocationOnMock.getArguments()[0]).size(), 1L); return null; }).when(gearmanCacheService).cacheResults(anyList());  testling.saveAllResults();  //checks verify(gearmanCacheService).cacheResults(anyList()); verify(gearmanCacheService).getCachedResults(); verify(exceptionHandler).handleException(any(Throwable.class), eq(true)); verify(testling).getGearmanClient(); verify(testling).getGearmanConnection(host, port); verify(gearmanClient).addJobServer(connection); verify(gearmanClient).shutdown(); } "	0	0	1	1	1	0
@Override public void onClick(View v) { ContextUtils.getApplicationContext().startActivity(createListUrlsIntent()); } 	0	0	1	0	1	0
public ArrayList<Creature> getCreatures() { return this.creatures; } 	0	0	0	1	0	0
"@Test public void itShouldLoadDocumentWithReader() throws URISyntaxException, IOException { final URI uri = getClass().getResource(""/items/item-187-1126.xml"").toURI(); final IITSDocument iitsDocument; try (final InputStream is = new FileInputStream(new File(uri))) { when(itemReader.readData(uri)).thenReturn(IOUtils.toString(is)); iitsDocument = ITSDocumentFactory.load(uri, null, itemReader, false); }  assertEquals(""I-187-1126"", iitsDocument.getIDString()); assertEquals(""MC"", iitsDocument.getAttributeFormat()); assertEquals(""8"", iitsDocument.getLayout()); assertEquals(""<p style=\""font-weight:normal; \"">Which shows the fractions in the correct location on the number line?</p>"", iitsDocument.getContent(""ENU"").getStem()); } "	0	0	1	0	1	0
"@Test public void getCellsWithIndexesTest(){ int[] cellPoints = {0, 1, 2, 3}; List<TestCell> cells = testSurface.waitForCells(cellPoints);  assertNotNull(""Nothing was returned"", cells);  TestCell[] cellArray = cells.toArray(new TestCell[cells.size()]); for (int i = 0; i < cellArray.length; i++){ Point testPoint = cellArray[i].getPosition(); Integer testIndex = SurfaceMap.calcIndex(testPoint.getX(), testPoint.getY(), MAP_SIZE); Integer expectedIndex = cellPoints[i]; assertEquals(""Cell Indexes don't match"", expectedIndex, testIndex); } testSurface.release(cells.toArray(new TestCell[cellArray.length])); } "	0	0	1	0	1	0
"public static String getMessage(String loc, String... args) { String raw = messages.getString(loc); if (raw == null || raw.isEmpty()) { return ""Invalid message: "" + loc; } if (args == null) { return raw; } for (int i = 0; i < args.length; i++) { raw = raw.replace(""{"" + i + ""}"", args[i]);		//TODO Nullpointer? } return raw; } "	0	0	1	0	1	0
"public Conjunction<U, R, G, S, F, O> byModified(Order order) { appendOrder(""updated"", order); return conjunction; } "	0	0	1	0	1	0
"@Override public int getStartHour() { return new Integer(_element.getFirstChildElement(""startHour"").getValue()).intValue(); } "	0	0	1	0	1	0
"@Override public int getEndHour() { return new Integer(_element.getFirstChildElement(""endHour"").getValue()).intValue(); } "	0	0	1	0	1	0
@Override public void onClick(View view) { LocalDateTime dateTime = LocalDateTime.now(); DatePickerDialog datePicker = DatePickerDialog.newInstance(WalletFragment.this, dateTime.getYear(), dateTime.getMonthOfYear(), dateTime.getDayOfYear()); datePicker.setThemeDark(true); datePicker.show(getFragmentManager(), getResources().getText(R.string.text_pick_date).toString()); } 	0	0	0	1	0	0
Observable<Void> getRecentPagesUpdatedObservable() { return recentPagesUpdatedObservable; } 	0	0	1	0	0	0
private void addApertureSizeUI(){ // label final Label name = new Label(getApertureSizeText(), largeLabelStyle);  // slider final HorzSlider slider = new HorzSlider(0.0f, 5.0f, 0.0001f, false, skin); slider.setValue(ConfigManager.getApertureSize()); enlargeSlider(slider); slider.addListener(new ChangeListener() { @Override public void changed(ChangeEvent event, Actor actor) { ConfigManager.setApertureSize(slider.getValue()); name.setText(getApertureSizeText()); } });   canvas.add(name); canvas.add(slider).colspan(tableColumnSpan - 1); } 	0	0	1	0	1	0
default <U> Seq<Tuple2<T, U>> leftOuterJoin(Seq<? extends U> other, BiPredicate<? super T, ? super U> predicate) {  // This algorithm isn't lazy and has substantial complexity for large argument streams! List<? extends U> list = other.toList();  return flatMap(t -> seq(list) .filter(u -> predicate.test(t, u)) .onEmpty(null) .map(u -> tuple(t, u))) .onClose(other::close); } 	0	0	1	1	0	0
"public void doChase(Scenario scenario, boolean cleanTarget) { if (!scenario.isDBMS()) { throw new DBMSException(""Unable to generate SQL: data sources are not on a dbms""); } long start = new Date().getTime(); if (logger.isDebugEnabled()) logger.debug(""Generating script for st tgds on scenario: "" + scenario); DBMSDB target = (DBMSDB) scenario.getTarget(); AccessConfiguration accessConfiguration = (target).getAccessConfiguration(); LunaticDBMSUtility.createWorkSchema(accessConfiguration, scenario); createFunctionsForNumericalSkolems(scenario); if (scenario.getSTTgds().isEmpty()) { return; } if (LunaticConfiguration.isPrintSteps()) System.out.println(""****Chasing scenario for s-t tgds...""); Set<Dependency> dependenciesToMaterialize = findDependenciesToMaterialize(scenario.getSTTgds(), scenario); //        Set<Dependency> dependenciesToMaterialize = new HashSet<Dependency>(scenario.getSTTgds()); if (logger.isDebugEnabled()) logger.debug(""Dependencies to materialize: "" + dependenciesToMaterialize); StringBuilder result = new StringBuilder(); result.append(""BEGIN TRANSACTION;\n""); result.append(""SET CONSTRAINTS ALL DEFERRED;\n\n""); result.append(this.generateScript(scenario, dependenciesToMaterialize)); if (cleanTarget) { result.append(cleanTargetScript(scenario)); } result.append(targetInsertQuery.generateScript(scenario, dependenciesToMaterialize)); result.append(""\nCOMMIT;\n""); result.append(""--DROP SCHEMA "").append(LunaticDBMSUtility.getWorkSchema(scenario)).append("" CASCADE;\n""); if (logger.isDebugEnabled()) logger.debug(""----Script for STTGDs: "" + result); QueryManager.executeScript(result.toString(), accessConfiguration, true, true, true, false); long end = new Date().getTime(); ChaseStats.getInstance().addStat(ChaseStats.STTGD_TIME, end - start); if (LunaticConfiguration.isPrintSteps()) System.out.println(""****Chase for s-t tgds completed in "" + (end - start) + ""ms""); } "	0	0	1	0	1	0
private void createComponents() { dialog.setLayout(new BorderLayout()); dialog.setMinimumSize(params.getMinimumSize()); dialog.setTitle(params.getTitle());  // Create message and button panel first because // the controller can call callbacks from inside createBodyPanel() JPanel messagePanel = createMessagePanel(); JPanel buttonPanel  = createButtonPanel(); JPanel bodyPanel    = createBodyPanel();  messagePanel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY)); buttonPanel .setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.LIGHT_GRAY));  dialog.add(messagePanel, BorderLayout.NORTH); dialog.add(bodyPanel,    BorderLayout.CENTER); dialog.add(buttonPanel,  BorderLayout.SOUTH); } 	0	0	1	0	1	0
"@Test @InSequence(6) public void unsetIncrementerProperty() { ConfigFragment editPanelFragment = jcaPage.getConfigFragment(); editPanelFragment.getEditor().text(""capacityIncrementerProperties"", """");  boolean finished = editPanelFragment.save(); assertTrue(""Config should be saved and closed."", finished);  verifier.verifyAttribute(address, ""capacity-incrementer-properties"", ""undefined""); } "	0	0	1	0	1	0
"@Test @InSequence(3) public void unsetDecrementerClass() { ConfigFragment editPanelFragment = jcaPage.getConfigFragment(); editPanelFragment.getEditor().select(""capacityDecrementerClass"", """");  boolean finished = editPanelFragment.save(); assertTrue(""Config should be saved and closed."", finished);  verifier.verifyAttribute(address, ""capacity-decrementer-class"", ""undefined""); } "	0	0	1	0	1	0
@Override public void onSyncProgress(int actionCode) { if(actionCode == SyncService.CA.AUTH) { mApp.ignoreNextPause(); } else if(actionCode == SyncService.CA.DATA_RECEIVED) { mApp.onSyncSucceed(); byte[] data = SyncService.getInstance().requestData(); Application.FileHeader fh = Application.FileHeader.parse(data); if(fh.valid && fh.revision > mApp.getLocalVersion()) { new DecryptTask(data, fh, this).execute(mApp.getPassword()); } else if(fh.revision < mApp.getLocalVersion()){ SyncService.getInstance().send(mApp.getData()); } if(fh.revision != Application.Options.mSyncVersion) { mApp.onVersionUpdated(fh.revision); } } else if(actionCode == SyncService.CA.DATA_SENT) { mApp.onSyncSucceed(); Application.showToast(this, R.string.sync_success_server, Toast.LENGTH_SHORT); mApp.onVersionUpdated(mApp.getLocalVersion()); } } 	0	0	1	0	1	0
"public boolean executeScript(ScriptEvent currentEvent, String scriptName, Object... entities) { List<CachedEntity> scripts = db.getFilteredList(""Script"", ""name"", scriptName); if(scripts.size() > 1) throw new RuntimeException(""Duplicate scripts detected: "" + scriptName); if(scripts.size() == 0) { ScriptService.log.log(Level.ALL, ""Script with internal name "" + scriptName + "" not found.""); return false; } CachedEntity script = scripts.get(0); if(""global"".equals(script.getProperty(""type"")) == false) { ScriptService.log.log(Level.SEVERE, ""Cannot call non-global script through core.executeScript: "" + scriptName); return false; } ScriptService service = ScriptService.getScriptService(db); GlobalEvent event = new GlobalEvent(db, entities); boolean executed = service.executeScript(event, script, (EntityWrapper)null); if(executed) { // Same thing, pass off the saving/deleting of entities to the original context. for(EntityWrapper save:event.getSaveWrappers()) currentEvent.saveEntity(save); for(EntityWrapper delete:event.getDeleteWrappers()) currentEvent.deleteEntity(delete); currentEvent.haltExecution |= event.haltExecution; currentEvent.errorText += event.errorText; currentEvent.descriptionText += event.descriptionText; } return executed; } "	0	0	1	0	1	0
@Override public void runUpdate(JavaSparkContext sparkContext, long timestamp, JavaPairRDD<K,M> newData, JavaPairRDD<K,M> pastData, String modelDirString, TopicProducer<String,U> modelUpdateTopic) { scalaUpdate.configureUpdate(sparkContext.sc(), timestamp, newData.rdd(), pastData.rdd(), modelDirString, modelUpdateTopic); } 	0	0	0	0	0	1
"@Override public final List<Route> getBackRoutes(final WorkItem workItem) throws WorkflowException { log.info(""Synthetic Workflow does not support back routes; Defaults to a single Synthetic Route""); return this.backRoutes; } "	0	0	1	0	1	0
private void configMapper() {  this.mapper.from(Issue.class) .to(ProjectIssuesStateColumnViewModel.class) .forRule((entity, dto, mapper) -> {  dto.setId(entity.getId());  dto.setName(entity.getName());  dto.setCurrentStateName( entity.getCurrentState().getName() != null ? entity.getCurrentState().getName() : null);  dto.setTypeName(entity.getType().getName()); });  this.mapper.from(Project.class) .to(ProjectDashboardViewModel.class) .forRule((entity, dto, mapper) -> {  dto.setId(entity.getId());  dto.setName(entity.getName());  dto.setDescription(entity.getDescription());  dto.setIssuesSize(entity.getIssues().size()); });  this.mapper.from(Project.class) .to(ProjectIssuesDashboardViewModel.class) .forRule((entity, dto, mapper) -> {  dto.setId(entity.getId());  dto.setName(entity.getName());  dto.setIssues(entity.getIssues() .stream() .map(issue -> this.mapper.map(issue, IssuesDashboardViewModel.class)) .collect(Collectors.toSet()));  dto.setProjectManagerUsername(entity.getProjectManager().getUsername());  dto.setSelectedStates(entity.getSelectedStates() .stream() .map(selectedState -> this.mapper .map(selectedState, SelectedStateIssueDashboardViewModel.class)) .collect(Collectors.toSet())); });  this.mapper.from(SelectedState.class) .to(SelectedStateIssueDashboardViewModel.class) .forRule((entity, dto, mapper) -> {  dto.setId(entity.getId());  dto.setName(entity.getName());  boolean isLocal = entity.getLocalState() != null; dto.setLocal(isLocal);  dto.setProjectIssues(entity.getProject().getIssues() .stream() .map(issue -> this.mapper.map(issue, IssuesDashboardViewModel.class)) .collect(Collectors.toSet())); });  this.mapper.from(SelectedState.class) .to(StateModalViewModel.class) .forRule((entity, dto, mapper) -> {  dto.setId(entity.getId());  dto.setName(entity.getName());  boolean isLocal = entity.getLocalState() != null;  dto.setLocal(isLocal); });  this.mapper.from(SelectedState.class) .to(StateColumnViewModel.class) .forRule((entity, dto, mapper) -> {  dto.setId(entity.getId());  dto.setName(entity.getName());  boolean isLocal = entity.getLocalState() != null;  dto.setLocal(isLocal);  dto.setProjectIssues(entity.getProject().getIssues() .stream() .map(issue -> this.mapper.map(issue, ProjectIssuesStateColumnViewModel.class)) .collect(Collectors.toSet())); });  this.mapper.from(Type.class) .to(TypeIssueDashboardViewModel.class) .forRule((entity, dto, mapper) -> {  dto.setId(entity.getId());  dto.setName(entity.getName()); });  this.mapper.from(Type.class) .to(TypeViewModel.class) .forRule((entity, dto, mapper) -> {  dto.setId(entity.getId());  dto.setName(entity.getName()); });  this.mapper.from(Issue.class) .to(IssuesDashboardViewModel.class) .forRule((entity, dto, mapper) -> {  dto.setId(entity.getId());  dto.setName(entity.getName());  dto.setTypeName(entity.getType().getName());  //TODO: this logic should be in the dao boolean isLocal = entity.getLocalState() != null; boolean isBacklogged = entity.getApplicationState() == null && entity.getLocalState() == null;  if (isBacklogged) { dto.setCurrentStateName(null); return; }  if (!isLocal) { entity.setCurrentState(entity.getApplicationState()); dto.setCurrentStateName(entity.getCurrentState().getName()); return; }  entity.setCurrentState(entity.getLocalState()); dto.setCurrentStateName(entity.getCurrentState().getName()); }); } 	0	0	1	0	0	0
"public Collection<ItemSale> findByItemBillId(int itemBillId) throws PersistenceException, ClassNotFoundException { try { String query = ""SELECT * FROM item_sales WHERE itembill_id = ?""; connection = ConnectionManager.getInstance().getConnection(); PreparedStatement statement = connection.prepareStatement(query); statement.setInt(1, itemBillId); ResultSet resultSet = statement.executeQuery(); Collection<ItemSale> result = new HashSet<>(); while (resultSet.next()) { ItemSale element = createElementFromResultSet(resultSet); result.add(element); } return result; } catch (SQLException ex) { LOG.log(Level.SEVERE, null, ex); throw new PersistenceException(""Failed to read item sale"", ex); } finally { try { ConnectionManager.getInstance().releaseConnection(); } catch (SQLException ex) { LOG.log(Level.SEVERE, null, ex); } } } "	0	0	1	0	1	0
"@Override public Object getAsObject(FacesContext context, UIComponent component, String value) throws ConverterException { if (value == null) { return null; } else { try { return new RegelsatzDAO().get(new Integer(value)); } catch (NumberFormatException e) { logger.error(e); return ""0""; } catch (DAOException e) { logger.error(e); return ""0""; } } } "	0	0	1	0	1	0
public static Geolocation get(String ip) { if (!cacheOn) return null; return (Geolocation) Cache.get(ip); } 	0	0	0	0	0	1
public ApexCompiler visitAstsFromStrings(List<String> sources, AstVisitor<AdditionalPassScope> visitor, CompilerStage compilerStage) { List<SourceFile> sourceFiles = sources.stream() .map(s -> SourceFile.builder().setBody(canonicalizeString(s)).build()).collect(Collectors.toList()); CompilationInput compilationUnit = createCompilationInput(sourceFiles, visitor); return compile(compilationUnit, visitor, compilerStage); } 	0	0	1	1	0	0
@Override final public < P extends PointMatch >boolean test( final Collection< P > candidates, final Collection< P > inliers, final double epsilon, final double minInlierRatio, final int minNumInliers ) { inliers.clear();  for ( final P m : candidates ) { m.apply( this ); if ( m.getDistance() < epsilon ) inliers.add( m ); }  final double ir = inliers.size() / candidates.size(); setCost( Math.max( 0.0, Math.min( 1.0, 1.0 - ir ) ) );  return ( inliers.size() >= minNumInliers && ir > minInlierRatio ); } 	0	0	0	1	1	0
public static int getCachedMessagesSize() { return CACHE.getCachedMessagesCount(); } 	1	0	1	0	0	0
"private static boolean isClientAuthorized(String subjectName, String requestTarget) { String clientCN = SecurityUtils.getCertCNFromSubject(subjectName); String serverCN = (String) configuration.getProperty(""server_common_name"");  if (!SecurityUtils.isCommonNameArrowheadValid(clientCN)) { log.info(""Client cert does not have 6 parts, so the access will be denied.""); return false; }  if (requestTarget.endsWith(""register"") || requestTarget.endsWith(""remove"")) { // All requests from the local cloud are allowed, so omit the first 2 parts of the common names (systemName.systemGroup) String[] serverFields = serverCN.split(""\\."", 3); String[] clientFields = clientCN.split(""\\."", 3); // serverFields contains: coreSystemName, coresystems, cloudName.operator.arrowhead.eu  // If this is true, then the certificates are from the same local cloud return serverFields[2].equalsIgnoreCase(clientFields[2]); } else if (requestTarget.endsWith(""query"")) { // Only requests from the Orchestrator and Gatekeeper are allowed String[] serverFields = serverCN.split(""\\."", 2); // serverFields contains: coreSystemName, coresystems.cloudName.operator.arrowhead.eu  // If this is true, then the certificate is from the local Orchestrator or Gatekeeper return clientCN.equalsIgnoreCase(""orchestrator"" + serverFields[1]) || clientCN.equalsIgnoreCase(""gatekeeper"" + serverFields[1]); }  return false; } "	0	0	1	1	0	0
@Test public void testUpdateWithoutVersionControl(){ User user = userService.selectById(11); Assert.assertEquals(1, user.getAge().intValue()); user.setVersion(null); user.setAge(2); userService.updateById(user); user = userService.selectById(11); Assert.assertEquals(2, user.getAge().intValue()); Assert.assertEquals(1, user.getVersion().intValue()); } 	0	0	0	1	1	0
protected StandLockConfig getStandLockConfig() { return config; } 	0	0	0	1	0	0
"@Transactional public Result submitChangedPassword(String email) throws JatosGuiException, UnsupportedEncodingException, NoSuchAlgorithmException { Logger.info(CLASS_NAME + "".submitChangedPassword: "" + ""email "" + email + "", "" + ""logged-in user's email "" + session(Users.SESSION_EMAIL)); UserModel loggedInUser = userService.retrieveLoggedInUser(); UserModel user = null; try { user = userService.retrieveUser(email); userService.checkUserLoggedIn(user, loggedInUser); } catch (BadRequestException | ForbiddenException e) { jatosGuiExceptionThrower.throwRedirect(e, controllers.gui.routes.Home.home()); } Form<UserModel> form = Form.form(UserModel.class).fill(user);  DynamicForm requestData = Form.form().bindFromRequest(); String newPassword = requestData.get(UserModel.NEW_PASSWORD); String newPasswordRepeat = requestData.get(UserModel.PASSWORD_REPEAT); String oldPasswordHash = userService.getHashMDFive(requestData .get(UserModel.OLD_PASSWORD)); List<ValidationError> errorList = userService.validateChangePassword( user, newPassword, newPasswordRepeat, oldPasswordHash); if (!errorList.isEmpty()) { return showChangePasswordAfterError(loggedInUser, form, errorList, Http.Status.BAD_REQUEST, loggedInUser); } String newPasswordHash = userService.getHashMDFive(newPassword); userService.changePasswordHash(user, newPasswordHash);  return redirect(controllers.gui.routes.Users.profile(email)); } "	0	0	1	0	1	0
private boolean isClipObjectStarred(String string) { List<ClipObject> allClips = getClipHistory(); for (ClipObject clipObject: allClips) { if (clipObject.getText().equals(string)) { return clipObject.isStarred(); } } return false; } 	0	0	0	1	0	0
"private Iterator<ServerIssue> fetchServerIssues(ServerConfiguration serverConfiguration, ConnectedSonarLintEngine engine, String moduleKey, IResource resource) { String fileKey = toFileKey(resource);  try { LOGGER.debug(""fetchServerIssues moduleKey="" + moduleKey + "", filepath="" + resource.getFullPath()); return engine.downloadServerIssues(serverConfiguration, moduleKey, fileKey); } catch (DownloadException e) { console.info(e.getMessage()); return engine.getServerIssues(moduleKey, fileKey); } } "	0	0	0	1	0	0
"@Override public final void action( final ExecutorService anExecutorService, final BlockingQueue<Task> aBlockingQueue, final Storage aStorage) { if (this.task.getNativeId() == null) { anExecutorService.execute(new Submitter(this.task, aStorage)); log.debug(""Submitted the task: "" + this.task.getId()); } else { this.task.setState(Task.STATE.SCHEDULED); } } "	0	0	1	0	1	0
@Override public IInteger[] divideAndRemainder(final IInteger that) { final IInteger[] res = new BigIntegerSym[2]; BigInteger[] largeRes = fBigIntValue.divideAndRemainder(that.toBigNumerator()); res[0] = valueOf(largeRes[0]); res[1] = valueOf(largeRes[1]);  return res; } 	0	0	1	0	1	0
"@Override protected Boolean doInBackground(Void... voids) { try { YouTube.Videos.List videosList = YouTubeAPI.create().videos().list(""snippet""); videosList.setFields(""items(id)""); videosList.setKey(youtubeAPIKeyPref.getText()); videosList.setChart(""mostPopular""); String regionCode = SkyTubeApp.getPreferenceManager().getString(SkyTubeApp.getStr(R.string.pref_key_preferred_region), """").trim(); videosList.setRegionCode(regionCode.isEmpty() ? null : regionCode); videosList.setMaxResults(1l); videosList.execute(); } catch (IOException e) { return true; } return false; } "	0	0	1	0	1	0
private ImageIcon getScaledImage(String path) { ImageIcon imageIcon = null; try { imageIcon = getScaledImage(ImageIO.read(getClass().getResource(path))); } catch (IOException e) { e.printStackTrace(); } return imageIcon; } 	0	0	1	1	0	0
@Override public boolean isXA() { return jdbcConn instanceof XAConnection; } 	1	0	1	0	0	0
"public void writeSocket(@NotNull final WireOut wire, boolean reconnectOnFailure) {   assert outBytesLock().isHeldByCurrentThread();  try {  SocketChannel clientChannel = this.clientChannel;  // wait for the channel to be non null if (clientChannel == null) { if (reconnectOnFailure) condition.await(10, TimeUnit.SECONDS); else return; }   writeSocket1(wire, clientChannel); } catch (ClosedChannelException e) { closeSocket(); if (reconnectOnFailure) throw new ConnectionDroppedException(e); } catch (IOException e) { if (!""Broken pipe"".equals(e.getMessage())) LOG.error("""", e); closeSocket(); throw new ConnectionDroppedException(e);  } catch (Exception e) { LOG.error("""", e); closeSocket(); throw new ConnectionDroppedException(e); } } "	0	0	1	0	1	0
public double min() { if (!hasCapacity()) { return data[0]; } else { return StatUtils.min(data); } } 	0	0	1	0	1	0
private FieldValue convert(Map.Entry<String, JsonNode> entry) { Optional<String> register = fieldsConfiguration.getField(entry.getKey()).getRegister(); return register.isPresent() ? new LinkValue(register.get(), entry.getKey(), entry.getValue().textValue()) : new StringValue(entry.getValue().textValue()); } 	1	1	1	1	0	0
"@GET @Produces(MediaType.APPLICATION_JSON) @Path(""/{id}/generate"") public JobExecutionResource generateCohort(@PathParam(""id"") final int id) {  CohortDefinition currentDefinition = this.cohortDefinitionRepository.findOneWithDetail(id); CohortGenerationInfo info = currentDefinition.getGenerationInfo(); if (info == null) { info = new CohortGenerationInfo().setCohortDefinition(currentDefinition); currentDefinition.setGenerationInfo(info); } info.setStatus(GenerationStatus.PENDING) .setStartTime(Calendar.getInstance().getTime());  this.cohortDefinitionRepository.save(currentDefinition);  JobParametersBuilder builder = new JobParametersBuilder(); builder.addString(""cdm_database_schema"", this.getCdmSchema()); builder.addString(""target_database_schema"", this.getOhdsiSchema()); builder.addString(""target_dialect"", this.getDialect()); builder.addString(""target_table"", ""cohort""); builder.addString(""cohort_definition_id"", ("""" + id));  final JobParameters jobParameters = builder.toJobParameters();  log.info(String.format(""Beginning generate cohort for cohort definition id: \n %s"", """" + id));  GenerateCohortTasklet generateTasklet = new GenerateCohortTasklet(getJdbcTemplate(), getTransactionTemplate(), cohortDefinitionRepository);  Step generateCohortStep = stepBuilders.get(""cohortDefinition.generateCohort"") .tasklet(generateTasklet) .exceptionHandler(new TerminateJobStepExceptionHandler()) .build();  Job generateCohortJob = jobBuilders.get(""generateCohort"") .start(generateCohortStep) .build();  JobExecutionResource jobExec = this.jobTemplate.launch(generateCohortJob, jobParameters); return jobExec;  } "	0	0	1	0	1	0
public void setRequiredTranslations(String... translationCodes) { requiredTranslations = Sets.newLinkedHashSet(Arrays.asList(translationCodes)); validateUserSpecifiedLanguageCodes(requiredTranslations); } 	0	0	1	1	1	0
"protected Object[] createRawDataHeader(Workbook wb, Sheet sheet, Map<QuestionGroupDto, List<QuestionDto>> questionMap, boolean useQuestionId) { Row row = null;  row = getRow(0, sheet);  int columnIdx = 0;  if (monitoringGroup) { createCell(row, columnIdx++, IDENTIFIER_LABEL.get(locale), headerStyle); createCell(row, columnIdx++, DISPLAY_NAME_LABEL.get(locale), headerStyle); }  createCell(row, columnIdx++, INSTANCE_LABEL.get(locale), headerStyle); createCell(row, columnIdx++, SUB_DATE_LABEL.get(locale), headerStyle); createCell(row, columnIdx++, SUBMITTER_LABEL.get(locale), headerStyle); createCell(row, columnIdx++, DURATION_LABEL.get(locale), headerStyle);  List<String> questionIdList = new ArrayList<String>(); List<String> nonSummarizableList = new ArrayList<String>();  if (questionMap != null) { int offset = columnIdx; for (QuestionGroupDto group : orderedGroupList) { if (questionMap.get(group) != null) { for (QuestionDto q : questionMap.get(group)) { questionIdList.add(q.getKeyId().toString());  String questionId = q.getQuestionId(); boolean useQID = useQuestionId && questionId != null && !questionId.equals("""");  String columnLocale = useQID ? ""en"" : locale;  if (QuestionType.GEO == q.getType()) { createCell(row, offset++, (useQID ? questionId + ""_"" : q.getKeyId().toString() + ""|"") + LAT_LABEL.get(columnLocale), headerStyle); createCell(row, offset++, (useQID ? questionId + ""_"" : ""--GEOLON--|"") + LON_LABEL.get(columnLocale), headerStyle); createCell(row, offset++, (useQID ? questionId + ""_"" : ""--GEOELE--|"") + ELEV_LABEL.get(columnLocale), headerStyle); String codeLabel = CODE_LABEL.get(columnLocale); createCell(row, offset++, useQID ? questionId + ""_"" + codeLabel.replaceAll(""\\s"", """") : ""--GEOCODE--|"" + codeLabel, headerStyle); } else if (QuestionType.CASCADE == q.getType() && q.getLevelNames() != null) { for (String level : q.getLevelNames()) { createCell(row, offset++, q.getKeyId() + ""|"" + level, headerStyle); } } else { String header = """"; if (useQID) { header = questionId; } else { header = q.getKeyId().toString() + ""|"" + getLocalizedText(q.getText(), q.getTranslationMap()) .replaceAll(""\n"", """") .trim(); } createCell( row, offset++, header, headerStyle); } if (!(QuestionType.NUMBER == q.getType() || QuestionType.OPTION == q .getType())) { nonSummarizableList.add(q.getKeyId().toString()); } } } } } Object[] temp = new Object[2]; temp[0] = questionIdList; temp[1] = nonSummarizableList; return temp; } "	0	0	1	0	0	0
"protected static void checkPWMChannel(final int channel) { if (!PWMJNI.checkPWMChannel(channel)) { StringBuilder buf = new StringBuilder(); buf.append(""Requested PWM channel is out of range. Minimumm: 0, Maximum: "") .append(kPwmChannels) .append("", Requested: "") .append(channel); throw new IndexOutOfBoundsException(buf.toString()); } } "	0	0	0	1	0	0
"protected static void checkSolenoidModule(final int moduleNumber) { if (!SolenoidJNI.checkSolenoidModule(moduleNumber)) { StringBuilder buf = new StringBuilder(); buf.append(""Requested solenoid module is out of range. Minimumm: 0, Maximum: "") .append(kPCMModules) .append("", Requested: "") .append(moduleNumber); throw new IndexOutOfBoundsException(buf.toString()); } } "	0	0	0	1	0	0
"@Override public String toString() { return ""{\""cellType\"": "" + (cellType != null ? cellType : ""-"") + "", \""areaCode\"": "" + (areaCode != null ? areaCode : ""-"") + "", \""lat\"": "" + lat + "", \""lng\"": "" + lng + '}'; } "	0	0	1	1	0	0
public boolean isAssigned(@NotNull WorkflowTask task, @NotNull User user) { return task.getAssignee() != null && task.getAssignee().equals(String.valueOf(user.getUserId())); } 	0	0	1	1	1	0
@Override public LabelType getColumnLabel(int columnIndex) { return this.rowLabelMap.entrySet().stream().filter(entry -> entry.getValue().equals(columnIndex)).map(Map.Entry::getKey) .findFirst().get(); } 	0	0	0	1	0	0
@Override public void onPostUpdate(PostUpdateEvent postUpdateEvent) { Object eventEntity = postUpdateEvent.getEntity(); MUCAudited annotation = eventEntity.getClass().getAnnotation(MUCAudited.class); if (annotation != null && (annotation.value().equals(MUCAudited.ALL) || annotation.value().equals(MUCAudited.UPDATE))) { BaseEntity entity = (BaseEntity) eventEntity; eventbus.notify(AuditingEvent.class, Event.wrap(new AuditingEvent(de.muenchen.vaadin.demo.api.util.EventType.AUDIT_UPDATE, entity))); } } 	0	0	1	0	1	0
@Override public void onPostDelete(PostDeleteEvent postDeleteEvent) { Object eventEntity = postDeleteEvent.getEntity(); MUCAudited annotation = eventEntity.getClass().getAnnotation(MUCAudited.class); if (annotation != null && (annotation.value().equals(MUCAudited.ALL) || annotation.value().equals(MUCAudited.DELETE))) { BaseEntity entity = (BaseEntity) eventEntity; eventbus.notify(AuditingEvent.class, Event.wrap(new AuditingEvent(de.muenchen.vaadin.demo.api.util.EventType.AUDIT_DELETE, entity))); } } 	0	0	1	0	1	0
"@Override public void run(final CommandSender cs, String label, String[] args) { if (!r.isPlayer(cs)) { return; } Player p = (Player) cs; if (!r.perm(p, ""uc.sethome"", true, true)) { return; } if (r.checkArgs(args, 0) && args[0].contains("":"")) { if (!r.perm(p, ""uc.sethome.others"", true, true)) { return; } OfflinePlayer t = r.searchOfflinePlayer(args[0].split("":"")[0]); if (t == null || (!t.hasPlayedBefore() && !t.isOnline())) { r.sendMes(cs, ""playerNotFound"", ""%Player"", args[0].split("":"")[0]); return; } List<String> homes = UC.getPlayer(t).getHomeNames(); if (homes.contains(args[0])) { r.sendMes(cs, ""sethomeMoved"", ""%Home"", args[0]); } else { r.sendMes(cs, ""sethomeSet"", ""%Home"", args[0]); } if (!homes.contains(args[0].toLowerCase().split("":"")[1])) { homes.add(args[0].toLowerCase().split("":"")[1]); } UC.getPlayer(t).addHome(args[0].toLowerCase().split("":"")[1], p.getLocation()); return; } Set<String> multihomes = r.getCnfg().getConfigurationSection(""Command.HomeLimits"").getKeys(false); Integer limit = 1; if (multihomes != null) { for (String s : multihomes) { if (r.perm(cs, ""uc.sethome."" + s.toLowerCase(), false, false)) { if (limit < r.getCnfg().getInt(""Command.HomeLimits."" + s)) { limit = r.getCnfg().getInt(""Command.HomeLimits."" + s); } } } } if (r.perm(cs, ""uc.sethome.unlimited"", false, false)) { limit = 999999; } List<String> homes = UC.getPlayer(p).getHomeNames(); if (homes.size() >= limit) { r.sendMes(cs, ""sethomeMax"", ""%Limit"", ""%Limit"", limit); return; } String name = r.checkArgs(args, 0) ? args[0] : ""home""; if (homes.contains(name)) { r.sendMes(cs, ""sethomeMoved"", ""%Home"", name); } else { r.sendMes(cs, ""sethomeSet"", ""%Home"", name); } if (!homes.contains(name.toLowerCase())) { homes.add(name.toLowerCase()); } UC.getPlayer(p).addHome(name.toLowerCase(), p.getLocation()); } "	0	0	1	0	0	0
"public void testEndSession_moreThanZeroDuration() { connQ.endSession(15); final ArgumentCaptor<String> arg = ArgumentCaptor.forClass(String.class); verify(connQ.getCountlyStore()).addConnection(arg.capture()); verify(connQ.getExecutor()).submit(any(ConnectionProcessor.class));  // verify query parameters final String queryStr = arg.getValue(); final Map<String, String> queryParams = parseQueryParams(queryStr); assertEquals(connQ.getAppKey(), queryParams.get(""app_key"")); assertNull(queryParams.get(""device_id"")); final long curTimestamp = Countly.currentTimestampMs(); final int actualTimestamp = Integer.parseInt(queryParams.get(""timestamp"")); // this check attempts to account for minor time changes during this test assertTrue(((curTimestamp-1) <= actualTimestamp) && ((curTimestamp+1) >= actualTimestamp)); assertEquals(""1"", queryParams.get(""end_session"")); assertEquals(""15"", queryParams.get(""session_duration"")); } "	0	0	1	0	1	0
@Override public void mouseDragged(MouseEvent e) { if (!movementEnabled || !isMoving) return; // Is only the selected mouse button pressed? if ((e.getModifiersEx() & MOUSE_BUTTONS_MASK) == movementMouseButtonMask || isPlatformOsx() && e.getModifiersEx() == MAC_MOUSE_BUTTON3_MASK) { Point p = e.getPoint(); if (lastDragPoint != null) { int diffx = lastDragPoint.x - p.x; int diffy = lastDragPoint.y - p.y; map.moveMap(diffx, diffy); } lastDragPoint = p; } } 	1	1	1	1	0	0
"private boolean execute() { try { String updaterScriptPath = ""infrastructure/updater.py""; StringBuilder studentGitArguments = new StringBuilder();  String exerciseType = findExerciseType(); List<String> command = new ArrayList<>(); command.addAll(Arrays.asList( ""python"", updaterScriptPath, ""--exname"", title, ""--extype"", findExerciseType(), ""--studentidx"", studentIdx ));  ProcessBuilder pb = new ProcessBuilder(command); pb.redirectErrorStream(true);  Process process = pb.start();  BufferedReader input = new BufferedReader(new InputStreamReader(process.getInputStream())); String line = null; String lastLine = null; while ((line = input.readLine()) != null) { System.out.println(line); lastLine = line; } int code = process.waitFor(); System.out.println(""Return code was "" + code + ""\n""); System.out.println(""Last line was: "" + lastLine);  if (code == 1) { return false; } else if (code == 34) { // Send message that no update was found ConnUtils.sendStatusInfo(conn, ""No updates found: "" + title, Color.GREEN, 60); return true; }  if (lastLine != null && lastLine.charAt(0) == '#') { String[] level1Split = lastLine.split(""=""); if (level1Split.length != 2) { System.out.println(""Invalid""); return false; } String s = level1Split[1];  // split the hash // This split removes the final part containing // _out/postpro.json String firstpart = s.substring(0, s.length() - 17); // This part splits on slashes String[] slashsplit = firstpart.split(""/""); // now get the last piece of the split String befhash = slashsplit[slashsplit.length - 1]; // and remove the words 'commit' String hash = befhash.substring(6, befhash.length());  allJobs.update(title, exerciseType, findStudentUsername(), studentIdx, hash, ""ok""); return true; }  return false;  } catch (IOException e) { System.out.println(""Subprocess encountered an error""); e.printStackTrace(); return false; } catch (Exception e) { e.printStackTrace(); return false; }  } "	0	0	0	1	0	0
"@Override public String toString() { return ""SubDataSet [name="" + name + "", numberOfObservations="" + numberOfObservations + "", numberOfAnalyzableVariables="" + numberOfAnalyzableVariables + "", accessWay="" + accessWay + "", description="" + description + ""]""; } "	0	0	1	1	0	0
"public static DataSet buildDataSet(String projectId, String surveyId) { List<String> variableIds = new ArrayList<>(); variableIds.add(""testProject-name1""); variableIds.add(""testProject-name2"");  List<String> surveyIds = new ArrayList<>(); surveyIds.add(surveyId);  List<SubDataSet> subDataSets = new ArrayList<>(); subDataSets.add(new SubDataSetBuilder().withName(projectId + ""-ds1"") .withNumberOfAnalyzableVariables(1) .withNumberOfObservations(1) .withAccessWay(AccessWays.DOWNLOAD_SUF) .withDescription(new I18nStringBuilder().withDe(""Description DE"") .withEn(""Description EN"") .build()).build());  return new DataSetBuilder().withSurveyIds(surveyIds) .withDataAcquisitionProjectId(projectId) .withId(projectId + ""-ds1"") .withVariableIds(variableIds) .withSurveyIds(surveyIds) .withType(DataSetTypes.PERSONAL_RECORD) .withDescription(new I18nStringBuilder().withDe(""De Beschreibung"") .withEn(""En Description"") .build()) .withSubDataSets(subDataSets) .build(); } "	0	0	1	0	0	0
"private void loadScopeInfoForOrderItem(String location, String format, HashSet<String> audiences, ItemInfo itemInfo, Record record) { //Shelf Location also include the name of the ordering branch if possible boolean hasLocationBasedShelfLocation = false; boolean hasSystemBasedShelfLocation = false; String originalUrl = itemInfo.geteContentUrl(); for (Scope scope: indexer.getScopes()){ Scope.InclusionResult result = scope.isItemPartOfScope(profileType, location, """", null, audiences, format, true, true, false, record, originalUrl); if (result.isIncluded){ ScopingInfo scopingInfo = itemInfo.addScope(scope); if (scopingInfo == null){ logger.error(""Could not add scoping information for "" + scope.getScopeName() + "" for item "" + itemInfo.getFullRecordIdentifier()); continue; } if (scope.isLocationScope()) { scopingInfo.setLocallyOwned(scope.isItemOwnedByScope(profileType, location, """")); if (scope.getLibraryScope() != null) { boolean libraryOwned = scope.getLibraryScope().isItemOwnedByScope(profileType, location, """"); scopingInfo.setLibraryOwned(libraryOwned); }else{ logger.warn(""Location scope "" + scope.getScopeName() + "" does not have an associated library""); continue; } } if (scope.isLibraryScope()) { boolean libraryOwned = scope.isItemOwnedByScope(profileType, location, """"); scopingInfo.setLibraryOwned(libraryOwned); //TODO: Should this be here or should this only happen for consortia? if (libraryOwned && itemInfo.getShelfLocation().equals(""On Order"")){ itemInfo.setShelfLocation(scopingInfo.getScope().getFacetLabel() + "" On Order""); } } if (scopingInfo.isLocallyOwned()){ if (scope.isLibraryScope() && !hasLocationBasedShelfLocation && !hasSystemBasedShelfLocation){ hasSystemBasedShelfLocation = true; } if (scope.isLocationScope() && !hasLocationBasedShelfLocation){ hasLocationBasedShelfLocation = true; //TODO: Decide if this code should be activated } } scopingInfo.setAvailable(false); scopingInfo.setHoldable(true); scopingInfo.setStatus(""On Order""); scopingInfo.setGroupedStatus(""On Order""); if (!originalUrl.equals(result.localUrl)){ scopingInfo.setLocalUrl(result.localUrl); } } } } "	1	0	1	1	0	0
"@SuppressWarnings({ ""rawtypes"", ""unchecked"" }) @Override @SideOnly(Side.CLIENT) public void getSubItems(Item item, CreativeTabs tab, List itemList) { for(int i = 0; i < icons.length; i++) itemList.add(new ItemStack(this, 1, i)); } "	1	0	0	0	0	0
"public static void main(final String[] args) throws IOException { final OptionParser parser = new OptionParser();  // Configure. parser.posixlyCorrect(true); parser.formatHelpWith(new BuiltinHelpFormatter(120, 2));  //@formatter:off // Show program version. final OptionSpecBuilder version         = parser.acceptsAll( Arrays.asList(""v"",  ""version""   ), ""Show program version."" ) ;  // Help. final OptionSpecBuilder help            = parser.acceptsAll( Arrays.asList(""h"",  ""help""      ), ""Print help."" ) ; help.forHelp();  // PDF file. final OptionSpec<File> pdf              = parser.acceptsAll( Arrays.asList(""p"",  ""pdf""       ), ""Source PDF file."" ).requiredUnless(version, help) .withRequiredArg() .ofType(File.class) ;  // Save Outline (bookmarks). final OptionSpec<File> saveOutlines     = parser.accepts( ""save-outlines"", ""Save Outline (bookmarks) to specified file."" ).availableIf(pdf) .withRequiredArg() .ofType(File.class) ; // Update Outline (bookmarks). final OptionSpec<File> updateOutlines   = parser.accepts( ""update-outlines"", ""Update Outline (bookmarks) from specified file."" ).availableIf(pdf) .withRequiredArg() .ofType(File.class) ;  // Save Metadata. final OptionSpec<File> saveMetadata     = parser.accepts( ""save-metadata"", ""Save Metadata to specified file."" ).availableIf(pdf) .withRequiredArg() .ofType(File.class) ; // Update Metadata. final OptionSpec<File> updateMetadata   = parser.accepts( ""update-metadata"", ""Update Metadata from specified file."" ).availableIf(pdf) .withRequiredArg() .ofType(File.class) ;  // Save Embedded (attached) files. final OptionSpec<File> saveEmbedded     = parser.accepts( ""save-embedded"", ""Save Embedded (attached) files to specified directory."" ).availableIf(pdf) .withRequiredArg() .ofType(File.class) ; // Remove Embedded (attached) files. final OptionSpecBuilder removeEmbedded  = parser.accepts( ""remove-embedded"", ""Remove Embedded (attached) files from PDF file."" ).availableIf(pdf) ; // Add Embedded (attached) files. final OptionSpec<File> addEmbedded      = parser.accepts( ""add-embedded"", ""Add Embedded (attached) files from specified file."" ).availableIf(pdf) .withRequiredArg() .ofType(File.class) ; //@formatter:on  // Parse. try { final OptionSet options = parser.parse(args);  // Print help. if (options.has(help)) { parser.printHelpOn(System.out); }  // Print version. if (options.has(version)) { System.out.println(String.format(""%s ver. %s"", PROGRAM_NAME, PROGRAM_VERSION)); }  // Execute action. final File pdfFile = options.valueOf(pdf);  if (pdfFile != null) { // Save Outline (bookmarks). final File saveOutlinesFile = options.valueOf(saveOutlines); if (saveOutlines != null) { IOHelper.saveOutlines(pdfFile, saveOutlinesFile); } // Update Outline (bookmarks). final File updateOutlinesFile = options.valueOf(updateOutlines); if (updateOutlinesFile != null) { IOHelper.updateOutlines(pdfFile, updateOutlinesFile); }  // Save Metadata. final File saveMetadataFile = options.valueOf(saveMetadata); if (saveMetadataFile != null) { IOHelper.saveMetadata(pdfFile, saveMetadataFile); } // Update Metadata. final File updateMetadataFile = options.valueOf(updateMetadata); if (updateMetadataFile != null) { IOHelper.updateMetadata(pdfFile, updateMetadataFile); }  // Save Embedded (attached) files. final File saveEmbeddedFiles = options.valueOf(saveEmbedded); if (saveEmbeddedFiles != null) { IOHelper.saveAttachments(pdfFile, saveEmbeddedFiles); } // Remove Embedded (attached) files. if (options.has(removeEmbedded)) { IOHelper.removeAttachments(pdfFile); } // Add Embedded (attached) files. final List<File> addEmbeddedFile = options.valuesOf(addEmbedded); if (addEmbeddedFile != null) { IOHelper.addAttachments(pdfFile, addEmbeddedFile); } } } catch (OptionException e) { System.out.println(e.getMessage()); // Print info about problem with parameters. System.out.println(); // Separator. parser.printHelpOn(System.out); // Print help. } catch (IOException e) { System.out.println(e.getMessage()); } } "	1	1	0	0	0	0
public void setPriority(PriorityType priority) { this.priority = priority; } 	0	0	1	0	1	0
"@Override public void additionalSearchParameters(Context context, DiscoverQuery discoveryQuery, SolrQuery solrQuery) { StringBuilder resourceQuery = new StringBuilder(); //Always add the anonymous group id to the query resourceQuery.append(""read:(g0""); EPerson currentUser = context.getCurrentUser(); if(currentUser != null){ try { resourceQuery.append("" OR e"").append(currentUser.getID()); //Retrieve all the groups the current user is a member of ! Set<Integer> groupIds = Group.allMemberGroupIDs(context, currentUser); for (Integer groupId : groupIds) { resourceQuery.append("" OR g"").append(groupId); } } catch (SQLException e) { log.error(LogManager.getHeader(context, ""Error while adding resource policy information to query"", """") ,e); } } resourceQuery.append("")""); try { if(AuthorizeManager.isAdmin(context)){ //Admins always have read access even if no policies are present ! resourceQuery.append("" OR (!read[* TO *])"");  } } catch (SQLException e) { log.error(LogManager.getHeader(context, ""Error while verifying if current user is admin !"", """"), e); } solrQuery.addFilterQuery(resourceQuery.toString()); } "	0	0	1	1	1	0
"@POST @Path(""resource"") @Produces(MediaType.APPLICATION_XML) @Consumes(MediaType.APPLICATION_FORM_URLENCODED) public Response registerDataset(@InjectParam LegacyDataset dataset, @Context SecurityContext security) { if (dataset != null) { // set required fields String user = security.getUserPrincipal().getName(); dataset.setCreatedBy(user); dataset.setModifiedBy(user); // if the installation key was missing, try to infer it from publishing organization's installations if (dataset.getInstallationKey() == null) { dataset.setInstallationKey(inferInstallationKey(dataset)); } // add contact and endpoint(s) to dataset dataset.prepare(); // primary contact, publishing organization key, and installationKey are mandatory Contact contact = dataset.getPrimaryContact(); if (contact != null && LegacyResourceUtils.isValid(dataset, organizationService, installationService)) { // persist dataset UUID key = datasetService.create(dataset.toApiDataset()); // persist contact if (key != null) { // set primary contact's required fields contact.setCreatedBy(user); contact.setModifiedBy(user); // add primary contact datasetService.addContact(key, contact); // try to persist endpoint(s) (non-mandatory) Endpoint emlEndpoint = dataset.getEmlEndpoint(); if (emlEndpoint != null) { // set endpoint's required fields emlEndpoint.setCreatedBy(user); emlEndpoint.setModifiedBy(user); datasetService.addEndpoint(key, emlEndpoint); } Endpoint archiveEndpoint = dataset.getArchiveEndpoint(); if (archiveEndpoint != null) { // set endpoint's required fields archiveEndpoint.setCreatedBy(user); archiveEndpoint.setModifiedBy(user); datasetService.addEndpoint(key, archiveEndpoint); } LOG.info(""Dataset registered successfully, key=%s"", key.toString()); // construct response object expected by IPT IptEntityResponse entity = new IptEntityResponse(key.toString()); // return Response return Response.status(Response.Status.CREATED).cacheControl(LegacyResourceConstants.CACHE_CONTROL_DISABLED) .entity(entity).build(); } else { LOG.error(""Dataset could not be persisted!""); } } else { LOG.error(""Mandatory primary contact and/or publishing organization key missing or incomplete!""); } } LOG.error(""Dataset registration failed""); return Response.status(Response.Status.BAD_REQUEST).cacheControl(LegacyResourceConstants.CACHE_CONTROL_DISABLED) .build(); } "	0	0	1	1	0	0
"private static void buildTree(ConfigNode node, Set visited) { if (node.subject == null) { return; }  for (Method m : node.subject.getClass().getMethods()) { if (!m.isAnnotationPresent(InvokableAction.class)) { continue; } InvokableAction action = m.getDeclaredAnnotation(InvokableAction.class); node.hotkeys.put(m.getName(), action.defaultKeyMapping()); }  for (Field f : node.subject.getClass().getFields()) { //            System.out.println(""Evaluating field "" + f.getName()); try { Object o = f.get(node.subject); if (!f.getType().isPrimitive() && visited.contains(o)) { continue; } visited.add(o); //                System.out.println(o.getClass().getName()); // If the object in question is not reconfigurable, // skip over it and investigate its fields instead //                if (o.getClass().isAssignableFrom(Reconfigurable.class)) { //                if (Reconfigurable.class.isAssignableFrom(o.getClass())) { if (f.isAnnotationPresent(ConfigurableField.class)) { if (o != null && ISelection.class.isAssignableFrom(o.getClass())) { ISelection selection = (ISelection) o; node.setRawFieldValue(f.getName(), (Serializable) selection.getSelections().get(selection.getValue())); } else { node.setRawFieldValue(f.getName(), (Serializable) o); } continue; } if (o == null) { continue; }  if (o instanceof Reconfigurable) { Reconfigurable r = (Reconfigurable) o; ConfigNode child = node.findChild(r.getName()); if (child == null || !child.subject.equals(o)) { child = new ConfigNode(node, r); node.putChild(f.getName(), child); } buildTree(child, visited); } else if (o.getClass().isArray()) { String fieldName = f.getName(); Class type = o.getClass().getComponentType(); //                    System.out.println(""Evaluating "" + node.subject.getShortName() + ""."" + fieldName + ""; type is "" + type.toGenericString()); List<Reconfigurable> children = new ArrayList<>(); if (!Reconfigurable.class.isAssignableFrom(type)) { //                        System.out.println(""Looking at type "" + type.getName() + "" to see if optional""); if (Optional.class.isAssignableFrom(type)) { Type genericTypes = f.getGenericType(); //                            System.out.println(""Looking at generic parmeters "" + genericTypes.getTypeName() + "" for reconfigurable class, type "" + genericTypes.getClass().getName()); if (genericTypes instanceof GenericArrayType) { GenericArrayType aType = (GenericArrayType) genericTypes; ParameterizedType pType = (ParameterizedType) aType.getGenericComponentType(); if (pType.getActualTypeArguments().length != 1) { continue; } Type genericType = pType.getActualTypeArguments()[0]; //                                System.out.println(""Looking at type "" + genericType.getTypeName() + "" to see if reconfigurable""); if (!Reconfigurable.class.isAssignableFrom((Class) genericType)) { continue; } } else { continue; }  for (Optional<Reconfigurable> child : (Optional<Reconfigurable>[]) o) { if (child.isPresent()) { children.add(child.get()); } else { children.add(null); } } } } else { children = Arrays.asList((Reconfigurable[]) o); } for (int i = 0; i < children.size(); i++) { Reconfigurable child = children.get(i); String childId = fieldName + i; if (child == null) { node.removeChild(childId); continue; } ConfigNode grandchild = node.findChild(childId); if (grandchild == null || !grandchild.subject.equals(child)) { grandchild = new ConfigNode(node, child, childId); node.putChild(childId, grandchild); } buildTree(grandchild, visited); } } } catch (IllegalArgumentException | IllegalAccessException ex) { Logger.getLogger(Configuration.class.getName()).log(Level.SEVERE, null, ex); } } } "	0	0	0	0	0	1
"private JSONArray serializeList(Object obj, ListObjectInspector loi) { // could be an array of whatever! // we do it in reverse order since the JSONArray is grown on demand, // as higher indexes are added. if(obj==null) return null;  JSONArray ar = new JSONArray(); for(int i=loi.getListLength(obj)-1; i>=0; i--) { Object element = loi.getListElement(obj, i); try { ar.put(i, serializeField(element, loi.getListElementObjectInspector() ) ); } catch (org.json.JSONException ex) { LOG.warn(""Problem serializing array"", ex); throw new RuntimeException(ex); } } return ar; } "	0	0	1	0	0	0
protected String getCacheNameWithPrefix(String name) { return cacheNamePrefix + name; } 	0	0	0	1	0	0
@Override protected void paintComponent(Graphics g) { Graphics2D g2 = (Graphics2D) g; g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);  int clipH = getHeight(); int clipW = getWidth(); int halfH = clipH / 2;  g2.setColor(Settings.colorBackground.get()); g2.fillRect(0, 0, clipW, clipH);  Color colorFG = Settings.colorForeground.get(); Color colorTG = Settings.colorTimeGainedWhileAhead.get(); Color colorTL = Settings.colorTimeGainedWhileBehind.get(); Color colorRC = Settings.colorNewRecord.get();  // Draw the axis. g2.setColor(colorFG); g2.drawLine(0, halfH, clipW, halfH);  if (run.getState() != State.NULL) { int    segCnt = run.getRowCount(); double segGap = (double) clipW / segCnt;  if (run.hasPreviousSegment()) { // Coordinates of the last drawn vertex. int prevX = 0; int prevY = halfH;  for (int i = 0; i < run.getCurrent(); i++) { Time delta = run.getTime(i, Segment.DELTA); Time live  = run.getTime(i, Segment.LIVE); if (delta != null && live != null) { int percent = (int) getCompareTimePercent(i); g2.setColor(run.isBetterSegment(i) ? colorTG : colorTL); if (run.isBestSegment(i)) { g2.setColor(colorRC); }  // Coordinates of this segment’s vertex. int coordY = halfH - ((percent * halfH) / 100); coordY     = Math.min(clipH - HALF_THICKNESS, coordY); coordY     = Math.max(HALF_THICKNESS, coordY); int coordX = (int) ((i + 1) * segGap);  // Set the brush depending on the delta. g2.setStroke(GRAPH_STROKE);  // Make sure the last vertex reaches the pane’s end. if (i == segCnt - 1) { coordX = Math.min(coordX - 1, clipW); } g2.drawLine(prevX, prevY, coordX, coordY);  // Projection along the x axis. g2.setColor(colorFG); g2.setStroke(DASHED_STROKE); g2.drawLine(coordX, halfH, coordX, coordY);  prevY = coordY; prevX = coordX; } } } } } 	0	0	0	0	0	1
"@Override public void setResourcesData(final ArrayList<UserDataDo> result) { loadingImageLabel.setVisible(false); questionsTable.setVisible(true); questionsTable.clear(); long totalTimeSpent = 0L; if(result.size() > 0){ final AdvancedFlexTable adTable=new AdvancedFlexTable(); adTable.removeAllRows(); adTable.getElement().setId(""report-student-assessment-report""); adTable.addStyleName(""table table-bordered reportTableStyle""); questionsTable.add(adTable);  Label heading1 = new Label(i18n.GL3259()); Label heading2 = new Label(i18n.GL1424()); Label heading3 = new Label(i18n.GL3182()); Label heading4 = new Label(i18n.GL2275()); Label heading5 = new Label(i18n.GL3261());  heading1.addStyleName(""headingLabel""); heading2.addStyleName(""headingLabel""); heading3.addStyleName(""headingLabel""); heading4.addStyleName(""headingLabel""); heading5.addStyleName(""headingLabel"");  adTable.setHeaderWidget(0, heading1); adTable.setHeaderWidget(1, heading2); adTable.setHeaderWidget(2, heading3); adTable.setHeaderWidget(3, heading4); adTable.setHeaderWidget(4, heading5);  UserDataDo maxAvgValue=Collections.max(result,new Comparator<UserDataDo>() { public int compare(UserDataDo o1, UserDataDo o2) { Long obj1 = new Long(o1.getTimeSpent()); Long obj2 = new Long(o2.getTimeSpent()); return obj1.compareTo(obj2); } });  for(int i=0;i<result.size();i++) { Label questionTitle=new Label(AnalyticsUtil.html2text(result.get(i).getTitle())); questionTitle.setStyleName(STYLE_TABLE_CENTER); questionTitle.setStyleName(STYLE_TXTLEFT); adTable.setWidget(i, 0,new Label(String.valueOf(result.get(i).getSequence()))); Label categorylbl=new Label(); String  resourceCategory =result.get(i).getResourceFormat()!=null?result.get(i).getResourceFormat().trim():""""; categorylbl.addStyleName(StringUtil.getResourceFormatImage(resourceCategory)); adTable.setWidget(i, 1,categorylbl); adTable.setWidget(i, 2,questionTitle);  HorizontalPanel timeSpentpnl=new HorizontalPanel(); Label timeLabel = AnalyticsUtil.getTimeStampLabel(result.get(i).getTimeSpent()); timeLabel.setWidth(""100px""); InlineLabel progressBar=new InlineLabel(); progressBar.setStyleName(""setProgressBar""); timeSpentpnl.add(timeLabel); timeSpentpnl.add(progressBar); totalTimeSpent = totalTimeSpent + result.get(i).getTimeSpent(); double maxAvgVal = ((double) result.get(i).getTimeSpent())/((double) maxAvgValue.getTimeSpent()); progressBar.getElement().getStyle().setWidth(maxAvgVal*100, Unit.PX); adTable.setWidget(i, 3,timeSpentpnl);  //Set reactions int reaction=result.get(i).getReaction(); adTable.setWidget(i, 4,new AnalyticsReactionWidget(reaction)); } score.setText(AnalyticsUtil.getTimeSpent(totalTimeSpent)); }else { setErrorData(questionsTable); }   } "	0	0	0	0	0	1
"public void refreshScoreboard (Player player) { if (getThirstString(player).length() > 40) { Main.getInstance().printPluginError(""Error occurred while displaying scoreboard."", ""The string ""+getThirstString(player)+"" is longer than 40 characters."" + ""\nYou must have a thirst message under 40 characters to use the SCOREBOARD displaytype."" + ""\n "" + ""\nNOTE: This message will be displayed every time Thirst tries to update someones thirst (A lot!)""); return; }  Scoreboard board = manager.getNewScoreboard(); Objective obj = board.registerNewObjective(player.getName().toUpperCase(), ""dummy"");  obj.setDisplaySlot(DisplaySlot.SIDEBAR); obj.setDisplayName(ChatColor.translateAlternateColorCodes('&', Main.getInstance().getYAMLConfig().scoreboardName.replace(""%player%"", player.getName()))); obj.getScore(getThirstString(player)).setScore(-1);  player.setScoreboard(board); } "	0	0	0	0	0	1
private boolean matchesAtFrontNoRegex(final String pkg) { final boolean result; if (pkg.startsWith(fullPackage)) { result = pkg.length() == fullPackage.length() || '.' == pkg.charAt(fullPackage.length()); } else { result = false; } return result; } 	1	1	1	1	0	0
public Revision getRevision(final String revisionIdentifier) { return new Revision(this, revisionIdentifier, true); } 	0	0	0	0	0	1
"private void handleRegisterMessage(final SensorMessage msg) { log.info(""\n\tSensorDataRecevierThread: Recived registration message\n\tMessage: "" + msg.toJson() + ""\n\tThe sensor will update on paths: "" + msg.getObservationSendingPaths() + ""\n\tThe sensor will listen on paths: "" + msg.getInstructionRecievingPaths());  filesystem.sendMessage(SensorLocation.UNDIFINED, FileSystemEntries.LOCATION.buildPath(msg.getSensorCommName(), msg.getSensorId()));  filesystem.sendMessage(msg.getAlias(), FileSystemEntries.ALIAS.buildPath(msg.getSensorCommName(), msg.getSensorId()));  donePath = FileSystemEntries.DONE_SENDING_MSG.buildPath(msg.getSensorCommName(), msg.getSensorId()); msg.getObservationSendingPaths().stream().forEach( p -> legalSystemPaths.put(p, FileSystemEntries.SENSORS_DATA.buildPath(p, msg.getSensorId())));  NotificationsCenter.sendSensorConnectedNotification(msg.getSensorCommName(), msg.getSensorId(), msg.getAlias());  try { new SensorMessage(MessageType.SUCCESS_ANSWER).send(out, null); } catch (final IllegalMessageBaseExecption e) {} } "	0	0	0	0	0	1
"public void checkFileExtension(File file) { String fileName = file.getName().toLowerCase();  if (fileName.endsWith("".anm"")) { this.openAnimation(); } else if (fileName.endsWith("".brd"") || fileName.endsWith("".brd.json"")) { this.openBoard(); } else if (fileName.endsWith("".ene"")) { this.openEnemy(); } else if (fileName.endsWith("".tem"")) { this.openCharacter(); } else if (fileName.endsWith("".prg"")) {  } else if (fileName.endsWith("".tst"")) { this.openTileset(); } else if (fileName.endsWith("".spc"") || fileName.endsWith("".spc.json"")) { this.openSpecialMove(); } } "	0	0	1	0	1	0
"private TestResultItem createTestResultItem(AnalysisService analysisService, ResultInventory testKit, String notes, String sequenceNumber, Result result, String accessionNumber, String patientName, String patientInfo, String techSignature, String techSignatureId,  String initialSampleConditions, String sampleType) {  TestService testService = new TestService( analysisService.getTest() ); ResultLimit resultLimit = new ResultLimitService().getResultLimitForTestAndPatient(testService.getTest(), patientService.getPatient());  String receivedDate = currSample == null ? getCurrentDate() : currSample.getReceivedDateForDisplay(); String testMethodName = testService.getTestMethodName(); List<TestResult> testResults = testService.getPossibleTestResults();  String testKitId = null; String testKitInventoryId = null; Result testKitResult = new Result(); boolean testKitInactive = false;  if (testKit != null) { testKitId = testKit.getId(); testKitInventoryId = testKit.getInventoryLocationId(); testKitResult.setId(testKit.getResultId()); resultDAO.getData(testKitResult); testKitInactive = kitNotInActiveKitList(testKitInventoryId); }  String displayTestName = analysisService.getTestDisplayName( );  boolean isConclusion = false; boolean isCD4Conclusion = false;  if (result != null && result.getAnalyte() != null) { isConclusion = result.getAnalyte().getId().equals(ANALYTE_CONCLUSION_ID); isCD4Conclusion = result.getAnalyte().getId().equals(ANALYTE_CD4_CNT_CONCLUSION_ID);  if (isConclusion) { displayTestName = StringUtil.getMessageForKey(""result.conclusion""); } else if (isCD4Conclusion) { displayTestName = StringUtil.getMessageForKey(""result.conclusion.cd4""); } }  String referralId = null; String referralReasonId = null; boolean referralCanceled = false; if (supportReferrals) { if (analysisService.getAnalysis() != null) { Referral referral = referralDAO.getReferralByAnalysisId(analysisService.getAnalysis().getId()); if (referral != null) { referralCanceled = referral.isCanceled(); referralId = referral.getId(); if (!referral.isCanceled()) { referralReasonId = referral.getReferralReasonId(); } } } }  String uom = testService.getUOM( isCD4Conclusion );  String testDate = GenericValidator.isBlankOrNull(analysisService.getCompletedDateForDisplay()) ? getCurrentDate() : analysisService.getCompletedDateForDisplay(); ResultDisplayType resultDisplayType = testService.getDisplayTypeForTestMethod(  ); if(resultDisplayType != ResultDisplayType.TEXT){ inventoryNeeded = true; } TestResultItem testItem = new TestResultItem();  testItem.setAccessionNumber(accessionNumber); testItem.setAnalysisId( analysisService.getAnalysis().getId() ); testItem.setSequenceNumber(sequenceNumber); testItem.setReceivedDate(receivedDate); testItem.setTestName(displayTestName); testItem.setTestId( testService.getTest().getId() ); setResultLimitDependencies(resultLimit, testItem, testResults); testItem.setPatientName(patientName); testItem.setPatientInfo(patientInfo ); testItem.setReportable(testService.isReportable()); testItem.setUnitsOfMeasure(uom); testItem.setTestDate(testDate); testItem.setResultDisplayType(resultDisplayType); testItem.setTestMethod(testMethodName); testItem.setAnalysisMethod(analysisService.getAnalysisType()); testItem.setResult(result); testItem.setResultValue( getFormattedResultValue( result )); testItem.setMultiSelectResultValues(analysisService.getJSONMultiSelectResults()); testItem.setAnalysisStatusId(analysisService.getStatusId()); //setDictionaryResults must come after setResultType, it may override it testItem.setResultType(testService.getResultType()); setDictionaryResults( testItem, isConclusion, result, testResults );  testItem.setTechnician(techSignature); testItem.setTechnicianSignatureId(techSignatureId); testItem.setTestKitId(testKitId); testItem.setTestKitInventoryId(testKitInventoryId); testItem.setTestKitInactive(testKitInactive); testItem.setReadOnly(isLockCurrentResults() && result != null && result.getId() != null); testItem.setReferralId(referralId); testItem.setReferredOut(!GenericValidator.isBlankOrNull(referralId) && !referralCanceled); testItem.setShadowReferredOut( testItem.isReferredOut() ); testItem.setReferralReasonId(referralReasonId); testItem.setReferralCanceled(referralCanceled); testItem.setInitialSampleCondition(initialSampleConditions); testItem.setSampleType(sampleType); testItem.setTestSortOrder(testService.getSortOrder()); testItem.setFailedValidation(statusRules.hasFailedValidation(analysisService.getStatusId())); if (useCurrentUserAsTechDefault && GenericValidator.isBlankOrNull(testItem.getTechnician())) { testItem.setTechnician(currentUserName); } testItem.setReflexGroup(analysisService.getTriggeredReflex()); testItem.setChildReflex(analysisService.getTriggeredReflex() && analysisService.resultIsConclusion( result )); testItem.setPastNotes( notes ); testItem.setDisplayResultAsLog(hasLogValue(testService)); testItem.setNonconforming( analysisService.isParentNonConforming() || StatusService.getInstance().matches(analysisService.getStatusId(), AnalysisStatus.TechnicalRejected )); Result quantifiedResult = analysisService.getQuantifiedResult(); if( quantifiedResult != null){ testItem.setQualifiedResultId( quantifiedResult.getId() ); testItem.setQualifiedResultValue( quantifiedResult.getValue() ); testItem.setHasQualifiedResult( true ); }  if( NUMERIC_RESULT_TYPE.equals( testResults.get( 0 ).getTestResultType()  )){ testItem.setSignificantDigits( Integer.parseInt( testResults.get( 0 ).getSignificantDigits() )); } return testItem; } "	0	0	0	1	0	0
public boolean isLongVary() { return isLongVary; } 	0	0	1	0	0	0
"protected User createUserAndLogin(User user, String password) throws Exception { User savedUser = doPost(""/api/user"", user, User.class); logout(); doGet(""/api/noauth/activate?activateToken={activateToken}"", TestMailService.currentActivateToken) .andExpect(status().isPermanentRedirect()) .andExpect(header().string(HttpHeaders.LOCATION, ""/login/createPassword?activateToken="" + TestMailService.currentActivateToken)); JsonNode tokenInfo = readResponse(doPost(""/api/noauth/activate"", ""activateToken"", TestMailService.currentActivateToken, ""password"", password).andExpect(status().isOk()), JsonNode.class); validateAndSetJwtToken(tokenInfo, user.getEmail()); return savedUser; } "	0	0	0	0	0	1
"@PostMapping public County create(@Valid @RequestBody CountyData countyData, BindingResult result) { if (result.hasErrors()) { throw new MultiErrorException(""Klaida registruojant apylinkę "" + countyData.getName(), result.getAllErrors()); } return countyService.saveWithDistrict(countyData); } "	0	0	0	0	0	1
public Map<String, String> getHeaders() { return headers; } 	0	0	1	1	0	0
public String getPayload() { return payload; } 	0	0	1	0	0	0
public HttpClient getHttpClient() { return httpClient; } 	0	0	1	1	0	0
@Override public String copy(long start, long len) { String result = this.mark() .position(start) .copyNext(len); this.resetToMark(); return result; } 	1	1	1	1	0	0
@Override public T createValue() { return readSupport.readRow(carbonIterator.next()); } 	0	0	0	0	0	1
private int getYByTouch() { return (int) (mMetrics.heightPixels - (mScreenTouchY - mLocalTouchY + getHeight())); } 	0	0	0	0	0	1
"public String getDate(Date date) { String[] array = date.toString().split("" ""); return array[1] + "" "" + array[2] + "" "" + array[5]; } "	0	0	0	0	0	1
"private void encodeProblems(String currentTestPath) { final ProblemFactory factory = new ProblemFactory(); String currentDomain = currentTestPath + DOMAIN; boolean oneDomainPerProblem = false; String problemFile; String currentProblem;  // Counting the number of problem files File[] pbFileList = new File(currentTestPath) .listFiles((dir, name) -> name.startsWith(""p"") && name.endsWith("".pddl"") && !name.contains(""dom""));  int nbTest = 0; if (pbFileList != null) { nbTest = pbFileList.length; }  // Check if there is on domain per problem or a shared domain for all if (!new File(currentDomain).exists()) { oneDomainPerProblem = true; }  // Loop around problems in one category for (int i = 1; i < nbTest + 1; i++) { if (i < 10) { problemFile = ""p0"" + i + PDDL_EXT; } else { problemFile = ""p"" + i + PDDL_EXT; }  currentProblem = currentTestPath + problemFile;  if (oneDomainPerProblem) { currentDomain = currentTestPath + problemFile.split("".p"")[0] + ""-"" + DOMAIN; }  // Parses the PDDL domain and problem description try { factory.setTraceLevel(TRACE_LEVEL); ErrorManager errorManager = factory.parse(new File(currentDomain), new File(currentProblem)); Assert.assertTrue(errorManager.isEmpty());  final CodedProblem pb; try { // Encodes and instantiates the problem in a compact representation System.out.println(""encoding ["" + currentProblem + ""]"" + ""...""); pb = factory.encode(); Assert.assertTrue(pb != null); if (pb.isSolvable()) { System.out.println(""Problem encoded and is solvable.""); } else { System.out.println(""Problem encoded and is  not solvable.""); } } catch (OutOfMemoryError err) { System.out.println(""ERR: "" + err.getMessage() + "" - test aborted""); return; } catch (IllegalArgumentException iaex) { if(iaex.getMessage().equalsIgnoreCase(""problem to encode not ADL"")) { System.err.println(""Not ADL problem in benchmark list ! Remove it if it is a mistake.""); } else { throw iaex; } }  } catch (IOException ioEx) { ioEx.printStackTrace(); } } } "	0	0	1	1	1	0
public URI buildProjectsForTeamUri(String teamName) { UriComponentsBuilder builder = buildApiUri(); URI uri = builder.pathSegment(GROUPS_PATH_SEGMENT).pathSegment(teamName).pathSegment(PROJECTS_PATH_SEGMENT).build().toUri(); return uri; } 	0	1	0	0	1	0
"@Test public void testRelevantStories_HappyPath() throws Exception { String testTeamId = mockV1Feature.getsTeamID(); String testProjectId = mockV1Feature.getsProjectID(); List<Feature> features = new ArrayList<Feature>(); features.add(mockV1Feature); features.add(mockJiraFeature); features.add(mockJiraFeature2); DataResponse<List<Feature>> response = new DataResponse<>(features, mockV1Collector.getLastExecuted());  when(featureService.getFeatureEpicEstimates(mockComponentId, testTeamId, testProjectId, Optional.empty(), Optional.empty())).thenReturn(response); mockMvc.perform(get(""/feature/"" + testTeamId + ""?component="" + mockComponentId.toString() + ""&projectId="" + testProjectId)) .andExpect(status().isOk()); } "	0	0	0	0	0	1
"protected static void checkAndExtractProfilesIds(Inputs inputs, XMCDA xmcda, ProgramExecutionResult errors) { inputs.profilesIds = new ArrayList<>();  if (xmcda.categoriesProfilesList.isEmpty()) { errors.addError(""No categories profiles list has been supplied""); } if (xmcda.categoriesProfilesList.size() > 10) { errors.addError(""You can not supply more then 10 categories profiles list""); }  if (inputs.decisionMakers == null) { return; }  inputs.categoryProfiles = new ArrayList<>(); for (int i = 0; i < inputs.decisionMakers; i++) { List<CategoryProfile> categoriesProfilesList = new ArrayList<>(); CategoriesProfiles categoriesProfiles = xmcda.categoriesProfilesList.get(i); if (inputs.categoriesRanking.size() != categoriesProfiles.size()) { errors.addError(""There is a problem with categories rank list or categories profiles list for decision maker"" + (i + 1) + "". Each category has to be added to categories profiles list or each decision maker and to global categories ranks list.""); return; }  for (Object profile : categoriesProfiles) { CategoryProfile tmpProfile = (CategoryProfile) profile; if (!tmpProfile.getType().name().equalsIgnoreCase(inputs.profilesType.toString())) { errors.addError(""There is a problem with categories rank list or categories profiles list for decision maker"" + (i + 1) + "". Every decision maker need to provide profiles for categories witch are boundary or central. Profiles type need to be same for all decision makers and equal to setting in program parameters input.""); return; } else { categoriesProfilesList.add(tmpProfile); } }  Collections.sort(categoriesProfilesList, (left, right) -> Integer.compare( inputs.categoriesRanking.get(left.getCategory().id()), inputs.categoriesRanking.get(right.getCategory().id())));  inputs.categoryProfiles.add(categoriesProfilesList);  List<String> profilesIds = new ArrayList<>(); if (""BOUNDING"".equalsIgnoreCase(inputs.profilesType.toString())) { checkAndExtractBoundaryProfilesIds(errors, categoriesProfilesList, profilesIds, i); } else if (""CENTRAL"".equalsIgnoreCase(inputs.profilesType.toString())) { checkAndExtractCentralProfilesIds(errors, categoriesProfilesList, profilesIds, i); } inputs.profilesIds.add(profilesIds); } checkForProfilesDuplicates(inputs, errors); } "	0	0	1	1	0	0
"public void confirmPressed(View v) { String userToken; String response; String status; EditText firstName=(EditText)findViewById(R.id.name_text); EditText lastName= (EditText)findViewById(R.id.LastName_text); EditText email=(EditText)findViewById(R.id.email_txt); EditText password= (EditText)findViewById(R.id.password_txt); EditText confPass=(EditText)findViewById(R.id.confPass_txt);  if(firstName.getText().toString().compareTo("""") == 0 || lastName.getText().toString().compareTo("""") ==0 || password.getText().toString().compareTo("""") ==0 || email.getText().toString().compareTo("""") == 0 || confPass.getText().toString().compareTo("""") == 0 ) { printToastDialog(""Please fill all Fields""); this.onStart(); } else if(password.getText().toString().compareTo(confPass.getText().toString()) != 0) printToastDialog(""passwords are not equal!""); else { response = bl.userRegistration(firstName.getText().toString(), lastName.getText().toString(), email.getText().toString(), password.getText().toString().hashCode()); status=response.substring(0, 3); if(status.compareTo(""200"")==0) { userToken = response.substring(3,response.length()); printToastDialog(userToken); appData.resetData(""server"", userToken); Intent intent = new Intent(this, MainPageActivity.class); startActivity(intent); } else { switch (response){ case ""403"": printToastDialog(""invalid mail""); break; case ""502"": printToastDialog(""user already exists""); break; default: printToastDialog(""connection error""); }  } } } "	0	0	0	0	0	1
"public String generateGraphCode(final PiGraph pg) { this.cppString.setLength(0);  final StringBuilder tmp = new StringBuilder(); SpiderCodegenVisitor codeGenerator = new SpiderCodegenVisitor(this, this.scenario.getSimulationManager().getDataTypes()); // Generate C++ code for the whole PiGraph, at the end, tmp will contain // the vertex declaration for pg codeGenerator.visit(pg);  // /Generate the header (license, includes and constants) append(getLicense()); append(""#include \"""" + pg.getName() + "".h\""\n\n"");  // Generate the prototypes for each method except top for (final String p : codeGenerator.getPrototypes()) { append(p); } append(""\n"");  // Generate the top method from which the C++ graph building is launch topMehod(pg);  // Concatenate the results for (final StringBuilder m : codeGenerator.getMethods()) { this.cppString.append(m); }  // Add free fct append(""\n""); append(""void free_"" + pg.getName() + ""(){\n""); append(""\tSpider::cleanPiSDF();\n""); append(""}\n"");  // Returns the final C++ code return this.cppString.toString(); } "	0	0	0	0	0	1
protected RC nextSolution(Interpreter interpreter, MemberBacktrackInfo bi) throws PrologException { while (!TermConstants.emptyListAtom.equals(bi.list)) { if (bi.listExpand) { Term tmp = CompoundTerm.getList(bi.item, bi.list); interpreter.unify(bi.listDest, tmp); bi.item = new VariableTerm(); bi.list = tmp; } Term head = ((CompoundTerm) bi.list).args[0].dereference(); if (!bi.listExpand) { bi.list = ((CompoundTerm) bi.list).args[1].dereference(); } if (bi.list instanceof VariableTerm) { bi.listDest = bi.list; bi.list = new VariableTerm(); bi.listExpand = true; } else if (!CompoundTerm.isListPair(bi.list) && !TermConstants.emptyListAtom.equals(bi.list)) { return RC.FAIL; } if (interpreter.unify(bi.item, head) == RC.FAIL) { interpreter.undo(bi.startUndoPosition); continue; } interpreter.pushBacktrackInfo(bi); return RC.SUCCESS; } return RC.FAIL; } 	0	0	0	0	0	1
"@Override public void sendStaffNotification_Deny(ArrayList<ContactDetail> emails, ArrayList<ContactDetail> visitorIDs, Appointment tempAppointment) { setProperties();  SimpleMailMessage notification = new SimpleMailMessage(staffTemplateMessageDeny);  String[] to = getStaffEmails(emails);  notification.setTo(to);  StringBuilder visitors = new StringBuilder(); for (int i = 0; i < tempAppointment.getVisitorIDs().size()-2; i++) { visitors.append(tempAppointment.getVisitorIDs().get(i)).append(""\n""); }  notification.setText( ""Dear "" + tempAppointment.getStaffID() + ""\n\n"" + ""You have successfully denied the appointment\n("" + tempAppointment.getId() + "") with:\n"" + visitors +  ""\n\nRegards,\nCOSBAS"" );  try { mailSender.send(notification); System.out.println(""Email Send! R8""); } catch (MailException ex) { System.err.println(ex.getMessage()); } } "	0	0	0	0	0	1
"private boolean doWrap() { TLSChunk qc = outgoing.peek(); // If we get here we call ""wrap,"" even if there is nothing to wrap ByteBuffer bb = (qc == null ? EMPTY : qc.getBuf()); if (bb == null) { bb = EMPTY; }  boolean wasShutdown = false; SSLEngineResult result; do { if ((qc != null) && qc.isShutdown()) { log.trace(""Sending closeOutbound""); engine.closeOutbound(); sentShutdown = true; wasShutdown = true; }  if (log.isTraceEnabled()) { log.trace(""Wrapping {}"", bb); } try { result = engine.wrap(bb, writeBuf); } catch (SSLException ssle) { handleEncodingError(qc, ssle); if (qc != null) { outgoing.remove(); } return false; }  if (log.isTraceEnabled()) { log.trace(""wrap result: {}"", result); } if (result.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW) { writeBuf = BufferUtils.doubleBuffer(writeBuf); } } while (result.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW);  Callback<Object> cb = null; if ((qc != null) && !bb.hasRemaining() && initFinished) { // Finished processing the current chunk, but don't deliver the callback until // handshake is done in case client ended before sending any data outgoing.remove(); cb = qc.removeCallback(); }  if (result.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.FINISHED) { // This only gets delivered once, and we can't check for it later processNotHandshaking(); }  if (result.bytesProduced() > 0) { // Deliver write callback in JavaScript after we are happy with reading deliverWriteBuffer(wasShutdown, cb); } else if (writeCallback != null) { cb.call(null); }  return (result.getStatus() == SSLEngineResult.Status.OK); } "	0	0	0	0	0	1
private void assertClasspathEntry(IClasspathEntry classpathEntry, IClasspathAttribute classpathAttribute) throws CoreException { IClasspathAttribute[] classpathAttributes = classpathEntry.getExtraAttributes(); assertNotNull(classpathAttributes); assertThat(classpathAttributes.length, is(1)); assertThat(classpathAttributes[0], is(classpathAttribute)); } 	0	0	0	0	0	1
"private String generateUrl(String baseUrl, MultiValueMap<String, Object> parameters) {  StringBuilder sb = new StringBuilder(); sb.append(baseUrl).append(""?"");  parameters.forEach((k, v) -> { sb.append(k).append(""="").append(v.get(0)).append(""&""); });  sb.deleteCharAt(sb.length() - 1);  return sb.toString(); } "	0	0	0	1	0	0
"@Test public void addEndDateToFloating() throws InvalidCommandFormatException, NoSuchTaskException, UpdateTaskException { prepareDummyData();  // Build my End with custom date and default time String testDate = DateTimeHelper.getDate(DateTimeHelper.now()); String defaultTime = ""00:00""; dummy_userCommand = ""edit 1 end "" + testDate;  // Verify that task to edit is still Floating if casting is successful dummy_floatingTask = (FloatingTask)taskControllerInstance.getTask(0);  //Execute command dummy_editTaskCommand = (EditTaskCommand) commandParserInstance.parse(dummy_userCommand); dummy_editTaskCommand.execute();  // Verify become Deadline dummy_genericTask = taskControllerInstance.getTask(1); assertEquals(""test addEndDateToFloating: verify new task is deadline"", dummy_genericTask.getType(), Task.TASK_TYPE.DEADLINE);  // Verify new End Date is given user specified date dummy_deadlineTask = (DeadlineTask) dummy_genericTask; String editedEndDate = DateTimeHelper.getDate(dummy_deadlineTask.getEnd()); assertEquals(""test addEndDateToFloating: verify edited task end date"", testDate, editedEndDate);  // Verify new End Time is given default time of 00:00 String editedEndTime = DateTimeHelper.getTime(dummy_deadlineTask.getEnd()); assertEquals(""test addEndDateToFloating: verify edited task end time default to 00:00"", defaultTime, editedEndTime); } "	0	0	0	0	0	1
"private void dismissWelcomeView() throws Exception { UiObject welcomeView = getUiObjectByDescription(""Acrobat - First Time Experience"", ""android.webkit.WebView""); // Click through the first two pages and wait for pages to transition. // These pages are webkit views so clickAndWaitForNewWindow or waitForExists cannot be used tapDisplayCentre(); sleep(1); tapDisplayCentre(); sleep(1);  // Get the box coords for the webView window Rect webViewCoords = welcomeView.getBounds();  // Iterate up from the bottom middle of the webView until we hit these // Continue button and change view int i = 0; do { i += 10; tapDisplay(webViewCoords.centerX(), webViewCoords.bottom - i); } while ( welcomeView.exists() || i < webViewCoords.top  ); } "	0	0	1	1	1	0
public int getMissingResponses() { return getExpectedResponses() - receivedResponses; } 	0	0	0	0	0	1
"protected void fixNodesInConflict(List<ODistributedResponse> bestResponsesGroup) { final ODistributedResponse goodResponse = bestResponsesGroup.get(0);  for (List<ODistributedResponse> responseGroup : responseGroups) { if (responseGroup != bestResponsesGroup) { // CONFLICT GROUP: FIX THEM ONE BY ONE for (ODistributedResponse r : responseGroup) { ODistributedServerLog.warn(this, dManager.getLocalNodeName(), null, DIRECTION.NONE, ""fixing response for request=%s in server %s to be: %s"", request, r.getExecutorNodeName(), goodResponse);  final OAbstractRemoteTask fixTask = ((OAbstractReplicatedTask) request.getTask()).getFixTask(request, r.getPayload(), goodResponse.getPayload());  if (fixTask != null) dManager.sendRequest(request.getDatabaseName(), null, Collections.singleton(r.getExecutorNodeName()), fixTask, ODistributedRequest.EXECUTION_MODE.NO_RESPONSE); } } } } "	0	0	0	1	0	0
"private void launchTablespoonIfEnabled() throws Exception { try { tablespoonRiemannEndpoint = ClusterDefinitionService.tablespoonRiemannEndpoint(definition, runtime); } catch (TablespoonNotfoundException e) { logger.info(""Tablespoon is off.""); return; } catch (InconsistentDeploymentException e) { logger.error(""Cannot run tablespoon"", e); return; } logger.info(""Launching tablespoon for "" + definition.getName()); for (GroupRuntime group : runtime.getGroups()) { se.kth.tablespoon.client.general.Group tsg = new se.kth.tablespoon.client.general.Group(group.getId()); for (MachineRuntime machine : group.getMachines()) { tsg.addMachine(machine.getVmId()); } tablespoonGroups.add(tsg); } storage = new TopicStorage(tablespoonGroups); tablespoonBroadcasterAssistant = new AgentBroadcasterAssistant(storage); tablespoonBroadcasterAssistant.registerBroadcaster(this); tablespoonSubscriberBroadcaster = new RiemannSubscriberBroadcaster(tablespoonRiemannEndpoint.getIp(), tablespoonRiemannEndpoint.getPort(), storage); tablespoonApi = new TablespoonApi(storage, tablespoonGroups, tablespoonSubscriberBroadcaster); tablespoonBroadcasterFuture = tpool.submit(tablespoonSubscriberBroadcaster); tablespoonBroadcasterAssistantFuture = tpool.submit(tablespoonBroadcasterAssistant); Dag dag = DagBuilder.getStartTablespoonDag(runtime, stats, machinesMonitor, tablespoonBroadcasterAssistant.getAgentConfig(tablespoonRiemannEndpoint.getIp(), tablespoonRiemannEndpoint.getPort())); synchronized (dag) { dagQueue.add(dag); dag.wait(); } } "	0	0	0	0	0	1
"@BeforeClass public void prepareData() throws IOException { Series series = new Series(TEST_ENTITY_NAME, TEST_METRIC_NAME); series.addData(new Sample(""2015-06-03T09:23:01.000Z"", ""2"")); series.addData(new Sample(""2016-06-03T09:23:02.000Z"", ""1"")); SeriesMethod.insertSeriesCheck(series); } "	0	0	0	1	0	0
@Test void testReduce() { Assertions.assertEquals( Optional.of(15), Pipeline.of(1, 2, 3, 4, 5) .reduce(Integer::sum) ); } 	0	0	0	0	0	1
static String buildUrl(URI baseUrl, String path) { if (baseUrl != null) { return UriComponentsBuilder .fromUri(baseUrl) .path(path) .toUriString(); } return path; } 	0	0	0	0	0	1
"public final void animateView(final View itemView, int position, boolean isSelected) { //FIXME: first completed visible item on rotation gets high delay  //		if (DEBUG) //			Log.v(TAG, ""shouldAnimate="" + shouldAnimate //					+ "" isFastScroll="" + isFastScroll //					+ "" isNotified="" + mAnimatorNotifierObserver.isPositionNotified() //					+ "" isReverseEnabled="" + isReverseEnabled //					+ (!isReverseEnabled ? "" Pos>AniPos="" + (position > mLastAnimatedPosition) : """") //			);  if (shouldAnimate && !isFastScroll && !mAnimatorNotifierObserver.isPositionNotified() && (isReverseEnabled || position > mLastAnimatedPosition)) {  //Cancel animation is necessary when fling cancelExistingAnimation(itemView);  //Retrieve user animators List<Animator> animators = getAnimators(itemView, position, isSelected);  //Add Alpha animator if not yet ViewCompat.setAlpha(itemView, 0); if (!animatorsUsed.contains(AnimatorEnum.ALPHA)) { addAlphaAnimator(animators, itemView, 0f); } //			if (DEBUG) //				Log.v(TAG, ""Started Animation on position "" + position + "" animatorsUsed="" + animatorsUsed); //Clear animators since the new item might have different animations animatorsUsed.clear();  //Execute the animations all together AnimatorSet set = new AnimatorSet(); set.playTogether(animators); //TODO: Animate with Solution 1 or 2? //set.setStartDelay(calculateAnimationDelay1(position)); set.setStartDelay(calculateAnimationDelay2(position)); set.setInterpolator(mInterpolator); set.setDuration(mDuration); set.addListener(new HelperAnimatorListener(itemView.hashCode())); set.start(); mAnimators.put(itemView.hashCode(), set); }  if (mAnimatorNotifierObserver.isPositionNotified()) mAnimatorNotifierObserver.clearNotified();  mLastAnimatedPosition = position; } "	0	0	0	0	0	1
"@Override protected void onStart() { tellPDE(""onStart""); super.onStart(); } "	0	0	1	0	0	0
"@Override protected void onStop() { tellPDE(""onStop""); super.onStop(); } "	0	0	1	0	0	0
public void display(){ tex.bind(); model.render(vertices); } 	0	0	0	0	0	1
"@Test public void fullDuplexCallShouldSucceed() throws Exception { // Build the request. List<Integer> responseSizes = Arrays.asList(50, 100, 150, 200); StreamingOutputCallRequest.Builder streamingOutputBuilder = StreamingOutputCallRequest.newBuilder(); streamingOutputBuilder.setResponseType(COMPRESSABLE); for (Integer size : responseSizes) { streamingOutputBuilder.addResponseParametersBuilder().setSize(size).setIntervalUs(0); } final StreamingOutputCallRequest request = streamingOutputBuilder.build();  StreamRecorder<StreamingOutputCallResponse> recorder = StreamRecorder.create(); StreamObserver<StreamingOutputCallRequest> requestStream = asyncStub.fullDuplexCall(recorder);  final int numRequests = 10; List<StreamingOutputCallRequest> requests = new ArrayList<StreamingOutputCallRequest>(numRequests); for (int ix = numRequests; ix > 0; --ix) { requests.add(request); requestStream.onNext(request); } requestStream.onCompleted(); recorder.awaitCompletion(); assertSuccess(recorder); assertEquals(responseSizes.size() * numRequests, recorder.getValues().size()); for (int ix = 0; ix < recorder.getValues().size(); ++ix) { StreamingOutputCallResponse response = recorder.getValues().get(ix); assertEquals(COMPRESSABLE, response.getPayload().getType()); int length = response.getPayload().getBody().size(); int expectedSize = responseSizes.get(ix % responseSizes.size()); assertEquals(""comparison failed at index "" + ix, expectedSize, length); }  assertMetrics(""grpc.testing.TestService/FullDuplexCall"", Status.Code.OK, requests, recorder.getValues()); } "	0	0	0	0	0	1
"static	void writeToWebView(String cluster) { Bundle bundle = Platform.getBundle(""edu.usc.cssl.tacit.webview.ui""); URL fileURL = bundle.getEntry(""test.txt""); File file = null; try { file = new File(FileLocator.resolve(fileURL).toURI());  FileWriter fw = new FileWriter(file); fw.write(cluster); fw.close();  if(showGraph) { Display.getDefault().asyncExec(new Runnable() { @Override public void run() { try { PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""edu.usc.cssl.tacit.webview.ui.view""); } catch (PartInitException e) { e.printStackTrace(); } } }); } } catch (Exception e) { e.printStackTrace(); }  } "	0	0	1	1	1	0
@Override public void setWalkSpeed(final double walkSpeed) { this.abilities.setWalkingSpeed((float) walkSpeed); this.updateAbilities(); } 	1	0	0	0	0	0
"private List<JCStatement> transformCondition(Tree.Condition cond, int tag, Tree.Block thenPart, Tree.Block elsePart) { JCExpression test; JCVariableDecl decl = null; JCBlock thenBlock = null; JCBlock elseBlock = null; if ((cond instanceof Tree.IsCondition) || (cond instanceof Tree.NonemptyCondition) || (cond instanceof Tree.ExistsCondition)) { String name; ProducedType toType; Expression specifierExpr; if (cond instanceof Tree.IsCondition) { Tree.IsCondition isdecl = (Tree.IsCondition) cond; name = isdecl.getVariable().getIdentifier().getText(); toType = isdecl.getType().getTypeModel(); specifierExpr = isdecl.getVariable().getSpecifierExpression().getExpression(); } else if (cond instanceof Tree.NonemptyCondition) { Tree.NonemptyCondition nonempty = (Tree.NonemptyCondition) cond; name = nonempty.getVariable().getIdentifier().getText(); toType = nonempty.getVariable().getType().getTypeModel(); specifierExpr = nonempty.getVariable().getSpecifierExpression().getExpression(); } else { Tree.ExistsCondition exists = (Tree.ExistsCondition) cond; name = exists.getVariable().getIdentifier().getText(); toType = exists.getVariable().getType().getTypeModel(); specifierExpr = exists.getVariable().getSpecifierExpression().getExpression(); }  // no need to cast for erasure here JCExpression expr = expressionGen().transformExpression(specifierExpr);  // IsCondition with Nothing as ProducedType transformed to "" == null"" at(cond); if (cond instanceof Tree.IsCondition && isNothing(toType)) { test = make().Binary(JCTree.EQ, expr, makeNull()); } else { toType = simplifyType(toType); JCExpression toTypeExpr = makeJavaType(toType);  String tmpVarName = aliasName(name); Name origVarName = names().fromString(name); Name substVarName = names().fromString(aliasName(name));  ProducedType tmpVarType = specifierExpr.getTypeModel(); JCExpression tmpVarTypeExpr; // Want raw type for instanceof since it can't be used with generic types JCExpression rawToTypeExpr = makeJavaType(toType, NO_PRIMITIVES | WANT_RAW_TYPE);  // Substitute variable with the correct type to use in the rest of the code block JCExpression tmpVarExpr = makeIdent(tmpVarName); if (cond instanceof Tree.ExistsCondition) { tmpVarExpr = unboxType(tmpVarExpr, toType); tmpVarTypeExpr = makeJavaType(tmpVarType); } else if(cond instanceof Tree.IsCondition){ tmpVarExpr = unboxType(at(cond).TypeCast(rawToTypeExpr, tmpVarExpr), toType); tmpVarTypeExpr = make().Type(syms().objectType); } else { tmpVarExpr = at(cond).TypeCast(toTypeExpr, tmpVarExpr); tmpVarTypeExpr = makeJavaType(tmpVarType); }  // Temporary variable holding the result of the expression/variable to test decl = makeVar(tmpVarName, tmpVarTypeExpr, null);  // The variable holding the result for the code inside the code block JCVariableDecl decl2 = at(cond).VarDef(make().Modifiers(FINAL), substVarName, toTypeExpr, tmpVarExpr);  // Prepare for variable substitution in the following code block String prevSubst = addVariableSubst(origVarName.toString(), substVarName.toString());  thenBlock = transform(thenPart); List<JCStatement> stats = List.<JCStatement> of(decl2); stats = stats.appendList(thenBlock.getStatements()); thenBlock = at(cond).Block(0, stats);  // Deactivate the above variable substitution removeVariableSubst(origVarName.toString(), prevSubst);  at(cond); // Assign the expression to test to the temporary variable JCExpression testExpr = make().Assign(makeIdent(tmpVarName), expr); // Use the assignment in the following condition if (cond instanceof Tree.ExistsCondition) { test = make().Binary(JCTree.NE, testExpr, makeNull()); } else { // nonempty and is test = makeTypeTest(testExpr, toType); } } } else if (cond instanceof Tree.BooleanCondition) { Tree.BooleanCondition booleanCondition = (Tree.BooleanCondition) cond; // booleans can't be erased test = expressionGen().transformExpression(booleanCondition.getExpression(), BoxingStrategy.UNBOXED, null); } else { throw new RuntimeException(""Not implemented: "" + cond.getNodeType()); }  at(cond); // Convert the code blocks (if not already done so above) if (thenPart != null && thenBlock == null) { thenBlock = transform(thenPart); } if (elsePart != null && elseBlock == null) { elseBlock = transform(elsePart); }  JCStatement cond1; switch (tag) { case JCTree.IF: cond1 = make().If(test, thenBlock, elseBlock); break; case JCTree.WHILELOOP: cond1 = make().WhileLoop(makeLetExpr(make().TypeIdent(TypeTags.BOOLEAN), test), thenBlock); break; default: throw new RuntimeException(); }  if (decl != null) { return List.<JCStatement> of(decl, cond1); } else { return List.<JCStatement> of(cond1); } } "	1	0	0	0	0	0
"private void formatDefaultTable() {  // As default use Identification interface name and description dataTable.addColumn(""name"", String.class); dataTable.addColumn(""description"", String.class);  ViewUtil.formatGrid(this, dataTable, new String[] { ""name"", ""description"" });  detailFields = new ArrayList<String>(); detailFields.add(""name""); detailFields.add(""description"");  // Stub implementation for unregistered data types, // uses Identifier listing for now, // TODO: Pageable page_spec = new Pageable() ; // Page<Identifier> page = service.getIdentifiers(page_spec) ; listContainer.setContainer( new BeanItemContainer<IdentifiedEntity>(IdentifiedEntity.class, identifierService.getIdentifiers())); } "	0	0	1	0	0	0
private synchronized void clearExpired() {  Iterator<Entry<String, ExpiringService>> it = cache.entrySet().iterator(); while (it.hasNext()) { Entry<String, ExpiringService> pair = it.next(); ExpiringService infoBean = (ExpiringService) pair.getValue(); if (infoBean.isExpired()) { it.remove(); // avoids a ConcurrentModificationException } }  } 	0	0	1	0	0	0
private void createEmptyWorkUnitsForSkippedPartitions(Map<String, List<WorkUnit>> workUnits, Map<String, State> topicSpecificStateMap, SourceState state) {  // in case the previous offset not been set getAllPreviousOffsets(state);  // For each partition that has a previous offset, create an empty WorkUnit for it if // it is not in this.partitionsToBeProcessed. for (Map.Entry<KafkaPartition, Long> entry : this.previousOffsets.entrySet()) { KafkaPartition partition = entry.getKey(); if (!this.partitionsToBeProcessed.contains(partition)) { String topicName = partition.getTopicName(); if (!this.isDatasetStateEnabled || this.topicsToProcess.contains(topicName)) { long previousOffset = entry.getValue(); WorkUnit emptyWorkUnit = createEmptyWorkUnit(partition, previousOffset, Optional.fromNullable(topicSpecificStateMap.get(partition.getTopicName())));  if (workUnits.containsKey(topicName)) { workUnits.get(topicName).add(emptyWorkUnit); } else { workUnits.put(topicName, Lists.newArrayList(emptyWorkUnit)); } } } } } 	0	1	0	0	1	0
@Override public BaseChainedConfigContext setEncryptionKeyId(String keyId) { this.encryptionKeyId = keyId;  return this; } 	0	0	0	1	0	0
"@NonNull @Override public String id() { return ""page"" + page; } "	0	0	0	0	0	1
"public void printMove(Integer min, Integer max, Integer countOfAttempts, List<Integer> attempts) { System.out.print(String.format(""Diapason is: [%s..%s]\n"" + ""Your count of moves: %s\n"" + ""Your attempts: "", min,max,countOfAttempts)); attempts.forEach(attempt -> System.out.print(attempt + "" "")); printMessage(""\n-----------------------------------""); } "	0	0	0	0	0	1
public static ArgMatcher any() { return new PatternArgMatcher(PATTERN); } 	0	0	0	0	0	1
@Override public void onNext(Buffer buffer) { super.onNext(buffer); request(1); } 	0	0	0	0	0	1
public void setTickFrequency(double freq) { if(freq < 0.00001) { // practically zero => max speed setTickPeriod(0); } else { setTickPeriod((long) (1000000 / freq)); } } 	0	0	1	0	0	0
"public void convert() { if (!inProgress.tryLock()) { throw new PepperInActionException(""Cannot run convert() of job '"" + getId() + ""', since this job was already started.""); }  inProgress.lock(); try { startTime = System.currentTimeMillis(); status = JOB_STATUS.INITIALIZING; if (!isWired) { wire(); } if (!isReadyToStart) { Collection<Pair<Step, Collection<String>>> notReadyModules = checkReadyToStart(); if (notReadyModules.size() != 0) { StringBuilder str = new StringBuilder(); for (Pair<Step, Collection<String>> problems : notReadyModules) { str.append(""[""); str.append(problems.getLeft()); str.append("": ""); str.append(problems.getRight()); str.append(""], ""); } throw new PepperException(""Cannot run Pepper job '"" + getId() + ""', because at least one of the involved job is not ready to run: '"" + str.toString() + ""'. ""); } } status = JOB_STATUS.IMPORTING_CORPUS_STRUCTURE; if (!isImportedCorpusStructure) { importCorpusStructures(); } status = JOB_STATUS.IMPORTING_DOCUMENT_STRUCTURE; List<Pair<ModuleControllerImpl, Future<?>>> futures = new Vector<Pair<ModuleControllerImpl, Future<?>>>(); // create a future for each step for (Step step : getAllSteps()) { if (step.getModuleController().getPepperModule().getSaltProject() == null) step.getModuleController().getPepperModule().setSaltProject(getSaltProject()); { futures.add(new ImmutablePair<ModuleControllerImpl, Future<?>>(step.getModuleController(), step.getModuleController().processDocumentStructures())); } }  // log workflow information int stepNum = 0; // current number of step StringBuilder str = new StringBuilder(); for (Step step : getAllSteps()) { stepNum++; str.append(""+----------------------------------- step ""); str.append(stepNum); str.append("" -----------------------------------+\n"");  String format = ""|%-15s%-63s|\n""; str.append(String.format(format, step.getModuleType().toString().toLowerCase() + "":"", step.getName())); str.append(String.format(format, ""path:"", step.getCorpusDesc().getCorpusPath())); if (MODULE_TYPE.IMPORTER.equals(step.getModuleType())) { int idxCorpusGraph = getSaltProject().getCorpusGraphs().indexOf(((PepperImporter) step.getModuleController().getPepperModule()).getCorpusGraph()); str.append(String.format(format, ""corpus index:"", idxCorpusGraph)); }  boolean hasProperties = false; StringBuilder propStr = new StringBuilder(); if (step.getModuleController().getPepperModule().getProperties().getPropertyDesctriptions() != null) { // log all properties of all modules and their values  format = ""|               %-25s%-38s|\n""; for (PepperModuleProperty<?> prop : step.getModuleController().getPepperModule().getProperties().getPropertyDesctriptions()) { if (prop.getValue() != null) { hasProperties = true; propStr.append(String.format(format, prop.getName() + "":"", prop.getValue())); } } } format = ""|%-15s%-63s|\n""; if (hasProperties) { str.append(String.format(format, ""properties:"", """")); str.append(propStr.toString()); } else { str.append(String.format(format, ""properties:"", ""- none -"")); } str.append(""|                                                                              |\n""); } str.append(""+------------------------------------------------------------------------------+\n""); logger.info(str.toString());  for (Pair<ModuleControllerImpl, Future<?>> future : futures) { // wait until all document-structures have been imported try { future.getRight().get(); } catch (ExecutionException e) { if ((e.getCause() != null) && (e.getCause() instanceof PepperException)) { throw (PepperException) e.getCause(); } throw new PepperModuleException(""Failed to process document by module '"" + future.getLeft() + ""'. Nested exception was: "", e.getCause()); } catch (InterruptedException e) { if ((e.getCause() != null) && (e.getCause() instanceof PepperException)) { throw (PepperException) e.getCause(); } throw new PepperFWException(""Failed to process document by module '"" + future.getLeft() + ""'. Nested exception was: "", e.getCause()); } catch (CancellationException e) { if ((e.getCause() != null) && (e.getCause() instanceof PepperException)) { throw (PepperException) e.getCause(); } throw new PepperFWException(""Failed to process document by module '"" + future.getLeft() + ""'. Nested exception was: "", e.getCause()); } } status = JOB_STATUS.ENDED; } catch (RuntimeException e) { status = JOB_STATUS.ENDED_WITH_ERRORS; if (e instanceof PepperException) { throw (PepperException) e; } else { throw new PepperFWException(""An exception occured in job '"" + getId() + ""' while importing the corpus-structure. See nested exception: "" + e.getMessage(), e); } } finally { inProgress.unlock(); } } "	0	0	0	1	0	0
"public void enableLoadmore() { mOnScrollListener = new RecyclerView.OnScrollListener() { private int[] lastPositions;  @Override public void onScrolled(RecyclerView recyclerView, int dx, int dy) { super.onScrolled(recyclerView, dx, dy); if (mHeader != null) { mTotalYScrolled += dy; translateHeader(mTotalYScrolled); } RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager(); int visibleItemCount = layoutManager.getChildCount(); int totalItemCount = layoutManager.getItemCount(); //  int lastVisibleItemPosition = -1; if (layoutManagerType == null) { if (layoutManager instanceof LinearLayoutManager) { layoutManagerType = LAYOUT_MANAGER_TYPE.LINEAR; } else if (layoutManager instanceof GridLayoutManager) { layoutManagerType = LAYOUT_MANAGER_TYPE.GRID; } else if (layoutManager instanceof StaggeredGridLayoutManager) { layoutManagerType = LAYOUT_MANAGER_TYPE.STAGGERED_GRID; } else { throw new RuntimeException(""Unsupported LayoutManager used. Valid ones are LinearLayoutManager, GridLayoutManager and StaggeredGridLayoutManager""); } }  switch (layoutManagerType) { case LINEAR: lastVisibleItemPosition = ((LinearLayoutManager) layoutManager).findLastVisibleItemPosition(); break; case GRID: lastVisibleItemPosition = ((GridLayoutManager) layoutManager).findLastVisibleItemPosition(); break; case STAGGERED_GRID: StaggeredGridLayoutManager staggeredGridLayoutManager = (StaggeredGridLayoutManager) layoutManager; if (lastPositions == null) lastPositions = new int[staggeredGridLayoutManager.getSpanCount()];  staggeredGridLayoutManager.findLastVisibleItemPositions(lastPositions); lastVisibleItemPosition = findMax(lastPositions); break; } enableShoworHideToolbarAndFloatingButton(recyclerView);  }  @Override public void onScrollStateChanged(RecyclerView recyclerView, int newState) { super.onScrollStateChanged(recyclerView, newState); currentScrollState = newState; RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager(); int visibleItemCount = layoutManager.getChildCount(); int totalItemCount = layoutManager.getItemCount(); if ((visibleItemCount > 0 && currentScrollState == RecyclerView.SCROLL_STATE_IDLE && (lastVisibleItemPosition) >= totalItemCount - 1) && !isLoadingMore) { isLoadingMore = true; if (onLoadMoreListener != null) { isLoadingMore = false; onLoadMoreListener.loadMore(mRecyclerView.getAdapter().getItemCount(), lastVisibleItemPosition); } }  } }; mRecyclerView.setOnScrollListener(mOnScrollListener); if (mAdapter.getCustomLoadMoreView() == null) mAdapter.setCustomLoadMoreView(LayoutInflater.from(getContext()) .inflate(R.layout.bottom_progressbar, null)); } "	1	1	1	1	0	0
"private static SearchResponse executeQuery(Entry<String, JsonNode> entry, String queryString) { JsonNode limitNode = entry.getValue().get(""limit""); int limit = limitNode == null ? -1 : limitNode.asInt(); SearchResponse response = Application.executeQuery(0, limit, QueryBuilders.queryStringQuery(queryString), """"); return response; } "	0	0	1	0	0	0
"private void restoreLastTransportState(ZonePlayerHandler coordinator, String nextAction) { switch (nextAction) { case ""PLAYING"": coordinator.play(); waitForTransportState(""PLAYING""); break; case ""PAUSED_PLAYBACK"": coordinator.pause(); break; } } "	0	0	1	0	1	0
"public Gson buildGson() { final Gson naiveGson = new GsonBuilder() .registerTypeAdapter(Date.class, new JsonDeserializer<Date>() { public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { return new Date(json.getAsJsonPrimitive().getAsLong() * 1000); } }) .registerTypeAdapter(MessageType.class, new JsonDeserializer<MessageType>() { @Override public MessageType deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { return json.getAsString().equalsIgnoreCase(""stream"") ? MessageType.STREAM_MESSAGE : MessageType.PRIVATE_MESSAGE; } }) .create(); final Gson nestedGson = new GsonBuilder() .registerTypeAdapter(Message.class, new JsonDeserializer<Message>() { @Override public Message deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {  if(BuildConfig.DEBUG) { Log.d(""RAW MESSAGES"", json.toString()); } Message genMess; if(""stream"".equalsIgnoreCase(json.getAsJsonObject().get(""type"").getAsString())) { Message.ZulipStreamMessage msg = naiveGson.fromJson(json, Message.ZulipStreamMessage.class); msg.setRecipients(msg.getDisplayRecipient()); genMess = msg; } else { Message.ZulipDirectMessage msg = naiveGson.fromJson(json, Message.ZulipDirectMessage.class); if(msg.getDisplayRecipient() != null) { msg.setRecipients(msg.getDisplayRecipient().toArray(new Person[msg.getDisplayRecipient().size()])); }  msg.setContent(Message.formatContent(msg.getFormattedContent(), ZulipApp.get()).toString()); genMess = msg; } if(genMess._history != null && genMess._history.size() != 0) { genMess.updateFromHistory(genMess._history.get(0)); } return genMess; } }).create();  return new GsonBuilder() .registerTypeAdapter(UserConfigurationResponse.class, new TypeAdapter<UserConfigurationResponse>() {  @Override public void write(JsonWriter out, UserConfigurationResponse value) throws IOException { nestedGson.toJson(nestedGson.toJsonTree(value), out); }  @Override public UserConfigurationResponse read(JsonReader in) throws IOException { UserConfigurationResponse res = nestedGson.fromJson(in, UserConfigurationResponse.class);  RuntimeExceptionDao<Person, Object> personDao = ZulipApp.this.getDao(Person.class); for (int i = 0; i < res.getRealmUsers().size(); i++) {  Person currentPerson = res.getRealmUsers().get(i); Person foundPerson = null; try { foundPerson = personDao.queryBuilder().where().eq(Person.EMAIL_FIELD, currentPerson.getEmail()).queryForFirst(); if(foundPerson != null) { currentPerson.setId(foundPerson.getId()); } } catch (SQLException e) { ZLog.logException(e); } }  return res; } }) .registerTypeAdapter(EventsBranch.class, new JsonDeserializer<EventsBranch>() { @Override public EventsBranch deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { EventsBranch invalid = nestedGson.fromJson(json, EventsBranch.class); if(BuildConfig.DEBUG) { Log.d(""RAW EVENTS"", json.toString()); } Class<? extends EventsBranch> t = EventsBranch.BranchType.fromRawType(invalid); if(t != null) { return nestedGson.fromJson(json, t); } Log.w(""GSON"", ""Attempted to deserialize and unregistered EventBranch... See EventBranch.BranchType""); return invalid; } }) .registerTypeAdapter(Message.class, nestedGson.getAdapter(Message.class)) .create(); } "	0	0	0	0	0	1
"@Override public void install() { String rcDir = getRunCommandDir(); String runFile = INITD_DIR + ""/"" + config.getName();  if (!isPrivileged()) { throw new WrapperException(Constants.RC_MUST_BE_ROOT, 0, ""Must be root to install""); } System.out.println(""Installing "" + config.getName() + "" ..."");  try { FileWriter writer = new FileWriter(runFile); System.out.println(""name looking for ==>"" + config.getName()); BufferedReader reader = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream( ""/"" + config.getName() + "".initd""))); String line = null; while ((line = reader.readLine()) != null) { line = line.replaceAll(""\\$\\{wrapper.name}"", config.getName()); line = line.replaceAll(""\\$\\{wrapper.displayname}"", config.getDisplayName()); line = line.replaceAll(""\\$\\{wrapper.description}"", config.getDescription()); line = line.replaceAll(""\\$\\{wrapper.home}"", config.getWorkingDirectory().getAbsolutePath()); line = line.replaceAll(""\\$\\{wrapper.java.command}"", config.getJavaCommand()); line = line.replaceAll(""\\$\\{wrapper.jarfile}"", config.getWrapperJarPath()); writer.write(line + ""\n""); } reader.close(); writer.close(); } catch (IOException e) { throw new WrapperException(Constants.RC_FAIL_INSTALL, 0, ""Failed while writing run file"", e); }  new File(runFile).setExecutable(true, false);  for (String runLevel : RUN_LEVELS_START) { CLibrary.INSTANCE.symlink(runFile, rcDir + ""/rc"" + runLevel + "".d/S"" + RUN_SEQUENCE_START + config.getName()); } for (String runLevel : RUN_LEVELS_STOP) { CLibrary.INSTANCE.symlink(runFile, rcDir + ""/rc"" + runLevel + "".d/K"" + RUN_SEQUENCE_STOP + config.getName()); } System.out.println(""Done""); } "	0	0	0	0	0	1
"private void buildTable(JdbcEntityDefinition entityDefinition, Table table){ // METRIC if(entityDefinition.getInternal().getService() .equals(GenericMetricEntity.GENERIC_METRIC_SERVICE)){ Column metricColumn = new Column(); metricColumn.setName(JdbcConstants.METRIC_NAME_COLUMN_NAME); metricColumn.setTypeCode(Types.VARCHAR); //            metricColumn.setSizeAndScale(1024,1024); metricColumn.setDescription(""eagle entity metric column""); table.addColumn(metricColumn); }  // ROWKEY Column pkColumn = new Column(); pkColumn.setName(JdbcConstants.ROW_KEY_COLUMN_NAME); pkColumn.setPrimaryKey(true); pkColumn.setRequired(true); pkColumn.setTypeCode(Types.VARCHAR); pkColumn.setDescription(""eagle entity row-key column""); table.addColumn(pkColumn);  // TIMESTAMP Column tsColumn = new Column(); tsColumn.setName(JdbcConstants.TIMESTAMP_COLUMN_NAME); tsColumn.setTypeCode(Types.BIGINT); tsColumn.setDescription(""eagle entity timestamp column""); table.addColumn(tsColumn);  // TAGS if(entityDefinition.getInternal().getTags() != null) { Index index = new UniqueIndex(); for (String tag : entityDefinition.getInternal().getTags()) { Column tagColumn = createTagColumn(tag); table.addColumn(tagColumn);  IndexColumn indexColumn = new IndexColumn(); indexColumn.setName(tag); indexColumn.setOrdinalPosition(0); index.addColumn(indexColumn); index.setName(""tags_unique_index""); } table.addIndex(index); }  for(Map.Entry<String,Qualifier> entry: entityDefinition.getInternal().getDisplayNameMap().entrySet()){ Column fieldColumn = new Column(); fieldColumn.setName(entry.getKey()); fieldColumn.setJavaName(entry.getKey()); fieldColumn.setSize(""1024""); Integer typeCode = entityDefinition.getJdbcColumnTypeCodeOrNull(entry.getKey()); typeCode = typeCode == null? Types.VARCHAR:typeCode; fieldColumn.setTypeCode(typeCode); fieldColumn.setDescription(""eagle field column ""+entry.getKey()+"":""+entityDefinition.getColumnTypeOrNull(entry.getKey())); table.addColumn(fieldColumn); } } "	0	0	0	0	0	1
"@Override public Response apisChangeLifecyclePost(String apiId, String action, String lifecycleChecklist, String ifMatch, String ifUnmodifiedSince) {  //pre-processing String[] checkListItems = lifecycleChecklist != null ? lifecycleChecklist.split("","") : new String[0];  try { APIProvider apiProvider = RestApiUtil.getLoggedInUserProvider(); String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain(); APIIdentifier apiIdentifier = APIMappingUtil.getAPIIdentifierFromApiIdOrUUID(apiId, tenantDomain);  Map<String, Object> apiLCData = apiProvider.getAPILifeCycleData(apiIdentifier); String[] nextAllowedStates = (String[]) apiLCData.get(APIConstants.LC_NEXT_STATES); if (!ArrayUtils.contains(nextAllowedStates, action)) { throw RestApiUtil.buildBadRequestException( ""Action '"" + action + ""' is not allowed. Allowed actions are "" + Arrays .toString(nextAllowedStates)); }  //check and set lifecycle check list items including ""Deprecate Old Versions"" and ""Require Re-Subscription"". for (String checkListItem : checkListItems) { String[] attributeValPair = checkListItem.split("":""); if (attributeValPair.length == 2) { String checkListItemName = attributeValPair[0].trim(); boolean checkListItemValue = Boolean.valueOf(attributeValPair[1].trim()); apiProvider.checkAndChangeAPILCCheckListItem(apiIdentifier, checkListItemName, checkListItemValue); } }  apiProvider.changeLifeCycleStatus(apiIdentifier, action); return Response.ok().build(); } catch (APIManagementException e) { //Auth failure occurs when cross tenant accessing APIs. Sends 404, since we don't need to expose the existence of the resource if (RestApiUtil.isDueToResourceNotFound(e) || RestApiUtil.isDueToAuthorizationFailure(e)) { throw RestApiUtil.buildNotFoundException(RestApiConstants.RESOURCE_API, apiId); } else { handleException(""Error while updating lifecycle of API "" + apiId, e); } } return null; } "	0	0	1	1	0	0
"@Override public ItemStack[] getItems() { if(!player.worldObj.isRemote)	//Used only when replacing the modus { ItemStack[] items = new ItemStack[size]; fillList(items); return items; }  if(changed) { fillList(items); } return items; } "	0	0	0	0	0	1
private void checkSendMail() { if (this.configuration.getSendMailUpdates() && (this.configuration.getSmtpSendEmailOnSuccess() || this.orchestratorStatus.getTotalSubmitted() != this.orchestratorStatus.getTotalSuccess())) { reporter.send(); } } 	0	0	1	1	0	0
"@RequestMapping(value = ""/trash.action"", method = { RequestMethod.POST ,RequestMethod.GET }) @ResponseBody public Map<String,Object> trash(@RequestParam Integer id) throws Exception { logger.info(""In trash collection, id = "" + id); try { AidrCollection collection = collectionService.findById(id); if (null == collection) { collection = collectionService.findTrashedById(id); if (collection != null) { AidrCollectionTotalDTO dto = convertAidrCollectionToDTO(collection); return getUIWrapper(dto, true); } else { String msg = ""Attempting to trash collection "" + collection.getCode() + "" failed as collection not found!""; logger.error(msg); return getUIWrapper(false, msg); } } //Otherwise, collection exists and needs trashing if (collection.getStatus().equals(CollectionStatus.INITIALIZING) || collection.getStatus().equals(CollectionStatus.RUNNING) || collection.getStatus().equals(CollectionStatus.RUNNING_WARNING)) { String msg = ""Attempting to trash a running collection. Collection must be in stopped state!""; logger.error(msg); return getUIWrapper(false, msg); } else { // Trash collection logger.info(""Received request to trash collection code: "" + collection.getCode()); CollectionStatus oldStatus = collection.getStatus(); if (oldStatus.equals(CollectionStatus.STOPPED) || oldStatus.equals(CollectionStatus.NOT_RUNNING)) { logger.info(""Trashing collection having code "" + collection.getCode()); try { //collection = collectionService.stop(collection.getId()); collection.setStatus(CollectionStatus.TRASHED); collectionService.update(collection); if (taggerService.trashCollection(collection) > 0) { AidrCollectionTotalDTO dto = convertAidrCollectionToDTO(collection); logger.info(""Attempting to trash collection "" + collection.getCode() + "" succeeded!""); return getUIWrapper(dto, true); } else { String msg = ""Attempting to trash collection "" + collection.getCode() + "" failed!""; logger.error(msg); // restore collection status to STOPPED collection.setStatus(oldStatus); collectionService.update(collection); return getUIWrapper(false, msg); } } catch(Exception e) { String msg = ""Error while trashing AIDR Collection - couldn't stop!""; logger.error(msg, e); if (!collection.getStatus().equals(oldStatus)) { // restore collection status collection.setStatus(oldStatus); collectionService.update(collection); } return getUIWrapper(false, msg); } } else { String msg = ""Attempting to trash collection "" + collection.getCode() + "" failed as collection status = "" + oldStatus.getStatus(); logger.error(msg); return getUIWrapper(false, msg); } } } catch(Exception e){ String msg = ""Error while attempting to trash AIDR Collection - not found! ""; logger.error(msg, e); return getUIWrapper(false, msg); } } "	0	0	1	0	0	0
"private void initNameIdMapping() throws IOException { if (nameIdMapHolder == null) { final File storagePath = new File(storageLocal.getStoragePath()); if (!storagePath.exists()) if (!storagePath.mkdirs()) throw new OStorageException(""Cannot create directories for the path '"" + storagePath + ""'"");  nameIdMapHolderFile = new File(storagePath, NAME_ID_MAP);  nameIdMapHolder = new RandomAccessFile(nameIdMapHolderFile, ""rw""); readNameIdMap(); } } "	0	0	0	0	0	1
"private OCachePointer[] cacheFileContent(final int intId, final long startPageIndex, final int pageCount, final boolean addNewPages, OModifiableBoolean cacheHit) throws IOException {  final long fileId = composeFileId(id, intId); final OClosableEntry<Long, OFileClassic> entry = files.acquire(fileId); try { final OFileClassic fileClassic = entry.get(); if (fileClassic == null) throw new IllegalArgumentException(""File with id "" + intId + "" not found in WOW Cache"");  final OLogSequenceNumber lastLsn; if (writeAheadLog != null) lastLsn = writeAheadLog.getFlushedLsn(); else lastLsn = new OLogSequenceNumber(-1, -1);  final long firstPageStartPosition = startPageIndex * pageSize; final long firstPageEndPosition = firstPageStartPosition + pageSize;  if (fileClassic.getFileSize() >= firstPageEndPosition) { final OSessionStoragePerformanceStatistic sessionStoragePerformanceStatistic = performanceStatisticManager .getSessionPerformanceStatistic(); if (sessionStoragePerformanceStatistic != null) { sessionStoragePerformanceStatistic.startPageReadFromFileTimer(); }  int pagesRead = 0;  try { if (pageCount == 1) { final ByteBuffer buffer = bufferPool.acquireDirect(false); fileClassic.read(firstPageStartPosition, buffer); buffer.position(0);  final OCachePointer dataPointer = new OCachePointer(buffer, bufferPool, lastLsn, fileId, startPageIndex); pagesRead = 1; return new OCachePointer[] { dataPointer }; }  final long maxPageCount = (fileClassic.getFileSize() - firstPageStartPosition) / pageSize; final int realPageCount = Math.min((int) maxPageCount, pageCount);  final ByteBuffer[] buffers = new ByteBuffer[realPageCount]; for (int i = 0; i < buffers.length; i++) { buffers[i] = bufferPool.acquireDirect(false); assert buffers[i].position() == 0; }  fileClassic.read(firstPageStartPosition, buffers);  final OCachePointer[] dataPointers = new OCachePointer[buffers.length]; for (int n = 0; n < buffers.length; n++) { buffers[n].position(0); dataPointers[n] = new OCachePointer(buffers[n], bufferPool, lastLsn, fileId, startPageIndex + n); }  pagesRead = dataPointers.length; return dataPointers; } finally { if (sessionStoragePerformanceStatistic != null) { sessionStoragePerformanceStatistic.stopPageReadFromFileTimer(pagesRead); }  } } else if (addNewPages) { final int space = (int) (firstPageEndPosition - fileClassic.getFileSize());  if (space > 0) fileClassic.allocateSpace(space);  freeSpaceCheckAfterNewPageAdd();  final ByteBuffer buffer = bufferPool.acquireDirect(true); final OCachePointer dataPointer = new OCachePointer(buffer, bufferPool, lastLsn, fileId, startPageIndex);  cacheHit.setValue(true); return new OCachePointer[] { dataPointer }; } else return new OCachePointer[0]; } finally { files.release(entry); } } "	0	0	0	0	0	1
private void readNameIdMap() throws IOException { nameIdMap = new ConcurrentHashMap<String, Integer>(); long localFileCounter = -1;  nameIdMapHolder.seek(0);  NameFileIdEntry nameFileIdEntry; while ((nameFileIdEntry = readNextNameIdEntry()) != null) {  final long absFileId = Math.abs(nameFileIdEntry.fileId); if (localFileCounter < absFileId) localFileCounter = absFileId;  nameIdMap.put(nameFileIdEntry.name, nameFileIdEntry.fileId); }  if (localFileCounter > 0) fileCounter = (int) localFileCounter;  for (Map.Entry<String, Integer> nameIdEntry : nameIdMap.entrySet()) { if (nameIdEntry.getValue() >= 0) { final long externalId = composeFileId(id, nameIdEntry.getValue());  if (files.get(externalId) == null) { OFileClassic fileClassic = createFileInstance(nameIdEntry.getKey());  if (fileClassic.exists()) { fileClassic.open(); files.add(externalId, fileClassic); } else { final Integer fileId = nameIdMap.get(nameIdEntry.getKey());  if (fileId != null && fileId > 0) { nameIdMap.put(nameIdEntry.getKey(), -fileId); } } } } } } 	0	0	0	0	0	1
"public void loadHolidayRewards() { if(!CCubesSettings.holidayRewards || CCubesSettings.holidayRewardTriggered) return;  DateFormat dateFormat = new SimpleDateFormat(""yyyy/MM/dd""); Date date; JsonElement holidays;  try { date = dateFormat.parse(""2015/10/31""); holidays = HTTPUtil.getWebFile(""https://raw.githubusercontent.com/wyldmods/ChanceCubes/master/customRewards/Holidays.json""); } catch(Exception e1) { CCubesCore.logger.log(Level.ERROR, ""Failed to fetch the list of holiday rewards!""); return; }  String holidayName = """";  for(JsonElement holiday : holidays.getAsJsonArray()) { Date parsed; try { parsed = dateFormat.parse(holiday.getAsJsonObject().get(""Date"").getAsString()); } catch(ParseException e) { CCubesCore.logger.log(Level.ERROR, ""Failed to parse a holiday date. BLAME TURKEY!!!""); continue; }  if(dateFormat.format(date).equalsIgnoreCase(dateFormat.format(parsed))) { holidayName = holiday.getAsJsonObject().get(""Name"").getAsString(); } }  if(holidayName.equalsIgnoreCase("""")) { ConfigLoader.config.get(""holidayRewardTriggered"", ConfigLoader.genCat, false).setValue(false); return; }  JsonElement userRewards;  try { userRewards = HTTPUtil.getWebFile(""https://raw.githubusercontent.com/wyldmods/ChanceCubes/master/customRewards/HolidayRewards/"" + holidayName + "".json""); } catch(Exception e) { CCubesCore.logger.log(Level.ERROR, ""Chance Cubes failed to get the custom reward for the holiday "" + holidayName + ""!""); CCubesCore.logger.log(Level.ERROR, e.getMessage()); return; }  for(Entry<String, JsonElement> reward : userRewards.getAsJsonObject().entrySet()) { List<IRewardType> rewards = new ArrayList<IRewardType>(); JsonObject rewardElements = reward.getValue().getAsJsonObject(); int chance = 0; for(Entry<String, JsonElement> rewardElement : rewardElements.entrySet()) { if(rewardElement.getKey().equalsIgnoreCase(""chance"")) { chance = rewardElement.getValue().getAsInt(); continue; }  JsonArray rewardTypes = rewardElement.getValue().getAsJsonArray(); if(rewardElement.getKey().equalsIgnoreCase(""Item"")) this.loadItemReward(rewardTypes, rewards); else if(rewardElement.getKey().equalsIgnoreCase(""Block"")) this.loadBlockReward(rewardTypes, rewards); else if(rewardElement.getKey().equalsIgnoreCase(""Message"")) this.loadMessageReward(rewardTypes, rewards); else if(rewardElement.getKey().equalsIgnoreCase(""Command"")) this.loadCommandReward(rewardTypes, rewards); else if(rewardElement.getKey().equalsIgnoreCase(""Entity"")) this.loadEntityReward(rewardTypes, rewards); else if(rewardElement.getKey().equalsIgnoreCase(""Experience"")) this.loadExperienceReward(rewardTypes, rewards); else if(rewardElement.getKey().equalsIgnoreCase(""Potion"")) this.loadPotionReward(rewardTypes, rewards); else if(rewardElement.getKey().equalsIgnoreCase(""Schematic"")) this.loadSchematicReward(rewardTypes, rewards); else if(rewardElement.getKey().equalsIgnoreCase(""Sound"")) this.loadSoundReward(rewardTypes, rewards); else if(rewardElement.getKey().equalsIgnoreCase(""Chest"")) this.loadChestReward(rewardTypes, rewards); } CCubesSettings.holidayReward = new BasicReward(reward.getKey(), chance, rewards.toArray(new IRewardType[rewards.size()])); CCubesCore.logger.log(Level.ERROR, ""Custom holiday reward \"""" + holidayName + ""\"" loaded!""); } } "	0	0	1	0	0	0
private void initToolbar() { SWTUtil.safeAsyncExec(new Runnable() {  public void run() { toolBar.initToolbar(getViewer(), navigatable); toolBar.setEnabled(false); } }); } 	0	0	0	0	0	1
"@Transactional(isolation = Isolation.READ_COMMITTED, propagation = Propagation.REQUIRES_NEW) public void addObject(RpslObject rpslObject, Result result, int pass) { try { if (pass == 1) { checkForReservedNicHandle(rpslObject); rpslObject = RpslObjectFilter.keepKeyAttributesOnly(new RpslObjectBuilder(rpslObject)).get(); rpslObjectUpdateDao.createObject(rpslObject); } else { final RpslObjectInfo existing = rpslObjectDao.findByKey(rpslObject.getType(), rpslObject.getKey().toString()); rpslObjectUpdateDao.updateObject(existing.getObjectId(), rpslObject); claimIds(rpslObject); result.addSuccess(); } } catch (Exception e) { StringWriter stringWriter = new StringWriter(); e.printStackTrace(new PrintWriter(stringWriter)); result.addFail(String.format(""Error in pass %d in '%s': %s\n"", pass, rpslObject.getFormattedKey(), stringWriter)); } } "	0	0	1	1	1	0
"private Integer parseIdFromViewName(String viewName) { if (viewName.matches(""^(flow_|catch_)[-]?[0-9]{9}$"")) { //|| viewName.matches(""catch_"" + ""-?\\d+"")) { //parse the numeric off of the string that starts with either flow_ or catch_  String[] strings = viewName.split(""_""); String id = strings[1]; //second half of name anticipated to be the model_output_id if (isInteger(id)) //return it as a qualifying model output id { // if the id exists, its included in the existing views set of ids log.info(""The model output id: "" + id + "" has a view representation already:"" + viewName + "" No additional views will be created for it.""); return new Integer(id); } else { log.info(""The portion of the view name that represents the model output id was not an Integer and won't be included in the set to create views : "" + id); } } else { log.info(""View name did not match catch_ or flow_ prefix and is not included in the set.: "" + viewName); } return 0; } "	0	0	0	1	0	0
public static <T> Pair<Sequence<T>, Sequence<T>> partition(final Iterator<? extends T> iterator, final Predicate<? super T> predicate) { final Queue<T> matchedQueue = new ArrayDeque<T>(); final Queue<T> unmatchedUnmatched = new ArrayDeque<T>(); return Pair.pair(Sequences.memorise(new PartitionIterator<T>(iterator, predicate, matchedQueue, unmatchedUnmatched)), Sequences.memorise(new PartitionIterator<T>(iterator, Predicates.<T>not(predicate), unmatchedUnmatched, matchedQueue))); } 	1	1	1	1	0	0
@Override public S call() throws Exception { return foldRight(iterator, seed, callable); } 	0	0	0	0	0	1
"public RexNode field(String alias, String fieldName) { Preconditions.checkNotNull(alias); Preconditions.checkNotNull(fieldName); final Frame frame = stack.peek(); final List<String> aliases = new ArrayList<>(); int offset = 0; for (Pair<String, RelDataType> pair : frame.right) { if (pair.left != null && pair.left.equals(alias)) { int i = pair.right.getFieldNames().indexOf(fieldName); if (i >= 0) { return field(offset + i); } else { throw new IllegalArgumentException(""no field '"" + fieldName + ""' in relation '"" + alias + ""'; fields are: "" + pair.right.getFieldNames()); } } aliases.add(pair.left); offset += pair.right.getFieldCount(); } throw new IllegalArgumentException(""no relation wtih alias '"" + alias + ""'; aliases are: "" + aliases); } "	0	0	0	0	0	1
private boolean isPullRequest(Job job) { SCMHead head = SCMHead.HeadByItem.findHead(job); return head != null && head.getAction(ChangeRequestAction.class) != null; } 	0	0	0	0	0	1
"private void mergeCart(Cart customerCart, Cart anonymousCart) { LOG.trace(""Enter. customerCart: {}, anonymousCart: {}."", customerCart, anonymousCart); List<LineItem> lineItems = anonymousCart.getLineItems(); lineItems.stream().forEach( lineItem -> addLineItemService.addLineItem(customerCart, lineItem) );  // Save cart after merged. Cart mergedCart = cartRepository.save(customerCart); //update anonymous cart's status. anonymousCart.setCartStatus(CartStatus.Merged); cartRepository.save(anonymousCart); LOG.trace(""Exit. mergedCart: {}."", mergedCart); } "	0	0	0	0	0	1
public void spawnRandomTruck() { Random rand = new Random(); Lane l = entryPoints.get(rand.nextInt(entryPoints.size()));  //Truck adds itself to the canvas Truck t = null; if(l.getDirection() == Direction.NORTH || l.getDirection() == Direction.SOUTH) { t = new Truck(l.getGridPosX() * Map.TILESIZE + Map.TILESIZE / 2 - Truck.TRUCKWIDTH / 2, l.getGridPosY() * Map.TILESIZE + Map.TILESIZE - Truck.TRUCKLENGTH, l.getDirection()); } else if(l.getDirection() == Direction.WEST || l.getDirection() == Direction.EAST) { t = new Truck(l.getGridPosX() * Map.TILESIZE, l.getGridPosY() * Map.TILESIZE + Map.TILESIZE / 2 - Truck.TRUCKWIDTH / 2, l.getDirection()); }  t.setCurrentTile(l); t.setMap(tiles); l.setOccupied(true, t); synchronized (Map.class) { vehicles.add(t); } } 	0	0	0	0	0	1
boolean roleExists(Role role) throws Exception { Set<Role> roles = listAllRoles(); // Sentry lowercases all roles, so while checking for existence, lower case the role as well Role lowerCaseRole = new Role(role.getName().toLowerCase()); return roles.contains(lowerCaseRole); } 	0	0	0	0	0	1
"public void loadUser(String path){  try { long time = System.currentTimeMillis(); System.out.println(""Loading user ...""); //		String folder = path.substring(0,path.lastIndexOf(""\\"")) + ""\\"";  if(path.toUpperCase().endsWith("".TXT_OUT"")) { BufferedReader br = new BufferedReader(new FileReader(path)); String prevView = """";  Point prevGazePos = null; long prevGazeTime = 0; double gazeSpeed = 0;  String line; long startTime = -1;  while ((line = br.readLine()) != null) {  String[] split = line.split(""\t"");  if (startTime < 0) startTime =  Long.parseLong(split[1]);  if (split[0].equals(""E"")){  long t = Long.parseLong(split[1]) - startTime; double s = Double.parseDouble(split[4]);     String objId = split[2]; int type = Integer.parseInt(split[3]); if(type == TYPE_TEXT ) { int indexOfColon = objId.indexOf("":text""); int indexOfW = objId.indexOf(""w"", objId.indexOf(""@"")); if(indexOfColon >= 0 && indexOfW >= 0) { try { objId = ""Paragraph""+ objId.substring(indexOfColon, indexOfW); } catch(Exception ex) { System.err.println(""Problem at ""+objId); }  }   }  DataObject object = null; for (int i=0; i<dataObjects.size(); i++) if (dataObjects.get(i).id.equals(objId)){ object = dataObjects.get(i); break; } if (object == null){ object = new DataObject(objId, type); dataObjects.add(object); }  EyeEvent e = new EyeEvent(t,object, s, 1); events.add(e); } else System.out.println(""Unrecognized event "" + split[0]);  } br.close(); } else if(path.toUpperCase().endsWith("".TXT"")) { BufferedReader br = new BufferedReader(new FileReader(path)); String prevView = """";  Point prevGazePos = null; long prevGazeTime = 0; double gazeSpeed = 0;  String line; long startTime = -1;  while ((line = br.readLine()) != null) {  String[] split = line.split(""\t"");  if (startTime < 0) startTime =  Long.parseLong(split[1]);  if (split[0].equals(""Eye"")){  long t = Long.parseLong(split[1]) - startTime; double s = Double.parseDouble(split[5]);     String objId = split[2]; int type = Integer.parseInt(split[4]); if(type == TYPE_TEXT ) { int indexOfColon = objId.indexOf("":text""); int indexOfW = objId.indexOf(""w"", objId.indexOf(""@"")); if(indexOfColon >= 0 && indexOfW >= 0) { try { objId = ""Paragraph""+ objId.substring(indexOfColon, indexOfW); } catch(Exception ex) { System.err.println(""Problem at ""+objId); }  }   }  DataObject object = null; for (int i=0; i<dataObjects.size(); i++) if (dataObjects.get(i).id.equals(objId)){ object = dataObjects.get(i); break; } if (object == null){ object = new DataObject(objId, type); dataObjects.add(object); }  EyeEvent e = new EyeEvent(t,object, s, 1); events.add(e); } else System.out.println(""Unrecognized event "" + split[0]);  } br.close(); } else if(path.toUpperCase().endsWith("".EYE"")) { FileInputStream fin = new FileInputStream(path); ObjectInputStream ois = new ObjectInputStream(fin); EyeData eyeData = (EyeData) ois.readObject(); dataObjects = eyeData.getDataObjects(); events = eyeData.getEvents(); ois.close();  }   for (int i=0; i<dataObjects.size(); i++) dataToIndex.put(dataObjects.get(i), i);     timePeriodStart = 0; timePeriodEnd = events.get(events.size()-1).time; createHeatmap();  time = System.currentTimeMillis()-time; System.out.println(""Done loading! time=""+time); } catch(Exception e){ e.printStackTrace(); } } "	0	0	0	0	0	1
"@Test public void shouldParseInfoFile() { InfoFileParser parser = new InfoFileParser(); Reader reader = ResourceUtilities.getReader(""classpath:edu/mayo/mprc/searchdb/info.tsv"", TestInfoFileParser.class); final InfoFileData data = parser.parse(reader);  Assert.assertEquals(data.getMs1Spectra(), 2334); Assert.assertEquals(data.getMs2Spectra(), 6626); Assert.assertEquals(data.getMs3PlusSpectra(), 1); Assert.assertEquals(data.getInstrumentName(), ""LTQ Orbitrap""); Assert.assertEquals(data.getInstrumentSerialNumber(), ""1063B""); Assert.assertEquals(data.getStartTime(), new DateTime(2010, 4, 8, 18, 17, 49)); Assert.assertEquals(data.getRunTimeInSeconds(), 4500.49); Assert.assertEquals(data.getComment(), ""yeast TD 60K, top5, 1ug in 100uL, inj 5uL,""); Assert.assertEquals(data.getSampleId(), ""post Ch2&Ch1 flush; std config""); } "	0	0	1	0	1	0
public void setDate(final Date date) { this.date = (Date) date.clone(); dateStr = ArchiveUtils.get14DigitDate(date); } 	0	0	1	1	0	0
"public static boolean checkBackwardCompatible(String checkedProjectVesion, String referenceProjectVersion) throws InvalidProjectVersion { if ( ""1.13"".equals(referenceProjectVersion)) { if ( ""1.13"".equals(checkedProjectVesion) || ""1.12"".equals(checkedProjectVesion) || ""1.11"".equals(checkedProjectVesion) || ""1.10"".equals(checkedProjectVesion) || ""1.9"".equals(checkedProjectVesion) || ""1.8"".equals(checkedProjectVesion) || ""1.7"".equals(checkedProjectVesion) || ""1.6"".equals(checkedProjectVesion) ) return true; return false; } else if ( ""1.12"".equals(referenceProjectVersion)) { if ( ""1.12"".equals(checkedProjectVesion) || ""1.11"".equals(checkedProjectVesion) || ""1.10"".equals(checkedProjectVesion) || ""1.9"".equals(checkedProjectVesion) || ""1.8"".equals(checkedProjectVesion) || ""1.7"".equals(checkedProjectVesion) || ""1.6"".equals(checkedProjectVesion) ) return true; return false; } else if ( ""1.11"".equals(referenceProjectVersion)) { if ( ""1.11"".equals(checkedProjectVesion) || ""1.10"".equals(checkedProjectVesion) || ""1.9"".equals(checkedProjectVesion) || ""1.8"".equals(checkedProjectVesion) || ""1.7"".equals(checkedProjectVesion) || ""1.6"".equals(checkedProjectVesion) ) return true; return false; } else if ( ""1.10"".equals(referenceProjectVersion)) { if ( ""1.10"".equals(checkedProjectVesion) || ""1.9"".equals(checkedProjectVesion) || ""1.8"".equals(checkedProjectVesion) || ""1.7"".equals(checkedProjectVesion) || ""1.6"".equals(checkedProjectVesion) ) return true; return false; } else if ( ""1.9"".equals(referenceProjectVersion)) { if ( ""1.9"".equals(checkedProjectVesion) || ""1.8"".equals(checkedProjectVesion) || ""1.7"".equals(checkedProjectVesion) || ""1.6"".equals(checkedProjectVesion) ) return true; return false; } else if ( ""1.8"".equals(referenceProjectVersion)) { if ( ""1.8"".equals(checkedProjectVesion) || ""1.7"".equals(checkedProjectVesion) || ""1.6"".equals(checkedProjectVesion) ) return true; return false; } else if ( ""1.7"".equals(referenceProjectVersion)) { if ( ""1.7"".equals(checkedProjectVesion) || ""1.6"".equals(checkedProjectVesion) ) return true; return false; } else if ( ""1.6"".equals(referenceProjectVersion)) { if ( ""1.6"".equals(checkedProjectVesion) ) return true; return false; } else if ( ""1.5"".equals(referenceProjectVersion) ) { if ( ""1.5"".equals(checkedProjectVesion) || ""1.4"".equals(checkedProjectVesion) || ""1.3"".equals(checkedProjectVesion) || ""1.2"".equals(checkedProjectVesion) || ""1.1"".equals(checkedProjectVesion) || ""1.0"".equals(checkedProjectVesion) ) return true; else return false; } else if ( ""1.4"".equals(referenceProjectVersion) ) { if ( ""1.4"".equals(checkedProjectVesion) || ""1.3"".equals(checkedProjectVesion) || ""1.2"".equals(checkedProjectVesion) || ""1.1"".equals(checkedProjectVesion) || ""1.0"".equals(checkedProjectVesion) ) return true; else return false; } else if ( ""1.3"".equals(referenceProjectVersion) ) { if ( ""1.3"".equals(checkedProjectVesion) || ""1.2"".equals(checkedProjectVesion) || ""1.1"".equals(checkedProjectVesion) || ""1.0"".equals(checkedProjectVesion) ) return true; else return false; } else if ( ""1.2"".equals(referenceProjectVersion) ) { if ( ""1.2"".equals(checkedProjectVesion) || ""1.1"".equals(checkedProjectVesion) || ""1.0"".equals(checkedProjectVesion) ) return true; else return false; } else if ( ""1.1.1"".equals(referenceProjectVersion) ) { if ( ""1.1.1"".equals(checkedProjectVesion) || ""1.1"".equals(checkedProjectVesion) || ""1.0"".equals(checkedProjectVesion) ) return true; else return false; } else if ( ""1.1"".equals(referenceProjectVersion) ) { if ( ""1.1"".equals(checkedProjectVesion) || ""1.0"".equals(checkedProjectVesion) ) return true; else return false; } else if ( ""1.0"".equals(referenceProjectVersion) ) { if (""1.0"".equals(checkedProjectVesion)) return true; else return false; } else throw new InvalidProjectVersion(""Invalid version identifier: "" + referenceProjectVersion); } "	0	0	0	0	0	1
"private void stepRotate() { if(this.debug) System.out.println(""--- starting rotation.""); int i; if(this.conncount == 0) return;  // get center of graph double centerx = 0; double centery = 0; for(i = 0; i < this.nodecount; i++) { Point2D currCoords = this.layout.transform(this.nodes[i]); centerx += currCoords.getX(); centery += currCoords.getY(); } centerx /= this.nodecount; centery /= this.nodecount; this.graphcenter = new Point2D.Double(centerx, centery); if(this.debug) System.out.println(""center of rotation: ("" + centerx + ""|"" + centery + "")"");  // get average direction of edges double avgdirx = 0; double avgdiry = 0; Collection<Connection> conns = this.jgraph.getEdges(); Iterator<Connection> it = conns.iterator(); while(it.hasNext()) { Connection currConn = it.next(); Point2D sender = this.layout.transform(currConn.getSender().getNode()); Point2D receiver = this.layout.transform(currConn.getReceiver().getNode());  double dirx = receiver.getX() - sender.getX(); double diry = receiver.getY() - sender.getY(); avgdirx += dirx; avgdiry += diry; if(this.debug) System.out.println(""Edge from "" + currConn.getSender().getNode().getId() + "" to "" + currConn.getReceiver().getNode().getId() + "" has direction: ("" + dirx + ""|"" +diry + "")""); } avgdirx /= this.conncount; avgdiry /= this.conncount; double avghyp = Math.sqrt(Math.pow(avgdirx, 2.) + Math.pow(avgdiry, 2.)); if(this.debug) System.out.println(""average horizontal vector: "" + avgdirx); if(this.debug) System.out.println(""original average edge direction: "" + ((avgdiry / avgdirx) / this.conncount));  // mirror graph at vertical axis through center point // if the horizontal component of the average edge direction is negative. if(avgdirx < 0) { for(i = 0; i < this.nodecount; i++) { Point2D currCoords = this.layout.transform(this.nodes[i]); double newx; newx = ((-1) * (currCoords.getX() - centerx)) + centerx; Point2D newCoords = new Point2D.Double(newx, currCoords.getY()); this.nodes[i].setX(newx); this.layout.setLocation(this.nodes[i], newCoords); } avgdirx *= -1; if(this.debug) System.out.println(""mirrored graph""); stepRotate(); return; }  // rotate graph around center so new average direction is 0 ( -> x-direction) for(i = 0; i < this.nodecount; i++) { Point2D currCoords = this.layout.transform(this.nodes[i]); if(this.debug) System.out.println(""Rotated Vertex "" + this.nodes[i].getId() + "" from ("" + currCoords.getX() + ""|"" + currCoords.getY() + "")""); double x = currCoords.getX() - centerx; double y = currCoords.getY() - centery; double newx = (x * avgdirx / avghyp) + (y * avgdiry / avghyp); newx += centerx; double newy = (y * avgdirx / avghyp) - (x * avgdiry / avghyp); newy += centery; Point2D newCoords = new Point2D.Double(newx, newy); this.nodes[i].setX(newx); this.nodes[i].setY(newy); this.layout.setLocation(this.nodes[i], newCoords); if(this.debug) System.out.println(""to ("" + newx + ""|"" + newy + "")""); } if(this.debug) System.out.println(""new average edge direction: "" + getAvgDir()); } "	0	0	1	0	1	0
@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false;  Value otherValue = (Value) o;  if (isBoolean() && otherValue.isBoolean()) { return this.booleanValue() == otherValue.booleanValue(); } else if (isInteger() && otherValue.isInteger()) { return this.integerValue() == otherValue.integerValue(); } else if (isInteger() || isFloat()) { return this.doubleValue() == otherValue.doubleValue(); } else { return this.stringValue().equalsIgnoreCase(otherValue.stringValue()); } } 	0	0	1	0	1	0
"@Override public void start() { if (logger.isFineEnabled()) { logger.fine(""TcpIpConnectionManager configured with Non Blocking IO-threading model: "" + inputThreadCount + "" input threads and "" + outputThreads + "" output threads""); }   logger.log(getSelectorMode() != SELECT ? INFO : FINE, ""IO threads selector mode is "" + getSelectorMode()); this.inputThreads = new NonBlockingIOThread[inputThreadCount];  for (int i = 0; i < inputThreads.length; i++) { NonBlockingIOThread thread = new NonBlockingIOThread( hazelcastThreadGroup.getInternalThreadGroup(), hazelcastThreadGroup.getThreadPoolNamePrefix(""IO"") + ""in-"" + i, loggingService.getLogger(NonBlockingIOThread.class), oomeHandler, selectorMode, idleStrategy); thread.id = i; thread.setSelectorWorkaroundTest(selectorWorkaroundTest); inputThreads[i] = thread; metricsRegistry.scanAndRegister(thread, ""tcp.inputThread["" + thread.getName() + ""]""); thread.start(); }  this.outputThreads = new NonBlockingIOThread[outputThreadCount]; for (int i = 0; i < outputThreads.length; i++) { NonBlockingIOThread thread = new NonBlockingIOThread( hazelcastThreadGroup.getInternalThreadGroup(), hazelcastThreadGroup.getThreadPoolNamePrefix(""IO"") + ""out-"" + i, loggingService.getLogger(NonBlockingIOThread.class), oomeHandler, selectorMode, idleStrategy); thread.id = i; thread.setSelectorWorkaroundTest(selectorWorkaroundTest); outputThreads[i] = thread; metricsRegistry.scanAndRegister(thread, ""tcp.outputThread["" + thread.getName() + ""]""); thread.start(); } startIOBalancer();  if (metricsRegistry.minimumLevel().isEnabled(DEBUG)) { metricsRegistry.scheduleAtFixedRate(new PublishAllTask(), 1, SECONDS); } } "	0	0	1	0	0	0
"@Transactional @Modifying @PreAuthorize(SpringEvalExpressions.HAS_AUTH_ROLLOUT_MANAGEMENT_WRITE + SpringEvalExpressions.HAS_AUTH_OR + SpringEvalExpressions.IS_SYSTEM_CODE) public void checkRunningRollouts(final long delayBetweenChecks) { verifyStuckedRollouts(); final long lastCheck = System.currentTimeMillis(); final int updated = rolloutRepository.updateLastCheck(lastCheck, delayBetweenChecks, RolloutStatus.RUNNING);  if (updated == 0) { // nothing to check, maybe another instance already checked in // between LOGGER.info(""No rolloutcheck necessary for current scheduled check {}, next check at {}"", lastCheck, lastCheck + delayBetweenChecks); return; }  final List<Rollout> rolloutsToCheck = rolloutRepository.findByLastCheckAndStatus(lastCheck, RolloutStatus.RUNNING); LOGGER.info(""Found {} running rollouts to check"", rolloutsToCheck.size());  for (final Rollout rollout : rolloutsToCheck) { LOGGER.debug(""Checking rollout {}"", rollout); final List<RolloutGroup> rolloutGroups = rolloutGroupRepository.findByRolloutAndStatus(rollout, RolloutGroupStatus.RUNNING);  if (rolloutGroups.isEmpty()) { // no running rollouts, probably there was an error // somewhere at the latest group. And the latest group has // been switched from running into error state. So we need // to find the latest group which executeLatestRolloutGroup(rollout); } else { LOGGER.debug(""Rollout {} has {} running groups"", rollout.getId(), rolloutGroups.size()); executeRolloutGroups(rollout, rolloutGroups); }  if (isRolloutComplete(rollout)) { LOGGER.info(""Rollout {} is finished, setting finished status"", rollout); rollout.setStatus(RolloutStatus.FINISHED); rolloutRepository.save(rollout); } } } "	0	0	1	0	0	0
public List<String> getProjects() { return projects; } 	0	0	0	0	0	1
"private void setUpNotification(final MediaInfo info) throws TransientNetworkDisconnectionException, NoConnectionException { if (info == null) { return; } if (mBitmapDecoderTask != null) { mBitmapDecoderTask.cancel(false); } Uri imgUri = null; try { if (!info.getMetadata().hasImages()) { build(info, null, mIsPlaying); return; } else { imgUri = info.getMetadata().getImages().get(0).getUrl(); } } catch (CastException e) { LOGE(TAG, ""Failed to build notification"", e); } mBitmapDecoderTask = new FetchBitmapTask() { @Override protected void onPostExecute(Bitmap bitmap) { try { mVideoArtBitmap = Utils.scaleAndCenterCropBitmap(bitmap, mDimensionInPixels, mDimensionInPixels); build(info, mVideoArtBitmap, mIsPlaying); } catch (CastException | NoConnectionException | TransientNetworkDisconnectionException e) { LOGE(TAG, ""Failed to set notification for "" + info.toString(), e); } if (mVisible) { startForeground(NOTIFICATION_ID, mNotification); } if (this == mBitmapDecoderTask) { mBitmapDecoderTask = null; } } }; mBitmapDecoderTask.execute(imgUri); } "	0	0	1	0	1	0
public boolean hasAnnotation(String annotClzName) { return false; } 	0	0	0	0	0	1
"@Override public void updateOwnedMarketItems() { Timber.d(""updateOwnedMarketItems""); InappHelper.getOwnedInappsObserveble(this, mService).subscribe( items -> { Timber.d(""market items: %s"", items); mOwnedMarketItems = items; supportInvalidateOptionsMenu(); if (!mOwnedMarketItems.isEmpty()) { if (!SecureUtils.checkIfPackageChanged(this) && !SecureUtils.checkLuckyPatcher(this)) { mMyPreferenceManager.setHasSubscription(true); } else { mMyPreferenceManager.setHasSubscription(false); mMyPreferenceManager.setAppCracked(true); mMyPreferenceManager.setLastTimeAdsShows(0);  showMessage(R.string.app_cracked); mPresenter.reactOnCrackEvent(); } } else { mMyPreferenceManager.setHasSubscription(false); } }, e -> Timber.e(e, ""error while getting owned items"") ); //also check if user joined app vk group mPresenter.checkIfUserJoinedAppVkGroup(); } "	0	0	0	1	1	0
@Override public Observable<ChannelFuture> call(final Channel channel) { return request.doOnNext(createAddAcceptEncodingHead(channel)) .map(RxNettys.<HttpObject>sendMessage(channel)); } 	0	0	1	0	0	0
"String getAllowedHeaders(final HttpServletRequest request) {  String url = request.getRequestURI(); String method = request.getMethod(); String origin = request.getHeader(HttpHeaders.ORIGIN);  if (method.equalsIgnoreCase(""GET"") && isCorsXhrAllowedForRequestUrl(url) && StringUtils.isNotEmpty(origin) && isCorsXhrAllowedForRequestOrigin(origin)) { return HttpHeaders.AUTHORIZATION + "", X-Requested-With""; }  return HttpHeaders.AUTHORIZATION; } "	0	0	0	0	0	1
"private Upload upload(File file, Project project, AWSDeviceFarmUploadType uploadType, Boolean synchronous) throws InterruptedException, IOException, AWSDeviceFarmException { CreateUploadRequest appUploadRequest = new CreateUploadRequest() .withName(file.getName()) .withProjectArn(project.getArn()) .withContentType(""application/octet-stream"") .withType(uploadType.toString()); Upload upload = api.createUpload(appUploadRequest).getUpload();  CloseableHttpClient httpClient = HttpClients.createSystem(); HttpPut httpPut = new HttpPut(upload.getUrl()); httpPut.setHeader(""Content-Type"", upload.getContentType());  FileEntity entity = new FileEntity(file); httpPut.setEntity(entity);  writeToLog(String.format(""Uploading %s to S3"", file.getName())); HttpResponse response = httpClient.execute(httpPut); if (response.getStatusLine().getStatusCode() != 200) { throw new AWSDeviceFarmException(String.format(""Upload returned non-200 responses: %i"", response.getStatusLine().getStatusCode())); }  if (synchronous) { while (true) { GetUploadRequest describeUploadRequest = new GetUploadRequest() .withArn(upload.getArn()); GetUploadResult describeUploadResult = api.getUpload(describeUploadRequest); String status = describeUploadResult.getUpload().getStatus();  if (""SUCCEEDED"".equalsIgnoreCase(status)) { writeToLog(String.format(""Upload %s succeeded"", file.getName())); break; } else if (""FAILED"".equalsIgnoreCase(status)) { writeToLog(String.format(""Error message from device farm: '%s'"", describeUploadResult.getUpload().getMetadata())); throw new AWSDeviceFarmException(String.format(""Upload %s failed!"", upload.getName())); } else { try { writeToLog(String.format(""Waiting for upload %s to be ready (current status: %s)"", file.getName(), status)); Thread.sleep(5000); } catch (InterruptedException e) { writeToLog(String.format(""Thread interrupted while waiting for the upload to complete"")); throw e; } } } }  return upload; } "	0	0	1	0	0	0
"@Override public BrowserRoot onGetRoot(String clientPackageName, int clientUid, Bundle rootHints) { Log.d(TAG, ""OnGetRoot: clientPackageName="" + clientPackageName + ""; clientUid="" + clientUid + "" ; rootHints="" + rootHints); return new BrowserRoot( getResources().getString(R.string.app_name), // Name visible in Android Auto null); // Bundle of optional extras } "	0	0	0	0	0	1
"public void postAsync(final ApplicationEvent event) { log.debug(""Received request to post an event {} asynchronously"", event); this.eventAsyncCounter.increment(); this.eventMulticaster.multicastEvent(event); } "	0	0	1	0	1	0
"static String generateMethodId(Method m) { return Checks.checknotnull(m) + ""/"" + Utils.join( "","", Utils.transform(Arrays.asList(m.getParameterTypes()).subList(1, m.getParameterTypes().length), new Utils.Form<Class<?>, String>() { @Override public String apply(Class in) { return in.getCanonicalName(); } }).toArray()); } "	0	0	1	0	0	0
@Override public void analysisCompleted(AnalysisEvent event) { IMarker marker = (IMarker) locationsViewer.getInput(); Display.getDefault().asyncExec(() -> { if (marker != null && marker.exists()) { setInput(marker); } else { clearInput(); } }); } 	0	0	1	0	1	0
@Override public void downSwipe() { PlaybackService.get(this).performAction(mDownAction, this); } 	0	0	0	0	0	1
@Override public void findDeclarationsAt(PsiElement element, int offsetInElement, Consumer<PomTarget> consumer) { PomTarget declaration = findDeclaration(element); if (declaration != null) { consumer.consume(declaration); } } 	0	0	0	0	0	1
protected void createEquivalentClass(OWLEquivalentClassesAxiom axiom) { AbstractClass topClass = vowlData.getClassForIri(owlClass.getIRI());  for (OWLClassExpression owlClassExpression : axiom.getClassExpressionsMinus(owlClass)) { topClass.addEquivalentElement(owlClassExpression.asOWLClass().getIRI()); }  topClass.addAttribute(VowlAttribute.EQUIVALENT); } 	0	0	0	1	0	0
"@Before public void setUp() { eventBus = new EventBus(); palette = new Palette(() -> eventBus); operation = new OperationMetaData(OperationDescription.builder() .name(""Find Target"") .summary("""") .build(), () -> null); } "	0	0	0	0	0	1
"@Override public String launch(AppDeploymentRequest request) { return getOrDeployApplication(request) .then(application -> launchTask(application, request)) .doOnSuccess(r -> logger.info(""Task {} launch successful"", request.getDefinition().getName())) .doOnError(t -> logger.error(String.format(""Task %s launch failed"", request.getDefinition().getName()), t)) .block(Duration.ofSeconds(this.deploymentProperties.getApiTimeout())); } "	0	0	0	0	0	1
"@Override public TaskStatus status(String id) { try { return getStatus(id) .doOnSuccess(v -> logger.info(""Successfully computed status [{}] for id={}"", v, id)) .doOnError(e -> logger.error(String.format(""Failed to compute status for %s"", id),e)) .block(Duration.ofMillis(this.deploymentProperties.getStatusTimeout())); } catch (Exception timeoutDueToBlock) { logger.error(""Caught exception while querying for status of id={}"", id, timeoutDueToBlock); return createErrorTaskStatus(id); } } "	0	0	0	0	0	1
"@Override public void cancel(String id) { requestCancelTask(id) .timeout(Duration.ofSeconds(this.deploymentProperties.getApiTimeout())) .doOnSuccess(r -> logger.info(""Task {} cancellation successful"", id)) .doOnError(t -> logger.error(String.format(""Task %s cancellation failed"", id), t)) .subscribe(); } "	0	0	0	0	0	1
@Override public int getHeight() { return this.pageTilesHeight * tileHeight; } 	0	0	0	0	0	1
public Block<E> extract(int requestedRank, int hash) { if (requestedRank == rank) return this; // - FIXME implementation is missing return null; } 	0	0	1	1	0	0
"public static void openDialog() { Dialog<ButtonType> dialog = new Dialog<>(); dialog.setTitle(""Export""); dialog.setHeaderText(null);  // Set the button types. ButtonType okButtonType = new ButtonType(""OK"", ButtonData.OK_DONE); dialog.getDialogPane().getButtonTypes().addAll(okButtonType); //dialog.getDialogPane().getButtonTypes().addAll(ButtonType.CANCEL); // Reenable Cancel button, once cancelling without export is possible  // Create the radio buttons VBox vBox = new VBox(); vBox.setSpacing(10);  ToggleGroup group = new ToggleGroup();  RadioButton excel = new RadioButton(""Excel""); excel.setToggleGroup(group); RadioButton csv = new RadioButton(""CSV""); csv.setToggleGroup(group); RadioButton json = new RadioButton(""JSON""); json.setToggleGroup(group); RadioButton xml = new RadioButton(""XML""); xml.setToggleGroup(group); RadioButton pdf = new RadioButton(""PDF""); pdf.setToggleGroup(group); RadioButton md = new RadioButton(""Markdown""); md.setToggleGroup(group);  //listen for changes in selection of radioButtons group.selectedToggleProperty().addListener((ov, oldToggle, newToggle) -> { //enable Ok button if something was selected if (group.getSelectedToggle() != null) { dialog.getDialogPane().lookupButton(ButtonType.OK).setDisable(false); } //shouldn't be necessary, for safety implemented if selection gets cleared else { dialog.getDialogPane().lookupButton(ButtonType.OK).setDisable(true); } });  vBox.getChildren().add(excel); vBox.getChildren().add(csv); vBox.getChildren().add(json); vBox.getChildren().add(xml); vBox.getChildren().add(pdf); vBox.getChildren().add(md);  //display export Dialog dialog.getDialogPane().setContent(vBox); dialog.initModality(Modality.APPLICATION_MODAL); Optional<ButtonType> result = dialog.showAndWait();  //if dialog is closed by Ok button (something has to be selected) if (result.get() == ButtonType.OK) {  //display file chooser FileChooser fileChooser = new FileChooser(); File exportFile = fileChooser.showSaveDialog(Main.getInstance().getPrimaryStage());  //check if fileChooser got a result if (exportFile != null) { String pathWithoutExtension = exportFile.getAbsolutePath(); FileExport exporter = new FileExport(); try { File exported;  //save exported file for later reference //switch for radio buttons if (excel.isSelected()) { exported = exporter.save(ExportFormat.EXCEL, Main.getInstance().getDocuFiles(), pathWithoutExtension + "".xsxl""); } else if (csv.isSelected()) { exported = exporter.save(ExportFormat.CSV, Main.getInstance().getDocuFiles(), pathWithoutExtension + "".csv""); } else if (json.isSelected()) { exported = exporter.save(ExportFormat.JSON, Main.getInstance().getDocuFiles(), pathWithoutExtension + "".json""); } else if (xml.isSelected()) { exported = exporter.save(ExportFormat.XML, Main.getInstance().getDocuFiles(), pathWithoutExtension + "".xml""); } else if (pdf.isSelected()) { exported = exporter.save(ExportFormat.PDF, Main.getInstance().getDocuFiles(), pathWithoutExtension + "".pdf""); } else if (md.isSelected()) { exported = exporter.save(ExportFormat.MD, Main.getInstance().getDocuFiles(), pathWithoutExtension + "".md""); } else {   //shouldn't happen, but default is pdf exported = exporter.save(ExportFormat.PDF, Main.getInstance().getDocuFiles(), pathWithoutExtension + "".pdf""); } Main.getInstance().statusArea.setMessage(""Saved as "" + exported.getAbsolutePath()); } catch (FileExportException e) { Main.getInstance().statusArea.setMessage(""Error in Export: ""+e.getCause()); e.printStackTrace(); //TODO use Logger } } } } "	0	0	1	1	0	0
"private void appendStartAndEndGCode() { String[] startCode, endCode; StringBuilder codeStringBuilder;  startCode = Languager.getGCodeArray(4, ""operationCode"", ""startCode""); endCode = Languager.getGCodeArray(4, ""operationCode"", ""endCode""); codeStringBuilder = new StringBuilder();  codeStringBuilder.append("";startGCode""); codeStringBuilder.append(System.getProperty(""line.separator"")); for (String code : startCode) {  if (code.contains(""M109"")) { code = ""M109 S"" + generator.getValue(""print_temperature""); } else if(code.contains(""M642 W"")) { float filamentFlow = Float.parseFloat( generator.getValue(""filament_flow"") ) / 100; filamentFlow = Float.parseFloat( String.format(""%.3f"", filamentFlow) ); code = ""M642 W"" + filamentFlow; }  codeStringBuilder.append(code.trim()); codeStringBuilder.append(System.getProperty(""line.separator""));  }  options.add(new CuraGenerator.CuraEngineOption(""startCode"", codeStringBuilder.toString()));  codeStringBuilder = new StringBuilder();  codeStringBuilder.append("";endGCode""); codeStringBuilder.append(System.getProperty(""line.separator"")); for (String code : endCode) { codeStringBuilder.append(code.trim()); codeStringBuilder.append(System.getProperty(""line.separator"")); }  options.add(new CuraGenerator.CuraEngineOption(""endCode"", codeStringBuilder.toString())); } "	0	0	0	0	0	1
@Override public void render(float delta) { Gdx.gl.glClearColor(0, 0, 0, 1); Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);  camera.update();  renderer.setView(camera); renderer.render();  stage.act(delta); stage.draw();  renderAnimation(delta);  switch (game.getPhase()) { case (1): if (overlayStack.isEmpty() || overlayStack == null) { Gdx.input.setInputProcessor(stage); } else { Gdx.input.setInputProcessor(overlayStack.get(overlayStack.size() - 1));  overlayStack.get(overlayStack.size() - 1).act(delta); overlayStack.get(overlayStack.size() - 1).draw(); }  SpriteBatch chanceBatch = new SpriteBatch(); chanceBatch.begin(); chanceBatch.setProjectionMatrix(camera.combined); chancellor.UpdatePosition(); chancellor.sprite.draw(chanceBatch); chanceBatch.end(); break; case (2): game.roboticonMarket.act(delta); game.roboticonMarket.draw(); break; case(3):  break; case (4): game.genOverlay.act(delta); game.genOverlay.draw(); break; case (5): game.resourceMarket.act(delta); game.resourceMarket.draw(); } } 	1	1	1	0	0	0
public static void start(Activity activity, Build build, String buildTypeName) { Intent intent = new Intent(activity, BuildDetailsActivity.class) .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP); Bundle b = new Bundle(); b.putSerializable(BundleExtractorValues.BUILD, build); b.putString(BundleExtractorValues.NAME, buildTypeName); intent.putExtras(b); activity.startActivity(intent); activity.overridePendingTransition(R.anim.pull_in_right, R.anim.push_out_left); } 	0	0	0	0	0	1
@Test public void testDelete() throws Exception { mockMvc.perform(delete(REST_URL + MEAL1_ID)) .andExpect(status().isOk()); MATCHER.assertCollectionEquals(Arrays.asList(MEAL6, MEAL5, MEAL4, MEAL3, MEAL2), service.getAll(START_SEQ)); } 	0	0	0	0	0	1
"@RequestMapping(""/rest/api/1/lostandfound"") public List<LostFound> lostFound(@RequestParam(value = ""search"", defaultValue = """") String search) throws Exception { return new LostFoundParser().getAll().stream() .filter(lostFound -> lostFound.getSubject().contains(search)) .collect(Collectors.toList()); } "	0	0	0	0	0	1
"@SuppressWarnings({ ""rawtypes"", ""unchecked"" }) private List getAllAssignmentGradeRecords(final Long gradebookId, final Collection studentUids) { HibernateCallback hc = new HibernateCallback() { public Object doInHibernate(Session session) throws HibernateException { if(studentUids.size() == 0) { // If there are no enrollments, no need to execute the query. if(log.isInfoEnabled()) log.info(""No enrollments were specified.  Returning an empty List of grade records""); return new ArrayList(); } else { Query q = session.createQuery(""from AssignmentGradeRecord as agr where agr.gradableObject.removed=false and "" + ""agr.gradableObject.gradebook.id=:gradebookId order by agr.pointsEarned""); q.setLong(""gradebookId"", gradebookId.longValue()); return filterGradeRecordsByStudents(q.list(), studentUids); } } }; return (List)getHibernateTemplate().execute(hc); } "	0	0	1	1	0	0
"@SuppressWarnings({ ""rawtypes"", ""unchecked"" }) private List getAssignments(final Long gradebookId, final SortType sortBy, final boolean ascending) { return (List)getHibernateTemplate().execute(new HibernateCallback() { public Object doInHibernate(Session session) throws HibernateException { List assignments = getAssignments(gradebookId, session);  sortAssignments(assignments, sortBy, ascending); return assignments; } }); } "	0	0	0	1	0	0
"public static void main (String[] args) throws FileNotFoundException { File trainFile = new File (args[0]); File testFile = new File (args[1]); File crfFile = new File (args[2]);  Pipe pipe = new SerialPipes (new Pipe[] { new GenericAcrfData2TokenSequence (2), new TokenSequence2FeatureVectorSequence (true, true), });  InstanceList training = new InstanceList (pipe); training.addThruPipe (new LineGroupIterator (new FileReader (trainFile), Pattern.compile (""\\s*""), true));  InstanceList testing = new InstanceList (pipe); training.addThruPipe (new LineGroupIterator (new FileReader (testFile), Pattern.compile (""\\s*""), true));  ACRF.Template[] tmpls = new ACRF.Template[] { new ACRF.BigramTemplate (0), new ACRF.BigramTemplate (1), new ACRF.PairwiseFactorTemplate (0,1), new CrossTemplate1 (0,1) };  ACRF acrf = new ACRF (pipe, tmpls);  ACRFTrainer trainer = new DefaultAcrfTrainer (); trainer.train (acrf, training, null, testing, 99999);  FileUtils.writeGzippedObject (crfFile, acrf); } "	0	0	0	0	0	1
private static void InitializeFields() { Solution.GenerateInitialSolution(10);  solSize = initialSolution.size(); tps = new TitledPane[solSize]; xAxis = new NumberAxis[solSize]; yAxis = new NumberAxis[solSize]; ac = new AreaChart[solSize]; series = new XYChart.Series[initialSolution.size()]; } 	0	0	1	0	0	0
"private void processFile(final FileInfo f) { currentFile = f.src; if (copytoMap.containsKey(f.file)) { logger.debug(""Ignoring a copy-to file "" + f.src); return; } outputFile = new File(job.tempDir, f.file.getPath()); final File outputDir = outputFile.getParentFile(); if (!outputDir.exists() && !outputDir.mkdirs()) { logger.error(""Failed to create output directory "" + outputDir.getAbsolutePath()); return; } logger.info(""Processing "" + f.src);  final Set<URI> schemaSet = dic.get(f.uri); if (schemaSet != null && !schemaSet.isEmpty()) { logger.debug(""Loading subject schemes""); subjectSchemeReader.reset(); for (final URI schema : schemaSet) { subjectSchemeReader.loadSubjectScheme(new File(job.tempDir.toURI().resolve(schema.getPath() + SUBJECT_SCHEME_EXTENSION))); } validateMap = subjectSchemeReader.getValidValuesMap(); defaultValueMap = subjectSchemeReader.getDefaultValueMap(); } else { validateMap = Collections.EMPTY_MAP; defaultValueMap = Collections.EMPTY_MAP; } if (profilingEnabled) { filterUtils = baseFilterUtils.refine(subjectSchemeReader.getSubjectSchemeMap()); }  OutputStream out = null; try { out = new FileOutputStream(outputFile);  reader.setErrorHandler(new DITAOTXMLErrorHandler(currentFile.toString(), logger));  final TransformerFactory tf = TransformerFactory.newInstance(); final Transformer serializer = tf.newTransformer(); XMLReader xmlSource = getXmlReader(f.format); for (final XMLFilter filter: getProcessingPipe(currentFile)) { filter.setParent(xmlSource); xmlSource = filter; } // ContentHandler must be reset so e.g. Saxon 9.1 will reassign ContentHandler // when reusing filter with multiple Transformers. xmlSource.setContentHandler(null);  final Source source = new SAXSource(xmlSource, new InputSource(f.src.toString())); final Result result = new StreamResult(out); serializer.transform(source, result); } catch (final RuntimeException e) { throw e; } catch (final Exception e) { logger.error(e.getMessage(), e) ; } finally { if (out != null) { try { out.close(); }catch (final Exception e) { logger.error(e.getMessage(), e) ; } } }  if (isFormatDita(f.format)) { f.format = ATTR_FORMAT_VALUE_DITA; } } "	0	0	0	0	0	1
public void showUserProfileFragment(String petSitterObjectId) { FragmentManager fm = getSupportFragmentManager();  // Hide current fragment if (mCurrentFragmentTag != null) { fm.beginTransaction().hide(fm.findFragmentByTag(mCurrentFragmentTag)).commit(); }  Fragment fragmentToShow = UserProfileFragment.newInstance(petSitterObjectId); fm.beginTransaction() .addToBackStack(null) .add(R.id.flContent, fragmentToShow) .commit(); } 	0	0	0	0	0	1
"private String buildErrorMessage(Set<ValidationMessage> validationMessages) { return String.format(""%s errors have been found while validating the application: %s"", validationMessages.size(), Arrays.toString(validationMessages.toArray())); } "	0	0	0	1	0	0
"public void initialize(URI uri, Configuration conf) throws IOException { if (uri.getHost() == null) { throw new IllegalArgumentException(""Invalid hostname in URI "" + uri); } String userInfo = uri.getUserInfo(); if (userInfo != null) { String[] ossCredentials  = userInfo.split("":""); if (ossCredentials.length >= 2) { accessKeyId = ossCredentials[0]; accessKeySecret = ossCredentials[1]; } if (ossCredentials.length == 3) { securityToken = ossCredentials[2]; } }  String host = uri.getHost(); if (!StringUtils.isEmpty(host) && !host.contains(""."")) { bucket = host; } else if (!StringUtils.isEmpty(host)) { bucket = host.substring(0, host.indexOf(""."")); endpoint = host.substring(host.indexOf(""."") + 1); }  if (accessKeyId == null) { accessKeyId = conf.getTrimmed(""fs.oss.accessKeyId""); } if (accessKeySecret == null) { accessKeySecret = conf.getTrimmed(""fs.oss.accessKeySecret""); } if (securityToken == null) { securityToken = conf.getTrimmed(""fs.oss.securityToken""); }  if (endpoint == null) { endpoint = conf.getTrimmed(""fs.oss.endpoint""); }  ClientConfiguration cc = initializeOSSClientConfig(conf);  if (securityToken == null) { this.ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret, cc); } else { this.ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret, securityToken, cc); } this.finalOutputPath = conf.get(FileOutputFormat.OUTDIR); this.numCopyThreads = conf.getInt(""fs.oss.multipart.thread.number"", 5); this.maxSplitSize = conf.getInt(""fs.oss.multipart.split.max.byte"", 5 * 1024 * 1024); this.numSplits = conf.getInt(""fs.oss.multipart.split.number"", numCopyThreads); this.maxSimpleCopySize = conf.getLong(""fs.oss.copy.simple.max.byte"", 64 * 1024 * 1024L); this.maxSimplePutSize = conf.getLong(""fs.oss.put.simple.max.byte"", 64 * 1024 * 1024); } "	0	0	0	0	0	1
"private ExamItemScoringGuide getExamItemSolution(XPath xPath, Document xmlDoc, String id) { try { Node rubriclistNode = (Node) xPath .compile(""/itemrelease/item/content/rubriclist"") .evaluate(xmlDoc, XPathConstants.NODE);  return ExamItemScoringGuide .builder() .answerKey(getAnswerKey(xPath, xmlDoc)) .rubrics(getRubrics(xPath, id, rubriclistNode)) .exemplars(getExemplars(xPath, id, rubriclistNode)) .build();  } catch (XPathExpressionException e) { // This exception is already pretty well guarded against in the helper methods, // it would be surprising if it happened here.  logger.error(""Error while parsing item xml."", e); throw new RuntimeException(""Error parsing xml for id: "" + id, e); } } "	0	0	1	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); YonaApplication.getEventChangeManager().registerListener(this); loadPasscodeView(true); initializeAnimation(); } 	1	0	1	0	0	0
public Sheet checkSheetName(Workbook workbook) throws IOException, BiffException { assertTrue(workbook.getSheets().length > 0); for (String name : workbook.getSheetNames()) { if (name.equals(getResources(activityTestRule).getString(R.string.default_sheet_name))) { return workbook.getSheet(name); } } workbook.close(); return null; } 	0	0	0	0	0	1
@Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { if (savedInstanceState != null) { movie = savedInstanceState.getParcelable(Constants.BUNDLE_MOVIE); }  View view = inflater.inflate(R.layout.fragment_movie_detail, container, false);  Toolbar toolbar = (Toolbar) view.findViewById(R.id.toolbar); toolbar.setTitle(movie.getTitle());  favoriteButton = (FloatingActionButton) view.findViewById(R.id.button_favorite); favoriteButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { new FavoriteTogglerTask().execute(); } }); new FavoriteCheckerTask().execute();  TextView title = (TextView) view.findViewById(R.id.text_view_title); title.setText(movie.getTitle());  TextView releaseDate = (TextView) view.findViewById(R.id.text_view_release_date); releaseDate.setText(movie.getReleaseDate());  TextView rating = (TextView) view.findViewById(R.id.text_view_rating); String voteAverage = Double.toString(movie.getVoteAverage()); rating.setText(voteAverage);  duration = (TextView) view.findViewById(R.id.text_view_duration);  LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getActivity()); linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL); genresListAdapter = new GenresListAdapter(); genresRecyclerView = (RecyclerView) view.findViewById(R.id.recycler_view_genres_list); genresRecyclerView.setLayoutManager(linearLayoutManager); genresRecyclerView.setAdapter(genresListAdapter); genresRecyclerView.addItemDecoration(new SpacingItemDecoration( (int) getResources().getDimension(R.dimen.spacing_genre)));  overview = (TextView) view.findViewById(R.id.text_view_overview); overview.setText(movie.getOverview()); tagLine = (TextView) view.findViewById(R.id.text_view_tag_line);  ImageView backdropImage = (ImageView) view.findViewById(R.id.image_view_backdrop); ImageView posterImage = (ImageView) view.findViewById(R.id.image_view_poster);  Glide.with(view.getContext()) .load(BACKDROP_IMAGE_URL + movie.getBackdropPath()) .asBitmap() .format(DecodeFormat.PREFER_ARGB_8888) .placeholder(R.drawable.image_placeholder) .into(backdropImage);  Glide.with(view.getContext()) .load(POSTER_IMAGE_URL + movie.getPosterPath()) .placeholder(R.drawable.image_placeholder) .into(posterImage);  linearLayoutManager = new LinearLayoutManager(getActivity()); linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL); videosListAdapter = new VideosListAdapter(MovieDetailFragment.this); videosRecyclerView = (RecyclerView) view.findViewById(R.id.recycler_view_videos_list); videosRecyclerView.setLayoutManager(linearLayoutManager); videosRecyclerView.setAdapter(videosListAdapter); videosRecyclerView.addItemDecoration(new SpacingItemDecoration((int) getResources().getDimension(R.dimen.spacing_genre)));  reviewAuthor = (TextView) view.findViewById(R.id.text_view_review_author); reviewContent = (TextView) view.findViewById(R.id.text_view_review_content); reviewReadAll = (TextView) view.findViewById(R.id.text_view_review_read_all); reviewReadAll.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) {  Bundle bundle = new Bundle(); bundle.putInt(Constants.BUNDLE_ID, movie.getId()); bundle.putString(Constants.BUNDLE_TITLE, movie.getTitle()); bundle.putLong(Constants.BUNDLE_VOTE_COUNT, movie.getVoteCount()); bundle.putDouble(Constants.BUNDLE_VOTE_AVERAGE, movie.getVoteAverage());  MovieReviewsFragment movieReviewsFragment = new MovieReviewsFragment(); movieReviewsFragment.setArguments(bundle);  getActivity().getSupportFragmentManager() .beginTransaction() .replace(R.id.container_movie_detail, movieReviewsFragment) .addToBackStack(null) .commit(); } }); return view; } 	1	0	1	1	0	0
private void switchPlayer() { if(currPlayer == playerX) currPlayer = playerO; else currPlayer = playerX; } 	0	0	1	1	0	0
public int getInput () { Scanner s = new Scanner(System.in); int input  = s.nextInt();  return input; } 	0	0	0	0	0	1
@Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException { if (this.pattern.matcher(file.toString()).matches()) { this.files.add(file.toFile()); } return FileVisitResult.CONTINUE; } 	0	0	1	1	0	0
public static Guild getGhc() { return ghc; } 	0	0	1	0	0	0
"public static void addAchievements() { instance.addToFile(""achievement.divineIntervention.desc=Spawn The Watcher""); instance.addToFile(""achievement.possibilities.desc=Enter the Eden dimension""); instance.addToFile(""achievement.friendOrFoe.desc=Kill a bunny""); instance.addToFile(""achievement.darkAnotherDay.desc=Enter the Mortum Dimension""); instance.addToFile(""achievement.whenPigsFly.desc=Wear a full Angelic armor set""); instance.addToFile(""achievement.offKey.desc=Shoot a Sound of Music""); instance.addToFile(""achievement.enrichment.desc=""); instance.addToFile(""achievement.littleCreature.desc=Spawn a Golem Of Rejuv'""); instance.addToFile(""achievement.halloweenSpirit.desc=Trade with a Jack-O-Man""); instance.addToFile(""achievement.feedingOnTheFish.desc=Kill a Shark""); instance.addToFile(""achievement.frozenLand.desc=Enter the Iceika dimension""); instance.addToFile(""achievement.frozenGoods.desc=Open a frozen chest""); instance.addToFile(""achievement.lilTinkerin.desc=Trade with a Tinkerer""); instance.addToFile(""achievement.lilGift.desc=Open a gift Box""); instance.addToFile(""achievement.divinePlan.desc=Craft a Divine Sword""); instance.addToFile(""achievement.whatLiesWithin.desc=Enter The Dungeon Of Arcana""); instance.addToFile(""achievement.perfectlyCorrupted.desc=Use the Altar Of Corruption""); instance.addToFile(""achievement.totalDemonization.desc=Use the Demon Furnace""); instance.addToFile(""achievement.evilDisease.desc=Kill Parasecta""); instance.addToFile(""achievement.dungeonMaster.desc=Kill Dramix""); instance.addToFile(""achievement.eyeOfEvil.desc=Look into the eye of The Eye""); instance.addToFile(""achievement.tripleDanger.desc=Kill an Ender Triplet""); instance.addToFile(""achievement.hotterThanHell.desc=Step on a hot block in Arcana""); instance.addToFile(""achievement.mealToRemember.desc=Eat a chicken dinner""); instance.addToFile(""achievement.yuk.desc=Use an Arcana potion""); instance.addToFile(""achievement.spawnDAR.desc=Spawn Densos and Reyvor""); instance.addToFile(""achievement.dramcryxDeath.desc=Kill a Jungle Dramcryx""); instance.addToFile(""achievement.allHellLoose.desc=Use a Storm Sword""); instance.addToFile(""achievement.skyHigh.desc=Jump on an Elevantium Block""); instance.addToFile(""achievement.oneLampTwoLampRedLampBlueLamp.desc=Craft an Eden Lamp"");  instance.addToFile(""achievement.divineIntervention=Divine Intervention""); instance.addToFile(""achievement.possibilities=Possibilities""); instance.addToFile(""achievement.friendOrFoe=Friend or Foe?""); instance.addToFile(""achievement.darkAnotherDay=Dark Another Day""); instance.addToFile(""achievement.whenPigsFly=When Pigs Fly""); instance.addToFile(""achievement.offKey=Off Key""); instance.addToFile(""achievement.enrichment=Enrichment""); instance.addToFile(""achievement.littleCreature=Little Creature""); instance.addToFile(""achievement.halloweenSpirit=Halloween Spirit""); instance.addToFile(""achievement.oneLamp=One Lamp""); instance.addToFile(""achievement.feedingOnTheFish=Feeding on the Fish""); instance.addToFile(""achievement.hotterThanHell=Hotter than Hell""); instance.addToFile(""achievement.mealToRemember=Meal to Remember""); instance.addToFile(""achievement.yuk=Yuk!""); instance.addToFile(""achievement.frozenLand=Frozen Land""); instance.addToFile(""achievement.frozenGoods=Frozen Goods""); instance.addToFile(""achievement.lilTinkerin=Lil' Tinkerin""); instance.addToFile(""achievement.divinePlan=Divine Plan""); instance.addToFile(""achievement.whatLiesWithin=What Lies Within""); instance.addToFile(""achievement.perfectlyCorrupted=Perfectly Corrupted""); instance.addToFile(""achievement.totalDemonization=Total Demonization""); instance.addToFile(""achievement.evilDisease=Evil Disease""); instance.addToFile(""achievement.dungeonMaster=Dungeon Master""); instance.addToFile(""achievement.eyeOfEvil=Eye of Evil""); instance.addToFile(""achievement.tripleDanger=Triple Danger""); instance.addToFile(""achievement.lilGift=Lil' Gift""); instance.addToFile(""achievement.spawnDAR=Ten Heads are Better than One""); instance.addToFile(""achievement.dramcryxDeath=Death to all Jungle Stegosaurous!""); instance.addToFile(""achievement.allHellLoose=All Hell Loose""); instance.addToFile(""achievement.skyHigh=Sky High""); instance.addToFile(""achievement.oneLampTwoLampRedLampBlueLamp=One Lamp Two Lamp Red Lamp Blue Lamp""); } "	0	0	0	0	0	1
"@Override public void onTerminated(InternalSubchannel is) { assertSame(internalSubchannel, is); callbackInvokes.add(""onTerminated""); } "	0	0	0	0	0	1
"@Override public void onInUse(InternalSubchannel is) { assertSame(internalSubchannel, is); callbackInvokes.add(""onInUse""); } "	0	0	0	0	0	1
"@Override public void onTagClick(int position, String text) { Toast.makeText(MainActivity.this, ""position:"" + position + "", text:"" + text, Toast.LENGTH_SHORT).show(); } "	0	0	0	0	0	1
@Override public AtomicParentChildFieldData load(AtomicReaderContext context) { assert context.reader().getCoreCacheKey() == reader.leaves().get(context.ord).reader().getCoreCacheKey(); return atomicFDs[context.ord]; } 	0	0	0	0	0	1
"public void queryFirebase() { DatabaseReference users= FirebaseDatabase.getInstance().getReference(""User""); users.orderByChild(""Email"").equalTo(fbuser.getEmail()) .addListenerForSingleValueEvent(new ValueEventListener() { @Override public void onDataChange(DataSnapshot dataSnapshot) { for (DataSnapshot userSnapshot : dataSnapshot.getChildren()) { temp = userSnapshot.getValue(User.class); userName.setText(temp.DisplayName); hash_tag.setText(temp.handle); numberFollowers.setText(Integer.toString(temp.followers.size())); numActivityPoints.setText(Integer.toString(temp.ActivityPoints)); numLikes.setText(Integer.toString(temp.LikesReceived)); about.setText(temp.AboutMe);  //TRY because user might not have profile picture yet try { //Convert the URL to aa Bitmap using function, then set the profile picture profilePicture.setImageBitmap(getBitmapFromURL(temp.ProfilePicture)); }catch (Exception e){ e.printStackTrace(); } } } @Override public void onCancelled(DatabaseError databaseError) { System.out.println(""The read failed: "" + databaseError.getCode()); } }); } "	0	0	0	0	0	1
"@Override public PutMessageResponseType putMessage(PutMessageRequestType request) { MDC.put(IntegrasjonspunktConfiguration.KEY_ORGANISATION_NUMBER, configuration.getOrganisationNumber()); PutMessageRequestWrapper message = new PutMessageRequestWrapper(request); if (!message.hasSenderPartyNumber()) { message.setSenderPartyNumber(configuration.getOrganisationNumber()); }  Audit.info(""Recieved message"", markerFrom(message));  if(StringUtils.isBlank((String) message.getPayload())){ Audit.error(""Payload is missing"", markerFrom(message)); if(configuration.getReturnOkOnMissingPayload()){ return PutMessageResponseFactory.createOkResponse(); } else { return PutMessageResponseFactory.createErrorResponse( new MessageException(StatusMessage.MISSING_PAYLOAD)); } }  if (!message.hasSenderPartyNumber() && !configuration.hasOrganisationNumber()) { Audit.error(""Sernders orgnr missing"", markerFrom(message)); throw new MeldingsUtvekslingRuntimeException(""Missing senders orgnumber. Please configure orgnumber= in the integrasjonspunkt-local.properties""); }  if (configuration.isQueueEnabled()) { internalQueue.enqueueExternal(request); Audit.info(""Message enqueued"", markerFrom(message));  return PutMessageResponseFactory.createOkResponse(); } else { Audit.info(""Queue is disabled"", markerFrom(message));  if (hasAdresseregisterCertificate(request.getEnvelope().getReceiver().getOrgnr())) { PutMessageContext context = new PutMessageContext(eventLog, messageSender); PutMessageStrategyFactory putMessageStrategyFactory = PutMessageStrategyFactory.newInstance(context); PutMessageStrategy strategy = putMessageStrategyFactory.create(request.getPayload()); return strategy.putMessage(request); } else { if(hasMshEndpoint()) { Audit.info(""Send message to MSH"", markerFrom(message)); return mshClient.sendEduMelding(request); } Audit.error(""Receiver not found"", markerFrom(message)); return PutMessageResponseFactory.createErrorResponse(new MessageException(StatusMessage.UNABLE_TO_FIND_RECEIVER)); } } } "	0	0	0	0	0	1
"protected void wasOk() { DataSourcePanel p = panels.get(tabPane.getSelectedIndex()); result = name.getText() + "";"" + p.wasOk(); } "	0	0	1	0	1	0
protected void runOnMainSync(Runnable runnable) { // This is required for certain inflating/rendering/UI manipulation actions that might only be // supported on the main thread/looper threads (e.g. animations). // See the related issue: https://github.com/facebook/screenshot-tests-for-android/issues/57 InstrumentationRegistry.getInstrumentation().runOnMainSync(runnable); } 	0	0	0	1	0	0
"@EventHandler(priority=EventPriority.HIGHEST) public void onPlayerArmorStandManipulate(PlayerArmorStandManipulateEvent event) {  // MEMO: このイベントハンドラは、 //   スタンドにアイテムを入れたり出したりした時に呼び出されるので、 //   所有者を確認して、所有者でなければメッセージを表示して操作をキャンセルする。  // ロックデータ取得 ArmorStand stand = event.getRightClicked(); LockData ld = lockManager.getLockDataByArmorStand(stand);  if ( ld != null && !ld.getOwnerUuid().equals(event.getPlayer().getUniqueId()) && !event.getPlayer().hasPermission(PERMISSION + "".admin"") ) { event.setCancelled(true); event.getPlayer().sendMessage(Messages.get(""ArmorStandLocked"")); return; } } "	0	0	0	0	0	1
@EventHandler public void onUpdate(UpdateEvent event) { if (event.getType() == UpdateType.SECOND) { for (Player player : Bukkit.getOnlinePlayers()) { if (!ThirstManager.getThirst().validatePlayer(player)) continue; if (!Thirst.getInstance().getYAMLConfig().alwaysShowActionBar) continue;  ThirstManager.getThirst().displayThirst(player); } }  else if (event.getType() == UpdateType.CENTI_SECOND) { for (String key : ThirstManager.getThirst().getThirstDataMap().keySet()) { Player player = Bukkit.getServer().getPlayer(UUID.fromString(key));  if (player == null) { ThirstManager.getThirst().getThirstDataMap().remove(key); continue; }  if (!ThirstManager.getThirst().validatePlayer(player)) continue;  //Don't put in validatePlayer because then thirst doesn't display properly. if ((player.getEyeLocation().getBlock().getType() == Material.WATER || player.getEyeLocation().getBlock().getType() == Material.STATIONARY_WATER) && !Thirst.getInstance().getYAMLConfig().removeThirstSubmerged) continue;   if (System.currentTimeMillis() >= ThirstManager.getThirst().getThirstData(player).getTime()) { if (!Thirst.getInstance().getYAMLConfig().removeAFK) { if (player.getLocation().getBlockX() != ThirstManager.getThirst().getThirstData(player).getLastLocation().getBlockX() || player.getLocation().getBlockY() != ThirstManager.getThirst().getThirstData(player).getLastLocation().getBlockY() || player.getLocation().getBlockZ() != ThirstManager.getThirst().getThirstData(player).getLastLocation().getBlockZ()) { ThirstManager.getThirst().removeThirst(player);  ThirstManager.getThirst().getThirstData(player).setLastLocation(player.getLocation()); } } else ThirstManager.getThirst().removeThirst(player); } } }  else if (event.getType() == UpdateType.DAMAGE) { for (Player player : Bukkit.getOnlinePlayers()) { if (!ThirstManager.getThirst().validatePlayer(player)) continue;  if (ThirstManager.getThirst().getPlayerThirst(player) <= Thirst.getInstance().getYAMLConfig().getDamagePercent()) { player.damage(Thirst.getInstance().getYAMLConfig().getDamageAmount()); } } } } 	0	0	0	0	0	1
"public boolean doRewrite(final HttpServletRequest hsRequest, final HttpServletResponse hsResponse, final FilterChain chain) throws IOException, ServletException { boolean requestRewritten = false; String target = getTarget(); if (log.isTraceEnabled()) { log.trace(""doRewrite called""); } if (rewriteMatch != null) { // todo: exception handling? rewriteMatch.execute(hsRequest, hsResponse); } if (stopFilterChain) { // if we need to stop the filter chain don't do anything log.trace(""stopping filter chain""); requestRewritten = true;  } else if (isNoSubstitution()) { log.trace(""no substitution""); requestRewritten = false;  } else if (isForward()) { if (hsResponse.isCommitted()) { log.error(""response is comitted cannot forward to "" + target + "" (check you haven't done anything to the response (ie, written to it) before here)""); } else { final RequestDispatcher rq = getRequestDispatcher(hsRequest, target, targetContext); rq.forward(hsRequest, hsResponse); if (log.isTraceEnabled()) log.trace(""forwarded to "" + target); } requestRewritten = true;  } else if (isPreInclude()) { final RequestDispatcher rq = getRequestDispatcher(hsRequest, target, targetContext); rq.include(hsRequest, hsResponse); chain.doFilter(hsRequest, hsResponse); requestRewritten = true; if (log.isTraceEnabled()) log.trace(""preinclded "" + target);  } else if (isPostInclude()) { final RequestDispatcher rq = getRequestDispatcher(hsRequest, target, targetContext); chain.doFilter(hsRequest, hsResponse); rq.include(hsRequest, hsResponse); requestRewritten = true; if (log.isTraceEnabled()) log.trace(""postinclded "" + target);  } else if (isRedirect()) { if (hsResponse.isCommitted()) { log.error(""response is comitted cannot redirect to "" + target + "" (check you haven't done anything to the response (ie, written to it) before here)""); } else { if (isEncode()) { target = hsResponse.encodeRedirectURL(target); } hsResponse.sendRedirect(target); if (log.isTraceEnabled()) log.trace(""redirected to "" + target); } requestRewritten = true;  } else if (isTemporaryRedirect()) { if (hsResponse.isCommitted()) { log.error(""response is comitted cannot temporary redirect to "" + target + "" (check you haven't done anything to the response (ie, written to it) before here)""); } else { if (isEncode()) { target = hsResponse.encodeRedirectURL(target); } hsResponse.setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY); hsResponse.setHeader(""Location"", target); if (log.isTraceEnabled()) log.trace(""temporarily redirected to "" + target); } requestRewritten = true;  } else if (isPermanentRedirect()) { if (hsResponse.isCommitted()) { log.error(""response is comitted cannot permanent redirect "" + target + "" (check you haven't done anything to the response (ie, written to it) before here)""); } else { if (isEncode()) { target = hsResponse.encodeRedirectURL(target); } hsResponse.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY); hsResponse.setHeader(""Location"", target); if (log.isTraceEnabled()) log.trace(""permanently redirected to "" + target); } requestRewritten = true;  } else if (isProxy()) { if (hsResponse.isCommitted()) { log.error(""response is committed. cannot proxy "" + target + "". Check that you havn't written to the response before.""); } else { RequestProxy.execute(target, hsRequest, hsResponse); if (log.isTraceEnabled()) { log.trace(""Proxied request to "" + target); } } requestRewritten = true; } return requestRewritten; } "	0	0	0	0	0	1
@Override public void addIndexedTree(IndexInfo index, ObjectId originalTree, ObjectId indexedTree) { ObjectId indexTreeLookupId = computeIndexTreeLookupId(index.getId(), originalTree); try (RocksDBReference dbRef = dbhandle.getReference()) { dbRef.db().put(indexMetadataColumn, indexTreeLookupId.getRawValue(), indexedTree.getRawValue()); } catch (RocksDBException e) { throw Throwables.propagate(e); } } 	0	0	0	0	0	1
"@RequestMapping(""/addCategory.htm"") public ModelAndView addCategory(HttpSession session) { try { checkInvalidSession(session); testRight(session, Right.Update_Project); Project activeProject = this.loadCurrentProject(session); int projectId = activeProject.getProjectID(); Category category = new Category(); categoryDAO.saveCategory(category); activeProject.addCategory(category); projectDAO.updateProject(activeProject); return new ModelAndView(""redirect:projectSettings.htm?id="" + projectId + ""#category-tab""); } catch (ProjectPersistenceException | InvalidSessionException | InsufficientRightsException | UserPersistenceException e) { return new ModelAndView(""redirect:projectOverview.htm""); } } "	0	0	1	1	1	0
private void showAddFlashcardsDialog(){ cards = project.getAllCards(); AddFlashcardDialog d; try { d = new AddFlashcardDialog(project, ProjectPanel.this); d.setVisible(true); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); }  } 	0	0	1	0	1	0
"public void removeAppFromContainerGroupAndRemoveGroupIfEmpty(ResourceGroupEntity applicationGroup) throws ResourceNotFoundException, ElementAlreadyExistsException { if (applicationGroup != null) {  ApplicationServer applicationCollectorGroup = commonService .createOrGetApplicationCollectorServer(); List<Application> applications = applicationCollectorGroup.getApplications(); for (Application app : applications) { if (applicationGroup.getResources().contains(app.getEntity())) { List<AbstractResourceRelationEntity> relations = getConsumedRelationsByMasterAndSlave( applicationCollectorGroup.getEntity(), applicationGroup.getResources(), null); if (!relations.isEmpty()) { doRemoveResourceRelationForAllReleases(relations.get(0).getId()); } } } // Falls ApplicationServerContainer nur die soeben verschobene // Applikation enthält, so soll diese Gruppe gelöscht werden! if (applications.size() == 0 || applications.size() == applicationGroup.getResources().size()) { entityManager.remove(applicationCollectorGroup.getEntity()); log.info(""ApplicationServerContainer removed""); } } } "	0	0	1	0	0	0
"@RequestMapping(value = {""/"", """"}, method = RequestMethod.POST) @ResponseBody public RestWrapper createFileMonitorProperties(@ModelAttribute(""fileMonitorInfo"") @Valid FileMonitorInfo fileMonitorInfo, BindingResult bindingResult, Principal principal) { RestWrapper restWrapper = null; if (bindingResult.hasErrors()) { BindingResultError bindingResultError = new BindingResultError(); return bindingResultError.errorMessage(bindingResult); } //making process Process parentProcess = Dao2TableUtil.buildJPAProcess(26, fileMonitorInfo.getProcessName(), fileMonitorInfo.getProcessDescription(), 2,fileMonitorInfo.getBusDomainId()); Users users=new Users(); users.setUsername(principal.getName()); parentProcess.setUsers(users); parentProcess.setUserRoles(userRolesDAO.minUserRoleId(principal.getName())); Process childProcess = Dao2TableUtil.buildJPAProcess(27, ""SubProcess of "" + fileMonitorInfo.getProcessName(), fileMonitorInfo.getProcessDescription(), 0,fileMonitorInfo.getBusDomainId()); List<Properties> childProps=new ArrayList<>(); //inserting in properties table Properties jpaProperties = Dao2TableUtil.buildJPAProperties(FILEMON, ""deleteCopiedSrc"", fileMonitorInfo.getDeleteCopiedSource(), ""Delete copied source""); childProps.add(jpaProperties); jpaProperties = Dao2TableUtil.buildJPAProperties(FILEMON, ""filePattern"", fileMonitorInfo.getFilePattern(), ""pattern of file""); childProps.add(jpaProperties); jpaProperties = Dao2TableUtil.buildJPAProperties(FILEMON, ""hdfsUploadDir"", fileMonitorInfo.getHdfsUploadDir(), ""hdfc upload dir""); childProps.add(jpaProperties); jpaProperties = Dao2TableUtil.buildJPAProperties(FILEMON, ""monitoredDirName"", fileMonitorInfo.getMonitoredDirName(), ""file monitored dir""); childProps.add(jpaProperties); jpaProperties = Dao2TableUtil.buildJPAProperties(FILEMON, ""sleepTime"", Integer.toString(fileMonitorInfo.getSleepTime()), ""sleeptime of thread""); childProps.add(jpaProperties); List<Process> processList = processDAO.createOneChildJob(parentProcess,childProcess,null,childProps); List<com.wipro.ats.bdre.md.beans.table.Process>tableProcessList=Dao2TableUtil.jpaList2TableProcessList(processList); Integer counter=tableProcessList.size(); for(com.wipro.ats.bdre.md.beans.table.Process process:tableProcessList){ process.setCounter(counter); process.setTableAddTS(DateConverter.dateToString(process.getAddTS())); process.setTableEditTS(DateConverter.dateToString(process.getEditTS())); } restWrapper = new RestWrapper(processList, RestWrapper.OK); LOGGER.info(""Process and properties inserted for File Monitor Process by "" + principal.getName()); return restWrapper; } "	1	0	0	0	0	0
public IBeanController getBeanService() { return beanService; } 	0	0	0	0	0	1
"public int getCountOfStorageType(String type) { JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource); String sql = ""SELECT COUNT(*) FROM storage WHERE type = ?"";  return jdbcTemplate.queryForObject(sql, Integer.class); } "	0	0	1	1	1	0
"public void init() throws IOException { this.activitiesList = YouTubeAPI.create().activities() .list(""snippet"") .setFields(""items(snippet/publishedAt)"") .setKey(BuildConfig.YOUTUBE_API_KEY) .setMaxResults(MAX_RESULTS); } "	0	0	0	0	0	1
"@Test public void analyze_run_inspect_code() throws Exception { Settings settings = createSettings(""MyLibrary"", ""CSharpPlayground.sln"", ""inspectcode.exe""); RulesProfile profile = mock(RulesProfile.class); DefaultFileSystem fileSystem = new DefaultFileSystem(); ResourcePerspectives perspectives = mock(ResourcePerspectives.class);  String languageKey = ""foo""; ReSharperSensor sensor = new ReSharperSensor( new ReSharperConfiguration(languageKey, ""foo-resharper"", ""fooReportkey""), settings, profile, fileSystem, perspectives);  List<ActiveRule> activeRules = mockActiveRules(""AccessToDisposedClosure"", ""AccessToForEachVariableInClosure""); when(profile.getActiveRulesByRepository(""foo-resharper"")).thenReturn(activeRules);  FileProvider fileProvider = mock(FileProvider.class); ReSharperExecutor executor = mock(ReSharperExecutor.class);  File workingDir = new File(""target/ReSharperSensorTest/working-dir""); fileSystem.setWorkDir(workingDir);  File fileNotInSonarQube = mock(File.class); when(fileNotInSonarQube.getAbsolutePath()).thenReturn(""fileNotInSonarQube""); fileSystem.add(new DefaultInputFile(""fileNotInSonarQube"").setAbsolutePath(""fileNotInSonarQube"").setLanguage(languageKey));  File fooFileWithIssuable = mock(File.class); when(fooFileWithIssuable.getAbsolutePath()).thenReturn(""fooFileWithIssuable""); DefaultInputFile inputFileWithIssues = new DefaultInputFile(""fooFileWithIssuable"").setAbsolutePath(""fooFileWithIssuable"").setLanguage(languageKey); fileSystem.add(inputFileWithIssues);  File fooFileWithoutIssuable = mock(File.class); when(fooFileWithoutIssuable.getAbsolutePath()).thenReturn(""fooFileWithoutIssuable""); fileSystem.add(new DefaultInputFile(""fooFileWithoutIssuable"").setAbsolutePath(""fooFileWithoutIssuable"").setLanguage(languageKey));  File barFile = mock(File.class); when(barFile.getAbsolutePath()).thenReturn(""barFile""); fileSystem.add(new DefaultInputFile(""barFile"").setAbsolutePath(""barFile""));  when(fileProvider.fileInSolution(Mockito.any(File.class), Mockito.eq(""Class3.cs""))).thenReturn(fileNotInSonarQube); when(fileProvider.fileInSolution(Mockito.any(File.class), Mockito.eq(""Class4.cs""))).thenReturn(fooFileWithIssuable); when(fileProvider.fileInSolution(Mockito.any(File.class), Mockito.eq(""Class5.cs""))).thenReturn(fooFileWithIssuable); when(fileProvider.fileInSolution(Mockito.any(File.class), Mockito.eq(""Class6.cs""))).thenReturn(fooFileWithoutIssuable); when(fileProvider.fileInSolution(Mockito.any(File.class), Mockito.eq(""Class7.cs""))).thenReturn(barFile);  Issue issue1 = mock(Issue.class); IssueBuilder issueBuilder1 = mockIssueBuilder(); when(issueBuilder1.build()).thenReturn(issue1);  Issue issue2 = mock(Issue.class); IssueBuilder issueBuilder2 = mockIssueBuilder(); when(issueBuilder2.build()).thenReturn(issue2);  Issuable issuable = mock(Issuable.class); when(perspectives.as(Issuable.class, inputFileWithIssues)).thenReturn(issuable); when(issuable.newIssueBuilder()).thenReturn(issueBuilder1, issueBuilder2);  ReSharperDotSettingsWriter writer = mock(ReSharperDotSettingsWriter.class);  ReSharperReportParser parser = mock(ReSharperReportParser.class); when(parser.parse(new File(workingDir, ""resharper-report.xml"").getAbsoluteFile())).thenReturn( ImmutableList.of( new ReSharperIssue(100, ""AccessToDisposedClosure"", null, 1, ""Dummy message""), new ReSharperIssue(200, ""AccessToDisposedClosure"", ""Class2.cs"", null, ""Dummy message""), new ReSharperIssue(400, ""AccessToDisposedClosure"", ""Class3.cs"", 3, ""First message""), new ReSharperIssue(500, ""AccessToDisposedClosure"", ""Class4.cs"", 4, ""Second message""), new ReSharperIssue(600, ""AccessToForEachVariableInClosure"", ""Class5.cs"", 5, ""Third message""), new ReSharperIssue(700, ""AccessToDisposedClosure"", ""Class6.cs"", 6, ""Fourth message""), new ReSharperIssue(800, ""AccessToDisposedClosure"", ""Class7.cs"", 7, ""Fifth message"")));  sensor.analyseRunInspectCode(fileProvider, writer, parser, executor);  verify(writer).write(ImmutableList.of(""AccessToDisposedClosure"", ""AccessToForEachVariableInClosure""), new File(workingDir, ""resharper-sonarqube.DotSettings"").getAbsoluteFile()); verify(executor).execute( ""inspectcode.exe"", ""MyLibrary"", ""CSharpPlayground.sln"", new File(workingDir, ""resharper-sonarqube.DotSettings"").getAbsoluteFile(), new File(workingDir, ""resharper-report.xml"").getAbsoluteFile(), 10);  verify(issuable).addIssue(issue1); verify(issuable).addIssue(issue2);  verify(issueBuilder1).line(4); verify(issueBuilder1).message(""Second message"");  verify(issueBuilder2).line(5); verify(issueBuilder2).message(""Third message""); } "	0	0	0	0	0	1
"@Override public final String toString() { return ""{\""latitude\"": "" + latitude + "", \""longitude\"": "" + longitude + "", \""altitude\"": "" + altitude + "", \""accuracy\"": "" + accuracy + "", \""bearing\"": "" + bearing + "", \""speed\"": "" + speed + "", \""origin\"": "" + origin + "", \""extras\"": "" + processExtras(this)+ '}'; } "	0	0	1	1	0	0
"public static String getMccMnc(final Context context) { final TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE); final int configMcc = context.getResources().getConfiguration().mcc; final int configMnc = context.getResources().getConfiguration().mnc; if (tm.getSimState() == TelephonyManager.SIM_STATE_READY) { Log.w(TAG, ""Choosing MCC+MNC info from TelephonyManager.getSimOperator()""); return tm.getSimOperator(); } else if (tm.getPhoneType() != TelephonyManager.PHONE_TYPE_CDMA) { Log.w(TAG, ""Choosing MCC+MNC info from TelephonyManager.getNetworkOperator()""); return tm.getNetworkOperator(); } else if (configMcc != 0 && configMnc != 0) { Log.w(TAG, ""Choosing MCC+MNC info from current context's Configuration""); return String.format(""%03d%d"", configMcc, configMnc == Configuration.MNC_ZERO ? 0 : configMnc); } else { return null; } } "	0	0	0	0	0	1
"private void updateStrength() { Element niftyElement = nifty.getCurrentScreen().findElementById(""strength""); niftyElement.getRenderer(TextRenderer.class) .setText(getPercentageLabel(""Strength"", player.getStrength())); } "	0	0	1	0	0	0
"private static RemoteIdentity getGlobusV2AuthIdentity( final Client cli, final URL globusAPIURL, final String globusOAuthV2Token, final String username, final String nexusFullname, final String nexusEmail) throws IdentityRetrievalException { /* we use the globusV2 OAuth full name & email if it exists, otherwise use Nexus * we don't check for used / unused status because the nexus user may not exist in globus * Oauth v2. If so a v2 record will be created, but will be marked as unused. If a nexus * user has used the v2 Oauth a record will already exist corresponding to the nexus * account. */ final URI idtarget = UriBuilder.fromUri(toURI(globusAPIURL)) .path(GLOBUS_IDENTITES_PATH) .queryParam(""usernames"", username) .build();  final Map<String, Object> ret = globusOAuthV2GetRequest( cli, globusOAuthV2Token, idtarget); @SuppressWarnings(""unchecked"") final List<Map<String, String>> sids = (List<Map<String, String>>) ret.get(""identities""); final Map<String, String> id = sids.get(0); final String uid = (String) id.get(""id""); final String glusername = (String) id.get(""username""); final String name = (String) id.get(""name""); final String email = (String) id.get(""email""); final RemoteIdentity rid = new RemoteIdentity( new RemoteIdentityID(NAME, uid), new RemoteIdentityDetails(glusername, name == null ? nexusFullname : name, email == null ? nexusEmail : email)); return rid; } "	0	0	0	0	0	1
private void visitMethodDeclaration(MethodDeclaration methodDeclaration) { isStaticMethod = methodDeclaration.isStatic();  methodDeclaration.getType().accept(this);  symbolTable = new SymbolTable(); symbolTable.enterScope(); symbolTable.enterScope();  for (ParameterDeclaration parameterDeclaration : methodDeclaration.getParameters()) { parameterDeclaration.accept(this); }  // visit body currentMethodDeclaration = currentClassScope.getMethodDeclaration(methodDeclaration.getIdentifier()); if (currentMethodDeclaration != null) { returnOnAllPaths = false; methodDeclaration.getBlock().accept(this);  // if method has return type, check if all paths have a return statement if (!currentMethodDeclaration.getType().is(BasicType.VOID)) { if (!returnOnAllPaths) { exceptions.add(new MissingReturnStatementOnAPathException(methodDeclaration.getPosition(), methodDeclaration.getIdentifier())); } } }  // leave method scope. currentMethodDeclaration = null; symbolTable.leaveAllScopes();  methodDeclaration.setNumberOfRequiredLocals(symbolTable.getRequiredLocalVariables()); symbolTable = null; } 	0	0	0	0	0	1
"public MimeMessage send(final @NonNull Email email, final @NonNull String template, final Map<String, Object> modelObject, final @NonNull InlinePicture... inlinePictures) throws CannotSendEmailException { email.setSentAt(new Date()); final MimeMessage mimeMessage = toMimeMessage(email); try { final MimeMultipart content = new MimeMultipart(""mixed"");  String text = templateService.mergeTemplateIntoString(template, fromNullable(modelObject).or(ImmutableMap.of()));  for (final InlinePicture inlinePicture : inlinePictures) { final String cid = UUID.randomUUID().toString();  //Set the cid in the template text = text.replace(inlinePicture.getTemplateName(), ""cid:"" + cid);  //Set the image part final MimeBodyPart imagePart = new MimeBodyPart(); imagePart.attachFile(inlinePicture.getFile()); imagePart.setContentID('<' + cid + '>'); imagePart.setDisposition(MimeBodyPart.INLINE); imagePart.setHeader(""Content-Type"", inlinePicture.getImageType().getContentType()); content.addBodyPart(imagePart); }  for (final EmailAttachment emailAttachment : email.getAttachments()) { //Set the image part final MimeBodyPart attachmentPart = new MimeBodyPart(); DataSource source = new ByteArrayDataSource(emailAttachment.getAttachmentData(), emailAttachment.getContentType().toString()); attachmentPart.setDataHandler(new DataHandler(source)); attachmentPart.setFileName(emailAttachment.getAttachmentName()); content.addBodyPart(attachmentPart); }  //Set the HTML text part final MimeBodyPart textPart = new MimeBodyPart(); textPart.setText(text, email.getEncoding(), ""html""); content.addBodyPart(textPart);  mimeMessage.setContent(content); mimeMessage.saveChanges(); javaMailSender.send(mimeMessage); emailLogRenderer.info(""Sent email {}."", emailWithCompiledBody(email, text)); } catch (IOException e) { log.error(""The template file cannot be read"", e); throw new CannotSendEmailException(""Error while sending the email due to problems with the template file."", e); } catch (TemplateException e) { log.error(""The template file cannot be processed"", e); throw new CannotSendEmailException(""Error while processing the template file with the given model object."", e); } catch (MessagingException e) { log.error(""The mime message cannot be created"", e); throw new CannotSendEmailException(""Error while sending the email due to problems with the mime content."", e); } return mimeMessage; } "	0	0	0	0	0	1
"public static void tagScreen(String screenName) {  if (!ACTIVATE) return;  Logger.d(""Analytics"", ""Localytics: Screens: "" + screenName);  Localytics.tagScreen(screenName); Localytics.upload(); } "	0	0	0	0	0	1
public static void onNewIntent(android.app.Activity activity, Intent intent) { if (!ACTIVATE && !isFirstSession) { return; } Localytics.onNewIntent(activity, intent); } 	0	0	0	0	0	1
"public void moveLeft() { try { launcherImage = ImageIO.read(getClass().getResource(""shooterLeft1.png"")); } catch (IOException ex) { JOptionPane.showMessageDialog(null, ""Error: Cannot open shooter.png""); System.exit(-1); } } "	0	0	0	0	0	1
public void remove(WorldCoord worldCoord) { warZone.remove(worldCoord); } 	0	0	0	0	0	1
public void add(Town town) {  TownyMessaging.sendTownMessage(town, TownySettings.getJoinWarMsg(town)); townScores.put(town, 0); warringTowns.add(town); for (TownBlock townBlock : town.getTownBlocks()) if (town.isHomeBlock(townBlock)) warZone.put(townBlock.getWorldCoord(), TownySettings.getWarzoneHomeBlockHealth()); else warZone.put(townBlock.getWorldCoord(), TownySettings.getWarzoneTownBlockHealth()); } 	0	0	0	0	0	1
"public static TrackState extrapolateTrackUsingFieldMap(TrackState track, double startPositionX, double endPositionX, double stepSize, FieldMap fieldMap) {  // Start by extrapolating the track to the approximate point where the // fringe field begins. Hep3Vector currentPosition = TrackUtils.extrapolateHelixToXPlane(track, startPositionX); // System.out.println(""Track position at start of fringe: "" + // currentPosition.toString());  // Get the HelicalTrackFit object associated with the track. This will // be used to calculate the path length to the start of the fringe and // to find the initial momentum of the track. HelicalTrackFit helicalTrackFit = TrackUtils.getHTF(track);  // Calculate the path length to the start of the fringe field. double pathToStart = HelixUtils.PathToXPlane(helicalTrackFit, startPositionX, 0., 0).get(0);  // Get the momentum of the track and calculate the magnitude. The // momentum can be calculate using the track curvature and magnetic // field strength in the middle of the analyzing magnet. // FIXME: The position of the middle of the analyzing magnet should // be retrieved from the compact description. double bFieldY = fieldMap.getField(new BasicHep3Vector(0, 0, 500.0)).y(); double p = Math.abs(helicalTrackFit.p(bFieldY));  // Get a unit vector giving the track direction at the start of the of // the fringe field Hep3Vector helixDirection = HelixUtils.Direction(helicalTrackFit, pathToStart); // Calculate the momentum vector at the start of the fringe field Hep3Vector currentMomentum = VecOp.mult(p, helixDirection); // System.out.println(""Track momentum vector: "" + // currentMomentum.toString());  // Get the charge of the track. double q = Math.signum(track.getOmega()); // HACK: LCSim doesn't deal well with negative fields so they are // turned to positive for tracking purposes. As a result, // the charge calculated using the B-field, will be wrong // when the field is negative and needs to be flipped. if (bFieldY < 0) q = q * (-1);  // Swim the track through the B-field until the end point is reached. // The position of the track will be incremented according to the step // size up to ~90% of the final position. At this point, a finer // track size will be used. boolean stepSizeChange = false; while (currentPosition.x() < endPositionX) {  // The field map coordinates are in the detector frame so the // extrapolated track position needs to be transformed from the // track frame to detector. Hep3Vector currentPositionDet = CoordinateTransformations.transformVectorToDetector(currentPosition);  // Get the field at the current position along the track. bFieldY = fieldMap.getField(currentPositionDet).y(); // System.out.println(""Field along y (z in detector): "" + bField);  // Get a tracjectory (Helix or Line objects) created with the // track parameters at the current position. Trajectory trajectory = getTrajectory(currentMomentum, new org.lcsim.spacegeom.SpacePoint(currentPosition), q, bFieldY);  // Using the new trajectory, extrapolated the track by a step and // update the extrapolated position. currentPosition = trajectory.getPointAtDistance(stepSize); // System.out.println(""Current position: "" + ((Hep3Vector) // currentPosition).toString());  // Calculate the momentum vector at the new position. This will // be used when creating the trajectory that will be used to // extrapolate the track in the next iteration. currentMomentum = VecOp.mult(currentMomentum.magnitude(), trajectory.getUnitTangentAtLength(stepSize));  // If the position of the track along X (or z in the detector frame) // is at 90% of the total distance, reduce the step size. if (currentPosition.x() / endPositionX > .80 && !stepSizeChange) { stepSize /= 10; // System.out.println(""Changing step size: "" + stepSize); stepSizeChange = true; } }  // Calculate the track parameters at the Extrapolation point double doca = currentPosition.x() * currentPosition.x() + currentPosition.y() * currentPosition.y(); double phi = TrackUtils.calculatePhi(currentMomentum.x(), currentMomentum.y()); double curvature = TrackUtils.calculateCurvature(currentMomentum.magnitude(), q, bFieldY); double z = currentPosition.z(); double tanLambda = TrackUtils.calculateTanLambda(currentMomentum.z(), currentMomentum.magnitude());  double[] trackParameters = new double[5]; trackParameters[ParameterName.d0.ordinal()] = Math.sqrt(doca); trackParameters[ParameterName.phi0.ordinal()] = phi; trackParameters[ParameterName.omega.ordinal()] = curvature; trackParameters[ParameterName.z0.ordinal()] = z; trackParameters[ParameterName.tanLambda.ordinal()] = tanLambda;  // Create a track state at the extrapolation point TrackState trackState = new BaseTrackState(trackParameters, currentPosition.v(), track.getCovMatrix(), TrackState.AtCalorimeter, bFieldY);  return trackState; } "	1	0	1	0	0	0
"@Override public Result<? extends PetrifyTransformationResult> run(ProgressMonitor<? super PetrifyTransformationResult> monitor) { ArrayList<String> command = new ArrayList<>();  // Name of the executable String toolName = ToolUtils.getAbsoluteCommandPath(PetrifySettings.getCommand()); command.add(toolName);  // Built-in arguments for (String arg : args) { command.add(arg); }  // Extra arguments (should go before the file parameters) String extraArgs = PetrifySettings.getArgs(); if (PetrifySettings.getAdvancedMode()) { MainWindow mainWindow = Framework.getInstance().getMainWindow(); String tmp = JOptionPane.showInputDialog(mainWindow, ""Additional parameters for Petrify:"", extraArgs); if (tmp == null) { return Result.cancelled(); } extraArgs = tmp; } for (String arg : extraArgs.split(""\\s"")) { if (!arg.isEmpty()) { command.add(arg); } }  String prefix = FileUtils.getTempPrefix(we.getTitle()); File directory = FileUtils.createTempDirectory(prefix); try { File logFile = new File(directory, ""petrify.log""); command.add(""-log""); command.add(logFile.getAbsolutePath());  File outFile = new File(directory, ""result.g""); command.add(""-o""); command.add(outFile.getAbsolutePath());  Model model = we.getModelEntry().getMathModel();  // Check for isolated marked places and temporary remove them is requested if (model instanceof PetriNetModel) { PetriNetModel petri = (PetriNetModel) model; HashSet<Place> isolatedPlaces = PetriNetUtils.getIsolatedMarkedPlaces(petri); if (!isolatedPlaces.isEmpty()) { String refStr = ReferenceHelper.getNodesAsString(petri, (Collection) isolatedPlaces, 50); int answer = JOptionPane.showConfirmDialog(Framework.getInstance().getMainWindow(), ""Petrify does not support isolated marked places.\n\n"" + ""Problematic places are:\n"" + refStr + ""\n\n"" + ""Proceed without these places?"", ""Petrify transformation"", JOptionPane.YES_NO_OPTION); if (answer != JOptionPane.YES_OPTION) { return Result.cancelled(); } we.captureMemento(); VisualModel visualModel = we.getModelEntry().getVisualModel(); PetriNetUtils.removeIsolatedMarkedPlaces(visualModel); } }  // Input file File modelFile = getInputFile(model, directory); command.add(modelFile.getAbsolutePath());  boolean printStdout = PetrifySettings.getPrintStdout(); boolean printStderr = PetrifySettings.getPrintStderr(); ExternalProcessTask task = new ExternalProcessTask(command, directory, printStdout, printStderr); SubtaskMonitor<Object> mon = new SubtaskMonitor<>(monitor); Result<? extends ExternalProcessResult> res = task.run(mon);  if (res.getOutcome() == Outcome.FINISHED) { StgModel outStg = null; if (outFile.exists()) { String out = FileUtils.readAllText(outFile); ByteArrayInputStream outStream = new ByteArrayInputStream(out.getBytes()); try { outStg = new DotGImporter().importSTG(outStream); } catch (DeserialisationException e) { return Result.exception(e); } } PetrifyTransformationResult result = new PetrifyTransformationResult(res, outStg); int returnCode = res.getReturnValue().getReturnCode(); String errorMessage = new String(res.getReturnValue().getErrors()); if ((returnCode != 0) || (errorMessage.endsWith("">>> ERROR: Cannot solve CSC.\n""))) { return Result.failed(result); } return Result.finished(result); } if (res.getOutcome() == Outcome.CANCELLED) { return Result.cancelled(); } return Result.failed(null); } catch (Throwable e) { throw new RuntimeException(e); } finally { FileUtils.deleteOnExitRecursively(directory); we.cancelMemento(); } } "	0	0	1	0	0	0
public final String getTargetField() { return this.targetField; } 	0	0	0	0	0	1
"@Test public void shouldResolveAsRelativePath() { IProject proj = project.getProject(); IPath projectPath = proj.getLocation() .removeTrailingSeparator(); String gitHereTest = "".git""; String gitTest = ""../../.git""; String gitSubdirTest = ""foobar/.git""; String gitSubmoduleTest = ""../../.git/modules/submodule""; // Construct an absolute path different from the project location: // should be preserved. upToSegment ensures we don't loose the root // component. String gitAbsolute = projectPath.uptoSegment(0) .append(projectPath.segment(0) + ""fake"").append("".git"") .toOSString(); String parents = """"; while (projectPath.segmentCount() > 2) { String pathString = projectPath.toOSString(); assertRepoMappingPath(proj, pathString, gitHereTest, parents); assertRepoMappingPath(proj, pathString, gitTest, parents); assertRepoMappingPath(proj, pathString, gitSubdirTest, parents); assertRepoMappingPath(proj, pathString, gitSubmoduleTest, parents); assertRepoMappingPath(proj, pathString, gitAbsolute, """"); projectPath = projectPath.removeLastSegments(1); parents += ""../""; } } "	0	0	1	0	0	0
"@Override protected void configure(HttpSecurity http) throws Exception { http .httpBasic() .authenticationEntryPoint(samlEntryPoint()); http .csrf() .disable(); http .addFilterBefore(metadataGeneratorFilter(), ChannelProcessingFilter.class) .addFilterAfter(samlFilter(), BasicAuthenticationFilter.class); http .authorizeRequests() .antMatchers(""/saml/**"").permitAll() .antMatchers(""/{status:(status|health|info|env|configprops|autoconfig)}/**"").permitAll() .antMatchers(""/**"").authenticated() .anyRequest().authenticated(); http .logout() .logoutSuccessUrl(""/"");  http.headers().frameOptions().sameOrigin(); } "	0	0	0	0	0	1
"@Override public int read(byte[] b, int off, int len) throws IOException { synchronized (stateLock) { try { // Make sure the input stream has been created. init();  for (;;) { // Serve any remaining data from the engine first. if (fromEngine.remaining() > 0) { int readFromEngine = Math.min(fromEngine.remaining(), len); fromEngine.get(b, off, readFromEngine); return readFromEngine; }  // Try to unwrap any data already in the socket buffer. boolean needMoreData = true; if (fromSocket.position() > 0) { // Unwrap the unencrypted bytes into the engine buffer. fromSocket.flip(); fromEngine.clear(); SSLEngineResult engineResult = engine.unwrap(fromSocket, fromEngine);  // Shift any remaining data to the beginning of the buffer so that // we can accommodate the next full packet. After this is called, // limit will be restored to capacity and position will point just // past the end of the data. fromSocket.compact(); fromEngine.flip();  switch (engineResult.getStatus()) { case BUFFER_UNDERFLOW: { if (engineResult.bytesProduced() == 0) { // Need to read more data from the socket. break; } // Fall-through and serve the data that was produced. } case OK: { // We processed the entire packet successfully. needMoreData = false; break; } default: { // Anything else is an error. throw new SSLException( ""Unexpected engine result "" + engineResult.getStatus()); } }  if (engineResult.getHandshakeStatus() == HandshakeStatus.FINISHED) { completeHandshake(); } if (engineResult.bytesProduced() == 0) { // Read successfully, but produced no data. Possibly part of a // handshake. return 0; } }  // Read more data from the socket. if (needMoreData && readFromSocket() == -1) { // Failed to read the next encrypted packet before reaching EOF. return -1; }  // Continue the loop and return the data from the engine buffer. } } catch (IOException e) { e.printStackTrace(); throw e; } catch (RuntimeException e) { e.printStackTrace(); throw e; } } } "	0	0	1	0	1	0
"static private String getCacheKey(int resourceType, String resId) { return String.format(Locale.ENGLISH, ""%d::%s"", resourceType, resId); } "	0	0	1	1	0	0
"@Override public void expirePassword() throws ChaiOperationException, ChaiUnavailableException { this.writeStringAttribute(""passwordExpirationTime"", ""19700101010101Z""); } "	0	0	1	0	0	0
"public void setUp() throws Exception { super.setUp();  Intent intent = new Intent(getInstrumentation().getTargetContext(), MockActivity.class); this.setActivity(this.startActivity(intent, null, null));  MockTelemetryClient.getInstance().mockTrackMethod = false; ApplicationInsightsConfig config = new ApplicationInsightsConfig(); Channel.initialize(config); Channel.getInstance().getQueue().getQueueConfig().setMaxBatchIntervalMs(20);  Sender.initialize(config);  this.properties = new LinkedHashMap<String, String>(); this.properties.put(""core property"", ""core value""); this.measurements = new LinkedHashMap<String, Double>(); this.measurements.put(""core measurement"", 5.5); } "	0	0	1	0	1	0
@Override public Set<Range<K>> keySet() { return new Maps.KeySet<Range<K>, V>(SubRangeMapAsMap.this) { @Override public boolean remove(@Nullable Object o) { return SubRangeMapAsMap.this.remove(o) != null; }  @Override public boolean retainAll(Collection<?> c) { return removeIf(compose(not(in(c)), Maps.<Range<K>>keyFunction())); } }; } 	0	0	0	0	0	1
private OutputStream getSocketOutputStream() throws IOException { return super.getOutputStream(); } 	0	0	1	0	0	0
"public String getAlgorithmDirectory() { String pathToFolder = """"; try { pathToFolder = Thread.currentThread().getContextClassLoader().getResource(""algorithms"").getPath(); } catch (NullPointerException e) { // The algorithm folder does not exist System.out.print(""Algorithm directory is missing!""); } return pathToFolder;  } "	0	0	1	0	0	0
"@Test public void testExecuteHolisticAlgorithm() throws AlgorithmLoadingException, AlgorithmExecutionException, IllegalArgumentException, SecurityException, IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, EntityStorageException { HibernateUtil.clear();  // Setup List<ConfigurationValue> configs = new ArrayList<>(); configs.add(new ConfigurationValueString(""pathToOutputFile"", ""path/to/file1""));  Algorithm algorithm = new Algorithm(""example_holistic_algorithm.jar""); algorithm = resource.store(algorithm);  // Execute functionality executor.executeAlgorithmWithValues(algorithm, configs, null);  // Check result verify(resultReceiver).receiveResult(isA(FunctionalDependency.class)); verify(resultReceiver).receiveResult(isA(UniqueColumnCombination.class));  HibernateUtil.clear(); } "	0	0	1	1	1	0
"@Test public void compressed() throws IOException { final File dir = new File(""data/test/clucene""); Directory bdir = FSDirectory.open(dir); //Directory cdir = new CompressedIndexDirectory(bdir); Directory cdir = new TransformedDirectory(bdir, chunkSize, new DeflateDataTransformer(), new InflateDataTransformer(), directStore); TestLucene(cdir, count, ""compressed"", dir); } "	0	0	1	0	1	0
private void setContentPanel() { contentPanel = new JPanel(new BorderLayout()); final JPanel solutionsPanel = createSolutionsPanel(); publicationInfoPanel = new PublicationsPanel();  if (LafManager.getInstance().getCurrentLookAndFeel() instanceof IntelliJLookAndFeelInfo) { publicationInfoPanel.setBackground(UIUtil.getTreeBackground()); solutionsPanel.setBackground(UIUtil.getTreeBackground()); contentPanel.setBackground(UIUtil.getTreeBackground()); }  contentPanel.add(publicationInfoPanel, BorderLayout.PAGE_START); contentPanel.add(solutionsPanel, BorderLayout.WEST); } 	0	0	0	0	0	1
public String getNextButtonLabel() { return TextUtils.isEmpty(nextButtonText) ? getResources().getString(R.string.action_next) : nextButtonText; } 	0	0	0	0	0	1
public String getBackButtonLabel() { return TextUtils.isEmpty(backButtonText) ? getResources().getString(R.string.action_previous) : backButtonText; } 	0	0	0	0	0	1
"private void updateMetadata() { // Sync: We get the customData from the remote media information and update the local // metadata if it happens to be different from the one we are currently using. // This can happen when the app was either restarted/disconnected + connected, or if the // app joins an existing session while the Chromecast was playing a queue. try { MediaInfo mediaInfo = mCastManager.getRemoteMediaInformation(); if (mediaInfo == null) { return; } JSONObject customData = mediaInfo.getCustomData();  if (customData != null && customData.has(ITEM_ID)) { String remoteMediaId = customData.getString(ITEM_ID); if (!TextUtils.equals(mCurrentMediaId, remoteMediaId)) { mCurrentMediaId = remoteMediaId; if (mCallback != null) { mCallback.onMetadataChanged(remoteMediaId); } mCurrentPosition = getCurrentStreamPosition(); } } } catch (TransientNetworkDisconnectionException | NoConnectionException | JSONException e) { LogHelper.e(TAG, e, ""Exception processing update metadata""); }  } "	0	0	0	0	0	1
"private void closePreparedHandle() { if (!hasPreparedStatementHandle()) return;  // If the connection is already closed, don't bother trying to close // the prepared handle. We won't be able to, and it's already closed // on the server anyway. if (connection.isSessionUnAvailable()) { if (loggerExternal.isLoggable(java.util.logging.Level.FINER)) loggerExternal.finer(this + "": Not closing PreparedHandle:"" + getPreparedStatementHandle() + ""; connection is already closed.""); } else { isExecutedAtLeastOnce = false; final int handleToClose = getPreparedStatementHandle(); resetPrepStmtHandle();  // Handle unprepare actions through statement pooling. if (null != cachedPreparedStatementHandle) { connection.returnCachedPreparedStatementHandle(cachedPreparedStatementHandle); } // If no reference to a statement pool cache item is found handle unprepare actions through batching @ connection level. else if(connection.isPreparedStatementUnprepareBatchingEnabled()) { connection.enqueueUnprepareStatementHandle(new PreparedStatementHandle(handleToClose, executedSqlDirectly, true)); } else { // Non batched behavior (same as pre batch clean-up implementation) if (loggerExternal.isLoggable(java.util.logging.Level.FINER)) loggerExternal.finer(this + "": Closing PreparedHandle:"" + handleToClose);  final class PreparedHandleClose extends UninterruptableTDSCommand { PreparedHandleClose() { super(""closePreparedHandle""); }  final boolean doExecute() throws SQLServerException { TDSWriter tdsWriter = startRequest(TDS.PKT_RPC); tdsWriter.writeShort((short) 0xFFFF); // procedure name length -> use ProcIDs tdsWriter.writeShort(executedSqlDirectly ? TDS.PROCID_SP_UNPREPARE : TDS.PROCID_SP_CURSORUNPREPARE); tdsWriter.writeByte((byte) 0);  // RPC procedure option 1 tdsWriter.writeByte((byte) 0);  // RPC procedure option 2 tdsWriter.writeRPCInt(null, new Integer(handleToClose), false); TDSParser.parse(startResponse(), getLogContext()); return true; } }  // Try to close the server cursor. Any failure is caught, logged, and ignored. try { executeCommand(new PreparedHandleClose()); } catch (SQLServerException e) { if (loggerExternal.isLoggable(java.util.logging.Level.FINER)) loggerExternal.log(Level.FINER, this + "": Error (ignored) closing PreparedHandle:"" + handleToClose, e); }  if (loggerExternal.isLoggable(java.util.logging.Level.FINER)) loggerExternal.finer(this + "": Closed PreparedHandle:"" + handleToClose); }  // Always run any outstanding discard actions as statement pooling always uses batched sp_unprepare. connection.unprepareUnreferencedPreparedStatementHandles(false); } } "	1	1	1	0	0	0
"public void testSimpleSearchNumberRemaining() throws LBException, IOException { ResolvedConceptReferencesIterator itr = searchExtension.search(""boxing"", MatchAlgorithm.LUCENE); assertTrue(itr.numberRemaining() > 0); } "	0	0	0	1	0	0
"public void testSimpleSearchContainsPerformanceResolvedValueSets() throws LBException, IOException { LexEVSResolvedValueSetService rss = new LexEVSResolvedValueSetServiceImpl(LexEVSServiceHolder.instance().getLexEVSAppService()); Set<CodingSchemeReference> valueSets = new HashSet<CodingSchemeReference>();  for(CodingScheme cs : rss.listAllResolvedValueSets()){ CodingSchemeReference ref = new CodingSchemeReference(); ref.setCodingScheme(cs.getCodingSchemeURI()); ref.setVersionOrTag(Constructors.createCodingSchemeVersionOrTagFromVersion(cs.getRepresentsVersion()));  valueSets.add(ref); }  for(String term : Arrays.asList(""year"", ""month"", ""day"", ""observation"", ""imputed"")){ long start = System.currentTimeMillis(); ResolvedConceptReferencesIterator itr = searchExtension.search(term, valueSets, MatchAlgorithm.PRESENTATION_CONTAINS); assertTrue(itr.hasNext()); System.out.println(System.currentTimeMillis() - start); } } "	0	0	1	1	0	0
"public void testSimpleSearchGetMaxToReturn() throws LBException, IOException { ResolvedConceptReferencesIterator itr = searchExtension.search(""boxing"", MatchAlgorithm.LUCENE); assertTrue(itr.hasNext()); assertEquals(5, itr.next(5).getResolvedConceptReferenceCount()); } "	0	0	0	1	0	0
"public void testSimpleSearchContains() throws LBException, IOException { ResolvedConceptReferencesIterator itr = searchExtension.search(""genome"", MatchAlgorithm.PRESENTATION_CONTAINS); assertTrue(itr.hasNext()); assertTrue(StringUtils.equalsIgnoreCase(""genome"", itr.next().getEntityDescription().getContent())); } "	0	0	1	1	0	0
public Map<String, Map<String, String>> getData() { return data; } 	0	0	0	0	0	1
"void update(ColorRGBA ambientColor, ColorRGBA backgroundColor, ColorRGBA mainColor, float bloomIntensity, float shadowIntensity, Vector3f direction) { assert ambientColor != null; assert backgroundColor != null; assert mainColor != null; assert bloomIntensity >= 0f : bloomIntensity; assert shadowIntensity >= 0f : shadowIntensity; assert shadowIntensity <= 1f : shadowIntensity; assert direction != null; assert direction.isUnitVector() : direction; /* * Copy new values to the corresponding ""most recent"" fields. */ if (this.ambientColor == null) { this.ambientColor = ambientColor.clone(); } else { this.ambientColor.set(ambientColor); } if (this.backgroundColor == null) { this.backgroundColor = backgroundColor.clone(); } else { this.backgroundColor.set(backgroundColor); } if (this.mainColor == null) { this.mainColor = mainColor.clone(); } else { this.mainColor.set(mainColor); } this.bloomIntensity = bloomIntensity; this.shadowIntensity = shadowIntensity; if (this.direction == null) { this.direction = direction.clone(); } else { this.direction.set(direction); }  if (mainLight != null) { ColorRGBA color = ambientColor.mult(mainMultiplier); mainLight.setColor(color); /* * The direction of the main light is the direction in which it * propagates, which is the opposite of the direction to the * light source. */ Vector3f propagationDirection = direction.negate(); mainLight.setDirection(propagationDirection); } if (ambientLight != null) { ColorRGBA color = ambientColor.mult(ambientMultiplier); ambientLight.setColor(color); } for (BloomFilter filter : bloomFilters) { filter.setBloomIntensity(bloomIntensity); } for (@SuppressWarnings(""rawtypes"") AbstractShadowFilter filter : shadowFilters) { filter.setShadowIntensity(shadowIntensity); } for (AbstractShadowRenderer renderer : shadowRenderers) { renderer.setShadowIntensity(shadowIntensity); } for (ViewPort viewPort : viewPorts) { viewPort.setBackgroundColor(backgroundColor); } } "	0	0	1	0	1	0
"@Override public String toString() { return ""{\""charging\"": "" + charging + '}'; } "	0	0	0	0	0	1
private boolean isPowerup(final ItemStack item) { if (!item.hasItemMeta()) { return false; } return item.getItemMeta().getDisplayName().equals(POWERUPSTRING); } 	0	0	1	0	1	0
public void update_flows() {  if(isTerminal) return;  int e,i,j; Scenario myScenario = myNetwork.getMyScenario(); int numEnsemble = myScenario.get.numEnsemble(); int numVTypes = myScenario.get.numVehicleTypes();  // Select a nominal split ratio from profile, event, or controller if(istrivialsplit) { // nominal is all ones splitratio_nominal = BeatsMath.ones(nIn, nOut, numVTypes); } else { if (has_profile) splitratio_nominal = my_profile.getCurrentSplitRatio(); if (has_controller_split) override_splits(splitratio_nominal, controller_splits); //if(has_event_split) //    override_splits(splitratio_nominal,event_splits); }  for(e=0;e<numEnsemble;e++){  Double [][][] splitratio_perturbed;  if(my_profile==null || istrivialsplit) { splitratio_perturbed = splitratio_nominal; //BeatsMath.nans(nIn,nOut,numVTypes); } else { if(!my_profile.isdeterministic() && my_profile.hasConcentrationParameters() ) //&& my_profile.isCurrentConcentrationParametersValid()) splitratio_perturbed = SplitRatioPerturber.sampleFromConcentrationParametersOnce(my_profile.getCurrentConcentration()); else if(!my_profile.isdeterministic() && nOut==2 && nIn==1) splitratio_perturbed = SplitRatioPerturber.perturb2OutputSplitOnce(splitratio_nominal, my_profile); else splitratio_perturbed = splitratio_nominal; }  // compute applied split ratio matrix Double [][][] splitratio_applied = istrivialsplit ? splitratio_perturbed : node_behavior.sr_solver.computeAppliedSplitRatio(splitratio_perturbed,e);  ///////////////////////////////////////////////// // write first to logger if(split_ratio_logger!=null && e==0) split_ratio_logger.write(splitratio_applied); /////////////////////////////////////////////////  // compute node flows .......................................... Node_FlowSolver.IOFlow IOflow = node_behavior.flow_solver.computeLinkFlows(splitratio_applied,e);  if(IOflow==null) return;  // assign flow to input links .................................. for(i=0;i<nIn;i++) input_link[i].setOutflow(e,IOflow.getIn(i));  // assign flow to output links ................................. for (j=0;j<nOut;j++) output_link[j].setInflow(e,IOflow.getOut(j));  }  } 	0	0	0	0	0	1
"public static ImplementationStatusChecker implementationStatusCheckerFor(ImplementationStatus implementationStatus) { for (ImplementationStatusChecker checker : values()) { if (checker.getImplementationStatus() == implementationStatus) { return checker; } }  throw new IllegalStateException(""Unknown ImplementationStatus in ImplementationStatusChecker""); } "	0	0	0	0	0	1
public static Set<String> getApproximatelyMatchingStringList(String sourceString, String search, int maxDistance) { Set<String> matches = new HashSet<>(); if (StringUtils.isBlank(search)) { return matches; } int searchLength = search.length(); sourceString = sourceString.toLowerCase().trim(); search = search.toLowerCase().trim(); for (int i = 0; i < sourceString.length(); i++) { int endIndex = i + searchLength; if (endIndex >= sourceString.length()) { endIndex = sourceString.length(); } String completingString = getCompletingString(sourceString, i, endIndex); if (matches.contains(completingString)) { continue; } if (getLevenshteinDistance(completingString, search) <= maxDistance) { matches.add(completingString); i = endIndex; } } return matches; } 	0	0	1	0	1	0
"public Vertex getVertex(Object id) {  assertClientInitialized(); ValidationUtils.validateNotNull(id, RuntimeException.class, ""id cannot be of type null"");  if (id instanceof String) { log.debug(""DEBUG getVertex(): id is an instance of sting""); ValidationUtils.validateStringNotEmpty((String) id, RuntimeException.class, ""id cannot be an empty string"");  String[] parts = id.toString().split(SLASH); String type = parts[0]; String StringUUID = parts[1]; ApiResponse response = SingletonClient.getInstance().queryEntity(type, StringUUID); log.debug(""DEBUG getVertex(): Api response returned for query vertex is : "" + response);  ValidationUtils.serverError(response, IOException.class, ""Usergrid server error""); ValidationUtils.validateAccess(response, RuntimeException.class, ""User forbidden from using the Usergrid resource""); ValidationUtils.validateCredentials(response, RuntimeException.class, ""User credentials for Usergrid are invalid""); ValidationUtils.validateRequest(response, RuntimeException.class, ""Invalid request passed to Usergrid""); ValidationUtils.OrgAppNotFound(response, RuntimeException.class, ""Organization or application does not exist in Usergrid"");  String uuid = response.getFirstEntity().getStringProperty(STRING_UUID); Map<String, JsonNode> vertexProperties = new HashMap<String, JsonNode>(); vertexProperties = response.getFirstEntity().getProperties(); UsergridVertex v = new UsergridVertex(type); v.setUuid(UUID.fromString(uuid)); for (Map.Entry<String, JsonNode> entry : vertexProperties.entrySet()) { String key = entry.getKey(); Object value = entry.getValue(); v.setLocalProperty(key, value);  log.debug(""DEBUG getVertex(): Properties of the vertex : '"" + v.getProperty(STRING_NAME) + ""' got are : "" + v.getProperties()); log.debug(""DEBUG getVertex(): Returning vertex with uuid : "" + v.getUuid().toString()); return v; } } throw new IllegalArgumentException(""Supplied id class of "" + String.valueOf(id.getClass()) + "" is not supported by Usergrid"");  } "	0	0	0	0	0	1
"@Override public Enumeration<Option> listOptions() { Vector<Option> result = new Vector<Option>(); result.addElement( new Option(""\tThe seed for the random number generator.\n"" + ""\t(default: "" + seed + "")"", ""seed"", 1, ""-seed <seed>"")); result.addElement( new Option(""\tThe time limit for tuning in minutes (approximately).\n"" + ""\t(default: "" + DEFAULT_TIME_LIMIT + "")"", ""timeLimit"", 1, ""-timeLimit <limit>"")); result.addElement( new Option(""\tThe memory limit for runs in MiB.\n"" + ""\t(default: "" + DEFAULT_MEM_LIMIT + "")"", ""memLimit"", 1, ""-memLimit <limit>"")); result.addElement( new Option(""\tThe amount of best configurations to output.\n"" + ""\t(default: "" + DEFAULT_MEM_LIMIT + "")"", ""nBestConfigs"", 1, ""-nBestConfigs <limit>"")); result.addElement( new Option(""\tThe metric to optimise.\n"" + ""\t(default: "" + DEFAULT_METRIC + "")"", ""metric"", 1, ""-metric <metric>"")); result.addElement( new Option(""\tThe number of parallel runs. EXPERIMENTAL.\n"" + ""\t(default: "" + DEFAULT_PARALLEL_RUNS + "")"", ""parallelRuns"", 1, ""-parallelRuns <runs>"")); //result.addElement( //    new Option(""\tThe type of resampling used.\n"" + ""\t(default: "" + String.valueOf(DEFAULT_RESAMPLING) + "")"", //        ""resampling"", 1, ""-resampling <resampling>"")); //result.addElement( //    new Option(""\tResampling arguments.\n"" + ""\t(default: "" + DEFAULT_RESAMPLING_ARGS + "")"", //        ""resamplingArgs"", 1, ""-resamplingArgs <args>"")); //result.addElement( //    new Option(""\tExtra arguments.\n"" + ""\t(default: "" + DEFAULT_EXTRA_ARGS + "")"", //        ""extraArgs"", 1, ""-extraArgs <args>""));  Enumeration<Option> enu = super.listOptions(); while (enu.hasMoreElements()) { result.addElement(enu.nextElement()); }  return result.elements(); } "	0	0	0	0	0	1
public default Response generateRefreshGrantAccessToken(String refreshToken, String scopes, long validityPeriod, String clientId, String clientSecret) { String credentials = clientId + ':' + clientSecret; String authToken = Base64.getEncoder().encodeToString(credentials.getBytes(StandardCharsets.UTF_8)); return generateAccessToken(authToken, KeyManagerConstants.AUTHORIZATION_CODE_GRANT_TYPE, null, null, refreshToken, null, null, scopes, validityPeriod); } 	0	0	0	0	0	1
@Benchmark public void eventWithHierarchyAndOneHandler() { // em.dispatch(new EventNest2NoImmediateHandler()); } 	1	0	1	1	0	0
@Benchmark public void eventWithManySubclassListeners() { // eventNest0 events applies to handle0-8 listeners. // Also has a deep hierarchy. em.dispatch(new EventNest8()); } 	1	0	1	0	0	0
@Override public void detectAndSendChanges() { super.detectAndSendChanges(); this.baileyInventory.update(); } 	0	0	0	0	0	1
private long getNextTitledPageNum(DocumentReference baseDocRef) { long num = getHighestNum(baseDocRef); while (!isAvailableDocRef(createDocRef(baseDocRef, num))) { num += 1; } numCache.put(baseDocRef, num + 1); return num; } 	0	0	0	0	0	1
"@Override public void registerMenu(Config configuration, JMenuBar menu, Map<OIMAdmin.STANDARD_MENUS, JMenu> commonMenus, UIComponentTree selectionTree, DisplayArea displayArea) { if (commonMenus != null && commonMenus.containsKey(OIMAdmin.STANDARD_MENUS.NEW)) { JMenuItem newConnectionMenuItem = new JMenuItem(""Connection""); newConnectionMenuItem.addActionListener(new AbstractAction() { @Override public void actionPerformed(ActionEvent e) { logger.trace(""Processing action on menu {} "", newConnectionMenuItem); ConnectionDetails connectionDetailUI = new ConnectionDetails(""New Connection..."", configuration.getConnectionDetails(""""), selectionTree, displayArea); connectionDetailUI.initialize(); displayArea.add(connectionDetailUI); logger.trace(""Processed action on menu {} "", newConnectionMenuItem); } }); commonMenus.get(OIMAdmin.STANDARD_MENUS.NEW).add(newConnectionMenuItem); } } "	0	0	1	1	1	0
"private TaskModellingResult compileTask(String taskName, Map<String, Object> taskRawData, String defaultSuccess, Map<String, String> imports, String defaultFailure, String namespace) {  List<RuntimeException> errors = new ArrayList<>(); if (MapUtils.isEmpty(taskRawData)) { taskRawData = new HashMap<>(); errors.add(new RuntimeException(""Task: "" + taskName + "" has no data"")); }  Map<String, Serializable> preTaskData = new HashMap<>(); Map<String, Serializable> postTaskData = new HashMap<>();  errors.addAll(transformersHandler.checkKeyWords(taskName, taskRawData, ListUtils.union(preTaskTransformers, postTaskTransformers), TaskAdditionalKeyWords, null));  String errorMessagePrefix = ""For task: "" + taskName + "" syntax is illegal.\n""; preTaskData.putAll(transformersHandler.runTransformers(taskRawData, preTaskTransformers, errors, errorMessagePrefix)); postTaskData.putAll(transformersHandler.runTransformers(taskRawData, postTaskTransformers, errors, errorMessagePrefix));  @SuppressWarnings(""unchecked"") List<Argument> arguments = (List<Argument>)preTaskData.get(SlangTextualKeys.DO_KEY);  String refId = """"; Map<String, Object> doRawData; try { //noinspection unchecked doRawData = (Map<String, Object>) taskRawData.get(SlangTextualKeys.DO_KEY); } catch (ClassCastException ex) { doRawData = new HashMap<>(); } if (MapUtils.isEmpty(doRawData)) { errors.add(new RuntimeException(""Task: \'"" + taskName + ""\' has no reference information"")); } else { String refString = doRawData.keySet().iterator().next(); refId = resolveReferenceID(refString, imports, namespace); }  @SuppressWarnings(""unchecked"") Map<String, String> navigationStrings = (Map<String, String>) postTaskData.get(SlangTextualKeys.NAVIGATION_KEY);  //default navigation if (MapUtils.isEmpty(navigationStrings)) { navigationStrings = new HashMap<>(); navigationStrings.put(ScoreLangConstants.SUCCESS_RESULT, defaultSuccess); navigationStrings.put(ScoreLangConstants.FAILURE_RESULT, defaultFailure); }  Task task = new Task( taskName, preTaskData, postTaskData, arguments, navigationStrings, refId, preTaskData.containsKey(ScoreLangConstants.ASYNC_LOOP_KEY)); return new TaskModellingResult(task, errors); } "	0	0	1	1	0	0
"@Override public synchronized void save(@Nullable EmailModel email) throws IncompleteEmailException { if (email == null) { return; } if (email.getReceivedDate() == null || email.getEmailStr() == null) { throw new IncompleteEmailException(); }  String filePath = String.format(""%s%s%s"", Configuration.get(""emails.storage.fs.path"", DEFAULT_MAILS_DIRECTORY), File.separator, dateFormat.format(new Date()));  try { File file = getUniqueFile(filePath); email.setFilePath(file.getPath()); FileUtils.writeStringToFile(file, email.getEmailStr()); } catch (IOException e) { logger.error(""Error: Can't save email: {}"", e.getMessage(), e); }  addToIndex(email); saveIndex(); } "	0	0	0	0	0	1
"public static void main(String[] args) {  logger.info(""starting StreamProcessingRunner"");  ////////////////////////////////////////// // Commande lien management Parser parser = new GnuParser(); Options options = new Options();   String helpMsg = ""Print this message.""; Option help = new Option(""help"", helpMsg); options.addOption(help);  OptionBuilder.withArgName(AGENT); OptionBuilder.withLongOpt(""agent-quorum""); OptionBuilder.isRequired(); OptionBuilder.hasArg(); OptionBuilder.withDescription(""logisland agent quorum like host1:8081,host2:8081""); Option agent = OptionBuilder.create(AGENT); options.addOption(agent);  OptionBuilder.withArgName(JOB); OptionBuilder.withLongOpt(""job-name""); OptionBuilder.isRequired(); OptionBuilder.hasArg(); OptionBuilder.withDescription(""logisland agent quorum like host1:8081,host2:8081""); Option job = OptionBuilder.create(JOB); options.addOption(job);  String logisland = ""██╗      ██████╗  ██████╗   ██╗███████╗██╗      █████╗ ███╗   ██╗██████╗ \n"" + ""██║     ██╔═══██╗██╔════╝   ██║██╔════╝██║     ██╔══██╗████╗  ██║██╔══██╗\n"" + ""██║     ██║   ██║██║  ███╗  ██║███████╗██║     ███████║██╔██╗ ██║██║  ██║\n"" + ""██║     ██║   ██║██║   ██║  ██║╚════██║██║     ██╔══██║██║╚██╗██║██║  ██║\n"" + ""███████╗╚██████╔╝╚██████╔╝  ██║███████║███████╗██║  ██║██║ ╚████║██████╔╝\n"" + ""╚══════╝ ╚═════╝  ╚═════╝   ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝   v0.10.0-SNAPSHOT\n\n\n"";  System.out.println(logisland); Optional<EngineContext> engineInstance = Optional.empty(); try { // parse the command line arguments CommandLine line = parser.parse(options, args); String agentQuorum = line.getOptionValue(AGENT); String jobName = line.getOptionValue(JOB);    // instanciate engine and all the processor from the config engineInstance = new RestComponentFactory(agentQuorum).getEngineContext(jobName); assert engineInstance.isPresent(); assert engineInstance.get().isValid();  logger.info(""starting Logisland session version {}"", engineInstance.get()); } catch (Exception e) { logger.error(""unable to launch runner : {}"", e); }  try { // start the engine EngineContext engineContext = engineInstance.get(); engineInstance.get().getEngine().start(engineContext); } catch (Exception e) { logger.error(""something went bad while running the job : {}"", e); System.exit(-1); }   } "	0	0	0	0	0	1
"@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {  view = inflater.inflate(R.layout.fragment_my_movements_tab, container, false);  listView = (ListView) view.findViewById(R.id.my_movements_list); message = (TextView) view.findViewById(R.id.no_movments_message); setUpChangeFragmentsButton(view, new RecommendedMovementsTab(), R.id.movements); //        setUpChangeFragmentsButton(view, new AddMovementPage(), R.id.goto_add_movement_button); ImageButton addMovementBtn = (ImageButton) view.findViewById(R.id.goto_add_movement_btn); addMovementBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { ((MainActivity) getActivity()).changeFragment(new AddMovementPage(), ""AddMovementPage""); } });  setMenuButtonOnClickListener(R.id.my_movement_tab); setUpAddButton();  setUsersMovementsListener();  //this is where the problems start if (!movements.isEmpty() && movements != null) { setUpListView(); } return view; } "	0	0	1	0	1	0
public void startServiceSyncDropbox() { if (mDropboxHelper != null && mDropboxHelper.isLinked()) { Intent service = new Intent(getApplicationContext(), DropboxServiceIntent.class); service.setAction(DropboxServiceIntent.INTENT_ACTION_SYNC); service.putExtra(DropboxServiceIntent.INTENT_EXTRA_LOCAL_FILE, MoneyManagerApplication.getDatabasePath(getApplicationContext())); service.putExtra(DropboxServiceIntent.INTENT_EXTRA_REMOTE_FILE, mDropboxHelper.getLinkedRemoteFile()); //progress dialog final ProgressDialog progressDialog = new ProgressDialog(getApplicationContext()); progressDialog.setCancelable(false); progressDialog.setMessage(getString(R.string.dropbox_syncProgress)); progressDialog.setIndeterminate(true); progressDialog.show(); //create a messenger Messenger messenger = new Messenger(new Handler() { @Override public void handleMessage(Message msg) { if (msg.what == DropboxServiceIntent.INTENT_EXTRA_MESSENGER_NOT_CHANGE) { // close dialog if (progressDialog != null && progressDialog.isShowing()) progressDialog.hide();  runOnUiThread(new Runnable() { @Override public void run() { Toast.makeText(MainActivity.this, R.string.dropbox_database_is_synchronized, Toast.LENGTH_LONG).show(); } }); } else if (msg.what == DropboxServiceIntent.INTENT_EXTRA_MESSENGER_START_DOWNLOAD) { runOnUiThread(new Runnable() { @Override public void run() { Toast.makeText(MainActivity.this, R.string.dropbox_download_is_starting, Toast.LENGTH_LONG).show(); } }); } else if (msg.what == DropboxServiceIntent.INTENT_EXTRA_MESSENGER_DOWNLOAD) { // close dialog if (progressDialog != null && progressDialog.isShowing()) progressDialog.hide(); // reload fragment reloadAllFragment(); } else if (msg.what == DropboxServiceIntent.INTENT_EXTRA_MESSENGER_START_UPLOAD) { runOnUiThread(new Runnable() { @Override public void run() { Toast.makeText(MainActivity.this, R.string.dropbox_upload_is_starting, Toast.LENGTH_LONG).show(); } }); } else if (msg.what == DropboxServiceIntent.INTENT_EXTRA_MESSENGER_UPLOAD) { // close dialog if (progressDialog != null && progressDialog.isShowing()) progressDialog.hide();  runOnUiThread(new Runnable() { @Override public void run() { Toast.makeText(MainActivity.this, R.string.upload_file_to_dropbox_complete, Toast.LENGTH_LONG).show(); } }); } } }); service.putExtra(DropboxServiceIntent.INTENT_EXTRA_MESSENGER, messenger);  this.startService(service); } } 	0	0	1	0	0	0
@Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String s) { switch (s) { case MyPreferenceManager.Keys.TEXT_SCALE_UI: onTextSizeUiChanged(); break; case MyPreferenceManager.Keys.DESIGN_LIST_NEW_IS_ON: if (!isAdded()) { return; } if (mMyPreferenceManager.isDesignListNewEnabled()) { mRecyclerView.removeItemDecoration(mDividerItemDecoration); } else { mRecyclerView.addItemDecoration(mDividerItemDecoration); } mRecyclerView.setAdapter(null); mRecyclerView.setAdapter(getAdapter()); //                getAdapter().notifyDataSetChanged(); break; default: //do nothing break; } } 	0	0	0	0	0	1
"public Boolean updateResearchObjectUser(long researchObjectId, int researchObjectVersion, long userId, String userType) {  Boolean check = false; ResearchObject_User relation = null; ResearchObject_UserPK pk = new ResearchObject_UserPK(researchObjectId, researchObjectVersion, userId);  try {relation = researchObject_UserPersistence.findByPrimaryKey(pk);} catch (NoSuchResearchObject_UserException | SystemException e) {System.out.println(""Entry in ResearchObject does not exist with 'projectId' ""+researchObjectId+ "" and 'userid' "" + userId + "" and will be create now"");}  if (relation == null) relation = researchObject_UserPersistence.create(pk);  relation.setUserType(userType);  try { super.updateResearchObject_User(relation); check = true; } catch (SystemException e) {e.printStackTrace();}  return check; } "	0	0	0	0	0	1
public void addObstacle(boolean isLeft, CannonBallGraphic graphic) { if (isLeft) { this.riverLeft.spawnObstacle(graphic); } else { this.riverRight.spawnObstacle(graphic); } } 	0	0	0	1	0	0
public void addRock(boolean isLeft, RockGraphic graphic) { if (isLeft) { this.riverLeft.spawnRock(graphic); } else { this.riverRight.spawnRock(graphic); } } 	0	0	0	1	0	0
"public void createPostTable(SQLiteDatabase aDb) {  aDb.execSQL(""CREATE TABLE "" + TABLE_POSTS + "" ("" + AwfulPost.ID                    + "" INTEGER UNIQUE,"" + AwfulPost.THREAD_ID             + "" INTEGER,""        + AwfulPost.POST_INDEX            + "" INTEGER,""        + AwfulPost.DATE                  + "" VARCHAR,""        + AwfulPost.REGDATE               + "" VARCHAR,""        + AwfulPost.USER_ID               + "" INTEGER,""        + AwfulPost.USERNAME              + "" VARCHAR,""        + AwfulPost.PREVIOUSLY_READ       + "" INTEGER,""        + AwfulPost.EDITABLE              + "" INTEGER,""        + AwfulPost.IS_OP                 + "" INTEGER,""        + AwfulPost.IS_ADMIN              + "" INTEGER,""        + AwfulPost.IS_MOD                + "" INTEGER,""        + AwfulPost.IS_PLAT               + "" INTEGER,""        + AwfulPost.AVATAR                + "" VARCHAR,""        + AwfulPost.AVATAR_TEXT           + "" VARCHAR,""        + AwfulPost.CONTENT               + "" VARCHAR,""        + AwfulPost.EDITED                + "" VARCHAR,"" + UPDATED_TIMESTAMP   + "" DATETIME);""); } "	0	0	1	0	0	0
"public void createEmoteTable(SQLiteDatabase aDb) {  aDb.execSQL(""CREATE TABLE "" + TABLE_EMOTES + "" (""    + AwfulEmote.ID      	 + "" INTEGER UNIQUE,""  + AwfulEmote.TEXT      + "" VARCHAR,""   + AwfulEmote.SUBTEXT   + "" VARCHAR,""         + AwfulEmote.URL   	 + "" VARCHAR,""     + AwfulEmote.INDEX   	 + "" INTEGER,""     + UPDATED_TIMESTAMP   + "" DATETIME);""); } "	0	0	1	0	0	0
public static void restoreMutexPlacesByName(final StgModel model, Collection<Mutex> mutexes) { if ((model != null) && (mutexes != null)) { for (Mutex mutex: mutexes) { Node node = model.getNodeByReference(mutex.name); if (node instanceof StgPlace) { StgPlace place = (StgPlace) node; place.setMutex(true); } } } } 	0	0	1	1	0	0
@Test public void thenTheSecondResolutionIsCalled() throws Exception { verify(secondResultHandler, times(1)).resultFrom(any()); } 	0	0	0	0	0	1
"public String createRoomType( int roomtypeId,int slots, int verticalRows, String horizontalRows,String NumberOfSlotsEachHRows, String roomtypeName, String equip, String action){ try { TblRoomTypeEntity2 roomType = new TblRoomTypeEntity2(); horizontalRows = horizontalRows.substring(0, horizontalRows.length() - 1); NumberOfSlotsEachHRows = NumberOfSlotsEachHRows.substring(0, NumberOfSlotsEachHRows.length() - 1); java.util.Date date = new java.util.Date(); String message = """"; if (roomtypeName != """") { roomType = roomType2DAO.getRoomTypeByName(roomtypeName); if ( action.equals(""update"")) { if(roomType==null){ roomType = roomType2DAO.find(roomtypeId); } String oldRoomType = roomType.getName(); List<TblEquipmentQuantityEntity> tblEquipmentQuantityEntities = roomType.getTblEquipmentQuantityById(); if(!tblEquipmentQuantityEntities.isEmpty()){ for(TblEquipmentQuantityEntity tblEquipmentQuantityEntity: tblEquipmentQuantityEntities){ tblEquipmentQuantityEntity.setIsDelete(true); equipmentQuantityDAO.merge(tblEquipmentQuantityEntity); } } Collection<TblClassroomEntity> tblClassroomEntities = roomType.getTblClassroomsById(); if(!tblClassroomEntities.isEmpty()){ for(TblClassroomEntity classroomEntity: tblClassroomEntities){ List<TblEquipmentEntity>tblEquipmentEntities = classroomEntity.getTblEquipmentsById(); for(TblEquipmentEntity tblEquipmentEntity: tblEquipmentEntities){ tblEquipmentEntity.setClassroomId(null); equipmentDAO.merge(tblEquipmentEntity); } classroomEntity.setIsAllInformation(false); classroomDAO.merge(classroomEntity); } } roomType = new TblRoomTypeEntity2(roomType.getId(), roomtypeName, slots, verticalRows, horizontalRows, NumberOfSlotsEachHRows, roomType.getCreateTime(), false, new Timestamp(date.getTime()));  roomType2DAO.merge(roomType); message = ""Cập nhật ""+oldRoomType+"" thành công!""; } if(action.equals(""create"") && roomType==null) { roomType = new TblRoomTypeEntity2(0, roomtypeName, slots, verticalRows, horizontalRows, NumberOfSlotsEachHRows, new Timestamp(date.getTime()), false, null); roomType2DAO.insert(roomType); message = ""Tạo ""+roomtypeName+"" thành công!""; } } String []array = equip.split(""-""); for(int i = 0; i<array.length; i++){ String [] array2 = array[i].split("",""); String quantity = array2[0]; String priority = array2[1]; String categoryId = array2[2]; if(!categoryId.equals(""0"")&& !quantity.equals(""0"")){ TblEquipmentQuantityEntity tblEquipmentQuantityEntity = new TblEquipmentQuantityEntity(); tblEquipmentQuantityEntity.setEquipmentCategoryId(Integer.parseInt(categoryId)); tblEquipmentQuantityEntity.setRoomTypeId(roomType.getId()); tblEquipmentQuantityEntity.setPriority(Integer.parseInt(priority)); tblEquipmentQuantityEntity.setQuantity(Integer.parseInt(quantity)); tblEquipmentQuantityEntity.setIsDelete(false); equipmentQuantityDAO.persist(tblEquipmentQuantityEntity); } }  return ""redirect:/staff/classroom?ACTIVETAB=tab2&MESSAGE="" +  URLEncoder.encode(message, ""UTF-8""); }catch (Exception e){ e.printStackTrace(); return ERROR; } } "	0	0	1	1	0	0
"public String createClassroom(int roomTypeId, String roomName, String action, int classroomId) { try { String message = """"; Date date = new Date(); roomName = roomName.trim();  if (roomName != null) { TblClassroomEntity classroom = classroomDAO.getClassroomByName(roomName); if ( action.equals(""update"")) { if(classroom==null){ classroom = classroomDAO.find(classroomId); } String oldClass = classroom.getName(); Collection<TblEquipmentEntity> tblEquipmentEntities = classroom.getTblEquipmentsById(); for (TblEquipmentEntity tblEquipmentEntity : tblEquipmentEntities) { tblEquipmentEntity.setClassroomId(null); equipmentDAO.merge(tblEquipmentEntity); } classroom = new TblClassroomEntity(classroom.getId(), roomName, classroom.getCreateTime(), new Timestamp(date.getTime()), false, false, 0, roomTypeId); classroomDAO.merge(classroom); message = ""Cập nhật phòng "" + oldClass + "" thành công!""; } if(action.equals(""create"") && classroom==null) { classroom = new TblClassroomEntity(0, roomName.trim(), new Timestamp(date.getTime()), null, false, false, 0 , roomTypeId); classroomDAO.insert(classroom); message = ""Tạo phòng "" + roomName + "" thành công!""; } }  return ""redirect:/staff/classroom?ACTIVETAB=tab1&MESSAGE="" + URLEncoder.encode(message, ""UTF-8""); } catch (Exception e) { e.printStackTrace(); return ERROR; } } "	1	1	1	1	0	0
"@Override public void onBackPressed() { if(app_state.equals(""add"")) { Bundle bundle = new Bundle(); bundle.putString(""state"", ""show""); setState(bundle); FocusedMarker.remove(); } else if(app_state.equals(""show"")){ if (drawer.isDrawerOpen(GravityCompat.START)) { drawer.closeDrawer(GravityCompat.START); } else { super.onBackPressed(); } } else if(app_state.equals(""modify"")){ super.onBackPressed(); overridePendingTransition(R.anim.slide_in_from_left, R.anim.slide_out_to_right); } } "	0	0	0	0	0	1
"public void generateTripRoute(TripTO tripWaypoints) throws JSONException, BusinessException {  List<String> finalRouteData = new LinkedList<String>(); List<DealerTO> dealersList = tripWaypoints.getDealersList(); List<OrderTO> ordersList = tripWaypoints.getOrdersList();  WaypointTO waypointTo = new WaypointTO(); waypointTo.setOrigin(dealersList.get(0).getAddress()); waypointTo.setDestination(dealersList.get(dealersList.size() - 1).getAddress()); List<String> wayPointsList = new ArrayList<String>();  for (int i = 1; i < dealersList.size() - 1; i++) { wayPointsList.add(dealersList.get(i).getAddress()); } if (wayPointsList.isEmpty()) { wayPointsList.add(dealersList.get(0).getAddress()); } waypointTo.setWaypoints(wayPointsList); JSONObject jsonObj = new JSONObject(getOptimalRoute(waypointTo)); JSONArray dealerOrderedWaypointsArr = jsonObj.getJSONArray(""routes"").getJSONObject(0).getJSONArray(""legs"");  for (int i = 0; i < dealerOrderedWaypointsArr.length(); i++) { JSONObject loc = dealerOrderedWaypointsArr.getJSONObject(i).getJSONObject(""start_location""); finalRouteData.add(loc.getDouble(""lat"") + "","" + loc.getDouble(""lng"")); } JSONObject endLoc = dealerOrderedWaypointsArr.getJSONObject(dealerOrderedWaypointsArr.length() - 1) .getJSONObject(""end_location""); finalRouteData.add(endLoc.getDouble(""lat"") + "","" + endLoc.getDouble(""lng"")); String sourceAddress = endLoc.getDouble(""lat"") + "","" + endLoc.getDouble(""lng"");  if(tripWaypoints.getOrdersList().size() > 22) { tripWaypoints.setOrdersList(new OptimalPathManager().processDijakstra(sourceAddress, ordersList).getOrderList()); } else { waypointTo = new WaypointTO(); waypointTo.setOrigin(endLoc.getDouble(""lat"") + "","" + endLoc.getDouble(""lng"")); waypointTo.setDestination(ordersList.get(ordersList.size() - 1).getAddress()); wayPointsList = new ArrayList<String>(); for (int i = 0; i < ordersList.size() - 1; i++) { wayPointsList.add(ordersList.get(i).getAddress()); } if (wayPointsList.isEmpty()) { wayPointsList.add(ordersList.get(0).getAddress()); } waypointTo.setWaypoints(wayPointsList); jsonObj = new JSONObject(getOptimalRoute(waypointTo));  List<OrderTO> sortedOrdersList = new LinkedList<OrderTO>(); JSONArray waypointsOrders = jsonObj.getJSONArray(""routes"").getJSONObject(0).getJSONArray(""waypoint_order""); for (int m = 0; m < waypointsOrders.length(); m++) { sortedOrdersList.add(ordersList.get(waypointsOrders.getInt(m))); } if (sortedOrdersList.size() > 1) { sortedOrdersList.add(ordersList.get(ordersList.size() - 1)); } tripWaypoints.setOrdersList(sortedOrdersList); } } "	0	0	0	0	0	1
"@Override public Object format(Object value) { if (value instanceof HsnContext) { HsnContext context = (HsnContext) value; return ""\"""" + context.getJobId() + ""\""""; } else { return value; } } "	1	0	1	0	0	0
@Override public byte[] calculate(WebPage page) { ByteBuffer buf = page.getContent(); byte[] data; int of; int cb; if (buf == null) { Utf8 baseUrl = (Utf8) page.getBaseUrl(); if (baseUrl == null) { data = null; of = 0; cb = 0; } else { data = baseUrl.getBytes(); of = 0; cb = baseUrl.length(); } } else { data = buf.array(); of = buf.arrayOffset() + buf.position(); cb = buf.remaining(); }  return MD5Hash.digest(data, of, cb).getDigest(); } 	0	0	1	0	1	0
protected Comparison compare(String sourceRev, String targetRev, IFile file) throws Exception { final String fullPath = file.getFullPath().toString(); final Subscriber subscriber = repository.createSubscriberForComparison(sourceRev, targetRev, file, false); final IStorageProviderAccessor accessor = new SubscriberStorageAccessor(subscriber); final IStorageProvider sourceProvider = accessor.getStorageProvider(file, IStorageProviderAccessor.DiffSide.SOURCE); final IStorageProvider remoteProvider = accessor.getStorageProvider(file, IStorageProviderAccessor.DiffSide.REMOTE); final IStorageProvider ancestorProvider = accessor.getStorageProvider(file, IStorageProviderAccessor.DiffSide.ORIGIN); assertNotNull(sourceProvider); assertNotNull(remoteProvider); assertNotNull(ancestorProvider);  final IProgressMonitor monitor = new NullProgressMonitor(); // do we really need to create a new one? final IStorageProviderAccessor storageAccessor = new SubscriberStorageAccessor(subscriber); final ITypedElement left = new StorageTypedElement(sourceProvider.getStorage(monitor), fullPath); final ITypedElement right = new StorageTypedElement(remoteProvider.getStorage(monitor), fullPath); final ITypedElement origin = new StorageTypedElement(ancestorProvider.getStorage(monitor), fullPath); final ThreadedModelResolver resolver = new ThreadedModelResolver(); resolver.setGraph(new Graph<URI>()); resolver.initialize(); final ComparisonScopeBuilder scopeBuilder = new ComparisonScopeBuilder(resolver, new IdenticalResourceMinimizer(), storageAccessor); final IComparisonScope scope = scopeBuilder.build(left, right, origin, monitor);  final ResourceSet leftResourceSet = (ResourceSet)scope.getLeft(); final ResourceSet rightResourceSet = (ResourceSet)scope.getRight(); final ResourceSet originResourceSet = (ResourceSet)scope.getOrigin();  assertFalse(leftResourceSet.getResources().isEmpty()); assertFalse(rightResourceSet.getResources().isEmpty()); assertFalse(originResourceSet.getResources().isEmpty());  final Builder comparisonBuilder = EMFCompare.builder(); EMFCompareBuilderConfigurator.createDefault().configure(comparisonBuilder);  return comparisonBuilder.build().compare(scope, new BasicMonitor()); } 	0	0	1	1	0	0
@Transactional public FacilityDistributionEditResults update(Long distributionId, FacilityDistributionDTO replacement, Long userId) { FacilityDistributionEditHandler handler = new FacilityDistributionEditHandler();  deleteDistributionEdit(distributionId, userId);  if (handler.modified(replacement)) { replacement.setModifiedBy(userId);  Distribution distribution = distributionService.getBy(distributionId); Map<Long, FacilityDistribution> facilityDistributions = facilityDistributionService.getData(distribution); FacilityDistribution original = facilityDistributions.get(replacement.getFacilityId());  FacilityDistributionEditResults results = handler.check(original, replacement);  Iterator<FacilityDistributionEditDetail> iterator = results.getDetails().iterator();  while (iterator.hasNext()) { FacilityDistributionEditDetail detail = iterator.next();  if (!detail.isConflict()) { facilityDistributionEditService.save(detail); createHistory(userId, distribution, original, detail);  iterator.remove(); } }  return results; } else { return new FacilityDistributionEditResults(replacement.getFacilityId()); } } 	0	0	1	0	1	0
@Override @Transactional public User registerUser( String email, String cleanPassword, String firstName, String lastName, Locale locale ) { return saveNewlyCreatedUser( email, cleanPassword, firstName, lastName, locale, OneTimeLinkType.USER_REGISTRATION ); } 	0	0	0	0	0	1
@Override public List<byte[]> blpop(final byte[] arg) { return new JedisClusterCommand<List<byte[]>>(connectionHandler, timeout, maxRedirections) { @Override public List<byte[]> execute(Jedis connection) { return connection.blpop(arg); } }.runBinary(null); } 	0	0	1	0	0	0
private void addText(Text currentText) { float xStart = convXRelCoordToAbsCoord(currentText.getXStart()); float yStart = convYRelCoordToAbsCoord(currentText.getYStart()); float xEnd = convXRelCoordToAbsCoord(currentText.getXEnd()); float yEnd = convYRelCoordToAbsCoord(currentText.getYEnd()); String backgroundColor = currentText.getBackgroundColor(); Alignment alignment = Alignment.valueOf(currentText.getAlignment().toUpperCase());  /* * Initialise a new textFragmentList for passing to the text box * builder. */ TextFragmentList textFragmentList = new TextFragmentList();  /* * Loop through all the text fragments for the box, adding them to the * textFragmentList. */ for (TextFragment currentFragment : currentText.getTextFragments()) { boolean bold = currentFragment.isBold(); boolean underline = currentFragment.isUnderlined(); boolean italic = currentFragment.isItalicised(); boolean superscript = currentFragment.isSuperscript(); boolean subscript = currentFragment.isSubscript(); boolean strikethrough = currentFragment.isStrikethrough(); boolean newline = currentFragment.endsWithNewline(); String fontColor = currentFragment.getFontColor(); String highlightColor = currentFragment.getHighlightColor(); String font = currentFragment.getFont(); double fontSize = currentFragment.getFontSize(); String text = currentFragment.getText(); /* Add the attributes to the list using the textFragmentBuilder. */ textFragmentList.add(new TextObject.TextFragmentBuilder(text) .bold(bold) .underline(underline) .italic(italic) .superscript(superscript) .subscript(subscript) .strikethrough(strikethrough) .newline(newline) .fontColor(fontColor) .highlightColor(highlightColor) .fontName(font) .fontSize((int) fontSize) .build()); }  /* * Create the text object using the text box builder and pass it to the * text handler to be drawn on screen. */ textHandler.createTextbox(new TextObject.TextBoxBuilder(xStart, yStart) .xEnd(xEnd) .yEnd(yEnd) .backgroundColor(backgroundColor) .alignment(alignment) .textFragmentList(textFragmentList) .build());  /* * If the text box has a start time tag, hide the object. Will be shown * later by the updateSlide class. */ if (currentText.getStartTime() != 0) { textHandler.setVisible(textHandler.getTextCount() - 1, false); } } 	0	0	0	0	0	1
public void add(JsArrayString names) { for (int i = 0; i < names.length(); i++) add(names.get(i)); } 	0	0	0	0	0	1
private String projectIdFilter(final String organizationId, final String projectId) { Map<String, Object> filter = new HashMap<>(); filter.put(LumeerConst.Project.ATTR_ORGANIZATION_ID, organizationId); filter.put(LumeerConst.Project.ATTR_PROJECT_ID, projectId); return dataStorageDialect.multipleFieldsValueFilter(filter); } 	0	0	0	0	0	1
private void triggerEvent(final Event event, final Bundle extrasBundle, final Object rawExtra) { try { mOnEventListener.onEventTriggered(this, event, extrasBundle, rawExtra); } catch (final Exception e) { // If a checked exception occurs notify the client. mOnEventListener.onExceptionOccurred(e); } } 	0	0	0	0	0	1
private void triggerEvent(final Event event, final String bundleKey, final double bundleValue) { final Bundle extrasBundle = new Bundle(); extrasBundle.putDouble(bundleKey, bundleValue); triggerEvent(event, extrasBundle, null); } 	0	0	0	0	0	1
"protected static void initializeGlobalParameters(Run run) throws ValidationException {  run.assignRuntimeParameter(RuntimeParameter.GLOBAL_CATEGORY_KEY, run.getCategory().toString(), ""Module category"");  run.assignRuntimeParameter(RuntimeParameter.GLOBAL_COMPLETE_KEY, """", RuntimeParameter.GLOBAL_COMPLETE_DESCRIPTION); run.assignRuntimeParameter(RuntimeParameter.GLOBAL_ABORT_KEY, """", RuntimeParameter.GLOBAL_ABORT_DESCRIPTION); run.assignRuntimeParameter(RuntimeParameter.GLOBAL_STATE_KEY, Run.INITIAL_NODE_STATE, RuntimeParameter.GLOBAL_STATE_DESCRIPTION); run.assignRuntimeParameter(RuntimeParameter.GLOBAL_NODE_GROUPS_KEY, """", RuntimeParameter.GLOBAL_NODE_GROUPS_DESCRIPTION);  run.assignRuntimeParameter(RuntimeParameter.GLOBAL_URL_SERVICE_KEY, """", RuntimeParameter.GLOBAL_URL_SERVICE_DESCRIPTION);  run.assignRuntimeParameter(RuntimeParameter.GLOBAL_TAGS_KEY, """", RuntimeParameter.GLOBAL_TAGS_DESCRIPTION);  run.assignRuntimeParameter(RuntimeParameter.GLOBAL_RECOVERY_MODE_KEY, ""false"", RuntimeParameter.GLOBAL_RECOVERY_MDDE_DESCRIPTION); } "	0	0	0	0	0	1
"private void setEventNotificationFilterOnDevice(final DeviceConnection deviceConnection, final String filter) throws ProtocolAdapterException, FunctionalException { final Function<Void> function = new Function<Void>() {  @Override public Void apply() throws Exception {  LOGGER.info(""Setting the event notification filter"");  final NodeContainer eventBufferConfiguration = deviceConnection.getFcModelNode(LogicalDevice.LIGHTING, LogicalNode.STREET_LIGHT_CONFIGURATION, DataAttribute.EVENT_BUFFER, Fc.CF); Iec61850SsldDeviceService.this.readNodeDataValues(deviceConnection, eventBufferConfiguration);  LOGGER.info(""Updating the enabled EventType filter to {}"", filter); eventBufferConfiguration.writeString(SubDataAttribute.EVENT_BUFFER_FILTER, filter);  return null; } };  this.iec61850Client.sendCommandWithRetry(function); } "	0	0	1	0	0	0
"public static void main(String[] args) throws JAXBException, IOException, XMLStreamException { jaxbContext = JAXBContext .newInstance(org.opencloudb.config.loader.zookeeper.entitiy.Server.class, org.opencloudb.config.loader.zookeeper.entitiy.Rules.class, org.opencloudb.config.loader.zookeeper.entitiy.Schemas.class); unmarshaller = jaxbContext.createUnmarshaller();  if (args.length > 0) { MYCLUSTER_ID = args[0]; }  try ( InputStream schemaStream = XmlToYaml.class.getResourceAsStream(""/schema.xml""); InputStream serverStream = XmlToYaml.class.getResourceAsStream(""/server.xml""); InputStream ruleStream = XmlToYaml.class.getResourceAsStream(""/rule.xml""); InputStream myidStream = XmlToYaml.class.getResourceAsStream(""/myid.properties""); FileWriter fileWriter = new FileWriter( XmlToYaml.class.getResource(""/zk-create.yaml"").getFile())  ) { Preconditions.checkNotNull(myidStream, ""have not myid file""); Properties properties = new Properties(); properties.load(myidStream);  serializeMap = new LinkedHashMap<>(); serializeMap.put(properties.getProperty(""zkURL""), ""127.0.0.1:2181"");  Server server = loadServer(serverStream); serializeMap.put(""mycat-cluster"", process(loadSchema(schemaStream), loadRule(ruleStream), server)); serializeMap.put(""mycat-nodes"", processServer(server, properties.getProperty(""myid"")));  fileWriter.write(new Yaml().dumpAsMap(serializeMap)); } } "	0	0	1	1	1	0
protected void func_151538_a(World p_151538_1_, int p_151538_2_, int p_151538_3_, int p_151538_4_, int p_151538_5_, Block[] p_151538_6_) { int i1 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(47) + 1) + 1);  if (this.rand.nextInt(3) != 0) { i1 = 0; }  for (int j1 = 0; j1 < i1; ++j1) { double d0 = (double)(p_151538_2_ * 16 + this.rand.nextInt(16)); double d1 = (double)this.rand.nextInt(this.rand.nextInt(248) + 8); double d2 = (double)(p_151538_3_ * 16 + this.rand.nextInt(16)); int k1 = 1;  if (this.rand.nextInt(4) == 0) { this.func_151542_a(this.rand.nextLong(), p_151538_4_, p_151538_5_, p_151538_6_, d0, d1, d2); k1 += this.rand.nextInt(4); }  for (int l1 = 0; l1 < k1; ++l1) { float f = this.rand.nextFloat() * (float)Math.PI * 2.0F; float f1 = (this.rand.nextFloat() - 0.5F) * 2.0F / 8.0F; float f2 = this.rand.nextFloat() * 2.0F + this.rand.nextFloat();  if (this.rand.nextInt(10) == 0) { f2 *= this.rand.nextFloat() * this.rand.nextFloat() * 3.0F + 1.0F; }  this.func_151541_a(this.rand.nextLong(), p_151538_4_, p_151538_5_, p_151538_6_, d0, d1, d2, f2, f, f1, 0, 0, 1.0D); } } } 	0	0	0	0	0	1
"@Override public void onCommand(User sender, GuildWrapper guild, TextChannel channel, Message message, String[] args, Member member) { if (args.length < 1 || args.length > 2) { send(member.getUser().openPrivateChannel().complete(), channel, member); } else { if (args.length == 1) { if (args[0].equalsIgnoreCase(""clear"")) { manager.getPlayer(channel.getGuild().getId()).getPlaylist().clear(); channel.sendMessage(""Cleared the current playlist!"").queue(); } else if (args[0].equalsIgnoreCase(""remove"")) { MessageUtils.getUsage(this, channel, sender).queue(); } else if (args[0].equalsIgnoreCase(""here"")) { send(channel, channel, member); } else { MessageUtils.getUsage(this, channel, sender).queue(); } } else if (args.length == 2) { if (args[0].equalsIgnoreCase(""remove"")) { int number; try { number = Integer.parseInt(args[1]); } catch (NumberFormatException e) { MessageUtils.sendErrorMessage(""That is an invalid number!"", channel); return; }  Queue<Track> queue = manager.getPlayer(channel.getGuild().getId()).getPlaylist();  if (number < 1 || number > queue.size()) { MessageUtils .sendErrorMessage(""There is no song with that index. Make sure your number is at least 1 and either "" + queue .size() + "" or below!"", channel); return; }  List<Track> playlist = new ArrayList<>(queue); playlist.remove(number - 1); queue.clear(); queue.addAll(playlist);  channel.sendMessage(MessageUtils.getEmbed(sender) .setDescription(""Removed number "" + number + "" from the playlist!"") .build()).queue(); } } } } "	0	0	0	0	0	1
"public void contextInitialized(ServletContextEvent event) { try { initEurekaEnvironment();  // For backward compatibility JsonXStream.getInstance().registerConverter( new V1AwareInstanceInfoConverter(stringCache), XStream.PRIORITY_VERY_HIGH); XmlXStream.getInstance().registerConverter( new V1AwareInstanceInfoConverter(stringCache), XStream.PRIORITY_VERY_HIGH); InstanceInfo info = ApplicationInfoManager.getInstance().getInfo();  PeerAwareInstanceRegistry registry = PeerAwareInstanceRegistry.getInstance();  // Copy registry from neighboring eureka node int registryCount = registry.syncUp(); registry.openForTraffic(registryCount);  this.eurekaEnvironment = new EurekaEnvironmentImpl(); // Only in AWS, enable the binding functionality if (Name.Amazon.equals(info.getDataCenterInfo().getName())) { AmazonEC2Provider amazonEC2Provider = new AmazonEC2Provider( DiscoveryManager.getInstance().getEurekaClientConfig(), EurekaServerConfigurationManager.getInstance().getConfiguration() ); if (eurekaEnvironment.isEc2Vpc()) { this.eipManager = new VpcEniManager( DiscoveryManager.getInstance().getEurekaClientConfig(), EurekaServerConfigurationManager.getInstance().getConfiguration(), DiscoveryManager.getInstance().getEurekaClient(), ApplicationInfoManager.getInstance(), registry, amazonEC2Provider.get() ); } else { this.eipManager = new Ec2ClassicEIPManager( DiscoveryManager.getInstance().getEurekaClientConfig(), EurekaServerConfigurationManager.getInstance().getConfiguration(), DiscoveryManager.getInstance().getEurekaClient(), ApplicationInfoManager.getInstance(), registry, amazonEC2Provider.get() ); }  eipManager.start(); } // Initialize available remote registry PeerAwareInstanceRegistry.getInstance().initRemoteRegionRegistry(); // Register all monitoring statistics. EurekaMonitors.registerAllStats();  for (PeerEurekaNode node : registry.getReplicaNodes()) { logger.info(""Replica node URL:  "" + node.getServiceUrl()); }  } catch (Throwable e) { logger.error(""Cannot bootstrap eureka server :"", e); throw new RuntimeException(""Cannot bootstrap eureka server :"", e); } } "	0	0	1	0	0	0
"public void newGame() { Logger.setLog(""A new game was started.."", 2); levelNumber = 0; nextLevel(); } "	0	0	0	0	0	1
@Override public void run() { Logger.stopLogging(); } 	0	0	0	0	0	1
@Override protected boolean isSupportedByEnvironment(Action action) { try { TygronEntity.getActionType(action.getName()); TygronEntity.translateParameters(action, 0); } catch (TranslationException e) { return false; }  return true; } 	0	0	0	1	0	0
"private TygronEntity getEntity(String e) { String entity = e.toUpperCase(); if (!entities.containsKey(entity)) { throw new IllegalArgumentException(""Unknown entity "" + entity + "". Have:"" + entities.keySet()); } return entities.get(entity); } "	0	0	0	1	0	0
"private static CaseSummarySection createSopSection() { SoP sop = _model.getApplicableSop(); ImmutableSet<Factor> factors = _model.getFactorsConnectedToService(); CaseTrace caseTrace = _model.getCaseTrace(); ImmutableList<String> abortReasoning = caseTrace.getReasoningFor(ReasoningFor.ABORT_PROCESSING); ImmutableList<String> standardOfProofReasoning = caseTrace.getReasoningFor(ReasoningFor.STANDARD_OF_PROOF); ImmutableList<String> factorsReasoning = caseTrace.getReasoningFor(ReasoningFor.MEETING_FACTORS); boolean usingRh = caseTrace.getApplicableStandardOfProof().get() == StandardOfProof.ReasonableHypothesis; ImmutableList<Factor> consideredFactors = usingRh ? caseTrace.getRhFactors() : caseTrace.getBopFactors();  // Statement of principles CaseSummarySection sopSection = new CaseSummarySection(); sopSection.add(new CaseSummaryHeading(""STATEMENT OF PRINCIPLES"", ""Heading2""));  CaseSummarySection sopData = new CaseSummarySection();  // Citation String sopParagraph = ""The relevant Statement of Principles is the "" + sop.getCitation() + "". The standard of proof for this instrument is the "" + sop.getStandardOfProof() + "".""; sopData.add(new CaseSummaryParagraph(sopParagraph));  String legislationParagraph = ""This instrument is available on the Federal "" + ""Register of Legislative Instruments at:""; sopData.add(new CaseSummaryParagraph(legislationParagraph));  String url = ""https://www.legislation.gov.au/Latest/"" + sop.getRegisterId(); sopData.add(new CaseSummaryHyperlink(url));  // Connection to service sopData.add(new CaseSummaryHeading(""CONNECTION TO SERVICE"", ""Heading3""));  if (factors.size() > 0) { String connectionParagraph = (factors.size() > 1) ? ""The factors that were used to connect the condition to service are:"" : ""The factor that was used to connect the condition to service is:""; sopData.add(new CaseSummaryParagraph(connectionParagraph)); for (Factor factor : factors) { sopData.add(new CaseSummaryParagraph(factor.getParagraph() + "": "" + factor.getText())); } } else { sopData.add(new CaseSummaryParagraph(""No factors were able to be used for straight through processing to connect the condition to service"")); }  // Rationale sopData.add(new CaseSummaryHeading(""RATIONALE"", ""Heading3"")); if (abortReasoning.size() > 0) { for (String reason : abortReasoning) { sopData.add(new CaseSummaryParagraph(reason)); } } else { if (standardOfProofReasoning.size() > 0) { sopData.add(new CaseSummaryParagraph(String.format(""The standard of proof is %s, because:"", caseTrace.getApplicableStandardOfProof().get().toString()))); for (String reason : standardOfProofReasoning) { sopData.add(new CaseSummaryParagraph(reason)); } }  if (factors.size() > 0) { String deemingParagraph = (factors.size() > 1) ? ""The factors above were deemed to be met, because:"" : ""The factor above was deemed to be met, because:"";  sopData.add(new CaseSummaryParagraph(deemingParagraph)); for (String reason : factorsReasoning) { sopData.add(new CaseSummaryParagraph(reason)); } } else { String considerationParagraph = (factors.size() > 1) ? ""The following factors were considered:"" : ""The following factor was considered:""; sopData.add(new CaseSummaryParagraph(considerationParagraph)); for (Factor factor : consideredFactors) { sopData.add(new CaseSummaryParagraph(factor.getParagraph() + "": "" + factor.getText())); } String notMetParagraph = (factors.size() > 1) ? ""But were considered not met, because:"" : ""But was considered not met, because:""; sopData.add(new CaseSummaryParagraph(notMetParagraph)); for (String reason : factorsReasoning) { sopData.add(new CaseSummaryParagraph(reason)); } } if (!usingRh && caseTrace.getActualOperationalDays().get() > 0) { String extraRhConsideration = (factors.size() > 1) ? ""Additionally, the following RH factors were deemed not to be applicable, as the RH standard of proof was not considered applicable:"" : ""Additionally, the following RH factor was deemed not to be applicable, as the RH standard of proof was not considered applicable:""; sopData.add(new CaseSummaryParagraph(extraRhConsideration)); for (Factor factor : caseTrace.getRhFactors()) { sopData.add(new CaseSummaryParagraph(factor.getParagraph() + "": "" + factor.getText())); } } }  sopSection.add(sopData);  return sopSection; } "	0	0	0	0	0	1
"private void drawTable() { //		drawHeader();  Collections.sort(AppState.periodList, new Comparator<Period>() {  @Override public int compare(Period lhs, Period rhs) { return lhs.getStartDate().compareTo(rhs.getStartDate()); } });  int index = 1; for (Period period : AppState.periodList) {  final long periodId = period.getPeriodId();  table.insertRow(index); for (int i = 0; i < 7; i++) { table.insertCell(index, i); }  // 0 column --> No table.setText(index, 0, String.valueOf(periodId));  // 1 column --> Status final HorizontalPanel scheduleStatusPanel = new HorizontalPanel(); final Image scheduleStatusImage = new Image(GWT.getHostPageBaseURL() + ""img/"" + statusTranslationMap.get(period.getStatus().toString()) + "".png""); scheduleStatusImage.setStyleName(""myImageAsButton""); //			scheduleStatusImage.setTitle(String.valueOf(periodId));  String scheduleStatus = statusTranslationMap .get(period.getStatus()); scheduleStatusPanel.add(scheduleStatusImage); scheduleStatusPanel.add(new Label(scheduleStatus)); table.setWidget(index, 1, scheduleStatusPanel);  // 2 column --> Start date table.setText(index, 2, period.getStartDate().toString());  // 3 column --> End date table.setText(index, 3, period.getEndDate().toString());  // 4 column --> View final Image scheduleViewButton = new Image(GWT.getHostPageBaseURL() + ""img/view_icon.png""); scheduleViewButton.setStyleName(""myImageAsButton""); scheduleViewButton.setTitle(""Просмотреть""); scheduleViewButton.getElement().setId(""view-"" + periodId);  scheduleViewButton.addClickHandler(new ClickHandler() {  public void onClick(ClickEvent event) { try { History.newItem(AppConstants.HISTORY_VIEW + ""-"" + getIdFromEvent(event)); //						AppState.eventBus.fireEvent( //								new DoViewEvent(getIdFromEvent(event))); } catch (NumberFormatException e) { SC.say(""Нет такого""); } } });  table.setWidget(index, 4, scheduleViewButton);  // 5 column --> Edit final Image scheduleEditButton = new Image(GWT.getHostPageBaseURL() + ""img/file_edit.png""); scheduleEditButton.setTitle(String.valueOf(index)); scheduleEditButton.setStyleName(""myImageAsButton""); scheduleEditButton.getElement().setId(""edit-"" + periodId); scheduleEditButton.setTitle( AppState.isResponsible ? ""Редактировать"" : ""Черновик"");  if (period.getStatus().equals(Status.CLOSED) || (!AppState.isResponsible && !period.getStatus().equals(Status.DRAFT))) { scheduleEditButton.setStyleDependentName(""disabled"", true); scheduleEditButton.setTitle(""""); } else { scheduleEditButton.addClickHandler(new ClickHandler() {  public void onClick(final ClickEvent event) { final long id = getIdFromEvent(event); if (AppState.isResponsible) { AppState.scheduleManagerService.lockSchedule(id, new AsyncCallback<Boolean>() {  @Override public void onSuccess(Boolean result) { if (result) { History.newItem(AppConstants.HISTORY_EDIT + ""-"" + id); //										AppState.eventBus.fireEvent(new DoEditEvent(id)); } else { SC.say(""График работы редактируется или является закрытым!""); } }  @Override public void onFailure(Throwable caught) { SC.say(caught.getMessage()); }  });  } else { History.newItem(AppConstants.HISTORY_DRAFT + ""-"" + id); //							AppState.eventBus.fireEvent(new DoDraftEvent(id)); } } }); }  table.setWidget(index, 5, scheduleEditButton);  // 6 column --> Send to final SendButton sendImage = new SendButton(periodId); table.setWidget(index, 6, sendImage); } } "	0	0	0	0	0	1
@Override public String get(GetRequest request) { String response = executeRequest(request, null);  return response; } 	0	0	1	0	0	0
"private static boolean checkHeaders(HashMap<String, String> headers, boolean expect200) { for (Entry<String, String> expected : expectedHeaders.entrySet()) { String name = expected.getKey(); String value = expected.getValue();  String actualValue = headers != null ? headers.get(name) : null;  if (expect200) { Assert.assertEquals(""Header '"" + name + ""'"", value, actualValue); } else if (value != null && !value.equals(actualValue) || actualValue == null) { return false; } }  return true; } "	0	0	0	1	0	0
"protected String executeRequest(BaseRequest request, String body) { URI uri = request.getUri();  if (responses.isEmpty()) { String msg = ""No more answers configured. Request was: '"" + uri.toString() + ""'""; if (body != null) { msg += "" - "" + body; } throw new IllegalStateException(msg); }  HashMap<String, String> headers = request.getHeaders(); HashMap<String, String> queryParameters = request.getQueryParameters(); int expectedStatus = request.getExpectedStatus(); boolean expect200 = expectedStatus == 200;  int responseStatus = 200;  if (!checkHeaders(headers, expect200) || !checkParameters(uri, queryParameters, expect200)) { responseStatus = 404; } if (responseStatus != expectedStatus) { throw new IllegalStateException(""Expected HTTP response status ["" + expectedStatus + ""] but instead got ["" + responseStatus + ""]""); }  if (responseStatus != 200) { return """"; }  String response = responses.poll(); expectedParamArrays.poll(); RequestHolder requestHolder = requestHolders.poll(); requestHolder.setRequest(request);  return response; } "	0	0	0	1	0	0
"private static boolean checkParameters(URI uri, HashMap<String, String> queryParameters, boolean expect200) { String[] expectedParams = expectedParamArrays.peek(); if (expectedParams.length == 0) { return true; }  HashSet<String> parameters = new HashSet<>(); readImpliciteParameters(uri, parameters, queryParameters); readExpliciteParameters(queryParameters, parameters);  boolean expectedParamsFound = true; if (expect200) { for (String expectedParam : expectedParams) { Assert.assertTrue(""Parameter "" + expectedParam, parameters.contains(expectedParam)); } } else { expectedParamsFound = parameters.containsAll(Arrays.asList(expectedParams)); }  return expectedParamsFound; } "	0	0	0	0	0	1
@Override public String post(PostRequest request) { String body = request.getBody();  String response = executeRequest(request, body);  return response; } 	0	0	1	1	0	0
public Collection<EMDataSet> getDataSets() { return map.getDataSetList().stream().filter(filter).collect(Collectors.toList()); } 	0	0	0	0	0	1
public Integer[] getCounts() { return counts; } 	0	0	0	0	0	1
"public void timerAction() { pipeManagement.update(); gamePanel.updatePipes(pipeManagement.getPipes()); gamePanel.updateFlappy(flappy.getY(), colorManager.getColor()); flappyAniManager.update(); gamePanel.updateFlappyAnimation(flappyAniManager.getCharge(), colorManager.getRGB()); collision(); gamePanel.repaintPanel(); flappy.fall(); gameFrame.setScore(pipeManagement.getScore());  if(ovalManagement.getOvals().size() > 0) gamePanel.updateOvals(ovalManagement.update());  if (gameFrame.isSpaceTyped()){ colorManager.changeColor(); flappy.jump(); ovalManagement.setRGB(colorManager.getRGB()); ovalManagement.spawnOval(flappy.getY()); gameFrame.setSpaceTyped(false); }  if (gameFrame.isEnterTyped()){ pipeManagement.flappyCharge(); ovalManagement.flappyCharge(); flappyAniManager.spawnCharge();; gameFrame.setEnterTyped(false); }  if (gameOver) { timer.stop(); Sound.playClip(""Resources/gameOverSound.wav""); timer2.start(); }   } "	1	1	1	0	0	0
"@Override @SuppressWarnings({ ""unchecked"", ""rawtypes"" }) public Collection<I18nAlias> getI18nAliases() { return (Collection) Collections.unmodifiableCollection(aliases.values()); } "	0	0	0	0	0	1
public static double calcDistance() throws Exception{ fovPixel = getTotalWidth(); targetPixel = getWidth(); double distance = TARGET_FEET*fovPixel/(2*targetPixel*Math.tan((FOV_ANGLE/2.0)*Math.PI/180)); return distance; } 	0	0	1	1	0	0
public static double getArea() { try { return area[0]; } catch (IndexOutOfBoundsException e) { return 0.0; } } 	0	0	1	0	0	0
public static double getTotalWidth() { try { return totalWidth; } catch (IndexOutOfBoundsException e) { return 0.0; }  } 	0	0	1	1	0	0
public static double getShooterPower() { return 1; // Temporary } 	0	0	0	1	0	0
protected void updateMovement() { // Nothing } 	0	0	0	0	0	1
@SubscribeEvent(priority= EventPriority.LOWEST) static void renderLast(RenderWorldLastEvent event){ while(!renderingQueue.isEmpty()){ renderNow(renderingQueue.peek().getLeft(), renderingQueue.poll().getRight()); } } 	0	0	0	1	0	0
private boolean isProperClientName(String name) { return name.matches(NAME_PATTERN); } 	0	0	0	1	0	0
protected void fireAssignmentsChanged() { if (areEventsEnabled) { myManager.fireAssignmentsChanged(this); } } 	0	0	0	0	0	1
@Override public void delete() { HumanResource.this.myAssignments.remove(this); HumanResource.this.fireAssignmentChanged(this); } 	1	1	1	0	0	0
"private void printDatabaseInformation() { System.out.println(""Doorman started on port "" + ServerSettings.genomizerPort); System.out.println(""Database:""); System.out.println(""  username "" + ServerSettings.databaseUsername); System.out.println(""  password "" + ServerSettings.databasePassword); System.out.println(""  name     "" + ServerSettings.databaseName); System.out.println(""  host     "" + ServerSettings.databaseHost); } "	0	0	0	0	0	1
private ItemStack checkAfford(int slotId, int amnt, EntityPlayer player) { IItemHandler itemHandler = this.tile.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, null); ItemStack playStack = player.inventory.getItemStack(); ItemStack slotStack = itemHandler.getStackInSlot(slotId - PLAYER_TOTAL_COUNT); ItemStack playBuyStack;  boolean wallet = false; int bank = 0;  if (itemHandler.getStackInSlot(0) != null) { if (itemHandler.getStackInSlot(0).getItem() == ModItems.itemWallet) { wallet = true; bank = tile.getField(10); } } else bank = tile.getField(0); int cost = tile.getItemCost(slotId - PLAYER_TOTAL_COUNT - 1);  if (slotStack != null) { if (playStack.getItem() != Item.getItemFromBlock(Blocks.AIR)) { if (!(playStack.getItem().equals(slotStack.getItem()) && (playStack.getItemDamage() == slotStack.getItemDamage()))) { return null; //Checks if player is holding stack, if its different then one being clicked do nothing } } if (tile.getField(6) == 0) if (slotStack.stackSize < amnt && slotStack.stackSize != 0) amnt = slotStack.stackSize;  if ((bank >= (cost * amnt))) {   //If has enough money, buy it if (slotStack.stackSize >= amnt || tile.getField(6) == 1) { playBuyStack = slotStack.copy(); playBuyStack.stackSize=(amnt);  if (player.inventory.getItemStack() != null) {       //Holding Item playBuyStack.stackSize=(amnt + playStack.stackSize); } player.inventory.setItemStack(playBuyStack);  if (tile.getField(6) == 0) { if (slotStack.stackSize - amnt == 0) { tile.setGhostSlot(slotId - PLAYER_TOTAL_COUNT - 1, true); slotStack.stackSize=(1); } else slotStack.splitStack(amnt); }  if (wallet) { sellToWallet(itemHandler.getStackInSlot(0), cost * amnt); } else { tile.setField(0, bank - (cost * amnt)); } tile.setField(4, tile.getField(4) + cost * amnt); } } else { tile.unsucessfulNoise(); } return slotStack; } return null; } 	0	0	1	0	0	0
@Override public String toString() { StringBuilder output = new StringBuilder('(' + op); for (S_Expression subexpression : subexpressions) { output.append(' ').append(subexpression.toString()); } output.append(')'); return output.toString(); } 	0	0	1	0	1	0
"public static SixModelObject toNQPType(ThreadContext tc, ArgType target, SixModelObject type, Object o) { SixModelObject nqpobj = null; if (target != ArgType.VOID) nqpobj = type.st.REPR.allocate(tc, type.st);  switch (target) { case VOID: return type; case CHAR: { byte val = ((Byte) o).byteValue(); nqpobj.set_int(tc, val); break; } case SHORT: { short val = ((Short) o).shortValue(); nqpobj.set_int(tc, val); break; } case INT: { int val = ((Integer) o).intValue(); nqpobj.set_int(tc, val); break; } case LONG: { long val = ((Long) o).longValue(); nqpobj.set_int(tc, val); break; } case FLOAT: { float val = ((Float) o).floatValue(); nqpobj.set_num(tc, val); break; } case DOUBLE: { double val = ((Double) o).floatValue(); nqpobj.set_num(tc, val); break; } case ASCIISTR: case UTF8STR: case UTF16STR: /* TODO: Handle encodings. */ if (o != null) { nqpobj.set_str(tc, (String) o); } else { nqpobj = type; } break; case CPOINTER: { CPointerInstance cpointer = (CPointerInstance) nqpobj; cpointer.pointer = (Pointer) o; break; } case CARRAY: { CArrayInstance carray = (CArrayInstance) nqpobj; carray.storage = (Pointer) o; carray.managed = false; break; } case CSTRUCT: { CStructInstance cstruct = (CStructInstance) nqpobj; cstruct.storage = (Structure) o; break; } default: throw ExceptionHandling.dieInternal(tc, String.format(""Don't know how to convert %s arguments to NQP yet"", target)); }  return nqpobj; } "	0	0	0	0	0	1
public void removeChildrenFromJsonCache() { if ( !NodeUtil.doJsonCaching ) return; ArrayList< NodeRef > childs = getOwnedChildren( true ); for ( NodeRef ref : childs ) { Map< Long, JSONObject > oldEntries = NodeUtil.jsonCache.remove( ref.getId() ); List< JSONObject > removedJson = null; if ( NodeUtil.doJsonStringCaching ) { removedJson = getValues( oldEntries, JSONObject.class ); } if ( NodeUtil.doJsonDeepCaching ) { Map< Long, Map< Boolean, Map< Set< String >, JSONObject > > > oldEntriesDeep = NodeUtil.jsonDeepCache.remove( ref.getId() ); if ( NodeUtil.doJsonStringCaching ) { removedJson.addAll( getValues( oldEntriesDeep, JSONObject.class) ); } } if ( NodeUtil.doJsonStringCaching ) { Utils.removeAll( NodeUtil.jsonStringCache, removedJson ); } EmsScriptNode n = new EmsScriptNode( ref, getServices() ); n.removeChildrenFromJsonCache(); } } 	1	0	1	1	0	0
static File[] createTestFiles(String... files) { File[] result = new File[files.length]; int pos = 0; for (String file : files) { result[pos++] = createTestFile(file); } return result; } 	0	0	0	0	0	1
"@NonNull String getDebugContext() { return ""(@"" + loaderID + "", #"" + mRequeryInstanceCount + "", LastVisiblePosition="" + mLastVisiblePosition + //                    "",  Path='"" + mInitialFilePath + ""')""; } "	0	0	0	0	0	1
"@Override public boolean onOptionsItemSelected(MenuItem item) { // Handle action bar item clicks here. The action bar will // automatically handle clicks on the Home/Up button, so long // as you specify a parent activity in AndroidManifest.xml. int id = item.getItemId();  switch (item.getItemId()) { case R.id.cmd_about: AboutDialogPreference.createAboutDialog(this).show(); return true; case R.id.cmd_settings: SettingsActivity.show(this); return true;  case R.id.action_save_as: bookmarkController.onSaveAsQuestion("""", getAsQuery()); return true; case R.id.action_load_from: bookmarkController.onLoadFromQuestion(new BookmarkController.IQueryConsumer() { @Override public void setQuery(QueryParameter newQuery) { IGalleryFilter filter = FotoSql.getWhereFilter(newQuery, false); toGui(filter); } }, getAsQuery()); return true; default: return super.onOptionsItemSelected(item); } } "	0	0	1	0	0	0
void showLatLon(boolean noGeoInfo) { show(noGeoInfo, R.id.cmd_select_lat_lon, R.id.lbl_latitude, R.id.cmd_lat_from_history, R.id.edit_latitude_from, R.id.cmd_lat_to_history, R.id.edit_latitude_to, R.id.lbl_longitude, R.id.cmd_lon_from_history, R.id.edit_longitude_from,R.id.cmd_lon_to_history, R.id.edit_longitude_to); } 	0	0	0	0	0	1
"public static void setBlurredMapBackground(Address address, ImageView imageView) { try { String mapAddressQuery = """";  String streetAddress= address.getStreetAddress(); String city = address.getCity(); String state = address.getState();  if(streetAddress == null || streetAddress.isEmpty()) streetAddress = "" "";  if(city == null || city.isEmpty()) city = "" "";  if(state == null || state.isEmpty()) state = "" "";  Context context = imageView.getContext(); String baseUrl = context.getString(R.string.static_map_base_url); String scale = ""2""; String mapType = ""hybrid""; String zoom = ""10""; String size = ""400x640""; String apiKey = context.getString(R.string.static_map_api_key);   if(streetAddress.equals("" "") && city.equals("" "") && state.equals("" "")) { mapAddressQuery = ""usa""; zoom = ""4""; } else if (!streetAddress.isEmpty() && !city.isEmpty() && !state.isEmpty()) mapAddressQuery = String.format(""%s,%s,%s"", address.getStreetAddress(), address.getCity(), address.getState());   if (mapAddressQuery.isEmpty()) return; String url = String.format(""%s?maptype=%s&scale=%s&center=%s&zoom=%s&size=%s&key=%s"", baseUrl, mapType, scale, mapAddressQuery, zoom, size, apiKey );  Glide.with(context) .load(url) .centerCrop() .bitmapTransform(new BlurTransformation(context, 3, 1)) .into(imageView); } catch (Exception ex) { Timber.e(""Error setting map background""); } } "	0	0	0	0	0	1
"private void syncLogsToNewComingServer(long startIndex){ // only sync committed logs int gap = (int)(this.quickCommitIndex - startIndex); if(gap < this.context.getRaftParameters().getLogSyncStopGap()){  this.logger.info(""LogSync is done for server %d with log gap %d, now put the server into cluster"", this.serverToJoin.getId(), gap); ClusterConfiguration newConfig = new ClusterConfiguration(); newConfig.setLastLogIndex(this.config.getLogIndex()); newConfig.setLogIndex(this.logStore.getFirstAvailableIndex()); newConfig.getServers().addAll(this.config.getServers()); newConfig.getServers().add(this.serverToJoin.getClusterConfig()); LogEntry configEntry = new LogEntry(this.state.getTerm(), newConfig.toBytes(), LogValueType.Configuration); this.logStore.append(configEntry); this.config = newConfig; this.peers.put(this.serverToJoin.getId(), this.serverToJoin); this.enableHeartbeatForPeer(this.serverToJoin); this.serverToJoin = null; this.configChanging = false; this.requestAppendEntries(); return; }  RaftRequestMessage request = null; if(startIndex > 0 && startIndex < this.logStore.getStartIndex()){ request = this.createSyncSnapshotRequest(this.serverToJoin, startIndex, this.state.getTerm(), this.quickCommitIndex);  }else{ int sizeToSync = Math.min(gap, this.context.getRaftParameters().getLogSyncBatchSize()); byte[] logPack = this.logStore.packLog(startIndex, sizeToSync); request = new RaftRequestMessage(); request.setCommitIndex(this.quickCommitIndex); request.setDestination(this.serverToJoin.getId()); request.setSource(this.id); request.setTerm(this.state.getTerm()); request.setMessageType(RaftMessageType.SyncLogRequest); request.setLastLogIndex(startIndex - 1); request.setLogEntries(new LogEntry[] { new LogEntry(this.state.getTerm(), logPack, LogValueType.LogPack) }); }  this.serverToJoin.SendRequest(request).whenCompleteAsync((RaftResponseMessage response, Throwable error) -> { this.handleExtendedResponse(response, error); }, this.context.getScheduledExecutor()); } "	1	0	1	1	0	0
@PostConstruct public void sendEmail() throws UnsupportedEncodingException, InterruptedException, CannotSendEmailException { testService.scheduleSixMimeEmails();  close(); } 	0	0	0	0	0	1
"@Override public void run() { Document doc = null; if (this.webpage.getFailureCount() > 0) { // give this page a rest for a bit try { TimeUnit.SECONDS.sleep(this.webpage.getFailureCount()); } catch (InterruptedException e) { log.warn(e); } } try { doc = Jsoup.connect(this.webpage.getUrl().toString()) .userAgent(""Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1"") .referrer(""http://www.google.com"") .followRedirects(true) .ignoreContentType(true) .get(); URL actual_url = new URL(doc.location()); if (urlEquals(base, actual_url)){ this.webpage.setStatus(404); this.webpage.setFailReason(""Redirected to homepage unexpectedly""); } if (!this.shouldCrawlPage()) { this.webpage.setStatus(200); this.webpage.unlock(); return; } log.info(id + "": Crawling "" + this.name); Elements anchors = doc.select(""a""); ArrayList<URL> unseenLinks = filterUnseen(anchors); log.info(id + "": Found "" + unseenLinks.size() + "" new links on page""); for (URL u : unseenLinks) { if (u != null && !this.pages.containsKey(u)) { if (this.depth_limit > this.webpage.getDepth()) { WebPage w = new WebPage(this.webpage, u); w.setDepth(this.webpage.getDepth() + 1); this.pages.put(u, w); } } } this.webpage.setStatus(200); } catch (UnsupportedMimeTypeException e) { this.webpage.setStatus(200); } catch (HttpStatusException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(e.getStatusCode()); this.webpage.setFailReason(e.toString()); log.warn(e); } catch (SocketException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(-1); this.webpage.setFailReason(e.toString()); log.warn(e); } catch (IOException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(-1); this.webpage.setFailReason(e.toString()); log.warn(e); } log.info(webpage.toString()); this.webpage.unlock(); } "	0	0	1	0	0	0
public List<JSONObject> find(String collectionName, Bson query, Bson projection, Bson sort, int limit, int skip, String join) {  final List<JSONObject> list = new ArrayList<JSONObject>();  Block<Document> block = new Block<Document>() {  public void apply(Document document) { document = iding(document); document = jointing(document, join); list.add(toJSON(document)); } }; getCollection(collectionName).find(query).projection(projection).sort(sort).limit(limit).skip(skip).forEach(block);  return list;  } 	0	0	0	1	0	0
"private < DO, ST extends StateTransition<DO, ST, STT, S>, STT extends StateTransitionType<DO, ST, STT, S>, S extends State<S> > ST pendingTransitionIfPossible( final DO domainObject, final Class<ST> stateTransitionClass, final STT requestedTransitionTypeIfAny, final Person personToAssignNextToIfAny, final String nextTaskDescriptionIfAny) { // check the override, if any if(requestedTransitionTypeIfAny != null) { boolean canTransition = requestedTransitionTypeIfAny.canTransitionFromCurrentStateAndIsMatch(domainObject, serviceRegistry2 ); if(!canTransition) { // what's been requested is a no-go. return null; } }  // determine what previously was determined as the pending (if any) ST pendingTransitionIfAny = pendingTransitionOf(domainObject, stateTransitionClass);  // what we now think as the pending (if any) STT nextTransitionType = null;  // current state final ST mostRecentTransitionIfAny = mostRecentlyCompletedTransitionOf(domainObject, stateTransitionClass); final S currentStateIfAny = mostRecentTransitionIfAny != null ? mostRecentTransitionIfAny.getTransitionType().getToState() : null;  if (requestedTransitionTypeIfAny != null) { nextTransitionType = requestedTransitionTypeIfAny; } else { if (mostRecentTransitionIfAny != null) {  // use most recent transition to determine the next transition (since one hasn't been requested) final STT mostRecentTransitionType = mostRecentTransitionIfAny.getTransitionType();  final NextTransitionSearchStrategy<DO, ST, STT, S> transitionStrategy = mostRecentTransitionType.getNextTransitionSearchStrategy(); if(transitionStrategy != null) { nextTransitionType = transitionStrategy.nextTransitionType(domainObject, mostRecentTransitionType, serviceRegistry2 ); }  } else { // can't proceed because unable to determine current state, and no transition specified return null; } }  // if pending has changed, then reconcile STT pendingTransitionType = pendingTransitionIfAny != null ? pendingTransitionIfAny.getTransitionType() : null;  if(pendingTransitionType != nextTransitionType) { if(pendingTransitionType != null) {  if(nextTransitionType != null) {  final Task taskIfAny = pendingTransitionIfAny.getTask(); repositoryService.remove(pendingTransitionIfAny); if(taskIfAny != null) { repositoryService.removeAndFlush(taskIfAny); } pendingTransitionType = nextTransitionType; pendingTransitionIfAny  = createPendingTransition( domainObject, currentStateIfAny, nextTransitionType, personToAssignNextToIfAny, nextTaskDescriptionIfAny); } else {  // in this branch the transition strategy for the most recently completed transition // must have returned null for nextTransitionType, and yet a pending transition does exist // (pendingTransitionType is not null).  This can only have come about if that pending // transition was created directly (using createPendingTransition(...)).  // We don't want to discard this pending transition, so we use instead update nextTransitionType // to this existing pending value. nextTransitionType = pendingTransitionType; }  } else { // pendingTransitionType == null, so nextTransitionType != null because of outer if  pendingTransitionIfAny  = createPendingTransition( domainObject, currentStateIfAny, nextTransitionType, personToAssignNextToIfAny, nextTaskDescriptionIfAny); pendingTransitionType = nextTransitionType; } }  if(pendingTransitionType == null) { return null; }  if(domainObject instanceof Stateful) { final Stateful stateful = (Stateful) domainObject; final S currentStateAccordingToDomainObject = stateful.getStateOf(stateTransitionClass); if(currentStateAccordingToDomainObject == null && mostRecentTransitionIfAny != null) { // self-healing stateful.setStateOf(stateTransitionClass, mostRecentTransitionIfAny.getToState()); } }  final Task taskIfAny = pendingTransitionIfAny.getTask(); if(taskIfAny != null) { final PartyRoleType roleAssignedTo = taskIfAny.getAssignedTo(); final IPartyRoleType iRoleShouldBeAssignedTo = pendingTransitionType.getTaskAssignmentStrategy() .getAssignTo(domainObject, serviceRegistry2);  // always overwrite the role final PartyRoleType roleShouldBeAssignedTo = partyRoleTypeRepository.findOrCreate(roleAssignedTo); if(roleAssignedTo != roleShouldBeAssignedTo) { taskIfAny.setAssignedTo(roleShouldBeAssignedTo); }  // only overwrite the person if not actually assigned final Person personAssignedToIfAny = taskIfAny.getPersonAssignedTo(); if(personAssignedToIfAny == null) { if(iRoleShouldBeAssignedTo != null) { Person person = partyRoleTypeService.onlyMemberOfElseNone(iRoleShouldBeAssignedTo, domainObject); taskIfAny.setPersonAssignedTo(person); } } }  if(! pendingTransitionType.isGuardSatisfied(domainObject, serviceRegistry2) ) { // cannot apply this state, while there is an available ""road"" to traverse, it is blocked // (there must be a guard prohibiting it for this particular domain object) return null; }  // if requestedTransitionTypeIfAny != null, then this is an explicit action, so automatic doesn't apply... if (requestedTransitionTypeIfAny != null) { return pendingTransitionIfAny; }  final AdvancePolicy advancePolicy = nextTransitionType.advancePolicyFor(domainObject, serviceRegistry2); if (advancePolicy.isAutomatic() && pendingTransitionType.isAutoGuardSatisfied(domainObject, serviceRegistry2)) { return pendingTransitionIfAny; } return null; } "	1	0	0	0	0	0
public Option<Tuple2<Integer, GuideGroup>> getSelectedGroupOrParentGroup(final TargetEnvironment env) { final Option<Tuple2<Integer, GuideGroup>> groupOpt = getSelectedGroup(); if (groupOpt.isDefined()) return groupOpt;  final SPTarget target = getSelectedPos(); if (target == null) return ImOption.<Tuple2<Integer, GuideGroup>>empty();  return env.getGroups().zipWithIndex().find(gg -> gg._1().containsTarget(target)).map(Tuple2::swap); } 	0	0	1	0	1	0
public final int z() { return (int) position().getZ(); } 	0	0	0	0	0	1
"@Override public void onCharacteristicNotified(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) { final UUID uuid = characteristic.getUuid();  if (GM_CHARACTERISTIC.equals(uuid)) { if (mLogSession != null) Logger.a(mLogSession, GlucoseMeasurementParser.parse(characteristic));  int offset = 0; final int flags = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, offset); offset += 1;  final boolean timeOffsetPresent = (flags & 0x01) > 0; final boolean typeAndLocationPresent = (flags & 0x02) > 0; final int concentrationUnit = (flags & 0x04) > 0 ? GlucoseRecord.UNIT_molpl : GlucoseRecord.UNIT_kgpl; final boolean sensorStatusAnnunciationPresent = (flags & 0x08) > 0; final boolean contextInfoFollows = (flags & 0x10) > 0;  // create and fill the new record final GlucoseRecord record = new GlucoseRecord(); record.sequenceNumber = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT16, offset); offset += 2;  final int year = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT16, offset); final int month = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, offset + 2) + 1; // months are 1-based final int day = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, offset + 3); final int hours = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, offset + 4); final int minutes = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, offset + 5); final int seconds = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, offset + 6); offset += 7;  final Calendar calendar = Calendar.getInstance(); calendar.set(year, month, day, hours, minutes, seconds); record.time = calendar;  if (timeOffsetPresent) { // time offset is ignored in the current release record.timeOffset = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_SINT16, offset); offset += 2; }  if (typeAndLocationPresent) { record.glucoseConcentration = characteristic.getFloatValue(BluetoothGattCharacteristic.FORMAT_SFLOAT, offset); record.unit = concentrationUnit; final int typeAndLocation = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, offset + 2); record.type = (typeAndLocation & 0xF0) >> 4; // TODO this way or around? record.sampleLocation = (typeAndLocation & 0x0F); offset += 3; }  if (sensorStatusAnnunciationPresent) { record.status = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT16, offset); } // This allows you to check other values that are not provided by the Nordic Semiconductor's Glucose Service in SDK 4.4.2. //				record.status = 0x1A; //				record.context = new GlucoseRecord.MeasurementContext(); //				record.context.carbohydrateId = 1; //				record.context.carbohydrateUnits = 0.23f; //				record.context.meal = 2; //				record.context.tester = 2; //				record.context.health = 4; // the following values are not implemented yet (see ExpandableRecordAdapter#getChildrenCount() and #getChild(...) //				record.context.exerciseDuration = 3600; //				record.context.exerciseIntensity = 45; //				record.context.medicationId = 3; //				record.context.medicationQuantity = 0.03f; //				record.context.medicationUnit = GlucoseRecord.MeasurementContext.UNIT_kg; //				record.context.HbA1c = 213.3f;  // data set modifications must be done in UI thread mHandler.post(new Runnable() { @Override public void run() { // insert the new record to storage mRecords.put(record.sequenceNumber, record);  // if there is no context information following the measurement data, notify callback about the new record if (!contextInfoFollows) mCallbacks.onDatasetChanged(); } }); } else if (GM_CONTEXT_CHARACTERISTIC.equals(uuid)) { if (mLogSession != null) Logger.a(mLogSession, GlucoseMeasurementContextParser.parse(characteristic));  int offset = 0; final int flags = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, offset); offset += 1;  final boolean carbohydratePresent = (flags & 0x01) > 0; final boolean mealPresent = (flags & 0x02) > 0; final boolean testerHealthPresent = (flags & 0x04) > 0; final boolean exercisePresent = (flags & 0x08) > 0; final boolean medicationPresent = (flags & 0x10) > 0; final int medicationUnit = (flags & 0x20) > 0 ? GlucoseRecord.MeasurementContext.UNIT_l : GlucoseRecord.MeasurementContext.UNIT_kg; final boolean hbA1cPresent = (flags & 0x40) > 0; final boolean moreFlagsPresent = (flags & 0x80) > 0;  final int sequenceNumber = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT16, offset); offset += 2;  final GlucoseRecord record = mRecords.get(sequenceNumber); if (record == null) { DebugLogger.w(TAG, ""Context information with unknown sequence number: "" + sequenceNumber); return; }  final GlucoseRecord.MeasurementContext context = new GlucoseRecord.MeasurementContext(); record.context = context;  if (moreFlagsPresent) offset += 1;  if (carbohydratePresent) { context.carbohydrateId = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, offset); context.carbohydrateUnits = characteristic.getFloatValue(BluetoothGattCharacteristic.FORMAT_SFLOAT, offset + 1); offset += 3; }  if (mealPresent) { context.meal = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, offset); offset += 1; }  if (testerHealthPresent) { final int testerHealth = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, offset); context.tester = (testerHealth & 0xF0) >> 4; context.health = (testerHealth & 0x0F); offset += 1; }  if (exercisePresent) { context.exerciseDuration = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT16, offset); context.exerciseIntensity = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, offset + 2); offset += 3; }  if (medicationPresent) { context.medicationId = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, offset); context.medicationQuantity = characteristic.getFloatValue(BluetoothGattCharacteristic.FORMAT_SFLOAT, offset + 1); context.medicationUnit = medicationUnit; offset += 3; }  if (hbA1cPresent) { context.HbA1c = characteristic.getFloatValue(BluetoothGattCharacteristic.FORMAT_SFLOAT, offset); }  // notify callback about the new record mCallbacks.onDatasetChanged(); } } "	0	0	1	1	0	0
public Function<CallableProcedure.Context,?> supplierFor( Class<?> type ) { return suppliers.get( type ); } 	0	0	0	0	0	1
public int getMaxTotalConnections() { return maxTotalConnections; } 	0	0	0	0	0	1
"@Test public void testSimpleTextExtractor() throws Exception { String message = ""Hello, World! This is simple UTF-8 text content written"" + "" in English to test autodetection of the character"" + "" encoding of the input stream.""; ByteArrayOutputStream buffer = new ByteArrayOutputStream();  PrintStream out = System.out; System.setOut(new PrintStream(buffer, true, Charsets.UTF_8.name()));  File file = new File(""target"", ""test.txt""); FileUtils.writeStringToFile(file, message); SimpleTextExtractor.main(new String[] { file.getPath() }); file.delete();  System.setOut(out);  assertEquals(message, buffer.toString(Charsets.UTF_8.name()).trim()); } "	0	0	1	1	1	0
"public static String parseUsingComponents(String filename, TikaConfig tikaConfig, Metadata metadata) throws Exception { MimeTypes mimeRegistry = tikaConfig.getMimeRepository();  System.out.println(""Examining: ["" + filename + ""]"");  metadata.set(Metadata.RESOURCE_NAME_KEY, filename); System.out.println(""The MIME type (based on filename) is: ["" + mimeRegistry.detect(null, metadata) + ""]"");  InputStream stream = TikaInputStream.get(new File(filename)); System.out.println(""The MIME type (based on MAGIC) is: ["" + mimeRegistry.detect(stream, metadata) + ""]"");  stream = TikaInputStream.get(new File(filename)); Detector detector = tikaConfig.getDetector(); System.out.println(""The MIME type (based on the Detector interface) is: ["" + detector.detect(stream, metadata) + ""]"");  LanguageIdentifier lang = new LanguageIdentifier(new LanguageProfile( FileUtils.readFileToString(new File(filename))));  System.out.println(""The language of this content is: ["" + lang.getLanguage() + ""]"");  // Get a non-detecting parser that handles all the types it can Parser parser = tikaConfig.getParser(); // Tell it what we think the content is MediaType type = detector.detect(stream, metadata); metadata.set(Metadata.CONTENT_TYPE, type.toString()); // Have the file parsed to get the content and metadata ContentHandler handler = new BodyContentHandler(); parser.parse(stream, handler, metadata, new ParseContext());  return handler.toString(); } "	0	0	1	0	0	0
public boolean isUserDirectlyInRole(int userId, int userRoleId) throws AdminPersistenceException { int[] ids = new int[] { userId, userRoleId }; Integer result = getInteger(SELECT_COUNT_USERROLE_USER_REL, ids); return result != null && result >= 1; } 	0	0	0	0	0	1
public void setSpaceProfilesToComponent(ComponentInst component, SpaceInst space) throws AdminException { setSpaceProfilesToComponent(component, space, false); } 	0	0	1	0	0	0
public String[] getAllComponentIdsRecur(String sSpaceId) throws Exception { List<ComponentInstLight> components = TreeCache.getComponentsInSpaceAndSubspaces( getDriverSpaceId(sSpaceId));  List<String> componentIds = new ArrayList<String>(); for (ComponentInstLight component : components) { componentIds.add(component.getId()); } return componentIds.toArray(new String[componentIds.size()]); } 	0	0	1	0	0	0
"@Override public void run(final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException { monitor.setTaskName(""Load annotations, comments and glosses.""); relatingObjectsQueryIDMap.put(queryId, event.getRelatingObjects()); final List<BTSObject> list = filterAndCutRelatingObjects(event .getRelatingObjects(), monitor); sync.asyncExec(new Runnable() { public void run() { if (composite != null) { composite.dispose(); } composite = null; objectWidgetMap.clear();  try { part.setLabel(event.getObject().getName()); } catch (Exception e) { } composite = new Composite(scrollComposite, SWT.None); composite.setBackground(SWTResourceManager .getColor(SWT.COLOR_WHITE)); composite.setLayout(new GridLayout(1, false)); ((GridLayout) composite.getLayout()).marginHeight = 0; ((GridLayout) composite.getLayout()).marginWidth = 0; ((GridLayout) composite.getLayout()).verticalSpacing = 0; composite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1)); scrollComposite.setContent(composite); objectWidgetMap = new HashMap<BTSObject, RelatedObjectGroup>( list.size());   Collections.sort(list, new BTSObjectTempSortKeyComparator()); if (monitor != null) monitor.beginTask(""Load related objects list"", list.size()); for (Object o : list) { if (o instanceof BTSObject && isRelatedObjVisible((BTSObject)o)) { RelatedObjectGroup roGroup = makeRelatedObjectGroup( (BTSObject) o, composite);  objectWidgetMap.put((BTSObject) o, roGroup); } if (monitor != null) monitor.worked(1); } if (!allRelatedObjectsShowed) { try { part.setLabel(part.getLabel() + ""("" + event.getRelatingObjects().size() + "")? ""); part.setTooltip(""Not all related objects (annotations, comments etc) were loaded\n"" + "" because there are ""+  event.getRelatingObjects().size() + "" which is to many for this view.""); } catch (Exception e) { } } Rectangle r = scrollComposite.getClientArea(); composite.layout(); scrollComposite.setMinSize(composite.computeSize( r.width, SWT.DEFAULT)); } }); } "	1	0	1	1	0	0
"static void mkdir(String path, Callback callback) { File dest = new File(path); if(dest.exists()) { callback.invoke(""mkdir error: failed to create folder at `"" + path + ""` folder already exists""); return; } dest.mkdirs(); callback.invoke(); } "	0	0	1	0	1	0
"static void ls(String path, Callback callback) { path = normalizePath(path); File src = new File(path); if (!src.exists() || !src.isDirectory()) { callback.invoke(""ls error: failed to list path `"" + path + ""` for it is not exist or it is not a folder""); return; } String[] files = new File(path).list(); WritableArray arg = Arguments.createArray(); for (String i : files) { arg.pushString(i); } callback.invoke(null, arg); } "	0	0	1	1	1	0
void showGameError() { BaseGameUtils.makeSimpleDialog(this, getString(R.string.game_problem)); } 	0	0	0	0	0	1
"private void sendNotification(VsRequestDto request, VsRequestDto previous) { Assert.notNull(request, ""VS request cannot be null for send notification!"");  List<IdmIdentityDto> implementers = this.requestImplementerService.findRequestImplementers(request.getSystem()); if (implementers.isEmpty()) { // We do not have any implementers ... we don`t have anyone to send // notification LOG.warn(MessageFormat.format( ""Notification cannot be send! We do not have any implementers in request [{0}]."", request.getId())); return; }  // We assume the request.UID is equals Identity user name!; IdmIdentityDto identity = this.getIdentity(request); SysSystemDto system = systemService.get(request.getSystem()); VsConnectorObjectDto wish = this.getWishConnectorObject(request);  // send create notification notificationManager.send(VirtualSystemModuleDescriptor.TOPIC_VS_REQUEST_CREATED, new IdmMessageDto.Builder() .setLevel(NotificationLevel.INFO) .addParameter(""requestAttributes"", request.getConnectorObject() != null ? request.getConnectorObject().getAttributes() : null) .addParameter(""wishAttributes"", wish != null ? wish.getAttributes() : null)// .addParameter(""fullName"", identityService.getNiceLabel(identity))// .addParameter(""identity"", identity)// .addParameter(""url"", getUrl(request))// .addParameter(""previousUrl"", getUrl(previous))// .addParameter(""request"", request)// .addParameter(""systemName"", system.getName()).build(), implementers);  } "	0	0	0	0	0	1
"@Override public String execute() {  long responseTimestamp = getTime(); _monitoringActionSupport.setupGoogleAnalytics(_request, _configurationService);  _realtimeService.setTime(responseTimestamp); String detailLevelParam = _request.getParameter(STOP_MONITORING_DETAIL_LEVEL);  //get the detail level parameter or set it to default if not specified DetailLevel detailLevel;  if(DetailLevel.contains(detailLevelParam)){ detailLevel = DetailLevel.valueOf(detailLevelParam.toUpperCase()); } else{ detailLevel = DetailLevel.NORMAL; }  // User Parameters String lineRef = _request.getParameter(LINE_REF); String monitoringRef = _request.getParameter(MONITORING_REF); String directionId = _request.getParameter(DIRECTION_REF); String agencyId = _request.getParameter(OPERATOR_REF); String maxOnwardCallsParam = _request.getParameter(MAX_ONWARD_CALLS); String maxStopVisitsParam = _request.getParameter(MAX_STOP_VISITS); String minStopVisitsParam = _request.getParameter(MIN_STOP_VISITS);  // Error Strings String routeIdsErrorString = """"; String stopIdsErrorString = """";  List<AgencyAndId> routeIds = new ArrayList<AgencyAndId>(); List<AgencyAndId> stopIds = new ArrayList<AgencyAndId>();   List<String> agencyIds = processAgencyIds(agencyId);  stopIdsErrorString = processStopIds(monitoringRef, stopIds, agencyIds); routeIdsErrorString =  processRouteIds(lineRef, routeIds, agencyIds);  int maximumOnwardCalls = 0;  if (detailLevel.equals(DetailLevel.CALLS)) { maximumOnwardCalls = SiriSupportV2.convertToNumeric(maxOnwardCallsParam, Integer.MAX_VALUE); }   if (_monitoringActionSupport .canReportToGoogleAnalytics(_configurationService)) { _monitoringActionSupport.reportToGoogleAnalytics(_request, ""Stop Monitoring"", StringUtils.join(stopIds, "",""), _configurationService); }   // Setup Filters Map<Filters, String> filters = new HashMap<Filters, String>(); filters.put(Filters.DIRECTION_REF, directionId); filters.put(Filters.MAX_STOP_VISITS, maxStopVisitsParam); filters.put(Filters.MIN_STOP_VISITS, minStopVisitsParam);   // Monitored Stop Visits List<MonitoredStopVisitStructure> visits = new ArrayList<MonitoredStopVisitStructure>();  for (AgencyAndId stopId : stopIds) {  if (!stopId.hasValues()) continue;  // Stop ids can only be valid here because we only added valid ones // to stopIds. List<MonitoredStopVisitStructure> visitsForStop = _realtimeService .getMonitoredStopVisitsForStop(stopId.toString(), maximumOnwardCalls, detailLevel, responseTimestamp, routeIds, filters); if (visitsForStop != null) visits.addAll(visitsForStop); }  Exception error = null; if (stopIds.size() == 0 || (_request.getParameter(LINE_REF) != null && routeIds.size() == 0)) { String errorString = (stopIdsErrorString + "" "" + routeIdsErrorString) .trim(); error = new Exception(errorString); }  _response = generateSiriResponse(visits, stopIds, error, responseTimestamp);  try { this._servletResponse.getWriter().write(getStopMonitoring()); } catch (IOException e) { e.printStackTrace(); }  return null; } "	0	0	0	0	0	1
@POST @Consumes({MediaType.APPLICATION_JSON}) public Response authenticate(final DefaultLoginCredentials credential) { final Optional<String> token = authenticationService.validateChallenge(identity, credential);  return token.isPresent() ? Response.ok(Entity.text(token)).build() : Response.status(Status.FORBIDDEN).build(); } 	0	0	0	0	0	1
private Rectangle getGridBounds() { Rectangle res = new Rectangle(); for (LayoutNode gl : this) { Rectangle r = map.get(gl); res = res.union(r); } return res; } 	0	0	1	1	0	0
"@Override public void processElement( DoFn<StreamVariantsRequest, KV<String, VariantAnnotation>>.ProcessContext c) throws Exception { Genomics genomics = GenomicsFactory.builder().build().fromOfflineAuth(auth);  StreamVariantsRequest request = StreamVariantsRequest.newBuilder(c.element()) .addAllCallSetIds(callSetIds) .build(); LOG.info(""processing contig "" + request);  Iterator<StreamVariantsResponse> iter = VariantStreamIterator.enforceShardBoundary(auth, request, ShardBoundary.Requirement.STRICT, VARIANT_FIELDS); if (!iter.hasNext()) { LOG.info(""region has no variants, skipping""); return; }  IntervalTree<Annotation> transcripts = retrieveTranscripts(genomics, request); ListMultimap<Range<Long>, Annotation> variantAnnotations = retrieveVariantAnnotations(genomics, request);  Stopwatch stopwatch = Stopwatch.createStarted(); int varCount = 0; while (iter.hasNext()) { Iterable<Variant> varIter = FluentIterable .from(iter.next().getVariantsList()) .filter(VariantUtils.IS_SNP); for (Variant variant : varIter) { List<String> alleles = ImmutableList.<String>builder() .addAll(variant.getAlternateBasesList()) .add(variant.getReferenceBases()) .build(); Range<Long> pos = Range.openClosed(variant.getStart(), variant.getEnd()); for (String allele : alleles) { String outKey = Joiner.on("":"").join( variant.getReferenceName(), variant.getStart(), allele, variant.getId()); for (Annotation match : variantAnnotations.get(pos)) { if (allele.equals(match.getVariant().getAlternateBases())) { // Exact match to a known variant annotation; straightforward join. c.output(KV.of(outKey, match.getVariant())); } }  Iterator<Node<Annotation>> transcriptIter = transcripts.overlappers( pos.lowerEndpoint().intValue(), pos.upperEndpoint().intValue() - 1); // Inclusive. while (transcriptIter.hasNext()) { // Calculate an effect of this allele on the coding region of the given transcript. Annotation transcript = transcriptIter.next().getValue(); VariantEffect effect = AnnotationUtils.determineVariantTranscriptEffect( variant.getStart(), allele, transcript, getCachedTranscriptBases(genomics, transcript)); if (effect != null && !VariantEffect.SYNONYMOUS_SNP.equals(effect)) { c.output(KV.of(outKey, new VariantAnnotation() .setAlternateBases(allele) .setType(""SNP"") .setEffect(effect.toString()) .setGeneId(transcript.getTranscript().getGeneId()) .setTranscriptIds(ImmutableList.of(transcript.getId())))); } } } varCount++; if (varCount%1e3 == 0) { LOG.info(String.format(""read %d variants (%.2f / s)"", varCount, (double)varCount / stopwatch.elapsed(TimeUnit.SECONDS))); } } } LOG.info(""finished reading "" + varCount + "" variants in "" + stopwatch); } "	0	0	0	0	0	1
"public void onLoad() {  setAutoHideEnabled(true); setGlassEnabled(true); setText(""Neue Notiz erstellen"");  /** * Create the Panel, Label and TextBox */  hpTitel.add(lblNoteTitel); tbNoteTitel.setText(currentNote.getTitle()); hpTitel.add(tbNoteTitel);  /** * Create the Panel, Label and TextBox */  hpNoteSubTitel.add(lblNoteSubTitel); tbNoteSubTitel.setText(currentNote.getSubTitle()); hpNoteSubTitel.add(tbNoteSubTitel);  /** * Create note text field */ taUpdateNoteText.setText(currentNote.getText()); // hpNoteText.add(lblNoteText); hpNoteText.add(taUpdateNoteText);  /** * Create the Panel, Label and TextBox */  hpNoteShare.add(lblNoteShare); hpNoteShare.add(tbNoteShare); hpNoteShare.add(btnNoteShareAdd);  /** * Create the Panel and Label */ HorizontalPanel berechtigungsPanel = new HorizontalPanel(); Label darf = new Label(""Darf:"");  /** * Create the RadioButton */ RadioButton rbBerechtigungen1 = new RadioButton(""myRadioGroup"", ""anzeigen + bearbeiten""); RadioButton rbBerechtigungen2 = new RadioButton(""myRadioGroup"", ""anzeigen""); // RadioButton berechtigungen1 = new RadioButton(""myRadioGroup"", ""foo""); berechtigungsPanel.add(darf); berechtigungsPanel.add(rbBerechtigungen1); berechtigungsPanel.add(rbBerechtigungen2);  /** * Create the Panel, Label and TextBox */ HorizontalPanel hinzufuegenPanel = new HorizontalPanel(); Label hinzufuegen = new Label(""Hinzufügen zu""); TextBox hinzufuegenTextBox = new TextBox(); hinzufuegenPanel.add(hinzufuegen); hinzufuegenPanel.add(hinzufuegenTextBox);  /** * Create the Panel, Label and DatePicker */ Date date = new Date(currentNote.getMaturityDate().getTime()); datePicker.setValue(date); datePicker.addValueChangeHandler(new ValueChangeHandler<Date>() {  @Override public void onValueChange(ValueChangeEvent<Date> event) { Date date = event.getValue(); long time = date.getTime(); timestampe = new Timestamp(time); // String dateString = // DateTimeFormat.getMediumDateFormat().format(date); // text.setText(dateString);  } });  /** * Create the Panel, Label and TextArea */ HorizontalPanel textPanel = new HorizontalPanel(); Label text = new Label(""Text""); final TextArea textArea = new TextArea(); textPanel.add(text); textPanel.add(textArea);  /** * Create the Panel and the Buttons */ HorizontalPanel buttonPanel = new HorizontalPanel(); Button abbrechen = new Button(""Abbrechen""); Button sichern = new Button(""Sichern""); buttonPanel.add(abbrechen); buttonPanel.add(sichern);  // ClickHandler für Abbrechen Button btnNoteClose.addClickHandler(new ClickHandler() { public void onClick(ClickEvent event) { EditNotes.this.hide(); } });  // ClickHandler Add Button btnUpdateNote.addClickHandler(new ClickHandler() { public void onClick(ClickEvent event) {  notesAdmin.updateNote(tbNoteTitel.getText(), tbNoteSubTitel.getText(), taUpdateNoteText.getText(), timestampe, currentUser.getId(), ""keine quelle"", currentNotebook.getId(), currentNote.getId(), new AsyncCallback<Void>() {  @Override public void onSuccess(Void result) { EditNotes.this.hide(); Homepage.updateNotesCellList(currentNotebook.getId());  }  @Override public void onFailure(Throwable caught) { // TODO Auto-generated method stub  } });   } });  btnDeleteNote.addClickHandler(new ClickHandler() { public void onClick(ClickEvent event) { notesAdmin.deleteNote(currentNote.getId(), currentNote.getUserId(), new AsyncCallback<Void>() {  @Override public void onSuccess(Void result) { Homepage.updateNotesCellList(currentNote.getNotebookId()); EditNotes.this.hide();  }  @Override public void onFailure(Throwable caught) { // TODO Auto-generated method stub  } }); } });    vpEditNote.add(hpTitel); vpEditNote.add(hpNoteSubTitel); vpEditNote.add(hpNoteText); vpEditNote.add(hpNoteMaturity); hpNoteMaturity.add(lblNoteMaturity); hpNoteMaturity.add(datePicker); vpEditNote.add(hpNoteShare); vpEditNote.add(hpUpdateDeleteCloseButtons); hpUpdateDeleteCloseButtons.add(btnNoteClose); hpUpdateDeleteCloseButtons.add(btnUpdateNote);  vpEditNote.setSpacing(40); setWidget(vpEditNote); } "	0	0	1	0	0	0
List<Metadata> getMetadata() { return metadata; } 	0	0	0	0	0	1
"private void handleCommand(NukeCommand command) { log.trace(""handleCommand("" + command + "")""); switch( command.getState() ) { case EXECUTE: { if( getIdentity() != command.getComponent() ) { log.debug(""NukeCommand "" + command.getState() + "" not for us, expected "" + getIdentity() + "" but was "" + command.getComponent() +  "".""); } else { if( Shared.Commands.Execute.STOP_EXECUTION.equals(command.getCommand()) ) { log.info(""Received command to stop all executions.""); setProceduresStopping(distributeExecuteUpdateCommands(CommandState.STOP)); if( 0 < getProceduresStopping() ) { log.info(""Issued stop command to "" + getProceduresStopping() + "" procedures, waiting for done.""); setStopCommand(command); } else { log.info(""All procedures stopped, updating command.""); command.setState(CommandState.DONE); updateEntry(getStopCommand()); } } else if ( Shared.Commands.Execute.TERMINATE_EXECUTION.equals(command.getCommand()) ) { log.info(""Received command to terminate all executions.""); setProceduresTerminating(distributeExecuteUpdateCommands(CommandState.TERMINATE)); log.info(""Issued terminate command to "" + getProceduresTerminating() + "" procedures, we hade "" + getProceduresStopping() + "" that failed stopping, waiting for done.""); setTerminateCommand(command); if( null != getStopCommand() ) { log.info(""Received terminate command before stopped, aborting stop command.""); setProceduresStopping(0); getStopCommand().setState(CommandState.ABORTED); updateEntry(getStopCommand()); } } else { log.info(""Received common command: "" + command + "".""); if( command.isRepeated() ) { registerProcedure(new RepeatedExecuteTaskProcedure(command)); } else { registerProcedure(new ExecuteTaskProcedure(command)); } } } break; } case QUERY: { if( getIdentity() != command.getComponent() ) { log.debug(""NukeCommand "" + command.getState() + "" not for us, expected "" + getIdentity() + "" but was "" + command.getComponent() +  "".""); } else { registerProcedure(new QueryTaskProcedure(command)); } break; } case ABORTED: case DONE: case UNDEFINED: case WORKING: { log.error(""Unhandled data: "" + command.getState() + "", from NukeCommand: "" + command + "".""); break; } default: { throw new RuntimeException(""Unimplemented state "" + command.getState() + "" from class NukeCommand in class NukeTasks.""); } } } "	1	0	1	1	0	0
"protected void processOpenID(HttpServletRequest request, HttpServletResponse response, String provider, String returnURL, boolean isRegister) { HttpSession session = request.getSession(); String state = generateState(); session.setAttribute(SA_REGISTRATION, isRegister); session.setAttribute(SA_OPENID_PROVIDER, provider); session.setAttribute(SA_STATE, state);  if (returnURL == null || returnURL.isEmpty()) { returnURL = ""/ui/admin""; } if (Oauth2Util.istUseHttps()) { returnURL = returnURL.replaceFirst(""^/"", """"); returnURL = uriInfo.getBaseUri().toString() + returnURL; log.info(String.format(""OAuth returnURL is %s"", returnURL)); String secureReturnURL = returnURL.replace(""http://"", ""https://""); session.setAttribute(SA_RETURN_URL, secureReturnURL); } else { session.setAttribute(SA_RETURN_URL, returnURL); }  if (provider == null || provider.isEmpty()) { provider = DEFAULT_PROVIDER; } log.info(""Authentication request for "" + provider + (isRegister ? "" (registration)"" : """"));   String responseURL = uriInfo.getBaseUri().toString() + ""system/security/responseoa""; if (Oauth2Util.istUseHttps()) { responseURL = responseURL.replace(""http://"", ""https://""); }  log.info(String.format(""response URL for auth request: %s"", responseURL)); session.setAttribute(SA_RESPONSE_URL, responseURL);   try { // obtain a AuthRequest message to be sent to the OpenID provider OAuthClientRequest oauthRequest = OAuthClientRequest .authorizationLocation(discovery.getAuthzEndpoint()) .setClientId(Oauth2Util.getClientId()) .setRedirectURI(responseURL) .setResponseType(ResponseType.CODE.toString()) .setScope(GOOGLE_SCOPE) .setState(state) .buildQueryMessage();  // For version2 endpoints can do a form-redirect but this is easier, // Relies on payload being less ~ 2k, currently ~ 800 bytes response.sendRedirect(oauthRequest.getLocationUri()); } catch (Exception e) { throw new WebApiException(Status.BAD_REQUEST, ""Login/registration action failed: "" + e); } } "	0	0	0	0	0	1
"@Test public void prototypePropertyOverridesDoNotRegisterAsOverridden() { util.compile(path(""/src/foo.js""), ""/** @constructor */"", ""var A = function() {};"", ""/**"", "" * Original comment."", "" * @type {number}"", "" */"", ""A.prototype.a = 123;"", """", ""/** @constructor @extends {A} */"", ""var B = function() {};"", ""goog.inherits(B, A);"", """", ""/**"", "" * Custom comment."", "" * @override"", "" */"", ""B.prototype.a = 456;"");  NominalType typeB = typeRegistry.getNominalType(""B""); TypeInspector.Report reportB = typeInspector.inspectMembers(typeB); assertThat(reportB.getFunctions()).isEmpty(); assertThat(reportB.getProperties()).containsExactly( Property.newBuilder() .setBase(BaseProperty.newBuilder() .setName(""a"") .setSource(sourceFile(""source/foo.js.src.html"", 7)) .setDescription(Comment.newBuilder() .addToken(htmlToken(""<p>Original comment.</p>\n""))) .setTags(Tags.newBuilder() .setIsConst(false) .setIsDeprecated(false)) .setVisibility(Visibility.PUBLIC) .setDefinedBy(Comment.newBuilder() .addToken(linkToken(""A"", ""class_A.html#a"")))) .setType(Comment.newBuilder() .addToken(numberToken())) .build()); } "	0	0	1	1	0	0
"@Test public void testGetLink_contextHash_contextIsNamespace() { util.compile( fileSystem.getPath(""/src/foo/bar.js""), ""goog.provide('foo');"", ""foo.bar = function() {};"");  NominalType context = typeRegistry.getNominalType(""foo""); assertNotNull(context); linker.pushContext(context);  checkLink(""foo.bar"", ""namespace_foo.html#bar"", linker.getLink(""#bar"")); } "	0	0	1	1	1	0
public Config build(OS os, Arch arch, TargetType targetType) { return build(os, arch, targetType, true); } 	0	0	0	0	0	1
"@Test public void capacity_whenDefault() throws ExecutionException, InterruptedException {  String schedulerName = ""foobar"";  HazelcastInstance[] instances = createClusterWithCount(1, null); IScheduledExecutorService service = instances[0].getScheduledExecutorService(schedulerName); String keyOwner = ""hitSamePartitionToCheckCapacity"";  for (int i = 0; i < 100; i++) { service.scheduleOnKeyOwner(new PlainCallableTask(), keyOwner, 0, TimeUnit.SECONDS); }  try { service.scheduleOnKeyOwner(new PlainCallableTask(), keyOwner, 0, TimeUnit.SECONDS); fail(""Should have been rejected.""); } catch (RejectedExecutionException ex) { assertTrue(""Got wrong RejectedExecutionException"", ex.getMessage().equals(""Maximum capacity of tasks reached."")); } } "	0	0	0	0	0	1
"@Test public void capacity_whenPositiveLimit() throws ExecutionException, InterruptedException {  String schedulerName = ""foobar"";  ScheduledExecutorConfig sec = new ScheduledExecutorConfig() .setName(schedulerName) .setDurability(1) .setPoolSize(1) .setCapacity(10);  Config config = new Config().addScheduledExecutorConfig(sec);  HazelcastInstance[] instances = createClusterWithCount(1, config); IScheduledExecutorService service = instances[0].getScheduledExecutorService(schedulerName); String keyOwner = ""hitSamePartitionToCheckCapacity"";  for (int i = 0; i < 10; i++) { service.scheduleOnKeyOwner(new PlainCallableTask(), keyOwner, 0, TimeUnit.SECONDS); }  try { service.scheduleOnKeyOwner(new PlainCallableTask(), keyOwner, 0, TimeUnit.SECONDS); fail(""Should have been rejected.""); } catch (RejectedExecutionException ex) { assertTrue(""Got wrong RejectedExecutionException"", ex.getMessage().equals(""Maximum capacity of tasks reached."")); } } "	0	0	0	0	0	1
public ComplexClassMetadata generateMetadata() {  List<MemberMetadata> memberMetadataList = new ArrayList<MemberMetadata>(); Iterator<Element> itr = getElements(); while (itr.hasNext()) { Element e = itr.next(); // TODO Get rid of the second javaType, it will always be boolean memberMetadataList.add(MemberMetadata.newInstance(elementDoc(e), javaType(e), fieldName(e), typeInfo(e), initArray(e), getMethod(e), javaType(e), booleanGetMethod(e), setMethod(e), writeMethod(e), loadType(e), loadMethod(e), isComplexType(e), javaTypeInterface(e), isArray(e))); }  return new ComplexClassMetadata(packageName, className, baseClass(), xsiType(), superWrite(), superLoad(), superToString(), memberMetadataList, mapper.generateInterfaces(), packageName, complexType.getBase() == null ? null : localJavaType(complexType.getBase(), 1, false)); } 	0	0	0	0	0	1
"private void createAncientBacterialPipeline() { PrerequisitesChecker prq = new PrerequisitesChecker(communicator); ModulePool preprocesspool = new ModulePool(); ModulePool ancientbacterialpool = new ModulePool(); ModulePool gatkpool = new ModulePool();  preprocesspool.addModule(new CreateResultsDirectories(communicator)); if (communicator.isReferenceselected()) { preprocesspool.addModule(new ReferenceRenamer(communicator)); }  if (communicator.isRun_fastqc()) { preprocesspool.addModule(new FastQC(communicator)); } if (communicator.isRun_clipandmerge()) { if(communicator.getMerge_type().equals(""PAIRED"")){ if (!communicator.isMerge_only_clipping()) { preprocesspool.addModule(new ClipAndMerge(communicator)); } else { preprocesspool.addModule(new ClipAndMerge(communicator, ClipAndMerge.ADAPTER_CLIPPING_ONLY)); } } else { preprocesspool.addModule(new ClipAndMerge(communicator, ClipAndMerge.SINGLE_ENDED_ONLY)); } } if (communicator.isRun_qualityfilter()) { preprocesspool.addModule(new QualityTrimmer(communicator)); preprocesspool.addModule(new FastQC(communicator, FastQC.AFTERMERGING)); }  if (communicator.isRun_mapping() && communicator.getMapper_to_use().equals(""CircularMapper"")) { ancientbacterialpool.addPredecessor(preprocesspool); if (prq.checkForIndices(""whole"")) { ancientbacterialpool.addModule(new BWAIndex(communicator)); } addCircularMapping(ancientbacterialpool); }  if (communicator.isRun_mapping() && communicator.getMapper_to_use().equals(""BWA"")) { ancientbacterialpool.addPredecessor(preprocesspool); if (prq.checkForIndices(""whole"")) { ancientbacterialpool.addModule(new BWAIndex(communicator)); } addBWAMapping(ancientbacterialpool); }  if (communicator.isRun_mapping() && communicator.getMapper_to_use().equals(""Stampy"")) { ancientbacterialpool.addPredecessor(preprocesspool); if (prq.checkForIndices(""Stampy"")) { ancientbacterialpool.addModule(new StampyIndex(communicator)); ancientbacterialpool.addModule(new StampyHash(communicator)); } addStampyMapping(ancientbacterialpool); }  if (communicator.isRun_mapping() && communicator.getMapper_to_use().equals(""BT2"")) { ancientbacterialpool.addPredecessor(preprocesspool); if (prq.checkForIndices(""BT2"")) { ancientbacterialpool.addModule(new BT2Index(communicator)); } addBT2Mapping(ancientbacterialpool); }  if (communicator.isRun_mapping() && communicator.getMapper_to_use().equals(""BWAMem"")) { ancientbacterialpool.addPredecessor(preprocesspool); if (prq.checkForIndices(""whole"")) { ancientbacterialpool.addModule(new BWAIndex(communicator)); } addBWAMemMapping(ancientbacterialpool); }  if (communicator.isRun_complexityestimation()) { ancientbacterialpool.addModule(new PreseqCCurveCalculation(communicator)); ancientbacterialpool.addModule(new PreseqLCExtrapCalculation(communicator)); }  if (communicator.isRmdup_run() && !communicator.isMarkdup_run()) { ancientbacterialpool.addModule(new DeDup(communicator)); }  if (communicator.isMarkdup_run()) { ancientbacterialpool.addModule(new MarkDuplicates(communicator)); }  if(communicator.isRun_mapping() && (communicator.isMarkdup_run() || communicator.isRmdup_run())){ ancientbacterialpool.addModule(new SamtoolsIndex(communicator, SamtoolsIndex.DEDUP)); }  if(communicator.isSchmutzi_run()){ addContaminationEstimation(ancientbacterialpool); }    if (communicator.isRun_coveragecalc()) { ancientbacterialpool.addModule(new QualiMap(communicator)); }  if (communicator.isRun_mapdamage()) { ancientbacterialpool.addModule(new MapDamage(communicator)); //We dont run Mapdamage on CM results! }  if (communicator.isRun_gatksnpcalling() && !communicator.getGatk_caller().equals(""ANGSD"")) { gatkpool = createGATKSNPCallingPipeline(); gatkpool.setCurrentFilePath(ancientbacterialpool.getCurrentFilePath()); }  if(communicator.isRun_gatksnpcalling() && communicator.getGatk_caller().equals(""ANGSD"")){ gatkpool = createANGSDCallingPipeline(); gatkpool.setCurrentFilePath(ancientbacterialpool.getCurrentFilePath()); }  if (communicator.isRun_gatksnpfiltering()) { gatkpool.addModule(new GATKVariantFilter(communicator)); if (!communicator.isRun_vcf2draft()) { gatkpool.addModule(new BGZip(communicator)); gatkpool.addModule(new Tabix(communicator)); } }  if (communicator.isRun_vcf2draft()) { gatkpool.addModule(new VCF2Genome(communicator)); }  if (communicator.isRun_cleanup()) { gatkpool.addModule(new CleanUpRedundantData(communicator)); }  if (communicator.isRun_reportgenerator()) { gatkpool.addModule(new ReportGenerator(communicator)); }  pools.add(preprocesspool); ancientbacterialpool.addPredecessor(preprocesspool); pools.add(ancientbacterialpool); gatkpool.addPredecessor(ancientbacterialpool); pools.add(gatkpool);  } "	0	0	0	0	0	1
"@Override public Dataset listConnectionURIs(final URI needURI, boolean deep) throws NoSuchNeedException, NoSuchConnectionException { List<URI> uris = new ArrayList<URI>(needInformationService.listConnectionURIs(needURI)); NeedInformationService.PagedResource<Dataset, URI> containerPage = toContainerPage( this.connectionResourceURIPrefix+""/"", new SliceImpl<URI>(uris)); if (deep) { addDeepConnectionData(containerPage.getContent(), uris); } return containerPage.getContent(); } "	0	0	0	0	0	1
"public String getAddCommand() { StringBuilder sb = new StringBuilder(); sb.append(""add "" + this.getDesc().getValue() + "" ""); sb.append(""p/"" + this.getVenue().value + "" ""); sb.append(""e/"" + this.getTime().getValue() + "" ""); sb.append(""a/"" + this.getPriority().getValue() + "" ""); this.getTags().getInternalList().stream().forEach(s -> sb.append(""t/"" + s.tagName + "" "")); return sb.toString(); } "	0	0	1	0	1	0
"@Test public void testStartPaired () throws Exception { String analysesName = ""paired-sample-test""; Dataset dataset = new SimpleDatasetBuilder ().setParserFactories (asList (new SuperCsvParserFactory ())) .setValueStoreBuilder (new MapBackedValueStoreBuilder ()) .build (new MockTsvInput (""mock"", ""\tS1\tS2\tS3\tS4\tS5\tS6\tS7\tS8\tS9\tS10\nG1\t1.395864250608167323e+00\t3.916231968392996921e-01\t6.802546076106781303e-01\t2.842920356539057058e-01\t1.167978791803114591e+00\t5.575493844636111307e-01\t6.182690292679594579e-01\t1.064234628122129322e+00\t1.625811787848802759e+00\t9.864857446509973649e-01\nG2\t1.150244510668744669e+00\t1.388079975162571866e+00\t1.341088373821840873e+00\t3.084720816624257900e+00\t2.581845080221241595e+00\t2.367430922421942974e+00\t1.032362182840793619e+00\t3.117787544453723747e+00\t4.617892882371386065e-01\t1.602827033075911567e+00\nG3\t4.391889940305381268e-01\t1.382298236091139110e+00\t5.729514752270051803e-01\t9.725989889844147696e-01\t1.248284009105965708e+00\t8.926578096766990544e-01\t1.319754154382377642e+00\t1.540298352646559454e+00\t1.133127415001959681e+00\t1.676162412992144635e+00\nG4\t1.905561360016599703e+00\t9.356241886510197059e-02\t2.380285018347454984e-01\t3.847407463184190135e+00\t2.356291503584246882e+00\t2.794509930794697450e+00\t6.741638547114860991e-01\t1.724432926869718052e+00\t1.195998720063262244e+00\t1.745233671408940257e+00\nG5\t1.719337409578133302e+00\t3.494846145050719555e-01\t1.167667630790075517e+00\t4.782230260685107481e-01\t4.399142365221563322e-01\t6.800108190568048272e-01\t7.253248227503550360e-01\t7.806689816392595738e-01\t6.925188107811194316e-01\t3.442408758869031082e-02\nG6\t1.436621744373217435e+00\t9.752049715130082230e-01\t1.124556273672220330e+00\t7.312997978809270272e-01\t1.297314694459754891e+00\t2.485989754520180339e-01\t2.137179543584942110e+00\t4.094669660443884807e-01\t4.575113164318556636e-01\t8.482968148400671371e-01\nG7\t8.715438551197591810e-01\t6.180182417077844104e-01\t1.169918270963537843e+00\t2.862357749855996003e-01\t1.308055771196735995e+00\t3.779460416723794403e-01\t7.388802606792711503e-01\t9.796859959757528991e-01\t1.243557217256898939e+00\t8.095219518818874693e-02\nG8\t1.243952955865607057e+00\t1.440989147751386978e+00\t2.302367921964460218e-01\t6.786898563519169203e-01\t1.177747249932315610e+00\t2.131045195664008407e+00\t7.875240265935568029e-01\t7.395105287783704240e-01\t7.665894136772821721e-01\t1.303648953631650453e+00\nG9\t5.958003825885130889e-01\t1.709278882257981191e+00\t6.575371327833990920e-01\t3.329769660881695126e-01\t1.009206176972098135e+00\t2.588110927523207261e-01\t1.715273343737192757e+00\t7.197384843776438723e-01\t1.210154445852278160e+00\t5.181108688733959688e-01\nG10\t1.338637395387363371e+00\t8.298894986259539586e-01\t7.013115941652059426e-01\t8.935077793136788626e-01\t5.163333275847467041e-01\t1.610827343048899962e+00\t1.731075165538171534e+00\t2.237277410211655493e-01\t1.234319586039015482e+00\t2.412611683717998945e-01"")); Selection control = new SimpleSelection (""control"", new Properties (), asList (""S1"", ""S2"", ""S3"",""S7"", ""S9"")); Selection experiment = new SimpleSelection (""experiment"", new Properties (), asList (""S4"", ""S5"", ""S6"",""S8"", ""S10"")); dataset.dimension (COLUMN).selections ().put (control); dataset.dimension (COLUMN).selections ().put (experiment); workspace.put (dataset);  PairedSampleTTestDTO dto = new PairedSampleTTestDTO(analysesName, experiment.name (), control.name (), 0.05, false); String jsonDto = jsonObjectMapper.writeValueAsString (dto); log.debug (""jsonDto: "" + jsonDto);   @SuppressWarnings (""unused"") MvcResult result = mockMvc.perform ( MockMvcRequestBuilders.post (""/dataset/""+dataset.name ()+""/analyze/paired_ttest"") .param (""format"", ""json"") .contentType (MediaType.APPLICATION_JSON) .content (jsonDto) .session (mockHttpSession) .accept (MediaType.APPLICATION_JSON)) .andDo (MockMvcResultHandlers.print ()) .andExpect (MockMvcResultMatchers.status ().isOk ()) .andReturn ();  //The first put will generate an AnalysisStatus object with ""IN_PROGRESS"" status Analysis analysisStatus = dataset.analyses ().get (dto.name()); log.debug(""******* AnalysisStatus:\n""+ jsonObjectMapper.writeValueAsString (analysisStatus)); assertThat(analysisStatus.name (), is(dto.name())); assertThat(analysisStatus.type (), is(""t-Test Analysis"")); assertThat(analysisStatus.status (), is(Analysis.MEV_ANALYSIS_STATUS_IN_PROGRESS));  //Wait for analysis to complete Thread.sleep (3000L);  TTest analysis = (TTest)dataset.analyses ().get (analysesName); String jsonTTest = jsonObjectMapper.writeValueAsString (analysis); log.debug (""jsonAnalysis: "" + jsonTTest);  } "	0	0	0	0	0	1
"private void editButton(int slot, Kit kit){ setItem(slot, new ItemStack(Material.ENDER_PEARL), player -> { new KitEditGUI(player, this, kit); },""&1Kit: &f"" + kit.getName(), ""&aCost: "" + kit.getCost() + ""\n&aCooldown: "" + kit.getCooldown() ); } "	0	0	0	0	0	1
@Override public void initialize(boolean createTraceObject) { if (createTraceObject) { Trace trace = getTraceContext().newTraceObject(); }  getRecorder().clear(); getTestTcpDataSender().clear(); ignoredServiceTypes.clear(); } 	1	0	1	0	0	0
"@Override public Symbol doAction(Symbol input, Symbol top) throws IOException { if (top instanceof Symbol.FieldAdjustAction) { Symbol.FieldAdjustAction fa = (Symbol.FieldAdjustAction) top; String name = fa.fname; if (currentReorderBuffer != null) { List<JsonElement> node = currentReorderBuffer.savedFields.get(name); if (node != null) { currentReorderBuffer.savedFields.remove(name); currentReorderBuffer.origParser = in; in = makeParser(node); return null; } } if (in.getCurrentToken() == JsonToken.FIELD_NAME) { do { String fn = in.getText(); in.nextToken(); if (name.equals(fn)) { return null; } else { if (currentReorderBuffer == null) { currentReorderBuffer = new ReorderBuffer(); } currentReorderBuffer.savedFields.put(fn, getVaueAsTree(in)); } } while (in.getCurrentToken() == JsonToken.FIELD_NAME); throw new AvroTypeException(""Expected field name not found: "" + fa.fname); } } else if (top == Symbol.FIELD_END) { if (currentReorderBuffer != null && currentReorderBuffer.origParser != null) { in = currentReorderBuffer.origParser; currentReorderBuffer.origParser = null; } } else if (top == Symbol.RECORD_START) { if (in.getCurrentToken() == JsonToken.START_OBJECT) { in.nextToken(); reorderBuffers.push(currentReorderBuffer); currentReorderBuffer = null; } else { throw error(""record-start""); } } else if (top == Symbol.RECORD_END || top == Symbol.UNION_END) { if (in.getCurrentToken() == JsonToken.END_OBJECT) { in.nextToken(); if (top == Symbol.RECORD_END) { if (currentReorderBuffer != null && !currentReorderBuffer.savedFields.isEmpty()) { throw error(""Unknown fields: "" + currentReorderBuffer.savedFields.keySet()); } currentReorderBuffer = reorderBuffers.pop(); } } else { throw error(top == Symbol.RECORD_END ? ""record-end"" : ""union-end""); } } else { throw new AvroTypeException(""Unknown action symbol "" + top); } return null; } "	0	0	0	1	0	0
public void saveIMAGE(final String _wsLoc, final int _x, final int _y) {  BufferedImage bi; if (Status.isExportAlpha()) {  bi = Util.getEmptyBITransparent(); } else { bi = Util.getEmptyBIWhite(); }  bi = Utils.getBackgroundExport(bi, 0, 0, Status.getImageSize().width, Status.getImageSize().height, 0, 0);  bi = repaintRectangle(-_x + 0, -_y + 0, Status.getImageSize().width, Status.getImageSize().height, bi, true);  try { ImageIO.write(bi, Status.getSaveFormat(), new File(_wsLoc + Status.getSaveFormat())); } catch (IOException e) { e.printStackTrace(); } } 	1	1	0	0	0	0
public void expandTrip(final TripHolder ui, boolean expand) { Drawable icon; int state, ostate;  if(expand) { //noinspection deprecation icon = TransportrUtils.getTintedDrawable(context, R.drawable.ic_action_navigation_unfold_more); state = View.GONE; ostate = View.VISIBLE; } else { //noinspection deprecation icon = TransportrUtils.getTintedDrawable(context, R.drawable.ic_action_navigation_unfold_less); state = View.VISIBLE; ostate = View.GONE; } ui.expand.setImageDrawable(icon);  // show view with all trip lines if everything else is gone ui.linesView.setVisibility(ostate);  if(ui.legs.size() <= 1) { // show/hide additional trip info ui.legs.get(0).info.setVisibility(state);  return; }  int i = 0; for(LegHolder leg : ui.legs) { if(i == 0) { // first leg leg.arrival.setVisibility(state); leg.info.setVisibility(state); leg.divider.setVisibility(state); } else if(i == ui.legs.size() - 1) { // last leg leg.departure.setVisibility(state); leg.info.setVisibility(state); } else { // all middle legs leg.arrival.setVisibility(state); leg.info.setVisibility(state); leg.departure.setVisibility(state); leg.divider.setVisibility(state); } i += 1; } } 	0	0	0	0	0	1
private void printRecipes() throws Exception {  List<ShapedRecipes> recipes = ((Encyclopedia)book).getRecipesForEntry(selectedIndex); if (recipes == null || recipes.isEmpty()) { return; } int newx = width / 2 + 25; int newy = height / 2 - 80;  int indexPosition = 0; for (int entry = contentPage * book.entriesPerContentPage(contentMode); entry < (contentPage + 1) * book.entriesPerContentPage(contentMode); entry++) { if (entry >= book.getContentPageCount(selectedIndex, contentMode)) { return; } Encyclopedia.RecipeEntry recipe = ((Encyclopedia)book).getFormattedRecipe(recipes.get(entry));  // Draw recipe frame // TropicraftRenderUtils.bindTextureGui(openTextureIndex); drawTexturedModalRect(newx - 3, newy - 3, 0, 187, 122, 60);  int offsetX = 18; int offsetY = 18;  // Draw recipe ingredients // for(int row = 0; row < recipe.height; row++) { for (int col = 0; col < recipe.width; col++) { int itemIndex = (row * recipe.width) + col; if (recipe.ingredients[itemIndex] != null) { int renderX = newx + (offsetX * col) + 1; int renderY = newy + (offsetY * row) + 1; //GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F); GlStateManager.pushMatrix(); GlStateManager.enableRescaleNormal(); RenderHelper.enableGUIStandardItemLighting(); itemRenderer.isNotRenderingEffectsInGUI(true); //itemRenderer.renderWithColor = true; itemRenderer.renderItemIntoGUI(recipe.ingredients[itemIndex], renderX, renderY); //itemRenderer.renderWithColor = false; itemRenderer.isNotRenderingEffectsInGUI(false); RenderHelper.disableStandardItemLighting(); GlStateManager.disableRescaleNormal(); GlStateManager.popMatrix(); } } }  // Draw item label if mouse is hovering over an item for (int row = 0; row < recipe.height; row++) { for (int col = 0; col < recipe.width; col++) { int itemIndex = (row * recipe.width) + col; int renderX = newx + (offsetX * col) + 1; int renderY = newy + (offsetY * row) + 1; checkMouseHover(recipe.ingredients[itemIndex], renderX, renderY, 18); } }  // Draw recipe output ItemStack // GlStateManager.pushMatrix(); GlStateManager.scale(1.5F, 1.5F, 1.5F); GlStateManager.translate(newx / 3F + 1F, newy / 3F - .75F, 0F); GlStateManager.enableRescaleNormal(); RenderHelper.enableGUIStandardItemLighting(); itemRenderer.renderItemIntoGUI(recipe.output, newx / 3 + 60, newy / 3 + 11); itemRenderer.renderItemOverlayIntoGUI(fontRendererObj, recipe.output, newx / 3 + 60, newy / 3 + 11, recipe.output.getDisplayName()); RenderHelper.disableStandardItemLighting(); GlStateManager.disableRescaleNormal(); GlStateManager.popMatrix(); GlStateManager.pushMatrix(); checkMouseHover(recipe.output, newx + 90, newy + 20, 25); GlStateManager.popMatrix();  indexPosition++; newy += 62; } } 	1	0	1	1	0	0
"@AuthorizeOperations(operations = { GooruOperationConstants.OPERATION_RESOURCE_UPDATE }) @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = Exception.class) @RequestMapping(method = RequestMethod.POST, value = ""/{id}/media"") public ModelAndView updateResourceImage(HttpServletRequest request, @PathVariable(ID) String resourceId, @RequestBody String data, HttpServletResponse response) throws Exception { JSONObject json = requestData(data); return toModelAndView(serializeToJson(this.getResourceService().updateResourceImage(resourceId, getValue(FILENAME, json)), true)); } "	0	0	0	0	0	1
"@AuthorizeOperations(operations = { GooruOperationConstants.OPERATION_BULK_UPDATE_VIEW}) @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = Exception.class) @RequestMapping(method = RequestMethod.POST, value = ""/update/views"") public void updateResourceViews(HttpServletRequest request, HttpServletResponse response, @RequestBody String data) throws Exception { List<UpdateViewsDTO> updateViewsDTOs = this.buildUpdatesViewFromInputParameters(data); User apiCaller = (User) request.getAttribute(Constants.USER); this.getResourceService().updateViewsBulk(updateViewsDTOs, apiCaller); } "	0	0	1	1	0	0
"@Override public void handle(Either<String, JsonObject> event) { final JsonArray errors = new JsonArray(); final JsonObject ge = new JsonObject().putArray(""global"", errors); if (event.isRight() && isNotEmpty(event.right().getValue().getString(""UAI"")) && TIMETABLE_TYPES.contains(event.right().getValue().getString(""timetable""))) { if (!(""EDT"".equals(event.right().getValue().getString(""timetable"")) && !path.endsWith(""\\.xml"")) && !(""UDT"".equals(event.right().getValue().getString(""timetable"")) && !path.endsWith(""\\.zip""))) { errors.addString(I18n.getInstance().translate(""invalid.import.format"", domain, acceptLanguage)); handler.handle(new Either.Left<JsonObject, JsonObject>(ge)); return; } JsonObject action = new JsonObject().putString(""action"", ""manual-"" + event.right().getValue().getString(""timetable"").toLowerCase()) .putString(""path"", path) .putString(""UAI"", event.right().getValue().getString(""UAI"")) .putString(""language"", acceptLanguage); eb.send(Directory.FEEDER, action, new Handler<Message<JsonObject>>() { @Override public void handle(Message<JsonObject> event) { if (""ok"".equals(event.body().getString(""status""))) { JsonObject r = event.body().getObject(""result"", new JsonObject()); if (r.getObject(""errors"", new JsonObject()).size() > 0) { handler.handle(new Either.Left<JsonObject, JsonObject>(r.getObject(""errors""))); } else { handler.handle(new Either.Right<JsonObject, JsonObject>(r.getObject(""ignored""))); } } else { errors.addString(event.body().getString(""message"", """")); handler.handle(new Either.Left<JsonObject, JsonObject>(ge)); } } }); } else { errors.addString(I18n.getInstance().translate(""invalid.structure"", domain, acceptLanguage)); handler.handle(new Either.Left<JsonObject, JsonObject>(ge)); } } "	0	0	1	0	1	0
@Override public void onIssueOpenRequest(Issue item) { if (item != null) { IssueInfo info = new IssueInfo(); info.repoInfo = repoInfo; info.num = item.number;  if (item.pullRequest == null) { Intent intent = IssueDetailActivity.createLauncherIntent(getActivity(), info); startActivityForResult(intent, ISSUE_REQUEST); } } } 	0	0	1	0	1	0
"private void initialize() { frame = new JFrame(); final JLabel lblDobroDoaoMeho = new JLabel(""""); lblDobroDoaoMeho.setBounds(12, 12, 153, 15); frame.getContentPane().add(lblDobroDoaoMeho); frame.addWindowListener(new WindowAdapter() { @Override public void windowOpened(WindowEvent arg0) { lblDobroDoaoMeho.setText(""Dobro došao, "" + getIme()); } }); frame.setBounds(100, 100, 583, 290); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.getContentPane().setLayout(null); frame.setResizable(false);  JButton btnNewButton = new JButton(""Prijava preuzetog vozila""); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { PrijavljivanjePreuzetogVozila prijava = new PrijavljivanjePreuzetogVozila(getIme(),getId()); prijava.main(null); } }); btnNewButton.setBounds(12, 74, 220, 25); frame.getContentPane().add(btnNewButton);  JButton btnOdjavaPreuzetogVozila = new JButton(""Odjava preuzetog vozila""); btnOdjavaPreuzetogVozila.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { OdjavljivanjePreuzetogVozila odjava = new OdjavljivanjePreuzetogVozila(); odjava.main(null); } }); btnOdjavaPreuzetogVozila.setBounds(12, 120, 220, 25); frame.getContentPane().add(btnOdjavaPreuzetogVozila);  JButton btnOdjaviSe = new JButton(""Odjavi se""); btnOdjaviSe.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { for (Window window : Window.getWindows()) { window.dispose(); } JOptionPane.showMessageDialog(null, ""Uspješno ste odjavljeni!""); Login login = new Login(); login.main(); } }); btnOdjaviSe.setBounds(440, 176, 117, 25); frame.getContentPane().add(btnOdjaviSe);  JButton PregledSlobodnihVozila = new JButton(""Pregled slobodnih vozila""); PregledSlobodnihVozila.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { PregledSlobodnihVozila pregledSlobodnih = new PregledSlobodnihVozila(); pregledSlobodnih.main(null); } }); PregledSlobodnihVozila.setBounds(12, 157, 220, 25); frame.getContentPane().add(PregledSlobodnihVozila);  JButton btnHelp = new JButton(""Pomoć""); btnHelp.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { JOptionPane.showMessageDialog(null, ""Omogućen vam je pregled svih slobodnih vozila. Prijavite ili odjavite"" + ""vozilo koje namjeravate preuzeti/vratiti."");  } }); btnHelp.setBounds(477, 228, 80, 23); frame.getContentPane().add(btnHelp); } "	0	0	1	0	1	0
@Override public void updateEntity() { if (counter < ConfigValues.transportDelay) counter++;  if (counter >= ConfigValues.transportDelay) { DistanceHandler[] tempLocs = new DistanceHandler[exportLocations.size()]; tempLocs = exportLocations.toArray(tempLocs);  for (DistanceHandler d : tempLocs) { if (!validateBlock(d)) { exportLocations.remove(d); worldObj.markBlockForUpdate(xCoord, yCoord, xCoord); markDirty(); } } }  if (!worldObj.isRemote) {  if (counter >= ConfigValues.transportDelay) {   switch (mode) { case IMPORT: if (inventory == null) { TileEntity tile = getTileEntityFromMetadata(); if (tile != null && tile instanceof IInventory) { IInventory inv = (IInventory) tile; if (inv instanceof ISidedInventory) { ISidedInventory sided = (ISidedInventory) inv; for (int slot : sided.getAccessibleSlotsFromSide(this.getBlockMetadata())) { if (inv.getStackInSlot(slot) != null) { inventory = inv.decrStackSize(slot, 1); return; } }  } else { for (int i = 0; i < inv.getSizeInventory(); i++) { if (inv.getStackInSlot(i) != null) { inventory = inv.decrStackSize(i, 1); return; } } } } } break; case EXPORT: if (inventory != null) { TileEntity tile = getTileEntityFromMetadata(); if (tile != null && tile instanceof IInventory) { IInventory inv = (IInventory) tile; ItemStack remainder = TileEntityHopper.func_145889_a(inv, inventory, this.getBlockMetadata()); if (remainder == null) { inventory = null; return; } } } break; }  if (inventory != null) attemptTeleport(); } } else if (worldObj.getTotalWorldTime() % 20 == 0) { DistanceHandler[] tempLocs = new DistanceHandler[exportLocations.size()]; tempLocs = exportLocations.toArray(tempLocs);  if (tempLocs.length > 0) spawnParticles(tempLocs); } } 	0	0	0	0	0	1
@Test public void test_toArrayT_InvalidArraySize_FirstCellWithNull() { // Setup int _nb_of_elements = this.setupWithDifferentValues();  // SUT Assert.assertNull(this.redundantSetTesting.toArray(new Integer[_nb_of_elements + 1])[0]); } 	0	0	1	1	0	0
"@JsonIgnore public String getFullName() { return getSurname().map(surname -> String.join("" "", forename, surname)) .orElse(forename); } "	0	0	1	0	0	0
"@Override public IGuild createGuild(String name, Optional<String> regionID, Optional<Image> icon) throws HTTP403Exception { try { GuildResponse guildResponse = DiscordUtils.GSON.fromJson(Requests.POST.makeRequest(DiscordEndpoints.SERVERS, new StringEntity(DiscordUtils.GSON.toJson(new CreateGuildRequest(name, regionID.orElse(null), icon.orElse(null)))), new BasicNameValuePair(""authorization"", this.token), new BasicNameValuePair(""content-type"", ""application/json"")), GuildResponse.class); return DiscordUtils.getGuildFromJSON(this, guildResponse); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } return null; } "	0	0	0	0	0	1
public Map<Integer, CartItem> getCartItems() { return cartItems; } 	0	0	0	0	0	1
protected io.fabric8.maven.core.service.BuildService.BuildServiceConfig getBuildServiceConfig() throws MojoExecutionException { return new io.fabric8.maven.core.service.BuildService.BuildServiceConfig.Builder() .dockerBuildContext(getBuildContext()) .dockerMojoParameters(createMojoParameters()) .buildRecreateMode(BuildRecreateMode.fromParameter(buildRecreate)) .openshiftBuildStrategy(buildStrategy) .s2iBuildNameSuffix(s2iBuildNameSuffix) .buildDirectory(project.getBuild().getDirectory()) .ericherTask(new Task<KubernetesListBuilder>() { @Override public void execute(KubernetesListBuilder builder) throws Exception { new EnricherManager(resources, getEnricherContext()).enrich(builder); } }) .build(); } 	0	0	0	0	0	1
@Override public IRole copy() { return new Role(position, Permissions.generatePermissionsNumber(permissions), name, managed, id, hoist, color.getRGB(), guild); } 	0	0	0	0	0	1
"public IQ buildItemsIq(Identity entity, String node, ICommCallback callback) throws CommunicationException { IQ itemsIq = new IQ(Type.get); itemsIq.setTo(entity.getJid()); ByteArrayOutputStream os = new ByteArrayOutputStream(); try { os.write(ParsingUtils.getItemsQueryRequestBytes(node)); ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray()); Document document = reader.read(is); itemsIq.getElement().add(document.getRootElement()); } catch (IOException e) { throw new CommunicationException(""Error building disco#items request"", e); } catch (DocumentException e) { throw new CommunicationException(""Error building disco#items request"", e); } commCallbacks.put(itemsIq.getID(), callback); return itemsIq; } "	0	0	0	0	0	1
"public Map<UmaScopeDescription, Boolean> validateScopes(String scope, List<UmaPermission> permissions) { scope = ServerUtil.urlDecode(scope); final String[] scopesRequested = scope.split("" "");  final Map<UmaScopeDescription, Boolean> result = new HashMap<UmaScopeDescription, Boolean>();  if (ArrayUtils.isNotEmpty(scopesRequested)) { for (UmaScopeDescription s : umaScopeService.getScopesByIds(Arrays.asList(scopesRequested))) { result.put(s, true); } } for (UmaPermission permission : permissions) { for (UmaScopeDescription s : umaScopeService.getScopesByDns(permission.getScopeDns())) { result.put(s, false); } } if (result.isEmpty()) { log.error(""There are no any scopes requested in give request.""); throw new UmaWebException(BAD_REQUEST, errorResponseFactory, UmaErrorResponseType.INVALID_RESOURCE_SCOPE); } log.trace(""CandidateGrantedScopes: "" + Joiner.on("", "").join(Iterables.transform(result.keySet(), new Function<UmaScopeDescription, String>() { @Override public String apply(UmaScopeDescription umaScopeDescription) { return umaScopeDescription.getId(); } }))); return result; } "	0	0	0	0	0	1
"public String extract(String input_filepath) { IIORegistry.getDefaultInstance().registerServiceProvider(new TIFFImageWriterSpi(), ImageWriterSpi.class); ArrayList<ITesseract.RenderedFormat> list = new ArrayList<ITesseract.RenderedFormat>(); list.add(ITesseract.RenderedFormat.PDF);  File image; try { // extract images from PDF image = PdfUtilities.convertPdf2Tiff(new File(input_filepath)); ITesseract instance = new Tesseract(); instance.setDatapath(LoadLibs.extractTessResources(""tessdata"").getParent());  // output - create PDF from image above String image_filepath = image.getAbsolutePath(); instance.createDocuments(image_filepath, input_filepath.substring(0, input_filepath.length() - 4), list); System.out.println(""OCR Done""); return ""Success""; } catch (TesseractException e) { System.err.println(e.getMessage()); } catch (IOException e) { e.printStackTrace(); } catch (SecurityException e) { e.printStackTrace(); } catch (NullPointerException e) { e.printStackTrace(); } return ""Failed""; } "	0	1	0	0	1	0
public synchronized void buildLink(ServerSocket jsock) { try { // CREATES THE SOCKET WITH THE CLIENT AND START A NEW THREAD ISOLATING HIM/HER this.sock = jsock.accept(); ClientCenter.getInstance().getSockets().add(this.sock); ReceiverManager rc = new ReceiverManager(sock); Thread t2 = new Thread(rc); t2.start(); } catch (Exception e) { // DUMPS THE SOCKET AND RESTARTS THE SERVICE e.printStackTrace(); if (sock != null) { ClientCenter.getInstance().removeClientBySocket(sock); } ServerSocketBuilder.dumpServerSocket(); ServerSocketBuilder.createSocket(); } } 	0	0	0	0	0	1
"@Override public List<IJobExecution> jobOperatorGetJobExecutions(long jobInstanceId) { Connection conn = null; PreparedStatement statement = null; ResultSet rs = null; List<IJobExecution> data = new ArrayList<IJobExecution>(); ObjectInputStream objectIn = null;  try { conn = getConnection(); statement = conn.prepareStatement(""select A.jobexecid, A.jobinstanceid, A.createtime, A.starttime, A.endtime, A.updatetime, A.parameters, A.batchstatus, A.exitstatus, B.name from executioninstancedata as A inner join jobinstancedata as B ON A.jobinstanceid = B.jobinstanceid where A.jobinstanceid = ?""); statement.setLong(1, jobInstanceId); rs = statement.executeQuery(); while (rs.next()) { data.add(readJobExecutionRecord(rs)); } } catch (SQLException e) { throw new PersistenceException(e); } catch (IOException e) { throw new PersistenceException(e); } catch (ClassNotFoundException e) { throw new PersistenceException(e); } finally { if (objectIn != null) { try { objectIn.close(); } catch (IOException e) { throw new PersistenceException(e); } } cleanupConnection(conn, rs, statement); } return data; } "	0	0	1	0	1	0
public final String getSentence() { return sentence; } 	0	0	1	1	0	0
public CompareCollection<Node> expressions() { return expressions; } 	0	0	1	1	0	0
public List<ThesisProposalsConfiguration> getThesisProposalsConfigurations(User user) {  Objects.nonNull(user); Objects.nonNull(user.getPerson());  final Teacher teacher = user.getPerson().getTeacher();  if (teacher == null) { return new ArrayList<>(); }  Stream<ThesisProposalsConfiguration> configurationsForAuthorizations = teacher.getTeacherAuthorizationStream().flatMap(auth -> auth.getDepartment().getDegreesSet().stream()) .flatMap(degree -> degree.getExecutionDegrees().stream()) .flatMap(executionDegree -> executionDegree.getThesisProposalsConfigurationSet().stream()).distinct();  Stream<ThesisProposalsConfiguration> configurationsForParticipants = user.getThesisProposalParticipantSet().stream() .flatMap(participant -> participant.getThesisProposal().getThesisConfigurationSet().stream()).distinct();  return Stream.concat(configurationsForAuthorizations, configurationsForParticipants) .sorted(ThesisProposalsConfiguration.COMPARATOR_BY_PROPOSAL_PERIOD_START_DESC).collect(Collectors.toList()); } 	0	0	0	0	0	1
public boolean isErrorFatal() { ErrorType type = getErrorType(); ErrorType[] fatalTypes = new ErrorType[]{ErrorType.INVALID_GRANT_INVALID_TOKEN, ErrorType.INVALID_GRANT_TOKEN_EXPIRED, ErrorType.ACCESS_DENIED, ErrorType.NO_CREDIT_CARD_TRIAL_ENDED, ErrorType.SERVICE_BLOCKED, ErrorType.INVALID_CLIENT, ErrorType.UNAUTHORIZED_DEVICE, ErrorType.GRACE_PERIOD_EXPIRED, ErrorType.OTHER}; for (ErrorType fatalType : fatalTypes) { if (type == fatalType) { return true; } } return false; } 	0	0	0	0	0	1
"@Test public void envelope() { run(""geo:envelope(<gml:LinearRing><gml:coordinates>1,1 20,1 50,30 1,1"" + ""</gml:coordinates></gml:LinearRing>)"", ""<gml:Polygon xmlns:gml=\""http://www.opengis.net/gml\"">"" + ""<gml:outerBoundaryIs><gml:LinearRing>"" + ""<gml:coordinates>1.0,1.0 1.0,30.0 50.0,30.0 50.0,1.0 1.0,1.0"" + ""</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>"");  error(""geo:envelope(text {'a'})"", INVCAST_X_X_X.qname()); error(""geo:envelope(<gml:unknown/>)"", GeoErrors.qname(1)); error(""geo:envelope(<gml:LinearRing><gml:pos>1,1 20,1 50,30 1,1</gml:pos>"" + ""</gml:LinearRing>)"", GeoErrors.qname(2)); } "	0	0	1	0	0	0
"@Test public void asBinary() { run(""string(geo:asBinary(<gml:LineString><gml:coordinates>1,1 55,99 2,1"" + ""</gml:coordinates></gml:LineString>))"", ""AAAAAAIAAAADP/AAAAAAAAA/8AAAAAAAAEBLgAAAAAAAQFjAAAAAAABAAAAAAAAAAD/wAAAAAAAA"");  error(""geo:asBinary(text {'a'})"", INVCAST_X_X_X.qname()); error(""geo:asBinary(<gml:unknown/>)"", GeoErrors.qname(1)); error(""geo:asBinary(<gml:LinearRing><gml:coordinates>1,1 55,99 2,1"" + ""</gml:coordinates></gml:LinearRing>)"", GeoErrors.qname(2)); } "	0	0	1	0	1	0
"@Test public void z() { run(""geo:z(<gml:Point><gml:coordinates>2,1,3</gml:coordinates></gml:Point>)"", ""3""); run(""geo:z(<gml:Point><gml:coordinates>2</gml:coordinates></gml:Point>)"", ""NaN"");  error(""geo:z(<gml:MultiPoint><gml:Point><gml:coordinates>1,1"" + ""</gml:coordinates></gml:Point><gml:Point><gml:coordinates>1,2"" + ""</gml:coordinates></gml:Point></gml:MultiPoint>)"", GeoErrors.qname(3)); error(""geo:z("" + ""<gml:LinearRing><gml:coordinates>0,0 20,0 0,20 0,0"" + ""</gml:coordinates></gml:LinearRing>)"", GeoErrors.qname(3)); error(""geo:z(<gml:Point><gml:coordinates></gml:coordinates></gml:Point>)"", GeoErrors.qname(2)); error(""geo:z(<gml:geo><gml:coordinates>2,1</gml:coordinates></gml:geo>)"", GeoErrors.qname(1)); error(""geo:z(a)"", NOCTX_X.qname()); } "	0	0	0	0	0	1
public void setUsername(String name) { this.username = username; } 	0	0	1	0	0	0
"private String getDbTableName(String schemaName) { Preconditions.checkArgument(schemaName.matches("".+_.+_.+"")); return schemaName.replaceFirst(""_"", ""."").substring(0, schemaName.lastIndexOf('_')); } "	0	0	0	0	0	1
"@Test public void sellingTemplateTest() { Map<String, Object> params = new HashMap<>(); String name = ""Eduardo""; String message = ""testing message""; String carName = ""cars name""; String carUrl = ""www.google.com""; String manufacturer = ""afsdfasdfasdf""; String model = ""32fsdfasdf""; String modelYear = ""23423""; String fabYear = ""235324asdf""; String km = ""4536734""; List<String> optionals = new ArrayList<>(); optionals.add(""optional 1""); optionals.add(""optional 2""); optionals.add(""optional 3""); optionals.add(""optional 4""); String email = ""email@email.com""; String cellNumber = ""324523453254""; String phoneNumber = ""3423434234234"";  params.put(""name"", name); params.put(""message"", message); params.put(""sellingCarName"", carName); params.put(""sellingUrl"", carUrl);  params.put(""manufacturer"", manufacturer); params.put(""model"", model); params.put(""modelYear"", modelYear); params.put(""fabYear"", fabYear); params.put(""km"", km); params.put(""optionals"", optionals);  params.put(""email"", email); params.put(""cellNumber"", cellNumber); params.put(""phoneNumber"", phoneNumber); String content = templateService.generateContent(""selling-mail"", params); Assert.assertTrue(content.contains(name)); Assert.assertTrue(content.contains(message)); Assert.assertTrue(content.contains(carName)); Assert.assertTrue(content.contains(carUrl)); Assert.assertTrue(content.contains(email)); Assert.assertTrue(content.contains(phoneNumber));  Assert.assertTrue(content.contains(cellNumber)); Assert.assertTrue(content.contains(manufacturer)); Assert.assertTrue(content.contains(model)); Assert.assertTrue(content.contains(modelYear)); Assert.assertTrue(content.contains(fabYear)); Assert.assertTrue(content.contains(km));  optionals.forEach((e) -> Assert.assertTrue(content.contains(e)));  } "	0	0	0	1	0	0
"@RequestMapping(value = ""/login"", method = RequestMethod.POST) public String login(HttpServletRequest request, HttpServletResponse response, @RequestParam(""username"") String username, @RequestParam(""password"") String password) throws ServletException { if (username == null || username.isEmpty() || password == null || password.isEmpty()) { throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, ""Please, introduce your username and password""); } else{ User requestedUser = userRepository.findByUsername(username); String hashedPw = SecurityUtils.hashSHA512(password); if(requestedUser != null && requestedUser.getPassword().equals(hashedPw)){ SecurityContextHolder.getContext().setAuthentication(new UsernamePasswordAuthenticationToken(username, password, null)); return MainController.DEFAULT_HOME_PATH; } else{ throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, ""Incorrect user and password combination""); } } } "	0	0	0	0	0	1
public static EntitySelectActivity launchEntitySelectActivity(String command) { ShadowActivity shadowHomeActivity = ActivityLaunchUtils.buildHomeActivityForFormEntryLaunch(command);  Intent entitySelectIntent = shadowHomeActivity.getNextStartedActivity();  String intentActivityName = entitySelectIntent.getComponent().getClassName(); Assert.assertEquals(EntitySelectActivity.class.getName(), intentActivityName);  // start the entity select activity return Robolectric.buildActivity(EntitySelectActivity.class) .withIntent(entitySelectIntent).create().start().resume().get(); } 	0	0	0	0	0	1
"@Test public void testNestedKeys_StreamLine() throws Exception { ArrayList<Tuple> userStream = makeStreamLineEventStream(""users"", userFields, users); ArrayList<Tuple> cityStream = makeStreamLineEventStream(""city"", cityFields, cities); TupleWindow window = makeTupleWindow(userStream, cityStream); WindowedQueryBolt bolt = new WindowedQueryBolt(""users"", ""city"") .join(""city"", ""cityName"", ""users"") .selectStreamLine(""name,city,country""); MockCollector collector = new MockCollector(); bolt.prepare(null, null, collector); bolt.execute(window); printResults_StreamLine(collector); Assert.assertEquals( cityStream.size(), collector.actualResults.size() ); } "	0	0	0	0	0	1
"@Test public void testSectionValidatorWithSimpleDocument() throws RedPenException { List<Document> documents = new ArrayList<>();  documents.add(new Document.DocumentBuilder() .setFileName(""tested file"") .addSection(0) .addSectionHeader(""foobar"") .addParagraph() .addSentence(""it is a piece of a cake."", 0) .addSentence(""that is also a piece of a cake."", 1) .build());  RedPen redPen = getRedPenWithSectionValidator(); List<ValidationError> errors = redPen.validate(documents).get(documents.get(0));  // validate the errors assertEquals(1, errors.size()); for (ValidationError error : errors) { assertThat(error.getValidatorName(), is(""SectionLength"")); assertThat(error.getMessage(), containsString(""The number of the character in the section exceeds the maximum"")); } } "	0	0	0	0	0	1
"public void startTest() {   for (int i = 0; i < 20; i++) {  this.remoteCSSManager.registerXMPPServer(new CssProfile(), new ICSSManagerCallback() {  @Override public void receiveResult(CssInterfaceResult result) { LOG.info(""Received result from remote call""); LOG.info(""Result Status: "" + result.isResultStatus());  } });  } } "	0	0	0	0	0	1
protected void checkBillSummary(BillView content, BillView reference, SpotCheckObservation<BaseBillId> obsrv) { if (!stringEquals(content.getSummary(), reference.getSummary(), false, true)) obsrv.addMismatch(new SpotCheckMismatch(BILL_SUMMARY_OPENLEG_DEV, content.getSummary(), reference.getSummary())); } 	0	0	1	1	0	0
protected void checkBillBasePrintNoNoStr(BillView content, BillView reference, SpotCheckObservation<BaseBillId> obsrv) { if (!stringEquals(content.getBasePrintNoStr(), reference.getBasePrintNoStr(), false, true)) obsrv.addMismatch(new SpotCheckMismatch(BILL_BASE_PRINT_NO_NoStr_OPENLEG_DEV, content.getBasePrintNoStr(), reference.getBasePrintNoStr())); } 	0	0	1	1	0	0
public BeaconEvent map(ResolveAction resolveAction) { try { Action action = ActionFactory.getAction(resolveAction.type, resolveAction.content, UUID.fromString(UUIDUtils.addUuidDashes(resolveAction.eid)), resolveAction.delay * Constants.Time.ONE_SECOND); if (action == null){ return null; } return new BeaconEvent.Builder() .withAction(action) .withSuppressionTime(resolveAction.suppressionTime) .withSendOnlyOnce(resolveAction.sendOnlyOnce) .withDeliverAtDate(resolveAction.deliverAt) .withTrigger(resolveAction.trigger) .build(); } catch (JSONException e) { return null; } } 	0	0	0	0	0	1
"private void _doViewUpdatedBasedOnCalendarData(CalendarData calendarData) { Timber.d(""Changing Calendar screen based on calendardata received""); if(UOITLibraryBookingApp.isFirstTimeLaunchSinceUpgradeOrInstall()) { getChildFragmentManager().beginTransaction() .replace(R.id.calendar_content_frame, FirstTimeLoaded.newInstance()).commit(); }else if(calendarData == null) { getChildFragmentManager().beginTransaction() .replace(R.id.calendar_content_frame, SorryCartoon.newInstance()).commit(); }else { _makeNewCalendarLoadedFragmentOrRefreshCurrentOne(calendarData); } } "	0	0	0	0	0	1
"private void restoreMonitoringStatus() { FileInputStream inputStream = null; ObjectInputStream objectInputStream = null; try { inputStream = mContext.openFileInput(STATUS_PRESERVATION_FILE_NAME); objectInputStream = new ObjectInputStream(inputStream); Map<Region, RegionMonitoringState> obj = (Map<Region, RegionMonitoringState>) objectInputStream.readObject(); mRegionsStatesMap.putAll(obj);  } catch (IOException | ClassNotFoundException | ClassCastException e) { if (e instanceof InvalidClassException) { LogManager.d(TAG, ""Serialized Monitoring State has wrong class. Just ignoring saved state..."" ); } else LogManager.e(TAG, ""Deserialization exception, message: $s"", e.getMessage()); } finally { if (null != inputStream) { try { inputStream.close(); } catch (IOException ignored) { } } if (objectInputStream != null) { try { objectInputStream.close(); } catch (IOException ignored) { } } } } "	0	0	1	1	0	0
"@Override public String toString() { return ""VRouterApi "" + serverAddress + "":"" + serverPort; } "	0	0	1	0	1	0
public int getFriends() { return totalFriends; } 	0	0	0	0	0	1
public int getArea(){ return this.area; } 	0	0	0	0	0	1
public int getProcesso(){ return this.processo; } 	0	0	0	0	0	1
"private void printLineForEntry(final CommandInterpreter interpreter, int i, final RemoteJobEntry entry) { interpreter.println(String.format(COLUMN_FORMAT, i, StringUtils.truncate(entry.getDescription(), 50), StringUtils.truncate(entry.getRequestingUserId(), 16), entry.getScheduleDate() != null ? Dates.formatByHostTimeZone(entry.getScheduleDate(), DateFormats.MEDIUM) : ""Unknown"", entry.getStartDate() != null ? Dates.formatByHostTimeZone(entry.getStartDate(), DateFormats.MEDIUM) : """", StringUtils.truncate(StringUtils.capitalizeFirstLetter(entry.getState().toString().toLowerCase()), 16))); } "	0	0	0	0	0	1
"protected JSONObject searchDisjunctiveFaceting(@NonNull Query query, @NonNull List<String> disjunctiveFacets, @NonNull Map<String, List<String>> refinements) throws AlgoliaException { // Retain only refinements corresponding to the disjunctive facets. Map<String, List<String>> disjunctiveRefinements = new HashMap<>(); for (Map.Entry<String, List<String>> elt : refinements.entrySet()) { if (disjunctiveFacets.contains(elt.getKey())) { disjunctiveRefinements.put(elt.getKey(), elt.getValue()); } }  // build queries // TODO: Refactor using JSON array notation: safer and clearer. List<IndexQuery> queries = new ArrayList<>(); // hits + regular facets query StringBuilder filters = new StringBuilder(); boolean first_global = true; for (Map.Entry<String, List<String>> elt : refinements.entrySet()) { StringBuilder or = new StringBuilder(); or.append(""(""); boolean first = true; for (String val : elt.getValue()) { if (disjunctiveRefinements.containsKey(elt.getKey())) { // disjunctive refinements are ORed if (!first) { or.append(','); } first = false; or.append(String.format(""%s:%s"", elt.getKey(), val)); } else { if (!first_global) { filters.append(','); } first_global = false; filters.append(String.format(""%s:%s"", elt.getKey(), val)); } } // Add or if (disjunctiveRefinements.containsKey(elt.getKey())) { or.append(')'); if (!first_global) { filters.append(','); } first_global = false; filters.append(or.toString()); } }  queries.add(new IndexQuery(this.indexName, new Query(query).set(""facetFilters"", filters.toString()))); // one query per disjunctive facet (use all refinements but the current one + hitsPerPage=1 + single facet for (String disjunctiveFacet : disjunctiveFacets) { filters = new StringBuilder(); first_global = true; for (Map.Entry<String, List<String>> elt : refinements.entrySet()) { if (disjunctiveFacet.equals(elt.getKey())) { continue; } StringBuilder or = new StringBuilder(); or.append(""(""); boolean first = true; for (String val : elt.getValue()) { if (disjunctiveRefinements.containsKey(elt.getKey())) { // disjunctive refinements are ORed if (!first) { or.append(','); } first = false; or.append(String.format(""%s:%s"", elt.getKey(), val)); } else { if (!first_global) { filters.append(','); } first_global = false; filters.append(String.format(""%s:%s"", elt.getKey(), val)); } } // Add or if (disjunctiveRefinements.containsKey(elt.getKey())) { or.append(')'); if (!first_global) { filters.append(','); } first_global = false; filters.append(or.toString()); } } String[] facets = new String[]{disjunctiveFacet}; queries.add(new IndexQuery(this.indexName, new Query(query).setHitsPerPage(0).setAnalytics(false) .setAttributesToRetrieve().setAttributesToHighlight().setAttributesToSnippet() .setFacets(facets).set(""facetFilters"", filters.toString()))); } JSONObject answers = this.client.multipleQueries(queries, null);  // aggregate answers // first answer stores the hits + regular facets try { JSONArray results = answers.getJSONArray(""results""); JSONObject aggregatedAnswer = results.getJSONObject(0); JSONObject disjunctiveFacetsJSON = new JSONObject(); for (int i = 1; i < results.length(); ++i) { JSONObject facets = results.getJSONObject(i).getJSONObject(""facets""); @SuppressWarnings(""unchecked"") Iterator<String> keys = facets.keys(); while (keys.hasNext()) { String key = keys.next(); // Add the facet to the disjunctive facet hash disjunctiveFacetsJSON.put(key, facets.getJSONObject(key)); // concatenate missing refinements if (!disjunctiveRefinements.containsKey(key)) { continue; } for (String refine : disjunctiveRefinements.get(key)) { if (!disjunctiveFacetsJSON.getJSONObject(key).has(refine)) { disjunctiveFacetsJSON.getJSONObject(key).put(refine, 0); } } } } aggregatedAnswer.put(""disjunctiveFacets"", disjunctiveFacetsJSON); return aggregatedAnswer; } catch (JSONException e) { throw new Error(e); } } "	0	0	0	0	0	1
"@Override public void childReplaced(@NotNull PsiTreeChangeEvent event) { super.childReplaced(event);  if (event.getFile() != psiFile) return;  //Iterate over input directives List<WeaveInputDirective> inputDirectives = WeaveUtils.getInputDirectiveList(weaveFile.getDocument().getHeader()); List<String> identifierNames = new ArrayList<String>();  for (WeaveInputDirective directive : inputDirectives) { final WeaveIdentifier identifier = directive.getIdentifier(); final WeaveDataType dataType = directive.getDataType(); // //                        logger.debug(""Directive is "" + directive.getText()); //                        logger.debug(""identifier is "" + identifier == null ? ""NULL"" : identifier.getName()); //                        logger.debug(""dataType is "" + dataType);  if (identifier != null) { identifierNames.add(identifier.getName()); if (dataType != null) { //If is not in list of tabs - add it int tabIndex = getTabIndex(inputTabs, identifier.getName()); if (tabIndex == -1) { addTab(inputTabs, identifier, dataType); } else {//If in the list of tabs - check type and replace as needed updateTab(inputTabs, tabIndex, identifier, dataType); }  //Remove all tabs that are not in the input List<TabInfo> itemsToRemove = new ArrayList<TabInfo>(); int count = inputTabs.getTabCount(); for (int index = 0; index < count; index++) { String title = inputTabs.getTitleAt(index); if (!identifierNames.contains(title)) { itemsToRemove.add(inputTabs.getTabs().getTabAt(index)); editors.remove(title); contentTypes.remove(title); } } if (!itemsToRemove.isEmpty()) { for (TabInfo info : itemsToRemove) { inputTabs.getTabs().removeTab(info); } } } }  } //Update output directive List<WeaveOutputDirective> outputDirectives = WeaveUtils.getOutputDirectiveList(weaveFile.getDocument().getHeader()); if (outputDirectives.isEmpty()) { outputTabs.removeAll(); } else { WeaveOutputDirective directive = outputDirectives.get(0); final WeaveDataType dataType = directive.getDataType(); if (dataType != null) { int tabIndex = getTabIndex(outputTabs, ""output""); if (tabIndex == -1) { addTab(outputTabs, null, dataType); } else {//If in the list of tabs - check type and replace as needed updateTab(outputTabs, tabIndex, null, dataType); } } }  textEditor.getPreferredFocusedComponent().grabFocus();  runPreview(); } "	0	0	1	0	1	0
private void refreshView() { ignoreChange = true; jnCalendar.set(_date); monthsCB.setSelectedIndex(new Integer(_date.getMonth())); yearSpin.setValue(new Integer(_date.getYear())); ignoreChange = false; } 	0	0	1	0	0	0
"@Test(expected = LineItemParsingHandlerException.class) public void rejectLineWithMissingIndex() { String mzTabLine = getMzTabLine(lineStart, lineItemKey, index, propertyKey, propertyValue); mzTabLine = mzTabLine.replaceFirst(""\\[\\d+\\]"", ""[]""); subject.parseLine(context, mzTabLine, 1, 0); } "	0	0	0	0	0	1
@Override public void initializeUI(UIBuilder builder) throws Exception { name.setCompleter(new CamelContextCompleter(getController())); builder.add(name).add(limit).add(sortByLongestDuration); } 	0	1	0	0	1	0
"@Test public void capacity_type_is_required() { givenWithContent(authToken) .body(minValidPayload().put(Key.CAPACITY_TYPE, null).asArray()) .when() .put(UrlSchema.FACILITY_UTILIZATION, f.id) .then() .spec(assertResponse(HttpStatus.BAD_REQUEST, ValidationException.class)) .body(""violations[0].path"", is(Key.CAPACITY_TYPE)) .body(""violations[0].type"", is(""NotNull"")); } "	0	0	1	1	0	0
"public void testModelSPInfo() { SPInfo bean = new SPInfo(""spName""); bean.setSpName(""spName""); assertEquals(bean.getSpName(), ""spName""); bean.setSpType(SPType.FUNCTION); assertEquals(bean.getSpType(), SPType.FUNCTION); bean.setSpType(SPType.PROCEDURE); assertEquals(bean.getSpType(), SPType.PROCEDURE); ;  bean.setReturnType(""returnType""); assertEquals(bean.getReturnType(), ""returnType""); bean.setLanguage(""language""); assertEquals(bean.getLanguage(), ""language""); bean.setOwner(""owner""); assertEquals(bean.getOwner(), ""owner""); bean.setTarget(""target""); assertEquals(bean.getTarget(), ""target""); bean.setArgsInfoList(new ArrayList<SPArgsInfo>()); assertEquals(bean.getArgsInfoList().size(), 0); bean.addSPArgsInfo(new SPArgsInfo(""spName"", ""spName"", -1, ""spName"", SPArgsType.IN)); bean.removeSPArgsInfo(new SPArgsInfo()); } "	0	0	1	0	0	0
"public void edit(int id, Employee e) throws Exception { connect(); stmt = conn.createStatement(); stmt.executeUpdate(""UPDATE public.\""EMPLOYEES\"" "" + ""SET \""FULLNAME\"" = '"" + e.getFullName() + ""', \""ADDRESS\"" = '"" + e.getAddress() + ""', \""EMAIL\"" = '"" + e.getEmail() + ""', "" + ""\""PHONE\"" = '"" + e.getPhone() + ""', \""SALARY\"" = '"" + e.getSalary() + ""', "" + ""WHERE ID = "" + id); } "	0	0	0	0	0	1
public Builder withDate(Date date) { this.date = date; return this; } 	0	0	0	0	0	1
"@Override public String getSubPath() { String subPath = getAttribute() != null ? getAttribute().getName() : getAttributeGroup().getName(); return ""DEF("" + subPath + "")""; } "	0	0	0	0	0	1
"@Override public int onStartCommand(Intent intent, int flags, int startId) { // TODO Auto-generated method stub Log.i(""Notif Service"",""Inside onStartCommand of Service""); IntentFilter intentFilter = new IntentFilter(); intentFilter.addAction(ACTION); registerReceiver(notifyServiceReceiver, intentFilter); DBHelper helper = new DBHelper(getApplicationContext()); db = helper.getDB(); Cursor c = db.rawQuery(""select start_time from DATE_TIME_SET where id=1"",null); c.moveToFirst(); String notificationTime = c.getString(0); String[] data = notificationTime.split("":"");  int hours  = Integer.parseInt(data[0]); int minutes = Integer.parseInt(data[1]); long time = (hours*60*60) + (minutes*60); Calendar cal = Calendar.getInstance(); int hour_of_day = cal.get(Calendar.HOUR_OF_DAY); int min_of_day = cal.get(Calendar.MINUTE); long systemTime = (hour_of_day*3600) + (min_of_day*60); if(systemTime==time) { // Send Notification notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); myNotification = new Notification(R.drawable.ic_launcher, ""REACH Application!"", System.currentTimeMillis()); Context context = getApplicationContext(); String notificationTitle = ""What's up !""; String notificationText = ""You haven't seen me in a while !""; Intent myIntent = new Intent(getApplicationContext(), Landing.class); PendingIntent pendingIntent = PendingIntent.getActivity(getBaseContext(),0, myIntent,0); myNotification.defaults |= Notification.DEFAULT_SOUND; myNotification.flags |= Notification.FLAG_AUTO_CANCEL; myNotification.setLatestEventInfo(context, notificationTitle, notificationText, pendingIntent); //            startForeground(1,myNotification); notificationManager.notify(MY_NOTIFICATION_ID, myNotification);   } return (START_NOT_STICKY); } "	0	0	0	0	0	1
"@NonNull @Override public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) { if (convertView == null) { convertView = getActivity().getLayoutInflater().inflate( R.layout.delegate_appointments, parent, false); viewHolder = new ViewHolder(); viewHolder.nameAge = (TextView) convertView.findViewById(R.id.name_age); viewHolder.appointmentTime = (TextView) convertView.findViewById( R.id.appointment_time); viewHolder.appointmentState = convertView.findViewById(state); viewHolder.reason = (TextView) convertView.findViewById(R.id.service); viewHolder.patientImage = (CircleImageView) convertView.findViewById( R.id.patient_appointment_image_view); viewHolder.chatStatus = (ImageView) convertView.findViewById( R.id.available_for_chat_status); convertView.setTag(viewHolder);  viewHolder.nameAge.setTypeface(AppGlobals.typefaceNormal); viewHolder.appointmentTime.setTypeface(AppGlobals.typefaceNormal); viewHolder.reason.setTypeface(AppGlobals.typefaceNormal);  } else { viewHolder = (ViewHolder) convertView.getTag(); } // setting values Agenda agenda = agendaArrayList.get(position); System.out.println(""Photo Url: "" + agenda.getPhotoUrl()); Helpers.getBitMap(String.format(AppGlobals.SERVER_IP + ""%s"", agenda.getPhotoUrl()), viewHolder.patientImage);  if (agenda.isAvailAbleForChat()) { viewHolder.chatStatus.setImageDrawable( getResources().getDrawable(R.mipmap.ic_online_indicator)); } else { viewHolder.chatStatus.setImageDrawable( getResources().getDrawable(R.mipmap.ic_offline_indicator)); } String age = Helpers.calculateAge(agenda.getDateOfBirth()); String name = agenda.getFirstName() + "" "" + agenda.getLastName(); viewHolder.nameAge.setText(name + "" ("" + age + ""a)""); viewHolder.reason.setText(agenda.getReaseon()); SimpleDateFormat formatter_from = new SimpleDateFormat(""HH:mm:ss""); SimpleDateFormat dateFormat = new SimpleDateFormat(""HH:mm""); try { Date date = formatter_from.parse(agenda.getStartTIme()); viewHolder.appointmentTime.setText(dateFormat.format(date)); } catch (ParseException e) { e.printStackTrace(); } String state = agenda.getAgendaState(); if (state.contains(AppGlobals.PENDING)) { viewHolder.appointmentState.setBackgroundColor( getResources().getColor(R.color.pending_background_color)); } else if (state.contains(AppGlobals.ACCEPTED)) { viewHolder.appointmentState.setBackgroundColor( getResources().getColor(R.color.attended_background_color)); } else if (state.contains(AppGlobals.REJCTED)) { viewHolder.appointmentState.setBackgroundColor( getResources().getColor(R.color.reject_background)); } return convertView; } "	0	0	0	0	0	1
"private void weather() throws SendPacketException, IOException { System.out.println(""Shard requested Weather info.""); api = new APIHandler( ""http://api.openweathermap.org/data/2.5/forecast?id=5275191&appid=70546178bd3fbec19e717d754e53b129""); StringBuilder forecast = new StringBuilder();  JSONArray array = api.getJSONArray(""list""); for (int i = 0; i < array.length(); i++) { JSONObject obj = array.getJSONObject(i);  // Filter out every 3 hour value other than the mid day if (!obj.getString(""dt_txt"").contains(""12:00:00"")) { continue; }  int apiDate = obj.getInt(""dt""); // Date pulled from forecast  // set up the calendar object for the given date Calendar date = Calendar.getInstance(); java.util.Date time = new java.util.Date((long) apiDate * 1000); date.setTime(time);  String weather = obj.getJSONArray(""weather"").getJSONObject(0).getString(""description""); int temp = (int) kelvinToF(obj.getJSONObject(""main"").getDouble(""temp""));  String calendarMonth = getCalendarMonth(date.get(Calendar.MONTH));  forecast.append(""Date: "" + calendarMonth + "" "" + date.get(Calendar.DAY_OF_MONTH) + ""\nSky: "" + weather + ""\nTemperature: "" + temp + ""\n\n""); }  sendToClient(forecast.toString(), true); } "	0	0	0	0	0	1
"private void btcPrice() throws SendPacketException, IOException { System.out.println(""Shard requested BTC Price info."");  api = new APIHandler(""https://blockchain.info/ticker""); Double btcPrice = api.getJSONObject(""USD"").getDouble(""buy"");  sendToClient(""BTC Price today: $"" + btcPrice.toString(), true); } "	0	0	0	0	0	1
public static int getItemBurnTime(ItemStack item) { if (PAConfig.allowPotatos) { if (item.getItem() == Items.POTATO) return 40; else if (item.getItem() == Items.BAKED_POTATO) return 80; } if (item==null) return 0; return TileEntityFurnace.getItemBurnTime(item); } 	0	0	1	1	1	0
"@Override public Launcher decorate(final Launcher launcher, final Node node) { return new Launcher.DecoratedLauncher(launcher) { @Override public Proc launch(ProcStarter starter) throws IOException { if (!waitUntilContainerIsReady()) { throw new IOException(""Failed to execute shell script inside container "" + ""["" + containerName + ""] of pod ["" + podName + ""]."" + "" Timed out waiting for container to become ready!""); } launcher.getListener().getLogger().println(""Executing shell script inside container ["" + containerName + ""] of pod ["" + podName + ""]""); watch = client.pods().withName(podName) .inContainer(containerName) .redirectingInput() .writingOutput(launcher.getListener().getLogger()) .writingError(launcher.getListener().getLogger()) .withTTY() .usingListener(new ExecListener() { @Override public void onOpen(Response response) { alive.set(true); started.countDown(); }  @Override public void onFailure(IOException e, Response response) { alive.set(false); e.printStackTrace(launcher.getListener().getLogger()); started.countDown(); finished.countDown(); }  @Override public void onClose(int i, String s) { alive.set(false); started.countDown(); finished.countDown(); } }).exec();  waitQuietly(started);  //We need to get into the project workspace. //The workspace is not known in advance, so we have to execute a cd command. watch.getInput().write((""cd "" + path + NEWLINE).getBytes(StandardCharsets.UTF_8)); doExec(watch, launcher.getListener().getLogger(), getCommands(starter)); proc = new ContainerExecProc(watch, alive, finished); return proc; }  @Override public void kill(Map<String, String> modelEnvVars) throws IOException, InterruptedException { getListener().getLogger().println(""Killing process.""); ContainerExecDecorator.this.close(); }   private boolean isContainerReady(Pod pod, String container) { if (pod == null || pod.getStatus() == null || pod.getStatus().getContainerStatuses() == null) { return false; }  for (ContainerStatus info : pod.getStatus().getContainerStatuses()) { if (info.getName().equals(container) && info.getReady()) { return true; } } return false; }  private boolean waitUntilContainerIsReady() { Pod pod = client.pods().withName(podName).get();  if (pod == null) { throw new IllegalArgumentException(""Container with name:["" + containerName+""] not found in pod:["" + podName + ""]""); } if (isContainerReady(pod, containerName)) { return true; }  launcher.getListener().getLogger().println(""Waiting for container container ["" + containerName + ""] of pod ["" + podName + ""] to become ready.""); final CountDownLatch latch = new CountDownLatch(1); Watcher<Pod> podWatcher = new Watcher<Pod>() { @Override public void eventReceived(Action action, Pod resource) { switch (action) { case MODIFIED: if (isContainerReady(resource, containerName)) { latch.countDown(); } break; default: } }  @Override public void onClose(KubernetesClientException cause) {  } };  try (Watch watch = client.pods().withName(podName).watch(podWatcher)) { if (latch.await(CONTAINER_READY_TIMEOUT, TimeUnit.MINUTES)) { return true; } } catch (InterruptedException e) { return false; } return false; } }; } "	0	0	0	0	0	1
"@Path(""/json/current"") @GET @Produces({ ""application/json"" }) public String getCurrentMovies() { return service.listFutureMovies(); } "	0	0	1	0	0	0
"public static <A extends AbstractAssert> A hasPksNames(A assertion, WritableAssertionInfo info, Change change, String... names) { if (names == null) { throw new NullPointerException(""Column name must be not null""); }  // Create a sorted list from the primary keys columns List<String> pksNameList = change.getPksNameList(); List<String> pksList = new ArrayList<String>(pksNameList); Collections.sort(pksList);  // Create a sorted list from the parameters List<String> namesList = new ArrayList<String>(); for (String name : names) { if (name == null) { throw new NullPointerException(""Column name must be not null""); } namesList.add(name.toUpperCase()); } Collections.sort(namesList);  // Compare each list if (!namesList.equals(pksList)) { String[] pksNames = pksNameList.toArray(new String[pksNameList.size()]); throw failures.failure(info, shouldHavePksNames(pksNames, names)); }  return assertion; } "	0	0	0	0	0	1
@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false;  User user = (User) o;  if (!id.equals(user.id)) return false; if (!login.equals(user.login)) return false; if (!password.equals(user.password)) return false; return email.equals(user.email); } 	0	0	1	0	1	0
"private boolean allowDelete(DeleteMessageRequest request, TopicItemEntity entity) {  if((request.getRoles() != null && request.getRoles().equals(""developer""))){ return true; }  Node node = MMXChannelManager.getInstance().getTopicNode(entity.getNodeId());  if(node == null) { LOGGER.error(""Node is null for the id "" + entity.getNodeId()); return false; } String messageOwner = JIDUtil.getUserId(node.getCreator()); String channelOwner = JIDUtil.getUserId(node.getOwners().iterator().next()); if(request.getUserId() != null && (request.getUserId().equals(messageOwner) || request.getUserId().equals(channelOwner))) { return true; } return false; } "	0	0	1	0	1	0
"public void add(ReadOnlyTask toAdd) throws DuplicateTaskException { requireNonNull(toAdd); if (contains(toAdd)) { throw new DuplicateTaskException(); }  if (toAdd.getTaskType().toString().equals(""event"") && eventClash(toAdd)) { throw new DuplicateTaskException(); } toAdd.resetTaskType(); internalList.add(new Task(toAdd)); } "	0	0	1	0	1	0
protected synchronized String getTimePrintString () { return timePrintString; } 	0	0	0	0	0	1
"public static void Add_Questions(JSONArray json_questions){ try{ if(json_questions.length()>0){ Log.i(TAG,""Adding New WinBuildSend Questions -> \n""+json_questions.toString()); for(int i=0;i<json_questions.length();i++){ JSONObject obj = json_questions.getJSONObject(i); ContentValues cv = new ContentValues(); cv.put(Database.QuestionListColumn.SERID.toString(), obj.getString(ApiResponseKey.ID.toString())); cv.put(Database.QuestionListColumn.CATEGORY.toString(), obj.getString(ApiResponseKey.CATEGORY.toString())); cv.put(Database.QuestionListColumn.QUESTION.toString(), obj.getString(ApiResponseKey.QUESTION.toString())); cv.put(Database.QuestionListColumn.DESCRIPTION.toString(), obj.getString(ApiResponseKey.DESCRIPTION.toString())); cv.put(Database.QuestionListColumn.MANDATORY.toString(), obj.getString(ApiResponseKey.MANDATORY.toString())); cv.put(Database.QuestionListColumn.TYPE.toString(), obj.getString(ApiResponseKey.TYPE.toString())); cv.put(Database.QuestionListColumn.COUNTRY.toString(), obj.getString(ApiResponseKey.COUNTRY.toString())); cv.put(Database.QuestionListColumn.CREATED.toString(), obj.getString(ApiResponseKey.CREATED.toString())); WbsQuestion wbsQuestion = DeepLife.myDATABASE.getWinBuildSendQuestionBySerID(Integer.valueOf(obj.getString(ApiResponseKey.ID.toString()))); if(wbsQuestion == null){ long x = DeepLife.myDATABASE.insert(Database.Table_QUESTION_LIST,cv); if(x>0){ Log.i(TAG,""Successfully Added: WinBuildSend Questions Added -> \n""+cv.toString()); }else { Log.i(TAG,""Error During Adding: WinBuildSend Questions -> \n""+cv.toString()); } }else { long x = DeepLife.myDATABASE.update(Database.Table_QUESTION_LIST,cv, wbsQuestion.getID()); Log.i(TAG,""Updated: WinBuildSend Questions Updated -> \n""+cv.toString()); if(x>0){ Log.i(TAG,""Successfully Updated: WinBuildSend Questions Updated -> \n""+cv.toString()); }else { Log.i(TAG,""Error During Updating: WinBuildSend Questions -> \n""+cv.toString()); } } } } }catch (Exception e){ Log.i(TAG,e.toString()); } } "	0	0	0	0	0	1
"private final List<String> retrieveContactHeaders( Map<String, List<String>> headerMap, Request newRequest, ServletContext servCtx) throws ParseException { List<String> contactHeaderList = new ArrayList<String>(); if(headerMap != null) { for (Entry<String, List<String>> entry : headerMap.entrySet()) { final String headerName = entry.getKey(); if(!headerName.equalsIgnoreCase(ContactHeader.NAME)) {  if (B2BUA_SYSTEM_HEADERS.contains(headerName)) { String overridenRuleStr = servCtx.getInitParameter(SipServletMessageImpl.SYS_HDR_MOD_OVERRIDE); if (overridenRuleStr != null && !AddressImpl.ModifiableRule.valueOf(overridenRuleStr).equals(ModifiableRule.Modifiable)) { throw new IllegalArgumentException(headerName + "" in the provided map is a system header""); } } // Fix for Issue 1002 : The header field map is then used to // override the headers in the newly created request so the header copied from the original request is removed if(entry.getValue().size() > 0)  { newRequest.removeHeader(headerName); } for (String value : entry.getValue()) { final Header header = sipFactoryImpl.getHeaderFactory().createHeader( headerName, value); if(! JainSipUtils.SINGLETON_HEADER_NAMES.contains(header.getName())) { newRequest.addHeader(header); } else { newRequest.setHeader(header); } } } else { contactHeaderList = headerMap.get(headerName); } } } return contactHeaderList; } "	1	1	1	1	0	0
"public void testInstantSer() throws IOException { Instant instant = new Instant(0L);  // by default, dates use timestamp, so: assertEquals(""0"", MAPPER.writeValueAsString(instant));  // but if re-configured, as regular ISO-8601 string assertEquals(quote(""1970-01-01T00:00:00.000Z""), MAPPER.writer() .without(SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS) .writeValueAsString(instant)); } "	0	0	0	1	0	0
@Test public void loads5thArgumentOnStack() { MethodVisitor methodVisitor = Mockito.mock(MethodVisitor.class); Implementation.Context implementationContext = Mockito.mock(Implementation.Context.class);  new SmtLoadReference(5).result().item().peek(sm -> sm.apply(methodVisitor, implementationContext)); Mockito.verify(methodVisitor).visitVarInsn(Opcodes.ALOAD, 5); Mockito.verifyNoMoreInteractions(methodVisitor); } 	0	0	1	1	1	0
"public static void hostGame(final int port, final String playerName, final String comments, final String password, final Messengers messengers) { final List<String> commands = new ArrayList<>(); ProcessRunnerUtil.populateBasicJavaArgs(commands); commands.add(""-D"" + TRIPLEA_SERVER_PROPERTY + ""=true""); commands.add(""-D"" + TRIPLEA_PORT_PROPERTY + ""="" + port); commands.add(""-D"" + TRIPLEA_NAME_PROPERTY + ""="" + playerName); commands.add(""-D"" + LOBBY_HOST + ""="" + messengers.getMessenger().getRemoteServerSocketAddress().getAddress().getHostAddress()); commands .add(""-D"" + LobbyServer.TRIPLEA_LOBBY_PORT_PROPERTY + ""="" + messengers.getMessenger().getRemoteServerSocketAddress().getPort()); commands.add(""-D"" + LOBBY_GAME_COMMENTS + ""="" + comments); commands.add(""-D"" + LOBBY_GAME_HOSTED_BY + ""="" + messengers.getMessenger().getLocalNode().getName()); if (password != null && password.length() > 0) { commands.add(""-D"" + TRIPLEA_SERVER_PASSWORD_PROPERTY + ""="" + password); } final String fileName = System.getProperty(TRIPLEA_GAME_PROPERTY, """"); if (fileName.length() > 0) { commands.add(""-D"" + TRIPLEA_GAME_PROPERTY + ""="" + fileName); } final String javaClass = GameRunner.class.getName(); commands.add(javaClass); ProcessRunnerUtil.exec(commands); } "	0	0	0	0	0	1
"@Override public void onDataChange(DataSnapshot snapshot) { if (snapshot.exists()) { try { // Convert value to JSON using Jackson String json = new ObjectMapper().writeValueAsString(snapshot.getValue());  // Replace the URL with the url of your own listener app. URL dest = new URL(""http://gae-firebase-listener-python.appspot.com/log""); HttpURLConnection connection = (HttpURLConnection) dest.openConnection(); connection.setRequestMethod(""POST""); connection.setDoOutput(true);  // Rely on X-Appengine-Inbound-Appid to authenticate. Turning off redirects is // required to enable. connection.setInstanceFollowRedirects(false);  // Fill out header if in dev environment if (SystemProperty.environment.value() != SystemProperty.Environment.Value.Production) { connection.setRequestProperty(""X-Appengine-Inbound-Appid"", ""dev-instance""); }  // Put Firebase data into http request StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(""&fbSnapshot=""); stringBuilder.append(URLEncoder.encode(json, ""UTF-8"")); connection.getOutputStream().write(stringBuilder.toString().getBytes()); if (connection.getResponseCode() != 200) { log.severe(""Forwarding failed""); } else { log.info(""Sent: "" + json); } } catch (JsonProcessingException e) { log.severe(""Unable to convert Firebase response to JSON: "" + e.getMessage()); } catch (IOException e) { log.severe(""Error in connecting to app engine: "" + e.getMessage()); } } } "	0	0	1	0	1	0
@Override protected void applyEditorTo(@NotNull GoTestRunConfiguration configuration) throws ConfigurationException { configuration.setTestFramework(myGocheckFrameworkRadioButton.isSelected() ? GocheckFramework.INSTANCE : GoTestFrameworkImpl.INSTANCE); configuration.setKind((GoTestRunConfiguration.Kind)myTestKindComboBox.getSelectedItem()); configuration.setPackage(myPackageField.getText()); configuration.setDirectoryPath(myDirectoryField.getText()); configuration.setFilePath(myFileField.getText()); configuration.setPattern(myPatternEditor.getText());  myCommonSettingsPanel.applyEditorTo(configuration); } 	0	0	1	0	0	0
"private static List<String> validateSubmit(DOECodeMetadata m) { List<String> reasons = new ArrayList<>(); // get all the PUBLISHED reasons, if any reasons.addAll(validatePublished(m)); // add SUBMIT-specific validations if (null==m.getReleaseDate()) reasons.add(""Release date is required.""); if (null==m.getSponsoringOrganizations() || m.getSponsoringOrganizations().isEmpty()) reasons.add(""At least one sponsoring organization is required.""); else { for ( SponsoringOrganization o : m.getSponsoringOrganizations() ) { if (StringUtils.isBlank(o.getOrganizationName())) reasons.add(""Sponsoring organization name is required.""); if (StringUtils.isBlank(o.getPrimaryAward()) && o.isDOE()) reasons.add(""Primary award number is required.""); else if (o.isDOE() && !Validation.isValidAwardNumber(o.getPrimaryAward())) reasons.add(""Award Number "" + o.getPrimaryAward() + "" is not valid.""); } } if (null==m.getResearchOrganizations() || m.getResearchOrganizations().isEmpty()) reasons.add(""At least one research organization is required.""); else { for ( ResearchOrganization o : m.getResearchOrganizations() ) { if (StringUtils.isBlank(o.getOrganizationName())) reasons.add(""Research organization name is required.""); } } if (StringUtils.isBlank(m.getRecipientName())) reasons.add(""Contact name is required.""); if (StringUtils.isBlank(m.getRecipientEmail())) reasons.add(""Contact email is required.""); else { if (!Validation.isValidEmail(m.getRecipientEmail())) reasons.add(""Contact email is not valid.""); } if (StringUtils.isBlank(m.getRecipientPhone())) reasons.add(""Contact phone number is required.""); else { if (!Validation.isValidPhoneNumber(m.getRecipientPhone())) reasons.add(""Contact phone number is not valid.""); } if (StringUtils.isBlank(m.getRecipientOrg())) reasons.add(""Contact organization is required."");  if (!DOECodeMetadata.Accessibility.OS.equals(m.getAccessibility())) if (StringUtils.isBlank(m.getFileName())) reasons.add(""A file archive must be included for non-open source submissions."");  return reasons; } "	0	0	0	1	0	0
"private void writeQbitsToCanvas(List<Qubit> qbits, Canvas canvas, Integer size , Integer margin, Integer line_spacing, Integer padding_top) { final Stream<String> qbit_stream = qbits.stream() .map(qbit -> ""|"" + Integer.toString((int) Math.round(qbit.getState())) + "">"");  zipWithIndex(qbit_stream) .forEach(qbit -> { final Integer y = Math.round(margin + padding_top + qbit.getIndex() * size * line_spacing); final Integer x = 0 + margin;  //draw qbit canvas.getGraphicsContext2D() .fillText(qbit.getValue(), x, y);  final Integer font_width = size * 3;  //draw line canvas.getGraphicsContext2D() .strokeLine(x + font_width, y - size / 2, canvas.getWidth(), y - size / 2); }); } "	0	0	1	0	0	0
public void connect(){ mGoogleApiClient.connect(); } 	0	0	0	0	0	1
"public String getPath() { return ""file:TIMEGA/assets/Systems/"" + _path; } "	0	0	0	0	0	1
"public static Entity getEntityRoot(Mapping mapping, String uri) { ArrayList<Entity> entitiesWithAttribute = mapping.getEntititesWithAttributeUri(uri); if (entitiesWithAttribute.size() == 0) { throw new ServerErrorException(""Server Error"", ""No entity was found containing a urn:sequence attribute""); }  // assuming that there is only 1 entity with a sequence attribute return entitiesWithAttribute.get(0); } "	0	1	0	0	1	0
"public static void startup() {  //System.out.println(MetadataProperties.class.getClass().getResourceAsStream(""/us/kbase/kbaseenigmametals/uploader.properties"")); /*File propertiesFile; String kbTop = System.getenv(""KB_TOP""); if (!kbTop.substring(kbTop.length() - 1).equals(""/"")) { kbTop = kbTop + ""/""; } propertiesFile = new File (kbTop + ""lib/jars/kbase/transform/uploader.properties""); */ Properties prop = new Properties(); InputStream input = null;  try {  //input = new FileInputStream(propertiesFile); input = MetadataProperties.class.getClass().getResourceAsStream(""/us/kbase/kbaseenigmametals/uploader.properties""); // load a properties file prop.load(input); // set metadata properties DATAMATRIX_METADATA_TABLE_DESCRIPTION = prop.getProperty(""datamatrix.metadata.description""); DATAMATRIX_METADATA_TABLE_MEASUREMENT = prop.getProperty(""datamatrix.metadata.table.measurement""); DATAMATRIX_METADATA_TABLE_MEASUREMENT_VALUES = prop.getProperty(""datamatrix.metadata.table.measurement.values""); DATAMATRIX_METADATA_TABLE_MEASUREMENT_VALUES_VALUE = Arrays.asList(prop.getProperty(""datamatrix.metadata.table.measurement.values.value"").split("","", 0)); DATAMATRIX_METADATA_TABLE_MEASUREMENT_VALUES_VALUE_STATVALUES = prop.getProperty(""datamatrix.metadata.table.measurement.values.value.statvalues""); DATAMATRIX_METADATA_COLUMN_MEASUREMENT = prop.getProperty(""datamatrix.metadata.column.measurement""); DATAMATRIX_METADATA_COLUMN_MEASUREMENT_VALUETYPE = prop.getProperty(""datamatrix.metadata.column.measurement.valuetype""); DATAMATRIX_METADATA_COLUMN_MEASUREMENT_VALUETYPE_VALUE = Arrays.asList(prop.getProperty(""datamatrix.metadata.column.measurement.valuetype.value"").split("","", 0)); DATAMATRIX_METADATA_COLUMN_DATASERIES = prop.getProperty(""datamatrix.metadata.column.dataseries""); DATAMATRIX_METADATA_COLUMN_DATASERIES_SERIESID = prop.getProperty(""datamatrix.metadata.column.dataseries.seriesid""); GROWTHMATRIX_METADATA_ROW_TIMESERIES = prop.getProperty(""growthmatrix.metadata.row.timeseries""); GROWTHMATRIX_METADATA_ROW_TIMESERIES_TIME = prop.getProperty(""growthmatrix.metadata.row.timeseries.time""); GROWTHMATRIX_METADATA_ROW_TIMESERIES_TIME_UNIT = Arrays.asList(prop.getProperty(""growthmatrix.metadata.row.timeseries.time.unit"").split("","", 0)); GROWTHMATRIX_METADATA_COLUMN_CONDITION = prop.getProperty(""growthmatrix.metadata.column.condition""); GROWTHMATRIX_METADATA_COLUMN_CONDITION_UNIT = Arrays.asList(prop.getProperty(""growthmatrix.metadata.column.condition.unit"").split("","", 0)); GROWTHMATRIX_METADATA_COLUMN_DATASERIES_SAMPLEID = prop.getProperty(""growthmatrix.metadata.column.dataseries.sampleid""); CHROMATOGRAPHYMATRIX_METADATA_ROW_TIMESERIES = prop.getProperty(""chromatographymatrix.metadata.row.timeseries""); CHROMATOGRAPHYMATRIX_METADATA_ROW_TIMESERIES_TIME = Arrays.asList(prop.getProperty(""chromatographymatrix.metadata.row.timeseries.time"")); CHROMATOGRAPHYMATRIX_METADATA_ROW_TIMESERIES_TIME_UNIT = Arrays.asList(prop.getProperty(""chromatographymatrix.metadata.row.timeseries.time.unit"").split("","", 0)); CHROMATOGRAPHYMATRIX_METADATA_COLUMN_MEASUREMENT = prop.getProperty(""chromatographymatrix.metadata.column.measurement""); CHROMATOGRAPHYMATRIX_METADATA_COLUMN_MEASUREMENT_SUBSTANCE = prop.getProperty(""chromatographymatrix.metadata.column.measurement.substance""); SAMPLEPROPERTYMATRIX_METADATA_COLUMN_PROPERTY = prop.getProperty(""samplepropertymatrix.metadata.column.property""); SAMPLEPROPERTYMATRIX_METADATA_COLUMN_PROPERTY_NAME = prop.getProperty(""samplepropertymatrix.metadata.column.property.name""); SAMPLEPROPERTYMATRIX_METADATA_COLUMN_PROPERTY_MEASUREMENT = prop.getProperty(""samplepropertymatrix.metadata.column.property.measurement""); SAMPLEPROPERTYMATRIX_METADATA_ROW_SAMPLE = prop.getProperty(""samplepropertymatrix.metadata.row.sample""); SAMPLEPROPERTYMATRIX_METADATA_ROW_SAMPLE_NAME = prop.getProperty(""samplepropertymatrix.metadata.row.sample.name"");  } catch (IOException ex) { ex.printStackTrace(); } finally { if (input != null) { try { input.close(); } catch (IOException e) { e.printStackTrace(); } } } } "	0	0	0	0	0	1
"public StrokeSet strokeSet(int desiredStrokeLength) { StrokeSet set = mStrokeSetMap.get(desiredStrokeLength); if (set == null) throw new IllegalArgumentException(""no stroke set '"" + name() + ""' of length "" + desiredStrokeLength); return set; } "	0	0	0	0	0	1
@Override public void syncPayload(IMessageSenderWrapper sender, String entityClassName, String entityName, int concurrencyKey, byte[] payload) throws EntityException { // Sync only makes sense on passive. Assert.assertTrue(null != this.passiveEntities);  final PassthroughEntityTuple entityTuple = new PassthroughEntityTuple(entityClassName, entityName); CreationData<PassiveServerEntity<?, ?>> data = this.passiveEntities.get(entityTuple); if (null != data) { PassiveServerEntity<?, ?> entity = data.entityInstance; sendPassiveSyncPayload(entity, concurrencyKey, payload); } else { throw new EntityNotFoundException(entityClassName, entityName); } } 	0	0	1	0	1	0
"public void execute(Player player, String[] arg) { SimpleClans plugin = SimpleClans.getInstance();  if (!plugin.getPermissionsManager().has(player, ""simpleclans.leader.ally"")) { ChatBlock.sendMessage(player, ChatColor.RED + plugin.getLang(""insufficient.permissions"")); return; }  ClanPlayer cp = plugin.getClanManager().getClanPlayer(player);  if (cp == null) { ChatBlock.sendMessage(player, ChatColor.RED + plugin.getLang(""not.a.member.of.any.clan"")); return; }  Clan clan = cp.getClan();  if (!clan.isVerified()) { ChatBlock.sendMessage(player, ChatColor.RED + plugin.getLang(""clan.is.not.verified"")); return; }  if (!clan.isLeader(player)) { ChatBlock.sendMessage(player, ChatColor.RED + plugin.getLang(""no.leader.permissions"")); return; }  if (arg.length != 2) { ChatBlock.sendMessage(player, ChatColor.RED + MessageFormat.format(plugin.getLang(""usage.ally""), plugin.getSettingsManager().getCommandClan())); return; }  if (clan.getSize() < plugin.getSettingsManager().getClanMinSizeToAlly()) { ChatBlock.sendMessage(player, ChatColor.RED + MessageFormat.format(plugin.getLang(""minimum.to.make.alliance""), plugin.getSettingsManager().getClanMinSizeToAlly())); return; }  String action = arg[0]; Clan ally = plugin.getClanManager().getClan(arg[1]);  if (ally == null) { ChatBlock.sendMessage(player, ChatColor.RED + plugin.getLang(""no.clan.matched"")); return; }  if (!ally.isVerified()) { ChatBlock.sendMessage(player, ChatColor.RED + plugin.getLang(""cannot.ally.with.an.unverified.clan"")); }  if (action.equals(plugin.getLang(""add""))) { if (clan.isAlly(ally.getTag())) { ChatBlock.sendMessage(player, ChatColor.RED + plugin.getLang(""your.clans.are.already.allies"")); return; }  List<ClanPlayer> onlineLeaders = Helper.stripOffLinePlayers(clan.getLeaders());  if (onlineLeaders.isEmpty()) { ChatBlock.sendMessage(player, ChatColor.RED + plugin.getLang(""at.least.one.leader.accept.the.alliance"")); return; }  plugin.getRequestManager().addAllyRequest(cp, ally, clan); ChatBlock.sendMessage(player, ChatColor.AQUA + MessageFormat.format(plugin.getLang(""leaders.have.been.asked.for.an.alliance""), Helper.capitalize(ally.getName()))); } else if (action.equals(plugin.getLang(""remove""))) { if (!clan.isAlly(ally.getTag())) { ChatBlock.sendMessage(player, ChatColor.RED + plugin.getLang(""your.clans.are.not.allies"")); return; }  clan.removeAlly(ally); ally.addBb(cp.getName(), ChatColor.AQUA + MessageFormat.format(plugin.getLang(""has.broken.the.alliance""), Helper.capitalize(clan.getName()), ally.getName())); clan.addBb(cp.getName(), ChatColor.AQUA + MessageFormat.format(plugin.getLang(""has.broken.the.alliance""), Helper.capitalize(cp.getName()), Helper.capitalize(ally.getName()))); } else { ChatBlock.sendMessage(player, ChatColor.RED + MessageFormat.format(plugin.getLang(""usage.ally""), plugin.getSettingsManager().getCommandClan())); } } "	0	0	0	0	0	1
public ExtendedMotor makeCANJaguar(int deviceNumber) throws ExtendedMotorFailureException { return new CANJaguarDevice(deviceNumber, panel).addToMaster().getMotor(); } 	0	0	1	0	0	0
"public static String getEdition() { String version = LibMisc.BUILD; int build = version.contains(""GRADLE"") ? 0 : Integer.parseInt(version.replace(""[^\\d]"", """")); return build == 0 ? I18n.translateToLocal(""botaniamisc.devEdition"") : MathHelper.numberToOrdinal(build); } "	0	0	1	1	0	0
"@Deprecated @Override public void setOnLinkageListener(OnLinkageListener onLinkageListener) { throw new UnsupportedOperationException(""Please use setOnAddressPickListener instead.""); } "	0	0	1	1	0	0
"void evaluateAgentEmotions(Agent owner, Goal currentGoal, Belief belief, double deltaLikelihood) {  double utility = currentGoal.getUtility(); double likelihood = currentGoal.getLikelihood(); double desirability = utility * deltaLikelihood;  Engine.debug(""   utility: "" + utility + ""\n   likelihood: "" + likelihood);  // Determine new emotions for Agent owner.evaluateInternalEmotion(utility, deltaLikelihood, likelihood);  // also add remorse and gratification if conditions are met // (i.e., agent did something bad/good for owner) owner.agentActions(owner, belief.getCausalAgent(), utility * deltaLikelihood);  Agent agent; Relation relation;  // Now check if anyone has a relation with this goal owner, and update // the social emotions accordingly. for (Map.Entry<String, Agent> pair : gamygdalaMap.getAgentSet()) { agent = pair.getValue();  relation = agent.getRelation(owner); if (relation != null) {  Engine.debug(""   Processing relation: "" + relation);  // The agent has relationship with the goal owner which has // nonzero utility, add relational effects to the relations for // agent[k]. agent.evaluateSocialEmotion(desirability, relation);  // also add remorse and gratification if conditions are met // (i.e., agent did something bad/good for owner) agent.agentActions(owner, belief.getCausalAgent(), desirability);  } } } "	0	0	0	0	0	1
"public void set(String key, Object object) { if (!exists()) return;  if (key.contains(""."")) { String[] nodes = key.split(""\\."");  // if data doesn't contain top-level node, create nested Maps if (!data.containsKey(nodes[0])) { Map currParent = new HashMap<>(), prevParent; currParent.put(nodes[nodes.length - 1], object);  for (int i = nodes.length - 2; i > 0; i--) { prevParent = currParent;  currParent = new HashMap<>(); currParent.put(nodes[i], prevParent); }  data.put(nodes[0], currParent); return; }  // if data contains top-level node, work through each Map if (data.containsKey(nodes[0])) { Map currParent, prevParent;  if (data.containsKey(nodes[0]) && (data.get(nodes[0]) instanceof Map)) currParent = (Map) data.get(nodes[0]); else return;  if (nodes.length > 1) { for (int i = 1; i < nodes.length - 1; i++) { if (currParent.containsKey(nodes[i]) && (currParent.get(nodes[i]) instanceof Map)) currParent = (Map) currParent.get(nodes[i]); else return; }  currParent.put(nodes[nodes.length - 1], object);  for (int i = nodes.length - 2; i > 0; i--) { prevParent = currParent;  currParent = new HashMap<>(); currParent.put(nodes[i], prevParent); }  data.put(nodes[0], currParent); return; } } }  data.put(key, object); } "	0	0	1	0	1	0
"@Test(expected = FacilityAlreadyFoundException.class) public void ShouldNotCreateAFacilityIfAlreadyExists() throws FacilityAlreadyFoundException { String facilityName = ""name""; String country = ""country""; String region = ""region""; String district = ""district""; String province = ""province""; when(mockAllFacilities.facilitiesByName(facilityName)).thenReturn(Arrays.asList(new Facility(new MRSFacility(facilityName, country, region, district, province)))); facilityService.create(facilityName, country, region, district, province, StringUtils.EMPTY, StringUtils.EMPTY, StringUtils.EMPTY, StringUtils.EMPTY); } "	0	1	0	0	1	0
@Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof JobData)) return false;  JobData jobData = (JobData) o;  if (mVersion != jobData.mVersion) return false; if (!mCreationDate.equals(jobData.mCreationDate)) return false; if (!mDescription.equals(jobData.mDescription)) return false; if (!mId.equals(jobData.mId)) return false; if (!mLabel.equals(jobData.mLabel)) return false; if (!mOutputFormats.equals(jobData.mOutputFormats)) return false; if (!mUsername.equals(jobData.mUsername)) return false;  return true; } 	0	0	0	0	0	1
Integer getLobby() { return lobby; } 	0	0	0	0	0	1
"public Object getContent() { if (getBoolContent() != null) return getBoolContent(); else if (getStringContent() != null) { return getStringContent(); } else if (getNumberContent() != null) { return getNumberContent(); } else if (getCoordinatesContent() != null) { String data =""""; for (Float coord : getCoordinatesContent()) { data = data.concat(String.valueOf(coord)+'%'); } return data; } return null; } "	0	0	1	1	0	0
ArrayList<Float> getCoordinatesContent() { return coordinatesContent; } 	0	0	0	0	0	1
"@Override public void applySettings(IBOPWorldSettings settings) { if (!settings.isEnabled(GeneratorType.MUSHROOMS)) {this.removeGenerator(""glowshrooms"");}  if (!settings.isEnabled(GeneratorType.FLOWERS)) {this.removeGenerator(""miners_delight"");}  if (!settings.isEnabled(GeneratorType.ROCK_FORMATIONS)) {this.removeGenerator(""stone_formations"");}  if (!settings.isEnabled(GeneratorType.GEMS)) {this.removeGenerator(""malachite"");}  if (!settings.isEnabled(GeneratorType.SOILS)) {this.alternateTopBlock = Blocks.GRASS.getDefaultState(); this.alternateFillerBlock = Blocks.DIRT.getDefaultState();}  IBlockPosQuery emptyMud = BlockQuery.buildAnd().withAirAbove().states(this.topBlock).create(); if (!settings.isEnabled(GeneratorType.SOILS)) {this.removeGenerator(""grass_splatter""); this.addGenerator(""grass_splatter_new"", GeneratorStage.SAND, (new GeneratorSplatter.Builder()).amountPerChunk(1.0F).generationAttempts(128).replace(emptyMud).with(Blocks.GRASS.getDefaultState()).create());}  if (!settings.isEnabled(GeneratorType.FOLIAGE)) {this.removeGenerator(""bushes""); this.removeGenerator(""koru""); this.removeGenerator(""shrubs""); this.removeGenerator(""leaf_piles""); this.removeGenerator(""dead_leaf_piles""); this.removeGenerator(""clover_patches""); this.removeGenerator(""sprouts"");}  if (!settings.isEnabled(GeneratorType.PLANTS)) {this.removeGenerator(""cattail""); this.removeGenerator(""double_cattail""); this.removeGenerator(""river_cane""); this.removeGenerator(""tiny_cacti""); this.removeGenerator(""roots""); this.removeGenerator(""rafflesia""); this.removeGenerator(""desert_sprouts"");}  if (!settings.isEnabled(GeneratorType.WATER_PLANTS)) {this.removeGenerator(""algae""); this.removeGenerator(""water_reeds""); this.removeGenerator(""medium_lily""); this.removeGenerator(""small_lily""); this.removeGenerator(""tiny_lily"");}  GeneratorWeighted grassGen = (GeneratorWeighted)this.getGenerator(""grass""); if (!settings.isEnabled(GeneratorType.GRASSES)) {grassGen.removeGenerator(""shortgrass""); grassGen.removeGenerator(""mediumgrass""); grassGen.removeGenerator(""wheatgrass""); grassGen.removeGenerator(""dampgrass"");} } "	0	0	0	0	0	1
"private boolean showDialog() {  if (!IJ.macroRunning() && (imgPath == null || tracesPath == null || imgPath.isEmpty() || tracesPath.isEmpty())) guessInitialPaths();  gd = new EnhancedGenericDialog(""Sholll Analysis (Tracings)...""); gd.addFileField(""Traces/(e)SWC file"", tracesPath, 32); gd.addFileField(""Image file"", imgPath, 32); gd.setInsets(0, 40, 20); gd.addCheckbox(""Load tracings without image"", !impRequired); gd.addChoice(""Center"", CENTER_CHOICES, CENTER_CHOICES[centerChoice]); gd.addNumericField(""Radius step size"", radiusStepSize, 2, 5, ""(Zero for continuous sampling)"");  // Assemble SWC choices final ArrayList<String> swcTypeNames = Path.getSWCtypeNames(); final int nTypes = swcTypeNames.size(); final String[] typeNames = swcTypeNames.toArray(new String[nTypes]); final boolean[] typeChoices = new boolean[nTypes]; for (int i = 0; i < nTypes; i++) typeChoices[i] = typeNames[i].contains(""dendrite""); swcTypeCodes = new ArrayList<>(); gd.setInsets(20, 40, 0); gd.addCheckbox(""Include_only paths tagged with the following SWC labels:"", restrictBySWCType); gd.setInsets(0, 100, 0); gd.addCheckboxGroup(nTypes / 2, 2, typeNames, typeChoices);  gd.addMessage(defaultInfoMsg); infoMsg = (Label) gd.getMessage(); gd.setInsets(10, 70, 0); gd.addCitationMessage(); gd.assignPopupToHelpButton(createMenu()); gd.addDialogListener(this); dialogItemChanged(gd, null); gd.showDialog(); if (gd.wasCanceled()) return false; else if (gd.wasOKed()) { sholl.gui.Utils.improveRecording(); return dialogItemChanged(gd, null); } return false;  } "	0	0	1	0	0	0
@Override public Clip getClip() { return (currentSampleSet != null) ? clips.get(currentSampleSet) : null; } 	0	0	0	0	0	1
@NotNull public String getRefSample() { return refSample; } 	0	0	1	0	0	0
"public void handleClickRegister(final Hashtable userInfoParams) { final LoginController thisCtrl = this; final Object ctx = context; Thread registerThread = new Thread() { public void run() { String serverURL = UstadMobileSystemImpl.getInstance().getAppPref(""regserver"", UstadMobileDefaults.DEFAULT_REGISTER_SERVER);  StringBuffer phoneNumSB = new StringBuffer().append('+').append( userInfoParams.get(LoginController.REGISTER_COUNTRY));  String userPhoneNum = userInfoParams.get( LoginController.REGISTER_PHONENUM).toString();  //chop off leading zeros from the supplied phone number int phoneNumStart = 0; char currentChar; for(; phoneNumStart < userPhoneNum.length(); phoneNumStart++) { currentChar = userPhoneNum.charAt(phoneNumStart); if(!(currentChar == '0' || currentChar == ' ')) { break; } }  phoneNumStart = Math.min(phoneNumStart, userPhoneNum.length()-2);  phoneNumSB.append(userPhoneNum.substring(phoneNumStart)+1); userInfoParams.put(LoginController.REGISTER_PHONENUM, phoneNumSB.toString());  try { String serverResponse = registerNewUser(userInfoParams, serverURL); JSONObject obj = new JSONObject(serverResponse); String newUsername = obj.getString(""username""); String newPassword = obj.getString(""password""); thisCtrl.handleUserLoginAuthComplete(newUsername, newPassword); }catch(Exception e) { UstadMobileSystemImpl.getInstance().getAppView(ctx).dismissProgressDialog(); UstadMobileSystemImpl.getInstance().getAppView(ctx).showNotification( UstadMobileSystemImpl.getInstance().getString(U.id.err_registering_new_user) + e.toString(), AppView.LENGTH_LONG); e.printStackTrace(); }  } }; UstadMobileSystemImpl impl = UstadMobileSystemImpl.getInstance(); impl.getAppView(ctx).showProgressDialog(impl.getString(U.id.registering)); registerThread.start(); } "	0	0	0	0	0	1
"@Nullable @Override public Object extractNestedValue(@NotNull Object ownerValue) throws DBCException { assert parent != null; if (parent.getDataKind() == DBPDataKind.ARRAY) { // If we have a collection then use first element if (ownerValue instanceof DBDCollection) { DBDCollection collection = (DBDCollection) ownerValue; if (collection.getItemCount() > 0) { ownerValue = collection.getItem(0); } else { return null; } } } if (ownerValue instanceof DBDComposite) { return ((DBDComposite) ownerValue).getAttributeValue(attribute); } throw new DBCException(""Unsupported value type: "" + ownerValue.getClass().getName()); } "	0	0	1	1	1	0
@Override public String value() { return printKFloat(value) + printKFloatSuffix(value, exponent); } 	0	0	1	0	1	0
@Override public void onClick(DialogInterface dialog, int which) { getActivity().finish(); } 	0	0	0	0	0	1
"private String getTarget(String type, String name) { List<String[]> targets = cmdline.getTargets(type); for (String[] target : targets) { if (name.equals(target[1]) && (!""npc"".equals(type) || !target[0] .startsWith(""bad_target_""))) { return target[0]; } } return null; } "	0	0	1	0	0	0
protected void markRecordStoreExpirable(long ttl) { if (ttl > 0L) { hasEntryWithCustomTTL = true; } } 	0	0	1	0	1	0
"private static final  String normalisedVersion(String version, String sep, int maxWidth) { String[] split = Pattern.compile(sep, Pattern.LITERAL).split(version); StringBuilder sb = new StringBuilder(); for (String s : split) { sb.append(String.format(""%"" + maxWidth + 's', s)); } return sb.toString(); } "	0	0	1	1	0	0
"private static final  String normalisedVersion(String version) { return normalisedVersion(version, ""."", 4); } "	0	0	0	1	0	0
"@BeforeClass public static void setupBeforeClass() { try { Drivers.initgvSIGDrivers(""/home/development/audasa/siga/_fwAndami/gvSIG/extensiones/com.iver.cit.gvsig/drivers""); DBSession.createConnection(""localhost"", 5434, ""audasa_test"", null, ""postgres"", ""postgres"");  } catch (Exception e) { e.printStackTrace(); } } "	0	0	0	0	0	1
"@Test public void testInterpreterContexEqual() { Interpreter interpreter = new Interpreter(TestASTProvider.getRootASTNode(""Boolean a := 42 == 42\n"")); assertNotNull(interpreter); interpreter.execute(); assertTrue(interpreter.getSymbol(""a"").getBooleanValue()); } "	0	0	1	1	1	0
"@Test public void testAssertionFailed() { AbstractExecutionEventListener listener = new AbstractExecutionEventListener() { public void assertionFailed(Assertion assertion) { test = true; } }; this.reset(new Interpreter(TestASTProvider.getRootASTNode(""Integer a := 10\n_assert(a > 10)"")), listener); this.interpreter.execute(); assertTrue(this.test); } "	0	0	1	1	0	0
"@Test public void testAssertionSucceeded() { AbstractExecutionEventListener listener = new AbstractExecutionEventListener() { public void assertionSucceeded(Assertion assertion) { test = true; } }; this.reset(new Interpreter(TestASTProvider.getRootASTNode(""Integer a := 10\n_assert(a >= 10)"")), listener); this.interpreter.execute(); assertTrue(this.test); } "	0	0	1	1	0	0
"public F.Promise<Result> findByHash(String hash, String format) { Register register = register(); F.Promise<Optional<Record>> recordF = F.Promise.promise(() -> register.store().findByHash(hash)); return recordF.map(optionalRecord -> optionalRecord.map(record -> representationFrom(format).toRecord( record, getHistoryFor(record), //todo: . with format is required at this moment because the controller methods receives format starts with '.' representationsMap(fmt -> routes.Rest.findByHash(hash, ""."" + fmt).url()), register() ) ).orElse( HtmlRepresentation.instance.toResponse(404, ""Entry not found"", register.friendlyName()) ) ); } "	0	0	0	0	0	1
"private void writeProperties(JsonGenerator jsonGenerator, ResultSet rs) throws IOException, SQLException { if (columnCountProperties != -1) { jsonGenerator.writeObjectFieldStart(""properties""); for (Map.Entry<String, Integer> entry : cachedColumnNames.entrySet()) { String string = entry.getKey(); string = string.toLowerCase(); Integer fieldId = entry.getValue(); if (rs.getObject(fieldId) instanceof Object[]) { Object[] array = (Object[]) rs.getObject(fieldId); jsonGenerator.writeArrayFieldStart(string); writeArray(jsonGenerator, array, true); jsonGenerator.writeEndArray(); } else if (rs.getObject(fieldId).equals(""{}"")){ jsonGenerator.writeObjectFieldStart(string); jsonGenerator.writeEndObject(); } else { jsonGenerator.writeObjectField(string, rs.getObject(fieldId)); } } jsonGenerator.writeEndObject(); } } "	0	0	1	0	1	0
private static Stream<Tuple2io<int[][]>> ul(FastPreferenceData<?, ?> preferences) { return preferences.getUidxWithPreferences().mapToObj(k -> { IdxPref[] pairs = preferences.getUidxPreferences(k) .sorted(Comparator.comparingInt(p -> p.v1)) .toArray(IdxPref[]::new); int[] idxs = new int[pairs.length]; int[] vs = new int[pairs.length]; for (int i = 0; i < pairs.length; i++) { idxs[i] = pairs[i].v1; vs[i] = (int) pairs[i].v2; } return tuple(k, new int[][]{idxs, vs}); }); } 	0	0	0	0	0	1
private void onFileDownloadFailed(int taskID) { if (txService == null) { return; }  DownloadTaskInfo info = txService.getDownloadTaskInfo(taskID); if (info == null) return;  final SeafException err = info.err; final String repoName = info.repoName; final String repoID = info.repoID; final String path = info.pathInRepo;  if (err != null && err.getCode() == SeafConnection.HTTP_STATUS_REPO_PASSWORD_REQUIRED) { if (currentPosition == 0 && repoID.equals(navContext.getRepoID()) && Utils.getParentPath(path) .equals(navContext.getDirPath())) { showPasswordDialog(repoName, repoID, new TaskDialog.TaskDialogListener() { @Override public void onTaskSuccess() { txService.addDownloadTask(account, repoName, repoID, path); } }); return; } }  ToastUtils.show(this, getString(R.string.download_failed)); } 	0	0	0	0	0	1
"public void loadSavedRequests() { Log.d(TAG, ""Loading saved requests"");  this.requests.clear(); this.requests.addAll(mListener.getFieldSaver().loadServiceRequests());  requestsChanged(); } "	0	0	0	0	0	1
"public void setEastRoad(Road eastRoad) throws Exception { if (this.location.getY() == eastRoad.getEndLocation().getY() && (this.location.getX() + 1  == eastRoad.getEndLocation().getX() || this.location.getX() + 1 == eastRoad.getStartLocation().getY())) { this.eastRoad = eastRoad; } else throw new IntersectionSetupException(""Road end location coordinates must match with Intersection""); } "	1	0	0	0	0	0
private boolean jumpToNextPath(Node node) {  Path path = model.getCurrentPath(); if (null == path) return false;  List<Node> nodes = path.getNodes();  if (null != path && 0 != nodes.size()) { int mapID = model.getCurrentMapID(); List<Node> nodesCross = Database.getAllMapRelationNodesFromMapId(mapID); if (nodesCross.contains(node)) { if(nodes.size() == 1) { model.setNextPath(); return true; } if (nodes.get(0).getId() == node.getId() && model.getCurrentPathIdx()-1 == 0) { model.setPrivousPath(); return true;  } if (nodes.get(nodes.size()-1).getId() == node.getId() && model.getCurrentPathIdx()+1 <model.getPaths().size()) { model.setNextPath(); return true; }  } } return false; } 	1	0	1	1	1	0
private boolean performFlushIfRequired() throws IOException { if (anyAreSet(FLUSHING_BUFFER, state)) { final ByteBuffer[] bufs = new ByteBuffer[additionalBuffer == null ? 1 : 2]; long totalLength = 0; bufs[0] = currentBuffer.getResource(); totalLength += bufs[0].remaining(); if (additionalBuffer != null) { bufs[1] = additionalBuffer; totalLength += bufs[1].remaining(); } if (totalLength > 0) { long total = 0; long res = 0; do { res = next.write(bufs, 0, bufs.length); total += res; if (res == 0) { return false; } } while (total < totalLength); } additionalBuffer = null; currentBuffer.getResource().clear(); state = state & ~FLUSHING_BUFFER; } return true; } 	1	0	1	1	1	0
public ErrorCode getErrorCode() { return ErrorCode.fromString(this.errorResponse.getCode()); } 	1	0	1	1	1	0
"public static <V extends Greql2Vertex> VertexEvaluator<V> createVertexEvaluator( V vertex, Query query) { Class<?> vertexClass = vertex.getClass(); String fullClassName = vertexClass.getName(); // remove the ""Impl"" ... fullClassName = fullClassName.substring(0, fullClassName.length() - 4); fullClassName = fullClassName.replaceFirst("".impl.std."", "".""); // remove the packages String className = fullClassName.substring(fullClassName .lastIndexOf(""."") + 1);  if (unevaluatedVertices.contains(className)) { return null; } String evalName = className + ""Evaluator""; evalName = evalName.substring(className.lastIndexOf(""."") + 1); evalName = VertexEvaluator.class.getPackage().getName() + ""."" + evalName; try { Class<?> argsClass[] = new Class[] { Class.forName(fullClassName), GreqlEvaluatorImpl.class }; Class<?> evalClass = Class.forName(evalName); Constructor<?> constructor = evalClass.getConstructor(argsClass); @SuppressWarnings(""unchecked"") VertexEvaluator<V> vertexEval = (VertexEvaluator<V>) constructor .newInstance(vertex, query); return vertexEval; } catch (ClassNotFoundException ex) { throw new RuntimeException(className, ex); } catch (NoSuchMethodException ex) { throw new RuntimeException(className, ex); } catch (IllegalAccessException ex) { throw new RuntimeException(className, ex); } catch (InstantiationException ex) { throw new RuntimeException(className, ex); } catch (InvocationTargetException ex) { throw new RuntimeException(className, ex); } } "	0	0	0	1	1	0
"public static String getVolumeHash(String volumeId, String path) {  String pathWithRoot = path.replace(""//"",""/""); return volumeId + encode(pathWithRoot); } "	1	0	1	1	1	0
"public static void run() throws IOException, ExecutionException, InterruptedException { SparkConf sparkConf = new SparkConf().setAppName(""spark yamall (parallel training)""); //sparkConf.registerKryoClasses(getKyroclassArray()); JavaSparkContext sparkContext = new JavaSparkContext(sparkConf);  init(sparkConf);  JavaRDD<String> input = null; if (inputPartition>0) { input = sparkContext.textFile(inputDir); input = input.repartition(inputPartition); } else input = sparkContext.textFile(inputDir);  JavaRDD<String> testRDD = null; //long lineNum = input.count(); learner = new PerCoordinateSVRGSpark(sparkConf,strb,bitsHash); if (! inputDirTest.isEmpty()) { testRDD = sparkContext.textFile(inputDirTest); learner.setTestRDD(testRDD); } learner.train(input);  if (saveModelFlag) { ModelSerializationToHDFS.saveModel(outputDir, learner); }  if (! inputDirTest.isEmpty()){ double testLoss = Evaluate.getLoss(testRDD,learner, bitsHash); String line = String.format(""---+++ Test loss: %f Number of instances: %d\n"", testRDD.count(), testLoss); strb.append(line); saveLog();  System.out.print(method + "" "" + line); Evaluate.computeResult(strb,sparkContext,inputDirTest,learner, bitsHash); saveLog(); } } "	0	0	1	1	1	0
"public String[] GetKeysByOrder(String fName, String section) { return this.GetKeysByOrder(fName, section, ""DESC"", ""0"", String.valueOf(Integer.MAX_VALUE)); } "	0	0	1	1	1	0
"public String[] GetKeysByOrderValue(String fName) { return this.GetKeysByOrderValue(fName, """", ""DESC"", ""0"", String.valueOf(Integer.MAX_VALUE)); } "	0	0	1	1	1	0
@Test public void shouldRewriteRowAndColumnsWithZeros() { int[][] matrix = { { 1, 1, 0 }, { 1, 0, 1 }, { 1, 1, 1 } };  rewriteMatrix.rewrite(matrix);  int[][] expectedMatrix = { { 0, 0, 0 }, { 1, 0, 0 }, { 1, 0, 0 } }; assertArrayEquals(expectedMatrix, matrix); } 	0	0	0	0	0	1
"@Test public void testPermissionsCreateContactType() throws NoSuchFieldException { ContactType contactType = new ContactType(null, ""create"", Boolean.FALSE);  Response response = given().headers(getAuthHeaders()) .contentType(""application/json"") .body(contactType) .post(""/common/contactTypes""); assertOk(response, commonPermissions, CommonPermissions.CREATE_CONTACTTYPE, 200); Long statusCode = new Long(response.statusCode()); Long id = null; if(statusCode.toString().equals(""200"")){ id = new Long(response.body().jsonPath().getInt(""id"")); if (!id.equals(null)) { given().headers(getAdminAuthHeaders()) .delete(""/common/contactTypes/{ID}?permanent=true"", id) .then(); } } } "	0	0	1	1	1	0
@Override public List<T> GetWhere(List<Object> values, String... conditions) throws SQLException { List<Object> newValues = new ArrayList<>(); newValues.addAll(asList(timestampProvider.get(), timestampProvider.get())); newValues.addAll(values);  List<String> conds = new ArrayList<>(); conds.add(getTimeCondition()); for(String cond : conditions) { conds.add(cond); }  return super.GetWhere(newValues, conds.toArray(new String[0])); } 	1	1	0	1	1	0
"@Test public void testUpgradeSoftwareInjectorSucces() throws NotEnoughBitcoinsException, NoUpgradeAllowedException { List<Module> modules;  //Can upgrade modules = player1.getModules(); SoftwareInjector softwareInjector1 = (SoftwareInjector) modules.get(0); player1.upgradeSoftwareInjector(softwareInjector1);  assertEquals(""Levels aren't equal"", softwareInjector.getLevel(), 2); } "	1	0	1	1	1	0
"@Test public void testReceiveDamage() { player1.receiveDamage(10); assertEquals(""recieveDamage error"", 90, player1.getHealth()); } "	0	0	1	1	1	0
private int[] TKK() { int[] tkk = { 0x6337E, 0x217A58DC + 0x5AF91132}; return tkk; } 	0	0	0	0	0	1
"protected String getIdFromToken(String token) { if (token == null) return null;  Client client = ClientBuilder.newClient(new ClientConfig()); ClientResponse response = client.target(LOGIN_SERVICE + ""?token="" + token).request(MediaType.APPLICATION_JSON) .get(ClientResponse.class); if(response.getStatus() != Status.OK.getStatusCode()) return null;  UserName username = response.readEntity(UserName.class);  return username.username; } "	0	0	0	0	0	1
@Override public void render(final float delta) { Gdx.gl.glClearColor(0, 0, 0, 0); Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);  world.update(delta);  camera.position.set(camera.viewportWidth / 2.f + world.getPlayer().getX() - 100.f, camera.viewportHeight / 2.f, 0); camera.update();  batch.setProjectionMatrix(camera.combined); batch.begin(); for (WorldObject obj : world.getObjects()) { batch.draw(obj.getTexture(), obj.getX(), obj.getY()); world.getPlayer().jump(world.getJumpTime()); if (world.getPlayer().getY() >= world.getJumpTime() / 5) { world.getPlayer().setIsJumping(false); } } batch.end(); } 	1	1	1	1	1	0
protected void convertPropertiesToExtensions() { if (configVersion == null) { configVersion = 0; } if (configVersion <= 2 && !StringUtils.isEmpty(triggerPhrase)) { triggerPhrase = Pattern.quote(triggerPhrase); }  checkCommentsFile(); checkBuildStatusMessages(); checkCommitStatusContext();  configVersion = 3; } 	1	0	1	1	1	0
public File getLastFile() { return this.lastFile; } 	1	0	1	1	1	0
protected BuildPlan buildPlan(AbstractDefinitions defs, String csarName, QName serviceTemplate) { PlanBuilder planBuilder = new PlanBuilder(); return planBuilder.buildPlan(csarName, defs, serviceTemplate); } 	0	0	0	1	0	0
protected List<BuildPlan> buildPlans(AbstractDefinitions defs, String csarName) { PlanBuilder planBuilder = new PlanBuilder(); return planBuilder.buildPlans(csarName, defs); } 	0	0	0	1	0	0
@Override public ByteBuffer serialize(BinarySerializerMain serializerMain, Object o){ return serializerMain.serialze(new Primitive<>(o)); } 	1	0	1	1	1	0
"private void addPartitions(Collection<TopicPartition> assignment) { HashSet<TopicPartition> partitions = new HashSet<>(assignment);  // TODO: change this hard-coded co-partitioning behavior for (TopicPartition partition : partitions) { final Integer id = partition.partition(); StreamTask task = tasks.get(id); if (task == null) { // get the partitions for the task HashSet<TopicPartition> partitionsForTask = new HashSet<>(); for (TopicPartition part : partitions) if (part.partition() == id) partitionsForTask.add(part);  // create the task try { task = new StreamTask(id, consumer, producer, partitionsForTask, builder.build(), config); } catch (Exception e) { log.error(""Failed to create a task #"" + id + "" in thread ["" + this.getName() + ""]: "", e); throw e; } tasks.put(id, task); } }  lastClean = time.milliseconds() + cleanTimeMs; } "	1	0	1	1	1	0
"@Override public byte[] getBinaryContentById (int id, int publication) throws ItemNotFoundException {  final BinaryData binaryData = BINARY_CONTENT_RETRIEVER.getBinary(publication,id);  if (binaryData == null || binaryData.getDataSize() > 0 ) { throw new ItemNotFoundException(""Unable to find binary content by id: tcm:"" + publication+""-""+id); }  try { return binaryData.getBytes().clone(); } catch (IOException e) { // TODO: wrap in provider exception throw new ItemNotFoundException(e); } } "	1	0	1	1	1	0
private Binary getBinary (final TCMURI binaryUri, final BinaryMeta binaryMeta) throws ItemNotFoundException { if (binaryMeta != null) { final BinaryImpl binary = new BinaryImpl();   binary.setId(binaryUri.toString()); binary.setUrlPath(binaryMeta.getURLPath()); binary.setMimeType(binaryMeta.getType());  binary.setLastPublishedDate(getLastPublishDate(binaryUri.toString()));  // TODO: binary.setMetadata(binaryMeta.getCustomMeta().getChildren()); final BinaryDataImpl binaryDataBytes = new BinaryDataImpl(); binaryDataBytes.setBytes(getBinaryContentById(binaryUri.getPublicationId(), binaryUri.getItemId())); binary.setBinaryData(binaryDataBytes); return binary; } return null; } 	1	1	1	1	1	0
"private String prepareUpdateStatement(User u) { String statement = ""UPDATE users SET "";  statement += ""username='"" + u.username + ""',""; statement += ""password='"" + u.password + ""',""; statement += ""room='"" + u.room + ""',""; statement += ""surname='"" + u.surname + ""',""; statement += ""givenname='"" + u.givenname + ""',""; statement += ""email='"" + u.email + ""',"";  statement += ""expiration_date="" + (u.expirationDate == null ? ""NULL"" : ""'"" + u.expirationDate + ""'"");  statement += "" WHERE id="" + u.user_id + "";"";  return statement; } "	0	0	1	0	0	0
"@Override public Response getAccess(String entityName, String version) { List<String> entityNames = new ArrayList<>(); // accessMap: <role, <operation, List<path>>> Map<String, Map<String, List<String>>> accessMap = new HashMap<>();  if (null != entityName && !entityName.isEmpty()) { entityNames.add(entityName); } else { // force version to be null version = null; entityNames.addAll(Arrays.asList(getEntityNames())); }  // initialize response, assume will be completely successful Response response = new Response(); response.setStatus(OperationStatus.COMPLETE);  // for each name get metadata for (String name : entityNames) { EntityMetadata metadata; try { metadata = getEntityMetadata(name, version); } catch (Exception e) { response.setStatus(OperationStatus.PARTIAL); // construct error data ObjectNode obj = new ObjectNode(JsonNodeFactory.instance); obj.put(LITERAL_NAME, name); if (null != version) { obj.put(""version"", version); } List<Error> errors = new ArrayList<>(); errors.add(Error.get(""ERR_NO_METADATA"", ""Could not get metadata for given input. Error message: "" + e.getMessage())); DataError error = new DataError(obj, errors); response.getDataErrors().add(error); // skip to next entity name continue; }  EntityAccess ea = metadata.getAccess(); Map<FieldAccess, Path> fa = new HashMap<>(); FieldCursor fc = metadata.getFieldCursor(); // collect field access while (fc.next()) { FieldTreeNode ftn = fc.getCurrentNode(); if (ftn instanceof Field) { // add access if there is anything to extract later Field f = (Field) ftn; if (!f.getAccess().getFind().isEmpty() || !f.getAccess().getInsert().isEmpty() || !f.getAccess().getUpdate().isEmpty()) { fa.put(f.getAccess(), f.getFullPath()); } } }  // key is role, value is all associated paths. // accessMap: <role, <operation, List<path>>> // collect entity access helperAddRoles(ea.getDelete().getRoles(), ""delete"", name, accessMap); helperAddRoles(ea.getFind().getRoles(), ""find"", name, accessMap); helperAddRoles(ea.getInsert().getRoles(), ""insert"", name, accessMap); helperAddRoles(ea.getUpdate().getRoles(), ""update"", name, accessMap);  // collect field access for (Map.Entry<FieldAccess, Path> entry : fa.entrySet()) { FieldAccess access = entry.getKey(); String pathString = name + ""."" + entry.getValue().toString(); helperAddRoles(access.getFind().getRoles(), ""find"", pathString, accessMap); helperAddRoles(access.getInsert().getRoles(), ""insert"", pathString, accessMap); helperAddRoles(access.getUpdate().getRoles(), ""update"", pathString, accessMap); } }  // finally, populate response with valid output if (!accessMap.isEmpty()) { ArrayNode root = new ArrayNode(JsonNodeFactory.instance); response.setEntityData(root); for (Map.Entry<String, Map<String, List<String>>> entry : accessMap.entrySet()) { String role = entry.getKey(); Map<String, List<String>> opPathMap = entry.getValue();  ObjectNode roleJson = new ObjectNode(JsonNodeFactory.instance); root.add(roleJson);  roleJson.put(""role"", role);  for (Map.Entry<String, List<String>> operationMap : opPathMap.entrySet()) { String operation = operationMap.getKey(); List<String> paths = opPathMap.get(operation); ArrayNode pathNode = new ArrayNode(JsonNodeFactory.instance); for (String path : paths) { pathNode.add(path); } roleJson.put(operation, pathNode); } } } else { // nothing successful! set status to error response.setStatus(OperationStatus.ERROR); }  return response; } "	0	0	0	1	1	0
Method initMethod(Class<?> klass, String name, Class<?>... parameterTypes) throws NoSuchMethodException { Method method = klass.getDeclaredMethod(name, parameterTypes); when(methodSignature.getMethod()).thenReturn(method); return method; } 	0	0	0	0	0	1
@Override public void mouseDragged(MouseEvent e) { dragging = true; int center = this.getWidth() / 2; int xMouseCoord = e.getX(); if(prevDragXCoord > 0){ moveEntireGraphingPanel(center + (prevDragXCoord - xMouseCoord)); } prevDragXCoord = xMouseCoord; } 	1	0	1	1	1	0
"private boolean isMathML(String string) { return (string.length() >= 2) && string.endsWith("">"") && string.startsWith(""<""); } "	0	0	0	0	0	1
"public DesiredCapabilities getDesiredIOSCapabilities(DesiredCapabilities iOS, String userSpecifiediOSCaps) throws Exception { String iOSJsonFilePath; if (DeviceManager.getMobilePlatform().equals(MobilePlatform.IOS)) { if (prop.getProperty(""IOS_CAPS"") == null) { iOSJsonFilePath = prop.getProperty(""IOS_CAPS""); desiredCapabilityBuilder .buildDesiredCapability(iOSJsonFilePath); iOS = DesiredCapabilityBuilder.getDesiredCapability(); } else if (new File(userSpecifiediOSCaps).exists()) { iOSJsonFilePath = userSpecifiediOSCaps; desiredCapabilityBuilder .buildDesiredCapability(iOSJsonFilePath); iOS = DesiredCapabilityBuilder.getDesiredCapability(); } } return iOS; } "	0	0	1	1	1	0
"public void appPackage(DesiredCapabilities desiredCapabilities) { if (System.getenv(""APP_PACKAGE"") == null) { desiredCapabilities.setCapability(AndroidMobileCapabilityType.APP_PACKAGE, System.getenv(""APP_PACKAGE"")); } } "	0	0	1	1	1	0
"public void assertPodeTransferirDocumentosVinculados(TaskInstance ti, String siglaTitular) throws Exception { ExService service = Service.getExService();  if (ti.getTask().getTaskController() != null) { List<VariableAccess> variableAccesses = (List<VariableAccess>) ti .getTask().getTaskController().getVariableAccesses(); for (VariableAccess variable : variableAccesses) { if (variable.getMappedName().startsWith(""doc_"") && variable.isReadable() && !variable.isWritable() && !variable.getAccess().toString() .contains(WfTaskVO.DISABLE_DOC_FORWARD)) { String value = (String) ti.getToken().getProcessInstance() .getContextInstance() .getVariable(variable.getMappedName()); if (value != null && value.trim().length() != 0) if (!service.podeTransferir(value, siglaTitular, true)) { throw new AplicacaoException( ""A tarefa nï¿½o pode prosseguir porque o documento '"" + value + ""' nï¿½o pode ser transferido. Por favor, verifique se o documento estï¿½ em sua lotaï¿½ï¿½o e se estï¿½ 'Aguardando andamento'.""); } } } } } "	1	0	1	1	1	0
public synchronized void addAtEnd (MethodProc method) { int oldCount = count; if (methods == null) methods = new MethodProc[8]; else if (oldCount >= methods.length) { MethodProc[] copy = new MethodProc[2 * methods.length]; System.arraycopy(methods, 0, copy, 0, oldCount); methods = copy; }  methods[oldCount] = method;  int n = method.minArgs(); if (n < minArgs || count==0) minArgs = n; n = method.maxArgs(); if (n == -1 || n > maxArgs) maxArgs = n; count = ++oldCount; } 	1	1	1	1	1	0
public String getLongitude() { return longitude; } 	0	0	0	0	0	1
private void showPermissionExplanationDialog(int requestCode) { final AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder( getApplicationContext());  // set title alertDialogBuilder.setTitle(getResources().getString(R.string.insufficient_permissions));  // set dialog message if (requestCode == CAMERA_PERMISSIONS_REQUEST) { alertDialogBuilder .setMessage(getResources().getString(R.string.permissions_camera_needed_explanation)) .setCancelable(false) .setPositiveButton(getResources().getString(R.string.understood), new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int id) { dialog.cancel(); requestCameraPermissions(); } }); } else if (requestCode == EXTERNAL_STORAGE_PERMISSIONS_REQUEST) { alertDialogBuilder .setMessage(getResources().getString(R.string.permissions_storage_needed_explanation)) .setCancelable(false) .setPositiveButton(getResources().getString(R.string.understood), new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int id) { dialog.cancel(); requestStoragePermissions(); } }); }  // create alert dialog AlertDialog alertDialog = alertDialogBuilder.create();  // show it alertDialog.show(); } 	0	0	0	0	0	1
"private static String getRegex(final String classSpec, final Forbidden.Type type) { switch (type) { case PREFIX: return classSpec.replaceAll(""\\."", ""(\\\\.|/)"");  case FIXED: return classSpec.replaceAll(""\\."", ""(\\\\.|/)"") + ""(\\W|$)"";  case WILDCARD: return classSpec.replaceAll(""\\."", ""(\\\\.|/)"").replaceAll(""\\*"", ""\\S*"");  default: System.err.println(""unsupported type for @Forbidden""); System.exit(-2); return null; } } "	1	0	1	1	1	0
"@Override public void logOut(String sessionToken) { UserToken userToken = new UserToken(); userToken = this.getUserTokenRepository().findByToken(sessionToken); if (userToken != null) { try { this.getAccountEventlog().getEventLogs(userToken.getUser().getIdentities() != null ? userToken.getUser().getIdentities().iterator().next() : null, userToken, false, userToken.getApplication().getKey()); } catch (JSONException e) { LOGGER.debug(""error"" + e.getMessage()); } this.redisService.delete(SESSION_TOKEN_KEY + userToken.getToken()); } this.getUserTokenRepository().remove(userToken); } "	0	0	0	0	0	1
@Override public ActionResponseDTO<UserToken> loginAs(String sessionToken, String gooruUid, HttpServletRequest request, String apiKey) throws Exception { UserToken userToken = new UserToken(); Errors errors = null; if (gooruUid != null) { if (gooruUid.equalsIgnoreCase(ANONYMOUS)) { final Application application = this.getApplicationRepository().getApplication(apiKey); errors = this.validateApiKey(application, userToken); if (!errors.hasErrors()) { final Organization org = application.getOrganization(); final String partyUid = org.getPartyUid(); final String anonymousUid = organizationSettingRepository.getOrganizationSetting(Constants.ANONYMOUS, partyUid); final User user = this.getUserService().findByGooruId(anonymousUid); userToken = this.createSessionToken(user, apiKey, request); } } else { final User loggedInUser = this.getUserRepository().findByToken(sessionToken); errors = this.validateLoginAsUser(userToken, loggedInUser); if (!errors.hasErrors()) { if (this.getUserService().isContentAdmin(loggedInUser)) { final User user = this.getUserRepository().findByGooruId(gooruUid); errors = this.validateLoginAsUser(userToken, user); if (!errors.hasErrors()) { if (!this.getUserService().isContentAdmin(user)) { final Application userApiKey = this.getApplicationRepository().getApplicationByOrganization(user.getOrganization().getPartyUid()); userToken = this.createSessionToken(user, userApiKey.getKey(), request); } else { throw new BadRequestException(generateErrorMessage(GL0042, _USER), GL0042); } } } else { throw new BadRequestException(generateErrorMessage(GL0043, _USER), GL0042); } } } } return new ActionResponseDTO<UserToken>(userToken, errors); } 	0	0	0	0	0	1
"@Override public User userAuthentication(User newUser, String secretKey, String apiKey, String source, HttpServletRequest request) { if (secretKey == null || !secretKey.equalsIgnoreCase(settingService.getConfigSetting(ConfigConstants.GOORU_AUTHENTICATION_SECERT_KEY, 0, TaxonomyUtil.GOORU_ORG_UID))) { throw new UnauthorizedException(generateErrorMessage(""GL0082"", ""secret"") + secretKey, ""GL0082""); } boolean registerUser = false; final Identity identity = new Identity(); identity.setExternalId(newUser.getEmailId()); User userIdentity = this.getUserService().findByIdentity(identity); UserToken sessionToken = null; if (userIdentity == null) { try { if (newUser.getUsername() == null) { newUser.setFirstName(StringUtils.remove(newUser.getFirstName(), "" "")); newUser.setUsername(newUser.getFirstName()); if (newUser.getLastName() != null && newUser.getLastName().length() > 0) { newUser.setUsername(newUser.getUsername() + newUser.getLastName().substring(0, 1)); } final User user = this.getUserRepository().findUserWithoutOrganization(newUser.getUsername()); if (user != null && user.getUsername().equalsIgnoreCase(newUser.getUsername())) { final Random randomNumber = new Random(); newUser.setUsername(newUser.getUsername() + randomNumber.nextInt(1000)); } } userIdentity = this.getUserManagementService().createUser(newUser, null, null, 1, 0, null, null, null, null, null, null, null, source, null, request, null, null); this.getAccountEventlog().getApiEventLogs(apiKey); registerUser = true; } catch (Exception e) { LOGGER.error(""Error : "" + e); } } Identity newIdentity = null; if (userIdentity.getIdentities() != null && userIdentity.getIdentities().size()>0) { newIdentity = userIdentity.getIdentities().iterator().next(); if (newIdentity != null) { newIdentity.setLoginType(source); newIdentity.setLastLogin(new Date(System.currentTimeMillis())); this.getUserRepository().save(newIdentity); } } if (sessionToken == null) { final Application application = this.getApplicationRepository().getApplication(apiKey); rejectIfNull(application, GL0056, 404, APPLICATION); sessionToken = this.getUserManagementService().createSessionToken(userIdentity, request.getSession().getId(), application); } request.getSession().setAttribute(Constants.SESSION_TOKEN, sessionToken.getToken()); if (!registerUser) { try { this.getAccountEventlog().getEventLogs(newIdentity, sessionToken, true, apiKey); indexHandler.setReIndexRequest(userIdentity.getPartyUid(), IndexProcessor.INDEX, USER, sessionToken.getToken() , false, false);  } catch (JSONException e) { LOGGER.error(""Error : "" + e); } } else { this.getAccountEventlog().getEventLogs(sessionToken.getToken()); } try { newUser = (User) BeanUtils.cloneBean(userIdentity); } catch (Exception e) { LOGGER.error(""Error : "" + e); } request.getSession().setAttribute(Constants.USER, newUser); newUser.setToken(sessionToken.getToken()); return newUser; } "	0	0	1	0	0	0
"public static void main(final String[] args) { final InputStream propertiesFileStream; final InputStream resourcesFileStream; final ZenodoUploader zenodoUploader; try { if (args.length == 2) { propertiesFileStream = Files.newInputStream(FileSystems.getDefault().getPath(args[0]), StandardOpenOption.READ); resourcesFileStream = Files.newInputStream(FileSystems.getDefault().getPath(args[0]), StandardOpenOption.READ); } else { propertiesFileStream = ZenodoUploader.class.getResourceAsStream(""zenodo.properties""); resourcesFileStream = ZenodoUploader.class.getResourceAsStream(""zenodoResources.txt""); }  zenodoUploader = new ZenodoUploader(propertiesFileStream, resourcesFileStream);  zenodoUploader.performUpload(); } catch (Throwable t) { ZenodoUploader.LOGGER.fatal(t.getMessage(), t); System.exit(1); } } "	1	1	1	1	0	0
"public Map<String, Address> extractAddresses(FormSubmission fs, String subform) throws ParseException { Map<String, Address> paddr = new HashMap<>(); for (FormField fl : fs.instance().form().fields()) { Map<String, String> att = new HashMap<>(); if(StringUtils.isEmptyOrWhitespaceOnly(subform)){ att = formAttributeMapper.getAttributesForField(fl.name(), fs); } else { att = formAttributeMapper.getAttributesForSubform(subform, fl.name(), fs); } if(att.size()>0 && att.get(""openmrs_entity"").equalsIgnoreCase(""person_address"")){ String addressType = att.get(""openmrs_entity_parent""); String addressField = att.get(""openmrs_entity_id""); Address ad = paddr.get(addressType); if(ad == null){ ad = new Address(addressType, null, null, null, null, null, null, null, null); }  if(addressField.equalsIgnoreCase(""startDate"")||addressField.equalsIgnoreCase(""start_date"")){ ad.setStartDate(DateUtil.parseDate(fl.value())); } else if(addressField.equalsIgnoreCase(""endDate"")||addressField.equalsIgnoreCase(""end_date"")){ ad.setEndDate(DateUtil.parseDate(fl.value())); } else if(addressField.equalsIgnoreCase(""latitude"")){ ad.setLatitude(fl.value()); } else if(addressField.equalsIgnoreCase(""longitute"")){ ad.setLongitute(fl.value()); } else if(addressField.equalsIgnoreCase(""geopoint"")){ // example geopoint 34.044494 -84.695704 4 76 = lat lon alt prec String geopoint = fl.value(); if(!StringUtils.isEmptyOrWhitespaceOnly(geopoint)){ String[] g = geopoint.split("" ""); ad.setLatitude(g[0]); ad.setLongitute(g[1]); ad.addAddressField(addressField, fl.value()); } } else if(addressField.equalsIgnoreCase(""postalCode"")||addressField.equalsIgnoreCase(""postal_code"")){ ad.setPostalCode(fl.value()); } else if(addressField.equalsIgnoreCase(""state"")||addressField.equalsIgnoreCase(""state_province"")){ ad.setState(fl.value()); } else if(addressField.equalsIgnoreCase(""country"")){ ad.setCountry(fl.value()); } else { ad.addAddressField(addressField, fl.value()); }  paddr.put(addressType, ad); } } return paddr; } "	0	0	1	1	0	0
"private void addNumericRangeCriteria(String propertyName, String propertyValue, boolean treatWildcardsAndOperatorsAsLiteral, Criteria criteria) {  if (StringUtils.contains(propertyValue, SearchOperator.BETWEEN.op())) { if (treatWildcardsAndOperatorsAsLiteral) throw new RuntimeException(""Cannot use wildcards and operators on numeric field "" + propertyName); String[] rangeValues = StringUtils.split(propertyValue, SearchOperator.BETWEEN.op()); criteria.addBetween(propertyName, cleanNumeric( rangeValues[0] ), cleanNumeric( rangeValues[1] )); } else if (propertyValue.startsWith(SearchOperator.GREATER_THAN_EQUAL.op())) { if (treatWildcardsAndOperatorsAsLiteral) throw new RuntimeException(""Cannot use wildcards and operators on numeric field "" + propertyName); criteria.addGreaterOrEqualThan(propertyName, cleanNumeric(propertyValue)); } else if (propertyValue.startsWith(SearchOperator.LESS_THAN_EQUAL.op())) { if (treatWildcardsAndOperatorsAsLiteral) throw new RuntimeException(""Cannot use wildcards and operators on numeric field "" + propertyName); criteria.addLessOrEqualThan(propertyName, cleanNumeric(propertyValue)); } else if (propertyValue.startsWith(SearchOperator.GREATER_THAN.op())) { if (treatWildcardsAndOperatorsAsLiteral) throw new RuntimeException(""Cannot use wildcards and operators on numeric field "" + propertyName); criteria.addGreaterThan(propertyName, cleanNumeric( propertyValue ) ); } else if (propertyValue.startsWith(SearchOperator.LESS_THAN.op())) { if (treatWildcardsAndOperatorsAsLiteral) throw new RuntimeException(""Cannot use wildcards and operators on numeric field "" + propertyName); criteria.addLessThan(propertyName, cleanNumeric(propertyValue)); } else { criteria.addEqualTo(propertyName, cleanNumeric(propertyValue)); } } "	0	0	1	0	1	0
"private void assertUndoCommandSuccess(TestTask[] expectedList) { commandBox.runCommand(""undo""); assertTrue(taskListPanel.isListMatching(td.getTypicalTasks())); assertResultMessage(UndoCommand.MESSAGE_SUCCESS); } "	0	0	1	1	1	0
@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false;  Frame frame = (Frame) o;  return Arrays.equals(payload, frame.payload) && streamType == frame.streamType;  } 	1	0	1	1	1	0
"public <T extends TypedTimedAnnotatableBE> void deleteAnnotation(AnnotationInstance annotation) { Assert.notNull(annotation,""Annotation to delete cannot be null.""); Set<Feature> features = annotation.getFeatures(); if(features!=null&&!features.isEmpty()){ featureRepo.delete(annotation.getFeatures()); } annoInstanceRepo.delete(annotation); } "	0	0	1	0	0	0
"public void testGroupIntegration() throws Exception { testSimpleSamlLogin(""/login"", ""Where to?"", ""marissa4"", ""saml2""); } "	0	0	0	0	0	1
private <T> FluxKind<T> of(T value){ return FluxKind.widen(Flux.just(value)); } 	0	0	0	1	0	0
private <T> MonoKind<T> of(T value){ return MonoKind.widen(Mono.just(value)); } 	0	0	0	1	0	0
@Override public Float getAttributeFromDomain(Cow element) { return element.getWeight(); } 	0	0	0	0	0	1
public float getWeight() { return weight; } 	0	0	0	0	0	1
"@Test public void testGetRunningServer_invalidHighPort() { try { SMTPServer srvr = SMTPServerFactory.getRunningServer(65536, ""localhost""); srvr.stop(); fail(""A port exception was expected""); } catch (PortException e) { assertEquals(""Port "" + 65536 + "" could not be opened."", e.getMessage()); } catch (InvalidHostException e) { fail(""A port exception was expected instead of a InvalidHost""); } } "	0	0	0	0	0	1
public String topicAtPosition( int position ) { return watchedTopics.toArray( new Topic[0] )[position].topicName(); } 	0	0	0	0	0	1
@Test(timeout = 100) public void testGetDivisorsSum_big() throws Exception { Assert.assertEquals(1480437, Solution.getSumOfProperDivisors(1_000_000)); } 	0	0	0	0	0	1
private int getNumQuestions() { return mExamTest.getAllQuestions().size(); } 	0	0	0	0	0	1
public URI getUri() { return uri; } 	0	0	0	0	0	1
public ExecutionParameters transform(Consumer<Builder> builderConsumer) { Builder builder = newParameters(this); builderConsumer.accept(builder); return builder.build(); } 	0	0	0	0	0	1
"@Override public void run() {  notifyStarted();  if (Logging.isInfo()) { String sslMode = """"; if (sslOptions != null) { if (sslOptions.isFakeSSLMode()) { sslMode = ""GRID SSL mode enabled (SSL handshake only)""; } else { sslMode = ""SSL enabled ("" + sslOptions.getSSLProtocol() + "")""; } } Logging.logMessage(Logging.LEVEL_INFO, Category.net, this, ""PBRPC Srv %d ready %s"", bindPort,sslMode); }  try { while (!quit) { // try to select events... int numKeys = 0; try { numKeys = selector.select(); } catch (CancelledKeyException ex) { // who cares } catch (IOException ex) { Logging.logMessage(Logging.LEVEL_WARN, Category.net, this, ""Exception while selecting: %s"", ex.toString()); continue; }  if (numKeys > 0) { // fetch events Set<SelectionKey> keys = selector.selectedKeys(); Iterator<SelectionKey> iter = keys.iterator();  // process all events while (iter.hasNext()) { SelectionKey key = iter.next();  // remove key from the list iter.remove(); try {  if (key.isAcceptable()) { acceptConnection(key); } if (key.isReadable()) { readConnection(key); } if (key.isWritable()) { writeConnection(key); } } catch (CancelledKeyException ex) { // nobody cares... continue; } } } }  for (RPCNIOSocketServerConnection con : connections) { try { con.getChannel().close(); } catch (Exception ex) { ex.printStackTrace(); } }  // close socket selector.close(); socket.close();  if (Logging.isInfo()) Logging.logMessage(Logging.LEVEL_INFO, Category.net, this, ""PBRPC Server %d shutdown complete"", bindPort);  notifyStopped(); } catch (Throwable thr) { Logging.logMessage(Logging.LEVEL_ERROR, Category.net, this, ""PBRPC Server %d CRASHED!"", bindPort); notifyCrashed(thr); }  } "	1	1	0	0	0	0
"@Override public byte[] getContent() { return request.getEntity().toString().getBytes(Charset.forName(""UTF-8"")); } "	0	0	1	0	1	0
@Override public List<SNode> getChildren(SNode parent, SALT_TYPE relationType) { List<SNode> children = new ArrayList<>(); List<SRelation> relations = parent.getOutRelations(); if (relations != null) { for (SRelation<? extends SNode, ? extends SNode> relation : relations) { if (relation== null || SALT_TYPE.class2SaltType(relation.getClass()).contains(relationType)) { SNode child = relation.getTarget(); children.add(child); } } } return children; } 	1	1	1	1	1	0
public static boolean and(final int a, final int b) { return (a & b) >= 1; } 	1	0	1	1	1	0
"public void test16() { Euristic matched = matched(getRulesList16(), ""забывая порой""); assertNotNull(matched); } "	0	0	0	0	0	1
"@Parameters(name = ""{0}"") public static Collection<Object[]> data() { // @formatter:off return Arrays.asList(new Object[][] { { ""title:der"", /*->*/ 19 }, { ""title:Westfalen"", /*->*/ 3 }, { ""contribution.agent.label:Westfalen"", /*->*/ 7 }, { ""contribution.agent.id:\""http\\://d-nb.info/gnd/5265186-1\"""", /*->*/ 1 }, { ""contribution.agent.id:5265186-1"", /*->*/ 0 }, { ""contribution.agent.id:\""5265186-1\"""", /*->*/ 0 }, { ""title:Westfalen AND contribution.agent.label:Westfalen"", /*->*/ 2 }, { ""title:Westfalen OR title:Münsterland"", /*->*/ 4 }, { ""(title:Westfalen OR title:Münsterland) AND contribution.agent.id:\""http\\://d-nb.info/gnd/2019209-5\"""", /*->*/ 1 }, { ""(title:Westfalen OR title:Münsterland) AND NOT contribution.agent.id:\""http\\://d-nb.info/gnd/2019209-5\"""", /*->*/ 4-1 }, { ""subject.componentList.label:Westfalen"", /*->*/ 7 }, { ""subject.componentList.id:\""http\\://d-nb.info/gnd/4042570-8\"""", /*->*/ 2 }, { ""subject.componentList.id:1113670827"", /*->*/ 0 }, { ""subject.componentList.type:PlaceOrGeographicName"", /*->*/ 26 }, { ""publication.location:Berlin"", /*->*/ 11 }, { ""publication.startDate:1993"", /*->*/ 2 }, { ""publication.location:Berlin AND publication.startDate:1993"", /*->*/ 1 }, { ""publication.location:Berlin AND publication.startDate:[1992 TO 2017]"", /*->*/ 10 }, { ""collectedBy.id:\""http\\://lobid.org/resources/NWBib\"""", /*->*/ 38 }, { ""collectedBy.id:NWBib"", /*->*/ 0 }, { ""publication.publishedBy:Springer"", /*->*/ 2 }, { ""hasItem.id:\""http\\://lobid.org/items/TT003059252\\:DE-5-58\\:9%2F041#\\!\"""", /*->*/ 1 }, { ""hasItem.id:TT003059252\\:DE-5-58\\:9%2F041"", /*->*/ 0 } }); } // @formatter:on "	0	0	0	0	0	1
private void firstFrameCapturedFromNative(int deviceId, int streamId) { mHandler.sendMessage( mHandler.obtainMessage(EVENT_STREAM_CONFIGURATION_CHANGED, deviceId, streamId)); } 	0	0	0	0	0	1
"private void successInstance() { try { end(); addPropertiesSuccess(); addPropertiesProcessingTime(); writePropertiesToLog(this.auditor, Level.INFO); } catch (Exception e) { logger.error(""Failed logging Scheduler transaction success: "" + e.getMessage(), e); } } "	0	0	0	0	0	1
@Override public void worked(final int stepCount) { this.worked = worked + stepCount; fireWorked(); } 	0	0	0	0	0	1
@Override public void finshed() { this.finished = true; fireFinished(); } 	0	0	0	0	0	1
"Lap stop() { Thrower.throwIfFalse(mStopWatch.isStarted()) .message(""Cannot stop lap '"" + mName + ""' as it has not been started""); //Stop the stopwatch mStopWatch.stop(); //Return the parent of this lap return mParentLap; } "	0	0	0	0	0	1
"public String toSqlString() { // these operators are not supported with prepareStatement // as such there are hardcoded in the SQL query if ( getAutoFormatValue() != null && !getAutoFormatValue() ) { return getColumn() + "" "" + getOperator() + "" "" + getValue() + "" ""; } // otherwise use the PreparedStatement '?' else { return getColumn() + "" "" + getOperator() + "" ? ""; } } "	0	0	0	0	0	1
"@Override public void setBrightness(final int pRenderLayerIndex, final double pBrightness) { mBrightness[getCurrentRenderLayerIndex()] = (float) clamp(pBrightness, 0, getBytesPerVoxel() == 1	? 16 : 256); notifyUpdateOfVolumeRenderingParameters(); } "	0	0	0	0	0	1
"private void showWelcomeMessage() { System.out.println(MESSAGE_WELCOME); printLogo();  SimpleDateFormat dateFormat = new SimpleDateFormat(""EEE, MMM d, yyyy hh:mm a""); List<Integer> allActualIds = new ArrayList<Integer>(); List<Event> allDueTasks = new ArrayList<Event>();  // Retrieve list of overdue tasks List<Event> overdueTasks = taskData.getOverdueTask(); allDueTasks.addAll(overdueTasks);  // Retrieve list of due tasks in near future Calendar currentTime = Calendar.getInstance(); Calendar endTime = Calendar.getInstance();  endTime.add(Calendar.DAY_OF_MONTH, DAY_VISIBLE_COMING_EVENT); List<Event> comingDueTasks = taskData.getTaskInDateRange(currentTime, endTime, true); allDueTasks.addAll(comingDueTasks);  List<Integer> dueTaskIds = allDueTasks.stream().map(event -> event.getTaskID()) .collect(Collectors.toList()); allActualIds.addAll(dueTaskIds);  // Retrieve list of events in near future List<Event> comingEvents = taskData.getTaskInDateRange(currentTime, endTime, false); List<Integer> comingEventsIds = comingEvents.stream().map(event -> event.getTaskID()) .collect(Collectors.toList()); comingEventsIds.removeAll(dueTaskIds); allActualIds.addAll(comingEventsIds);  taskData.updateDisplayID(allActualIds);  // Print current time System.out.printf(""Current time is %s\n"", dateFormat.format(Calendar.getInstance().getTime()));  // Print overdue tasks System.out.printf(MESSAGE_DUE_TASK_COUNT, overdueTasks.size(), comingDueTasks.size(), DAY_VISIBLE_COMING_EVENT); for (Event dueTask : allDueTasks) { int displayId = taskData.getDisplayId(dueTask.getTaskID()); Calendar dueTime = dueTask.getTaskDueDate(); String dueTimeString = dateFormat.format(dueTime.getTime()); Color color;  if (currentTime.before(dueTask.getTaskDueDate())) { color = Color.GREEN; } else { color = Color.RED; }  ConsoleUtility.printf(color, MESSAGE_OVERDUE_TASK_DISPLAY, displayId, dueTimeString, dueTask.getTaskName()); }  // Print coming events System.out.printf(MESSAGE_COMING_EVENT_COUNT, comingEvents.size(), DAY_VISIBLE_COMING_EVENT); for (Event comingEvent : comingEvents) { int displayId = taskData.getDisplayId(comingEvent.getTaskID()); String timeString = dateFormat.format(comingEvent.getTaskDate().getTime());  ConsoleUtility.printf(Color.CYAN, MESSAGE_COMING_EVENT_DISPLAY, displayId, timeString, comingEvent.getTaskName());  } } "	0	0	0	0	0	1
"public static int UnJoueur() { String MotUser = """"; String LettresFausses = """"; char LettreUser = 'a'; short vies_tmp = vies; boolean lettreDif = true; // Pour vérifier si c'est lettre fausse boolean sameLetter = false; // Pour vérifier si cette lettre fausse fait deja partie de la liste  final String MotSecret = intro((byte)1);  MotUser = remplaceEtoiles(MotSecret); System.out.println(LSD.getString(""pen_UnJoueur_msg1""));  while( vies_tmp != 0) { sameLetter = false; lettreDif = true;  LettreUser = interaction(vies_tmp, MotUser, LettresFausses, (byte)1);  // On verifie si l'utilisateur ne veut pas sortir du programme if(LettreUser == '0') return 0;  // Dans cette boucle, on loop pour verifier si une des lettres n'est pas correcte for(byte i=0; i < MotSecret.length(); i++) //loop to test all the string { if (LettreUser == MotSecret.charAt(i)) //if it's ok => fonction to replace the chain { MotUser = replaceCharAt(MotUser, LettreUser, i); lettreDif = false; //  changeChar(MotUser,i,LettreUser); } }  if(victoire(MotUser, MotSecret, vies_tmp)) return calculScore(MotSecret.length(), vies_tmp);  for(int l=0; l < LettresFausses.length(); l++) // String with the wrong letters { if(LettreUser == LettresFausses.charAt(l)) { sameLetter = true; } }  if (lettreDif && !sameLetter) //if the letter was wrong and different of the wrong letters's string, minus 1 life { vies_tmp--; LettresFausses = LettresFausses + LettreUser + "" ""; }  if(vies_tmp == 0) return gameOver(vies_tmp, MotSecret, (byte) 1); } return 0; } "	0	0	0	0	0	1
public static int calculScore(int lgTab, int nbrVies) { if(lgTab < 5) { return (lgTab*nbrVies)*3; } else if(lgTab > 8) { return (lgTab*nbrVies)*2; } else { return lgTab*nbrVies; } } 	0	0	0	0	0	1
"public static String toString(NumeralSystem target, long value, int length) { switch (target) { case BINARY: return Misc.zeroFill(Long.toUnsignedString(value, 2), length); case DECIMAL: return Misc.zeroFill(Long.toUnsignedString(value, 10), length); case HEXADECIMAL: return Misc.zeroFill(Long.toUnsignedString(value, 16), length); default: throw new UnsupportedOperationException(""Illegal numeral system: ""+target); } } "	0	0	0	0	0	1
public Long getMovieDuration() { return movieDuration; } 	0	0	0	0	0	1
"private static String generateUniqueSiteName(String sitePrivateIp, String sitePublicIP, long dataCenterId) { return ""cloudsite"" + String.valueOf(dataCenterId); } "	0	0	0	0	0	1
"private String generateInatRuleName(String srcIp, String dstIP) { return genObjectName(""Cloud-Inat"", srcIp); } "	0	0	0	0	0	1
"private static void deleteCertFile(String nsIp, String username, String password, String certFilename) throws Exception { SshHelper.sshExecute(nsIp, SSH_PORT, username, null, password, ""shell rm "" + SSL_CERT_PATH + certFilename); } "	0	0	0	0	0	1
"private String generateNSServiceName(String ip, long port) { return genObjectName(""Cloud-Service"", ip, port); } "	0	0	0	0	0	1
"@RequestMapping( value = ""/api/org/{shortName}/approve"", method = RequestMethod.GET, produces = ""application/json;charset=UTF-8"") public ResponseEntity<Organization> approveOrganization(HttpServletRequest request, @PathVariable String shortName) throws McBasicRestException { // Admin Authentication if (!AccessControlUtil.hasAccessToOrg(this.adminOrg) || !AccessControlUtil.hasPermission(this.adminPermission)) { throw new McBasicRestException(HttpStatus.FORBIDDEN, MCIdRegConstants.MISSING_RIGHTS, request.getServletPath()); } Organization org = this.organizationService.getOrganizationByShortName(shortName); if (org == null) { throw new McBasicRestException(HttpStatus.NOT_FOUND, MCIdRegConstants.ORG_NOT_FOUND, request.getServletPath()); } if (org.getApproved()) { throw new McBasicRestException(HttpStatus.BAD_REQUEST, MCIdRegConstants.ORG_ALREADY_APPROVED, request.getServletPath()); } // Create the Identity Provider for the org if (org.getOidcWellKnownUrl() != null && !org.getOidcWellKnownUrl().isEmpty() && org.getOidcClientName() != null && !org.getOidcClientName().isEmpty() && org.getOidcClientSecret() != null && !org.getOidcClientSecret().isEmpty()) { keycloakAU.init(KeycloakAdminUtil.BROKER_INSTANCE); try { keycloakAU.createIdentityProvider(org.getShortName().toLowerCase(), org.getOidcWellKnownUrl(), org.getOidcClientName(), org.getOidcClientSecret()); } catch (MalformedURLException e) { throw new McBasicRestException(HttpStatus.BAD_REQUEST, MCIdRegConstants.INVALID_IDP_URL, request.getServletPath()); } catch (IOException e) { throw new McBasicRestException(HttpStatus.BAD_REQUEST, MCIdRegConstants.COULD_NOT_GET_DATA_FROM_IDP, request.getServletPath()); } } // Enabled the organization and save it org.setApproved(true); // Create password to be send to admin String newPassword = PasswordUtil.generatePassword(); // Create admin user in the keycloak instance handling users keycloakAU.init(KeycloakAdminUtil.BROKER_INSTANCE); try { keycloakAU.createUser(org.getShortName(), newPassword, org.getShortName(), ""ADMIN"", org.getEmail(), org.getShortName(), true, KeycloakAdminUtil.ADMIN_USER); } catch (IOException e) { throw new McBasicRestException(HttpStatus.INTERNAL_SERVER_ERROR, MCIdRegConstants.ERROR_CREATING_ADMIN_KC_USER, request.getServletPath()); } Organization approvedOrg =  this.organizationService.saveOrganization(org); // TODO: send email to organization with the happy news and the admin password approvedOrg.setPassword(newPassword); return new ResponseEntity<Organization>(approvedOrg, HttpStatus.OK); } "	0	0	0	0	0	1
@Override public void release(IMessageSenderWrapper sender, long clientInstanceID, String entityClassName, String entityName) throws Exception { final PassthroughEntityTuple entityTuple = new PassthroughEntityTuple(entityClassName, entityName); // Release should never be replicated and only handled on the active. Assert.assertTrue(null != this.activeEntities); CreationData<ActiveServerEntity<?, ?>> data = this.activeEntities.get(entityTuple); if (null != data) { ActiveServerEntity<?, ?> entity = data.entityInstance; PassthroughClientDescriptor clientDescriptor = sender.clientDescriptorForID(clientInstanceID); entity.disconnected(clientDescriptor); this.lockManager.releaseReadLock(entityTuple, sender.getClientOrigin(), clientInstanceID); } else { throw new EntityNotFoundException(entityClassName, entityName); } } 	0	0	0	0	0	1
public void setCurrentFragmentType(ViewFragmentType requestedType, String fileName, String subFileName) { if (requestedType != ViewFragmentType.SPREADSHEET && fileName == null && mPossibleTableViewTypes != null) { fileName = getDefaultFileNameForViewFragmentType(requestedType); } mCurrentFragmentType = requestedType; mCurrentFileName = fileName; mCurrentSubFileName = subFileName; showCurrentDisplayFragment(false); } 	0	0	0	0	0	1
"@Override public Void doInBackground(Void... args) { try (final AutoCloseOutputStream os = new AutoCloseOutputStream(mPfd); final SmbFile file = mClient.openFile(mUri, ""r"")) { int size; byte[] buf = new byte[mBuffer.capacity()]; while ((mSignal == null || !mSignal.isCanceled()) && (size = file.read(mBuffer)) > 0) { mBuffer.get(buf, 0, size); os.write(buf, 0, size); mBuffer.clear(); } } catch (IOException e) { Log.e(TAG, ""Failed to read file."", e);  try { mPfd.closeWithError(e.getMessage()); } catch (IOException exc) { Log.e(TAG, ""Can't even close PFD with error."", exc); } }  return null; } "	0	0	0	0	0	1
public Map<String, String> getMetaInformation() { return metaInformation; } 	0	0	0	0	0	1
@Override public Observable<?> call(Observable<? extends Void> emittingOnBatchWriteFinished) { return writeOperationAckStrategy.call( emittingOnBatchWriteFinished .takeWhile(notUnsubscribed(isUnsubscribed)) .map(bufferIsNotEmpty(byteBuffer)) ) .takeWhile(bufferIsNotEmpty(byteBuffer)); } 	0	0	0	0	0	1
private static CronDefinition cron4j() { return CronDefinitionBuilder.defineCron() .withMinutes().and() .withHours().and() .withDayOfMonth().and() .withMonth().and() .withDayOfWeek().withValidRange(0,6).withMondayDoWValue(1).and() .enforceStrictRanges() .instance(); } 	0	0	0	0	0	1
"private static String getNumberValue(String string) { String result = ALL_NUMBERS.entrySet().stream() .filter(map -> string.equals(map.getKey())) .map(map -> String.valueOf(map.getValue())) .collect(Collectors.joining());  return (result.equals("""")) ? ""?"" : String.valueOf(result); } "	0	0	0	0	0	1
"private static Credential authorize() throws Exception { // load client secrets GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(PredictionsAPIClient.class.getResourceAsStream(""/client_secrets.json""))); if (clientSecrets.getDetails().getClientId().startsWith(""Enter"") || clientSecrets.getDetails().getClientSecret().startsWith(""Enter "")) { System.out.println( ""Overwrite the src/main/resources/client_secrets.json file with the client secrets file "" + ""you downloaded from the Quickstart tool or manually enter your Client ID and Secret "" + ""from https://code.google.com/apis/console/?api=prediction#project:858822147939 "" + ""into src/main/resources/client_secrets.json""); System.exit(1); }  // Set up authorization code flow. // Ask for only the permissions you need. Asking for more permissions will // reduce the number of users who finish the process for giving you access // to their accounts. It will also increase the amount of effort you will // have to spend explaining to users what you are doing with their data. // Here we are listing all of the available scopes. You should remove scopes // that you are not actually using. Set<String> scopes = new HashSet<String>(); scopes.add(PredictionScopes.DEVSTORAGE_FULL_CONTROL); scopes.add(PredictionScopes.DEVSTORAGE_READ_ONLY); scopes.add(PredictionScopes.DEVSTORAGE_READ_WRITE); scopes.add(PredictionScopes.PREDICTION);  GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder( httpTransport, JSON_FACTORY, clientSecrets, scopes) .setDataStoreFactory(dataStoreFactory) .build(); // authorize return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize(""user""); } "	0	0	0	0	0	1
public static FormatterStep createLazy(String name, Throwing.Supplier<Throwing.Function<String, String>> formatterSupplier) { // wrap the supplier as a regular Supplier (not a Throwing.Supplier) Supplier<Throwing.Function<String, String>> rethrowFormatterSupplier = Errors.rethrow().wrap(formatterSupplier); // memoize its result Supplier<Throwing.Function<String, String>> memoized = Suppliers.memoize(rethrowFormatterSupplier); // create the step return new FileIndependent(name, content -> memoized.get().apply(content)); } 	0	0	0	0	0	1
"@Override public void paintComponent(Graphics g){ super.paintComponent(g); //i is x //j is y for(int x = 0; x < 20; x++){ for(int y = 0; y < 10; y++){ //Decide which landscape-img should be used switch(currentLevel[y + (levelIDy * 10)][x + (levelIDx * 20)]){ case 0:g.drawImage(air, 50 * x, 50 * y, null); break; case 1:g.drawImage(ground, 50 * x, 50 * y, null); break; case 2:g.drawImage(grass_ground, 50 * x, 50 * y, null); break; case 3:g.drawImage(grass_air, 50 * x, 50 * y, null); break; } } }  //Draw scene of character g.drawImage(character.getCurrentAnimationImage(), character.getCoordinates().x, character.getCoordinates().y, null);  //Check if next scene should play character.checkNextScene();  //Draw spells if fired if(isFlyingQ){ g.drawImage(character.q.getCurrentAnimationImage(), character.q.getCoordinates().x, character.q.getCoordinates().y, null); character.q.checkNextScene(); } if(isFlyingW){ g.drawImage(character.w.getCurrentAnimationImage(), character.w.getCoordinates().x, character.w.getCoordinates().y, null); character.w.checkNextScene(); } if(isFlyingE){ g.drawImage(character.e.getCurrentAnimationImage(), character.e.getCoordinates().x, character.e.getCoordinates().y, null); character.e.checkNextScene(); } if(isFlyingR){ g.drawImage(character.r.getCurrentAnimationImage(), character.r.getCoordinates().x, character.r.getCoordinates().y, null); character.r.checkNextScene(); }  //Update spell cooldowns and spellicons g.setColor(Color.WHITE); g.fillRect(375, 465, 250, 35);  g.setColor(Color.BLACK); if(character.q.getRemainingCooldown() == 0){  }else{ g.drawString(String.valueOf((double)Math.round(((double)(character.q.getCooldown() - character.q.getRemainingCooldown()) / 1000) * 10)/10), 425, 495); } if(character.w.getRemainingCooldown() == 0){  }else{ g.drawString(String.valueOf((double)Math.round(((double)(character.w.getCooldown() - character.w.getRemainingCooldown()) / 1000) * 10)/10), 475, 495); } if(character.e.getRemainingCooldown() == 0){  }else{ g.drawString(String.valueOf((double)Math.round(((double)(character.e.getCooldown() - character.e.getRemainingCooldown()) / 1000) * 10)/10), 525, 495); }	//(double)Math.round(((character.e.getCooldown() - character.e.getRemainingCooldown()) / 1000) * 10)/10; if(character.r.getRemainingCooldown() == 0){  }else{ g.drawString(String.valueOf((double)Math.round(((double)(character.r.getCooldown() - character.r.getRemainingCooldown()) / 1000) * 10)/10), 575, 495); }  g.setColor(Color.BLACK); //Draw current FPS int length = String.valueOf(Main.getCurrentFPS()).length(); length *= 8; g.drawString(Main.getCurrentFPS(), 1000 - length, 12);  length = String.valueOf(Main.getCurrentTPS()).length(); length *= 8; g.drawString(Main.getCurrentTPS(), 1000 - length, 24); g.dispose(); } "	0	0	0	0	0	1
"public List<Issue> getSubtasks(String parent) { return jdbcTemplate.query(""select CONCAT(CONCAT(projectIssue.pkey, '-'), issue.issuenum) issueKey, issue.summary"" + "" from "" + SCHEMA_JIRA +  "".issuelink il"" + "" join "" + SCHEMA_JIRA +  "".issuelinktype lt on lt.id = il.linktype and nvl(lt.pstyle, ' ') = 'jira_subtask'"" + "" join "" + SCHEMA_JIRA +  "".jiraissue source on il.source = source.id"" + "" join "" + SCHEMA_JIRA +  "".project project on project.id = source.project"" + "" join "" + SCHEMA_JIRA +  "".jiraissue issue on issue.id = il.destination"" + "" join "" + SCHEMA_JIRA +  "".project projectIssue on issue.project = projectIssue.id"" + "" and CONCAT(CONCAT(project.pkey, '-'), source.issuenum) = '"" + parent + ""'"", new SubtaskRowMapper()); } "	0	0	0	0	0	1
@Test public void verifyRecordWith2() { final List<Integer> source = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);  Flux<Integer> flux = Flux.fromStream(source.stream());  StepVerifier.create(flux) .recordWith(ArrayList::new) .expectNextCount(10) .consumeRecordedWith(c -> Assert.assertTrue(c.containsAll(source))) .expectComplete() .verify(); } 	0	0	0	0	0	1
"private ServletRegistration doAddServletRegistration(ServiceHolder<Servlet> servletHolder, ServiceReference<Servlet> servletRef) throws ServletException {  boolean asyncSupported = ServiceProperties.parseBoolean( servletRef,	HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_ASYNC_SUPPORTED); boolean legacyRegistration = ServiceProperties.parseBoolean(servletRef, Const.EQUINOX_LEGACY_REGISTRATION_PROP); List<String> errorPageList = StringPlus.from( servletRef.getProperty(HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_ERROR_PAGE)); String[] errorPages = errorPageList.toArray(new String[errorPageList.size()]); Map<String, String> servletInitParams = ServiceProperties.parseInitParams( servletRef, Const.SERVLET_INIT_PREFIX); List<String> patternList = StringPlus.from( servletRef.getProperty(HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_PATTERN)); String[] patterns = patternList.toArray(new String[patternList.size()]); Long serviceId = (Long)servletRef.getProperty(Constants.SERVICE_ID); if (legacyRegistration) { // this is a legacy registration; use a negative id for the DTO serviceId = -serviceId; } String servletName = ServiceProperties.parseName( servletRef.getProperty( HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_NAME), servletHolder.get());  if (((patterns == null) || (patterns.length == 0)) && ((errorPages == null) || errorPages.length == 0)) { throw new IllegalArgumentException( ""Either patterns or errorPages must contain a value.""); }  if (patterns != null) { for (String pattern : patterns) { checkPattern(pattern); } }  ServletDTO servletDTO = new ServletDTO();  servletDTO.asyncSupported = asyncSupported; servletDTO.initParams = servletInitParams; servletDTO.name = servletName; servletDTO.patterns = sort(patterns); servletDTO.serviceId = serviceId; servletDTO.servletContextId = contextServiceId; servletDTO.servletInfo = servletHolder.get().getServletInfo();  ErrorPageDTO errorPageDTO = null;  if ((errorPages != null) && (errorPages.length > 0)) { errorPageDTO = new ErrorPageDTO();  errorPageDTO.asyncSupported = asyncSupported; long[] errorCodes = new long[0]; List<String> exceptions = new ArrayList<String>();  for(String errorPage : errorPages) { try { long longValue = Long.parseLong(errorPage);  errorCodes = Arrays.copyOf(errorCodes, errorCodes.length + 1);  errorCodes[errorCodes.length - 1] = longValue; } catch (NumberFormatException nfe) { exceptions.add(errorPage); } }  errorPageDTO.errorCodes = errorCodes; errorPageDTO.exceptions = exceptions.toArray(new String[exceptions.size()]); errorPageDTO.initParams = servletInitParams; errorPageDTO.name = servletName; errorPageDTO.serviceId = serviceId; errorPageDTO.servletContextId = contextServiceId; errorPageDTO.servletInfo = servletHolder.get().getServletInfo(); }  ServletContextHelper curServletContextHelper = getServletContextHelper( servletHolder.getBundle());  ServletContext servletContext = createServletContext( servletHolder.getBundle(), curServletContextHelper); ServletRegistration servletRegistration = new ServletRegistration( servletHolder, servletDTO, errorPageDTO, curServletContextHelper, this, legacyRegistration); ServletConfig servletConfig = new ServletConfigImpl( servletName, servletInitParams, servletContext);  servletRegistration.init(servletConfig);  endpointRegistrations.add(servletRegistration);  return servletRegistration; } "	0	0	0	0	0	1
"@Test public void testRunHarvest() throws Exception { //FIXME hardwired to H1 HeritrixFiles HeritrixFiles files = HeritrixFiles.getH1HeritrixFilesWithDefaultJmxFiles( new File(TestInfo.WORKING_DIR, ""bogus""), new JobInfoTestImpl(42L, 23L)); hc = HarvestController.getInstance(); String cause = ""Error creating singleton of class '"" + ""dk.netarkivet.harvester.harvesting.controller.BnfHeritrixLauncher':""; // String cause = ""File 'order.xml' must exist.*bogus/order.xml:"" try { hc.runHarvest(files); fail(""Should have died with bogus file structure""); } catch (IOFailure e) { System.out.println(""error: "" + e.getMessage()); StringAsserts.assertStringContains(""Should have the right error message"", ""Unable to create index directory:"", e.getMessage()); } catch (ArgumentNotValid e) { StringAsserts.assertStringMatches(""Should have the right error message"", cause, e.getMessage());  } } "	0	0	0	0	0	1
"private boolean isValidTime(String value) { return (value.matches(""\\d+"") && (Integer.parseInt(value) < 2400) && (Integer.parseInt(value) >= 0) && (((Integer.parseInt(value)) % 100) < 60)); } "	0	0	0	0	0	1
"private GenericRecord getChild(Schema schema, Iterator<OMElement> omElementIterator) {  GenericRecord record = new GenericData.Record(schema); ConcurrentMap<String, Collection<Object>> arrMap = new ConcurrentHashMap<String, Collection<Object>>();  while (omElementIterator.hasNext()) { OMElement element = omElementIterator.next(); String localName = element.getLocalName(); Field field = schema.getField(localName); if (field != null) { Type fieldSchemaType = field.schema().getType(); if (Type.ARRAY.equals(fieldSchemaType)) { Collection<Object> arr = arrMap.get(localName); if (arr == null) { arr = new ArrayList<Object>(); arrMap.put(localName, arr); } if (field.schema().getElementType().getType().equals(Type.RECORD)) { Iterator childElements = element.getChildElements(); GenericRecord child = getChild(field.schema().getElementType(), childElements); arr.add(child); } else if (field.schema().getElementType().getType().equals(Type.ARRAY)) { log.warn(""Array avro schema type is not supported inside another array type""); } else { arr.add(element.getText()); } } else if (Type.RECORD.equals(fieldSchemaType)) { //Add child elements to generic record Iterator childElements = element.getChildElements(); GenericRecord child = getChild(field.schema(), childElements); record.put(localName, child); //Add attribute values to generic record Iterator attrElements = element.getAllAttributes(); GenericRecord attributes = getChildForAttributes(field.schema(), attrElements); record.put(localName, attributes); } else if (Type.UNION.equals(fieldSchemaType)) { Iterator childElements = element.getChildElements(); if (childElements.hasNext()) { Schema childSchema = field.schema(); if (childSchema != null) { List<Schema> childFieldList = childSchema.getTypes(); Iterator chilFields = childFieldList.iterator(); while (chilFields.hasNext()) { Schema chSchema = (Schema) chilFields.next(); String scName = chSchema.getName(); if (!scName.equals(""null"")) { GenericRecord child = getChild(chSchema, childElements); record.put(localName, child); } else { continue; } } } } else { record.put(localName, element.getText()); } } else if (Type.ENUM.equals(fieldSchemaType) || Type.MAP.equals(fieldSchemaType) || Type.FIXED .equals(fieldSchemaType)) { log.warn(""Array avro schema type : "" + fieldSchemaType + "" is not supported.""); } else { record.put(localName, element.getText()); } } else { log.error(""Unrecognized element recieved : "" + localName); } }  for (Entry<String, Collection<Object>> arrEntry : arrMap.entrySet()) { String key = arrEntry.getKey(); Object object = record.get(key); Array<Object> childArray = null; Collection<Object> value = arrEntry.getValue(); if (object == null) { childArray = new GenericData.Array<Object>(value.size(), schema.getField(key).schema()); } else { childArray = (Array<Object>) object; } for (Object obj : value) { childArray.add(obj); } record.put(key, childArray); } return record; } "	0	0	0	0	0	1
"public void saveContact(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception {  HttpServletRequest request = PortalUtil .getHttpServletRequest(actionRequest);  ThemeDisplay themeDisplay = (ThemeDisplay) request .getAttribute(WebKeys.THEME_DISPLAY);  UploadPortletRequest uploadPortletRequest = PortalUtil .getUploadPortletRequest(actionRequest);  long userId = themeDisplay.getUserId(); long groupId = themeDisplay.getScopeGroupId();  String backURL = ParamUtil.getString(uploadPortletRequest, ""backURL""); long contactId = ParamUtil.getLong(uploadPortletRequest, ""contactId""); String historyKey = ParamUtil.getString(uploadPortletRequest, ""historyKey""); String mvcPath = ParamUtil.getString(uploadPortletRequest, ""mvcPath""); String redirect = ParamUtil.getString(uploadPortletRequest, ""redirect""); String windowId = ParamUtil.getString(uploadPortletRequest, ""windowId"");  Contact contact = null;  VCard vCard = null; String uid = null;  if (contactId > 0) {  contact = ContactServiceUtil.getContact(contactId); uid = contact.getUid(); vCard = contact.getVCard();  } else {  vCard = new VCard(); vCard.setUid(Uid.random()); uid = vCard.getUid().getValue();  }  // Pass the required parameters to the render phase  actionResponse.setRenderParameter(""contactId"", String.valueOf(contactId)); actionResponse.setRenderParameter(""backURL"", backURL); actionResponse.setRenderParameter(""historyKey"", historyKey); actionResponse.setRenderParameter(""mvcPath"", mvcPath); actionResponse.setRenderParameter(""redirect"", redirect); actionResponse.setRenderParameter(""windowId"", windowId);  // Retrieve associated file data File[] keyFiles = uploadPortletRequest.getFiles(""key.file""); File[] logoFiles = uploadPortletRequest.getFiles(""logo.file""); File[] photoFiles = uploadPortletRequest.getFiles(""photo.file""); File[] soundFiles = uploadPortletRequest.getFiles(""sound.file"");  Map<String, File[]> map = new HashMap<String, File[]>();  if (keyFiles != null) { map.put(""key.file"", keyFiles); } if (logoFiles != null) { map.put(""logo.file"", logoFiles); } if (photoFiles != null) { map.put(""photo.file"", photoFiles); } if (soundFiles != null) { map.put(""sound.file"", soundFiles); }  // Update the vCard with the request parameters  try {  vCard = PortletUtil.getVCard(uploadPortletRequest, vCard, map);  } catch (ImageFileFormatException iffe) {  SessionErrors.add(actionRequest, ""the-image-file-format-is-not-supported"");  // Store the unmodified contact as a request attribute  uploadPortletRequest.setAttribute(""CONTACT"", contact);  return;  } catch (KeyFileFormatException kffe) {  SessionErrors.add(actionRequest, ""the-key-file-format-is-not-supported"");  // Store the unmodified contact as a request attribute  uploadPortletRequest.setAttribute(""CONTACT"", contact);  return;  } catch (SoundFileFormatException sffe) {  SessionErrors.add(actionRequest, ""the-sound-file-format-is-not-supported"");  // Store the unmodified contact as a request attribute  uploadPortletRequest.setAttribute(""CONTACT"", contact);  return; }  // Store contact information in vCard format  String card = Ezvcard.write(vCard).version(VCardVersion.V4_0).go();  // Save the contact  ServiceContext serviceContext = ServiceContextFactory.getInstance( Contact.class.getName(), actionRequest);  String[] assetTagNames = PortletUtil.getAssetTagNames(vCard);  serviceContext.setAssetTagNames(assetTagNames);  if (contactId > 0) { contact = ContactServiceUtil.updateContact(userId, groupId, contactId, card, uid, serviceContext); SessionMessages.add(actionRequest, ""request_processed"", PortletUtil.translate(""successfully-updated-the-contact"")); } else { contact = ContactServiceUtil.addContact(userId, groupId, card, uid, serviceContext); SessionMessages.add(actionRequest, ""request_processed"", PortletUtil.translate(""successfully-added-the-contact"")); }  // Store the updated or added contact as a request attribute uploadPortletRequest.setAttribute(""CONTACT"", contact);  } "	0	0	0	0	0	1
"@Override public void onDataChange(DataSnapshot dataSnapshot) { Map<String,String> map = (Map<String,String>)dataSnapshot.getValue(); if(map!=null && map.get(team_name)!=null){ reg_team_name.setError(""Team Name Already Exists""); reg_team_name.requestFocus(); progressDialog.dismiss(); return; } else{ //Add Team To Leaderboard DatabaseReference LeaderboardReference = FirebaseDatabase.getInstance().getReference().child(age_group).child(""Leaderboard"").child(team_name); Map<String,String> leaderboardData = new HashMap<String, String>(); leaderboardData.put(""Team Name"",team_name); leaderboardData.put(""Matches Played"",""0""); leaderboardData.put(""Matches Won"",""0""); leaderboardData.put(""Matches Drawn"",""0""); leaderboardData.put(""Matches Lost"",""0""); leaderboardData.put(""Goals Scored"",""0""); leaderboardData.put(""Goals Conceived"",""0""); leaderboardData.put(""Red Cards"",""0""); leaderboardData.put(""Points"",""0""); LeaderboardReference.setValue(leaderboardData);  //Add Team Name along with password databaseReference1 = FirebaseDatabase.getInstance().getReference().child(age_group).child(""Team Names"").child(team_name); databaseReference1.child(""Password"").setValue(password);  //Add Team Details storageReference = FirebaseStorage.getInstance().getReference().child(age_group).child(team_name); //Add Team Profile Pic if(profile_pic_uri!=null) {  //Generate thumbnail and save it and its download url byte[] thumbnailForProfilePic = generateThumbnailForImage(profile_pic_uri); storageReference.child(""Team Profile Pic Thumbnail"").putBytes(thumbnailForProfilePic).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() { @Override public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) { Uri downloadUri = taskSnapshot.getDownloadUrl(); databaseReference1.child(""Team Profile Pic Thumbnail Url"").setValue(downloadUri.toString()); } });  //Save image and its download url storageReference.child(""Team Profile Pic"").putFile(profile_pic_uri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() { @Override public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) { Uri downloadUri = taskSnapshot.getDownloadUrl(); databaseReference1.child(""Team Profile Pic Url"").setValue(downloadUri.toString()); } }); } databaseReference = FirebaseDatabase.getInstance().getReference().child(age_group).child(""Team Description"").child(team_name); databaseReference.child(""Coach Name"").setValue(coach_name); databaseReference.child(""Contact Number"").setValue(coach_contact); databaseReference.child(""Email"").setValue(coach_email); databaseReference.child(""Location"").setValue(location);  //Adding information about players storageReference = storageReference.child(""Player ID Scans""); databaseReference.child(""Number Of Players"").setValue(names_of_players.size()); databaseReference = databaseReference.child(""Players""); for(int i=0;i<names_of_players.size();i++){ //Generate a proper player code so that players can be distinguished String player_code = jersey_number_of_players.get(i)+""-""+ names_of_players.get(i); final DatabaseReference tempreference = databaseReference.child(player_code); Map<String,String> playerUploadData = new HashMap<String, String>(); playerUploadData.put(""Name"",names_of_players.get(i)); playerUploadData.put(""Contact"",contact_of_players.get(i)); playerUploadData.put(""Jersey Number"",jersey_number_of_players.get(i)); tempreference.setValue(playerUploadData); storageReference.child(player_code).putFile(uri_of_players.get(i)).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() { @Override public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) { Uri downloadUri = taskSnapshot.getDownloadUrl(); tempreference.child(""Player ID Scans Url"").setValue(downloadUri.toString()); progressDialog.dismiss(); } }); }  Intent intent = new Intent(RegistrationActivity.this,MainActivity.class); intent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY|Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(intent); } } "	0	0	0	0	0	1
private void resetHealth(){ setHealth(getMaxHealth()); } 	0	0	0	0	0	1
@Override public MetaClass getType() { return new APTClass(actualParameterType); } 	0	0	0	0	0	1
"@SuppressWarnings(""WeakerAccess"") @NotNull String clientVersion() { throw new UnsupportedOperationException(""todo""); } "	0	0	0	0	0	1
@Nonnull static public List<UIMessage> getBindingErrors(@Nonnull NodeBase root) throws Exception { final List<UIMessage> res = new ArrayList<>(); DomUtil.walkTree(root, new DomUtil.IPerNode() { @Override public Object before(NodeBase n) throws Exception { List<IBinding> list = n.getBindingList(); if(null != list) { for(IBinding sb : list) { UIMessage message = sb.getBindError(); if(null != message) res.add(message); } } return null; }  @Override public Object after(NodeBase n) throws Exception { return null; } }); return res; } 	0	0	0	0	0	1
"@PreAuthorize(""hasAnyRole('ROLE_SHR_FACILITY', 'ROLE_SHR_PROVIDER', 'ROLE_SHR_PATIENT', 'ROLE_Datasense Facility')"") @RequestMapping(value = ""/patients/{healthId}/encounters"", method = RequestMethod.GET, produces = {""application/json"", ""application/atom+xml""}) public DeferredResult<EncounterSearchResponse> findEncountersForPatient( final HttpServletRequest request, @PathVariable final String healthId, @RequestParam(value = ""updatedSince"", required = false) String updatedSince) { logger.debug(""Find all encounters by health id: "" + healthId); final UserInfo userInfo = getUserInfo(); logAccessDetails(userInfo, String.format(""Find all encounters of patient (healthId) %s"", healthId)); final DeferredResult<EncounterSearchResponse> deferredResult = new DeferredResult<>();  try { final boolean isRestrictedAccess = isAccessRestrictedToEncounterFetchForPatient(healthId, userInfo); final Date requestedDate = getRequestedDate(updatedSince); Observable<List<EncounterBundle>> encountersForPatient = encounterService.findEncountersForPatient(healthId, requestedDate, 200); encountersForPatient.subscribe(new Action1<List<EncounterBundle>>() { @Override public void call(List<EncounterBundle> encounterBundles) { try { if (isRestrictedAccess && isConfidentialPatient(encounterBundles)) { Forbidden errorResult = new Forbidden(format(""Access for patient %s data for is denied"", healthId)); logger.debug(errorResult.getMessage()); deferredResult.setErrorResult(errorResult); } else { encounterBundles = filterEncounters(isRestrictedAccess, encounterBundles); EncounterSearchResponse searchResponse = new EncounterSearchResponse( getRequestUri(request, requestedDate, null), encounterBundles); logger.debug(searchResponse.toString()); deferredResult.setResult(searchResponse); } } catch (UnsupportedEncodingException e) { logger.debug(e.getMessage()); deferredResult.setErrorResult(e); }  }   }, new Action1<Throwable>() { @Override public void call(Throwable throwable) { logger.debug(throwable.getMessage()); deferredResult.setErrorResult(throwable); } }); } catch (Exception e) { logger.debug(e.getMessage()); deferredResult.setErrorResult(e); } return deferredResult; } "	0	0	0	0	0	1
@Override public void parseJson(JsonObject entries, String fileName) { JsonArray elements = entries.get(ConfigNames.DIMENSIONS).getAsJsonArray();  BuilderLogic logic = OreSpawn.API.getLogic(FilenameUtils.getBaseName(fileName)); List<DimensionBuilder> builders = new ArrayList<>();  for (JsonElement element : elements ) { JsonObject object = element.getAsJsonObject();  int dimension = object.has(ConfigNames.DIMENSION) ? object.get(ConfigNames.DIMENSION).getAsInt() : OreSpawn.API.dimensionWildcard();  DimensionBuilder builder = logic.newDimensionBuilder(dimension); List<SpawnBuilder> spawns = new ArrayList<>();  JsonArray ores = object.get(ConfigNames.ORES).getAsJsonArray();  for (JsonElement oresEntry : ores) { SpawnBuilder spawn = builder.newSpawnBuilder(null);  JsonObject ore = oresEntry.getAsJsonObject();  OreBuilder oreB = spawn.newOreBuilder();  String oreName = ore.get(ConfigNames.ORES).getAsString();  if (ore.has(ConfigNames.STATE)) { String stateString = ore.get(ConfigNames.STATE).getAsString(); oreB.setOre(oreName, stateString); } else { oreB.setOre(oreName); }  FeatureBuilder feature = spawn.newFeatureBuilder(null); feature.setGenerator(ore.get(ConfigNames.FEATURE).getAsString()); feature.setParameters(ore.get(ConfigNames.PARAMETERS).getAsJsonObject());  String replaceBase = ore.get(ConfigNames.REPLACEMENT).getAsString(); IBlockState blockRep = Helpers.getReplacement(replaceBase, dimension);  BiomeBuilder biomes = spawn.newBiomeBuilder(); Helpers.loadBiomesV1( biomes, ore );  List<IBlockState> repBlock = new ArrayList<>(); repBlock.add(blockRep); spawn.create(biomes, feature, repBlock, oreB); spawns.add(spawn); } builder.create(spawns.toArray(new SpawnBuilderImpl[spawns.size()])); builders.add(builder); }  logic.create(builders.toArray(new DimensionBuilderImpl[builders.size()]));  OreSpawn.API.registerLogic(logic); } 	0	0	0	0	0	1
"private void startFfmpeg(String executable) { // -y = overwrite, otherwise it fails the second time you run // -an = no audio // ""-b:v"", ""3000k"" = video bit rate // ""-i"", ""-"" = pipe:0 processBuilder = new ProcessBuilder(executable, ""-y"", ""-f"", ""rawvideo"", ""-vcodec"", ""rawvideo"", ""-s"", pg.width + ""x"" + pg.height, ""-pix_fmt"", ""rgb24"", ""-r"", """" + ffmpegFrameRate, ""-i"", ""-"", ""-an"", ""-vcodec"", ""h264"", ""-pix_fmt"", ""yuv420p"", ""-crf"", """" + ffmpegCrfQuality, ""-metadata"", ""comment="" + ffmpegMetadataComment, outputFilePath);  processBuilder.redirectErrorStream(true); if (saveDebugInfo) { ffmpegOutputMsg = new File(outputFilePath + "".txt""); processBuilder.redirectOutput(ffmpegOutputMsg); } processBuilder.redirectInput(ProcessBuilder.Redirect.PIPE); try { process = processBuilder.start(); } catch (Exception e) { e.printStackTrace(); err(); }  ffmpeg = process.getOutputStream();  ffmpegFound = true; } "	0	0	0	0	0	1
"@Test public void testGetRangeMax_ppc() throws Exception { Weapon ppc = (Weapon) ItemDB.lookup(""PPC""); assertEquals(1080.0, ppc.getRangeMax(null), 0.0); } "	0	0	0	0	0	1
"@Test public void testGetRangeLong_ppc() throws Exception { Weapon ppc = (Weapon) ItemDB.lookup(""PPC""); assertEquals(540.0, ppc.getRangeLong(null), 0.0); } "	0	0	0	0	0	1
"@Test public void testGetRangeEffectivity_gaussrifle() throws Exception { BallisticWeapon gauss = (BallisticWeapon) ItemDB.lookup(""GAUSS RIFLE""); assertEquals(1.0, gauss.getRangeEffectivity(0, null), 0.0); assertEquals(1.0, gauss.getRangeEffectivity(gauss.getRangeLong(null), null), 0.0); assertEquals(0.5, gauss.getRangeEffectivity((gauss.getRangeLong(null) + gauss.getRangeMax(null)) / 2, null), 0.0); assertEquals(0.0, gauss.getRangeEffectivity(gauss.getRangeMax(null), null), 0.0);  assertTrue(gauss.getRangeEffectivity(750, null) < 0.95); assertTrue(gauss.getRangeEffectivity(750, null) > 0.8); } "	0	0	0	0	0	1
"@Test public void testGetDamagePerShot_lb10x() throws Exception { Weapon lb10xac = (Weapon) ItemDB.lookup(""LB 10-X AC""); assertTrue(lb10xac.getDamagePerShot() > 5); } "	0	0	0	0	0	1
"public void actionPerformed(final ActionEvent e) {  final ReportDesignerContext reportDesignerContext = getReportDesignerContext(); final ReportDocumentContext activeContext = getActiveContext(); if (activeContext == null) { return; }  if (activeContext.isChanged()) { // ask the user and maybe save the report.. final int option = JOptionPane.showConfirmDialog(reportDesignerContext.getView().getParent(), Messages.getInstance().getString(""PublishToServerAction.ReportModifiedWarning.Message""), Messages.getInstance().getString(""PublishToServerAction.ReportModifiedWarning.Title""), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE); if (option == JOptionPane.YES_OPTION) { if (SaveReportAction.saveReport (reportDesignerContext, activeContext, reportDesignerContext.getView().getParent()) == false) { return; } } if (option == JOptionPane.CANCEL_OPTION) { return; } }  final PublishToServerTask publishToServerTask = new PublishToServerTask(reportDesignerContext, reportDesignerContext.getView().getParent()); final LoginTask loginTask = new LoginTask (reportDesignerContext, reportDesignerContext.getView().getParent(), publishToServerTask, null, true);  SwingUtilities.invokeLater(loginTask);  } "	0	0	0	0	0	1
public String getDate() { return date; } 	0	0	0	0	0	1
public String getJwtToken(String username) throws JWTClientException { return JWTClientUtil.generateSignedJWTAssertion(username, jwtConfig, isDefaultJWTClient); } 	1	0	1	0	1	0
protected int adjustStoredItemCount (int amount, boolean notify) { if (protoStack.isEmpty() || amount == 0) return amount;  if (amount > 0) { if (attrs.isUnlimitedVending()) return 0;  int originalCount = count; count = Math.min(count + amount, getMaxCapacity());  if (count != originalCount && notify) onAmountChanged();  if (attrs.isVoid()) return 0;  return amount - (count - originalCount); } else { int originalCount = count; setStoredItemCount(originalCount + amount, notify);  return amount - (count - originalCount); } } 	1	0	0	1	1	0
@EventHandler public void OnEntityDamageByEntity(EntityDamageByEntityEvent e){ if(e.getDamager() instanceof Player){ Player p = (Player)e.getDamager(); QueObject de = new QueObject(p.getUniqueId().toString(), SQLTABLE.DAMAGE_CAUSED, p.getDisplayName()); de.Quantity = (int)e.getFinalDamage(); QueObjects.add(de); checkQue(); } } 	1	1	1	0	1	0
@EventHandler public void OnChatMessage(AsyncPlayerChatEvent e){ QueObjects.add(new QueObject(e.getPlayer().getUniqueId().toString(), SQLTABLE.PLAYER_CHAT, e.getPlayer().getDisplayName())); checkQue(); } 	1	0	1	0	1	0
@EventHandler public void onBlockBreak(BlockBreakEvent e){ if(e.getPlayer() != null) QueObjects.add(new QueObject(e.getPlayer().getUniqueId().toString(), SQLTABLE.BLOCKS_BROKEN, e.getPlayer().getDisplayName())); checkQue(); } 	1	1	1	0	1	0
"@EventHandler public void OnPlayerJoin(PlayerJoinEvent e){ QueObjects.add(new QueObject(e.getPlayer().getUniqueId().toString(), SQLTABLE.JOINS, e.getPlayer().getDisplayName())); checkQue();  if(config.getBoolean(""auto_import"", true)){ new ImportProcessor(e.getPlayer(), playerVersion, QueObjects).run(); } } "	1	0	1	0	1	0
"static AxoObject Create_xfadeTilde() { AxoObject o = new AxoObject(""xfade~"", ""crossfade between two inputs""); o.inlets.add(new InletFrac32Buffer(""i1"", ""input"")); o.inlets.add(new InletFrac32Buffer(""i2"", ""input"")); o.inlets.add(new InletFrac32Pos(""c"", ""control"")); o.outlets.add(new OutletFrac32Buffer(""o"", ""output"")); o.sKRateCode = ""   int32_t ccompl = ((128<<20)-%c%);\n""; o.sSRateCode = ""   {\n"" + ""      int64_t a = (int64_t)%i2% * %c%;\n"" + ""      a += (int64_t)%i1% * ccompl;\n"" + ""      %o%= a>>27;\n"" + ""   }\n""; return o; } "	0	0	1	1	1	0
"static AxoObject CreateSRateSineOsc4() { AxoObject o = new AxoObject(""sine"", ""FM sine wave oscillator, linear interpolated table, s-rate pitch input""); o.outlets.add(new OutletFrac32BufferBipolar(""wave"", ""sine wave"")); o.inlets.add(new InletFrac32Bipolar(""pitchm"", ""pitch modulation"")); o.inlets.add(new InletFrac32Buffer(""fm"", ""frequency modulation"")); o.inlets.add(new InletFrac32Buffer(""pm"", ""phase modulation"")); o.params.add(new ParameterFrac32SMapPitch(""pitch""));  o.sLocalData = ""uint32_t Phase;""; o.sInitCode = ""Phase = 0;""; o.sKRateCode = ""   int32_t freq;\n"" + ""   MTOFEXTENDED(%pitch% + %pitchm%,freq);\n""; o.sSRateCode = ""Phase += freq + %fm%;\n"" + ""int32_t r;\n"" + ""int32_t p2 = Phase + (%pm%<<4);\n"" + ""SINE2TINTERP(p2,r)\n"" + ""%wave%= (r>>4);\n""; return o; } "	0	0	1	1	1	0
"@Override public MotTest getMotTestCurrentById(long id) {  logger.debug(""Entry getMotTestCurrentById "" + id); MotTest motTest = null;  logger.debug(""Prepare getMotTestCurrentById "" + id);  try { Connection connection = connectionManager.getConnection();;  try (PreparedStatement stmt = connection.prepareStatement(MotTestReadSql.queryGetMotTestCurrentById)) { stmt.setLong(1, id);  logger.debug(""Resultset getMotTestCurrentById "" + id); try (ResultSet resultSet = stmt.executeQuery()) { if (resultSet.next()) { logger.debug(""Map getMotTestCurrentById "" + id); motTest = mapResultSetToMotTestCurrent(resultSet); this.motTestMap.put(id, motTest); } } } } catch (SQLException e) { throw new InternalException(e); }  logger.debug(""Return getMotTestCurrentById "" + id); return motTest; } "	1	0	1	1	1	0
@Override public void reconnectBlocking() { reconnectBlocking(requestGatewayBlocking(), null, -1); } 	1	0	0	1	1	0
public MainEvent getMainEvent(EventProducerNode epn, int start, int end) { double max = 0.0; MainEvent maj = new MainEvent(Void, max); for (String state : getAllEvents()) { double amp = 0.0; // Compute the total presence of the state for (int i = start; i < end; i++) amp += proportions.get(epn).get(i).get(state);  // Divide by duration amp /= (end - start); if (amp > max) { maj = new MainEvent(state, amp); max = amp; } } return maj; } 	0	0	1	1	1	0
public static double eraRate(Civilization civ) { double rate = 1.0; double era = (CivGlobal.highestCivEra-1) - civ.getCurrentEra(); if (era > 0) { rate = (era/10); } return rate; } 	1	0	1	1	1	0
"public void sendMessage(String msg) { // let's keep it simple eh? String json = ""{\""message_type\"":\""recognizer_loop:utterance\"", \""context\"": null, \""metadata\"": {\""utterances\"": [\"""" + msg + ""\""]}}""; try { if (mWebSocketClient.getConnection().isClosed()) { // try and reconnect if (status == NetworkUtil.NETWORK_STATUS_WIFI) { connectWebSocket(); } } mWebSocketClient.send(json); } catch (WebsocketNotConnectedException e) { Toast.makeText(getApplicationContext(), getResources().getString(R.string.websocket_closed), Toast.LENGTH_SHORT).show(); } } "	1	0	1	0	1	0
"final public void ContinueStatement() throws ParseException { trace_call(""ContinueStatement""); try { jj_consume_token(CONTINUE); switch ((jj_ntk==-1)?jj_ntk():jj_ntk) { case IDENTIFIER: jj_consume_token(IDENTIFIER); break; default: jj_la1[105] = jj_gen; ; } jj_consume_token(SEMICOLON); } finally { trace_return(""ContinueStatement""); } } "	0	0	1	1	1	0
"final public void SwitchLabel() throws ParseException { trace_call(""SwitchLabel""); try { Token t; switch ((jj_ntk==-1)?jj_ntk():jj_ntk) { case CASE: ASTCaseSwitchLabel jjtn001 = new ASTCaseSwitchLabel(this, JJTCASESWITCHLABEL); boolean jjtc001 = true; jjtree.openNodeScope(jjtn001); try { t = getToken(1); jj_consume_token(CASE); Expression(); jj_consume_token(COLON); jjtree.closeNodeScope(jjtn001, true); jjtc001 = false; setFirstLastToken(jjtn001, t, getToken(0)); } catch (Throwable jjte001) { if (jjtc001) { jjtree.clearNodeScope(jjtn001); jjtc001 = false; } else { jjtree.popNode(); } if (jjte001 instanceof RuntimeException) { {if (true) throw (RuntimeException)jjte001;} } if (jjte001 instanceof ParseException) { {if (true) throw (ParseException)jjte001;} } {if (true) throw (Error)jjte001;} } finally { if (jjtc001) { jjtree.closeNodeScope(jjtn001, true); } } break; case _DEFAULT: ASTDefaultSwitchLabel jjtn002 = new ASTDefaultSwitchLabel(this, JJTDEFAULTSWITCHLABEL); boolean jjtc002 = true; jjtree.openNodeScope(jjtn002); try { t = getToken(1); jj_consume_token(_DEFAULT); jj_consume_token(COLON); jjtree.closeNodeScope(jjtn002, true); jjtc002 = false; setFirstLastToken(jjtn002, t, getToken(1)); } finally { if (jjtc002) { jjtree.closeNodeScope(jjtn002, true); } } break; default: jj_la1[98] = jj_gen; jj_consume_token(-1); throw new ParseException(); } } finally { trace_return(""SwitchLabel""); } } "	0	0	1	1	1	0
public boolean closeAccount(String name) { Account acc = accountMap.get(name); if (acc == null) { return false; } acc.setState(State.CLOSED); return true; } 	1	0	1	1	1	0
"private Set<Node> getListCells(ListView<?> listView) { Set<Node> l = listView.lookupAll(""*""); Set<Node> r = new HashSet<>(); for (Node node : l) { if (node instanceof ListCell<?> && listView.equals((ListCell<?>) node).getListView()) { r.add(node); } } return r; } "	1	1	0	1	1	0
"private void addToTray(final Stage primaryStage) { try { TrayIcon trayIcon = platformService.getTrayIcon(primaryStage);  // update tooltip when the statusbinder changes status statusBinder.message().addListener((observable, oldValue, newValue) -> { if (newValue != null && !newValue.isEmpty()) { trayIcon.setToolTip(""Status: "" + newValue); } });  final SystemTray systemTray = SystemTray.getSystemTray(); systemTray.add(trayIcon);  } catch (PlatformNotSupportedException | AWTException e) { LOG.warn(""Could not instantiate tray icon. Reverting to default behaviour"", e); primaryStage.setOnCloseRequest(event -> Platform.exit()); } } "	0	0	1	1	1	0
"private void printf(String level, String format, Object ... args){ String message_format = String.format(""%s %s %s\n"", MsTestLogger.prefix, level, format); if (listener != null) { listener.getLogger().printf(message_format, args); } } "	1	0	1	1	1	0
"@Transactional public void addStore(Store store) throws IllegalArgumentException { if (store != null && store.getName() != null && !store.getName().equals("""")) { storeDAO.insert(store); } else throw new IllegalArgumentException(String.format(""Illegal arguments in store id %d"", store.getId())); } "	1	0	1	0	1	0
"public void loadIgnoredPlayers(File file) throws IOException { CivChat2.debugmessage(""ChatMan is trying to loadignoredplayers file""); FileInputStream fis = new FileInputStream(file); BufferedReader br = new BufferedReader(new InputStreamReader(fis)); if(br.readLine() == null){ CivChat2.debugmessage(""IgnoreList File is empty...""); br.close(); return; } String line; while ((line = br.readLine()) != null) { CivChat2.debugmessage(""Reading Ignore List curLine: "" + line); String parts[] = line.split("",""); String owner = parts[0]; CivChat2.debugmessage(""Owner="" + owner + "" # of Ignorees: "" + parts.length); List<String> participants = new ArrayList<>(); for (int x = 0; x < parts.length; x++) { if(x == 0){ x=1; } participants.add(parts[x]); CivChat2.debugmessage(""Adding ignoree name="" + parts[x]); } ignorePlayers.put(owner, participants); } if(ignorePlayers != null){ CivChat2.debugmessage(""Loaded ignore list... ["" + ignorePlayers.size() + ""] ignore entries""); } br.close(); fis.close(); } "	0	1	0	1	1	0
"private void pushPageInternal(final Page newPage, final Page oldPage, final Object arg, boolean animated, PageAnimator.AnimationDirection animationDirection) { if (animated) { mAnimating = true; }  newPage.onShow(arg);  if (oldPage != null) { if (animated) { // when a new page is being pushed, ensures the oldPage always be visible during the animation // transition if animated is true oldPage.getView().bringToFront(); }  oldPage.onCover(); }  mCurPage = newPage; mPageStack.addLast(newPage); mContainerView.addView(newPage.getView());  mViewTransparentMask.bringToFront();  if (mEnableDebug) { Log.d(TAG, String.format("">>>> pushPage, pagestack=%d, %s, arg=%s"", mPageStack.size(), newPage, arg)); }  if (animated && mPageAnimator != null && !newPage.onPushPageAnimation(oldPage, newPage, animationDirection)) { mPageAnimator.onPushPageAnimation(oldPage, newPage, animationDirection); }  int animationDuration = newPage.getAnimationDuration(); if (animationDuration == -1 && mPageAnimator != null) { animationDuration = mPageAnimator.getAnimationDuration(); } if (animated && animationDuration != -1) { newPage.postDelayed(new Runnable() { @Override public void run() { doFinalWorkForPushPage(oldPage, newPage, arg); } }, animationDuration); } else { doFinalWorkForPushPage(oldPage, newPage, arg); } } "	1	0	0	1	1	0
public void setPropertiesFromValuesStorage(ValuesStorage values, Property<?>... properties) { if (values != null) { if (setValues == null) { setValues = newValuesStorage(); } for (Property<?> property : properties) { String key = property.getName(); if (values.containsKey(key)) { Object value = property.accept(valueCastingVisitor, values.get(key)); if (shouldSaveValue(key, value)) { SquidUtilities.putInto(this.setValues, property.getName(), value, true); } } } } } 	1	1	0	0	1	0
"<T> Result okResult(List<T> list, String typeName) { JsonNode node = mapper.valueToTree(new ResourceList<T>(list)); ArrayNode items = (ArrayNode)node.get(""items""); for (int i=0; i < items.size(); i++) { ((ObjectNode)items.get(0)).put(""type"", typeName); } return ok(node); } "	0	0	1	1	1	0
@Test public void test_diapason_from_boundaries() throws Exception { InstructionDiapason diapason = new InstructionDiapason(word1, word4);  assertFalse(diapason.contains(word0)); assertTrue(diapason.contains(word1)); assertTrue(diapason.contains(word2)); assertTrue(diapason.contains(word3)); assertFalse(diapason.contains(word4)); assertFalse(diapason.contains(word5)); } 	0	0	1	1	1	0
public void add(int index, Object object){ this.add(index, object); } 	1	0	1	0	1	0
"@Override public AppInstanceStatusResource toResource(AppInstanceStatus entity) { return createResourceWithId(""/"" + entity.getId(), entity, owningApp.getDeploymentId().toString()); } "	1	0	1	0	1	0
public void destroyController(String id) { Object controller = controllers.remove(id); Class controllerClass = controllerClassMapping.remove(id); containerManager.destroyController(controller, controllerClass);  Object model = models.get(id); if (model != null) { beanRepository.delete(model); }  Subscription subscription = mBeanSubscriptions.remove(id); if(subscription != null) { subscription.unsubscribe(); } } 	1	0	1	0	1	0
"@Test public void result_is_a_pass_despite_initial_failure() throws Exception { environmentVariables.setProperty(MAX_RETRIES, ""5""); environmentVariables.setProperty(JUNIT_RETRY_TESTS, ""true""); SerenityRunner runner = new SerenityRunner(FailThenPassSample.class, new WebDriverFactory(environmentVariables), new SystemPropertiesConfiguration(environmentVariables));  CapturingNotifier notifier = new CapturingNotifier(); runner.run(notifier); List<TestOutcome> outcomes = runner.getTestOutcomes();  assertThat(outcomes.size(), is(1)); assertThat(outcomes.get(0).getResult(), is(TestResult.SUCCESS)); assertThat(notifier.failed, is(false)); } "	0	0	1	1	1	0
private boolean isOverloaded1(float limitReduction, int duration) { if (checkPermanentLimit1(limitReduction)) { if (limits1.getTemporaryLimits().size() == 0) { return true; } else { OverloadImpl overload = checkTemporaryLimits1(limitReduction, duration); return overload != null ? true : false; } } else { return false; } } 	1	0	1	0	1	0
private synchronized void close(boolean checkForStaleScan) { if (status != TxStatus.CLOSED) { status = TxStatus.CLOSED;  if (checkForStaleScan && !commitAttempted) { Stamp stamp = env.getSharedResources().getOracleClient().getStamp(); if (startTs <= stamp.getGcTimestamp()) { throw new StaleScanException(); } }  env.getSharedResources().getTimestampTracker().removeTimestamp(startTs); } } 	1	1	0	1	1	0
public boolean commitPrimaryColumn(CommitData cd, Stamp commitStamp) throws AccumuloException, AccumuloSecurityException { if (startTs <= commitStamp.getGcTimestamp()) { rollback(cd); return false; }  return commitPrimaryColumn(cd, commitStamp.getTimestamp()); } 	1	0	1	1	1	0
public static void alterTables(final PrintWriter writer, final PgDiffArguments arguments, final PgSchema oldSchema, final PgSchema newSchema, final SearchPathHelper searchPathHelper) { for (final PgTable newTable : newSchema.getTables()) { if (oldSchema == null || !oldSchema.containsTable(newTable.getName())) { continue; }  final PgTable oldTable = oldSchema.getTable(newTable.getName()); updateTableColumns( writer, arguments, oldTable, newTable, searchPathHelper); checkWithOIDS(writer, oldTable, newTable, searchPathHelper); checkInherits(writer, oldTable, newTable, searchPathHelper); checkTablespace(writer, oldTable, newTable, searchPathHelper); addAlterStatistics(writer, oldTable, newTable, searchPathHelper); addAlterStorage(writer, oldTable, newTable, searchPathHelper); alterComments(writer, oldTable, newTable, searchPathHelper); } } 	1	1	0	0	1	0
public Pipeline pipelined() { Pipeline pipeline = new Pipeline(); pipeline.setClient(client); return pipeline; } 	1	0	1	1	1	0
public static long getAlarmExecutionTime(PreciseConnectivityAlarm alarm) {  // The default value of the execution time long executionTime = alarm.getStartTime() - System.currentTimeMillis();  // If the execution time is inferior to the current system time, if (executionTime < 0) {  /** * If execution time + Duration > Current time * It means the second phase of the alarm needs to be handled * The second phase being to re-enable the connections * The second phase is triggered at the end time of the alarm */ if (executionTime + alarm.getDuration() > 0) { executionTime += alarm.getDuration(); }  /** * In this case the alarm will be triggered on another day * So we get the next day the alarm is supposed to be triggered on, * then add to it the execution time * * This is calculated using the formula below: * executionTime = (Number of days until next alarm trigger).toMiliseconds - (Current time - start time).toMiliseconds * * Example: * - Start time is 7:41 pm * - Current time is 9:41 pm * - Today is Sunday, next alarm trigger is Tuesday * So: * - Number of days until next alarm trigger = 2 days = 48 hours * - Current time - start time = 2 hours * So basically the next alarm is in 46 hours, convert this to miliseconds and this * gives us the time left until the next alarm trigger, which is the alarm's executionTime */ else { executionTime = TimeUnit.DAYS.toMillis(getNumberOfDaysUntilNextAlarm(alarm)) - (System.currentTimeMillis() - executionTime); } }  return executionTime; } 	1	0	0	1	1	0
public Item deleteItem(int i) { if (i == 0) { return get(0); } else return items.remove(i); } 	1	1	1	0	1	0
"@Override protected PhdIndividualProgramProcess executeActivity(PhdIndividualProgramProcess process, User userView, Object object) {  PhdIndividualProgramProcessBean bean = (PhdIndividualProgramProcessBean) object; DateTime stateDate = bean.getStateDate().toDateTimeAtStartOfDay();  PhdProgramProcessState.createWithGivenStateDate(process, PhdIndividualProgramProcessState.WORK_DEVELOPMENT, userView.getPerson(), """", stateDate);  /* * If it is associated to a registration we check that is not active and * try to reactivate it setting the last active state of the * registration */  if (process.getRegistration() == null) { return process; }  /* * The registration is concluded so we skip */ if (process.getRegistration().isConcluded() || process.getRegistration().isSchoolPartConcluded()) { return process; }  if (process.getRegistration().isActive()) { throw new DomainException(""error.PhdIndividualProgramProcess.set.work.development.state.registration.is.active""); }  RegistrationState registrationLastActiveState = process.getRegistration().getLastActiveState();  if (!registrationLastActiveState.isActive()) { throw new DomainException( ""error.PhdIndividualProgramProcess.set.work.development.state.registration.last.state.is.not.active""); }  RegistrationState.createRegistrationState(process.getRegistration(), userView.getPerson(), stateDate, registrationLastActiveState.getStateType());  return process; } "	1	0	1	1	1	0
public ParseResult parse(RSyntaxDocument doc, String style) {  Element root = doc.getDefaultRootElement(); int lineCount = root.getElementCount();  if (taskPattern==null || style==null || SyntaxConstants.SYNTAX_STYLE_NONE.equals(style)){ result.clearNotices(); result.setParsedLines(0, lineCount-1); return result; }  // TODO: Pass in parsed line range and just do that result.clearNotices(); result.setParsedLines(0, lineCount-1);  for (int line=0; line<lineCount; line++) {  Token t = doc.getTokenListForLine(line); int offs = -1; int start = -1; String text = null;  while (t!=null && t.isPaintable()) { if (t.isComment()) {  offs = t.getOffset(); text = t.getLexeme();  Matcher m = taskPattern.matcher(text); if (m.find()) { start = m.start(); offs += start; break; }  } t = t.getNextToken(); }  if (start>-1) { text = text.substring(start); // TODO: Strip off end of MLC's if they're there. int len = text.length(); TaskNotice pn = new TaskNotice(this, text, line, offs, len); pn.setLevel(ParserNotice.Level.INFO); pn.setShowInEditor(false); pn.setColor(COLOR); result.addNotice(pn); }  }  return result;  } 	1	0	1	1	1	0
"public Conjunction<U, R, G, S, F>  byNotDeleted() { addToBuf(""deleted"", Finder.Operator.NE, 0); return conjunction; } "	0	0	1	1	1	0
@Override public List<ApplicationGatewayBackendAddress> backendAddresses() { List<ApplicationGatewayBackendAddress> addresses = new ArrayList<>(); ApplicationGatewayBackend backend = this.backend(); if (backend != null && backend.addresses() != null) { backend.addresses(); } return Collections.unmodifiableList(addresses); } 	1	1	0	0	1	0
"public static Optional<InputPath> getResource(final FileSystem fileSystem, final String absolutePath) { assert fileSystem != null : ""Parameter 'fileSystem' of method 'getResource' must not be null""; assert absolutePath != null : ""Parameter 'absolutePath' of method 'getResource' must not be null"";  final String normalizedPath = FileUtility.convertPathToUniversalForm(absolutePath); return Optional.ofNullable(fileSystem.inputFile(f -> f.absolutePath().equals(normalizedPath))); } "	0	1	0	0	1	0
String processAndReadResponse(final HttpURLConnection conn) throws IOException { Reader inReader = null; final int responseCode = conn.getResponseCode(); if (responseCode == 200) { inReader = new InputStreamReader(conn.getInputStream()); } else { InputStream stream = conn.getErrorStream(); if(stream == null && responseCode == 404) { stream = conn.getInputStream(); }  inReader = new InputStreamReader(conn.getErrorStream()); } final BufferedReader reader = new BufferedReader(inReader); final char[] buffer = new char[256]; final StringBuilder out = new StringBuilder(); try { for (;;) { final int rsz = reader.read(buffer, 0, buffer.length); if (rsz < 0) { break; } out.append(buffer, 0, rsz); } } finally { reader.close(); } return out.toString(); } 	1	0	0	0	1	0
"static AxoObject Create_SampleHold_Cheap() { AxoObject o = new AxoObject(""samplehold~ cheap"", ""low-quality audio rate sample and hold using blit synthesis (not bandwidth limited)""); o.inlets.add(new InletFrac32Buffer(""in"", ""level input"")); o.inlets.add(new InletFrac32Buffer(""trig"", ""trigger input, triggers on rising zero-crossing"")); o.outlets.add(new OutletFrac32BufferBipolar(""out"", ""audio output"")); o.sLocalData = ""  int32_t in0;\n"" + ""  int32_t hold;\n""; o.sInitCode = ""  in0 = 0;\n"" + ""  hold = 0;\n""; o.sSRateCode = ""  if ((%trig%>0)&&!(in0>0)){\n"" + ""    hold = %in%>>1;\n"" + ""  }\n"" + ""  in0 = %trig%;\n"" + ""  %out% = hold;\n""; return o; } "	0	0	0	1	1	0
"public IngridDocument deleteObject(IngridDocument params) { String userId = getCurrentUserUuid(params); boolean removeRunningJob = true; try { // first add basic running jobs info ! addRunningJob(userId, createRunningJobDescription(JobType.DELETE, 0, 1, false));  String uuid = (String) params.get(MdekKeys.UUID); Boolean forceDeleteReferences = (Boolean) params.get(MdekKeys.REQUESTINFO_FORCE_DELETE_REFERENCES); Boolean byOrigId = params.containsKey( MdekKeys.REQUESTINFO_USE_ORIG_ID) ? (Boolean)params.get(MdekKeys.REQUESTINFO_USE_ORIG_ID) : false;  daoObjectNode.beginTransaction();  IngridDocument result = null; if (byOrigId == true) { result = objectService.deleteObjectByOridId( uuid, userId ); } else { result = objectService.deleteObjectFull(uuid, forceDeleteReferences, userId); }  daoObjectNode.commitTransaction();  // only remove from index if object was really removed and not just marked if (result.getBoolean( MdekKeys.RESULTINFO_WAS_FULLY_DELETED )) { if (byOrigId) { String uuidFromOrigId = result.getString( MdekKeys.UUID ); if (log.isDebugEnabled()) log.debug( ""Going to remove it from the index using origId: "" + uuidFromOrigId ); indexManager.delete( docProducer.getIndexInfo(), uuidFromOrigId, true ); } else { if (log.isDebugEnabled()) log.debug( ""Going to remove it from the index using uuId: "" + uuid ); indexManager.delete( docProducer.getIndexInfo(), uuid, true ); } indexManager.flush(); }  return result;  } catch (RuntimeException e) { log.error( ""Error deleting object"", e ); RuntimeException handledExc = handleException(e); removeRunningJob = errorHandler.shouldRemoveRunningJob(handledExc); throw handledExc; } catch (Exception e) { log.error( ""Exception when deleting object"", e ); throw new RuntimeException( e.getMessage() ); } finally { if (removeRunningJob) { removeRunningJob(userId); } } } "	1	1	0	0	0	0
"public static void main(String[] args) { if (args.length < 1) { System.out.println(""You have to set some Parameters""); System.out.println(""first off all you have to decide between 'echo' or 'election' at the first paramter""); System.out.println(""ellipse 2 paramters: e and a number with min 3""); System.out.println(""nodeLoop 1 parameter: nL""); System.out.println(""tree 2 parameters: t and a numer with min 1""); System.out.println(""graph with a loop 2 parameters: lt and a number with min 3""); System.out.println(""full graph with two paramters: fg and a number with min 1""); } else { if (!args[0].equals(""echo"") && !args[0].equals(""election"")) { System.out.println(""You have to decide between 'echo' and 'elction' as first paramter ""); } else { int nodes = 1; BiFunction<CountDownLatch, Integer, NodeAbstract> function = (latch, i) -> new EchoNode((i == 0 ? ""Initiator"" : ""Node"") + i, (i == 0 ? true : false), latch); if (args[0].equals(""election"")) { function = (latch, i) -> new ElectionNode(""Node"" + i, r.nextBoolean(), latch, i); } if (args.length == 3) { nodes = Integer.parseInt(args[2]); } switch (args[1]) { case ""e"": ellipse(nodes, function); break; case ""nl"": nodeLoop(function); break; case ""t"": tree(nodes, function); break; case ""lt"": loopTree(nodes, function); break; case ""fg"": fullGraph(nodes, function); break; default: System.out.println(""Missing Parameters for further information start application without params""); break; } } } } "	0	1	0	1	0	0
"private void authorizeSecurityGroupIngress( HttpServletRequest request, HttpServletResponse response ) throws ADBException, XMLStreamException, IOException { // -> parse the complicated paramters into our standard object EC2AuthorizeRevokeSecurityGroup EC2request = new EC2AuthorizeRevokeSecurityGroup();  String[] groupName = request.getParameterValues( ""GroupName"" ); if ( null != groupName && 0 < groupName.length ) EC2request.setName( groupName[0] ); else { throw new EC2ServiceException( ClientError.MissingParamter, ""Missing required parameter 'Groupname'""); }  // -> not clear how many parameters there are until we fail to get IpPermissions.n.IpProtocol int nCount = 1; do {  	EC2IpPermission perm = new EC2IpPermission();  String[] protocol = request.getParameterValues( ""IpPermissions."" + nCount + "".IpProtocol"" ); if ( null != protocol && 0 < protocol.length ) perm.setProtocol( protocol[0] ); else break;  String[] fromPort = request.getParameterValues( ""IpPermissions."" + nCount + "".FromPort"" ); if ( null != fromPort && 0 < fromPort.length ) { if ( protocol[0].equalsIgnoreCase(""icmp"") ) perm.setIcmpType( fromPort[0] ) ; else perm.setFromPort( Integer.parseInt( fromPort[0]) ); }  String[] toPort = request.getParameterValues( ""IpPermissions."" + nCount + "".ToPort"" ); if ( null != toPort && 0 < toPort.length ) { if ( protocol[0].equalsIgnoreCase(""icmp"") ) perm.setIcmpCode( toPort[0] ); else perm.setToPort( Integer.parseInt( toPort[0]) ); }  // -> list: IpPermissions.n.IpRanges.m.CidrIp int mCount = 1; do {  String[] ranges = request.getParameterValues( ""IpPermissions."" + nCount + "".IpRanges."" + mCount + "".CidrIp"" ); if ( null != ranges && 0 < ranges.length) perm.addIpRange( URLDecoder.decode(ranges[0], ""UTF-8"") ); else break; mCount++;  } while( true );  // -> list: IpPermissions.n.Groups.m.UserId and IpPermissions.n.Groups.m.GroupName mCount = 1; do {  String[] user = request.getParameterValues( ""IpPermissions."" + nCount + "".Groups."" + mCount + "".UserId"" ); if ( null == user || 0 == user.length) break;  String[] name = request.getParameterValues( ""IpPermissions."" + nCount + "".Groups."" + mCount + "".GroupName"" ); if ( null == name || 0 == name.length) break;  EC2SecurityGroup group = new EC2SecurityGroup(); group.setAccount( user[0] ); group.setName( name[0] ); perm.addUser( group ); mCount++;  } while( true );  // -> multiple IP permissions can be specified per group name EC2request.addIpPermission( perm ); nCount++;  } while( true );  if (1 == nCount) { throw new EC2ServiceException( ClientError.MissingParamter, ""Missing required parameter - IpPermissions""); }  // -> execute the request AuthorizeSecurityGroupIngressResponse EC2response = EC2SoapServiceImpl.toAuthorizeSecurityGroupIngressResponse( ServiceProvider.getInstance().getEC2Engine().authorizeSecurityGroup( EC2request )); serializeResponse(response, EC2response); } "	1	1	0	0	0	0
private synchronized void clean() { int size = cache.size(); if (size <= 0) return;  long cleanBefore = System.currentTimeMillis() - SIZE_MILLIS;  Iterator<Map.Entry<Integer,Container>> iter = cache.entrySet().iterator(); int removedPackets = 0; int removedBytes = 0; while (iter.hasNext()) { Container container = iter.next().getValue(); RawPacket pkt = container.pkt;  if (size > MAX_SIZE_PACKETS) { // Remove until we go under the max size, regardless of the // timestamps. size--; } else if (container.timeAdded >= 0 && container.timeAdded < cleanBefore) { // We reached a packet with a timestamp after 'cleanBefore'. // The rest of the packets are even more recent. break; }  iter.remove(); removedBytes += pkt.getLength(); removedPackets++; returnContainer(container); }  synchronized (sizesSyncRoot) { sizeInBytes -= removedBytes; sizeInPackets -= removedPackets; }  } 	1	1	0	1	0	0
"static void loadBasicConfigOptions() { initialModusSize = config.get(""Modus"", ""initialModusSize"", 5).setMinValue(0).setLanguageKey(""minestuck.config.initialModusSize"").getInt(); defaultModusTypes = config.get(""Modus"", ""defaultModusType"", new int[] {0, 1}, ""An array with the possible modus types to be assigned. (0: Stack, 1: Queue, 2: QueueStack, 3: Tree)"", 0, CaptchaDeckHandler.ModusType.values().length - 1).setLanguageKey(""minestuck.config.defaultModusType"").getIntList(); modusMaxSize = config.get(""Modus"", ""modusMaxSize"", 0, ""The max size on a modus. Ignored if the value is 0."").setMinValue(0).setLanguageKey(""minestuck.config.modusMaxSize"").getInt(); if(initialModusSize > modusMaxSize && modusMaxSize > 0) initialModusSize = modusMaxSize; String setting = config.get(""Modus"", ""forceAutobalance"", ""both"", ""This determines if auto-balance should be forced. 'both' if the player should choose, 'on' if forced at on, and 'off' if forced at off."", new String[] {""both"", ""off"", ""on""}).setRequiresWorldRestart(true).setLanguageKey(""minestuck.config.forceAutobalance"").getString(); treeModusSetting = (byte) (setting.equals(""Both"") ? 0 : setting.equals(""On"") ? 1 : 2); config.getCategory(""Modus"").setLanguageKey(""minestuck.config.modus"");  privateComputers = config.get(""General"", ""privateComputers"", false, ""True if computers should only be able to be used by the owner."").setLanguageKey(""minestuck.config.privateComputers"").getBoolean(); privateMessage = config.get(""General"", ""privateComputerMessage"", ""You are not allowed to access other players computers."", ""The message sent when someone tries to access a computer that they aren't the owner of if 'Private Computers' is true."").setLanguageKey(""minestuck.config.privateComputerMessage"").getString(); giveItems = config.get(""General"", ""giveItems"", false, ""Setting this to true replaces editmode with the old Give Items button."").setLanguageKey(""minestuck.config.giveItems"").setRequiresWorldRestart(true).getBoolean();  deployConfigurations = new boolean[1]; deployConfigurations[0] = config.get(""General"", ""deployCard"", false, ""Determines if a card with a captcha card punched on it should be added to the deploy list or not."").setLanguageKey(""minestuck.config.deployCard"").setRequiresWorldRestart(true).getBoolean(); cardCost = config.get(""General"", ""cardCost"", 1, ""An integer that determines how much a captchalouge card costs to alchemize"").setMinValue(1).setLanguageKey(""minestuck.config.cardCost"").setRequiresWorldRestart(true).getInt(); cardRecipe = config.get(""General"", ""cardRecipe"", true, ""Set this to false to remove the captcha card crafting recipe."").setLanguageKey(""minestuck.config.cardRecipe"").setRequiresWorldRestart(true).getBoolean();  generateCruxiteOre = config.get(""General"", ""generateCruxiteOre"", true, ""If cruxite ore should be generated in the overworld."").setRequiresWorldRestart(true).setLanguageKey(""minestuck.config.generateCruxiteOre"").getBoolean(); globalSession = config.get(""General"", ""globalSession"", true, ""Whenether all connetions should be put into a single session or not."").setLanguageKey(""minestuck.config.globalSession"").getBoolean(); overworldEditRange = config.get(""General"", ""overworldEditRange"", 15, ""A number that determines how far away from the computer an editmode player may be before entry."", 3, 50).setRequiresWorldRestart(true).setLanguageKey(""minestuck.config.overworldEditRange"").getInt(); landEditRange = config.get(""General"", ""landEditRange"", 30, ""A number that determines how far away from the center of the brought land that an editmode player may be after entry."", 3, 50).setRequiresWorldRestart(true).setLanguageKey(""minestuck.config.landEditRange"").getInt(); artifactRange = config.get(""General"", ""artifactRange"", 30, ""Radius of the land brought into the medium."", 3, 50).setLanguageKey(""minestuck.config.artifactRange"").getInt();  if(gameSide.isClient())	//Client sided config values { //specialCardRenderer = config.getBoolean(""specialCardRenderer"", ""General"", false, ""Whenether to use the special render for cards or not.""); if(specialCardRenderer && !GLContext.getCapabilities().GL_EXT_framebuffer_object) { specialCardRenderer = false; FMLLog.warning(""[Minestuck] The FBO extension is not available and is required for the advanced rendering of captchalouge cards.""); } //cardResolution = config.getInt(""General"", ""cardResolution"", 1, 0, 5, ""The resolution of the item inside of a card. The width/height is computed by '8*2^x', where 'x' is this config value.""); } } "	0	1	0	1	0	0
"private void handleItemEvents(final MapViewHolder mapViewHolder, final int position) {  final ChatMessage model = getData().get(position); mapViewHolder.chatMessageView.setBackgroundColor(ContextCompat.getColor(currContext, isSelected(position) ? R.color.transluscent_blue : android.R.color.transparent));  if (model != null) { try { final MapHelper mapHelper = new MapHelper(model.getContent()); mapViewHolder.text.setText(mapHelper.getDisplayText()); mapViewHolder.timestampTextView.setText(model.getTimeStamp()); Glide.with(currContext).load(mapHelper.getMapURL()).into(mapViewHolder.mapImage); mapViewHolder.mapImage.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { mapViewHolder.onClick(v);  if (AndroidHelper.isGoogleMapsInstalled(currContext) && mapHelper.isParseSuccessful()) { Uri gmmIntentUri = Uri.parse(String.format(""geo:%s,%s?z=%s"", mapHelper.getLattitude(), mapHelper.getLongitude(), mapHelper.getZoom())); Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri); mapIntent.setPackage(AndroidHelper.GOOGLE_MAPS_PKG); currContext.startActivity(mapIntent); } else { Intent mapIntent = new Intent(Intent.ACTION_VIEW); mapIntent.setData(Uri.parse(mapHelper.getWebLink())); currContext.startActivity(mapIntent); } } });  if (highlightMessagePosition == position) { String text = mapViewHolder.text.getText().toString(); SpannableString modify = new SpannableString(text); Pattern pattern = Pattern.compile(query, Pattern.CASE_INSENSITIVE); Matcher matcher = pattern.matcher(modify); while (matcher.find()) { int startIndex = matcher.start(); int endIndex = matcher.end(); modify.setSpan(new BackgroundColorSpan(Color.parseColor(""#2b3c4e"")), startIndex, endIndex, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); } mapViewHolder.text.setText(modify); }  } catch (Exception e) { e.printStackTrace(); } } } "	0	1	0	1	0	0
"private void initPermissionCombobox(){ ObservableList<String> permissions = FXCollections.observableArrayList(""All"", Permission.ADMIN.toString(), Permission.EDITOR.toString(), Permission.VIEWER.toString()); cbxAddPermission.setItems(permissions); } "	0	1	1	0	0	0
@Override public UncertainParam assign(Var var) { return new UncertainParam(cursor, ParamPostern.getTarget(new AssignAction(cursor, var).doAction(var))); } 	0	1	0	1	0	0
"@Test public void testQuotedPrintable() { doTest(""BEGIN:VCARD\r\nADR;HOME;CHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE:;;"" + ""=38=38=20=4C=79=6E=62=72=6F=6F=6B=0D=0A=43=\r\n"" + ""=4F=20=36=39=39=\r\n"" + ""=39=39;;;\r\nEND:VCARD"", null, null, null, new String[] {""88 Lynbrook\r\nCO 69999""}, null, null, null, null, null, null); } "	0	1	1	1	0	0
"@Test public void testVCardFullN2() { doTest(""BEGIN:VCARD\r\nVERSION:2.1\r\nN:Owen;Sean;;;\r\nEND:VCARD"", null, new String[] {""Sean Owen""}, null, null, null, null, null, null, null, null); } "	0	1	1	1	0	0
"protected TestStep testStep(String location, TestingStage stage, boolean transportSupported) throws IOException { logger.info(""Processing test step at:"" + location); TestStep testStep = new TestStep(); Resource res = this.getResource(location + ""TestStep.json""); if (res == null) throw new IllegalArgumentException(""No TestStep.json found at "" + location); String descriptorContent = FileUtil.getContent(res); ObjectMapper mapper = new ObjectMapper(); JsonNode testStepObj = mapper.readTree(descriptorContent); testStep.setName(testStepObj.findValue(""name"").textValue()); if (!testStepObj.has(""id"")) { throw new IllegalArgumentException(""Missing id for Test Step at "" + location); } testStep.setPreloaded(true); testStep.setScope(TestScope.GLOBAL); testStep.setPersistentId(Long.parseLong(testStepObj.findValue(""id"").asText())); testStep.setDescription(testStepObj.findValue(""description"").textValue()); testStep.setVersion(!testStepObj.has(""version"") ? 1.0 : Double.parseDouble(testStepObj.findValue(""version"").asText())); JsonNode ttypeObj = testStepObj.findValue(""type""); String tttypeValue = ttypeObj != null ? ttypeObj.textValue() : null; TestingType testingType = tttypeValue != null && !"""".equals(tttypeValue) ? TestingType.valueOf(tttypeValue) : TestingType.DATAINSTANCE; testStep.setTestingType(testingType); if (transportSupported && (TestingType.SUT_INITIATOR.equals(testingType) || TestingType.TA_INITIATOR.equals(testingType))) { JsonNode protocolsNode = testStepObj.findValue(""protocols""); if (protocolsNode == null || !protocolsNode.isArray()) { throw new IllegalArgumentException( ""Transport is supported but no protocol defined. Test Step location="" + location); } for (int i = 0; i < protocolsNode.size(); i++) { String protocol = protocolsNode.get(i).textValue(); testStep.getProtocols().add(new Protocol(protocol, i + 1, i == 0)); } }  if (!testingType.equals(TestingType.SUT_MANUAL) && !testingType.equals(TestingType.TA_MANUAL)) { testStep.setTestContext(testContext(location, testStepObj, stage)); }  if (testStepObj.has(""supplements"")) { testStep.getSupplements() .addAll((testDocuments(location, testStepObj.findValue(""supplements"")))); } testStep.setTestStory(testStory(location)); testStep.setJurorDocument(jurorDocument(location)); testStep.setMessageContent(messageContent(location)); testStep.setTestDataSpecification(testDataSpecification(location)); if (testStepObj.findValue(""position"") != null) { testStep.setPosition(testStepObj.findValue(""position"").intValue()); } testStep.setStage(stage); return testStep; } "	1	1	0	0	0	0
"public boolean validForm() { String serverIP = tfServerIP.getText(); int port = MyUtils.strToInt(tfPort.getText()); String enrolmentID = tfEnrolmentID.getText(); int catalogNumber = MyUtils.strToInt(tfCatalogNumber.getText()); String firstName = tfFirstName.getText(); String lastName = tfLastName.getText(); String pathOfProject = tfPathOfProject.getText(); boolean validity = false; if (serverIP.isEmpty()) { setMsg(""Specify the IP-Address of the server!"", true); } else if ((serverIP.split(""."").length != 4 && !serverIP.equals(""localhost"")) || serverIP.length() > 15) { setMsg(""Invalid IP-Address!"", true); } else if (port < 1) { setMsg(""Invalid Port!"", true); } else if (enrolmentID.isEmpty()) { setMsg(""Enter your enrolment id"", true); } else if (enrolmentID.length() >= 10) { setMsg(""The enrolment id is too long!"", true); } else if (catalogNumber < 1) { setMsg(""Invalid catalog number!"", true); } else if (firstName.isEmpty() || firstName.length() > 20) { setMsg(""Enter your correct first name"", true); } else if (lastName.isEmpty() || lastName.length() > 20) { setMsg(""Enter your correct last name"", true); } else if (pathOfProject.isEmpty()) { setMsg(""Specify the path of project!"", true); } else { validity = true; } return validity; } "	0	1	0	1	0	0
"@Override public void start(Stage primaryStage) throws Exception { log.finer(""start()""); initSettings(settings);  currentWidth = settings.getWidth(); currentHeight = settings.getHeight();  mainStage = primaryStage; // 6 and 29 seem to be the frame lengths, at least on W8 primaryStage.setWidth(settings.getWidth() + 6); primaryStage.setHeight(settings.getHeight() + 29); primaryStage.setTitle(settings.getTitle() + "" "" + settings.getVersion()); primaryStage.setResizable(false);  mainMenuRoot = new Pane(); gameRoot = new Pane(); uiRoot = new Pane(); root = new Pane(gameRoot, uiRoot); root.setPrefSize(settings.getWidth(), settings.getHeight());  // init all managers here before anything else qteManager.init();  try { initAssets(); } catch (Exception e) { log.finer(""Exception occurred during initAssets() - "" + e.getMessage()); exit(); }  initMainMenu(mainMenuRoot); initGame(gameRoot); initUI(uiRoot); initInput();  mainMenuScene = new Scene(mainMenuRoot); mainScene = new Scene(root); mainScene.setOnKeyPressed(event -> { if (!isPressed(event.getCode()) && keyTypedActions.containsKey(event.getCode())) { keys.put(event.getCode(), true); keyTypedActions.get(event.getCode()).run(); } else { keys.put(event.getCode(), true); }  }); mainScene.setOnKeyReleased(event -> keys.put(event.getCode(), false));  mainScene.setOnMousePressed(mouse::update); mainScene.setOnMouseDragged(mouse::update); mainScene.setOnMouseReleased(mouse::update); mainScene.setOnMouseMoved(mouse::update);  mainScene.addEventHandler(KeyEvent.KEY_RELEASED, qteManager::keyReleasedHandler);  boolean menuEnabled = mainMenuRoot.getChildren().size() > 0;  primaryStage.setScene(menuEnabled ? mainMenuScene : mainScene); primaryStage.setOnCloseRequest(event -> exit()); primaryStage.show();  timer = new AnimationTimer() { @Override public void handle(long now) { processUpdate(now); } };  postInit();  if (!menuEnabled) timer.start(); } "	1	1	1	0	0	0
public Resolution editScheduledJob() throws ServiceException { AsyncTaskExecutionEntry entry = scheduleJobService.getTaskEntry(scheduledTaskId); if (entry.getTaskClassName().equals(VOCABULARY_RDF_IMPORT_FROM_URL_TASK_CLASS_NAME)) { scheduledTaskView = new ScheduledTaskView(); scheduledTaskView.setDetails(entry); scheduledTaskView.setType(scheduledTaskResolver.resolveTaskTypeFromTaskClassName(entry.getTaskClassName())); scheduledTaskView.setTaskParameters(asyncTaskDataSerializer.deserializeParameters(entry.getSerializedParameters())); Map<String, Object> parameters = asyncTaskDataSerializer.deserializeParameters(entry.getSerializedParameters()); this.vocabularyRdfUrl = (String) parameters.get(VocabularyRdfImportFromUrlTask.PARAM_RDF_FILE_URL); this.emails = (String) parameters.get(VocabularyRdfImportFromUrlTask.PARAM_NOTIFIERS_EMAILS); this.rdfPurgeOption = Enumerations.VocabularyRdfPurgeOption.valueOf((String)parameters.get(VocabularyRdfImportFromUrlTask.PARAM_RDF_PURGE_OPTION)).getRdfPurgeOption(); this.missingConceptsAction = (IVocabularyImportService.MissingConceptsAction) parameters.get(VocabularyRdfImportFromUrlTask.PARAM_MISSING_CONCEPTS_ACTION); this.scheduleInterval = (Integer) parameters.get(VocabularyRdfImportFromUrlTask.PARAM_SCHEDULE_INTERVAL); this.schedulingIntervalUnit = (SchedulingIntervalUnit) parameters.get(VocabularyRdfImportFromUrlTask.PARAM_SCHEDULE_INTERVAL_UNIT); scheduledTaskView.setTaskResult(asyncTaskDataSerializer.deserializeResult(entry.getSerializedResult())); vocabularyFolder = vocabularyService.getVocabularyFolder((String) parameters.get(VocabularyRdfImportFromUrlTask.PARAM_VOCABULARY_SET_IDENTIFIER), (String) parameters.get(VocabularyRdfImportFromUrlTask.PARAM_VOCABULARY_IDENTIFIER), true); } return new ForwardResolution(EDIT_SCHEDULED_TASK_DETAILS); } 	0	1	0	1	0	0
"@Override protected void actionPerformed(GuiButton button) { super.actionPerformed(button);  if (button.id == 0) {  final String accessToken = CTBMod.cache.getOAuth().getAccessToken(); final String name = tfName.getText();  tfName.setText("""");  buttonBack.enabled = false;  new Thread(new Runnable() {  @Override public void run() {  Exception e = null; String creationID = null;  try { // create creation CreateCreationRequest createCreation = new CreateCreationRequest(accessToken);  createCreation.setData(""{\""name\"":\"""" + name + ""\""}"");  buttonUpload.displayString = ""Creating...""; CreateCreationResponse createCreationResponse = createCreation.execute().getResponse();  creationID = createCreationResponse.creation.id;  // create url for upload buttonUpload.displayString = ""Uploading...""; CreationsUploadsRequest creationsUploads = new CreationsUploadsRequest(createCreationResponse.creation.id, accessToken); CreationsUploadsResponse creationsUploadsResponse = creationsUploads.execute().getResponse();  byte[] data = FileUtils.readFileToByteArray(files[index]);  // upload image to s3 UploadS3ImageRequest uploadS3Image = new UploadS3ImageRequest(data, creationsUploadsResponse.url); UploadS3ImageResponse uploadS3Response = uploadS3Image.execute().getResponse();  if (!uploadS3Response.success) { throw new RuntimeException(""Upload Failed: "" + uploadS3Response.message); }  buttonUpload.displayString = ""Finalizing...""; PingCreationsUploadsRequest pingCreationsUploads = new PingCreationsUploadsRequest(creationsUploadsResponse.id, CommandLogin.accessToken); pingCreationsUploads.setData(""""); // fixes null PUT error pingCreationsUploads.execute(); } catch (Exception e2) { e = e2; }  final Exception error = e; final String creation = creationID;  Minecraft.getMinecraft().func_152344_a(new Runnable() {  @Override public void run() {  if (error == null) { Minecraft.getMinecraft().thePlayer.addChatMessage(new ChatComponentText(EnumChatFormatting.GREEN.toString().concat(""[Creation upload successful! (Click to view \"""" + name + ""\"")]"")).setChatStyle(new ChatStyle().setChatClickEvent( new ClickEvent(ClickEvent.Action.OPEN_URL, URL_BASE + creation)).setChatHoverEvent( new HoverEvent(HoverEvent.Action.SHOW_TEXT, new ChatComponentText(""Click to view creation on website."")))));  } else { ChatUtil.sendNoSpamClient(""Upload failed: "" + error.getMessage()); error.printStackTrace(); return; }  Minecraft.getMinecraft().displayGuiScreen(null); GuiUtil.toggleNEI(true); } }); } }).start();  } else if (button.id == -99) { Minecraft.getMinecraft().displayGuiScreen(parentInvalid ? new GuiScreenshotList(parent.parent) : parent); } else if (button.id == -98) { if (confirm > 20) { files[index].delete(); File[] newFiles = ArrayUtils.remove(files, index); parentInvalid = true; Minecraft.getMinecraft().displayGuiScreen(new GuiUploadScreenshot(this, newFiles, index)); } else { confirm++; } } else { int newIndex = index + button.id; if (newIndex >= 0 && newIndex < files.length) { Minecraft.getMinecraft().displayGuiScreen(new GuiUploadScreenshot(this, files, newIndex)); } } } "	1	1	0	0	0	0
"public static String escapeIllegalJcrChars(String name) { StringBuilder buffer = new StringBuilder(name.length() * 2); for (int i = 0; i < name.length(); i++) { char ch = name.charAt(i); if (ch == '%' || ch == '/' || ch == '\\' || ch == ':' || ch == '[' || ch == ']' || ch == '*' || ch == '\'' || ch == '\""' || ch == '\'' || ch == '|' || ch == '?' || ch == '#' || ch == '&' || ch == '+' || ch == '>' || ch == '<' || ch == '!' || ch == '~' || ch == '=' || ch == '(' || ch == ')' || (ch == '.' && name.length() < 3) || (ch == ' ' && (i == 0 || i == name.length() - 1)) || ch == '\t' || ch == '\r' || ch == '\n') { buffer.append('%'); buffer.append(Character.toUpperCase(Character.forDigit(ch / 16, 16))); buffer.append(Character.toUpperCase(Character.forDigit(ch % 16, 16))); } else { buffer.append(ch); } } return buffer.toString(); } "	0	1	0	1	0	0
public Cell getNeighbourAt(int x, int y, Direction dir) { int newX = x + dir.getDX(); int newY = y + dir.getDY(); if (newX >= 0 && newX < BOARDSIZE && newY >= 0 && newY < BOARDSIZE) { return board[newX][newY]; } else { return null; } } 	1	1	1	0	0	0
"private SocketChannel openOutgoingConnection(InetAddress senderAddress, InetAddress receiverAddress, int contactPort, boolean retry, String key) throws IOException { int retry_count = 0; int max_retry = retry ? 2 : 1; SocketChannel clientSock = null;  boolean entered = false; boolean connected = false; boolean attempted = false; try { keyedSemaphore.enterIOCriticalSection(key); entered = true; //we need to check again, now we are in proper critical sec clientSock = getSocket(key); //For nonBlocking connect, consider the socket as usable if //connection is pending. if(clientSock != null && (!clientSock.isConnected() || !clientSock.isOpen()) && !clientSock.isConnectionPending()) { removeSocket(key); clientSock = null; } if(clientSock == null) { attempted = true; //ok, this thread won, let's try to recover conn while (retry_count < max_retry) {  if (clientSock == null) { if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) { logger.logDebug( ""inaddr = "" + receiverAddress); logger.logDebug( ""port = "" + contactPort); } // note that the IP Address for stack may not be // assigned. // sender address is the address of the listening point. // in version 1.1 all listening points have the same IP // address (i.e. that of the stack). In version 1.2 // the IP address is on a per listening point basis. try { clientSock = messageProcessor.connect(new InetSocketAddress(receiverAddress, contactPort), senderAddress, this.messageProcessor.sipStack.connTimeout); //sipStack.getNetworkLayer().createSocket( //		receiverAddress, contactPort, senderAddress); TODO: sender address needed } catch (SocketException e) { // We must catch the socket timeout exceptions here, any SocketException not just ConnectException if (logger.isLoggingEnabled(LogWriter.TRACE_INFO)) { logger.logInfo(""Problem connecting "" + receiverAddress + "" "" + contactPort + "" "" + senderAddress ); } // new connection is bad. // remove from our table the socket removeSocket(key, false); throw new SocketException(e.getClass() + "" "" + e.getMessage() + "" "" + e.getCause() + "" Problem connecting "" + receiverAddress + "" "" + contactPort + "" "" + senderAddress); } putSocket(key, clientSock); break; } else { break; } } } } catch (IOException ex) { if (logger.isLoggingEnabled(LogWriter.TRACE_INFO)) { logger.logInfo( ""Problem OpeningConn: "" + "" inAddr "" + receiverAddress.getHostAddress() + "" port = "" + contactPort + "" retry "" + retry); }  removeSocket(key, false); /* * For TCP responses, the transmission of responses is * controlled by RFC 3261, section 18.2.2 : * * o If the ""sent-protocol"" is a reliable transport protocol * such as TCP or SCTP, or TLS over those, the response MUST be * sent using the existing connection to the source of the * original request that created the transaction, if that * connection is still open. This requires the server transport * to maintain an association between server transactions and * transport connections. If that connection is no longer open, * the server SHOULD open a connection to the IP address in the * ""received"" parameter, if present, using the port in the * ""sent-by"" value, or the default port for that transport, if * no port is specified. If that connection attempt fails, the * server SHOULD use the procedures in [4] for servers in order * to determine the IP address and port to open the connection * and send the response to. */ if (!retry) { if (contactPort <= 0) contactPort = 5060;  key = makeKey(receiverAddress, contactPort); clientSock = this.getSocket(key); if (clientSock == null || !clientSock.isConnected() || !clientSock.isOpen()) { removeSocket(key,false); if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) { logger.logDebug( ""inaddr = "" + receiverAddress + "" port = "" + contactPort); } clientSock = messageProcessor.connect(new InetSocketAddress(receiverAddress, contactPort), senderAddress, this.messageProcessor.sipStack.connTimeout); putSocket(key, clientSock); }  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) { logger.logDebug( ""sending to "" + key ); }   } else { logger.logError(""IOException occured at "" , ex); throw ex; } } finally { if (entered) { if (attempted && !connected) { // new connection is bad. // remove from our table the socket and its semaphore //remove before leaving IO critical section, so sem is //actually released!!! removeSocket(key,true); } keyedSemaphore.leaveIOCriticalSection(key); } } return clientSock; } "	1	1	0	0	0	0
"public void doOnClick(final CommentViewHolder holder, final CommentNode baseNode, final Comment comment) { if (currentlyEditing != null && !currentlyEditing.getText().toString().isEmpty() && holder.getAdapterPosition() <= editingPosition) { new AlertDialogWrapper.Builder(mContext) .setTitle(""Discard comment?"") .setMessage(""Do you really want to discard your comment?"") .setPositiveButton(""Yes"", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) {  doOnClick(holder, baseNode, comment); currentlyEditing = null; editingPosition = -1; if (SettingValues.fastscroll) { mPage.fastScroll.setVisibility(View.VISIBLE); } if (mPage.fab != null) mPage.fab.setVisibility(View.VISIBLE); mPage.overrideFab = false; currentlyEditingId = """"; backedText = """"; View view = ((Activity) mContext).getCurrentFocus(); if (view != null) { InputMethodManager imm = (InputMethodManager) mContext.getSystemService(Context.INPUT_METHOD_SERVICE); imm.hideSoftInputFromWindow(view.getWindowToken(), 0); }  } }).setNegativeButton(""No"", null) .show();  } else { if (isClicking) { isClicking = false; resetMenu(holder.menuArea, true); isHolder.itemView.findViewById(R.id.menu).setVisibility(View.GONE); } else { if (hiddenPersons.contains(comment.getFullName())) { hiddenPersons.remove(comment.getFullName()); unhideAll(baseNode, holder.getAdapterPosition() + 1); if (toCollapse.contains(comment.getFullName())) setViews(comment.getDataNode().get(""body_html"").asText(), submission.getSubredditName(), holder);  toCollapse.remove(comment.getFullName()); hideChildrenObject(holder.children); holder.firstTextView.setVisibility(View.VISIBLE); holder.commentOverflow.setVisibility(View.VISIBLE); } else { int childNumber = getChildNumber(baseNode); if (childNumber > 0) { hideAll(baseNode, holder.getAdapterPosition() + 1); hiddenPersons.add(comment.getFullName()); showChildrenObject(holder.children); ((TextView) holder.children).setText(""+"" + childNumber); } toCollapse.add(comment.getFullName()); if (holder.firstTextView.getVisibility() == View.VISIBLE && SettingValues.collapseComments) { holder.firstTextView.setVisibility(View.GONE); holder.commentOverflow.setVisibility(View.GONE); } else if (SettingValues.collapseComments) { holder.firstTextView.setVisibility(View.VISIBLE); holder.commentOverflow.setVisibility(View.VISIBLE); } } clickpos = holder.getAdapterPosition() + 1; } } } "	1	1	0	0	0	0
"private Node getPremisFile(IMetsElement metsElement, String datastream, FileMD5Info md5Info) throws MetsExportException { PremisComplexType premis = new PremisComplexType(); ObjectFactory factory = new ObjectFactory(); JAXBElement<PremisComplexType> jaxbPremix = factory.createPremis(premis); cz.cas.lib.proarc.premis.File file = factory.createFile(); premis.getObject().add(file); ObjectIdentifierComplexType objectIdentifier = new ObjectIdentifierComplexType(); objectIdentifier.setObjectIdentifierType(""ProArc_URI""); objectIdentifier.setObjectIdentifierValue(Const.FEDORAPREFIX + metsElement.getOriginalPid() + ""/"" + Const.dataStreamToModel.get(datastream)); file.getObjectIdentifier().add(objectIdentifier); PreservationLevelComplexType preservation = new PreservationLevelComplexType(); if (""RAW"".equals(datastream)) { preservation.setPreservationLevelValue(""deleted""); } else { preservation.setPreservationLevelValue(""preservation""); } file.getPreservationLevel().add(preservation); ObjectCharacteristicsComplexType characteristics = new ObjectCharacteristicsComplexType(); characteristics.setCompositionLevel(BigInteger.ZERO); file.getObjectCharacteristics().add(characteristics); FixityComplexType fixity = new FixityComplexType(); fixity.setMessageDigest(md5Info.getMd5()); fixity.setMessageDigestAlgorithm(""MD5""); fixity.setMessageDigestOriginator(""ProArc""); characteristics.getFixity().add(fixity); characteristics.setSize((long) md5Info.getSize()); FormatComplexType format = new FormatComplexType(); characteristics.getFormat().add(format); FormatDesignationComplexType formatDesignation = new FormatDesignationComplexType(); formatDesignation.setFormatName(md5Info.getMimeType()); formatDesignation.setFormatVersion(md5Info.getFormatVersion()); JAXBElement<FormatDesignationComplexType> jaxbDesignation = factory.createFormatDesignation(formatDesignation); format.getContent().add(jaxbDesignation); FormatRegistryComplexType formatRegistry = new FormatRegistryComplexType(); formatRegistry.setFormatRegistryName(""PRONOM""); formatRegistry.setFormatRegistryKey(Const.mimeToFmtMap.get(md5Info.getMimeType())); JAXBElement<FormatRegistryComplexType> jaxbRegistry = factory.createFormatRegistry(formatRegistry); format.getContent().add(jaxbRegistry);  CreatingApplicationComplexType creatingApplication = new CreatingApplicationComplexType(); characteristics.getCreatingApplication().add(creatingApplication); creatingApplication.getContent().add(factory.createCreatingApplicationName(""ProArc""));  creatingApplication.getContent().add(factory.createCreatingApplicationVersion(metsElement.getMetsContext().getProarcVersion())); creatingApplication.getContent().add(factory.createDateCreatedByApplication(MetsUtils.getCurrentDate().toXMLFormat()));  RelationshipComplexType relationShip = new RelationshipComplexType();  if (!(""RAW"").equals(datastream)) { relationShip.setRelationshipType(""derivation""); relationShip.setRelationshipSubType(""created from""); RelatedObjectIdentificationComplexType relatedObject = new RelatedObjectIdentificationComplexType(); relationShip.getRelatedObjectIdentification().add(relatedObject); relatedObject.setRelatedObjectIdentifierType(""ProArc_URI""); relatedObject.setRelatedObjectIdentifierValue(Const.FEDORAPREFIX + metsElement.getOriginalPid() + ""/"" + Const.dataStreamToModel.get(""RAW"")); RelatedEventIdentificationComplexType eventObject = new RelatedEventIdentificationComplexType(); relationShip.getRelatedEventIdentification().add(eventObject); eventObject.setRelatedEventIdentifierType(""ProArc_EventID""); eventObject.setRelatedEventIdentifierValue(Const.dataStreamToEvent.get(datastream)); eventObject.setRelatedEventSequence(BigInteger.ONE); file.getRelationship().add(relationShip); } else { relationShip.setRelationshipType(""creation""); relationShip.setRelationshipSubType(""created from""); LinkingEventIdentifierComplexType eventIdentifier = new LinkingEventIdentifierComplexType(); file.getLinkingEventIdentifier().add(eventIdentifier); eventIdentifier.setLinkingEventIdentifierType(""ProArc_EventID""); eventIdentifier.setLinkingEventIdentifierValue(Const.dataStreamToEvent.get(datastream)); }  String originalFile = MetsUtils.xPathEvaluateString(metsElement.getRelsExt(), ""*[local-name()='RDF']/*[local-name()='Description']/*[local-name()='importFile']""); OriginalNameComplexType originalName = factory.createOriginalNameComplexType(); originalName.setValue(originalFile); file.setOriginalName(originalName);  JAXBContext jc; try { jc = JAXBContext.newInstance(PremisComplexType.class); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db = dbf.newDocumentBuilder(); Document document = db.newDocument();  // Marshal the Object to a Document Marshaller marshaller = jc.createMarshaller(); marshaller.marshal(jaxbPremix, document); XPath xpath = XPathFactory.newInstance().newXPath(); Node premisNode = (Node) xpath.compile(""*[local-name()='premis']/*[local-name()='object']"").evaluate(document, XPathConstants.NODE); return premisNode; } catch (Exception e) { throw new MetsExportException(metsElement.getOriginalPid(), ""Error while generating premis data"", false, e); } } "	1	1	1	0	0	0
public boolean isErrorFatal() { ErrorType type = getErrorType(); ErrorType[] fatalTypes = new ErrorType[]{ErrorType.INVALID_GRANT_INVALID_TOKEN, ErrorType.INVALID_GRANT_TOKEN_EXPIRED, ErrorType.ACCESS_DENIED, ErrorType.NO_CREDIT_CARD_TRIAL_ENDED, ErrorType.SERVICE_BLOCKED, ErrorType.INVALID_CLIENT, ErrorType.UNAUTHORIZED_DEVICE, ErrorType.GRACE_PERIOD_EXPIRED, ErrorType.UNAUTHORIZED,  ErrorType.OTHER}; for (ErrorType fatalType : fatalTypes) { if (type == fatalType) { return true; } } return false; } 	0	1	1	0	0	0
"private static void extractZipIntoDirectory(StringBuilder sb, URI proxy, String groupId, String artifactId, String version, Iterable<String> fallbackRepos) throws URISyntaxException { String file = artifactId + ""-"" + version + "".zip""; List<String> allRepos = new ArrayList<>(); //TODO: There may be cases where this is not good enough if (proxy != null) { String baseProxyURL = (!proxy.toString().endsWith(""/"")) ? proxy.toString() + ""/"" : proxy.toString(); allRepos.add(baseProxyURL); }  for (String fallbackRepo : fallbackRepos) { allRepos.add(fallbackRepo); }  sb.append(""cp /tmp/"" + file + "" "" + file).append(""\n"");  for (String repo : allRepos) { sb.append(""if [ ! -f "" + file + "" ] && [ ! -s "" + file + ""] ; then "").append(""maven_download "").append(repo).append("" "") .append(groupId).append("" "") .append(artifactId).append("" "") .append(version).append("" "") .append(""zip"").append("" ; fi \n""); } sb.append(""exit_if_not_exists "").append(file).append(""\n""); sb.append(""run extract_zip "").append(file).append(""\n""); } "	0	1	1	1	0	0
"public void testOutputTransparentColor2() { JDBCAccess access = getJDBCAccess(); ImageLevelInfo li = access.getLevelInfo(access.getNumOverviews());  GeneralEnvelope env = new GeneralEnvelope(new double[] { li.getExtentMinX() - DELTA, li.getExtentMinY() - DELTA }, new double[] { li.getExtentMinX() + DELTA, li.getExtentMinY() + DELTA });  try { env.setCoordinateReferenceSystem(CRS.decode(CRSNAME)); imageMosaic(""transparent2"", getConfigUrl(), env, 400, 400, Color.GREEN,Color.GREEN, null); } catch (Exception e) { Assert.fail(e.getMessage()); } } "	0	1	1	0	0	0
"@Override public DatabaseDataType toDatabaseDataType(Database database) { String originalDefinition = StringUtils.trimToEmpty(getRawDefinition());  if (database instanceof H2Database || database instanceof HsqlDatabase) { if (originalDefinition.toLowerCase().startsWith(""varbinary"") || originalDefinition.startsWith(""java.sql.Types.VARBINARY"")) { return new DatabaseDataType(""VARBINARY"", getParameters()); } else if (originalDefinition.toLowerCase().startsWith(""longvarbinary"") || originalDefinition.startsWith(""java.sql.Types.LONGVARBINARY"")) { return new DatabaseDataType(""LONGVARBINARY"", getParameters()); } else if (originalDefinition.toLowerCase().startsWith(""binary"")) { return new DatabaseDataType(""BINARY"", getParameters()); } else { return new DatabaseDataType(""BLOB""); } }  if (database instanceof MSSQLDatabase) { Object[] parameters = getParameters(); if (originalDefinition.equalsIgnoreCase(""varbinary"") || originalDefinition.equals(""[varbinary]"") || originalDefinition.matches(""(?i)varbinary\\s*\\(.+"") || originalDefinition.matches(""\\[varbinary\\]\\s*\\(.+"")) {  return new DatabaseDataType(database.escapeDataTypeName(""varbinary""), maybeMaxParam(parameters, database)); } else if (originalDefinition.equalsIgnoreCase(""binary"") || originalDefinition.equals(""[binary]"") || originalDefinition.matches(""(?i)binary\\s*\\(.+"") || originalDefinition.matches(""\\[binary\\]\\s*\\(.+"")) {  if (parameters.length < 1) { parameters = new Object[]{1}; } else if (parameters.length > 1) { parameters = Arrays.copyOfRange(parameters, 0, 1); } return new DatabaseDataType(database.escapeDataTypeName(""binary""), parameters); } if (originalDefinition.equalsIgnoreCase(""image"") || originalDefinition.equals(""[image]"") || originalDefinition.matches(""(?i)image\\s*\\(.+"") || originalDefinition.matches(""\\[image\\]\\s*\\(.+"")) {  return new DatabaseDataType(database.escapeDataTypeName(""image"")); } if (parameters.length == 0) { return new DatabaseDataType(database.escapeDataTypeName(""varbinary""), ""MAX""); } else { return new DatabaseDataType(database.escapeDataTypeName(""varbinary""), maybeMaxParam(parameters, database)); } }  if (database instanceof MySQLDatabase) { if (originalDefinition.toLowerCase().startsWith(""blob"") || originalDefinition.equals(""java.sql.Types.BLOB"")) { return new DatabaseDataType(""BLOB""); } else if (originalDefinition.toLowerCase().startsWith(""varbinary"") || originalDefinition.equals(""java.sql.Types.VARBINARY"")) { return new DatabaseDataType(""VARBINARY"", getParameters()); } else if (originalDefinition.toLowerCase().startsWith(""tinyblob"")) { return new DatabaseDataType(""TINYBLOB""); } else if (originalDefinition.toLowerCase().startsWith(""mediumblob"")) { return new DatabaseDataType(""MEDIUMBLOB""); } else if (originalDefinition.toLowerCase().startsWith(""binary"")) { return new DatabaseDataType(""BINARY"", getParameters()); } else { return new DatabaseDataType(""LONGBLOB""); } }  if (database instanceof PostgresDatabase) { if (originalDefinition.toLowerCase().startsWith(""blob"") || originalDefinition.equals(""java.sql.Types.BLOB"")) { // There are two ways of handling byte arrays (""BLOBs"") in pgsql. For consistency with Hibernate ORM // (see upstream bug https://liquibase.jira.com/browse/CORE-1863) we choose the oid variant. // For a more thorough discussion of the two alternatives, see: // https://stackoverflow.com/questions/3677380/proper-hibernate-annotation-for-byte return new DatabaseDataType(""OID""); }  return new DatabaseDataType(""BYTEA""); }  if (database instanceof SybaseASADatabase) { return new DatabaseDataType(""LONG BINARY""); }  if (database instanceof SybaseDatabase) { return new DatabaseDataType(""IMAGE""); }  if (database instanceof OracleDatabase) { if (getRawDefinition().toLowerCase().startsWith(""bfile"")) { return new DatabaseDataType(""BFILE""); }  if (originalDefinition.toLowerCase().startsWith(""raw"") || originalDefinition.toLowerCase().startsWith(""binary"") || originalDefinition.toLowerCase().startsWith(""varbinary"")) { return new DatabaseDataType(""RAW"", getParameters()); }  return new DatabaseDataType(""BLOB""); }  if (database instanceof FirebirdDatabase) { return new DatabaseDataType(""BLOB""); }  return super.toDatabaseDataType(database); } "	0	1	1	0	0	0
"private void postBigBlind() { actor.postBigBlind(bigBlind); contributePot(bigBlind); notifyBoardUpdated(); notifyPlayerActed();  //output outputBuilder.append(actor.getName()).append("": posts big blind "") .append(bigBlind).append(""\n""); } "	1	1	0	0	0	0
private long getInitialOffset(KafkaTemplate template, String topicName) { try { Partition partition = new Partition(KafkaMessageBus.escapeTopicName(topicName), 0); BrokerAddress leader = template.getConnectionFactory().getLeader(partition); return template.getConnectionFactory().connect(leader) .fetchInitialOffset(OffsetRequest.LatestTime()).getResult(partition); } catch (PartitionNotFoundException e) { return 0; } } 	1	1	1	0	0	0
private boolean isManyToMany() { boolean isNotHaveAttributes = joinEntity.getAttributes().size() == 0;  return isNotHaveAttributes && reverseRelationship1 != null && reverseRelationship1.isToDependentPK() && reverseRelationship2 != null && reverseRelationship2.isToDependentPK() && entity1 != null && entity2 != null && !entity1.equals(entity2); } 	0	1	1	0	0	0
"@SuppressWarnings(""unchecked"") public Set<? extends NonUniformCostIntervalGrid> lookupCells(Position position) { Set<NonUniformCostIntervalGrid> cells = null;  if (null != this.globe) { cells = (Set<NonUniformCostIntervalGrid>) super.lookupCells(globe.computePointFromPosition(position)); }  return cells; } "	0	1	0	1	0	0
"static boolean isExceptionMsgContained(final String toCompare, final String message) { return LoggerUtils.logAndReturn( getLogger(), Level.FINEST, ""Exception messsage contained result [{0}] for [{1}] message [{2}]"", ((null == toCompare || null == message) ? false : message.contains(toCompare)), toCompare, message); } "	0	1	0	1	0	0
"@RequestMapping(value = ""/processingPeriods/search"", method = RequestMethod.GET) public ResponseEntity<?> searchProcessingPeriods( @RequestParam(value = ""programId"", required = true) UUID programId, @RequestParam(value = ""facilityId"", required = true) UUID facilityId) throws InvalidIdException, RequisitionGroupProgramScheduleException {  if (programId == null) { throw new InvalidIdException(""Program id must be provided.""); }  if (facilityId == null) { throw new InvalidIdException(""Facility id must be provided.""); }  Program program = programRepository.findOne(programId); Facility facility = facilityRepository.findOne(facilityId);  List<ProcessingPeriod> periods = new ArrayList<>();  if (program != null && facility != null) { periods = periodService.filterPeriods(program, facility); }  return ResponseEntity.ok(exportToDtos(periods)); } "	0	1	1	0	0	0
"public void reAssignSlotsWhenMemberLeaves(String nodeId) { //Remove the entry from slot assignment map  HashmapStringTreeSetWrapper wrapper = slotAssignmentMap.remove(nodeId); HashMap<String, TreeSet<Slot>> queueToSlotMap = null; if (null != wrapper) { queueToSlotMap = wrapper.getStringListHashMap(); } if (queueToSlotMap != null) { for (Map.Entry<String, TreeSet<Slot>> entry : queueToSlotMap.entrySet()) { TreeSet<Slot> slotsToBeReAssigned = entry.getValue(); TreeSet<Slot> freeSlotTreeSet = new TreeSet<Slot>(); TreeSetSlotWrapper treeSetStringWrapper = new TreeSetSlotWrapper();  for (Slot slotToBeReAssigned : slotsToBeReAssigned) {  //Re-assign only if the slot is not empty if (!SlotUtils.checkSlotEmptyFromMessageStore(slotToBeReAssigned)) { treeSetStringWrapper.setSlotTreeSet(freeSlotTreeSet); unAssignedSlotMap.putIfAbsent(slotToBeReAssigned.getStorageQueueName(), treeSetStringWrapper); //Lock key is queueName + SlotManagerClusterMode Class String lockKey = entry.getKey() + SlotManagerClusterMode.class; synchronized (lockKey.intern()) { if (slotToBeReAssigned.addState(SlotState.RETURNED)) { treeSetStringWrapper = unAssignedSlotMap .get(slotToBeReAssigned.getStorageQueueName()); freeSlotTreeSet = treeSetStringWrapper.getSlotTreeSet(); //String jsonSlotString = gson.toJson(slotsToBeReAssigned); freeSlotTreeSet.add(slotToBeReAssigned); treeSetStringWrapper.setSlotTreeSet(freeSlotTreeSet); unAssignedSlotMap .set(slotToBeReAssigned.getStorageQueueName(), treeSetStringWrapper);  if (log.isDebugEnabled()) { log.debug(""Returned slot "" + slotToBeReAssigned + ""from node "" + nodeId + "" as member left""); } } } } } } }  //delete all overlapped slots for the node overLappedSlotMap.remove(nodeId); if(log.isDebugEnabled()) { log.debug(""Removed all overlapped slots for node "" + nodeId); }  } "	1	1	1	0	0	0
private void applyParametersFromIntentExtras() { Intent intent = getIntent(); if (intent != null) { Bundle extras = intent.getExtras(); if (extras != null) { mMaterialTabs.setIndicatorColor(getResources().getColor(extras.getInt(TabsSettingsFragment.INDICATOR_COLOR))); mMaterialTabs.setUnderlineColor(getResources().getColor(extras.getInt(TabsSettingsFragment.UNDERLINE_COLOR)));  mMaterialTabs.setIndicatorHeight(Utils.dpToPx(getResources(), extras.getInt(TabsSettingsFragment.INDICATOR_HEIGHT))); mMaterialTabs.setUnderlineHeight(Utils.dpToPx(getResources(), extras.getInt(TabsSettingsFragment.UNDERLINE_HEIGHT)));  mMaterialTabs.setTabPaddingLeftRight(Utils.dpToPx(getResources(), extras.getInt(TabsSettingsFragment.TAB_PADDING))); mMaterialTabs.setScrollOffset(Utils.dpToPx(getResources(), extras.getInt(TabsSettingsFragment.SCROLL_OFFSET)));  mMaterialTabs.setPaddingMiddle(extras.getBoolean(TabsSettingsFragment.PADDING_MIDDLE)); mMaterialTabs.setShouldExpand(extras.getBoolean(TabsSettingsFragment.SHOULD_EXPAND)); mMaterialTabs.setAllCaps(extras.getBoolean(TabsSettingsFragment.TEXT_ALL_CAPS));  int toolbarColor = getResources().getColor(extras.getInt(TabsSettingsFragment.TOOLBAR_BACKGROUND)); mToolbar.setBackgroundColor(toolbarColor); mMaterialTabs.setBackgroundColor(getResources().getColor(extras.getInt(TabsSettingsFragment.TAB_BACKGROUND)));  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { Window window = getWindow(); window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS); window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS); window.setStatusBarColor(Color.argb(Color.alpha(toolbarColor), Color.red(toolbarColor) / 2, Color.green(toolbarColor) / 2, Color.blue(toolbarColor) / 2)); }  mMaterialTabs.setTextColorSelected(getResources().getColor(extras.getInt(TabsSettingsFragment.TEXT_COLOR_SELECTED))); mMaterialTabs.setTextColorUnselected(getResources().getColor(extras.getInt(TabsSettingsFragment.TEXT_COLOR_UNSELECTED)));  mMaterialTabs.setTabTypefaceSelectedStyle(extras.getInt(TabsSettingsFragment.TEXT_STYLE_SELECTED)); mMaterialTabs.setTabTypefaceUnselectedStyle(extras.getInt(TabsSettingsFragment.TEXT_STYLE_UNSELECTED));  mMaterialTabs.setRippleDuration(extras.getInt(RippleSettingsFragment.RIPPLE_DURATION)); mMaterialTabs.setRippleAlphaFloat(extras.getFloat(RippleSettingsFragment.RIPPLE_ALPHA_FLOAT)); mMaterialTabs.setRippleColor(getResources().getColor(extras.getInt(RippleSettingsFragment.RIPPLE_COLOR))); mMaterialTabs.setRippleDelayClick(extras.getBoolean(RippleSettingsFragment.RIPPLE_DELAY_CLICK)); mMaterialTabs.setRippleDiameterDp(extras.getFloat(RippleSettingsFragment.RIPPLE_DIAMETER)); mMaterialTabs.setRippleFadeDuration(extras.getInt(RippleSettingsFragment.RIPPLE_FADE_DURATION)); mMaterialTabs.setRippleHighlightColor(getResources().getColor(extras.getInt(RippleSettingsFragment.RIPPLE_HIGHLIGHT_COLOR))); mMaterialTabs.setRippleHover(extras.getBoolean(RippleSettingsFragment.RIPPLE_HOVER)); mMaterialTabs.setRippleInAdapter(false); mMaterialTabs.setRippleOverlay(extras.getBoolean(RippleSettingsFragment.RIPPLE_OVERLAY)); mMaterialTabs.setRipplePersistent(extras.getBoolean(RippleSettingsFragment.RIPPLE_PERSISTENT)); mMaterialTabs.setRippleRoundedCornersDp(extras.getFloat(RippleSettingsFragment.RIPPLE_ROUNDED_CORNERS_RADIUS)); } } } 	0	1	0	1	0	0
"@Override public String toString() { return ""Client [id="" + id + "", name="" + name + "", lastUpdate="" + lastUpdate == null ? null : lastUpdate.toInstant() + "", defaultClient="" + defaultClient + ""]""; } "	0	1	0	1	0	0
public static boolean isOuterPossible() { return Settings.island_distance >= Settings.island_protectionRange && (Settings.island_distance % 32 == 0 || Settings.island_distance - Settings.island_protectionRange > 32); } 	1	1	0	1	0	0
"private Hash calculateHash() { try { MessageDigest md = MessageDigest.getInstance(""SHA-256""); String text = this.getOwnerName() + this.getOwnerIban() + this.getOwnerPublicKey().toString() + this.getContactName() + this.getContactIban() + this.getContactPublicKey().toString() + this.getBlockType().name() + String.valueOf(this.getSequenceNumber()) + this.getPreviousHashChain().toString() + this.getPreviousHashSender().toString(); md.update(text.getBytes(""UTF-8"")); byte[] digest = md.digest(); Hash hash = new Hash(String.format(""%064x"", new BigInteger(1, digest))); return hash; } catch (Exception e) { return new Hash(e.getMessage()); } } "	0	1	1	0	0	0
public List<VariableSymbol> getAllOffsetVariables() { final List<VariableSymbol> aliases = Lists.newArrayList(); aliases.addAll(getParameterAliasSymbols()); aliases.addAll(getStateAliasSymbols());  final List<VariableSymbol> invertableAliases = aliases.stream() .filter(variable -> isInvertableExpression(variable.getDeclaringExpression().get()) || variable.isParameter() && isRelativeExpression(variable.getDeclaringExpression().get())) .collect(Collectors.toList());  // Use sets to filter double variables, e.g. a variable that is used twice on the right side final Set<VariableSymbol> offsets = invertableAliases.stream() .map(alias -> AliasInverter.offsetVariable(alias.getDeclaringExpression().get())) .collect(Collectors.toSet());  return Lists.newArrayList(offsets); } 	0	1	0	1	0	0
public static ForgeDirection calcLocalDirection(ForgeDirection value, ForgeDirection face){ int n = indexHelperArray(face); int d = indexHelperArray(value); if(n<0 || d<0) return value; return dir[(d+n)%4]; } 	1	1	0	1	0	0
"public void testRefreshBlogContentEmptyResponse() throws InterruptedException { XMLRPCFactoryTest.setPrefixAllInstances(""empty""); final CountDownLatch countDownLatch = new CountDownLatch(1); Blog dummyBlog = new Blog("""", """", """"); new ApiHelper.RefreshBlogContentTask(mTargetContext, dummyBlog, new GenericCallback() { @Override public void onSuccess() { assertTrue(false); countDownLatch.countDown(); }  @Override public void onFailure(ErrorType errorType, String errorMessage, Throwable throwable) { assertTrue(true); countDownLatch.countDown(); } }).execute(false); countDownLatch.await(5000, TimeUnit.SECONDS); } "	0	1	1	1	0	0
@Override public int[][] getDrops(Item item) { if (item.isShovel()) { return new int[][]{ {Item.SNOWBALL, 0, 8} }; } return new int[][]{}; } 	1	1	0	1	0	0
"@Test public void processDestination2017Line(){  // valid line String validLine = ""1,Palace of Holyroodhouse,2.9,N""; assertTrue(fileReaderObject.processDestination2017Line(validLine));  //          INVALID DESTINATION ID // id is 0, but accepted at this stage String invalidLine0 = ""0,Palace of Holyroodhouse,2.9,N""; assertTrue(fileReaderObject.processDestination2017Line(invalidLine0));  // id is negative, but accepted at this stage String invalidLine1 = ""-1,Palace of Holyroodhouse,2.9,N""; assertTrue(fileReaderObject.processDestination2017Line(invalidLine1));  // id is String String invalidLine2 = ""A,Palace of Holyroodhouse,2.9,N""; assertTrue(fileReaderObject.processDestination2017Line(invalidLine2));  // id is empty String invalidLine3 = """"; assertFalse(fileReaderObject.processDestination2017Line(invalidLine3));   //          INVALID DESTINATION NAME  // empty String invalidLine4 = ""50,,6.6,Y""; assertFalse(fileReaderObject.processDestination2017Line(invalidLine4));  // invalid destination name but accepted at this stage (too short) String invalidLine5 = ""51,XX,0.4,N""; assertTrue(fileReaderObject.processDestination2017Line(invalidLine5));  // invalid destination name but accepted at this stage (too long) String invalidLine6 = ""52,ThisISAdestinationNameWithMoreThan30Characters,0.4,N""; assertTrue(fileReaderObject.processDestination2017Line(invalidLine6));   //          INVALID DISTANCE // invalid but accepted at this stage (negative) String invalidLine7 = ""61,Heriot Watt University,-1,Y""; assertTrue(fileReaderObject.processDestination2017Line(invalidLine7));  // invalid but accepted at this stage (0) String invalidLine8 = ""62,Napier University,0.0,N""; assertTrue(fileReaderObject.processDestination2017Line(invalidLine8));  // invalid but accepted at this stage (too fast) String invalidLine9 = ""63,George Street,1000000003,N""; assertTrue(fileReaderObject.processDestination2017Line(invalidLine9));  // invalid (empty) String invalidLine10 = ""63,George Street,,N""; assertFalse(fileReaderObject.processDestination2017Line(invalidLine10));  // invalid (space) String invalidLine102 = ""63,George Street,  ,N""; assertFalse(fileReaderObject.processDestination2017Line(invalidLine102));  // invalid (String) String invalidLine1023 = ""63,George Street,AA,N""; assertFalse(fileReaderObject.processDestination2017Line(invalidLine1023));  //          INVALID URBAN  // invalid (empty) String invalidLine11 = ""71,Heriot Watt University,7.2,""; assertFalse(fileReaderObject.processDestination2017Line(invalidLine11));  // invalid (space) String invalidLine112 = ""72,Heriot Watt University,7.2,  ""; assertFalse(fileReaderObject.processDestination2017Line(invalidLine112));  // invalid but (not Y or N) String invalidLine12 = ""73,Napier University,5.0,X""; assertFalse(fileReaderObject.processDestination2017Line(invalidLine12));  // invalid (integer) String invalidLine13 = ""74,George Street,10,23""; assertFalse(fileReaderObject.processDestination2017Line(invalidLine13));    //          EXTREME CASE // invalid String invalidLine14 = "",,,\t""; assertFalse(fileReaderObject.processDestination2017Line(invalidLine14));  // invalid String invalidLine15 = "",,,,,,,,,,,,,,,,,""; assertFalse(fileReaderObject.processDestination2017Line(invalidLine15));  // invalid (empty) String invalidLine16 = """"; assertFalse(fileReaderObject.processDestination2017Line(invalidLine16)); } "	0	1	0	1	0	0
"private void writeRevisitRecord( FileInputStream fis, FileOutputStream fos, int offset, String refersToUri, String refersToDate ) throws IOException { WarcReader wrc = new WarcReaderCompressed();  // TODO: should not create a new FileInputStream object when invoking writeRevisitRecord method fis = new FileInputStream( ""/home/msm/warcrefs/JAN25_00336-20110731050545553-00076-14438~ia714237.archive.bibalex.org~8443.warc.gz"" ); fis.skip( offset ); WarcRecord record = wrc.getNextRecordFrom( fis, offset );  // http header HttpHeader httpHeader = record.getHttpHeader(); String httpHeaderStr = String.format( ""%s %d %s\n"", httpHeader.httpVersion, httpHeader.statusCode, httpHeader.reasonPhrase);  for ( HeaderLine hl : httpHeader.getHeaderList() ) httpHeaderStr += String.format( ""%s: %s\n"", hl.name, hl.value );  // warc header WarcWriter ww = WarcWriterFactory.getWriter( fos, false ); WarcRecord warcHeader = WarcRecord.createRecord( ww );  warcHeader.header.warcTypeStr = ""revisit""; warcHeader.header.warcTargetUriStr = record.header.warcTargetUriStr; warcHeader.header.warcDate = record.header.warcDate; warcHeader.header.warcPayloadDigest = record.header.warcPayloadDigest; warcHeader.header.warcIpAddress = record.header.warcIpAddress; warcHeader.header.warcProfileStr = ""http://netpreserve.org/warc/1.0/revisit/identical-payload-digest""; warcHeader.header.warcRefersToTargetUriStr = refersToUri; warcHeader.header.warcRefersToDateStr = refersToDate; warcHeader.header.warcRecordIdUri = record.header.warcRecordIdUri; warcHeader.header.contentType = record.header.contentType; warcHeader.header.contentLength = ( long ) httpHeaderStr.length();  // Write warc header and http header ww.writeHeader( warcHeader ); ww.writePayload( httpHeaderStr.getBytes() );  ww.closeRecord(); } "	1	0	1	1	0	0
public byte getBlue() { return (byte) (this._packedValue >> 16); } 	1	0	1	1	0	0
@Override public double getUpdateCount() { // update count is valid only for navx-micro return (updateCount++); } 	1	0	1	1	0	0
public boolean removeDataSet(T d) {  if (d == null) return false;  boolean removed = mDataSets.remove(d);  // if a DataSet was removed if (removed) {  mYValCount -= d.getEntryCount(); mYValueSum -= d.getYValueSum();  calcMinMax(mDataSets); }  return removed; } 	1	0	1	0	0	0
