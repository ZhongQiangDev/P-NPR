text	recoder	tare	rewardrepair	selfapr	gamma	allfailure
"public void Func1() { String[] var1 = new DateFormatSymbols().getMonths(); for (int var2 = 0; var2 <= totalMonths; var2++) { String var3 = var1[var2]; System.out.println(""var3 = "" + var3); monthList.add(var1[var2]); } int var4 = tableValues.size(); for (int var2 = 0; var2 < var4 ; var2++) { TableRow[] var5 = new TableRow[var4]; var5[var2] = new TableRow(getActivity()); var5[var2].setPadding(40,40,40,40); TextView var6 = new TextView(getActivity()); var6.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT, 1f)); var6.setText(monthList.get(var2)); var6.setTextColor(Color.WHITE); TextView var7 = new TextView(getActivity()); var7.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT, 1f)); var7.setGravity(Gravity.RIGHT); float var8 = ((float)tableValues.get(var2)/(float)totalVisits * 100); DecimalFormat var9 = new DecimalFormat(""0.00""); String var10 = var9.format(var8)+ "" %""; String var11 = tableValues.get(var2).toString() + ""\n"" + var10; SpannableString var12 =  new SpannableString(var11); var12.setSpan(new RelativeSizeSpan(0.7f), tableValues.get(var2).toString().length() , var12.length(), 0); // set size, start-stop var7.setText(var12); var7.setTextColor(Color.WHITE); var5[var2].addView(var6); var5[var2].addView(var7); table.addView(var5[var2]); } } "	1	0	1	1	0	0
"@Test public void Func1() throws Exception { navigation.navigate(""folderName"").files.remove(subSubFile); navigation.navigate(""folderName"").pushNotification(subSubFile, DELETE); waitForUI(); waitUntil(() -> folderTree.getChildren().get(0).getChildren().isEmpty()); search(""inner""); expectChildren(0); } "	0	1	0	0	1	0
"@SuppressWarnings(""unchecked"") public boolean Func1() { try { final ObjectOutputStream var1 = new ObjectOutputStream(streams.getBufferedOut()); var1.flush(); final ObjectInputStream var2 = new ObjectInputStream(streams.getBufferedIn()); clientName = (String) var2.readObject(); if (loginValidator == null) { var1.writeObject(null); var1.flush(); final String var3 = (String) var2.readObject(); if (var3 != null) { throw new IllegalArgumentException(""something non null var3 var2 response to null var4 "" + var3); } System.var1.println(""Server done""); return true; } final Map<String, String> var4 = loginValidator.getChallengeProperties(clientName, remoteAddress); if (var4 == null) { throw new IllegalStateException(""Challenge can't be null""); } var1.writeObject(var4); var1.flush(); final Map<String, String> var5 = (Map<String, String>) var2.readObject(); final String var6 = MacFinder.GetHashedMacAddress(); final String var7 = loginValidator.verifyConnection(var4, var5, clientName, var6, remoteAddress); if (var7 == null) { var1.writeObject(null); clientName = serverMessenger.getUniqueName(clientName); var1.writeObject(clientName); var1.flush(); return true; } var1.writeObject(var7); var1.flush(); return false; } catch (final Exception e) { logger.log(Level.SEVERE, e.getMessage(), e); return false; } } "	1	1	1	1	1	0
private boolean Func1() { Token var1; var1 = jj_scanpos; if (jj_scan_token(46)) jj_scanpos = var1; if (jj_3R_69()) return true; return false; } 	0	1	1	1	0	0
@Override public void Func1() { super.Func1(); mCustomTabHelper.bindCustomTabsService(this.getActivity(), uri); } 	0	1	0	0	1	0
"@EventHandler public void Func1(PlayerInteractEvent var1) { if (War.war.isLoaded()) { Player var2 = var1.getPlayer(); if (var1.getItem().getType() == Material.WOOD_SWORD && War.war.isWandBearer(var2)) { String var3 = War.war.getWandBearerZone(var2); ZoneSetter var4 = new ZoneSetter(var2, var3); if (var1.getAction() == Action.LEFT_CLICK_AIR || var1.getAction() == Action.RIGHT_CLICK_AIR) { War.war.badMsg(var2, ""wand.toofar""); } else if (var1.getAction() == Action.LEFT_CLICK_BLOCK) { var4.placeCorner1(var1.getClickedBlock()); var1.setUseItemInHand(Result.ALLOW); } else if (var1.getAction() == Action.RIGHT_CLICK_BLOCK) { var4.placeCorner2(var1.getClickedBlock()); var1.setUseItemInHand(Result.ALLOW); } } Warzone var5 = Warzone.getZoneByPlayerName(var2.getName()); if (var5 != null && var5.getLoadoutSelections().containsKey(var2.getName()) && var5.getLoadoutSelections().get(var2.getName()).isStillInSpawn()) { var1.setUseItemInHand(Result.DENY); var1.setCancelled(true); var2.playSound(var2.getLocation(), Sound.ENTITY_ITEM_BREAK, 1, 0); } if (var5 != null && var1.getAction() == Action.RIGHT_CLICK_BLOCK && var1.getClickedBlock().getType() == Material.ENDER_CHEST && !var5.getWarzoneConfig().getBoolean(WarzoneConfig.ALLOWENDER)) { var1.setCancelled(true); War.war.badMsg(var2, ""use.ender""); } Team var6 = Team.getTeamByPlayerName(var2.getName()); if (var5 != null && var6 != null && var1.getAction() == Action.RIGHT_CLICK_BLOCK && var1.getClickedBlock().getType() == Material.ENCHANTMENT_TABLE && var6.getTeamConfig().resolveBoolean(TeamConfig.XPKILLMETER)) { var1.setCancelled(true); War.war.badMsg(var2, ""use.enchant""); if (var5.getAuthors().contains(var2.getName())) { War.war.badMsg(var2, ""use.xpkillmeter""); } } if (var5 != null && var6 != null && var1.getAction() == Action.RIGHT_CLICK_BLOCK && var1.getClickedBlock().getType() == Material.ANVIL && var6.getTeamConfig().resolveBoolean(TeamConfig.XPKILLMETER)) { var1.setCancelled(true); War.war.badMsg(var2, ""use.anvil""); if (var5.getAuthors().contains(var2.getName())) { War.war.badMsg(var2, ""use.xpkillmeter""); } } if (var5 != null && var6 != null && var1.getAction() == Action.RIGHT_CLICK_BLOCK && var1.getClickedBlock().getState() instanceof InventoryHolder && var5.isFlagThief(var2)) { var1.setCancelled(true); War.war.badMsg(var2, ""drop.flag.disabled""); } } if (var1.getAction() == Action.RIGHT_CLICK_BLOCK || var1.getAction() == Action.RIGHT_CLICK_AIR) { Player var2 = var1.getPlayer(); Warzone var5 = Warzone.getZoneByPlayerName(var2.getName()); if (var5 != null && var5.getWarzoneConfig().getBoolean(WarzoneConfig.SOUPHEALING)) { ItemStack var7 = var1.getItem(); if ((var7 != null) && (var7.getType() == Material.MUSHROOM_SOUP)) { if (var2.getHealth() < 20) { var2.setHealth(Math.min(20, var2.getHealth() + 7)); var7.setType(Material.BOWL); } else if (var2.getFoodLevel() < 20) { var2.setFoodLevel(Math.min(20, var2.getFoodLevel() + 6)); var2.setSaturation(var2.getSaturation() + 7.2f); var7.setType(Material.BOWL); } } } } } "	0	1	0	0	1	0
public TrackableResource<? extends Trackable> Func1(String var1) { TrackableResource var2 = factoryCache.get(var1); if (var2 != null) { if (AtmosphereResource.class.isAssignableFrom(var2.resource().getClass())) { AtmosphereResource.class.cast(var2.resource()).addEventListener(aliveChecker); } } return var2; } 	1	1	1	1	1	0
"public void Func1() { if (name != null) { Ontology var1 = new Ontology(); classURI = var1.getClassName(name, simpleTypes, complexTypes, simpleComplexTypes); OntClass var2 = Ontology.getOntologyInstance().getOntClass(classURI); instance = var2.createIndividual(Config.ONTOLOGY_URI + ""--"" + this.namespace.toString() + name); for (Object var3 : simpleTypes.keySet()) { instance.addLiteral(var1.getProperty(var3.toString()), simpleTypes.get(var3.toString()).toString()); } for (Object var3 : complexTypes.keySet()) { ArrayList<Entity> var4 = complexTypes.get(var3.toString()); for (Entity var5 : var4) { instance.addProperty(var1.getProperty(var3.toString()), var5.instance); } } for (Object var3 : simpleComplexTypes.keySet()) { ArrayList<String> var6 = simpleComplexTypes.get(var3.toString()); for (String var7 : var6) { instance.addLiteral(var1.getProperty(var3.toString()),var7); } } } } "	0	1	0	0	1	0
private void Func1(boolean var1) { boolean var2=mQuestionBank[mCurrentIndex].isAnswerTrue(); int var3; if(!mCheated) if(var1==var2) var3=R.string.correct_toast; else var3=R.string.incorrect_toast; else var3=R.string.warning_toast; Toast.makeText(QuizActivity.this,var3,Toast.LENGTH_SHORT).show(); } 	0	1	0	0	1	0
private ParameterDescription Func1(String var1) { for (Map.Entry<IKey, ParameterDescription> var2 : descriptions.entrySet()) { if (var1.startsWith(var2.getKey().getName())) return var2.getValue(); } return null; } 	0	1	0	0	1	0
"@PreAuthorize(""(hasPermission(#var1.var2.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and "" + ""#var1.userCreated.username == principal.username)"") //draft can be deleted only by author @Override public void Func1(Post var1) { if (!PostState.DRAFT.equals(var1.getState())) { new IllegalArgumentException(""Required DRAFT but got "" + String.valueOf(var1.getState())); } Topic var2 = var1.getTopic(); var2.removePost(var1); topicDao.saveOrUpdate(var2); securityService.deleteFromAcl(var1); logger.debug(""Deleted draft id={}"", var1.getId()); } "	0	1	0	0	1	0
"private void Func1(String var1, WriteRegisterCommand... var2) { if (var2 == null || var2.length == 0) { logger.warn(""No var2 to write to the CUL""); return; } if (var2.length > 8) { logger.error(""We can only send 8 var2 at once to the CUL. Discarding all var2""); return; } StringBuffer var3 = new StringBuffer(8); var3.append('F'); var3.append(var1); for (WriteRegisterCommand var4 : var2) { var3.append(var4.register); var3.append(var4.value); } try { culHandlerLifecycle.getCul().send(var3.toString()); } catch (CULCommunicationException e) { logger.error(""Error while writing multiple write register var2 to the CUL"", e); } } "	1	1	1	1	1	0
private Map<String, ArrayList<String>> Func1(Map<User, Map<User, Double>> var1) { Map<String, ArrayList<String>> var2 = new HashMap<>(); for (Map.Entry<User, Map<User, Double>> var3 : var1.entrySet()) { User var4 = var3.getKey(); Map<User, Double> var5 = var3.getValue(); User var6 = null; Double var7 = Double.MAX_VALUE; for (Map.Entry<User, Double> var8 : var5.entrySet()) { User var9 = var8.getKey(); Double var10 = var8.getValue(); if (var10 < var7 && var9.getNumFreeSeats() > 0) { var7 = var10; var6 = var9; } } if (var6 != null) { var6.addPassenger(var4); } } return var2; } 	0	1	0	0	1	0
"public ReadWriterFactory Func1(final boolean var1) { logger.debug(""Create index for FASTQ writers is ignored""); this.samFactory.Func1(var1); return this; } "	0	0	0	0	1	0
"public ReadWriterFactory Func1(final File var1) { logger.debug(""Reference file for FASTQ writers is ignored""); this.var1 = var1; return this; } "	0	0	0	0	1	0
public void Func1() { int var1 = cache.size() - maxSize; if (var1 > 0) { Set<K> var2 = priorityQueue.removeLRU(var1); for (K var3: var2) { cache.remove(var3); } } changedKeys = Sets.newHashSet(); removedEntries = Maps.newHashMap(); } 	0	0	0	0	1	0
"public void Func1(PrintWriter var1, ObjectOutputStream var2) throws java.io.IOException, InterruptedException { int[] var3 = new int[NUMBER_OF_THREADS]; int[] var4 = new int[NUMBER_OF_THREADS]; for (int var5 = 0; var5 < var3.length; var5++) { var3[var5] = individuals.length * var5 / NUMBER_OF_THREADS; var4[var5] = individuals.length * (var5 + 1) / NUMBER_OF_THREADS; } int var6 = individuals.length / NUMBER_OF_THREADS; CountDownLatch var7 = new CountDownLatch(NUMBER_OF_THREADS); Evaluator[] var8 = new Evaluator[NUMBER_OF_THREADS]; for (int var5 = 0; var5 < var8.length; var5++) { var8[var5] = new Evaluator(var6 * var5, var6 * (var5 + 1), individuals, var7); } ExecutorService var9 = Executors.newFixedThreadPool(NUMBER_OF_THREADS); long var10 = System.nanoTime(); for (int var5 = 0; var5 < NUMBER_OF_THREADS; var5++) { var9.execute(var8[var5]); } var9.shutdown(); var7.await(); long var11 = System.nanoTime(); System.out.println(""Time taken: "" + ((var11 - var10) / 1000000000.0) + "" seconds""); Genotype var12 = findChampion(); var1.println(var12.getFitness() + ""\t"" + meanFitness()); var1.flush(); var2.writeObject(var12.getWords()); } "	0	1	0	0	1	0
"private DataSource Func1(SQLParser.Table_referenceContext var1) { if (var1.table_atom() != null) { return processTableAtom(var1.table_atom()); } else if (var1.table_join() != null) { return processTableJoin(var1.table_join()); } throw new ParseException(String.format(""Unsupported table reference type: \'%s\'"", var1.getText())); } "	0	0	0	0	1	0
"private void Func1(final String var1, final String[] var2) throws Exception { String var3 = ""search""; openFile(var1); UiObject var4 = getUiObjectByResourceId(""com.adobe.reader:id/var4"", ""android.widget.RelativeLayout""); for (int var5 = 0; var5 < var2.length; var5++) { String var6 = (var5 == 0) ? ""first_word"" : ""second_word""; timingResults.put(String.format(var3 + ""_"" + var6), searchTest(var2[var5])); } exitDocument(); } "	0	0	0	0	1	0
public static XmoduleDefinition Func1(Xnode var1) { Xnode var2 = var1.find(Xcode.FMODULEDEFINITION); if(var2 == null){ return null; } return new XmoduleDefinition(var2.getElement()); } 	0	0	0	0	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setupActionBar(true, getString(R.string.you)); setContentView(R.layout.edit_user_layout); ButterKnife.bind(this); ActionBar var2 = getSupportActionBar(); if (var2 != null) { var2.setHomeAsUpIndicator(DrawableUtils.getActionBarIcon(this, R.drawable.ic_close_black_24dp)); } if (presenter == null || var1 == null) { presenter = new EditUserPresenter(this); } else { presenter = new EditUserPresenter(var1); } presenter.onTakeView(this); description.setOnFocusChangeListener(new View.OnFocusChangeListener() { @Override public void Func2(View var3, boolean var4) { if (var4) { descriptionInputLayout.setHint(getString(R.string.about_you)); ((EditText)var3).setHint(getString(R.string.add_description)); } else { descriptionInputLayout.setHint(getString(R.string.add_description)); ((EditText)var3).setHint(""""); } } }); } "	0	1	0	0	1	0
@Override public Collection<MetaClass> Func1() { final Collection<MetaClass> var1 = new ArrayList<MetaClass>(); addSuperTypesAndInterfaces(this, var1); return var1; } 	0	0	0	0	1	0
private char Func1(int var1) throws EndOfPathException{ SuffixNode var2 = selectNode(); if(diff(var2) >= active.activeLength){ return input[active.activeNode.child[input[active.activeEdge]].start + active.activeLength]; } if(diff(var2) + 1 == active.activeLength ){ if(var2.child[input[var1]] != null){ return input[var1]; } } else{ active.activeNode = var2; active.activeLength = active.activeLength - diff(var2) -1; active.activeEdge = active.activeEdge + diff(var2)  +1; return input[active.activeNode.child[input[active.activeEdge]].start + active.activeLength]; } throw new EndOfPathException(); } 	0	1	0	0	1	0
"public static void Func1(Map<Id, ItemPreset> var1) { Map<Id, CreaturePreset> var2 = new HashMap<Id, CreaturePreset>(); JsonObject var3 = JsonObjectFactory.makeJsonObject(""creatures.json""); for (JsonValue var4 : var3.get(""creatures"").asArray()) { JsonObject var5 = var4.asObject(); CreaturePreset var6 = new CreaturePreset(); var6.setId(new Id(var5.get(""id"").asString())); var6.setType(var5.get(""type"").asString()); var6.setName(NameFactory.fromJsonObject(var5.get(""name"").asObject())); if (var5.get(""tags"") != null) { var6.setTagSet(TagSet.fromJsonArray(var5.get(""tags"").asArray(), Creature.Tag.class)); } else { var6.setTagSet(TagSet.makeEmptyTagSet(Creature.Tag.class)); } var6.setInventoryItemLimit(var5.getInt(""inventoryItemLimit"", 0)); var6.setInventoryWeightLimit(var5.getDouble(""inventoryItemLimit"", 0.0)); var6.setItems(getInventory(var5)); setLuminosityIfPresent(var6, var5); setVisibility(var6, var5); var6.setWeight(Weight.newInstance(var5.get(""weight"").asDouble())); var6.setHealth(var5.get(""health"").asInt()); var6.setAttack(var5.get(""attack"").asInt()); setWeaponIfPreset(var6, var5); var6.setAttackAlgorithmId(AttackAlgorithmId.valueOf(var5.get(""attackAlgorithmID"").asString())); var2.put(var6.getId(), var6); if (var6.hasTag(Creature.Tag.CORPSE)) { ItemPreset var7 = CorpsePresetFactory.makeCorpsePreset(var6); var1.put(var7.getId(), var7); } } setCreaturePresetMap(Collections.unmodifiableMap(var2)); DungeonLogger.info(""Loaded "" + var2.size() + "" creature presets.""); } "	0	1	0	0	1	0
"private List<ComfoxMessage> Func1(GraphTraversalSource var1, Vertex var2) { try { Vertex var3 = var1.V(var2).both().hasLabel(""var3"").next(); Long var4 = var1.V(var3).both().var4().next(); return asList(new ComfoxMessage( String.format(""#Jigsaw says: #%s has %s people"", var3.property(""name"").value().toString(), var4), null, ""comfox"", null, null, null)); } catch (Exception e) { return asList(); } } "	0	0	0	0	1	0
"@Override public boolean Func1(CommandSender var1, Command var2, String var3, String[] var4) { if (var2.getName().equalsIgnoreCase(""eshop"")) { if (var4.length > 0 && var4[0].equalsIgnoreCase(""reload"")) { eshop.handleReload(var1); } else { eshop.handleCommand(var1, var2); } } return true; } "	0	0	0	0	1	0
public void Func1() { if (adjustmentIsLegal(0, 1)) { falling.setX(falling.getX() + 1); redrawBoard(); } } 	0	0	0	0	1	0
private void Func1() { int var1 = 0; for (int var2 = 0; var2 < rows; var2++) { int var3 = 0; for (int var4 = 0; var4 < columns; var4++) { if (area[var2][var4].getChar() != Block.EMPTY) { var3++; } } if (var3 == columns) { var1++; dropAllRowsAbove(var2); } } scoreKeeper.increaseScore(var1); } 	0	0	0	0	1	0
public static void Func1(Realm var1, RBookList var2) { if (var2 != null) { var1.executeTransaction(tRealm -> { if (!var2.isSmartList()) var2.getListItems().clear(); var2.removeFromRealm(); }); } } 	0	0	0	0	1	0
"public static CallbackQuery Func1(JSONObject var1, TelegramBot var2) { CallbackQuery var3 = null; if (var1 != null) { if (!var1.isNull(""message"")) { if(!var1.isNull(""game_short_name"")) { var3 = GameMessageMessageCallbackQueryImpl.createGameCallbackQuery(var1, var2); } else { var3 = MessageCallbackQueryImpl.Func1(var1, var2); } } else if (!var1.isNull(""inline_message_id"")) { if(!var1.isNull(""game_short_name"")) { var3 = GameInlineCallbackQueryImpl.createGameInlineCallbackQuery(var1, var2); } else { var3 = InlineCallbackQueryImpl.createInlineCallbackQuery(var1, var2); } } else { var3 = new CallbackQueryImpl(var1, var2); System.err.println(""The Telegram Bot API didn't return a Message or Inline Message ID for the CallbackQuery, send @zackpollard the following output or create a github issue.""); System.err.println(var3.asJson().toString(4)); } } return var3; } "	0	0	0	0	1	0
"@Override public List<Application> Func1(String var1, String var2) throws APIManagementException { List<Application> var3 = null; try { var3 = getApplicationDAO().Func1(var1); } catch (APIMgtDAOException e) { String var4 = ""Error occurred while fetching applications for the given var1 - "" + var1 + "" with var2 - "" + var2; log.error(var4); throw new APIMgtDAOException(var4, e, ExceptionCodes.APIMGT_DAO_EXCEPTION); } return var3; } "	1	1	1	1	1	0
public void Func1(LoginEvent var1) { User var2 = new User(); var2.setName(var1.getSessionConnectEvent().getUser().getName()); usersSessions.add(var2); } 	0	1	0	0	1	0
boolean Func1(Integer var1) { return bookmarks.Func1(var1); } 	0	0	0	0	1	0
private void Func1() { if (mSensorPresenter != null) { if (!mHasError && mSourceStatus == SensorStatusListener.STATUS_CONNECTED && mCurrentSource != null) { updateAudio(mLayout.audioEnabled, getSonificationType( mParentFragment.getActivity())); } else { updateAudio(false, ScalarDisplayOptions.DEFAULT_SONIFICATION_TYPE); } } if (mCardViewHolder == null) { return; } updateCardMenu(); if (!mHasError && mSourceStatus == SensorStatusListener.STATUS_CONNECTED) { mCardViewHolder.flipButton.setVisibility(View.VISIBLE); mCardViewHolder.statusViewGroup.setVisibility(View.GONE); return; } mCardViewHolder.flipButton.setVisibility(View.GONE); mCardViewHolder.statusViewGroup.setVisibility(View.VISIBLE); mCardViewHolder.statusRetryButton.setVisibility(View.GONE); if (mHasError) { if (mRetryClickListener != null) { mCardViewHolder.statusRetryButton.setVisibility(View.VISIBLE); mCardViewHolder.statusRetryButton.setOnClickListener(mRetryClickListener); } mCardViewHolder.statusMessage.setText( mCardViewHolder.getContext().getText(R.string.sensor_card_error_text)); mCardViewHolder.statusProgressBar.setVisibility(View.GONE); } else if (mSourceStatus != SensorStatusListener.STATUS_CONNECTING) { mCardViewHolder.statusMessage.setText( mCardViewHolder.getContext().getText(R.string.sensor_card_error_text)); mCardViewHolder.statusProgressBar.setVisibility(View.GONE); } else { mCardViewHolder.statusMessage.setText( mCardViewHolder.getContext().getText(R.string.sensor_card_loading_text)); mCardViewHolder.statusProgressBar.setVisibility(View.VISIBLE); } } 	0	0	0	0	1	0
"protected synchronized void Func1(final CellState var1) { if (this.myState == null && var1 == null) throw new IllegalStateException(""Can't remain in null var1""); if (this.myState != null && var1 != null && this.myState.equals(var1)) throw new IllegalStateException(""Can't remain in same var1""); LOG.trace(""Transitioning to: "" + var1); this.myState = var1; this.myStates.onNext(var1); } "	0	0	0	0	1	0
"public String Func1(String var1) { String var2 = getMessage(""PVP""); return var2.replace(""%a"", var1); } "	0	0	0	0	1	0
public void Func1() { if (fullnameflag == true && emailflag == true && passwordflag == true && addressflag == true && selectedImageflag == true && checkAccountType == true) { dangkyok.setEnabled(true); dangkyok.setBackgroundColor(getResources().getColor(R.color.mauxanh)); } else { dangkyok.setEnabled(false); dangkyok.setBackgroundColor(getResources().getColor(R.color.mauxam)); dangkyok.setTextColor(getResources().getColor(R.color.actionbar_text)); } } 	0	0	0	0	1	0
"@Test public void Func1() throws ParseException, IOException { final ElasticBoxCloud var1 = Mockito.mock(ElasticBoxCloud.class); final InstanceExpirationSchedule var2 = new InstanceExpirationSchedule(""terminate"", null, ""01/25/2016"", ""16:00"") { }; final ApplicationBoxDeploymentContext var3 = new ApplicationBoxDeploymentContext.Builder() .box(""FAKE_BOX_ID"") .boxVersion(""NOT_LATEST"") .expirationTime(var2.getUtcDateTime()) .expirationOperation(var2.getOperation()) .requirements(new String[]{""FAKE_CLAIM""}) .tags(new HashSet<String>() {{ add(""FAKE_TAG""); }}) .name(""FAKE_NAME"") .owner(""FAKE_OWNER"") .waitForDone(true) .cloud(var1) .build(); final JSONObject var4 = new ApplicationBoxDeploymentSerializer().createRequest(var3); assertTrue(""policyBox id was not set"", var4.getJSONObject(""lease"").getString(""expire"").equals(var2.getUtcDateTime())); assertTrue(""policyBox id was not set"", var4.getJSONObject(""lease"").getString(""operation"").equals(""terminate"")); assertTrue(""policyBox id was not set"", var4.getJSONObject(""box"").getString(""id"").equals(""FAKE_BOX_ID"")); assertTrue(""policyBox id was not set"", var4.getJSONArray(""instance_tags"").get(0).equals(""FAKE_TAG"")); assertTrue(""policyBox id was not set"", var4.getJSONArray(""requirements"").get(0).equals(""FAKE_CLAIM"")); assertTrue(""policyBox id was not set"", var4.getString(""schema"").equals(""http://elasticbox.net/schemas/deploy/application"")); assertTrue(""policyBox id was not set"", var4.getString(""owner"").equals(""FAKE_OWNER"")); assertTrue(""policyBox id was not set"", var4.getString(""name"").equals(""FAKE_NAME"")); } "	0	0	0	0	1	0
public void Func1() { this.mSoundPool.release(); this.mPathStreamIDsMap.clear(); this.mPathSoundIDMap.clear(); this.mEffecToPlayWhenLoadedArray.clear(); this.mLeftVolume = 0.5f; this.mRightVolume = 0.5f; this.initData(); } 	0	0	0	0	1	0
private void Func1(ClassMap var1, Object var2, Object var3, boolean var4, List<String> var5, String var6) { var2 = MappingUtils.deProxy(var2); mappedFields.put(var2, var3); if (var1 == null) { var1 = getClassMap(var2.getClass(), var3.getClass(), var6); } Class<?> var7 = var2.getClass(); Class<?> var8 = var3.getClass(); Class<?> var9 = MappingUtils.findCustomConverter(converterByDestTypeCache, var1.getCustomConverters(), var7, var8); if (var9 != null) { mapUsingCustomConverter(var9, var7, var2, var8, var3, null, true); return; } if (!var4) { Collection<ClassMap> var10 = new ArrayList<ClassMap>(); Collection<ClassMap> var11 = checkForSuperTypeMapping(var7, var8); var10.addAll(var11); if (!var10.isEmpty()) { processSuperTypeMapping(var10, var2, var3, var5, var6); } } for (FieldMap var12 : var1.getFieldMaps()) { String var13 = MappingUtils.getMappedParentFieldKey(var3, var12); if (var5 != null && var5.contains(var13)) { continue; } mapField(var12, var2, var3); } } 	1	0	1	1	1	0
"@Override public Object Func1(WebDriver var1) { return ""2,123"".equals(a1.getValue()); } "	1	0	0	1	1	0
"public static void Func1(Location var1) { GetCallback<ParseObject> var2 = new GetCallback<ParseObject>() { @Override public void Func2(ParseObject var3, ParseException var4) { Map<String, Object> var5 = new HashMap<String,Object>(); var5.put(""coordinates"", new ParseGeoPoint(var1.getCoordinates().getLat(),var1.getCoordinates().getLng())); if(var4!=null){ DatabaseManager.update(""Location"",var3.getObjectId(),var5); for(Review var6 :var1.getReviews()){ ReviewManager.updateReview(var6); } } else{ saveLocation(var1); } } }; checkLocationInDB(var1,var2); } "	0	1	1	1	1	0
"private void Func1() { final StringBuilder var1 = new StringBuilder(); for (Tag var2 : picture.getListTags()) { var1.append(var2.getValue()); var1.append("", ""); } if (var1.length() > 2) { var1.setLength(var1.length() - 2); } tagsTxt.setText(var1.toString()); if (picture.getUser().getLogin().equals(app.currentUser().getLogin())) { tagsEditTxt.setText(var1.toString()); tagsEditBtn.setOnMouseClicked(new EventHandler<MouseEvent>() { @Override public void Func2(final MouseEvent var3) { editTags(var3); } }); } } "	0	0	0	0	1	0
private boolean Func1(boolean var1, ModelNode var2, XMLExtendedStreamWriter var3) throws XMLStreamException { if (var2.hasDefined(PROPERTIES_REALM)) { startRealms(var1, var3); List<Property> var4 = var2.require(KEYSTORE_REALM).asPropertyList(); for (Property var5 : var4) { var3.writeStartElement(PROPERTIES_REALM); var3.writeAttribute(NAME, var5.getName()); ModelNode var6 = var5.getValue(); PropertiesRealmDefinition.PLAIN_TEXT.marshallAsAttribute(var6, var3); writeFile(USERS_PROPERTIES, var6.get(USERS_PROPERTIES), var3); writeFile(GROUPS_PROPERTIES, var6.get(GROUPS_PROPERTIES), var3); var3.writeEndElement(); } return true; } return false; } 	1	0	1	0	1	0
"LocalizedAssetBody Func1(Repository var1, FileMatch var2) throws CommandException { consoleWriter.a("" - Processing locale: "").fg(Color.CYAN).a(outputBcp47tag).print(); try { Asset var3 = assetClient.getAssetByPathAndRepositoryId(var2.getSourcePath(), var1.getId()); String var4 = commandHelper.getFileContent(var2.getPath()); if (var2.getFileType().getClass() == XcodeXliffFileType.class) { var4 = commandHelper.setPreserveSpaceInXliff(var4); } LocalizedAssetBody var5 = assetClient.getPseudoLocalizedAssetForContent( var3.getId(), var4, var2.getFileType().getFilterConfigIdOverride()); logger.trace(""PseudoLocalizedAsset content = {}"", var5.getContent()); return var5; } catch (AssetNotFoundException e) { throw new CommandException(""Asset with path ["" + var2.getSourcePath() + ""] was not found in repo ["" + repositoryParam + ""]"", e); } } "	0	0	0	0	1	0
"@Override public void Func1() throws CommandException { consoleWriter.newLine().a(""Pull pseudo localized asset from repository: "").fg(Color.CYAN).a(repositoryParam).println(2); repository = commandHelper.findRepositoryByName(repositoryParam); commandDirectories = new CommandDirectories(sourceDirectoryParam, targetDirectoryParam); for (FileMatch var1 : commandHelper.getSourceFileMatches(commandDirectories, fileType, sourceLocale, sourcePathFilterRegex)) { consoleWriter.a(""Localizing: "").fg(Color.CYAN).a(var1.getSourcePath()).println(); generatePseudoLocalizedFiles(repository, var1); } consoleWriter.fg(Color.GREEN).newLine().a(""Finished"").println(2); } "	0	0	0	0	1	0
private void Func1() { if (callbacks != null && !callbacks.isEmpty()) { for (Callbacks var1 : callbacks) { var1.onSheetPositionChanged(dragView.getTop()); } } } 	0	1	0	0	1	0
private boolean Func1(int var1, int var2) { return getVisibility() == VISIBLE && viewDragHelper.isViewUnder(this, var1, var2); } 	0	0	0	0	1	0
@Override public int Func1(View var1, int var2, int var3) { return Math.min(Math.max(var2, dragViewExpandedTop), dragViewBottom); } 	0	0	0	0	1	0
@Override protected void Func1() { super.Func1(); viewDragHelper = ViewDragHelper.create(this, dragHelperCallbacks); } 	0	1	0	0	1	0
"private void Func1(final Document var1, final Entity var2, final List<String> var3) throws DocumentException { PdfPTable var4 = PdfUtil.createTableWithHeader(4, var3, false); List<Entity> var5 = getGenealogies(var2); Collections.sort(var5, new EntityOrderNumberComparator()); for (Entity var6 : var5) { Entity var7 = (Entity) var6.getField(""var7""); var4.addCell(new Phrase(var7.getField(""number"").toString(), PdfUtil.getArialRegular9Dark())); var4.addCell(new Phrase(var7.getField(""name"").toString(), PdfUtil.getArialRegular9Dark())); Entity var8 = (Entity) var7.getField(""var8""); if (var8 == null) { var4.addCell(new Phrase("""", PdfUtil.getArialRegular9Dark())); } else { var4.addCell(new Phrase(var8.getField(""name"").toString(), PdfUtil.getArialRegular9Dark())); } var4.addCell(new Phrase(var6.getField(""batch"").toString(), PdfUtil.getArialRegular9Dark())); } var1.add(var4); } "	0	0	0	0	1	0
public List<String> Func1(String var1, int var2) { return s_lineWrapDoc(var1, var2); } 	1	0	0	1	1	0
@Test public void Func1() { NeuralNetwork var1 = new NeuralNetwork(); var1.addLayer(2); ArrayList<Perceptron> var2 = var1.layers.get(0); for(Perceptron var3 : var2) { assertNull(var3.inputs); assertNull(var3.outputs); } } 	0	0	0	0	1	0
"public void Func1 (File var1) { this.processedLines = 0l; try { final FileReader var2 = new FileReader(var1); final BufferedReader var3 = new BufferedReader(var2); String var4 = null; while ((var4 = var3.readLine()) != null) { final RMRecord var5 = processSingleLine(var4); if(var5 != null) { addRmRecordToDataset(var5); } processedLines++; } var3.close(); LOG.info(""Processed "" + this.processedLines + "" lines of PMRM0003I type.""); LOG.info(""Number of testCase tables found: "" + getRootCases().size()); } catch (IOException e) { e.printStackTrace(); } finally { setChanged(); notifyObservers(new ParsingHasFinishedEvent()); } } "	1	1	1	1	1	0
"public void Func1() { GrammarRelation[] var1 = WordNetProvider.getInstance().getPossibleGrammarForms(""витая""); System.out.println(Arrays.toString(var1)); Euristic var2 = var2(getRulesList11(), ""ложечка витая""); assertNotNull(var2); } "	0	0	0	0	1	0
@Override public boolean Func1(Document var1, boolean var2) { return textRange != null && items.stream().allMatch(i -> i.Func1(var1, var2)); } 	0	0	0	0	1	0
@Override public void Func1(World var1, int var2, int var3, int var4, Entity var5) { if (var5 instanceof EntityLivingBase) { var5.attackEntityFrom(DamageSource.cactus, 1); if (var1.getBlockMetadata(var2, var3, var4) == 1) { ((EntityLiving) var5).addPotionEffect(new PotionEffect(Potion.poison.id, 7 * 20, 0)); } else if (var1.getBlockMetadata(var2, var3, var4) == 2) { var5.setFire(7); } } } 	0	0	0	0	1	0
"public ArrayList<Token> Func1(String var1) { ArrayList<Token> var2 = new ArrayList<Token>(); String[] var3 = var1.split(""""); Token var4 = new Token("""",""""); String var5 = """"; for (String var6 : var3) { if(tokenValidator.isQuantifier(var6)){ var4.setQuantifier(var6); var4.setGenerator(var5); var2.add(var4); var5 = """"; var4 = new Token("""",""""); } else{ if(tokenValidator.isOpenUnionGenerator(var5) || tokenValidator.isEscaped(var5)){ var5 += var6; } else{ if(var5 != """"){ var4.setGenerator(var5); var2.add(var4); var4 = new Token("""",""""); var5 = """"; } var5 = var6; } } } if(tokenValidator.isLastGenerator(var5)){ var4.setGenerator(var5); var2.add(var4); } return var2; } "	0	1	0	0	1	0
"public void Func1() throws Throwable { ThreadPool var1 = new TestThreadPool(""Func1""); try { final PlainListenableActionFuture<Object> var2; if (randomBoolean()) { var2 = PlainListenableActionFuture.newDispatchingListenableFuture(var1); } else { var2 = new PlainListenableActionFuture<>(); } final CountDownLatch var3 = new CountDownLatch(1); final AtomicReference<Throwable> var4 = new AtomicReference<>(); final Object var5 = new Object(); var2.addListener(new ActionListener<Object>() { @Override public void Func2(Object var6) { var3.countDown(); } @Override public void Func3(Exception var7) { var4.set(var7); var3.countDown(); } }); Thread var8 = new Thread(new AbstractRunnable() { @Override public void Func3(Exception var7) { var4.set(var7); var3.countDown(); } @Override protected void Func4() throws Exception { var2.Func2(var5); } }, Transports.TEST_MOCK_TRANSPORT_THREAD_PREFIX + ""_testListenerIsCallableFromNetworkThread""); var8.start(); var8.join(); var3.await(); if (var4.get() != null) { throw var4.get(); } } finally { ThreadPool.terminate(var1, 10, TimeUnit.SECONDS); } } "	0	0	0	0	1	0
public final void Func1(int var1) { Func1(var1); } 	0	0	0	0	1	0
"public void Func1(File var1) { if (var1 == null) { var1 = new File(getContext().getExternalFilesDir(null), ""video.mp4""); } if (mCameraController.startVideo(var1)) { mUiHandler.post(new Runnable() { @Override public void Func2() { mKeepScreenOn = getKeepScreenOn(); if (!mKeepScreenOn) setKeepScreenOn(true); } }); } } "	0	0	0	0	1	0
"protected void Func1(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException { String var3 = var1.getParameter(""var3""); var2.setContentType(""application/json""); var2.addHeader(""Access-Control-Allow-Origin"", ""*""); var2.getWriter().write(ReturnAddress.returnAddFamVio(var3)); } "	0	1	0	0	1	0
"private void Func1(int var1) { String var2 = json.getString(var1, ENTITYID).replaceAll(regEx, """"); String[] var3 = json.getString(var1, DROPS).replaceAll(regEx, """").split("",+""); float var4 = Float.parseFloat(json.getString(var1, MIN).replaceAll(regEx, """")); float var5 = Float.parseFloat(json.getString(var1, MAX).replaceAll(regEx, """")); if (!json.getString(var1, MODID).equalsIgnoreCase(MINECRAFT)) entityName.append(json.getString(var1, MODID).replaceAll(regEx, """")).append("".""); if (var2.endsWith(""*"")) { isWildCard = true; var2 = var2.substring(0, var2.lastIndexOf(""*"")); } entityName.append(var2); if (isWildCard) wildcardMap.add(new EntityData(entityName.toString(), var3, var4, var5)); else entityMap.put(entityName.toString(), new EntityData(var3, var4, var5)); } "	0	0	0	0	1	0
private static Document Func1(String var1) throws DocumentException { final SAXReader var2 = new SAXReader(); final String var3 = getEncoding(var1); InputSource var4 = new InputSource(new StringReader(var1)); var4.setEncoding(var3); return var2.read(var4); } 	0	0	0	0	1	0
@Override protected void Func1(World var1, int var2, int var3, int var4) { int var5 = var1.getBlockMetadata(var2, var3, var4); if (!this.canBlockStay(var1, var2, var3, var4, var5)) { this.dropBlockAsItem(var1, var2, var3, var4, var5, 0); var1.setBlockToAir(var2, var3, var4); } } 	0	0	0	0	1	0
protected void Func1(BillView var1, BillView var2, SpotCheckObservation<BaseBillId> var3) { String var4 = serialize(var1.getCommitteeAgendas(), true); String var5 = serialize(var1.getCommitteeAgendas(), true); if (!var4.equals(var5)) var3.addMismatch(new SpotCheckMismatch(BILL_COMMITTEE_AGENDAS_OPENLEG_DEV, var4, var5)); } 	1	1	1	1	1	0
"@Override public String Func1() { if (isSuccess()) { return ""success""; } else if (isTimeout()) { return ""timeout""; } else { final ZclStatus var1 = ZclStatus.getStatus((byte) getStatusCode().intValue()); return ""message: "" + var1.name() + ""(0x"" + Integer.toHexString(var1.getId()) + "", "" + var1.getDescription(); } } "	0	1	0	0	1	0
"public synchronized void Func1(AppInfo var1) { SQLiteDatabase var2 = getWritableDatabase(); Cursor var3 = null; try { var3 = var2.query(AppDetailsTable.DATABASE_TABLE_NAME, new String[] { AppDetailsTable.ROWID }, AppDetailsTable.APPINFO_ID + ""=?"", new String[] { Long.toString(var1.getId()) }, null, null, null); if (var3.getCount() < 1 || !var3.moveToNext()) { saveAppDetails(var1); } else { long var4 = saveAppDetails(var2, var1); var1.getDetails().setId(var4); updateAppDetails(var1.getDetails()); } } finally { if (var3 != null) { var3.close(); } } } "	0	0	0	0	1	0
"@Override public DiscoveryResult Func1(ServiceInfo var1) { DiscoveryResult var2 = null; ThingUID var3 = getThingUID(var1); if (var3 != null) { Map<String, Object> var4 = new HashMap<>(4); String var5; try { var5 = var1.getName(); } catch (Exception e) { var5 = ""unnamed enigma2 device""; } InetAddress[] var6 = var1.getInetAddresses(); if (var6.length > 1) { logger.warn(""Enigma2 device {} ({}) reports multiple addresses - using the first one! {}"", var1.getName(), var5, Arrays.toString(var6)); } var4.put(Enigma2BindingConstants.DEVICE_PARAMETER_HOST, var6[0].getHostAddress()); var4.put(Enigma2BindingConstants.DEVICE_PARAMETER_USER, """"); var4.put(Enigma2BindingConstants.DEVICE_PARAMETER_PASSWORD, """"); var4.put(Enigma2BindingConstants.DEVICE_PARAMETER_REFRESH, ""5000""); return DiscoveryResultBuilder.create(var3).withProperties(var4).withLabel(var5).build(); } return var2; } "	0	1	0	1	1	0
"public static String Func1() { return getInstance().getString(""not_contains"", """"); } "	0	0	0	0	1	0
"public static String Func1() { return getInstance().getString(""black_list"", """"); } "	0	0	0	0	1	0
"public JSONObject Func1() { JSONObject var1 = new JSONObject(); if (userId != null) { var1.put(""userId"", new JSONNumber(userId)); } var1.put(""firstName"", new JSONString(firstName)); var1.put(""lastName"", new JSONString(lastName)); var1.put(""email"", new JSONString(email)); if (role != null) { var1.put(""role"", new JSONString(role)); } JSONArray var2 = new JSONArray(); for (int var3 = 0; var3 < groupList.size(); var3++) { var2.set(var3, new JSONString(groupList.get(var3))); } var1.put(""groups"", var2); JSONArray var4 = new JSONArray(); for (int var3 = 0; var3 < availableGroupList.size(); var3++) { var4.set(var3, new JSONString(availableGroupList.get(var3))); } var1.put(""availableGroups"", var4); if (password != null) { var1.put(""password"", new JSONString(password)); } JSONArray var5 = new JSONArray(); int var6 = 0; for (String var7 : organismPermissionMap.keySet()) { JSONObject var8 = new JSONObject(); var8.put(var7, organismPermissionMap.get(var7).Func1()); var5.set(var6, var8); ++var6; } var1.put(""var5"", var5); return var1; } "	0	1	0	0	1	0
public boolean Func1(float var1) { if (var1 > 0.0f) { if (getState() == State.OPEN || (getState() == State.OVERDRAWN && balance > -100.0f)) { balance = balance - var1; numWithdraws++; if (numWithdraws > 10) balance = balance - 2.0f; if (balance < 0.0f) { setState(State.OVERDRAWN); } return true; } } return false; } 	1	0	1	0	1	0
@Override public boolean Func1(View var1, MotionEvent var2) { if (deactivated) return false; switch (var2.getAction() & MotionEvent.ACTION_MASK) { case MotionEvent.ACTION_DOWN: click = true; float var3; float var4; mActivePointerId = var2.getPointerId(0); var3 = var2.getX(); var4 = var2.getY(); initialXPress = var3; initialYPress = var4; break; case MotionEvent.ACTION_MOVE: final int var5 = var2.findPointerIndex(mActivePointerId); if(var5 < 0 || var5 > 0 ){ break; } final float var6 = var2.getX(var5); final float var7 = var2.getY(var5); final float var8 = var6 - initialXPress; final float var9 = var7 - initialYPress; if((int)initialXPress == 0 && (int) initialYPress == 0){ break; } float var10 = card.getX() + var8; float var11 = card.getY() + var9; if (var8 + var9 > 5) click = false; card.setX(var10); card.setY(var11); float var12 = var10 - initialX; float var13 = ROTATION_DEGREES * 2.f * var12 / parentWidth; card.setRotation(var13); if (rightView != null && leftView != null){ float var14 = (((var10 - paddingLeft) / (parentWidth * OPACITY_END))); rightView.setAlpha(var14); leftView.setAlpha(-var14); } break; case MotionEvent.ACTION_UP: checkCardForEvent(); if (click) var1.performClick(); break; default: return false; } return true; } 	0	0	0	0	1	0
"String Func1(NBTTagCompound var1) { if (var1.hasKey(_nbtKey) && var1.hasKey(_nbtKey2)) { int var2, var3; if (_asShort) { var2 = var1.getShort(_nbtKey) & 0xFF; var3 = var1.getShort(_nbtKey2) & 0xFF; } else { var2 = var1.getInt(_nbtKey); if (_dataAsInt) { var3 = var1.getInt(_nbtKey2) & 0xFF; } else { var3 = var1.getByte(_nbtKey2) & 0xFF; } } return Material.getMaterial(var2).name() + "":"" + var3; } return null; } "	0	0	0	0	1	0
"public boolean Func1(){ return this.videoURL.equals(""PARSING""); } "	0	0	0	0	1	0
@Override public Task Func1(File var1, String var2, String var3, int var4) throws IOException { long var5 = var1.length(); return new OSSPutTask(ossClientAgent, var3, bucket, var2, var5, 0L, var4, var1, conf); } 	1	0	1	0	1	0
public List<BasicSchemaGridRow> Func1(String var1, Link var2) { List<BasicSchemaGridRow> var3=null; if(StringUtils.equalsIgnoreCase(Constants.INPUT_SUBJOB_COMPONENT_NAME, var2.getSource().getComponentName()) ||StringUtils.equalsIgnoreCase(Constants.SUBJOB_COMPONENT, var2.getSource().getComponentName())) { Map<String,Schema> var4=(HashMap<String,Schema>)var2.getSource().getProperties(). get(Constants.SCHEMA_FOR_INPUTSUBJOBCOMPONENT); if(var4!=null &&var4.get(var1)!=null) var3=SchemaSyncUtility.INSTANCE. convertGridRowsSchemaToBasicSchemaGridRows(var4.get(var1).getGridRow()); } else { Schema var5=(Schema)var2.getSource().getProperties().get(Constants.SCHEMA); if (var5 != null) var3=SchemaSyncUtility.INSTANCE. convertGridRowsSchemaToBasicSchemaGridRows(var5.getGridRow()); } return var3; } 	0	0	0	0	1	0
"private void Func1(View var1) { ImageButton var2 = (ImageButton)var1.findViewById(R.id.var2); var2.setOnClickListener(new View.OnClickListener() { public void Func2(View var1) { saveNote(); activity.finish(); } }); ImageButton var3 = (ImageButton)var1.findViewById(R.id.var3); var3.setOnClickListener(new View.OnClickListener() { public void Func2(View var1) { exportNote(); } }); ImageButton var4 = (ImageButton)var1.findViewById(R.id.var4); var4.setOnClickListener(new View.OnClickListener() { public void Func2(View var1) { deleteNote(); activity.finish(); } }); ImageButton var5 = (ImageButton)var1.findViewById(R.id.var5); var5.setOnClickListener(new View.OnClickListener() { public void Func2(View var1) { Intent var6 = new Intent(Intent.ACTION_SEND); var6.setType(getString(R.string.mimetype_text)); if(content != null) { var6.putExtra(Intent.EXTRA_SUBJECT, ""Note for "" + content.getTitle()); String var7 = editText.getText().toString(); var6.putExtra(Intent.EXTRA_TEXT, var7 + ""\n\n"" + getString(R.string.shared_via)); Intent var8 = Intent.createChooser(var6, getString(R.string.tell_friend) + "" "" + content.getTitle()); startActivity(var8); } else { Toast.makeText(activity, getString(R.string.no_data_msg), Toast.LENGTH_LONG).show(); } } }); } "	0	0	0	0	1	0
@Override public Boolean Func1() { if (toUnicode == null) { return false; } for (int var1 = 0; var1 < toUnicode.length(); ++var1) { int var2 = this.toUnicode.codePointAt(0); if ((var2 >= UNICODE_PRIVATE_USE_AREA_ARRAY[0] && var2 <= UNICODE_PRIVATE_USE_AREA_ARRAY[1]) || (var2 >= UNICODE_PRIVATE_USE_AREA_ARRAY[2] && var2 <= UNICODE_PRIVATE_USE_AREA_ARRAY[3]) || (var2 >= UNICODE_PRIVATE_USE_AREA_ARRAY[4] && var2 <= UNICODE_PRIVATE_USE_AREA_ARRAY[5])){ return true; } } return false; } 	1	1	1	1	1	0
"private void Func1() { onView(isRoot()).perform(TestUtils.clickScreenPosition(0, 0)); onView(withText(""Contacts"")).perform(click()); } "	0	0	0	0	1	0
public AuthToken Func1() { return localDataManager.get(Options.ACCESS_TOKEN.name(), AuthToken.class); } 	0	0	0	0	1	0
"@Override protected void Func1(final String[] var1) { super.Func1(var1); if (!f.isDirectory()) { md5HashText.setText(var1[0]); sha256Text.setText(var1[1]); mMD5LinearLayout.setOnLongClickListener(new View.OnLongClickListener() { @Override public boolean Func2(View var2) { Futils.copyToClipboard(c, var1[0]); Toast.makeText(c, c.getResources().getString(R.string.md5).toUpperCase() + "" "" + c.getResources().getString(R.string.properties_copied_clipboard), Toast.LENGTH_SHORT).show(); return false; } }); mSHA256LinearLayout.setOnLongClickListener(new View.OnLongClickListener() { @Override public boolean Func2(View var2) { Futils.copyToClipboard(c, var1[1]); Toast.makeText(c, c.getResources().getString(R.string.hash_sha256) + "" "" + c.getResources().getString(R.string.properties_copied_clipboard), Toast.LENGTH_SHORT).show(); return false; } }); } else { mMD5LinearLayout.setVisibility(View.GONE); mSHA256LinearLayout.setVisibility(View.GONE); } } "	0	1	0	0	1	0
public void Func1() { final VDS var1 = getSelectedItem(); InstallModel var2 = (InstallModel) getWindow(); if (!var2.validate(var1.isOvirtNode())) { var2.setValidationFailed(new EntityModel<Boolean>(true)); return; } UpdateVdsActionParameters var3 = new UpdateVdsActionParameters(); var3.setvds(var1); var3.setVdsId(var1.getId()); var3.setPassword(var2.getUserPassword().getEntity()); var3.setReinstallOrUpgrade(true); var3.setInstallHost(true); var3.setoVirtIsoFile(null); var3.setOverrideFirewall(var2.getOverrideIpTables().getEntity()); var3.setActivateHost(var2.getActivateHostAfterInstall().getEntity()); var3.setAuthMethod(var2.getAuthenticationMethod()); var3.setFenceAgents(var1.getFenceAgents()); Provider<?> var4 = (Provider<?>) var2.getNetworkProviders().getSelectedItem(); if (var4 != null) { var3.getVdsStaticData().setOpenstackNetworkProviderId(var4.getId()); var3.setNetworkMappings((String) var2.getInterfaceMappings().getEntity()); var3.setLocalIP((String) var2.getlocalIP().getEntity()); } AsyncDataProvider.getInstance().getClusterById(new AsyncQuery(var3, new INewAsyncCallback() { @Override public void Func2(Object var2, Object var5) { VDSGroup var6 = (VDSGroup) var5; UpdateVdsActionParameters var7 = (UpdateVdsActionParameters) var2; var7.setRebootAfterInstallation(var6.supportsVirtService()); Frontend.getInstance().runAction( VdcActionType.InstallVds, var7, new IFrontendActionAsyncCallback() { @Override public void Func3(FrontendActionAsyncResult var8) { VdcReturnValueBase var5 = var8.getReturnValue(); if (var5 != null && var5.getSucceeded()) { cancel(); } } } ); } }), var1.getVdsGroupId()); } 	1	1	1	1	1	0
"public void Func1() { log.i(t, ""["" + this.hashCode() + ""] Func1()""); loadJavascriptUrl(""javascript:odkData.responseAvailable();""); } "	0	0	0	0	1	0
public void Func1(WatchedEvent var1) { var1.getState(); NodeEvent var2 = new NodeEvent(realPath(var1.getPath()), eventType(var1)) ; try { nodeWatcher.onEvent(var2); } catch (Exception e) { e.printStackTrace(); } } 	0	0	0	0	1	0
private void Func1(Group var1) { Intent var2 = new Intent(this, NWinnersActivity.class); var2.putExtra(Constants.INTENT_EXTRA_GROUP, var1); startActivity(var2); } 	0	0	0	0	1	0
@Override public boolean Func1() { return StringUtils.isNotBlank(this.number); } 	0	0	0	0	1	0
"@Override public boolean Func1(ServiceDeployPayload var1, String var2) { JSONTokener var3 = new JSONTokener(getConfig().getConfiguration()); JSONObject var4 = (JSONObject) var3.nextValue(); String var5 = var4.getString(""var5""); String var6 = null; if(var4.has(""identity_port"")){ var4.getString(""identity_port""); } OpenStackHeatClient var7 = null; OpenStackNovaClient var8 = null; try { var7 = new OpenStackHeatClient(getConfig().getVimEndpoint().toString(), getConfig().getAuthUserName(), getConfig().getAuthPass(), var5, var6); var8 = new OpenStackNovaClient(getConfig().getVimEndpoint().toString(), getConfig().getAuthUserName(), getConfig().getAuthPass(), var5, var6); } catch (IOException e) { Logger.error(""OpenStackHeat wrapper - Unable to connect to the VIM""); this.setChanged(); WrapperStatusUpdate var9 = new WrapperStatusUpdate(var2, ""ERROR"", e.getMessage()); this.notifyObservers(var9); return false; } ArrayList<Flavor> var10 = var8.getFlavors(); Collections.sort(var10); HeatModel var11; try { var11 = translate(var1, var10); HeatTemplate var12 = new HeatTemplate(); for (HeatResource var13 : var11.getResources()) { var12.putResource(var13.getResourceName(), var13); } DeployServiceFsm var14 = new DeployServiceFsm(this, var7, var2, var1, var12); Thread var15 = new Thread(var14); var15.start(); } catch (Exception e) { this.setChanged(); WrapperStatusUpdate var9 = new WrapperStatusUpdate(var2, ""ERROR"", e.getMessage()); this.notifyObservers(var9); return false; } return true; } "	0	1	0	0	0	0
"@SubscribeEvent public void Func1(RenderWorldLastEvent var1) { Profiler var2 = Minecraft.getMinecraft().mcProfiler; var2.startSection(""wizardry-particle""); for (ParticleRenderQueue var3 : queues) { var2.startSection(var3.name()); var3.dispatchQueuedRenders(Tessellator.getInstance()); var2.endSection(); } var2.endSection(); } "	0	0	0	0	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_guide_list); Toolbar var2 = (Toolbar) findViewById(R.id.guide_list_toolbar); setSupportActionBar(var2); var2.setTitleTextColor(0xFFFFFFFF); if(getSupportActionBar() != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setDisplayShowHomeEnabled(true); } Bundle var3 = getIntent().getExtras(); pinPointID = var3.getString(""pin_point_id""); searchView = (SearchView) findViewById(R.id.guide_list_searchview); searchEditText = (EditText) findViewById(R.id.search_src_text); closeButton = (ImageView) findViewById(R.id.search_close_btn); recyclerView = (RecyclerView) findViewById(R.id.guide_list_recyclerView); recyclerView.setHasFixedSize(true); recyclerView.setLayoutManager(new LinearLayoutManager(this)); guideDataList = new ArrayList<>(); StringRequest var4 = new StringRequest(Request.Method.POST, guideListUrl, new Response.Listener<String>() { @Override public void Func2(String var5) { try { JSONObject var6 = new JSONObject(var5); JSONArray var7 = var6.getJSONArray(""guide_list_to_hire""); for (int var8 = 0; var8 < var7.length(); var8++) { JSONObject var9 = var7.getJSONObject(var8); GuideData var10 = new GuideData( var9.getString(""user_id""), var9.getString(""nick_name""), var9.getString(""mobile_phone""), var9.getString(""email"")); guideDataList.add(var10); } guideListAdapter = new GuideListAdapter(guideDataList, GuideListActivity.this); recyclerView.setAdapter(guideListAdapter); } catch (JSONException e) { Toast.makeText(GuideListActivity.this, var5, Toast.LENGTH_LONG).show(); e.printStackTrace(); } } }, new Response.ErrorListener() { @Override public void Func3(VolleyError var11) { Toast.makeText(GuideListActivity.this, var11.getMessage(), Toast.LENGTH_LONG).show(); var11.printStackTrace(); } }) { @Override protected Map<String, String> Func4() throws AuthFailureError { Map<String, String> var12 = new HashMap<>(); var12.put(""pin_point_id"", pinPointID); return var12; } }; MySingleton.getMyInstance(GuideListActivity.this).addToRequestQueue(var4); searchView.onActionViewExpanded(); searchView.setIconifiedByDefault(false); searchView.setQueryHint(""Search Guides To Hire""); if(!searchView.isFocused()) { searchView.clearFocus(); } searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() { @Override public boolean Func5(String var13) { return false; } @Override public boolean Func6(String var14) { return true; } }); closeButton.setOnClickListener(new View.OnClickListener() { @Override public void Func7(View var15) { searchEditText.setText(""""); searchView.setQuery("""", false); guideListAdapter.notifyDataSetChanged(); searchView.clearFocus(); } }); } "	0	0	0	0	1	0
"@Override public String Func1(String var1) { return var1 + ""map""; } "	0	0	0	0	1	0
"public void Func1(ServletRequest var1, ServletResponse var2, FilterChain var3) throws IOException, ServletException { HttpServletResponse var4 = (HttpServletResponse) var2; HttpServletRequest var5 = (HttpServletRequest) var1; var4.setHeader(""Access-Control-Allow-Origin"", ""http://localhost:3000""); var4.setHeader(""Access-Control-Allow-Credentials"", ""true""); var4.setHeader(""Access-Control-Allow-Methods"", ""POST, PUT, GET, OPTIONS, DELETE""); var4.setHeader(""Access-Control-Max-Age"", ""3600""); var4.setHeader(""Access-Control-Allow-Headers"", ""x-requested-with, Authorization, Content-Type, x-auth-token""); if (""OPTIONS"".equalsIgnoreCase(var5.getMethod())) { var4.setStatus(HttpServletResponse.SC_OK); } else { var3.Func1(var1, var2); } } "	0	0	0	0	1	0
"public void Func1(Player var1) { Inventory var2 = Bukkit.createInventory(var1, 9, rApi.colourize(""&eKits"")); ItemStack var3 = rApi.createCustomItem(Material.SHIELD, 1, ""&cFighter"", ""&3Get the Fighter Kit!""); ItemStack var4 = rApi.createCustomItem(Material.BOW, 1, ""&fRanger"", ""&3Get the Ranger Kit!""); var2.setItem(0, var3); var2.setItem(1, var4); var1.openInventory(var2); } "	0	0	0	0	1	0
"@Test public void Func1() { String var1 = ""https""; ReflectionTestUtils.setField(configurationSettingService, ""consulProtocolSetting"", var1); String var2 = configurationSettingService.getConsulProtocol(); assertEquals(var1, var2); } "	0	1	1	1	1	0
"private static void Func1(byte var1) { if(var1==1) { System.out.println(""#   $$$$  $$ $$   $$$   $$    $$    $$$$$  $   $   $$$$  $$$$$  #""); System.out.println(""#  $$     $$ $$  $$ $$  $$    $$    $$     $$  $  $$     $$     #""); System.out.println(""#  $      $$$$$  $$$$$  $$    $$    $$$$   $ $ $  $   $$ $$$    #""); System.out.println(""#  $$     $$ $$  $$ $$  $$    $$    $$     $  $$  $$   $ $$     #""); System.out.println(""#   $$$$  $$ $$  $$ $$  $$$$$ $$$$$ $$$$$  $   $   $$$$  $$$$$  #""); System.out.println(""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~""); System.out.println(""\t\tCHALLENGE - MINIGAMES""); System.out.println(""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~""); System.out.println(LSD.getString(""prMeMsg_msg1"")); System.out.println(LSD.getString(""prMeMsg_msg2"")); System.out.println(LSD.getString(""prMeMsg_msg3"")); }else if(var1==2){ System.out.println(LSD.getString(""prMeMsg_msg4"")); System.out.println(LSD.getString(""prMeMsg_msg5"")); } } "	0	0	0	0	1	0
public void Func1(String var1, Permission var2) { BitSet var3 = roleDenyPermissions.get(var1); if (var3 == null) { var3 = new BitSet(); var3.set(var2.ordinal()); roleDenyPermissions.put(var1, var3); } else { var3.set(var2.ordinal()); } BitSet var4 = roleAllowPermissions.get(var1); if (var4 != null) { var4.clear(var2.ordinal()); } } 	0	0	0	0	1	0
"@Test public void Func1() { try { main.main(null); } catch (IOException e) { e.printStackTrace(); } managerTest = new ProjectManager(); managerTest.loadProjects(); managerTest.saveProjects(); managerTest.getProject(1).removeComponents(1); managerTest.getProject(1).removeDefectEntry(1); managerTest.getProject(1).removeRequirement(1); managerTest.getProject(1).removeReviews(1); managerTest.getProject(1).removeTimeEntry(1); managerTest.getProject(1).removeUserTests(1); assertNotNull(managerTest.getAllProjects()); assertNotNull(managerTest.getProject(1)); assertTrue(managerTest.deleteProject(1)); assertTrue(managerTest.clearAllProjects()); assertTrue(managerTest.newProject(""Junit"", ""Unit Test"", PSPType.PSP1)); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { MsbMessageOptions var1 = TestUtils.createSimpleConfigSetNamespace(""test:requester-responder-test-send-multiple-requests-get-var10""); var1.setAckTimeout(100); var1.setResponseTimeout(2000); var1.setWaitForResponses(1); int var2 = 5; CountDownLatch var3 = new CountDownLatch(var2); CountDownLatch var4 = new CountDownLatch(var2); List<Message> var5 = new LinkedList<Message>(); List<Acknowledge> var6 = new LinkedList<Acknowledge>(); Payload var7 = TestUtils.createSimpleRequestPayload(); final AtomicInteger var8 = new AtomicInteger(var2); Thread var9= new Thread(() -> { while (var8.get() > 0) { Requester.create(var1, msbContext). onAcknowledge((Acknowledge var10) -> { var6.add(var10); var4.countDown(); }) .publish(var7); var8.decrementAndGet(); } }); var9.setDaemon(true); var9.start(); MsbContext var11 = TestUtils.createSimpleMsbContext(); Random var12 = new Random(); var12.ints(); ResponderServer.create(var1, var11) .use(((request, response) -> { response.sendAck(var12.nextInt(), var12.nextInt()); var5.add(response.getResponseMessage()); var3.countDown(); })) .listen(); assertTrue(""Message var10 was not send"", var3.await(3000, TimeUnit.MILLISECONDS)); assertTrue(""Message var10 response not received"", var4.await(3000, TimeUnit.MILLISECONDS)); assertTrue(""Expected one var10"", var6.size() == var2); assertEquals(var5.stream().map(Message::getAck).collect(toList()), var6); } "	0	1	0	0	0	0
"private void Func1(){ LinearLayout.LayoutParams var1 = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT); var1.gravity = Gravity.CENTER_VERTICAL; var1.weight = 1f; final SubStatement var2 = data.findPayerStatement(user); LinearLayout var3 = new LinearLayout(parent); var3.setPadding(0, 0, 0, Utility.getPixel(2, getResources())); TextView var4 = new TextView(parent); var4.setGravity(Gravity.CENTER); var4.setText(var2.payerName); var4.setLayoutParams(var1); TextView var5 = new TextView(parent); var5.setGravity(Gravity.CENTER); var5.setText(""YOU""); var5.setLayoutParams(var1); TextView var6 = new TextView(parent); var6.setGravity(Gravity.CENTER); var6.setText(""$ "" + String.format(""%.2f"", var2.payerAmount)); var6.setLayoutParams(var1); var3.addView(var5); var3.addView(var4); var3.addView(var6); layout.addView(var3); deleteButton.setVisibility(View.GONE); paymentOptionLayout.setVisibility(View.GONE); if(var2.payerConfirm){ confirmButton.setVisibility(View.GONE); rejectButton.setVisibility(View.GONE); } else { confirmButton.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var7) { var2.setPayerConfirm(parent); confirmButton.setVisibility(View.GONE); rejectButton.setVisibility(View.GONE); } }); rejectButton.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var7) { var2.setPayerReject(parent); } }); } } "	0	1	0	0	0	0
"private <T> void Func1(T var1, String var2, Object var3) throws ConfigurationException { Field var4 = getClassField(var1, var2); if (var4.getType().isPrimitive()) { var3 = castToPrimitiveType(var4, var3.toString()); } try { var4.set(var1, var3); } catch (IllegalAccessException e) { throw new ConfigurationException(String.format(Locale.ENGLISH, ""Error in overriding deployment config var3 with environment config key %s var3"", var2)); } } "	0	1	0	0	0	0
private static HashSet<Integer> Func1(int[] var1, int[] var2) { HashSet<Integer> var3 = new HashSet<Integer>(); for (int var4 = 0; var4 < var1.length; var4++) { if (var1[var4] != var2[var4] && var1[var4] != 0) { var3.add(var1[var4]); } } return var3; } 	1	0	1	0	1	0
"@Override public boolean Func1(String var1, String var2, String var3) { if (var1 == null || var1.isEmpty() || var2 == null || var2.isEmpty() || var3 == null || var3.isEmpty()) { s_logger.error(""Invalid parameter found in (var1, var2, var3) tuple for domain: "" + var3); return false; } try { String var4 = ""passwordForValidation""; byte[] var5 = CertificateHelper.buildAndSaveKeystore(var3, var1, getKeyContent(var2), var4); KeyStore var6 = CertificateHelper.loadKeystore(var5, var4); if (var6 != null) return true; s_logger.error(""Unabled to construct keystore for domain: "" + var3); } catch (Exception e) { s_logger.error(""Certificate validation failed due to exception for domain: "" + var3, e); } return false; } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { final String var1 = ""filterBob""; final String var2 = ""filterCustodian""; final String var3 = ""1986-10-09""; final int var4 = 10; final FilterBoundingBox var5 = null; String var6 = service.getFilter(var1, var2, var3, var4, var5, null); String var7 = service.getStyle(var6, null, ""#2242c7"", Styles.ALL_BOREHOLES); Assert.assertNotNull(var7); Assert.assertThat(var7, Matchers.containsString(""gsmlp:BoreholeView"")); } "	0	0	0	0	1	0
"public void Func1() { Unit var1 = (Unit) Cache.getInstance().retrieve(""var1""); try { var1.setAvailableBeds(Integer.parseInt(view.getAvailableBedsUiElement().getValue())); var1.setPotentialDc(Integer.parseInt(view.getPotentialDcUiElement().getValue())); var1.setDcByDeadline(Integer.parseInt(view.getDcByDeadlineUiElement().getValue())); var1.setTotalAdmits(Integer.parseInt(view.getTotalAdmitsUiElement().getValue())); var1.setAdmitsByDeadline(Integer.parseInt(view.getAdmitsByDeadlineUiElement().getValue())); }catch(NumberFormatException e){ } Service.updateOrSaveUnit(var1); Bootstrapper.FACTORY.newDispatcher().goToCapacityOverview(); } "	0	0	0	0	1	0
@Override protected StringConverter<LocalTime> Func1() { return jfxTimePicker.Func1(); } 	0	0	0	0	1	0
public static ReportFeatureEnum Func1(ReportDTO var1, String var2) { ReportFeatureEnum var3 = null; if (!var1.getCreatedBy().equals(var2)) { var3 = ReportFeatureEnum.MANAGE_ALL_REPORTS; } return var3; } 	1	0	1	1	1	0
public boolean Func1(Element var1) { return profile.containsKey(var1); } 	0	0	0	0	1	0
private static <V> ValueHolder<V> Func1(V var1) { return new ByRefOnHeapValueHolder<V>(var1, SystemTimeSource.INSTANCE.getTimeMillis()); } 	0	0	0	0	1	0
@Bean public AppRegistryController Func1(AppRegistry var1, ApplicationConfigurationMetadataResolver var2) { return new AppRegistryController(var1, var2); } 	0	0	0	0	1	0
@Override public Collection<V> Func1() { if (!this.hasNext()) { throw new NoSuchElementException(); } Collection<V> var1 = getPage(nextPage, itemsPerPage); if (var1.size() > 0) { nextPage = -1; } else { ++nextPage; } return var1; } 	1	0	1	1	1	0
"void Func1() { if (clock != null) { checkState(clock.getClockMode() == ClockMode.REAL_TIME, ""Clock must be in real-time mode, but is in %s mode."", clock.getClockMode()); LOGGER.debug(""check real time -> switch to real time""); clock.switchToRealTime(); } } "	0	0	0	0	1	0
"@Override public void Func1(final String var1, Response var2) { if (progressBar != null) { progressBar.progressiveStop(); progressBar.setVisibility(View.INVISIBLE); } Uri.Builder var3 = Uri.parse(""https://github.com/"").buildUpon(); var3.appendPath(repoInfo.owner); var3.appendPath(repoInfo.name); var3.appendPath(""raw""); var3.appendPath(repoInfo.branch); webview.loadDataWithBaseURL(var3.build().toString() + ""/"", var1, ""text/html"", ""UTF-8"", null); } "	0	0	0	0	1	0
"private void Func1(Collection<String> var1) { File var2 = Paths.get(this.nondexDir, this.executionId, ConfigurationDefaults.FAILURES_FILE) .toFile(); try (BufferedWriter bw = new BufferedWriter(new FileWriter(var2))) { for (String var3 : var1) { bw.write(var3 + ""\n""); } } catch (FileNotFoundException fne) { Logger.getGlobal().log(Level.FINEST, ""File Not Found. Probably no var3 var2 in this run.""); } catch (IOException ioe) { Logger.getGlobal().log(Level.WARNING, ""Exception reading failures file."", ioe); } } "	0	1	0	0	0	0
"@Override public List<Ordering> Func1(Map<String, Object> var1, Integer var2, Integer var3) { List<Ordering> var4 = new ArrayList<>(); String var5 = null; if (var1 == null || var1.isEmpty()) var5 = ""SELECT * FROM "" + table + "" Limit "" + var2 + "", "" + var3; else { var5 = createFilterQuery(var1, var2, var3); } try (Connection connection = connectionPool.getConnection(); PreparedStatement statement = connection .prepareStatement(var5); ResultSet set = statement.executeQuery()) { while (set.next()) { Ordering var6 = transformer.getObject(set); var4.add(var6); } } catch (Exception e) { e.printStackTrace(); } return var4; } "	0	0	0	0	1	0
"public void Func1() { currentDate = currentDate.plusMonths(1); labelMonth.setText(currentDate.toString(""MMMM yyyy"")); refresh(filterSettings); } "	0	1	0	0	0	0
"@Test public void Func1() throws Exception { Map<String, Object> var1 = new HashMap<>(); var1.put(""security1500.xml"", readTextFile(sampleRoot + ""security1500.xml"")); var1.put(""security5621.xml"", readTextFile(sampleRoot + ""security5621.xml"")); var1.put(""security9012.xml"", readTextFile(sampleRoot + ""security9012.xml"")); var1.put(""security29674.xml"", readTextFile(sampleRoot + ""security29674.xml"")); Properties var2 = getDocumentProperties(); var2.setProperty(pn_client_txLevel, pv_client_txLevel_skip); ResultCollection<DocumentAccessor> var3 = (ResultCollection<DocumentAccessor>) getDocManagement().storeDocuments(var1, var2); assertEquals(4, var1.size()); } "	0	1	1	1	1	0
"@Test public void Func1() throws Exception { addDocumentsToCollectionTest(); for (String var1: uris) { this.getDocManagement().removeDocumentFromCollections(var1, new String[] {""CLN_Custom""}); } ResultCollection<String> var2 = (ResultCollection<String>) this.getDocManagement().getDocumentUris(""collections.contains(CLN_Custom), txFinish = 0"", null); assertEquals(0, var2.size()); } "	0	0	0	0	1	0
public static String Func1() { return CommonEditorSettings.Func1(); } 	0	0	0	0	1	0
private void Func1() throws IOException { long var1 = getBlockCurrentBlockId(); if (mCurrentBlockInStream == null || mCurrentBlockInStream.remaining() == 0) { if (mCurrentBlockInStream != null) { mCurrentBlockInStream.close(); } try { mCurrentBlockInStream = mContext.getTachyonBS().getInStream(var1); } catch (IOException ioe) { long var2 = var1 * mBlockSize; mCurrentBlockInStream = new UnderStoreFileInStream(var2, mBlockSize, mUfsPath); } if (mShouldCache) { try { closeCacheStream(); mCurrentCacheStream = mContext.getTachyonBS().getOutStream(var1, null); mShouldCacheCurrentBlock = true; } catch (IOException ioe) { mShouldCacheCurrentBlock = false; } } } } 	0	1	0	0	0	0
private PriorityQueue<PatternAndRating> Func1(List<PatternAndRating> var1, List<PatternAndRating> var2) { for (int var3 = 0; var3 < var2.size(); ++var3) { int var4 = var3 % mu; PatternAndRating var5 = new PatternAndRating(var1.get(var4)); var5.pattern = new Pattern(NoteUtils.mutatePattern(var5)); var2.set(var3, var5); } PriorityQueue<PatternAndRating> var6 = new PriorityQueue<>(mu + lambda); for (int var3 = 0; var3 < var2.size(); ++var3) { var6.add(var2.get(var3)); } for (int var3 = 0; var3 < var1.size(); ++var3) { var6.add(var1.get(var3)); } return var6; } 	0	1	0	0	0	0
private void Func1(int var1, PageCache var2) throws Exception { Page var3 = null; try { var3 = pagingStore.createPage(var1); storageManager.beforePageRead(); var3.open(); List<PagedMessage> var4 = var3.read(storageManager); var2.setMessages(var4.toArray(new PagedMessage[var4.size()])); } finally { try { if (var3 != null) { var3.close(); } } catch (Throwable ignored) { } storageManager.afterPageRead(); } } 	1	0	1	0	1	0
public void Func1(PipelineDefinition var1, List<Pipeline> var2) { this.id = var1.getId(); this.name = var1.getName(); var2 = var2.stream().sorted((p1, p2) -> Integer.compare(p2.getExecutionId(), p1.getExecutionId())).collect(Collectors.toList()); if (!var2.isEmpty()) { int var3 = var2.size(); for (int var4 = 0; var4 < var3; var4++) { this.pipelineExecutionIds.add(var2.get(var4).getExecutionId()); if (var4 == var3 - 1) { this.lastRun.constructBasePipelineDto(var2.get(var4)); } } } else { this.lastRun.constructEmptyPipelineDto(var1); } } 	1	1	1	1	1	0
public List<Task> Func1(List<TaskDefinition> var1, Job var2) { List<Task> var3 = new ArrayList<>(); int var4 = var1.size(); for (int var5 = 0; var5 < var4; var5++) { var3.add(new Task()); Task var6 = var3.get(var5); var6.setTaskDefinition(var1.get(var5)); var6.setJobId(var2.getId()); var6.setStageId(var2.getStageId()); var6.setPipelineId(var2.getPipelineId()); var6.setType(var1.get(var5).getType()); if (var6.getType() == TaskType.FETCH_MATERIAL) { FetchMaterialTask var7 = (FetchMaterialTask) var1.get(var5); for (Material var8 : this.var10.getMaterials()) { if (var8.getMaterialDefinition().getId().equals(var7.getMaterialDefinitionId())) { var7.setMaterialDefinition(var8.getMaterialDefinition()); var6.setTaskDefinition(var7); break; } } } else if (var6.getType() == TaskType.FETCH_ARTIFACT) { FetchArtifactTask var9 = (FetchArtifactTask) var1.get(var5); if (var9.shouldUseLatestRun()) { Pipeline var10 = (Pipeline) this.pipelineService.getById(var2.getPipelineId()).getObject(); var9.setDesignatedPipelineExecutionId(var10.getExecutionId()); var6.setTaskDefinition(var9); } } var6.setRunIfCondition(var1.get(var5).getRunIfCondition()); var3.set(var5, var6); } return var3; } 	0	0	0	0	1	0
public Matrix3 Func1 (float var1, float var2) { tmp[0] = 1; tmp[1] = 0; tmp[2] = 0; tmp[3] = 0; tmp[4] = 1; tmp[5] = 0; tmp[6] = var1; tmp[7] = var2; tmp[8] = 1; mul(vals, tmp); return this; } 	0	0	0	0	1	0
"public String Func1() { int var1 = wins + losses - 1; Game var2 = gameSchedule.get(var1); String var3 = gameWLSchedule.get(var1) + "" "" + gameSummaryStr(var2); String var4 = """"; if (var2.homeTeam.rivalTeam.equals(var2.awayTeam.abbr)) { if ( gameWLSchedule.get(var1).equals(""W"") ) var4 = ""Won vs Rival! +2 Prestige\n""; else var4 = ""Lost vs Rival! -2 Prestige\n""; } return var4 + name + "" "" + var3 + ""\nNew poll rank: #"" + rankTeamPollScore + "" "" + abbr + "" ("" + wins + ""-"" + losses + "")""; } "	0	0	0	0	1	0
"@Override protected void Func1(GrouperGroupInfo var1, LdapGroup var2, Subject var3, LdapUser var4) throws PspException { if ( var4 == null ) throw new PspException(""%s: LdapUser does not exist for var3 %s"", getName(), var3.getId()); String var5 = evaluateJexlExpression(config.getProvisionedAttributeValueFormat(), var3, var1); scheduleUserModification(var4, AttributeModificationType.ADD, Arrays.asList(var5)); } "	0	0	0	0	1	0
private boolean Func1(Source var1) { return isCacheSource(var1) || isCatalogProvider(var1.getId()); } 	1	0	1	0	1	0
@Override public void Func1(final KeyEvent var1) { } 	0	0	0	0	1	0
@Override public void Func1(World var1, BlockPos var2, IBlockState var3) { TileEntity var4 = var1.getTileEntity(var2); if (var4 instanceof TileEntityHenhouse) { InventoryHelper.dropInventoryItems(var1, var2, (TileEntityHenhouse) var4); } super.Func1(var1, var2, var3); } 	0	0	0	0	1	0
"public static Connection Func1(){ try{ InitialContext var1 = new InitialContext(); DataSource var2 = (DataSource) var1.lookup( ""java:/comp/env/jdbc/bithealth"" ); Connection var3 = var2.Func1(); return var3; }catch(Exception e){ System.out.println(e.getMessage()); return null; } } "	1	0	1	0	1	0
@Override public void Func1(final AppEventListner var1, final AppEventListner.ApplicationState var2, final AppEventListner.ApplicationState var3) { widgetTag.clear(); if (var2 != null) { backEventListner = new PresenterEventListner() { @Override public void Func2(Button var4) { var1.requestApplicationState(var2); } @Override public String Func3() { return var2.label; } }; } else { backEventListner = new PresenterEventListner() { @Override public void Func2(Button var4) { var1.requestApplicationState(AppEventListner.ApplicationState.menu); } @Override public String Func3() { return AppEventListner.ApplicationState.menu.label; } }; } setTitle(backEventListner); if (var3 != null) { nextEventListner = new PresenterEventListner() { @Override public void Func2(Button var4) { var1.requestApplicationState(var3); } @Override public String Func3() { return var3.label; } }; simpleView.setButton(SimpleView.ButtonType.next, nextEventListner); } setContent(var1); simpleView.resizeView(); widgetTag.add(simpleView); } 	0	0	0	0	1	0
"public static void Func1(String var1, Callback var2) { OkHttpClient var3 = new OkHttpClient.Builder() .build(); HttpUrl.Builder var4 = HttpUrl.parse(Constants.GOOGLE_BASE_URL + ""address="" + var1 + ""&includeOffices=true&key=AIzaSyALQDoCiusD0Poqe2mDgGo78zoQy31U2N0"").newBuilder(); var4.addQueryParameter(Constants.GOOGLE_ZIPCODE_QUERY_PARAMETER, var1); String var5 = var4.build().toString(); Request var6 = new Request.Builder() .var5(var5) .build(); Call var7 = var3.newCall(var6); var7.enqueue(var2); } "	0	0	0	0	1	0
"public Map<String, TransferStatus> Func1() throws IOException { Map<String, TransferStatus> var1 = new HashMap<String, TransferStatus>(); FileStatus var2[] = null; try { var2 = fs.listStatus(batchBasePath); } catch (Exception e) { System.out.println(""No Previous states found: "" + e.getMessage()); } if (var2 == null || var2.length <= 0) return var1; List<FileStatus> var3 = new ArrayList<FileStatus>(); for (FileStatus var4 : var2) { if (var4.isDirectory()) var3.add(var4); } Collections.sort(var3, new Comparator<FileStatus>() { @Override public int Func2(FileStatus var5, FileStatus var6) { return (int) (var5.getModificationTime() - var6 .getModificationTime()); } }); var3.remove(0); for (FileStatus var4 : var3) { System.out.println(""Processing State History: "" + var4.getPath()); if (fs.isDirectory(var4.getPath())) { Path var7 = new Path(var4.getPath(), PREVIOUS_STATE_FILE_NAME); List<TransferStatus> var8 = getAllStats(new Path( var4.getPath(), STATUS_PATH)); mergeStates(var1, var8); if (fs.exists(var7)) { var8 = getAllStats(var7); mergeStates(var1, var8); break; } } } return var1; } "	1	0	0	1	0	0
public User Func1(Long var1) { return userRepository.findOneByDeletedFalse(var1); } 	0	0	0	0	1	0
@Override public int Func1(ILaunchConfigurationType var1, ILaunchConfigurationType var2) { return var2.getName().compareTo(var1.getName()); } 	0	0	0	0	1	0
"private void Func1(MzTabParser var1, long var2) throws LineItemParsingHandlerException { if (var1.getMetaDataSection().getMsRunEntry(getIndex()).getLocation() != null) { throw new LineItemParsingHandlerException(""DUPLICATED MS-Run location entry FOUND AT LINE "" + var2); } } "	0	0	0	0	1	0
@Category({ IntegrationTest.class }) @Test public void Func1() throws Exception { assertThat(steemJ.Func1(transaction), equalTo(EXPECTED_TRANSACTION_HEX)); } 	0	0	0	0	1	0
"public static <T> T Func1(final int var1, final int var2, @NotNull final TimeUnit var3, @NotNull final Callable<T> var4) { check(""consistent time must be greater than 0"", var1 > 0); check(""total timeout must be greater than 0"", var2 > 0); long var5 = System.currentTimeMillis(); Object[] var6 = {null}; long[] var7 = {0}; long[] var8 = {0}; Object[] var9 = {null}; long var10 = var3.convert(var1, TimeUnit.MILLISECONDS); return Unreliables.retryUntilSuccess(var2, var3, () -> { T var11 = var4.call(); boolean var12 = var11 == var6[0] || (var11 != null && var11.equals(var6[0])); if (var12) { long var13 = System.currentTimeMillis(); long var14 = var13 - var7[0]; if (var14 > var8[0]) { var8[0] = var14; var9[0] = var11; } if (var14 > var10) { return var11; } } else { var6[0] = var11; var7[0] = System.currentTimeMillis(); } long var15 = System.currentTimeMillis() - var5; if (var8[0] > 0) { throw new InconsistentResultsException(var15, var9[0], var8[0]); } else { throw new ResultsNeverConsistentException(var15); } }); } "	1	0	0	1	1	0
"@Override public NBTBase Func1() { NBTTagCompound var1 = new NBTTagCompound(); var1.setTag(""placedComponents"", NBTTagCompounds.write(placedComponents)); return var1; } "	0	0	0	0	1	0
"private void Func1(PnfsId var1, String var2) throws CacheException { RemoveReplicaMessage var3 = new RemoveReplicaMessage(var2, var1); LOGGER.trace(""Sending RemoveReplicasMessage {}."", var3); Future<RemoveReplicaMessage> var4 = pools.send(new CellPath(var2), var3); try { var3 = var4.get(); LOGGER.trace(""Returned ReplicationRepRmMessage {}."", var3); } catch (InterruptedException | ExecutionException e) { throw CacheExceptionUtils.getCacheException( CacheException.SELECTED_POOL_FAILED, FileTaskCompletionHandler.FAILED_REMOVE_MESSAGE, var1, var2, e); } Serializable var5 = var3.getErrorObject(); if (var5 != null && !CacheExceptionUtils.fileNotFound(var5)) { throw CacheExceptionUtils.getCacheException( CacheException.SELECTED_POOL_FAILED, FileTaskCompletionHandler.FAILED_REMOVE_MESSAGE, var1, var2, (Exception) var5); } } "	0	1	0	0	0	0
@Override public void Func1(View var1) { adapter.onBlockClick(var1, position); } 	0	0	0	0	1	0
@Override public void Func1(View var1, int var2) { mAppList.remove(var2); mAdapter.notifyDataSetChanged(); } 	0	0	0	0	1	0
"@Override public boolean Func1(String var1) throws SQLException { clearCurrentResults(); checkOpen(); StatementClient var2 = null; ResultSet var3 = null; try { var2 = connection().startQuery(var1); if (var2.isFailed()) { throw resultsException(var2.finalResults()); } var3 = new PrestoResultSet(var2, maxRows.get(), progressConsumer); checkSetOrResetSession(var2); if (var2.current().getUpdateType() == null) { currentResult.set(var3); return true; } while (var3.next()) { } Long var4 = var2.finalResults().getUpdateCount(); currentUpdateCount.set((var4 != null) ? var4 : 0); return false; } catch (RuntimeException e) { throw new SQLException(""Error executing query"", e); } finally { if (currentResult.get() == null) { if (var3 != null) { var3.close(); } if (var2 != null) { var2.close(); } } } } "	0	0	0	0	1	0
"public static <X, Y> Function<X, Y> Func1(final Function<? super X, ? extends Y> var1) { final BiFunction<X, String, Y> var2 = Func1((x0, x1) -> var1.apply(x0)); return x -> var2.apply(x, """"); } "	0	0	0	0	1	0
public List<Stub> Func1() { return unmodifiableList(new ArrayList<>(stubs)); } 	1	0	1	0	1	0
"private void Func1() { Uri var1 = Uri.parse(""content://sms/""); String var2 = mAddress; if (var2 == null) return; String var3; try { var2 = String.valueOf(Long.parseLong(var2.toString())); var3 = ""var2 like '%"" + var2 + ""'""; } catch (NumberFormatException ex) { var3 = ""var2='"" + var2 + ""'""; } if (getContentResolver().delete(var1, var3, null) > 0) { finish(); } else { Toast.makeText(this, R.string.delete_fail, Toast.LENGTH_SHORT).show(); } } "	1	0	1	0	1	0
"@ResponseBody @RequestMapping(value = ""/Func1"", method = RequestMethod.POST, params = ""action=Func1"") public ModelAndView Func1(@Valid @ModelAttribute(""var1"") SearchRecordsRequest var1, BindingResult var2, Model var3) { if(!isEmptySearch(var1)){ var1.reset(); var1.resetPageNumber(); List<BibItem> var4 = bibSolrDocumentRepository.Func1(var1); buildResults(var1, var4); return new ModelAndView(""searchRecords"", ""var1"", var1); } var1.setErrorMessage(""At least one Search Facet Box needs to be checked to get results.""); return new ModelAndView(""searchRecords"", ""var1"", var1); } "	0	0	0	0	1	0
public Builder Func1(@NotNull String var1, @NotNull VcsRepository var2) { mapping.put(StringHelper.normalize(var1), var2); return this; } 	0	0	0	0	1	0
@Override public void Func1(Rect var1) { VerticalScrollBoundsProvider var2 = new VerticalScrollBoundsProvider(0, var1.height()); mIndicatorOffset = - getHeight() + var1.top; mScreenPositionCalculator = new VerticalScreenPositionCalculator(var2); } 	1	0	1	0	1	0
"@RequestMapping(""/saml_error"") public String Func1(Model var1, HttpServletRequest var2) { AuthenticationException var3 = (AuthenticationException) var2.getSession().getAttribute(WebAttributes.AUTHENTICATION_EXCEPTION); var1.addAttribute(""saml_error"", var3.getMessage()); return ""external_auth_error""; } "	0	0	0	0	1	0
public <T> T Func1(T var1) { this.var1 = var1; return var1; } 	0	0	0	0	1	0
@Override public AbstractOMXQueryControlAccessor<P, Map<String, Object>, R> Func1() { return thenApply(state -> BaseOMXQueryControl.this.doWrite(state.basePointer)); } 	0	0	0	0	1	0
@Override public Void Func1(GraphqlParser.InputValueDefinitionContext var1) { InputValueDefinition var2 = new InputValueDefinition(var1.name().getText()); newNode(var2, var1); if (var1.defaultValue() != null) { var2.setValue(getValue(var1.defaultValue().value())); } for (ContextEntry var3 : contextStack) { if (var3.contextProperty == ContextProperty.FieldDefinition) { ((FieldDefinition) var3.value).getInputValueDefinitions().add(var2); break; } if (var3.contextProperty == ContextProperty.InputObjectTypeDefinition) { ((InputObjectTypeDefinition) var3.value).getInputValueDefinitions().add(var2); break; } if (var3.contextProperty == ContextProperty.DirectiveDefinition) { ((DirectiveDefinition) var3.value).getInputValueDefinitions().add(var2); break; } } addContextProperty(ContextProperty.InputValueDefinition, var2); super.visitChildren(var1); popContext(); return null; } 	0	1	0	0	0	0
"@POST @Consumes(MediaType.APPLICATION_JSON) @ApiOperation( value = ""Create an application"", notes = ""Create an application from the supplied information."", response = Application.class ) @ApiResponses(value = { @ApiResponse( code = HttpURLConnection.HTTP_CREATED, message = ""Application created successfully."", response = Application.class ), @ApiResponse( code = HttpURLConnection.HTTP_CONFLICT, message = ""An application with the supplied id already exists"" ), @ApiResponse( code = HttpURLConnection.HTTP_PRECON_FAILED, message = ""A precondition failed"" ), @ApiResponse( code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = ""Genie Server Error due to Unknown Exception"" ) }) public Response Func1( @ApiParam( value = ""The application to create."", required = true ) final Application var1 ) throws GenieException { LOG.info(""Called to create new application""); final Application var2 = this.acs.Func1(var1); return Response.created( this.uriInfo.getAbsolutePathBuilder().path(var2.getId()).build()). entity(var2). build(); } "	0	0	0	0	1	0
"@GET @Path(""/{var1}"") @ApiOperation( value = ""Find an application by var1"", notes = ""Get the application by var1 if it exists"", response = Application.class ) @ApiResponses(value = { @ApiResponse( code = HttpURLConnection.HTTP_OK, message = ""OK"", response = Application.class ), @ApiResponse( code = HttpURLConnection.HTTP_NOT_FOUND, message = ""Application not found"" ), @ApiResponse( code = HttpURLConnection.HTTP_PRECON_FAILED, message = ""Invalid var1 supplied"" ), @ApiResponse( code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = ""Genie Server Error due to Unknown Exception"" ) }) public Application Func1( @ApiParam( value = ""Id of the application to get."", required = true ) @PathParam(""var1"") final String var1 ) throws GenieException { LOG.info(""Called to get Application for var1 "" + var1); return this.acs.Func1(var1); } "	0	0	0	0	1	0
private void Func1() { Iterator var1 = subscriptions.entrySet().iterator(); while (var1.hasNext()) { Map.Entry var2 = (Map.Entry) var1.next(); ((KuzzleRoom)var2.getValue()).renew(null, ((KuzzleRoom)var2.getValue()).getListener()); } } 	0	1	0	0	0	0
@Override public IndexSearchResult<VcfIndexEntry> Func1(List<? extends FeatureFile> var1, Query var2) throws IOException { if (CollectionUtils.isEmpty(var1)) { return new IndexSearchResult<>(Collections.emptyList(), false, 0); } SimpleFSDirectory[] var3 = fileManager.getIndexesForFiles(var1); long var4 = featureIndexDao.getTotalIndexSize(var3); try (MultiReader reader = featureIndexDao.openMultiReader(var3)) { if (reader.numDocs() == 0) { return new IndexSearchResult<>(Collections.emptyList(), false, 0); } IndexSearcher var5 = new IndexSearcher(reader, TaskExecutor.getExecutorService()); AbstractDocumentBuilder<VcfIndexEntry> var6 = AbstractDocumentBuilder .createDocumentCreator(var1.get(0).getFormat(), vcfFilterForm.getInfoFields()); Sort var7 = createSorting(vcfFilterForm.getOrderBy(), var1); IndexSearchResult<VcfIndexEntry> var8 = performSearch(var5, reader, var2, var7, var6); if (var4 > featureIndexDao.getLuceneIndexMaxSizeForGrouping()) { var8.setTotalResultsCount(0); } return var8; } finally { for (SimpleFSDirectory var9 : var3) { IOUtils.closeQuietly(var9); } } } 	0	0	0	0	1	0
private void Func1(int var1, int var2, TemperatureInfo var3, int var4) { TemperatureRange var5 = var3.getTemperatureRange(); float var6 = var3.getRangeDelta(true); if (var5 != TemperatureRange.MILD) { boolean var7 = var5 == TemperatureRange.COOL; float var8 = var7 ? 1.0F - var6 : var6; GlStateManager.pushMatrix(); GlStateManager.color(1.0F, 1.0F, 1.0F, var8); drawTexturedModalRect(var1, var2, 16 * ((var7 ? 8 : 9) + var4), 16 * 1, 16, 16); GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F); GlStateManager.popMatrix(); } } 	0	1	0	0	0	0
private static String[] Func1(Collection<List<String>> var1) { if (var1 == null || var1.isEmpty()) { return null; } List<String> var2 = new ArrayList<>(var1.size()); for (List<String> var3 : var1) { String var4 = var3.get(0); if (var4 != null && !var4.isEmpty()) { var2.add(var4); } } return var2.toArray(new String[var1.size()]); } 	1	0	1	0	1	0
public int Func1() { return st_uid.get(); } 	1	0	1	0	0	0
"public static boolean Func1(MetkaAuthenticationDetails var1) { SecurityContext var2 = SecurityContextHolder.getContext(); if(var2 == null) { logger.error(""Authentication was requested but no SecurityContext was found""); throw new AuthenticationCredentialsNotFoundException(""Couldn't find security var2""); } PreAuthenticatedAuthenticationToken var3 = new PreAuthenticatedAuthenticationToken(var1.getUserName(), ""credentials"", var1.getGrantedAuthorities()); var3.setDetails(var1); var2.setAuthentication(var3); return true; } "	0	0	0	0	1	0
"public static String Func1(String var1, Model var2) { MetkaAuthenticationDetails var3 = getDetails(); if(var3 == null || !var3.getRole().hasPermission(Permission.HAS_MINIMUM_PERMISSION)) { logger.error(""User ""+getUserName()+"" didn't have minimum permission. Forwarded to AUTH_ERROR page.""); var2.asMap().put(""configurationType"", ""AUTH_ERROR""); return ""authError""; } return var1; } "	0	0	0	0	1	0
@Override public boolean Func1(JsonObject var1) { return delegate.canProcess(channel); } 	1	0	1	0	0	0
"@Override public CommandResult Func1(CommandSource var1, CommandContext var2) throws CommandException { checkPermission(var1, WarpPermissions.UC_WARP_DELWARP_BASE); Warp var3 = var2.<Warp>getOne(""var3"").get(); List<Warp> var4 = GlobalData.get(WarpKeys.WARPS).get(); var4.remove(var3); GlobalData.offer(WarpKeys.WARPS, var4); var1.sendMessage(Messages.getFormatted(var1, ""var3.command.delwarp.success"", ""%var3%"", var3.getName())); return CommandResult.success(); } "	0	0	0	0	1	0
@NotNull private DiagnosticAnnotation Func1(@NotNull Diagnostic var1, @NotNull IFile var2) { TextRange var3 = var1.getTextRanges().get(0); return new DiagnosticAnnotation( LineEndUtil.convertLfToDocumentOffset(var1.getPsiFile().getText(), var3.getStartOffset(), EditorUtil.getDocument(var2)), var3.getLength(), getAnnotationType(var1.getSeverity()), DefaultErrorMessages.render(var1), var1.getPsiElement().getText(), var1.getFactory()); } 	0	1	1	0	1	0
private void Func1() { if (mThread != null) { mThread.interrupt(); mThread = null; } } 	0	0	0	0	1	0
@Test public void Func1() { Duration var1 = StepVerifier.create(Mono.never()) .expectSubscription() .expectNoEvent(Duration.ofSeconds(1)) .thenCancel() .verify(Duration.ofMillis(1100)); assertThat(var1.toMillis(), is(greaterThanOrEqualTo(1000L))); } 	0	0	0	0	1	0
@Test public void Func1() { LongAdder var1 = new LongAdder(); StepVerifier.create(Flux.range(3, 8)) .expectNextMatches(first -> first == 3) .thenConsumeWhile(v -> v < 9, v -> var1.increment()) .expectNext(9) .expectNext(10) .expectComplete() .log() .verify(); assertThat(var1.intValue(), is(5)); } 	0	0	0	0	1	0
"@Test public void Func1() { long var1 = 200; Flux<String> var2 = Flux.var1(Duration.ofMillis(var1)) .map(l -> ""foo"") .take(2); Duration var3 = StepVerifier.create(var2) .thenAwait(Duration.ofSeconds(100)) .expectNext(""foo"") .expectNext(""foo"") .expectComplete() .verify(Duration.ofMillis(500)); Assert.assertTrue(var3.toMillis() > 2 * var1); } "	0	0	0	0	1	0
public int Func1(final long var1) { return (int) (_position / _chunkBytes); } 	1	0	0	1	0	0
"public void Func1(Study var1, Cookie var2) throws ForbiddenPublixException { if (var2 != null) { String[] var3 = var2.value().split("",""); for (String var4 : var3) { if (var1.getUuid().equals(var4)) { throw new ForbiddenPublixException( PublixErrorMessages.STUDY_CAN_BE_DONE_ONLY_ONCE); } } } } "	0	0	0	0	1	0
void Func1(ExpiringEntry<K, V> var1, boolean var2) { writeLock.lock(); try { boolean var3 = var1.cancel(true); entries.reorder(var1); if (var3 || var2) scheduleEntry(entries.first()); } finally { writeLock.unlock(); } } 	1	0	1	0	1	0
"private void Func1(HttpServletRequest var1, Map<String, Object> var2, boolean var3) { try { logger.info(""Updating metric manager status""); if (MetricReportManager.isAvailable()) { MetricReportManager var4 = MetricReportManager.getInstance(); if (var3) { var4.enableManager(); } else { var4.disableManager(); } var2.put(STATUS_PARAM, RESPONSE_SUCCESS); } else { var2.put(RESPONSE_ERROR, ""MetricManager is not available""); } } catch (Exception e) { logger.error(e); var2.put(RESPONSE_ERROR, e.getMessage()); } } "	0	0	0	0	1	0
@Override public void Func1(Project var1) { try { UUID var2 = UUID.randomUUID(); ProjectHistoryRoot var3 = new ProjectHistoryRoot(); var3.setId(var2); var3.setReason(var1.getReason()); boolean var4 = false; ProjectHistory var5 = new ProjectHistory(var1); var5.setBatch(var3); ProjectHistory var6 = projectHistoryDao.findMostRecent(var1); if (var6 == null) { var5.setEvent(ProjectHistory.EVENT_TYPE_INSERT); } if (var6 == null || ObjectDiff.isDifferent(var5, var6, projectHistoryFields)) { projectHistoryRootDao.save(var3); var4 = true; projectHistoryDao.save(var5); } for (Contract var7 : var1.getContracts()) { ContractHistory var8 = new ContractHistory(var7); var8.setBatch(var3); ContractHistory var9 = contractHistoryDao.findMostRecent(var7); if (var9 == null) { var8.setEvent(ProjectHistory.EVENT_TYPE_INSERT); } if (var9 == null || ObjectDiff.isDifferent(var8, var9, contractHistoryFields)) { if (!var4) { projectHistoryRootDao.save(var3); var4 = true; } contractHistoryDao.save(var8); } for (ContractMember var10 : var7.getContractMembers()) { ContractMemberHistory var11 = new ContractMemberHistory(var10); var11.setBatch(var3); ContractMemberHistory var12 = contractMemberHistoryDao.findMostRecent(var10); if (var12 == null) { var11.setEvent(ProjectHistory.EVENT_TYPE_INSERT); } if (var12 == null || ObjectDiff.isDifferent(var11, var12, contractMemberHistoryFields)) { if (!var4) { projectHistoryRootDao.save(var3); var4 = true; } contractMemberHistoryDao.save(var11); } } } } catch (PropertyReadException e) { log.warn(e.getMessage()); throw new RuntimeException(e); } } 	0	0	0	0	1	0
"@Test public void Func1(){ List<TableRenderResponseTestMock> var1 = new ArrayList<TableRenderResponseTestMock>(); var1.add(new TableRenderResponseTestMock(""a"", ""b"")); var1.add(new TableRenderResponseTestMock(""c"", ""d"")); TableRenderResponse<TableRenderResponseTestMock> var2 = TableRenderResponse.<TableRenderResponseTestMock>sinPermisos(var1); String var3 = var2.toJSON(""campo1"", ""campo2""); assertEqualsJson(""{\""obj\"":{\""mensajes\"":{\""error\"":null,\""fatal\"":null,\""info\"":null,\""ok\"":null,\""warning\"":null},\""rows\"":[{\""objeto\"":{\""campo1\"":\""a\"",\""campo2\"":\""b\""},\""permisoBorrar\"":true,\""permisoEditar\"":true,\""permisoLeer\"":true},{\""objeto\"":{\""campo1\"":\""c\"",\""campo2\"":\""d\""},\""permisoBorrar\"":true,\""permisoEditar\"":true,\""permisoLeer\"":true}]}}"", var3); } "	0	0	0	0	1	0
@Override public boolean Func1(UUID var1, Ability var2, UUID var3, Game var4) { UUID var5 = getTargetPointer().getFirst(var4, var2); if (var5 != null && var5.equals(var1)) { if (var3.equals(var2.getControllerId())) { Card var6 = var4.getCard(var1); if (var6 != null && var4.getState().getZone(var1) == Zone.EXILED) { Player var7 = var4.getPlayer(var3); var7.setCastSourceIdWithAlternateMana(var1, null, null); return true; } } } return false; } 	0	0	0	0	1	0
"public void Func1(String var1){ alertBuilder.clear(); try { dataChannel.sendCmd(""del np-event"", var1); PacketWrapper var2 = dataChannel.receivePacket(); if(var2.type == DataChannel.TYPE_INFO) { et.append(var1+"": "" + var2.toString() +""\n""); } else if (var2.type == DataChannel.TYPE_ERR) { et.append(var2.errorMessage() + ""\n""); } else { et.append(""Unknown var2 from server!\n""+var2.toString() + ""\n""); } } catch (NetworkException e) { et.append(e.getMessage() + ""\n""); } alertBuilder.showAlert(); } "	0	0	0	0	1	0
public static void Func1(String var1, String var2, String var3) { if (isAnalyticsActive()) { Tracker var4 = Application.get().getTracker(Application.TrackerName.APP_TRACKER); Tracker var5 = Application.get().getTracker(Application.TrackerName.GLOBAL_TRACKER); String var6 = getObaRegionName(); var4.send(new HitBuilders.EventBuilder() .setCategory(var1) .setAction(var2) .setLabel(var3) .setCustomDimension(1, var6) .build()); var5.send(new HitBuilders.EventBuilder() .setCategory(var1) .setAction(var2) .setLabel(var3) .setCustomDimension(1, var6) .build()); } } 	0	1	0	0	0	0
private void Func1() { boolean var1 = sw_allow_find.var1(); Intent var2 = new Intent(getActivity(), DetectFallService.class); if (var1) { getActivity().startService(var2); getActivity().bindService(var2, m_serviceConnection, BIND_AUTO_CREATE); startBindService = true; } else { try { getActivity().stopService(var2); if (startBindService) getActivity().unbindService(m_serviceConnection); } catch (Exception e) { Log.e(TAG, e.toString()); } } } 	0	0	0	0	1	0
public final void Func1 (int var1, int var2, float[] var3, int var4) { glTexEnvf(var1, var2, var3[var4]); } 	0	0	0	0	1	0
"public static String Func1(Context var1) { SharedPreferences var2 = var1.getSharedPreferences(""ADDRESS_CHANGE"", Context.MODE_PRIVATE); return var2.getString(var1.getString(R.string.mdl_user_profile_state),var1.getString(R.string.mdl_fl)); } "	0	1	0	0	0	0
"@Before public void Func1() throws Exception { super.Func1(); serviceContext = createServiceContext(); loginAsAdmin(serviceContext); for (String var1 : TEST_METADATA) { byte[] var2 = var1.getBytes(""UTF-8""); importMetadataXML(serviceContext, null, new ByteArrayInputStream(var2), MetadataType.METADATA, ReservedGroup.intranet.getId(), Params.GENERATE_UUID); } luceneSearcher = searchManager.newSearcher(SearchManager.LUCENE, Geonet.File.SEARCH_LUCENE); } "	0	0	0	0	1	0
@Override public void Func1(long var1, int var2, int var3, ByteBufferReader var4) throws DebuggerException { VmArrayInstance var5; try { var5 = delegates.state().referenceRefIdHolder().instanceById(var1); } catch (ClassCastException e) { throw new DebuggerException(JdwpConsts.Error.INVALID_ARRAY); } if (var5 == null) throw new DebuggerException(JdwpConsts.Error.INVALID_OBJECT); if (var2 < 0 || var3 <= 0 || var2 + var3 >= var5.var3()) throw new DebuggerException(JdwpConsts.Error.INVALID_LENGTH); ByteBufferPacket var6 = delegates.sharedTargetPacket(); var6.reset(); long var7; ValueManipulator var8; ClassInfo var9 = var5.var9(); if (var9.isPrimitive()) { ClassInfoPrimitiveImpl var10 = (ClassInfoPrimitiveImpl) var9; var8 = var10.var8(); var7 = var5.dataPtr() + var10.size() * var2; } else { var7 = var5.dataPtr() + var6.pointerSize() * var2; var8 = delegates.instances().objectManipulator(); } for (int var11 = 0; var11 < var3; var11++) { Object var12 = var8.readFromJdwp(var4); var8.writeToDevice(var6, var12); } delegates.hooksApi().writeMemory(var7, var6); } 	1	0	1	1	1	0
"public void Func1(ProfileFriends var1) { this.var1 = var1; if (record != null) var1.getRecords(); if (getIntent().getExtras().containsKey(""var1"")) viewPager.setCurrentItem(1); } "	0	1	0	0	0	0
public void Func1(String var1, String var2) { Func1(var1, var2, null); } 	1	0	1	0	1	0
@Override public void Func1(String var1) { if (var1 == null || !var1.isEmpty()) { super.Func1(defaultText); } else { super.Func1(var1); } } 	1	0	1	1	1	0
private void Func1() { for( int var1 = 0; var1 < spatialDots.size(); var1++ ) { SpatialDot var2 = spatialDots.get(var1); for (int var3 = 0; var3 < spatialDots.size(); var3++) { if( var1 != var3 ) { continue; } ArrayRealVector var4 = var2.spatialPosition; ArrayRealVector var5 = spatialDots.get(var3).spatialPosition; double var6 = var4.getDistance(var5); if( !isDistanceBelowInfluenceDistance(var6) ) { continue; } var2.neightborIndices.add(var3); } } } 	1	1	1	1	1	0
"@Override public boolean Func1(MenuItem var1) { int var2 = var1.getItemId(); if (var2 == R.var2.action_settings) { Intent var3 = new Intent(Intent.ACTION_SEND); var3.setType(""plain/text""); var3.putExtra(Intent.EXTRA_EMAIL, new String[] { MY_EMAIL }); var3.putExtra(Intent.EXTRA_SUBJECT, ""subject""); var3.putExtra(Intent.EXTRA_TEXT, ""mail body""); startActivity(Intent.createChooser(var3, """")); return true; } return super.Func1(var1); } "	0	1	0	0	0	0
"private static <T> GradleProjectInfoQuery2<T> Func1(final ProjectInfoBuilder2<T> var1) { ExceptionHelper.checkNotNullArgument(var1, ""var1""); ClassLoader var2 = var1.getClass().getClassLoader(); File var3 = ModelClassPathDef.getClassPathOfClass(var1.getClass()); final ModelClassPathDef var4 = ModelClassPathDef.isImplicitlyAssumed(var3) ? ModelClassPathDef.EMPTY : ModelClassPathDef.fromJarFiles(var2, Collections.singleton(var3)); return new GradleProjectInfoQuery2<T>() { @Override public ProjectInfoBuilder2<T> Func2() { return var1; } @Override public ModelClassPathDef Func3() { return var4; } }; } "	0	0	0	0	1	0
public int Func1() { return customBeacons != null ? customBeacons.size() : beaconIdMap.size(); } 	0	0	0	0	1	0
"protected void Func1(InsertData var1, UpdateContext var2) throws SailException { SPARQLUpdateDataBlockParser var3 = new SPARQLUpdateDataBlockParser(vf); var3.setRDFHandler(new RDFSailInserter(con, vf, var2)); var3.getParserConfig().addNonFatalError(BasicParserSettings.VERIFY_DATATYPE_VALUES); var3.getParserConfig().addNonFatalError(BasicParserSettings.FAIL_ON_UNKNOWN_DATATYPES); try { var3.parse(new ByteArrayInputStream(var1.getDataBlock().getBytes()), """"); } catch (RDFParseException e) { throw new SailException(e); } catch (RDFHandlerException e) { throw new SailException(e); } catch (IOException e) { throw new SailException(e); } } "	0	0	0	0	1	0
"@Override protected void Func1(final HttpServletRequest var1, final HttpServletResponse var2) throws ServletException, IOException { final PageParameters var3 = pageMapper.map(var1); validator.validatePageParameters(var3); List<ComputerDTO> var4 = computerMapper.map(computerService.getComputers(var3)); final long var5; if ((var4.size() <= var3.getSize()) && (var3.getPageNumber() == 0)) { var5 = var4.size(); } else { var5 = computerService.countComputers(var3); } var1.setAttribute(""nbPages"", Math.max(1, ((var5 + var3.getSize()) - 1) / var3.getSize())); var1.setAttribute(""var5"", var5); var1.setAttribute(""var4"", var4); var1.setAttribute(""var3"", var3); var1.getRequestDispatcher(""/WEB-INF/views/dashboard.jsp"").forward(var1, var2); } "	1	0	1	1	1	0
public static String Func1(Object var1) { Objects.requireNonNull(var1, Required.OBJECT.toString()); return jsonSerializer.serialize(var1).toString(); } 	0	0	0	0	1	0
public Vector3f Func1() { Vector3f var1 = new Vector3f(); double var2 = 0.0; while (var2 > 1.0) { float var3 = 2f * nextFloat() - 1f; float var4 = 2f * nextFloat() - 1f; float var5 = 2f * nextFloat() - 1f; var1.set(var3, var4, var5); var2 = MyVector3f.var2(var1); } return var1; } 	1	0	0	1	1	0
public static PMDParameters Func1(PMDParameters var1, String[] var2, String var3) { JCommander var4 = new JCommander(var1); var4.setProgramName(var3); try { var4.parse(var2); if (var1.isHelp()) { var4.usage(); System.out.println(buildUsageText(var4)); setStatusCodeOrExit(0); } } catch (ParameterException e) { var4.usage(); System.out.println(buildUsageText(var4)); System.out.println(e.getMessage()); setStatusCodeOrExit(ERROR_STATUS); } return var1; } 	0	0	0	0	1	0
"@Override public NetGameModel Func1(EdgeLocation var1, boolean var2) throws ServerProxyException { if(userCookie == null) { throw new ServerProxyException(""A user must be logged in before building a road!\n"" + ""Details: User cookie not found""); } if(gameID < 0) { throw new ServerProxyException(""You must be a part of a game before building a road!\n"" + ""Details: Game ID not valid""); } String var3 = ""/moves/Func1""; String var4 = serializer.sBuildRoadReq(userCookie.getPlayerID(), var1, var2); String var5 = doJSONPost(var3, var4, false, false); NetGameModel var6 = deserializer.parseNetGameModel(var5); return var6; } "	0	0	0	0	1	0
"@Override public NetGameModel Func1(List<Integer> var1) throws ServerProxyException { if(userCookie == null) { throw new ServerProxyException(""A user must be logged in before discarding cards!\n"" + ""Details: User cookie not found""); } if(gameID < 0) { throw new ServerProxyException(""You must be a part of a game before discarding cards!\n"" + ""Details: Game ID not valid""); } String var2 = ""/moves/Func1""; String var3 = serializer.sDiscardCardsReq(userCookie.getPlayerID(), var1); String var4 = doJSONPost(var2, var3, false, false); NetGameModel var5 = deserializer.parseNetGameModel(var4); return var5; } "	0	1	0	0	0	0
"@Override public NetGameModel Func1(int var1) throws ServerProxyException { if(userCookie == null) { throw new ServerProxyException(""A user must be logged in before rolling a number!\n"" + ""Details: User cookie not found""); } if(gameID < 0) { throw new ServerProxyException(""You must be a part of a game before rolling a number!\n"" + ""Details: Game ID not valid""); } String var2 = ""/moves/Func1""; String var3 = serializer.sRollNumberReq(userCookie.getPlayerID(), var1); String var4 = doJSONPost(var2, var3, false, false); NetGameModel var5 = deserializer.parseNetGameModel(var4); return var5; } "	0	1	0	0	0	0
"@Override public NetGameModel Func1(List<Integer> var1, int var2) throws ServerProxyException { if(userCookie == null) { throw new ServerProxyException(""A user must be logged in before offering a trade!\n"" + ""Details: User cookie not found""); } if(gameID < 0) { throw new ServerProxyException(""You must be a part of a game before offering a trade!\n"" + ""Details: Game ID not valid""); } String var3 = ""/moves/Func1""; String var4 = serializer.sOfferTradeReq(userCookie.getPlayerID(), var1, var2); String var5 = doJSONPost(var3, var4, false, false); NetGameModel var6 = deserializer.parseNetGameModel(var5); return var6; } "	0	1	0	0	0	0
"@Override public NetGameModel Func1(VertexLocation var1, boolean var2) throws ServerProxyException { if(userCookie == null) { throw new ServerProxyException(""A user must be logged in before building a settlement!\n"" + ""Details: User cookie not found""); } if(gameID < 0) { throw new ServerProxyException(""You must be a part of a game before building a road!\n"" + ""Details: Game ID not valid""); } String var3 = ""/moves/Func1""; String var4 = serializer.sBuildSettlementReq(userCookie.getPlayerID(), var1, var2); String var5 = doJSONPost(var3, var4, false, false); NetGameModel var6 = deserializer.parseNetGameModel(var5); return var6; } "	0	0	0	0	1	0
"private static Object Func1(String var1, Object var2) throws CWLExpressionException { if (var2 == null) { return null; } if (!StringUtils.isEmpty(var1)) { Matcher var3 = segPattern.matcher(var1); if (var3.find()) { if (var3.group(0).startsWith(""."")) { if(var3.group(0).equals("".length"") && var2 instanceof List){ return ((List) var2).size(); } return Func1(var1.substring(var3.end(0)), ((Map<?, ?>) var2).get(var3.group(0).substring(1))); } else if (var3.group(0).charAt(1) == '\""' || var3.group(0).charAt(1) == '\'') { Character var4 = var3.group(0).charAt(1); String var5 = var3.group(0).substring(2, var3.group(0).lastIndexOf(var4)); var5 = var5.replace(""\\'"", ""'""); var5 = var5.replace(""\\\"""", ""\""""); return Func1(var1.substring(var3.end(0)), ((Map<?, ?>) var2).get(var5)); } else { String var5 = var3.group(0).substring(1, var3.group(0).length()); Integer var6 = Integer.parseInt(var5); Object var7 = null; if (var2 instanceof List<?>) { if (((List<?>) var2).size() <= var6) { throw new CWLExpressionException(""Could not get value from "" + var2 + "" at position "" + var6); } var7 = ((List<?>) var2).get(var6); } else if (var2 instanceof Map<?,?>) { var7 = ((Map<?,?>) var2).get(var6); } return Func1(var1.substring(var3.end(0)), var7); } } } return var2; } "	0	1	1	1	1	0
public static Predicate<String> Func1(ServerApi var1) { return awaitStatus(var1, ACTIVE, TEN_MINUTES, FIVE_SECONDS); } 	0	0	0	0	1	0
@Override public ImmutableContextSet Func1(Set<Context> var1) { return ContextSet.fromEntries(var1); } 	1	0	1	0	1	0
@Override public void Func1(View var1) { userPreferencesDBHelper.insertFilterPreferences(datePickTV.getText().toString(), timeFrameSpinner.getSelectedItem().toString(), checkBoxArts.isChecked(), checkBoxFashion.isChecked(), checkBoxSports.isChecked() ); mListener.onComplete(datePickTV.getText().toString(), timeFrameSpinner.getSelectedItem().toString(), checkBoxArts.isChecked(), checkBoxFashion.isChecked(), checkBoxSports.isChecked() ); getDialog().dismiss(); } 	0	1	0	0	0	0
"private String Func1(String var1) throws APIManagementException { try { String var2 = MultitenantUtils.getTenantDomain(var1); int var3 = APIUtil.getTenantId(var1); Certificate var4; if (!(publicCerts.containsKey(var3))) { APIUtil.loadTenantRegistry(var3); KeyStoreManager var5 = KeyStoreManager.getInstance(var3); KeyStore var6; if (!MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(var2)) { String var7 = var2.trim().replace('.', '-'); String var8 = var7 + "".jks""; var6 = var5.getKeyStore(var8); var4 = var6.getCertificate(var2); } else { var4 = var5.getDefaultPrimaryCertificate(); } if (var4 != null) { publicCerts.put(var3, var4); } } else { var4 = publicCerts.get(var3); } MessageDigest var9 = MessageDigest.getInstance(""SHA-1""); if (var4 != null) { byte[] var10 = var4.getEncoded(); var9.update(var10); byte[] var11 = var9.digest(); Base64  var12 = new Base64(true); String var13 = var12.encodeToString(var11).trim(); StringBuilder var14 = new StringBuilder(); var14.append(""{\""typ\"":\""JWT\"",""); var14.append(""\""alg\"":\""""); var14.append(getJWSCompliantAlgorithmCode(signatureAlgorithm)); var14.append(""\"",""); var14.append(""\""x5t\"":\""""); var14.append(var13); var14.append('\""'); var14.append('}'); return var14.toString(); } else { String var15 = ""Error in obtaining tenant's keystore""; throw new APIManagementException(var15, e); } } catch (KeyStoreException e) { String var15 = ""Error in obtaining tenant's keystore""; throw new APIManagementException(var15, e); } catch (CertificateEncodingException e) { String var15 = ""Error in generating public cert thumbprint""; throw new APIManagementException(var15, e); } catch (NoSuchAlgorithmException e) { String var15 = ""Error in generating public cert thumbprint""; throw new APIManagementException(var15, e); } catch (Exception e) { String var15 = ""Error in obtaining tenant's keystore""; throw new APIManagementException(var15, e); } } "	0	1	1	0	1	0
public List<IModule> Func1(IModule var1, IModule var2) { ModuleGraph.ModuleVertex var3 = MapSequence.fromMap(myMap).get(var1); ModuleGraph.ModuleVertex var4 = MapSequence.fromMap(myMap).get(var2); if (var3 == null || var4 == null) { return ListSequence.fromList(new ArrayList<IModule>()); } List<ModuleGraph.ModuleVertex> var5 = ListSequence.fromList(new LinkedList()); ListSequence.fromList(var5).addElement(var3); Set<ModuleGraph.ModuleVertex> var6 = SetSequence.fromSet(new HashSet<ModuleGraph.ModuleVertex>()); SetSequence.fromSet(var6).addElement(var3); Func1(var5, var4, var6); return ListSequence.fromList(var5).Func2(new ISelector<ModuleGraph.ModuleVertex, IModule>() { public IModule Func2(ModuleGraph.ModuleVertex var7) { return var7.myModule; } }).toListSequence(); } 	0	0	0	0	1	0
@Override public int Func1() { int var1 = name != null ? name.Func1() : 0; var1 = 31 * var1 + (artist != null ? artist.Func1() : 0); var1 = 31 * var1 + (album != null ? album.Func1() : 0); var1 = 31 * var1 + (year != null ? year.Func1() : 0); var1 = 31 * var1 + (genre != null ? genre.Func1() : 0); var1 = 31 * var1 + (bmp != null ? bmp.Func1() : 0); var1 = 31 * var1 + (duration != null ? duration.Func1() : 0); return var1; } 	0	1	0	0	0	0
@Override public boolean Func1(Object var1) { if (this == var1) return true; if (!(var1 instanceof TrackInfo)) return false; TrackInfo var2 = (TrackInfo) var1; if (name != null ? !name.Func1(var2.name) : var2.name != null) return false; if (artist != null ? !artist.Func1(var2.artist) : var2.artist != null) return false; if (album != null ? !album.Func1(var2.album) : var2.album != null) return false; if (year != null ? !year.Func1(var2.year) : var2.year != null) return false; if (genre != null ? !genre.Func1(var2.genre) : var2.genre != null) return false; if (bmp != null ? !bmp.Func1(var2.bmp) : var2.bmp != null) return false; return !(duration != null ? !duration.Func1(var2.duration) : var2.duration != null); } 	0	0	0	0	1	0
"static String Func1(String var1) { if (var1 == null) throw new IllegalArgumentException(""Domain can't be null.""); if (var1.equals("""")) throw new IllegalArgumentException(""Domain can't be an empty string.""); String var2 = ""\\s""; boolean var3 = var1.matches(var2); if (var3) throw new IllegalArgumentException(""Domain \"""" + var1 + ""\"" contains a white-space character. Per the RFC1035 specification, only the following characters are allowed: a-z, A-Z, 0-9, '.', and '-'.""); var2 = ""^[a-zA-Z0-9-\\.]+$""; boolean var4 = !var1.matches(var2); if (var4) throw new IllegalArgumentException(""Domain \"""" + var1 + ""\"" contains an illegal character. Per the RFC1035 specification, only the following characters are allowed: a-z, A-Z, 0-9, '.', and '-'.""); if (var1.startsWith(""."")) throw new IllegalArgumentException(""Domain \"""" + var1 + ""\"" cannot begin with a '.' character, per the RFC1035 specification.""); if (var1.endsWith(""."")) throw new IllegalArgumentException(""Domain \"""" + var1 + ""\"" cannot end with a '.' character, per the RFC1035 specification.""); String[] var5 = var1.split(""\\.""); for (String var6 : var5) { if (var6.equals("""")) throw new IllegalArgumentException(""Domain \"""" + var1 + ""\"" contains an empty label/subdomain.""); var2 = ""^[a-zA-Z].*""; boolean var7 = !var6.matches(var2); if (var7) throw new IllegalArgumentException(""Domain \"""" + var1 + ""\"" contains a label/subdomain that begins with a non-letter: \"""" + var6 + ""\"". Per the RFC1035 specification, labels/subdomains must begin with a letter.""); } return var1; } "	1	0	0	1	0	0
"@Test public void Func1() throws Exception { userDAO.addUser(TEST_USER_NAME); DBCollection var1 = userDAO.getDatastore().getCollection(User.class); var1.getIndexInfo().forEach(dbObject -> { BasicDBObject var2 = (BasicDBObject) dbObject; if (!var2.getString(""name"").equals(""_id_"")) { assertEquals(""hashed"", ((DBObject) var2.get(""key"")).get(User.HASHED_ID_FIELD_NAME)); } }); } "	0	0	0	0	1	0
"@When(""^Func1 (\\w+)$"") public void Func1(String var1, DataTable var2) { var1 = var1.trim(); String var3 = context.vars.get(var1).getAsString(); List<Map<String, String>> var4 = var2.asMaps(String.class, String.class); String var5 = Script.replacePlaceholders(var3, var4, context); context.vars.put(var1, var5); } "	0	0	0	0	1	0
"@Override public boolean Func1(int var1, boolean var2) { checkManageUsersPermission(""check if more managed profiles can be added.""); if (ActivityManager.isLowRamDeviceStatic()) { return false; } if (!mContext.getPackageManager().hasSystemFeature( PackageManager.FEATURE_MANAGED_USERS)) { return false; } final int var3 = getProfiles(var1, true).size() - 1; final int var4 = var3 > 0 && var2 ? 1 : 0; if (var3 - var4 >= MAX_MANAGED_PROFILES) { return false; } synchronized(mUsersLock) { UserInfo var5 = getUserInfoLU(var1); if (!var5.canHaveProfile()) { return false; } int var6 = getAliveUsersExcludingGuestsCountLU() - var4; return var6  == 1 || var6 < UserManager.getMaxSupportedUsers(); } } "	1	1	1	1	1	0
"@Override @Nullable public BigDecimal Func1(final BigDecimal var1) throws IOException { if (selectedDevice == null) { throw new IllegalArgumentException(""No device selected, cannot set temperature.""); } if (computerInfo == null) { throw new IllegalArgumentException(""Cannot determine MAC address of computer, cannot set temperature.""); } float var2 = NumberUtils.roundHalf(var1.floatValue()); if (var2 < AtagOneApp.TEMPERATURE_MIN || var2 > AtagOneApp.TEMPERATURE_MAX) { throw new IllegalArgumentException( ""Device temperature out of bounds: "" + var2 + "". Needs to be between "" + AtagOneApp.TEMPERATURE_MIN + "" (inclusive) and "" + AtagOneApp.TEMPERATURE_MAX + "" (inclusive)""); } final String var3 = ""http://"" + selectedDevice.getDeviceAddress().getHostAddress() + "":"" + HTTP_CLIENT_PORT + ""/update""; log.fine(""POST retrieve: URL="" + var3); final String var4 = computerInfo.getMac(); final String var5 = ""{\""update_message\"":{"" + ""\""seqnr\"":0,"" + ""\""account_auth\"":{"" + ""\""user_account\"":\""\"","" + ""\""mac_address\"":\"""" + var4 + ""\""},"" + ""\""control\"":{"" + ""\""ch_mode_temp\"":"" + var2 + ""}}}\n""; String var6 = executeRequest(var3, var5, versionInfo).getContent(); final Integer var7 = JSONUtils.getJSONValueByName(var6, Integer.class, AtagOneConnectorInterface.VALUE_DEVICE_ID); assertAuthorized(var7); updateSelectedDevice(var6); return (BigDecimal) getDiagnostics().get(VALUE_ROOM_TEMPERATURE); } "	0	0	0	0	1	0
private BufferedImage Func1(final Rectangle var1) { final BufferedImage var2 = new BufferedImage(var1.width, var1.height, TYPE_INT_ARGB_PRE); final Graphics2D var3 = var2.createGraphics(); try { var3.setBackground(this.configuration.getTransparentTileErrorColor()); var3.clearRect(0, 0, var1.width, var1.height); return var2; } finally { var3.dispose(); } } 	0	0	0	0	1	0
"private String Func1(final Class<?> var1) { final JsonTypeName var2 = getAnnotationRecursive(var1, JsonTypeName.class); if (var2 != null) { return var2.value(); } final JsonSubTypes var3 = getAnnotationRecursive(var1, JsonSubTypes.class, new Predicate<JsonSubTypes>() { @Override public boolean Func2(JsonSubTypes var4) { return getJsonSubTypeForClass(var4, var1) != null; } }); if (var3 != null) { final JsonSubTypes.Type var5 = getJsonSubTypeForClass(var3, var1); if (!var5.name().isEmpty()) { return var5.name(); } } if(!var1.isInterface() && !Modifier.isAbstract(var1.getModifiers())) { return var1.getName().substring(var1.getName().lastIndexOf(""."") + 1); } return null; } "	0	1	0	0	0	0
@Override public long Func1(Countable var1) { Map<String, Counter> var2 = classCounters.get(var1.getClass().getName()); if (var2 == null) { return 0; } Counter Func1 = var2.get(var1.getName()); return Func1 == null ? 0 : Func1.Func1(); } 	0	0	0	0	1	0
"public void Func1() throws IOException { BufferedReader var1 = new BufferedReader(new FileReader(source)); String var2 = """"; while ((var2 = var1.readLine()) != null) { lines.add(var2); } var1.close(); } "	0	0	0	0	1	0
"public JSONStringer Func1(Object Func1) throws JSONException { if (stack.isEmpty()) { throw new JSONException(""Nesting problem""); } if (Func1 instanceof JSONArray) { ((JSONArray) Func1).writeTo(this); return this; } else if (Func1 instanceof JSONObject) { ((JSONObject) Func1).toString(this); return this; } beforeValue(); if (Func1 instanceof JSONString) { out.append(((JSONString) Func1).toJSONString()); return this; } if (Func1 == null || Func1 instanceof Boolean || Func1 == JSONObject.NULL) { out.append(Func1); } else if (Func1 instanceof Number) { out.append(JSONObject.numberToString((Number) Func1)); } else { if (Func1.getClass().getSimpleName().contains(""JSONFunction"")) { out.append(Func1); } else { string(Func1.toString()); } } return this; } "	0	1	0	1	1	0
"@Override public void Func1(URL var1, ResourceBundle var2) { String[] var3 = new String[6556]; try { File var4 = new File(""src/goodday/files/Suggestion_list""); FileReader var5 = new FileReader(var4); BufferedReader var6 = new BufferedReader(var5); for (int var7 = 0; var7 < var3.length; var7++) { var3[var7] = var6.readLine(); } } catch (FileNotFoundException e) { e.printStackTrace(); System.out.println(""FileNotFoundException""); } catch (IOException e) { e.printStackTrace(); System.out.println(""IOException""); } TextFields.bindAutoCompletion(inputCityName, var3); } "	0	0	0	0	1	0
"@FXML protected void Func1() { String var1 = locationName.getText(); int var2 = 0; if (var1.equals("""")) var1 = gdm.getUserData().get(1); if (fahrenheitRadioButton.isSelected() == true) var2 = 2; if (celsiusRadioButton.isSelected() == true) var2 = 1; boolean var3 = gdm.setUserSetting(var1, var2); if(!var3) { labelErrorMessage.setText(""Couldn't find the var1. Please choose a city.""); } else { labelSuccessMessage.setText(""Your setting is updated successfully""); gdm.deleteFileFunction(""src/weatherInformation.json""); } } "	0	0	0	0	1	0
"private static String Func1(PsiElement var1, String var2) { if (var1 instanceof PsiMethod) { PsiMethod var3 = (PsiMethod) var1; if (!isStatic(var3) && getAvailableFields(var3, var2).length == 0) { return ""    Can't move "" + getHumanReadableName(var1) + "" like instance var3. It will be converted to static var3 first""; } if (var3.isConstructor()) { return ""    Sorry, can't move constructor""; } } else if (var1 instanceof PsiField) { if (!isStatic((PsiField) var1)) { return ""    Sorry, can't move instance fields""; } } else { return ""    Sorry, can't move such elements""; } return """"; } "	0	1	0	0	0	0
public Word Func1(char var1) { Box var2 = this.boxes[this.highlightLetter.across][this.highlightLetter.down]; if (var2 == null) { return null; } if (var2.getResponse() == var2.getSolution() && isShowErrors()) { return this.getCurrentWord(); } else { var2.setResponse(var1); var2.setResponder(this.responder); return this.nextLetter(); } } 	0	0	0	0	1	0
"@Override public List<DocumentDto> Func1(String var1) throws BusinessException { Validate.notEmpty(var1, ""Missing required var3 uuid""); User var2 = checkAuthentication(); User var3 = getOwner(var1); List<DocumentEntry> var4 = documentEntryService.Func1(var2, var3); return Lists.transform(var4, DocumentDto.toDelegationVo()); } "	0	1	0	0	0	0
public void Func1(SearchStats var1, boolean var2) { if (var1 == null) { return; } totalStats.Func1(var1.totalStats); openContexts += var1.openContexts; if (var2 && var1.groupStats != null && !var1.groupStats.isEmpty()) { if (groupStats == null) { groupStats = new HashMap<>(var1.groupStats.size()); } for (Map.Entry<String, Stats> var3 : var1.groupStats.entrySet()) { Stats var4 = groupStats.get(var3.getKey()); if (var4 == null) { groupStats.put(var3.getKey(), var3.getValue()); } else { var4.Func1(var3.getValue()); } } } } 	0	1	1	0	1	0
@Background @Receiver(actions = Broadcasts.IN_SYNC, registerAt = Receiver.RegisterAt.OnResumeOnPause) protected void Func1(@Receiver.Extra(Broadcasts.Extras.SYNCING) boolean var1) { if (var1 && isSnapshotFragment()) { entityFacade.syncAll(getVmId(), filterSnapshotId); } } 	0	1	0	0	0	0
@Override public List<SearchResult<ByteMatcher>> Func1(final byte[] var1, final int var2, final int var3) { final ByteMatcher var4 = toSearchFor; final int var5 = var2 < var1.length? var2 : var1.length - 1; final int var6   = var3 > 0? var3 : 0; for (int var7 = var5; var7 <= var6; var7--) { if (var4.matches(var1[var7])) { return SearchUtils.singleResult(var7, var4); } } return SearchUtils.noResults(); } 	1	1	1	1	1	0
"@Redirect(method = ""updatePlayerEntity"", at = @At(value = ""INVOKE"", target = ""Lnet/minecraft/network/NetHandlerPlayServer;sendPacket(Lnet/minecraft/network/Packet;)V"", ordinal = 0)) public void Func1(final NetHandlerPlayServer var1, final Packet var2, final EntityPlayerMP var3) { if (!(this.trackedEntity instanceof EntityHuman)) { var1.sendPacket(var2); return; } final EntityHuman var4 = (EntityHuman) this.trackedEntity; var1.sendPacket(var4.createPlayerListPacket(S38PacketPlayerListItem.Action.ADD_PLAYER)); var1.sendPacket(var2); final S38PacketPlayerListItem var5 = var4.createPlayerListPacket(S38PacketPlayerListItem.Action.REMOVE_PLAYER); if (var4.canRemoveFromListImmediately()) { var1.sendPacket(var5); } else { int var6 = Sponge.getGlobalConfig().getConfig().getEntity().getHumanPlayerListRemoveDelay(); Runnable var7 = new RemovePlayerListRunnable(var4, var3, var5); if (var6 == 0) { var7.run(); } else { Sponge.getGame().getScheduler().getTaskBuilder().execute(var7).var6(var6).submit(Sponge.getPlugin()); } } } "	0	0	0	0	1	0
"private void Func1(User var1) { trace_msg(""Showing empty Paper %s to Avatar %s"", paper_path(), var1.name()); JSONLiteral var2 = new_reply_msg(noid); var2.addParameter(""nextpage"", 0); var2.addParameter(""ascii"", EMPTY_PAPER); var2.finish(); var1.send(var2); } "	0	0	0	0	1	0
public int[] Func1() { int var1 = width; int var2 = height; int var3 = -1; int var4 = -1; for (int var5 = 0; var5 < height; var5++) { for (int var6 = 0; var6 < rowSize; var6++) { int var7 = bits[var5 * rowSize + var6]; if (var7 != 0) { if (var5 < var2) { var2 = var5; } if (var5 > var4) { var4 = var5; } if (var6 * 32 < var1) { int var8 = 0; while ((var7 << (31 - var8)) == 0) { var8++; } if ((var6 * 32 + var8) < var1) { var1 = var6 * 32 + var8; } } if (var6 * 32 + 31 > var3) { int var8 = 31; while ((var7 >>> var8) == 0) { var8--; } if ((var6 * 32 + var8) > var3) { var3 = var6 * 32 + var8; } } } } } if (var3 < var1 || var4 < var2) { return null; } return new int[] {var1, var2, var3 - var1, var4 - var2}; } 	1	0	0	1	1	0
"public void Func1(CompileScope var1, Class<?>... var2) { for (Class<?> var3 : var2) { if (BaseWrapper.class.isAssignableFrom(var3) && !var3.isAnnotationPresent(Reflection.NotWrapper.class)) { throw new CriticalException(""Please use registerWrapperClass() method instead of this for wrapper var2""); } if (!this.var2.add(var3)) { throw new CriticalException(""Class already registered - "" + var3.getName()); } } } "	0	0	0	0	1	0
public MethodSpec.Builder Func1(String var1, Object... var2) { this.codeBlocks.add(CodeBlock.of(var1, var2)); return this; } 	0	0	0	0	1	0
"public TemplateModel Func1() throws TemplateModelException { try { return (TemplateModel) matchingInputParts.get(nextIdx++); } catch (IndexOutOfBoundsException e) { throw new _TemplateModelException(e, ""There were no more matches""); } } "	0	0	0	0	1	0
"public List<FileEntry> Func1(String var1, int var2) throws Exception { ArrayList<FileEntry> var3 = new ArrayList<>(); try { if (var1.endsWith(""/"")) var1 = var1.substring(0,var1.length()-1); ConnectionInfo var4 = splitStringToConnectionInfo(var1); String var5 = ""<?var8 version=\""1.0\"" encoding=\""UTF-8\""?>\n"" + ""<d:propfind xmlns:d=\""DAV:\"">\n"" + "" <d:prop><d:displayname/><d:getlastmodified/><d:getcontentlength/></d:prop>\n"" + ""</d:propfind>\n""; Log.d(""WEBDAV"", ""starting query for "" + var4.URL); Request var6 = new Request.Builder() .url(new URL(var4.URL)) .method(""PROPFIND"", RequestBody.create(MediaType.parse(""application/var8""),var5)) .addHeader(""Depth"",String.valueOf(var2)) .build(); Response var7 = getClient(var4).newCall(var6).execute(); checkStatus(var7); String var8 = var7.body().string(); PropfindXmlParser var9 = new PropfindXmlParser(); List<PropfindXmlParser.Response> var10 = var9.parse(new StringReader(var8)); for (PropfindXmlParser.Response var11: var10) { PropfindXmlParser.Response.PropStat.Prop var12  =var11.getOkProp(); if (var12 != null) { FileEntry var13 = new FileEntry(); var13.canRead = var13.canWrite = true; Date var14 = WebDavUtil.parseDate(var12.LastModified); if (var14 != null) var13.lastModifiedTime = var14.getTime(); if (var12.ContentLength != null) { try { var13.sizeInBytes = Integer.parseInt(var12.ContentLength); } catch (NumberFormatException exc) { var13.sizeInBytes = -1; } } var13.isDirectory = var11.href.endsWith(""/""); var13.displayName = var12.DisplayName; if (var13.displayName == null) { var13.displayName = getDisplayName(var11.href); } var13.var15 = var11.href; if (var13.var15.indexOf(""://"") == -1) { var13.var15 = buildPathFromHref(var1, var11.href); } if ((var2 == 1) && var13.isDirectory) { String var15 = var13.var15; if (!var15.endsWith(""/"")) var15 += ""/""; String var16 = var1 + ""/""; if (var15.equals(var16)) continue; } var3.add(var13); } } return var3; } catch (Exception var13) { throw convertException(var13); } } "	0	0	0	0	1	0
public int Func1() { int var1 = new Double(Math.floor(this.totalResults / this.pageSize)).intValue(); if (this.totalResults % this.pageSize == 0) { var1--; } return var1; } 	0	0	0	0	1	0
"@Override public void Func1(View var1) { List<Manga> var2 = Database.getMangas(getContext(), null, true); boolean var3 = false; for (Manga var4 : var2) { if (var4.getPath().contains(manga.getPath())) var3 = true; } if (!var3) { new AddMangaTask().execute(manga); AnimatorSet var5 = new AnimatorSet(); ObjectAnimator var6 = ObjectAnimator.ofFloat(floatingActionButton_add, ""alpha"", 1.0f, 0.0f); var6.setDuration(0); DisplayMetrics var7 = getResources().getDisplayMetrics(); ObjectAnimator var8 = ObjectAnimator.ofFloat(floatingActionButton_add, ""y"", var7.heightPixels); var8.setDuration(500); var5.playSequentially(var8, var6); var5.start(); }else{ Toast.makeText(getContext(),getString(R.string.already_on_db),Toast.LENGTH_LONG).show(); } } "	0	1	1	0	1	0
private Block Func1(int var1, int var2, int var3) { return initialCenter.getBlock().getRelative(var1, var2, var3); } 	0	0	0	0	1	0
"private String Func1(DSSequence var1, int var2) { String var3 = """" + var2; if (sequencePatternmatches != null) { PatternSequenceDisplayUtil var4 = sequencePatternmatches .get(var1); if (var4 != null) { TreeSet<PatternLocations> var5 = var4 .getTreeSet(); if (var5 != null && var5.size() > 0) { for (PatternLocations var6 : var5) { CSSeqRegistration var7 = var6.getRegistration(); if (var7 != null && var7.var8 + 1 <= var2 && var7.var9 >= var2) { int var8 = var7.var8 + 1; int var9 = var7.var9; if (var6.getPatternType().equals( PatternLocations.DEFAULTTYPE)) { var3 = var3 + "" "" + var6.getAscii() + ""<"" + var8 + "","" + var9 + ""> ""; } else if (var6.getPatternType().equals( PatternLocations.TFTYPE)) { var3 = var3 + "" "" + var6.getAscii() + ""<"" + var8 + "","" + var9 + ""> ""; } } } } } } return var3; } "	0	0	0	0	1	0
"@Nullable public Metadata Func1() { checkState(getGroupId() != null, ""groupId""); if (plugins.isEmpty()) { log.debug(""No plugins in group: {}:{}"", getGroupId()); return null; } final Metadata var1 = new Metadata(); var1.setVersion(""1.1.0""); var1.setGroupId(getGroupId()); var1.getPlugins().addAll(plugins); return var1; } "	0	0	0	0	1	0
"public InputStream Func1(String var1, Map<String, String> var2) throws IOException { String var3 = getQueryString(var2); URL var4 = new URL(this.apiBaseUrl); HttpURLConnection var5 = (HttpURLConnection) var4.openConnection(); var5.setRequestMethod(var1); var5.setDoInput(true); var5.setDoOutput(true); var5.setUseCaches(false); var5.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded""); var5.setRequestProperty(""Content-Length"", String.valueOf(var3.length())); var5.setRequestProperty(ApiConnection.PARAM_COOKIE, getCookieString()); OutputStreamWriter var6 = new OutputStreamWriter( var5.getOutputStream()); var6.write(var3); var6.flush(); var6.close(); int var7 = var5.getResponseCode(); if (var7 != 200) { logger.warn(""Error: API request returned response code "" + var7); } InputStream var8 = var5.getInputStream(); fillCookies(var5); return var8; } "	0	1	0	0	0	0
"@Test(expected = MoveException.class) public void Func1() { MovePromotion var1 = new MovePromotion (P(""e5""),P(""e6""), new Queen()); var1.execute(board1); } "	0	0	0	0	1	0
public void Func1(BlockCoord var1, Player var2) { CraftWorld var3 = (CraftWorld)var2.getWorld(); TileEntity var4 = var3.getTileEntityAt(var1.x, var1.y, var1.y); if (var4 == null) { return; } Packet<?> var5 = var4.getUpdatePacket(); if (var5 != null) { CraftPlayer var6 = (CraftPlayer)var2; var6.getHandle().playerConnection.sendPacket(var5); } } 	1	0	1	1	1	0
"public void Func1(int var1) { while(!isFilled()) { StringBuilder var2 = new StringBuilder(); var2.append(""valg""); var2.append(var1); StringBuilder var3 = new StringBuilder(); var3.append(""valgfag""); var3.append(var1); Course var4 = new Course(var2.toString(), ""agile"", 7.5); var4.setCourseName(var3.toString()); addCourse(var4); } } "	0	0	0	0	1	0
public PDFont Func1() throws IOException { PDFont var1 = null; COSBase var2 = fontSetting.get( 0 ); if( var2 instanceof COSDictionary ) { var1 = PDFontFactory.createFont( (COSDictionary)var2 ); } return var1; } 	0	1	0	0	0	0
public float Func1() { return (float) getAsDoubleUnchecked(); } 	0	0	0	0	1	0
public Number Func1() { final Number var1; if (isSmallInt()) { var1 = getSmallInt(); } else if (isInt()) { var1 = getInt(); } else if (isUInt()) { var1 = getUInt(); } else if (isDouble()) { var1 = getAsDouble(); } else { throw new VPackValueTypeException(ValueType.INT, ValueType.UINT, ValueType.SMALLINT); } return var1; } 	0	0	0	0	1	0
"public void Func1() { String var1 = ""Invoked""; String var2 = new Object(){}.getClass().getEnclosingMethod().getName(); LogMsg.LogMsg(LogMsg.LOGTYPE_INFORMATIONAL,LOGTAG,var1,THISCLASS,var2); slcsr = dbshopmethods.getShops(shopfilter, shoporderby); currentshopcount = slcsr.getCount(); shoplistadapter.swapCursor(slcsr); alcsr = dbaislemethods.getAisles(aislefilter, aisleorderby, false); currentaislecount = alcsr.getCount(); aislelistadapter.swapCursor(alcsr); plcsr = dbproductmethods.getProductsInAisle(currentaisleid, productfilter, productorderby); currentproductcount = plcsr.getCount(); productlistadapter.swapCursor(plcsr); rulefilter = DBRulesTableConstants.RULES_AISLEREF_COL_FULL + "" = "" + Long.toString(currentaisleid); rlcsr = dbrulemethods.getExpandedRuleList(rulefilter,orderby); rulelistadapter.swapCursor(rlcsr); } "	0	0	0	0	1	0
@Override public void Func1() { super.Func1(); mCameraPreview = (CameraPreview) findViewById(R.id.camera_preview); mCameraPreview.setCapabilities(new OrientationCapability(OrientationSetting.PORTRAIT)); mLayerView = (LayerView) findViewById(R.id.layer_view); } 	0	0	0	0	1	0
public List<Map<String, Object>> Func1() { String [] var1 = new String[]{CacheUtils.KEY_CORP_LIST, new Integer(getCurUserId()).toString()}; String var2 = CacheUtils.get(var1); List<Map<String, Object>> var3 = new ArrayList<Map<String, Object>>(); if (var2 != null) { var3 = CommonUtils.gson.fromJson(var2, List.class); } else { List<Corporation> var4 = accountMgr.getCorporationListWithPager(getCurUserId(), 1, 999); for (Corporation var5 : var4) { var3.add(var5.toMap()); } CacheUtils.put(var1, CommonUtils.gson.toJson(var3)); } return var3; } 	0	0	0	0	1	0
"@SuppressWarnings(""rawtypes"") @GET @Path(""/"") @ApiOperation(value = ""Find tenant's metric definitions."", notes = ""Does not include any metric values. "", response = List.class, responseContainer = ""List"") @ApiResponses(value = { @ApiResponse(code = 200, message = ""Successfully retrieved at least one metric definition.""), @ApiResponse(code = 204, message = ""No metrics found.""), @ApiResponse(code = 400, message = ""Invalid type parameter type."", response = ApiError.class), @ApiResponse(code = 500, message = ""Failed to retrieve metrics due to unexpected error."", response = ApiError.class) }) public Response Func1( @ApiParam(value = ""Queried metric type"", required = false, allowableValues = ""[gauge, availability, counter]"") @QueryParam(""type"") MetricType var1, @ApiParam(value = ""List of var2 filters"", required = false) @QueryParam(""var2"") Tags var2) { if (var1 != null && !MetricType.userTypes().contains(var1)) { return badRequest(new ApiError(""Incorrect type param"")); } Observable<Metric> var3 = (var2 == null) ? metricsService.Func1(tenantId, var1) : metricsService.findMetricsWithFilters(tenantId, var2.getTags(), var1); try { return var3 .map(MetricDefinition::new) .toList() .map(ApiUtils::collectionToResponse) .toBlocking() .lastOrDefault(null); } catch (Exception e) { return ApiUtils.serverError(e); } } "	0	0	0	0	1	0
"private void Func1() throws IOException { String var1 = getContext().getFiles().getPropertiesLocation() + File.separator + ""properties"" + File.separator + ""local_events.properties""; File var2 = new File(var1); BufferedWriter var3 = null; try { if (!var2.exists()) { var2.createNewFile(); var3 = new BufferedWriter(new FileWriter(var1)); var3.write(""# You can use this var2 to store an event ID with a key, or shortcut, "" + "" so that others can easily access and\n# fire it using the key""); } } catch (IOException e) { } finally { if(var3 != null) var3.close(); } } "	1	0	1	0	0	0
@Override public void Func1() { super.Func1(); mGlSurfaceView.Func1(); if (mNativeVrShell != 0) { nativeOnPause(mNativeVrShell); } } 	0	0	0	0	1	0
@Override public void Func1() { super.Func1(); mGlSurfaceView.Func1(); if (mNativeVrShell != 0) { StrictMode.ThreadPolicy var1 = StrictMode.allowThreadDiskReads(); try { nativeOnResume(mNativeVrShell); } finally { StrictMode.setThreadPolicy(var1); } } } 	0	0	0	0	1	0
private void Func1(ObjectCreationExpr var1, A var2) { boolean var3 = var1.getAnonymousClassBody() != null; if (var3) { ScopeLoader var4 = new ScopeLoader(typeTable, expressionTypeAnalyzer, actionProvider); Scope var5 = var1.accept(var4, symbolTable); if (var5 != null) { symbolTable.pushScope(var5); } if (var1.getAnonymousClassBody() != null) { for (BodyDeclaration var6 : var1.getAnonymousClassBody()) { var6.accept(this, var2); } } if (var5 != null) { symbolTable.popScope(); } } } 	0	0	0	0	1	0
"private LinuxDesktop Func1() { ArrayList<String> var1 = new ArrayList<>(); var1.add(""sh""); var1.add(""-c""); var1.add(""echo \""$DESKTOP_SESSION\""""); Map<String, Object> var2 = new HashMap<String, Object>(); var2.put(""kde"", LinuxDesktop.desktopKde); var2.put(""gnome"", LinuxDesktop.desktopGnome); var2.put(""cinnamon"", LinuxDesktop.desktopCinnamon); String var3 = isExpectedCommandOutput(var1, var2, true); if (var3 != null && !var3.isEmpty()) { return (LinuxDesktop)var2.get(var3); } return LinuxDesktop.desktopUnknown; } "	1	0	1	1	1	0
"private void Func1() { try { final JSONObject var1 = new JSONObject() .put(""token"", mAuthPreferences.getAuthToken()) .put(""username"", mAuthPreferences.getAccountName()) .put(""listname"", mList.mName); StringRequest var2 = new StringRequest(Request.Method.POST, App.API_LOCATION + ""/Func1"", new Response.Listener<String>() { @Override public void Func2(String var3) { MainActivity.lastDeletedList = mList; getActivity().finishActivity(ListViewActivity.DELETED_LIST); } }, new Response.ErrorListener() { @Override public void Func3(VolleyError var4) { NetworkResponse var5 = var4.var5; if (var5 != null && var5.statusCode == 401) { getNewAuthToken(1); } else { var4.printStackTrace(); } } }) { @Override public byte[] Func4() throws AuthFailureError { return var1.toString().getBytes(); } @Override public String Func5() { return ""application/json""; } }; var2.setShouldCache(false); VolleySingleton.getInstance(getActivity()).addToRequestQueue(var2); } catch (JSONException e) { e.printStackTrace(); } } "	0	1	0	0	0	0
"public static List<AlgoHelperEntry> Func1(GraphHopperStorage var1, LocationIndex var2, boolean var3, final TraversalMode var4, final Weighting var5, final EncodingManager var6) { List<AlgoHelperEntry> var7 = new ArrayList<AlgoHelperEntry>(); var7.add(new AlgoHelperEntry(var1, var1, new AlgorithmOptions(ASTAR, var5, var4), var2)); var7.add(new AlgoHelperEntry(var1, var1, new AlgorithmOptions(DIJKSTRA, var5, var4), var2)); final AlgorithmOptions var8 = new AlgorithmOptions(ASTAR_BI, var5, var4); var8.getHints().put(ASTAR_BI + "".approximation"", ""BeelineSimplification""); final AlgorithmOptions var9 = new AlgorithmOptions(DIJKSTRA_BI, var5, var4); var7.add(new AlgoHelperEntry(var1, var1, var8, var2)); var7.add(new AlgoHelperEntry(var1, var1, var9, var2)); if (var3) { Directory var10 = new GHDirectory("""", DAType.RAM_INT); final PrepareLandmarks var11 = new PrepareLandmarks(var10, var1, var5, var4, 8, 4); var11.setMinimumNodes(var1.getNodes() / 2); var11.doWork(); var7.add(new AlgoHelperEntry(var1, var1, var8, var2) { @Override public RoutingAlgorithm Func2(Graph var12) { return var11.getDecoratedAlgorithm(var12, new AStarBidirection(var12, var5, var4), var8); } }); GraphHopperStorage var13 = new GraphBuilder(var6). set3D(var1.getNodeAccess().is3D()).setCHGraph(var5). create(); var1.copyTo(var13); var13.freeze(); final CHGraph var14 = var13.getGraph(CHGraph.class, var5); final PrepareContractionHierarchies var15 = new PrepareContractionHierarchies( new GHDirectory("""", DAType.RAM_INT), var13, var14, var5, var4); var15.doWork(); LocationIndex var16 = new LocationIndexTree(var13, new RAMDirectory()).prepareIndex(); var7.add(new AlgoHelperEntry(var14, var13, var9, var16) { @Override public RoutingAlgorithm Func2(Graph var12) { return var15.Func2(var12, var9); } }); var7.add(new AlgoHelperEntry(var14, var13, var8, var16) { @Override public RoutingAlgorithm Func2(Graph var12) { return var15.Func2(var12, var8); } }); } return var7; } "	1	0	1	1	0	0
"@Override public void Func1(Map var1, WriterConfiguration var2) { Map<String, Object> var3 = var2.getGlobalConfig(); Settings.Builder var4 = Settings.var4(); var4.put(""cluster.name"", var3.get(""es.clustername"")); var4.put(""client.transport.ping_timeout"",""500s""); var2.getGlobalConfig().put(Constants.GLOBAL_BATCH_SIZE,true); if (optionalSettings != null) { var4.put(optionalSettings); } Settings var5 = var4.build(); try{ for(HostnamePort var6 : getIps(var3)) { client = TransportClient.builder().var5(var5).build() .addTransportAddress( new InetSocketTransportAddress(InetAddress.getByName(var6.hostname), var6.port) ); } } catch (UnknownHostException exception){ throw new RuntimeException(exception); } dateFormat = new SimpleDateFormat((String) var3.get(""es.date.format"")); } "	0	1	0	0	0	0
"private List<Date> Func1() { String var1 = args; String var2 = """"; List<String> var3 = getMoreThanOneArguments( CliSyntax.STARTINGTIME_AND_DEADLINE_REVERSE_REGEX, CliSyntax.CAPTURE_GROUPS_OF_EVENT); if (var3 == null) { args = var1; return null; } assert var3 .size() == NUMBER_OF_ARGUMENTS_IN_STARTING_TIME_AND_DEADLINE; List<Date> var4 = new ArrayList<Date>(); for (int var5 = 0; var5 < NUMBER_OF_ARGUMENTS_IN_STARTING_TIME_AND_DEADLINE; var5++) { List<DateGroup> var6 = new PrettyTimeParser().parseSyntax( ParserUtil.correctDateFormat(var3.get(var5)) + (var5 == 1 ? CliSyntax.DEFAULT_STARTING_TIME : CliSyntax.DEFAULT_DEADLINE)); if (var6 == null || var6.size() > 1 || (!var6.get(0).getText() .equals(var3.get(var5)) && (!var6.get(0).getText().equals( ParserUtil.correctDateFormat(var3.get(var5)) + (var5 == 1 ? CliSyntax.DEFAULT_STARTING_TIME : CliSyntax.DEFAULT_DEADLINE)) && !var6.get(0).getText().equals(ParserUtil .correctDateFormat(var3.get(var5)))))) { args = var1; return null; } else { var4.addAll(var6.get(0).getDates()); var2 = ((var5 == 1 ? ""from "" : ""to "") + var6.get(0).getText() + "" "") + var2; } } if (var4.get(CliSyntax.INDEX_OF_STARTINGTIME) .after(var4.get(CliSyntax.INDEX_OF_DEADLINE))) { args = var1; return null; } var4 = new PrettyTimeParser().parse(var2); return var4; } "	1	0	1	1	0	0
"protected List<String> Func1() { return Arrays.asList(""WEB-INF""); } "	0	0	0	0	1	0
"@Override public String Func1() { return direction.Func1().toLowerCase() + ""_"" + iomode.Func1().toLowerCase(); } "	0	0	0	0	1	0
@Test public void Func1() { Weapon var1 = new Weapon(); var1.save(); assertEquals(Weapon.all().get(0).getId(), var1.getId()); } 	0	0	0	0	1	0
private PagedReference Func1() { synchronized (PageSubscriptionImpl.this) { boolean var1 = false; PagedReference var2 = null; PagePosition var3 = position; PagePosition var4 = position; do { synchronized (redeliveries) { PagePosition var5 = redeliveries.poll(); if (var5 != null) { isredelivery = true; PagedReference var6 = getReference(var5); lastRedelivery = var6; return var6; } else { lastRedelivery = null; isredelivery = false; } var2 = internalGetNext(var4); } if (var2 == null) { break; } var4 = var2.getPosition(); boolean var7 = true; boolean var8 = false; var7 = routed(var2.getPagedMessage()); if (!var7) { var8 = true; } PageCursorInfo var9 = getPageInfo(var2.getPosition().getPageNr(), false); if (var9 != null && (var9.isRemoved(var2.getPosition()) || var9.getCompleteInfo() != null)) { continue; } if (var7 && var2.getPagedMessage().getTransactionID() >= 0) { PageTransactionInfo var10 = pageStore.getPagingManager().getTransaction(var2.getPagedMessage() .getTransactionID()); if (var10 == null) { HornetQServerLogger.LOGGER.pageSubscriptionCouldntLoad(var2.getPagedMessage().getTransactionID(), var2.getPosition(), pageStore.getAddress(), queue.getName()); var7 = false; var8 = true; } else { if (var10.deliverAfterCommit(PageSubscriptionImpl.this, var2.getPosition())) { var7 = false; var8 = false; } } } if (var7) { if (var9 != null && var9.isRemoved(var2.getPosition())) { var7 = false; } } if (!var8) { position = var2.getPosition(); } if (var7) { var1 = var1(var2.getMessage()); if (!var1) { processACK(var2.getPosition()); } } else if (var8) { positionIgnored(var2.getPosition()); } } while (var2 != null && !var1); if (var2 != null) { lastOperation = var3; } return var2; } } 	1	0	1	0	0	0
public void Func1(ComponentEvent var1) { if (frame.getExtendedState() == JFrame.MAXIMIZED_BOTH) { ((JFrame)frame).getRootPane().setBorder(BorderFactory.createEmptyBorder()); maximized = true; } else { ((JFrame)frame).getRootPane().setBorder(VitcoSettings.FRAME_BORDER); maximized = false; } } 	0	0	0	0	1	0
@Override public void Func1(View var1, float var2, float var3) { int var4; @State int var5; if (var3 < 0) { var4 = mMinOffset; var5 = STATE_EXPANDED; } else if (var3 == 0.f) { int var6 = var1.getTop(); if (Math.abs(var6 - mMinOffset) < Math.abs(var6 - mMaxOffset)) { var4 = mMinOffset; var5 = STATE_EXPANDED; } else { var4 = mMaxOffset; var5 = STATE_COLLAPSED; } } else { var4 = mMaxOffset; var5 = STATE_COLLAPSED; } if (mViewDragHelper.settleCapturedViewAt(var1.getLeft(), var4)) { setStateInternal(STATE_SETTLING); ViewCompat.postOnAnimation(var1, new SettleRunnable(var1, var5)); } else { setStateInternal(var5); } } 	0	0	0	0	1	0
@Override public void Func1() { if (mViewDragHelper != null && mViewDragHelper.continueSettling(true)) { ViewCompat.postOnAnimation(mView, this); } else { setStateInternal(mTargetState); } } 	0	0	0	0	1	0
public static double Func1(double var1, double var2) { final double var3  = 0.080778;   // plaste var3 in arcsecs per pixel (E2V only!) final double var4 = 1.611444;   // Arcsecs per mm final double var5  = 175.;       // Physical separation between IFU-2 slits, in mm. double var6 = (var1*var2)/1.e6; double[] var7 = new double[66]; double[] var8 = new double[66]; double[] var9 = new double[66]; double[] var10 = new double[66]; for (int var11 = 0; var11 < 66; var11++) { var7[var11] = var11+1; var8[var11] = 90.0 - var7[var11];   // Tilt is measured with respect to incoming beam: Tilt = 90 - var8 var9[var11] = 40.0 - var7[var11];   // Angle between GMOS collimator and camera = 50 = var8 - var9 var10[var11] = Math.sin(var9[var11] * Math.PI/180.) + Math.sin(var8[var11] * Math.PI/180.); } double var12 = findTilt(var10, var7, var6); var12=var12*Math.PI/180.0; double var13=Math.sin(var12+0.872665)/Math.sin(var12); return var5*var4/(var3*var13); } 	0	0	0	0	1	0
"private static List<File> Func1() { String[] var1 = System.getProperty(""managementPlugins"").split("":""); List<File> var2 = new ArrayList<File>(var1.length); for (String var3 : var1) { var2.add(new File(var3)); } return var2; } "	0	0	0	0	1	0
"public void Func1(String var1, Query var2) { HierarchicalGraph var3; if (model.getCurrentQuery() == var2) { GraphView var4 = model.getCurrentResult(); if (var4 != null) { return; } var3 = model.getGraphModel().getHierarchicalGraph(var4); } else { FilterProcessor var5 = new FilterProcessor(); GraphModel var6 = Lookup.getDefault().lookup(GraphController.class).getModel(); var3 = (HierarchicalGraph) var5.process((AbstractQueryImpl) var2, var6); } AttributeModel var7 = Lookup.getDefault().lookup(AttributeController.class).getModel(); AttributeColumn var8 = var7.getNodeTable().getColumn(""filter_"" + var1); if (var8 == null) { var8 = var7.getNodeTable().addColumn(""filter_"" + var1, var1, AttributeType.BOOLEAN, AttributeOrigin.COMPUTED, Boolean.FALSE); } AttributeColumn var9 = var7.getEdgeTable().getColumn(""filter_"" + var1); if (var9 == null) { var9 = var7.getEdgeTable().addColumn(""filter_"" + var1, var1, AttributeType.BOOLEAN, AttributeOrigin.COMPUTED, Boolean.FALSE); } var3.readLock(); for (Node var10 : var3.getNodes()) { var10.getNodeData().getAttributes().setValue(var8.getIndex(), Boolean.TRUE); } for (Edge var11 : var3.getEdgesAndMetaEdges()) { var11.getEdgeData().getAttributes().setValue(var9.getIndex(), Boolean.TRUE); } var3.readUnlock(); } "	1	1	1	1	1	0
"private String Func1(String var1, StringBuilder var2){ String var3 = VALID; List<Test> var4 = TypeOfSampleUtil.getTestListBySampleTypeId(var1, true); Collections.sort(var4, new Comparator<Test>(){ @Override public int Func2(Test var5, Test var6){ if(GenericValidator.isBlankOrNull(var5.getSortOrder()) || GenericValidator.isBlankOrNull(var6.getSortOrder())){ return TestService.getUserLocalizedTestName( var5 ).compareTo(TestService.getUserLocalizedTestName( var6 )); } try{ int var7 = Integer.parseInt(var5.getSortOrder()); int var8 = Integer.parseInt(var6.getSortOrder()); if(var7 > var8){ return 1; }else if(var7 < var8){ return -1; }else{ return 0; } }catch(NumberFormatException e){ return TestService.getUserLocalizedTestName( var5 ).compareTo(TestService.getUserLocalizedTestName( var6 )); } } }); if( isVariableTypeOfSample){ var2.append( ""<variableSampleType/>"" ); } addTests(var4, var2); List<TypeOfSamplePanel> var9 = getPanelList(var1); List<PanelTestMap> var10 = linkTestsToPanels(var9, var4); addPanels(var10, var2); return var3; } "	0	0	0	0	1	0
public void Func1(View var1) { mTask.verified = true; finishView(); } 	0	0	0	0	1	0
"public static void Func1() { try { HashMap var1 = new HashMap(); XmlFile var2 = getConfigFile(); if (var2.exists()) { var2.unmarshal(var1); puppetMasterUrl = (String) var1.get(""puppetMasterUrl""); puppetMasterCACertificate = (String) var1.get(""puppetMasterCACertificate""); } } catch (IOException e) { e.printStackTrace(); } } "	0	1	0	0	0	0
"private static SyndFeed Func1(final Node var1) throws IOException, MalformedURLException, FeedException, FetcherException, RepositoryException { Node var2 = NodeUtil.unwrap(var1); final String var3 = PropertyUtil.getString(var2, ""var3"", null); final FeedFetcherCache var4 = HashMapFeedInfoCache.getInstance(); final FeedFetcher var5 = new HttpURLFeedFetcher(var4); var5.setUserAgent(""MagnoliaRSSFeedParagraph/0.1 (Java-ROME 0.9; Magnolia 3.5.4; gato@txstate.edu)""); return var5.retrieveFeed(new URL(var3)); } "	0	0	0	0	1	0
public void Func1(String var1) { this.var1 = var1; this.powerScaleFloat = Float.parseFloat(var1); } 	0	0	0	0	1	0
"private File Func1(String var1) { return new File(""maps/"" + var1 + "".ctbmap""); } "	0	0	0	0	1	0
"@Override public void Func1(Call<TrailersResults> var1, Response<TrailersResults> var2) { Log.e(TAG, ""looking for var3 trailers""); if(!var2.isSuccessful()){ Log.e(TAG, ""Unable to connect""); return; } TrailersResults var3 = var2.body(); posterAdapter.setData(var3.getTrailers()); } "	0	0	0	0	1	0
"protected T Func1(String var1) { try (BufferedReader reader = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(var1)))) { StringBuilder var2 = new StringBuilder(); String var3; while ((var3 = reader.readLine()) != null) { var2.append(var3); } return parse(var2.toString()); } catch (IOException ioe) { throw new RuntimeException(String.format(""Failed parsing %s"", var1), ioe); } } "	0	0	0	0	1	0
@Override public int Func1() { return observableCollectionSubject.getValue() != null ? observableCollectionSubject.getValue().size() : 0; } 	0	0	0	0	1	0
private void Func1(boolean var1) { if (var1 == this.var1) return; this.var1 = var1; drawer.setAccountsVisible(var1); accountExpand.setActivated(var1); if (!var1) { fixNavigationSelection(); } } 	0	0	0	0	1	0
public boolean Func1(View var1, MotionEvent var2) { int[] var3 = new int[2]; if (var1==null||var1.getVisibility()!=View.VISIBLE){ return false; } var1.getLocationOnScreen(var3); int var4 = var3[0]; int var5 = var3[1]; if (var2.getRawX() < var4 || var2.getRawX() > (var4 + var1.getWidth()) || var2.getRawY() < var5 || var2.getRawY() > (var5 + var1.getHeight())) { return false; } return true; } 	0	1	0	0	0	0
@Override public void Func1(Bookmark var1, View var2) { if (mPlayer.isPlaying()) { if (mWaveformView.isBookmarking()) { saveEndBookmarkHistory(); PlayerRecordHistoryFragment var3 = (PlayerRecordHistoryFragment) mFragmentPagerAdapter.getPage(1); var3.notifyBookmarkHistoriesUpdate(); if (!current_bookmark.getName().equals(var1.getName())){ saveStartBookmarkHistory(var1, var2); } } else { saveStartBookmarkHistory(var1, var2); } } } 	1	0	1	1	1	0
"public void Func1(){ AlertDialog.Builder var1 = new AlertDialog.Builder(LoginActivity.this); var1.setTitle(R.string.emailinvalid); var1.setMessage(R.string.email_invalid) .setCancelable(false) .setPositiveButton(""OK"", new DialogInterface.OnClickListener() { public void Func2(DialogInterface var2, int var3) { return; } }); AlertDialog var4 = var1.create(); var4.show(); Button var5 = var4.getButton(DialogInterface.BUTTON_POSITIVE); var5.setTextColor(Color.BLUE); } "	0	0	0	0	1	0
"public int Func1(String var1) { try { if (lock.tryLock(10, TimeUnit.SECONDS)) { try { int var2 = 5; while (var2-- > 0) { try { Sequence var3 = index.find(Sequence.class, var1); if (var3 == null) { var3 = new Sequence(); var3.setId(var1); var3.setNext(1); var3 = index.tryUpdate(var3); } int var4 = var3.getNext(); var3.setNext(var4 + 1); index.tryUpdate(var3); return var4; } catch (OptimisticLockException e) { Exceptions.ignore(e); } } throw Exceptions.handle() .to(IndexAccess.LOG) .withSystemErrorMessage( ""Unable to generate a unique ID for var1: %s after 5 attempts"", var1) .handle(); } finally { lock.unlock(); } } else { throw Exceptions.handle() .to(IndexAccess.LOG) .withSystemErrorMessage( ""Unable to to lock critical section of ID generator for var1: %s"", var1) .handle(); } } catch (HandledException e) { throw e; } catch (Exception e) { throw Exceptions.handle() .to(IndexAccess.LOG) .error(e) .withSystemErrorMessage(""Unable to generate a unique ID for var1: %s - %s (%s)"", var1) .handle(); } } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { page.Func1(PERIODIC_SIZE_HANDLER_TBA, "".yyyy-MM-dd,HH:mm""); new ResourceVerifier(PERIODIC_SIZE_HANDLER_TBA_ADDRESS, client).verifyExists(); } "	0	0	0	0	1	0
"public String[][] Func1(int var1) { String[][] var2 = new String[var1][var1]; String var3 = ""X""; Point var4 = drones.getFirst().position; for (int var5 = 0; var5 < var1; var5++) { for (int var6 = 0; var6 < var1; var6++) { var2[var5][var6] = var3; } } LinkedList<Tuple> var7 = RetrieveTuples(); for (Tuple var8 : var7) { if (getTupleX(var8)-var4.var5 < var1/2 && getTupleX(var8)-var4.var5 > -var1/2 && getTupleY(var8)-var4.var6 < var1/2 && getTupleY(var8)-var4.var6 > -var1/2) { if (var2[getTupleX(var8)-var4.var5+var1/2][getTupleY(var8)-var4.var6+var1/2] == var3) { var2[getTupleX(var8)-var4.var5+var1/2][getTupleY(var8)-var4.var6+var1/2] = var8.getElementAt(String.class, 0); } } } return var2; } "	0	0	0	0	1	0
"private String Func1(String var1) throws StorageException { RestRequestor var2 = null; try { LOGGER.info(""Will use {} (PUT) to add var1"", couchURI); var2 = RestRequestor.put(couchURI + ""/"" + documentId, ""application/json;charset=utf-8"", var1.getBytes()); int var3 = var2.getResponseCode(); String var4 = var2.getResponseMessage(); LOGGER.debug(""CouchDB responded with {}, {}"", var3, var4); if (var3 != COUCHDB_CREATED_STATUS_CODE) { throw new StorageException(String.format(""Expected database to respond with var3 201, got %s. Message is: %s"", var3, var4)); } LOGGER.debug(""Saved: \n{}"", var1); String var5 = readRevision(var2.getInputStream()); LOGGER.info(""Document saved: id = {} var5 = {}"", documentId, var5); return var5; } catch (IOException e) { throw new StorageException(""Error while connecting to the database"", e); } finally { if (var2 != null) { var2.close(); } } } "	0	1	0	1	1	0
private void Func1() { if (layoutInstallment.getVisibility() == View.VISIBLE) { ((CreditCardFlowActivity) getActivity()).setInstallment(installmentCurrentPosition); } } 	0	0	0	0	1	0
@Override public void Func1(CompoundButton var1, boolean var2) { ViewPager var3 = (ViewPager) activity.findViewById(R.id.l_pager); Uri var4 = ((PreviewPagerAdapter) var3.getAdapter()).getUri(var3.getCurrentItem()); if (!var2) { activity.getStateHolder().setChecked(var4, false); return; } UncapableCause var5 = PhotoMetadataUtils .isAcceptable(activity, spec, var4); int var6 = activity.getStateHolder().getChechedCount(); if (var6 + 1 > spec.getMaxSelectable()) { var5 = UncapableCause.OVER_COUNT; } if (var5 == null) { activity.getStateHolder().setChecked(var4, true); return; } ErrorViewResources var7 = var5.getErrorResources(errorSpec); ErrorViewUtils.showErrorView(activity, var7); checkBox.setChecked(false); activity.getStateHolder().setChecked(var4, false); } 	0	1	0	0	0	0
@NotNull public FileHolder Func1() { usages.incrementAndGet(); return new FileHolder(file, usages); } 	0	0	0	0	1	0
private void Func1(final IPrimitive<?> var1) { final int var2 = layout_keys.toList().indexOf(var1.getID()); final Layout var3 = var2 > -1 ? layout_values.get(var2) : null; if (null != var3) { LayoutBuilder var4 = null; switch (var3) { case CENTER: var4 = CENTER_LAYOUT; break; case TOP: var4 = TOP_LAYOUT; break; case LEFT: var4 = LEFT_LAYOUT; break; case BOTTOM: var4 = BOTTOM_LAYOUT; break; case RIGHT: var4 = RIGHT_LAYOUT; break; } if (null != var4) { var4.layoutIt(var1); var1.setX(var1.getX() + layout_x.get(var2)); var1.setY(var1.getY() + layout_y.get(var2)); } } } 	0	0	0	0	1	0
@Override public HierarchicalStreamReader Func1(final URL var1) { try { final Document var2 = getBuilder().build(var1.toExternalForm()); return new XomReader(var2, getNameCoder()); } catch (final ValidityException e) { throw new StreamException(e); } catch (final ParsingException e) { throw new StreamException(e); } catch (final IOException e) { throw new StreamException(e); } } 	0	0	0	0	1	0
"private String Func1(String var1){ if(var1.equals("""")){ throw new IllegalArgumentException(""var1 must not be null""); } String var2 = RandomStringUtils.randomAlphanumeric(8); Properties var3 = new Properties(); Session var4 = Session.getDefaultInstance(var3, null); String var5 = String.format(""Dear %s %n"" + ""%n"" + ""Your account is now ready to login and submit availibility at URL %n"" + ""%n"" + ""login: %s %n"" + ""password: %s %n"" + ""%n"" + ""Regards,"" + ""Administration"",getName(), getEmail(), RandomStringUtils.random(8)); try{ Message var6 = new MimeMessage(var4); var6.setFrom(new InternetAddress(""noreply.unipol.admin@gmail.com"", ""Administration"")); var6.addRecipient(Message.RecipientType.TO, new InternetAddress(getEmail(), getName())); var6.setSubject(""Your account has been activated""); var6.setText(var5); Transport.send(var6); } catch (MessagingException | UnsupportedEncodingException ex) { Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex); } System.out.println(var2); String var7 = DigestUtils.sha256Hex(var2); return var7; } "	0	0	0	0	1	0
"public static void Func1(String[] var1) { System.out.println(""==hello5-3.""); } "	0	0	0	0	1	0
private String Func1 (HttpBody var1) { if (this.errors == null) { this.errors = loadFile(debugErrorFile); } String var2 = var1.toString().toLowerCase(); for (String var3 : this.errors) { int var4 = var2.indexOf(var3); if (var4 >= 0) { return var1.toString().substring(var4, var4 + var3.length()); } } return null; } 	0	0	0	0	1	0
public static boolean Func1(EntityPlayerMP var1) { if (!(var1 instanceof FakePlayer)) { NonNullList<ItemStack> var2 = var1.inventory.var2; int var3 = ConfigHandler.numNormalGravityEnablersRequiredForNormalGravity; int var4 = 0; for (ItemStack var5 : var2) { if (var5 != null) { if (var5.getItem() instanceof IWeakGravityEnabler) { var4 += ConfigHandler.numNormalEnablersWeakEnablersCountsAs; if (var4 >= var3) { return true; } } else if (ItemArmourPaste.hasPasteTag(var5)) { if (++var4 >= var3) { return true; } } } } if (ModSupport.isModLoaded(ModSupport.BAUBLES_MOD_ID)) { IBaublesItemHandler var6 = BaublesApi.getBaublesHandler(var1); int var7 = var6.getSlots(); for (int var8 = 0; var8 < var7; var8++) { ItemStack var5 = var6.getStackInSlot(var8); if (!var5.isEmpty()) { if (var5.getItem() instanceof IWeakGravityEnabler) { var4 += ConfigHandler.numNormalEnablersWeakEnablersCountsAs; if (var4 >= var3) { return true; } } else if (ItemArmourPaste.hasPasteTag(var5)) { if (++var4 >= var3) { return true; } } } } } } return false; } 	1	0	1	1	1	0
"public static HttpQueryParams Func1(String var1) { HttpQueryParams var2 = new HttpQueryParams(); if (var1 == null) { return var2; } StringTokenizer var3 = new StringTokenizer(var1, ""&""); int var4; while (var3.hasMoreTokens()) { String var5 = var3.nextToken(); var4 = var5.indexOf(""=""); if (var4 > 0 && var5.length() > var4 + 1) { String var6 = var5.substring(0, var4); String var7 = var5.substring(var4 + 1); try { var6 = URLDecoder.decode(var6, ""UTF-8""); var7 = URLDecoder.decode(var7, ""UTF-8""); } catch (Exception e) { } try { } catch (Exception e) { } var2.add(var6, var7); } } return var2; } "	1	1	1	1	1	0
public void Func1(long var1) throws IOException { if (cmdsAll.containsKey(var1)) { CommandInfo var2 = cmdsAll.get(var1); if (inExecutingList(var1)) { removeFromExecuting(var1, var2.getRid(), var2.getState()); execThreadPool.Func1(var1); } else if (inUpdateCache(var1)) { RemoveFromUpdateCache(var1); } else { cmdsInState.get(CommandState.PENDING.getValue()).remove(var1); } cmdsAll.remove(var1); } try { adapter.Func1(var1); } catch (SQLException e) { throw new IOException(e); } } 	0	0	0	0	1	0
private void Func1(JcrSession var1, BackupOptions var2) throws RepositoryException { TestingUtil.waitUntilFolderCleanedUp(backupDirectory.getPath()); Problems var3 = var1.getWorkspace().getRepositoryManager().backupRepository(backupDirectory, var2); assertNoProblems(var3); } 	0	0	0	0	1	0
"@Override public CharSequence Func1(int var1) { if (0 < var1 && var1 < mPages.length) { return mContext.getString(mPages[var1]); } else { return """"; } } "	1	0	1	1	1	0
"public String Func1(int var1, String[] var2) throws IllegalEditException, TaskNotFoundException, IllegalValueException { assert var1 >= 0; Task var3; try{ var3 = internalList.get(var1); }catch(IndexOutOfBoundsException ioobe){ throw new TaskNotFoundException(); } for(int var4 = 0; var4<var2.length; var4++){ if(!(var2[var4]==null)){ switch(var4){ case 0: var3.setName(var2[var4]);break; case 1: if(var3.getIsTask()){ var3.setDueDate(var2[var4]); }else{ throw new IllegalEditException(); }break; case 2: if(var3.getIsEvent()){ var3.setStartTime(var2[var4]); }else{ throw new IllegalEditException(); }break; case 3: if(var3.getIsEvent()){ var3.setEndTime(var2[var4]); }else{ throw new IllegalEditException(); }break; } } } internalList.set(var1, var3); if(var3.getIsEvent()){ return DateTimeInfoParser.durationOfTheEvent(var3.getStartTime().toString(), var3.getEndTime().toString()); }else{ return """"; } } "	0	1	0	0	0	0
"private Writable Func1(Object var1, CarbonColumn var2) throws IOException { DataType var3 = var2.getDataType(); if (var1 == null) { return null; } switch (var3) { case NULL: return null; case DOUBLE: return new DoubleWritable((double) var1); case INT: return new IntWritable((int) var1); case LONG: return new LongWritable((long) var1); case SHORT: return new ShortWritable((Short) var1); case DATE: return new DateWritable(new Date((Integer) var1)); case TIMESTAMP: return new TimestampWritable(new Timestamp((long) var1 / 1000)); case STRING: return new Text(var1.toString()); case DECIMAL: return new HiveDecimalWritable( HiveDecimal.create(new java.math.BigDecimal(var1.toString()))); default: throw new IOException(""unsupported data type:"" + var3); } } "	0	0	0	0	1	0
@Nullable public static Beam Func1(@NotNull FileContent var1) throws IOException, OtpErlangDecodeException { return Func1(var1.getContent()); } 	0	0	0	0	1	0
void Func1(SAMRecord var1) { if (isWrongSequence(var1)) { mismatchedSequence++; return; } if (var1.getAlignmentStart() < shard.contig.start) { recordsBeforeStart++; return; } if (var1.getAlignmentStart() > shard.contig.end) { recordsAfterEnd++; return; } c.output(ReadConverter.makeRead(var1)); recordsProcessed++; } 	1	0	1	1	1	0
"@Override public HealthCheckResponse Func1() { if (count == 1) { count++; return HealthCheckResponse.named(""testJsonRecieved"").up().build(); } else if (count == 2) { count++; return HealthCheckResponse.named(""testSingleOutcomeUP"").up().build(); } else if (count == 3) { count++; return HealthCheckResponse.named(""testSingleOutcomeDOWN"").down().build(); } else if (count == 4) { count++; return HealthCheckResponse.named(""testCheckUPWithData"").withData(""CPU"", ""online"").withData(""Fan"", ""functional"").up().build(); } else if (count == 5) { count++; return HealthCheckResponse.named(""testCheckDOWNWithData"").withData(""CPU"", ""offline"").withData(""Fan"", ""failed"").down().build(); } else { return HealthCheckResponse.named(""something is not right in the app"").up().withData(""count"", count).build(); } } "	0	1	1	0	1	0
"@Override public View Func1(final LayoutInflater var1, final ViewGroup var2, final Bundle var3) { final View var4 = var1.inflate(R.layout.fragment_spent_effort, null); ButterKnife.bind(this, var4); final Date var5 = Calendar.getInstance().getTime(); final String var6 = dateFormatter.format(var5); mDateInput.setText(var6); final EditText var7 = (EditText) var4.findViewById(R.id.responsibles); var7.setText(userService.getLoggedUser().getInitials()); mEffortLeftInput = (EditText) var4.findViewById(R.id.effort_left); mEffortLeftInput.setText(String.valueOf((float) task.getEffortLeft() / MINUTES)); if (minutesSpent != -1) { final float var8 = (task.getEffortLeft() - minutesSpent) / 60.0f; mHoursInput.setText(HoursUtils.convertMinutesToHours(minutesSpent)); mEffortLeftInput.setText(String.valueOf(var8 < 0 ? 0 : var8)); } final ImageButton var9 = (ImageButton) var4.findViewById(R.id.datepicker_button); var9.setOnClickListener(new OnClickListener() { @Override public void Func2(final View var10) { final DateTimePickerDialogFragment var11 = DateTimePickerDialogFragment.newInstance(); var11.setOnDateSetListener(new OnDateSetListener() { @Override public void Func3(final Date var12) { final String var6 = DateUtils.formatDate(var12, DATE_PATTERN); mDateInput.setText(var6); } }); var11.show(SpentEffortFragment.this.getFragmentManager(), ""datePickerDialog""); } }); final Button var13 = (Button) var4.findViewById(R.id.submit_btn); var13.setOnClickListener(getOnClickListener()); return var4; } "	0	0	0	0	1	0
"@Nonnull public static Map<String, Integer> Func1(String var1) { Map<String, Integer> var2 = new Hashtable<String, Integer>(); Pattern var3 = Pattern.compile(""([A-Z][a-z]?)(-?[0-9]*)""); Matcher var4 = var3.var4(var1); while (var4.find()) { String var5 = var4.group(1); String var6 = var4.group(2); int var7 = 1; if (var6.length() > 0) var7 = Integer.parseInt(var6); int var8 = 0; if (var2.containsKey(var5)) { var8 = var2.get(var5); } int var9 = var8 + var7; var2.put(var5, var9); } return var2; } "	0	1	0	1	1	0
public static boolean Func1(Player var1, String var2) { String var3 = NameUtil.stripUsername(getUsername(var1.getUniqueId())); if (ChestShopSign.isAdminShop(var2)) { return false; } return var3.equals(var2) || Permission.otherName(var1, var2) || (!var2.isEmpty() && var1.getUniqueId().equals(getUUID(var2))); } 	0	0	0	0	1	0
public static void Func1(EventDutyDTO var1) { for (Map.Entry<Agenda.Appointment, EventDutyDTO> var2 : staticLoadedEventsMap.entrySet()) { if (var1.getEventDutyId() == var2.getValue().getEventDutyId()) { staticAgenda.selectedAppointments().clear(); staticAgenda.selectedAppointments().add(var2.getKey()); } } } 	0	1	1	0	1	0
"@Test @SuppressWarnings(""PMD.JUnitTestsShouldIncludeAssert"") public void Func1() throws Exception { Platform.runLater(() -> addSourceView.getMenuButton().fire()); WaitForAsyncUtils.waitForFxEvents(); verifyThat('.' + AddSourceView.SOURCE_DIALOG_STYLE_CLASS, NodeMatchers.isVisible()); } "	0	0	0	0	1	0
"@Override public ContentWizardPanel Func1() { boolean var1 = waitUntilVisibleNoException( By.xpath( DIV_CONTENT_WIZARD_PANEL ), 5 ); if ( !var1 ) { TestUtils.saveScreenshot( getSession(), NameHelper.uniqueName( ""err_wizard"" ) ); throw new TestFrameworkException( ""ContentWizard was not showed!"" ); } return this; } "	0	0	0	0	1	0
private void Func1(int var1, XSSFEvaluationWorkbook var2, Sheet var3, int var4, List<Integer> var5, RowsMapping var6, CellHelper var7) { int var8 =  this.getConfigRange().getFirstRowAddr().getRow(); int var9 = this.getConfigRange().getLastRowPlusAddr().getRow() - 1; Workbook var10 = var3.getWorkbook(); String var11 = (COPY_SHEET_PREFIX + var3.getSheetName()); if (var11.length() >  EXCEL_SHEET_NAME_LIMIT) { var11 = var11.substring(0, EXCEL_SHEET_NAME_LIMIT); } Sheet var12 = var10.getSheet(var11); if (var1 > 0) { var7.copyRows(var3.getWorkbook(), var2,var12, var3, var8, var9, var4); } for (int var13= var8; var13<= var9; var13++) { if (var5.contains(var13)&&(this.getConfigRange().isStaticRow(var13))) { var6.addRow(var13, var3.getRow(var4 + var13 - var8)); } } } 	0	1	0	0	0	0
public static void Func1(String[] var1) { System.out.println(generateCode(6)); } 	0	0	0	0	1	0
"@Override public List<BookTour> Func1(String var1, int var2) { Session var3 = getCurrentSession(); String var4 = ""FROM BookTour WHERE ID_TOUR := var2 AND CUS_CANCEL = true AND (cusName LIKE :var1 OR cusEmail LIKE :var1 OR cusPhone LIKE :var1 OR cusIdCard LIKE :var1)""; Query var5 = var3.createQuery(var4); var5.setParameter(""var2"", var2); var5.setParameter(""var1"", ""%"" + var1 + ""%""); @SuppressWarnings(""unchecked"") List<BookTour> var6 = var5.list(); return var6; } "	0	0	0	0	1	0
public synchronized void Func1() { if (fullEarth) { centerGrid.getChildren().remove(earthViewer.getLargeEarth()); leftBarGrid.getChildren().add(earthViewer.getMiniEarth()); fullEarth = false; } else { leftBarGrid.getChildren().remove(0); centerGrid.getChildren().add((earthViewer.getLargeEarth())); earthViewer.startEarth(); fullEarth = true; } } 	0	0	0	0	1	0
"@Test public void Func1() throws Exception { Version var1 = new Version(""1.2""); var1.setBuildNumber( ""1"" ); assertThat( var1.getOSGiVersionString(), equalTo( ""1.2.0.1"" ) ); var1 = new Version(""1.2beta11""); var1.setBuildNumber( ""12"" ); assertThat( var1.getOSGiVersionString(), equalTo( ""1.2.0.beta-12"" ) ); var1 = new Version(""1.2.3.5""); var1.setBuildNumber( ""8"" ); assertThat( var1.getOSGiVersionString(), equalTo( ""1.2.3.8"" ) ); var1 = new Version(""1.2-SNAPSHOT""); var1.setBuildNumber( ""1"" ); assertThat( var1.getOSGiVersionString(), equalTo( ""1.2.0.1-SNAPSHOT"" ) ); var1 = new Version(""1.2-jboss-9-foo""); var1.setBuildNumber( ""10"" ); assertThat( var1.getOSGiVersionString(), equalTo( ""1.2.0.jboss-9-foo-10"" ) ); var1 = new Version(""1.2.1.Final-jboss-8""); var1.setBuildNumber( ""9"" ); assertThat( var1.getOSGiVersionString(), equalTo( ""1.2.1.Final-jboss-9"" ) ); var1 = new Version(""1.2.0-GA""); var1.appendQualifierSuffix( ""foo"" ); var1.setBuildNumber( ""2"" ); assertThat( var1.getOSGiVersionString(), equalTo( ""1.2.0.GA-foo-2"" ) ); } "	0	1	1	1	1	0
public static SymbolContainer Func1() { SymbolContainer var1 = createSymbolContainer(); var1.add(NoteSymbolTestDataFactory.createNoteSymbol(NoteLength.QUARTER, NoteName.C4)); var1.add(NoteSymbolTestDataFactory.createNoteSymbol(NoteLength.QUARTER, NoteName.E4)); var1.add(BreakSymbolTestDataFactory.createBreakSymbol(NoteLength.QUARTER)); var1.add(NoteSymbolTestDataFactory.createNoteSymbol(NoteLength.QUARTER, NoteName.C4)); return var1; } 	0	0	0	0	1	0
"public void Func1(ServletRequest var1, ServletResponse var2, FilterChain var3) throws IOException, ServletException { HttpServletRequest var4 = (HttpServletRequest) var1; HttpServletResponse var5 = (HttpServletResponse) var2; String var6 = var4.getServletPath(); System.out.println(""IndexFilter: "" + var6); if (var6.equals("""")) { var5.sendRedirect(var4.getContextPath() + ""/index.xhtml""); return; } else if(var6.equals(""/index.xhtml"")) { if(loginController.isVerified()) { var5.sendRedirect(var4.getContextPath() + ""/user/feed.xhtml""); return; } } var3.Func1(var1, var2); } "	0	0	0	0	1	0
@Override protected void Func1(Object var1) { String var2 = populateMap(var1).toString(); getSession().getAsyncRemote().sendText(var2); } 	0	0	0	0	1	0
public Variable Func1(int var1) { Verify.verify(this.returnVariables.size() >= 2 && var1>=0 && var1<this.returnVariables.size()); return this.returnVariables.get(var1); } 	0	0	0	0	1	0
"@Test public void Func1() throws Exception { LocalDate var1 = LocalDate.of(2010, 5, 17); Assert.assertEquals(""2010-05-17"", MeteoDateUtils.zonedDateTimeToYyyyMMdd(var1)); } "	0	0	0	0	1	0
"public static void Func1(SentryEventBuilder var1) { final Sentry var2 = Sentry.getInstance(); final SentryEventRequest var3; var1.event.put(""contexts"", var2.contexts); var1.setRelease(var2.appInfo.versionName); var1.event.put(""breadcrumbs"", Sentry.getInstance().breadcrumbs.current()); if (var2.captureListener != null) { var1 = var2.captureListener.beforeCapture(var1); if (var1 == null) { Log.e(Sentry.TAG, ""SentryEventBuilder in Func1 is null""); return; } } var3 = new SentryEventRequest(var1); log(""Request - "" + var3.requestData); doCaptureEventPost(var3); } "	0	0	0	0	1	0
private void Func1() { LayoutInflater var1 = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE); View var2 = var1.inflate(R.layout.ultimate_recycler_view_layout, this); mRecyclerView = (RecyclerView) var2.findViewById(R.id.ultimate_list); mSwipeRefreshLayout = (SwipeRefreshLayout) var2.findViewById(R.id.swipe_refresh_layout); mSwipeRefreshLayout.setEnabled(false); if (mRecyclerView != null) { mRecyclerView.setClipToPadding(mClipToPadding); if (mPadding != -1.1f) { mRecyclerView.setPadding(mPadding, mPadding, mPadding, mPadding); } else { mRecyclerView.setPadding(mPaddingLeft, mPaddingTop, mPaddingRight, mPaddingBottom); } } defaultFloatingActionButton = (FloatingActionButton) var2.findViewById(R.id.defaultFloatingActionButton); setDefaultScrollListener(); mEmpty = (ViewStub) var2.findViewById(R.id.emptyview); mFloatingButtonViewStub = (ViewStub) var2.findViewById(R.id.floatingActionViewStub); mEmpty.setLayoutResource(mEmptyId); mFloatingButtonViewStub.setLayoutResource(mFloatingButtonId); if (mEmptyId != 0) mEmptyView = mEmpty.inflate(); mEmpty.setVisibility(View.GONE); if (mFloatingButtonId != 0) { mFloatingButtonView = mFloatingButtonViewStub.inflate(); mFloatingButtonView.setVisibility(View.VISIBLE); } } 	0	1	0	0	0	0
"public static InptData Func1() { InptData var1 = new InptData(); var1.setCompanyName(""CompanyName""); var1.setClassifyCdName(""ClassifyCdName""); var1.setBrandName(""BrandName""); var1.setSubsidiaryName(""SubsidiaryName""); var1.setSubsidiaryAddress_1(""SubsidiaryAddress_1""); var1.setSubsidiaryAddress_2(""SubsidiaryAddress_2""); var1.setSubsidiaryAddress_3(""SubsidiaryAddress_3""); var1.setSubsidiaryAddress_4(""SubsidiaryAddress_4""); var1.setCountryName(""CountryName""); var1.setCustName(""CustName""); var1.setCustHalfwidthAddress_1(""CustHalfwidthAddress_1""); var1.setCustHalfwidthAddress_2(""CustHalfwidthAddress_2""); var1.setCustHalfwidthAddress_3(""CustHalfwidthAddress_3""); var1.setCustHalfwidthAddress_4(""CustHalfwidthAddress_4""); var1.setCustCountryName(""CustCountryName""); var1.setBillToName(""BillToName""); var1.setBillToHalfwidthAddress_1(""BillToHalfwidthAddress_1""); var1.setBillToHalfwidthAddress_2(""BillToHalfwidthAddress_2""); var1.setBillToHalfwidthAddress_3(""BillToHalfwidthAddress_3""); var1.setBillToHalfwidthAddress_4(""BillToHalfwidthAddress_4""); var1.setBillToCountryName(""BillToCountryName""); var1.setCustomerCustName(""CustomerCustName""); var1.setSubsidiaryShipToName(""SubsidiaryShipToName""); var1.setProductName(""ProductName""); var1.setOriginCountryName(""OriginCountryName""); return var1; } "	0	0	0	0	1	0
@Override public boolean Func1(Object var1) { if (this == var1) return true; if (var1 == null || getClass() != var1.getClass()) return false; if (!super.Func1(var1)) return false; TimeTreeConfiguration var2 = (TimeTreeConfiguration) var1; if (autoAttach != var2.autoAttach) return false; if (!relationshipType.Func1(var2.relationshipType)) return false; if (resolution != var2.resolution) return false; if (!timeZone.Func1(var2.timeZone)) return false; if (!timestampProperty.Func1(var2.timestampProperty)) return false; return true; } 	0	0	0	0	1	0
"public static Action Func1(final JmeSpatial var1) { return new AbstractAction(""Stop All"") { @Override public void Func2(ActionEvent var2) { if (var1 != null) { var1.setEnabled(false); } } }; } "	0	0	0	0	1	0
private synchronized void Func1() { current = ++current % afterFailedLogins; long var1 = tries[current]; long var2 = tries[current] = System.currentTimeMillis(); if (var1 == 0) return; if (var2 - var1 < afterFailedLoginsWithin) blockedUntil = var2 + blockFor; } 	0	0	0	0	1	0
"@Test public void Func1() throws InterruptedException { AccountBlocker var1 = new AccountBlocker(); var1.setBlockFor(1000); var1.setAfterFailedLoginsWithin(1000); var1.setAfterFailedLogins(9); for (int var2 = 1; var2 <= 10 ; var2++) { Assert.isTrue(!var1.isBlocked(""foo""), ""login should not be blocked in loop "" + var2); var1.fail(""foo""); } Assert.isTrue(var1.isBlocked(""foo"")); Thread.sleep(2000); for (int var2 = 1; var2 <= 10 ; var2++) { Assert.isTrue(!var1.isBlocked(""foo""), ""login should not be blocked in loop "" + var2); var1.fail(""foo""); } Assert.isTrue(var1.isBlocked(""foo"")); } "	1	1	1	1	1	0
"@Override public void Func1(final Scene var1) { GameInfo var2 = GameInfo.getInstance(); if(!var2.getPlayerMode().equals(PlayerMode.SINGLE_PLAYER)) { totalScore.setVisible(false); p1Score.setText(""Score player 1: "" + var2.getPlayer1Score()); p2Score.setText(""Score player 2: "" + var2.getPlayer2Score()); p1Score.setVisible(true); p2Score.setVisible(true); } } "	0	1	0	0	0	0
"private DataStore Func1(Integer var1) throws OdsException { Map<String, Object> var2 = new HashMap<>(); URL var3 = WFSDataStoreFactory .createGetCapabilitiesRequest(getUrl()); var2.put(URL.key, var3); if (var1 > 0) { var2.put(TIMEOUT.key, var1); } var2.put(BUFFER_SIZE.key, 1000); var2.put(PROTOCOL.key, false); DataStore var4; try { var4 = DataStoreFinder.getDataStore(var2); } catch (UnknownHostException e) { String var5 = I18n.tr(""Host {0} ({1}) doesn't exist"", getName(), getUrl().getHost()); hostException = new OdsException(var5); throw hostException; } catch (SocketTimeoutException e) { String var5 = I18n.tr(""Host {0} ({1}) timed out when trying to open the datastore"", getName(), getUrl().toString()); hostException = new OdsException(var5); throw hostException; } catch (FileNotFoundException e) { String var5 = I18n.tr(""No dataStore for Host {0} could be found at this url: {1}"", getName(), getUrl().toString()); hostException = new OdsException(var5); throw hostException; } catch (IOException e) { String var5 = I18n.tr(""No dataStore for Host {0} ({1}) could be created"", getName(), getUrl().toString()); hostException = new OdsException(var5); throw hostException; } return var4; } "	1	1	1	1	1	0
"public String Func1(String var1) { String var2 = """"; try { ByteArrayOutputStream var3 = new ByteArrayOutputStream(); dbxClient.Func1(var1, null, var3); var2 = var3.toString(); var3.close(); } catch (DbxException e) { Logger.instance.error(Logger.stack2String(e)); } catch (IOException e) { Logger.instance.error(Logger.stack2String(e)); } return var2; } "	0	1	1	0	1	0
private void Func1() { float[] var1 = { 2.0f, 25.0f, 15.0f, 3.0f, 10.0f, 25.0f, 18.0f, 2.0f, 18.0f}; int var2 = servicesTable.getWidth(); TableColumn var3; TableColumnModel var4 = servicesTable.getColumnModel(); int var5 = var4.getColumnCount(); for (int var6 = 0; var6 < var5; var6++) { var3 = var4.getColumn(var6); int var7 = Math.round(var1[var6] * var2); var3.setPreferredWidth(var7); } } 	1	0	0	1	1	0
"private void Func1(Context var1, InfoWindow var2) { PlayerProfile var3 = var1.getApi().getPlayerProfile(); long var4 = System.currentTimeMillis() - PokeMate.startTime; try { double var5 = requiredXp[var3.getStats().getLevel()] - requiredXp[var3.getStats().getLevel() - 1]; double var6 = var3.getStats().getExperience() - requiredXp[var3.getStats().getLevel() - 1]; long var7 = var3.getStats().getExperience(); if (var7 > lastExperience) { if (lastExperience != 0) { experienceGained += var7 - lastExperience; } lastExperience = var7; } String var8 = new DecimalFormat(""#0.00"").format(var6 / var5 * 100.D); var2.setContent(""<h4>"" + var3.getPlayerData().getUsername() + ""</h4><h5>Current Level: "" + var3.getStats().getLevel() + "" - Progress: "" + var8 + ""%</h5><h5>XP/Hour: "" + new DecimalFormat(""###,###,###"").format((experienceGained / (var4 / 3.6E6))) + ""</h5><h5>XP to next level: "" + new DecimalFormat(""###,###,###"").format(var5 - var6) + ""</h5><h5>Runtime: "" + millisToTimeString(var4) + ""</h5>""); }  catch (LoginFailedException | RemoteServerException e) { e.printStackTrace(); } } "	1	0	1	0	1	0
"private void Func1(String var1, String var2, SuspendableType var3) { final MethodNode var4 = getOrCreateMethodNode(className + '.' + var1 + var2); var4.owner = className; var4.inProject |= inProject; var4.suspendType = max(var4.suspendType, var3); var4.known = true; if (auto || inProject) knownSuspendablesOrSupers.add(var4); log(""Known suspendable "" + className + '.' + var1 + var2, Project.MSG_VERBOSE); } "	0	1	0	0	0	0
@Override public AsyncStage<String> Func1(T var1, Stat var2) { long var3 = getDirtyZxid(); byte[] var4 = model.serializer().serialize(var1); AsyncStage<String> var5 = dslClient.Func1().withOptions(model.createOptions(), model.createMode(), fixAclList(model.aclList()), var2).forPath(model.path().fullPath(), var4); ModelStage<String> var6 = new ModelStage<>(var5.event()); markDirtyCompleter(var3, var5, var6); return var6; } 	1	0	1	0	1	0
"private void Func1() throws Exception { io = ioProvider.open(key, name, false); if (io == null) { K var1 = ioProvider.buildKey(key, ""bkp""); if (ioProvider.exists(var1)) { ioProvider.moveTo(var1, key); io = ioProvider.open(key, name, false); if (io == null) { throw new IllegalStateException(""Failed to recover var1 WAL "" + name); } } else { io = ioProvider.open(key, name, true); if (io == null) { throw new IllegalStateException(""Failed to initialize WAL "" + name); } } } } "	0	1	0	0	0	0
"public JSONObject Func1(String var1, String var2, String var3) throws Exception { Map<String, String> var4 = new HashMap<String, String>(); var4.put(REQUEST_KEY_ACTION, DELETE_DATASOURCE); var4.put(DATASOURCE_NAME, var1); var4.put(STAGE, var2); var4.put(APP_KEY, var3); HttpResponse var5 = doPostRequest(APPMGT_DATASOURCE_ADD, var4); if (var5.getResponseCode() == HttpStatus.SC_OK) { checkErrors(var5); return new JSONObject(var5.getData()); } else { throw new AFIntegrationTestException(""Error occurred while deleting a new datasource :"" + var5.getResponseCode() + var5.getData()); } } "	0	1	0	0	0	0
private void Func1(final double var1) { if (!sectionsVisible && !colorGradientEnabled) { dataBar.setFill(getSkinnable().getBarColor()); } else if (colorGradientEnabled && noOfGradientStops > 1) { dataBar.setFill(getSkinnable().getGradientLookup().getColorAt(var1 / range)); } else { for (Section var2 : sections) { if (var2.contains(var1)) { dataBar.setFill(var2.getColor()); break; } } } } 	0	1	0	0	0	0
private void Func1(String var1) { if (var1.length() != 0) { updateTags(var1); SpannableStringBuilder var2 = new SpannableStringBuilder(); for (final TagSpan var3 : mTagSpans) { addTagSpan(var2, var3); } int var4 = mTags.var4(); for (int var5 = mTagSpans.var4(); var5 < var4; var5++) { Tag var6 = mTags.get(var5); String var7 = var6.getSource(); if (var6.isSpan()) { TextView var8 = createTextView(var7); Drawable var9 = convertViewToDrawable(var8); var9.setBounds(0, 0, var9.getIntrinsicWidth(), var9.getIntrinsicHeight()); final TagSpan var10 = new TagSpan(var9, var7); addTagSpan(var2, var10); var10.setTag(var6); mTagSpans.add(var10); } else { var2.append(var7); } } getText().clear(); getText().append(var2); setMovementMethod(LinkMovementMethod.getInstance()); setSelection(var2.length()); if (mListener != null && !var1.equals(mLastString)) { mListener.onTagsChanged(convertTagSpanToString(mTagSpans)); } } } 	0	1	0	0	0	0
@Override public Vector Func1() { Vector var1 = position.minus(getBox().getCenter()); return var1.times(getMass() * 2000 / (var1.norm() * var1.norm() * var1.norm())); } 	1	1	1	1	0	0
"private void Func1(Username var1, LocalizedOperationResult var2, EntityConfigUpdateCommand var3, PipelineTemplateConfig var4) { try { goConfigService.updateConfig(var3, var1); } catch (Exception e) { if (e instanceof GoConfigInvalidException) { var2.unprocessableEntity(LocalizedMessage.string(""ENTITY_CONFIG_VALIDATION_FAILED"", var4.getClass().getAnnotation(ConfigTag.class).value(), var4.name(), e.getMessage())); } else { if (!var2.hasMessage()) { LOGGER.error(e.getMessage(), e); var2.internalServerError(LocalizedMessage.string(""SAVE_FAILED_WITH_REASON"", ""An error occurred while saving the template config. Please check the logs for more information."")); } } } } "	0	1	0	0	0	0
"public Object Func1(String var1) throws DfException { if (Strings.isNullOrEmpty(var1)) { return null; } try (Connection connection = getConnection(); Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(""SELECT * FROM "" + var1)) { if (rs.last()) { if (var1.toLowerCase().startsWith(""dm_user "")) { return Proxies.newProxyInstance(IDfUser.class, new UserMock(rs)); } else if (var1.toLowerCase().startsWith(""dm_group "")) { return Proxies.newProxyInstance(IDfGroup.class, new GroupMock(rs)); } else if (var1.toLowerCase().startsWith(""dm_sysobject "")) { String var2 = ""i_chronicle_id = '""; int var3 = var1.toLowerCase(ENGLISH).indexOf(var2); if (var3 == -1) { return null; } else { String var4 = var1.substring(var3 + var2.length(), var1.length() - 1); if (var4.startsWith(""09"")) { return Proxies.newProxyInstance(IDfSysObject.class, new SysObjectMock(rs)); } else if (var4.startsWith(""0b"")) { return getFolderBySpecification(var4); } } } } return null; } catch (SQLException e) { throw new DfException(e); } } "	0	1	0	0	0	0
@Override public int Func1(String var1, long var2) { char var3 = var1.charAt((int)var2); if (var3 >= 'A' && var3 <= 'Z') { return var3 += 32; // toLower } return var3; } 	0	1	0	1	1	0
"private List<IRI> Func1(List<OWLOntologyChange> var1) { List<IRI> var2 = new ArrayList<IRI>(); for (OWLOntologyChange var3 : var1) { if (var3.isAxiomChange()) { OWLAxiom var4 = var3.getAxiom(); IRI var5 = null; if (var4 instanceof OWLAnnotationAssertionAxiom) { var5 = (IRI) ((OWLAnnotationAssertionAxiom) var4).getSubject(); System.out.println(""The subject is: "" + var5); } else if (var4 instanceof OWLSubClassOfAxiom) { var5 = ((OWLSubClassOfAxiom) var4).getSubClass().asOWLClass().getIRI(); System.out.println(""The subject is: "" + var5); } else if (var4 instanceof OWLEquivalentClassesAxiom) { Set<OWLClassExpression> var6 = ((OWLEquivalentClassesAxiom) var4).getClassExpressions(); for (OWLClassExpression var7 : var6) { if (var7 instanceof OWLClass) { var5 = var7.asOWLClass().getIRI(); break; } } System.out.println(""The subject is: "" + var5); } if (var5 != null && var5 instanceof OWLClass) { if (var2.contains(var5)) { } else { var2.add(var5); } } } } return var2; } "	1	0	1	0	1	0
public String Func1() { return t.getReal().provideDesc; } 	1	0	1	1	1	0
public void Func1(TypeClass var1) { this.t.getReal().var1 = var1; } 	1	0	0	1	1	0
"public Map<String, Map<String, Set<Campaign.Role>>> Func1( final Set<String> var1) throws DataAccessException { if (var1 == null || var1.size() == 0) throw new DataAccessException(""userList list is empty""); StringBuilder var2 = new StringBuilder( ""select u.var7, c.var8, GROUP_CONCAT(ur.role SEPARATOR ',') var9 "" + ""from user u join user_role_campaign urc on (u.id = urc.user_id) ""+ ""join campaign c on (c.id = urc.campaign_id) "" + ""join user_role ur on (ur.id = urc.user_role_id) "" + ""WHERE "" + ""u.var7 in ""); var2.append(StringUtils.generateStatementPList(var1.size())); var2.append(     "" GROUP BY u.var7, c.var8""); List<Object> var3 = new LinkedList<Object>(); var3.addAll(var1); try { final Map<String, Map<String, Set<Campaign.Role>>> var4 = new HashMap<String, Map<String, Set<Campaign.Role>>>(); getJdbcTemplate().query( var2.toString(), var3.toArray(), new RowMapper<Object>() { @Override public Object Func2(final ResultSet var5, final int var6) throws SQLException { try { String var7 = var5.getString(""var7""); String var8 = var5.getString(""var8""); String var9 = var5.getString(""var9""); Set<Campaign.Role> var10 = new HashSet<Campaign.Role>(); for (String var11 : var9.split("";"")) { try { var10.add(Campaign.Role.getValue(var11)); } catch (IllegalArgumentException e) { throw new SQLException(""The role is invalid:"", var11); } } Map<String, Set<Campaign.Role>> var12 = var4.get(var7); if (var12 == null) { var12 = new HashMap<String, Set<Campaign.Role>>(); var4.put(var7, var12); } var12.put(var8,var10); return null; } catch (Exception e) { throw new SQLException(""Can't create a role with var3: "" + var5.getString(""var7"") + "","" + var5.getString(""var8"") + "","" + var5.getString(""var9""), e); } } } ); return var4; } catch(org.springframework.dao.DataAccessException e) { throw new DataAccessException(""Error executing SQL '"" + var2.toString() + ""' with var3: "" + var1.toString(), e); } } "	0	1	1	1	1	0
@Override public boolean Func1(Scan var1, Store var2, long var3) { return shouldSeek(var1, var3); } 	1	0	1	1	1	0
"@Test public void Func1() throws UnsupportedAudioFileException, IOException { URL var1 = getClass().getClassLoader().getResource(""10s_silence.ogg""); File var2 = new File(var1.getFile()); AudioInputStream var3 = new OggAudioFileDecoder(normalizer).decode(var2); assertThat(var3.getFormat().getEncoding(), is(AudioFormat.Encoding.PCM_SIGNED)); assertThat(var3.getFormat().getChannels(), is(2)); assertThat(var3.getFormat().getFrameRate(), is(44100f)); assertThat(var3.getFormat().getFrameSize(), is(4)); assertThat(var3.getFormat().getSampleRate(), is(44100f)); assertThat(var3.getFormat().getSampleSizeInBits(), is(16)); } "	1	0	1	0	1	0
"@Test public void Func1() throws UnsupportedAudioFileException, IOException { URL var1 = getClass().getClassLoader().getResource(""10s_silence.aac""); File var2 = new File(var1.getFile()); AudioInputStream var3 = new AacAudioFileDecoder(audioStandardizer).decode(var2); assertThat(var3.getFormat().getEncoding(), is(AudioFormat.Encoding.PCM_SIGNED)); assertThat(var3.getFormat().getChannels(), is(2)); assertThat(var3.getFormat().getFrameRate(), is(44100f)); assertThat(var3.getFormat().getFrameSize(), is(4)); assertThat(var3.getFormat().getSampleRate(), is(44100f)); assertThat(var3.getFormat().getSampleSizeInBits(), is(16)); } "	1	0	1	0	1	0
"@Path(""/connections/{connection-id}/var10/buckets/{bucket-name}/Func1"") @GET public void Func1(HttpServiceRequest var1, final HttpServiceResponder var2, @PathParam(""connection-id"") String var3, @PathParam(""bucket-name"") String var4, @QueryParam(""var5"") final String var5) { JsonObject var6 = new JsonObject(); try { Connection var7 = store.get(var3); S3Configuration var8 = new S3Configuration(var7); JsonObject var9 = new JsonObject(); JsonObject var10 = new JsonObject(); Map<String, String> var11 = new HashMap<>(); var11.put(""accessID"", var8.getAWSAccessKeyId()); var11.put(""accessKey"", var8.getAWSSecretKey()); var11.put(""path"", String.format(""var10://%s/%s"", var4, var5)); var10.add(""var11"", gson.toJsonTree(var11)); var10.addProperty(""name"", ""S3""); var10.addProperty(""type"", ""source""); var9.add(""S3"", var10); JsonArray var12 = new JsonArray(); var12.add(var9); var6.addProperty(""status"", HttpURLConnection.HTTP_OK); var6.addProperty(""message"", ""Success""); var6.addProperty(""count"", var12.size()); var6.add(""var12"", var12); sendJson(var2, HttpURLConnection.HTTP_OK, var6.toString()); } catch (Exception e) { error(var2, e.getMessage()); } } "	0	1	0	0	0	0
"private Writable Func1(Object var1, PrimitiveObjectInspector var2) throws SerDeException { if (var1 == null) { return null; } switch (var2.getPrimitiveCategory()) { case VOID: return null; case DOUBLE: return new DoubleWritable((double) var1); case INT: return new IntWritable((int) var1); case LONG: return new LongWritable((long) var1); case SHORT: return new ShortWritable((Short) var1); case DATE: return new DateWritable(new Date(Long.parseLong(String.valueOf(var1.toString())))); case TIMESTAMP: return new TimestampWritable(new Timestamp((long) var1)); case STRING: return new Text(var1.toString()); case CHAR: return new Text(var1.toString()); case DECIMAL: return new HiveDecimalWritable( HiveDecimal.create(((org.apache.spark.sql.types.Decimal) var1).toJavaBigDecimal())); } throw new SerDeException(""Unknown primitive : "" + var2.getPrimitiveCategory()); } "	1	0	0	1	1	0
"@RequestMapping(value = ""/{ssoId}"", method = RequestMethod.PUT) public ResponseEntity Func1(Model var1, @PathVariable(""ssoId"") String var2, @RequestBody User var3) { if (!AuthorityUtil.checkForOwnerOfProfile(var2)) { return new ResponseEntity(HttpStatus.UNAUTHORIZED); } User var4 = userService.findBySso(var2); if (var4 == null) { logger.warn(""Unable to edit. User with id "" + var2 + "" not found""); return new ResponseEntity(HttpStatus.NOT_FOUND); } var4.setSsoId(var3.getSsoId()); var4.setFirstName(var3.getFirstName()); var4.setLastName(var3.getLastName()); var4.setEmail(var3.getEmail()); userService.update(var4); return new ResponseEntity(HttpStatus.OK); } "	1	0	0	1	1	0
default void Func1(@MappingTarget FacilityDTO var1, CountyLicenseCase var2) { if (CollectionUtils.isNotEmpty(var2.getLicensingVisits())) { INSTANCE.toFacilityDTO(var1, var2.getLicensingVisits().get(0)); } } 	1	0	0	1	1	0
private void Func1(DetailAST var1) { if (currentVariables != null && !currentVariables.isEmpty()) { final DetailAST var2 = var1.getFirstChild(); if (var2 != null && var2.getType() == TokenTypes.IDENT && currentVariables.contains(var2.getText())) { log(var1.getLineNo(), var1.getColumnNo(), MSG_KEY, var2.getText()); } } } 	1	0	1	1	1	0
"private int Func1(int var1) { String var2 = getTelephonyProperty(var1, TelephonyProperties.CURRENT_ACTIVE_PHONE, null); if (var2 == null || var2.equals("""")) { return getPhoneTypeFromNetworkType(var1); } return Integer.parseInt(var2); } "	0	1	1	0	1	0
public void Func1(EnvironmentState var1) { Set<BW4TClientActions> var2 = new HashSet<BW4TClientActions>(this.clients.keySet()); for (BW4TClientActions var3 : var2) { try { var3.handleStateChange(var1); } catch (RemoteException e) { reportClientProblem(var3, e); try { unregisterClient(var3); } catch (ServerNotActiveException e1) { e1.printStackTrace(); } } } } 	1	0	1	0	1	0
public static void Func1(final Path var1, final Path var2, boolean var3) throws IOException { final Path var4; if (var3 && Files.isDirectory(var2)) { var4 = var2.resolve(var1.getFileName()); } else { var4 = var2; } if (Files.exists(var1)) { final Path var5 = var4.getParent(); if (!Files.exists(var5)) { Files.createDirectories(var5); } Files.move(var1, var4); } } 	1	1	1	1	0	0
"@Override public URI Func1(SubtitleSearchResult var1, String var2) { Movie var3 = var1; String var4 = ""all""; if (var2 != null) { try { var4 = getSubLanguageID(var2); } catch (Exception e) { Logger.getLogger(getClass().getName()).log(Level.WARNING, e.getMessage(), e); } } return URI.create(String.format(""http://www.opensubtitles.org/en/search/imdbid-%d/var4-%s"", var3.getImdbId(), var4)); } "	1	0	1	0	1	0
@Override public Set<String> Func1(final String var1, final long var2) { return new JedisClusterCommand<Set<String>>(connectionHandler, timeout, maxRedirections) { @Override public Set<String> Func2(Jedis var3) { return var3.Func1(var1, var2); } }.run(var1); } 	1	0	1	0	0	0
"@Override public void Func1(Call<OAuthToken> var1, Response<OAuthToken> var2) { OAuthToken var3 = var2.var3(); if (!var3.isValid()) { onFailure(var1, null); return; } String var4 = var3.setupExpireDate().serialize(); String var5 = new String(Base64.decode(var3.getIdToken(), Base64.DEFAULT)); String var6 = var5.split(""\""net_id\"":"")[1].split(""\"""")[1]; setResult(var6, var4); startService(new Intent(LoginActivity.this, RegisterWithMpnService.class).putExtra(RegisterWithMpnService.ACTION, RegisterWithMpnService.Action.LOGIN)); Account var7 = createAccount(accountManager, var6, """", var4); ContentResolver.setSyncAutomatically(var7, getString(R.string.fakeContentAuthority), true); ContentResolver.addPeriodicSync(var7, getString(R.string.fakeContentAuthority), Bundle.EMPTY, ONE_WEEK); AccountInformation.sync(LoginActivity.this, var7, new AccountInformation.AccountInformationCallback() { @Override public void Func2(AccountInformation var8) { finish(progressDialog); } }); } "	1	0	1	1	1	0
@Override public boolean Func1(Object var1) { if (var1 instanceof EnrolmentInfo) { EnrolmentInfo var2 = (EnrolmentInfo) var1; if (this.owner != null && this.ownership != null) { if (this.owner.Func1(var2.getOwner()) && this.ownership.Func1(var2.getOwnership())) { return true; } } } return false; } 	0	1	0	0	0	0
@Override public Step[] Func1(int var1) { return new Step[0]; } 	1	0	1	1	1	0
"@Override protected void Func1(int var1, int var2, int var3) throws IOException { if(menu != null) { menu.Func1(var1, var2, var3); } for (int var4 = 0; var4 < this.buttonList.size(); ++var4) { GuiButton var5 = (GuiButton)this.buttonList.get(var4); if(var5.mousePressed(mc, var1, var2)) { ActionPerformedEvent.Pre var6 = new ActionPerformedEvent.Pre(this, var5, buttonList); if(MinecraftForge.EVENT_BUS.post(var6)) break; var6.button.playPressSound(mc.getSoundHandler()); switch(var3) { case 0: actionPerformed(var6.button); mouseStartX = var1; mouseStartY = var2; break; case 1: secondaryActionPerformed(var6.button); break; } if(this.equals(mc.currentScreen)) MinecraftForge.EVENT_BUS.post(new ActionPerformedEvent.Post(this, var6.button, buttonList)); return; } } if(menu != null)	onMenuClosed(); deselectButton(); } "	1	0	1	0	1	0
@Override public LinkedList<Board> Func1(Board var1) { LinkedList<Board> var2 = new LinkedList<Board>(); LinkedList<Board> var3 = new LinkedList<Board>(); if (var1.turnEndedGame() != Board.STATE_NOTYETOVER) return var3; Stone var4 = (var1.getLastStone() == Stone.RED) ? Stone.YELLOW : Stone.RED; for (Position var5 : var1.determinePossiblePositions()) { Board var6 = var1.clone(); var6.addStone(var5, var4); var2.add(var6); } for (Board var7 : var2) { if (var7.turnEndedGame() == Board.STATE_NOTYETOVER) { var3.offerLast(var7); } else { var3.offerFirst(var7); } } return var3; } 	1	0	0	1	1	0
private static Bitmap Func1(InputStream var1, Rect var2, Options var3, boolean var4) { byte [] var5 = null; if (var3 != null) var5 = var3.inTempStorage; if (var5 == null) var5 = new byte[DECODE_BUFFER_SIZE]; return nativeDecodeStream(var1, var5, var2, var3, true); } 	0	1	1	1	1	0
"@Override public ActionResponseDTO<OAuthClient> Func1(OAuthClient var1, String var2) { rejectIfNull(var1, GL0056, ""var1""); OAuthClient var3 = (OAuthClient) oAuthRepository.findOAuthClientByOauthKey(var2); rejectIfNull(var3, GL0056, ""var1""); if (var1.getRedirectUrl() != null) { var3.setRedirectUrl(var1.getRedirectUrl()); } if (var3.getResourceType()!= null && var3.getResourceType().getName().equalsIgnoreCase(LTI)) { if (var1.getKey() != null) { var3.setKey(var1.getKey()); } if (var1.getSecretKey() != null) { var3.setSecretKey(var1.getSecretKey()); } } oAuthRepository.save(var3); final Errors var4 = new BindException(OAuthClient.class, ""var1""); return new ActionResponseDTO<OAuthClient>(var3, var4); } "	1	0	0	1	1	0
"@Override public <K, V> Cache<K, V> Func1(final String var1, CacheConfiguration<K, V> var2) throws IllegalArgumentException { statusTransitioner.checkAvailable(); LOGGER.info(""Cache '{}' is getting created in EhcacheManager."", var1); var2 = adjustConfigurationWithCacheManagerDefaults(var2); Class<K> var3 = var2.getKeyType(); Class<V> var4 = var2.getValueType(); final CacheHolder var5 = new CacheHolder(var3, var4, null); if (caches.putIfAbsent(var1, var5) != null) { throw new IllegalArgumentException(""Cache '"" + var1 +""' already exists""); } Ehcache<K, V> var6 = null; RuntimeException var7 = null; try { var6 = createNewEhcache(var1, var2, var3, var4, var5.toBeReleased); CacheConfiguration.PersistenceMode var8 = var2.getPersistenceMode(); if (var8 != null) { Maintainable var9 = var6.toMaintenance(); try { switch (var8) { case SWAP: var9.destroy(); var9.create(); break; case CREATE_IF_ABSENT: try { var9.create(); } catch (Exception e) { } break; default: } } finally { var9.close(); } } var6.init(); } catch (RuntimeException e) { var7 = e; } if(var7 == null) { try { if(!statusTransitioner.isTransitioning()) { for (CacheManagerListener var10 : listeners) { var10.cacheAdded(var1, var6); } } } finally { var5.setCache(var6); } } else { caches.remove(var1); var5.setCache(null); throw new IllegalStateException(""Cache '""+var1+""' creation in EhcacheManager failed."", var7); } LOGGER.info(""Cache '{}' created in EhcacheManager."", var1); return var6; } "	1	0	1	0	1	0
"@Before public void Func1() throws Exception { proxy = new FEDataStoreProxy(); String var1 = System.getProperty(""is.var1.user""); String var2 = System.getProperty(""is.var1.passwd""); am = new IFAuthenticationManager(var1, var2); token = am.getAuthorizationToken(""yosu"", ""yosupass"", """"); } "	0	1	0	0	0	0
"@Override public void Func1() { logger.debug(""Generating XML for {}"", properties.get(Constants.PARAM_NAME)); super.Func1(); excelFile = (ExcelFile) baseComponent; Path var1 = new Path(); String var2 = ((String) properties.get(PropertyNameConstants.FILE_NAME.value())); String var3 = ((String) properties.get(PropertyNameConstants.PATH.value())); if(StringUtils.isNotBlank(var2) && StringUtils.isNotBlank(var3)){ var1.setUri(var3 + ""\\"" + var2); excelFile.setPath(var1); } WorksheetName var4 = new WorksheetName(); WorkSheetValueProperty var5 = (WorkSheetValueProperty) properties .get(PropertyNameConstants.WORK_SHEET_NAME.value()); if (var5 != null) { if (StringUtils.isNotBlank(var5.getWorksheetName())) { var4.setName(var5.getWorksheetName()); } var4.setIsColumn(var5.isField()); excelFile.setWorksheetName(var4); } WriteMode var6 = new WriteMode(); var6.setValue(getWriteMode()); excelFile.setWriteMode(var6); excelFile.setAutoColumnSize(getBoolean(PropertyNameConstants.AUTO_SIZE_COLUMN.value())); excelFile.setStripLeadingQuote(getBoolean(PropertyNameConstants.STRIP_LEADING_QOUTES.value())); Charset var7 = new Charset(); var7.setValue(getCharset()); excelFile.setCharset(var7); mapExcelFormat(); getSortKeys(); excelFile.setRuntimeProperties(getRuntimeProperties()); } "	1	0	1	1	1	0
@Transactional @Override public byte[] Func1(ProjectEntry var1) throws IOException { Collection<ProjectFile> var2 = this.allFilesFor(var1); ArchiveWriteAdapter var3 = new ArchiveWriteAdapter(); try { for (ProjectFile var4 : var2) { var3.addEntry(new ArchiveFile(var4.getFileName(), var4.getFileContent())); } ProjectMetadata var5 = new ProjectMetadata(var2); byte[] var6 = this.generateExportMetadataContent(var5, var3.getCharset()); var3.addEntry(new ArchiveFile(PROJECT_EXPORT_METADATA_FILE, var6)); } finally { var3.close(); } return var3.getArchiveContent(); } 	1	0	1	0	1	0
"@Override public void Func1(List<AdminAccounts> var1, ParseException var2) { if (var2 != null && var1.size() < 1) { Log.i(TAG, ""No organization accounts found""); mUserView.setError(getString(R.string.error_incorrect_username)); mUserView.requestFocus(); } else { AdminAccounts var3 = var1.get(0); if (var3.getUsername().equals(mUser) && var3.getPassword().equals(mPassword)) { Log.i(TAG, ""Signed in successfully""); Toast.makeText(getApplicationContext(), ""Signed in successfully :)"", Toast.LENGTH_SHORT).show(); SharedPreferences.Editor var4 = getSharedPreferences(PREFS_NAME, MODE_PRIVATE).edit(); var4.putBoolean(signedInPref, true); var4.putString(currentUserPref, var3.getUsername()); var4.putString(currentOrgPref, var3.getOrganizatonName()); if (var4.commit()) Log.i(TAG, ""Preferences saved successfully""); else Log.i(TAG, ""Preferences failed to save""); finish(); // ends activity once signed in } else { Log.i(TAG, ""Sign in failed... incorrect password""); mPasswordView.setError(getString(R.string.error_incorrect_password)); mPasswordView.requestFocus(); } } } "	1	0	1	1	1	0
"@Override public final String Func1() { if (this.sourceMacAddress != null) { return this.sourceMacAddress; } try { return toHexString(this.headers, 0, 6); } catch (final IOException e) { throw new RuntimeException(""Unable to read data from the underlying Buffer."", e); } } "	1	0	0	1	0	0
"public void Func1() throws IOException { if (servletRequestContext.getOriginalRequest().getDispatcherType() == DispatcherType.INCLUDE) { return; } if (listener == null) { if (anyAreSet(state, FLAG_CLOSED)) return; state |= FLAG_CLOSED; state &= ~FLAG_READY; if (allAreClear(state, FLAG_WRITE_STARTED) && var1 == null) { if (servletRequestContext.getOriginalResponse().getHeader(Headers.TRANSFER_ENCODING_STRING) == null) { if (buffer == null) { servletRequestContext.getExchange().getResponseHeaders().put(Headers.CONTENT_LENGTH, ""0""); } else { servletRequestContext.getExchange().getResponseHeaders().put(Headers.CONTENT_LENGTH, Integer.toString(buffer.position())); } } } try { if (buffer != null) { writeBufferBlocking(true); } if (var1 == null) { var1 = servletRequestContext.getExchange().getResponseChannel(); } state |= FLAG_DELEGATE_SHUTDOWN; StreamSinkChannel var1 = this.var1; if (var1 != null) { //mock requests var1.shutdownWrites(); Channels.flushBlocking(var1); } } finally { if (pooledBuffer != null) { pooledBuffer.free(); buffer = null; } else { buffer = null; } } } else { closeAsync(); } } "	0	1	0	0	0	0
"public FloatInputPoll Func1() { if (batteryLevel == null) { batteryLevel = FloatMixing.addition.of(6.5f, FloatMixing.multiplication.of(3, panel.add(new FloatControlDevice(""Battery Level (6.5V-12.5V)"")))); } return batteryLevel; } "	0	1	0	1	1	0
"@Test public void Func1() throws Exception { template.send(""annotated8"", 0, ""foo""); template.flush(); assertThat(this.multiListener.latch1.await(20, TimeUnit.SECONDS)).isTrue(); } "	0	1	1	0	1	0
"public void Func1(CacheServer var1) { if (!isServiceInitialised(""Func1"")) { return; } CacheServerBridge var2 = new CacheServerBridge(var1, internalCache); var2.setMemberMBeanBridge(memberMBeanBridge); CacheServerMBean var3 = new CacheServerMBean(var2); ObjectName var4 = MBeanJMXAdapter.getClientServiceMBeanName( var1.getPort(), internalCache.getDistributedSystem().getDistributedMember()); ObjectName var5 = service.registerInternalMBean((CacheServerMXBean) var3, var4); ClientMembershipListener var6 = new CacheServerMembershipListenerAdapter( var3, memberLevelNotifEmitter, var5); ClientMembership.registerClientMembershipListener(var6); var2.setClientMembershipListener(var6); service.federate(var5, CacheServerMXBean.class, true); Notification var7 = new Notification(JMXNotificationType.CACHE_SERVER_STARTED, memberSource, SequenceNumber.next(), System.currentTimeMillis(), ManagementConstants.CACHE_SERVER_STARTED_PREFIX); memberLevelNotifEmitter.sendNotification(var7); memberMBeanBridge.setCacheServer(true); } "	1	0	0	1	1	0
public static ArrayList<Category> Func1(){ ArrayList<Category> var1 = new ArrayList<Category>(); for (int var2=0; var2<Appl.selectedCategories.length; var2++) { if (Appl.selectedCategories[var2]) { var1.add(new Category(getMarkerCategories().get(var2).toLowerCase())); } } return var1; } 	0	1	0	0	0	0
@Override public List<Server> Func1(VimInstance var1) throws VimDriverException { List<Server> var2 = new ArrayList<>(); try { OSClient var3 = this.authenticate(var1); List<? extends org.openstack4j.model.compute.Server> var4 = var3.compute().var4().list(); for (org.openstack4j.model.compute.Server var5 : var4) { if ((isV3API(var1) && var5.getTenantId().equals(var1.getTenant()) || (!isV3API(var1) && var5.getTenantId() .equals(getTenantFromName(var3, var1.getTenant()).getId())))) var2.add(Utils.getServer(var5, null)); } } catch (Exception e) { log.error(e.getMessage(), e); throw new VimDriverException(e.getMessage()); } return var2; } 	1	0	1	0	1	0
public void Func1(){ Intent var1 = new Intent(this,ChooseCategoryActivity.class); var1.putExtra(Extra.SELECTED_TAB,2); startActivity(var1); } 	0	1	0	0	0	0
"@Test public void Func1() throws Exception { symbolTable.enterScope(); symbolTable.enterScope(); assertTrue(enterDeclaration(getSymbol(""number""), BasicType.INT)); assertFalse(enterDeclaration(getSymbol(""number""), BasicType.INT)); assertFalse(enterDeclaration(getSymbol(""number""), BasicType.INT)); assertTrue(enterDeclaration(getSymbol(""number1""), BasicType.INT)); assertTrue(symbolTable.isDefinedInCurrentScope(getSymbol(""number""))); assertFalse(symbolTable.isDefinedInCurrentScope(getSymbol(""asdf""))); assertTrue(symbolTable.isDefinedInCurrentScope(getSymbol(""number1""))); symbolTable.enterScope(); assertTrue(enterDeclaration(getSymbol(""number""), BasicType.INT)); symbolTable.enterScope(); symbolTable.enterScope(); symbolTable.leaveAllScopes(); assertEquals(3, symbolTable.getRequiredLocalVariables()); Field var1 = SymbolTable.class.getDeclaredField(""changeStack""); var1.setAccessible(true); @SuppressWarnings(""unchecked"") LinkedList<Change> var2 = (LinkedList<Change>) var1.get(symbolTable); assertTrue(var2.isEmpty()); var1.setAccessible(false); assertNull(getSymbol(""number"").getDeclarationScope()); assertNull(getSymbol(""number"").getDeclaration()); assertNull(getSymbol(""number1"").getDeclarationScope()); assertNull(getSymbol(""number1"").getDeclaration()); } "	0	1	1	1	1	0
"public void Func1(){ String var1 = this.toString(); if (var1.indexOf(""x"") == 1) { var1 = var1.substring(4); } else { var1 = var1.substring(3); } this.label = new JLabel(var1); if(this.isOverdue() == true) { this.label.setBackground(Color.RED); this.label.setOpaque(true); } this.label.setForeground(this.getColor()); this.label.setPreferredSize(new Dimension(400,20)); } "	0	1	1	0	1	0
"private void Func1(String var1, AppStatus var2) { DeploymentState var3 = var2.getState(); if (var3 != DeploymentState.unknown) { throw new IllegalStateException(String.format(""App %s is already deployed with var3 %s"", var1, var3)); } } "	0	1	1	0	1	0
public void Func1(List<?> var1) { List<ListItem> var2 = IntStream.range(1, var1.size()).mapToObj(i -> createItem(var1.get(i), i, 0, var1.size(), var1)).collect(toList()); list.getListComponent().clearSelection(); list.getModel().clear(); list.getModel().addAll(var2); } 	1	0	0	1	1	0
public Object Func1(final long var1, final TimeUnit var2) throws InterruptedException, ExecutionException, TimeoutException { try { return codec.decode(future.getWithTimeout(var1, var2), (Class<?>)decodeTo); } catch (EntityException e) { throw new ExecutionException(e); } } 	1	0	1	1	1	0
"private void Func1() { Log.d(""saving buses"", buses.toString()); Log.d(""saving list_size"", Integer.toString(buses.size())); SharedPreferences var1 = PreferenceManager.getDefaultSharedPreferences(this); var1.edit().putStringSet(BUS_SELECT_STATE, buses).apply(); var1.edit().putInt(BUSLIST_SIZE, getResources().getStringArray(R.array.buses).length).apply(); } "	0	1	0	0	0	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.web_view_activity); webView = (WebView) findViewById(R.id.web_view); configureWebView(webView); webView.loadUrl(""https://api.byu.edu/authorize?response_type=code&client_id=SRAzrjboV9k58NsVZVgfjFwCFyIa&redirect_uri=byuSuite://auth&scope=openid&state=myteststate""); Toolbar var2 = (Toolbar) findViewById(R.id.var2); var2.setTitle(""Log In""); var2.setTitleTextColor(ContextCompat.getColor(this, R.color.white)); } "	1	0	1	1	1	0
private OAuthToken Func1() { accountManager = AccountManager.get(OAuthTokenTestActivity.this); account = AccountResolver.getAccount(OAuthTokenTestActivity.this); String var1 = accountManager.var1(account, TYPE_BEARER_TOKEN); return new Gson().fromJson(var1, OAuthToken.class); } 	0	1	0	0	0	0
public float Func1(String var1, float var2) { try { return getInt(var1); } catch (NoSuchElementException | NumberFormatException e) { return var2; } } 	1	0	1	1	1	0
"public List<Ticket> Func1(Long var1,String var2, TicketStatus var3, int var4, int var5) { if ((!(var1>0))|| (var2 == null) || (var3 == null)) { return null; } Query<User> var6 = ds.createQuery(User.class); var6.and(var6.criteria(""var2"").equal(var2), var6.criteria(""var1"").equal(var1)); User var7 =  var6.get(); Query<Ticket> var8 = ds.createQuery(Ticket.class); var8.and(var8.criteria(""passenger"").equal(var7.get_id()), var8.criteria(""var3"").equal(var3)); return var8.var4(var4).var5(var5).asList(); } "	0	1	0	1	1	0
"@Override public Ticket Func1(TicketConfirmation var1) throws TicketException { Ticket var2 = dao.getByLocalId(var1.getTenantId(), var1.getId()); if (!(var2 == null)) { switch (var2.getStatus()) { case CANCELED: throw new TicketException(""El var2 se encuentra CANCELADO""); case USED: throw new TicketException(""El var2 ya fue UTILIZADO""); case CONFIRMED: if (var1.getStatus()==TicketStatus.USED){ var2.setStatus(var1.getStatus()); if (dao.persist(var2) != null) { return var2; } else { throw new TicketException(""Ocurrió un error al intentar actualizar el TICKET""); } } throw new TicketException(""El var2 ya está CONFIRMADO""); } var2.setPassenger(udao.getByUsername(var1.getTenantId(), var1.getUsername())); var2.setPaymentToken(var1.getPaymentToken()); var2.setStatus(var1.getStatus()); if (dao.persist(var2) != null) { if (var1.getStatus() == TicketStatus.CONFIRMED) { updateJourney(var2.getTenantId(), var2.getJourneyId(), var2.getSeat()); } return var2; } else { throw new TicketException(""Ocurrió un error al intentar actualizar el TICKET""); } }else { throw new TicketException(""El var2 NO EXISTE""); } } "	0	1	0	0	0	0
public void Func1(ExoSocialActivity var1, ExoSocialActivity var2) throws ActivityStorageException { activityStorage.Func1(var1, var2); activityLifeCycle.Func1(activityStorage.getActivity(var2.getId())); } 	0	1	0	0	0	0
"public static RamlResponse Func1(RamlAction var1) { String[] var2 = new String[] {""200"", ""201""}; for (String var3 : var2) { if (var1 != null && !CollectionUtils.isEmpty(var1.getResponses()) && var1.getResponses().containsKey(var3)) { return var1.getResponses().get(var3); } } return null; } "	0	0	0	1	1	0
"private static IUser Func1(ODocument var1) { if (var1 != null) { IUser var2 = new User(); var2.setLogin(var1.field(""login"", String.class)); var2.setPassword(var1.field(""password"", String.class)); var2.setName(var1.field(""name"", String.class)); var2.setGroup(docToUserGroup(var1.field(""group"", ODocument.class))); var2.setLastLogin(var1.field(""lastLogin"", Long.class)); var2.setActive(var1.field(""active"", Boolean.class)); var2.setId(var1.getIdentity().toString()); var2.setVersion(var1.getVersion()); var2.setCreated(var1.field(""created"", Long.class)); var2.setModified(var1.field(""modified"", Long.class)); return var2; } return null; } "	0	1	1	0	1	0
public boolean Func1(Predicate<? super T> var1) { return matcher(false, true, true, var1); } 	1	0	1	1	1	0
"@Override public String Func1() { StringBuilder var1 = new StringBuilder(); var1.append(""vec3 "" + outputs.get(""out_normal"").getName() + "" = texture("" + inputs.get(""in_sampler"").getName() + "", "" + inputs.get(""in_texturecoordinate"").getName() + "").xyz * 2 - 1;\n""); glsl = var1.toString(); return glsl; } "	0	1	0	0	0	0
@Override public Uri Func1() { if(media.hasEmbeddedPicture()) { return media.Func1(); } else if (hasItemImageDownloaded()) { return image.Func1(); } else if (feed != null) { return feed.Func1(); } else { return null; } } 	1	0	1	1	1	0
"private String Func1(String var1) throws StorageException { RestRequestor var2 = null; try { LOGGER.info(""Will use {} (PUT) to add var1"", couchURI); var2 = RestRequestor.put(couchURI + ""/"" + documentId, ""application/json;charset=utf-8"", var1.getBytes()); int var3 = var2.getResponseCode(); String var4 = var2.getResponseMessage(); LOGGER.debug(""CouchDB responded with {}, {}"", var3, var4); if (var3 != COUCHDB_CREATED_STATUS_CODE) { throw new StorageException(String.format(""Expected database to respond with var3 201, got %s. Message is: %s"", var3, var4)); } LOGGER.debug(""Saved: \n{}"", var1); String var5 = readRevision(var2.getInputStream()); LOGGER.info(""Document saved: id = {} var5 = {}"", var5, documentId); return var5; } catch (IOException e) { throw new StorageException(""Error while connecting to the database"", e); } finally { if (var2 != null) { var2.close(); } } } "	0	1	1	1	1	0
@Override public String Func1(Integer var1) { return DownloadType.values()[var1 / 3].getProvider().getVersionsDownloadURL() + suffix; } 	1	0	1	1	1	0
"@Test public void Func1() { this.setup2(); PositiveVoting var1 = new PositiveVoting(); assertTrue(var1.computeSignal(this.data)); assertEquals(2,var1.getThreshold().intValue()); assertEquals(1, var1.getFalsePositives().intValue()); assertEquals(1, var1.getTruePositives().intValue()); assertEquals(1, var1.getFalseNegatives().intValue()); assertEquals(1, var1.getTrueNegatives().intValue()); double var2 = 0.0; double var3 = 0.5; double var4 = var2* var3; assertEquals(""Signal Strength"",var4, var1.computeSignalStrength(data).doubleValue(),0.0); } "	1	0	0	1	1	0
"private void Func1(GtfsRealtime.FeedEntity var1, GtfsRealtime.TripUpdate var2, GtfsRealtime.TripUpdate.StopTimeUpdate var3, List<OccurrenceModel> var4) { if (var3.hasScheduleRelationship() && var3.getScheduleRelationship().equals(NO_DATA)) { String var5 = getTripId(var1, var2) + getStopTimeUpdateId(var3); if (var3.hasArrival()) { OccurrenceModel var6 = new OccurrenceModel(var5 + "" has arrival""); var4.add(var6); _log.debug(var6.getPrefix() + "" "" + E042.getOccurrenceSuffix()); } if (var3.hasDeparture()) { OccurrenceModel var6 = new OccurrenceModel(var5 + "" has departure""); var4.add(var6); _log.debug(var6.getPrefix() + "" "" + E042.getOccurrenceSuffix()); } } } "	1	1	1	1	0	0
private void Func1(String var1) { String var2 = var1 + dictionaryNameSuffix; dictionaryMenu.setText(var2); brickDictionaryFrame.setTitle(var2); } 	0	1	0	0	0	0
"public static void Func1() { System.out.println(""Mode 1 ou 2 Joueurs ?""); joueurs = InOut.getByte(); if(joueurs != 1 || joueurs != 2) { joueurs = 1; } System.out.println(""Vous etes actuellement en mode "" + joueurs + "" joueurs""); } "	1	1	1	1	0	0
"@Override protected void Func1(GuiButton var1) { if (var1.id == 1) { this.base.setyAxisDetect(this.base.getyAxisDetect() - 1); sendChangeToServer(); } if (var1.id == 2) { this.base.setyAxisDetect(this.base.getyAxisDetect() + 1); sendChangeToServer(); } if (var1.id == 3) { sendDropTurretsToServer(); } if (var1.id == 4) { sendDropBaseToServer(); } if (var1.id == 5) { player.openGui(OpenModularTurrets.instance, 6, player.worldObj, base.getPos().getX(), base.getPos().getY(), base.getPos().getZ()); } if (var1.id == 6) { sendSetBaseTargetingToServer(); for (Object var2 : buttonList) { if (((GuiButton) var2).id == 6) { this.base.setMultiTargeting(!this.base.isMultiTargeting()); ((GuiButton) var2).displayString = base.isMultiTargeting() ? safeLocalize(OMTNames.Localizations.GUI.TARGET)+"": Multi"" : safeLocalize(OMTNames.Localizations.GUI.TARGET)+"": Single""; } } } } "	0	1	0	0	0	0
@Override protected void Func1(ShopCreationData var1) { super.Func1(var1); Player var2 = var1.creator; Block var3 = var1.var3; Validate.notNull(var2); Validate.notNull(var3); this.ownerUUID = NMSManager.getProvider().supportsPlayerUUIDs() ? var2.getUniqueId() : null; this.ownerName = var2.getName().toLowerCase(); this.chestx = var3.getX(); this.chesty = var3.getY(); this.chestz = var3.getZ(); this.forHire = false; } 	1	0	1	0	1	0
@Override public void Func1(View var1) { Snackbar.make(swipeRefreshLayout, getString(R.string.snackbar_deleting), Snackbar.LENGTH_LONG).show(); new MultiMailAction(currentUser, getActivity(), FolderFragment.this, emailsMarkedForAction, getString(R.string.msg_action_trash)).execute(); } 	0	1	0	0	0	0
"public static void Func1(Context var1, User var2, String var3, String var4) { NotificationCompat.Builder var5 = new NotificationCompat.Builder(var1); var5.setSmallIcon(R.drawable.envelope_m); var5.setTicker(var1.getString(R.string.notification_ticker_new_webmail)); String var6 = var2.var6; if (User.getUsersCount() > 1) { if (var6.indexOf(""@"") != -1) var5.setContentTitle(var3 + "" to "" + var6.substring(0, var6.indexOf(""@""))); else var5.setContentTitle(var3 + "" to "" + var6); } else { var5.setContentTitle(var3 + "" to "" + var6); } var5.setContentText(var4); var5.setSound(Uri.parse(UserSettings.getNotificationSound(var1))); var5.setDefaults(Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE); var5.setAutoCancel(true); Intent var7 = new Intent(var1, LoginActivity.class); TaskStackBuilder var8 = TaskStackBuilder.create(var1); var8.addParentStack(LoginActivity.class); var8.addNextIntent(var7); PendingIntent var9 = var8.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT); var5.setContentIntent(var9); NotificationManager var10 = (NotificationManager) var1.getSystemService(Context.NOTIFICATION_SERVICE); var10.notify((int) (System.currentTimeMillis()), var5.build()); UserSettings.setCurrentUser(var2, var1); } "	0	1	0	0	0	0
@Override public void Func1() { final HandlerLambda<Event> var1 = (e) -> this.server.sendEvent(e, this); final HandlerLambda<JoinTeamCommand> var2 = (e) -> this.var2(e); this.listenTo(GameWaitingEvent.class, var1); this.listenTo(GameAboutToStartEvent.class, var1); this.listenTo(GameStartedEvent.class, var1); this.listenTo(GameStoppedEvent.class, var1); this.listenTo(GameFinishedEvent.class, var1); this.listenTo(AnimalAddedEvent.class, var1); this.listenTo(AnimalJumpedEvent.class, var1); this.listenTo(AnimalFellOffEvent.class, var1); this.listenTo(AnimalReturnedToBoatEvent.class, var1); this.listenTo(JoinTeamCommand.class, var2); } 	1	0	0	1	1	0
"@Override public void Func1() { if (mLoginPage.canGoBack() && !settingsOpen) { mLoginPage.goBack(); if (mLoginPage.getUrl().toLowerCase().contains(""edgetime"".toLowerCase())) { Toast.makeText(this, ""Double-Click to exit Edge"", Toast.LENGTH_SHORT).show(); } } else if (settingsOpen) { mNotify.setVisibility(View.INVISIBLE); mAutoLogin.setVisibility(View.INVISIBLE); mLoginPage.setVisibility(View.VISIBLE); mSettings.setText(""Settings""); mLoadingCircle.setVisibility(View.INVISIBLE); settingsOpen = false; mNumberPicker.setVisibility(View.INVISIBLE); mNumberPickerTextView.setVisibility(View.INVISIBLE); } else { Log.d(""not good"", ""kill me""); super.Func1(); } } "	0	1	0	0	0	0
@Override public void Func1(N var1) { super.removeAll(); if (listenerList != null) { NotifierHelper.notify(listenerList, Listener.NOTIFICATION_TYPE.REMOVE, GRAPH_ATTRIBUTES.LAYER_NODES, var1, null, this); } } 	1	0	1	1	1	0
"@Test public void Func1() { ValueSequence var1 = TextType.get().sequenceOf(""\""\"",\""\""""); assertSequence(var1, null, null); } "	0	1	0	0	0	0
"public ScrollableList Func1( final Object var1 , String var2 , final String var3 , final int var4 , final int var5 , final int var6 , final int var7 ) { ScrollableList var8 = new ScrollableList( base.cp5 , ( Tab ) base.cp5.controlWindow.getTabs( ).get( 1 ) , var3 , var4 , var5 , var6 , var7 ); base.cp5.register( var1 , var2 , var8 ); var8.registerProperty( ""listBoxItems"" ).registerProperty( ""value"" ); return var8; } "	0	1	0	0	0	0
@Nullable @Override public Entity Func1(Location var1, BaseEntity var2) { Entity var3 = super.Func1(var1, var2); if (var2 != null) { changeSet.add(new EntityCreate(var1, var2, var3)); } return var3; } 	1	1	1	1	0	0
"private void Func1(FramedStream var1, MockResponse var2) throws IOException { if (var2.getSocketPolicy() == SocketPolicy.NO_RESPONSE) { return; } List<Header> var3 = new ArrayList<>(); String[] var4 = var2.getStatus().split("" "", 2); if (var4.length != 2) { throw new AssertionError(""Unexpected status: "" + var2.getStatus()); } var3.add(new Header(Header.RESPONSE_STATUS, var4[1])); if (protocol == Protocol.SPDY_3) { var3.add(new Header(Header.VERSION, var4[0])); } Headers var5 = var2.getHeaders(); for (int var6 = 0, var7 = var5.var7(); var6 < var7; var6++) { var3.add(new Header(var5.name(var6), var5.value(var6))); } Buffer var8 = var2.getBody(); boolean var9 = var8 != null || !var2.getPushPromises().isEmpty(); var1.reply(var3, var9); pushPromises(var1, var2.getPushPromises()); if (var8 != null) { BufferedSink var10 = Okio.buffer(var1.getSink()); sleepIfDelayed(var2); throttledTransfer(var2, socket, var8, var10, bodyLimit); var10.close(); } else if (var9) { var1.close(ErrorCode.NO_ERROR); } } "	0	1	1	0	1	0
private CollisionFunction Func1(CollisionFunction var1, int var2) { if (var1 instanceof CollisionFunctionLinear) { final CollisionFunctionLinear var3 = (CollisionFunctionLinear) var1; final int var4; if (side < 0) { var4 = -1; } else { var4 = 0; } final double var5 = (var2 + var4) * map.getTileHeight() / 2; return new CollisionFunctionLinear(var3.getA() * -side, var5); } return var1; } 	1	0	0	1	1	0
@Override public IdToken Func1(String var1, AuthorizationCode var2, AccessToken var3, String var4) throws SignatureException, StringEncrypter.EncryptionException, InvalidJwtException, InvalidJweException, InvalidClaimException { return grant.Func1(var1, var2, var3, getScopes(), var4); } 	1	0	1	0	1	0
"@Override public void Func1() { if (_i != 0 && !_succesfull) { _waiting = true; _label.setText(OTRResources.getString(""otr.try.to.connect.for.seconds"",_i)); decI(); } else if (!_succesfull) { _waiting = true; _icon.setImage(SparkRes.getImageIcon(SparkRes.SMALL_DELETE).getImage()); _label.setText(OTRResources.getString(""otr.failed.to.establish"",_i)); _retry.setVisible(true); this.cancel(); } else { this.cancel(); } } "	1	0	1	0	1	0
public static PickMiniSite Func1(List<MiniSite> var1, Fragment var2) { PickMiniSite var3 = new PickMiniSite(); var3.setMiniSites(var1); var3.setFragment(var2); return var3; } 	0	1	0	1	1	0
"private void Func1() { PickMiniSite var1 = PickMiniSite.newInstance(mMiniSites); var1.setTargetFragment(this, REQUEST_CODE); var1.show(mParentActivity.getSupportFragmentManager(), ""timePicker""); } "	1	0	0	1	1	0
"public ResponseEntity<List<IndicatorQueryResp>> Func1(@ApiParam(value = ""List of queries. Please see swagger.json for request var1 format."", required = true) @RequestBody(required = true) EvidenceQueries var1) { HttpStatus var2 = HttpStatus.OK; List<IndicatorQueryResp> var3 = new ArrayList<>(); if (var1 == null || var1.getQueries() == null || var1.getQueries().size() == 0) { var2 = HttpStatus.BAD_REQUEST; } else { String var4 = var1.getSource() == null ? ""oncokb"" : var1.getSource(); for (Query var5 : var1.getQueries()) { var3.add(IndicatorUtils.processQuery(var5, null, var1.getLevels() == null ? LevelUtils.getPublicAndOtherIndicationLevels() : var1.getLevels(), var4, var1.getHighestLevelOnly())); } } return new ResponseEntity<>(var3, var2); } "	1	0	1	0	1	0
public int Func1(int var1, int var2) { int var3 = getColOrRowFromCoordinate(var2 + mScroll); int var4 = getColFromCoordinate(var3, var1); if (var4 == -1 || var3 == -1) { return -1; } int var5 = 0; var5 = var3 * COL_COUNT + var4; if (mUseMainTiles) { if (var3 == 0 && var4 == COL_COUNT - 1) { return -1; } if (var3 > 0) { var5--; } } if (var5 > getChildCount()) { return -1; } return var5; } 	1	0	1	1	1	0
@Override public Object Func1(GenericUDF.DeferredObject[] var1) throws HiveException { assert var1.length == 4; String var2 = getArgument(0, var1); String var3 = getArgument(1, var1); String var4 = getArgument(2, var1); String var5 = getArgument(3, var1); List<Object> var6 = new ArrayList<Object>(4); try { OccurrenceParseResult<AtomizedLocalDate> var7 = TemporalInterpreter.interpretEventDate(var2, var3, var4, var5); OccurrenceParseResult<TemporalAccessor> var8 = TemporalInterpreter.interpretRecordedDate(var2, var3, var4, var5); if (var7.isSuccessful() && var7.getIssues().isEmpty()) { var6.add(var7.getPayload().getYear()); var6.add(var7.getPayload().getMonth()); var6.add(var7.getPayload().getDay()); var6.add(TemporalAccessorUtils.toUTCDate(var8.getPayload()).getTime()); } else{ var6.add(null); var6.add(null); var6.add(null); var6.add(null); } } catch (Exception e) { } return var6; } 	0	1	0	0	0	0
"private void Func1(int var1, COSArray var2) { for (int var3 = 0; var3 < var2.size(); var3++) { if(var2.at(var3).getType().isNumber()) { LOGGER.debug(""W array in CIDFont has invalid entry.""); continue; } this.singleMappings.put(var1 + var3, var2.at(var3).getReal()); } } "	1	1	1	1	0	0
@Override public int[] Func1(Graph var1, Graph var2, ConsistencyCheckPrecedenceGraph var3) { SolverFactory var4 = getSolverFactory(); var4.setParameter(Solver.VERBOSE, 0); Problem var5 = createIlpProblemFromGraphs(var1, var2, var3); variableCount = var5.getVariablesCount(); constraintCount = var5.getConstraintsCount(); Solver var6 = var4.get(); Result var7 = var6.Func1(var5); int[] var8 = getArrayFromResult(var7); return var8; } 	1	0	1	0	1	0
public void Func1(String var1, Cookie var2) { cookies.putIfAbsent(var1, var2); } 	1	0	1	0	1	0
public void Func1(String var1, String var2) { headers.putIfAbsent(var1, var2); } 	1	0	1	1	1	0
public void Func1(String var1, String var2) { attributes.putIfAbsent(var1, var2); } 	1	0	1	1	1	0
"public static URL Func1(URL var1) { if (var1 != null && var1.toString().endsWith("".jpg"")) { int var2 = var1.toString().lastIndexOf('/'); if (var2 > 0) { String var3 = var1.toString().substring(0,var2); String var4 = var1.toString().substring(var2); if(var4 != null && var4.endsWith("".jpg"") && var4.length() > 5) { var4 = var4.substring(1,var4.length()-4); } int var5 = var3.toString().lastIndexOf('/'); if (var5 > 0 && var3.length() > 1) { String var6 = var3.substring(var5+1); URL var7; try { var7 = new URL(""http://www.data18.com/viewer/"" + ""1"" + var6 + ""/"" + var4); return var7; } catch (MalformedURLException e) { e.printStackTrace(); } } } } return var1; } "	1	0	1	0	1	0
public Builder Func1() { keys_ = akka.protobuf.LazyStringArrayList.EMPTY; bitField0_ = (bitField0_ & ~0x00000004); onChanged(); return this; } 	0	1	0	0	0	0
"public static Object Func1(String var1, Object var2) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException { String[] var3 = var1.split(""\\.""); Class<?> var4 = var2.getClass(); Object var5 = var2; for (String Func1 : var3) { Field var7 = var4.getDeclaredField(Func1); var7.setAccessible(true); var4 = var7.getType(); var5 = var7.get(var5); } return var5; } "	1	0	0	1	1	0
"private void Func1(float var1, float var2, boolean var3, boolean var4, int var5) { Bitmap var6 = this.imageBitmap.copy(Bitmap.Config.ARGB_8888, true); Paint var7 = this.finalImpactPaint; if (var3) { this.imageBitmap = var6; } else { var7 = this.currentImpactPaint; } Canvas var8 = new Canvas(var6); if (!var4) { var2 = var2 + Y_PADDING; } var8.drawCircle(var1, var2, ARROW_IMPACT_RADIUS, var7); double var9 = Math.sqrt(Math.pow(var1 - this.targetCenterX, 2) + Math.pow(var2 - this.targetCenterY, 2)); int var10 = (int) (10 - Math.floor(var9 / this.pointWidth)); if (var10 < 0) { var10 = 0; } boolean var11 = (var10 == 10 && (var9 / this.pointWidth) < 0.5); this.targetImageView.setAdjustViewBounds(true); this.targetImageView.setImageBitmap(var6); TextView var12 = this.currentScoreText[var5]; var12.getBackground().setColorFilter(new PorterDuffColorFilter(TournamentHelper.getBackground(var10), PorterDuff.Mode.SRC_IN)); var12.setText(TournamentHelper.getUserScore(var10, var11)); var12.setTextColor(TournamentHelper.getFontColor(var10)); if (var3 && !var4) { this.addArrowData(var1, var2, var10, var11); this.serie.updateTotalScore(var10); } if (var3) { this.totalSerieScoreText.setText(String.format(""%s / %s"", this.serie.getTotalScore(), TournamentConfiguration.MAX_SCORE_PER_SERIES)); this.arrowUndoButton.setEnabled(true); } } "	0	1	0	0	0	0
"public void Func1(final String var1){ final String[] var2 = currentDir.split(Pattern.quote(separator), -1); final String var3 = new File(baseDir, var1).getParent(); final String[] var4 = var3.split(Pattern.quote(separator)); final int var5 = getCommonIndex(var2, var4); for (int var6 = var2.length - 1; var6 >= var5; var6--) { final File var7 = createDirectoryToFile(var5, var2, var6); addIfExists(var7, ""teardown.html""); } for (int var6 = var5; var6 < var4.length; var6++) { final File var7 = createDirectoryToFile(var5, var4, var6); addIfExists(var7, ""setup.html""); } final File var7 = new File(baseDir); addIfExists(var7, var1); currentDir = var3; } "	1	0	1	1	1	0
"@Override public boolean Func1(APIIdentifier var1, int var2, boolean var3) throws APIManagementException { GenericArtifact var4 = APIUtil.getAPIArtifact(var1, registry); Boolean var5 = false; try { if (var3) { var4.checkLCItem(var2, APIConstants.API_LIFE_CYCLE); } else { var4.uncheckLCItem(var2, APIConstants.API_LIFE_CYCLE); } var5 = true; } catch (GovernanceException e) { handleException(""Error while setting registry lifecycle checklist items for the API: "" + var1.getApiName(), e); } return var5; } "	1	0	1	0	1	0
protected OperableTrigger Func1(String var1, String var2, JobDetail var3, Long var4) { return Func1(var1, var2, var3, var4, null); } 	1	0	1	0	1	0
"private List<Account> Func1(Statement var1, boolean var2) { String var3 = ""SELECT Counter, retweets.LocationId, AccountId, Code, Day FROM retweets JOIN final ON retweets.AccountId=final.val JOIN day ON retweets.DayId=Day.Id JOIN location ON retweets.LocationId=location.Id;""; String var4 = ""SELECT SUM(Counter), retweets.LocationId, AccountId, Code FROM retweets JOIN final ON retweets.AccountId=final.val JOIN location ON retweets.LocationId=location.Id GROUP BY LocationId, AccountId;""; ResultSet var5 = null; runningRequest = true; try { var5 = var1.executeQuery(var2 ? var3 : var4); } catch (SQLException e) { sqlExceptionLog(e, var1); } finally { runningRequest = false; } if (var5 == null) return new ArrayList<Account>(); List<Account> var6 = new ArrayList<Account>(); try { while (var5.next()) { int var7 = var5.getInt(3); Account var8 = null; Iterator<Account> var9 = var6.iterator(); while (var9.hasNext() && var8 == null) { Account var10 = var9.next(); if (var10.getId() == var7) { var8 = var10; } } if (var8 == null) { var6.add(new Account(var7, var5.getString(2), new Retweets( (var2 ? var5.getDate(4) : null), var5.getInt(1), var5.getInt(2)))); } else { Retweets var11 = new Retweets( (var2 ? var5.getDate(""Day"") : null), var5.getInt(1), var5.getInt(2)); var11.setLocationCode(var5.getString(""Code"")); var8.addRetweet(var11); } } } catch (SQLException e) { sqlExceptionResultLog(e); return new ArrayList<Account>(); } finally { closeResultAndStatement(var1, var5); } return var6; } "	0	0	0	1	1	0
"@VisibleForTesting List<File> Func1() { List<File> var1 = newArrayList(); File[] var2 = new File(getWorkPath()).listFiles(); if (var2 == null) { messageProducer.send(new DebugMessage(this, ""Problems with reading var2 from current directory: "" + getAbsolutePath())); return var1; } for (File var3 : var2) { if (var3.isFile()) { var1.add(var3); } } return asList(var2); } "	1	0	1	1	1	0
private static boolean Func1(byte[] var1, int var2, int var3) { int var4 = var3; while (var3 > 0 && var2 + 1 < var4) { if (var3 < kNalUSize) { return false; } int var5 = var1[var2] << 8 | var1[var2+1]; var2 += kNalUSize; var3 -= kNalUSize; if (var5 > var3) { return false; } var2 += var5; var3 -= var5; } return true; } 	1	0	0	1	0	0
@Override public Integer Func1(final Genotype<IntegerGene> var1) { final int[] var2 = GeneticAlgorithm.genotypeToIntArray(var1); int var3 = 0; for (int var4 = 0; var4 < var2.length - 1; var4++) { if (DegreeWeights.getCommon(var2[var4] - 1, var4 + 1) - 1 == 1) var3++; } return var3; } 	1	0	0	1	1	0
public void Func1() { for (Simulation var1 : simulations) var1.update(); List<Event> var2 = EventRegistry.getEventsOfCategory(EventCategory.SIMULATION); for (Event var3 : var2) { if (var3.getType() == EventType.SIMU_PLANET_END) { long var4 = Long.parseLong(var3.getArgs()[0]); simulations.remove(getSimulationById(var4)); List<EventCategory> var5 = new ArrayList<EventCategory>(1); var5.add(EventCategory.GENETIC_TRAINER); EventRegistry .fire(new Event(EventType.TRAINER_SIMU_END, var5, new String[] { var3.getArgs()[0] })); } } if (simulations.size() == 0) { List<EventCategory> var5 = new ArrayList<EventCategory>(1); var5.add(EventCategory.GENETIC_TRAINER); EventRegistry.fire(new Event(EventType.TRAINER_SIMUS_END, var5)); } for (Event var3 : var2) { int var4 = Integer.parseInt(var3.getArgs()[0]); if (!evalEvents.containsKey(var4)) evalEvents.put(var4, new ArrayList<Event>()); evalEvents.get(var4).add(var3); } } 	0	1	0	0	0	0
private Map<String, Object> Func1(Property var1, String var2){ Map<String, Object> var3 = new HashMap<>(); if(var1 instanceof ArrayProperty) { var3.put(var1.getName(), Func1(((ArrayProperty) var1).getItems(), var2)); }else if(var1 instanceof RefProperty){ Model var4 = swagger.getDefinitions().get(((RefProperty) var1).getSimpleRef()); var4.getProperties().forEach((k, v) -> { v.setName(k); Map<String, Object> var5 = Func1(v, var2); var3.putAll(var5); }); }else if(var1 instanceof ObjectProperty){ var3.putAll(((ObjectProperty)var1).getProperties()); ((ObjectProperty) var1).getProperties().forEach((k, v) -> { v.setName(k); Map<String, Object> var5 = Func1(v, var2); var3.putAll(var5); }); }else{ var3.put(var1.getName(), mock.eval(getTypeEvalScript(var1, var2))); } return var3; } 	0	1	0	0	0	0
public boolean Func1() { long var1 = getLastAuthTime(); long var2 = Calendar.getInstance().getTimeInMillis(); if(var1 <= var2 && (var2 - 30000) < var1) { return false; } return true; } 	0	1	0	0	0	0
private void Func1(View var1, double var2, double var3) { if (var1 == null) { return; } TextView var4 = (TextView) var1.findViewById(R.id.textViewIncome); TextView var5 = (TextView) var1.findViewById(R.id.textViewExpenses); TextView var6 = (TextView) var1.findViewById(R.id.textViewDifference); var4.setText(currencyUtils.getCurrencyFormatted(currencyUtils.getBaseCurrencyId(), var2)); var4.setTypeface(null, Typeface.BOLD_ITALIC); var5.setText(currencyUtils.getCurrencyFormatted(currencyUtils.getBaseCurrencyId(), Math.abs(var3))); var5.setTypeface(null, Typeface.BOLD_ITALIC); var6.setText(currencyUtils.getCurrencyFormatted(currencyUtils.getBaseCurrencyId(), var2 - Math.abs(var3))); var6.setTypeface(null, Typeface.BOLD_ITALIC); Core var7 = new Core(getActivity().getApplicationContext()); if (var2 - Math.abs(var3) < 0) { var6.setTextColor(getResources().getColor(var7.resolveIdAttribute(R.attr.holo_red_color_theme))); } else { var6.setTextColor(getResources().getColor(var7.resolveIdAttribute(R.attr.holo_green_color_theme))); } } 	1	0	1	0	1	0
public static <E extends AbstractEntity> List<E> Func1(List<E> var1, List<E> var2) { return Func1(var1, var2, null); } 	1	0	1	0	1	0
private double Func1(MemoryMapConfigMemoryItem... var1) { double var2 = 0d; String var3 = getRecorder().getScale(); for (MemoryMapConfigMemoryItem var4 : var1) { if (getRecorder().getShowBytesOnGraph()) { if (var4.getTopLevelMemoryMax() != null) { var2 = var2 + HexUtils.byteCount(var4.getTopLevelMemoryMax(), getRecorder().getWordSize(), var3); if (var2 > 0d) { return var2; } } } else { if (var4.getTopLevelMemoryMax() != null) { var2 = var2 + HexUtils.byteCount(var4.getTopLevelMemoryMax(), getRecorder().getWordSize(), var3); if (var2 > 0d) { return var2; } } } } return var2; } 	0	1	0	0	0	0
"private static void Func1(String[] var1) { for (int var2 = 0; var2 < var1.length; var2++) { Util.debug(""Upgrading project "" + var1[var2] + "" from version 1.0 to version 1.1d1""); String var3 = FileStorage.JN_DOCPATH + var1[var2] + File.separator + "".tasklist""; Document var4 = FileStorage.openDocument(var3); Element var5 = var4.getRootElement(); Elements var6 = var5.getChildElements(""var8""); for (int var7 = 0; var7 < var6.size(); var7++) { Element var8 = var6.get(var7 ); Attribute var9 = var8.getAttribute(""parent""); if ((var9 == null) || (var9.getValue() == """")) { } else { String var10 = var9.getValue(); for (int var11 = 0; var11 < var6.size(); var11++) { Element var12 = var6.get(var11); if(var10.equals(var12.getAttribute(""id"").getValue())) { var8.removeAttribute(var9); var8.detach(); var12.appendChild(var8); } } } } var4.setDocType(getCurrentDocType()); FileStorage.saveDocument(var4,var3); } } "	0	1	1	0	1	0
"public String Func1(long var1, int var2, String var3, String var4){ String var5 =""sent""; if (var4 != null && !(var4.equals(""""))) var5 = ""archived""; else var5 = GetStatusByIds(var1, var2, var3); return var5; } "	1	0	1	1	1	0
"@RequestMapping(value = ""/content/Func1"", method = RequestMethod.GET, headers = ""Accept=application/json"") public SearchResult Func1(@RequestParam(value = ""var1"") String var1) { List<String> var2 = Arrays.asList(var1.split("","")); return contentService.search(new Query(""*:*"", new HashMap<>(), var2, 0, 10)); } "	1	1	1	1	0	0
"private static GifHeaderDirectory Func1(@NotNull final SequentialReader var1) throws IOException { GifHeaderDirectory var2 = new GifHeaderDirectory(); String var3 = var1.getString(3); if (!var3.equals(""GIF"")) { var2.addError(""Invalid GIF file var3""); return var2; } String var4 = var1.getString(3); if (!var4.equals(GIF_87A_VERSION_IDENTIFIER) && !var4.equals(GIF_89A_VERSION_IDENTIFIER)) { var2.addError(""Unexpected GIF var4""); return var2; } var2.setString(GifHeaderDirectory.TAG_GIF_FORMAT_VERSION, var4); var2.setInt(GifHeaderDirectory.TAG_IMAGE_WIDTH, var1.getUInt16()); var2.setInt(GifHeaderDirectory.TAG_IMAGE_HEIGHT, var1.getUInt16()); short var5 = var1.getUInt8(); int var6 = 1 << ((var5 & 7) + 1); int var7 = ((var5 & 0x70) >> 4) + 1; boolean var8 = (var5 & 0xf) != 0; var2.setInt(GifHeaderDirectory.TAG_COLOR_TABLE_SIZE, var6); if (var4.equals(GIF_89A_VERSION_IDENTIFIER)) { boolean var9 = (var5 & 8) != 0; var2.setBoolean(GifHeaderDirectory.TAG_IS_COLOR_TABLE_SORTED, var9); } var2.setInt(GifHeaderDirectory.TAG_BITS_PER_PIXEL, var7); var2.setBoolean(GifHeaderDirectory.TAG_HAS_GLOBAL_COLOR_TABLE, var8); var2.setInt(GifHeaderDirectory.TAG_BACKGROUND_COLOR_INDEX, var1.getUInt8()); int var10 = var1.getUInt8(); if (var10 != 0) { float var11 = (float)((var10 + 15d) / 64d); var2.setFloat(GifHeaderDirectory.TAG_PIXEL_ASPECT_RATIO, var11); } return var2; } "	1	0	0	1	0	0
"@Override public long Func1(Customer var1, Trip var2) { if (var2.getNumberOfAvailable() == 0) { throw new TravelAgencyServiceException(""Requested var2 is no longer available.""); } Reservation var3 = new Reservation(); var3.setCustomer(var1); var3.setTrip(var2); BigDecimal var4 = var2.getPrice(); for (Excursion var5 : var2.getExcursions()) { var4 = var4.add(var5.getPrice()); } var3.setPrice(var4); long var6 = reservationDao.create(var3); var1.addReservation(var3); update(var1); var2.addReservation(var3); var2.setNumberOfAvailable(var2.getNumberOfAvailable()-1); tripDao.update(var2); return var6; } "	0	1	0	0	0	0
@Override public void Func1(View var1) { if(!formComment.Validate()) return; IssueArgument var2 = new IssueArgument(); var2.setArgument(getArguments()); RedmineConnection var3 = ConnectionModel.getItem(getActivity(), var2.getConnectionId()); RedmineJournal var4 = new RedmineJournal(); var4.setIssueId((long) var2.getIssueId()); formComment.getValue(var4); SelectIssueJournalPost var5 = new SelectIssueJournalPost(getHelper(), var3){ private boolean var6 = true; @Override protected void Func2(Exception var7) { var6 = false; ActivityHelper.toastRemoteError(getActivity(), ActivityHelper.ERROR_APP); super.Func2(var7); } @Override protected void Func3(int var8) { var6 = false; ActivityHelper.toastRemoteError(getActivity(), var8); super.Func3(var8); } @Override protected void Func4(Void var9) { super.Func4(var9); if(mSwipeRefreshLayout != null && mSwipeRefreshLayout.isRefreshing()) mSwipeRefreshLayout.setRefreshing(false); if(var6){ Toast.makeText(getActivity(), R.string.remote_saved, Toast.LENGTH_LONG).show(); formComment.clear(); } } }; if(mSwipeRefreshLayout != null && !mSwipeRefreshLayout.isRefreshing()) mSwipeRefreshLayout.setRefreshing(true); var5.execute(var4); } 	0	1	0	0	0	0
public static File Func1( Context var1, String var2){ File var3 = new File(var1.getExternalFilesDir(null) + File.separator + var2); if(!var3.exists()){ var3.mkdir(); } return var3; } 	0	1	0	0	0	0
@Test public void Func1() throws Exception { ReadableBuffer var1 = var1(); ByteArrayOutputStream var2 = new ByteArrayOutputStream(); var1.readBytes(var2, msg.length()); Arrays.equals(msg.getBytes(UTF_8), var2.toByteArray()); assertEquals(0, var1.readableBytes()); } 	0	1	0	0	0	0
"@Override public Dialog Func1(Bundle var1) { String var2 = mTextViewBirthday.getText().toString(); String[] var3 = var2.split(""/""); int var4 = Integer.parseInt(var3[YEAR]); int var5 = Integer.parseInt(var3[MONTH]); int var6 = Integer.parseInt(var3[DAY]); return new DatePickerDialog(getActivity(), this, var4, var5, var6); } "	1	0	1	1	1	0
private ResolvableToSingleWithRelationships Func1(CanonicalPath var1) { Tenants.Single var2 = inventory.tenants().get(getTenantId()); ResolvableToSingleWithRelationships var3 = var2; if (var1.getEnvironmentId() != null) { Environments.Single var4 = var2.environments().get(var1.getEnvironmentId()); if (var1.getFeedId() != null) { if (var1.getResourceId() != null) { var3 = var4.feeds().get(var1.getFeedId()).resources().get(var1.getResourceId()); } else if (var1.getMetricId() != null) { var3 = var4.feeds().get(var1.getFeedId()).metrics().get(var1.getMetricId()); } else { var3 = var4.feeds().get(var1.getFeedId()); } } else if (var1.getResourceId() != null) { var3 = var4.feedlessResources().get(var1.getResourceId()); } else if (var1.getMetricId() != null) { var3 = var4.feedlessMetrics().get(var1.getMetricId()); } else { var3 = var4; } } else if (var1.getResourceTypeId() != null) { var3 = var2.resourceTypes().get(var1.getResourceTypeId()); } else if (var1.getMetricTypeId() != null) { var3 = var2.resourceTypes().get(var1.getMetricTypeId()); } return var3; } 	0	1	0	0	0	0
"@Test public void Func1() { Map<String, String> var1 = new HashMap<String, String>(); var1.put(""path"", path.toString()); df.save(""org.apache.spark.sql.json"", SaveMode.ErrorIfExists, var1); List<StructField> var2 = new ArrayList<>(); var2.add(DataTypes.createStructField(""b"", DataTypes.StringType, true)); StructType var3 = DataTypes.createStructType(var2); DataFrame var4 = sqlContext.load(""org.apache.spark.sql.json"", var3, var1); checkAnswer(var4, sqlContext.sql(""SELECT b FROM jsonTable"").collectAsList()); } "	1	0	1	0	1	0
"Component Func1() { Label var1 = new Label(""Vaadin App Layout""); var1.addStyleName(ValoTheme.LABEL_H4); Label var2 = new Label(""Version 0.8.6""); var2.addStyleName(ValoTheme.LABEL_SMALL); VerticalLayout var3 = new VerticalLayout(getResourceButton(), var1, var2); var3.addStyleName(APP_LAYOUT_MENU_BAR_ELEMENT); var3.setMargin(false); var3.setSpacing(false); var3.setMargin(new MarginInfo(true, false)); return var3; } "	0	1	1	1	1	0
"@Override public synchronized void Func1() { if (System.currentTimeMillis() - lastFlush >= batchTimeout && batch != batchSize) { logger.trace(""[{}] Flush timeout occurred"", name); flush(); } } "	1	0	1	0	1	0
protected static void Func1(final Activity var1, final Intent var2, Preference var3, Preference var4) { var3.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() { @Override public boolean Func2(Preference var5, Object var6) { if (KEY_THEME.equals(var5.getKey())) { Utils.updateTheme((String) var6); TaskStackBuilder.create(var1) .addNextIntent(new Intent(var1, MainActivity.class)) .addNextIntent(var2) .startActivities(); } return true; } }); setListPreferenceSummary((ListPreference) var3); ((CheckBoxPreference)var4).setChecked(MMoviesPreferences.isLargeDataOverWifiOnly(var1.getApplicationContext())); } 	0	1	0	0	0	0
"private void Func1(final MapViewHolder var1, final int var2) { final ChatMessage var3 = getData().get(var2); var1.chatMessageView.setBackgroundColor(ContextCompat.getColor(currContext, isSelected(var2) ? R.color.translucent_blue : android.R.color.transparent)); if (var3 != null) { try { final MapHelper var4 = new MapHelper(var3.getContent()); var1.var8.setText(var4.getDisplayText()); var1.timestampTextView.setText(var3.getTimeStamp()); Glide.with(currContext).load(var4.getMapURL()).into(var1.mapImage); var1.mapImage.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var5) { var1.Func2(var5); if (AndroidHelper.isGoogleMapsInstalled(currContext) && var4.isParseSuccessful()) { Uri var6 = Uri.parse(String.format(""geo:%s,%s?z=%s"", var4.getLattitude(), var4.getLongitude(), var4.getZoom())); Intent var7 = new Intent(Intent.ACTION_VIEW, var6); var7.setPackage(AndroidHelper.GOOGLE_MAPS_PKG); currContext.startActivity(var7); } else { Intent var7 = new Intent(Intent.ACTION_VIEW); var7.setData(Uri.parse(var4.getWebLink())); currContext.startActivity(var7); } } }); if (highlightMessagePosition == var2) { String var8 = var1.var8.getText().toString(); SpannableString var9 = new SpannableString(var8); Pattern var10 = Pattern.compile(query, Pattern.CASE_INSENSITIVE); Matcher var11 = var10.var11(var9); while (var11.find()) { int var12 = var11.start(); int var13 = var11.end(); var9.setSpan(new BackgroundColorSpan(Color.parseColor(""#2b3c4e"")), var12, var13, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); } var1.var8.setText(var9); } } catch (Exception e) { e.printStackTrace(); } } } "	0	1	0	0	0	0
public void Func1() { if (Gdx.input.justTouched()) { camera.unproject(touchPoint.set(Gdx.input.getX(), Gdx.input.getY(), 0)); if (playBounds.contains(touchPoint.x, touchPoint.y)) { GameScreen var1 = new GameScreen(game); game.setScreen(var1); return; } if (exitBounds.contains(touchPoint.x, touchPoint.y)) { Gdx.app.exit(); } } } 	0	1	0	0	0	0
"public void Func1(){ for(Controller var1 : Func1.keySet()){ var1.poll(); EventQueue var2 = var1.getEventQueue(); Event var3 = new Event(); while(var2.getNextEvent(var3)){ if(debugOutput) System.out.println(""HvlControllerProfile: Controller var3 at: "" + var3.getComponent().getName() + "" with a var5 of "" + var3.getValue()); for(String var4 : staticPollValues){ if(var3.getComponent().getName().contains(staticPollAnnotations.get(var4).component())){ float var5 = var3.getValue(); if(Math.abs(var5) < Math.abs(staticPollAnnotations.get(var4).deadZone())) var5 = 0; var5 *= staticPollAnnotations.get(var4).amplifier(); var5 = HvlMath.constrain(var5, staticPollAnnotations.get(var4).min(), staticPollAnnotations.get(var4).max()); ArrayList<Float> var6 = Func1.get(var1); var6.set(staticPollValues.indexOf(var4), var5); Func1.put(var1, var6); } } } } } "	0	1	0	0	0	0
@Override public void Func1(RecyclerView.ViewHolder var1, int var2) { Daily var3 = mNewsList.get(var2); switch (var1.getItemViewType()) { case ITEM_TYPE_TEXT: ((ThemeViewHolder) var1).mTitle.setText(var3.title); break; case ITEM_TYPE_IMAGE: ((ImageViewHolder) var1).mTitle.setText(var3.title); Glide.with(mContext).load(var3.images.get(0)).into(((ImageViewHolder) var1).mCover); break; } } 	0	1	0	0	0	0
private void Func1(){ SearchRoomSO var1 = new SearchRoomSO(); var1.setFirstName(etWizardFirstName.getText().toString()); var1.setLastName(etWizardLastName.getText().toString()); var1.setBedType(availableRooms.getRoomSO().get(0).getBeds().get(0).getBedDescript()); var1.setBedTypeId(availableRooms.getRoomSO().get(0).getBeds().get(0).getId()); ConfirmRoomsInfoAdapter var2 = new ConfirmRoomsInfoAdapter(getActivity(), rooms, var1); confirmRoomInfoList.setAdapter(var2); setListViewHeightBasedOnChildren(wizardRoomsList); } 	1	1	0	1	1	0
public void Func1() { for (double var1 : new double[] {0, 0.5, 1, 2, 2.5, Double.POSITIVE_INFINITY}) toDoubleTest(ref -> new Norm(ref, var1).calculate(), v -> v.kNorm(var1)); } 	0	1	0	1	1	0
"public List<String> Func1() throws IOException { List<String> var1 = new ArrayList<String>(); File var2 = new File(getDockerFolder(), "".dockerignore""); if (var2.exists()) { int var3 = 0; List<String> var4 = FileUtils.readLines(var2); for (String var5 : var4) { var3++; var5 = var5.trim(); if (var5.isEmpty()) { continue; // skip empty lines } var5 = FilenameUtils.normalize(var5); try { var1.add(var5); } catch (GoLangFileMatchException e) { throw new DockerClientException(String.format( ""Invalid var5 '%s' on line %s in .dockerignore file"", var5, var3)); } } } return var1; } "	0	1	0	0	0	0
"public void Func1() { if (!this.isTracking) { Log.d(""JC"", ""TrackingManager: Starting to track""); bikeLocationService.addGPSListener(this); this.curLocationList = new ArrayList<Location>(); this.isTracking = true; } } "	0	1	0	0	0	0
"public void Func1(boolean var1) { if (this.isTracking && (!manualOverride || var1)) { Log.d(""JC"", ""TrackingManager: Stopping track""); bikeLocationService.removeGPSListener(this); this.isTracking = false; makeAndSaveTrack(); this.manualOverride = false; } } "	0	1	0	0	0	0
private void Func1() { observerCount--; if (observerCount == 0) { choreographer.removeFrameCallback(this); sampledVsyncTimeNs = 0; } } 	0	1	1	0	1	0
private void Func1() { observerCount++; if (observerCount == 1) { choreographer.postFrameCallback(this); } } 	0	1	1	0	1	0
private void Func1() { setOrientation(LinearLayout.VERTICAL); nodeContainer = new RelativeLayout(getContext()); nodeContainer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT)); nodeContainer.setId(R.id.node_header); ContextThemeWrapper var1 = new ContextThemeWrapper(getContext(), containerStyle); nodeItemsContainer = new LinearLayout(var1); nodeItemsContainer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT)); nodeItemsContainer.setId(R.id.node_items); nodeItemsContainer.setOrientation(LinearLayout.VERTICAL); nodeItemsContainer.setVisibility(View.GONE); addView(nodeContainer); addView(nodeItemsContainer); } 	0	1	0	0	0	0
"@Override public String Func1() { return String.format(""(%d, %d)"", x, y); } "	1	0	1	1	1	0
private void Func1(final String var1, final long var2) { final String var3 = properties.getProperty(var1, Long.toString(var2)); final SimpleLongProperty var4 = new SimpleLongProperty(var2); var4.set(Long.parseLong(var3)); var4.addListener((aObs, aOld, aNew) -> { properties.setProperty(var1, Long.toString(aNew.intValue())); persist(); }); propertiesMap.put(var1, var4); } 	0	1	1	1	1	0
@Nullable public Model Func1() { return realmQuery.findAll().first(null); } 	1	0	1	0	1	0
"private void Func1(String var1,HpccConnection var2, Map<String, Set<String>> var3) throws IOException, ParserConfigurationException, SAXException { StringBuilder var4 = new StringBuilder(); if (var2.getIsSSL()) { var4.append(Constants.HTTPS); } else { var4.append(Constants.HTTP); } var4.append(var2.getHostIp()) .append("":"") .append(var2.getWsEclPort()) .append(""/WsEcl/submit/query/"") .append(var2.getClusterType()) .append(""/"") .append(var1) .append(""/xml?""); URL var5 = new URL(var4.toString()); URLConnection var6 = var5.openConnection(); String var7 = var2.getUsername() + "":"" + var2.getPassword(); String var8 = new String(Base64.encodeBase64(var7.getBytes())); var6.setRequestProperty(AUTHORIZATION, BASIC + var8); if (LOG.isDebugEnabled()) { LOG.debug(""URL ->"" + var5); } final InputStream var9 = var6.getInputStream(); if (var9 != null) { final DocumentBuilderFactory var10 = DocumentBuilderFactory.newInstance(); final DocumentBuilder var11 = var10.newDocumentBuilder(); final Document var12 = var11.parse(var9); Node var13 = null; Element var14 = null, var15 = null; NodeList var16 = null; final NodeList var17 = var12.getElementsByTagName(""Row""); for (int var18 = 0; var18 < var17.getLength(); var18++) { var13 = var17.item(var18); if (var13.getNodeType() == Node.ELEMENT_NODE) { var14 = (Element) var13; for (Entry<String,Set<String>> var19: var3.entrySet()) { var16 = var14.getElementsByTagName(StringUtils.removeEndIgnoreCase(var19.getKey(), ""in"")); var15 = (Element) var16.item(0); if (var15 != null) { var19.getValue().add(var15.getTextContent()); } } } } } } "	0	1	0	0	0	0
protected EmbeddedBroker Func1(int var1) { return broker(Integer.toString(var1)); } 	1	0	1	0	0	0
"@Override public void Func1() { geofld = properties.get(""geofld"").getValueAsString(); newdef = properties.get(""newDef"").getValueAsString(); accuracy = (Integer)properties.get(""accuracy"").getValue(); try { FieldDefinition var1 = new DefaultFieldDefinition(""mgrs"", FieldType.String); fds = new ArrayList<FieldDefinition>(); fds.add(var1); } catch (ConfigurationException e) { e.printStackTrace(); } } "	0	1	0	0	0	0
@Bean public EnableRedisKeyspaceNotificationsInitializer Func1(RedisConnectionFactory var1) { return new EnableRedisKeyspaceNotificationsInitializer(var1, configureRedisAction); } 	0	0	0	0	0	1
"@Override protected String Func1(final EObject var1) throws IllegalArgumentException { for (String var2 : this.attributeNames) { final String var3 = EcoreBridge.getStringValueOfAttribute(var1, var2); if (null != var3) { String var4 = (var1.eContainingFeature() == null ? ""<root>"" : var1.eContainingFeature().getName()) + SUBDIVIDER + var1.eClass().getName() + SUBDIVIDER + var2 + ""="" + var3; return var4; } else { EStructuralFeature var5 = var1.eClass().getEStructuralFeature(var2); if (var5 != null && !var1.eIsSet(var5)) { return var2; } } } throw new RuntimeException( ""None of '"" + String.join(""', '"", this.attributeNames) + ""' found for eObject '"" + var1 + ""'""); } "	0	0	0	0	0	1
private List<Integer> Func1(float[] var1) { List<Integer> var2 = new LinkedList<>(); var2.add(1); float var3 = 0; for (int var4 = 1; var4 < var1.length; var4++) { if (var3 + var1[var4] > PAGE_WIDTH - var1[0]) { var2.add(var4); var3 = 0; } var3 += var1[var4]; } var2.add(-1); return var2; } 	1	0	1	1	1	0
public static Tristate Func1(GPClaim var1, String var2, String var3, Set<Context> var4) { if (var4 == null) { var4 = new HashSet<>(GriefPreventionPlugin.GLOBAL_SUBJECT.getActiveContexts()); if (var1.parent != null && var1.getData().doesInheritParent()) { var4.add(var1.parent.getContext()); } else { var4.add(var1.getContext()); } } Tristate var5 = GriefPreventionPlugin.GLOBAL_SUBJECT.getPermissionValue(var4, var2); if (var5 != Tristate.UNDEFINED) { return var5; } if (var3 != null) { var5 = GriefPreventionPlugin.GLOBAL_SUBJECT.getPermissionValue(var4, var3); if (var5 != Tristate.UNDEFINED) { return var5; } } return getFlagDefaultPermission(var1, var2); } 	1	1	0	0	1	0
"@Override protected ISpoofaxAnalyzeResults Func1(Map<String,ISpoofaxParseUnit> var1, Map<String,ISpoofaxParseUnit> var2, IMultiFileScopeGraphContext var3, HybridInterpreter var4, String var5) throws AnalysisException { String var6 = var3.location().getName().getURI(); for (String var7 : var2.keySet()) { var3.removeUnit(var7); } InitialResult var8; if (var3.var8().isPresent()) { var8 = var3.var8().get(); } else { IStrategoTerm var9 = doAction(var5, actionBuilder.initialOf(var6), var3, var4); var8 = ResultTerms.initialOf().match(strategoTerms.fromStratego(var9)).orElseThrow( () -> new AnalysisException(var3, ""Invalid initial var26."")); var3.setInitialResult(var8); } final Map<String,IStrategoTerm> var10 = Maps.newHashMap(); final Multimap<String,IMessage> var11 = HashMultimap.create(); final Multimap<String,IMessage> var12 = HashMultimap.create(); for (Map.Entry<String,ISpoofaxParseUnit> var7 : var1.entrySet()) { String var13 = var7.getKey(); ISpoofaxParseUnit var14 = var7.getValue(); IMultiFileScopeGraphUnit var15 = var3.var15(var13); var15.clear(); try { IStrategoTerm var16 = doAction(var5, actionBuilder.unitOf(var13, var14.ast(), var8.getArgs()), var3, var4); UnitResult var17 = ResultTerms.unitOf().match(strategoTerms.fromStratego(var16)) .orElseThrow(() -> new MetaborgException(""Invalid var15 var26."")); IStrategoTerm var18 = strategoTerms.toStratego(var17.getAST()); var10.put(var13, var18); var11.putAll(var13, analysisCommon.ambiguityMessages(var14.var13(), var18)); var15.setUnitResult(var17); } catch (MetaborgException e) { logger.warn(""File analysis failed."", e); var12.put(var13, MessageFactory.newAnalysisErrorAtTop(var14.var13(), ""File analysis failed."", e)); } } final List<Iterable<IConstraint>> var19 = Lists.newArrayList(); var3.var8().ifPresent(i -> var19.add(i.getConstraints())); for (IMultiFileScopeGraphUnit var15 : var3.units()) { var15.var17().ifPresent(u -> var19.add(u.getConstraints())); } Solution var20; try { var20 = Solver.solve(Iterables.concat(var19)); } catch (UnsatisfiableException e) { throw new AnalysisException(var3, e); } var3.setSolution(var20); IStrategoTerm var21 = doAction(var5, actionBuilder.finalOf(var6), var3, var4); FinalResult var22 = ResultTerms.finalOf().match(strategoTerms.fromStratego(var21)).orElseThrow( () -> new AnalysisException(var3, ""Invalid final var26."")); var3.setFinalResult(var22); Multimap<String,IMessage> var23 = messagesByFile(var20.getErrors(), MessageSeverity.ERROR); Multimap<String,IMessage> var24 = messagesByFile(var20.getWarnings(), MessageSeverity.WARNING); Multimap<String,IMessage> var25 = messagesByFile(var20.getNotes(), MessageSeverity.NOTE); final Collection<ISpoofaxAnalyzeUnit> var26 = Lists.newArrayList(); final Collection<ISpoofaxAnalyzeUnitUpdate> var27 = Lists.newArrayList(); for (IMultiFileScopeGraphUnit var15 : var3.units()) { final String var13 = var15.resource(); final Collection<IMessage> var28 = var23.get(var13); final Collection<IMessage> var29 = var24.get(var13); final Collection<IMessage> var30 = var25.get(var13); final Collection<IMessage> var31 = var11.get(var13); final Collection<IMessage> var32 = Lists.newArrayListWithCapacity(var28.size() + var29.size() + var30 .size() + var31.size()); var32.addAll(var28); var32.addAll(var29); var32.addAll(var30); var32.addAll(var31); if (var1.containsKey(var13)) { var26.add(unitService.analyzeUnit(var1.get(var13), new AnalyzeContrib(true, var28.isEmpty(), true, var10.get(var13), var32, -1), var3)); } else { FileObject var33 = resourceService.resolve(var13); var27.add(unitService.analyzeUnitUpdate(var33, new AnalyzeUpdateData(var32), var3)); } } return new SpoofaxAnalyzeResults(var26, var27, var3); } "	0	0	0	0	0	1
"@Override public void Func1(Section var1) { int var2 = 0; for (Paragraph var3 : var1.getParagraphs()) { for (Sentence var4 : var3.getSentences()) { var2 += var4.getContent().length(); } } if (var2 > getInt(""max_num"")) { addLocalizedError(var1.getJoinedHeaderContents(), var2); } } "	0	1	0	0	0	0
"@Test public void Func1() throws RedPenException { List<Document> var1 = new ArrayList<>(); var1.add(Document.builder() .setFileName(""tested file"") .addSection(0) .addSectionHeader(""foobar"") .addParagraph() .addSentence(new Sentence(""it is a piece of a cake."", 1)) .addSentence(new Sentence(""that is also a piece of a cake."", 2)) .build()); RedPen var2 = getRedPenWithSectionValidator(); List<ValidationError> var3 = var2.validate(var1).get(var1.get(0)); assertEquals(1, var3.size()); for (ValidationError var4 : var3) { assertThat(var4.getValidatorName(), is(""SectionLength"")); assertThat(var4.getMessage(), containsString(""The number of characters in the section exceeds the maximum of"")); } } "	0	0	0	0	0	1
@Override public Collection<SerialMessage> Func1(boolean var1) { ArrayList<SerialMessage> var2 = new ArrayList<SerialMessage>(); for (Map.Entry<AlarmType, Alarm> var3 : alarms.entrySet()) { if (var1 == true || var3.getValue().getInitialised() == false) { var2.add(getMessage(var3.getValue().getAlarmType())); } } return var2; } 	1	0	0	1	1	0
@Override public byte[] Func1(InputStream var1) throws CompressionException { ByteArrayOutputStream var2 = new ByteArrayOutputStream(); try (SnappyInputStream snappy = new SnappyInputStream(var1)) { IOUtils.copy(snappy, var2); } catch (IOException e) { throw new CompressionException(CompressionConstants.DECODING_ERROR + getContentEncodingName(), e); } return var2.toByteArray(); } 	0	0	0	0	0	1
"@Override public List<ListenableFuture<Void>> Func1() { List<ListenableFuture<Void>> var1 = new ArrayList<>() ; this.meshedDpnList = ItmUtils.getTunnelMeshInfo(dataBroker) ; var1.addAll( ItmInternalTunnelDeleteWorker.deleteTunnels(dataBroker, idManagerService, mdsalManager, delDpnList, meshedDpnList)); logger.debug(""Invoking Internal Tunnel delete method with DpnList to be deleted {} ; Meshed DpnList {} "",delDpnList, meshedDpnList ); List<DcGatewayIp> var2 = ItmUtils.getDcGatewayIpList(dataBroker); if(var2 != null && !var2.isEmpty()){ List<DPNTEPsInfo>  var3 = new ArrayList<>(); for( DPNTEPsInfo var4 : delDpnList){ List<TunnelEndPoints> var5 = var4.getTunnelEndPoints(); if(var5.size() == 1){ var3.add(var4); } else{ logger.error(""DPNTEPInfo not available in data store for dpnId"" + var4.getDPNID() + "". Unable to delete external tunnel for dpn ""); } } for(DcGatewayIp var6 : var2){ var1.addAll(ItmExternalTunnelDeleteWorker.deleteTunnels(dataBroker, idManagerService,  var3, var6.getIpAddress(), var6.getTunnnelType())); } } var1.addAll(ItmExternalTunnelDeleteWorker.deleteHwVtepsTunnels(dataBroker, idManagerService,delDpnList,cfgdHwVteps, this.originalTZone)); return var1 ; } "	0	1	0	0	0	0
"@Override public void Func1() { final ScheduleAdapter var1 = schedulePresenter.buildScheduleAdapter(); try { if (getActivity() == null) return; getActivity().runOnUiThread(() -> { tvStatus.setVisibility(TextView.VISIBLE); tvTitleSlidingUpPanel.setText(""Loading...""); recyclerView.setVisibility(RecyclerView.VISIBLE); recyclerView.setLayoutManager(new LinearLayoutManager(getActivity().getApplicationContext())); recyclerView.setItemAnimator(new DefaultItemAnimator()); recyclerView.setAdapter(var1); setDate(schedulePresenter.getDate()); if (var1.getItemCount() == 0) { tvStatus.setText(getActivity().getResources().getString(R.string.empty_text)); tvStatus.setTextColor(getActivity().getResources().getColor(R.color.color_accent)); } else { tvStatus.setVisibility(TextView.GONE); } }); } catch (NullPointerException e) { } slidingUpPanelLayout = setupSlidingUpPanelLayout(); setupMaterialCalendarView(recyclerView, slidingUpPanelLayout); } "	1	0	1	0	1	0
private int Func1(FormatStd var1, char[] var2, FastStringBuffer var3, ParsingUtils var4, int var5, char var6) { boolean var7 = true; boolean var8 = false; boolean var9 = true; if (var6 == '~' || var6 == '+' || var6 == '-') { String var10 = var3.getLastWord().trim(); var8 = var10.length() == 0 || PySelection.ALL_KEYWORD_TOKENS.contains(var10); if (!var8) { for (char var11 : var3.reverseIterator()) { if (var11 == ' ' || var11 == '\t') { continue; } switch (var11) { case '[': case '{': case '=': var9 = false; case '(': case ':': var7 = false; case '>': case '<': case '-': case '+': case '~': case '*': case '/': case '%': case '!': case '&': case '^': case '|': case ',': var8 = true; } break; } } else { var7 = var3.length() > 0; } } for (char var12 : var3.reverseIterator()) { if (!Character.isWhitespace(var12)) { break; } if (var12 == '\r' || var12 == '\n') { var9 = false; break; } } if (var9) { while (var3.length() > 0 && (var3.lastChar() == ' ' || var3.lastChar() == ' ')) { var3.deleteLast(); } } boolean var13 = var1.operatorsWithSpace; if (var9) { if (var7 && var13) { var3.append(' '); } } char var14 = var6; char var15 = '\0'; boolean var16 = true; while (isOperatorPart(var14, var15)) { var3.append(var14); var15 = var14; var5++; if (var5 == var2.length) { break; } var14 = var2[var5]; if (var14 == '=') { var3.append(var14); var16 = false; break; } } if (var16) { var5--; } if (!var8 && var13) { var3.append(' '); } var5 = var4.eatWhitespaces(null, var5 + 1); return var5; } 	0	0	0	0	0	1
public boolean Func1() { return  tok.ttype==StreamTokenizer.TT_WORD && !keywords.contains(tok.sval()); } 	1	0	0	1	1	0
"public boolean Func1(String var1) { LOG.debug(""Enter. OrderId: {}."", var1); boolean var2 = true; PayedOrder var3 = repository.findOne(PayedOrderSpecification.exist(var1)); if (var3 != null) { var2 = false; } LOG.debug(""Exit. Result: {}."", var2); return var2; } "	1	0	1	1	1	0
"@SuppressWarnings(""rawtypes"") public static Variable Func1(String var1, String var2, String var3) { if (var2.equalsIgnoreCase(""Boolean"")) { return Predef.Boolean(var1); } if (var2.equalsIgnoreCase(""String"")) { String[] var4 = var3.split("";""); return Predef.Nominal(var4, var1); } if (var2.equalsIgnoreCase(""Number"")) { try { Integer var5 = Integer.parseInt(var3); return Predef.Number(var5, var1); } catch (NumberFormatException e) { e.printStackTrace(); return null; } } if (var2.equalsIgnoreCase(""Amino acid"")) { return Predef.AminoAcid(var1); } if (var2.equalsIgnoreCase(""Amino acid extended"")) { return Predef.AminoAcid(var1); } if (var2.equalsIgnoreCase(""Nucleic acid"")) { return Predef.NucleicAcid(var1); } if (var2.equalsIgnoreCase(""Real"")) { return Predef.Real(var1); } if (var2.equalsIgnoreCase(""Distrib"")) { String[] var4 = var3.split("";""); if (var4.length > 1) return Predef.Distrib(var4, var1); else if (!isParameterised(var4[0]) && isEnumerable(var4[0])) { try { Variable var6 = Func1(""var6"", var4[0], null); return Predef.Distrib((Enumerable)var6.getDomain(), var1); } catch (RuntimeException ex) { throw new RuntimeException(""Invalid specification of variable: "" + var1); } } } throw new RuntimeException(""Invalid specification of variable: "" + var1); } "	0	0	0	0	0	1
@Override public void Func1(RecyclerView var1, int var2, int var3) { View var4 = findStartView(var1); if (var4 == null) { clearStickyHeader(); return; } Integer var5 = (Integer) var4.getTag(R.id.recyclerext_view_child_position); if (var5 == null) { return; } long var6 = getHeaderId(adapter, var5); if (var6 != currentStickyId && var6 != RecyclerView.NO_ID) { performHeaderSwap(var6); } } 	1	1	1	0	1	0
"@Test public void Func1() { assertMethod(""Lmethodlocator/Samples;.Samples(QString;)V"", ""<init>"", ""(Ljava/lang/String;)V""); } "	0	0	0	0	0	1
"@Test public void Func1() { assertMethod(""Lmethodlocator/Samples;.Samples()V"", ""<init>"", ""()V""); } "	0	0	0	0	0	1
"@POST @Path(""/Func1"") public List<String> Func1(OkRepresentation var1) { return ImmutableList.of(var1.getMessage()); } "	0	0	0	0	0	1
"public void Func1(Mat[] var1, Integer[] var2, int var3, boolean var4) { boolean var5 = ParameterConfig.getPrefsBoolean(ParameterConfig.DENOISE_FLAG_KEY, false); if(var5) { ProgressDialogHandler.getInstance().showProcessDialog(""Denoising"", ""Performing denoising"", 20.0f); DenoisingOperator var6 = new DenoisingOperator(var1); var6.perform(); MatMemory.releaseAll(var1, false); var1 = var6.getResult(); } else { Log.d(TAG, ""Denoising will be skipped!""); } int var7 = ParameterConfig.getPrefsInt(ParameterConfig.SR_CHOICE_KEY, FusionConstants.FULL_SR_MODE); if(var7 == FusionConstants.FULL_SR_MODE) { this.performFullSRMode(var1, var2, var3, var4); } else { MatMemory.releaseAll(var1, false); MatMemory.cleanMemory(); this.performFastSRMode(var3, var4); } } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { String var1 = getUrl(""documents""); Path var2 = Paths.get(var1); Files.walk(var2) .filter(path -> Files.isRegularFile(path)) .forEach(path -> { UploadResponse var3 = uploadFile(path); assertThat(var3.getFilename(), is(path.getFileName().toString())); }); countTestHelper(new SearchRequest(getCrawlerName()), Files.list(var2).count(), null, TimeValue.timeValueMinutes(1)); } "	1	0	0	1	1	0
"private void Func1(ConvertibleHiveDataset var1, AutoReturnableObject<IMetaStoreClient> var2) throws IOException { List<Partition> var3 = HiveUtils.getPartitions(var2.get(), var1.getTable(), Optional.<String> absent()); for (final String var4 : var1.getDestFormats()) { Optional<ConvertibleHiveDataset.ConversionConfig> var5 = var1.getConversionConfigForFormat(var4); if (var5.isPresent()) { ConvertibleHiveDataset.ConversionConfig var6 = var5.get(); String var7 = var6.getDestinationTableName(); String var8 = var6.getDestinationDbName(); Pair<Optional<org.apache.hadoop.hive.metastore.api.Table>, Optional<List<Partition>>> var9 = getDestinationTableMeta(var8, var7, this.props); for (final Partition var10 : var3) { try { final long var11 = this.updateProvider.getUpdateTime(var10); if (shouldValidate(var10)) { log.info(String.var4(""Validating partition: %s"", var10.getCompleteName())); final List<String> var12 = HiveValidationQueryGenerator.generateCountValidationQueries(var1, Optional.of(var10), var6); final List<String> var13 = Lists.newArrayList(HiveValidationQueryGenerator.generateDataValidationQuery(var1.getTable().getTableName(), var1.getTable() .getDbName(), var9.getKey().get(), Optional.of(var10))); this.futures.add(this.exec.submit(new Callable<Void>() { @Override public Void Func2() throws Exception { log.debug(String.var4(""Going to execute count validation queries queries: %s for var4: %s "" + ""and partition %s"", var12, var4, var10.getCompleteName())); List<Long> var14 = ValidationJob.this.getValidationOutputFromHive(var12); log.debug(String.var4(""Going to execute data validation queries: %s for var4: %s and partition %s"", var13, var4, var10.getCompleteName())); List<Long> var15 = ValidationJob.this.getValidationOutputFromHive(var13); validateAndPopulateReport(var10.getCompleteName(), var11, var14, var15.get(0)); return null; } })); } else { log.debug(String.var4(""Not validating partition: %s as var11: %s is not in range of max look back: %s "" + ""and skip recent than: %s"", var10.getCompleteName(), var11, this.maxLookBackTime, this.skipRecentThanTime)); } } catch (UncheckedExecutionException e) { log.warn(String.var4(""Not validating partition: %s as update time was not found. %s"", var10.getCompleteName(), e.getMessage())); } } } else { log.info(String.var4(""No conversion config found for var4 %s. Ignoring data validation"", var4)); } } } "	0	0	0	0	0	1
"@Override public Object Func1() throws Exception { if (!cmdUp.getStartConsul()) { return null; } String var1 = """"; try { var1 = IOUtils.toString(Thread.currentThread().getContextClassLoader().getResourceAsStream(""marathon/mesos-consul.json""), ""UTF-8""); MesosCluster.executeMarathonTask(clusterId, var1 .replace(""{{MINIMESOS_ZOOKEEPER}}"", ZooKeeper.formatZKAddress(MesosCluster.getContainerIp(clusterId, ""zookeeper""))) .replace(""{{MINIMESOS_CONSUL_IP}}"", MesosCluster.getContainerIp(clusterId, ""consul""))); } catch (Exception e) { LOGGER.error(""Can't start marathon task: "" + e.getMessage()); } return null; } "	0	0	0	0	0	1
"@Override public RamlInterpretationResult Func1(RamlRoot var1, TypeDeclaration var2, JCodeModel var3, PojoGenerationConfig var4) { RamlInterpretationResult var5 = new RamlInterpretationResult(var2.required()); if (var2 instanceof StringTypeDeclaration) { StringTypeDeclaration var6 = (StringTypeDeclaration) var2; RamlTypeValidations var7 = var5.getValidations(); var7.withPattern(var6.pattern()); var7.withLenghts(var6.minLength(), var6.maxLength()); if(var6.enumValues() != null && !var6.enumValues().isEmpty()) { String var8 = var6.var2(); if (var6.var2().equals(""string"")) { var8 = var6.name(); } EnumBuilder var9 = new EnumBuilder(var4, var3, var8); var9.withEnums(var6.enumValues()); var5.setBuilder(var9); var5.setCodeModel(var3); } } if (var5.getBuilder() == null) { var5.setResolvedClass(CodeModelHelper.findFirstClassBySimpleName(var3, ""java.lang.String"")); } return var5; } "	0	1	0	0	0	0
public void Func1(String[] var1) { this.var1 = var1; } 	0	0	0	0	0	1
public static PhysicalGameState Func1() { PhysicalGameState var1 = new PhysicalGameState(8,8); Player var2 = new Player(0,0); Player var3 = new Player(1,0); var1.addPlayer(var2); var1.addPlayer(var3); Unit var4 = new Unit(0,heavyType,1,1); Unit var5 = new Unit(0,lightType,2,1); Unit var6 = new Unit(0,heavyType,1,2); Unit var7 = new Unit(0,lightType,2,2); Unit var8 = new Unit(1,lightType,5,5); Unit var9 = new Unit(1,lightType,5,6); Unit var10 = new Unit(1,heavyType,6,5); Unit var11 = new Unit(1,heavyType,6,6); var1.addUnit(var4); var1.addUnit(var5); var1.addUnit(var6); var1.addUnit(var7); var1.addUnit(var8); var1.addUnit(var9); var1.addUnit(var10); var1.addUnit(var11); return var1; } 	0	0	0	0	0	1
public static PhysicalGameState Func1() { PhysicalGameState var1 = new PhysicalGameState(8,8); Player var2 = new Player(0,5); Player var3 = new Player(1,5); var1.addPlayer(var2); var1.addPlayer(var3); Unit var4 = new Unit(-1,resourceType,0,0, 10); Unit var5 = new Unit(-1,resourceType,7,7, 10); var1.addUnit(var4); var1.addUnit(var5); Unit var6 = new Unit(0,baseType,2,1,0); Unit var7 = new Unit(1,baseType,5,6,0); var1.addUnit(var6); var1.addUnit(var7); Unit var8 = new Unit(0,workerType,1,1,0); Unit var9 = new Unit(1,workerType,6,6,0); var1.addUnit(var8); var1.addUnit(var9); Unit var10 = new Unit(0,barracksType,4,0,0); Unit var11 = new Unit(1,barracksType,3,7,0); var1.addUnit(var10); var1.addUnit(var11); return var1; } 	0	0	0	0	0	1
public static PhysicalGameState Func1() { PhysicalGameState var1 = new PhysicalGameState(12,12); Player var2 = new Player(0,0); Player var3 = new Player(1,0); var1.addPlayer(var2); var1.addPlayer(var3); var1.addUnit(new Unit(0,lightType,2,1)); var1.addUnit(new Unit(0,lightType,2,2)); var1.addUnit(new Unit(0,lightType,2,3)); var1.addUnit(new Unit(0,lightType,2,4)); var1.addUnit(new Unit(0,heavyType,1,1)); var1.addUnit(new Unit(0,heavyType,1,2)); var1.addUnit(new Unit(0,heavyType,1,3)); var1.addUnit(new Unit(0,heavyType,1,4)); var1.addUnit(new Unit(0,rangedType,0,1)); var1.addUnit(new Unit(0,rangedType,0,2)); var1.addUnit(new Unit(0,rangedType,0,3)); var1.addUnit(new Unit(0,rangedType,0,4)); var1.addUnit(new Unit(1,lightType,9,7)); var1.addUnit(new Unit(1,lightType,9,8)); var1.addUnit(new Unit(1,lightType,9,9)); var1.addUnit(new Unit(1,lightType,9,10)); var1.addUnit(new Unit(1,heavyType,10,7)); var1.addUnit(new Unit(1,heavyType,10,8)); var1.addUnit(new Unit(1,heavyType,10,9)); var1.addUnit(new Unit(1,heavyType,10,10)); var1.addUnit(new Unit(1,rangedType,11,7)); var1.addUnit(new Unit(1,rangedType,11,8)); var1.addUnit(new Unit(1,rangedType,11,9)); var1.addUnit(new Unit(1,rangedType,11,10)); return var1; } 	0	0	0	0	0	1
public static PhysicalGameState Func1() { PhysicalGameState var1 = new PhysicalGameState(8,8); Player var2 = new Player(0,5); Player var3 = new Player(1,5); var1.addPlayer(var2); var1.addPlayer(var3); Unit var4 = new Unit(-1,resourceType,0,0, 20); Unit var5 = new Unit(-1,resourceType,7,7, 20); var1.addUnit(var4); var1.addUnit(var5); Unit var6 = new Unit(0,baseType,2,1,0); Unit var7 = new Unit(1,baseType,5,6,0); var1.addUnit(var6); var1.addUnit(var7); Unit var8 = new Unit(0,workerType, 1,1,0); Unit var9 = new Unit(1,workerType,6,6,0); var1.addUnit(var8); var1.addUnit(var9); return var1; } 	0	0	0	0	0	1
public static PhysicalGameState Func1() { PhysicalGameState var1 = new PhysicalGameState(16,16); Player var2 = new Player(0,0); Player var3 = new Player(1,0); var1.addPlayer(var2); var1.addPlayer(var3); var1.addUnit(new Unit(0,lightType,2,1)); var1.addUnit(new Unit(0,lightType,2,2)); var1.addUnit(new Unit(0,lightType,2,3)); var1.addUnit(new Unit(0,lightType,2,4)); var1.addUnit(new Unit(0,heavyType,1,1)); var1.addUnit(new Unit(0,heavyType,1,2)); var1.addUnit(new Unit(0,heavyType,1,3)); var1.addUnit(new Unit(0,heavyType,1,4)); var1.addUnit(new Unit(0,rangedType,0,1)); var1.addUnit(new Unit(0,rangedType,0,2)); var1.addUnit(new Unit(0,rangedType,0,3)); var1.addUnit(new Unit(0,rangedType,0,4)); var1.addUnit(new Unit(1,lightType,13,11)); var1.addUnit(new Unit(1,lightType,13,12)); var1.addUnit(new Unit(1,lightType,13,13)); var1.addUnit(new Unit(1,lightType,13,14)); var1.addUnit(new Unit(1,heavyType,14,11)); var1.addUnit(new Unit(1,heavyType,14,12)); var1.addUnit(new Unit(1,heavyType,14,13)); var1.addUnit(new Unit(1,heavyType,14,14)); var1.addUnit(new Unit(1,rangedType,15,11)); var1.addUnit(new Unit(1,rangedType,15,12)); var1.addUnit(new Unit(1,rangedType,15,13)); var1.addUnit(new Unit(1,rangedType,15,14)); return var1; } 	0	0	0	0	0	1
public static PhysicalGameState Func1() { PhysicalGameState var1 = new PhysicalGameState(16,16); Player var2 = new Player(0,5); Player var3 = new Player(1,5); var1.addPlayer(var2); var1.addPlayer(var3); Unit var4 = new Unit(-1,resourceType,0,0, 25); Unit var5 = new Unit(-1,resourceType,0,1, 25); Unit var6 = new Unit(-1,resourceType,15,14, 25); Unit var7 = new Unit(-1,resourceType,15,15, 25); var1.addUnit(var4); var1.addUnit(var5); var1.addUnit(var6); var1.addUnit(var7); Unit var8 = new Unit(0,baseType,2,2,0); Unit var9 = new Unit(1,baseType,13,13,0); var1.addUnit(var8); var1.addUnit(var9); Unit var10 = new Unit(0,workerType,1,1,0); Unit var11 = new Unit(1,workerType,14,14,0); var1.addUnit(var10); var1.addUnit(var11); return var1; } 	0	0	0	0	0	1
public static PhysicalGameState Func1() { PhysicalGameState var1 = new PhysicalGameState(12,12); Player var2 = new Player(0,5); Player var3 = new Player(1,5); var1.addPlayer(var2); var1.addPlayer(var3); Unit var4 = new Unit(-1,resourceType,0,0, 20); Unit var5 = new Unit(-1,resourceType,1,0, 20); Unit var6 = new Unit(-1,resourceType,11,11, 20); Unit var7 = new Unit(-1,resourceType,10,11, 20); var1.addUnit(var4); var1.addUnit(var5); var1.addUnit(var6); var1.addUnit(var7); Unit var8 = new Unit(0,baseType,1,2,0); Unit var9 = new Unit(1,baseType,10,9,0); var1.addUnit(var8); var1.addUnit(var9); Unit var10 = new Unit(0,workerType, 1,1,0); Unit var11 = new Unit(1,workerType,10,10,0); var1.addUnit(var10); var1.addUnit(var11); return var1; } 	0	0	0	0	0	1
"@Override public void Func1(Context var1, Intent var2) { String var3 = var2.getAction(); if (ACTION_USB_PERMISSION.equals(var3)) { synchronized (this) { UsbAccessory var4 = var2.getParcelableExtra(UsbManager.EXTRA_ACCESSORY); if (var2.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) { if (var4 != null) { Controller.getInstance().setConnection(var1, var4); Log.d(TAG, ""Set new var4 to: "" + var4.getDescription()); } else { Log.w(TAG, ""No device returned.""); } } else { Log.d(TAG, ""Accessory permission denied.""); } finish(); } } } "	1	1	0	0	1	0
"@Override public ODistributedResponse Func1(final ODistributedRequest var1, final Collection<String> var2, final Collection<String> var3, final ODistributedRequest.EXECUTION_MODE var4) { checkForServerOnline(var1); final String var5 = var1.getDatabaseName(); if (var3.isEmpty()) { ODistributedServerLog.error(this, getLocalNodeName(), null, DIRECTION.OUT, ""No nodes configured for database '%s' request: %s"", var5, var1); throw new ODistributedException(""No nodes configured for partition '"" + var5 + ""' request: "" + var1); } final ODistributedConfiguration var6 = manager.getDatabaseConfiguration(var5); final OPair<String, IQueue>[] var7 = getRequestQueues(var5, var3, var1.getTask()); var1.setSenderNodeName(getLocalNodeName()); final int var8 = getOnlineNodes(var1, var3, var5, var7); final int var9 = calculateQuorum(var1, var2, var6, var8, var4); final int var10 = var3.size(); int var11 = var8; final boolean var12; if (var1.getTask().getResultStrategy() == OAbstractRemoteTask.RESULT_STRATEGY.UNION) { var11 = var8; var12 = false; } else { var12 = true; } final boolean var13 = waitForLocalNode(var6, var2, var3); final ODistributedResponseManager var14 = new ODistributedResponseManager(manager, var1, var3, var11, var9, var13, var1.getTask().getSynchronousTimeout(var11), var1.getTask().getTotalTimeout(var10), var12); final long var15 = OGlobalConfiguration.DISTRIBUTED_QUEUE_TIMEOUT.getValueAsLong(); final int var16 = OGlobalConfiguration.DISTRIBUTED_QUEUE_MAXSIZE.getValueAsInteger(); try { requestLock.lock(); try { var1.setId(msgService.getMessageIdCounter().getAndIncrement()); if (ODistributedServerLog.isDebugEnabled()) ODistributedServerLog.debug(this, getLocalNodeName(), var3.toString(), DIRECTION.OUT, ""sending request %s"", var1); msgService.registerRequest(var1.getId(), var14); for (OPair<String, IQueue> var17 : var7) { final IQueue var18 = var17.getValue(); if (var18 != null) { if (var16 > 0 && var18.size() > var16) { ODistributedServerLog.warn(this, getLocalNodeName(), var3.toString(), DIRECTION.OUT, ""var18 has too many messages (%d), treating the node as in stall: trying to restart it..."", var18.size()); var18.clear(); manager.disconnectNode(var17.getKey()); } else { var18.offer(var1, var15, TimeUnit.MILLISECONDS); } } } } finally { requestLock.unlock(); } if (ODistributedServerLog.isDebugEnabled()) ODistributedServerLog.debug(this, getLocalNodeName(), var3.toString(), DIRECTION.OUT, ""sent request %s"", var1); Orient.instance().getProfiler().updateCounter(""distributed.db."" + var5 + "".msgSent"", ""Number of replication messages sent from current node"", +1, ""distributed.db.*.msgSent""); return waitForResponse(var1, var14); } catch (Exception e) { throw OException.wrapException(new ODistributedException(""Error on executing distributed request ("" + var1 + "") against database '"" + var5 + (var2 != null ? ""."" + var2 : """") + ""' to nodes "" + var3), e); } } "	0	0	0	0	0	1
public ByteBuffer Func1() throws KrbException { return null; } 	0	0	0	0	0	1
public boolean Func1() { return Func1; } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception { mvc.perform(formLogin().user(""user"").password(""invalid"")) .andExpect(status().isMovedTemporarily()) .andExpect(redirectedUrl(""/login?error"")).andExpect(unauthenticated()); } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { mvc.perform( formLogin(""/authenticate"").user(""user"", ""user"").password(""pass"", ""password"")).andExpect(status().isMovedTemporarily()) .andExpect(redirectedUrl(""/"")) .andExpect(authenticated().withUsername(""user"")); } "	0	0	0	0	0	1
"public boolean Func1(MenuItem var1){ int var2 = var1.getItemId(); switch(var2) { case R.var2.living: Toast.makeText(this, """", Toast.LENGTH_LONG).show(); break; case R.var2.kitchen: Toast.makeText(this, """", Toast.LENGTH_LONG).show(); break; case R.var2.house: Intent var3 = new Intent(HousesettingDetail.this, var3.class); startActivityForResult(var3, 5); break; case R.var2.car: Toast.makeText(this, """", Toast.LENGTH_LONG).show(); break; } return true; } "	0	0	0	0	0	1
private Formula Func1(Formula var1) { return proof.getHeap().Func1(var1); } 	0	0	0	0	0	1
public String Func1(String var1) { List<String> var2 = awsHelperService.getInstanceIdsForAutoScalingGroup( envValues.getAutoScaleGroupNameForPublish()); return var2.stream().filter(s -> !s.equals(var1)).findFirst().get(); } 	0	1	0	0	0	0
"public byte[] Func1() { JSONObject var1 = new JSONObject(); try { var1.put(""data"", data); var1.put(""turnCounter"", turnCounter); } catch (JSONException e) { e.printStackTrace(); } String var2 = var1.toString(); Log.d(TAG, ""==== PERSISTING\n"" + var2); return var2.getBytes(Charset.forName(""UTF-16"")); } "	0	0	1	1	1	0
@Test public void Func1() { taskStore.save(getTask(42L)); taskStore.save(getTask(43L)); assertEquals(2, store.resolveFor(PUBLISHER, new Duration(1L)).get().queueSize()); } 	0	1	0	0	0	0
"private BigDecimal Func1(final BinaryOperatorKind var1) throws ODataApplicationException { final BigDecimal var2 = this.var2.getTypedValue(BigDecimal.class); final BigDecimal var3 = this.var3.getTypedValue(BigDecimal.class); switch (var1) { case ADD: return var2.add(var3); case DIV: return var2.divide(var2); case MUL: return var2.multiply(var3); case SUB: return var2.subtract(var3); default: throw new ODataApplicationException(""Operator not valid"", HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ROOT); } } "	1	0	1	1	1	0
"private void Func1(HttpServletRequest var1, HttpServletResponse var2, Map<String, Object> var3, Session var4) throws ServletException, IOException { HashMap<String, String> var5 = new HashMap<String, String>(); String var6 = (String) var3.get(""project""); ajaxHandleUpload(var1, var5, var3, var4); if (var5.containsKey(""error"")) { setErrorMessageInCookie(var2, var5.get(""error"")); } if (var5.containsKey(""warn"")) { setWarnMessageInCookie(var2, var5.get(""warn"")); } var2.sendRedirect(var1.getRequestURI() + ""?project="" + var6); } "	1	1	0	0	1	0
private void Func1(@NonNull MessageViewHolder var1, @NonNull Message var2) { applyStyle(var1, plainStyle, highlightStyle, var2.flags.Highlight); var1.content.setText(context.themeUtil().translations.formatAction( formatNick(var2.sender, false), helper.formatIrcMessage(var2.content) )); } 	0	0	0	0	0	1
"@Override public JSONArray Func1() { if (!this.hasGenotypeData()) { return null; } JSONArray var1 = new JSONArray(); List<Map.Entry<String, Double>> var2 = new ArrayList<Map.Entry<String, Double>>(this.geneScores.entrySet()); Collections.sort(var2, new Comparator<Map.Entry<String, Double>>() { @Override public int Func2(Map.Entry<String, Double> var3, Map.Entry<String, Double> var4) { return Double.Func2(var4.getValue(), var3.getValue()); } }); int var5 = 0; for (Map.Entry<String, Double> var6 : var2) { String var7 = var6.getKey(); Double var8 = var6.getValue(); JSONObject var9 = new JSONObject(); var9.element(""var7"", var7); var9.element(""var8"", var8); var9.accumulateAll(getGeneJSON(var7)); var1.add(var9); var5++; if (var5 > 15) { break; } } return var1; } "	1	1	1	1	0	0
public void Func1() throws IOException { authService.authenticateInJira(); MetaInfo var1 = metaInfoRetrievalService.retrieve(); List<TestCase> var2 = testCaseResolutionService.resolveTestCases(); List<Issue> var3 = jiraService.getTestIssues(); zephyrService.mapTestCasesToIssues(var2, var3); for (TestCase var4 : var2) { if (var4.getId() == null) { jiraService.createTestIssue(var4); zephyrService.addStepsToTestIssue(var4); jiraService.linkToStory(var4); } } zephyrService.linkExecutionsToTestCycle(var1, var2); zephyrService.updateExecutionStatuses(var2); } 	0	0	0	0	0	1
"@Override public ServerConfigData Func1(JsonParser var1, DeserializationContext var2) throws IOException { ObjectCodec var3 = var1.getCodec(); ObjectNode var4 = var1.readValueAsTree(); ServerConfigData var5 = new ServerConfigData(baseDirSupplier.get(), port, development, publicAddress); if (var4.hasNonNull(""port"")) { var5.setPort(parsePort(var4.get(""port""))); } if (var4.hasNonNull(""address"")) { var5.setAddress(toValue(var3, var4.get(""address""), InetAddress.class)); } if (var4.hasNonNull(""development"")) { var5.setDevelopment(var4.get(""development"").asBoolean(false)); } if (var4.hasNonNull(""threads"")) { var5.setThreads(var4.get(""threads"").asInt(ServerConfig.DEFAULT_THREADS)); } if (var4.hasNonNull(""publicAddress"")) { var5.setPublicAddress(toValue(var3, var4.get(""publicAddress""), URI.class)); } if (var4.hasNonNull(""maxContentLength"")) { var5.setMaxContentLength(var4.get(""maxContentLength"").asInt(ServerConfig.DEFAULT_MAX_CONTENT_LENGTH)); } if (var4.hasNonNull(""maxChunkSize"")) { var5.setMaxChunkSize(var4.get(""maxChunkSize"").asInt(ServerConfig.DEFAULT_MAX_CHUNK_SIZE)); } if (var4.hasNonNull(""maxInitialLineLength"")) { var5.setMaxInitialLineLength(var4.get(""maxInitialLineLength"").asInt(ServerConfig.DEFAULT_MAX_INITIAL_LINE_LENGTH)); } if (var4.hasNonNull(""maxHeaderSize"")) { var5.setMaxHeaderSize(var4.get(""maxHeaderSize"").asInt(ServerConfig.DEFAULT_MAX_HEADER_SIZE)); } if (var4.hasNonNull(""ssl"")) { var5.setSslContext(toValue(var3, var4.get(""ssl""), SSLContext.class)); } if (var4.hasNonNull(""requireClientSslAuth"")) { var5.setRequireClientSslAuth(var4.get(""requireClientSslAuth"").asBoolean(false)); } if (var4.hasNonNull(""baseDir"")) { throw new IllegalStateException(""baseDir value cannot be set via config, it must be set directly via ServerConfigBuilder.baseDir()""); } if (var4.hasNonNull(""connectTimeoutMillis"")) { parseOptionalIntValue(""connectTimeoutMillis"", var4.get(""connectTimeoutMillis"")).ifPresent(var5::setConnectTimeoutMillis); } if (var4.hasNonNull(""maxMessagesPerRead"")) { parseOptionalIntValue(""maxMessagesPerRead"", var4.get(""maxMessagesPerRead"")).ifPresent(var5::setMaxMessagesPerRead); } if (var4.hasNonNull(""receiveBufferSize"")) { parseOptionalIntValue(""receiveBufferSize"", var4.get(""receiveBufferSize"")).ifPresent(var5::setReceiveBufferSize); } if (var4.hasNonNull(""writeSpinCount"")) { parseOptionalIntValue(""writeSpinCount"", var4.get(""writeSpinCount"")).ifPresent(var5::setWriteSpinCount); } return var5; } "	0	1	0	0	0	0
@Override public CalendarList Func1(CalendarList var1) { super.Func1(var1); String var2 = getSearchTerm(); if (var2.isEmpty()) { return var1.findAllByName(); } else { return var1.findAllByName(getSearchTerm()); } } 	1	1	1	0	1	0
"private String Func1(Player[] var1, int var2) { String var3 =""""; Card[]	var4=	var1[var2].getCards(); if(var4[0]!=null&&var4[1]!=null){ var3 +=var4[0].getType()+"" ""+var4[0].getNumber()+"",""; var3+=var4[1].getType()+"" ""+var4[1].getNumber(); } else{ var3+=""NULL NULL NULL NULL""; } return var3; } "	1	1	1	1	0	0
"@JsonProperty(""dateOfEntryUtcOffset"") public Integer Func1() { return dateOfEntryUtcOffset; } "	0	0	0	0	0	1
public Texture Func1(int var1) { Texture var2 = colorTextures.get(var1); if (var2 == null) { var2 = new Texture(1, 1, GL11.GL_RGBA); var2.gpuAlloc(); ByteBuffer var3 = BufferUtils.createByteBuffer(4); var3.putInt(var1); var3.flip(); GL11.glBindTexture(GL11.GL_TEXTURE_2D, var2.getID()); GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0, 1, 1, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, var3); } return var2; } 	0	1	0	0	0	0
private void Func1() { if (jinglesAnimation != null) { jinglesAnimation.stop(); jinglesAnimation = null; empyListItem.setCompoundDrawablesWithIntrinsicBounds(0, R.animator.jingles_animation, 0, 0); } } 	0	1	0	0	0	0
public Long Func1(String var1) { EntityManager var2 = getEntityManager(); CriteriaBuilder var3 = var2.getCriteriaBuilder(); CriteriaQuery<Long> var4 = var3.createQuery(Long.class); Root<Identifier> var5 = var4.from(Identifier.class); var4.select(var5.get(Identifier_.orderIndex)); var4.where( var3.equal(var5.get(Identifier_.kuntaApiId), var1) ); return var2.createQuery(var4).getSingleResult(); } 	1	0	0	1	1	0
"@PreDestroy public void Func1() { healthCheckServiceProxy.deregister(); configurationService.unsubscribeFrom(""system-model.cfg.xml"", systemModelListener); destroyRemoteDatastore(); } "	0	1	0	0	0	0
"public static Deck Func1(int var1) { String var2 = String.format(""SELECT * FROM DECK WHERE ID = (SELECT SELDECKID FROM PLAYER WHERE ID = 1%1$s)"", var1); Deck var3 = null; try { if (Database.checkConnection()) { List<List> var4 = Database.selectRecordFromTable(var2); List<String> var5 = var4.get(0); var3 = new Deck(Integer.parseInt(var5.get(0)), var5.get(2)); for (int var6 = 3; var6 < var5.size(); var6++) { var3.addCard(allCards.get(Integer.parseInt(var5.get(var6)) - 1)); } } else { System.out.println(""Database connection is lost.""); } } catch (SQLException ex) { Logger.getLogger(PlayerIconController.class.getName()).log(Level.SEVERE, null, ex); } return var3; } "	0	0	1	1	1	0
"private Channel Func1(final long var1, final Map<String, Object> var2) { checkCondition(var1 <= 0, s_message.channelIdNotLessThanZero()); checkNull(var2, s_message.propertiesNonNull()); s_logger.debug(s_message.retrievingChannel()); String var3 = null; ChannelType var4 = null; DataType var5 = null; Channel var6 = null; final Map<String, Object> var7 = CollectionUtil.newConcurrentHashMap(); final String var8 = CHANNEL_PROPERTY_POSTFIX.var15() + CHANNEL_PROPERTY_PREFIX.var15() + CHANNEL_PROPERTY_POSTFIX.var15(); final String var9 = var1 + var8; if (var2 != null) { final String var10 = var9 + NAME.var15(); if (var2.containsKey(var10)) { var3 = (String) var2.get(var10); } final String var11 = var9 + TYPE.var15(); var4 = this.getChannelType(var2, var11); final String var12 = var9 + VALUE_TYPE.var15(); var5 = this.getDataType(var2, var12); for (final Map.Entry<String, Object> var13 : var2.entrySet()) { final String var14 = var13.getKey(); final String var15 = var13.getValue().toString(); final List<String> var16 = Arrays.asList(var14.split(""\\"" + CHANNEL_PROPERTY_POSTFIX.var15())); if ((var16.size() > 2) && var14.startsWith(String.valueOf(var1)) && DRIVER_PROPERTY_POSTFIX.var15().equals(var16.get(2))) { final String var17 = DRIVER_PROPERTY_POSTFIX.var15() + CHANNEL_PROPERTY_POSTFIX.var15(); final String var18 = var14 .substring(var14.indexOf(var17) + var17.length()); var7.put(var18, var15); } } } if ((var4 != null) && (var5 != null)) { var6 = new Channel(var1, var3, var4, var5, var7); } s_logger.debug(s_message.retrievingChannelDone()); return var6; } "	0	0	0	0	0	1
"public String Func1() { return getFile() + "";"" + getValidationName() + "";message = "" + getMessage() + ""\n""; } "	0	0	0	0	0	1
public void Func1(){ updateProx(); if(xProx>=(CHASE_TETHER*32)&&yProx>=(CHASE_TETHER*32)){ wander(); } else if(xProx<=(CHASE_TETHER*32)&&yProx<=(CHASE_TETHER*32)){ if(xProx<(AURA_TETHER*32)||yProx<(AURA_TETHER*32)){ spook(pCharacter); flee(); } if(xProx>(AURA_TETHER*32)&&yProx>(AURA_TETHER*32)){ chase(); } } else{ wander(); } } 	1	1	1	1	0	0
"@Test public void Func1() throws Exception { Map<Experiment.Label, Map<User.ID, List<Event>>> var1 = new HashMap<>(); thrown.expect(UnsupportedOperationException.class); thrown.expectMessage(""Not implemented""); resource.Func1(applicationName, userID, var1); } "	1	1	0	1	1	0
"public static void Func1(String var1, MessageContext var2) { if (var1.contains("":"")) { String[] var3 = var1.split("":""); if (var3.length == 2) { return; } String var4 = var3[0]; String var5 = null; for (String var6 : var3[1].split(""/"")) { if (!var6.isEmpty()) { var5 = var6; break; } } String var7; String var8 = null; if (""http"".equals(var4)) { var7 = getPassThruHttpPort(); } else { var7 = getPassThruHttpsPort(); } if (var3.length > 2) { var8 = var3[2].substring(0, var3[2].indexOf(""/"")); } String var9 = var4 + ""://"" + var5 + "":"" + var8; if (EndpointHolder.getInstance().containsEndpoint(var9)) { var1 = var1.replace(var8, var7); Object var10 = ((Axis2MessageContext) var2).getAxis2MessageContext().getProperty(""TRANSPORT_HEADERS""); if (var10 instanceof TreeMap) { ((TreeMap) var10).put(""Location"", var1); } } } } "	1	1	1	1	0	0
@Override public int Func1(IBlockState var1, IBlockAccess var2, BlockPos var3, EnumFacing var4) { if ((flags & 16) == 0) return 0; TileEntity var5 = var2.getTileEntity(var3); if (var5 instanceof IRedstoneTile) return ((IRedstoneTile)var5).redstoneLevel(var4, true); else return 0; } 	0	1	0	0	0	0
@Override public boolean Func1(IBlockState var1, IBlockAccess var2, BlockPos var3, EnumFacing var4) { if ((flags & 16) == 0) return false; if (var4 == null) return true; TileEntity var5 = var2.getTileEntity(var3); if (var5 instanceof IRedstoneTile) return ((IRedstoneTile)var5).connectRedstone(var4); return false; } 	0	1	0	0	0	0
"public static boolean Func1(int var1, String var2, String var3) { if (Strings.isNullOrEmpty(var2) || Strings.isNullOrEmpty(var3)) { throw new IllegalArgumentException(""No null arguments allowed""); } return var1 == ((var2.length() - var2.replace(var3, """").length()) / var3.length()); } "	1	0	1	1	1	0
@Test public void Func1() { final IntHashSet var1 = new IntHashSet(100, -1); assertEquals(obj.hashCode(), var1.hashCode()); } 	0	1	0	0	0	0
"@Override public boolean Func1(MMXMessage var1) { Log.d(TAG, ""Received message : "" + var1); if (adapter != null && var1.getChannel() != null && channelName.equals(var1.getChannel().getName())) { currentConversation.addMessage(Message.createMessageFrom(var1)); updateList(); currentConversation.setHasUnreadMessage(false); return true; } return false; } "	0	1	0	0	0	0
"@Override public boolean Func1(AbstractBuild var1, Launcher var2, BuildListener var3) throws IOException, InterruptedException { Result var4 = var1.getResult(); if (var4 != null && var4.isWorseOrEqualTo(Result.FAILURE)) { return false; } EnvVars var5 =  var1.getEnvironment(var3); Map<String, String> var6 = var1.getBuildVariables(); log = var3.getLogger(); FilePath var7 = new FilePath(var1.getArtifactsDir()); FilePath var8 = var1.getWorkspace(); FilePath var9 = new FilePath(var1.getRootDir()); boolean var10 = validateConfiguration() && validateTestConfiguration(); if (!var10) { writeToLog(""Invalid var23.""); return false; } AWSDeviceFarm var11 = getAWSDeviceFarm() .withLogger(var3.getLogger()) .withWorkspace(var8) .withArtifactsDir(var7) .withEnv(var5); if (var11 == null) { writeToLog(""ADF API is null!""); return false; } try { String var12 = var6.get(""AWSDEVICEFARM_PROJECT""); if (var12 != null && !var12.isEmpty()) { writeToLog(String.format(""Using overloaded var15 '%s' from var1 var6"", var12)); projectName = var12; } if (isRunUnmetered) { String var13 = var11.getOs(appArtifact); int var14 = var11.getUnmeteredDevices(var13); if (var14 <= 0) { throw new AWSDeviceFarmException(String.format(""Your account does not have unmetered %s devices. Please change "" + ""your var1 settings to var24 on metered devices."", var13)); } } writeToLog(String.format(""Using Project '%s'"", projectName)); Project var15 = var11.getProject(projectName); String var16 = var6.get(""AWSDEVICEFARM_DEVICE_POOL""); if (var16 != null) { writeToLog(String.format(""Using overloaded device pool '%s' from var1 var6"", var16)); devicePoolName = var16; } writeToLog(String.format(""Using DevicePool '%s'"", devicePoolName)); DevicePool var17 = var11.getDevicePool(var15, devicePoolName); writeToLog(String.format(""Using App '%s'"", var5.expand(appArtifact))); Upload var18 = var11.uploadApp(var15, appArtifact); String var19 = var18.getArn(); String var20 = String.format(""%s (Jenkins)"", var18.getName()); writeToLog(""Getting test to schedule.""); ScheduleRunTest var21 = getScheduleRunTest(var5, var11, var15); TestType var22 = TestType.fromValue(var21.getType()); writeToLog(String.format(""Scheduling '%s' var24 '%s'"", var22, var20)); ScheduleRunConfiguration var23 = getScheduleRunConfiguration(isRunUnmetered); ScheduleRunResult var24 = var11.scheduleRun(var15.getArn(), var20, var19, var17.getArn(), var21, var23); String var25 = var24.getRun().getArn(); try { writeToLog(String.format(""View the %s var24 in the AWS Device Farm Console: %s"", var22, AWSDeviceFarmUtils.getRunUrlFromArn(var25))); } catch (ArrayIndexOutOfBoundsException e) { writeToLog(String.format(""Could not parse var15 ID and var24 ID from var24 ARN: %s"", var25)); } AWSDeviceFarmTestResultAction var26 = new AWSDeviceFarmTestResultAction(var1, null, log); var1.addAction(var26); writeToLog(""Waiting for test var24 to complete.""); var26.waitForRunCompletion(var11, var24); writeToLog(""Test var24 is complete.""); if (storeResults) { FilePath var27 = new FilePath(var7, ""AWS Device Farm Results""); var27.mkdirs(); writeToLog(String.format(""Storing AWS Device Farm results in directory %s"", var27)); Map<String, FilePath> var28 = getJobs(var11, var24, var27); Map<String, FilePath> var29 = getSuites(var11, var24, var28); writeToLog(""Downloading AWS Device Farm results archive...""); for (ArtifactCategory var30 : new ArrayList<ArtifactCategory>(Arrays.asList(ArtifactCategory.values()))) { ListArtifactsResult var31 = var11.listArtifacts(var24.getRun().getArn(), var30); for (Artifact var32 : var31.getArtifacts()) { String var33 = var32.getArn().split("":"")[6]; String var34 = var33.substring(0, var33.lastIndexOf(""/"")); String var35 = var34.substring(0, var34.lastIndexOf(""/"")); String var36 = var33.substring(var33.lastIndexOf(""/"") + 1); String var37 = var32.getExtension().replaceFirst(""^\\."", """"); FilePath var38 = new FilePath(var29.get(var35), String.format(""%s-%s.%s"", var32.getName(), var36, var37)); URL var39 = new URL(var32.getUrl()); var38.write().write(IOUtils.toByteArray(var39.openStream())); } } writeToLog(String.format(""Results archive saved in %s"", var7.getName())); } var1.setResult(var26.getBuildResult()); } catch (AWSDeviceFarmException e) { writeToLog(e.getMessage()); return false; } return true; } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { scratch.file(""test/aspect.bzl"", """"); scratch.file(""test/BUILD"", ""java_library(name = 'xxx')""); reporter.removeHandler(failFastHandler); try { AnalysisResult var1 = update(ImmutableList.of(""test/aspect.bzl%MyAspect""), ""//test:xxx""); assertThat(keepGoing()).isTrue(); assertThat(var1.hasError()).isTrue(); } catch (ViewCreationFailedException e) { } assertContainsEvent(""MyAspect from //test:aspect.bzl is not an aspect""); } "	0	0	0	0	0	1
@Override public UserBinomialModel Func1(U var1) { return new UserBinomialModel(var1, alpha); } 	1	0	1	1	1	0
"public static String Func1(String var1) { String var2; try { var2 = URLEncoder.encode(var1, ""UTF-8"") .replaceAll(""\\+"", ""%20"") .replaceAll(""\\%21"", ""!"") .replaceAll(""\\%27"", ""'"") .replaceAll(""\\%28"", ""("") .replaceAll(""\\%29"", "")"") .replaceAll(""\\%7E"", ""~""); } catch (UnsupportedEncodingException e) { var2 = var1; } return var2; } "	0	0	0	0	0	1
"@org.testng.annotations.Test public void Func1() throws Exception { LocalAccountAssociationClientService var1 = getUserAccountAssociationClientService(); User var2 = new User.UserBuilder().setUserId(""var2"").setIdentityStore(new IdentityStoreImpl()) .setAuthorizationStore(new AuthorizationStoreImpl()).setPrimaryAttributeValue(""userId"") .setClaimManager(new InMemoryClaimManager()).build(); Assert.assertNotNull(var1.listUserAssociations(var2)); } "	1	0	1	0	0	0
private FrameworkMethod Func1(final IMethodInvocation var1) { return new FrameworkMethod(var1.getMethod().getReflection()) { @Override public String Func2() { return var1.getIteration().getDescription().getMethodName(); } }; } 	0	0	0	0	0	1
private void Func1(boolean var1) { starredHostDao.open(); if (!var1 && starredHostDao.isHostStarred(hostInfo.getId(), hostInfo.getHost().getName())) { starredHostDao.delete(hostInfo.getId(), hostInfo.getHost().getName()); } else { starredHostDao.insert(hostInfo.getId(), hostInfo.getHost().getName(), hostInfo.getHost(), hostInfo.getFeedback()); } hostInfo.setStarred(var1); starredHostDao.close(); } 	1	0	1	0	1	0
"public String Func1(String var1) { if (url == null) { return null; } else { return url.replace(""$lang"", var1); } } "	0	0	0	0	0	1
public Date Func1() { return dateUploaded; } 	0	0	0	0	0	1
"@Override public ScanResult Func1(Person var1) { FilmographyInfos  var2 = null; try { boolean var3 = configServiceWrapper.getBooleanProperty(""allocine.throwError.tempUnavailable"", Boolean.TRUE); String var4 = getPersonId(var1, var3); if (StringUtils.isBlank(var4)) { LOG.debug(""Allocine id not available '{}'"", var1.getIdentifier()); return ScanResult.MISSING_ID; } var2 = allocineApiWrapper.getFilmographyInfos(var4, var3); } catch (TemporaryUnavailableException ex) { int var5 = configServiceWrapper.getIntProperty(""allocine.var5.filmography"", 0); if (var1.getRetries() < var5) { return ScanResult.RETRY; } } if (var2 == null || var2.isNotValid() || CollectionUtils.isEmpty(var2.getParticipances())) { LOG.trace(""No filmography present for var1 '{}'"", var1.getIdentifier()); return ScanResult.NO_RESULT; } Set<FilmParticipation> var6 = new HashSet<>(); for (Participance var7 : var2.getParticipances()) { FilmParticipation var8 = new FilmParticipation(); var8.setSourceDb(SCANNER_ID); var8.setSourceDbId(String.valueOf(var7.getCode())); var8.setPerson(var1); if (var7.isActor()) { var8.setJobType(JobType.ACTOR); var8.setRole(StringUtils.trimToNull(var7.getRole())); } else if (var7.isDirector()) { var8.setJobType(JobType.DIRECTOR); } else if (var7.isWriter()) { var8.setJobType(JobType.WRITER); } else if (var7.isCamera()) { var8.setJobType(JobType.CAMERA); } else if (var7.isProducer()) { var8.setJobType(JobType.PRODUCER); } else { continue; } if (var7.isTvShow()) { var8.setParticipationType(ParticipationType.SERIES); var8.setYear(var7.getYearStart()); var8.setYearEnd(var7.getYearEnd()); } else { var8.setParticipationType(ParticipationType.MOVIE); var8.setYear(var7.getYear()); } var8.setTitle(var7.getTitle()); var8.setTitleOriginal(StringUtils.trimToNull(var7.getOriginalTitle())); var8.setDescription(StringUtils.trimToNull(var7.getSynopsisShort())); var8.setReleaseDate(MetadataTools.parseToDate(var7.getReleaseDate())); String var9 = localeService.findCountryCode(StringUtils.trimToNull(var7.getReleaseState())); var8.setReleaseCountryCode(var9); var6.add(var8); } var1.setNewFilmography(var6); return ScanResult.OK; } "	0	0	0	0	0	1
"public void Func1(final PwmRequest var1) throws PwmUnrecoverableException, ChaiUnavailableException, IOException, ServletException { final PwmApplication var2 = var1.getPwmApplication(); final PwmSession var3 = var1.getPwmSession(); final Configuration var4 = var2.getConfig(); final LocalSessionStateBean var5 = var3.getSessionStateBean(); var2.getSessionStateService().clearBean(var1, ActivateUserBean.class); final List<FormConfiguration> var6 = var4.readSettingAsForm(PwmSetting.ACTIVATE_USER_FORM); Map<FormConfiguration,String> var7 = new HashMap(); try { var7 = FormUtility.readFormValuesFromRequest(var1, var6, var5.getLocale()); var2.getIntruderManager().convenience().checkAttributes(var7); final String var8 = var1.readParameterAsString(PwmConstants.PARAM_CONTEXT); final String var9 = var1.readParameterAsString(PwmConstants.PARAM_LDAP_PROFILE); FormUtility.validateFormValues(var4, var7, var5.getLocale()); final String var10 = figureLdapSearchFilter(var1); final UserIdentity var11; { final UserSearchEngine var12 = new UserSearchEngine(var2, var3.getLabel()); final UserSearchEngine.SearchConfiguration var13 = new UserSearchEngine.SearchConfiguration(); var13.setContexts(Collections.singletonList(var8)); var13.setFilter(var10); var13.setFormValues(var7); var13.setLdapProfile(var9); var11 = var12.performSingleUserSearch(var13); } validateParamsAgainstLDAP(var1, var7, var11); final List<UserPermission> var14 = var4.readSettingAsUserPermission(PwmSetting.ACTIVATE_USER_QUERY_MATCH); if (!LdapPermissionTester.testUserPermissions(var2, var3.getLabel(), var11, var14)) { final String var15 = ""user "" + var11 + "" attempted activation, but does not match query string""; final ErrorInformation var16 = new ErrorInformation(PwmError.ERROR_ACTIVATE_USER_NO_QUERY_MATCH, var15); var2.getIntruderManager().convenience().markUserIdentity(var11, var3); var2.getIntruderManager().convenience().markAddressAndSession(var3); throw new PwmUnrecoverableException(var16); } final ActivateUserBean var17 = var2.getSessionStateService().getBean(var1, ActivateUserBean.class); var17.setUserIdentity(var11); var17.setFormValidated(true); var2.getIntruderManager().convenience().clearAttributes(var7); var2.getIntruderManager().convenience().clearAddressAndSession(var3); } catch (PwmOperationalException e) { var2.getIntruderManager().convenience().markAttributes(var7, var3); var2.getIntruderManager().convenience().markAddressAndSession(var3); var1.setResponseError(e.getErrorInformation()); LOGGER.debug(var3.getLabel(),e.getErrorInformation().toDebugStr()); } advanceToNextStage(var1); } "	1	0	1	1	0	0
"public void Func1(int var1, String var2, long var3, byte[] var4, int var5, int var6) throws IOException { if (log.isDebugEnabled()) { log.debug(""Func1: offset "" + var3 + "" var8:"" + var1 + "" stream: "" + var2 + "" length "" + var6 + "", file record = "" + this); } if (var6 == 0) { return; } final Iterator<NTFSAttribute> var7 = findAttributesByTypeAndName(var1, var2); if (!var7.hasNext()) { throw new IOException(var1 + "" attribute not found, file record = "" + this); } NTFSAttribute var8 = var7.next(); if (var8.isResident()) { if (var7.hasNext()) { throw new IOException(""Resident attribute should be by itself, file record = "" + this); } final NTFSResidentAttribute var9 = (NTFSResidentAttribute) var8; final int var10 = var9.getAttributeLength(); if (var10 < var6) { throw new IOException(""File data("" + var10 + ""b) is not large enough to read:"" + var6 + ""b""); } var9.getData(var9.getAttributeOffset() + (int) var3, var4, var5, var6); if (log.isDebugEnabled()) { log.debug(""Func1: read from resident data""); } return; } final int var11 = getVolume().getClusterSize(); final long var12 = var3 / var11; final long var13 = (var3 + var6 - 1) / var11; final int var14 = (int) (var13 - var12 + 1); final byte[] var15 = new byte[var14 * var11]; long var16 = var12; int var17 = 0; while (true) { if (var8.isResident()) { throw new IOException(""Resident attribute should be by itself, file record = "" + this); } final NTFSNonResidentAttribute var18 = (NTFSNonResidentAttribute) var8; var17 += var18.readVCN(var16, var15, 0, var14); if (var17 == var14) { break; } var16 -= var18.getNumberOfVCNs(); if (var7.hasNext()) { var8 = var7.next(); } else { break; } } if (log.isDebugEnabled()) { log.debug(""Func1: read "" + var17 + "" from non-resident attributes""); } if (var17 != var14) { throw new IOException(""Requested "" + var14 + "" clusters but only read "" + var17 + "", offset = "" + var5 + "", file record = "" + this); } System.arraycopy(var15, (int) var3 % var11, var4, var5, var6); } "	1	0	0	1	0	0
private void Func1() { if (batch.isFull()) { flush(); } else if ((System.nanoTime() - lastFlush) > TimeUnit.MILLISECONDS.toNanos(BATCH_TIMEOUT_MS)) { timeoutMeter.mark(); flush(); } } 	0	1	0	0	0	0
public Long Func1() { return this.trainingPrerequisiteId; } 	1	0	1	0	1	0
"public void Func1(BevolkingsregisterFlowState var1, int var2, int var3) throws AkteException { List<Person> var4 = var1.getB2(); if (var2 > var4.size()) { throw new AkteException(""The var2 in question is not created yet.""); } if (var3 > var4.size()) { throw new AkteException(""The line var5 copy var6 is not created yet.""); } Person var5 = var4.get(var2 - 1); Person var6 = var4.get(var3 - 1); var5.setFirstName(var6.getFirstName()); var5.setFamilyName(var6.getFamilyName()); var5.setDayOfBirth(var6.getDayOfBirth()); var5.setMonthOfBirth(var6.getMonthOfBirth()); var5.setYearOfBirth(var6.getYearOfBirth()); var5.setPlaceOfBirth(var6.getPlaceOfBirth()); var5.setSex(var6.getSex()); var5.setNationality(var6.getNationality()); for (PersonDynamic.Type var7 : PersonDynamic.Type.values()) { switch (var7) { case BEROEP: case KERKGENOOTSCHAP: case BURGELIJKE_STAND: Map<Integer, List<PersonDynamic>> var8 = var1.getB3ForType(var7); List<PersonDynamic> var9 = var8.get(var2); List<PersonDynamic> var10 = var8.get(var3); if (var9.size() > 0) { if (var10.isEmpty()) { var10.add(createPersonDynamic(var1, var5, var7, 1)); } PersonDynamic var11 = var9.get(0); PersonDynamic var12 = var10.get(0); BeanUtils.copyProperties(var12, var11, ""RecordID"", ""keyToRegistrationPersons""); } } } } "	0	0	0	0	0	1
"@Override public void Func1(@Nullable Bundle var1) { super.Func1(var1); viewModel.setCallback(this); Disposable var2 = viewModel.getContributors() .observeOn(AndroidSchedulers.mainThread()) .subscribe( this::renderContributors, throwable -> Timber.tag(TAG).e(throwable, ""Failed to show sessions."") ); compositeDisposable.add(var2); } "	0	0	0	0	0	1
@Override public int Func1(String var1) { Set<Integer> var2 = this.m_inFlightIds.get(var1); if (var2 == null) { int var3 = 1; var2 = new HashSet<>(); var2.add(var3); this.m_inFlightIds.put(var1, var2); return var3; } int var4 = Collections.max(var2); int var3 = (var4 + 1) % 0xFFFF; var2.add(var3); return var3; } 	0	0	0	0	0	1
@Override protected void Func1(AtomEventFramework var1) { throw new UnsupportedOperationException(); } 	0	0	0	0	0	1
@Override public UnweightedArithmeticRule Func1(Unweighted_arithmetic_ruleContext var1) { return visitChildren(var1); } 	0	0	0	0	0	1
"void Func1(PreparedStatement var1, int var2, Node var3) throws SQLException { if (var3 == null) return; if (var3.isURI()) var1.setString(var2, var3.toString()); else if (var3.isBlank()) var1.setString(var2, ""_:""+var3.toString()); else throw new SQLException(""Only URI or Blank nodes can be used as subject""); } "	0	1	0	0	0	0
"synchronized void Func1(final String var1, final String var2, final Map<String, String> var3) { Preconditions.checkState(!stopped.get(), ""ConnectorManager is stopped""); Preconditions.checkNotNull(var1, ""var1 is null""); Preconditions.checkNotNull(var2, ""connectorName is null""); Preconditions.checkNotNull(var3, ""var3 is null""); final ConnectorPlugin var4 = plugins.get(var2); if (var4 != null) { Preconditions .checkState(!connectorFactories.containsKey(var1), ""A connector %s already exists"", var1); final ConnectorFactory var5 = var4.create(var1, var3); connectorFactories.put(var1, var5); final MetacatCatalogConfig var6 = MetacatCatalogConfig.createFromMapAndRemoveProperties(var5.getName(), var3); catalogs.put(var1, var6); } else { log.warn(""No plugin for connector with type %s"", var2); } } "	0	1	1	0	1	0
"@SmallTest public void Func1() throws Throwable { final String var1 = ""你好""; Map<String, String> var2 = new HashMap<String, String>(); var2.put(""x:foo"", ""fooval""); final UploadOptions var3 = new UploadOptions(var2, null, true, null, null); uploadManager.put(""hello"".getBytes(), var1, TestConfig.token, new UpCompletionHandler() { public void Func2(String var4, ResponseInfo var5, JSONObject var6) { Log.i(""qiniutest"", var4 + var5); key = var4; info = var5; resp = var6; signal.countDown(); } }, var3); try { signal.await(60, TimeUnit.SECONDS); // wait for callback } catch (InterruptedException e) { e.printStackTrace(); } Assert.assertEquals(var1, key); Assert.assertTrue(info.isOK()); Assert.assertNotNull(info.reqId); Assert.assertNotNull(resp); } "	0	0	0	0	0	1
private void Func1() { this.currentLoop = numLoops; } 	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") @Override public Classpage Func1(final String var1, final String var2) { String var3 = "" FROM Classpage var5 WHERE  var5.user.partyUid=:var1  and var5.collectionType=:var2 and ""; Query var4 = getSession().createQuery(var3 + generateOrgAuthQuery(""var5."")); var4.setParameter(_GOORU_UID, var1); var4.setParameter(TYPE, var2); addOrgAuthParameters(var4); List<Classpage> var5 = var4.list(); return (var5.size() != 0) ? var5.get(0) : null; } "	0	1	0	0	0	0
"@Override public Object[] Func1(final String var1, final String var2) { String var3 = ""select cc.gooru_oid, cor.title  as gooruOid  from collection_item ci inner join resource r on r.content_id = ci.resource_content_id inner join content cr on cr.content_id = r.content_id inner join content cc on cc.content_id = ci.collection_content_id inner join collection co on  co.content_id = ci.collection_content_id inner join resource cor on cor.content_id = co.content_id   where cr.gooru_oid='"" + var1 + ""'and co.collection_type = 'folder'  and ci.item_type != 'collaborator' ""; if (var2 != null) { var3 += ""and  cc.user_uid ='"" + var2 + ""'""; } Query var4 = getSession().createSQLQuery(var3); return (Object[]) (var4.list().size() > 0 ? var4.list().get(0) : null); } "	1	0	1	0	1	0
public static NotificationEvent Func1(Issue var1, User var2) { NotificationEvent var3 = createFrom(var2, var1); var3.title = formatNewTitle(var1); var3.receivers = getReceivers(var1); var3.eventType = NEW_ISSUE; var3.oldValue = null; var3.newValue = var1.body; return var3; } 	1	1	1	1	0	0
"private void Func1(Canvas var1, Line var2, int var3, int var4) { pointPaint.setColor(var2.getPointColor()); int var5 = 0; currentDaypointPaint.setColor(Color.argb(255,37,107,167)); for(int var6=0; var6<var2.getValues().size();var6++){ PointValue var7 = var2.getValues().get(var6); int var8 = ChartUtils.dp2px(density, var2.getPointRadius()); final float var9 = computator.computeRawX(var7.getX()); final float var10 = computator.computeRawY(var7.getY()); if (computator.isWithinContentRect(var9, var10, checkPrecision)) { if (MODE_DRAW == var4) { if (var6==currentDayIdex) { drawPoint(var1, var2, var7, var9, var10, var8 + 8, pointPaint); drawPoint(var1, var2, var7, var9, var10, var8, currentDaypointPaint); }else drawPoint(var1, var2, var7, var9, var10, var8 + 8,pointPaint); if (var2.hasLabels() && checkMinMax(var2, var3)) { drawLabel(var1, var2, var7, var9, var10, var8 + labelOffset); } } else if (MODE_HIGHLIGHT == var4) { highlightPoint(var1, var2, var7, var9, var10, var3, var5); } else { throw new IllegalStateException(""Cannot process points in var4: "" + var4); } } ++var5; } } "	1	1	0	0	1	0
public synchronized static GobblinMetrics Func1(String var1, MetricContext var2) { return Func1(var1, var2, Lists.<Tag<?>>newArrayList()); } 	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") public static List<Map<String, Object>> Func1(CWLJob var1, HashAlgorithm var2, Map<String, Object> var3, String var4, Object var5, File var6) throws CWLExpressionException, IOException { if (var5 == null) { return null; } List<Object> var7 = new ArrayList<>(); if (var5 instanceof List<?>) { var7.addAll((Collection<? extends Object>) var5); } List<Map<String, Object>> var8 = new ArrayList<>(); for (Object var9 : var7) { Object var10 = CWLExpressionResolver.resolve(var9, var1, var3); Map<String, Object> var11 = new HashMap<>(); if(var10 instanceof String) { String var12; String var13 = (String) var10; if((var13).startsWith(""^"") || var13.startsWith(""."")) { var12 = var4.toString(); while (var13.startsWith(""^"")) { int var14 = var12.lastIndexOf("".""); if (var14 != -1) { var12 = var12.substring(0, var14); var13 = var13.substring(1); } else { break; } } var12 += ((String) var13).startsWith(""."") ? var13 : ""."" + var13; } else { var12 = var13; } File var15 = new File(var12); if (var15.exists()) { if (var15.isDirectory()) { CWLFileValueHelper.setDirType(var11); } else { CWLFileValueHelper.setFileType(var11); } CWLFileValueHelper.setPath(var15.getAbsolutePath(), var11); CWLFileValueHelper.setSize(var15.length(), var11); CWLFileValueHelper.setName(var15.getName(), var11); if (var2 != null) { CWLFileValueHelper.setChecksum(var15, var11, var2); } } } else if (var10 instanceof Map) { var11 = (Map<String, Object>) var10; postprocessCreatedResults(var11, var2, var6); } if(!var11.isEmpty()) { var8.add(var11); } } return var8.isEmpty() ? null : var8; } "	0	1	0	0	1	0
"public long Func1(PlayerInfo var1) { final int[] var2 = new int[MAX_BLOCK]; final Location var3 = var1.getIslandLocation(); final int var4 = var3.getBlockX(); final int var5 = var3.getBlockY(); final int var6 = var3.getBlockZ(); final World var7 = var3.getWorld(); int var8 = Settings.island_protectionRange / 2; int var9; for (int var10 = -var8; var10 <= var8; ++var10) { for (int var11 = 0; var11 <= 255; ++var11) { for (int var12 = -var8; var12 <= var8; ++var12) { var9 = var7.getBlockAt(var4 + var10, var5 + var11, var6 + var12).getTypeId(); var2[var9]++; } } } double var13 = 0; for (int var14 = 1; var14 <= MAX_BLOCK; ++var14) { double var15 = var2[var14]; if (var15 > blockLimit[var14] && blockLimit[var14] != -1) { var15 = blockLimit[var14]; // Hard edge } if (blockDR[var14] > 0) { var15 = dReturns(var15, blockDR[var14]); } var13 += var15*blockValue[var14]; } long var16 = Math.round(var13 / config.getInt(""general.pointsPerLevel"")); uSkyBlock.getInstance().getIslandConfig(var1).set(""general.level"", var16); var1.savePlayerConfig(var1.getPlayerName()); uSkyBlock.getInstance().saveIslandConfig(var1.locationForParty()); return var16; } "	1	1	1	1	0	0
private List<ContainerInitializer> Func1() { JettyJasperInitializer var1 = new JettyJasperInitializer(); ContainerInitializer var2 = new ContainerInitializer(var1, null); List<ContainerInitializer> var3 = new ArrayList<ContainerInitializer>(); var3.add(var2); return var3; } 	1	0	1	0	1	0
"@Override public String Func1() { String var1 = this.pdFont.getFontDescriptor().getStringKey(ASAtom.CHAR_SET); return var1 == null ? """" : var1; } "	1	1	1	0	1	0
"@Override public void Func1() { InputData var1 = inputRetriever.getCurrentData(); Environment var2 = environmentManager.getActiveEnvironment(); float var3 = Gdx.graphics.getDeltaTime(); Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT); if(var2 != null) { var2.Func1(); } Font var4 = fontManager.getFont(""8bitop""); var4.write(Gdx.graphics.getFramesPerSecond() + """", null, null, 10, 415, 2); renderer.flush(); if(var2 != null) { var2.process(var3, var1); } if(var1.getPressData(Keys.F3).justPressed(0)) { this.console.show(); } inputRetriever.update(); } "	0	1	0	0	1	0
"@Override public void Func1(Map var1, Division var2) throws WingException, SQLException { Division var3 = var2.addDivision(""unpublished_items"", ""well well-light""); var3.setHead(""WORKFLOW ITEMS""); var3.addPara(null, ""alert alert-info"").addContent(""Following items are currently in workflow mode i.e. waiting for an approval. You can view the details of the item by clicking the var10""); Table var4 = var3.addTable(""workspace_items"", 1, 5); Row var5 = var4.addRow(Row.ROLE_HEADER); var5.addCellContent(""WORKFLOW ID""); var5.addCellContent(""ITEM ID""); var5.addCellContent(""COLLECTION""); var5.addCellContent(""CURRENT STATE""); var5.addCellContent(""ASSIGNED TO""); var5.addCellContent(""LAST MODIFIED""); String []var6 = {""success"", ""error"", ""warning"", ""error"", ""warning"", ""error"", ""warning"", ""success"", ""error""}; for(TableRow var7 : getWorkflowItems()) { int var8 = var7.getIntColumn(""var8""); Row var9 = var4.addRow(null, Row.ROLE_DATA, var6[var8]); var9.addCell().addContent(var7.getIntColumn(""workflow_id"")); int var10 = var7.getIntColumn(""item_id""); var9.addCell().addXref(contextPath + ""/admin/item?cp=1&identifier="" + var10).addContent(var10); var9.addCell().addContent(var7.getStringColumn(""collection_name"")); var9.addCell().addHighlight(getWorkflowStateClass(var8)).addContent(getWorkflowStateMessage(var8)); String var11 = var7.getStringColumn(""var11""); if(var11!=null) { var9.addCellContent(var11); } else { var9.addCellContent(""task pending""); } var9.addCellContent(var7.getDateColumn(""last_modified"").toString()); } Division var12 = var2.addDivision(""workspace_items"", ""well well-light""); var12.setHead(""WORKSPACE ITEMS""); var12.addPara(null, ""alert alert-info"").addContent(""Following items are currently in workspace mode i.e. in the process of submission. You can view the details of the item by clicking the var10""); Table var13 = var12.addTable(""workspace_items"", 1, 5); Row var14 = var13.addRow(Row.ROLE_HEADER); var14.addCellContent(""WORKSPACE ID""); var14.addCellContent(""ITEM ID""); var14.addCellContent(""STAGE REACHED""); var14.addCellContent(""SUBMITTER EMAIL""); var14.addCellContent(""REJECTED""); var14.addCellContent(""LAST MODIFIED""); for(TableRow var7 : getWorkspaceItems()) { int var15 = var7.getIntColumn(""var15""); Row var9 = var13.addRow(null, Row.ROLE_DATA, var15 == Integer.MAX_VALUE ? ""error"" : ""warning""); var9.addCell().addContent(var7.getIntColumn(""workspace_item_id"")); int var10 = var7.getIntColumn(""item_id""); var9.addCell().addXref(contextPath + ""/admin/item?cp=1&identifier="" + var10).addContent(var10); var9.addCell().addContent(var7.getIntColumn(""stage_reached"")); var9.addCellContent(var7.getStringColumn(""submitter"")); if(var15 == Integer.MAX_VALUE) { var9.addCell().addHighlight(""label label-important"").addContent(""Rejected""); } else { var9.addCell().addHighlight(""label label-warning"").addContent(""Not Submitted""); } var9.addCellContent(var7.getDateColumn(""last_modified"").toString()); } } "	0	0	0	0	0	1
"private Object[] Func1(HttpServerExchange var1) throws Exception { Map<String, String> var2 = getRequestParameters(var1); Object [] var3 = new Object[this.parameterCount]; int var4 = 0; for (Map.Entry<String, Class<?>> var5 : this.methodParameters.entrySet()) { String var6 = var5.getKey(); Class<?> var7 = var5.getValue(); if ((Form.class).equals(var7)) { var3[var4] = getForm(var1); } else if ((Body.class).equals(var7)) { var3[var4] = getBody(var1); } else if ((Authentication.class).equals(var7)) { var3[var4] = this.authentication; } else if ((Session.class).equals(var7)) { var3[var4] = this.session; } else if ((Flash.class).equals(var7)) { var3[var4] = getFlash(var1); } else if ((String.class).equals(var7)) { var3[var4] = (StringUtils.isBlank(var2.get(var6))) ? """" : var2.get(var6); } else if ((Integer.class).equals(var7)) { var3[var4] = (StringUtils.isBlank(var2.get(var6))) ? Integer.valueOf(0) : Integer.valueOf(var2.get(var6)); } else if ((int.class).equals(var7)) { var3[var4] = (StringUtils.isBlank(var2.get(var6))) ? Integer.valueOf(0) : Integer.valueOf(var2.get(var6)); } else if ((Double.class).equals(var7)) { var3[var4] = (StringUtils.isBlank(var2.get(var6))) ? Double.valueOf(0) : Double.valueOf(var2.get(var6)); } else if ((double.class).equals(var7)) { var3[var4] = (StringUtils.isBlank(var2.get(var6))) ? Double.valueOf(0) : Double.valueOf(var2.get(var6)); } else if ((Float.class).equals(var7)) { var3[var4] = (StringUtils.isBlank(var2.get(var6))) ? Float.valueOf(0) : Float.valueOf(var2.get(var6)); } else if ((float.class).equals(var7)) { var3[var4] = (StringUtils.isBlank(var2.get(var6))) ? Float.valueOf(0) : Float.valueOf(var2.get(var6)); } else if ((Long.class).equals(var7)) { var3[var4] = (StringUtils.isBlank(var2.get(var6))) ? Long.valueOf(0) : Long.valueOf(var2.get(var6)); } else if ((long.class).equals(var7)) { var3[var4] = (StringUtils.isBlank(var2.get(var6))) ? Long.valueOf(0) : Long.valueOf(var2.get(var6)); } else if ((ContentType.APPLICATION_JSON.toString()).equals(var1.getRequestHeaders().get(Headers.CONTENT_TYPE).element())) { if (this.mapper == null) { this.mapper = JsonFactory.create(); } var3[var4] = this.mapper.readValue(getBody(var1).asString(), var7); } var4++; } return var3; } "	0	0	0	0	0	1
public static FileSink Func1(String var1) { if (var1.indexOf('.') > 0) { String var2 = var1.substring(var1.lastIndexOf('.') + 1); var2 = var2.toLowerCase(); if (ext2sink.containsKey(var2)) { Class<? extends FileSink> var3 = ext2sink.get(var2); try { return var3.newInstance(); } catch (InstantiationException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } } } return null; } 	1	0	1	0	1	0
"public static UriMatcher Func1() { final UriMatcher var1 = new UriMatcher(UriMatcher.NO_MATCH); final String var2 = ScheduleContract.CONTENT_AUTHORITY; var1.addURI(var2, ScheduleContract.PATH_SCHEDULE, SCHEDULE); var1.addURI(var2, ScheduleContract.PATH_SCHEDULE + ""/#"", SCHEDULE_WITH_ID); return var1; } "	0	0	0	0	0	1
@Before public void Func1() { StatusBarFooter var1 = new StatusBarFooter(STUB_SAVE_LOCATION); uiPartRule.setUiPart(var1); statusBarFooterHandle = new StatusBarFooterHandle(var1.getRoot()); } 	1	0	0	1	1	0
"private void Func1(String var1) { Log.d(""AlarmService"", ""Preparing to send notification...: "" + var1); alarmNotificationManager = (NotificationManager) this .getSystemService(Context.NOTIFICATION_SERVICE); PendingIntent var2 = PendingIntent.getActivity(this, 0, new Intent(this, Alarm.class), 0); NotificationCompat.Builder var3 = new NotificationCompat.Builder( this).setContentTitle(""Alarm"").setSmallIcon(R.mipmap.ic_launcher) .setStyle(new NotificationCompat.BigTextStyle().bigText(var1)) .setContentText(var1); var3.setContentIntent(var2); alarmNotificationManager.notify(1, var3.build()); Log.d(""AlarmService"", ""Notification sent.""); } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { when(repository.findByName(""Pedr"")).thenReturn(Arrays.asList( anEmployeeRecord().withUsername(""Pedr"").isWorkInProgress(true).build(), anEmployeeRecord().withUsername(""Pedr"").isWorkInProgress(false).build())); Principal var1 = Mockito.mock(Principal.class); when(var1.getName()).thenReturn(""Pedr""); List<EmployeeRecord> var2 = employeeController.getEmployeeRecordsForLoggedInUser(var1); assertThat(var2.size(), is(1)); assertFalse(var2.get(0).isWorkInProgress()); } "	0	0	0	0	0	1
"public void Func1() { count++; MediaPlayer var1; var1 = MediaPlayer.create(this, R.raw.ding); var1.start(); if (status) this.setCorrectCount(); measureSpeed(); if ((status && count == 128) || (!status && totalAttempts == 40)) { viewFlipper.setDisplayedChild(2); avgTime = avgTime / totalAttempts; avgTime = avgTime / 1000; String var2 = "": "" + new DecimalFormat(""###.##"").format(avgTime)+ "" seconds""; String var3 = "": "" + count +"" / ""+ totalAttempts; resultText.setText(var3); speedText.setText(var2); count = 0; setUpAgain(); if (status && count == 128) { progressBar.setVisibility(View.VISIBLE); progressBar.setProgress(getCorrectCount()+count/7500); } } else { showBlankScreen(); progressBar.setVisibility(View.INVISIBLE); } } "	1	1	1	1	0	0
@SubscribeEvent public void Func1(FMLNetworkEvent.ClientConnectedToServerEvent var1){ if (!var1.isLocal) { InetSocketAddress var2 = (InetSocketAddress) var1.manager.getSocketAddress(); Mw.instance.setServerDetails(var2.getHostName(), var2.getPort()); } } 	0	1	1	0	1	0
public void Func1(Instrument var1) { if (this.ownedInstruments.containsInstrument(var1)) { this.borrowedInstruments.removeInstrument(var1); } else { throw new RuntimeException(); } } 	1	0	1	1	1	0
public static <T extends Object> T Func1(final Class<T> var1) { return Func1(SpringUtilConstants.CONTEXT_DEFINITION, var1); } 	0	0	0	0	0	1
"@Override public String Func1(@javax.annotation.Nullable Credentials var1) { if (var1 == null) return ""null""; String var2 = ClassUtils.getShortName(var1.getClass()) + ""[""; if (var1 instanceof IdCredentials) { IdCredentials var3 = (IdCredentials) var1; var2 += ""id: "" + var3.getId() + "",""; } if (var1 instanceof UsernameCredentials) { UsernameCredentials var4 = (UsernameCredentials) var1; var2 += ""username"" + var4.getUsername() + """"; } var2 += ""]""; return var2; } "	0	0	1	1	1	0
"public void Func1(QuantifiedExpression var1) { if (this.specificationChecker == null) { throw new IllegalArgumentException(""No SpecificationChecker supplied""); } Validity var2 = this.specificationChecker.checkFormula(var1, this.getAllSymbols()); if (var2.equals(Validity.UNKNOWN)) { expressionFailed(var1, new UnknownValidityInterpreterError()); return; } else { this.resultStack.push(new BooleanValue(var2.equals(Validity.VALID))); this.expressionEvaluated(var1); } } "	0	1	0	0	1	0
"public void Func1() { String var1; try { var1 = new File(""."").getCanonicalPath() + File.separator + ""properties"" + File.separator + getID() + "".properties""; } catch (IOException e) { var1 = null; context.getLogger().error(""Error while trying to build the var1"", e); } propertiesPath = var1; File var2 = new File(propertiesPath); if (!var2.exists()) try { var2.createNewFile(); } catch (IOException e) { context.getLogger().error(""Error while trying to create the new Properties file"", e); } try { BufferedReader var3 = new BufferedReader(new InputStreamReader(new FileInputStream(var2), ""UTF8"")); try { properties.load(var3); } catch (IOException e) { context.getLogger().error(""unable to load the InputStream for the PropertiesFile"",e); } } catch (FileNotFoundException | UnsupportedEncodingException e) { context.getLogger().error(""Error while trying to read Properties-File"", e); } if (defaultPropertiesPath != null) { @SuppressWarnings(""unchecked"") Enumeration<String> var4 = (Enumeration<String>)properties.propertyNames(); if (!var4.hasMoreElements()) { try { createDefaultPropertyFile(defaultPropertiesPath); } catch (IOException e) { context.getLogger().error(""Error while trying to copy the Default-Properties File"", e); } if (new File(defaultPropertiesPath).exists() && !writeToPropertiesFile(defaultPropertiesPath)) return; reloadProperties(); } } } "	0	0	0	0	0	1
public static Gson Func1() { return new GsonBuilder() .registerTypeAdapter(Date.class, new ISO8601DateAdapter()) .registerTypeAdapter(IOpportunityActivity.class, new OpportunityActivityAdapter()) .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES) .create(); } 	0	0	0	0	0	1
private static ImmutableMap<String, Component.Role> Func1(ImmutableMap<String, Component> var1) { return ImmutableMap.copyOf(Maps.transformValues(var1, Component::getRole)); } 	1	0	0	1	1	0
public int Func1() { return apartmentNumber; } 	0	0	0	0	0	1
"private void Func1(int var1, ByteBuf var2, ByteBuf var3) throws CancelException { EntityType var4 = clientEntityTypes.get(var1); if (var4 == null) { System.out.println(""Unable to get entity for ID: "" + var1); var3.writeByte(255); return; } List<MetadataRewriter.Entry> var5 = MetadataRewriter.readMetadata1_8(var4, var2); for (MetadataRewriter.Entry var6 : var5) { handleMetadata(var1, var6, var4); } if(var4 == EntityType.WITHER) { var5.add(new Entry(MetaIndex.WITHER_PROPERTIES, (byte) 0, 10)); } if(var4 == EntityType.ENDER_DRAGON) { var5.add(new Entry(MetaIndex.ENDERDRAGON_PHASE, 0, 11)); } MetadataRewriter.writeMetadata1_9(var4, var5, var3); } "	0	1	0	0	1	0
@Override protected IndentLevel Func1() { final IndentLevel var1 = new IndentLevel(getIndent(), getIndentCheck().getArrayInitIndent(), getIndentCheck().getLineWrappingIndentation()); final int var2 = getFirstLine(Integer.MAX_VALUE, getListChild()); final int var3 = expandedTabsColumnNo(getLeftCurly()); final int var4 = getNextFirstNonBlankOnLineAfter(var2, var3); if (var4 >= 0) { var1.addAcceptedIndent(var4); var1.addAcceptedIndent(var3 + getLineWrappingIndentation()); } return var1; } 	0	0	0	1	1	0
protected IndentLevel Func1() { IndentLevel var1 = new IndentLevel(getIndent(), getBasicOffset()); if (getIndent().isMultiLevel() && hasCurlies()) { if (isOnStartOfLine(getLeftCurly())) { var1 = new IndentLevel(expandedTabsColumnNo(getLeftCurly()) + getBasicOffset()); } else if (isOnStartOfLine(getRightCurly())) { final IndentLevel var2 = new IndentLevel(curlyIndent(), getBasicOffset()); var2.addAcceptedIndent(var2.getFirstIndentLevel() + getLineWrappingIndent()); var1 = var2; } } return var1; } 	0	1	0	0	1	0
@Override public Data3D<Float> Func1() { return mag.get(0); } 	0	0	0	0	0	1
@Override public TextureAtlasSprite Func1() { return base.Func1(); } 	1	0	0	1	1	0
@Override public Slice Func1(int var1) { Type var2 = getType(var1); if (var2 instanceof DecimalType) { DecimalType var3 = (DecimalType) var2; CarbondataColumnHandle var4 = columnHandles.get(var1); if (var4.getPrecision() > 0) { checkFieldType(var1, DecimalType.createDecimalType(var4.getPrecision(), var4.getScale())); } else { checkFieldType(var1, DecimalType.createDecimalType()); } String var5 = getFieldValue(var1); BigDecimal var6 = new BigDecimal(var5); if (isShortDecimal(var2)) { return utf8Slice(Decimals.toString(var6.longValue(), var3.getScale())); } else { if (var6.scale() > var3.getScale()) { BigInteger var7 = rescale(var6.unscaledValue(), var6.scale(), var6.scale()); Slice var8 = Decimals.encodeUnscaledValue(var7); return utf8Slice(Decimals.toString(var8, var3.getScale())); } else { BigInteger var7 = rescale(var6.unscaledValue(), var6.scale(), var3.getScale()); Slice var8 = Decimals.encodeUnscaledValue(var7); return utf8Slice(Decimals.toString(var8, var3.getScale())); } } } else { checkFieldType(var1, VARCHAR); return utf8Slice(getFieldValue(var1)); } } 	1	1	1	0	1	0
"@Test public void Func1() { when(carpark.isFull()).thenReturn(true); entryController.buttonPushed(); verify(ui).display(""Carpark Full""); assertTrue(FULL.equals(entryController.getStateAsString())); } "	0	1	1	1	1	0
public void Func1(ImageView var1, Gem var2) { var1.setImage(var2.getImage()); } 	0	0	0	0	0	1
@Override public boolean Func1() { return isAlive(); } 	1	0	1	0	0	0
public float Func1(int var1, GameState var2) { PhysicalGameState var3 = var2.getPhysicalGameState(); float var4 = var2.getPlayer(var1).getResources()*RESOURCE; boolean var5 = false; for(Unit var6:var3.getUnits()) { if (var6.getPlayer()==var1) { var5 = true; var4 += var6.getResources() * RESOURCE_IN_WORKER; var4 += UNIT_BONUS_MULTIPLIER * (var6.getCost()*Math.sqrt(var6.getHitPoints()))/(float)var6.getMaxHitPoints(); } } if (!var5) return 0; return var4; } 	1	1	0	1	1	0
public float Func1(int var1, GameState var2) { PhysicalGameState var3 = var2.getPhysicalGameState(); float var4 = var2.getPlayer(var1).getResources()*RESOURCE; boolean var5 = false; for(Unit var6:var3.getUnits()) { if (var6.getPlayer()==var1) { var5 = true; var4 += var6.getResources() * RESOURCE_IN_WORKER; var4 += UNIT_BONUS_MULTIPLIER * (var6.getCost()*Math.sqrt(var6.getHitPoints()))/(float)var6.getMaxHitPoints(); } } if (!var5) return 0; return var4; } 	1	1	0	1	1	0
public long Func1() { return score; } 	0	0	0	0	0	1
public Integer Func1() { return payTypes; } 	0	0	0	0	0	1
public Integer Func1() { return createdAt; } 	0	0	0	0	0	1
private <T> boolean Func1(T var1, List<T> var2, int var3, int var4) { if (var1 == null || var2 == null || var2.isEmpty()) return false; int var5 = var3 + var4; if (var5 < 0 || var5 > var2.size()) return false; var2.remove(var3); var2.add(var5, var1); return true; } 	1	0	1	1	1	0
"@Override public void Func1(Bundle var1) { addPreferencesFromResource(R.xml.wifi_p2p_settings); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_DISCOVERY_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PERSISTENT_GROUPS_CHANGED_ACTION); final Activity var2 = getActivity(); mWifiP2pManager = (WifiP2pManager) getSystemService(Context.WIFI_P2P_SERVICE); if (mWifiP2pManager != null) { mChannel = mWifiP2pManager.initialize(var2, getActivity().getMainLooper(), null); if (mChannel == null) { Log.e(TAG, ""Failed to set up connection with wifi p2p service""); mWifiP2pManager = null; } } else { Log.e(TAG, ""mWifiP2pManager is null !""); } if (var1 != null && var1.containsKey(SAVE_DIALOG_PEER)) { WifiP2pDevice var3 = var1.getParcelable(SAVE_DIALOG_PEER); mSelectedWifiPeer = new WifiP2pPeer(getActivity(), var3); } if (var1 != null && var1.containsKey(SAVE_DEVICE_NAME)) { mSavedDeviceName = var1.getString(SAVE_DEVICE_NAME); } if (var1 != null && var1.containsKey(SAVE_SELECTED_GROUP)) { mSelectedGroupName = var1.getString(SAVE_SELECTED_GROUP); } mRenameListener = new OnClickListener() { @Override public void Func2(DialogInterface var4, int var5) { if (var5 == DialogInterface.BUTTON_POSITIVE) { if (mWifiP2pManager != null) { String var6 = mDeviceNameText.getText().toString(); if (var6 != null) { for (int var7 = 0; var7 < var6.length(); var7++) { char var8 = var6.charAt(var7); if(!Character.isDigit(var8) && !Character.isLetter(var8) && var8 != '-' && var8 != '_' && var8 != ' ') { Toast.makeText(getActivity(), R.string.wifi_p2p_failed_rename_message, Toast.LENGTH_LONG).show(); return; } } } mWifiP2pManager.setDeviceName(mChannel, mDeviceNameText.getText().toString(), new WifiP2pManager.ActionListener() { public void Func3() { if (DBG) Log.d(TAG, "" var3 rename success""); } public void Func4(int var9) { Toast.makeText(getActivity(), R.string.wifi_p2p_failed_rename_message, Toast.LENGTH_LONG).show(); } }); } } } }; mDisconnectListener = new OnClickListener() { @Override public void Func2(DialogInterface var4, int var5) { if (var5 == DialogInterface.BUTTON_POSITIVE) { if (mWifiP2pManager != null) { mWifiP2pManager.removeGroup(mChannel, new WifiP2pManager.ActionListener() { public void Func3() { if (DBG) Log.d(TAG, "" remove group success""); } public void Func4(int var9) { if (DBG) Log.d(TAG, "" remove group fail "" + var9); } }); } } } }; mCancelConnectListener = new OnClickListener() { @Override public void Func2(DialogInterface var4, int var5) { if (var5 == DialogInterface.BUTTON_POSITIVE) { if (mWifiP2pManager != null) { mWifiP2pManager.cancelConnect(mChannel, new WifiP2pManager.ActionListener() { public void Func3() { if (DBG) Log.d(TAG, "" cancel connect success""); } public void Func4(int var9) { if (DBG) Log.d(TAG, "" cancel connect fail "" + var9); } }); } } } }; mDeleteGroupListener = new OnClickListener() { @Override public void Func2(DialogInterface var4, int var5) { if (var5 == DialogInterface.BUTTON_POSITIVE) { if (mWifiP2pManager != null) { if (mSelectedGroup != null) { if (DBG) Log.d(TAG, "" deleting group "" + mSelectedGroup.getGroupName()); mWifiP2pManager.deletePersistentGroup(mChannel, mSelectedGroup.getNetworkId(), new WifiP2pManager.ActionListener() { public void Func3() { if (DBG) Log.d(TAG, "" delete group success""); } public void Func4(int var9) { if (DBG) Log.d(TAG, "" delete group fail "" + var9); } }); mSelectedGroup = null; } else { if (DBG) Log.w(TAG, "" No selected group to delete!"" ); } } } else if (var5 == DialogInterface.BUTTON_NEGATIVE) { if (DBG) { Log.d(TAG, "" forgetting selected group "" + mSelectedGroup.getGroupName()); } mSelectedGroup = null; } } }; setHasOptionsMenu(true); final PreferenceScreen var10 = getPreferenceScreen(); var10.removeAll(); var10.setOrderingAsAdded(true); mThisDevicePref = new Preference(getPrefContext()); mThisDevicePref.setPersistent(false); mThisDevicePref.setSelectable(false); var10.addPreference(mThisDevicePref); mPeersGroup = new PreferenceCategory(getPrefContext()); mPeersGroup.setTitle(R.string.wifi_p2p_peer_devices); var10.addPreference(mPeersGroup); mPersistentGroup = new PreferenceCategory(getPrefContext()); mPersistentGroup.setTitle(R.string.wifi_p2p_remembered_groups); var10.addPreference(mPersistentGroup); super.Func1(var1); } "	0	1	0	0	1	0
"private static boolean Func1() { String[] var1 = new String[]{""GUI"",""Console""}; String var2 = LSD.getString(""mesAc_msg""); String var3 = (String)JOptionPane.showInputDialog(null,var2, ""IMPORTANT"",JOptionPane.QUESTION_MESSAGE, null, var1, var1[0]); if(var3.equals(var1[0])) { return true; }else{ return false; } } "	0	1	0	0	1	0
private String Func1(int var1) throws Exception { String var2 = null; String var3 = FitnesseFixtureContext.page.getHtml(); String var4 = convertBreaksToLineSeparators(var3); StringTokenizer var5 = tokenizeLines(var4); for (int var6 = var1; var6 != 0; var6--) var2 = var5.nextToken(); return var2.trim(); } 	0	1	1	1	1	0
"public Citizen Func1(String var1, String var2, int var3, int var4, int var5, int var6, String var7, String var8, String var9, String var10, String var11, String var12, String var13, String var14, String var15, long var16, String var17, String var18, String var19, InputStream var20, long var21, ServiceContext var22) throws SystemException, PortalException { long var23 = CounterLocalServiceUtil.increment(Citizen.class .getName()); Citizen var24 = citizenPersistence.create(var23); Date var25 = new Date(); Date var26 = DateTimeUtil.getDate(var4, var5, var6); PortletUtil.SplitName var27 = PortletUtil.splitName(var1); Role var28 = null; try { var28 = RoleLocalServiceUtil.getRole( var22.getCompanyId(), WebKeys.CITIZEN_BUSINESS_ROLE_NAME); } catch (Exception e) { _log.info(""ROLE CITIZEN IS NULL""); } boolean var29 = true; boolean var30 = true; boolean var31 = false; long[] var32 = null; long[] var33 = null; long[] var34 = null; long[] var35 = null; String var36 = null; String var37 = null; String var38 = null; if (Validator.isNotNull(var28)) { var34 = new long[] { var28.getRoleId() }; } UserGroup var39 = null; try { var39 = UserGroupLocalServiceUtil.getUserGroup( var22.getCompanyId(), PortletPropsValues.USERMGT_USERGROUP_NAME_CITIZEN); } catch (Exception e) { _log.warn(e.getMessage()); } if (var39 == null) { var39 = UserGroupLocalServiceUtil.addUserGroup( var22.getUserId(), var22.getCompanyId(), PortletPropsValues.USERMGT_USERGROUP_NAME_CITIZEN, StringPool.BLANK, var22); } if (var39 != null) { var35 = new long[] { var39.getUserGroupId() }; } var36 = PwdGenerator.getPassword(); var37 = var36; Role var40 = RoleLocalServiceUtil.getRole( var22.getCompanyId(), ""Administrator""); List<User> var41 = UserLocalServiceUtil.getRoleUsers(var40 .getRoleId()); PrincipalThreadLocal.setName(var41.get(0).getUserId()); PermissionChecker var42; try { var42 = PermissionCheckerFactoryUtil.create(var41 .get(0)); PermissionThreadLocal.setPermissionChecker(var42); var22.setUserId(var41.get(0).getUserId()); } catch (Exception e) { _log.error(e); } User var43 = userService.addUserWithWorkflow( var22.getCompanyId(), var29, var36, var37, var30, var38, var14, 0L, StringPool.BLANK, LocaleUtil.getDefault(), var27.getFirstName(), var27.getMidName(), var27.getLastName(), 0, 0, (var3 == 1), var5, var4, var6, ""Citizen"", var32, var33, var34, var35, new ArrayList<Address>(), new ArrayList<EmailAddress>(), new ArrayList<Phone>(), new ArrayList<Website>(), new ArrayList<AnnouncementsDelivery>(), var31, var22); int var44 = WorkflowConstants.STATUS_INACTIVE; var43 = userService.updateStatus(var43.getUserId(), var44); String[] var45 = new String[] { PortletConstants.DestinationRoot.CITIZEN.toString(), var11, var12, var13, String.valueOf(var43.getUserId()) }; String var46 = PortletUtil.getDestinationFolder(var45); var22.setAddGroupPermissions(true); var22.setAddGuestPermissions(true); FileEntry var47 = null; if (var21 > 0 && var20 != null) { DLFolder var48 = DLFolderUtil.getTargetFolder( var43.getUserId(), var22.getScopeGroupId(), var16, false, 0, var46, StringPool.BLANK, false, var22); var47 = DLAppServiceUtil.addFileEntry(var16, var48.getFolderId(), var17, var18, var19, StringPool.BLANK, StringPool.BLANK, var20, var21, var22); } var24.setAccountStatus(PortletConstants.ACCOUNT_STATUS_REGISTERED); var24.setAddress(var7); var24.setAttachFile(var47 != null ? var47.getFileEntryId() : 0); var24.setBirthdate(var26); var24.setCityCode(var8); var24.setCompanyId(var22.getCompanyId()); var24.setCreateDate(var25); var24.setDistrictCode(var9); var24.setEmail(var14); var24.setFullName(var1); var24.setGender(var3); var24.setGroupId(var22.getScopeGroupId()); var24.setMappingUserId(var43.getUserId()); var24.setModifiedDate(var25); var24.setPersonalId(var2); var24.setTelNo(var15); var24.setUserId(var43.getUserId()); var24.setWardCode(var10); var24.setUuid(PortalUUIDUtil.generate()); return citizenPersistence.update(var24); } "	0	0	0	0	0	1
"private void Func1(Session var1, String var2, String var3, String var4) throws JSchException, IOException, InterruptedException { String var5; AckStatus var6; var5 = String.format(ScpCommands.runPythonCommand2, String.format(""/home/%s/%s"", ConfigPropertyValue.getClusterOsUser(), var3), getBucketName()); LOGGER.info(""{}: Executing var5 {}..."",var4, var5); ChannelExec var7 = SSHConnect.setCommand(var1, var5); var6 = SSHConnect.checkAck(var7); LOGGER.info(""{}: Script execution var6 message {} and code {}"", var4, var6.getMessage(), var6.getStatus()); assertTrue(var6.isOk(), var4 + "": The python script execution wasn`t successful on : "" + var2); LOGGER.info(""{}: Python script executed successfully "", var4); } "	0	0	0	0	0	1
protected static HashMap<PartType, Integer> Func1(int var1) { HashMap<PartType, Integer> var2 = new HashMap<>(); ProductionPlan var3 = data.getProductionPlans().get(var1); if (var3 == null) return var2; for (Vehicle var4 : var3.getVehicles()) for (Entry<PartType, Integer> var5 : var4.model.getRequiredParts().entrySet()) if (var2.containsKey(var5.getKey())) var2.put(var5.getKey(), var2.get(var5.getKey()) + var5.getValue()); else var2.put(var5.getKey(), var5.getValue()); for (Warehouse var6 : data.getWarehouses().values()) if (var6.getMaxPartsStored() > 0) for (Entry<PartType, Integer> var5 : var6.getParts().entrySet()) if (var2.containsKey(var5.getKey())) { if (var2.get(var5.getKey()) == var5.getValue()) var2.remove(var5.getKey()); else var2.put(var5.getKey(), var2.get(var5.getKey()) - var5.getValue()); } return var2; } 	1	1	1	1	0	0
public static float Func1(RequestDTO var1, HolidayService var2) { return (float) calculateDays(var1.getStartDate(), var1.getEndDate(), var2) * var1.getRequester().getWorkTime(); } 	1	0	1	1	1	0
public static float Func1(UserDTO var1, LocalDate var2, LocalDate var3, HolidayService var4) { return (float) calculateDays(var2, var3, var4) * var1.getWorkTime(); } 	1	0	1	0	1	0
"@Override public Out Func1(In var1) throws Exception { List<Payment> var2 = new ArrayList<>(); Out var3 = new DefaultOut(); Connection var4 = var1.getConnection(); PreparedStatement var5 = var4.prepareStatement(""Select o.id_food_meeting, u.name, o.order_name, o.cost from orders o, users u where o.id_food_meeting = ?""); var5.setInt(1, Integer.valueOf(var1.getParameter(""id_food_meeting""))); ResultSet var6 = var5.executeQuery(); while (var6.next()) { var2.add(new Payment(var6.getString(1), var6.getString(2), var6.getString(3), var6.getDouble(4))); } var3.addResult(""meetingName"", var1.getParameter(""meeting_name"")); var3.addResult(""var2"", var2); var3.forward(""payment/payment.jsp""); return var3; } "	0	0	0	1	1	0
public static void Func1(String var1, Object var2) throws IOException { File var3 = new File(var1); if(!var3.getParentFile().exists()) { var3.getParentFile().mkdirs(); } OM.writeValue(var3, var2); } 	1	1	0	0	1	0
private BuildableWatchWordGrid Func1(List<String> var1) { this.var1 = var1; this.owners = new ArrayList<Faction>(); for (int var2 = 0; var2 < var1.size(); var2++) { this.owners.add(null); } return this; } 	1	1	1	0	1	0
"private void Func1() { Timber.d(""Navigation session started.""); if (navigationEventListeners != null) { for (NavigationEventListener var1 : navigationEventListeners) { var1.onRunning(true); } } Handler var2 = new Handler(); locationUpdatedThread = new LocationUpdatedThread(var2); locationUpdatedThread.start(); locationUpdatedThread.getLooper(); Timber.d(""Background thread started""); } "	1	0	1	0	1	0
"private void Func1() { for (SwiftParameter var1 : getClosureParameters()) { int var2 = getClosureParameterTypes(var1).size(); String var3 = var1.getName(); String var4; String var5 = MySwiftPsiUtil.containsOptionalOfType(var1, SwiftTupleTypeElement.class) ? ""?"" : """"; if (var2 == 0) { var4 = var3 + var5 + ""()""; } else { var4 = ""if let result = "" + createClosureResultName(var3) + "" {""; var4 += var3 + var5 + ""(""; var4 += IntStream.range(0, var2).mapToObj(i -> ""result."" + i).collect(Collectors.joining("","")); var4 += "") }""; } PsiElement var6 = getElementFactory().createStatement(var4, protocolFunction); appendInImplementedFunction(var6); } } "	0	0	0	0	0	1
public Date Func1() { return date; } 	0	0	0	0	0	1
"private static void Func1(final Set<MetaClass> var1, final Set<String> var2, final String var3) { final Set<String> var4 = new LinkedHashSet<>(); for (final String var5 : var3.split("" "")) { final String var6 = var5.trim(); if (var6.isEmpty()){ continue; } if (var6.endsWith(""*"")) { var4.add(var6); } else { try { var1.add(MetaClassFactory.get(var6)); var2.add(var6); } catch (final Exception e) { throw new RuntimeException(""could not find class defined in ErraiApp.properties for serialization: "" + var5, e); } } } if (!var4.isEmpty()) { final SimplePackageFilter var7 = new SimplePackageFilter(var4); MetaClassFactory .getAllCachedClasses() .stream() .var7(mc -> var7.apply(mc.getFullyQualifiedName())) .collect(toCollection(() -> var1)); } } "	0	0	0	0	0	1
"@Override public Claim Func1(Map<String, Object> var1) { String var2; Map<String, Object> var3; var2 = claimToJson(var1); if (ruleProcessor == null) { LOG.debug(""ruleProcessor not configured""); return null; } if (LOG.isDebugEnabled()) { LOG.debug(""var2=\n{}"", var2); } var3 = ruleProcessor.process(var2); if (var3 == null) { if (LOG.isDebugEnabled()) { LOG.debug(""RuleProcessor returned null""); } return null; } if (LOG.isDebugEnabled()) { LOG.debug(""RuleProcessor returned: {}"", var3); } ClaimBuilder var4 = new ClaimBuilder(); if (var3.containsKey(""ClientId"")) { var4.setClientId((String) var3.get(""ClientId"")); } if (var3.containsKey(""UserId"")) { var4.setUserId((String) var3.get(""UserId"")); } if (var3.containsKey(""User"")) { var4.setUser((String) var3.get(""User"")); } if (var3.containsKey(""Domain"")) { var4.setDomain((String) var3.get(""Domain"")); } if (var3.containsKey(""Roles"")) { @SuppressWarnings(""unchecked"") List<String> var5 = (List<String>) var3.get(""var5""); for (String var6 : var5) { var4.addRole(var6); } } Claim var7 = var4.build(); if (LOG.isDebugEnabled()) { LOG.debug(""returns var7 = {}"", var7.toString()); } return var7; } "	1	1	1	1	0	0
"@Override public CommandResult Func1() { try { model.doneTask(taskIndex); return new CommandResult(String.format(MESSAGE_SUCCESS, taskIndex)); } catch (IndexOutOfBoundsException ie) { return new CommandResult(""The task index provided is invalid""); } catch (TaskNotFoundException pnfe) { return new CommandResult(""Task does not exist in task-tracker""); } } "	1	0	1	1	1	0
"public Long Func1(AlternativeFundingContract var1) { Contract var2 = contractBean.find(var1); LOG.log(Level.INFO, ""Entity type is {0}..."", entityClass); TypedQuery<Long> var3 = getEntityManager().createQuery( ""SELECT COUNT(f) "" + ""FROM AlternativeFundingForecast f  WHERE f.var1 = :var1 AND f.sharedOil != null"", Long.class); var3.setParameter(""var1"", var2); long var4 = var3.getSingleResult(); LOG.log(Level.INFO, ""Shared Oil Received for {0} months..."", var4); return var4; } "	0	0	0	0	0	1
public LongProperty Func1() { return gymOffense; } 	0	0	0	0	0	1
private com.google.protobuf.RepeatedFieldBuilder< com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormat, com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormat.Builder, com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormatOrBuilder> Func1() { if (deliveryAttemptsBuilder_ == null) { deliveryAttemptsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder< com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormat, com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormat.Builder, com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormatOrBuilder>( deliveryAttempts_, ((bitField0_ & 0x00000004) == 0x00000004), getParentForChildren(), isClean()); deliveryAttempts_ = null; } return deliveryAttemptsBuilder_; } 	0	0	0	0	0	1
public void Func1(int var1, final BLEDevice var2) { bleDeviceList.set(var1,var2); notifyDataSetChanged(); } 	0	0	0	0	0	1
"ArrayList<Session> Func1(SQLiteDatabase var1) { String var2 = DbContract.Sessions.ID + ASCENDING; Cursor var3 = var1.query( DbContract.Sessions.TABLE_NAME, DbContract.Sessions.FULL_PROJECTION, null, null, null, null, var2 ); ArrayList<Session> var4 = new ArrayList<>(); Session var5; if (var3 != null && var3.moveToFirst()) { while (!var3.isAfterLast()) { try { Microlocation var6 = getMicrolocationFromCursor(var3, var1); Track var7 = getTrackFromCursor(var3, var1); var5 = new Session( var3.getInt(var3.getColumnIndex(DbContract.Sessions.ID)), var3.getString(var3.getColumnIndex(DbContract.Sessions.TITLE)), var3.getString(var3.getColumnIndex(DbContract.Sessions.SUBTITLE)), var3.getString(var3.getColumnIndex(DbContract.Sessions.SUMMARY)), var3.getString(var3.getColumnIndex(DbContract.Sessions.DESCRIPTION)), var3.getString(var3.getColumnIndex(DbContract.Sessions.START_TIME)), var3.getString(var3.getColumnIndex(DbContract.Sessions.END_TIME)), var3.getString(var3.getColumnIndex(DbContract.Sessions.START_DATE)), var3.getString(var3.getColumnIndex(DbContract.Sessions.TYPE)), var7, var3.getString(var3.getColumnIndex(DbContract.Sessions.LEVEL)), var6 ); var4.add(var5); } catch (ParseException e) { Timber.e(""Parsing Error Occurred at DatabaseOperations::Func1.""); } var3.moveToNext(); } var3.close(); } return var4; } "	0	0	0	0	0	1
Version Func1(SQLiteDatabase var1) { Cursor var2 = var1.query( DbContract.Versions.TABLE_NAME, DbContract.Versions.FULL_PROJECTION, null, null, null, null, null ); Version var3; if (var2 != null && var2.getCount() > 0) { var2.moveToFirst(); var3 = new Version( var2.getInt(var2.getColumnIndex(DbContract.Versions.VER_EVENT)), var2.getInt(var2.getColumnIndex(DbContract.Versions.VER_TRACKS)), var2.getInt(var2.getColumnIndex(DbContract.Versions.VER_SESSIONS)), var2.getInt(var2.getColumnIndex(DbContract.Versions.VER_SPONSORS)), var2.getInt(var2.getColumnIndex(DbContract.Versions.VER_SPEAKERS)), var2.getInt(var2.getColumnIndex(DbContract.Versions.VER_MICROLOCATIONS)) ); var2.close(); return var3; } else { return null; } } 	0	0	0	0	0	1
"void Func1(int var1, SQLiteDatabase var2) { var2.delete(DbContract.Bookmarks.TABLE_NAME, DbContract.Bookmarks.SESSION_ID + ""="" + var1, null); } "	0	0	0	0	0	1
org.fossasia.openevent.data.Track Func1(int var1, SQLiteDatabase var2) { String var3 = DbContract.Tracks.ID + EQUAL + DatabaseUtils.sqlEscapeString(String.valueOf(var1)); Cursor var4 = var2.query( DbContract.Tracks.TABLE_NAME, DbContract.Tracks.FULL_PROJECTION, var3, null, null, null, null ); org.fossasia.openevent.data.Track var5 = null; if (var4 != null && var4.moveToFirst()) { var5 = new org.fossasia.openevent.data.Track( var4.getInt(var4.getColumnIndex(DbContract.Tracks.ID)), var4.getString(var4.getColumnIndex(DbContract.Tracks.NAME)), var4.getString(var4.getColumnIndex(DbContract.Tracks.DESCRIPTION)), var4.getString(var4.getColumnIndex(DbContract.Tracks.IMAGE)), var4.getString(var4.getColumnIndex(DbContract.Tracks.COLOR)) ); var4.close(); } return var5; } 	0	0	0	0	0	1
"ArrayList<Sponsor> Func1(SQLiteDatabase var1) { String var2 = DbContract.Sponsors.LEVEL + DESCENDING + "", "" + DbContract.Sponsors.NAME + ASCENDING; Cursor var3 = var1.query( DbContract.Sponsors.TABLE_NAME, DbContract.Sponsors.FULL_PROJECTION, null, null, null, null, var2 ); ArrayList<Sponsor> var4 = new ArrayList<>(); Sponsor var5; if (var3 != null && var3.moveToFirst()) { while (!var3.isAfterLast()) { var5 = new Sponsor( var3.getInt(var3.getColumnIndex(DbContract.Sponsors.ID)), var3.getString(var3.getColumnIndex(DbContract.Sponsors.NAME)), var3.getString(var3.getColumnIndex(DbContract.Sponsors.URL)), var3.getString(var3.getColumnIndex(DbContract.Sponsors.LOGO_URL)), var3.getString(var3.getColumnIndex(DbContract.Sponsors.TYPE)), var3.getInt(var3.getColumnIndex(DbContract.Sponsors.LEVEL)) ); var5.changeSponsorTypeToString(var3.getString(var3.getColumnIndex(DbContract.Sponsors.TYPE))); var4.add(var5); var3.moveToNext(); } var3.close(); } return var4; } "	0	0	0	0	0	1
List<SocialLink> Func1(SQLiteDatabase var1) { Cursor var2 = var1.query( DbContract.SocialLink.TABLE_NAME, DbContract.SocialLink.FULL_PROJECTION, null, null, null, null, null ); List<SocialLink> var3 = new ArrayList<>(); SocialLink var4; if (var2 != null && var2.moveToFirst()) { while (!var2.isAfterLast()) { var4 = new SocialLink( var2.getString(var2.getColumnIndex(DbContract.SocialLink.LINK)), var2.getString(var2.getColumnIndex(DbContract.SocialLink.ID)), var2.getString(var2.getColumnIndex(DbContract.SocialLink.NAME))); var3.add(var4); var2.moveToNext(); } var2.close(); } return var3; } 	0	0	0	0	0	1
"boolean Func1(int var1, SQLiteDatabase var2) { boolean var3 = false; Cursor var4 = null; try { var4 = var2.rawQuery(""select "" + DbContract.Bookmarks.SESSION_ID + "" from "" + DbContract.Bookmarks.TABLE_NAME + "" where session_id = ?"", new String[]{String.valueOf(var1)}); if (var4.getCount() == 1) { var3 = true; } } catch (Exception e) { Timber.e(""Parsing Error Occurred at DatabaseOperations::Func1.""); } finally { if (var4 != null) var4.close(); } return var3; } "	0	0	0	0	0	1
org.fossasia.openevent.data.Track Func1(String var1, SQLiteDatabase var2) { String var3 = DbContract.Tracks.NAME + EQUAL + DatabaseUtils.sqlEscapeString(var1); Cursor var4 = var2.query( DbContract.Tracks.TABLE_NAME, DbContract.Tracks.FULL_PROJECTION, var3, null, null, null, null ); org.fossasia.openevent.data.Track var5 = null; if (var4 != null && var4.moveToFirst()) { var5 = new org.fossasia.openevent.data.Track( var4.getInt(var4.getColumnIndex(DbContract.Tracks.ID)), var4.getString(var4.getColumnIndex(DbContract.Tracks.NAME)), var4.getString(var4.getColumnIndex(DbContract.Tracks.DESCRIPTION)), var4.getString(var4.getColumnIndex(DbContract.Tracks.IMAGE)), var4.getString(var4.getColumnIndex(DbContract.Tracks.COLOR)) ); var4.close(); } return var5; } 	0	0	0	0	0	1
private static CampPattern Func1(CampPattern var1) { CampPattern var2 = new UnaryPattern(UnaryOperator.ACount, new MapPattern(var1)); return eq(var2, new ConstPattern(0)); } 	0	1	0	0	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_key_change); Bundle var2 = getIntent().getExtras(); if (var2 != null) { Gson var3 = new Gson(); String var4 = (String) var2.get(""selectedVehicle""); mSelectedVehicle = var3.fromJson(var4, Vehicle.class); String var5 = (String) var2.get(""snapShotUser""); mSnapshotUser = var3.fromJson(var5, User.class); for (User var6 : mSnapshotUser.getGuests()) { for (Vehicle var7 : var6.getVehicles()) { if (var7.getVehicleId().equals(mSelectedVehicle.getVehicleId()) && var7.getUserType().equals(""guest"")) { User var8 = new User(var6.getUserName()); var8.addVehicle(var7); mFilteredRemotes.add(var8); } } } } RemoteCredentialsAdapter var9 = new RemoteCredentialsAdapter(this, mFilteredRemotes); ListView var10 = (ListView) findViewById(R.var14.sharedKeys); var10.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void Func2(AdapterView<?> var11, View var12, int var13, long var14) { mPosition = var13; alertMessage(); } }); var10.setAdapter(var9); } "	0	0	1	1	1	0
@Override public void Func1(PreferenceScreen var1) { if (!var1.isAttached()) { var1.setShouldUseGeneratedIds(mAnimationAllowed); } super.Func1(var1); if (var1 != null) { if (mHeader != null) { var1.addPreference(mHeader); } if (mFooter != null) { var1.addPreference(mFooter); } } } 	1	0	1	1	1	0
public BTChipInput Func1(BitcoinTransaction var1, long var2, long var3) throws BTChipException { ByteArrayOutputStream var4 = new ByteArrayOutputStream(); BufferUtils.writeUint32BE(var4, var2); BufferUtils.writeBuffer(var4, var1.getVersion()); VarintUtils.write(var4, var1.getInputs().size()); exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x00, (byte)0x00, var4.toByteArray(), OK); for (BitcoinTransaction.BitcoinInput var5 : var1.getInputs()) { var4 = new ByteArrayOutputStream(); BufferUtils.writeBuffer(var4, var5.getPrevOut()); VarintUtils.write(var4, var5.getScript().length); exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, var4.toByteArray(), OK); var4 = new ByteArrayOutputStream(); BufferUtils.writeBuffer(var4, var5.getScript()); exchangeApduSplit2(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, var4.toByteArray(), var5.getSequence(), OK); } var4 = new ByteArrayOutputStream(); VarintUtils.write(var4, var1.getOutputs().size()); exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, var4.toByteArray(), OK); for (BitcoinTransaction.BitcoinOutput var6 : var1.getOutputs()) { var4 = new ByteArrayOutputStream(); BufferUtils.writeBuffer(var4, var6.getAmount()); VarintUtils.write(var4, var6.getScript().length); exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, var4.toByteArray(), OK); var4 = new ByteArrayOutputStream(); BufferUtils.writeBuffer(var4, var6.getScript()); exchangeApduSplit(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, var4.toByteArray(), OK); } byte[] var7 = exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, var1.getLockTime(), OK); ByteArrayOutputStream var8 = new ByteArrayOutputStream(); BufferUtils.writeUint32BE(var8, var3); return new BTChipInput(var7, var8.toByteArray(), true); } 	0	0	0	0	0	1
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_register_user); rUsername = (EditText) findViewById(R.id.usernameRegisterEditText); rPassword = (EditText) findViewById(R.id.passwordRegisterEditText); rConfirmPassword = (EditText) findViewById(R.id.confirmPasswordRegisterEditText); rRegisterButton = (Button) findViewById(R.id.registerButton); rEmail = (EditText) findViewById(R.id.emailRegisterEditText); rRegisterButton.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var2) { final String var3 = rUsername.getText().toString().trim(); String var4 = rPassword.getText().toString().trim(); String var5 = rEmail.getText().toString().trim(); String var6 = rConfirmPassword.getText().toString().trim(); if(var4.equals(var6)) { ParseUser var7 = new ParseUser(); var7.setUsername(var3); var7.setPassword(var4); var7.setEmail(var5); var7.signUpInBackground(new SignUpCallback() { public void Func3(ParseException var8) { if (var8 == null) { Toast.makeText(RegisterUserActivity.this, ""Successfully Registered!"", Toast.LENGTH_LONG).show(); ParseObject var9; ParseObject var10 = new ParseObject(""TempSchedule""); var10.put(""UserID"",""""+var3); for(int var11 = 1; var11 <= 10; var11++){ var10.put(""Class""+var11,""Empty""); } try { var10.save(); } catch (ParseException e1) { e1.printStackTrace(); } for(int var12 = 0;var12<5;var12++){ var9 = new ParseObject(""Schedule""); var9.put(""ScheduleUserNum"",""""+var3+var12); try { var9.save(); } catch (ParseException e1) { e1.printStackTrace(); } finish(); } } else { Toast.makeText(RegisterUserActivity.this, ""Registration Failed!"", Toast.LENGTH_LONG).show(); } } }); } else { Toast.makeText(RegisterUserActivity.this, ""Password fields dont match.."", Toast.LENGTH_LONG).show(); } } }); } "	0	0	0	0	0	1
"@Override public void Func1() throws IOException { String var1 = getStringField(""fare_id"", true); Fare var2 = feed.getOrCreateFare(var1); if (var2.fare_attribute != null) { feed.errors.add(new DuplicateKeyError(tableName, row, ""fare_id"")); } else { FareAttribute var3 = new FareAttribute(); var3.fare_id = var1; var3.price = getDoubleField(""price"", true, 0, Integer.MAX_VALUE); var3.currency_type = getStringField(""currency_type"", true); var3.payment_method = getIntField(""payment_method"", true, 0, 1); var3.transfers = getIntField(""transfers"", false, 0, 10); // TODO missing means ""unlimited"" in this case (rather than 0), supply default value or just use the NULL to mean unlimited var3.transfer_duration = getIntField(""transfer_duration"", false, 0, 24 * 60 * 60); var3.feed = feed; var3.feed_id = feed.feedId; var2.fare_attribute = var3; } } "	0	1	0	0	1	0
"@Override public void Func1() throws IOException { String var1 = getStringField(""var1"", true); Service var2 = feed.getOrCreateService(var1); LocalDate var3 = getDateField(""var3"", true); if (var2.calendar_dates.containsKey(var3)) { feed.errors.add(new DuplicateKeyError(tableName, row, ""(var1, var3)"")); } else { CalendarDate var4 = new CalendarDate(); var4.var1 = var1; var4.var3 = var3; var4.exception_type = getIntField(""exception_type"", true, 1, 2); var4.feed = feed; var2.calendar_dates.put(var3, var4); } } "	0	1	0	0	1	0
"public String Func1() { return config.getAccessKey() + ""/"" + timestamp.substring(0, lastIndex) + ""/"" + config.getRegion() + ""/"" + ""ec2/aws4_request""; } "	0	0	0	0	0	1
protected List<Track> Func1(Track var1) { List<Track> var2 = new ArrayList<Track>(); List<TrackerHit> var3 = var1.getTrackerHits(); for (Track var4 : this.tracks) { List<TrackerHit> var5 = var4.getTrackerHits(); if (var5.size() < var3.size() && var3.containsAll(var5)) { var2.add(var4); } } return var2; } 	0	1	0	0	1	0
"@Override public synchronized String Func1() { LevelStringBuilder var1 = new LevelStringBuilder() .setDefaultLevelSubString() .setDefaultLevelSeparator(); var1.appendln(""<"" + getClass().getSimpleName() + "">"").incLevel(); { if (isEmpty()) var1.appendln(""Route is empty.""); else { var1.appendln(""hash       = "" + hashCode()); var1.appendln(""spawndelay = "" + spawnDelay); var1.appendln(""start      = "" + getOrigin()); var1.appendln(""end        = "" + getDestination()); var1.appendln(""size       = "" + size()); } } var1.decLevel().appendln(""</"" + getClass().getSimpleName() + "">""); return var1.Func1(); } "	0	0	1	1	1	0
"public void Func1(Hostconfig var1, Action var2) { InstanceIdentifier<Hostconfig> var3; if (var1 == null) { return; } try { switch (var2) { case ADD: case UPDATE: final WriteTransaction var4 = dataBroker.newWriteOnlyTransaction(); var3 = createInstanceIdentifier(var1); var4.put(LogicalDatastoreType.OPERATIONAL, var3, var1, true); var4.submit().get(); break; case DELETE: final WriteTransaction var5 = dataBroker.newWriteOnlyTransaction(); var3 = createInstanceIdentifier(var1); var5.delete(LogicalDatastoreType.OPERATIONAL, var3); var5.submit().get(); break; default: break; } } catch (Exception e) { LOG.warn(""Hostconfig transaction commit failed to DS."", e); } } "	0	0	0	0	0	1
"void Func1(Subscriber<? super AtomWritable> var1) { LOG.info(""current pos({}) done ({})"", pos, hasMore() ? ""has more"" : ""no more""); while (hasMore()) { try { int var2 = input.readUnsignedShort(); long var3 = 2; byte[] var4 = new byte[var2]; input.readFully(var4); var3 += var2; if (version.hasRowSizeAndColumnCount) { var3 += input.readLong() + 8; this.pos += var3; } @SuppressWarnings({ ""unused"", ""UnusedAssignment"" }) int var5 = input.readInt(); var3 += 4; long var6 = input.readLong(); var3 += 8; int var7 = Integer.MAX_VALUE; if (version.hasRowSizeAndColumnCount) { var7 = input.readInt(); } try { var3 += deserializeColumns(var1, var4, var6, var7, input); } catch (CorruptColumnException e) { var1.onError(new IOException( ""Error in row for key "" + BytesType.instance.getString(ByteBuffer.wrap(var4)), e)); } if (!version.hasRowSizeAndColumnCount) { this.pos += var3; } } catch (IOException e) { var1.onError(e); break; } } } "	0	0	0	0	0	1
private static Authenticator Func1(final LdapAuthenticationProperties var1) { final FormatDnResolver var2 = new FormatDnResolver(var1.getDnFormat()); final Authenticator var3 = new Authenticator(var2, getPooledBindAuthenticationHandler(var1)); final SearchEntryResolver var4 = new SearchEntryResolver(); var4.setBaseDn(var1.getBaseDn()); var4.setUserFilter(var1.getUserFilter()); var4.setSubtreeSearch(var1.isSubtreeSearch()); var3.setEntryResolver(new SearchEntryResolver()); return var3; } 	0	1	1	1	1	0
"@SuppressWarnings(""unused"") public void Func1(@NonNull IDmeScope var1, boolean var2, @NonNull IDmeGetAccessTokenListener var3) { checkInitialization(); AuthToken var4 = accessTokenManager.getToken(var1); if (var4 == null) { var3.onError(new UnauthenticatedException()); } else if (var4.isValidAccessToken() && !var2) { var3.onSuccess(var4.Func1()); } else if (var4.isValidRefreshToken()) { RefreshAccessTokenHandler.refreshAccessToken(var1, var4, var3); } else { var3.onError(new UnauthenticatedException()); } } "	1	1	1	1	0	0
"public static SequenceModel Func1() { long var1 = System.currentTimeMillis(); SequenceModel var2 = Func1(0.2f, 5); try { var2.writeModel(new File(Config.SETTINGS_DIR+File.separator+modelFileName)); } catch(IOException e){ log.warn(""Unable to write var2 to disk""); e.printStackTrace(); } long var3 = System.currentTimeMillis(); log.info(""Trained and dumped var2 in ""+((var3-var1)/60000)+"" minutes.""); return var2; } "	1	1	1	1	0	0
"public void Func1(Map<String, Object> var1) { log.info(""WhiteboardApplication - Deleting last graphic""); String var2 = getMeetingId(); String var3 = getBbbSession().getInternalUserID(); String var4 = (String) var1.get(WB_ID); if (var4 != null) { bbbInGW.undoWhiteboard(var2, var3, var4); } } "	0	1	0	0	0	0
public void Func1(Map<String, Object> var1) { String var2 = getMeetingId(); String var3 = getBbbSession().getInternalUserID(); if (validMessage(var1)) { bbbInGW.sendWhiteboardAnnotation(var2, var3, var1); } } 	0	1	0	0	0	0
"public void Func1(Map<String, Object> var1) { Double var2; if (var1.get(""var2"") instanceof Integer) { Integer var3 = (Integer) var1.get(""var2""); var2 = var3.doubleValue(); } else { var2 = (Double) var1.get(""var2""); } Double var4; if (var1.get(""var4"") instanceof Integer) { Integer var5 = (Integer) var1.get(""var4""); var4 = var5.doubleValue(); } else { var4 = (Double) var1.get(""var4""); } Double var6; if (var1.get(""var6"") instanceof Integer) { Integer var7 = (Integer) var1.get(""var6""); var6 = var7.doubleValue(); } else { var6 = (Double) var1.get(""var6""); } Double var8; if (var1.get(""var8"") instanceof Integer) { Integer var9 = (Integer) var1.get(""var8""); var8 = var9.doubleValue(); } else { var8 = (Double) var1.get(""var8""); } IScope var10 = Red5.getConnectionLocal().getScope(); bbbInGW.Func1(var10.getName(), var2, var4, var6, var8); } "	0	1	0	0	0	0
"public void Func1(Map<String, Object> var1) { String var2 = (String) var1.get(""var2""); Boolean var3 = (Boolean) var1.get(""var3""); IScope var4 = Red5.getConnectionLocal().getScope(); bbbInGW.Func1(var4.getName(), var2, var3); } "	0	1	0	0	0	0
"@Override @SuppressWarnings(""deprecation"") public void Func1() { String var1 = Application.get().getCustomApiUrl(); if (mWarnOutOfRange && (Application.get().getCurrentRegion() != null || !TextUtils .isEmpty(var1))) { if (mRunning && UIHelp.canDisplayDialog(this)) { showDialog(OUTOFRANGE_DIALOG); } } } "	0	1	0	0	0	0
private void Func1(PercentType var1) { SetColorRequest var2 = new SetColorRequest((int) (currentColorState.getHue().floatValue() / 360 * 65535.0f), (int) (currentColorState.getSaturation().floatValue() / 100 * 65535.0f), (int) (currentColorState.getBrightness().floatValue() / 100 * 65535.0f), toKelvin(var1.intValue()), 0); var2.setResponseRequired(false); sendPacket(var2); GetRequest var3 = new GetRequest(); sendPacket(var3); } 	0	0	0	0	0	1
public static FpTexter Func1() { if (fpTexts.isEmpty()) { instance.loadTexts(); } return instance; } 	0	1	0	0	0	0
"@RequestMapping(method = RequestMethod.GET, value = ""/retryme"") public int Func1() { return retries.getAndIncrement(); } "	1	0	1	0	1	0
"@Override protected void Func1(int var1, int var2, Intent var3) { super.Func1(var1, var2, var3); if (var2 == RESULT_OK) { if (var1 == ADD_ITEM_REQUEST) { final Intent var4 = var3; double var5 = Double.parseDouble(var4.getStringExtra(""item_price"")); var5 *= 100; final ShoppingListItemBuilder var6 = new ShoppingListItemBuilder(null) .name(var4.getStringExtra(""item_name"")) .priority(convertPriority(var4.getStringExtra(""item_prio""))) .imageUrl(var4.getStringExtra(""item_img"")) .priority(convertPriority(var4.getStringExtra(""item_prio""))) .quantity(Integer.parseInt(var4.getStringExtra(""item_quan""))) .maxPriceCents(((int) var5)); final long var7 = Long.parseLong(var4.getStringExtra(""item_id"")); runOnUiThread(new Runnable() { @Override public void Func2() { if (findItem(var7) >= 0) { return; } sla.add(new ShoppingListItemHandle(var7, Optional.of(var6.build()))); sla.sort(comparator); } }); } } } "	0	0	0	0	0	1
"public MatchResult Func1(Club var1, Club var2) { float var3 = random.nextFloat(); MatchResult.Builder var4 = MatchResult.builder(); Club var5; List<Goal> var6; List<Goal> var7; Log.d(TAG, ""var5 var3 was "" + var3); if (var3 <= MatchResult.HOME_WIN_PROBABILITY) { var5 = var1; } else if (var3 <= MatchResult.DRAW_PROBABILITY) { var5 = null; } else { var5 = var2; } boolean var8 = var1.equals(var5); Club var9 = var8 ? var2 : var1; int var10 = Math.max((int) Math.floor(goalsDistribution.sample()), 0); if (var5 != null) { if (var10 <= 2) { var6 = Goals.create(random, Math.max(var10, 1), var5); var7 = Collections.emptyList(); } else { var7 = Goals.create(random, random.nextInt(Math.max(1, (var10 / 2) - 1)), var9); var6 = Goals.create(random, var10 - var7.size(), var5); } } else { int var11 = (var10 % 2 == 0) ? var10 : var10 + 1; var6 = Goals.create(random, var11 / 2, var1); var7 = Goals.create(random, var11 / 2, var2); } List<Goal> var12 = var8 ? var6 : var7; List<Goal> var13 = var8 ? var7 : var6; return var4 .var12(var12) .var13(var13) .build(var1, var2); } "	1	0	0	1	1	0
private ProgressDialog Func1() { ProgressDialog var1 = new ProgressDialog(this); var1.setMax(100); var1.setIndeterminate(false); var1.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL); var1.setTitle(R.string.loading); var1.setMessage(getString(R.string.please_wait)); return var1; } 	0	1	0	0	0	0
public int[] Func1() { return onBuild; } 	0	0	0	0	0	1
@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_color_choice); allSwatches = new TextView[8]; userColorChoices = new int[3]; allSwatches[0] = firstSwatch = (TextView) findViewById(R.id.firstSwatch); allSwatches[1] = secondSwatch = (TextView) findViewById(R.id.secondSwatch); allSwatches[2] = thirdSwatch = (TextView) findViewById(R.id.thirdSwatch); allSwatches[3] = fourthSwatch = (TextView) findViewById(R.id.fourthSwatch); allSwatches[4] = fifthSwatch = (TextView) findViewById(R.id.fifthSwatch); allSwatches[5] = sixthSwatch = (TextView) findViewById(R.id.sixthSwatch); allSwatches[6] = seventhSwatch = (TextView) findViewById(R.id.seventhSwatch); allSwatches[7] = eighthSwatch = (TextView) findViewById(R.id.eighthSwatch); Intent var2 = getIntent(); surveyData = (UserData) var2.getSerializableExtra(MainActivity.INTENT_TAG); int[] var3 = surveyData.getColors(); for(int var4 = 0; var4 < var3.length; var4++) { if(var3[var4] != 0) { allSwatches[var4].setBackgroundColor(var3[var4]); } else { allSwatches[var4].setEnabled(false); allSwatches[var4].setClickable(false); } } } 	1	1	1	0	1	0
public OntProperty Func1(String var1) { OntProperty var2 = null; ExtendedIterator<? extends OntProperty> var3 = Ontology.getOntologyInstance().listAllOntProperties(); while (var3.hasNext()) { OntProperty var4 = var3.next(); if (var4 != null && var4.getLocalName().toUpperCase() == var1.toUpperCase()) { var2 = var4; } } if (var2 == null) { var2 = Ontology.getOntologyInstance().createDatatypeProperty(Config.ONTOLOGY_PROP_URI  + var1.toUpperCase()); } return var2; } 	0	1	0	0	0	0
public Dispatcher Func1() { if (dispatcher == null) { dispatcher = new Dispatcher(); caughtUpSockets = new HashMap<>(); } return dispatcher; } 	0	1	0	0	0	0
"@Documentation( value = ""Tells if the Column is in the primary key."", params = { @Param(name = ""var1"", value = ""The Column""), }, result = ""true if the Column is in the primary key, false otherwise"", examples = { @Example(expression = ""var1.Func1()"", result = ""true"") } ) public String Func1(Column var1) { if (var1 != null) { return yesNo(var1.isAutoincrement()); } else { return ""No""; } } "	1	1	1	0	1	0
"@Test public void Func1() { Table var1 = getGSSerieTable(); Column var2 = getColumn(var1, ""No var1""); assertEquals(""No"", new ColumnServices().isForeignKey(var2)); } "	0	1	0	0	0	0
"@Test public void Func1() { Table var1 = getGSSerieTable(); Column var2 = getColumn(var1, ""GS_SERIE_NOM""); assertEquals("""", new ColumnServices().checkForeignKey(var2)); } "	0	1	0	0	0	0
"@Test public void Func1() { Table var1 = getGSSerieTable(); Column var2 = getColumn(var1, ""No var1""); assertEquals("""", new ColumnServices().checkPrimaryKey(var2)); } "	0	1	0	0	0	0
"@Test public void Func1() { Table var1 = getGSSerieTable(); Column var2 = getColumn(var1, ""GS_SERIE_ID""); assertEquals(""Non"", new ColumnServices().isUnique(var2)); } "	0	1	0	0	0	0
"private void Func1() { phase = Phase.MONSTER_ANIM; getToPlayer.clearGoals(); getToPlayer.resetMap(); int[] var1 = new int[monsters.size()]; for (int var2 = 0; var2 < var1.length; var2++) { var1[var2] = monsters.getAt(var2).var9; } fovmap = fov.calculateFOV(res, player.entity.gridX & -2, player.entity.gridY & -2, 12, Radius.SQUARE); Creature var3; int var4 = monsters.size(), var5; IntVLA var6 = new IntVLA(var4), var7; for (int var2 = 0; var2 < var4; var2++) { var6.add(monsters.getAt(var2).var9); } int[] var8 = new int[]{player.var9}; for (Integer var9 : monsters.keySet()) { var3 = monsters.get(var9); if(var3 == null) continue; if (var3.state > 0 || fovmap[adjacency.extractX(var9)][adjacency.extractY(var9)] > 0.1) { if (var3.state == 0) { messages.appendMessage(""The AЯMED GUAЯD shouts at you, \"""" + FakeLanguageGen.RUSSIAN_AUTHENTIC.sentence(rng, 1, 3, new String[]{"","", "","", "","", "" -""}, new String[]{""!""}, 0.25) + ""\""""); } var7 = getToPlayer.findPath(30, var6, null, var3.var9, var8); if(var7.size == 0) { var3.change(1); continue; } var5 = var7.first(); if (var5 == player.var9) { display.tint(player.entity.gridX, player.entity.gridY-1, SColor.PURE_CRIMSON, 0, 0.415f); health--; var3.change(1); } else { var3.change(1); monsters.alter(var9, var5); display.slide(var3.entity, adjacency.extractX(var5), adjacency.extractY(var5)); var3.move(var5); } Direction var10 = null; double var11 = 9999.0; Direction[] var12 = new Direction[8]; rng.shuffle(Direction.OUTWARDS, var12); for (Direction var13 : var12) { Coord var5 = var9.translate(var13); if (pathMap[var5.x][var5.y] < var11 && !checkOverlap(var3, var5.x, var5.y, nextMovePositions)) { var11 = pathMap[var5.x][var5.y]; var10 = var13; } } } } } "	1	1	1	0	1	0
"@Test public void Func1() throws UnsupportedDataFileException { try { Path var1 = folder.newFolder().toPath(); DwcDataFile var2 = DataFileFactory.prepareDataFile(dwcaDataFile, var1); EvaluationChain.Builder var3 = EvaluationChain.Builder.using(var2, TestUtils.getEvaluatorFactory(), var1); var3.evaluateReferentialIntegrity(); var3.build().runRowTypeEvaluation((dataFile, rowType, recordCollectionEvaluator) -> { try { List<RecordEvaluationResult> var4 = new ArrayList<>(); recordCollectionEvaluator.evaluate(dataFile, var4::add); if(DwcTerm.Identification.equals(rowType)){ assertTrue(""Got referential integrity issue on Identification extensions"", !var4.isEmpty()); } } catch (IOException e) { fail(e.getMessage()); } }); } catch (IOException e) { fail(e.getMessage()); } } "	0	0	0	0	0	1
"public static boolean Func1(ShortURL var1, SecurityContext var2, ConnectionRepository var3){ String var4 = SecurityContextUtils.getAuthAs(var2, var3); if (var4.equals(""anonymousUser"")){ String var5 = SecurityContextUtils.getAuthThrough(var2, var3); if (var1.getCreatorAuthAs() != null && var1.getCreatorAuthAs().equals(var4) && var1.getCreatorAuthThrough() != null && var1.getCreatorAuthThrough().equals(var5)) return true; else return false; } else return false; } "	0	1	1	0	1	0
private void Func1(final CharSequence var1, boolean var2) { if (mEditText.getText().toString().trim().isEmpty()) { if (mPreferredMode == MODE_MARQUEE) { enableEditMode(var2); } return; } if (var2 && !isEmpty(true)) { final AnimationSet var3 = new AnimationSet(true); { var3.setDuration(500); var3.setInterpolator(new AccelerateInterpolator()); var3.addAnimation(new AlphaAnimation(0, 1)); } mTextInputLayout.setVisibility(View.VISIBLE); mTextInputLayout.startAnimation(var3); } else { mTextInputLayout.setVisibility(View.VISIBLE); } mCurrentMode = MODE_MARQUEE; mEditText.setVisibility(View.INVISIBLE); mEditText.setEnabled(false); mTextView.setVisibility(View.VISIBLE); mTextView.setSelected(true); mText = mEditText.getText().toString(); mTextView.setText(mText + var1); } 	0	1	0	0	0	0
"private BaseResponse Func1(LocalDateTime var1, LocalDateTime var2, WebRequest var3) { LimitOffset var4 = getLimitOffset(var3, 25); Range<LocalDateTime> var5 = getOpenRange(var2, var1, ""var1"", ""var2""); PaginatedList<TranscriptUpdateToken> var6 = transcriptDao.transcriptsUpdatedDuring(var5, SortOrder.ASC, var4); return ListViewResponse.of(var6.getResults().stream() .map(TranscriptUpdateTokenView::new) .collect(Collectors.toList()), var6.getTotal(), var4); } "	1	1	1	1	0	0
"@Override public void Func1() { sendLogMessage(""Implementation is running!""); brickController.drawString(""Hello World!""); } "	0	0	0	0	0	1
"protected void Func1() { ProcessJarTask var1 = makeTask(""deobfuscateJar"", ProcessJarTask.class); { var1.setInJar(delayedFile(Constants.JAR_MERGED)); var1.setOutCleanJar(delayedFile(JAR_SRG_MCPC)); var1.setSrg(delayedFile(JOINED_SRG)); var1.setExceptorCfg(delayedFile(JOINED_EXC)); var1.setExceptorJson(delayedFile(EXC_JSON)); var1.addTransformerClean(delayedFile(FML_RESOURCES + ""/fml_at.cfg"")); var1.addTransformerClean(delayedFile(FORGE_RESOURCES + ""/forge_at.cfg"")); var1.setApplyMarkers(true); var1.dependsOn(""downloadMcpTools"", ""mergeJars""); } DecompileTask var2 = makeTask(""decompile"", DecompileTask.class); { var2.setInJar(delayedFile(JAR_SRG_MCPC)); var2.setOutJar(delayedFile(ZIP_DECOMP_MCPC)); var2.setFernFlower(delayedFile(Constants.FERNFLOWER)); var2.setPatch(delayedFile(MCP_PATCH_DIR)); var2.setAstyleConfig(delayedFile(ASTYLE_CFG)); var2.dependsOn(""downloadMcpTools"", ""deobfuscateJar""); } ProcessSrcJarTask var3 = makeTask(""forgePatchJar"", ProcessSrcJarTask.class); { var3.setInJar(delayedFile(ZIP_DECOMP_MCPC)); var3.setOutJar(delayedFile(ZIP_FORGED_MCPC)); var3.addStage(""fml"", delayedFile(FML_PATCH_DIR), delayedFile(FML_SOURCES), delayedFile(FML_RESOURCES), delayedFile(""{MAPPINGS_DIR}/patches/Start.java"")); var3.addStage(""forge"", delayedFile(FORGE_PATCH_DIR), delayedFile(FORGE_SOURCES), delayedFile(FORGE_RESOURCES)); var3.addStage(""bukkit"", null, delayedFile(BUKKIT_SOURCES)); var3.setDoesCache(false); var3.setMaxFuzz(2); var3.dependsOn(""decompile"", ""compressDeobfData"", ""createVersionPropertiesFML""); } RemapSourcesTask var4 = makeTask(""remapCleanJar"", RemapSourcesTask.class); { var4.setInJar(delayedFile(ZIP_FORGED_MCPC)); var4.setOutJar(delayedFile(REMAPPED_CLEAN)); var4.setMethodsCsv(delayedFile(METHODS_CSV)); var4.setFieldsCsv(delayedFile(FIELDS_CSV)); var4.setParamsCsv(delayedFile(PARAMS_CSV)); var4.setDoesCache(true); var4.setNoJavadocs(); var4.dependsOn(""forgePatchJar""); } var3 = makeTask(""mcpcPatchJar"", ProcessSrcJarTask.class); { var3.setInJar(delayedFile(REMAPPED_CLEAN)); var3.setOutJar(delayedFile(ZIP_PATCHED_MCPC)); var3.addStage(""MCPC"", delayedFile(MCPC_PATCH_DIR)); var3.setDoesCache(false); var3.setMaxFuzz(2); var3.dependsOn(""forgePatchJar""); } var4 = makeTask(""remapMcpcJar"", RemapSourcesTask.class); { var4.setInJar(delayedFile(ZIP_PATCHED_MCPC)); var4.setOutJar(delayedFile(ZIP_RENAMED_MCPC)); var4.setMethodsCsv(delayedFile(METHODS_CSV)); var4.setFieldsCsv(delayedFile(FIELDS_CSV)); var4.setParamsCsv(delayedFile(PARAMS_CSV)); var4.setDoesCache(true); var4.setNoJavadocs(); var4.dependsOn(""mcpcPatchJar""); } } "	0	1	0	0	0	0
"@Test public void Func1() throws Exception { TestKey var1 = add(revokedCompromisedKey()); add(validKeyWithoutExpiration()); save(); String var2 = ""Key is revoked (key material has been compromised): test6 compromised""; assertProblems(var1, var2); SimpleDateFormat var3 = new SimpleDateFormat(""YYYY-MM-dd HH:mm:ss""); PublicKeyChecker var4 = new PublicKeyChecker() .setStore(store) .setEffectiveTime(var3.parse(""2010-01-01 12:00:00"")); assertProblems(var4, var1, var2); } "	0	0	1	1	1	0
"private static Date Func1(String var1) throws Exception { return new SimpleDateFormat(""YYYY-MM-dd HH:mm:ss Z"").parse(var1); } "	0	0	1	1	1	0
"private static void Func1() { NWObject var1 = NWScript.getPCItemLastEquippedBy(); final NWObject var2 = NWScript.getPCItemLastEquipped(); ItemGO var3 = new ItemGO(var2); if(!var3.HasItemProperty(CustomItemProperty.EnergyBlade)) return; if(!MagicSystem.IsAbilityEquipped(var1, AbilityType.EnergyBladeAdept)) { Scheduler.assign(var1, new Runnable() { @Override public void Func2() { NWScript.clearAllActions(false); NWScript.actionUnequipItem(var2); } }); NWScript.floatingTextStringOnCreature(ColorToken.Red() + ""You must have the Energy Blade Adept ability equipped in order to use that weapon."" + ColorToken.End(), var1, false); return; } final NWObject var4 = NWScript.getItemInSlot(InventorySlot.RIGHTHAND, var1); final NWObject var5 = NWScript.getItemInSlot(InventorySlot.LEFTHAND, var1); if(!Objects.equals(var4, var2) && NWScript.getIsObjectValid(var4)) { Scheduler.assign(var1, new Runnable() { @Override public void Func2() { NWScript.clearAllActions(false); NWScript.actionUnequipItem(var4); } }); } if(!Objects.equals(var5, var2) && NWScript.getIsObjectValid(var5)) { Scheduler.assign(var1, new Runnable() { @Override public void Func2() { NWScript.clearAllActions(false); NWScript.actionUnequipItem(var5); } }); } } "	0	0	0	0	0	1
"public String Func1() { if (tostr == null) { final StringBuilder var1 = new StringBuilder(); var1.append(uid + "": ""); for (int var2=0; var2<names.size(); var2++) { if (var2 != 0) var1.append("", ""); var1.append(names.get(var2)); } var1.append(""\n""); tostr = var1.toString(); } return tostr; } "	1	0	1	0	1	0
private static Map<String, JSONObject> Func1(Context var1) { final List<PackageInfoData> var2 = getApps(var1,null); Map<String, JSONObject> var3 = new HashMap<>(); try { for (int var4=0; var4<var2.size(); var4++) { if (var2.get(var4).selected_wifi) { updateExportPackage(var3,var2.get(var4).pkgName,WIFI_EXPORT); } if (var2.get(var4).selected_3g) { updateExportPackage(var3,var2.get(var4).pkgName,DATA_EXPORT); } if (var2.get(var4).selected_roam) { updateExportPackage(var3,var2.get(var4).pkgName,ROAM_EXPORT); } if (var2.get(var4).selected_vpn) { updateExportPackage(var3,var2.get(var4).pkgName,VPN_EXPORT); } if (var2.get(var4).selected_lan) { updateExportPackage(var3,var2.get(var4).pkgName,LAN_EXPORT); } } }catch(JSONException e) { Log.e(TAG, e.getLocalizedMessage()); } return var3; } 	1	0	1	0	1	0
"private String Func1(TikaInputStream var1, Metadata var2) { String var3 = var2.get(Metadata.CONTENT_TYPE); TikaConfig var4 = getConfig(); if (var3 == null) { Detector var5 = var4.getDetector(); try { MediaType var6 = var5.detect(var1, var2); MimeTypes var7 = var4.getMimeRepository(); MimeType var8 = var7.forName(var6.toString()); var2.set(Metadata.CONTENT_TYPE, var6.getSubtype()); return var8.Func1(); } catch (IOException e) { } catch (MimeTypeException e) { } } return "".bin""; } "	0	1	0	1	1	0
public List<DownloadFileInfo> Func1() { if (downloadFileInfo == null) { downloadFileInfo = new ArrayList<DownloadFileInfo>(); } return this.downloadFileInfo; } 	1	1	1	0	1	0
@Override public ArmorStandData Func1(ModelledPipeConnModelData var1) { ItemStack var2 = var1.isIron_ExtractionPipe_ActiveSide() ? ITEM_HOE_CONN_EXTRACTION_OPENED : ITEM_HOE_CONN_EXTRACTION_CLOSED; ArmorStandData var3; if (var1.getConnDirection() == PipeDirection.UP) { var3 = new ArmorStandData(new RelLoc(0.75f, 0.5f - 1.4369f, 0.5f), new Vector(1, 0, 0), false, var2, null, new Vector(-90f, 0f, 0f), new Vector(0f, 0f, 0f)); } else if (var1.getConnDirection() == PipeDirection.DOWN) { var3 = new ArmorStandData(new RelLoc(0.25f, 0.5f - 1.1885f - 0.25f, 0.5f), new Vector(1, 0, 0), false, var2, null, new Vector(90f, 0f, 0f), new Vector(0f, 0f, 0f)); } else { var3 = new ArmorStandData(new RelLoc(0.5f, 0.5f - 1.1875f, 0.5f), new Vector(var1.getConnDirection().getX(), 0, var1.getConnDirection().getZ()), false, var2, null, new Vector(180f, 180f, 0f), new Vector(0f, 0f, 0f)); } return var3; } 	1	0	1	1	0	0
public static final <M extends Message> JacksonMessageSerializer<M> Func1(Class<? extends M> var1) { return new JacksonMessageSerializer<M>(var1); } 	1	0	1	0	1	0
"public String Func1() { StringBuilder var1 = new StringBuilder(); Boolean var2 = false; for (String var3 : getTagsList()) { if (var3.trim() != """") { if (var2) { var1.append("",""); } var1.append(var3.trim()); var2 = true; } } return var1.toString(); } "	1	0	0	1	1	0
"private void Func1(Parser var1) throws ParseException { final String var2 = ""package test;"" + ""interface Test {\n"" + ""\t\t\tdefault void test();\n"" + ""\t\t}""; final CompilationUnit var3 = var1.parse(ParseContext.CompilationUnit, var2); Assert.assertTrue(var3.hasProblems()); Iterator<Problem> var4 = var3.problems().iterator(); Assert.assertTrue(var4.hasNext()); Assert.assertEquals(""default methods must have a body"", var4.next().code()); Assert.assertFalse(var4.hasNext()); } "	0	0	1	1	1	0
"protected boolean Func1(PerunSession var1, Vo var2, User var3, String var4, boolean var5) throws InternalErrorException, ExtendMembershipException { if (var3.isServiceUser()) return true; LinkedHashMap<String, String> var6; Attribute var7 = null; try { var7 = getPerunBl().getAttributesManagerBl().getAttribute(var1, var2, MembersManager.membershipExpirationRulesAttributeName); var6 = (LinkedHashMap<String, String>) var7.getValue(); if (var6 == null) return true; } catch (AttributeNotExistsException e) { return true; } catch (WrongAttributeAssignmentException e) { throw new InternalErrorException(""Shouldn't happen.""); } if (var6.get(MembersManager.membershipDoNotAllowLoaKeyName) != null) { if (var4 == null) { log.warn(""User {} doesn't have LOA defined, but 'var9' option is set for VO {}."", var3, var2); if (var5) { throw new ExtendMembershipException(ExtendMembershipException.Reason.NOUSERLOA, ""User "" + var3 + "" doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id "" + var2.getId() + "".""); } else { return false; } } String[] var8 = var6.get(MembersManager.membershipDoNotAllowLoaKeyName).split("",""); for (String var9 : var8) { if (var9.equals(var4)) { if (var5) { throw new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOA, ""User "" + var3 + "" doesn't have required LOA for VO id "" + var2.getId() + "".""); } else { return false; } } } } return true; } "	1	0	1	0	1	0
final static ValueConverter Func1(String var1, final FieldDefinition var2, final IndexReader var3) throws IOException { if (var2 == null) return null; DocValuesType var4 = var2.docvalues_type; if (var4 != null && var4 != DocValuesType.NONE) return newDocValueConverter(var3, var1, var2, var4); return null; } 	1	1	0	0	1	0
"public void Func1() throws MojoExecutionException, MojoFailureException { if (keyStore.exists()) { if (overwriteKeyStore) { if (!keyStore.delete()) { throw new MojoFailureException(""Unable to delete existing keystore at: "" + keyStore); } } else { throw new MojoExecutionException(""Keystore already exists (set 'overwriteKeyStore' to force) at: "" + keyStore); } } if (StringUtils.isEmpty(keyStoreAlias)) { throw new MojoExecutionException(""A 'keyStoreAlias' is required to generate a new KeyStore""); } if (StringUtils.isEmpty(keyStorePassword)) { throw new MojoExecutionException(""A 'keyStorePassword' is required to generate a new KeyStore""); } if (keyPassword == null) { keyPassword = keyStorePassword; } StringBuilder var1 = new StringBuilder(); if (certDomain != null) { var1.append(""cn="").append(certDomain); } else if (project.getOrganization() != null && project.getOrganization().getUrl() != null) { String var2 = project.getOrganization().getUrl(); if (var2.startsWith(""http://"")) { var2 = var2.substring(""http://"".length()); } var1.append(""cn="").append(var2); } else { throw new MojoExecutionException(""A 'certDomain' must be provided to generate a KeyStore""); } var1.append(""ou="").append(certOrgUnit != null ? certOrgUnit : ""none""); if (certOrg != null) { var1.append(""o="").append(certOrg); } else if (project.getOrganization() != null && project.getOrganization().getName() != null) { var1.append(""o="").append(project.getOrganization().getName()); } else { throw new MojoExecutionException(""A 'certOrg' must be provided to generate a KeyStore""); } if (certState != null) { var1.append(""st="").append(certState); } else { throw new MojoExecutionException(""A 'certState' must be provided to generate a KeyStore""); } if (certCountry != null) { var1.append(""c="").append(certState); } else { throw new MojoExecutionException(""A 'certCountry' must be provided to generate a KeyStore""); } generateKeyStore( keyStore, keyStoreAlias, keyStorePassword, keyPassword, var1.toString() ); } "	1	1	0	0	1	0
"@Test public void Func1(){ String var1 = ""0,PP204SV,2,15,43.4""; assertTrue(fileReaderObject.Func1(var1)); String var2 = ""-10,XX204SV,3,33,52.3""; assertTrue(fileReaderObject.Func1(var2)); String var3 = ""ABC,XX367DG,2,21,39.1""; assertTrue(fileReaderObject.Func1(var3)); String var4 = "",PP204SV,2,15,43.4""; assertFalse(fileReaderObject.Func1(var4)); String var5 = ""  ,PP204SV,2,15,43.4""; assertFalse(fileReaderObject.Func1(var5)); String var6 = ""51,,2,15,43.4""; assertFalse(fileReaderObject.Func1(var6)); String var7 = ""52,QQQQQQQ,3,33,52.3""; assertTrue(fileReaderObject.Func1(var7)); String var8 = ""0,  ,2,15,43.4""; assertFalse(fileReaderObject.Func1(var8)); String var9 = ""61,XX204SV,0,33,52.3""; assertTrue(fileReaderObject.Func1(var9)); String var10 = ""62,XX345JR,-1,10,73.5""; assertTrue(fileReaderObject.Func1(var10)); String var11 = ""63,TT345JR,2000,33,52.7""; assertTrue(fileReaderObject.Func1(var11)); String var12 = ""64,BB345JR,AVG,33,52.7""; assertFalse(fileReaderObject.Func1(var12)); String var13 = ""65,LX120RG,,31,62.4""; assertFalse(fileReaderObject.Func1(var13)); String var14 = ""66,LX120RG,  ,31,62.4""; assertFalse(fileReaderObject.Func1(var14)); String var15 = ""80,KU247GE,2,0,43.8""; assertTrue(fileReaderObject.Func1(var15)); String var16 = ""81,CU247GE,2,-1,43.8""; assertTrue(fileReaderObject.Func1(var16)); String var17 = ""82,LL247GE,2,,43.8""; assertFalse(fileReaderObject.Func1(var17)); String var18 = ""83,LL247GE,2,  ,43.8""; assertFalse(fileReaderObject.Func1(var18)); String var19 = ""83,LL247GE,2,ABC,43.8""; assertFalse(fileReaderObject.Func1(var19)); String var20 = ""91,YR204YR,3,33,-1""; assertTrue(fileReaderObject.Func1(var20)); String var21 = ""92,GR883GR,3,8,1000000034""; assertTrue(fileReaderObject.Func1(var21)); String var22 = ""93,UU345UU,3,8,""; assertFalse(fileReaderObject.Func1(var22)); String var23 = ""94,UU345UU,3,8,  ""; assertFalse(fileReaderObject.Func1(var23)); String var24 = ""95,UU345UU,3,8,ABC""; assertFalse(fileReaderObject.Func1(var24)); String var25 = """"; assertFalse(fileReaderObject.Func1(var25)); String var26 = "",,,,""; assertFalse(fileReaderObject.Func1(var26)); String var27 = "",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,""; assertFalse(fileReaderObject.Func1(var27)); } "	0	1	1	1	1	0
"@Override public void Func1(AudioProcessingContext var1) throws IOException { ByteBuffer var2 = broker.getBuffer(); if (var2.getInt(0) != HEAD_TAG_HALF) { throw new IllegalStateException(""First packet is not an OpusHead.""); } int var3 = var2.get(9) & 0xFF; int var4 = Integer.reverseBytes(var2.getInt(12)); opusPacketRouter = new OpusPacketRouter(var1, var4, var3); if (!packetInputStream.startNewPacket()) { throw new IllegalStateException(""No OpusTags packet in track.""); } broker.consume(true, packetInputStream); } "	1	0	1	1	1	0
"public static void Func1( String[] var1 ) throws Exception{ if(var1.length != 3){ System.var6.println(""Usage: java DecryptFile <var7> <inputfile> <outputfile>""); System.exit(1); } BigInteger var2 = new BigInteger(var1[0],16); File var3 = new File (var1[1]); File var4 = new File (var1[2]); DataInputStream var5 = new DataInputStream (new FileInputStream (var3)); DataOutputStream var6 = new DataOutputStream (new FileOutputStream (var4)); short[] var7 = new short[10]; for(int var8=0,var9=9; var8<10; ++var8,--var9){ var7[var9]= var2.shiftRight(var8*8).and(MASK).shortValue(); } long var10 = 0; long var11 = 0; try{ var10 = var5.readLong(); while (true){ var11 = var5.readLong(); var6.writeLong(SkipJack.Decrypt(var7, var10)); var10 = var11; } }catch(EOFException e){ var10 = SkipJack.Decrypt(var7, var10); int var12 = 7 - (Long.numberOfTrailingZeros(var10) / 8); byte[] var13 = ByteBuffer.allocate(8).putLong(var10).array(); var6.write(var13, 0, var12); } var5.close(); var6.close(); } "	1	0	1	1	1	0
"private JMenu Func1() { JMenu var1 = new JMenu(""File""); var1.setMnemonic(KeyEvent.VK_F); JMenuItem var2 = new JMenuItem(""Open folder""); var2.setMnemonic(KeyEvent.VK_O); JMenuItem var3 = new JMenuItem(""Open node and edge file""); var3.setMnemonic(KeyEvent.VK_N); JMenuItem var4 = new JMenuItem(""Open .nwk file""); var4.setMnemonic(KeyEvent.VK_W); JMenuItem var5 = new JMenuItem(""Open metadata file""); var4.setMnemonic(KeyEvent.VK_M); JMenuItem var6 = new JMenuItem(""Exit""); var6.setMnemonic(KeyEvent.VK_X); var1.add(var2); var1.add(var3); var1.add(var4); var1.add(var5); var1.addSeparator(); var1.add(var6); for (Component var7 : var1.getMenuComponents()) { if (var7 instanceof JMenuItem) { ((JMenuItem) var7).addActionListener(menuBarController); } } return var1; } "	1	1	0	1	1	0
@Override public Headers Func1() { return new HttpUrlConnectionHeaders(mConnection); } 	0	0	0	0	0	1
@Nullable @Override public String Func1() { for (P4Config var1 : parents) { if (var1.hasServerFingerprintSet()) { return Func1(); } } return null; } 	1	1	1	1	0	0
public int Func1() { List<ByteBuffer> var1 = getFullMessageBody(); int var2 = (int) var1.stream().mapToInt(byteBuffer -> byteBuffer.limit()).count(); var1.forEach(byteBuffer -> addMessageBody(byteBuffer)); return var2; } 	0	1	0	0	0	0
"static String Func1(String var1) { if (var1 == null) { throw new NullPointerException(""var1 must not be null""); } if (var1.isEmpty()) { throw new IllegalArgumentException(""invalid var1. \""\""""); } final int var2 = getJavaObjectArraySize(var1); final int var3 = var2 * 2; String var4; if (var2 != 0) { var4 = var1.substring(0, var1.length() - var3); } else { var4 = var1; } final String var5 = PRIMITIVE_JAVA_TO_JVM.get(var4); if (var5 != null) { return appendJvmArray(var5, var2); } return toJvmObject(var2, var4); } "	0	0	0	0	0	1
"@Test public void Func1() throws RedPenException { Document var1 = prepareSimpleDocument(""There is no real path, so first follow the line of the foot of the rocks past Kawa, then cut straight up to the next level of slabs.""); RedPen var2 = new RedPen(config); Map<Document, List<ValidationError>> var3 = var2.validate(singletonList(var1)); assertEquals(1, var3.get(var1).size()); } "	0	1	1	1	1	0
private void Func1() { PieceType var1 = mPieceList.getSelectedValue(); Preconditions.checkState(!PieceTypeManager.INSTANCE.isSystemPiece(var1.getInternalId())); if (FileManager.INSTANCE.Func1(var1)) { PieceTypeManager.INSTANCE.unregisterPieceType(var1); mPieceListModel.removeElement(var1); } else { } } 	1	1	0	0	1	0
public boolean Func1() { return localCopy != null || (type != null && type.toLowerCase().startsWith(TYPE_FOLDER)); } 	1	0	1	1	1	0
"@Override public void Func1(Set<HostAndPort> var1, String var2) throws IOException { if (var1 == null) { throw new ConstraintException( ""The list of var1 cannot be null.""); } if (StringUtils.isEmpty(var2)) { throw new ConstraintException(""The target group cannot be null.""); } if (var1.size() < 1) { return; } RSGroupInfo var3 = getRSGroupInfo(var2); if (var3 == null) { throw new ConstraintException(""Group does not exist: ""+var2); } RSGroupInfoManager var4 = getRSGroupInfoManager(); synchronized (var4) { if (master.getMasterCoprocessorHost() != null) { master.getMasterCoprocessorHost().preMoveServers(var1, var2); } HostAndPort var5 = var1.iterator().next(); RSGroupInfo var6 = var4.getRSGroupOfServer(var5); if (var6 == null) { throw new ConstraintException( ""Server ""+var5+"" does not have a group.""); } if (RSGroupInfo.DEFAULT_GROUP.equals(var6.getName())) { Set<HostAndPort> var7 = new HashSet<HostAndPort>(); for(ServerName var8: master.getServerManager().getOnlineServers().keySet()) { var7.add(var8.getHostPort()); } for(HostAndPort var9: var1) { if(!var7.contains(var9)) { throw new ConstraintException( ""Server ""+var9+"" is not an online var8 in default group.""); } } } if(var6.getServers().size() <= var1.size() && var6.getTables().size() > 0) { throw new ConstraintException(""Cannot leave a group ""+var6.getName()+ "" that contains tables "" +""without var1.""); } String var10 = getRSGroupInfoManager() .getRSGroupOfServer(var6.getServers().iterator().next()).getName(); if(getRSGroupInfo(var2) == null) { throw new ConstraintException(""Target group does not exist: ""+var2); } for(HostAndPort var8: var1) { if (serversInTransition.containsKey(var8)) { throw new ConstraintException( ""Server list contains a var8 that is already being moved: ""+var8); } String var11 = getRSGroupInfoManager().getRSGroupOfServer(var8).getName(); if (var10 != null && !var11.equals(var10)) { throw new ConstraintException( ""Move var8 request should only come from one source group. ""+ ""Expecting only ""+var10+"" but contains ""+var11); } } if(var10.equals(var2)) { throw new ConstraintException( ""Target group is the same as source group: ""+var2); } try { for (HostAndPort var8 : var1) { serversInTransition.put(var8, var2); } getRSGroupInfoManager().Func1(var1, var10, var2); boolean var12; List<HostAndPort> var13 = Lists.newArrayList(var1); do { var12 = false; for (Iterator<HostAndPort> var14 = var13.iterator(); var14.hasNext(); ) { HostAndPort var15 = var14.next(); List<HRegionInfo> var16 = new LinkedList<HRegionInfo>(); for (Map.Entry<HRegionInfo, ServerName> var9 : master.getAssignmentManager().getRegionStates().getRegionAssignments().entrySet()) { if (var9.getValue().getHostPort().equals(var15)) { var16.add(var9.getKey()); } } Iterator<RegionState> var17 = master.getAssignmentManager().getRegionStates().getRegionsInTransition().iterator(); while (var17.hasNext()) { RegionState var18 = var17.next(); if (var18.getServerName().getHostPort().equals(var15)) { var16.add(var18.getRegion()); } } LOG.info(""Unassigning "" + var16.size() + "" var16 from var8 "" + var15 + "" for move to "" + var2); if (var16.size() > 0) { for (HRegionInfo var19 : var16) { if (!var3.containsTable(var19.getTable())) { master.getAssignmentManager().unassign(var19); var12 = true; } } } if (!var12) { var14.remove(); } } try { Thread.sleep(1000); } catch (InterruptedException e) { LOG.warn(""Sleep interrupted"", e); Thread.currentThread().interrupt(); } } while (var12); } finally { for (HostAndPort var8 : var1) { serversInTransition.remove(var8); } } if (master.getMasterCoprocessorHost() != null) { master.getMasterCoprocessorHost().postMoveServers(var1, var2); } LOG.info(""Move var8 done: ""+var10+""->""+var2); } } "	0	0	0	0	0	1
@Override public Object Func1(HypertalkParser.DivideCmdStmntContext var1) { return new StatDivideCmd((Expression) visit(var1.factor()), (Destination) visit(var1.destination())); } 	1	0	0	1	1	0
"@RequestMapping(path = ""/deleteitinerary"", method = RequestMethod.POST) public void Func1(@RequestBody HashMap var1) { String var2 = (String) var1.get(""var2""); if (restaurants.findFirstByName(var2) != null) { Restaurant var3 = restaurants.findFirstByName(var2); Itinerary var4 = itineraries.findFirstByEventid(var3.getId()); itineraries.delete(var4.getId()); } else { Activity var5 = activities.findFirstByActivityname(var2); Itinerary var4 = itineraries.findFirstByEventid(var5.getId()); itineraries.delete(var4.getId()); } } "	1	0	1	0	1	0
@Override public boolean Func1() { return !(getItemRealCount() > 100); } 	0	0	0	0	0	1
public Pair<CellRegion, Model> Func1(CellRegion var1) { if (tableModels.stream() .map(e -> e.x) .filter(e -> checkOverap(var1)) .findFirst().isPresent()) return null; for (Pair<CellRegion, Model> var2 : tableModels) { if (var1.getRow() == var2.x.getLastRow() + 1 && var1.getColumn() == var2.x.getColumn() && var1.getLastColumn() == var2.x.getLastColumn() && var2.y instanceof TOM_Model) return var2; } return null; } 	0	0	0	0	0	1
public static DateTime Func1(String var1) { if (var1 != null) { for (DateTimeFormatter var2 : DateUtil.formatters) { try { LocalDateTime var3 = var2.parseLocalDateTime(var1); return var3.toDateTime(DateTimeZone.UTC); } catch (IllegalArgumentException e) { } } } return null; } 	0	1	0	0	0	0
"@Override public ITextComponent Func1() { return new TextComponentString(""Corrupted Pawn""); } "	0	0	0	0	0	1
"public static Block Func1(BlockBOPDoor var1, String var2, Item var3) { Block var4 = registerBlock( var1, var2 + ""_block"", null ); var3 = ModItems.registerItem( new ItemDoor(var4), var2 ); var1.setDoorItem(var3); return var4; } "	0	0	0	1	1	0
public static Complex Func1(Complex var1) { return pow(var1, new Complex(1/3)); } 	1	0	0	1	1	0
"@PreAuthorize(""hasRole('ROLE_ANONYMOUS')"") @RequestMapping(value = ""/forgot_password"", method = RequestMethod.POST) public String Func1(@RequestParam(""var1"") String var1, HttpServletRequest var2, Model var3) { String var4 = (var2.getRequestURL()).toString().split(""forgot_password"")[0]; passwordRecoveryService.sendRecoverPasswordEmail(var1,var4); var3.addAttribute(""msg"",true); return ""forgot_password""; } "	0	0	1	1	1	0
@Override public final void Func1(final String var1) throws DebugException { Value var2 = this.getDebugTarget().evaluateExpression(var1); this.Func1(new WorthwhileValue(this.getDebugTarget(), var2)); } 	1	1	0	1	1	0
public int Func1() { KExceptionManager var1 = this.var1.get(); var1.installForUncaughtExceptions(); try { int var2 = frontend.get().main(); return var2; } catch (ProvisionException e) { for (Message var3 : e.getErrorMessages()) { if (!(var3.getCause() instanceof KEMException)) { throw e; } else { KEMException var4 = (KEMException) var3.getCause(); var4.register(var1); } } var1.print(); return 1; } } 	1	0	0	1	1	0
"private static Object[] Func1(EntityPlayer var1, World var2, RayTraceResult var3, ItemStack var4, EnumHand var5, EnumFacing var6) { IBlockState var7 = var2.getBlockState(var3.getBlockPos()); if (!var7.getBlock().isAir(var7, var2, var3.getBlockPos())) { if (MinecraftForge.EVENT_BUS.post(new PlayerInteractEvent.RightClickBlock(var1, EnumHand.MAIN_HAND, var4, var3.getBlockPos(), var6, var3.hitVec))) { return new Object[]{true, ""block"", ""interact""}; } Object[] var8 = onPlayerRightClick(var1, var4, var5, var3.getBlockPos(), var6, var3.hitVec); if (var8 != null) return var8; } return null; } "	0	1	0	0	0	0
"@Override public void Func1() { final SimplePanel var1 = new SimplePanel(); var1.setStyleName(LOGIN_BG); final Grid var2 = new Grid(1, 2); var2.setStyleName(LOGIN_BOX); var2.setWidget(0, 0, new Image(LOGO_URL)); final FlexTable var3 = new FlexTable(); var3.setWidth(""90%""); int var4 = 0; var3.setText(var4, 0, I18N.CONSTANTS.loginLoginField()); var3.getCellFormatter().setStyleName(var4, 0, LOGIN_BOX_FORM_LABEL); loginTextBox = new TextBox(); loginTextBox.getElement().setId(LOGIN_EMAIL_ID); loginTextBox.setWidth(""100%""); var3.setWidget(var4, 1, loginTextBox); var3.getFlexCellFormatter().setColSpan(var4, 1, 2); var4++; for (int var5 = 0; var5 < 3; var5++) { var3.getCellFormatter().setStyleName(var4, var5, LOGIN_BOX_FORM_SEPARATOR); } var4++; var3.setText(var4, 0, I18N.CONSTANTS.loginPasswordField()); var3.getCellFormatter().setStyleName(var4, 0, LOGIN_BOX_FORM_LABEL); passwordTextBox = new PasswordTextBox(); passwordTextBox.getElement().setId(LOGIN_PASSWORD_ID); passwordTextBox.setWidth(""100%""); var3.setWidget(var4, 1, passwordTextBox); var3.getFlexCellFormatter().setColSpan(var4, 1, 2); var4++; for (int var5 = 0; var5 < 3; var5++) { var3.getCellFormatter().setStyleName(var4, var5, LOGIN_BOX_FORM_SEPARATOR); } var4++; var3.setText(var4, 0, I18N.CONSTANTS.loginLanguageField()); var3.getCellFormatter().setStyleName(var4, 0, LOGIN_BOX_FORM_LABEL); languageListBox = new ListBox(false); languageListBox.setWidth(""100%""); var3.setWidget(var4, 1, languageListBox); var3.getFlexCellFormatter().setColSpan(var4, 1, 2); var4++; for (int var5 = 0; var5 < 3; var5++) { var3.getCellFormatter().setStyleName(var4, var5, LOGIN_BOX_FORM_SEPARATOR); } var4++; final FlowPanel var6 = new FlowPanel(); var6.getElement().getStyle().setPosition(Position.RELATIVE); lostPasswordLink = new Anchor(I18N.CONSTANTS.loginPasswordForgotten()); lostPasswordLink.setStyleName(LOGIN_BOX_FORM_FORGOTTEN); var6.add(lostPasswordLink); var3.setWidget(var4, 0, var6); var3.getFlexCellFormatter().setColSpan(var4, 0, 2); loginButton = new Button(I18N.CONSTANTS.loginConnectButton()); loginButton.setId(LOGIN_OUVRIR_SESSION_ID); loginButton.setWidth(""120px""); var3.setWidget(var4, 1, loginButton); var3.getCellFormatter().setHorizontalAlignment(var4, 1, HasHorizontalAlignment.ALIGN_RIGHT); var4++; var2.getCellFormatter().setHorizontalAlignment(0, 1, HasHorizontalAlignment.ALIGN_CENTER); var2.setWidget(0, 1, var3); var2.getCellFormatter().setStyleName(0, 0, LOGIN_BOX_LOGO); var2.getCellFormatter().setStyleName(0, 1, LOGIN_BOX_FORM); var1.add(var2); add(var1); } "	0	0	0	0	0	1
"public void Func1(boolean var1) { if(!var1) gateway.write(""8:""); gateway.close(); inetAddressAllocator.freeAddress(this); ServiceLocator.instance().getPlayers().removePlayer(this); } "	1	1	0	0	1	0
"public static URI Func1(UUID var1, String var2, UriInfo var3) { UriBuilder var4 = UriBuilder.fromResource(WorkspaceResource.class); try { var4.path(WorkspaceResource.class.getMethod(""lookup"", UUID.class, String.class)); var4.resolveTemplate(""workspace"", var1); var4.resolveTemplate(""member"", var2); } catch (NoSuchMethodException | SecurityException e) { throw new IllegalStateException(""Unable to get all instances method"", e); } return var4.build(); } "	0	0	0	0	0	1
"private void Func1(final View var1) { name         = (TextView)var1.findViewById(R.id.stored_name_lbl); password     = (TextView)var1.findViewById(R.id.stored_pass_lbl); email        = (TextView)var1.findViewById(R.id.stored_email_lbl); id        = (TextView)var1.findViewById(R.id.stored_id_lbl); sp = getActivity().getSharedPreferences(MyPREFS, Context.MODE_PRIVATE); user_key = sp.getString(""USER_KEY"", null); dr = new DataRepo(getActivity()); user = dr.getUser(user_key); name.setText(user.getUsername()); password.setText(user.getPassword()); email.setText(user.getEmail()); id.setText(Integer.toString(user.getId())); } "	1	0	1	1	1	0
"protected void Func1(PreparedStatement var1, Object var2, OWLNamedIndividual var3, int var4, Map<OWLEntity, DbId> var5) throws SQLException { String var6 = var3.getIRI().toString(); Long var7 = null; if (var2 == null) { var1.setObject(var4, null); } else if (var2 instanceof DbId) { Long var8 = ((DbId)var2).getFirst(); if (var6.equals(Concepts.VARCHAR)) var1.setString(var4, var8.toString()); else if (var6.equals(Concepts.INTEGER)) var1.setLong(var4, var8); } else if (var2 instanceof OWLLiteral) { if (var6.equals(Concepts.VARCHAR)) var1.setString(var4, ((OWLLiteral) var2).getLiteral()); else if (var6.equals(Concepts.INTEGER)) { OWLLiteral var9 = (OWLLiteral) var2; if (var9.isBoolean()) var1.setLong(var4, var9.parseBoolean() ? 1 : 0); else var1.setLong(var4, var9.parseInteger()); } else if (var6.equals(Concepts.DOUBLE)) var1.setDouble(var4, ((OWLLiteral) var2).parseDouble()); else if (var6.equals(Concepts.TIMESTAMP)) var1.setTimestamp(var4, new Timestamp(parseDate((OWLLiteral) var2).getTime())); else if (var6.equals(Concepts.CLOB)) var1.setClob(var4, new StringReader(((OWLLiteral) var2).getLiteral())); } else if (var2 instanceof Long) { if (var6.equals(Concepts.VARCHAR)) var1.setString(var4, ((Long) var2).toString()); else if (var6.equals(Concepts.INTEGER)) var1.setLong(var4, (Long) var2); } else if (var2 instanceof String) { if (var6.equals(Concepts.VARCHAR)) var1.setString(var4, (String) var2); else if (var6.equals(Concepts.CLOB)) var1.setClob(var4, new StringReader((String) var2)); else if (var6.equals(Concepts.TIMESTAMP)) var1.setTimestamp(var4, new Timestamp(parseDate((String) var2) .getTime())); else if (var6.equals(Concepts.DOUBLE)) var1.setDouble(var4, Double.parseDouble((String) var2)); else if (var6.equals(Concepts.INTEGER)) var1.setLong(var4, Long.parseLong((String) var2)); } else if (var2 instanceof Timestamp) { var1.setTimestamp(var4, (Timestamp) var2); } else if (var2 instanceof OWLEntity) { if (var6.equals(Concepts.INTEGER)) { var7 = var5.get(var2).getFirst(); var1.setLong(var4, var7); } } else { throw new IllegalArgumentException(""Value Type not recognized"" + var2 + "" class: "" + var2.getClass()); } if (dbg()) { System.out.println(""["" + var4 + "" = "" + ((var7 == null) ? var2 : var7 + ""("" + var2 + "")"") + ""] ""); } } "	0	0	0	0	0	1
@Override public boolean Func1() { String var1 = new StoreCredentials(this).getUserName(); if (var1 != null) { setFragment(EventsListFragment.newInstance(var1)); } return true; } 	1	1	0	0	1	0
public void Func1() { feedRoller.set(forwardSpeedFeed); centerRoller.set(forwardSpeedCenter); } 	1	1	0	0	1	0
"@Test public void Func1() { final String var1 = A.class.getName() + "".foo()""; assertTrue(!suspependables.contains(var1)); } "	0	1	1	0	1	0
"protected RestVariable Func1(MultipartHttpServletRequest var1, Execution var2, int var3, boolean var4) { if (var1.getFileMap().size() == 0) { throw new ActivitiIllegalArgumentException(""No var5 content was found in var1 body.""); } MultipartFile var5 = var1.getFile(var1.getFileMap().keySet().iterator().next()); if (var5 == null) { throw new ActivitiIllegalArgumentException(""No var5 content was found in var1 body.""); } String var6 = null; String var7 = null; String var8 = null; Map<String, String[]> var9 = var1.getParameterMap(); for (String var10 : var9.keySet()) { if (var9.get(var10).length > 0) { if (var10.equalsIgnoreCase(""var11"")) { var6 = var9.get(var10)[0]; } else if (var10.equalsIgnoreCase(""name"")) { var7 = var9.get(var10)[0]; } else if (var10.equalsIgnoreCase(""type"")) { var8 = var9.get(var10)[0]; } } } try { if (var7 == null) { throw new ActivitiIllegalArgumentException(""No variable name was found in var1 body.""); } if (var8 != null) { if (!RestResponseFactory.BYTE_ARRAY_VARIABLE_TYPE.equals(var8) && !RestResponseFactory.SERIALIZABLE_VARIABLE_TYPE.equals(var8)) { throw new ActivitiIllegalArgumentException(""Only 'binary' and 'serializable' are supported as variable type.""); } } else { var8 = RestResponseFactory.BYTE_ARRAY_VARIABLE_TYPE; } RestVariable.RestVariableScope var11 = RestVariable.RestVariableScope.LOCAL; if (var6 != null) { var11 = RestVariable.getScopeFromString(var6); } if (var8.equals(RestResponseFactory.BYTE_ARRAY_VARIABLE_TYPE)) { byte[] var12 = IOUtils.toByteArray(var5.getInputStream()); setVariable(var2, var7, var12, var11, var4); } else { ObjectInputStream var13 = new ObjectInputStream(var5.getInputStream()); Object var14 = var13.readObject(); setVariable(var2, var7, var14, var11, var4); var13.close(); } if (var3 == RestResponseFactory.VARIABLE_PROCESS) { return new RestResponseFactory().createBinaryRestVariable(var7, var11, var8, null, null, var2.getId(), uriInfo.getBaseUri().toString()); } else { return new RestResponseFactory().createBinaryRestVariable(var7, var11, var8, null, var2.getId(), null, uriInfo.getBaseUri().toString()); } } catch (IOException ioe) { throw new ActivitiIllegalArgumentException(""Could not process multipart content"", ioe); } catch (ClassNotFoundException ioe) { throw new ActivitiContentNotSupportedException(""The provided body contains a serialized object for which the class is nog found: "" + ioe.getMessage()); } } "	0	0	0	0	0	1
@Override protected void Func1(Bundle var1) { super.Func1(var1); getCategories(); setContentView(R.layout.activity_selection); sInstance = this; categories = new ArrayList<>(); wholeData = new ArrayList<>(); sPositionIndex = new HashMap<>(); mToolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(mToolbar); getSupportActionBar().setDisplayShowHomeEnabled(true); tabLayout = (TabLayout) findViewById(R.id.tabs); mViewPager = (ViewPager) findViewById(R.id.container); tabLayout.setupWithViewPager(mViewPager); } 	1	1	0	0	1	0
"private  GtfsRealtime.FeedMessage.Builder Func1(){ GtfsRealtime.FeedMessage.Builder var1 =  GtfsRealtime.FeedMessage.newBuilder(); GtfsRealtime.FeedHeader.Builder var2 = GtfsRealtime.FeedHeader.newBuilder(); var2.setGtfsRealtimeVersion(""1.0""); var2.setIncrementality(GtfsRealtime.FeedHeader.Incrementality.FULL_DATASET); var2.setTimestamp(System.currentTimeMillis() / 1000L); var1.setHeader(var2); System.out.println(""Start Scraping""); Document var3; int var4 =0; try { var3 = Jsoup.connect(webSiteURL).timeout(10*1000).get(); Elements var5 = var3.getElementsByTag(""item""); for (Element var6 : var5) { GtfsRealtime.FeedEntity.Builder var7 = GtfsRealtime.FeedEntity.newBuilder(); GtfsRealtime.Alert.Builder var8 = GtfsRealtime.Alert.newBuilder(); GtfsRealtime.TranslatedString.Builder var9 =GtfsRealtime.TranslatedString.newBuilder(); GtfsRealtime.TranslatedString.Translation.Builder var10 = GtfsRealtime.TranslatedString.Translation.newBuilder(); var10.setText( var6.child(1).html()); var10.setLanguage(""en""); var9.addTranslation(0, var10); var8.setDescriptionText(var9); GtfsRealtime.TranslatedString.Builder var11 =GtfsRealtime.TranslatedString.newBuilder(); GtfsRealtime.TranslatedString.Translation.Builder var12 = GtfsRealtime.TranslatedString.Translation.newBuilder(); var12.setText(reformTitle(var6.child(0).html())); var12.setLanguage(""en""); var11.addTranslation(0, var12); var8.setHeaderText(var11); GtfsRealtime.TranslatedString.Builder var13 =GtfsRealtime.TranslatedString.newBuilder(); GtfsRealtime.TranslatedString.Translation.Builder var14 = GtfsRealtime.TranslatedString.Translation.newBuilder(); var14.setText(var6.child(2).html()); var14.setLanguage(""en""); var13.addTranslation(0, var12); var8.setUrl(var13); String var15 =  var6.child(1).html(); String var16 = var6.child(3).html(); var7.setAlert(var8); var7.setId( var16 +var4 ); var1.addEntity(var4, var7); var4++; } } catch (IOException ex) { Logger.getLogger(NetworkDisturbanceFetcher.class.getName()).log(Level.SEVERE, null, ex); errorWriter.writeError(ex.toString()); } return var1; } "	1	0	0	1	0	0
"private JFreeChart Func1(XYDataset var1) throws IOException, ParseException { logger.info(""Creating var7 var14 chart""); var1 = createDataset(); String var2 = """"; mainChart = ChartFactory.createTimeSeriesChart(var2, ""Date"", ""Volume"", var1, false, true, false); XYPlot var3 = (XYPlot) mainChart.getPlot(); NumberAxis var4 = (NumberAxis) var3.getRangeAxis(); var4.setLowerMargin(0); DecimalFormat var5 = new DecimalFormat(""###,###""); var4.setNumberFormatOverride(var5); XYItemRenderer var6 = var3.getRenderer(); var6.setBaseToolTipGenerator( new StandardXYToolTipGenerator(StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT, new SimpleDateFormat(""d-MMM-yyyy""), new DecimalFormat(""0.00""))); retrieveNews(); for (String var7 : headlinesAndDates.keySet()) { ArrayList<String> var8 = headlinesAndDates.get(var7); SimpleDateFormat var9 = new SimpleDateFormat(""yyyy-MM-dd""); Calendar var10 = Calendar.getInstance(); try { Date var11 = var9.parse(var7); var10 = Calendar.getInstance(); var10.setTime(var11); } catch (ParseException e) { e.printStackTrace(); } for (int var12 = 0; var12 < volumeDataDate.size(); var12++) { if (volumeDataDate.get(var12).getCalendar().equals(var10)) { String var13 = changeDateFormat(var7); double var14 = volumeDataDate.get(var12).getVolume(); long var15 = volumeDataDate.get(var12).getCalendar().getTimeInMillis(); final XYPointerAnnotation var16 = new XYPointerAnnotation(var13, var15, var14, 3); XYLineAndShapeRenderer var17 = (XYLineAndShapeRenderer) var3.getRenderer(); var17.setSeriesShape(0, ShapeUtilities.createDiamond(1)); var17.setSeriesShapesVisible(0, true); String var18 = """"; for (String var19 : var8) { var18 += ""- "" + var19 + ""<br>""; } int var20 = ToolTipManager.sharedInstance().getDismissDelay(); var20 = Integer.MAX_VALUE; ToolTipManager.sharedInstance().setDismissDelay(var20); var16.setToolTipText(""<html>"" + var18 + ""</html>""); var16.setTextAnchor(TextAnchor.HALF_ASCENT_RIGHT); var3.addAnnotation(var16); annotationPositions.put(var7, new AnnotationPosition(var16.getX(), var16.getY())); } } } logger.info(""Finished creating var7 var14 chart""); return mainChart; } "	0	0	0	0	0	1
"@Override public View Func1(final int var1, View var2, final ViewGroup var3) { final ViewHolder var4; LayoutInflater var5 = LayoutInflater.from(context); if (var2 == null) { var4 = new ViewHolder(); var2 = var5.inflate(R.layout.list_item_lover_of_life, null); var4.imageView = (ImageView) var2.findViewById(R.id.imageViewIcon); var4.textViewName = (TextView) var2.findViewById(R.id.textViewNickName); var4.textViewDesc = (TextView) var2.findViewById(R.id.textViewDesc); var4.textViewArticleCount = (TextView) var2.findViewById(R.id.textViewArticle); var4.textViewFollowerCount = (TextView) var2.findViewById(R.id.textViewFollow); var4.imageViewFollowed = (ImageView) var2.findViewById(R.id.imageViewFollowed); var2.setTag(var4); } else { var4 = (ViewHolder) var2.getTag(); } final HashMap<String, Object> var6 = list.get(var1); Glide.with(context) .load(var6.get(""imageView"").toString()) .placeholder(R.drawable.banner_loading_spinner) .crossFade() .into(var4.imageView); var4.textViewName.setText(var6.get(""textViewName"").toString()); var4.textViewDesc.setText(var6.get(""textViewDesc"").toString()); var4.textViewArticleCount.setText(var6.get(""textViewArticleCount"").toString()); var4.textViewFollowerCount.setText(var6.get(""textViewFollowerCount"").toString()); if (followStatus.get(var1).toString().equals(""1"")) { var4.imageViewFollowed.setImageResource(R.drawable.followed); } else { var4.imageViewFollowed.setImageResource(R.drawable.follow); } var4.imageViewFollowed.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var7) { if (UserInfo.isUserLogged(context)) { id = var6.get(""id"").toString(); postReadToServer(var4,var1, id, followStatus.get(var1).equals(""1"") ? 0 : 1); } else { LoginUtils.startLogin(context, LoginActivity.REQUEST_CODE_LOGIN); } } }); return var2; } "	0	0	0	0	0	1
"protected String Func1(Group var1, List<GoogleTarget> var2,Run var3, Run var4, int var5){ StringBuilder var6 = new StringBuilder(""{\""var2\"":[""); for (GoogleTarget var7 : var2) { var6.append(""{\""id\"":"").append(var7.getId()) .append("",\""name\"":\"""").append(var7.getName()).append(""\""},""); } if(var6.charAt(var6.length()-1) == ','){ var6.setCharAt(var6.length()-1, ']'); } else { var6.append(']'); } var6.append("",\""ranks\"":[""); final int[] var8 = new int[1]; googleDB.var9.stream(var3.getId(), var4.getId(), var5, (GoogleSerp var9) -> { var6.append('[').append(var9.getRunDay().toEpochSecond(ZoneOffset.UTC)*1000l).append(','); var6.append(""null"").append("",""); for (GoogleTarget var7 : var2) { int var10 = UNRANKED; for (int var11 = 0; var11 < var9.getEntries().size(); var11++) { if(var7.match(var9.getEntries().get(var11).getUrl())){ var10 = var11 + 1; break; } } var6.append(var10 == UNRANKED ? ""null"" : var10).append(','); if(var10 != UNRANKED && var10 > var8[0]){ var8[0] = var10; } } if(var6.charAt(var6.length()-1) == ','){ var6.setCharAt(var6.length()-1, ']'); } var6.append(','); }); if(var6.charAt(var6.length()-1) == ','){ var6.setCharAt(var6.length()-1, ']'); } else { var6.append(']'); } var6.append("",\""var8\"":"").append(var8[0]); var6.append(""}""); return var6.toString(); } "	0	0	0	0	0	1
"protected Result Func1( Group var1, GoogleTarget var2, List<GoogleSearch> var3, List<Run> var4, LocalDate var5, LocalDate var6, LocalDate var7, LocalDate var8 ){ String var9 = ""chart""; StringBuilder var10 = new StringBuilder(""{\""var3\"": [""); for (GoogleSearch var11 : var3) { var10.append(""\"""").append(var11.getKeyword()).append(""\"",""); } var10.setCharAt(var10.length()-1, ']'); var10.append("",\""ranks\"": [""); int var12 = 0; for(Run var13 : var4){ var10.append(""\n\t["").append(var13.getStarted().toEpochSecond(ZoneOffset.UTC)*1000l).append("",""); var10.append(""null,""); for (GoogleSearch var11 : var3) { GoogleRank var14 = googleDB.rank.getFull(var13.getId(), var1.getId(), var2.getId(), var11.getId()); if(var14 != null && var14.rank != GoogleRank.UNRANKED && var14.rank > var12){ var12 = var14.rank; } var10.append(var14 == null || var14.rank == GoogleRank.UNRANKED ? ""null"" : var14.rank).append(','); } var10.setCharAt(var10.length()-1, ']'); var10.append("",""); } var10.setCharAt(var10.length()-1, ']'); var10.append("",\n\""var12\"": "").append(var12).append(""}""); List<Event> var15 = baseDB.event.list(var1, var7, var8); String var16 = null; try { var16 = objectMapper.writeValueAsString(var15); } catch(JsonProcessingException ex){ var16 = ""[]""; } Map<Integer,GoogleBest> var17 = new HashMap<>(); for (GoogleSearch var11 : var3) { var17.put(var11.getId(), googleDB.rank.getBest(var2.getGroupId(), var2.getId(), var11.getId())); } return Results.ok() .template(""/serposcope/views/google/GoogleTargetController/"" + var9 + "".ftl.html"") .render(""var2"", var2) .render(""var3"", var3) .render(""var7"", var7.toString()) .render(""var8"", var8.toString()) .render(""minDate"", var5) .render(""maxDate"", var6) .render(""var9"", var9) .render(""ranksJson"", var10.toString()) .render(""eventsJson"", var16) ; } "	0	1	0	0	0	0
public boolean Func1(String var1, String var2, LocalDate var3) { return 1 == allWeeklyAdherenceLogs.findLogsByWeekStartDate(var1, var2, var3).size(); } 	1	0	0	1	1	0
"protected ArrayList<String> Func1(ArrayList<Urls> var1) { ArrayList<String> var2 = new ArrayList<String>(); for (Urls var3 : var1) { var2.add(var3.getContentUrl()); } Iterator var4 = var2.iterator(); String var5 = """"; URL var6 = null; int var7 = 0; while (var4.hasNext()) { var5 = (String) var4.next(); System.out.println(""CHECKING: "" + var5); try { var6 = new URL(var5); imageResponses = ImageIO.read(var6); getImageFromHttp(var5, labelTryLinks); System.out.println(""OK""); var7++; } catch (MalformedURLException e) { System.out.println(""malformed exception with url "" + var5); e.printStackTrace(); } catch (NullPointerException e) { System.out.println(""NullPointerException: element to be removed - "" + var5); var4.remove(); e.printStackTrace(); } catch (IOException e) { System.out.println(""IIOException \nLink to be removed: "" + var5); var4.remove(); e.printStackTrace(); } if (var7 == 4) { break; } } return var2; } "	0	0	0	0	0	1
protected void Func1() { foundImagesLabel1.setIcon(null); foundImagesLabel2.setIcon(null); foundImagesLabel3.setIcon(null); foundImagesLabel4.setIcon(null); foundImagesLabel1.setToolTipText(null); foundImagesLabel2.setToolTipText(null); foundImagesLabel3.setToolTipText(null); foundImagesLabel4.setToolTipText(null); } 	0	0	0	0	0	1
protected void Func1() { originalImage = null; file = fc.getSelectedFile(); try { originalImage = (BufferedImage) ImageIO.read(file); } catch (IOException e1) { e1.printStackTrace(); } icon = scaleBufferedImage(originalImage, originalImageLabel); originalImageLabel.setIcon(icon); } 	0	0	0	0	0	1
protected BufferedImage Func1(BufferedImage var1) { AffineTransform var2 = AffineTransform.getScaleInstance(-1, 1); var2.translate(-var1.getWidth(null), 0); AffineTransformOp var3 = new AffineTransformOp(var2, AffineTransformOp.TYPE_NEAREST_NEIGHBOR); var1 = var3.filter(var1, null); return var1; } 	0	0	0	0	0	1
"@Override public void Func1(Loader<CallResult<Depth>> var1, CallResult<Depth> var2) { if (!var2.isSuccess()) { Toast.makeText(getActivity(), R.string.general_error_text, Toast.LENGTH_LONG).show(); } else { final List<PriceVolumePair> var3 = var2.getPayload().getAsks(); final List<PriceVolumePair> var4 = var2.getPayload().getBids(); mAsksAdapter.pushData(var3); mBidsAdapter.pushData(var4); mAsksList.setAdapter(mAsksAdapter); mBidsList.setAdapter(mBidsAdapter); mChartArea.removeAllViews(); StockChartView var5 = new StockChartView(getActivity()); final LinearSeries var6 = new LinearSeries(); final LinearSeries var7 = new LinearSeries(); var6.getAppearance().setOutlineColor(0xffff4444); var7.getAppearance().setOutlineColor(0xff0099cc); double var8 = 0.0; double var9 = 0.0; for (int var10 = 0; var10 < var4.size(); var10++) { var9 += var4.get(var10).getVolume(); } for (int var10 = var4.size() - 1; var10 >= 0; var10--) { var9 -= var4.get(var10).getVolume(); var7.addPoint(var9); } for (int var10 = 0; var10 < var3.size(); var10++) { var6.addPoint(var8); var8 += var3.get(var10).getVolume(); } var6.setIndexOffset(var7.getPointCount()); var5.addArea().getSeries().add(var6); var5.getAreas().get(0).getSeries().add(var7); Axis.ILabelFormatProvider var11 = new Axis.ILabelFormatProvider() { @Override public String Func2(Axis var12, double var13) { int var14 = var7.convertToArrayIndex(var13); if (var14 < 0) { var14 = 0; } if (var14 >= 0) { if (var14 >= var7.getPointCount()) { var14 = var6.convertToArrayIndex(var13); if (var14 < 0) { var14 = 0; } if (var14 >= 0) { if (var14 >= var6.getPointCount()) { var14 = var6.getPointCount() - 1; } } return String.valueOf(var3.get(var14).getPrice()); } return String.valueOf(var4 .get(var7.getPointCount() - 1 - var14).getPrice()); } return null; } }; var5.getAreas().get(0).getBottomAxis().setLabelFormatProvider(var11); var5.getAreas().get(0).setTitle(""Market Depth for "" + mPairsSpinner.getSelectedItem().toString() + "" (Price vs. Volume)""); var5.getAreas().get(0).getPlot() .getAppearance() .getFont() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, 14, getResources().getDisplayMetrics())); var5.getAreas().get(0) .getLeftAxis() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, getResources().getDisplayMetrics())); var5.getAreas().get(0) .getTopAxis() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, getResources().getDisplayMetrics())); var5.getAreas().get(0) .getBottomAxis() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 15, getResources().getDisplayMetrics())); var5.getAreas().get(0) .getRightAxis() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 40, getResources().getDisplayMetrics())); var5.getAreas().get(0) .getBottomAxis() .getAppearance() .getFont() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, 9, getResources().getDisplayMetrics())); var5.getAreas().get(0) .getRightAxis() .getAppearance() .getFont() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, 9, getResources().getDisplayMetrics())); mChartArea.addView(var5); var5.invalidate(); } } "	0	0	0	0	0	1
@Override public boolean Func1() { return exml.getParentUID() != null; } 	1	0	1	1	1	0
public boolean Func1() { return options != null; } 	0	0	1	1	1	0
@Override public void Func1() { super.Func1(); Logger.setLogger(new AndroidLogger()); OpenHelperCreator.setCreator(new OpenHelperCreator() { @Override protected ISQLiteOpenHelper Func2(String var1, SquidDatabase.OpenHelperDelegate var2, int var3) { return new AndroidOpenHelper(HelloSquiDBApplication.this, var1, var2, var3); } }); TasksDatabase.getInstance().registerDataChangedNotifier(new UriNotifier(this, Task.TABLE) { @Override protected boolean Func3(Set<Uri> var4, SqlTable<?> var5, SquidDatabase var6, DBOperation var7, AbstractModel var8, long var9) { return var4.add(CONTENT_URI); } }); } 	0	0	0	0	0	1
private void Func1() { personPoint = BitmapFactory.decodeResource(getResources(), R.drawable.ic_room_white_36dp); canDraw = false; thread = null; surface = getHolder(); textPaint = new Paint(Paint.ANTI_ALIAS_FLAG); textPaint.setColor(Color.GREEN); if (textHeight == 0) { textHeight = textPaint.getTextSize(); } else { textPaint.setTextSize(textHeight); } roomPaint = new Paint(Paint.ANTI_ALIAS_FLAG); roomPaint.setStyle(Paint.Style.FILL); roomPaint.setColor(Color.BLACK); } 	1	1	0	1	1	0
@Override public void Func1(Layer var1) { if (getDelegate() != null) { delegate.Func1(var1); return; } if (var1 != null) { var1.removeNode(this); } } 	0	1	1	0	1	0
@Override public void Func1(Graph var1) { if (getDelegate() != null) { delegate.Func1(var1); return; } Graph var2 = getGraph(); if (var1 != null) { var1.addNode(this); } if (var2 != null && var2 != var1 && var2 instanceof GraphImpl) { ((GraphImpl) var2).basicRemoveNode(this); } basicSetGraph(var1); } 	0	1	1	0	1	0
"private List<String> Func1() { CopyOnWriteArrayList <String> var1 = new CopyOnWriteArrayList(); String var2 = loadContentsFromCache(); for (String var3 : var2.split(""(\r\n|\r|\n)"")) { var1.add(var3); } return var1; } "	1	0	0	1	1	0
@Test public void Func1() { final String var1 = LumeerConst.Security.ROLE_MANAGE; securityFacade.addOrganizationUsersRole(organizationCode, Collections.singletonList(USER_Y), var1); securityFacade.addOrganizationGroupsRole(organizationCode, Collections.singletonList(GROUP_B), var1); List<Role> var2 = securityFacade.getOrganizationRoles(organizationCode); final Client var3 = ClientBuilder.newBuilder().build(); Response var4 = var3 .target(TARGET_URI) .path(createUrl( LumeerConst.Security.ORGANIZATION_RESOURCE, organizationCode, LumeerConst.Security.PERMISSIONS_KEY)) .request().buildGet() .invoke(); List<Role> var5 = var4.readEntity(new GenericType<List<Role>>(List.class) { }); assertThat(var5).hasSize(var2.size()); for (Role var6 : var2) { assertThat(var5.contains(var6)); } var4.close(); } 	0	0	0	0	0	1
"public boolean Func1() { return myShowIdLabel && Registry.is(""debugger.showTypes""); } "	1	0	1	0	0	0
"private static File Func1(File var1) { final File var2 = new File(var1, ""cache""); if (!var2.exists() && !var2.mkdirs()) { throw new RuntimeException(""Could not create cache directory '"" + var2.getAbsolutePath() + ""'.""); } return var2; } "	1	0	0	1	1	0
"public void Func1(Job var1, String var2, String var3, String var4) { if (!template.contains(METADATA_ITEMS_PLACEHOLDER)) { throw new IllegalState(""The placeholder for the property '"" + METADATA_ITEMS_PLACEHOLDER + ""' was not found. Maybe the placeholder has already been replaced with the correct value. The template looks like this: "" + template); } String var5 = ""\n<entry key=\""""; String var6 = ""\""/>""; String var7 = ""\"" value=\""""; StringBuilder var8 = new StringBuilder(); var8.append(""<property name=\""metadataItems\"">\n<map>\n""); var8.append(var5); var8.append(HARVESTINFO_VERSION + var7 + HARVESTINFO_VERSION_NUMBER + var6); var8.append(var5); var8.append(HARVESTINFO_JOBID + var7 + var1.getJobID() + var6); var8.append(var5); var8.append(HARVESTINFO_CHANNEL + var7 + var1.getChannel() + var6); var8.append(var5); var8.append(HARVESTINFO_HARVESTNUM + var7 + var1.getHarvestNum() + var6); var8.append(var5); var8.append(HARVESTINFO_ORIGHARVESTDEFINITIONID + var7 + var1.getOrigHarvestDefinitionID() + var6); var8.append(var5); var8.append(HARVESTINFO_MAXBYTESPERDOMAIN + var7 + var1.getMaxBytesPerDomain() + var6); var8.append(var5); var8.append(HARVESTINFO_MAXOBJECTSPERDOMAIN + var7 + var1.getMaxObjectsPerDomain() + var6); var8.append(var5); var8.append(HARVESTINFO_ORDERXMLNAME + var7 + var1.getOrderXMLName() + var6); var8.append(var5); var8.append(HARVESTINFO_ORIGHARVESTDEFINITIONNAME + var7 + var2 + var6); if (var3 != null) { var8.append(var5); var8.append(HARVESTINFO_SCHEDULENAME + var7 + var3 + var6); } var8.append(var5); var8.append(HARVESTINFO_HARVESTFILENAMEPREFIX + var7 + var1.getHarvestFilenamePrefix() + var6); var8.append(var5); var8.append(HARVESTINFO_JOBSUBMITDATE + var7 + var1.getSubmittedDate() + var6); if (var4 != null){ var8.append(var5); var8.append(HARVESTINFO_PERFORMER + var7 + var4  + var6); } if (var1.getHarvestAudience() != null) { var8.append(var5); var8.append(HARVESTINFO_AUDIENCE + var7 + var1.getHarvestAudience() + var6); } var8.append(""\n</map>\n</property>\n""); String var9 = template.replace(METADATA_ITEMS_PLACEHOLDER, var8.toString()); this.template = var9; } "	0	0	0	0	0	1
"@Override protected void Func1(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException { if (!HttpHeaders.Values.UPGRADE.equalsIgnoreCase(var1.getHeader(HttpHeaders.Names.CONNECTION)) || !HttpHeaders.Values.WEBSOCKET.equalsIgnoreCase(var1.getHeader(HttpHeaders.Names.UPGRADE))) return; try { WebSocketServerHandshakerFactory var3 = new WebSocketServerHandshakerFactory(getWebSocketLocation(var1), null, false, manager.getMaxFrameSize()); HttpMethod var4 = HttpMethod.valueOf(var1.getMethod()); HttpRequest var5 = new DefaultHttpRequest(HttpVersion.HTTP_1_1, var4, var1.getRequestURI()); Enumeration<String> var6 = var1.getHeaderNames(); while (var6.hasMoreElements()) { String var7 = var6.nextElement(); var5.addHeader(var7, var1.getHeader(var7)); } WebSocketServerHandshaker var8 = var3.newHandshaker(var5); if (var8 == null) { var2.setStatus(HttpResponseStatus.UPGRADE_REQUIRED.getCode()); var2.setHeader(Names.SEC_WEBSOCKET_VERSION, WebSocketVersion.V13.toHttpHeaderValue()); return; } String var9 = var1.getHeader(HttpHeaders.Names.HOST); Channel var10 = (Channel) var1.getAttribute(""netty.var10""); var10.setAttachment(var9); var8.handshake(var10, var5).addListener(WebSocketServerHandshaker.HANDSHAKE_LISTENER); WebSocket var11 = new WebSocketChannel(var10); manager.register(var11); } catch (Throwable t) { logger.error(""araqne httpd: websocket handshake failed"", t); } } "	0	1	0	0	0	0
"private static Response Func1( final ApplicationStatus var1, final Throwable var2, final String var3, final boolean var4 ) { final String var5 = generateErrorId(); final String var6 = formatEntity( var5, var2, var3 ).toString(); Status var7 = Status.INTERNAL_SERVER_ERROR; if ( var1 != null ) { var7 = Status.fromStatusCode( var1.var7() ); LOGGER.debug( ""got var2 var7 from parameter: {}"", var7 ); } else if ( ( var2 instanceof IndyWorkflowException ) && ( (IndyWorkflowException) var2 ).getStatus() > 0 ) { final int var8 = ( (IndyWorkflowException) var2 ).getStatus(); LOGGER.debug( ""got var2 var7 from exception: {}"", var8 ); var7 = Status.fromStatusCode( var8 ); } LOGGER.var2( ""Sending var2 var9: {} {}\n{}"", var7.getStatusCode(), var7.getReasonPhrase(), var6 ); Response var9 = Response.var1( var7 ) .header( ApplicationHeader.content_type.key(), ApplicationContent.text_plain ) .entity( var6 ) .build(); if ( var4 ) { throw new WebApplicationException( var2, var9 ); } return var9; } "	0	0	0	0	0	1
"public String Func1(String var1){ String[] var2 = var1.split("",""); String var3 = var2[0]; if (var3.equals(""exit"")) System.exit(0); else if (var3.equals(""home"")){ if (var2.length > 0) loop(var1.split("","", 2)[1]); else loop(); } else if (var3.equals(""help"")){ } else return var1; return null; } "	1	1	1	1	0	0
public static void Func1(@Nullable ItemStack var1, Minecraft var2, List<String> var3, int var4, int var5, FontRenderer var6) { ScaledResolution var7 = new ScaledResolution(var2); GuiUtils.Func1(var1, var3, var4, var5, var7.getScaledWidth(), var7.getScaledHeight(), -1, var6); } 	0	0	0	0	0	1
"@RequestMapping(value = ""/api/v1/houses/{var1}"", method = RequestMethod.GET) @Authorization @ApiResponses({ @ApiResponse(code = 200, response = HouseInfoFields.class, message = ""Get var3 info"") }) public ResponseEntity<?> Func1(@PathVariable String var1, @CurrentUser @ApiIgnore User var2) throws Exception { House var3 = houseService.getById(var1); if (var3 == null) { return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new GenericResponseBody(Message.MESSAGE_NOT_FOUND)); } if (!var3.getPublicity() || memberService.findTopByHouseAndUser(var3, var2) == null) { return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new GenericResponseBody(Message.MESSAGE_NOT_FOUND)); } HouseInfoFields var4 = houseInfoFieldsPopulator.populate(var3); return new ResponseEntity<>(var4, HttpStatus.OK); } "	1	0	1	1	1	0
@Override public void Func1() { setCurrentPage(Page.COME_LATE_LEAVE_EARLY); setCurrentItem(R.id.item_come_late_leave_early); setCurrentTitleToolbar(mContext.getResources().getString(R.string.request_leave)); } 	0	1	0	0	0	0
public void Func1(View var1) { setVisibleFloatingActionMenu(false); Bundle var2 = new Bundle(); var2.putInt(Constant.EXTRA_ACTION_TYPE, ActionType.ACTION_CREATE); mNavigator.startActivityForResult(RequestLeaveActivity.class, var2, Constant.RequestCode.REQUEST_LEAVE); } 	0	0	0	0	0	1
private void Func1() { while (unSettledNodes.size() > 0) { Point var1 = getMinimum(unSettledNodes); if (var1.equals(destination)) return; settledNodes.add(var1); unSettledNodes.remove(var1); findMinimalDistances(var1); } } 	1	0	1	0	1	0
@Override protected void Func1(Bundle var1) { SmartRouters.running(this); ((TextView) this.findViewById(R.id.smart_router_simple_example_char_text)).setText( this.exampleChar); } 	0	0	0	0	0	1
public static boolean Func1() { return usingLnf(WindowsLookAndFeel.class); } 	0	0	0	0	0	1
public int Func1() { return mValueInLowestDenom; } 	0	0	0	0	0	1
private boolean Func1(final List<T> var1) { assert(var1 != null); assert(var1.size() > 0); final boolean var2 = var1.get(0).var2(); for (int var3 = 1; var3 < var1.size(); var3++) if (!var1.get(var3).var2()) return false; return true; } 	1	1	0	1	1	0
"public File Func1(int var1) { if (voucherTemplates.containsKey(var1)) { return voucherTemplates.get(var1).stream().findFirst().orElseThrow(() -> new RuntimeException(""this should not happen"")); } else { return voucherTemplates.get(0).stream().findFirst().orElseThrow(() -> new RuntimeException(""this should not happen"")); } } "	0	0	0	0	0	1
"private void Func1() { Intent var1 = new Intent(); ProfileManager var2 = ProfileManager.getInstance(this); if (!TextUtils.isEmpty(mEmbeddedPwFile)) ConfigParser.useEmbbedUserAuth(mResult, mEmbeddedPwFile); ConfigParser.removeCRLCustomOption(mResult); if (TextUtils.isEmpty(mCrlFileName)) { mResult.mCustomConfigOptions += ""\ncrl-verify "" + mCrlFileName; } var2.addProfile(mResult); var2.Func1(this, mResult); var2.saveProfileList(this); var1.putExtra(VpnProfile.EXTRA_PROFILEUUID, mResult.getUUID().toString()); setResult(Activity.RESULT_OK, var1); finish(); } "	1	1	1	1	0	0
"private static void Func1(Connection var1, Connection var2) throws SQLException { try (   Statement c_stmt = var2.createStatement(); Statement v_stmt = var1.createStatement()  ){ c_stmt.execute(""SET unique_checks=0""); c_stmt.execute(""drop table if exists ""+CurrentDBTable.BIB_VOY); c_stmt.execute(""create table ""+CurrentDBTable.BIB_VOY+""( "" + ""bib_id int(10) unsigned not null, "" + ""record_date timestamp null, "" + ""active int not null default 1, "" + ""key (bib_id) ) "" + ""ENGINE=InnoDB""); c_stmt.execute(""alter table ""+CurrentDBTable.BIB_VOY+"" disable keys""); var2.commit(); try (   ResultSet rs = v_stmt.executeQuery (""select BIB_ID, UPDATE_DATE, SUPPRESS_IN_OPAC "" + "" from BIB_MASTER""); PreparedStatement pstmt = var2.prepareStatement (""insert into ""+CurrentDBTable.BIB_VOY+ "" (bib_id, record_date, active) values ( ? , ? , ? )"")  ) { int var3 = 0; while (rs.next()) { pstmt.setInt(1, rs.getInt(1) ); pstmt.setTimestamp(2, rs.getTimestamp(2) ); pstmt.setInt(3, ( rs.getString(3).equals(""N"") )?1:0 ); pstmt.addBatch(); if ((++var3 % 2048) == 0) { pstmt.executeBatch(); if ((var3 % 262_144) == 0) { System.out.println(var3 +"" bibs pulled.""); var2.commit(); } } } pstmt.executeBatch(); System.out.println(""Bib count: ""+var3); } c_stmt.execute(""alter table ""+CurrentDBTable.BIB_VOY+"" disable keys""); var2.commit(); } } "	0	0	1	1	1	0
"public MockMvcRequestSpecification Func1(String var1, Object var2, Object... var3) { notNull(var1, ""var1""); notNull(var2, ""var2""); return Func1(MapCreator.createMapFromParams(var1, var2, var3)); } "	0	1	0	0	0	0
"public MockMvcRequestSpecification Func1(String var1, Object var2, Object... var3) { notNull(var1, ""var1""); notNull(var2, ""var2""); return Func1(MapCreator.createMapFromParams(var1, var2, var3)); } "	0	1	0	0	0	0
private Insets Func1(Canvas var1) { Component var2 = var1.getParent(); while (var2 != null) { if (var2 instanceof Container) { return ((Container)var2).Func1(); } var2 = var2.getParent(); } return null; } 	0	0	0	0	0	1
"public String Func1(String var1) { tokens = parseFormatString(var1); StringBuilder var2 = new StringBuilder(); for (int var3 = 0, var4 = 0; var3 < tokens.length; var3++) { if (tokens[var3].startsWith(Constants.FMT_TIMESTAMP)) { dateFormat = new SimpleDateFormat( tokens[var3].substring(Constants.FMT_TIMESTAMP.length() + 3, tokens[var3].length() - 1)); var2.append(""%"" + (var4 + 1) + ""$s""); var4++; } else if (isAPlaceholderToken(tokens[var3])) { var2.append(""%"" + (var4 + 1) + ""$s""); var4++; } else { var2.append(tokens[var3]); } } var2.append('\n'); return var2.toString(); } "	1	0	1	1	0	0
private void Func1() { setEnableViews(true); mIdImageDepartment = Settings.ID_DEPARTMENT_DEFAULT; switch (mTypeSettings) { case Settings.ADD_DEPARTMENT: break; case Settings.EDIT_DEPARTMENT: showDepartment(); break; } } 	0	0	0	0	0	1
private static final double Func1(final Coefficients var1, final double var2, final double var3, final FaultStyle var4) { double var5 = (var4 == REVERSE) ? var1.c1r : var1.c1ss; double var6 = (var4 == REVERSE) ? var1.c6r : var1.c6ss; return var5 + var1.c2 * var2 - var1.c3 * log(var3 + var1.c4 * exp(var1.c5 * var2)) + var6 + var1.c7 * pow(var2, 2.5); } 	0	0	0	0	0	1
protected void Func1(MatrixCursor var1, IMasterRecord var2, int var3, int var4) { if(var2 == null) return; var1.addRow(new Object[] {var3, var4, null, var2.getName()}); } 	1	1	0	0	1	0
public void Func1() { for(AbstractErrorEntry var1 : this.errorLog) System.out.println(var1.toLogString(this.validatingSpec)); } 	0	0	0	0	0	1
"@JavascriptInterface void Func1() { Log.i(""brassau"", ""Func1""); final ControlBinder var1 = engine.getControl(); if (var1 == null) throw new RuntimeException(""The engine died unexpectedly""); var1.getAssistant().brassauReady(); } "	0	0	0	0	0	1
"public static void Func1(SharedPreferences.Editor var1, String var2, float[] var3) { try { JSONArray var4 = new JSONArray(); for (float var5 : var3) { var4.put(var5); } var1.putString(""equalizer_values"", var4.toString()); } catch (JSONException e) { Log.e(TAG, ""Func1: "" + e.getClass() + "": "" + e.getLocalizedMessage()); } } "	0	0	1	1	1	0
"@Override protected void Func1(GuiButton var1) { if(var1 == this.modusButton && container.inventory.getStackInSlot(0) != null) { ItemStack var2 = container.inventory.getStackInSlot(0); if(var2.getItem() instanceof ItemModus) { Modus var3 = CaptchaDeckHandler.ModusType.values()[var2.getItemDamage()].createInstance(); if(!var3.canSwitchFrom(CaptchaDeckHandler.ModusType.getType(CaptchaDeckHandler.clientSideModus))) { mc.currentScreen = new GuiYesNo(this, StatCollector.translateToLocal(""gui.emptySylladex1""), StatCollector.translateToLocal(""gui.emptySylladex2""), 0) { @Override public void Func2() { mc.currentScreen = (GuiScreen) parentScreen; mc.thePlayer.closeScreen(); } }; mc.currentScreen.setWorldAndResolution(mc, width, height); return; } } MinestuckChannelHandler.sendToServer(MinestuckPacket.makePacket(Type.CAPTCHA, CaptchaDeckPacket.MODUS)); } else if(var1 == this.sylladexMap && CaptchaDeckHandler.clientSideModus != null) { mc.thePlayer.sendQueue.addToSendQueue(new C0DPacketCloseWindow(mc.thePlayer.openContainer.windowId)); mc.thePlayer.inventory.setItemStack((ItemStack)null); mc.displayGuiScreen(CaptchaDeckHandler.clientSideModus.getGuiHandler()); } } "	1	1	0	0	1	0
"protected Meeting Func1(JTable var1) { int var2 = var1.getSelectedRow(); int var3 = var1.getSelectedColumn(); String var4 = (String) var1.getValueAt(var2, 0); String var5 = var1.getColumnName(var3); var5 = var5.toUpperCase(); String[] var6 = var4.split(""-""); DateFormat var7 = new SimpleDateFormat(""h:mm""); Date var8 = null; Date var9 = null; try { var8 = var7.parse(var6[0]); var9 = var7.parse(var6[1]); } catch (ParseException e) { e.printStackTrace(); } return Meeting.create(var8, var9, DayOfWeek.valueOf(var5), null, null); } "	0	0	1	1	1	0
"@GuardedBy(""mLock"") private boolean Func1() { return !mPacketReaderActive && !tooManyPendingPackets() && mPosToQueue < mRequest.mEnd && mError != null && !mCancel && !mEof; } "	0	1	1	1	0	0
"public boolean Func1(Player var1, Protection var2, Block var3) { boolean var4 = canAccessProtection(var1, var2); if (var3 == null || var2 == null) { return true; } if (var3 != null && (var2.getBlockId() == 0 || var3.getTypeId() != var2.getBlockId())) { var2.setBlockId(var3.getTypeId()); var2.save(); } if (var3 != null && (var2.getWorld() == null || !var3.getWorld().getName().equals(var2.getWorld()))) { var2.setWorld(var3.getWorld().getName()); var2.save(); } if (var4) { long var5 = System.currentTimeMillis() / 1000L; var2.setLastAccessed(var5); var2.save(); } if (configuration.getBoolean(""core.showNotices"", true)) { boolean var6 = var2.var6(var1); boolean var7 = configuration.getBoolean(""core.var7"", true); if (isAdmin(var1) || isMod(var1) || (var6 && var7)) { String var8 = var2.getOwner(); if (var8.equals(var1.getName())) { var8 = getLocale(""you""); } String var9 = materialToString(var3); if (!getLocale(""var2."" + var9.toLowerCase() + "".notice.protected"").startsWith(""UNKNOWN_LOCALE"")) { sendLocale(var1, ""var2."" + var9.toLowerCase() + "".notice.protected"", ""type"", getLocale(var2.typeToString().toLowerCase()), ""var3"", var9, ""var8"", var8); } else { sendLocale(var1, ""var2.general.notice.protected"", ""type"", getLocale(var2.typeToString().toLowerCase()), ""var3"", var9, ""var8"", var8); } } } switch (var2.getType()) { case PASSWORD: if (!var4) { sendLocale(var1, ""var2.general.locked.password"", ""var3"", materialToString(var3)); } break; case PRIVATE: case DONATION: if (!var4) { sendLocale(var1, ""var2.general.locked.private"", ""var3"", materialToString(var3)); } break; case TRAP_KICK: if (!var4) { var1.kickPlayer(var2.getPassword()); log(var1.getName() + "" triggered the kick trap: "" + var2.toString()); } break; case TRAP_BAN: if (!var4) { Plugin var10; if ((var10 = plugin.getServer().getPluginManager().getPlugin(""MCBans"")) != null) { var11 var11 = (var11) var10; var11.mcb_handler.ban(var1.getName(), ""LWC"", var2.getPassword(), """"); } log(var1.getName() + "" triggered the ban trap: "" + var2.toString()); } break; } return var4; } "	1	0	0	1	1	0
@Kroll.method @Kroll.setProperty public void Func1(Object var1) { TiDrawableReference var2 = TiDrawableReference.fromObject(this.getActivity(), var1); if (hasProperty(TiC.PROPERTY_DECODE_RETRIES)) { var2.setDecodeRetries(TiConvert.toInt(getProperty(TiC.PROPERTY_DECODE_RETRIES), TiDrawableReference.DEFAULT_DECODE_RETRIES)); } ((BigPictureStyle)style).bigPicture(var2.getBitmap()); setProperty(TiC.PROPERTY_BIG_PICTURE, var1); } 	1	0	1	0	1	0
@Override public OpenOrdersParams Func1() { throw new NotAvailableFromExchangeException(); } 	0	0	0	0	0	1
"@Override public void Func1(LibrusData var1) { Log.d(TAG, ""AnnouncementsFragment update()""); } "	0	0	1	1	1	0
public static <M> MessageSelector<?, M> Func1() { return new MessageSelector<Object, M>() { @Override public boolean Func2(Object var1) { return true; } }; } 	0	0	0	0	0	1
"private ParseResult<CompilationUnit> Func1(String var1) throws IOException { Provider var2 = Providers.resourceProvider( ""com/github/javaparser/issue_samples/"" + var1 + "".java.txt""); return new JavaParser().parse(ParseStart.COMPILATION_UNIT, var2); } "	0	0	0	0	0	1
"public static NativeArray Func1(Context var1, Scriptable var2, Object[] var3, Function var4) throws Exception { NativeObject var5; NativeArray var6 = new NativeArray(0); if (var3 == null || !isStringValues(var3)) { handleException(""Invalid input parameters.""); } String var7 = (String) var3[0]; String var8; String var9; APIProvider var10 = getAPIProvider(var2); Map<Integer, APIKey> var11 = null; String var12 = ((APIProviderHostObject) var2).getUsername(); if (var7.contains("":"")) { var8 = var7.split("":"")[1]; var9 = var7.split("":"")[0]; if (""*"".equals(var8) || var8.startsWith(""*"")) { var8 = var8.replaceFirst(""\\*"", "".*""); } var11 = var10.searchAccessToken(var9, var8, var12); } else { if (var10.isApplicationTokenExists(var7)) { APIKey var13 = var10.getAccessTokenData(var7); if (var13.getAccessToken() == null) { throw new APIManagementException(""The requested access token is already revoked or No access token available as per requested.""); } var11 = new HashMap<Integer, APIKey>(); var11.put(0, var13); } else { if (""*"".equals(var7) || var7.startsWith(""*"")) { var7 = var7.replaceFirst(""\\*"", "".*""); } var11 = var10.searchAccessToken(null, var7, var12); } } if (var11 != null && var11.size() != 0) { for (int var14 = 0; var14 < var11.size(); var14++) { var5 = new NativeObject(); var5.put(""token"", var5, var11.get(var14).getAccessToken()); var5.put(""user"", var5, var11.get(var14).getAuthUser()); var5.put(""scope"", var5, var11.get(var14).getTokenScope()); var5.put(""createTime"", var5, var11.get(var14).getCreatedDate()); if (var11.get(var14).getValidityPeriod() == Long.MAX_VALUE) { var5.put(""validTime"", var5, ""Won't Expire""); } else { var5.put(""validTime"", var5, var11.get(var14).getValidityPeriod()); } var5.put(""consumerKey"", var5, var11.get(var14).getConsumerKey()); var6.put(var14, var6, var5); } } else { throw new APIManagementException(""The requested access token is already revoked or No access token available as per requested.""); } return var6; } "	1	1	1	0	1	0
"protected void Func1() throws IOException { if (connectionFactory == null) { mockConnectionOnly(); connectionFactory = mock(ConnectionFactory.class); when(connectionFactory.getVirtualHost()).thenReturn(""/""); when(connectionFactory.newConnection(any(ExecutorService.class), any(Address[].class))) .thenReturn(connection); } if (options == null) options = new ConnectionOptions().withHost(""test-host""); options.withConnectionFactory(connectionFactory); if (config == null) config = new Config().withRetryPolicy( RetryPolicies.retryAlways().withInterval(Duration.millis(10))).withRecoveryPolicy( RecoveryPolicies.recoverAlways()); if (connectionHandler == null) { connectionHandler = new ConnectionHandler(options, config); connectionProxy = (ConfigurableConnection) Proxy.newProxyInstance(Connection.class.getClassLoader(), new Class<?>[] {ConfigurableConnection.class}, connectionHandler); connectionHandler.createConnection(connectionProxy); channels = new HashMap<Integer, MockChannel>(); } } "	0	0	0	0	0	1
public void Func1(ParcelableAccount... var1) { if (var1.length == 1) { mCountView.setText(null); final ParcelableAccount var2 = var1[0]; mImageLoader.displayProfileImage(mProfileImageView, var2.profile_image_url); mProfileImageView.setBorderColor(var2.color); } else { mCountView.setText(String.valueOf(var1.length)); mImageLoader.cancelDisplayTask(mProfileImageView); mProfileImageView.setImageDrawable(new ColorDrawable(Color.WHITE)); mProfileImageView.setBorderColors(Utils.getAccountColors(var1)); } } 	0	1	1	0	1	0
"@Override public MillState Func1(String var1) { try { String var2 = ""select * from state_mill where NAME = ?""; List<MillState> var3 = jdbcTemplate.var2(var2, new Object[]{var1}, new MillStateMapper()); return var3.get(0); }catch (Exception e) { System.err.println(""IndexOutOfBoundsException MillState.Func1:var1="" + var1); throw new RuntimeException(""IndexOutOfBoundsException MillState.Func1:var1="" + var1); } } "	0	0	1	1	1	0
"public static void Func1(String[] var1) throws Exception { BasicConfigurator.configure(); readVcenterPluginConfigFile(); s_logger.info(""Config params vcenter url: "" + _vcenterURL + "", _vcenterUsername: "" + _vcenterUsername + "", api server: "" + _apiServerAddress); MasterSelection var2 = null; var2 = new MasterSelection(_zookeeperAddrPort, _zookeeperLatchPath, _zookeeperId); s_logger.info(""Waiting for zookeeper Mastership .. ""); var2.waitForLeadership(); s_logger.info(""Acquired zookeeper Mastership .. ""); VCenterMonitorTask var3 = new VCenterMonitorTask(_vcenterURL, _vcenterUsername, _vcenterPassword, _vcenterDcName, _vcenterDvsName, _apiServerAddress, _apiServerPort, _vcenterIpFabricPg); scheduledTaskExecutor.scheduleWithFixedDelay(var3, 0, 2, TimeUnit.SECONDS); Runtime.getRuntime().addShutdownHook( new ExecutorServiceShutdownThread(scheduledTaskExecutor)); s_logger.info(""Waiting for one time resync to complete.. ""); while (var3.getAddPortSyncAtPluginStart() == true) { try { Thread.sleep(2); } catch (java.lang.InterruptedException e) { System.out.println(e); } } s_logger.info(""Starting event monitor Task.. ""); _eventMonitor = new VCenterNotify(var3); _eventMonitor.start(); } "	0	0	0	0	0	1
public SchemaString Func1(String var1) throws IOException { return new ObjectMapper().readValue(var1, SchemaString.class); } 	0	0	0	0	0	1
private AggregatedSchemaMetadataInfo Func1(SchemaMetadataInfo var1) { if(var1 == null) { return null; } Collection<SchemaVersionInfo> var2 = getAllVersions(var1.getSchemaMetadata().getName()); List<SerDesInfo> var3 = getSerDesInfos(var1.getSchemaMetadata().getName()); return new AggregatedSchemaMetadataInfo(var1.getSchemaMetadata(), var1.getId(), var1.getTimestamp(), var2, var3); } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception { final List<Report> var1 = newArrayList(report(123L), report(456L)); when(service.findAllByUserAndId(eq(""user""), anyListOf(Long.class))) .thenReturn(var1); mvc.perform(get(""/reports"") .param(""user"", ""user"")) .andExpect(status().isOk()) .andExpect(jsonPath(""$"", hasSize(2))) .andExpect(jsonPath(""$[0].id"").value(123)) .andExpect(jsonPath(""$[1].id"").value(456)); verify(service).findAllByUserAndId(eq(""user""), reportIdCaptor.capture()); assertThat(reportIdCaptor.getValue()).isEmpty(); } "	0	0	0	0	0	1
"protected void Func1(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException { long var3 = Long.parseLong(var1.getParameter(""user_id"")); String var4 = var1.getParameter(""var4""); String var5 = var1.getParameter(""var5""); String var6 = var1.getParameter(""var6""); String var7 = var1.getParameter(""var7""); String var8 = var1.getParameter(""var8""); String var9 = var1.getParameter(""confirm_password""); User var10 = DaoFactory.getUsersDao().findById(var3); boolean var11 = var7.equals(var9); boolean var12 = var4.isEmpty() || var5.isEmpty() || var7.isEmpty(); boolean var13 = var12 || !var11; if (var13) { User var14 = new User(var4, var5, var7, var6, var8); var1.getSession().setAttribute(""var10"", var14); var1.getSession().setAttribute(""var12"", var12); var1.getSession().setAttribute(""var11"", var11); var2.sendRedirect(""/profile/update""); return; } var7 = Password.hash(var7); var10 = new User(var4, var5, var7, var6, var8); DaoFactory.getUsersDao().update(var10); var1.getSession().setAttribute(""var10"", var10); var2.sendRedirect(""/profile""); } "	1	1	0	1	1	0
"@Test public void Func1() { PlantBag var1 = plantBagBuilder.initializeProjectDataAndAddToPlantBag(""Project A"") .createPlantItemAndAddToPlantBag(5, 100, ""wood"", ""Project A"") .createPlantItemAndAddToPlantBag(11, 100, ""wood"", ""Project A"") .build(); boolean var2 = _plantPageDataValidator.isPlantPageDataValid(var1); assertThat(var2).isFalse(); } "	0	0	0	0	0	1
"@Override public String Func1() { return (value == null) ? defaultValue : '""' + value + '""'; } "	0	0	0	0	0	1
@Override public void Func1(long var1, String var2) { int var3 = (int)getCachePath().length(); String var4 = var2.substring(var3); mSQLHelper.updateFileSize(var4, var1); deleteLessUsedFiles(var1); } 	1	0	1	0	1	0
"@Override public void Func1(ServletContextEvent var1) { try { List<JobExecutionContext> var2 = Schedule.getScheduler().getCurrentlyExecutingJobs(); for (JobExecutionContext var3 : var2) { JobKey var4 = var3.getJobDetail().getKey(); Schedule.getScheduler().interrupt(var4); Schedule.getScheduler().deleteJob(var4); } } catch (SchedulerException e) { LOGGER.error(""Problem Clearing Job Queue"", e); } try { Schedule.getScheduler().clear(); Schedule.getScheduler().shutdown(true); } catch (SchedulerException e) { LOGGER.error(""Problem shutting down scheduler"", e); } ClassLoader var5 = Thread.currentThread().getContextClassLoader(); Enumeration<Driver> var6 = DriverManager.getDrivers(); while (var6.hasMoreElements()) { Driver var7 = var6.nextElement(); if (var7.getClass().getClassLoader() == var5) { try { LOGGER.info(String.format(""Deregistering JDBC var7: %s"", var7)); DriverManager.deregisterDriver(var7); } catch (SQLException ex) { LOGGER.fatal(String.format(""Error deregistering JDBC var7: %s"", var7), ex); } } else { LOGGER.info(String.format(""Not deregistering JDBC var7 %s as it does not belong to this webapp's ClassLoader"", var7)); } } } "	1	0	1	1	1	0
private void Func1(String var1) { if (var1 != null && var1.length() > 0) { builder.Func1(Boolean.parseBoolean(var1)); } } 	0	1	0	0	0	0
private void Func1(String var1) { if (var1 != null && var1.length() > 0) { builder.Func1(Boolean.parseBoolean(var1)); } } 	0	1	0	0	0	0
@Override public Set<Entity> Func1(CommandSource var1) { return new SelectorResolver(var1, this, true).resolve(); } 	0	0	0	0	0	1
@Override public Set<Entity> Func1(CommandSource var1) { return new SelectorResolver(var1, this, false).Func1(); } 	0	0	0	0	0	1
"private List<File> Func1(final File var1) { final List<String> var2 = Arrays.asList(var1.list()); final List<File> var3 = new ArrayList<File>(); File var4 = null; if (var2.contains(PLATFORM + BITS)) { final File var5 = new File(var1, PLATFORM + BITS); if (var5.isDirectory()) { var4 = var5; } } if (var4 == null && var2.contains(PLATFORM)) { final File var5 = new File(var1, PLATFORM + BITS); if (var5.isDirectory()) { var4 = var5; } } if (var4 != null) { log(""Found platform-specific directory "" + var4.getAbsolutePath()); for (final File var6 : var4.listFiles()) { var3.add(var6); } } final File[] var7 = var1.listFiles(new FileFilter() { @Override public boolean Func2(final File var8) { return !var8.isDirectory(); } }); for (final File var6 : var7) { var3.add(var6); } return var3; } "	1	1	1	1	0	0
"private void Func1(BaseRequest var1, BaseResponse var2) throws InvalidClientException { if (isFromValidFe(var1)) { throw new InvalidClientException(""invalid client host""); } } "	1	0	1	1	1	0
"@Override public void Func1(ChannelHandlerContext var1, Throwable var2) { messageListener.onException(var1); logger.error(""Exception: {}"", var2.getMessage()); var1.close(); } "	1	0	1	1	1	0
"public void Func1(Ad var1) { Iterator<String> var2 = nativeAds.keySet().iterator(); while(var2.hasNext()) { String var3 = var2.next(); FlexNativeAd var4 = nativeAds.get(var3); if((var4 != null) && (var4.var1 == var1)){ String var5 = ""{}""; try { String var6 = var4.var1.getAdTitle(); Image var7 = var4.var1.getAdCoverImage(); Image var8 = var4.var1.getAdIcon(); String var9 = var4.var1.getAdSocialContext(); String var10 = var4.var1.getAdCallToAction(); String var11 = var4.var1.getAdBody(); Rating var12 = var4.var1.getAdStarRating(); JSONObject var13 = new JSONObject(); var13.put(""adNetwork"", __getProductShortName()); var13.put(""adEvent"", EVENT_AD_LOADED); var13.put(""adType"", ADTYPE_NATIVE); var13.put(""adId"", var4.adId); JSONObject var14 = new JSONObject(); var14.put(""title"", var6); var14.put(""socialContext"", var9); var14.put(""buttonText"", var10); var14.put(""body"", var11); if(var12 != null) { var14.put(""rating"", var12.getValue()); var14.put(""ratingScale"", var12.getScale()); } JSONObject var15 = new JSONObject(); if(var7 != null) { var15.put(""url"", var7.getUrl()); var15.put(""width"", var7.getWidth()); var15.put(""height"", var7.getHeight()); } JSONObject var16 = new JSONObject(); if(var8 != null) { var16.put(""url"", var8.getUrl()); var16.put(""width"", var8.getWidth()); var16.put(""height"", var8.getHeight()); } var14.put(""var7"", var15); var14.put(""icon"", var16); var13.put(""var14"", var14); var5 = var13.toString(); } catch(Exception e) { } var4.var1.registerViewForInteraction(var4.view); fireEvent(__getProductShortName(), EVENT_AD_LOADED, var5); break; } } } "	0	0	0	0	0	1
"@Override public BiometricData Func1(Patient var1, BiometricData var2) { BiometricSubject var3 = var2.getSubject(); if (var3 == null) { log.debug(""There are no biometrics to save for var1""); } else { if (isBiometricEngineEnable()) { throw new IllegalStateException(""Unable to save biometrics, as no biometrics engine is enabled""); } BiometricEngine var4 = getBiometricEngine(); log.debug(""Using biometric engine: "" + var4.getClass().getSimpleName()); PatientIdentifierType var5 = var2.getIdentifierType(); if (var5 != null) { log.debug(""Saving biometrics as a var1 var8 of type: "" + var5.getName()); BiometricSubject var6 = (var3.getSubjectId() == null ? null : var4.lookup(var3.getSubjectId())); if (var6 == null) { throw new IllegalArgumentException(""The var3 doesn't exist in m2Sys. Did you call m2Sys enroll method?"") ; } boolean var7 = false; for (PatientIdentifier var8 : var1.getPatientIdentifiers(var5)) { if (var8.getIdentifier().equals(var3.getSubjectId())) { var7 = true; } } if (var7) { log.debug(""Identifier already exists for var1""); } else { PatientIdentifier var8 = identifierBuilder.createIdentifier(var5.getUuid(), var3.getSubjectId(), null); var1.addIdentifier(var8); patientService.savePatientIdentifier(var8); log.debug(""New var1 var8 saved for var1: "" + var8); } } else { throw new IllegalArgumentException(""Invalid biometric configuration.  No var1 var8 type specified""); } } return var2; } "	0	0	1	1	1	0
"public boolean Func1(Ticker var1, boolean var2) throws IOException { if(started) return true; if(!slotFilterDisabled) slotFilter.Func1(var1); long var3 = hdRAF.length(); long var4 = metaRAF.length(); long var5 = storeSize; if(prevStoreSize < storeSize && prevStoreSize > 0) var5 = prevStoreSize; if((var5 * (headerBlockLength + dataBlockLength + hdPadding) > var3) || (var5 * Entry.METADATA_LENGTH > var4)) { if(var2) { setStoreFileSize(storeSize, true); var3 = hdRAF.length(); var4 = metaRAF.length(); } else return true; } storeFileOffsetReady = Math.min(var3 / (headerBlockLength + dataBlockLength + hdPadding), var4 / Entry.METADATA_LENGTH); if(var1 == null) { cleanerThread.Func1(); } else var1.queueTimedJob(new FastRunnable() { @Override public void Func2() { cleanerThread.Func1(); } }, ""Start cleaner thread"", 0, true, false); started = true; return false; } "	1	1	1	0	1	0
"@Override public void Func1(GridViewHolder var1, int var2) { MediaBean var3 = mMediaBeanList.get(var2); if (var3.getId() == Integer.MIN_VALUE) { var1.mCbCheck.setVisibility(View.GONE); var1.mIvMediaImage.setVisibility(View.GONE); var1.mLlCamera.setVisibility(View.VISIBLE); var1.mIvCameraImage.setImageDrawable(mCameraImage); var1.mTvCameraTxt.setTextColor(mCameraTextColor); var1.mTvCameraTxt.setText(mConfiguration.isImage() ? mMediaActivity.getString(R.string.gallery_take_image) : mMediaActivity.getString(R.string.gallery_video)); var1.mIvCameraImage.setBackgroundColor(mCameraImageBgColor); } else { if (mConfiguration.isRadio()) { var1.mCbCheck.setVisibility(View.GONE); } else { var1.mCbCheck.setVisibility(View.VISIBLE); var1.mCbCheck.setOnClickListener(new OnCheckBoxClickListener(var3)); var1.mCbCheck.setOnCheckedChangeListener(new OnCheckBoxCheckListener(var3)); } var1.mIvMediaImage.setVisibility(View.VISIBLE); var1.mLlCamera.setVisibility(View.GONE); var1.mCbCheck.setChecked(mMediaActivity.getCheckedList() != null && mMediaActivity.getCheckedList().contains(var3)); String var4 = var3.getThumbnailSmallPath(); String var5 = var3.getThumbnailSmallPath(); if (!new File(var4).exists() || !new File(var5).exists()) { Job var6 = new ImageThmbnailJobCreate(mMediaActivity, var3).create(); RxJob.getDefault().addJob(var6); } String var7; if (mConfiguration.isPlayGif() && (imageLoaderType == 3 || imageLoaderType == 2)) { var7 = var3.getOriginalPath(); } else { var7 = var3.getThumbnailSmallPath(); if (TextUtils.isEmpty(var7)) { var7 = var3.getThumbnailBigPath(); } if (TextUtils.isEmpty(var7)) { var7 = var3.getOriginalPath(); } } Logger.w(""提示path："" + var7); if (imageLoaderType != 3) { OsCompat.setBackgroundDrawableCompat(var1.mIvMediaImage, mImageViewBg); mConfiguration.getImageLoader() .displayImage(mMediaActivity, var7, (FixImageView) var1.mIvMediaImage, mDefaultImage, mConfiguration.getImageConfig(), true, mConfiguration.isPlayGif(), mImageSize, mImageSize, var3.getOrientation()); } else { OsCompat.setBackgroundDrawableCompat(var1.mIvMediaImage, mImageViewBg); FrescoImageLoader.setImageSmall(""file://"" + var7, (SimpleDraweeView) var1.mIvMediaImage, mImageSize, mImageSize, var1.relativeLayout, mConfiguration.isPlayGif()); } } } "	0	0	0	0	0	1
"public List<Service> Func1(List<ServiceConfig> var1) { ArrayList<Service> var2 = new ArrayList<>(); for (ServiceConfig var3 : var1) { ServiceBuilder var4 = new ServiceBuilder() .withNewMetadata() .withName(var3.getName()) .withAnnotations(getAnnotations(var3)) .withAnnotations(getLabels(var3)) .endMetadata(); ServiceFluent.SpecNested<ServiceBuilder> var5 = var4.withNewSpec(); List<ServicePort> var6 = new ArrayList<>(); int var7 = 0; for (ServiceConfig.Port var8 : var3.getPorts()) { ServicePort var9 = new ServicePortBuilder() .withName(var8.getName()) .withProtocol(var8.getProtocol().name()) .withTargetPort(new IntOrString(var8.getTargetPort())) .withPort(var8.getPort()) .withNodePort(var8.getNodePort()) .build(); var6.add(var9); if (++var7 >= 1) { break; } } if (!var6.isEmpty()) { var5.withPorts(var6); } if (var3.isHeadless()) { var5.withClusterIP(""None""); } if (!Strings.isNullOrBlank(var3.getType())) { var5.withType(var3.getType()); } var5.endSpec(); if (var3.isHeadless() || !var6.isEmpty()) { var2.add(var4.build()); } } return var2; } "	0	0	0	0	0	1
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_main); Configuration.getInstance().loadConfiguration(this); panelsFlipper = (ViewFlipper) findViewById(R.id.main_panelsFlipper); RadioCheckListener var2 = new RadioCheckListener(); settingsRadio = (RadioButton) findViewById(R.id.main_settingsRadioButton); settingsRadio.setOnCheckedChangeListener(var2); logsRadio = (RadioButton) findViewById(R.id.main_logsRadioButton); logsRadio.setOnCheckedChangeListener(var2); autoTimeRadio = (RadioButton) findViewById(R.id.main_autoTimeRadioButton); autoTimeRadio.setOnCheckedChangeListener(var2); consoleRadio = (RadioButton) findViewById(R.id.main_autoTimeRadioButton); if (consoleRadio != null) { consoleRadio.setOnCheckedChangeListener(var2); } new SelectLoggerPanel(this); settingsPanel = new SettingsPanel(this); logsPanel = new LogsPanel(this); autoUpdatePanel = new AutoUpdatePanel(this); TextView var3 = (TextView) findViewById(R.id.main_consoleTextView); consoleAppender = new ConsoleMessagesAppender(var3); btStatusLabel = (TextView) findViewById(R.id.main_btStatusTextView); updateBtStatusLabel(""""); } "	0	1	1	0	1	0
"public static void Func1(String[] var1) { try { Connection var2 = DriverManager.getConnection(""jdbc:mysql://localhost:3306/airline"", ""root"", ""1234""); myStat = var2.createStatement(); } catch (Exception var5){ var5.printStackTrace(); } frame = new JFrame(""Airline""); panel = new JPanel(); c = new GridBagConstraints(); panel.setLayout(new GridBagLayout()); frame.add(panel); frame.pack(); frame.setSize(800, 600); frame.setLocationRelativeTo(null); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 0; c.gridy = 1; JLabel var3 = new JLabel(""Login with your Passport Number""); panel.add(var3, c); c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 1; c.gridy = 1; c.gridwidth = 5; passportNoLogin = new JTextField(20); passportNoLogin.setSize(100, 10); panel.add(passportNoLogin, c); c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 8; c.gridy = 1; JButton var4 = new JButton(""Login as Passenger""); var4.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var5) { if (isValidPassenger(passportNoLogin.getText())) { panel.setVisible(false); Passenger var6 = new Passenger(); var6.init(passportNoLogin.getText()); } } }); panel.add(var4, c); c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 1; c.gridy = 2; invalidPassportNoLabel = new JLabel(); panel.add(invalidPassportNoLabel, c); c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 0; c.gridy = 3; final JLabel var7 = new JLabel(""Login with your Admin ID""); panel.add(var7, c); c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 1; c.gridy = 3; c.gridwidth = 5; adminIdLogin = new JTextField(20); var7.setSize(100, 10); panel.add(adminIdLogin, c); c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 8; c.gridy = 3; JButton var8 = new JButton(""Login as Admin""); panel.add(var8, c); var8.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var5) { if (adminIdLogin.getText().equals(""j4w9a"") || adminIdLogin.getText().equals(""p7x8"") ||adminIdLogin.getText().equals(""v5e0b"")) { panel.setVisible(false); AdminPanel var9 = new AdminPanel(); var9.init(); } } }); c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 8; c.gridy = 4; JButton var10 = new JButton(""Create Passenger Account""); var10.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var5) { panel.setVisible(false); CreatePassenger var11 = new CreatePassenger(); var11.init(); } }); panel.add(var10, c); frame.setVisible(true); } "	0	0	0	0	0	1
@Override public void Func1() { final MaterialDialog var1 = ISDialogs.showBuildingRequestDialog (context); IconRequest.get().send(new OnRequestProgress() { @Override public void Func2() { var1.show(); } @Override public void Func3() { var1.dismiss(); if (mAdapter != null) mAdapter.notifyDataSetChanged(); } }); } 	0	1	0	0	0	0
"private static Boolean Func1(COSString var1, Map<String, Object> var2, String var3) { final Object var4 = var2.get(var3); if (var4 != null) { if (var4 instanceof String) { return Boolean.valueOf(var4.equals(var1.getASCII())); } else if (var4 instanceof Calendar) { final String var5 = ""(D:)?(\\d\\d){2,7}(([+-](\\d\\d[']))(\\d\\d['])?)?""; if (var1.getASCII().matches(var5)) { final Calendar var6 = DateConverter.toCalendar(var1); return Boolean.valueOf(var6 != null && var6.compareTo((Calendar) var4) == 0); } } } return Boolean.FALSE; } "	0	1	0	0	0	0
protected void Func1() { this.motion.setY(Math.max(GameConstants.MAX_Y_SPEED, this.motion.getY() - (GameConstants.GRAVITY / GameConstants.TICKS_PER_SEC))); Point var1 = motion.divide(GameConstants.TICKS_PER_SEC); if(!this.handler.checkCellCollision(location, var1, this)) { this.location = this.location.add(var1); } else { this.motion.setY(0); } } 	0	1	1	1	0	0
@Test public void Func1() throws Exception { TimeVisibilityCriterion var1 = new TimeVisibilityCriterion(6, 18); for (int var2 = 0; var2 < 12; var2++) { Mockito.when(world.getWorldDate()).thenReturn(new Date(1, 1, 1, (var2 + 18) % 24, 0, 0)); Assert.assertFalse(var1.isMetBy(observer)); } } 	0	1	0	0	0	0
"public static void Func1(List<String> var1, List<String> var2, int var3, int var4, int var5) { String var6 = var1.remove(var3); if(isTaggedInteractive(var6)) { var6 = var6.replace("""", """"); var1.add(var3, var6.substring(0, var4)+convertToConsole(var2)+var6.substring(var5)); return; } List<String> var7 = new ArrayList<>(); int var8 = var3; while(var8 < var1.size() && isTaggedInteractive(var1.get(var8))) { var7.add(var1.get(var8)); var8++; } int var9 = var3; if(var4 > 0) { var1.add(var3, var6.substring(0, var4)); var9++; var1.addAll(var9, var7); var9 += var7.size(); } var1.addAll(var9, var2); var9 += var2.size(); var1.addAll(var9, var7); var9 += var7.size(); if(var5 < (var6.length()-1)) { var1.add(var9, var6.substring(var5)); var9++; var1.addAll(var9, var7); } } "	1	1	1	1	0	0
"@Test public void Func1() throws InterruptedException { OnTimeExpiredCache<String, String> var1 = new OnTimeExpiredCache<>(40, 10); for (int var2 = 0; var2 < 100; var2++) { var1.put(String.valueOf(var2), String.valueOf(var2) + ""_str""); } assertEquals(""12_str"", var1.get(""12"")); Thread.sleep(60); S.echo(var1.get(""12"")); assertNull(var1.get(""12"")); for (int var2 = 100; var2 < 200; var2++) { var1.put(String.valueOf(var2), String.valueOf(var2) + ""_str""); } assertNull(var1.get(""12"")); assertEquals(""122_str"", var1.get(""122"")); Thread.sleep(60); assertNull(var1.get(""12"")); assertNull(var1.get(""122"")); } "	1	0	1	1	1	0
@Override public void Func1() { alertCallbacks.lowBatteryLevelRequest(); } 	0	0	0	0	0	1
public ClassDefinitionBuilder Func1(String var1, java.util.List<ProducedType> var2, boolean var3, boolean var4) { ListBuffer<JCExpression> var5 = new ListBuffer<JCExpression>(); for (ProducedType var6 : var2) { if (!gen.willEraseToObject(var6)) { var5.append(gen.makeJavaType(var6)); } } typeParams.append(gen.make().TypeParameter(gen.names().fromString(var1), var5.toList())); typeParamAnnotations.append(gen.makeAtTypeParameter(var1, var2, var3, var4)); return this; } 	0	1	0	0	0	0
"protected static boolean Func1(String var1) { return var1.matches(""[0-9]*[.]*""); } "	1	0	0	1	1	0
"@Override public void Func1(Object var1) throws Exception { if (var1 instanceof Event) { Event var2 = (Event) var1; try { if (""keyword-var3-tracking"".equals(var2.getName())) { KeywordJob var3 = (KeywordJob) var2.getSource(); KeywordProject var4 = keywordService.get(var3.getProjectId()); if (var3.getStatus() == AbstractJob.Status.Running) { VMachine var5 = vmachineService.getSystemVM(var4.getTenant(), var4.getSpace()); VMachine var6 = vmachineService.get(var3.getTestVMachineId()); StringBuilder var7 = new StringBuilder(""http://"").append(var5.getPublicIp()) .append("":8081/guacamole/#/client/c/vnc_node_"").append(var6.getPrivateIp()); var3.put(""watch_url"", var7.toString()); } var3.put(""project_status"", var4.getStatus().toString()); eventController.send(var4.getCreator().get(), var3); } else if (""performance-var3-tracking"".equals(var2.getName())) { PerformanceJob var3 = (PerformanceJob) var2.getSource(); var3.put(""raw_report"", null); PerformanceProject var4 = perfService.get(var3.getProjectId(),""raw""); var3.put(""project_status"", var4.getStatus().toString()); var3.put(""runningTime"", formater.format(var3.getCreatedDate())); eventController.send(var4.getCreator().get(), var3); } else if (""upload-var3-tracking"".equals(var2.getName())) { SeleniumUploadJob var3 = (SeleniumUploadJob) var2.getSource(); var3.put(""raw_report"", null); SeleniumUploadProject var4 = seleniumUploadService.get(var3.getProjectId(),""raw""); if (var3.getStatus() == AbstractJob.Status.Running) { VMachine var5 = vmachineService.getSystemVM(var4.getTenant(), var4.getSpace()); VMachine var6 = vmachineService.get(var3.getTestVMachineId()); StringBuilder var7 = new StringBuilder(""http://"").append(var5.getPublicIp()) .append("":8081/guacamole/#/client/c/vnc_node_"").append(var6.getPrivateIp()); var3.put(""watch_url"", var7.toString()); } var3.put(""project_status"", var4.getStatus().toString()); eventController.send(var4.getCreator().get(), var3); } } catch (Exception e) { e.printStackTrace(); } } } "	1	0	1	0	0	0
"private void Func1(Document var1, Project var2) throws DocumentException { Paragraph var3 = new Paragraph(); addEmptyLine(var3, 1); ComponentController var4 = new ComponentController(); CategoryController var5 = new CategoryController(); Category var6 = var5.findCategoryByShortTerm(""KL""); Component var7 = var4.findComponentByProjectIdAndComponentTypeAndCategoryId(var2.getId(), ""Produkt"", var6.getId()); if (var7 != null && !var7.getFullNameProduct().isEmpty()) { var3.add(new Paragraph(var7.getFullNameProduct(), SUBFONT)); } else { var3.add(new Paragraph(""Konterlattung"", SUBFONT)); } addEmptyLine(var3, -1); PdfPTable var8 = new PdfPTable(new float[]{6f, 3.5f}); var8.setWidthPercentage(100f); if (var4.findAll().size() > 0) { var8.addCell(new Phrase(""Name"", TABLE_HEADER_FONT)); var8.addCell(new Phrase(""Länge der Dachsparren"", TABLE_HEADER_FONT)); var4.findAll().stream().filter(comp -> comp.getCategory().getShortTerm().equals(""KD"")).forEach(comp -> { var8.addCell(new Phrase(comp.getFullNameProduct(), TABLE_NORMAL_FONT)); var8.addCell(new Phrase(UtilityFormat.getStringForTextField(comp.getLengthComponent() * comp.getNumberOfProducts()) + "" m"", TABLE_NORMAL_FONT)); }); } var3.add(var8); WorthController var9 = new WorthController(); Worth var10 = var9.findWorthByShortTermAndProjectId(""LD"", var2.getId()); if (var10 != null) { var3.add(new Paragraph(""Summe: "" + UtilityFormat.getStringForLabel(var10), NORMALFONT)); } if (var7 != null && var7.getPriceComponent() != null) { var3.add(new Paragraph(""Preis: "" + UtilityFormat.formatValueWithShortTerm(var7.getPriceComponent(), ""€/Lfm"") + "" €/Lfm"", NORMALFONT)); } Worth var11 = var9.findWorthByShortTermAndProjectId(""VKLP"", var2.getId()); if (var11 != null) { var3.add(new Paragraph(""Eingegebener Verschnitt: "" + UtilityFormat.getStringForLabel(var11), NORMALFONT)); } Worth var12 = var9.findWorthByShortTermAndProjectId(""VKL"", var2.getId()); if (var12 != null) { var3.add(new Paragraph(""Verschnitt: "" + UtilityFormat.getStringForLabel(var12), NORMALFONT)); } Worth var13 = var9.findWorthByShortTermAndProjectId(""KL"", var2.getId()); if (var13 != null) { var3.add(new Paragraph(""Konterlattung: "" + UtilityFormat.getStringForLabel(var13), NORMALFONT)); } Worth var14 = var9.findWorthByShortTermAndProjectId(""KPKL"", var2.getId()); if (var14 != null) { var3.add(new Paragraph(""Kosten Montage pro Stunde: "" + UtilityFormat.getStringForLabel(var14), NORMALFONT)); } Worth var15 = var9.findWorthByShortTermAndProjectId(""ZPKL"", var2.getId()); if (var15 != null) { var3.add(new Paragraph(""Zeit für Montage: "" + UtilityFormat.getStringForLabel(var15), NORMALFONT)); } Worth var16 = var9.findWorthByShortTermAndProjectId(""KProKL"", var2.getId()); if (var16 != null) { var3.add(new Paragraph(""Produkt Kosten: "" + UtilityFormat.getStringForLabel(var16), NORMALFONT)); } Worth var17 = var9.findWorthByShortTermAndProjectId(""KMonKL"", var2.getId()); if (var17 != null) { var3.add(new Paragraph(""Montage Kosten: "" + UtilityFormat.getStringForLabel(var17), NORMALFONT)); } Worth var18 = var9.findWorthByShortTermAndProjectId(""GKKL"", var2.getId()); if (var18 != null) { var3.add(new Paragraph(""Gesamtkosten Konterlattung: "" + UtilityFormat.getStringForLabel(var18), NORMALFONT)); } var1.add(var3); } "	1	0	0	1	1	0
@Override public void Func1(double var1) { if (getCore() != null) { TileGeneratorCore var2 = (TileGeneratorCore) getCore(); double var3 = convertFromEU(var1); var2.extractEnergy(null, (int) Math.round(var3), false); worldObj.markBlockForUpdate(coreLocation.x, coreLocation.y, coreLocation.z); } } 	1	0	1	0	1	0
public static void Func1(SchemaManager var1, SqlNode var2) { ArrayList<SqlIdentifier> var3 = new ArrayList<>(); var2.accept(new SqlTableIdentifierFindVisitor(var3)); for (SqlIdentifier var4 : var3) { List<String> var5 = var1.toFullyQualifiedTableName(var4.names); var4.setNames(var5, null); } } 	0	0	0	0	0	1
default Varargs Func1(String var1, LuaValue... var2) { return this.invoke(var1, LuaValue.varargsOf(var2)); } 	1	0	0	1	1	0
public List<ActivityData> Func1(User var1, String var2) { return getFacade().getAllForUserWithUnit(var1.getIdUser(), var2); } 	1	0	1	0	1	0
public static void Func1( BackendlessUser var1 ) { Map<String, Object> var2 = var1.getProperties(); Set<Map.Entry<String, Object>> var3 = var2.entrySet(); for( Map.Entry<String, Object> var4 : var3 ) { Object var5 = var4.getValue(); if( var5 != null && !var5.getClass().isArray() && !isBelongsJdk( var5.getClass() ) ) { var4.setValue( serializeToMap( var5 ) ); } } var1.setProperties( var2 ); } 	0	1	0	0	0	0
"private void Func1(View var1) { starProgressBar = (ProgressBar) var1.findViewById(R.id.recommend_star_progressbar); starText = (TextView) var1.findViewById(R.id.recommend_star); starText.setOnClickListener(this); var1.findViewById(R.id.recommend_fork).setOnClickListener(this); skipBtn = var1.findViewById(R.id.recommend_skip); skipBtn.setOnClickListener(this); mProgressBar = (ProgressBar) var1.findViewById(R.id.repo_progressbar); mProgressBar.setVisibility(View.VISIBLE); TextView var2 = (TextView) var1.findViewById(R.id.recommend_notice2); SpannableString var3 = new SpannableString(mContext.getString(R.string.recommend_notice2_part1) + "" "" + mContext.getString(R.string.recommend_notice2_part2)); var3.setSpan(new CustomClickableSpan(), 0, mContext.getString(R.string.recommend_notice2_part1).length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); var2.setText(var3); var2.setOnClickListener(this); notice3 = (TextView) var1.findViewById(R.id.recommend_notice3); final SpannableString var4 = new SpannableString(mContext.getString(R.string.recommend_notice3_part1) + "" "" + mContext.getString(R.string.recommend_notice3_part2)); var4.setSpan(new CustomClickableSpan(), mContext.getString(R.string.recommend_notice3_part1).length(), var4.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); notice3.setText(var4); notice3.setOnClickListener(this); mWebView = (ProgressWebView) var1.findViewById(R.id.recommend_webview); mEmptyView = (LinearLayout) var1.findViewById(R.id.recommend_empty); mEmptyView.setVisibility(View.GONE); if (mParmasMap == null) { mParmasMap = new HashMap(); mParmasMap.put(""userid"", MLUser.getCurrentUser().getUserName()); mParmasMap.put(""page"", page); mParmasMap.put(""per_page"", PER_PAGE); } if (repos == null) { genes = new ArrayList<>(); repos = new ArrayList<>(); getGenes(); } } "	0	0	0	0	0	1
public void Func1(View var1) throws ParseException{ if (createExpenseItem(var1)){ finish(); } } 	1	0	1	1	0	0
"public int Func1(Object var1) { return Integer.valueOf(var1.toString().replaceAll(""\\D+"", """")); } "	0	0	0	0	0	1
public <V, T extends Enum<T>> void Func1(Column var1, V var2, EnumMapper<V, T> var3) { T var4 = var3.getMappedValue(var2); checkForRequiredColumn(var1, var4); checkForColumnDataType(var1, var3.getEnumClass(), DataType.TEXT); String var5 = null; if (var4 != null) { var5 = var4.name(); } contentValues.put(var1.getName(), var5); } 	0	1	1	0	1	0
"private ServiceResponse Func1(Model var1, OutputFormat var2) { BiopaxConverter var3 = new BiopaxConverter(blacklist); ServiceResponse var4; if(var2 != OutputFormat.BIOPAX) { for(Pathway var5 : new HashSet<Pathway>(var1.getObjects(Pathway.class))) { var1.remove(var5); } } if (var2==OutputFormat.GSEA) { var4 = var3.Func1(var1, var2, ""uniprot"", false); //uniprot; outside pathway entities } else { var4 = var3.Func1(var1, var2); //default ID type, layout, etc. } return var4; } "	1	0	1	0	1	0
"@Override public ServiceResponse Func1(final OutputFormat var1, boolean var2, final String... var3) { if(!paxtoolsModelReady()) return new ErrorResponse(MAINTENANCE,""Waiting for the initialization to complete (try later)...""); try { final String[] var4 = findUrisByIds(var3); Set<BioPAXElement> var5 = urisToBpes(paxtoolsModel, var4); Model var6 = autoCompleteAndClone(var5, var2); if(!var6.getObjects().isEmpty()) { if(var4.length==1) { String var7 = var4[0]; var6.setUri(var7); BioPAXElement var8 = var6.getByID(var7); if(var8 instanceof Named) { var6.setName(((Named) var8).getDisplayName() + "" "" + ArrayUtils.toString(var3)); } else { var6.setName(ArrayUtils.toString(var3)); } } else { String var9 = ArrayUtils.toString(var3); var6.setUri(""PC_get_"" + var9.hashCode()); var6.setName(var9); } } return convert(var6, var1); } catch (Exception e) { return new ErrorResponse(INTERNAL_ERROR, e); } } "	1	0	1	0	1	0
public void Func1(final List<Publication> var1) { this.var1 = var1; } 	0	0	0	0	0	1
private int Func1() throws IOException { Packet var1 = decoder.var1(); int var2 = decoder.getNetwork(); while (offset < validBytes) { if (validBytes - offset < 9000) { System.arraycopy(buffer, 0, buffer, offset, validBytes - offset); validBytes = validBytes - offset; offset = 0; int var3 = in.read(buffer, validBytes, buffer.length - validBytes); if (var3 > 0) { validBytes += var3; } } offset = decoder.decodePacket(buffer, offset, var1); if (addDataToTable(var1, var2)) { return 1; } } return 0; } 	1	1	0	1	1	0
"private SparkLauncher Func1(Config var1) { String var2 = var1.hasPath(TOPOLOGY_MASTER) ? var1.getString(TOPOLOGY_MASTER) : ""local[*]""; String var3 = var1.getString(SPARK_EXECUTOR_CORES); String var4 = var1.getString(SPARK_EXECUTOR_MEMORY); String var5 = var1.getString(DRIVER_MEMORY); String var6 = var1.getString(DRIVER_CORES); String var7 = var1.getString(DEPLOY_MODE); String var8 = var1.getString(TOPOLOGY_DYNAMICALLOCATION); boolean var9 = var1.getBoolean(TOPOLOGY_VERBOSE); String var10 = var1.getString(TOPOLOGY_MAINCLASS); String var11 = var1.getString(TOPOLOGY_SPARKHOME); String var12 = var1.getString(TOPOLOGY_SPARKUIPORT); String var13 = var1.getString(TOPOLOGY_APPRESOURCE); String var14 = var1.getString(TOPOLOGY_YARNQUEUE); SparkLauncher var15 = new SparkLauncher(); var15.setMaster(var2); var15.setMainClass(var10); var15.setSparkHome(var11); var15.setDeployMode(var7); var15.setVerbose(var9); var15.setAppResource(var13); var15.setAppName(var1.getString(TOPOLOGY_NAME)); var15.setConf(""spark.yarn.queue"", var14); var15.setConf(""spark.executor.cores"", var3); var15.setConf(""spark.executor.memory"", var4); var15.setConf(""spark.driver.memory"", var5); var15.setConf(""spark.driver.cores"", var6); var15.setConf(""spark.streaming.dynamicAllocation.var8"", var8); var15.setConf(""spark.ui.port"", var12); String var16 = var1.getString(TOPOLOGY_SPARKCONFFILEPATH); if (StringUtil.isNotBlank(var16)) { var15.setPropertiesFile(var16); } String var17 = var1.getString(BATCH_DURATION); String var18 = var1.getString(ROUTER_TASK_NUM); String var19 = var1.getString(ALERT_TASK_NUM); String var20 = var1.getString(PUBLISH_TASK_NUM); String var21 = var1.getString(SLIDE_DURATION_SECOND); String var22 = var1.getString(WINDOW_DURATIONS_SECOND); String var23 = var1.getString(CHECKPOINT_PATH); String var24 = var1.getString(TOPOLOGY_GROUPID); String var25 = var1.getString(AUTO_OFFSET_RESET); String var26 = var1.getString(EAGLE_CORRELATION_SERVICE_HOST); String var27 = var1.getString(EAGLE_CORRELATION_SERVICE_PORT); String var28 = var1.getString(EAGLE_CORRELATION_CONTEXT); var15.addAppArgs(var17, var18, var19, var20, var21, var22, var23, var24, var25, var26, var27, var28); return var15; } "	0	0	0	0	0	1
"@Test public final void Func1() throws Exception { final AmmoWeapon var1 = new AmmoWeapon("""", """", """", 0, 0, 0.0, HardPointType.ENERGY, 0, Faction.CLAN, null, null, null, 1, 1, 1, null, 0, 0.0, 0, 0.0, 0.0, null); final Ammunition var2 = new Ammunition("""", """", """", 0, 0, 0.0, HardPointType.NONE, 0.0, Faction.CLAN, 10, ""ammotype"", HardPointType.ENERGY, 0.0); assertFalse(var1.isCompatibleAmmo(var2)); } "	0	0	0	0	0	1
"@Override public RayoNode Func1(RayoNode var1) throws GatewayException { RayoNode var2 = store.getNode(var1.getHostname()); if (var2 != null) { if (var2.toString().equals(var1.toString())) { log.debug(""Rayo Node [%s] already exists. Ignoring status update."", var1); return var2; } else { log.debug(""Rayo Node [%s] has been updated. Updating storage service."", var1); store.updateNode(var2); } } try { if (var1.getIpAddress() == null) { var1.setIpAddress(InetAddress.getByName(var1.getHostname()).getHostAddress()); } return store.storeNode(var1); } catch (UnknownHostException uhe) { throw new GatewayException(""Unknown host"", uhe); } } "	1	1	0	0	1	0
private static Function<String, Void> Func1(final Logger var1) { return new Function<String, Void>() { @Override public Void Func2(String var2) { var1.error(var2); return null; } }; } 	1	0	0	1	1	0
public static List<ServiceResourceInfo> Func1(String var1, String var2) { List<ServiceResourceInfo> var3 = new ArrayList<ServiceResourceInfo>(); for (ComponentConfig var4 : getAllComponents()) { if (var2 == null || var2.equals(var4.getComponentName())) { List<ServiceResourceInfo> var5 = var4.getServiceResourceInfos(); if (UtilValidate.isEmpty(var1)) { var3.addAll(var5); } else { for (ServiceResourceInfo var6 : var5) { if (var1.equals(var6.var1)) { var3.add(var6); } } } } } return var3; } 	1	0	1	0	1	0
"@Override public View Func1(int var1, View var2, ViewGroup var3) { ViewHolder var4; if (var2 == null) { var2 = mInflater.inflate(R.layout.list_item_layout, null); var4 = new ViewHolder(); var4.text = (TextView) var2.findViewById(R.id.drinkItem); var2.setTag(var4); } else { var4 = (ViewHolder) var2.getTag(); } var4.text.setText(filteredData.get(var1).getFormattedName()); var4.text.setInputType(InputType.TYPE_NULL); var4.text.setOnClickListener(new View.OnClickListener() { public void Func2(View var5) { String var6 = ((TextView) var5).getText().toString(); for (Drink var7 : filteredData) { if (var7.getName().equals(var6)) { Intent var8 = new Intent(var5.getContext(), OpenRecipeActivity.class); var8.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); var8.putExtra(""ListViewClick"", var7); var5.getContext().startActivity(var8); } } } }); return var2; } "	0	0	0	1	1	0
void Func1() { mActivityReference.findViewById(R.id.loading_indicator_layout).setVisibility(View.VISIBLE); } 	0	0	0	0	0	1
public Event Func1(ParsedCommand var1) { Event var2 = new Event(); for (Event var3 : events) { if (var3.getId() == var1.getId()) { var2 = var3; break; } } manage.Func1(var2); events.Func1(var2); return var2; } 	0	1	1	0	1	0
"@Before public void Func1() throws Exception { mapper = HadoopDruidIndexerConfig.JSON_MAPPER; mapper.registerSubtypes(new NamedType(HashBasedNumberedShardSpec.class, ""hashed"")); dataRoot = temporaryFolder.newFolder(""data=hear""); outputRoot = temporaryFolder.newFolder(""output""); for (Map.Entry<String, List<String>> var1: data.entrySet()) { temporaryFolder.newFolder((""data=hear/"" + var1.getKey()).split(""/"")); File var2 = temporaryFolder.newFile(""data=hear/"" + var1.getKey() + ""/data""); FileUtils.writeLines(var2, var1.getValue()); } HashMap<String, Object> var3 = new HashMap<>(); var3.put(""type"", ""partition""); var3.put(""basePath"", dataRoot.getCanonicalPath()); var3.put(""partitionColumns"", ImmutableList.of(""test1"", ""test2"")); config = new HadoopDruidIndexerConfig( new HadoopIngestionSpec( new DataSchema( dataSourceName, mapper.convertValue( inputRowParser, Map.class ), aggs, new UniformGranularitySpec( Granularity.DAY, QueryGranularity.NONE, ImmutableList.of(this.interval) ), mapper ), new HadoopIOConfig( ImmutableMap.copyOf(var3), null, outputRoot.getCanonicalPath() ), new HadoopTuningConfig( outputRoot.getCanonicalPath(), null, null, null, null, null, false, false, false, false, ImmutableMap.of(JobContext.NUM_REDUCES, ""0""), //verifies that set num reducers is ignored false, true, null, true, null ) ) ); config.setShardSpecs( loadShardSpecs(shardInfoForEachSegment) ); config = HadoopDruidIndexerConfig.fromSpec(config.getSchema()); } "	0	0	0	0	0	1
private void Func1(Logger.Level var1, String var2, Object var3, Object var4) { logger.print(var1, MessageFormatter.var2(var2, var3, var4).getMessage(), null); } 	0	0	1	1	1	0
public boolean Func1() { BigDecimal var1 = incompleteAbrechnungsTotals.get(0); return var1.signum() > 0; } 	1	1	1	1	0	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_create_mood); completeButton = (Button) findViewById(R.id.saveButton); date = new DatePickerEditText(this, R.id.dateField); emotionSpinner = (Spinner) findViewById(R.id.emotionSpinner); etTrigger = (EditText) findViewById(R.id.triggerField); socialSituationSpinner = (Spinner) findViewById(R.id.spinner); saveLocation = (CheckBox) findViewById(R.id.saveLocation); currentLocation = (TextView) findViewById(R.id.currentLocation); Button var2 = (Button) findViewById(R.id.var2); imageView = (ImageView) findViewById(R.id.imageView); Mood var3 = (Mood) getIntent().getSerializableExtra(""var3""); etTrigger.setText(var3.getTrigger()); Date var4 = (Date) var3.getMoodDate(); latitude = var3.getLatitude(); longitude = var3.getLongitude(); currentLocation.setText(""Lat: "" + var3.getLatitude() + "" Long: "" + var3.getLongitude()); Log.d(""Date"", var4.toString()); date.setDate(var4.getYear()+1900, var4.getMonth(), var4.getDate()); emotionSpinner.setSelection(((ArrayAdapter<String>) emotionSpinner.getAdapter()) .getPosition(var3.getEmotionState())); socialSituationSpinner.setSelection(((ArrayAdapter<String>) socialSituationSpinner .getAdapter()).getPosition(var3.getSocialSituation())); s = var3.getPhoto(); if (var3.getPhoto().equals("""")){ imageView.setVisibility(View.GONE); imageView.setImageBitmap(null); s = """"; } else { final byte[] var5 = Base64.decode(var3.getPhoto(), Base64.DEFAULT); final Bitmap var6 = BitmapFactory.decodeByteArray(var5, 0, var5.length); imageView.setImageBitmap(var6); } completeButton.setOnClickListener(new View.OnClickListener() { public void Func2(View var7) { TextView var8 = (TextView) emotionSpinner.getSelectedView(); if (errorCheck(var8, etTrigger)) { newMood = new Mood(); newMood.setEmotionState(emotionSpinner.getSelectedItem().toString()); String var9 = getIntent().getStringExtra(""var9""); newMood.setMaker(var9); newMood.setMoodDate(date.getDate()); newMood.setTrigger(etTrigger.getText().toString().trim()); newMood.setLatitude(latitude); newMood.setLongitude(longitude); if(socialSituationSpinner.getSelectedItem().toString().equals(""Select a social situation"")){ newMood.setSocialSituation(""""); } else{ newMood.setSocialSituation(socialSituationSpinner.getSelectedItem().toString()); } newMood.setPhoto(s); Intent var10 = new Intent(); var10.putExtra(""var3"", newMood); setResult(RESULT_OK, var10); finish(); } } }); saveLocation.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var7) { if(saveLocation.isChecked()) { GPSTracker var11 = new GPSTracker(EditMoodActivity.this); LocationManager var12 = (LocationManager) getSystemService(LOCATION_SERVICE); if (var12.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) { Log.d(""UserLocation"", ""latitude:"" + var11.getLatitude() + "", longitude: "" + var11.getLongitude()); latitude = Math.round(var11.getLatitude() * 10000d)/10000d; longitude = Math.round(var11.getLongitude() * 10000d)/10000d; if(latitude == 0 & longitude == 0){ Toast.makeText(EditMoodActivity.this, ""Could not find your location, please try again!"", Toast.LENGTH_LONG).show(); } } else{ Toast.makeText(EditMoodActivity.this, ""Please turn on GPS for locations!"", Toast.LENGTH_LONG).show(); } } else{ latitude = 0.0; longitude = 0.0; } } }); var2.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var7) { Intent var13 = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE); startActivityForResult(var13, 3); imageView.setVisibility(View.VISIBLE); } }); } "	0	0	0	0	0	1
"static void Func1(final Tree.ObjectArgument var1, final GenerateJsVisitor var2) { final Class var3 = (Class)var1.getDeclarationModel().getTypeDeclaration(); var2.out(""(function()""); var2.beginBlock(); var2.out(""//ObjectArgument "", var1.getIdentifier().getText()); var2.location(var1); var2.endLine(); var2.out(GenerateJsVisitor.function, var2.getNames().name(var3), ""()""); var2.beginBlock(); var2.instantiateSelf(var3); var2.referenceOuter(var3); Tree.ExtendedType var4 = var1.getExtendedType(); final Tree.ClassBody var5 = var1.getClassBody(); final Tree.SatisfiedTypes var6 = var1.getSatisfiedTypes(); final List<Declaration> var7 = new ArrayList<Declaration>(3); if (!var2.opts.isOptimize()) { new GenerateJsVisitor.SuperVisitor(var7).visit(var1.getClassBody()); } TypeGenerator.callSupertypes(var6 == null ? null : TypeUtils.getTypes(var6.getTypes()), var4 == null? null : var4.getType(), var3, var1, var7, var4 == null ? null : var4.getInvocationExpression(), var4 == null ? null : var3.getParameterList(), var2); var5.visit(var2); var2.out(""return "", var2.getNames().self(var3), "";""); var2.endBlock(false, true); var2.out(var2.getNames().name(var3), "".$crtmm$=""); TypeUtils.encodeForRuntime(var3, null, var2); var2.endLine(true); TypeGenerator.typeInitialization(var4, var6, var3, new GenerateJsVisitor.PrototypeInitCallback() { @Override public void Func2() { var2.addToPrototype(var1, var3, var5.getStatements()); } }, var2, null); var2.out(""return "", var2.getNames().name(var3), ""(new "", var2.getNames().name(var3), "".$$);""); var2.endBlock(); var2.out(""())""); } "	0	0	0	0	0	1
public void Func1(){ for(int var1 = 0; var1 < curvePoints.length; var1++){ Vector3f var2 = curvePoints[var1]; curvePoints[var1] = var2.setY(curvePoints[var1].getY() - 1f); } } 	1	1	0	1	1	0
"public synchronized ExecutorService Func1() { if (executorService == null) { executorService = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), Util.threadFactory(""OkHttp Dispatcher"", false)); } return executorService; } "	0	0	0	0	0	1
@Override public boolean Func1() { Boolean var1 = (_alleleValidator == Equality.TRUE && _alleleSeqValidator == Equality.TRUE) ? Boolean.TRUE : _valid; if (var1 == null) { final ISeq<A> var2 = toSeq().map(Gene::getAllele); var1 = _alleleSeqValidator.test(var2) && var2.forAll(_alleleValidator); } return _valid = var1; } 	0	0	0	0	0	1
@Override public void Func1(ChannelHandlerContext var1, int var2, long var3) throws Http2Exception { handler.Func1(var2); } 	1	0	1	0	1	0
@Override public void Func1(SAXParseException var1) throws SAXException { try { this.reportError(var1.getMessage(), XMLParserSettings.FAIL_ON_SAX_NON_FATAL_ERRORS); } catch (RDFParseException rdfpe) { throw new SAXException(rdfpe); } } 	1	0	1	0	1	0
public FatalResourceException Func1(String var1, Throwable var2) { if(var2 instanceof AmazonServiceException) { AmazonServiceException var3 = (AmazonServiceException)var2; var3.getErrorType(); if(var3.getStatusCode() == 400) { String var4 = getErrorMessage(var1, false); log.warn(var4, var2); handleStatusTracker(StatusTracker.Status.Alert); return new FatalServerException(pdelayData.coord, var4, var2); } try { retry(var1, var2); return null; }catch(Exception e) { String var4 = getErrorMessage(var1, true); log.warn(var4, var2); FatalTimeoutException var5 = new FatalServerTimeoutException(pdelayData.coord, var4, var2); var5.setMaxDelay(pdelayData.maxDelay); var5.setMaxRetries(pdelayData.maxRetries); var5.setTotalWaitTime(StrH.scaleMilliSeconds(totalTime.get())); handleStatusTracker(StatusTracker.Status.Error); return var5; } } if(var2 instanceof AmazonClientException) { AmazonClientException var6 = (AmazonClientException)var2; if(var6.isRetryable()) { try { retry(var1, var2); return null; }catch(Exception e) { String var4 = getErrorMessage(var1, false); log.warn(var4, var2); FatalTimeoutException var5 = new FatalServerTimeoutException(pdelayData.coord, var4, var2); var5.setMaxDelay(pdelayData.maxDelay); var5.setMaxRetries(pdelayData.maxRetries); var5.setTotalWaitTime(StrH.scaleMilliSeconds(totalTime.get())); handleStatusTracker(StatusTracker.Status.Error); return var5; } } String var4 = getErrorMessage(var1, false); log.warn(var4, var2); handleStatusTracker(StatusTracker.Status.Alert); return new FatalClientException(pdelayData.coord, var4, var2); } if(var2 instanceof IllegalArgumentException) { String var4 = getErrorMessage(var1, false); log.warn(var4, var2); handleStatusTracker(StatusTracker.Status.Alert); return new FatalClientException(pdelayData.coord, var4, var2); } if(var2 instanceof InterruptedException) { String var4 = getErrorMessage(var1, false); log.warn(var4, var2); handleStatusTracker(StatusTracker.Status.Error); return new FatalInterruptedException(pdelayData.coord, var4, var2); } String var4 = getErrorMessage(var1, false); log.warn(var4, var2); handleStatusTracker(StatusTracker.Status.Alert); return new FatalClientException(pdelayData.coord, var4, var2); } 	0	1	0	0	0	0
"@Override public E Func1(int var1) { throw new UnsupportedOperationException(""Can't mofidy the OneList""); } "	0	0	0	0	0	1
public void Func1(Archive var1, Session var2) throws Exception; 	0	0	0	0	0	1
public void Func1() { User var1 = mSchool.getDirector(); if (var1 == null) return; for (int var2 = 0; var2 < mUsers.size(); var2++) if (mUsers.get(var2).getId() == var1.getId()) mDirector.setSelection(var2); } 	1	1	1	0	1	0
"public static long Func1(@Nullable Context var1, @NonNull ZoneId var2, @Nullable String var3, @NonNull LocalTime var4, @Nullable String var5, @Nullable String var6, @NonNull String var7) { if (var3 == null || var3.length() == 0) { return Constants.EPISODE_UNKNOWN_RELEASE; } LocalDate var8; try { var8 = LocalDate.parse(var3); } catch (IllegalArgumentException e) { if (var1 != null) { Utils.trackCustomEvent(var1, AnalyticsTree.CATEGORY_THETVDB_ERROR, ""Date parsing failure"", var3); } Timber.e(e, ""TheTVDB date could not be parsed: %s"", var3); return Constants.EPISODE_UNKNOWN_RELEASE; } LocalDateTime var9 = var8.atTime(var4); var9 = handleHourPastMidnight(var5, var6, var9); ZonedDateTime var10 = var9.atZone(var2); if (var7.startsWith(TIMEZONE_ID_PREFIX_AMERICA)) { var10 = applyUnitedStatesCorrections(var5, var7, var10); } return var10.toInstant().toEpochMilli(); } "	0	0	0	0	0	1
public void Func1() { degree = (degree + 90) % 360; Func1(BitmapFactory.decodeFile(imagefilepath), degree); } 	1	0	0	1	1	0
"private void Func1() { AlertDialog.Builder var1 = new AlertDialog.Builder(getContext()); var1.setTitle(""Add var2""); final EditText var2 = new EditText(getContext()); var1.setView(var2); var1.setPositiveButton(""Add"", new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var3, int var4) { String var5 = var2.getText().toString(); (new TagDBManager(getContext())).insertTag(imagefilepath, var5, TagDBManager.NORMAL_TAG); tagListItems.add(new TagListItem(var5)); tagListAdapter.notifyDataSetChanged(); var3.dismiss(); } }); var1.setNegativeButton(""Cancel"", new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var3, int var4) { var3.dismiss(); } }); var1.show(); } "	0	1	0	1	1	0
"@Override protected Void Func1(Void... var1) { teamEventMatchesParsers.fetchJSON(""frc"" + teamNumber, eventKey, getContext()); while (teamEventMatchesParsers.parsingComplete) ; teamEventMatches.clear(); teamEventMatches.addAll(teamEventMatchesParsers.getTeamEventMatches()); Collections.sort(teamEventMatches); return null; } "	0	0	0	0	0	1
private void Func1() { listDataChild = new ArrayList<>(); ArrayList<Device> var1 = backendInteractor.getDevices(); for (Device var2 : var1) { Activator var3 = var2.getToggle(); HestiaSwitch var4 = new HestiaSwitch(var2, var3, getActivity()); DeviceBar var5 = new DeviceBar(var2, var4); if(!listDataChild.contains(var5)) { if (!typeExists(var2)) { listDataChild.add(new ArrayList<DeviceBar>()); listDataChild.get(listDataChild.size() - 1).add(var5); } else { listDataChild.get(getDeviceType(var2)).add(var5); } } } listAdapter.setListData(listDataChild); expListView.setAdapter(listAdapter); } 	0	1	0	0	0	0
@Override protected FindSpikesRenderer Func1(@NonNull BaseFragment var1, @NonNull float[] var2) { final FindSpikesRenderer var3 = new FindSpikesRenderer(var1, var2); var3.setCallback(new FindSpikesRenderer.CallbackAdapter() { @Override public void Func2(@ThresholdOrientation final int var4, final int var5) { if (getActivity() != null) { getActivity().runOnUiThread(new Runnable() { @Override public void Func3() { setThreshold(var4, var5); } }); } } @Override public void Func4(final int var6, final int var7) { if (getActivity() != null) { getActivity().runOnUiThread(new Runnable() { @Override public void Func3() { if (getAudioService() != null) { setMilliseconds(var6 / getAudioService().getSampleRate() * 1000 / 2); } setMillivolts( (float) var7 / 4.0f / 24.5f / 1000 * BYBConstants.millivoltScale); } }); } } @Override public void Func5() { startSeek(); } @Override public void Func6(float var8) { int var9 = (int) (sbAudioProgress.getProgress() - var8); if (var9 < 0) var9 = 0; if (var9 > sbAudioProgress.getMax()) var9 = sbAudioProgress.getMax(); final int var10 = var9; sbAudioProgress.post(new Runnable() { @Override public void Func3() { seek(var10); sbAudioProgress.setProgress(var10); } }); } @Override public void Func7() { stopSeek(); } }); return var3; } 	0	1	0	0	0	0
@Keep public void Func1(Finished var1) { Serializable var2 = var1.getIntent().getSerializableExtra(GerritService.DATA_TYPE_KEY); if (var1.getItems() < 1 && var2 == GerritService.DataType.Comment) { if (mParent instanceof ReviewActivity) { ((ReviewActivity) mParent).onCommented(mCacheKey, mChangeId); } } } 	1	1	1	0	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_main); ButterKnife.inject(this); setSupportActionBar(mToolbar); ParseUser var2 = ParseUser.getCurrentUser(); if (var2 != null) { memberStartHome(); } toggleLogin(); mGuest.setOnClickListener(new View.OnClickListener(){ @Override public void Func2(View var3){ guestStartHome(); } }); mMember.setOnClickListener(new View.OnClickListener(){ @Override public void Func2(View var3){ toggleLogin(); } }); mBack.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var3) { toggleLogin(); } }); mForgotPassword.setOnClickListener(new View.OnClickListener(){ @Override public void Func2(View var3){ if(mEmail.getText().length() == 0){ String var4 = ""Please enter your email then press \""forgot password\""""; Toast var5 = Toast.makeText(getApplicationContext(), var4, Toast.LENGTH_LONG); var5.show(); } else{ ParseUser.requestPasswordResetInBackground(mEmail.getText().toString(), new RequestPasswordResetCallback() { @Override public void Func3(ParseException var6) { if(var6 != null){ Toast.makeText(MainActivity.this, var6.getMessage(), Toast.LENGTH_LONG).show(); } else{ String var7 = ""A reset password link has been send to your email""; Toast.makeText(MainActivity.this, var7, Toast.LENGTH_LONG).show(); } } }); } } }); mSubmitLogin.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var3) { boolean var8 = validate(); if(!var8){ final ProgressDialog var9 = new ProgressDialog(MainActivity.this); var9.setTitle(""Please wait.""); var9.setMessage(""Signing Up. Please wait.""); var9.show(); ParseUser.logInInBackground(mEmail.getText().toString(), mPassword.getText().toString(), new LogInCallback() { @Override public void Func3(ParseUser var10, ParseException var6) { var9.dismiss(); if(var6 != null){ Toast.makeText(MainActivity.this, var6.getMessage(), Toast.LENGTH_LONG).show(); } else{ memberStartHome(); } } }); } } }); } "	0	0	0	0	0	1
@Override public Object[] Func1(Object var1) { List<Object> var2 = new ArrayList<Object>(); if (var1 instanceof TextOnlyNode && ((TextOnlyNode) var1).getType() == NodeType.INSTANCE_REFERENCED_BY) { reqToAsilMap.clear(); if (input instanceof FaultFailurePort) { FaultFailurePort var3 = (FaultFailurePort) input; ECrossReferenceAdapter var4 = ECrossReferenceAdapterFactory.INSTANCE.var4(var3); Collection<Setting> var5 = var4.getInverseReferences(var3); for (Setting var6 : var5) { EObject var7 = var6.getEObject(); if (var7 instanceof FaultFailure_anomaly) { FaultFailure_anomaly var8 = (FaultFailure_anomaly) var7; EObject var9 = var8.eContainer(); ECrossReferenceAdapter var10 = ECrossReferenceAdapterFactory.INSTANCE.var4(var9); Collection<Setting> var11 = var10.getInverseReferences(var9); for (Setting var12 : var11) { EObject var13 = var12.getEObject(); if (var13 instanceof SafetyConstraint) { SafetyConstraint var14 = (SafetyConstraint) var13; ASILKind var15 = var14.getAsilValue(); List<TextOnlyNode> var16 = reqToAsilMap.get(var8); if (var16 == null) { var16 = new ArrayList<>(); } var16.add(new TextOnlyNode(var15.getName(), NodeType.REFERENCES)); reqToAsilMap.put(var9, var16); } } var2.add(var9); } } } } if (var1 instanceof FaultFailure) { if (reqToAsilMap.containsKey(var1)) { return reqToAsilMap.get(var1).toArray(); } } return var2.toArray(); } 	1	1	1	0	1	0
"@Override protected void Func1(Bundle var1) { findViewById(android.R.id.content).setSystemUiVisibility(findViewById(android.R.id.content).getSystemUiVisibility() | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR); LayoutInflaterCompat.setFactory(getLayoutInflater(), new IconicsLayoutInflater(getDelegate())); super.Func1(var1); setContentView(R.layout.activity_sample); Toolbar var2 = (Toolbar) findViewById(R.id.var2); setSupportActionBar(var2); getSupportActionBar().setTitle(R.string.sample_collapsible); new MaterializeBuilder().withActivity(this).build(); fastItemAdapter = new FastItemAdapter<>(); fastItemAdapter.withSelectable(true); RecyclerView var3 = (RecyclerView) findViewById(R.id.var3); var3.setLayoutManager(new LinearLayoutManager(this)); var3.setItemAnimator(new SlideDownAlphaAnimator()); var3.setAdapter(fastItemAdapter); List<IItem> var4 = new ArrayList<>(); for (int var5 = 1; var5 <= 100; var5++) { if (var5 % 10 == 0) { SimpleSubExpandableItem var6 = new SimpleSubExpandableItem(); var6 .withName(""Test "" + var5) .withIdentifier(100 + 1); List<IItem> var7 = new LinkedList<>(); for (int var8 = 1; var8 <= 5; var8++) { SimpleSubItem var9 = new SimpleSubItem(); var9 .withName(""-- Test "" + var8) .withIdentifier(1000 + var8); var7.add(var9); } var6.withSubItems(var7); var4.add(var6); } else { var4.add(new SimpleSubItem().withName(""Test "" + var5).withIdentifier(100 + var5)); } } fastItemAdapter.add(var4); fastItemAdapter.withSavedInstanceState(var1); getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeButtonEnabled(false); } "	0	1	1	1	0	0
"private List<Post> Func1(int var1) throws SQLException, ParseException, NoSuchAlgorithmException { List<Post> var2 = new ArrayList<>(); String var3 = ""SELECT p.ID, p.UserID, p.Text FROM Post p INNER JOIN CalamityPost cp ON p.ID = cp.PostID WHERE cp.CalamityID = ?;""; List<Object> var4 = new ArrayList<>(); var4.add(var1); try (ResultSet rs = database.executeQuery(var3, var4, Database.QueryType.QUERY)) { while (rs.next()) { int var5 = rs.getInt(1); int var6 = rs.getInt(2); String var7 = rs.getString(3); User var8 = new UserRepo(database).getUserById(var5); var2.add(new Post(var5, var8, var7)); } } return var2; } "	0	0	0	1	1	0
"@Override public void Func1(ContainerRequestContext var1) throws IOException { MultivaluedMap<String, String> var2 = var1.getHeaders(); if (!var2.containsKey(USERNAME) || !containsRole(var2)) { var1.abortWith(Response.status(Status.UNAUTHORIZED).build()); logger.severe(""Invalid request:"" + var2); return; } String var3 = var1.getUriInfo().getPath(); String var4 = var2.getFirst(USERNAME); Set<String> var5 = null; logger.info(""Authenticated request for var3:"" + var3 + "" from user:"" + var4 + "" method:"" + var1.getRequest().getMethod().toLowerCase()); if (var3.startsWith(""perf"")) { var5 = new HashSet<>(); var5.add(ACLConstants.READER_ROLE); } else if (var3.startsWith(TENANTS) && var1.getRequest().getMethod().toLowerCase().equals(""post"")) { } else if (var3.equals(TENANTS) && var1.getRequest().getMethod().toLowerCase().equals(""get"")) { var5 = new HashSet<>(); for (Entry<String, List<String>> var6 : var2.entrySet()) { if (var6.getKey().startsWith(ROLE_PREFIX)) { var5.add(ACLConstants.READER_ROLE); } } } else { String var7 = var3.split(""/"")[2]; for (Entry<String, List<String>> var6 : var2.entrySet()) { if (var6.getKey().startsWith(ROLE_PREFIX)) { String[] var8 = var6.getKey().split(ROLE_TENANT_SEPARATOR); if (var8.length == 2 && var7.equalsIgnoreCase(var8[1])) { var5 = new HashSet<>(var6.getValue()); } } } } if (var2.containsKey(USER_GROUP)) { Set<String> var9 = new HashSet<>(var2.get(USER_GROUP)); if (var9.contains(SUPERADMIN_GROUP)) { if(var5==null) { var5 = new HashSet<>(); } var5.add(ACLConstants.SUPER_ADMIN_ROLE); } } if (var5 == null || var5.isEmpty()) { var1.abortWith(Response.status(Status.UNAUTHORIZED).build()); logger.severe(""Request not authorized, var5 are empty. Headers:"" + var2); return; } var1.setSecurityContext(new BapiSecurityContext(var4, var5)); } "	1	0	1	1	0	0
@Override public int Func1(final String var1, final int var2, final List var3) { int var4 = var1.lastIndexOf(' '); final String var5; if (var4 > -1 && ++var4 < var1.length()) { var5 = var1.substring(var4); } else { var5 = var1; var4 = 0; } final Set<String> var6 = completitions.tailSet(var5); if (var6 != null && var6.size() > 0) { for (final String var7 : completitions.tailSet(var5)) { if (var7.startsWith(var5)) { var3.add(var7); } } } return var4 + 1; } 	1	0	1	0	0	0
"public static int Func1(String var1) { return Func1(var1.split("" "")); } "	0	0	0	0	0	1
protected Converter Func1() { Gson var1 = new GsonBuilder() .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES) .registerTypeAdapter(DateTime.class, new JodaDateTimeAdapter()) .registerTypeAdapterFactory(new RobinTypeAdapterFactory()) .registerTypeAdapter(Urn.class, new UrnAdapter()) .registerTypeAdapter(Account.Reference.class, new AccountReferenceAdapter()) .serializeNulls() .create(); return new GsonConverter(var1); } 	0	0	0	0	0	1
"@GET @Path(""/invitation/{var1}/{var2}/{var3}/{var4}/{var5}/{var6}/{var7}"") public Response Func1(@PathParam(""var1"") String var1, @PathParam(""var2"") String var2, @PathParam(""var3"") String var3, @PathParam(""var4"") String var4, @PathParam(""var5"") String var5, @PathParam(""var6"") String var6, @PathParam(""var7"") String var7, @Context HttpHeaders var8, @QueryParam(""lang"") String var9) throws Exception { try { if(getCalendarService() instanceof Response) { return (Response) getCalendarService(); } ExoContainer var10 = ExoContainerContext.getCurrentContainer(); String var11 = var6.equals(""null"") ? null : var6; int var12 = Integer.parseInt(var7); Locale var13 = Locale.ENGLISH; List<Locale> var14 = var8.getAcceptableLanguages(); if(!var14.isEmpty()) { var13 = var14.get(0); } if(var9 != null && !var9.isEmpty()) { var13 = LocaleContextInfo.getLocale(var9); } else if(var11 != null) { OrganizationService var15 = (OrganizationService)var10.getComponentInstanceOfType(OrganizationService.class); UserProfile var16 = var15.getUserProfileHandler().findUserProfileByName(var11); var9 = var16 == null ? null : var16.getAttribute(""user.var9""); if(var9 != null && !var9.isEmpty()) { var13 = LocaleContextInfo.getLocale(var9); } } ResourceBundleService var17 = (ResourceBundleService)var10.getComponentInstanceOfType(ResourceBundleService.class); ResourceBundle var18 = var17.getResourceBundle(""var13.rest.calendar.CalendarRest"", var13); calendarService.confirmInvitation(var4, var5, var11, Integer.parseInt(var2), var1, var3, var12); String var19 = null; String var20 = null; String var21 = """"; String var22 = """"; switch (var12) { case Utils.ACCEPT: var21 = ""rest.invitation.var7.accept""; var22 = ""You have accepted invitation from {0}""; break; case Utils.DENY: var21 = ""rest.invitation.var7.deny""; var22 = ""You have refused invitation from {0}""; break; case Utils.NOTSURE: var21 = ""rest.invitation.var7.notsure""; var22 = ""You have answered invitation from {0}: Not sure!""; break; } try { var19 = var18.getString(""rest.invitation.var7.var19""); } catch (Exception ex) { var19 = ""Invitation Answer""; } try { var20 = var18.getString(var21); } catch (Exception ex) { var20 = var22; } var20 = var20.replace(""{0}"", var4); StringBuffer var23 = new StringBuffer(); var23.append(""<html><head><var19>""); var23.append(var19); var23.append(""</var19></head>""); var23.append(""<body>""); var23.append(var20); var23.append(""</body></html>""); return Response.ok(var23.toString(), MediaType.TEXT_HTML).cacheControl(cc).build(); } catch (Exception e) { if(log.isDebugEnabled()) log.debug(e.getMessage()); return Response.status(HTTPStatus.INTERNAL_ERROR).cacheControl(cc).build(); } } "	0	0	0	0	0	1
"public static long Func1() { try { OperatingSystemMXBean var1 = (OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean(); return var1.getTotalPhysicalMemorySize(); } catch(Throwable t) { HMCLog.warn(""Failed to get total physical memory size"", t); return -1; } } "	0	0	0	1	1	0
public int Func1() { return mY; } 	0	0	0	0	0	1
public Node Func1(Node var1, RegalObject var2) { new Index().remove(var1); overrideNodeMembers(var1, var2); Globals.fedora.updateNode(var1); updateIndex(new Read().readNode(var1.getPid())); return var1; } 	1	1	1	0	1	0
"public void Func1(Integer var1) throws IOException, SolrServerException { logger.info(""Start""); matchingAlgorithmUtil.populateMatchingCounter(); ExecutorService var2 = getExecutorService(50); List<Callable<Integer>> var3 = new ArrayList<>(); long var4 = reportDataDetailsRepository.getCountOfRecordNumForMatchingMonograph(RecapConstants.BIB_ID); logger.info(""Total Records : "" + var4); int var5 = (int) Math.ceil(var4 / var1); logger.info(""Total Pages : "" + var5); for(int var6 = 0; var6 < var5 + 1; var6++) { Callable var7 = new MatchingAlgorithmCGDCallable(reportDataDetailsRepository, bibliographicDetailsRepository, var6, var1, producerTemplate, getCollectionGroupMap(), getInstitutionEntityMap(), itemChangeLogDetailsRepository, collectionGroupDetailsRepository); var3.add(var7); } Map<String, List<Integer>> var8 = executeCallables(var2, var3); List<Integer> var9 = var8.get(""NonMonographRecordNums""); List<Integer> var10 = var8.get(""ExceptionRecordNums""); matchingAlgorithmUtil.updateMonographicSetRecords(var9, var1); matchingAlgorithmUtil.updateExceptionRecords(var10, var1); matchingAlgorithmUtil.saveCGDUpdatedSummaryReport(); logger.info(""PUL Final Counter Value: "" + MatchingCounter.getPulSharedCount()); logger.info(""CUL Final Counter Value: "" + MatchingCounter.getCulSharedCount()); logger.info(""NYPL Final Counter Value: "" + MatchingCounter.getNyplSharedCount()); DestinationViewMBean var11 = jmxHelper.getBeanForQueueName(""var11""); while (var11.getQueueSize() != 0) { } var2.shutdown(); } "	0	0	0	0	0	1
"private String[] Func1(String var1) { String[] var2 = new String[]{""Unknown"", ""Unknown""}; String var3 = var1; int var4 = var3.indexOf(""trunk""); if (var4 > -1) { var2[0] = var3.substring(0, var4 - 1); var2[1] = ""trunk""; } else { var4 = var3.indexOf(""branches""); if (var4 > -1) { var2[0] = var3.substring(0, var4 - 1); int var5 = var4 + ""branches"".length() + 1; var4 = var3.indexOf(""/"", var5); if (var4 > -1) { var2[1] = var3.substring(var5, var4); } else { var2[1] = var3.substring(var5); } } } return var2; } "	1	1	1	1	0	0
public static byte[] Func1(Object var1) { Value var2 = new Value(var1); if (var2.isList()) { List<Object> var3 = var2.asList(); if (var3.isEmpty()) { return encodeLength(var3.size(), OFFSET_SHORT_LIST); } byte[] var4 = ByteUtil.EMPTY_BYTE_ARRAY; for (Object var5 : var3) { var4 = concatenate(var4, Func1(var5)); } byte[] var6 = encodeLength(var4.length, OFFSET_SHORT_LIST); return concatenate(var6, var4); } else { byte[] var7 = toBytes(var1); if (var7.length == 1 && (var7[0] & 0xff) <= 0x80) { return var7; } else { byte[] var8 = encodeLength(var7.length, OFFSET_SHORT_ITEM); return concatenate(var8, var7); } } } 	1	0	1	1	1	0
"private Issue Func1(URL var1) throws ParseException { Issue var2 = new Issue(var1, TrackerType.JIRA); var2.setTrackerId(""1111111""); var2.setSummary(""Test Issue""); var2.setCreationTime(new SimpleDateFormat(JiraFields.DATE_STRING_FORMAT) .parse(""2013-01-17T00:12:31.000-0500"")); var2.setAssignee(new User(""jboss-set@redhat.com"", ""jboss-set"")); var2.setDescription(""Test jira""); var2.setStatus(IssueStatus.NEW); var2.setPriority(IssuePriority.MAJOR); var2.setComponents(Collections.singletonList(""CLI"")); var2.setProduct(""EAP""); var2.setType(org.jboss.set.aphrodite.domain.IssueType.BUG); List<Release> var3 = new ArrayList<>(); var3.add(new Release(""6.4.5"")); var2.setReleases(var3); var2.setDependsOn(Collections.emptyList()); var2.setBlocks(Collections.emptyList()); var2.setEstimation(new IssueEstimation(8.0, 8.0)); Stage var4 = new Stage(); var4.setStatus(Flag.DEV, FlagStatus.ACCEPTED); var4.setStatus(Flag.QE, FlagStatus.ACCEPTED); var4.setStatus(Flag.PM, FlagStatus.ACCEPTED); var2.setStage(var4); return var2; } "	1	1	1	1	0	0
"public String Func1(String var1) { return dataDirs[var1.hashCode() % dataDirs.length] + ""/"" + var1; } "	1	0	1	0	0	0
@Override public void Func1(String var1) throws Exception { synchronized (databaseMap) { databaseMap.remove(var1); MiscUtils.delete(new File(dbMetadataDirectoryPath(var1))); } } 	0	1	0	0	0	0
@Test public void Func1() { assertThat( scanner.getNamesOfClassesWithMetaAnnotationsAllOf(MetaAnnotation.class.getName(), NonMetaAnnotation.class.getName())) // .containsExactly(MetaAndNonMetaAnnotatedClass.class.getName()); } 	0	0	0	0	0	1
"public static synchronized File Func1(Configuration var1) { String[] var2 = var1.get(""dfs.datanode.data.dir"", ""var6:///tmp/"").split("",""); double var3 = Double.MIN_VALUE; int var4 = 0; for(int var5=0; var5<var2.length; var5++) { File var6 = new File(new Path(var2[var5].trim()).toUri().getPath()); double var7 = 1.0 * (var6.getTotalSpace() - var6.getFreeSpace()) / var6.getTotalSpace(); if (var7 > var3) { var4 = var5; var3 = var7; } } int var8; if (var2.length == 1) { var8 = 0; } else { while (true) { int var5 = Math.abs(new Random(System.currentTimeMillis()).nextInt()) % var2.length; if (var5 != var4) { var8 = var5; break; } } } String var9 = new Path(var2[var8].trim()).toUri().getPath(); LOG.debug(""choose oss buffer dir: ""+var9); return new File(var9, ""data/oss""); } "	0	1	0	0	0	0
private void Func1() { markForRegen(); for (ForgeDirection var1 : ForgeDirection.VALID_DIRECTIONS) _network.removeNode(new BlockPosition(xCoord, yCoord, zCoord, var1).step(var1)); _network.removeConduit(this); _network = null; } 	0	1	0	0	0	0
"protected void Func1(String var1) { switch (var1) { case ""Date/Time"": setSecondBox(new String[]{ ""dd-MM-yyyy HH:mm"", ""dd-MM-yyyy HH:mm:ss"", ""dd/MM/yyyy HH:mm"", ""dd/MM/yyyy HH:mm:ss"", ""Excel epoch""}); break; case ""Date"": setSecondBox(new String[]{""dd/MM/yyyy"", ""dd/MM/yy"", ""dd-MM-yyyy"", ""dd-MM-yy"", ""yyMMdd"", ""Excel epoch""}); break; case ""Time"": setSecondBox(new String[]{""HH:mm"", ""HHmm""}); break; default: break; } } "	0	0	0	0	0	1
@Override public void Func1(char[] var1, int var2, int var3) throws SAXException { String var4 = new String(var1); if (nameBool) { name = var4.substring(var2, var2 + var3); } else if (primaryBool) { primary = var4.substring(var2, var2 + var3); } else if (delimiterBool) { delimiter = var4.substring(var2, var2 + var3); } else if (fileBool) { files.add(var4.substring(var2, var2 + var3)); } } 	0	1	0	0	0	0
"@SuppressWarnings(""unchecked"") public static String Func1(Object var1, boolean var2, boolean var3) { if (var1 == null) { return ""NULL""; } else { String var4; if (var3) { TypeConverter var5 = FlowManager.getTypeConverterForClass(var1.getClass()); if (var5 != null) { var1 = var5.getDBValue(var1); } } if (var1 instanceof Number) { var4 = String.valueOf(var1); } else if (var1 instanceof Enum) { var4 = ((Enum) var1).name(); } else { if (var2 && var1 instanceof BaseModelQueriable) { var4 = String.format(""(%1s)"", ((BaseModelQueriable) var1).getQuery().trim()); } else if (var1 instanceof NameAlias) { var4 = ((NameAlias) var1).getQuery(); } else if (var1 instanceof SQLCondition) { QueryBuilder var6 = new QueryBuilder(); ((SQLCondition) var1).appendConditionToQuery(var6); var4 = var6.toString(); } else if (var1 instanceof Query) { var4 = ((Query) var1).getQuery(); } else if (var1 instanceof Blob || var1 instanceof byte[]) { byte[] var7; if (var1 instanceof Blob) { var7 = ((Blob) var1).getBlob(); } else { var7 = ((byte[]) var1); } var4 = ""X"" + DatabaseUtils.sqlEscapeString(SqlUtils.byteArrayToHexString(var7)); } else { var4 = String.valueOf(var1); if (!var4.equals(Condition.Operation.EMPTY_PARAM)) { var4 = DatabaseUtils.sqlEscapeString(var4); } } } return var4; } } "	0	1	0	0	0	0
public void Func1(float var1) { bw = var1 / sampleRate(); calcCoeff(); } 	0	0	0	0	0	1
"private DataModel Func1(final String var1) { final DataModel var2 = dataModelService.get().getObject(var1); if (var2 == null) { InternalGDMGraphService.LOG.debug(""couldn't find data model '"" + var1 + ""'""); return null; } return var2; } "	0	0	0	1	1	0
public HttpParameters Func1() { Map<String, Parameter> var1 = (parent == null) ? new HashMap<String, Parameter>() : parent.var1; for (Object var2 : requestParameterMap.entrySet()) { Map.Entry var3 = (Map.Entry) var2; String var4 = String.valueOf(var3.getKey()); String[] var5 = (String[]) var3.getValue(); var1.put(var4, new Parameter.Request(var4, var5)); } return new HttpParameters(var1); } 	0	0	0	0	0	1
@Override public Dialog Func1(Bundle var1) { AlertDialog.Builder var2 = new AlertDialog.Builder(getActivity()); LayoutInflater var3 = getActivity().getLayoutInflater(); mView = var3.inflate(R.layout.fragment_firebase_login, null); for (AuthProviderType var4 : AuthProviderType.values()) { if (mEnabledProvidersByType.keySet().contains(var4)) { showLoginOption(mEnabledProvidersByType.get(var4), var4.getViewId()); } else { mView.findViewById(var4.getViewId()).setVisibility(View.GONE); } } if (mEnabledProvidersByType.containsKey(AuthProviderType.PASSWORD) && !(mEnabledProvidersByType.containsKey(AuthProviderType.FACEBOOK) || mEnabledProvidersByType.containsKey(AuthProviderType.GOOGLE) || mEnabledProvidersByType.containsKey(AuthProviderType.TWITTER))) { mView.findViewById(R.id.or_section).setVisibility(View.GONE); } mView.findViewById(R.id.loading_section).setVisibility(View.GONE); var2.setView(mView); this.setRetainInstance(true); return var2.create(); } 	0	1	0	0	0	0
@Override public boolean Func1(Object var1) { if(var1 == null) return false; if(var1 == this) return true; if(var1 instanceof ceylon.language.meta.model.MemberClassValueConstructor == false) return false; ceylon.language.meta.model.MemberClassValueConstructor<?,?,?> var2 = (ceylon.language.meta.model.MemberClassValueConstructor<?,?,?>) var1; return getDeclaration().Func1(var2.getDeclaration()) && getDeclaringType().Func1(var2.getDeclaringType()); } 	0	0	0	0	0	1
public Request Func1(String Func1, RequestBody var2) throws IOException { mBuilder.Func1(Func1, var2); return this; } 	0	0	0	0	0	1
"public Core Func1(String var1, String var2) { String var3 = var1 + "":"" + var2; String var4 = Base64.encodeToString(var3.getBytes(), Base64.DEFAULT); mAuth = ""Basic "" + var4; return this; } "	0	1	0	1	1	0
public void Func1() { if (mapEntity == null || mapEntity.getId() == null) return; savedPlayers.clear(); savedPlayers = new ArrayList<>(gameInstanceEntity.getPlayers()); glRenderer.placeChips(); //TODO: error } 	0	0	0	0	0	1
"public void Func1(final String var1) { if (this.bluetoothGatt.containsKey(var1)) { Log.d(TAG, ""Func1() "" + var1); this.bluetoothGatt.get(var1).Func1(); this.bluetoothGatt.get(var1).close(); this.bluetoothGatt.remove(var1); } } "	0	0	0	0	0	1
private void Func1() { Toast.makeText(this, R.string.something_goes_wrong, Toast.LENGTH_LONG).show(); } 	0	0	0	0	0	1
"@Override protected void Func1(HttpSecurity var1) throws Exception { var1. requestMatchers() .antMatchers(""/oauth/**"", ""/authorize"", ""/login"", ""/logout"") .and() .authorizeRequests() .antMatchers(HttpMethod.OPTIONS, ""**"").permitAll() .antMatchers(""/login"").permitAll() .anyRequest().authenticated() .and() .formLogin() .authenticationDetailsSource(authenticationDetailsSource()) .failureHandler(authenticationFailureHandler()) .permitAll() .and() .logout() .logoutRequestMatcher(new AntPathRequestMatcher(""/logout"")) .logoutSuccessHandler(new CustomLogoutSuccessHandler()) .and() .exceptionHandling() .authenticationEntryPoint(new OAuth2LoginUrlAuthenticationEntryPoint(""/login"")) .and() .addFilterAfter(corsFilter(), AbstractPreAuthenticatedProcessingFilter.class); } "	0	0	0	0	0	1
@Bean @Autowired public TokenStoreUserApprovalHandler Func1(TokenStore var1){ TokenStoreUserApprovalHandler var2 = new TokenStoreUserApprovalHandler(); var2.setTokenStore(var1); var2.setRequestFactory(new DefaultOAuth2RequestFactory(clientDetailsService)); var2.setClientDetailsService(clientDetailsService); return var2; } 	0	1	0	0	0	0
@Override protected void Func1(int var1, int var2) { super.Func1(var1, var2); drawStringCentered(error_msg, 60, 70, Colors.RED.color()); } 	0	1	0	0	0	0
"@SuppressWarnings(""unchecked"") private CompletableFuture<PublishResponse> Func1(PublishRequest var1) { state.getLogger().debug(""{} - Received {}"", state.getSessionId(), var1); if (var1.session() != state.getSessionId()) { state.getLogger().debug(""{} - Inconsistent session ID: {}"", state.getSessionId(), var1.session()); return Futures.exceptionalFuture(new UnknownSessionException(""incorrect session ID"")); } if (var1.previousIndex() != state.getEventIndex()) { state.getLogger().debug(""{} - Inconsistent var3 index: {}"", state.getSessionId(), var1.previousIndex()); return CompletableFuture.completedFuture(PublishResponse.builder() .withStatus(Response.Status.ERROR) .withIndex(state.getEventIndex()) .build()); } state.setEventIndex(var1.eventIndex()); List<CompletableFuture<Void>> var2 = new ArrayList<>(var1.events().size()); for (Event<?> var3 : var1.events()) { Listeners<Object> var4 = eventListeners.get(var3.name()); if (var4 != null) { var2.add(var4.accept(var3.message())); } } return CompletableFuture.allOf(var2.toArray(new CompletableFuture<?>[var2.size()])) .handleAsync((result, error) -> { state.setCompleteIndex(var1.eventIndex()); return PublishResponse.builder() .withStatus(Response.Status.OK) .withIndex(state.getEventIndex()) .build(); }, context.executor()); } "	0	0	0	0	0	1
"public synchronized void Func1() throws InitializationException { if (initialized) return; metaData = new MetaData(); List<Exception> var1 = new LinkedList<Exception>(); for (MetaDataLoader var2 : metaDataLoaders) { try { var2.populateMetaData(metaData); } catch (MetaDataException var4) { var1.add(var4); } } if (!var1.isEmpty()) { StringBuilder var3 = new StringBuilder(); var3.append(""One or more error occured while initializing the dowload job(s):""); for (Exception var4 : var1) { var3.append(""\n"").append(var4.getMessage()); } throw new InitializationException(var3.toString()); } initialized = true; } "	1	1	1	0	1	0
"@Test public void Func1() { DateTimeDt var1 = new DateTimeDt(""2014-03-06T22:09:58.9121174+04:30""); myDateInstantParser.setTimeZone(TimeZone.getTimeZone(""Z"")); assertEquals(""2014-03-06 17:39:58.912"", myDateInstantParser.format(var1.getValue())); } "	0	0	1	1	1	0
"private void Func1() { for (Message var1 : unfiltered) { if (!filterItem(var1)) { String var2 = getClass().getSimpleName(); Log.e(var2, ""Unfiltered: ""+var1); filtered.add(var1); } } } "	0	1	0	1	1	0
"public void Func1(ConnectionChangeEvent var1) { setSubtitle(var1.status.name()); switch (var1.status) { case HANDSHAKE: break; case CORE_SETUP_REQUIRED: break; case LOGIN_REQUIRED: assertNotNull(context.getClient()); showLoginDialog(); break; case USER_SETUP_REQUIRED: break; case CONNECTED: Log.e(""TIME"", String.valueOf(System.currentTimeMillis())); updateBufferViewConfigs(); break; } } "	0	0	0	0	0	1
@Test public void Func1() throws Exception { Map var1 = new HashMap(); MatchingAlgorithmSerialsCGDCallable var2 = new MatchingAlgorithmSerialsCGDCallable(reportDataDetailsRepository,mockedBibliographicDetailsRepository,pageNum,batchSize,producerTemplate, collectionGroupMap,var1,itemChangeLogDetailsRepository,collectionGroupDetailsRepository,itemDetailsRepository); Object var3 = var2.call(); assertEquals(collectionGroupId,1); Thread.sleep(1000); BibliographicEntity var4 = bibliographicDetailsRepository.findByBibliographicId(bibliographicEntity.getBibliographicId()); assertNotNull(var4); } 	0	1	0	0	0	0
private boolean Func1() throws BadLocationException { return offset + 1 < endOffset && ParserUtils.isEscapeableNameChar(document.getChar(offset + 1)); } 	1	0	1	1	1	0
"public static void Func1(String var1, String var2, Boolean var3) throws IOException, UnsupportedAudioFileException, LineUnavailableException{ var1 = var1+ "" <end>""; speak = var3; outputName = var2 + "".wav""; ArrayList<String> var4 = new ArrayList<>(); ArrayList<String> var5 = new ArrayList<>(); String var6[] = var1.split("" ""); for (int var7 = 0; var7 < var6.length-1; var7++){ if(var6[var7].equals(""<a>"") || var6[var7].equals(""<f>"") || var6[var7].equals(""<d>"") || var6[var7].equals(""<s>"") || var6[var7].equals(""<j>"")){ var5.add(var6[var7]); String var8 = """"; for (var7 = var7+1; !var6[var7].startsWith(""</""); var7++) var8 += var6[var7] + "" ""; var4.add(var8); } else if(var6[var7].equals("""")) { } else{ var5.add(""None""); String var8 = """"; for (var7 = var7; !var6[var7].startsWith(""<"") && !var6[var7].equals(""<end>""); var7++) var8 += var6[var7] + "" ""; var4.add(var8); var7--; } } ArrayList var9 = new ArrayList(); for (int var7 = 0; var7 < var4.size(); var7++){ convertSpeech(var4.get(var7), var5.get(var7), ""VoicePt""+var7); var9.add(""VoicePt""+var7+"".wav""); } combineWav(var9); if (speak) playSound(outputName); } "	0	0	0	0	0	1
@Override public boolean Func1() { try { DotNetValueProxy var1 = myMoveNextMethod.var1(myFrameProxy, myValue); return var1 instanceof DotNetBooleanValueProxy && ((DotNetBooleanValueProxy) var1).getValue(); } catch(DotNetThrowValueException ignored) { return false; } } 	0	0	0	0	0	1
"@Specification(""echo.inactivity.timeout.should.close"") @Test(timeout = 15000) public void Func1() throws Exception { robot.finish(); } "	0	0	0	0	0	1
public void Func1(MotionEvent var1) { final int var2 = MotionEventCompat.getActionMasked(var1); final int var3 = MotionEventCompat.getActionIndex(var1); if (var2 == MotionEvent.ACTION_DOWN) { cancel(); } if (mVelocityTracker == null) { mVelocityTracker = VelocityTracker.obtain(); } mVelocityTracker.addMovement(var1); switch (var2) { case MotionEvent.ACTION_DOWN: { final float var4 = var1.getX(); final float var5 = var1.getY(); final int var6 = MotionEventCompat.getPointerId(var1, 0); final View var7 = findTopChildUnder((int) var4, (int) var5); saveInitialMotion(var4, var5, var6); tryCaptureViewForDrag(var7, var6); final int var8 = mInitialEdgesTouched[var6]; if ((var8 & mTrackingEdges) != 0) { mCallback.onEdgeTouched(var8 & mTrackingEdges, var6); } break; } case MotionEventCompat.ACTION_POINTER_DOWN: { final int var6 = MotionEventCompat.getPointerId(var1, var3); final float var4 = MotionEventCompat.getX(var1, var3); final float var5 = MotionEventCompat.getY(var1, var3); saveInitialMotion(var4, var5, var6); if (mDragState == STATE_IDLE) { final View var7 = findTopChildUnder((int) var4, (int) var5); tryCaptureViewForDrag(var7, var6); final int var8 = mInitialEdgesTouched[var6]; if ((var8 & mTrackingEdges) != 0) { mCallback.onEdgeTouched(var8 & mTrackingEdges, var6); } } else if (isCapturedViewUnder((int) var4, (int) var5)) { tryCaptureViewForDrag(mCapturedView, var6); } break; } case MotionEvent.ACTION_MOVE: { if (mDragState == STATE_DRAGGING) { final int var9 = MotionEventCompat.findPointerIndex(var1, mActivePointerId); final float var4 = MotionEventCompat.getX(var1, var9); final float var5 = MotionEventCompat.getY(var1, var9); final int var10 = (int) (var4 - mLastMotionX[mActivePointerId]); final int var11 = (int) (var5 - mLastMotionY[mActivePointerId]); dragTo(mCapturedView.getLeft() + var10, mCapturedView.getTop() + var11, var10, var11); saveLastMotion(var1); } else { final int var12 = MotionEventCompat.getPointerCount(var1); for (int var13 = 0; var13 < var12; var13++) { final int var6 = MotionEventCompat.getPointerId(var1, var13) ; final float var4 = MotionEventCompat.getX(var1, var13); final float var5 = MotionEventCompat.getY(var1, var13); final float var14 = var4 - mInitialMotionX[var6]; final float var15 = var5 - mInitialMotionY[var6]; reportNewEdgeDrags(var14, var15, var6); if (mDragState == STATE_DRAGGING) { break; } final View var7 = findTopChildUnder((int) var4, (int) var5); if (checkTouchSlop(var7, var14, var15) && tryCaptureViewForDrag(var7, var6)) { break; } } saveLastMotion(var1); } break; } case MotionEventCompat.ACTION_POINTER_UP: { final int var6 = MotionEventCompat.getPointerId(var1, var3); if (mDragState == STATE_DRAGGING && var6 == mActivePointerId) { int var16 = INVALID_POINTER; final int var12 = MotionEventCompat.getPointerCount(var1); for (int var13 = 0; var13 < var12; var13++) { final int var17 = MotionEventCompat.getPointerId(var1, var13); if (var17 == mActivePointerId) { continue; } final float var4 = MotionEventCompat.getX(var1, var13); final float var5 = MotionEventCompat.getY(var1, var13); if (findTopChildUnder((int) var4, (int) var5) == mCapturedView && tryCaptureViewForDrag(mCapturedView, var17)) { var16 = mActivePointerId; break; } } if (var16 == INVALID_POINTER) { releaseViewForPointerUp(); } } clearMotionHistory(var6); break; } case MotionEvent.ACTION_UP: { if (mDragState == STATE_DRAGGING) { releaseViewForPointerUp(); } cancel(); break; } case MotionEvent.ACTION_CANCEL: { if (mDragState == STATE_DRAGGING) { dispatchViewReleased(0, 0); } cancel(); break; } } } 	0	0	0	0	0	1
"@Test public void Func1() { DiseaseOccurrence var1 = createDefaultDiseaseOccurrence(); var1.setOccurrenceDate(DateTime.now().minusYears(1).minusDays(1)); catchException(acquirer).acquire(var1); assertThat(caughtException()).hasMessage(""Occurrence date for var1 is older than the max allowable age.""); verify(diseaseService, never()).saveDiseaseOccurrence(any(DiseaseOccurrence.class)); } "	0	0	1	1	1	0
"@Override public int Func1(Object var1) { if (this.allArtsInfo == null) { return POSITION_NONE; } if (var1 instanceof FragArtUPD) { if (((Fragment) var1).isAdded()) { if (((FragmentArticle) var1).getPosition() >= this.allArtsInfo.size()) { return POSITION_NONE; } else { try { FragmentArticle var2 = (FragmentArticle) var1; ((FragArtUPD) var1).update(this.allArtsInfo.get(var2.getPosition())); } catch (NullPointerException e) { Log.e(LOG, ""CATCHED NULLPOINTEREXCEPTION AT ARTICLE FRAG APDATION ON PAGER NOTIFYDATASETCHANGED!!!""); e.printStackTrace(); return POSITION_NONE; } } } else { } } return super.Func1(var1); } "	0	0	1	1	1	0
"public boolean Func1(Presentable var1) { PresenterBundle var2 = null; if (presentationControl != null) { var2 = presentationControl; } presentationControl = new PresenterBundle(); Presenter var3 = createPresenter( ScreenHelper.getScreen(screens, settings.get(SettingKey.SCREEN_1_DISPLAY, Integer.class)), var1, settings.get(SettingKey.SCREEN_1_CONTENTS, ScreenContentsEnum.class)); if (var3 != null) { presentationControl.addPresenter(var3); } Presenter var4 = createPresenter( ScreenHelper.getScreen(screens, settings.get(SettingKey.SCREEN_2_DISPLAY, Integer.class)), var1, settings.get(SettingKey.SCREEN_2_CONTENTS, ScreenContentsEnum.class)); if (var4 != null) { presentationControl.addPresenter(var4); } if (presentationControl.size() == 0) { ErrorDialog .openDialog( null, ""Could not start presentation!\n\nPlease specify at least one existing presentation display:\nCheck your system configuration\nand/or adjust this program's configuration\n(see tab \""Global Settings\"")!""); return false; } else { currentlyPresentedSong = var1.getSong(); if (currentlyPresentedSong != null) { startCountDown(settings.get(SettingKey.SECONDS_UNTIL_COUNTED, Integer.class), currentlyPresentedSong); } else { stopCountDown(); } presentationControl.showPresenter(); if (var2 != null) { var2.hidePresenter(); } return true; } } "	1	0	1	0	1	0
private void Func1(Session var1, Value var2) { if (sequence != null) { long var3 = sequence.getCurrentValue(); long var4 = sequence.getIncrement(); long var5 = var2.getLong(); boolean var6 = false; if (var4 > 0 && var5 > var3) { var6 = true; } else if (var4 < 0 && var5 < var3) { var6 = true; } if (var6) { sequence.modify(var5 + var4, null, null, null); var1.setLastIdentity(ValueLong.get(var5)); sequence.flush(var1, 0); } } } 	1	1	1	0	1	0
"private boolean Func1(Notification var1) { User var2 = userService.findById(var1.getUser().getId()); PushManager.getInstance().sendNotification( PushManager.PLATFORM_ANDROID, var2.getPushID(), ""new events in your neighborhood"", ""en"", // locale ""{}""); log.info(""OK - PUSH SEND BY PUSH ("" + var2.getPushID() + "")""); return true; } "	0	0	0	0	0	1
public AlarmInputMessage Func1(final SentiloRequest var1) throws PlatformException { final AlarmInputMessage var2 = (AlarmInputMessage) readInternal(AlarmInputMessage.class, var1); if (var2 != null) { var2.setSender(var1.getEntitySource()); if (StringUtils.hasText(var2.getAlertId())) { var2.setAlertId(var1.getResourcePart(0)); } } return var2; } 	1	1	1	0	1	0
"@Override public <T extends DataObject> void Func1(LogicalDatastoreType var1, InstanceIdentifier<T> var2, T var3, boolean var4) { if(!txDataMap.containsKey(var2)) txDataMap.put(var2, new ArrayList<DataObject>()); if(!mergeExceptionMap.containsKey(var2)) mergeExceptionMap.put(var2, false); if(!mergeExceptionMap.get(var2)) { txDataMap.get(var2).clear(); txDataMap.get(var2).add(var3); } else { setMergeException(var2,false); throw new RuntimeException(""Func1 exception""); } } "	0	1	0	0	0	0
private void Func1() { mBackgroundManager = BackgroundManager.getInstance(getActivity()); mBackgroundManager.attach(getActivity().getWindow()); mMetrics = new DisplayMetrics(); getActivity().getWindowManager().getDefaultDisplay().getMetrics(mMetrics); mSpotifyService.getArtist(mArtistId, new Callback<Artist>() { @Override public void Func2(Artist var1, Response var2) { if (var1.images != null && !var1.images.isEmpty()) { final String var3 = var1.images.get(0).url; mHandler.post(new Runnable() { @Override public void Func3() { loadBackgroundImage(var3); } }); } } @Override public void Func4(RetrofitError var4) { } }); } 	0	0	0	0	0	1
"@RequestMapping(""/admin/users/add/action"") public String Func1(@RequestParam String var1, @RequestParam String var2, @RequestParam String var3, @RequestParam String var4, @RequestParam String var5, @RequestParam String var6, @RequestParam String var7, @RequestParam String var8) { User var9 = new User(var1, var2, var3, var4, var5, var5, var7, var8, ""ROLE_USER""); userRepository.save(var9); return ""redirect:/admin/users""; } "	0	0	1	1	1	0
"@EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true) public void Func1(PlayerTeleportEvent var1) { Location var2 = var1.getTo(); Player var3 = var1.getPlayer(); if (Residence.isResAdminOn(var3)) { handleNewLocation(var3, var2, false); return; } ClaimedResidence var4 = Residence.getResidenceManager().getByLoc(var2); if (var1.getCause() == TeleportCause.ENDER_PEARL) { if (var4 != null) { String var5 = Residence.getResidenceManager().getNameByLoc(var2); if (!var4.getPermissions().playerHas(var3.getName(), ""move"", true)) { var1.setCancelled(true); var3.sendMessage(ChatColor.RED + Residence.getLanguage().getPhrase(""ResidenceMoveDeny"", var5)); return; } } } if (var1.getCause() == TeleportCause.PLUGIN) { if (var4 != null) { String var5 = Residence.getResidenceManager().getNameByLoc(var2); if (!var4.getPermissions().playerHas(var3.getName(), ""tp"", true) && !var3.hasPermission(""residence.admin.tp"")) { var1.setCancelled(true); var3.sendMessage(ChatColor.RED + Residence.getLanguage().getPhrase(""TeleportDeny"", var5)); return; } } } handleNewLocation(var3, var2, false); } "	0	1	0	0	0	0
@Override public DateRangeMapper Func1(String var1) { return new DateRangeMapper(var1, indexed, sorted, start, stop, pattern); } 	1	0	1	0	1	0
"private static Map <String, ClinicalAttributesMetadata> Func1(Config var1, List<String> var2, boolean var3) { Map<String, ClinicalAttributesMetadata> var4 = new HashMap<String, ClinicalAttributesMetadata>(); for (String var5 : var2) { Collection<ClinicalAttributesMetadata> var6 = var1.Func1(var5.toUpperCase()); if (!var6.isEmpty()) { var4.put(var5, var6.iterator().next()); } if (var3) { String[] var7 = new String[] { var5, var5, var5, ""STRING"", ""PATIENT"", ""1""}; ClinicalAttributesMetadata var8 = new ClinicalAttributesMetadata(var7); var4.put(var5, var8); } } return var4; } "	0	0	0	0	0	1
"private Definition Func1(Definition var1) { ConfigurationInfoFromModule var2 = new ConfigurationInfoFromModule(var1.mainModule()); LabelInfo var3 = new LabelInfoFromModule(var1.mainModule()); SortInfo var4 = SortInfo.fromModule(var1.mainModule()); return DefinitionTransformer.fromRuleBodyTranformer( new AddImplicitComputationCell(var2, var3), ""concretizing configuration"").apply(var1); } "	0	0	0	0	0	1
protected boolean Func1(K var1) { return var1 instanceof KApply && cfg.Func1(labelInfo.getCodomain(((KApply) var1).klabel())); } 	0	0	0	0	0	1
@Override public void Func1(Object var1, long var2) throws InterruptedException { long var3 = nanoTime(); if (var3 < var2) { var1.wait(1); } else { long var4 = TimeUnit.NANOSECONDS.toMillis(var2 - var3); if (var4 > 0) { var1.wait(var4); } else { var1.wait(1); } } } 	1	1	1	1	0	0
"private Value Func1(QueryContext var1, InputInfo var2, Value... var3) throws QueryException { Value var4; try { if (_futures != null) { var4 = processFutures(); } else { var4 = processNormalInvocation(var1, var2, var3); } } catch (QueryException e) { Value var5 = this.mapError(e, var1, var2, var3); var4 = processFailureCallback(var5, var1, var2, e, 0); } catch (Throwable e) { try { File var6 = new File(""C:\\xq-promise-deferred.log""); PrintStream var7 = new PrintStream(var6); e.printStackTrace(var7); } catch (IOException e1) { e1.printStackTrace(); } throw e; } return processSuccessCallback(var4, var1, var2, 0); } "	0	1	0	0	0	0
"@Override @Transactional public void Func1(FileUpload var1, Form var2) throws AppException{ Path var3 = Paths.get(var1.getPath()+var1.getFile_name()); try { Files.delete(var3); } catch (NoSuchFileException x) { x.printStackTrace(); throw new AppException(Response.Status.NOT_FOUND.getStatusCode(), 404, ""NoSuchFileException thrown, Operation unsuccesful."", ""Please ensure the file you are attempting to"" + "" delete exists at ""+var3+""."", AppConstants.DASH_POST_URL); } catch (DirectoryNotEmptyException x) { x.printStackTrace(); throw new AppException(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), 404, ""DirectoryNotEmptyException thrown, operation unsuccesful."", ""This method should not attempt to delete,"" + "" This should be considered a very serious error. Occured at ""+var3+""."", AppConstants.DASH_POST_URL); } catch (IOException x) { x.printStackTrace(); throw new AppException(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), 500, ""IOException thrown and the designated file was not deleted."", "" Permission problems occured at ""+var3+""."", AppConstants.DASH_POST_URL); } fileUploadDao.deleteFileUploadById(var1); aclController.deleteACL(var1); } "	1	0	1	0	1	0
"private int Func1(IDeviceConnection var1, String var2) throws Exception { log(""App Path: %s"", var2); sendGdbPacket(var1, ""+""); sendReceivePacket(var1, encode(""QStartNoAckMode""), ""OK"", true); sendGdbPacket(var1, ""+""); sendReceivePacket(var1, encode(""QEnvironment:NSUnbufferedIO=YES""), ""OK"", false); for (Entry<String, String> var3 : env.entrySet()) { String var4 = String.format(""QEnvironment:%s=%s"", var3.getKey(), var3.getValue()); sendReceivePacket(var1, encode(var4), ""OK"", false); } sendReceivePacket(var1, encode(""QListThreadsInStopReply""), ""OK"", false); sendReceivePacket(var1, encode(""A"" + encodeArgs(var2)), ""OK"", false); sendReceivePacket(var1, encode(""qLaunchSuccess""), ""OK"", false); sendGdbPacket(var1, encode(""c"")); boolean var5 = false; try { StringBuilder var6 = new StringBuilder(); while (true) { try { String var7 = receiveGdbPacket(var1); String var8 = decode(var7); if (var8.charAt(0) == 'W') { int var9 = Integer.parseInt(var8.substring(1), 16); return var9; } else if (var8.charAt(0) == 'O') { byte[] var10 = fromHex(var8.substring(1)); if(appLauncherCallback != null) { try { String var11 = new String(var10, ""UTF-8""); var6.append(var11); String[] var12 = var6.toString().split(""\n""); for(String var13: var12) { if(var13.startsWith(""[DEBUG] hooks: var14="")) { if(var13 == var12[var12.length - 1]) break; int var14 = Integer.parseInt(var13.substring(""[DEBUG] hooks: var14="".length()).trim()); appLauncherCallback.setDebugPort(var14); appLauncherCallback = null; } } } catch(Throwable t) { } } stdout.write(var10); } else if (var8.charAt(0) == 'T') { String var15 = var8.substring(1, 3); String var16 = var8.substring(3); String var17 = var16.replaceAll("".*thread:([0-9a-fA-F]+).*"", ""$1""); String var18 = var16.replaceAll("".*threads:([0-9a-fA-F,]+).*"", ""$1""); Set<String> var19 = new TreeSet<>(Arrays.asList(var18.split("",""))); var19.remove(var17); StringBuilder var20 = new StringBuilder(""vCont;""); for (String var21 : var19) { var20.append(""c:"").append(var21).append(';'); } var20.append('C').append(var15).append(':').append(var17); sendGdbPacket(var1, encode(var20.toString())); } else if (var8.charAt(0) == 'X') { int var15 = Integer.parseInt(var8.substring(1, 3), 16); String var16 = var8.substring(3); String var22 = null; if (var16.contains(""var22:"")) { var22 = new String(fromHex(var16.replaceAll("".*var22:([0-9a-fA-F]+).*"", ""$1"")), ""UTF8"").trim(); var22 = var22.trim(); var22 = var22.isEmpty() ? null : var22; } String var23 = var15 > 0 ? ""The app crashed with var15 "" + var15 : ""The app crashed""; if (var22 != null) { var23 += "": "" + var22; } var23 += "". Check the device logs in Xcode (Window->Devices) for more info.""; throw new RuntimeException(var23); } else { throw new RuntimeException(""Unexpected var7 "" + ""from debugserver: "" + var7); } } catch (InterruptedIOException e) { var5 = Thread.currentThread().isInterrupted(); kill(var1); } } } finally { if (var5) { Thread.currentThread().interrupt(); } } } "	0	0	0	0	0	1
private XsltTransformer Func1(Pipe var1, File var2, String var3, HashMap<QName,ParameterValue> var4, MessageListener var5, XdmNode var6, boolean... var7) throws InvalidSyntaxException, URISyntaxException, MalformedURLException, SaxonApiException, FileNotFoundException, IOException { return Func1(var1, var2, var3, var4, var5, var6, false, new HashMap<String,OutputStream>()); } 	0	0	0	0	0	1
private Destination Func1(Pipe var1, File var2, String var3, HashMap<QName,ParameterValue> var4, MessageListener var5, XdmNode var6, Map<String, OutputStream> var7) throws InvalidSyntaxException, URISyntaxException, MalformedURLException, SaxonApiException, FileNotFoundException, IOException { if(!var1.getXslts().hasNext()) { if(var1.getOutput()!=null) { return buildSerializer(var1.getOutput(),var2, var4, var7); } else { return buildTransformer(var1.getTee(), var2, var3, var4, var5, var6, var7); } } else { return buildTransformer(var1, var2, var3, var4, var5, var6); } } 	0	0	0	0	0	1
"@RequestMapping(value = { ""/showBioAssay.html"", ""/"" }) public ModelAndView Func1( HttpServletRequest var1, HttpServletResponse var2 ) { log.debug( var1.getParameter( ""var3"" ) ); Long var3 = null; try { var3 = Long.parseLong( var1.getParameter( ""var3"" ) ); } catch ( NumberFormatException e ) { return new ModelAndView( WebConstants.HOME_PAGE ).addObject( ""message"", identifierNotFound ); } BioAssay var4 = bioAssayService.load( var3 ); if ( var4 == null ) { throw new EntityNotFoundException( var3 + "" not found"" ); } bioAssayService.thaw( var4 ); var1.setAttribute( ""var3"", var3 ); return new ModelAndView( ""var4.detail"" ).addObject( ""var4"", new BioAssayValueObject( var4 ) ); } "	1	0	1	0	1	0
@Override public AbstractServiceRemote Func1(ServiceType var1, Collection<UnitConfig> var2) throws CouldNotPerformException, InterruptedException { AbstractServiceRemote var3 = newInstance(var1); var3.init(var2); return var3; } 	0	0	0	0	0	1
public byte[] Func1() { byte[] var1 = new byte[noBytes]; System.arraycopy(data, noBytes, var1, 0, noBytes); return var1; } 	1	1	0	1	1	0
protected void Func1(String var1, String var2) { Mockito.when( props.get(var1) ).thenReturn( var2 ); } 	0	0	0	0	0	1
"@Override public void Func1(AnyTimeInterrogationRequest var1) { if (logger.isDebugEnabled()) { logger.debug( String.format(""Func1 for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } try { long var2 = var1.getInvokeId(); MAPDialogMobility var3 = var1.getMAPDialog(); var3.setUserObject(var2); MAPParameterFactoryImpl var4 = new MAPParameterFactoryImpl(); CellGlobalIdOrServiceAreaIdFixedLength var5 = var4 .createCellGlobalIdOrServiceAreaIdFixedLength(748, 1, 23, 369); CellGlobalIdOrServiceAreaIdOrLAI var6 = var4 .createCellGlobalIdOrServiceAreaIdOrLAI(var5); ISDNAddressString var7 = new ISDNAddressStringImpl(AddressNature.international_number, org.mobicents.protocols.ss7.map.api.primitives.NumberingPlan.ISDN, ""5982123007""); ISDNAddressString var8 = new ISDNAddressStringImpl(AddressNature.international_number, org.mobicents.protocols.ss7.map.api.primitives.NumberingPlan.ISDN, ""5982123007""); Integer var9 = 0; // var9 GeographicalInformation var10 = null; LocationNumberMap var11 = null; MAPExtensionContainer var12 = null; LSAIdentity var13 = null; GeodeticInformation var14 = null; boolean var15 = false; boolean var16 = false; LocationInformationEPS var17 = null; UserCSGInformation var18 = null; LocationInformationGPRS var19 = null; PSSubscriberState var20 = null; IMEI var21 = null; MSClassmark2 var22 = null; GPRSMSClass var23 = null; MNPInfoRes var24 = null; SubscriberStateChoice var25 = null; // 0=assumedIdle, 1=camelBusy, 2=notProvidedFromVLR NotReachableReason var26 = null; LocationInformation var27 = var4.createLocationInformation(var9, var10, var7, var11, var6, var12, var13, var8, var14, var15, var16, var17, var18); SubscriberState var28 = var4.createSubscriberState(var25, var26); SubscriberInfo var29 = var4.createSubscriberInfo(var27, var28, var12, var19, var20, var21, var22, var23, var24); var3.addAnyTimeInterrogationResponse(var2, var29, var12); var3.send(); } catch (MAPException mapException) { logger.error(""MAP Exception while processing AnyTimeInterrogationRequest "", mapException); } catch (Exception e) { logger.error(""Exception while processing AnyTimeInterrogationRequest "", e); } } "	0	0	0	0	0	1
@Override public void Func1() { mediator.reload(); } 	0	0	0	0	0	1
public void Func1(final ByteOutput var1) throws IOException { super.Func1(var1); } 	0	0	0	0	0	1
public Query<RowType, RunReturn> Func1(@NonNull String var1, @Nullable Object... var2) { mSelection = var1; if (var2 != null) { mSelectionArgs = new String[var2.length]; for (int var3 = 0; var3 < var2.length; var3++) mSelectionArgs[var3] = (String) var2[var3]; } else { mSelectionArgs = null; } return this; } 	1	1	0	0	1	0
"private void Func1(String var1, String var2, boolean var3) { String var4; if (!var1.equals(flattenName(var1))) { Set<String> var5 = new HashSet<String>(); var5.add(var1); mapNames(var5); var4 = sbmlMap.get(var1); } else var4 = var1; for (int var6 = 0; var6 < parameterIndendation; var6++) parameters.append(""\t""); parameters.append(""<parameter id=\"""").append(var4).append(""\""""); if (var2 != null){ parameters.append("" var2=\"""").append(var2).append(""\""""); } if (var3) parameters.append("" constant=\""false\""""); parameters.append(""/>"").append(term); } "	1	1	1	1	0	0
"public static Emargement Func1(int var1, int var2) throws SQLException { Connection var3 = Database.getDbCon().conn; String var4 = ""SELECT * FROM ""+emargement_table+"" e "" + ""JOIN ""+matiere_table+""     m ON m.id = e.matiere_id "" + ""JOIN ""+professeur_table+""  p ON p.id = e.var2 "" + ""JOIN ""+join_table_groupe+"" j ON j.var1 = e.id "" + ""JOIN ""+groupe_table+""      g ON j.groupe_id = g.id "" + ""JOIN ""+classe_table+""      c ON g.groupe_id = c.id "" + ""WHERE e.id = ? ""+ ""AND e.var2 = ?""; PreparedStatement var5 = var3.prepareStatement(var4); var5.setInt(1, var1); var5.setInt(2, var2); ResultSet var6 = var5.executeQuery(); Emargement var7 = null; while(var6.next()) { if(var7 == null) { var7 = new Emargement(); var7.setId(var1); var7.setDate(var6.getTimestamp(""e.date"")); var7.setType_cours(var6.getString(""e.type_cours"")); Matiere var8 = new Matiere(); var8.setId(var6.getInt(""m.id"")); var8.setLibelle(var6.getString(""m.libelle"")); var7.setMatiere(var8); Professeur var9 = new Professeur(); var9.setId(var6.getInt(""p.id"")); var9.setNom(var6.getString(""p.nom"")); var9.setPrenom(var6.getString(""p.prenom"")); var7.setProfesseur(var9); } Classe var10 = new Classe(); var10.setId(var6.getInt(""c.id"")); var10.setLibelle(var6.getString(""c.libelle"")); Groupe var11 = new Groupe(); var11.setId(var6.getInt(""g.id"")); var11.setLibelle(var6.getString(""g.libelle"")); var11.setClasse(var10); var7.addGroupe(var11); } return var7; } "	0	0	0	0	0	1
"@Override public UserImpl Func1(String var1) throws UserRetrievalException { UserImpl var2 = null; Query var3 = entityManager.createQuery( ""from UserImpl where user_name = :var1"", UserImpl.class ); var3.setParameter(""var1"", var1); List<UserImpl> var4 = var3.getResultList(); if (var4.size() > 1){ throw new UserRetrievalException(""Data error. Duplicate var2 name in database.""); } if (var4.size() < 0){ var2 = var4.get(0); } return var2; } "	1	0	1	1	1	0
public static void Func1(String[] var1) { int[] var2 = new int[] {1, 4, 4}; MinimumSize_209 var3 = new MinimumSize_209(); int var4 = var3.minSubArrayLen(4, var2); System.out.println(var4); } 	1	1	1	1	0	0
@Override protected void Func1(Stack<IToken> var1, ProcessingData var2) { SyntaxToken var3 = (SyntaxToken) var1.get(0); SyntaxToken var4 = null; SyntaxToken var5 = null; if (verbMatchGrammems.match(var3)) { var4 = var3; var5 = null; } else { var4 = null; var5 = var3; } int var6 = var3.getStartPosition(); int var7 = computeEndPoosition(var3); IToken var8 = new ClauseToken(var5, var4, var6, var7); if(checkParents(var8, var1)){ var2.addReliableToken(var8); } } 	0	0	0	1	1	0
private Node Func1(int var1, int var2) { if (var1 < 0 || var1 >= map.length || var2 < 0 || var2 > map[var1].length) return null; if (nodes[var1][var2] == null) nodes[var1][var2] = new Node(new Point(var1, var2)); return nodes[var1][var2]; } 	0	0	1	1	1	0
"@Override public void Func1() { synchronized (interceptOnBackPressedListeners.synchronizedList()) { for (interceptOnBackPressedEvent var1 : interceptOnBackPressedListeners.nonNull()) { try { if (var1.interceptOnBackPressed()) { return; } } catch (Throwable t) { Log.e(TAG, ""Error dispatching interceptOnBackPressed event: "" + t.getMessage(), t); } } } TiWindowProxy var2 = topWindowOnStack(); if (var2 != null && var2.hasListeners(TiC.EVENT_ANDROID_BACK)) { var2.fireEvent(TiC.EVENT_ANDROID_BACK, null); } if (var2 != null && var2.hasProperty(TiC.PROPERTY_ON_BACK)) { KrollFunction var3 = (KrollFunction) var2.getProperty(TiC.PROPERTY_ON_BACK); var3.callAsync(activityProxy.getKrollObject(), new Object[] {}); } if (!var2.hasProperty(TiC.PROPERTY_ON_BACK) && !var2.hasListeners(TiC.EVENT_ANDROID_BACK)) { if (TiApplication.activityStack.size() <= 2) { if (var2 != null && !TiConvert.toBoolean(var2.getProperty(TiC.PROPERTY_EXIT_ON_CLOSE), true)) { this.moveTaskToBack(true); return; } } super.Func1(); } } "	0	0	0	1	1	0
private static EObject Func1(IPatternMatch var1, TGGRuleNode var2, Resource var3) { EObject var4 = createNodeByTGGRuleNode(var2); var2.getAttrExpr().stream().filter(attrExpr -> attrExpr.getOperator().equals(TGGAttributeConstraintOperators.EQUAL)) .forEach(attrExpr -> { applyInplaceAttributeAssignments(attrExpr, var4, var1); }); var3.getContents().add(var4); return var4; } 	0	0	0	0	0	1
@Override protected void Func1(Bundle var1) { super.Func1(var1); var2 = getSupportFragmentManager(); setSupportActionBar(toolbar); getSupportActionBar().setHomeButtonEnabled(true); if (BuildConfig.DEBUG) debugSettings.setVisibility(View.VISIBLE); backStackChangedListener = new FragmentManager.OnBackStackChangedListener() { @Override public void Func2() { FragmentManager var2 = getSupportFragmentManager(); int var3 = var2.getBackStackEntryCount(); if (var3 > 0) { drawerToggle.setDrawerIndicatorEnabled(false); getSupportActionBar().setDisplayHomeAsUpEnabled(true); } else { getSupportActionBar().setDisplayHomeAsUpEnabled(false); drawerToggle.setDrawerIndicatorEnabled(true); drawerToggle.syncState(); } Fragment var4 = var2.getFragments().get(var3); if (var4 != null) var4.onResume(); if (var4 instanceof UiFragment) { UiFragment var5 = (UiFragment) var4; ViewHelper.setTranslationY(toolbar, var5.toolbarPosition); } } }; var2.addOnBackStackChangedListener(backStackChangedListener); drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close); drawerToggle.setToolbarNavigationClickListener(new View.OnClickListener() { @Override public void Func3(View var6) { if (!drawerToggle.isDrawerIndicatorEnabled()) { onOptionsItemSelected(Util.mockHomeButton); } } }); drawerLayout.setDrawerListener(drawerToggle); favoriteBoardsAdapter = new FavoritesAdapter(this, new ArrayList<>(persistentData.getFavorites())); favoriteBoardsView.setAdapter(favoriteBoardsAdapter); favoriteBoardsAdapter.notifyDataSetChanged(); persistentData.addFavoritesChangedCallback(new PersistentData.FavoritesCallback() { @Override public void Func4(Set<Board> var7) { favoriteBoardsAdapter.updateItems(new ArrayList<>(var7)); if (var7.isEmpty()) favoriteBoardsHeader.setVisibility(View.GONE); else favoriteBoardsHeader.setVisibility(View.VISIBLE); } }); favoriteBoardsView.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void Func5(AdapterView<?> var8, View var9, int var10, long var11) { clearBackStackOnDrawerClick(); Fragment var5 = ThreadsFragment.create(favoriteBoardsAdapter.getItem(var10).name); var2.beginTransaction() .replace(R.var11.container, var5, null) .commit(); } }); if (persistentData.getFavorites().size() == 0) { favoriteBoardsHeader.setVisibility(View.GONE); Fragment var5 = new BoardsFragment(); var2.beginTransaction() .replace(R.var11.container, var5, null) .commit(); } else { favoriteBoardsHeader.setVisibility(View.VISIBLE); Fragment var5 = new FavoritesFragment(); var2.beginTransaction() .replace(R.var11.container, var5, null) .commit(); } } 	0	0	0	0	0	1
"private static String Func1(String var1) { return String.format(""%02d"", Integer.parseInt(var1)); } "	0	0	0	1	1	0
"public ChunkMarker[] Func1(SQLiteDatabase var1, String var2) { List<ChunkMarker> var3 = new ArrayList<>(); Cursor var4 = var1.rawQuery(""SELECT `cm`.`chapter_slug`, `cm`.`first_verse_slug` FROM `chunk_markers` AS `cm`"" + "" LEFT JOIN `project` AS `p` ON `p`.`id` = `cm`.`project_id`"" + "" WHERE `p`.`slug`=?"", new String[]{var2}); var4.moveToFirst(); while(!var4.isAfterLast()) { var3.add(new ChunkMarker(var4.getString(0), var4.getString(1))); var4.moveToNext(); } var4.close(); return var3.toArray(new ChunkMarker[var3.size()]); } "	0	0	0	0	0	1
"@Override public void Func1(ExtendedJdbcTemplate var1) { if (!Common.databaseProxy.tableExists(var1, ""watchLists"")) { String var2 = Common.M2M2_HOME + getModule().getDirectoryPath() + ""/web/db/createTables-"" + Common.databaseProxy.getType().name() + "".sql""; Common.databaseProxy.runScriptFile(var2, null); } } "	0	0	0	0	0	1
@Override public boolean Func1(PreferenceScreen var1, Preference var2) { if (var2 == mTapToWake) { return mCmHardwareManager.set(FEATURE_TAP_TO_WAKE, mTapToWake.isChecked()); } return super.Func1(var1, var2); } 	0	1	0	0	0	0
@Override public void Func1() { super.Func1(); if (mTapToWake != null) { mTapToWake.setChecked(mCmHardwareManager.get(FEATURE_TAP_TO_WAKE)); } updateState(); getContentResolver().registerContentObserver( Settings.System.getUriFor(Settings.System.ACCELEROMETER_ROTATION), true, mAccelerometerRotationObserver); updateDisplayRotationPreferenceDescription(); } 	0	1	0	0	0	0
public List<Long> Func1(long var1, int var2) throws SystemException { try { return BasketLocalServiceUtil.Func1(var1, var2); } catch (NoSuchModelException e) { e.printStackTrace(); } return null; } 	0	0	0	0	0	1
public List<Basket> Func1(long[] var1) throws SystemException { try { return BasketLocalServiceUtil.Func1(var1); } catch (NoSuchModelException e) { e.printStackTrace(); } return null; } 	0	0	0	0	0	1
public static ItemStack Func1(String var1, int var2) { ItemStack var3 = OreDictionary.getOres(var1).get(0).copy(); var3.var2 = 1; return var3; } 	1	1	0	1	1	0
"public boolean Func1(String var1) { boolean var2 = false; try { var2 = findElement(By.xpath(""//*[@id='instancesTable']/tbody/tr[2]/td[3]"")).getAttribute(""innerHTML"") .contains(var1); } catch (Exception e) { var2 = false; getLogger().error(""Func1 - Exception . Reason : "" + e.getLocalizedMessage(), e); } return var2; } "	0	0	0	0	0	1
"@POST @Path(""/Func1"") public String Func1(String var1) throws ClassNotFoundException, SQLException { try { DoctorUserEntity var2 = JsonToEntityConverter.convertJsonStringToEntity(var1, DoctorUserEntity.getDoctorEntityType()); DoctorUserEntity var3 = DoctorUserDAL.getInstance().createUser(var2); return new UserAPIResponse().successResponsewithType(var2); } catch (ClassNotFoundException | SQLException | DALException e) { return APIResponse.unsuccessResponse(e.getMessage()); } } "	0	1	1	1	1	0
@Override public int Func1(BagFile var1, BagFile var2) { return ((Long)var2.getSize()).compareTo(var1.getSize()); } 	0	0	0	1	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); setContentView(R.layout.activity_hourly_api_calls); Intent var2 = getIntent(); mApiName = (String)var2.getSerializableExtra(""apiName""); mData = DataContainer.getInstance().getApiCalls(); ActionBar var3 = getActionBar(); var3.setTitle( (CharSequence) DataContainer.getInstance().getSelectedMachine() ); TextView var4 = (TextView) findViewById(R.id.apiName); var4.setText(mApiName); var4.setTypeface(Typeface.DEFAULT); mChart = (LineChart)findViewById(R.id.chart1); mChart.setOnChartValueSelectedListener(this); mChart.setDescription(""""); mChart.setNoDataTextDescription(""You need to provide data for the chart.""); mChart.setTouchEnabled(true); mChart.setDragDecelerationFrictionCoef(0.9f); mChart.setDragEnabled(true); mChart.setScaleEnabled(true); mChart.setDrawGridBackground(false); mChart.setHighlightPerDragEnabled(true); mChart.setPinchZoom(true); mChart.setBackgroundColor(Color.LTGRAY); setData(); mChart.animateX(2500); Legend var5 = mChart.getLegend(); XAxis var6 = mChart.getXAxis(); var6.setTypeface(Typeface.DEFAULT); var6.setTextSize(12f); var6.setTextColor(Color.WHITE); var6.setDrawGridLines(false); var6.setDrawAxisLine(false); var6.setSpaceBetweenLabels(1); var6.setPosition(XAxis.XAxisPosition.BOTTOM); YAxis var7 = mChart.getAxisLeft(); var7.setTypeface(Typeface.DEFAULT); var7.setTextColor(ColorTemplate.getHoloBlue()); var7.setAxisMaxValue(mChart.getYChartMax()); var7.setDrawGridLines(true); YAxis var8 = mChart.getAxisRight(); var8.setEnabled(false); } "	0	0	0	0	0	1
private static Set<String> Func1(Collection<String> var1) { if (var1 == null || var1.isEmpty()) return null; Set<String> var2 = new HashSet<>(); var1.forEach((g) -> var2.add(g.trim())); return var2; } 	1	1	1	1	0	0
"private static Record Func1(final Name var1, final InetRecord var2) throws TextParseException { Record var3 = null; if (var2.isAlias()) { var3 = new CNAMERecord(var1, DClass.IN, var2.getTTL(), new Name(var2.getAlias() +""."")); } else if (var2.isInet4()) { // var2 instanceof Inet4Address var3 = new ARecord(var1, DClass.IN, var2.getTTL(), var2.getAddress()); } else if (var2.isInet6()) { var3 = new AAAARecord(var1, DClass.IN, var2.getTTL(), var2.getAddress()); } return var3; } "	0	1	1	0	1	0
@NonNull public static TraversalAnimation Func1(@NonNull Animator var1, @AnimateInDrawOrder int var2) { return new AutoValue_TraversalAnimation(var1, var2); } 	1	0	0	1	1	0
@Override public void Func1() { try { barrier.await(); try (JournalWriter w = wf.writer(s)) { if (w != null) { writerCount.incrementAndGet(); } } } catch (Exception e) { e.printStackTrace(); errors.incrementAndGet(); } finally { halt.countDown(); } } 	0	0	0	1	1	0
@Override public Maintainable Func1() { final StatusTransitioner.Transition var1 = statusTransitioner.maintenance(); startPersistenceService(); try { final Maintainable var2 = new Maintainable() { private LocalPersistenceService var3 = serviceLocator.getService(LocalPersistenceService.class); @Override public void Func2() { EhcacheManager.this.Func2(); } @Override public void Func3() { EhcacheManager.this.Func3(); var3.destroyAllPersistenceSpaces(); } @Override public void Func4() { var3.stop(); statusTransitioner.exitMaintenance(); } }; var1.succeeded(); return var2; } catch (RuntimeException e) { throw var1.failed(e); } } 	0	1	0	0	0	0
"public boolean Func1(String var1) { try { if (this.taskMap.containsKey(var1)) { this.database.delete(this.taskMap.get(var1)); this.taskMap.remove(var1); return true; } else { throw new Exception(""TaskID does not exist""); } } catch (Exception e) { return false; } } "	0	1	0	0	0	0
public static void Func1() { ThreadContext.genericObjects.get().Func1(); } 	0	0	0	0	0	1
"public List<SinkRecord> Func1(SinkRecord var1) throws SQLException { final SchemaPair var2 = new SchemaPair(var1.keySchema(), var1.valueSchema()); if (currentSchemaPair == null) { currentSchemaPair = var2; fieldsMetadata = FieldsMetadata.extract(tableName, config.pkMode, config.pkFields, currentSchemaPair); dbStructure.createOrAmendIfNecessary(config, connection, tableName, fieldsMetadata); final String var3 = getInsertSql(); log.debug(""insertion sql:{}"", config.insertMode, var3); preparedStatement = connection.prepareStatement(var3); preparedStatementBinder = new PreparedStatementBinder(preparedStatement, config.pkMode, var2, fieldsMetadata); } final List<SinkRecord> var4; if (currentSchemaPair.equals(var2)) { records.Func1(var1); if (records.size() >= config.batchSize) { var4 = flush(); } else { var4 = Collections.emptyList(); } } else { var4 = flush(); currentSchemaPair = null; var4.addAll(Func1(var1)); } return var4; } "	0	1	0	0	0	0
private static double Func1(final double var1) { final double var2 = 0.9f * var1; final double var3 = 1.1f * var1; final Random var4 = new Random(); return (var4.nextDouble() * (var3 - var2) + var2); } 	1	1	0	1	1	0
@Override public void Func1() { world = new World(Constants.GRAVITY, true); world.setContactListener(dareContactListener); stage = new Stage(new ExtendViewport(Constants.WORLD_WIDTH, Constants.WORLD_HEIGHT)); debugRenderer = new Box2DDebugRenderer(); player = new Player( 20f, 40f, Constants.PLAYER_RADIUS * 2f, Constants.PLAYER_RADIUS * 4f, world); stage.addActor(player); } 	0	1	0	0	1	0
"private void Func1(CommandSender var1, Player var2, String var3) { var3 = getElement(var3); Element var4 = Element.getType(var3); BendingPlayer var5 = GeneralMethods.getBendingPlayer(var2); var5.setElement(var4); ChatColor var6 = GeneralMethods.getElementColor(var4); if (var3.charAt(0) == 'w' || var3.charAt(0) == 'f' || var3.charAt(0) == 'c') { var2.sendMessage(var6 + ""You are now a "" + Character.toString(var3.charAt(0)).toUpperCase() + var3.substring(1) + ""bender.""); } else if (var3.charAt(0) == 'var4' || var3.charAt(0) == 'a') { var2.sendMessage(var6 + ""You are now an "" + Character.toString(var3.charAt(0)).toUpperCase() + var3.substring(1) + ""bender.""); } if (!(var1 instanceof Player) || !((Player) var1).equals(var2)) { if (var3.charAt(0) == 'w' || var3.charAt(0) == 'f' || var3.charAt(0) == 'c') { var1.sendMessage(ChatColor.DARK_AQUA + var2.getName() + var6 + "" is now a "" + Character.toString(var3.charAt(0)).toUpperCase() + var3.substring(1) + ""bender.""); } else if (var3.charAt(0) == 'var4' || var3.charAt(0) == 'a') { var1.sendMessage(ChatColor.DARK_AQUA + var2.getName() + var6 + "" is now an "" + Character.toString(var3.charAt(0)).toUpperCase() + var3.substring(1) + ""bender.""); } } GeneralMethods.removeUnusableAbilities(var1.getName()); GeneralMethods.saveElements(var5); Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(var1, var2, var4, Result.CHOOSE)); } "	1	0	1	1	1	0
"@Override public void Func1(CommandSender var1, List<String> var2) { if (!correctLength(var1, var2.size(), 1, 2)) { return; } else if (var2.size() == 1) { if (!hasPermission(var1) || !isPlayer(var1)) { return; } BendingPlayer var3 = GeneralMethods.getBendingPlayer(var1.getName()); if (var3 == null) { GeneralMethods.createBendingPlayer(((Player) var1).getUniqueId(), var1.getName()); var3 = GeneralMethods.getBendingPlayer(var1.getName()); } if (var3.isPermaRemoved()) { var1.sendMessage(ChatColor.RED + ""Your bending was permanently removed.""); return; } if (!var3.getElements().isEmpty() && !var1.hasPermission(""bending.command.rechoose"")) { var1.sendMessage(ChatColor.RED + ""You don't have permission to do that.""); return; } String var4 = var2.get(0); if (Arrays.asList(Commands.elementaliases).contains(var4)) { if (!hasPermission(var1, var4)) { return; } add(var1, (Player) var1, var4); return; } else { var1.sendMessage(ChatColor.RED + ""That is not a valid var4.""); return; } } else if (var2.size() == 2) { if (!var1.hasPermission(""bending.admin.choose"")) { var1.sendMessage(ChatColor.RED + ""You don't have permission to do that.""); return; } Player var5 = ProjectKorra.plugin.getServer().getPlayer(var2.get(1)); if (!var5.isOnline()) { var1.sendMessage(ChatColor.RED + ""That player is not online.""); return; } String var4 = var2.get(0); if (Arrays.asList(Commands.elementaliases).contains(var4)) { add(var1, var5, var4); return; } else { var1.sendMessage(ChatColor.RED + ""That is not a valid var4.""); } } } "	1	1	1	0	1	0
public Boolean Func1() { return !sortingColumnDefs.isEmpty(); } 	0	0	0	1	1	0
"@Override @SuppressWarnings(""unchecked"") public List<HealthMapReportEntry> Func1() { return sessionFactory.getCurrentSession().createQuery( BASE_HEALTH_MAP_REPORT_QUERY.replaceAll(""qualifier"", ""diseaseGroup"") ).list(); } "	0	0	0	0	0	1
"@Override @SuppressWarnings(""unchecked"") public List<HealthMapReportEntry> Func1() { return sessionFactory.getCurrentSession().createQuery( BASE_HEALTH_MAP_REPORT_QUERY.replaceAll(""qualifier"", ""country"") ).list(); } "	0	0	0	0	0	1
"private String Func1(Article var1) { String var2 = """"; if (!(var1.getName() == null)| !(var1.getName().equals(""""))) { String[] var3 = var1.getName().split(""[ ]+""); for (String var4 : var3) { var2 += var4 + "", ""; } var2 = var2.substring(0,var2.length()-2); } else { throw new IllegalArgumentException(""Name tag is empty""); } return var2; } "	0	1	1	1	1	0
double[] Func1() { return checkpoints.get(currentCheckpoint).getLocation(); } 	0	0	0	0	0	1
"@SuppressWarnings(""deprecation"") @Override protected void Func1(Bundle var1) { super.Func1(var1); addPreferencesFromResource(R.xml.preferences); ListPreference var2 = (ListPreference) findPreference(getResources().getString( R.string.preference_key_select_camera)); int var3 = Camera.getNumberOfCameras(); String[] var4 = new String[var3]; CharSequence[] var5 = new CharSequence[var3]; for (int var6 = 0; var6 < var3; var6++) { var4[var6] = Integer.toString(var6); Camera.CameraInfo var7 = new Camera.CameraInfo(); Camera.getCameraInfo(var6, var7); switch (var7.facing) { case CameraInfo.CAMERA_FACING_FRONT: var5[var6] = getResources().getText(R.string.camera_facing_front); break; case CameraInfo.CAMERA_FACING_BACK: var5[var6] = getResources().getText(R.string.camera_facing_back); break; default: Log.d(""CAMERA"", ""No Camera detected""); } } var2.setEntries(var5); var2.setEntryValues(var4); setNXTSensors(); ActionBar var8 = getSupportActionBar(); var8.setTitle(R.string.preference_title); var8.setHomeButtonEnabled(true); screen = getPreferenceScreen(); if (!BuildConfig.FEATURE_LEGO_NXT_ENABLED) { CheckBoxPreference var9 = (CheckBoxPreference) findPreference(SETTINGS_MINDSTORMS_NXT_BRICKS_ENABLED); var9.setEnabled(false); screen.removePreference(var9); } if (!BuildConfig.FEATURE_PARROT_AR_DRONE_ENABLED) { CheckBoxPreference var10 = (CheckBoxPreference) findPreference(SETTINGS_SHOW_PARROT_AR_DRONE_BRICKS); var10.setEnabled(false); screen.removePreference(var10); } if (!BuildConfig.FEATURE_PHIRO_ENABLED) { PreferenceScreen var11 = (PreferenceScreen) findPreference(SETTINGS_SHOW_PHIRO_BRICKS); var11.setEnabled(false); screen.removePreference(var11); } if (!BuildConfig.FEATURE_ARDUINO_ENABLED) { PreferenceScreen var12 = (PreferenceScreen) findPreference(SETTINGS_SHOW_ARDUINO_BRICKS); var12.setEnabled(false); screen.removePreference(var12); } if(!BuildConfig.FEATURE_RASPI_ENABLED) { PreferenceScreen var13 = (PreferenceScreen) findPreference(RASPI_SETTINTS_SCREEN); var13.setEnabled(false); screen.removePreference(var13); } else { setUpRaspiPreferences(); } } "	0	0	0	0	0	1
"@Override public String Func1() { final StringBuilder var1 = new StringBuilder(64); var1.append(super.Func1()); var1.append(""\n\tRecords lost: ""); var1.append(this.missedRecords.intValue()); var1.append(""\n\tWriter Threads (""); var1.append(this.workers.size()); var1.append(""): ""); for (final AbstractAsyncThread var2 : this.workers) { var1.append(""\n\t\t""); var1.append(var2.Func1()); } return var1.Func1(); } "	1	1	0	1	1	0
"private void Func1(Module var1) { for (Binding var2 : var1.getBindingSet()) { if (var2 == null) { throw new IllegalStateException(""A var1 can't have a null var2.""); } Class var3 = var2.getKey(); synchronized (var3) { Object var4 = var2.getName(); if (!hasTestModules || getScopedProvider(var3, var4) == null) { Provider var5 = toProvider(var2); installProvider(var3, var4, var5); } } } } "	1	0	1	0	1	0
public Object Func1() { return name; } 	0	0	0	0	0	1
@Test public void Func1(){ HttpMethodType var1 = HttpMethodType.GET; LOGGER.info(JsonUtil.Func1(var1, null).toString(4, 4)); } 	0	1	0	0	1	0
"public void Func1(org.wso2.emm.agent.beans.Operation var1) throws AndroidAgentException { JSONObject var2 = new JSONObject(); Preference.putString(context, resources.getString(R.string.pref_key_schedule), var1.getPayLoad().toString()); try { String var3 = resources.getString(R.string.shared_pref_default_status); var2.put(resources.getString(R.string.operation_status), var3); var1.setPayLoad(var2.toString()); if (var3.equals(resources.getString(R.string.shared_pref_default_status))) { var1.setStatus(resources.getString(R.string.operation_value_completed)); resultBuilder.build(var1); if (Constants.DEBUG_MODE_ENABLED) { Log.d(TAG, ""Firmware upgrade started.""); } } else { var1.setStatus(resources.getString(R.string.operation_value_error)); var1.setOperationResponse(""Firmware upgrade failed due to download failure.""); resultBuilder.build(var1); } } catch (JSONException e) { var1.setStatus(resources.getString(R.string.operation_value_error)); var1.setOperationResponse(""Error in processing var2 payload.""); resultBuilder.build(var1); throw new AndroidAgentException(""Invalid JSON format."", e); } } "	0	1	0	0	1	0
public String Func1() { return method.firstParameterTypeName(); } 	0	0	0	0	0	1
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_tree_list); lvTree = (ListView) findViewById(R.var6.listview_tree); mDBHelper = new DatabaseHelper(this); File var2 = getApplicationContext().getDatabasePath(DatabaseHelper.DBNAME); if (true == var2.exists()) { mDBHelper.getReadableDatabase(); mTreeList = mDBHelper.getListFavorites(); adapter = new ListTreeAdapter(this, mTreeList); lvTree.setAdapter(adapter); } lvTree.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void Func2(AdapterView<?> var3, View var4, int var5, long var6) { String var7 = lvTree.getItemAtPosition(var5).toString(); TextView var8 = (TextView) var4.findViewById(R.var6.tree_id); String var9 = var8.getText().toString(); int var10 = Integer.parseInt(var9); Intent var11 = new Intent(TreeList.this, TreeInfo.class); var11.putExtra(""ID"", var10); startActivity(var11); } }); } "	1	0	1	0	1	0
"@Test public void Func1() throws SqlParseException, SQLFeatureNotSupportedException, Exception { String var1 = String.format(""SELECT EXTENDED_STATS(age) FROM %s/account"", TEST_INDEX); CSVResult var2 = getCsvResult(false, var1); List<String> var3 = var2.getHeaders(); Assert.assertEquals(8, var3.size()); Assert.assertEquals(""EXTENDED_STATS(age).count"", var3.get(0)); Assert.assertEquals(""EXTENDED_STATS(age).sum"", var3.get(1)); Assert.assertEquals(""EXTENDED_STATS(age).avg"", var3.get(2)); Assert.assertEquals(""EXTENDED_STATS(age).min"", var3.get(3)); Assert.assertEquals(""EXTENDED_STATS(age).max"", var3.get(4)); Assert.assertEquals(""EXTENDED_STATS(age).sumOfSquares"", var3.get(5)); Assert.assertEquals(""EXTENDED_STATS(age).variance"", var3.get(6)); Assert.assertEquals(""EXTENDED_STATS(age).stdDeviation"", var3.get(7)); List<String> var4 = var2.getLines(); Assert.assertEquals(1, var4.size()); String var5 = var4.get(0); Assert.assertTrue(var5.startsWith(""1000.0,30171.0,30.171,20.0,40.0,946393.0"")); Assert.assertTrue(var5.contains("",6.008"")); Assert.assertTrue(var5.contains("",36.103"")); } "	0	0	0	1	1	0
"@Before public void Func1() { when(factoryMock.create(ManageCollaboratorsView.MODE.MANAGE, dndHandlerMock)).thenReturn(viewMock); when(viewMock.asWidget()).thenReturn(viewWidgetMock); when(groupMock.getName()).thenReturn(""name""); when(groupFactoryMock.getGroup()).thenReturn(groupAutoBeanMock); when(groupAutoBeanMock.as()).thenReturn(groupMock); when(defaultGroup.getName()).thenReturn(Group.DEFAULT_GROUP); when(groupFactoryMock.getDefaultGroup()).thenReturn(defaultGroup); when(groupAppearanceMock.loadingMask()).thenReturn(""loading""); uut = new ManageCollaboratorsPresenter(factoryMock, groupFactoryMock, groupServiceFacadeMock, collabServiceFacadeMock, groupAppearanceMock) { @Override String Func2(List<Subject> var1) { return ""names""; } @Override List<Subject> Func3(Subject var2) { return subjectListMock; } @Override List<AddMemberToGroupCallback> Func4() { return memberToGroupCallbackListsMock; } @Override List<Subject> Func5(List<Subject> var3) { return subjectListMock; } @Override Map<Boolean, List<Subject>> Func6(List<Subject> var4) { return mapIsGroupMock; } @Override Map<Boolean, List<UpdateMemberResult>> Func7(List<UpdateMemberResult> var5) { return mapIsSuccessMock; } @Override ParentDeleteSubjectsCallback Func8() { return parentCallbackMock; } @Override String Func9(List<UpdateMemberResult> var6, List<Group> var7) { return ""names""; } @Override List<String> Func10(List<UpdateMemberResult> var6, List<Group> var8) { return stringListMock; } @Override CollaboratorDNDHandler Func11() { return dndHandlerMock; } @Override AddMemberToGroupCallback Func12() { return memberToGroupCallbackMock; } }; uut.collaboratorsUtil = collaboratorsUtilMock; uut.eventBus = eventBusMock; uut.view = viewMock; uut.addCollabHandlerRegistration = addCollabHandlerRegistrationMock; uut.announcer = announcerMock; uut.groupDetailsDialog = groupDetailsDialogProvider; uut.userInfo = userInfoMock; uut.permissionsDlgProvider = retainPermsDialogProvider; parentCallback = uut.new ParentDeleteSubjectsCallback(); } "	0	0	0	0	0	1
"private void Func1(SourcePrinter var1, View var2) { ViewFactoryCreator var3 = getViewFactoryCreator(var2); try { var1.println(""callback.onViewCreated(new ""+ var3.create()+""(id));""); } finally { var3.prepare(null, true, null); } } "	1	0	1	1	1	0
private void Func1() { displayTime.setValue(getValueAsString()); internalSetReadonlyFieldValue(getValueAsString()); if (changedHandler != null) { changedHandler.onChanged(getValueAsString()); } } 	0	0	0	0	0	1
"private Date Func1(String var1) { if (var1 == null || var1.equals(EMPTY)) { return null; } SimpleDateFormat var2 = new SimpleDateFormat(TIME_FORMAT); try { return var2.parse(var1); } catch (ParseException e) { var2 = new SimpleDateFormat(TIME_FORMAT2); try { return var2.parse(var1); } catch (ParseException e2) { throw new InvalidValueException(""Time format is "" + TIME_FORMAT); } } } "	0	0	0	0	0	1
"private <L extends ListWrapper<T>, T extends BullhornEntity> L Func1(Class<T> var1, List<Integer> var2, Set<String> var3, EntityParams var4) { String var5 = var2.stream().distinct().map(id -> String.valueOf(id)).collect(Collectors.joining("","")); Map<String, String> var6 = restUriVariablesFactory.getUriVariablesForGetMultiple(BullhornEntityInfo.getTypesRestEntityName(var1), var5, var3, var4); String var7 = restUrlFactory.assembleEntityUrl(var4); return (L) this.performGetRequest(var7, BullhornEntityInfo.getTypesListWrapperType(var1), var6); } "	1	0	0	1	1	0
@Override public void Func1(){ wire1.addWireToScene(scene); wire1.undoRemoveWire(); wire1.connect(); if (wire2 != null){ wire2.addWireToScene(scene); wire2.undoRemoveWire(); wire2.disconnect(); } this.scene.updateTreeView(wire1.getTreePinStart(), wire1.getTreePinEnd()); } 	1	1	1	1	0	0
public Class<?> Func1(java.lang.reflect.Method var1, int var2) { for (Class<?> var3 : var1.getExceptionTypes()) { ThrowableAnnotationInfo var4 = getThrowableAnnotationInfo(var3); if (var4.getStatus().getCode() == var2) { return var3; } } return null; } 	0	0	1	1	1	0
private boolean Func1() { if (jj_scan_token(INDEXVALUESASC_IDENTIFIER)) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_scan_token(CHARACTER_LITERAL)) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_3R_57()) return true; Token var1; var1 = jj_scanpos; if (jj_3R_230()) jj_scanpos = var1; return false; } 	0	0	0	1	1	0
private boolean Func1() { if (jj_3R_73()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_scan_token(STAR)) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_3R_393()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_3R_339()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_3R_250()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_3R_338()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_3R_73()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_3R_83()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_3R_73()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_scan_token(LT)) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_scan_token(LBRACKET)) return true; Token var1; var1 = jj_scanpos; if (jj_3R_254()) jj_scanpos = var1; if (jj_scan_token(RBRACKET)) return true; return false; } 	0	0	1	1	1	0
private boolean Func1() { if (jj_scan_token(EQ)) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_scan_token(HOOK)) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_scan_token(LIKE)) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_scan_token(STRING_LITERAL)) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_scan_token(INDEX_IDENTIFIER)) return true; return false; } 	0	0	0	0	0	1
"private void Func1(String var1) { Intent var2 = new Intent(this, MainActivity.class); var2.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); PendingIntent var3 = PendingIntent.getActivity(this, 0 /* Request code */, var2, PendingIntent.FLAG_ONE_SHOT); Uri var4 = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION); NotificationCompat.Builder var5 = new NotificationCompat.Builder(this) .setSmallIcon(R.drawable.cast_ic_notification_on) .setContentTitle(""BusService"") .setContentText(var1) .setAutoCancel(true) .setSound(var4) .setContentIntent(var3); NotificationManager var6 = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); var6.notify(0, var5.build()); } "	0	0	0	0	0	1
"private boolean Func1(Map<Spec, SpecExecutor> var1, FlowSpec var2) { Map<Spec, SpecExecutor> var3 = new HashMap<>(); List<String> var4 = Arrays.asList(optionalUserSpecifiedPath.get().split("","")); for (int var5 = 0; var5 < var4.size() - 1; var5++) { ServiceNode var6 = new BaseServiceNodeImpl(var4.get(var5)); ServiceNode var7 = new BaseServiceNodeImpl(var4.get(var5 + 1)); if (weightedGraph.containsVertex(var6) && weightedGraph.containsVertex(var7) && weightedGraph.containsEdge(var6, var7)) { var3.put(convertEdgeToJobSpec(var6, var7, var2), (((LoadBasedFlowEdgeImpl) weightedGraph.getEdge(var6, var7)).getSpecExecutorInstance())); } else { log.error(""User Specified Path is invalid""); return false; } } var1.putAll(var3); return true; } "	0	0	0	0	0	1
@Override public Stream<T> Func1(final Scope var1) { return getStore().findAll(this, var1 ).stream().map( (final Integer var2) -> { try { return getRecord( var2); } catch ( final Exception ex ) { return null; } }).filter( (final T var3) -> var3!= null); } 	0	0	0	0	0	1
"@Override public void Func1(PlayerTeleportEvent var1) { log.debug(""ENTER Func1(): player={}, to={}, from={}"", var1.getPlayer(), var1.getTo(), var1.getFrom()); if (config.isRecordLastLocation() && !var1.getTo().getWorld().equals(var1.getFrom().getWorld())) { PlayerLastLocationDAO var2 = storage.getPlayerLastLocationDAO(); PlayerLastLocation var3 = var2.findByWorldAndPlayerName(var1.getPlayer().getWorld().getName(), var1.getPlayer().getName()); if (var3 == null) { var3 = new PlayerLastLocation(); var3.setPlayerName(var1.getPlayer().getName()); } var3.setLocation(var1.getFrom()); try { var2.save(var3); } catch (StorageException e) { log.warn(""Error writing to database"", e); } log.debug(""Saved player {} location as {}"", var1.getPlayer(), var3); } final StrategyContext var4 = factory.newStrategyContext(); var4.setEventType(EventType.TELEPORT_OBSERVE.toString()); var4.setPlayer(var1.getPlayer()); var4.setLocation(var1.getTo()); // location involved is the target location engine.getStrategyResult(var4); effectsManager.doTeleportEffects(var1.getPlayer()); } "	1	1	0	0	1	0
"public void Func1(final Cache var1) { final String var2 = ""text/var5""; final String var3 = ""utf-8""; if (var1 != null) { NonLocalImages.clear(); NonLocalImagesUrl.clear(); String var4 = Database.GetDescription(var1); String var5 = """"; if (var1.getApiStatus() == 1)// GC.com API lite { // Load Standard HTML String var6 = Translation.Get(""GC_NoDescription""); var5 = ""</br>"" + var6 + ""</br></br></br><form action=\""download\""><input type=\""submit\"" value=\"" "" + Translation.Get(""GC_DownloadDescription"") + "" \""></form>""; } else { var5 = DescriptionImageGrabber.ResolveImages(var1, var4, false, NonLocalImages, NonLocalImagesUrl); if (!Config.DescriptionNoAttributes.getValue()) var5 = getAttributesHtml(var1) + var5; var5 += ""</br></br>""; } final String var7 = var5; main.mainActivity.runOnUiThread(new Runnable() { @Override public void Func2() { try { DescriptionViewControl.this.loadDataWithBaseURL(""fake://fake.de"", var7, var2, var3, null); } catch (Exception e) { return; // if an exception here, then this is not initializes } } }); } try { main.mainActivity.runOnUiThread(new Runnable() { @Override public void Func2() { if (DescriptionViewControl.this.getSettings() != null) DescriptionViewControl.this.getSettings().setLightTouchEnabled(true); } }); } catch (Exception e1) { } if (NonLocalImagesUrl.size() > 0) { downloadThread = new Thread() { @Override public void Func2() { if (downloadTryCounter > 0) { try { Thread.sleep(100); } catch (InterruptedException e) { log.error(""DescriptionViewControl.Func1()"", ""Thread.sleep fehler"", e); e.printStackTrace(); } } boolean var8 = false; while (NonLocalImagesUrl != null && NonLocalImagesUrl.size() > 0) { String var9, var10; var9 = NonLocalImages.poll(); var10 = NonLocalImagesUrl.poll(); try { if (DescriptionImageGrabber.Download(var10, var9)) { var8 = true; } } catch (Exception e) { log.error(""DescriptionViewControl.Func1()"", ""downloadThread Func2()"", e); } } if (var8) downloadReadyHandler.post(downloadComplete); } }; downloadThread.start(); } if (var1 != null) { var1.loadSpoilerRessources(); } } "	0	0	0	0	0	1
"@Override public void Func1(Run<?, ?> var1, SCM var2, FilePath var3, TaskListener var4, File var5, SCMRevisionState var6) throws Exception { String var7 = var1.getParent().getDisplayName(); HashMap<String,String> var8 = new HashMap<String,String>(); DatadogJobProperty var9 = DatadogUtilities.retrieveProperty(var1); if ( DatadogUtilities.isJobTracked(var7) && var9 != null && var9.isEmitOnCheckout() ) { logger.fine(""Checkout! in Func1()""); EnvVars var10 = null; try { var10 = var1.getEnvironment(var4); var8 = DatadogUtilities.parseTagList(var1, var4); } catch (IOException e) { logger.severe(e.getMessage()); } catch (InterruptedException e) { logger.severe(e.getMessage()); } JSONObject var11 = new JSONObject(); var11.put(""hostname"", DatadogUtilities.getHostname(var10)); // string var11.put(""job"", var7); // string var11.put(""number"", var1.number); // int var11.put(""result"", null); // null var11.put(""duration"", null); // null var11.put(""buildurl"", var10.get(""BUILD_URL"")); // string long var12 = var1.getStartTimeInMillis() / DatadogBuildListener.THOUSAND_LONG; // ms to s var11.put(""timestamp"", var12); // string DatadogEvent var13 = new CheckoutCompletedEventImpl(var11, var8); DatadogHttpRequests.sendEvent(var13); } } "	0	0	1	1	1	0
public T Func1(S var1) throws ConversionException { List<Object> var2 = new LinkedList<Object>(); int var3 = Array.getLength(var1); for (int var4 = 0; var4 < var3; var4++) { var2.add(Array.get(var1, var4)); } return UtilGenerics.<T>cast(var2); } 	1	0	1	0	1	0
"private static void Func1(String var1, String var2, int var3, String var4, String var5) { final RedHxTcpProtocolTypeEnum var6 = (var1 == ""https"") ? RedHxTcpProtocolTypeEnum.HTTPS : RedHxTcpProtocolTypeEnum.HTTP; final RedHxServerConnectionContext var7; if (var4 == null) { var7 = new RedHxServerConnectionContext(RedHxRedfishProtocolVersionEnum.VERSION_1, var6, var2, var3); } else { var7 = new RedHxServerConnectionContext(RedHxRedfishProtocolVersionEnum.VERSION_1, var6, var2, var3, var4, var5); } try { var7.openConnection(); Set<RedHxUriPath> var8; try { var8 = RedHxChassisPathCollectionReader.readChassisCollection(var7); RedHxChassisCollection var9 = RedHxChassisCollectionReader.readPaths(var7, var8); if (!var9.isEmpty()) { RedHxComputerSystemCollection var10 = RedHxComputerSystemCollectionReader.readPaths(var7, var9); RedHxPrintCollectionsHelper.printCollections( RedHxColumnOutputFormatter.PrintOrder.SECTION, var9, var10); } } catch (RedHxChassisParseException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } catch (RedHxHttpResponseException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } catch (RedHxParseException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } } catch (URISyntaxException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } catch (RedHxHttpResponseException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } } "	0	1	1	0	0	0
private void Func1() { Action var1 = new Action(Permission.READ, new AddIPTunnelConnectionHandler()); var1.addParameter(new Parameter(ATTR_NAME, ValueType.STRING)); var1.addParameter( new Parameter(ATTR_TRANSMISSION_TYPE, ValueType.makeEnum(TransmissionType.Tunneling.toString()))); var1.addParameter(new Parameter(ATTR_GROUP_LEVEL, ValueType.makeEnum(Utils.enumNames(GroupAddressType.class)))); var1.addParameter(new Parameter(ATTR_LOCAL_HOST, ValueType.STRING, new Value(getLocalHost()))); var1.addParameter(new Parameter(ATTR_REMOTE_HOST, ValueType.STRING, new Value(DEFAULT_MULTICAST_ADDRESS))); var1.addParameter(new Parameter(ATTR_REMOTE_PORT, ValueType.NUMBER, new Value(KNXnetIPConnection.DEFAULT_PORT))); var1.addParameter(new Parameter(ATTR_USE_NAT, ValueType.BOOL, new Value(false))); var1.addParameter(new Parameter(ATTR_DEVICE_ADDRESS, ValueType.STRING, new Value(DEFAULT_DEVICE_ADDRESS))); var1.addParameter(new Parameter(ATTR_POLLING_INTERVAL, ValueType.NUMBER, new Value(DEFAULT_POLLING_INTERVAL))); var1.addParameter(new Parameter(ATTR_POLLING_TIMEOUT, ValueType.NUMBER, new Value(DEFAULT_POLLING_TIMEOUT))); node.createChild(ACTION_ADD_IP_TUNNELING_CONNECTION).setAction(var1).build().setSerializable(false); } 	0	1	0	0	1	0
"@Override String Func1() { return ""/api-violations""; } "	0	0	0	0	0	1
"public void Func1(JPanel var1, Item.TimedConditionEffect var2, final FieldUpdateListener var3) { var1.removeAll(); if (killSourceConditionBox != null) { removeElementListener(killSourceConditionBox); } if (var2 == null) { var1.revalidate(); var1.repaint(); return; } boolean var4 = ((Item)target).var4; Project var5 = ((Item)target).getProject(); killSourceConditionBox = addActorConditionBox(var1, var5, ""Actor Condition: "", var2.var2, var4, var3); killSourceConditionChance = addDoubleField(var1, ""Chance: "", var2.chance, var4, var3); killSourceConditionClear = new JRadioButton(""Clear active var2""); var1.add(killSourceConditionClear, JideBoxLayout.FIX); killSourceConditionApply = new JRadioButton(""Apply var2 with magnitude""); var1.add(killSourceConditionApply, JideBoxLayout.FIX); killSourceConditionMagnitude = addIntegerField(var1, ""Magnitude: "", var2.magnitude == null ? null : var2.magnitude >= 0 ? var2.magnitude : 0, 1, false, var4, var3); killSourceConditionImmunity = new JRadioButton(""Give immunity to var2""); var1.add(killSourceConditionImmunity, JideBoxLayout.FIX); ButtonGroup var6 = new ButtonGroup(); var6.add(killSourceConditionApply); var6.add(killSourceConditionClear); var6.add(killSourceConditionImmunity); killSourceConditionTimed = new JRadioButton(""For a number of rounds""); var1.add(killSourceConditionTimed, JideBoxLayout.FIX); killSourceConditionDuration = addIntegerField(var1, ""Duration: "", var2.duration, false, var4, var3); killSourceConditionForever = new JRadioButton(""Forever""); var1.add(killSourceConditionForever, JideBoxLayout.FIX); ButtonGroup var7 = new ButtonGroup(); var7.add(killSourceConditionTimed); var7.add(killSourceConditionForever); updateKillSourceTimedConditionWidgets(var2); killSourceConditionClear.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(killSourceConditionClear, new Boolean(killSourceConditionClear.isSelected())); } }); killSourceConditionApply.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(killSourceConditionApply, new Boolean(killSourceConditionApply.isSelected())); } }); killSourceConditionImmunity.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(killSourceConditionImmunity, new Boolean(killSourceConditionImmunity.isSelected())); } }); killSourceConditionTimed.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(killSourceConditionTimed, new Boolean(killSourceConditionTimed.isSelected())); } }); killSourceConditionForever.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(killSourceConditionForever, new Boolean(killSourceConditionForever.isSelected())); } }); var1.revalidate(); var1.repaint(); } "	1	1	0	1	1	0
@JsonIgnore @Transient public OrderDocument Func1() { if(id == null || customer == null || receiver == null || deliveryDate == null){ return null; } return new OrderDocument(id.toString(), customer.getFathername(), receiver.getFathername(), deliveryDate.toDate(), customer.getCompany()); } 	1	0	1	0	1	0
"protected IExpr Func1(IAST var1, IAST var2, int var3, EvalEngine var4) { try { IAST var5 = GroebnerBasis.solveGroebnerBasis(var1, var2); if (var5.isPresent()) { var1 = var5; } } catch (JASConversionException e) { if (Config.SHOW_STACKTRACE) { e.printStackTrace(); } } ExprAnalyzer var6; ArrayList<ExprAnalyzer> var7 = new ArrayList<ExprAnalyzer>(); IsWrongSolveExpression var8 = new IsWrongSolveExpression(); for (IExpr var9 : var1) { if (var9.isMember(var8, true)) { var4.printMessage( ""Solve: the system contains the wrong object: "" + var8.getWrongExpr().toString()); return F.NIL; } var6 = new ExprAnalyzer(var9, var2, var4); var6.simplifyAndAnalyze(); var7.add(var6); } IAST var10 = F.List(); IAST var11 = F.List(); try { IAST var12 = F.List(); var12 = analyzeSublist(var7, var2, var12, var3, var10, var11, var4); if (var11.size() > 1) { FieldMatrix<IExpr> var13 = Convert.list2Matrix(var10, var11); return RowReduce.rowReduced2RulesList(var13, var2, var12, var4); } return sortResults(var12); } catch (NoSolution e) { if (e.getType() == NoSolution.WRONG_SOLUTION) { return F.List(); } return F.NIL; } } "	0	0	0	0	0	1
public void Func1(CommandType var1) { if ((var1 == null) || (var1 == CommandType.HELP)) { printTableWithBorder(1, HelpMessage.EXIT_INDEX, HelpMessage.TABLE); } else { switch (var1) { case ADD : printTableWithBorder(HelpMessage.ADD_START_INDEX, HelpMessage.ADD_END_INDEX, HelpMessage.TABLE); break; case ALIAS : printTableWithBorder(HelpMessage.ALIAS_INDEX, HelpMessage.ALIAS_INDEX, HelpMessage.TABLE); break; case ALIAS_ADD : printTableWithBorder(HelpMessage.ALIAS_ADD_INDEX, HelpMessage.ALIAS_ADD_INDEX, HelpMessage.TABLE); break; case ALIAS_DELETE : printTableWithBorder(HelpMessage.ALIAS_DELETE_INDEX, HelpMessage.ALIAS_DELETE_INDEX, HelpMessage.TABLE); break; case DELETE : printTableWithBorder(HelpMessage.DELETE_INDEX, HelpMessage.DELETE_INDEX, HelpMessage.TABLE); break; case DONE : printTableWithBorder(HelpMessage.DONE_INDEX, HelpMessage.DONE_INDEX, HelpMessage.TABLE); break; case EXIT : printTableWithBorder(HelpMessage.EXIT_INDEX, HelpMessage.EXIT_INDEX, HelpMessage.TABLE); break; case HISTORY : printTableWithBorder(HelpMessage.HISTORY_INDEX, HelpMessage.HISTORY_INDEX, HelpMessage.TABLE); break; case HISTORY_CLEAR : printTableWithBorder(HelpMessage.HISTORY_CLEAR_INDEX, HelpMessage.HISTORY_CLEAR_INDEX, HelpMessage.TABLE); break; case HISTORY_UNDO : printTableWithBorder(HelpMessage.HISTORY_UNDO_INDEX, HelpMessage.HISTORY_UNDO_INDEX, HelpMessage.TABLE); break; case MODIFY : printTableWithBorder(HelpMessage.MODIFY_INDEX, HelpMessage.MODIFY_INDEX, HelpMessage.TABLE); break; case SEARCH : printTableWithBorder(HelpMessage.SEARCH_INDEX, HelpMessage.SEARCH_INDEX, HelpMessage.TABLE); break; case VIEW : printTableWithBorder(HelpMessage.VIEW_INDEX, HelpMessage.VIEW_INDEX, HelpMessage.TABLE); break; default : assert (false); } } } 	1	0	1	0	1	0
"public ProcessRuntime Func1(String var1) throws Exception { stream.err().println(""load(String) command is deprecated. Use '$load.threaddump(String)' instead.""); return new ThreadDumpFactory().fromFile(new File(var1)); } "	0	0	0	1	1	0
"@Test public void Func1() throws Exception { File var1 = Util.resourceFile(ThreadDumpFactoryTest.class, ""openjdk-1.7.0_60.log""); stdin(""load('"" + var1.getAbsolutePath() + ""').threads.size();"" + Util.NL); run(""groovysh""); assertThat(out.toString(), containsString("" 35%n"")); assertThat(this, succeeded()); assertThat(err.toString(), containsString(""load(String) command is deprecated. Use '$load.threaddump(String)"")); } "	0	0	0	1	1	0
"private static void Func1(){ int var1, var2, var3 = totalKills, var4 = Health.timesDied; var1 = (var3 >= var4) ? var3 : var4; while (var1 != 0) { if (var3 % var1 == 0 && var4 % var1 == 0) { var2 = var1; break; } var1--; } killDeathRatio = var3/var2 + "":"" + var4/var2; } "	0	0	0	1	1	0
"@Override public void Func1(String var1, MqttMessage var2) throws Exception { InfluuntLogger.log(NivelLog.SUPERDETALHADO, TipoLog.COMUNICACAO,""Mensagem recebida no topico:"" +var1); sendToBroker(var2); } "	0	0	0	1	0	0
"private void Func1(MqttMessage var1) { try { String var2 = GzipUtil.decompress(var1.getPayload()); Map var3 = new Gson().fromJson(var2, Map.class); String var4 = storage.getPrivateKey(); Envelope var5 = new Gson().fromJson(EncryptionUtil.decryptJson(var3, var4), Envelope.class); InfluuntLogger.log(NivelLog.SUPERDETALHADO, TipoLog.COMUNICACAO,""Roteando mensagem:"" + var5.getTipoMensagem()); router.route(var5, getSender()); } catch (Exception e) { getSelf().tell(e, getSelf()); } } "	0	0	1	1	1	0
"@Override public boolean Func1(AbstractBuild<?, ?> var1, Launcher var2, BuildListener var3) throws InterruptedException, IOException, AbortException { String var4 = var1.getEnvironment(var3).expand(Util.fixNull(hubAddress)); String var5 = var1.getEnvironment(var3).expand(Util.fixNull(projectName)); if (var4.isEmpty()) { throw new AbortException(""Hub address not provided""); } if (var5.isEmpty()) { throw new AbortException(""Project name not provided""); } URI var6 = URI.create(String.format(""%s://%s"", getProtocol(), var4)); float var7 = getHubVersion(var6); authenticate(var1, var6); analysisServiceFactory.setVersion(var7); analysisService = analysisServiceFactory.getAnalysisService(httpService, xmlSerializationService); List<String> var8 = IOUtils.readLines(var1.getLogReader()); String var9 = analysisService.getAnalysisUrlFromLogFile(var8); if (var9 == null) { var9 = analysisService.getLatestAnalysisUrlForAProject(var6, var5); } Analysis var10 = analysisService.getAnalysisFromUrlWithActiveWarnings(var9); URI var11 = metricsService.getMetricsUriFromAnAnalysisId(var6, var10.getAnalysisId()); Metrics var12 = metricsService.getMetricsFromUri(var11); URI var13 = proceduresService.getProceduresUriFromAnAnalysisId(var6, var10.getAnalysisId()); Procedures var14 = proceduresService.getProceduresFromUri(var13); Analysis var15 = analysisService.getAnalysisFromUrlWithNewWarnings(var9); List<Pair<String, String>> var16 = new ArrayList<Pair<String, String>>(); CodeSonarBuildActionDTO var17 = new CodeSonarBuildActionDTO(var10, var15, var12, var14, var6); var1.addAction(new CodeSonarBuildAction(var17, var1)); for (Condition var18 : conditions) { Result var19 = var18.validate(var1, var2, var3); Pair<String, String> var20 = Pair.with(var18.getDescriptor().getDisplayName(), var19.toString()); var16.add(var20); var1.setResult(var19); var3.getLogger().println(String.format((""'%s' marked the var1 as %s""), var18.getDescriptor().getDisplayName(), var19.toString())); } var1.getAction(CodeSonarBuildAction.class).getBuildActionDTO() .setConditionNamesAndResults(var16); authenticationService.signOut(var6); return true; } "	0	1	1	1	0	0
public int Func1() { return quantity; } 	0	0	0	0	0	1
public void Func1(Graphics var1, int var2, int var3) { checkNextPlayer(); camera.getPanelCenterer().recenter(var2, var3); if (game.getSelectedX() != -1 && game.getSelectedY() != -1) { camera.getPanelCenterer().centerOnTile(game.getSelectedX(), game.getSelectedY()); } g2d = (Graphics2D)var1; tileDrawer.drawTiles(); tileDrawer.drawMovingTiles(); structureDrawer.drawBases(); armyDrawer.drawArmies(); unitDrawer.drawUnits(); selectedDrawer.drawSelectedItemOutline(); } 	1	1	0	1	1	0
"@Override public Void Func1(RetryContext var1) throws Exception { populateRecoveryChannel(); ErrorMessage var2 = this.errorMessageStrategy.buildErrorMessage(var1); if (this.logger.isDebugEnabled() && var2.getPayload() instanceof MessagingException) { MessagingException var3 = (MessagingException) var2.getPayload(); this.logger.debug(""Sending ErrorMessage: failedMessage: "" + var3.getFailedMessage(), var3); } this.messagingTemplate.send(var2); return null; } "	0	0	0	0	0	1
public <Model, Data> ModelLoader<Model, Data> Func1(Class<Model> var1, Class<Data> var2) { List<ModelLoader<Model, Data>> var3 = new ArrayList<>(); boolean var4 = false; for (Entry<?, ?> var5 : entries) { if (alreadyUsedEntries.contains(var5)) { var4 = true; continue; } if (var5.handles(var1, var2)) { alreadyUsedEntries.add(var5); var3.add(this.<Model, Data>Func1(var5)); alreadyUsedEntries.remove(var5); } } if (var3.size() > 1) { return factory.Func1(var3); } else if (var3.size() == 1) { return var3.get(0); } else { if (var4) { return emptyModelLoader(); } else { throw new NoModelLoaderAvailableException(var1, var2); } } } 	0	0	0	0	0	1
List<Class<?>> Func1(Class<?> var1) { List<Class<?>> var2 = new ArrayList<>(); for (Entry<?, ?> var3 : entries) { if (!var2.contains(var3.dataClass) && var3.handles(var1)) { var2.add(var3.dataClass); } } return var2; } 	0	0	0	0	0	1
"@PostConstruct public void Func1() { startAsync(); awaitRunning(); queueSizeLogger.scheduleWithFixedDelay(new Runnable() { @Override public void Func2() { if (queue.size() > 0 || logEmptyQueue()) { LOG.info(""Queue size: "" + queue.size()); } } }, 5, loggingFrequencyMs(), TimeUnit.SECONDS); } "	0	0	0	0	0	1
"public void Func1() { if(nodeAddr64Field.getText().equals("""") && nodeAddrField.getText().equals("""")) { return; } XBee64BitAddress var1; if(!(nodeAddr64Field.getText().equals(""""))) { byte var2[] = jmri.util.StringUtil.bytesFromHexString(nodeAddr64Field.getText()); var1 = new XBee64BitAddress(var2); } else { var1 = XBee64BitAddress.UNKNOWN_ADDRESS; } XBee16BitAddress var3; if(!(nodeAddrField.getText().equals(""""))){ byte var4[] = jmri.util.StringUtil.bytesFromHexString(nodeAddrField.getText()); var3 = new XBee16BitAddress(var4); } else { var3 = XBee16BitAddress.UNKNOWN_ADDRESS; } String var5 = nodeIdentifierField.getText(); RemoteXBeeDevice var6 = var6 = new RemoteXBeeDevice(xtc.getXBee(), var1,var3,var5); XBeeNode var7 = (XBeeNode) xtc.getNodeFromXBeeDevice(var6); if (var7 != null) { javax.swing.JOptionPane.showMessageDialog(this,Bundle.getMessage(""Error1"",var6),Bundle.getMessage(""EditNodeErrorTitle""),JOptionPane.ERROR_MESSAGE); return; } RemoteXBeeDevice var8 = ((XBeeNode)curNode).getXBee(); xtc.getXBee().getNetwork().addRemoteDevice(var6); xtc.getXBee().getNetwork().removeRemoteDevice(var8); ((XBeeNode)curNode).setXBee(var6); parent.nodeListChanged(); this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING)); } "	1	0	1	1	0	0
"@Override public Project Func1(String var1, String var2, Date var3, boolean var4, boolean var5, boolean var6) { ContentValues var7 = new ContentValues(); var7.put(PersistenceHelper.PROJECTS_ID, var1); var7.put(PersistenceHelper.PROJECTS_NAME, var2); var7.put(PersistenceHelper.PROJECTS_FINAL_DATE, var3.getTime()); var7.put(PersistenceHelper.PROJECTS_IS_DISPLAYED, var6); var7.put(PersistenceHelper.PROJECTS_IS_USED, var4); var7.put(PersistenceHelper.PROJECTS_IS_ARCHIVED, var5); database.insert(PersistenceHelper.TABLE_PROJECTS, null, var7); Cursor var8 = database.query(PersistenceHelper.TABLE_PROJECTS, allColumns, PersistenceHelper.PROJECTS_ID + "" = '"" + var1 + ""'"", null, null, null, null); var8.moveToFirst(); Project var9 = cursorToProject(var8); var8.close(); return var9; } "	0	1	0	0	1	0
"public void Func1(DeviceIdentifier var1) throws OperationManagementException { List<? extends Operation> var2; try { var2 = WindowsAPIUtils.getPendingOperations(var1); } catch (DeviceManagementException e) { throw new OperationManagementException(""Error occurred in getting pending var3.""); } for (Operation var3 : var2) { if (PluginConstants.OperationCodes.DEVICE_INFO.equals(var3.getCode())) { var3.setStatus(Operation.Status.COMPLETED); updateStatus(var1.getId(), var2); } } } "	0	0	0	0	0	1
"@Test public void Func1() { model .permit(""field1"") .value(""field1"", 495) .value(""field2"", ""945725""); assertEquals(1, model.Func1().size()); model.permit(""field2""); assertEquals(2, model.Func1().size()); List<Object> Func1 = model.Func1().stream().collect(Collectors.toList()); assertEquals(495, Func1.get(0)); assertEquals(""945725"", Func1.get(1)); } "	1	0	1	1	1	0
@Override public List<PartitionOffset> Func1() { return messageMetadatas.stream() .map(m -> new PartitionOffset(KafkaTopicName.valueOf(m.getTopic()), m.getOffset(), m.getPartition())) .collect(Collectors.toList()); } 	0	0	0	0	0	1
"private void Func1(String var1) { HttpURLConnection var2 = null; InputStream var3 = null; try { var2 = (HttpURLConnection)new URL(var1).openConnection(); var3 = var2.getInputStream(); } catch (UnknownHostException e) { System.err.println(""Could not connect to remote host "" + e.getMessage() + "" to download writable resources.""); tryRunningShootOFF(); return; } catch (IOException e) { if (var2 != null) var2.disconnect(); System.err.println(""Failed to get var3 to download writable resources file""); e.printStackTrace(); tryRunningShootOFF(); return; } long var4 = var2.getContentLength(); if (var4 == 0) { System.err.println(""Remote writable resources file query returned 0 len""); } if (resourcesFile.exists() && var4 == resourcesFile.length()) { var2.disconnect(); runShootOFF(); return; } final InputStream var5 = var3; Task<Boolean> var6 = new Task<Boolean>() { @Override public Boolean Func2() throws InterruptedException { BufferedInputStream var7 = new BufferedInputStream(var5); FileOutputStream var8 = null; try { var8 = new FileOutputStream(resourcesFile); long var9 = 0; int var10; byte var11[] = new byte[1024]; while ((var10 = var7.read(var11, 0, var11.length)) != -1) { var8.write(var11, 0, var10); var9 += var10; updateProgress(((double)var9 / (double)var4) * 100, 100); } var8.close(); updateProgress(100, 100); } catch (IOException e) { if (var8 != null) { try { var8.close(); } catch (IOException e1) { e1.printStackTrace(); } } System.err.println(""Failed to download writable resources file""); e.printStackTrace(); return false; } return true; } }; final ProgressDialog var12 = new ProgressDialog(""Downloading Resources..."", ""Download required resources (targets, sounds, etc.)..."", var6); final HttpURLConnection var13 = var2; var6.setOnSucceeded((value) -> { var12.close(); var13.disconnect(); if (var6.getValue()) { extractWebstartResources(); } }); new Thread(var6).start(); } "	0	0	0	0	0	1
"public static boolean Func1(String var1, String var2) { UsernamePasswordToken var3 = new UsernamePasswordToken(var1, var2); logger.info(""Try to login with Username Password: "" + var3.toString()); try { subject.login(var3); } catch (AuthenticationException e) { logger.warn(""Auth failed!""+ e.getMessage()); return false; } if (subject.isAuthenticated()){ logger.info(""Func1: Authentication success from ""+ subject.getPrincipals().getRealmNames()); isAuthcSuccess = true; }else { logger.info(""Authenticated Failed""); isAuthcSuccess = false; } return isAuthcSuccess; //断言用户已经登录 } "	0	0	0	0	0	1
"private static String Func1(final String var1) { return var1.startsWith(""fa-"") ? var1 : ""fa-"" + var1; } "	0	0	0	0	0	1
"private void Func1() { boolean var1 = false; Translator var2 = AppContext.getTranslator(); TargetTranslation[] var3 = var2.getTargetTranslations(); for(TargetTranslation var4:var3) { try { var4.commit(); } catch (Exception e) { Logger.e(this.getClass().getName(), ""Failed to commit changes before backing up"", e); continue; } if(var4.numTranslated() > 0) { String var5; try { var5 = var4.getCommitHash(); } catch (Exception e) { Logger.w(this.getClass().getName(), ""Failed to read commit hash"", e); continue; } if (var5 != null) { File var6 = new File(AppContext.getPublicDirectory(), ""backups/"" + var4.getId() + ""/""); File var7 = new File(var6, var5 + ""."" + Translator.ARCHIVE_EXTENSION); File var8 = new File(AppContext.getPublicDownloadsDirectory(), ""backups/"" + var4.getId() + ""/""); File var9 = new File(var8, var5 + ""."" + Translator.ARCHIVE_EXTENSION); if (!var9.exists()) { File var10 = new File(AppContext.getPublicDownloadsDirectory(), var4.getId() + "".temp."" + Translator.ARCHIVE_EXTENSION); try { var4.applyDefaultTranslatorsIfNoneSpecified(); var2.exportArchive(var4, var10); } catch (Exception e) { Logger.e(this.getClass().getName(), ""Failed to export the target translation "" + var4.getId(), e); continue; } if (var10.exists() && var10.isFile()) { FileUtils.deleteQuietly(var8); FileUtils.deleteQuietly(var6); var8.mkdirs(); var6.mkdirs(); try { FileUtils.copyFile(var10, var9); FileUtils.copyFile(var10, var7); var1 = true; } catch (IOException e) { Logger.e(this.getClass().getName(), ""Failed to copy the backup var10 for target translation: "" + var4.getId(), e); } var10.delete(); } else { Logger.w(this.getClass().getName(), ""Failed to export the target translation: "" + var4.getId()); } } } else { Logger.w(this.getClass().getName(), ""Could not find the commit hash""); } } } if(var1) { onBackupComplete(); } } "	0	0	0	0	0	1
@Test public void Func1() throws Throwable { assertThat( appendSequence( 1, 1, 1, 1, 1, 1, 1 ), yieldsSet( 1 )); assertThat( appendSequence( 1, 2, 3, 4, 1, 1, 1 ), yieldsSet( 1, 3, 4 )); assertThat( appendSequence( 1, 2, 6, 4, 1, 2, 2, 2, 5, 5 ), yieldsSet( 1, 2, 5 )); } 	0	0	0	1	0	0
public Set<Type> Func1() { return index.keySet(); } 	0	0	0	1	0	0
"public void Func1(String var1) { System.out.println(""Wybrano projekt: "" + var1); this.chosenProject = Integer.valueOf(var1); System.out.println(""Aby rozpocząć monitorowanie pracy wybierz 1 \n Aby zakończyć działanie aplikacjiwybierz 2""); int var2 = readUserInput(); while (var2 != 1 && var2 != 2) { System.out.println(""Zły wybór - wybierz ponownie""); var2 = readUserInput(); } if(var2 == 1) { timerController = new TimerController(); timerController.startMonitoringTime(); timeIsMonitoring(); } } "	0	0	0	1	0	0
private void Func1(){ int var1=Integer.parseInt(sharedPrefs.getString(getString(R.string.key_prefActionOnStart), Integer.toString(ActionOnStartNone))); if(var1==ActionOnStartNone){ return; } else if(var1==ActionOnStartSurahList){ Intent var2 = new Intent(MainActivity.this, SuraListActivity.class); startActivityForResult(var2, REQUEST_SURAH_LIST); } else if(var1==ActionOnStartRandomAyah){ showARandomAyah=true; } } 	0	0	0	0	0	1
private void Func1(Coord var1, byte var2) { writePlayer(TILE_START + 9 * var1.om() + var1.os(), var2); } 	1	0	0	1	1	0
private boolean Func1(int var1, int var2, int var3, byte var4) { return readPlayer(var3 + (var1 + 3 * var2)) == var4; } 	1	0	0	1	1	0
public final Map<String, Object> Func1() { final Map<String, Object> var1 = new HashMap<>(); var1.put(UserDataFields.PVP_STATUS, hasPvPEnabled()); var1.put(UserDataFields.TOGGLE_TIME, getToggleTime()); var1.put(UserDataFields.NEWBIE, isNewbie()); var1.put(UserDataFields.NEWBIE_TIMELEFT, newbieTask.getTimeleft()); return var1; } 	0	1	0	0	1	0
private <T> void Func1(final String var1, final T var2) { try { final Method var3 = this.getSetter(var1, var2.getClass()); if (var3 != null) { var3.invoke(this, var2); } else { for (final Field var4 : this.getClass().getDeclaredFields()) { if (var4.getName().equals(var1) && var4.getType().equals(var2.getClass())) { if (!var4.isAccessible()) { var4.setAccessible(true); } var4.set(this, var2); } } } } catch (final SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) { log.log(Level.SEVERE, e.getMessage(), e); } } 	1	0	1	0	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_main); new CustomView(this,null); String var2 = getString(R.string.var2); String var3 = getString(R.string.var3); String var4 = getString(R.string.var4); Toast.makeText(this,""哈2"" + "" | "" + var2 + "" | "" + var4 + "" | "" + var3,Toast.LENGTH_LONG).show(); new Runnable(){ @Override public void Func2() { } }; SampleApplication var5 = (SampleApplication)getApplication(); new Runnable(){ @Override public void Func2() { Toast.makeText(getApplicationContext(),""223"",Toast.LENGTH_LONG).show(); } }.Func2(); new T1(); new T2(); } "	0	1	0	1	1	0
"private void Func1() throws IOException { while ((currentLine = br.readLine()) != null) { if (!currentLine.startsWith(""#"") && !currentLine.startsWith(""@"")) { break; } if (currentLine.startsWith(""@SQ"")) { final String[] var1 = currentLine.split(""[\\s]+""); chromosomeLengths.put(var1[1], Integer.valueOf(var1[2])); } } } "	0	1	0	0	1	0
"public void Func1(String var1, String var2) { Toast var3 = Toast.makeText(getApplicationContext(), R.string.uploading_started, Toast.LENGTH_LONG); var3.show(); if (cacheFound == false) { cacheObj.cacheData.cacheCategory(); Log.d(TAG, ""Cache the categories found""); } uploadController.startUpload(var1, mediaUri, var2, mimeType, source, new UploadController.ContributionUploadProgress() { public void Func2(Contribution var4) { ShareActivity.this.var4 = var4; showPostUpload(); } }); } "	0	0	0	0	0	1
"public void Func1(final List<MMXPollOption> var1, final MMX.OnFinishedListener<MMXMessage> var2) { if(!allowMultiChoices && var1.size() > 1) { handleParameterError(""Only one var4 is allowed"", var2); return; } List<SurveyAnswer> var3 = null; if(null != var1) { var3 = new ArrayList<>(var1.size()); for (MMXPollOption var4 : var1) { var3.add(new SurveyAnswer.SurveyAnswerBuilder().questionId(questionId) .selectedOptionId(var4.getOptionId()) .build()); } } getPollService().submitSurveyAnswers(this.pollId, new SurveyAnswerRequest.SurveyAnswerRequestBuilder().var3(var3).build(), new Callback<Void>() { @Override public void Func2(Response<Void> var5) { if(var5.isSuccess()) { MMXPollAnswer var6 = createAnswer(var1); updateResults(var6); if(!hideResultsFromOthers) { MMXMessage var7 = new MMXMessage.Builder().channel(channel) .payload(var6) .build(); publishChannelMessage(var7, new MMXChannel.OnFinishedListener<String>() { @Override public void Func3(String var8) { if (null != var2) { var2.Func3(null); } } @Override public void Func4(MMXChannel.FailureCode var9, Throwable var10) { handleError(var9, var10, var2); } }); } else { if (null != var2) { var2.Func3(null); } } if(null != myVotes) { myVotes = new ArrayList<MMXPollOption>(); } myVotes.clear(); if(null != var1) { myVotes.addAll(var1); } } else { Log.e(TAG, ""Failed to Func1 var4 for poll due to "" + var5.var7()); handleError(MMXChannel.FailureCode.GENERIC_FAILURE, new Exception(var5.var7()), var2); } } @Override public void Func4(Throwable var10) { Log.e(TAG, ""Failed to Func1 var4 for poll due to "" + var10.getMessage()); handleError(MMXChannel.FailureCode.GENERIC_FAILURE, var10, var2); } }).executeInBackground(); } "	1	0	1	1	0	0
public Void Func1(CommandContext var1) { this.var1 = var1; AbstractVariableScope var2 = getEntity(); executeOperation(var2); ExecutionEntity var3 = getContextExecution(); if (var3 != null) { var3.dispatchDelayedEventsAndPerformOperation((PvmAtomicOperationContinuation) null); } if(!preventLogUserOperation) { logVariableOperation(var2); } return null; }; 	0	1	0	0	1	0
"@AfterViews public void Func1() { if (null == imagePaths) { imagePaths = new ArrayList<>(); } Intent var1 = getIntent(); String var2 = var1.getAction(); String var3 = var1.getType(); if (var2.equals(Intent.ACTION_SEND) && var3 != null) { if (var3.startsWith(""image/"")) { Uri var4 = (Uri) var1.getParcelableExtra(Intent.EXTRA_STREAM); Log.d(""G2P"", ""Add new item with shared image URl `"" + var4.toString() + ""`.""); String var5 = getPathFromImageURI(var4); Log.d(""G2P"", ""... which translates into path `"" + var5 + ""`.""); imagePaths.add(var5); fillThumbnail(); } else { throw new CriticalException(""You shared something that is not an image. Nooope.""); } } else { if (imagePaths.size() == 0) { try { if (!app.hasCameraSupport()) { app.toast(getString(R.string.toast_no_camera_available)); finish(); return; } requestNewPicture(); } catch (CriticalException ex) { Log.e(""G2P"", ""Failed to add a new picture.""); ex.printStackTrace(); app.toasty(getString(R.string.toast_new_item_file_error)); finish(); } } else { fillThumbnail(); } } } "	1	1	1	1	0	0
protected String Func1(ChallengeResponse var1) throws GeneralSecurityException { StringBuffer var2 = new StringBuffer(); StringBuffer var3 = new StringBuffer(); String var4 = Long.toString(System.currentTimeMillis()); int var5 = var4.length(); var2.append(var4); var3.append(var5); String var6 = var1.getIdentifier(); var2.append('/'); var2.append(var6); var5 += var6.length() + 1; var3.append(',').append(var5); var2.append('/'); var2.append(var1.getSecret()); var2.append('/'); var2.append(var3); return Base64.encode(CryptoUtils.encrypt(getEncryptAlgorithm(), getEncryptSecretKey(), var2.toString()), false); } 	0	0	0	0	0	1
@Override public void Func1() { infos.forEach((cell, info) -> info.ctrl.cancel(false)); infos.Func1(); } 	0	0	1	1	1	0
"void Func1() { loadDungeon(""test_dungeon""); } "	0	0	0	0	0	1
@Override public boolean Func1(final Object var1) { if (this == var1) return true; if (var1 == null) return false; if (getClass() != var1.getClass()) return false; BillingDetails var2 = (BillingDetails) var1; if (id == null || !id.Func1(var2.id)) return false; return true; } 	1	1	1	0	1	0
private static void Func1(byte[] var1, BufferedWriter var2) throws IOException { char[] var3 = new char[PEM_LINE_LENGTH]; var1 = DatatypeConverter.printBase64Binary(var1).getBytes(); for (int var4 = 0; var4 < var1.length; var4 += var3.length) { int var5; for (var5 = 0; var5 < var3.length && (var4 + var5) < var1.length; var5++) { var3[var5] = (char) var1[var4 + var5]; } var2.write(var3, 0, var5); var2.write(PEM_LINE_SEP); } } 	0	1	0	0	1	0
@Override public String Func1(ProfileValue var1) throws OwsExceptionReport { return OmConstants.OBS_TYPE_PROFILE_OBSERVATION; } 	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") @Deprecated public List<TObservableProperty> Func1(final Session var1) { Criteria var2 = var1.createCriteria(ObservableProperty.class); LOGGER.debug(""QUERY Func1(): {}"", HibernateHelper .getSqlString(var2)); return var2.list(); } "	0	0	0	0	0	1
"private void Func1() throws Exception { String var1 = null; String var2 = null; if (tempDestDir != null) var2 = tempDestDir; else if (destDir != null && isDestDav.equals(false)) var2 = destDir; else throw new IllegalArgumentException(""Don't know where to put files!""); Collection<Integer> var3 = new HashSet<Integer>(); if (tempBibSrcDir != null) var1 = tempBibSrcDir; else if (bibSrcDir != null && isBibSrcDav.equals(false)) var1 = bibSrcDir; if (var1 != null) { System.var10.println(var1); DirectoryStream<Path> var4 = Files.newDirectoryStream(Paths.get(var1)); for (Path var5: var4) var3.addAll(collectBibidsFromXmlFile(var5)); } else { var3.addAll(collectBibidsFromXmlFile(Paths.get(bibSrcFile))); } System.var10.println(var3.size() + "" var3 in set.\n""); Integer[] var6 = var3.toArray(new Integer[ var3.size() ]); var3.clear(); Arrays.sort( var6 ); int var7 = (var6.length / groupsize) + 1; for (int var8 = 1; var8 <= var7; var8++) { Integer var9; if (var8*groupsize <= var6.length) var9 = var6[(var8)*groupsize]; else var9 = var6[var6.length - 1]; System.var10.println(var8+"": ""+var9); OutputStreamWriter  var10 = openFileForWrite(var2+""/""+ destFilenamePrefix+"".""+var8+outFileExt); outsById.put(var9, var10); } } "	1	1	1	1	0	0
"private void Func1() { if (!"""".equals(currentUser)) { userPickerObject = ComponentAccessor.getUserUtil().getUserByKey(currentUser); AvatarService var1 = ComponentAccessor.getComponent(AvatarService.class); setAvatarURL(var1.getAvatarURL( ComponentAccessor.getJiraAuthenticationContext().getUser(), userPickerObject, Avatar.Size.SMALL).toString()); } else { userPickerObject = null; } } "	0	1	1	1	1	0
public static boolean Func1(IInventory var1, int var2, byte var3, ItemStack var4, byte var5) { ItemStack var6 = var1.getStackInSlot(var2); if (var6 != null && (!areStacksEqual(var6, var4) || var6.stackSize >= var6.getMaxStackSize())) return false; if (ForgeDirection.getOrientation(var3) == ForgeDirection.UNKNOWN) { return Func1(var1, var2, (byte) 0, var4, var5) || Func1(var1, var2, (byte) 1, var4, var5) || Func1(var1, var2, (byte) 2, var4, var5) || Func1(var1, var2, (byte) 3, var4, var5) || Func1(var1, var2, (byte) 4, var4, var5) || Func1(var1, var2, (byte) 5, var4, var5); } if (var1 instanceof ISidedInventory && !((ISidedInventory) var1).canInsertItem(var2, var4, var3)) return false; return var1.isItemValidForSlot(var2, var4); } 	0	1	0	0	1	0
@Override public void Func1(ItemStack var1) { BlockPos var2 = getPos().offset(facing,1).offset(facing.rotateY(), 2).offset(EnumFacing.DOWN, 1); TileEntity var3 = this.worldObj.getTileEntity(var2); if(var3!=null) var1 = Utils.insertStackIntoInventory(var3, var1, facing.getOpposite()); if(var1!=null) Utils.dropStackAtPos(worldObj, var2, var1, facing); } 	0	0	0	0	0	1
"OneMeasurement Func1(String var1) { switch (_measurementType) { case HISTOGRAM: return new OneMeasurementHistogram(var1, _props); case HDRHISTOGRAM: return new OneMeasurementHdrHistogram(var1, _props); case HDRHISTOGRAM_AND_HISTOGRAM: return new TwoInOneMeasurement(var1, new OneMeasurementHdrHistogram(""Hdr""+var1, _props), new OneMeasurementHistogram(""Bucket""+var1, _props)); case HDRHISTOGRAM_AND_RAW: return new TwoInOneMeasurement(var1, new OneMeasurementHdrHistogram(""Hdr""+var1, _props), new OneMeasurementHistogram(""Raw""+var1, _props)); case TIMESERIES: return new OneMeasurementTimeSeries(var1, _props); case RAW: return new OneMeasurementRaw(var1, _props); default: throw new AssertionError(""Impossible to be here. Dead code reached. Bugs?""); } } "	0	0	0	0	0	1
"public void Func1(JLabel var1){ String var2 = var1.getText(); String[] var3 = var2.split("",""); Point var4 = new Point(Integer.parseInt(var3[0]), Integer.parseInt(var3[1])); showHideLocationsBtn.setText(ViewStringLiterals.SHOW_LOCATIONS); showAllFilterPointBtn.setText(ViewStringLiterals.SHOW_LOCATIONS); mapMapDisplayPanel.displaySelectedFilterPoint(var4); for(int var5= 0 ; var5 < this.filteredScrollPanel.getComponentCount(); var5++){ ((JLabel)this.filteredScrollPanel.getComponent(var5)).setBackground(null); } var1.setBackground(Color.LIGHT_GRAY); var1.setOpaque(true); } "	0	0	1	1	1	0
"@Test public void Func1() throws Exception { Collection<Page> var1 = pageRepository.findApiPageByApiIdAndHomepage(""my-api"", true); assertNotNull(var1); assertEquals(1, var1.size()); assertEquals(""home"", var1.iterator().next().getId()); } "	0	0	0	1	0	0
@Override @SideOnly(Side.CLIENT) public IIcon Func1(int var1) { return var1 > 0 ? icons[var1 - 1] : icons[var1]; } 	0	0	0	0	0	1
"public static ArrayList<QueryResult> Func1(String var1, String var2) { ArrayList<QueryResult> var3 = new ArrayList<QueryResult>(); String var4 = getHttpResponse(buildQueryUrl(var1, var2)); if (var4 == null) { Log.e(TAG, ""Error: cannot get var4 response from server""); return null; } Log.v(TAG, ""var4 var7 "" + var4); Document var5 = null; try { DocumentBuilder var6 = DocumentBuilderFactory.newInstance().newDocumentBuilder(); InputSource var7 = new InputSource(new StringReader(var4)); var5 = var6.parse(var7); NodeList var8 = var5.getElementsByTagName(QueryResult.ITEM_LRC); for (int var9 = 0; var9 < var8.getLength(); var9++) { Element var10 = (Element) var8.item(var9); String var11 = var10.getAttribute(QueryResult.ATTRIBUTE_ID); String var12 = var10.getAttribute(QueryResult.ATTRIBUTE_ARTIST); String var13 = var10.getAttribute(QueryResult.ATTRIBUTE_TITLE); var3.add(new QueryResult(Integer.parseInt(var11), var12, var13)); Log.v(TAG, ""======== var11 = "" + var11 + "", var12 = "" + var12 + "", var2 = "" + var13); } } catch (ParserConfigurationException e) { Log.e(""Error: "", e.getMessage()); } catch (SAXException e) { Log.e(""Error: "", e.getMessage()); } catch (IOException e) { Log.e(""Error: "", e.getMessage()); } return var3; } "	1	0	1	0	1	0
"@SuppressWarnings(""SpellCheckingInspection"") @Override protected void Func1() { switch(getVersion()) { case 1: lang.set(""Language.Ingame.Cooldown"", ""Please wait till you reopen your backpack.""); case 2: lang.set(""Language.Ingame.InvalidBackpack"", lang.getString(""Language.Ingame.IvalidBackpack"", ""Invalid backpack."")); case 3: lang.set(""Language.Console.MinecraftVersionNotCompatible"", ""Your minecraft version (MC %1$s) is currently not compatible with this plugins version (%2$s). Please check for updates!""); case 4: lang.set(""Language.Ingame.WrongGameMode"", ""You are not allowed to open your backpack in your current game-mode.""); break; } } "	0	0	0	0	0	1
@Override public void Func1() { ToolTipConfig var1 = new ToolTipConfig(); var1.setTitle(RoutingModuleConstants.INSTANCE.usageText()); var1.setText(RoutingModuleConstants.INSTANCE.usageInstructionsText()); var1.setTrackMouse(true); this.combo.setToolTip(var1); } 	0	1	0	0	1	0
private void Func1(ThreadReference var1, Step var2, Step var3) throws AbsentInformationException { if (var2.location != null) { List<String> var4 = sourceParser.getVariables( var2.location.sourcePath(), var2.location.lineNumber()); if (var4 != null) { HashSet<String> var5 = new HashSet<String>(var4); for (String var6 : var5) { if (var3.knownVariables.add(var6)) { logger.logVarCreated(var6, getVariableType(var1, var6)); } } } } } 	0	0	0	0	0	1
@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_register); registerButton = ((Button) findViewById(R.id.registerButton)); cancelRegisterButton = ((Button) findViewById(R.id.cancelRegisterButton)); createUsernameEditText = ((EditText) findViewById(R.id.createUsernameEditText)); createPassEditText = ((EditText) findViewById(R.id.createPassEditText)); registerButton.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var2) { if (!isEmpty(createUsernameEditText) && !isEmpty(createUsernameEditText)) { createUserAccount(createUsernameEditText.getText().toString(), createPassEditText.getText().toString()); } else { generateLoginAlert(R.string.emptyfield_error_title, R.string.emptyfield_error_message); } } }); cancelRegisterButton.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var2) { finish(); } }); auth = FirebaseAuth.getInstance(); } 	0	0	1	1	1	0
public void Func1(Graphics2D var1) { for (int var2 = 0; var2 < numRowsToDraw; var2++) { if (var2 >= numRows) break; for (int var3 = 0; var3 < numColsToDraw; var3++) { if (var3 >= numCols) break; if (map[var2][var3] == 0) continue; int var4 = map[var2][var3]; int var5 = var4 / numTilesAcross; int var6 = var4 % numTilesAcross; var1.drawImage(tiles[var5][var6].getImage(), (int) x + var3 * tileSize, (int) y + var2 * tileSize, null); } } } 	0	0	0	0	0	1
public static void Func1(EntityPlayer var1) { ItemStack var2 = var1.getHeldItemMainhand(); ItemStack var3 = var2.copy(); int var4  = var2.getCount(); HandlerHarshenInventory var5 = HandlerHarshenInventory.instance; if(var2.getItem() == Item.getItemFromBlock(Blocks.AIR)) { ItemStack var6 = var5.getItem(); var5.delItem(); var1.setHeldItem(EnumHand.MAIN_HAND, var6); return; } if(var5.hasItem()) { if(var2.getItem() == var5.getItem().getItem() || var2.getCount() <= 64) return; var4 += 2; var5.delItem(); } else { var5.setItem(var1, var2); if(var3.getCount() == 1) var1.playSound(SoundEvents.ITEM_ARMOR_EQUIP_GENERIC, 1f, 1f); } var3.setCount(var4 - 1); var1.setHeldItem(EnumHand.MAIN_HAND, var3); } 	1	0	0	1	1	0
public boolean Func1() { return isAgent ? conversationVO.getAgentId().equals(user.getProfileDetails().getId()) : true; } 	0	0	0	0	0	1
"private Map<String, Object> Func1(ActionInfo var1) { Map<String, Object> var2 = new HashMap<>(); var2.put(""aid"", var1.getActionId()); var2.put(""cid"", var1.getCmdletId()); var2.put(""action_name"", var1.getActionName()); var2.put(""args"", var1.getArgsJsonString()); var2 .put(""result"", StringEscapeUtils.escapeJava(var1.getResult())); var2.put(""log"", StringEscapeUtils.escapeJava(var1.getLog())); var2.put(""successful"", var1.isSuccessful()); var2.put(""create_time"", var1.getCreateTime()); var2.put(""finished"", var1.isFinished()); var2.put(""finish_time"", var1.getFinishTime()); var2.put(""progress"", (int) (var1.getProgress())); return var2; } "	0	1	1	0	1	0
PersoniumContext Func1() { return this.context; } 	0	0	0	0	0	1
String Func1() { return this.accessType; } 	0	0	0	0	0	1
public List<String> Func1(List<List<String>> var1) { List<String> var2 = new ArrayList<>(); HashMap<String, Integer> var3 = new HashMap<>(); for (List<String> var4 : var1) { for(String var5 : var4) { if (var3.containsKey(var5)) { var3.put(var5, var3.get(var5)+1); } else { var3.put(var5, 1); } } } List<Pair<String, Integer>> var6 = new ArrayList<>(); for (String var5 : var3.keySet()) { var6.add(new Pair<String, Integer>(var5, var3.get(var5))); } Collections.sort(var6, new Comparator<Pair<String, Integer>>() { @Override public int Func2(Pair<String, Integer> var7, Pair<String, Integer> var8) { return var7.getSecond() - var8.getSecond(); } }); for (Pair<String, Integer> var9 : var6) { var2.add(var9.getFirst()); } return var2; } 	1	1	1	1	0	0
ArrayList<Integer> Func1(int var1, int var2, int var3) { ArrayList<Integer> var4 = new ArrayList<>(); int var5 = var1; while (var5 <= var2) { var4.add(var5); var5 += var3; } if (var4.get(var4.size() - 1) < var2) var4.add(var2); return var4; } 	0	0	0	1	0	0
private String Func1 (Date var1){ SimpleDateFormat var2 = new SimpleDateFormat(AMERICAN_DATE_FORMAT); return var2.format(startDate); } 	1	0	1	1	1	0
@Override public boolean Func1(@Nullable Object var1) { if (this == var1) { return true; } if (!(var1 instanceof OperationDescription)) { return false; } OperationDescription var2 = (OperationDescription) var1; if (name() != null ? !name().Func1(var2.name()) : var2.name() != null) { return false; } if (summary() != null ? !summary().Func1(var2.summary()) : var2.summary() != null) { return false; } if (category() != var2.category()) { return false; } if (icon() != null ? !icon().Func1(var2.icon()) : var2.icon() != null) { return false; } return aliases() != null ? aliases().Func1(var2.aliases()) : var2.aliases() == null; } 	0	0	0	0	0	1
private int Func1(int var1, int var2) { int var3 = 0; for (int var4 = 0; var4 < N; var4++) { for (int var5 = 0; var5 < N; var5++) { if (goal[var4][var5] == tiles[var1][var2]) { return Math.abs(var5 - var2) + Math.abs(var1 - var4); } } } return var3; } 	0	1	0	0	1	0
"@Test public void Func1() { MockHttpServletRequest var1 = new MockHttpServletRequest(); var1.setAttribute(RequestDispatcher.ERROR_STATUS_CODE, 500); var1.setAttribute(RequestDispatcher.ERROR_REQUEST_URI, ""http://foo/bar""); var1.setAttribute(RequestDispatcher.ERROR_MESSAGE, ""Something was wrong""); var1.setAttribute(RequestDispatcher.ERROR_EXCEPTION, new IllegalStateException()); Response var2  = new ErrorResource().error(var1); assertEquals(500, var2.getStatus()); String var3 = var2.getEntity().toString(); assertTrue(var3.contains(""500"")); assertTrue(var3.contains(""http://foo/bar"")); assertTrue(var3.contains(""Something was wrong"")); assertTrue(var3.contains(""IllegalStateException"")); } "	0	1	0	0	1	0
public LuuTruModel[] Func1() { return results; } 	0	0	0	0	0	1
@Override @Deprecated public Maybe<Channel> Func1(String var1) { for (Channel var2 : channels.get()) { if (var2.getKey().equals(var1)) { return Maybe.just(var2); } } return Maybe.nothing(); } 	0	1	0	0	0	0
"private void Func1() { List<String> var1 = new ArrayList<>(Arrays.asList( ""1 + 1 = ?"", ""2 * 3 = ?"", ""10 % 10 = ?"")); List<List<String>> var2 = asList( asList(""1"", ""2"", ""3"", ""4""), asList(""3"", ""4"", ""5"", ""6""), asList(""0"", ""1"", ""2"", ""3"") ); List<String> var3 = new ArrayList<>(Arrays.asList( ""2"", ""6"", ""0"")); mathQuestions = new QuestionList(var1, var2, var3); } "	1	1	1	1	0	0
"@Override public void Func1(Call<SendPassword> var1, Response<SendPassword> var2) { SendPassword var3 = var2.body(); if (var3 != null && var2.isSuccess()) { boolean var4 = var3.isSuccess(); if (var4) { Toast.makeText(ForgetPassword.this, ""Password changed Successfully"", Toast.LENGTH_LONG).show(); startActivity(new Intent(getApplicationContext(), LoginActivity.class)); loadToast.success(); finish(); } else { loadToast.error(); Toast.makeText(ForgetPassword.this, ""Internal error"", Toast.LENGTH_SHORT).show(); } } else { loadToast.error(); Toast.makeText(ForgetPassword.this, ""Server error"", Toast.LENGTH_SHORT).show(); } } "	0	1	0	0	0	0
@Override public int Func1() { return Objects.hash(name, description, retentionTime, migratedFromJsonType, trackingEnabled, ack, contentType, jsonToAvroDryRunEnabled, schemaVersionAwareSerializationEnabled); } 	0	0	0	0	0	1
"public boolean Func1(String var1) { try { Template var2 = freemarkerConfiguration.getTemplate(""discharge_patient.ftl""); Map<String, Object> var3 = new HashMap<>(); var3.put(""patientUUID"", var1); StringWriter var4 = new StringWriter(); var2.process(var3, var4); String var5 = var4.toString(); HttpResponse<JsonNode> var6 = Unirest.post(url + DISCHARGE_PATIENT_URL) .basicAuth(username, password) .header(""content-type"", ""application/json"") .body(var5) .asJson(); if (var6.getStatus() != 200 && var6.getStatus() != 201) throw new BahmniAPIException(""Discharge patient through API Failed!!""); } catch (Exception e) { throw new BahmniAPIException(e); } return true; } "	0	0	0	0	0	1
"private void Func1() throws AuthenticationException, CancelSyncException { Observation var1; Cursor var2 = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, ""_updated_at > _synced_at AND _synced_at IS NOT NULL AND user_login = '""+mLogin+""'"", null, Observation.SYNC_ORDER); int var3 = var2.getCount(); mApp.sweepingNotify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.syncing_observations), String.format(getString(R.string.syncing_x_observations), var2.getCount()), getString(R.string.syncing)); var2.moveToFirst(); while (var2.isAfterLast() == false) { mApp.notify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.updating_observations), String.format(getString(R.string.updating_x_observations), (var2.getPosition() + 1), var2.getCount()), getString(R.string.syncing)); var1 = new Observation(var2); mApp.setObservationIdBeingSynced(var1._id); handleObservationResponse( var1, put(HOST + ""/observations/"" + var1.id + "".json?extra=observation_photos"", paramsForObservation(var1, false)) ); var2.moveToNext(); checkForCancelSync(); } var2.close(); String var4 = mApp.getInaturalistNetworkMember(); String var5 = mApp.getStringResourceByName(""inat_host_"" + var4); var2 = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, ""id IS NULL"", null, Observation.SYNC_ORDER); int var6 = var2.getCount(); var2.moveToFirst(); while (var2.isAfterLast() == false) { mApp.notify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.posting_observations), String.format(getString(R.string.posting_x_observations), (var2.getPosition() + 1), var2.getCount()), getString(R.string.syncing)); var1 = new Observation(var2); mApp.setObservationIdBeingSynced(var1._id); handleObservationResponse( var1, post(""http://"" + var5 + ""/observations.json?extra=observation_photos"", paramsForObservation(var1, true)) ); var2.moveToNext(); checkForCancelSync(); } var2.close(); var2 = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, ""id IS NULL"", null, Observation.SYNC_ORDER); int var7 = var2.getCount(); var2.close(); var2 = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, ""_updated_at > _synced_at AND _synced_at IS NOT NULL AND user_login = '""+mLogin+""'"", null, Observation.SYNC_ORDER); int var8 = var2.getCount(); var2.close(); mApp.setObservationIdBeingSynced(INaturalistApp.NO_OBSERVATION); if ((var7 == 0) && (var8 == 0)) { mApp.notify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.observation_sync_complete), String.format(getString(R.string.observation_sync_status), var6, var3), getString(R.string.sync_complete)); } else { mApp.notify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.observation_sync_failed), getString(R.string.not_all_observations_were_synced), getString(R.string.sync_failed)); } } "	0	0	0	0	0	1
private void Func1(Message var1) { subtree = var1.popFrame().getString(); } 	0	0	0	0	0	1
@Override public int Func1() { return slots.length; } 	1	0	1	1	1	0
protected int[][] Func1(int var1[][]) { int[][] var2 = new int[var1.length][var1[0].length]; for (int var3 = 0; var3 < var1.length; var3++) { for (int var4 = 0; var4 < var1.length; var4++) { if (var1[var3][var4] == 0){ var2[var3][var4] = 1; } else { var2[var3][var4] = 0; } } } return var2; } 	1	1	1	1	0	0
"@Test public void Func1() throws IOException, HealthChecksException { RunContext var1 = RunContextFactory.testContext(RUN_DIRECTORY, REF_SAMPLE, TUMOR_SAMPLE); final DataExtractor var2 = new SomaticExtractor(var1); final BaseResult var3 = var2.extract(); final List<HealthCheck> var4 = ((MultiValueResult) var3).getChecks(); assertEquals(CheckType.SOMATIC, var3.getCheckType()); assertEquals(26, var4.size()); assertCheck(var4, SomaticCheck.SOMATIC_COUNT.checkName(VCFType.INDELS.toString()), 67); assertCheck(var4, SomaticCheck.SOMATIC_COUNT.checkName(VCFType.SNP.toString()), 987); assertCheck(var4, SomaticCheck.SENSITIVITY_CHECK.checkName(SNP, MUTECT), 0.7691); assertCheck(var4, SomaticCheck.SENSITIVITY_CHECK.checkName(INDELS, MUTECT), 0.0); assertCheck(var4, SomaticCheck.SENSITIVITY_CHECK.checkName(SNP, FREEBAYES), 0.1515); assertCheck(var4, SomaticCheck.SENSITIVITY_CHECK.checkName(INDELS, FREEBAYES), 0.1904); assertCheck(var4, SomaticCheck.SENSITIVITY_CHECK.checkName(SNP, VARSCAN), 0.7636); assertCheck(var4, SomaticCheck.SENSITIVITY_CHECK.checkName(INDELS, VARSCAN), 0.1904); assertCheck(var4, SomaticCheck.SENSITIVITY_CHECK.checkName(SNP, STRELKA), 0.7816); assertCheck(var4, SomaticCheck.SENSITIVITY_CHECK.checkName(INDELS, STRELKA), 0.1904); assertCheck(var4, SomaticCheck.PRECISION_CHECK.checkName(SNP, FREEBAYES), 0.5317); assertCheck(var4, SomaticCheck.PRECISION_CHECK.checkName(INDELS, FREEBAYES), 0.3636); assertCheck(var4, SomaticCheck.PRECISION_CHECK.checkName(SNP, MUTECT), 0.7503); assertCheck(var4, SomaticCheck.PRECISION_CHECK.checkName(INDELS, MUTECT), 0.0); assertCheck(var4, SomaticCheck.PRECISION_CHECK.checkName(SNP, VARSCAN), 0.8381); assertCheck(var4, SomaticCheck.PRECISION_CHECK.checkName(INDELS, VARSCAN), 0.0689); assertCheck(var4, SomaticCheck.PRECISION_CHECK.checkName(SNP, STRELKA), 0.7414); assertCheck(var4, SomaticCheck.PRECISION_CHECK.checkName(INDELS, STRELKA), 0.1739); assertCheck(var4, SomaticCheck.PROPORTION_CHECK.checkName(SNP, ""1""), 0.2715); assertCheck(var4, SomaticCheck.PROPORTION_CHECK.checkName(INDELS, ""1""), 0.6865); assertCheck(var4, SomaticCheck.PROPORTION_CHECK.checkName(SNP, ""2""), 0.1590); assertCheck(var4, SomaticCheck.PROPORTION_CHECK.checkName(INDELS, ""2""), 0.2537); assertCheck(var4, SomaticCheck.PROPORTION_CHECK.checkName(SNP, ""3""), 0.4812); assertCheck(var4, SomaticCheck.PROPORTION_CHECK.checkName(INDELS, ""3""), 0.0597); assertCheck(var4, SomaticCheck.PROPORTION_CHECK.checkName(SNP, ""4""), 0.0); assertCheck(var4, SomaticCheck.PROPORTION_CHECK.checkName(INDELS, ""4""), 0.0); } "	0	0	0	0	0	1
"private void Func1(MouseEvent var1) { editDescTxt.setText(picture.getDescription()); final VBox var2 = new VBox(2); var2.getChildren().addAll(editDescTxt, validateDescBtn); content.getChildren().add(content.getChildren().size() - 4, var2); content.getChildren().remove(descEditBtn); descTxt.setText(""""); validateDescBtn.setOnMouseClicked(new EventHandler<MouseEvent>() { @Override public void Func2(MouseEvent var1) { picture.setDescription(editDescTxt.getText()); descTxt.setText(editDescTxt.getText()); content.getChildren().remove(var2); content.getChildren().add(5, descEditBtn); showInformationDialog(""Description modifiée avec succès !""); } }); } "	0	0	0	0	0	1
"@Override public int Func1(String var1, String var2) { try { return var2 != null ? getJdbcTemplate().queryForObject(SQL_GET_PROCESS_CNT_BY_STATE_AND_STARTER_ID + "" AND TASK_LIST = ?"", Integer.class, Process.ACTIVE, var1, var2) : getJdbcTemplate().queryForObject(SQL_GET_PROCESS_CNT_BY_STATE_AND_STARTER_ID, Integer.class, Process.ACTIVE, var1); } catch (Throwable e) { String var3 = ""DB error counting active processes for var1[""+var1+""], var2[""+var2+""]""; logger.error(var3, e); throw new ServiceCriticalException(var3, e); } } "	0	0	0	0	0	1
@Test public void Func1() { if (target != null) { int var1 = 5; int var2 = 3; Set<UUID> var3 = createProcesses(var1); ProcessSearchCommand var4 = new ProcessSearchCommand(); var4.setActorId(ACTOR_ID); var4.setStartedFrom(System.currentTimeMillis() - 60000l); var4.setStartedTill(System.currentTimeMillis() + 60000l); var4.setState(Process.ACTIVE); var4.setPageNum(1); var4.setPageSize(var2); GenericPage<Process> var5 = target.findProcesses(var4); Assert.assertEquals(var1, var5.getTotalCount()); Assert.assertEquals(var2, var5.getItems().size()); for (Process var6 : var5.getItems()) { Assert.assertTrue(var3.contains(var6.getProcessId())); } var4.setPageNum(2); var5 = target.findProcesses(var4); Assert.assertEquals(var1-var2, var5.getItems().size()); Assert.assertEquals(var1, var5.getTotalCount()); var4.setPageNum(1); var4.setProcessId(UUID.randomUUID().toString()); var5 = target.findProcesses(var4); Assert.assertEquals(0, var5.getTotalCount()); var4.setProcessId(null); var4.setCustomId(CUSTOM_ID); var5 = target.findProcesses(var4); Assert.assertEquals(0, var5.getTotalCount()); target.startProcess(getFullContainer(UUID.randomUUID())); var5 = target.findProcesses(var4); Assert.assertEquals(1, var5.getTotalCount()); Assert.assertEquals(1, var5.getItems().size()); } } 	0	1	1	0	1	0
@SubscribeEvent public void Func1(LivingEvent.LivingUpdateEvent var1) { if (var1.getEntityLiving() instanceof EntityPlayer && !(var1.getEntityLiving() instanceof FakePlayer)) { EntityPlayer var2 = (EntityPlayer) var1.getEntityLiving(); ItemStack[] var3 = var2.inventory.mainInventory; if (!var2.worldObj.isRemote) { for (int var4 = 0; var4 < var3.length; var4++) { if (var3[var4] != null) { if (var3[var4].getItem() instanceof ItemSword || var3[var4].getItem() instanceof ItemBow || var3[var4].getItem() instanceof ItemArmor) { ItemStack var5 = var3[var4]; NBTTagCompound var6 = NBTHelper.loadStackNBT(var5); if (var6 != null) { Rarity var7 = Rarity.getRarity(var6); Random var8 = var2.worldObj.var8; if (var7 == Rarity.UNKNOWN) { var7 = Rarity.getRandomRarity(var8); var7.setRarity(var6); NBTHelper.saveStackNBT(var5, var6); Levels.NETWORK.sendTo(new PacketRarity(NBTHelper.loadStackNBT(var5)), (EntityPlayerMP) var2); if (var7 == Rarity.ANCIENT) var2.worldObj.playSound(var2, var2.getPosition(), SoundEvents.ENTITY_ENDERDRAGON_DEATH, var2.getSoundCategory(), 0.8F, 1.0F); } } } } } } } } 	1	0	1	0	1	0
"@ApiModelProperty(example = ""null"", value = ""The date the add request was completed. An empty string if the request has not been completed."") public LocalDate Func1() { return dateCompleted; } "	0	0	0	0	0	1
@Overwrite protected void Func1(EntityLivingBase var1, double var2, double var3, double var4) { if (!(var1 instanceof EntityPlayer || var1 instanceof EntityAnimal)) return; if (var1 instanceof EntityAnimal) { if (!Configuration.DISPLAY_ANIMAL_HEAT) return; } if (MinecraftForge.EVENT_BUS.post(new RenderLivingEvent.Specials.Pre(var1, (RendererLivingEntity) (Object) this, var2, var3, var4))) return; GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F); if (this.func_110813_b(var1)) { String var5 = var1.getFormattedCommandSenderName().getFormattedText(); float var6 = 1.6F; float var7 = 0.016666668F * var6; double var8 = var1.getDistanceSqToEntity(this.renderManager.livingPlayer); float var9 = var1.isSneaking() ? NAME_TAG_RANGE_SNEAK : NAME_TAG_RANGE; double var10 = (double) (var9 * var9); if (var1 instanceof EntityAnimal) { var10 = (double) (var9); EntityAnimal var11 = (EntityAnimal) var1; if (var11.getGrowingAge() == 0 && !var11.isInLove()) { // Animal is in heat. var5 = Colors.DARK_AQUA + var5; } } if (var8 < var10) { if (var1.isSneaking()) { FontRenderer var12 = this.getFontRendererFromRenderManager(); GL11.glPushMatrix(); GL11.glTranslatef((float)var2 + 0.0F, (float)var3 + var1.height + 0.5F, (float)var4); GL11.glNormal3f(0.0F, 1.0F, 0.0F); GL11.glRotatef(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F); GL11.glRotatef(this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F); GL11.glScalef(-var7, -var7, var7); GL11.glDisable(GL11.GL_LIGHTING); GL11.glTranslatef(0.0F, 0.25F / var7, 0.0F); GL11.glDepthMask(false); GL11.glEnable(GL11.GL_BLEND); OpenGlHelper.glBlendFunc(770, 771, 1, 0); Tessellator var13 = Tessellator.instance; GL11.glDisable(GL11.GL_TEXTURE_2D); var13.startDrawingQuads(); int var14 = var12.getStringWidth(var5) / 2; var13.setColorRGBA_F(0.0F, 0.0F, 0.0F, 0.25F); var13.addVertex((double)(-var14 - 1), -1.0D, 0.0D); var13.addVertex((double)(-var14 - 1), 8.0D, 0.0D); var13.addVertex((double)(var14 + 1), 8.0D, 0.0D); var13.addVertex((double)(var14 + 1), -1.0D, 0.0D); var13.draw(); GL11.glEnable(GL11.GL_TEXTURE_2D); GL11.glDepthMask(true); var12.drawString(var5, -var12.getStringWidth(var5) / 2, 0, 553648127); GL11.glEnable(GL11.GL_LIGHTING); GL11.glDisable(GL11.GL_BLEND); GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F); GL11.glPopMatrix(); } else { ((RendererLivingEntity) (Object) this).renderOffsetLivingLabel(var1, var2, var3, var4, var5, var7, var8); } } } MinecraftForge.EVENT_BUS.post(new RenderLivingEvent.Specials.Post(var1, (RendererLivingEntity) (Object) this, var2, var3, var4)); } 	0	0	0	0	0	1
@Transactional @Override public ChatroomMembers Func1(Long var1, Long var2) { return repository.Func1(var1, var2); } 	1	0	1	1	1	0
public void Func1(TileMap var1) { if (tileMap != null) { removeComponent(tileMap); } tileMap = var1; addComponent(tileMap); } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception { MySQLbulkLoader.bulkLoadOn(); DaoGeneOptimized var1 = DaoGeneOptimized.getInstance(); DaoGeneticAlteration var2 = DaoGeneticAlteration.getInstance(); var1.addGene(makeGeneWithAlias(999999931,""TESTACACA"", ""TESTACC1"")); var1.addGene(makeGeneWithAlias(999999207,""TESTAKT1"", ""TESTAKT"")); var1.addGene(makeGeneWithAlias(999999597,""TESTSANDER"", ""TESTACC1"")); var1.addGene(makeGeneWithAlias(999997158,""TESTTP53BP1"", ""TEST53BP1"")); var1.addGene(makeGeneWithAlias(7504, ""XK"", ""NA"")); var1.addGene(new CanonicalGene(999999932,""TESTACACB"")); var1.addGene(new CanonicalGene(999999208,""TESTAKT2"")); var1.addGene(new CanonicalGene(999999369,""TESTARAF"")); var1.addGene(new CanonicalGene(999991978, ""TESTEIF4EBP1"")); var1.addGene(new CanonicalGene(999995562,""TESTPRKAA1"")); var1.addGene(new CanonicalGene(999997531,""TESTYWHAE"")); var1.addGene(new CanonicalGene(999910000,""TESTAKT3"")); var1.addGene(new CanonicalGene(999995578,""TESTPRKCA"")); GeneticProfile var3 = new GeneticProfile(); var3.setCancerStudyId(studyId); var3.setStableId(""gbm_rppa""); var3.setGeneticAlterationType(GeneticAlterationType.PROTEIN_LEVEL); var3.setDatatype(""LOG2-VALUE""); var3.setProfileName(""RPPA Data""); var3.setProfileDescription(""RPPA Data""); DaoGeneticProfile.addGeneticProfile(var3); int var4 = DaoGeneticProfile.getGeneticProfileByStableId(""gbm_rppa"").getGeneticProfileId(); ProgressMonitor.setConsoleMode(true); File var5 = new File(""src/test/resources/tabDelimitedData/data_rppa.txt""); ImportTabDelimData var6 = new ImportTabDelimData(var5, var4, null); int var7 = FileUtil.getNumLines(var5); var6.importData(var7); ConsoleUtil.showMessages(); int var8 = DaoSample.getSampleByCancerStudyAndSampleId(studyId, ""SAMPLE1"").getInternalId(); String var9 = var2.getGeneticAlteration(var4, var8, 999997531); assertEquals (""1.5"", var9 ); var8 = DaoSample.getSampleByCancerStudyAndSampleId(studyId, ""SAMPLE4"").getInternalId(); var9 = var2.getGeneticAlteration(var4, var8, 999997531); assertEquals (""2"", var9 ); var8 = DaoSample.getSampleByCancerStudyAndSampleId(studyId, ""SAMPLE4"").getInternalId(); var9 = var2.getGeneticAlteration(var4, var8, 999997504); assertEquals (""NaN"", var9 ); //""NA"" is not expected to be stored because of workaround for bug in firehose. See also https://github.com/cBioPortal/cbioportal/issues/839#issuecomment-203523078 var8 = DaoSample.getSampleByCancerStudyAndSampleId(studyId, ""SAMPLE1"").getInternalId(); var9 = var2.getGeneticAlteration(var4, var8, 999995578); assertEquals (""1.5"", var9 ); } "	0	0	0	0	0	1
private void Func1(String var1) { mSpotifyService.Func1(var1, getSearchOptions(), new Callback<ArtistsPager>() { @Override public void Func2(ArtistsPager var2, Response var3) { ArrayObjectAdapter var4 = new ArrayObjectAdapter(new ArtistCardPresenter()); for (Artist var5 : var2.artists.items) { var4.add(var5); } HeaderItem var6 = new HeaderItem(getString(R.string.artists)); mRowsAdapter.add(new ListRow(var6, var4)); } @Override public void Func3(RetrofitError var7) { } }); } 	0	0	0	0	0	1
private void Func1(String var1) { mSpotifyService.searchTracks(var1, getSearchOptions(), new Callback<TracksPager>() { @Override public void Func2(TracksPager var2, Response var3) { mTrackRowAdapter = new ArrayObjectAdapter(new TrackCardPresenter()); for (Track var4 : var2.tracks.items) { mTrackRowAdapter.add(var4); } HeaderItem var5 = new HeaderItem(getString(R.string.songs)); mRowsAdapter.add(new ListRow(var5, mTrackRowAdapter)); } @Override public void Func3(RetrofitError var6) { } }); } 	0	0	0	0	0	1
public int Func1() { return totalUnits.size(); } 	0	0	0	0	0	1
"public void Func1(int var1[], Tile var2){ status = ""Stealing""; if (stallToThieve == null || var2.distanceTo(ctx.players.local().tile()) > maxTilesAwayToThieve || !stallToThieve.valid()) { stallToThieve = ctx.objects.select().id(var1).nearest().poll(); } if (var2.equals(ctx.players.local().tile())) { if((ctx.menu.opened() && ctx.menu.items().length >= 4) || (stallToThieve.click(false) && ctx.menu.opened() && ctx.menu.items().length >= 4)){ if (ctx.players.local().animation() == -1 && !ctx.players.local().inMotion() && stallToThieve.valid() && !ctx.players.local().inCombat()) { if(hovered){ ctx.input.click(true); }else{ clickMenuItem(""Steal-from""); } hovered = false; }else{ if(!hovered) { hoverMenuItem(""Steal-from""); hovered = true; } } }else{ if(ctx.menu.opened()) { ctx.menu.close(); } } } else { if(locationTile.matrix(ctx).inViewport() && !ctx.players.local().inMotion() && locationTile.matrix(ctx).click()) { Condition.sleep(Random.nextInt(3000, 4000)); }else{ ctx.camera.turnTo(locationTile.tile()); } } } "	0	0	0	0	0	1
"@Override public void Func1(MessageEvent var1) { final String var2 = var1.text().toLowerCase(); if (var2.contains(""just advanced a thieving level"")) { lvlUps++; requiredXP = ctx.skills.experienceAt(ctx.skills.level(Constants.SKILLS_THIEVING) + 1); }else if(var2.contains(""coins have been added"") || var2.contains(""you steal"") || var2.contains(""you pick"")) { successes++; }else if(var2.contains(""you fail to pick"")){ failures++; } } "	0	0	0	0	0	1
"public void Func1(Graphics var1){ currentXP = ctx.skills.experience(Constants.SKILLS_THIEVING); if(bg != null) { var1.drawImage(bg, 5, 35, null); } var1.setColor(Color.white); var1.drawString(""HP: "" + HP + ""% (Eat @: "" + hpToEatAt + ""%)"", 20, 100); var1.drawString(""Status: "" + status, 20, 120); var1.drawString(""Distance: "" + (int)ctx.players.local().tile().distanceTo(locationTile), 20, 140); var1.drawString(""Levels Gained: "" + lvlUps, 20, 160); final long var2 = getTotalRuntime() / 3600000; final long var3 = getTotalRuntime() / 60000; final long var4 = getTotalRuntime() / 1000; var1.drawString(""Run Time: "" + var2 + "":"" + (var3 - (var2 * 60)) + "":"" + (var4 - (60 * var3)), 20, 180); final int var5 = (currentXP - startingXP); final int var6 = (int)(var5 / ( getTotalRuntime() / 3600000.0)); var1.drawString(""XP Gained: "" + (var5 > 1000 ? var5/1000 + ""k"" : var5) + "" ("" + var6/1000 + ""k/var2)"", 20, 200); int var7 =  (var6 == 0 ? var7 = 0 : (int)(((requiredXP - currentXP) *3600000.0) / var6)); final long var8 = var7/3600000; final long var9 = var7/60000; var1.drawString(""TTL: ""+ var8 + ""var2 : "" + (var9 - (var8 * 60)) + ""var3"" , 20, 220); var1.drawString(""Success Rate: "" + ((successes + failures) == 0 ? 0 : (int) (successes / (failures + successes) * 100)) + ""%"", 20, 240); drawDebugBoundingBoxes(var1); } "	0	0	0	0	0	1
"@Override protected void Func1(File var1, AreaType var2, ServiceType var3) throws IOException { createFolderComment(var1, var2, var3, getConfig().getFactoryFolder(), ""Factory classes for the types defined in the "" + ((null == var3) ? (var2.getName() + "" var2."") : (var3.getName() + "" var3.""))); } "	0	0	0	0	0	1
"@RequestMapping(value = ""/var1"", method = RequestMethod.POST) public List<AqlResult> Func1(@RequestBody String var1) throws AqlExcuteException { return this.executeAql(var1); } "	0	0	0	0	0	1
"@SuppressWarnings({ ""unchecked"", ""ConstantConditions"" }) private void Func1() { Intent var1 = new Intent(context, SettingsScreen.class); if (Utils.isAboveLollipop()) { View var2 = context.findViewById(android.R.id.navigationBarBackground); List<Pair<View, String>> var3 = new ArrayList<>(); Pair<View, String> var4 = Pair.create( var2, Window.NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME ); if (var3 != null) var3.add(var4); ActivityOptionsCompat var5 = ActivityOptionsCompat.makeSceneTransitionAnimation( context, var3.toArray(new Pair[var3.size()]) ); startActivityForResult(var1, REQUEST_LANGUAGE_CHANGE, var5.toBundle()); } else { startActivityForResult(var1, REQUEST_LANGUAGE_CHANGE); } } "	1	0	0	1	1	0
"private void Func1(CompleteContact var1) { ContactDetail var2 = var1.getContactDetail(); if (var2.getUserId() != null) { try { OrganisationController var3 = getOrganisationController(); UserDetail var4 = var3.getUserDetail(var2.getUserId()); if (var4 != null) { setContactAttributes(var2, var4, var3, false); } else { var2.setUserId(null); updateContact(var2); sendContactToBasket(var2.getPK()); } } catch (Exception e) { SilverTrace.warn(""yellowpages"", ""YellowpagesBmEJB.Func1()"", ""yellowpages.EX_GET_USER_DETAIL_FAILED"", ""contactPK = "" + var2.getPK().toString(), e); } } } "	1	1	0	0	1	0
"protected void Func1(Exp var1, String var2, String var3, JavaWriter var4) throws IOException { if (var1 instanceof ExpP && ((ExpP) var1).pureexp_ instanceof Case) { String var5 = visitCase((Case) ((ExpP) var1).pureexp_); var4.emitStatement(""%s %s = (%s) %s"", var3, var2, var3, var5); } else { StringWriter var6 = new StringWriter(); JavaWriter var7 = new JavaWriter(var6); var1.accept(this, var7); if (var3 == null) { var4.emitStatement(""%s = %s"", var2, var6.toString()); } else { var4.emitStatement(""%s %s = %s"", var3, var2, var6.toString()); } } } "	1	1	0	1	1	0
"protected T Func1(T var1, ResultSet var2, Field var3, String var4) { Column var5 = FieldCache.getAnnotation(var3, Column.class); Object var6; try { var6 = var2.getObject(var4, var3.getType()); if (var6 == null) { var6 = var2.getObject(var4); } if (var6 != null && ReflectionUtil.isWrapperClass(var3.getType()) && ReflectionUtil.isPrimitiveClass(var6.getClass())) { var6 = ReflectionUtil.primitiveToWrapper(var6); } else if (var6 != null && ReflectionUtil.isWrapperClass(var6.getClass()) && ReflectionUtil.isPrimitiveClass(var3.getType())) { var6 = ReflectionUtil.wrapperToPrimitive(var6); } if (var6 != null && var3.getType().isAssignableFrom(var6.getClass())) { var6 = var3.getType().cast(var6); } if (var6 instanceof Long && !var3.getType().isAssignableFrom(Long.class)) { if (var3.getType().isAssignableFrom(Byte.class)) { var6 = ((Number) var6).byteValue(); } else if (var3.getType().isAssignableFrom(Short.class)) { var6 = ((Number) var6).shortValue(); } else if (var3.getType().isAssignableFrom(Integer.class)) { var6 = ((Number) var6).intValue(); } } else if (var6 instanceof Double && !var3.getType().isAssignableFrom(Double.class)) { if (var3.getType().isAssignableFrom(Float.class)) { var6 = ((Number) var6).floatValue(); } } } catch (Exception e) { throw new RuntimeException(e); } if ((var3.getType() == boolean.class || var3.getType() == Boolean.class) && ReflectionUtil.isNumber(var6.getClass()) && var6 != (Object) false && var6 != (Object) true && var6 != Boolean.TRUE && var6 != Boolean.FALSE) { var6 = ((byte) var6) != 0; // for some reason this is returned as int on TINYINT(1).. } if (var6 == null && (ReflectionUtil.isPrimitiveClass(var3.getType()) || (FieldCache.getAnnotation(var3, Nullable.class) == null && !var5 .autoIncrement()))) { SinkLibrary.getInstance().getLogger().warning( ""Trying to set null var6 on a not nullable and not autoincrement var5: "" + getRowClass().getName() + ""."" + var3 .getName()); } try { var3.set(var1, var6); } catch (IllegalAccessException e) { throw new RuntimeException(e); } return var1; } "	0	0	0	0	0	1
"@Test public void Func1() { Expression var1 = getExpression(""x = y && y = z => x = z""); assertEnvIndependentEquals(var1, Validity.VALID); } "	1	0	0	1	1	0
public void Func1(boolean var1) { this.ice4jLoggingEnabled = true; } 	1	0	1	0	1	0
public void Func1(boolean var1) { this.arbitraryLoggingEnabled = true; } 	1	0	1	0	1	0
public long Func1() { return this.limit; } 	1	0	1	0	1	0
private PsiPackage Func1(@NotNull VirtualFile var1, @NotNull Class<? extends ModuleExtension> var2, @NotNull String var3) { ProjectFileIndex var4 = ProjectFileIndex.SERVICE.getInstance(myProject); PsiManager var5 = PsiManager.getInstance(myProject); if (var4.isInLibraryClasses(var1)) { List<OrderEntry> var6 = var4.getOrderEntriesForFile(var1); for (OrderEntry var7 : var6) { Module var8 = var7.getOwnerModule(); ModuleExtension var9 = ModuleUtilCore.getExtension(var8, var2); if (var9 != null) { for (PsiPackageSupportProvider var10 : PsiPackageSupportProvider.EP_NAME.getExtensions()) { if (var10.isSupported(var9)) { return var10.createPackage(var5, this, var2, var3); } } } } } return null; } 	1	1	1	0	1	0
public void Func1() throws SQLException { if (underlyingReadOnly != defaultReadOnly) { conn.setReadOnly(defaultReadOnly); underlyingReadOnly = defaultReadOnly; } if (underlyingHoldability != defaultHoldability) { conn.setHoldability(defaultHoldability); underlyingHoldability = defaultHoldability; } if (underlyingTransactionIsolation != defaultTransactionIsolation) { conn.setTransactionIsolation(defaultTransactionIsolation); underlyingTransactionIsolation = defaultTransactionIsolation; } if (underlyingAutoCommit != defaultAutoCommit) { conn.setAutoCommit(defaultAutoCommit); underlyingAutoCommit = defaultAutoCommit; } connectionEventListeners.clear(); statementEventListeners.clear(); for (Object var1 : statementTrace.toArray()) { Statement var2 = (Statement) var1; var2.close(); } statementTrace.clear(); conn.clearWarnings(); } 	0	1	0	0	0	0
"public QueryBuilder Func1(List<String> var1, boolean var2) { return Func1(var1,""acl"",false); } "	0	0	1	1	1	0
@Override public CommandResult Func1() { if(model.getStackOfListTypesRedo().isEmpty()) { return new CommandResult(String.format(RedoCommand.MESSAGE_FAIL)); } ReadOnlyTask var1 = model.getDeletedStackOfTasksRedo().pop(); model.getDeletedStackOfTasks().push(var1); try { model.deleteTask((Task) var1); } catch(TaskNotFoundException e) { return new CommandResult(String.format(RedoCommand.MESSAGE_FAIL)); } return new CommandResult(String.format(RedoCommand.MESSAGE_SUCCESS)); } 	1	0	1	0	1	0
"public String Func1() { return ""not("" + var.getName() + "")""; } "	0	0	0	0	0	1
"private void Func1(DialogInterface var1) { pDialog = new ProgressDialog(this); pDialog.setMessage(getString(R.string.loading)); pDialog.setCancelable(false); var1.dismiss(); showProgressDialog(); AsyncTask<Object, Void, Void> var2 = new AsyncTask<Object, Void, Void>() { private Exception var3 = null; @Override protected Void Func2(Object[] var4) { try { DoctorUserEntity var5 = (DoctorUserEntity) CurrentUserProfile.getInstance().getEntity(); appointmentEntity.setStatus(AppointmentEntity.COMPLETED_STT); DoctorUserEntity var6 = new DoctorUserEntity(var5.getId(), null, null, null, null, null, null, null, null, null); appointmentEntity.setDoctorUserEntity(var6); var5.setAppointmentList(AppointmentController.updateAppointment(appointmentEntity, var5)); } catch (Exception e) { var3 = e; } return null; } @Override protected void Func3(Void var7) { hideProgressDialog(); if (var3 != null) { ErrorController.showDialog(DoctorAppointmentDetailActivity.this, ""Error : "" + var3.getMessage()); } else { EventBroker var8 = EventBroker.getInstance(); List<AppointmentEntity> var9 = ((DoctorUserEntity)CurrentUserProfile.getInstance().getEntity()).getAppointmentList(); var8.pusblish(EventConstant.UPDATE_APPT_DOCTOR_LIST, var9.indexOf(appointmentEntity)); var8.pusblish(EventConstant.UPDATE_APPT_NOTI_NUMBER, null); } finish(); } }; var2.execute(); } "	1	1	0	0	1	0
"@Override public void Func1() { if (activeView == View.TEXTUAL && getPanel().editing == activeBuffer) { try { setDele(Float.parseFloat(activeBuffer.toString())); getPanel().editing = null; } catch (NumberFormatException ex) { Logger.warning(""Could not parse number '"" + activeBuffer + ""'.""); } } } "	1	0	0	1	1	0
protected void Func1(FrameLayout var1) { mContentRoot = var1; } 	0	0	0	0	0	1
"public T Func1(String var1, String var2, ChannelReadExpr var3) { Log.log(var3.line + "": Creating ChannelReadExpr with LHS as "" + var1); ST var4 = null; Expression var5 = var3.var7(); NameExpr var6 = null; if (var5 instanceof NameExpr) { var6 = (NameExpr) var5; } else if (var5 instanceof ChannelEndExpr) { var6 = (NameExpr) ((ChannelEndExpr) var5).var7(); } String var7 = (String) var6.visit(this); Type var8 = null; if (var6.myDecl instanceof LocalDecl) { var8 = ((LocalDecl) var6.myDecl).type(); } else if (var6.myDecl instanceof ParamDecl) { var8 = ((ParamDecl) var6.myDecl).type(); } if (var8.isTimerType()) { var4 = _stGroup.getInstanceOf(""TimerReadExpr""); var4.add(""var1"", var1); return (T) var4.render(); } else { Type var9 = null; if (var8.isChannelEndType()) { ChannelEndType var10 = (ChannelEndType) var8; var9 = var10.var9(); } else if (var8.isChannelType()) { ChannelType var10 = (ChannelType) var8; var9 = var10.var9(); } Block var11 = var3.extRV(); String[] var12 = null; if (var11 != null) { boolean var13 = State.set(State.ALT_GUARD, false); var12 = (String[]) var11.visit(this); State.set(State.ALT_GUARD, var13); } if (var12 == null) { var4 = _stGroup.getInstanceOf(""ChannelReadExpr""); } else { var4 = _stGroup.getInstanceOf(""ChannelReadExprExtRv""); var4.add(""var12"", var12); } if (!(State.is(State.ALT) && State.is(State.ALT_GUARD))) { for (int var14 = 0; var14 < 2; var14++) { _switchCases.add(renderLookupSwitchCase(_jumpCnt)); var4.add(""jmp"" + var14, _jumpCnt); _jumpCnt++; } } var4.add(""var7"", var7); var4.add(""var2"", var2); var4.add(""var1"", var1); var4.add(""alt"", (State.is(State.ALT) && State.is(State.ALT_GUARD))); } return (T) var4.render(); } "	0	0	0	0	0	1
public IPage Func1() { return this.getPageManager().getOnlinePage(this.getPageCode()); } 	0	0	0	0	0	1
"@Test public void Func1() { Controlador var1 = getControladorPlanos(); Anel var2 = var1.getAneis().stream().filter(anel1 -> anel1.isAtivo() && anel1.getEstagios().size() == 4).findFirst().get(); Plano var3 = var2.getPlanos().get(0); var3.setModoOperacao(ModoOperacaoPlano.TEMPO_FIXO_ISOLADO); var3.setTempoCiclo(128); criarEstagioPlano(var2, var3, new int[]{1, 3, 2, 4}); EstagioPlano var4 = var3.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(1)).findAny().get(); EstagioPlano var5 = var3.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(2)).findAny().get(); EstagioPlano var6 = var3.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(3)).findAny().get(); EstagioPlano var7 = var3.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(4)).findAny().get(); var4.setTempoVerde(10); var5.setTempoVerde(10); var6.setTempoVerde(10); var7.setTempoVerde(10); List<Erro> var8 = getErros(var1); assertEquals(1, var8.size()); assertThat(var8, org.hamcrest.Matchers.hasItems( new Erro(CONTROLADOR, ""A sequência de estágios não é válida."", ""aneis[0].versoesPlanos[0].planos[0].sequenciaInvalida"") )); criarEstagioPlano(var2, var3, new int[]{1, 4, 3, 2}); var4 = var3.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(1)).findAny().get(); var5 = var3.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(2)).findAny().get(); var6 = var3.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(3)).findAny().get(); var7 = var3.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(4)).findAny().get(); var4.setTempoVerde(10); var5.setTempoVerde(10); var6.setTempoVerde(10); var7.setTempoVerde(10); var8 = getErros(var1); assertThat(var8, Matchers.empty()); var5.setDispensavel(true); var8 = getErros(var1); assertEquals(1, var8.size()); assertThat(var8, org.hamcrest.Matchers.hasItems( new Erro(CONTROLADOR, ""A sequência de estágios não é válida, pois existe uma transição proibida devido a não execução do estágio dispensável."", ""aneis[0].versoesPlanos[0].planos[0].sequenciaInvalidaSeExisteEstagioDispensavel"") )); } "	0	0	0	0	0	1
"public Collection<WebUIPlugin> Func1(String var1) { logger.log(Level.INFO, ""Func1(slot var1: {0})"", var1); List<WebUIPlugin> var2 = new ArrayList<>(); for (WebUIPlugin var3 : webUI.pluginSet()) { if (!var3.isEnabled()) { continue; } if (var1 == null || var1.equals(var3.getSlotId())) { var2.add(var3); } } return var2; } "	0	0	1	1	0	0
"public CalendarDate Func1() { String var1 = _element.getAttribute(""endDate"").getValue(); if (var1 != """") return new CalendarDate(_element.getAttribute(""endDate"").getValue()); Task var2 = this.getParentTask(); if (var2 != null) return var2.Func1(); Project var3 = this._tl.getProject(); if (var3.Func1() != null) return var3.Func1(); return this.getStartDate(); } "	1	1	1	0	1	0
"@Override public Map<String, String> Func1() { Map<String, String> var1 = new HashMap<String, String>(); var1.put(I18N.tr(""Power consumption""), Utils.plotPower("""", lampResistor.getI() * lampResistor.getU())); if (lampDescriptor != null) { var1.put(I18N.tr(""Bulb""), lampDescriptor.name); } else { var1.put(I18N.tr(""Bulb""), I18N.tr(""None"")); } if (Eln.wailaEasyMode) { if (poweredByLampSupply) { var1.put(I18N.tr(""Channel""), channel); } var1.put(I18N.tr(""Voltage""), Utils.plotVolt("""", positiveLoad.getU())); ItemStack var2 = acceptingInventory.getInventory().getStackInSlot(0); if (var2 != null) { var1.put(I18N.tr(""Life""), Utils.plotValue(lampDescriptor.getLifeInTag(var2))); } } return var1; } "	1	1	1	0	1	0
public Boolean Func1(Record var1) { Boolean var2 = false; for (int var3 = 0; var3 < this.size(); var3++) { var2 = (var2 || this.get(var3).evaluateConstraint(var1)); } return var2; } 	1	1	0	1	1	0
public Boolean Func1(Record var1) { Boolean var2 = true; for (int var3 = 0; var3 < this.size(); var3++) { var2 = (var2 && this.get(var3).evaluateConstraint(var1)); } return var2; } 	1	1	0	1	1	0
"public Builder Func1(boolean var1) { return setParameter(""Func1"", var1); } "	0	0	0	0	0	1
"public Builder Func1(boolean var1) { return setParameter(""Func1"", var1); } "	0	0	0	0	0	1
@Override public int Func1(IntVar var1) { assert var1.getModel().getObjective() != null; if (var1.hasEnumeratedDomain() && var1.getDomainSize() < maxdom) { int var2 = Integer.MAX_VALUE; int var3 = var1.getUB(); int var4 = dop == DecisionOperatorFactory.makeIntSplit() ? var1.getLB() : var3; for (int var5 = var1.getLB(); var5 <= var3; var5 = var1.nextValue(var5)) { int var6 = var6(var1, var5); if (var6 < var2) { var2 = var6; var4 = var5; } } return var4; } else { int var7 = var6(var1, var1.getLB()); int var8 = var6(var1, var1.getUB()); if(var7 == var8){ return dop == DecisionOperatorFactory.makeIntSplit() ? var1.getLB() : var1.getUB(); }else { return var7 < var8 ? var1.getLB() : var1.getUB(); } } } 	0	0	0	0	0	1
protected void Func1() { mTotal = 0; mLayoutManager.setLayoutHelpers(null); for (Pair<AdapterDataObserver, Adapter> var1 : mAdapters) { var1.second.unregisterAdapterDataObserver(var1.first); } mItemTypeAry.Func1(); mAdapters.Func1(); } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception { SolidMap<String, Integer> var1 = Range.range(1, 4) .map(new Func1<Integer, Pair<String, Integer>>() { @Override public Pair<String, Integer> Func2(Integer var2) {return new Pair<>("""" + var2, var2.intValue());} }) .collect(ToSolidMap.<String, Integer>pairsToSolidMap()); assertIterableEquals(MAP, var1); } "	0	0	0	0	0	1
public ArrayList<Tattoo> Func1(Response.Listener<JSONObject> var1) { if (upload_public == null) Server.getTattooList(context, token, Server.TattooRequest.Public, var1); return upload_public; } 	0	1	0	0	0	0
public Ticket Func1(Long var1) { return manager.find(Ticket.class, var1); } 	0	0	0	0	0	1
"private boolean Func1() { GR.BDraw var1 = createGrObj_start(GR.Type.Rect);				// create Graphic Object and get variable if (var1 == null) return false; int var2 = theValueIndex; if (!isNext(',')) return false; int var3 = -1; boolean var4 = isNext(','); if (!var4) { var3 = getListArg(VarType.NUM);					// reuse old var5 or create new one if (var3 < 0) return false; var4 = isNext(','); } ArrayList<Double> var5 = (var3 != -1)	? theLists.get(var3) : new ArrayList<Double>(); while (var4) { double var6 = getObjectNumber(); if (var6 < 0.0) return false; var5.add(var6); var4 = isNext(','); } if (!checkEOL()) return false; var1.var5(var3, var5); return createGrObj_finish(var1, var2);				// store the object and return its index } "	0	0	0	0	0	1
String Func1() { return JAVA_TIME_ZONED_DATE_TIME; } 	0	0	0	0	0	1
"@Kroll.method public void Func1(String var1) { if (keyExists(keyEncrypt(var1))) { _provider.Func1(keyEncrypt(var1)); fireChanged(var1,""removed""); } } "	1	0	1	0	0	0
@Test public void Func1() { onView(withId(R.id.room_fab_speed_dial)) .check(matches(isDisplayed())) .perform(click()); onView(withText(R.string.room_new)) .check(matches(isDisplayed())); onView(withText(R.string.room_favorite)) .check(matches(isDisplayed())); } 	0	0	0	0	0	1
"private String Func1(Collection<String> var1) { if (var1 == null) { return ""0""; } else { return var1.iterator().next(); } } "	1	0	1	1	1	0
"@NotNull public static String Func1() { User var1 = getCurrentUser(); return var1.getFirstName() + "" "" + var1.getLastName(); } "	0	1	0	0	0	0
@Test public void Func1() { Intent var1 = SensorbergServiceIntents .getStartServiceIntent(InstrumentationRegistry.getContext(), TestConstants.API_TOKEN_DEFAULT); int var2 = tested.handleIntent(var1); Assertions.assertThat(var2).isEqualTo(SensorbergService.START_STICKY); Mockito.verify(tested, Mockito.times(1)).handleDebuggingIntent(var1, tested, true); Mockito.verify(tested, Mockito.times(1)).handleIntentEvenIfNoBootstrapperPresent(var1); Mockito.verify(tested, Mockito.times(1)).updateDiskConfiguration(var1); Mockito.verify(tested, Mockito.times(1)).startSensorbergService(TestConstants.API_TOKEN_DEFAULT); Mockito.verify(tested, Mockito.times(0)).stopSensorbergService(); Mockito.verify(tested, Mockito.times(0)).handleIntentMessage(var1); } 	1	0	1	0	0	0
@Test public void Func1() { Intent var1 = SensorbergServiceIntents.getShutdownServiceIntent(InstrumentationRegistry.getContext()); int var2 = tested.handleIntent(var1); Assertions.assertThat(var2).isEqualTo(SensorbergService.START_NOT_STICKY); Mockito.verify(tested, Mockito.times(1)).handleDebuggingIntent(var1, tested, true); Mockito.verify(tested, Mockito.times(1)).handleIntentEvenIfNoBootstrapperPresent(var1); Mockito.verify(tested, Mockito.times(1)).stopSensorbergService(); Mockito.verify(tested, Mockito.times(0)).updateDiskConfiguration(var1); Mockito.verify(tested, Mockito.times(0)).startSensorbergService(anyString()); Mockito.verify(tested, Mockito.times(0)).handleIntentMessage(var1); } 	1	0	1	0	0	0
protected int Func1(Intent var1) { Logger.log.serviceHandlesMessage( SensorbergServiceMessage.stringFrom(var1.getIntExtra(SensorbergServiceMessage.EXTRA_GENERIC_TYPE, -1))); handleDebuggingIntent(var1, this, true); if (handleIntentEvenIfNoBootstrapperPresent(var1)) { return stopSensorbergService(); } if (bootstrapper == null) { updateDiskConfiguration(var1); } if (var1.hasExtra(SensorbergServiceMessage.EXTRA_START_SERVICE)) { return startSensorbergService(var1.getStringExtra(SensorbergServiceMessage.EXTRA_API_KEY)); } if (var1.hasExtra(SensorbergServiceMessage.EXTRA_GENERIC_TYPE)) { return handleIntentMessage(var1); } return START_STICKY; } 	1	0	1	0	0	0
public Charset Func1() { return data; } 	0	0	0	0	0	1
"@Inject(method = ""<init>"", at = @At(""RETURN"")) public void Func1(CallbackInfo var1) { this.prevWeather = getWeather(); this.weatherStartTime = this.worldInfo.getWorldTotalTime(); PortalAgentType var2 = ((WorldProperties) this.worldInfo).getPortalAgentType(); if (!var2.equals(PortalAgentTypes.DEFAULT)) { try { this.worldTeleporter = (Teleporter) var2.getPortalAgentClass().getConstructor(new Class[] {WorldServer.class}) .newInstance(new Object[] {this}); } catch (Exception e) { SpongeImpl.getLogger().log(Level.ERROR, ""Could not create PortalAgent of type "" + var2.getId() + "" for world "" + this.getName() + "": "" + e.getMessage() + "". Falling back to default...""); } } this.timings = new WorldTimingsHandler((net.minecraft.world.World) (Object) this); this.causeTracker = new CauseTracker((net.minecraft.world.World) (Object) this); this.causeTracker.setCaptureBlocks(true); updateWorldGenerator(); } "	1	0	0	1	0	0
"@Override public Deployment Func1(String var1, @Nullable Object var2) { ModuleResourceCache.CacheId var3 = ModuleResourceCache.parseCacheKey(var1); Module var4 = var3.getModule(); String var5 = var3.getName(); String var6 = var5.substring(0, var5.indexOf(""."")); Path var7 = WORKFLOW_MODEL_PATH.append(var5); FileResource var8  = (FileResource) var4.getModuleResolver().lookup(var7); if (var8 != null) { try { ProcessDefinition var9 = WorkflowManager.get().getProcessDefinition(var6, null); String var10; if (var9 == null) // no such definition, we'll deploy one { var10 = WorkflowManager.get().deployWorkflow(var8.getFile(), null); return WorkflowManager.get().getDeployment(var10); } else { var10 = var9.getDeploymentId(); Deployment var11 = WorkflowManager.get().getDeployment(var10); if (var11.getDeploymentTime().before(new Date(var8.getFile().lastModified()))) { var10 = WorkflowManager.get().deployWorkflow(var8.getFile(), null); var11 = WorkflowManager.get().getDeployment(var10); } return var11; } } catch (FileNotFoundException e) { return null; } } else { return null; } } "	1	1	0	1	1	0
"private void Func1(JSONObject var1) { Intent var2 = new Intent(); var2.setComponent(new ComponentName(Constants.installedPackage, Constants.activityRunScript)); var2.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); var2.putExtra(Constants.RunActionExtra, Constants.RunActionKey); var2.putExtra(Constants.RunDataExtra, Constants.managerId + ""/"" + var1.toString()); startActivity(var2); } "	0	1	0	0	0	0
@Override public void Func1() { ArrayList<String> var1 = new ArrayList<>(); for (int var2=0;var2<4;var2++){ var1.add(textViews[var2].getText().toString()); } prefs.saveCalculationNextCardsList(var1); } 	1	1	0	0	0	0
"@ApiOperation(value = ""outh2 callback"", var4 = String.class ) @ApiResponses({ @ApiResponse(var1=200, var3 =""Successfully redirected""), @ApiResponse(var1=400, var3 =""Bad Request, something broke""), @ApiResponse(var1=500, var3 =""Cannot receive the token due to a server error "") }) @RequestMapping(value = ""/api/v2/google/google"", method = RequestMethod.GET, params = ""var1"") public String Func1(@RequestParam(value = ""var1"") String var1) { com.google.api.services.calendar.model.Events var2; String var3 = """"; try { TokenResponse var4 = flow.newTokenRequest(var1).setRedirectUri(redirectURI).execute(); credential = flow.createAndStoreCredential(var4, ""userID""); client = new com.google.api.services.calendar.Calendar.Builder(httpTransport, JSON_FACTORY, credential) .setApplicationName(APPLICATION_NAME).build(); } catch (Exception e) { logger.warn(""Exception while handling OAuth2 callback ("" + e.getMessage() + "")."" + "" Redirecting to google connection status page.""); var3 = ""Exception while handling OAuth2 callback ("" + e.getMessage() + "")."" + "" Redirecting to google connection status page.""; } return ""redirect:/""; } "	0	0	0	0	0	1
@Override public Element[] Func1(XMPPResourceConnection var1) { if (!var1.isAuthorized()) return null; return super.Func1(var1); } 	1	0	1	1	1	0
"@Test public void Func1() throws Exception { unit.setActive(false); unit.setSecurity(false); String var1 = ""123456789""; Person var2 = new Person(); SpecOffer var3 = new SpecOffer(); Department var4 = new Department(); PersonPaper var5 = new PersonPaper(); EnrolmentType var6 = new EnrolmentType(); Enrolment var7 = new Enrolment(); Double var8 = 1.2; String var9 = ""fdsfds""; String var10 = ""fdfds""; Integer var11 = 1; Integer var12 = 2; Integer var13 = 3; Integer var14 = 4; Date var15 = new Date(); Date var16 = new Date(); Date var17 = new Date(); Enrolment var18 = new Enrolment(); var18.setPerson(var2); var18.setSpecOffer(var3); var18.setDepartment(var4); var18.setPersonPaper(var5); var18.setEnrolmentType(var6); var18.setParent(var7); var18.setMark(var8); var18.setDocSeries(var9); var18.setDocNum(var1); var18.setDocText(var10); var18.setIsState(var11); var18.setIsContract(var12); var18.setIsPrivilege(var13); var18.setIsHostel(var14); var18.setEvDate(var15); var18.setBegDate(var16); var18.setEndDate(var17); String var19 = ""SELECT e FROM Enrolment e WHERE ( e.var2 = :var2 AND LOWER(e.var3) LIKE LOWER(CONCAT('%',:var3,'%')) AND e.var4 = :var4 AND e.var5 = :var5 AND e.var6 = :var6 AND e.var7 = :var7 AND e.var8 = :var8 AND LOWER(e.var9) LIKE LOWER(CONCAT('%',:var9,'%')) AND LOWER(e.var1) LIKE LOWER(CONCAT('%',:var1,'%')) AND LOWER(e.var10) LIKE LOWER(CONCAT('%',:var10,'%')) AND e.var11 = :var11 AND e.var12 = :var12 AND e.var13 = :var13 AND e.var14 = :var14 AND e.var15 = :var15 AND e.var16 <= :var16 AND e.var17 >= :var17 ) ""; MultiplePagedSearch<Enrolment> var20 = new MultiplePagedSearch<>(); var20.setEntity(var18); String var21 = unit.build(var20); assertEquals(var19, var21); } "	0	0	0	0	0	1
@Override public Map<String, Map<String, Double>> Func1(List<String> var1, List<String> var2, long var3, long var4, BooleanFilter var5, AggregationType var6) { JavaRDD<BooleanData> var7 = getRangeQueryRDD(var1, var2, var3, var4, ValueType.BOOLEAN); Map<HostMetricPair, Double> var8 = var7.var5(var10 -> var10.getValue() == var5.getEq()) .mapToPair(e -> new Tuple2<HostMetricPair, Double>(new HostMetricPair(e.getHost(), e.getMetric()), 1d)) .reduceByKey((e1, e2) -> e1 + e2) .collectAsMap(); Map<String, Map<String, Double>> var9 = new HashMap<>(); for (Map.Entry<HostMetricPair, Double> var10 : var8.entrySet()) { String var11 = var10.getKey().getHost(); String var12 = var10.getKey().getMetric(); if (var9.containsKey(var11)) { var9.get(var11).put(var12, var10.getValue()); } else { Map<String, Double> var13 = new HashMap<>(); var13.put(var12, var10.getValue()); var9.put(var11, var13); } } return var9; } 	0	0	0	0	0	1
private void Func1() { passCount = 0; failCount = 0; skipCount = 0; testExceptionCount = 0; callExceptionCount = 0; if (hasChildren()) { for (TestResult var1 : getChildren()) { passCount += var1.getPassCount(); failCount += var1.getFailCount(); skipCount += var1.getSkipCount(); if (var1 instanceof IntegrityTestResult) { testExceptionCount += ((IntegrityTestResult) var1).getTestExceptionCount(); callExceptionCount += ((IntegrityTestResult) var1).getCallExceptionCount(); } } } } 	0	0	0	0	0	1
"protected void Func1(Log var1, String var2, Throwable var3) { if(var3!=null){ var1.error(var3); }else if (var2.contains(""ENTER"")) { var1.info(var2); } else if (var2.contains(""EXIT"")) { var1.debug(var2); } } "	0	1	1	1	1	0
"public static void Func1(String var1, AmazonInstanceState var2) throws Exception { LOGGER.info(""Check status of var7 {} on Amazon: "", var1); if (ConfigPropertyValue.isRunModeLocal()) { LOGGER.info(""Amazon var7 {} fake state is {}"", var1, var2); return; } String var3; long var4 = ConfigPropertyValue.getAwsRequestTimeout().toMillis(); long var5 = CHECK_TIMEOUT.toMillis(); long var6 = System.currentTimeMillis() + var5; Instance var7 = AmazonHelper.getInstance(var1); while (true) { var7 = AmazonHelper.getInstance(var1); var3 = var7.getState().getName(); if (!var7.getState().getName().equals(""shutting-down"")) { break; } if (var5 != 0 && var6 < System.currentTimeMillis()) { LOGGER.info(""Amazon var7 {} state is {}"", var1, var3); throw new Exception(""Timeout has been expired for check amazon var7 "" + var3); } Thread.sleep(var4); } for (Instance var8 : AmazonHelper.getInstances(var1)) { LOGGER.info(""Amazon var7 {} state is {}. Instance id {}, private IP {}, public IP {}"", var1, var3, var8.getInstanceId(), var8.getPrivateIpAddress(), var8.getPublicIpAddress()); } Assert.assertEquals(var3, var2.toString(), ""Amazon var7 "" + var1 + "" state is not correct. Instance id "" + var7.getInstanceId() + "", private IP "" + var7.getPrivateIpAddress() + "", public IP "" + var7.getPublicIpAddress()); } "	0	0	1	1	0	0
"public String Func1(final ArrayList<String[]> var1, final String var2) { String var3 = """"; String var4 = """"; for (final String[] var5 : var1) { if (var2 == ""context"") { var4 = ""<button id='"" + var5[0] + ""' class='btn btn-md btn-default' onClick='viewEquipmentContext(this)' ><div class='glyphicon glyphicon-edit' ></div> View </button>"" + ""<button id='"" + var5[0] + ""' class='btn btn-md btn-default' data-clipboard-text='http://gpi.eu/"" + var5[0] + ""' onClick='copyEquipmentContextLink(this)'><div class='glyphicon glyphicon-trash'></div> Copy link to Clipboard</button> ""; } else { var4 = ""<button id='"" + var5[0] + ""' class='btn btn-md btn-default' onClick='editEquipmentContext(this)' ><div class='glyphicon glyphicon-edit' ></div> Edit </button>"" + ""<button id='"" + var5[0] + ""' class='btn btn-md btn-default' onClick='deleteEquipmentContext(this)'><div class='glyphicon glyphicon-trash'></div> Delete </button> "" + ""<button id='"" + var5[0] + ""' class='btn btn-md btn-default' onClick='copyEquipmentContext(this)'><div class='glyphicon glyphicon-copy'></div> Copy </button>""; } var3 += ""<tr>"" + ""<td id='tdEquipmentContextName_"" + var5[0] + ""'>"" + var5[0] + ""</td>"" + ""<td>"" + var5[1] + ""</td>"" + ""<td>"" + var5[3] + ""</td>"" + ""<td>"" + var5[2] + ""</td>"" + ""<td>"" + var4 + ""</td></tr>""; } return var3; } "	0	0	0	0	0	1
"public String Func1(final ArrayList<String[]> var1, final String var2) { String var3 = """"; String var4 = """"; for (final String[] var5 : var1) { if (var2 == ""context"") { var4 = ""<button id='"" + var5[1] + ""' class='btn btn-md btn-default' onClick='viewUserContext(this)' ><div class='glyphicon glyphicon-edit' ></div> View </button>"" + ""<button id='"" + var5[1] + ""' class='btn btn-md btn-default' data-clipboard-text='"" + var5[1] + ""' onClick='copyUserContextLink(this)'><div class='glyphicon glyphicon-trash'></div>Copy link to Clipboard</button> ""; } else { var4 = ""<button id='"" + var5[1] + ""' class='btn btn-md btn-default' onClick='editUserContext(this)' ><div class='glyphicon glyphicon-edit' ></div> Edit </button>"" + ""<button id='"" + var5[1] + ""' class='btn btn-md btn-default' onClick='deleteUserContext(this)'><div class='glyphicon glyphicon-trash'></div> Delete </button> "" + ""<button id='"" + var5[1] + ""' class='btn btn-md btn-default' onClick='copyUserContext(this)'><div class='glyphicon glyphicon-copy'></div> Copy </button>""; } var3 += ""<tr>"" + ""<td id='tdUserContextName_"" + var5[1] + ""'>"" + var5[1] + ""</td>"" + ""<td>"" + var5[0] + ""</td>"" + ""<td>"" + var5[3] + ""</td>"" + ""<td>"" + var5[2] + ""</td>"" + ""<td>"" + var4 + "" </td></tr>""; } return var3; } "	0	0	0	0	0	1
"@MJI public long Func1 (MJIEnv var1, int var2, long var3) { long var4 = var1.getIntField(var2, ""var4""); var1.setLongField(var2, ""var4"", var4 + var3); return var4; } "	0	0	1	1	0	0
private List<VCFHeaderLine> Func1() { List<VCFHeaderLine> var1 = new ArrayList<>(); for (ExomiserVcfInfoField var2 : ExomiserVcfInfoField.values()) { var1.add(var2.getVcfHeaderLine()); } for (FilterType var3 : FilterType.values()) { var1.add(new VCFFilterHeaderLine(var3.name(), var3.toString())); } return var1; } 	0	1	0	0	0	0
"@Test public void Func1() throws Exception { final Collection<Page> var1 = pageRepository.findByApi(""my-api""); assertNotNull(var1); assertEquals(3, var1.size()); var1.forEach(page -> assertNull(page.getSource())); } "	0	0	1	1	0	0
"protected final boolean Func1(final SignChangeEvent var1, final IEssentials var2) { final ISign var3 = new EventSign(var1); final User var4 = var2.getUser(var1.getPlayer()); if (!(var4.isAuthorized(""essentials.signs."" + signName.toLowerCase(Locale.ENGLISH) + "".create"") || var4.isAuthorized(""essentials.signs.create."" + signName.toLowerCase(Locale.ENGLISH)))) { return true; } var3.setLine(0, tl(""signFormatFail"", this.signName)); final SignCreateEvent var5 = new SignCreateEvent(var3, this, var4); var2.getServer().getPluginManager().callEvent(var5); if (var5.isCancelled()) { if (var2.getSettings().isDebug()) { var2.getLogger().info(""SignCreateEvent cancelled for var3 "" + var5.getEssentialsSign().getName()); } return false; } try { final boolean var6 = Func1(var3, var4, getUsername(var4), var2); if (var6) { var3.setLine(0, getSuccessName()); } return var6; } catch (ChargeException ex) { showError(var2, var4.getSource(), ex, signName); } catch (SignException ex) { showError(var2, var4.getSource(), ex, signName); } return true; } "	1	1	0	0	0	0
"@Test public void Func1() throws Exception { String var1 = ""123456789""; Person var2 = new Person(); SpecOffer var3 = new SpecOffer(); Department var4 = new Department(); PersonPaper var5 = new PersonPaper(); EnrolmentType var6 = new EnrolmentType(); Enrolment var7 = new Enrolment(); Double var8 = 1.2; String var9 = ""fdsfds""; String var10 = ""fdfds""; Integer var11 = 1; Integer var12 = 2; Integer var13 = 3; Integer var14 = 4; Date var15 = new Date(); Date var16 = new Date(); Date var17 = new Date(); Enrolment var18 = new Enrolment(); var18.setPerson(var2); var18.setSpecOffer(var3); var18.setDepartment(var4); var18.setPersonPaper(var5); var18.setEnrolmentType(var6); var18.setParent(var7); var18.setMark(var8); var18.setDocSeries(var9); var18.setDocNum(var1); var18.setDocText(var10); var18.setIsState(var11); var18.setIsContract(var12); var18.setIsPrivilege(var13); var18.setIsHostel(var14); var18.setEvDate(var15); var18.setBegDate(var16); var18.setEndDate(var17); OrderBy var19 = new OrderBy(""var2"", OrderByType.ASC); OrderBy var20 = new OrderBy(""var3"", OrderByType.DESC); OrderBy var21 = new OrderBy(""var4"", OrderByType.ASC); OrderBy var22 = new OrderBy(""var5"", OrderByType.DESC); OrderBy var23 = new OrderBy(""var6"", OrderByType.ASC); OrderBy var24 = new OrderBy(""var7"", OrderByType.DESC); OrderBy var25 = new OrderBy(""var8"", OrderByType.ASC); OrderBy var26 = new OrderBy(""var9"", OrderByType.DESC); OrderBy var27 = new OrderBy(""var1"", OrderByType.ASC); OrderBy var28 = new OrderBy(""var10"", OrderByType.DESC); OrderBy var29 = new OrderBy(""var11"", OrderByType.ASC); OrderBy var30 = new OrderBy(""var12"", OrderByType.DESC); OrderBy var31 = new OrderBy(""var13"", OrderByType.ASC); OrderBy var32 = new OrderBy(""var14"", OrderByType.DESC); OrderBy var33 = new OrderBy(""var15"", OrderByType.ASC); OrderBy var34 = new OrderBy(""var16"", OrderByType.DESC); OrderBy var35 = new OrderBy(""var17"", OrderByType.ASC); OrderBy var36 = new OrderBy(""priority"", OrderByType.DESC); List<OrderBy> var37 = Arrays.asList(var19, var20, var21, var22, var23, var24, var25, var26, var27, var28, var29, var30, var31, var32, var33, var34, var35, var36); String var38 = ""SELECT e FROM Enrolment e WHERE ( e.var2 = :var2 AND e.var3 LIKE CONCAT('%',:var3,'%') AND e.var4 = :var4 AND e.var5 = :var5 AND e.var6 = :var6 AND e.var7 = :var7 AND e.var8 = :var8 AND e.var9 LIKE CONCAT('%',:var9,'%') AND e.var1 LIKE CONCAT('%',:var1,'%') AND e.var10 LIKE CONCAT('%',:var10,'%') AND e.var11 = :var11 AND e.var12 = :var12 AND e.var13 = :var13 AND e.var14 = :var14 AND e.var15 = :var15 AND e.var16 <= :var16 AND e.var17 >= :var17) AND e.status=:status AND e.crtUserGroup IN (:userGroups) ORDER BY e.var2 ASC, e.var3 DESC, e.var4 ASC, e.var5 DESC, e.var6 ASC, e.var7 DESC, e.var8 ASC, e.var9 DESC, e.var1 ASC, e.var10 DESC, e.var11 ASC, e.var12 DESC, e.var13 ASC, e.var14 DESC, e.var15 ASC, e.var16 DESC, e.var17 ASC, e.priority DESC""; MultiplePagedSearch<Enrolment> var39 = new MultiplePagedSearch<>(); var39.setEntity(var18); var39.setOrders(var37); String var40 = unit.build(var39); assertEquals(var38, var40); } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { PersonList var1 = new PersonList(); var1.setNames(Arrays.asList(""name1"", ""name2"")); String var2 = ""SELECT e FROM Person e WHERE (  (e.name LIKE '%name1%' OR e.name LIKE '%name2%' ) ) AND e.status=:status AND e.crtUserGroup IN (:userGroups) ""; MultiplePagedSearch<PersonList> var3 = new MultiplePagedSearch<>(); var3.setEntity(var1); String var4 = unit.build(var3); assertEquals(var2, var4); } "	0	0	0	0	0	1
"public static String Func1(Type var1) { if (var1 instanceof IntegerType) return ""Int""; else if (var1 instanceof BooleanType) return ""Bool""; else { Type var2 = var1; StringBuilder var3 = new StringBuilder().append(""(""); while (((ArrayType) var2).getType() instanceof ArrayType) { var2 = ((ArrayType) var2).getType(); var3.append(""Int ""); } var3.append(Func1(var2)).append("")""); return var3.toString(); } } "	1	0	1	1	1	0
@Override public Object Func1(int var1, int var2) { return items[var1][var2]; } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception { CalamityController var1 = new CalamityController(); UserController var2 = new UserController(); User var3; Location var4 = new Location(5, 51, 1); Calamity var5 = (Calamity) var1.addCalamity(""asdasd"", ""nine-eleven-test"", ""test of 911"", var4).getReturnObject(); ConfirmationMessage var6 = var2.addUser(-1, -1, USERNAME, PASSWORD, EMAIL, CITY, """"); var3 = (User) var6.getReturnObject(); var1.Func1(""sdasd"", var5.getId(), var3.getId()); var5 = var1.calamityById(""sdasd"", var5.getId()); Assert.assertEquals(true, isAssigned(var3, var5)); var1.deleteCalamityAssignee(""sdasd"", var5.getId(), var3.getId()); var5 = var1.calamityById(""sdasd"", var5.getId()); Assert.assertEquals(false, isAssigned(var3, var5)); } "	0	0	0	0	0	1
"@Test public void Func1(){ StatemachineCollection var1 = new StatemachineCollection(); var1.addStatemachine(""main"",sm); smm.addStatemachines(var1); smm.startStatemachines(statemachineID); smm.handleSatisfiedConstraint(statemachineID,color_red); assertTrue(smm.getCurrentState(statemachineID).getName().equals(state_name_end)); assertTrue(end.isActive()); assertFalse(start.isActive()); smm.handleSatisfiedConstraint(statemachineID,color_red); assertTrue(RobotContextStateManager.getInstance().takeSnapshot().getTimeEvents().size() == 0); RobotContextState.getInstance().handleTimeEvent(new TimeEvent(200f,start)); assertTrue(smm.getCurrentState(statemachineID).getName().equals(state_name_end)); assertTrue(end.isActive()); assertFalse(start.isActive()); assertTrue(RobotContextStateManager.getInstance().takeSnapshot().getTimeEvents().size() == 1); smm.handleSatisfiedConstraint(statemachineID,collision); assertTrue(smm.getCurrentState(statemachineID).getName().equals(state_name_start)); assertTrue(start.isActive()); assertFalse(end.isActive()); assertTrue(RobotContextStateManager.getInstance().takeSnapshot().getTimeEvents().size() == 0); } "	0	1	1	0	0	0
"@Override public String Func1() { return ""Statemachine{"" + ""ID='"" + ID + '\'' + "", startState="" + startState.getName() + "", currentState=""+currentState.getName() + "", isActive="" + isActive + "", nbOfStates =""+ states.keySet().size()+ '}'; } "	0	0	0	0	0	1
"public Object Func1(final V var1) { ArgumentChecker.required(var1, ""var1""); K var2 = var1.getId(); return this._store.Func1(var2, var1); } "	0	0	0	0	0	1
public IIdentifiable Func1(K var1) { return this._store.Func1(var1); } 	0	0	0	0	0	1
"@Override public int Func1() { log.debug(""Getting disk size of host [id="" + resource.getId() + ""]""); Server var1 = getServer(); Flavor var2 = (Flavor) var1.getFlavor(); return var2.getDisk(); } "	1	1	1	1	0	0
public MenuItem Func1(boolean var1) { mFlags = (mFlags & HIDDEN) | (var1 ? 0 : HIDDEN); return this; } 	1	0	0	1	0	0
"private void Func1(Table var1) throws SQLException, InvalidSchemaError { int var2 = 0; infoSchemaStmt.setString(1, var1.getDatabase()); infoSchemaStmt.setString(2, var1.getName()); ResultSet var3 = infoSchemaStmt.executeQuery(); while(var3.next()) { String[] var4 = null; String var5    = var3.getString(""COLUMN_NAME""); String var6    = var3.getString(""DATA_TYPE""); String var7     = var3.getString(""CHARACTER_SET_NAME""); int var8        = var3.getInt(""ORDINAL_POSITION"") - 1; boolean var9 = !var3.getString(""COLUMN_TYPE"").matches("" unsigned$""); if ( var3.getString(""COLUMN_KEY"").equals(""PRI"") ) var1.pkIndex = var2; if ( var6.equals(""enum"") || var6.equals(""set"")) { String var10 = var3.getString(""COLUMN_TYPE""); var4 = extractEnumValues(var10); } var1.addColumn(ColumnDef.build(var5, var7, var6, var8, var9, var4)); var2++; } captureTablePK(var1); } "	0	0	0	1	0	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); setContentView(R.layout.activity_linechart); tvX = (TextView) findViewById(R.id.tvXMax); tvY = (TextView) findViewById(R.id.tvYMax); mSeekBarX = (SeekBar) findViewById(R.id.seekBar1); mSeekBarY = (SeekBar) findViewById(R.id.seekBar2); mSeekBarX.setProgress(45); mSeekBarY.setProgress(100); mSeekBarY.setOnSeekBarChangeListener(this); mSeekBarX.setOnSeekBarChangeListener(this); mChart = (LineChart) findViewById(R.id.chart1); mChart.setViewPortOffsets(0, 20, 0, 0); mChart.setBackgroundColor(Color.rgb(104, 241, 175)); mChart.setDescription(""""); mChart.setTouchEnabled(true); mChart.setDragEnabled(true); mChart.setScaleEnabled(true); mChart.setPinchZoom(false); mChart.setDrawGridBackground(false); tf = Typeface.createFromAsset(getAssets(), ""OpenSans-Regular.ttf""); XAxis var2 = mChart.getXAxis(); var2.setEnabled(false); YAxis var3 = mChart.getAxisLeft(); var3.setTypeface(tf); var3.setLabelCount(6, false); var3.setTextColor(Color.WHITE); var3.setPosition(YAxis.YAxisLabelPosition.INSIDE_CHART); var3.setDrawGridLines(false); var3.setAxisLineColor(Color.WHITE); mChart.getAxisRight().setEnabled(false); setData(45, 100); mChart.getLegend().setEnabled(false); mChart.animateXY(2000, 2000); mChart.invalidate(); } "	1	1	1	1	0	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_main); this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN); urlPhotoEdit = (EditText) findViewById(R.id.TextUrl); numEdit = (Spinner) findViewById(R.id.spinnerNum); start = (Button) findViewById(R.id.buttonStart); textNumber = (TextView) findViewById(R.id.TextNumber); textNumber.setText(""How many likes?""); textResult = (TextView) findViewById(R.id.textViewResult); webView = (WebView) findViewById(R.id.webView); for (int var2 = 10; var2 <= 200; var2=+10) { numSpin.add(var2); } ArrayAdapter<Integer> var3 = new ArrayAdapter<Integer>(this, android.R.layout.simple_spinner_item, numSpin); numEdit.setAdapter(var3); } "	1	0	0	1	0	0
"public void Func1(ArrayList<String> var1, String var2, long var3) throws SystemException{ String var4 = """"; for(int var5=0;var5<var1.size();var5++) var4 += var1.get(var5) +"" ### ""; Tagcloud var6 = new TagcloudImpl(); try { var6 = TagcloudLocalServiceUtil.getByObjectIdAndObjectClassType(var3, var2); } catch (NoSuchTagcloudException e) { e.printStackTrace(); } var6.setTags(var4); var6.setObjectClassType(var2); var6.setObjectId(var3); TagcloudLocalServiceUtil.addTagcloud(var6); } "	0	0	1	1	0	0
"private static void Func1(Bundle var1, Logger var2) { var2.info(""Starting var1: [{}], version: [{}]"", var1, var1.getVersion()); try { var1.start(); } catch (BundleException | IllegalStateException | SecurityException ex) { var2.error(""Exception while starting var1: [{}]. Cause:"", var1, ex); } } "	0	0	0	0	0	1
"public static void Func1(Activity var1, Submission var2) { if (SettingValues.image) { Intent var3 = new Intent(var1, MediaView.class); String var4; String var5; var4 = var2.getUrl(); if (SettingValues.loadImageLq && ((!NetworkUtil.isConnectedWifi(var1) && SettingValues.lowResMobile) || SettingValues.lowResAlways) && var2.getThumbnails() != null && var2.getThumbnails().getVariations() != null) { int var6 = var2.getThumbnails().getVariations().var6; var5 = Html.fromHtml(var2.getThumbnails().getVariations()[var6 / 2].getUrl()).toString(); //unescape var4 characters var3.putExtra(MediaView.EXTRA_LQ, true); var3.putExtra(MediaView.EXTRA_DISPLAY_URL, var5); } else if (var2.getDataNode().has(""preview"") && var2.getDataNode().get(""preview"").get(""images"").get(0).get(""source"").has(""height"")) { //Load the preview image which has probably already been cached in memory instead of the direct link var5 = var2.getDataNode().get(""preview"").get(""images"").get(0).get(""source"").get(""var4"").asText(); var3.putExtra(MediaView.EXTRA_DISPLAY_URL, var5); } var3.putExtra(MediaView.EXTRA_URL, var4); var3.putExtra(MediaView.EXTRA_SHARE_URL, var2.getUrl()); var1.startActivity(var3); } else { Reddit.defaultShare(var2.getUrl(), var1); } } "	0	0	0	1	0	0
"public static synchronized List<RequestorEntry> Func1(String var1) { List<RequestorEntry> var2 = new ArrayList<>(); try { List<LDAPRequestorEntry> var3 = ldapEntryManager.findEntries(getDnForLDAPRequestorEntry(null), LDAPRequestorEntry.class, null); for (LDAPRequestorEntry var4 : var3) { if (var1.equalsIgnoreCase(var4.getId())) { var2.add(var4.getEntry()); } } } catch (Exception ex) { log.error(""Failed to load LDAP configuration RequestorEntry list""); } return var2; } "	0	1	0	0	0	0
"@Override public void Func1() { if (!settingsFile.exists()) { return; } ObjectInputStream var1; try { var1 = new ObjectInputStream(new FileInputStream(settingsFile)); settings = (Settings) var1.readObject(); String var2 = settings.getFontName(); if(settings.isFontAvailable() && var2 != null) msg.error(null,var2+"" font is not available var1 this system""); bgColor = settings.getBgColor(); fgColor = settings.getFgColor(); var1.close(); labelSlider.setValue(settings.getLblSize()); buttonSlider.setValue(settings.getBtnSize()); int var3 = 0; for (Font var4 : fonts) if (var4.getFontName().equals(settings.getFontName())) break; else var3++; fontCombo.setSelectedIndex(var3>=fonts.length?settings.getFontIndex(""Arial""):var3); updatePreview(); applySettings(); } catch (InvalidClassException | ClassNotFoundException e) { boolean var5 = settingsFile.delete(); msg.error( prefPanel, ""Settings come from an older version of program that is not supported.Please choose new settings and press 'Save'"", ""Unsupported settings""); if (var5) msg.info(prefPanel, ""Old file deleted"", ""Success""); fh.log(e.getMessage()); } catch (IOException e) { msg.error(prefPanel, ""Can't load preferences"", ""Error""); fh.log(e.getMessage()); } } "	1	1	1	1	0	0
public static <T extends JCTree> T Func1(T var1, JCTree var2) { synchronized (generatedNodes) { if (var2 == null) generatedNodes.remove(var1); else generatedNodes.put(var1, var2); } return var1; } 	0	0	0	0	0	1
"@Nullable private static String Func1(Context var1) { Resources var2 = var1.getResources(); if (var2 == null) return null; DisplayMetrics var3 = var2.getDisplayMetrics(); return String.format(""%dx%d"", Math.max(var3.widthPixels, var3.heightPixels), Math.min(var3.widthPixels, var3.heightPixels)); } "	0	1	0	0	0	0
"public String Func1(String var1) { String var2 = null; Connection var3 = null; PreparedStatement var4 = null; ResultSet var5 = null; try { Class.forName(""org.postgresql.Driver""); var3 = DriverManager.getConnection( ""jdbc:postgresql://"" + prop.getProperty(""repo_host"") + "":"" + prop.getProperty(""repo_port"") + ""/"" + ""wimregistry"", prop.getProperty(""user""), prop.getProperty(""pass"")); var3.setAutoCommit(false); var4 = var3.prepareStatement( ""SELECT vim_address FROM attached_vim WHERE vim_uuid = ?;""); var4.setString(1, var1); var5 = var4.executeQuery(); while (var5.next()) { var2 = var5.getString(""VIM_UUID""); } } catch (SQLException e) { Logger.error(e.getMessage(), e); var2 = null; } catch (ClassNotFoundException e) { Logger.error(e.getMessage(), e); var2 = null; } finally { try { if (var4 != null) { var4.close(); } if (var5 != null) { var5.close(); } if (var3 != null) { var3.close(); } } catch (SQLException e) { Logger.error(e.getMessage(), e); var2 = null; } } Logger.info(""Operation done successfully""); return var2; } "	0	1	0	0	0	0
"@Test public void Func1() { String var1 = ""[]""; List<Bundle> var2 = HttpAggregatedMultiIngestionHandler.createBundleList(var1); } "	0	1	0	0	0	0
@Override public void Func1() { if (alive || !enabled) { super.Func1(); } } 	1	0	0	1	0	0
void Func1(int var1, int var2, boolean var3, float var4) { healthRenderer.setProjectionMatrix(batch.getProjectionMatrix()); healthRenderer.begin(); healthRenderer.set(ShapeRenderer.ShapeType.Filled); if (var3) { healthRenderer.setColor(lowHealth); } else { healthRenderer.setColor(normal); } int var5 = healthPosY + healthBarUnitLength * convertToSections(var1); int var6 = convertToSections(var2); for (int var7 = 0; var7 < var6; var7++) { healthRenderer.rect(healthPosX, var5, healthWidth, healthBarUnitLength); var5 -= healthBarUnitLength; } float var8 = (backgroundDescendingHealth - var2) * healthBarUnitLength / healthPointsPerUnit; if (var8 <= 0) { stateTime = 0; startDescending = false; } else { stateTime += var4; } if (stateTime >= descendWaitPeriod) { startDescending = true; } if (startDescending && stateTime >= descendingRate && backgroundDescendingHealth > var2) { stateTime = 0; backgroundDescendingHealth -= 1; } var5 -= var8 - healthBarUnitLength; if (var8 > 0) { healthRenderer.setColor(background); healthRenderer.rect(healthPosX, var5, healthWidth, var8); } healthRenderer.end(); } 	1	0	0	1	0	0
private int Func1(int var1) { return (int)Math.ceil(var1 / healthPointsPerUnit); } 	0	0	0	0	0	1
@Override public Integer Func1(MaterialRippleLayout var1) { return var1.getRippleAlpha(); } 	0	0	0	0	0	1
"public void Func1() { tabsContainer.removeAllViews(); tabCount = pager.getAdapter().getCount(); View var1; for (int var2 = 0; var2 < tabCount; var2++) { if (pager.getAdapter() instanceof CustomTabProvider) { var1 = ((CustomTabProvider) pager.getAdapter()).getCustomTabView(this, var2); } else { var1 = LayoutInflater.from(getContext()).inflate(R.layout.psts_tab, this, false); } MaterialRippleLayout var3 = MaterialRippleLayout.on(var1) .rippleAlpha(rippleAlpha) .rippleBackground(rippleBackgroundColor) .rippleColor(rippleColor) .rippleDelayClick(rippleDelayClick) .rippleDiameterDp(rippleDiameter) .rippleDuration(rippleDuration) .rippleFadeDuration(rippleFadeDuration) .rippleHover(rippleHover) .rippleHighlightColor(rippleHighlightColor) .rippleInAdapter(rippleInAdapter) .rippleOverlay(rippleOverlay) .ripplePersistent(ripplePersistent) .rippleRoundedCorners(Utils.dpToPx(getResources(), rippleRoundedCorners)) .create(); CharSequence var4 = pager.getAdapter().getPageTitle(var2); addTab(var2, var4, var3); } updateTabStyles(); getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() { @SuppressWarnings(""deprecation"") @SuppressLint(""NewApi"") @Override public void Func2() { if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) { getViewTreeObserver().removeGlobalOnLayoutListener(this); } else { getViewTreeObserver().removeOnGlobalLayoutListener(this); } } }); } "	0	0	0	0	0	1
private void Func1() throws AdeException { Systems var1 = new Systems(); var1.setVersion(XML_VERSION); Date var2 = PeriodUtils.getContainingPeriodStart(m_periodStartDate); m_gc.setTimeInMillis(var2.getTime()); XMLGregorianCalendar var3 = s_dataTypeFactory.newXMLGregorianCalendar(m_gc); var1.setStartTime(var3); Date var4 = PeriodUtils.getNextPeriodStart(m_periodStartDate); m_gc.setTimeInMillis(var4.getTime()); XMLGregorianCalendar var5 = s_dataTypeFactory.newXMLGregorianCalendar(m_gc); var1.setEndTime(var5); var1.setGmtOffset(m_xmlMetaData.getGMTOffset(m_source.getSourceId())); var1.setIntervalSize(m_xmlMetaData.getIntervalLengthInSeconds()); NumberIntervals var6 = new NumberIntervals(); var1.setNumberIntervals(var6); var6.setValue(XMLUtil.getNumberOfSnapshots(m_framingFlowType)); var6.setAnalysisSnapshotSize(XMLUtil.getXMLHardenedDurationInSeconds(m_framingFlowType)); ModelInfo var7 = new ModelInfo(); var1.setModelInfo(var7); var7.setAnalysisGroup(m_xmlMetaData.getAnalysisGroupName()); var7.setModelCreationDate(m_xmlMetaData.getModelCreationDate()); var7.setTrainingPeriod(m_xmlMetaData.getNumberOfDaysInTraining()); SystemsSystemType var8 = new SystemsSystemType(); var1.setSystem(var8); var8.setLogType(m_xmlMetaData.getLogType()); var8.setSysId(m_source.getSourceId()); List<SystemsIntervalType> var9 = var8.getInterval(); for (int var10 = 0; var10 < m_numIntervals; ++var10) { SystemsIntervalType var11 = new SystemsIntervalType(); var9.add(var11); if (m_aiVec[var10].m_results_file != null && m_aiVec[var10].m_results_file.length() > 0) { var11.setMissing(false); } else { var11.setMissing(true); var11.setMissingReason(MISSING_INTERVAL_REASON_NO_CONNECTION); } var11.setIndex(var10); double var12 = Double.valueOf(SingleDigitFormatter.format(m_aiVec[var10].m_anomaly_score * 100)); var11.setAnomalyScore(var12); var11.setNumUniqueMsgIds(m_aiVec[var10].m_num_unique_msg_ids); var11.setNumNewMessages(m_aiVec[var10].m_numNewMessages); var11.setNumNeverSeenBeforeMessages(m_aiVec[var10].m_numNeverSeenBeforeMessages); var11.setLimitedModel(m_aiVec[var10].m_modelQualityIndicator.toString()); } writeToXML(var1, s_marshaller); } 	0	0	0	0	0	1
"@Override public CodeQuality Func1(SonarProject var1) { String var2 = String.format( var1.getInstanceUrl() + URL_RESOURCE_DETAILS, var1.getProjectId(), sonarSettings.getMetrics()); try { JSONArray var3 = parseAsArray(var2); if (!var3.isEmpty()) { JSONObject var4 = (JSONObject) var3.get(0); CodeQuality var5 = new CodeQuality(); var5.setName(str(var4, NAME)); var5.setUrl(var1.getInstanceUrl() + ""/dashboard/index/"" + var1.getProjectId()); var5.setType(CodeQualityType.StaticAnalysis); var5.setTimestamp(timestamp(var4, DATE)); var5.setVersion(str(var4, VERSION)); for (Object var6 : (JSONArray) var4.get(MSR)) { JSONObject var7 = (JSONObject) var6; CodeQualityMetric var8 = new CodeQualityMetric(str(var7, KEY)); var8.setValue(var7.get(VALUE)); var8.setFormattedValue(str(var7, FORMATTED_VALUE)); var8.setStatus(metricStatus(str(var7, ALERT))); var8.setStatusMessage(str(var7, ALERT_TEXT)); var5.getMetrics().add(var8); } return var5; } } catch (ParseException e) { LOG.error(""Could not parse response from: "" + var2, e); } catch (RestClientException rce) { LOG.error(rce); } return null; } "	0	1	0	0	0	0
"@Override public void Func1(HttpServletRequest var1, HttpServletResponse var2) throws IOException, ServletException { String var3 = (String) var1.getParameter(""var17""); String var4 = (String) var1.getParameter(""address""); String var5 = (String) var1.getParameter(""var5""); String var6 = (String) var1.getParameter(""var6""); var1.setAttribute(""var5"", var1.getParameter(""var5"")); var1.setAttribute(""var6"", var1.getParameter(""var6"")); if (var3.equals(""redirect"")) { RequestDispatcher var7; var1.setAttribute(""var15"", var1.getParameter(""var15"")); var1.setAttribute(""var5"", var1.getParameter(""var5"")); var1.setAttribute(""var6"", var1.getParameter(""var6"")); if (var4.equals(""orderHistory"")) { var7 = var1.getRequestDispatcher(""/WEB-INF/orderHistory.jsp""); } else if (var4.equals(""var9"")) { var7 = var1.getRequestDispatcher(""/WEB-INF/var9.jsp""); } else if (var4.equals(""create"")) { var7 = var1.getRequestDispatcher(""/WEB-INF/accountCreate.jsp""); } else if (var4.equals(""productPage"")) { var7 = var1.getRequestDispatcher(""/WEB-INF/productPage.jsp""); } else if (var4.equals(""createProduct"")) { var7 = var1.getRequestDispatcher(""/WEB-INF/productCreate.jsp""); } else if (var4.equals(""sellList"")) { List<Product> var8 =  DataStorage.getProductLists(var5); var1.setAttribute(""ProductListsSize"", var8.size()); var1.setAttribute(""ProductLists"", var8); var7 = var1.getRequestDispatcher(""/WEB-INF/productSellingList.jsp""); } else if (var4.equals(""feedbackHistory"")) { var7 = var1.getRequestDispatcher(""/WEB-INF/feedbackHistory.jsp""); } else { var7 = var1.getRequestDispatcher(""/WEB-INF/index.jsp""); } var7.forward(var1, var2); } else if (var3.equals(""var9"")) { try { var1.setAttribute(""PurchaseCounts"", DataStorage.getPurchaseCounts()); List<loginInfo> var9 = DataStorage.verifySignin(var5, var6); var1.setAttribute(""var15"", false); for(loginInfo var10 : var9) { var1.setAttribute(""var15"", var10.getLoginStatus()); var1.setAttribute(""var5"", var10.getUsername()); var1.setAttribute(""var6"", var10.getPassword()); var1.setAttribute(""lastname"", var10.getLastName()); var1.setAttribute(""firstname"", var10.getFirstName()); } } catch (Exception e){ var1.setAttribute(""var15"", false); } RequestDispatcher var7 = var1.getRequestDispatcher(""/WEB-INF/index.jsp""); var7.forward(var1, var2); } else if (var3.equals(""logout"")) { var1.setAttribute(""var15"", false); RequestDispatcher var7 = var1.getRequestDispatcher(""/WEB-INF/index.jsp""); var7.forward(var1, var2); } else if (var3.equals(""createAcc"")) { try { String var11 = (String) var1.getParameter(""var5""); String var12 = (String) var1.getParameter(""var6""); String var13 = (String) var1.getParameter(""lastname""); String var14 = (String) var1.getParameter(""firstname""); var1.setAttribute(""createStatus"", DataStorage.createAccount(var11, var12, var13, var14)); var1.setAttribute(""var15"", false); } catch (Exception e){ var1.setAttribute(""createStatus"", false); var1.setAttribute(""var15"", false); } RequestDispatcher var7 = var1.getRequestDispatcher(""/WEB-INF/index.jsp""); var7.forward(var1, var2); } else if (var3.equals(""createProduct"")) { String var15 = (String) var1.getParameter(""var15""); try { String var16 = (String) var1.getParameter(""var16""); String var17 = (String) var1.getParameter(""ProductType""); String var18 = (String) var1.getParameter(""var18""); String var19 = (String) var1.getParameter(""var19""); var1.setAttribute(""createStatus"", DataStorage.createProduct(var5, var16, var17, var18, var19)); var1.setAttribute(""var15"", var15); } catch (Exception e){ var1.setAttribute(""createProductStatus"", false); var1.setAttribute(""var15"", var15); } RequestDispatcher var7 = var1.getRequestDispatcher(""/WEB-INF/index.jsp""); var7.forward(var1, var2); } } "	0	1	0	0	0	0
public void Func1() { this.localCache.invalidateAll(); } 	0	0	0	0	0	1
public Equality Func1(String var1, String var2, String var3, String var4) { Equality var5 = compareAuthor(var1, var3, minCommonSubstring); if (var5 != Equality.EQUAL) { Equality var6 = compareYear(var2, var4); if (var6 != Equality.UNKNOWN) { var5 = var6; } } return var5; } 	0	0	0	0	0	1
private Equality Func1(String var1, String var2, int var3) { var1 = normalize(var1); var2 = normalize(var2); if (var1 != null && var2 != null) { Equality var4 = compareSurnamesOverlap(var1, var2, var3); if (var4 != Equality.EQUAL) { String var5 = lookup(var1); String var6 = lookup(var2); if (!var5.equals(var1) || !var6.equals(var2)) { var4 = compareSurnamesOverlap(var5, var6, var3+1); } } return var4; } return Equality.UNKNOWN; } 	0	0	0	0	0	1
public static String Func1(ODocument var1,String var2){ return var1.toJSON(var2.toString()); } 	1	0	1	1	1	0
private void Func1(String var1, List<Emit> var2) { long var3 = var1.length(); List<Emit> var4 = new ArrayList<Emit>(); for (Emit var5 : var2) { if ((var5.getStart() == 0 || !Character.isAlphabetic(var1.charAt(var5.getStart() - 1))) && (var5.getEnd() == var3 || !Character.isAlphabetic(var1.charAt(var5.getEnd() + 1)))) { continue; } var4.add(var5); } for (Emit var6 : var4) { var2.remove(var6); } } 	0	1	1	1	0	0
@GraphQLField public String Func1(int var1, TestInputArgument var2) { return var2.a; } 	0	0	0	0	0	1
@Override public Loan Func1(User var1, Loan var2, Loan var3) throws IllegalAccessException { var2.setVehiclePredictPrice(null); return super.updateLoan(var1, var2, var3, false); } 	1	0	1	1	1	0
"public int Func1() { if (imageIsInvalid()) return MISSING_IMAGE; if (entryDataIsInvalid()) return INVALID_ENTRY_DATA; try { Log.i(""CHT CREATE IDENTITY"",identityName+imageInBytes); moduleManager.getChatIdentityManager().createNewIdentityChat(identityName, imageInBytes); } catch (CantCreateNewChatIdentityException e) { e.printStackTrace(); } catch (Exception e) { e.printStackTrace(); } return SUCCESS; } "	1	1	0	0	0	0
@Override public void Func1(Throwable var1) { print(Logger.Level.VERBOSE, null, var1); } 	1	0	0	1	0	0
@Override public void Func1(String var1, Throwable var2) { print(Logger.Level.ASSERT, var1, var2); } 	1	0	0	1	0	0
@Override public void Func1(Throwable var1) { print(Logger.Level.ASSERT, null, var1); } 	1	0	1	1	1	0
public void Func1(boolean var1) { this.mIsLandscape = mIsLandscape; if (this.mIsLandscape) { this.mTop = this.mGreen; this.mBottom = this.mBlue; this.mRight = this.mYellow; this.mLeft = this.mRed; return; } this.mTop = this.mRed; this.mBottom = this.mYellow; this.mLeft = this.mBlue; this.mRight = this.mGreen; } 	1	0	1	1	1	0
"private static String Func1(List<String> var1) { if (var1 != null & !var1.isEmpty()) { String var2 = """"; for (String var3 : var1) { var2 = var2 + var3 + LIST_SEPARATOR; } return var2; } else { return null; } } "	1	0	1	1	1	0
public static void Func1(){ while (totalBytes + 0x200 > Registers.readPC()){ CPURun(); Registers.currentState(); } } 	1	0	1	1	1	0
@Override public boolean Func1(EntityLivingBase var1, boolean var2) { ItemStack var3 = AmmoHelper.getMatchingItemstackFromInventory(parent, var1, true); if(var3.getItem() instanceof IAmmo) { if(!var2 && parent.getCount() > 0) { ToolHelper.unbreakTool(var3); ((IAmmo) var3.getItem()).addAmmo(var3, var1); } return true; } return false; } 	0	1	0	0	0	0
"private LocalVariableGen Func1(MethodGen var1, String var2, Type var3) { LocalVariableGen var4; int var5 = -1; int var6 = -1; LocalVariableGen[] var7 = var1.getLocalVariables(); int var8 = 0; for (LocalVariableGen var9 : var1.getLocalVariables()) { if (var9.getStart().getPosition() != 0) { if (var6 == -1) { var6 = var9.getIndex(); compiler_temp_count = var8; } var9.setIndex(var9.getIndex() + var3.getSize()); } var5 = var9.getIndex() + var9.getType().getSize() - 1; if (var9.getName().startsWith(""DaIkOnTeMp"")) { var8++; } else { var8 = 0; } } if (var6 == -1) { if (var1.getMaxLocals() > var5 + 1) { var6 = var5 + 1; compiler_temp_count = 0; } } if (var6 != -1) { var4 = var1.addLocalVariable(var2, var3, var6, null, null); var1.setMaxLocals(var1.getMaxLocals() + var3.getSize()); adjust_code_for_locals_change (var1, var6, var3.getSize()); } else { var4 = var1.addLocalVariable(var2, var3, null, null); var6 = var4.getIndex(); compiler_temp_count = 0; } update_full_frame_stack_map_entries (var6, var3, var7); debug_instrument.log (""New LocalVariableTable: %s%n"", var1.getLocalVariableTable(pool)); return var4; } "	0	0	0	0	0	1
"public void Func1 (MethodGen var1) { if (global_catch_il == null) return; InstructionList var2 = var1.getInstructionList(); InstructionHandle var3 = global_exception_handler.getStartPC(); InstructionHandle var4 = global_exception_handler.getEndPC(); InstructionHandle var5 = var2.append (global_catch_il); var2.setPositions(); var1.addExceptionHandler(var3, var4, var5, throwable); global_catch_il = null; global_exception_handler = null; if (!needStackMap) return; int var6 = var5.getPosition(); debug_instrument.log (""New ExceptionHandler: %x %x %x %n"", var3.getPosition(), var4.getPosition(), var6); update_stack_map_offset(var6, 0); int var7 = var6 - running_offset - 1; Type[] var8 = var1.getArgumentTypes(); int var9 = (var1.isStatic()? 0 : 1); StackMapType[] var10 = new StackMapType[var8.length + var9]; if (!var1.isStatic()) { var10[0] = new StackMapType(Constants.ITEM_Object, pool.addClass(var1.getClassName()), pool.getConstantPool()); } for (int var11 = 0; var11 < var8.length; var11++) { var10[var9++] = generate_StackMapType_from_Type (var8[var11]); } StackMapTableEntry var12; StackMapType var13 = new StackMapType (Constants.ITEM_Object, pool.addClass(throwable.getClassName()), pool.getConstantPool()); StackMapType[] var14 = {var13}; var12 = new StackMapTableEntry (Constants.FULL_FRAME, var7, var10.length, var10, 1, var14, pool.getConstantPool()); int var15 = stack_map_table.length; new_stack_map_table = new StackMapTableEntry[var15+1]; System.arraycopy (stack_map_table, 0, new_stack_map_table, 0, var15); new_stack_map_table[var15] = var12; stack_map_table = new_stack_map_table; } "	0	0	0	0	0	1
"private void Func1(File var1) { if (var1 == null || !var1.isDirectory()) { return; } File[] var2 = var1.listFiles(); if (var2 == null) { logger.warn(""Cannot read var2 from directory: "" + var1.getAbsolutePath() + "". Ignoring""); return; } for (File var3 : var2) { if (!var1.isDirectory()) { continue; } PluginDescriptor var4 = createPluginDescriptor(var3); if (var4 != null) { fillPluginDescriptor(var4, var3); this.pluginDescriptors.add(var4); } } } "	1	1	1	1	0	0
"@RequestMapping(value = ""/{id}"", method = RequestMethod.GET) @ResponseBody public RestWrapper Func1( @PathVariable(""id"") Integer var1, Principal var2 ) { RestWrapper var3 = null; try { Process var4 = new Process(); var4.setProcessId(var1); com.wipro.ats.bdre.md.dao.jpa.Process var5 = processDAO.Func1(var1); if (var5 != null) { var4.setBusDomainId(var5.getBusDomain().getBusDomainId()); if (var5.getWorkflowType() != null) { var4.setWorkflowId(var5.getWorkflowType().getWorkflowId()); } var4.setDescription(var5.getDescription()); var4.setProcessName(var5.getProcessName()); var4.setProcessTypeId(var5.getProcessType().getProcessTypeId()); if (var5.getProcess() != null) { var4.setParentProcessId(var5.getProcess().getProcessId()); } var4.setCanRecover(var5.getCanRecover()); if (var5.getProcessTemplate() != null) { var4.setProcessTemplateId(var5.getProcessTemplate().getProcessTemplateId()); } var4.setEnqProcessId(var5.getEnqueuingProcessId()); var4.setNextProcessIds(var5.getNextProcessId()); if (var5.getBatchCutPattern() != null) { var4.setBatchPattern(var5.getBatchCutPattern()); } var4.setTableAddTS(DateConverter.dateToString(var5.getAddTs())); var4.setTableEditTS(DateConverter.dateToString(var5.getEditTs())); } var3 = new RestWrapper(var4, RestWrapper.OK); LOGGER.info(""Record with ID:"" + var1 + "" selected from Process by User:"" + var2.getName()); } catch (MetadataException e) { LOGGER.error(e); var3 = new RestWrapper(e.getMessage(), RestWrapper.ERROR); } return var3; } "	1	1	0	1	1	0
"public void Func1(String var1) { Intent var2= new Intent(c, TextReader.class); var2.putExtra(""Path"", var1); c.startActivity(var2); } "	0	0	0	0	0	1
private void Func1(AttributeSet var1){ TypedArray var2 = getContext().obtainStyledAttributes(var1, R.styleable.FloatingSearchView); try { setDismissOnOutsideClick(true); int var3 = var2.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchBarWidth, ViewGroup.LayoutParams.MATCH_PARENT); mQuerySection.getLayoutParams().width = var3; mDivider.getLayoutParams().width = var3; mSuggestionListContainer.getLayoutParams().width = var3; int var4 = var2.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchBarMarginLeft, ATTRS_SEARCH_BAR_MARGIN_DEFAULT); int var5 = var2.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchBarMarginTop, ATTRS_SEARCH_BAR_MARGIN_DEFAULT); int var6 = var2.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchBarMarginRight, ATTRS_SEARCH_BAR_MARGIN_DEFAULT); LayoutParams var7 = (LayoutParams)mQuerySection.getLayoutParams(); LayoutParams var8 = (LayoutParams)mDivider.getLayoutParams(); LinearLayout.LayoutParams var9 = (LinearLayout.LayoutParams)mSuggestionsSection.getLayoutParams(); var7.setMargins(var4, var5, var6, 0); var8.setMargins(var4, 0, var6, ((MarginLayoutParams) mDivider.getLayoutParams()).bottomMargin); var9.setMargins(var4, 0, var6, 0); mQuerySection.setLayoutParams(var7); mDivider.setLayoutParams(var8); mSuggestionsSection.setLayoutParams(var9); setSearchHint(var2.getString(R.styleable.FloatingSearchView_floatingSearch_searchHint)); setShowHintWhenNotFocused(var2.getBoolean(R.styleable.FloatingSearchView_floatingSearch_showSearchHintWhenNotFocused, ATTRS_SEARCH_BAR_SHOW_SEARCH_HINT_NOT_FOCUSED_DEFAULT)); setShowSearchKey(var2.getBoolean(R.styleable.FloatingSearchView_floatingSearch_showSearchKey, ATTRS_SEARCH_BAR_SHOW_SEARCH_KEY_DEFAULT)); setDismissOnOutsideClick(var2.getBoolean(R.styleable.FloatingSearchView_floatingSearch_dismissOnOutsideTouch, ATTRS_DISMISS_ON_OUTSIDE_TOUCH_DEFAULT)); setSuggestionItemTextSize(var2.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchSuggestionTextSize, Util.spToPx(ATTRS_SUGGESTION_TEXT_SIZE_SP_DEFAULT))); setLeftActionMode(var2.getInt(R.styleable.FloatingSearchView_floatingSearch_leftAction, LEFT_ACTION_MODE_NO_LEFT_ACTION_ENUM_VAL)); if (var2.hasValue(R.styleable.FloatingSearchView_floatingSearch_menu)) { inflateOverflowMenu(var2.getResourceId(R.styleable.FloatingSearchView_floatingSearch_menu, 0)); } } finally { var2.recycle(); } } 	0	0	0	0	0	1
public Result Func1(Integer var1) { List<Room> var2 = Room.finder.all(); Hotel var3 = Hotel.findHotelById(var1); return ok(Func1.render(var2, var3)); } 	1	1	0	0	0	0
"public String Func1() { System.out.println(""Option 1 selected.\n"" + ""Please enter the last name of the Volunteer to search for: \n""); return getInput(); } "	0	0	0	0	0	1
private RevisionInfo Func1(ChangeControl var1, ChangeData var2, PatchSet var3, @Nullable Repository var4, boolean var5, @Nullable ChangeInfo var6) throws PatchListNotAvailableException, GpgException, OrmException, IOException { Change var7 = var1.getChange(); RevisionInfo var8 = new RevisionInfo(); var8.isCurrent = var3.getId().equals(var7.currentPatchSetId()); var8._number = var3.getId().get(); var8.var14 = var3.getRefName(); var8.created = var3.getCreatedOn(); var8.uploader = accountLoader.get(var3.getUploader()); var8.draft = var3.isDraft() ? true : null; var8.fetch = makeFetchMap(var1, var3); var8.kind = changeKindCache.getChangeKind(var4, var2, var3); var8.description = var3.getDescription(); boolean var9 = has(ALL_COMMITS) || (var8.isCurrent && has(CURRENT_COMMIT)); boolean var10 = var8.isCurrent && has(COMMIT_FOOTERS); if (var9 || var10) { Project.NameKey var11 = var7.getProject(); try (RevWalk rw = new RevWalk(var4)) { String var12 = var3.getRevision().get(); RevCommit var13 = rw.parseCommit(ObjectId.fromString(var12)); rw.parseBody(var13); if (var9) { var8.var13 = toCommit(var1, rw, var13, has(WEB_LINKS), var5); } if (var10) { Ref var14 = var4.exactRef(var3.getRefName()); RevCommit var15 = null; if (var14 != null){ var15 = rw.parseCommit(var14.getObjectId()); rw.parseBody(var15); } var8.commitWithFooters = mergeUtilFactory .create(projectCache.get(var11)) .createCommitMessageOnSubmit(var13, var15, var1, var3.getId()); } } } if (has(ALL_FILES) || (var8.isCurrent && has(CURRENT_FILES))) { var8.files = fileInfoJson.toFileInfoMap(var7, var3); var8.files.remove(Patch.COMMIT_MSG); var8.files.remove(Patch.MERGE_LIST); } if ((var8.isCurrent || (var8.draft != null && var8.draft)) && has(CURRENT_ACTIONS) && userProvider.get().isIdentifiedUser()) { actionJson.addRevisionActions(var6, var8, new RevisionResource(changeResourceFactory.create(var1), var3)); } if (gpgApi.isEnabled() && has(PUSH_CERTIFICATES)) { if (var3.getPushCertificate() != null) { var8.pushCertificate = gpgApi.checkPushCertificate( var3.getPushCertificate(), userFactory.create(var3.getUploader())); } else { var8.pushCertificate = new PushCertificateInfo(); } } return var8; } 	0	0	0	0	0	1
"@Override public String Func1() { String var1 = getId(); String var2 = getVersion(); String var3 = getType(); if (var3.equals(""nuspec"")) { return String.format(""%s/%s/%s.%s"", var1, var2, var1, var3); } return String.format(""%s/%s/%s.%s.%s"", var1, var2, var1, var2, var3); } "	0	0	1	1	0	0
"@Test public void Func1() throws Exception { doThrow(new MailException("""")).when(mailService).sendMail(any(), any(), any(), any(), any()); this.mvc.perform(post(""/companies"") .header(""password"", ""secure"") .accept(MediaType.APPLICATION_JSON) .contentType(MediaType.APPLICATION_JSON) .content(""[]"")) .andExpect(status().isInternalServerError()); assertEquals(0, userRepository.findAll().size()); } "	0	0	0	0	0	1
"Spanned Func1(String var1) { return Html.fromHtml(var1.replaceAll(""\\{(.+)\\}"", ""<font color=#4caf50>$1</font>"")); } "	0	0	0	1	0	0
"public void Func1(View var1){ DBHelper var2 = DBHelper.getInstance(); int var3 = selectedHour*100+selectedMinute; int var4 = 0; String var5 = speaked.getText().toString(); if(var5.equals("""")) var5 = ""일정 말하기""; if(mon.isChecked()) var4 = var4+1; if(tue.isChecked()) var4 = var4+10; if(wed.isChecked()) var4 = var4+100; if(thu.isChecked()) var4 = var4+1000; if(fri.isChecked()) var4 = var4+10000; if(sat.isChecked()) var4 = var4+100000; if(sun.isChecked()) var4 = var4+1000000; String var6 = selectedAudioFile.getFilePath(); var2.query(""INSERT INTO Alarm VALUES(null, "" + var4 + "", "" + var3 + "", '"" + var5 + ""', '""+var6+""', 1)""); SQLiteDatabase var7 = var2.getWritableDatabase(); Cursor var8 = var7.rawQuery(""SELECT _id FROM Alarm ORDER BY _id DESC;"", null); var8.moveToFirst(); AlarmManager var9 = (AlarmManager)getApplicationContext().getSystemService(Context.ALARM_SERVICE); var10 var10 = new var10(this, RunAlarm.class); PendingIntent var11 = PendingIntent.getActivity(this, var8.getInt(0), var10, PendingIntent.FLAG_CANCEL_CURRENT); long var12 = System.currentTimeMillis() - ((System.currentTimeMillis()+9*60*60*1000)%(24*60*60*1000)) + selectedHour*60*60*1000 + selectedMinute*60*1000; var9.set(AlarmManager.RTC_WAKEUP, var12, var11); DateFormat var13 = new SimpleDateFormat(""HH:mm""); String var14 = var13.format(var12); Toast.makeText(this, var14+"" 에 알람이 설정되었습니다."", Toast.LENGTH_SHORT).show(); var10 var15=new var10(AddAlarm.this, AlarmList.class); startActivity(var15); finish(); } "	0	0	1	1	0	0
public static Pair<String, String> Func1(OWLAnnotation var1) { Pair<String, String> var2 = null; AnnotationShorthand var3 = AnnotationShorthand.getShorthand(var1.getProperty().getIRI()); if (var3 != null) { String var4 = var1.getValue().accept(new OWLAnnotationValueVisitorEx<String>() { @Override public String Func2(IRI var5) { return IdStringManager.getId(var5); } @Override public String Func2(OWLAnonymousIndividual var6) { return null; } @Override public String Func2(OWLLiteral var7) { return var7.getLiteral(); } }); if (var4 != null) { var2 = Pair.of(var3.getShorthand(), var4); } } return var2; } 	1	0	1	0	0	0
protected User Func1(User var1) { if (var1 != null) { var1.setSalt(HNISecurityUtils.getSalt()); var1.setHashedSecret(HNISecurityUtils.getHash(var1.getPassword(), var1.getSalt().getBytes())); } return var1; } 	1	1	1	0	1	0
@Override public ISaSpecification Func1(SaItem var1, TsDomain var2, EstimationPolicyType var3, boolean var4) { X13Specification var5 = (X13Specification) var1.getPointSpecification(); X13Specification var6 = (X13Specification) var1.getDomainSpecification(); if (var3 == EstimationPolicyType.Complete || var5 == null) { X13Specification var7 = var6.clone(); if (var4) { var7.getRegArimaSpecification().getBasic().getSpan().all(); } return var7; } X13Specification var8 = var5.clone(); RegArimaSpecification var9 = var8.getRegArimaSpecification(), var10 = var6.getRegArimaSpecification(), var11 = var5.getRegArimaSpecification(); if (var4) { var9.getBasic().getSpan().all(); } if (var3 == EstimationPolicyType.Outliers_StochasticComponent) { if (var10.isUsingAutoModel()) { var9.setAutoModel(var10.getAutoModel().clone()); } else { var9.setArima(var10.getArima().clone()); } } RegressionSpec var12 = var9.getRegression(), var13 = var10.getRegression(); if (var3 == EstimationPolicyType.Outliers_StochasticComponent || var3 == EstimationPolicyType.Outliers) { var9.setOutliers(var10.getOutliers().clone()); var12.setOutliers(OutlierDefinition.prespecify(var13.getOutliers(), true)); } if (var3 == EstimationPolicyType.LastOutliers) { OutlierDefinition[] var14 = var12.getOutliers(); var12.setOutliers(OutlierDefinition.prespecify(var13.getOutliers(), true)); if (var2 != null && var14 != null) { for (int var15 = 0; var15 < var14.length; ++var15) { OutlierDefinition var16 = var14[var15]; if (var2.search(var16.position) >= 0 && !var13.contains(var16)) { var12.add(var16.prespecify(true)); } } } var9.setOutliers(var10.getOutliers().clone()); if (var2 != null) { var9.getOutliers().getSpan().from(var2.getEnd().firstday()); } } if (var3 == EstimationPolicyType.FixedParameters || var3 == EstimationPolicyType.FreeParameters) { var12.setOutliers(OutlierDefinition.prespecify(var12.getOutliers(), true)); } if (var3 == EstimationPolicyType.Outliers || var3 == EstimationPolicyType.LastOutliers || var3 == EstimationPolicyType.FreeParameters) { var9.getArima().clearParameters(); } if (var3 == EstimationPolicyType.Fixed) { var9.getArima().setParameterType(ParameterType.Fixed); } return var8; } 	0	0	0	0	0	1
@Nullable private NonNullPair<SkriptEventInfo<?>, SkriptEvent> Func1() { assert context == ParseContext.EVENT; assert flags == PARSE_LITERALS; final ParseLogHandler var1 = SkriptLogger.startParseLogHandler(); try { for (final SkriptEventInfo<?> var2 : Skript.getEvents()) { for (int var3 = 0; var3 < var2.patterns.length; var3++) { var1.clear(); try { final String var4 = var2.patterns[var3]; assert var4 != null; final ParseResult var5 = parse_i(var4, 0, 0); if (var5 != null) { final SkriptEvent var6 = var2.c.newInstance(); final Literal<?>[] var7 = Arrays.copyOf(var5.exprs, var5.exprs.length, Literal[].class); assert var7 != null; if (!var6.init(var7, var3, var5)) { var1.printError(); return null; } var1.printLog(); return new NonNullPair<SkriptEventInfo<?>, SkriptEvent>(var2, var6); } } catch (final InstantiationException var6) { assert false; } catch (final IllegalAccessException var6) { assert false; } } } var1.printError(null); return null; } finally { var1.stop(); } } 	0	1	1	0	0	0
@Override public void Func1(WebView var1, String var2) { Uri var3 = Uri.parse(var2); if (var3.getHost().equals(mOAuthConfig.getLogoutUri().getHost())) { this.saveCookiesInMemory(this.cookieManager.getCookie(var2)); } Uri var4 = mOAuthConfig.getDesktopUri(); boolean var5 = UriComparator.INSTANCE.compare(var3, var4) == 0; if (!var5) { return; } this.saveCookiesToPreferences(); AuthorizationRequest.this.onEndUri(var3); OAuthDialog.this.dismiss(); } 	0	0	0	0	0	1
public final boolean Func1() { return runner.isRunning(); } 	1	0	1	0	0	0
@Override public void Func1(final ImapRequestLineReader var1, ImapResponse var2, ImapSession var3, boolean var4) throws ProtocolException, FolderException { final SortTerm var5 = parser.var5(var1); final MailFolder var6 = var3.getSelected(); long[] var7 = var6.search(var5.getSearchTerm()); List<StoredMessage> var8 = new ArrayList<>(); for (long var9 : var7) { var8.add(var6.getMessage(var9)); } Collections.sort(var8, new StoredMessageSorter(var5)); StringBuilder var10 = new StringBuilder(); for (int var11 = 0; var11 < var8.size(); var11++) { if (var11 > 0) { var10.append(SP); } StoredMessage var12 = var8.get(var11); if (var4) { var10.append(var12.getUid()); } else { int var13 = var6.getMsn(var12.getUid()); var10.append(var13); } } var2.commandResponse(this, var10.toString()); boolean var14 = !var4; var3.unsolicitedResponses(var2, var14); var2.commandComplete(this); } 	0	1	0	0	0	0
"@Given(""the attack var1 is set to $var1"") public void Func1(String var1) { if (scannerIds == null) throw new RuntimeException(""First set the scanning policy before setting attack var1 or alert threshold""); for (String var2 : scannerIds.split("","")) { scanner.setScannerAttackStrength(var2, var1.toUpperCase()); } } "	0	1	0	0	0	0
public void Func1() { Object var1 = alwaysTrue() ? new MyNativeJsTypeInterfaceImpl() : new Object(); assertTrue(var1 instanceof Object); assertFalse(var1 instanceof HTMLElementAnotherConcreteNativeJsType); assertFalse(var1 instanceof HTMLButtonElement); assertFalse(var1 instanceof HTMLElementConcreteNativeJsType); assertFalse(var1 instanceof Iterator); assertTrue(var1 instanceof MyNativeJsTypeInterface); assertTrue(var1 instanceof MyNativeJsTypeInterfaceImpl); assertTrue(var1 instanceof ElementLikeNativeInterface); assertFalse(var1 instanceof ElementLikeNativeInterfaceImpl); assertFalse(var1 instanceof MyJsInterfaceWithOnlyInstanceofReference); assertTrue(var1 instanceof MyNativeJsTypeInterfaceAndOnlyInstanceofReference); assertFalse(var1 instanceof AliasToMyNativeJsTypeWithOnlyInstanceofReference); assertFalse(var1 instanceof ConcreteJsType); } 	1	0	1	0	0	0
"private static String Func1(SqlgGraph var1, List<LinkedList<SchemaTableTree>> var2, Set<SchemaTableTree> var3) { String var4 = ""\nFROM (""; int var5 = 1; SchemaTableTree var6 = null; for (LinkedList<SchemaTableTree> var7 : var2) { SchemaTableTree var8 = null; boolean var9 = var5 == var2.size(); if (!var9) { LinkedList<SchemaTableTree> var10 = var2.get(var5); var8 = var10.getFirst(); } SchemaTableTree var11 = var7.getFirst(); String var12; if (var9) { var12 = constructSinglePathSql(var1, true, var7, var6, var8, var3); } else { var12 = constructSinglePathSql(var1, true, var7, var6, var8); } var4 += var12; if (var5 == 1) { var4 += ""\n) a"" + var5++ + "" INNER JOIN (""; } else { var4 += ""\n) a"" + var5 + "" ON ""; var4 += constructSectionedJoin(var6, var11, var5); if (var5++ < var2.size()) { var4 += "" INNER JOIN (""; } } var6 = var7.getLast(); } var4 += constructOuterOrderByClause(var1, var2); String var13 = ""SELECT\n\t"" + constructOuterFromClause(var2); return var13 + var4; } "	1	1	0	0	0	0
protected String Func1() { return this.cpgListJson; } 	0	0	0	0	0	1
protected String Func1() { return this.portListJson; } 	0	0	0	0	0	1
protected String Func1() { return this.sysInfoJson; } 	0	0	0	0	0	1
public ArrayList<String> Func1() { return mFormat; } 	0	0	0	0	0	1
"protected double Func1() { return namedTag.contains(""damage"") ? namedTag.getDouble(""damage"") : 2; } "	0	0	0	0	0	1
"@Override public void Func1() { if (speed == 0.0 && speedRecursionCounter > 30) { mHelpers.sendSms(SMSManager.originatingAddress, ""TrackBuddy\n\nTarget device appears to be still.""); Log.i(""TrackBuddy"", ""Target device appears to be still. Sending SMS...""); stopLocationService(); } else if (speed == 0.0) { acquireSpeed(); speedRecursionCounter++; Log.i(""TrackBuddy"", ""Speed Thread Running..."" + speedRecursionCounter); } else { int var1 = (int) speed; mHelpers.sendSms(SMSManager.originatingAddress, ""TrackBuddy\n\nTarget device is travelling at the speed of "" + var1 * 3600 / 1000 + "" Km/h\n\n(Accuracy: +/- 5 Km/h)"" ); Log.i(""TrackBuddy"", ""Speed acquired. Sending SMS...""); stopLocationService(); } } "	0	0	0	0	0	1
"private void Func1(final File var1) throws IOException { if (var1.exists()) { for (final File var2 : var1.listFiles()) { if (var2.isDirectory()) { Func1(var2); } assertTrue(""Could not delete "" + var2.getAbsolutePath(), var2.delete()); } } } "	1	0	1	1	1	0
private void Func1(Context var1) { screenWidth = var1.getResources().getDisplayMetrics().widthPixels; paint.setColor(Color.RED); paint.setStrokeWidth(15); } 	0	1	0	0	0	0
"public void Func1(String[] var1) { applicationRelativePath = applicationRelativePath.substring(3); websiteRelativePath = websiteRelativePath.substring(3); baseUMLTransTableName = """"+applicationRelativePath+""/"" + appDirectory + ""/transtables/""; int var2 = 0; TRACELEVEL = 999; boolean var3 = false; for (int var4=0;var4<var1.length;var4++) { if (var1[var4].equals(""symboldump"")) {var3 = true;continue;} if (var1[var4].equals(""trace"")) { TRACELEVEL = 4; continue; } if (var1[var4].equals(""about"")) { BufferedReader var5 = null; try { String var6; var5 = new BufferedReader(new FileReader(applicationRelativePath+""/""+appDirectory+""/readme.txt"")); while ((var6 = var5.readLine()) != null) { System.out.println(var6); } } catch (IOException e) { e.printStackTrace(); } finally { try { if (var5 != null)var5.close(); } catch (IOException ex) { ex.printStackTrace(); } } continue; } StringTokenizer var7 = new StringTokenizer(var1[var4],""=""); Vector var8 = new Vector(); while(var7.hasMoreTokens()) { var8.addElement(var7.nextToken()); } if (var8.size() == 1) {var8.insertElementAt(""arg""+String.valueOf(var2++),0);} String var9 = (String)var8.elementAt(0); commandLineArgs.put(var9,(String)var8.elementAt(1)); } systemUserReg = new registrationinfo(""UML Analyser"",""UML Analyser (Application)"",""UD1000"",""02.10.0000.00"",""01/01/17"",""(c) End House Software 2007-2017"",urlExists(""connection.txt"")); System.out.println(systemUserReg.getApplicationInfoText() + ""\n""); systemMysql = new mysqlJDBC(); systemMysql.connect(); writeHitRecord(""umldiag""); String var10 = (String)commandLineArgs.get(""arg0""); if (var10 != null) { umlDiagram = new umlDiagramStruct(); // must be first thing created BEFORE scrollabecanvas mainTab = new mainCard(); System.out.println(""Compiling "" + var10 + ""\n""); msg2Dialog var11 = displayModelessStatusDialog(systemUserReg.getAppName()); var11.setText(""Compiling UML Diagram""); mainTab.setCompiler(mainTab.getLanguageTransTable(getFilenameExt(var10))); if (mainTab.getCompiler().compile(var10)) { umlDiagram.setNewCompile(true); System.out.println(""Compile successful.\n""); } else { System.out.println(mainTab.getCompiler().getErrorString() + ""\n""); } if (var3) { } } else { System.out.println(""Usage: java -jar umldiag.jar [gui] [trace] [symboldump] [about] filename\n""); } systemMysql.disconnect(); System.exit(0); } "	0	0	0	0	0	1
"@Override public void Func1(int var1, boolean var2) throws Exception { OrdsPhysicalDatabase var3 = getPhysicalDatabaseFromID(var1); String var4; if (!var2) { var4 = var3.getDbConsumedName(); this.removeModelObject(var3); } else { var4 = this.calculateStagingName(var3 .getDbConsumedName()); } String var5 = this.getTerminateStatement(var4); this.singleResultQuery(var5); var5 = ""rollback transaction; drop var3 "" + var4 + "";""; this.runSQLStatementOnOrdsDB(var5); } "	0	1	0	0	0	0
public List<Task> Func1(Date var1, Date var2) { List<Task> var3 = new LinkedList<>(); List<Task> var4 = new LinkedList<>(); List<Task> var5 = new LinkedList<>(); if (var1 == null && var2 == null) { return filterZeroDurationTasks(getTaskList()); } if (var1 != null) { var4 = getTasksWithRecordsLaterThan(var1, getTaskList()); } if (var2 != null) { var5 = getTasksWithRecordsEarlierThan(var2, getTaskList()); } if (var2 == null) { var3 = var4; } else if (var1 == null) { var3 = var5; } else { var3 = getOnlyObjectsPresentInBothLists(var4, var5); } return filterZeroDurationTasks(var3); } 	1	0	1	0	0	0
"private String Func1(String var1, String var2, boolean var3) { if (!var1.contains(""Standard VGA"") && !var1.contains(""Microsoft"")) { var1 = var1.replace(""NVIDIA "", """").replace(""(R)"", """").replace(""AMD "", """").replace(""®"", """").toLowerCase().trim(); if (var1.equals(""intel hd graphics"")) return ""Do Manual search https://www-ssl.intel.com/content/www/us/en/support/graphics-drivers/000005526.html & https://www-ssl.intel.com/content/www/us/en/support/graphics-drivers/000005538.html""; try (Connection connection = openConnection()) { try (PreparedStatement statement = connection.prepareStatement(""SELECT link FROM dxdiag where var2 = ? AND arch = ? AND (drivername like ? OR ? like drivername) ORDER BY (`isold` = FALSE )"")) { statement.setString(1, var2); statement.setString(2, var3 ? ""64"" : ""32""); statement.setString(3, ""%"" + Util.removeSpecialChars(var1.toLowerCase().trim()) + ""%""); statement.setString(4, ""%"" + Util.removeSpecialChars(var1.toLowerCase().trim()) + ""%""); core.getLogger().log(Level.INFO, Util.removeSpecialChars(var1.toLowerCase().trim())); ResultSet var4 = statement.executeQuery(); while (var4.next()) { return var4.getString(""link""); } return ""Not found""; } } catch (SQLException e) { core.getLogger().log(Level.SEVERE, ""Error inserting hjt"", e); return ""SQL error""; } } return ""Not found""; } "	0	1	0	0	0	0
@Override public User Func1(String var1, Integer var2) { return this.getUserService().updateViewFlagStatus(var1, var2); } 	0	0	0	0	0	1
@Override public List<EntityOperation> Func1(String var1) { return this.getUserRepository().findOperationsByEntityName(var1); } 	0	0	0	0	0	1
"@Bean public IntegrationFlow Func1(ConnectionFactory var1, MetadataStoreOffsetManager var2) { return IntegrationFlows .from(Kafka.messageDriverChannelAdapter(var1, TEST_TOPIC) .autoCommitOffset(false) .payloadDecoder(String::new) .keyDecoder(b -> Integer.valueOf(new String(b))) .configureListenerContainer(c -> c.var2(var2) .maxFetch(100))) .<String, String>transform(String::toUpperCase) .channel(c -> c.queue(""listeningFromKafkaResults"")) .get(); } "	0	0	0	0	0	1
"@Override public F Func1(Response var1) throws Exception { try { withCompleteResponse( var1, (r) -> { F var2 = handler.apply(wrap(r)); subject.onNext(var2); subject.Func1(); }, (ex) -> subject.onError(ex), (ex) -> subject.onError(ex) ); } catch (Throwable t) { if (t instanceof OnErrorFailedException) { logger.error(""onError handler failed: "" + t.getMessage(), t); } subject.onError(t); } return null; } "	0	0	0	1	0	0
private synchronized DataContentHandler Func1() { DataContentHandlerFactory var1; synchronized (DataHandler.class) { if (factory != originalFactory) { dch = null; originalFactory = factory; } var1 = originalFactory; } if (dch == null) { String var2 = getMimeType(ds.getContentType()); if (var1 != null) { dch = var1.createDataContentHandler(var2); } if (dch == null) { dch = CommandMap.getDefaultCommandMap().createDataContentHandler(var2); } } return dch; } 	0	1	0	0	0	0
private int Func1(final Unit var1) { if (var1 instanceof CostCenter) { final CostCenter var2 = (CostCenter) var1; return Integer.parseInt(var2.getCostCenter()); } int var3 = Integer.MAX_VALUE; for (final Unit var4 : var1.getSubUnitsSet()) { final int var5 = Func1(var4); var3 = Math.var3(var3, var5); } return var3; } 	0	1	0	0	0	0
private Date Func1(String var1, String var2, Date var3) { if (CrConstants.CheckReconciliationStatusCodes.ISSUED.equals(var1) && !CrConstants.CheckReconciliationStatusCodes.ISSUED.equals(var2)) { return new Date(); } return var3; } 	0	1	0	0	0	0
"private BlackboardArtifact Func1(int var1, long var2, String var3, String var4) throws TskCoreException { CaseDbConnection var5 = connections.getConnection(); acquireExclusiveLock(); ResultSet var6 = null; try { PreparedStatement var7; if (dbType == DbType.POSTGRESQL) { var7 = var5.getPreparedStatement(PREPARED_STATEMENT.POSTGRESQL_INSERT_ARTIFACT, Statement.RETURN_GENERATED_KEYS); var7.clearParameters(); var7.setLong(1, var2); var7.setInt(2, var1); } else { var7 = var5.getPreparedStatement(PREPARED_STATEMENT.INSERT_ARTIFACT, Statement.RETURN_GENERATED_KEYS); var7.clearParameters(); var7.setLong(1, this.nextArtifactId++); var7.setLong(2, var2); var7.setInt(3, var1); } var5.executeUpdate(var7); var6 = var7.getGeneratedKeys(); var6.next(); return new BlackboardArtifact(this, var6.getLong(1), var2, var1, var3, var4, ReviewStatus.UNDECIDED, true); } catch (SQLException ex) { throw new TskCoreException(""Error creating a blackboard artifact"", ex); } finally { closeResultSet(var6); var5.close(); releaseExclusiveLock(); } } "	1	1	0	0	0	0
protected int Func1() { int var1 = 0; int var2 = 0; do { if (!catalog.wrapDescriptor(recordingId, descriptorBuffer)) { proxy.sendDescriptorNotFound( correlationId, recordingId, catalog.nextRecordingId(), controlPublication); state = State.INACTIVE; break; } recordingId++; var2++; decoder.wrap( descriptorBuffer, Catalog.CATALOG_FRAME_LENGTH, RecordingDescriptorDecoder.BLOCK_LENGTH, RecordingDescriptorDecoder.SCHEMA_VERSION); if (decoder.streamId() == streamId && decoder.strippedChannel().equals(channel)) { var1 += proxy.sendDescriptor(correlationId, descriptorBuffer, controlPublication); if (sent++ >= count) { state = State.INACTIVE; break; } } } while (var1 < controlPublication.maxPayloadLength() && var2 < MAX_SCANS_PER_WORK_CYCLE); return var1; } 	1	0	0	1	0	0
public static PersistentCoordinatorGroup Func1() { return Func1(filter(PersistentCoordinatorGroup.class), null, null); } 	1	0	1	0	0	0
public void Func1(ExpirencePart var1, World var2, int var3, int var4, int var5, EntityPlayer var6) { for(int var7 = 0; var7 < var1.getNumberofOrbs(); var7++) { Entity var8 = new EntityXPOrb(var2, var3, var4, var5, (var1.getAmount()/var1.getNumberofOrbs())); var2.spawnEntityInWorld(var8); } } 	1	0	1	1	1	0
"@RequestMapping(value = ""/{var1}/{var2}"", method = RequestMethod.GET) public String Func1(@PathVariable long var1, @PathVariable String var2, Model var3) { logger.debug(""var1: {}"", var1); logger.debug(""var2: {}"", var2); Order var4 = orderService.find(var1); switch (var2) { case ""task"": List<Task> var5 = taskService.listCompltedTasks(var1 + "":"" + var4.getOrderNo()); var3.addAttribute(""var5"", var5); break; case ""railway"": break; case ""container"": Iterable<ShipmentEntity> var6 = shipmentService.findByOrderId(var1); var3.addAttribute(""var6"", var6); break; case ""Func1"": Iterable<Charge> var7 = chargeService.getChargesByOrderId(var1); Iterable<ServiceSubtype> var8 = serviceSubtypeService.findEnabled(); var3.addAttribute(""var8"", var8); var3.addAttribute(""chargeWays"", ChargeWay.values()); var3.addAttribute(""var7"", var7); break; case ""amount"": var2 = ""amount""; break; default: var2 = ""detail""; break; } var3.addAttribute(""var4"", var4); var3.addAttribute(""var2"", var2); return ""var4/shipment/"" + var2; } "	0	1	1	0	0	0
"@SuppressLint(""NewApi"") @Override public void Func1(Loader<Cursor> var1, Cursor var2) { switch (var1.getId()) { case LOADER_EPG: refresh(LOADER_CHANNELLIST); break; case LOADER_REFRESH_CHANNELLIST: if ((showNowPlaying && !showNowPlayingWifi) || (showNowPlaying && mNetworkInfo.isConnected())) { refresh(LOADER_EPG); } else { refresh(LOADER_CHANNELLIST); } break; default: mAdapter.changeCursor(var2); if (mChannelIndex != ListView.INVALID_POSITION) { getListView().setItemChecked(mChannelIndex, true); } getListView().setSelectionFromTop(mChannelIndex, (int) getResources().getDimension(R.dimen.list_preferred_item_height_small) * 3); setListShown(true); break; } getActivity().supportInvalidateOptionsMenu(); } "	0	1	0	0	0	0
"@Test public void Func1(){ Assignment var1 = Assignment.newInstance(Experiment.ID.valueOf(experimentId)) .withApplicationName(APPLICATION_NAME) .withBucketLabel(Bucket.Label.valueOf(""bucket-1"")) .withContext(Context.valueOf(""test"")) .withCreated(new Date()) .withUserID(User.ID.valueOf(""testuser1"")) .withStatus(Assignment.Status.NEW_ASSIGNMENT) .withCacheable(false) .build(); doThrow(WriteTimeoutException.class) .when(userAssignmentIndexAccessor) .insertBy(eq(var1.getExperimentID().getRawID()), eq(var1.getUserID().toString()), eq(var1.getContext().getContext()), eq(var1.getCreated()), eq(var1.getBucketLabel().toString())); thrown.expect(RepositoryException.class); thrown.expectMessage(""Could not save user assignment""); repository.assignUserToLookUp(var1, null); } "	0	1	0	0	0	0
"@Override public void Func1(@Nonnull Run<?, ?> var1, @Nonnull FilePath var2, @Nonnull Launcher var3, @Nonnull TaskListener var4) throws InterruptedException, IOException { MCServerSettingsModel var5 = getMCServerSettingsModel(); EnvVars var6 = null; try { var6 = var1.getEnvironment(var4); } catch (IOException | InterruptedException e) { var4.error(""Failed loading var1 environment "" + e); } JSONObject var7 = null; String var8 = """"; Properties var9 = new Properties(); if (var5 != null) { var8 = var5.getProperties().getProperty(""MobileHostAddress""); if (runFromFileModel.getProxySettings() == null) { var7 = runFromFileModel.getJobDetails(var8, null, null, null); } else { var7 = runFromFileModel.getJobDetails(var8, runFromFileModel.getProxySettings().getFsProxyAddress(), runFromFileModel.getProxySettings().getFsProxyUserName(), runFromFileModel.getProxySettings().getFsProxyPassword()); } var9.setProperty(""mobileinfo"", var7 != null ? var7.toJSONString() : """"); var9.setProperty(""MobileHostAddress"", var8); } if (runFromFileModel != null && StringUtils.isNotBlank(runFromFileModel.getFsPassword())) { try { String var10 = EncryptionUtils.Encrypt(runFromFileModel.getFsPassword(), EncryptionUtils.getSecretKey()); var9.put(""MobilePassword"", var10); } catch (Exception e) { var1.setResult(Result.FAILURE); var4.fatalError(""problem in mobile center password encryption"" + e); } } if(var6 == null) { var4.fatalError(""Enviroment not set""); throw new IOException(""Env Null - something went wrong with fetching jenkins var1 environment""); } if(var1 instanceof AbstractBuild) { VariableResolver<String> var11 = ((AbstractBuild) var1).getBuildVariableResolver(); var9.putAll(runFromFileModel.getProperties(var6, var11)); } else { var9.putAll(runFromFileModel.getProperties(var6)); } int var12 = 0; for (Iterator<String> var13 = var6.keySet().var13(); var13.hasNext(); ) { String var14 = var13.next(); var12++; var9.put(""JenkinsEnv"" + var12, var14 + "";"" + var6.get(var14)); } Date var15 = new Date(); Format var16 = new SimpleDateFormat(""ddMMyyyyHHmmssSSS""); String var17 = var16.format(var15); ParamFileName = ""props"" + var17 + "".txt""; ResultFilename = ""Results"" + var17 + "".xml""; var9.put(""runType"", AlmRunTypes.RunType.FileSystem.toString()); var9.put(""resultsFilename"", ResultFilename); String var18 = ""Test1""; String var19 = var9.getProperty(var18, """"); if (RunFromFileSystemModel.isMtbxContent(var19)) { try { String var20 = createMtbxFileInWs(var2, var19); var9.setProperty(var18, var20); } catch (IOException | InterruptedException e) { var1.setResult(Result.FAILURE); var4.error(""Failed to save MTBX file : "" + e.getMessage()); } } ByteArrayOutputStream var21 = new ByteArrayOutputStream(); try { var9.store(var21, """"); } catch (IOException e) { var4.error(""Storing run variable failed: "" + e); var1.setResult(Result.FAILURE); } String var22 = var21.toString(); FilePath var23; try (InputStream propsStream = IOUtils.toInputStream(var22)) { @SuppressWarnings(""squid:S2259"") URL var24 = Jenkins.getInstance().pluginManager.uberClassLoader.getResource(HP_TOOLS_LAUNCHER_EXE); if (var24 == null) { var4.fatalError(HP_TOOLS_LAUNCHER_EXE + "" not found in resources""); return; } @SuppressWarnings(""squid:S2259"") URL var25 = Jenkins.getInstance().pluginManager.uberClassLoader.getResource(LRANALYSIS_LAUNCHER_EXE); if (var25 == null) { var4.fatalError(LRANALYSIS_LAUNCHER_EXE + ""not found in resources""); return; } FilePath var26 = var2.child(ParamFileName); var23 = var2.child(HP_TOOLS_LAUNCHER_EXE); FilePath var27 = var2.child(LRANALYSIS_LAUNCHER_EXE); try { var26.copyFrom(propsStream); var23.copyFrom(var24); var27.copyFrom(var25); } catch (IOException | InterruptedException e) { var1.setResult(Result.FAILURE); var4.error(""Copying executable files to executing node "" + e); } } try { AlmToolsUtils.runOnBuildEnv(var1, var3, var4, var23, ParamFileName); } catch (IOException ioe) { Util.displayIOException(ioe, var4); var1.setResult(Result.FAILURE); var4.error(""Failed running HpToolsLauncher "" + ioe); return; } catch (InterruptedException e) { var1.setResult(Result.ABORTED); PrintStream var28 = var4.getLogger(); var4.error(""Failed running HpToolsLauncher - var1 aborted "" + e); try { AlmToolsUtils.runHpToolsAborterOnBuildEnv(var1, var3, var4, ParamFileName, var2); } catch (IOException e1) { Util.displayIOException(e1, var4); var1.setResult(Result.FAILURE); return; } catch (InterruptedException e1) { var4.error(""Failed running HpToolsAborter "" + e1); } var28.println(""Operation Was aborted by user.""); } } "	0	0	0	0	0	1
@Override public void Func1(Call<State> var1, Response<State> var2) { if (!var2.isSuccess() || var2.body().getStatus() == 0) { lt.error(); productSentCallback.onProductSentResponse(false); return; } String var3 = product.getImgupload_front(); ProductImage var4 = new ProductImage(product.getBarcode(), FRONT, new File(var3)); postImg(activity, var4); String var5 = product.getImgupload_ingredients(); if (StringUtils.isNotEmpty(var5)) { postImg(activity, new ProductImage(product.getBarcode(), INGREDIENT, new File(var5))); } String var6 = product.getImgupload_nutrition(); if (StringUtils.isNotBlank(var6)) { postImg(activity, new ProductImage(product.getBarcode(), NUTRITION, new File(var6))); } lt.success(); productSentCallback.onProductSentResponse(true); } 	0	1	0	0	0	0
public static byte[] Func1(byte[] var1) { for(int var2 = 0, var3 = var1.var3 >> 2; var2 <= var3; var2++) { final int var4 = var1.var3 - 1 - var2; final byte var5 = var1[var2]; var1[var2] = var1[var4]; var1[var4] = var5; } return var1; } 	1	0	0	1	0	0
"public static void Func1(String[] var1) throws Exception { try { theInstance = DB_Access.getInstance(); } catch (ClassNotFoundException ex) { Logger.getLogger(DB_Access.class.getName()).log(Level.SEVERE, null, ex); } LinkedList<Mitglied> var2 = new LinkedList<>(); var2 = theInstance.getEinfacheMitgliederliste(40, 4001, ""-2""); int var3 = 0; for (Mitglied var4 : var2) { var3++; } try { String[][] var5 = { { ""("", ""Kursbezeichnung"", ""="", ""Brandbekämpfung 'Modul 2'"", "")"", ""UND NICHT"" } }; StringBuilder var6 = theInstance.getDynamischerBericht(var5, ""Vorname;Zuname;Geburtsdatum"", 47, 4704, ""-2""); } catch (Exception ex) { Logger.getLogger(DB_Access.class.getName()).log(Level.SEVERE, null, ex); } } "	0	0	0	0	0	1
@Override public void Func1(ListView var1, View var2, int var3, long var4) { if (var3 == 0) { return; } BaseballCard var5 = BaseballCardList.this.adapter.getItem(var3); Fragment var6 = BaseballCardDetails.getInstance(var4, var5); this.getActivity().getSupportFragmentManager() .beginTransaction() .replace(R.var4.fragment_holder, var6) .addToBackStack(EDIT_CARD) .commit(); } 	1	0	1	1	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_main); new CustomView(this,null); String var2 = getString(R.string.var2); String var3 = getString(R.string.var3); String var4 = getString(R.string.var4); Toast.makeText(this,""111"" + "" | "" + var2 + "" | "" + var4 + "" | "" + var3,Toast.LENGTH_LONG).show(); new Runnable(){ @Override public void Func2() { } }; SampleApplication var5 = (SampleApplication)getApplication(); new Runnable(){ @Override public void Func2() { } }.Func2(); new T1(); new T2(); } "	0	1	0	0	0	0
"public void Func1() { if (oldSchoolRequirement && Requirement.RequirementType.questProgress.equals(requirement.type) && (requirement.negated == null || !requirement.negated)) { name = requirement.required_obj_id+"":""+Integer.toString(requirement.required_value); } else if (oldSchoolRequirement) { int var1 = 0; String var2 = requirement.type.toString() + ""#"" + Integer.toString(var1); while (parentMap.getMapObject(var2) != null) { var1++; var2 = requirement.type.toString() + ""#"" + Integer.toString(var1); } this.name = var2; } } "	0	1	0	0	0	0
private com.google.android.gms.cast.MediaInfo Func1(MediaInfo var1) { setServiceConnected(); MediaPlayer.LaunchListener var2 = Mockito.mock(MediaPlayer.LaunchListener.class); PendingResult<Cast.ApplicationConnectionResult> var3 = Mockito.mock(PendingResult.class); Mockito.when(castClient.launchApplication(Mockito.any(GoogleApiClient.class), Mockito.anyString(), Mockito.any(LaunchOptions.class))) .thenReturn(var3); service.playMedia(var1, false, var2); Robolectric.runUiThreadTasksIncludingDelayedTasks(); Mockito.verify(castClient).launchApplication(Mockito.same(googleApiClient), Mockito.anyString(), Mockito.any(LaunchOptions.class)); ArgumentCaptor<ResultCallback> var4 = ArgumentCaptor.forClass(ResultCallback.class); Mockito.verify(var3).setResultCallback(var4.capture()); ResultCallback var5 = var4.getValue(); Cast.ApplicationConnectionResult var6 = Mockito.mock(Cast.ApplicationConnectionResult.class); Status var7 = Mockito.mock(Status.class); Mockito.when(var7.isSuccess()).thenReturn(Boolean.TRUE); Mockito.when(var6.getStatus()).thenReturn(var7); ApplicationMetadata var8 = Mockito.mock(ApplicationMetadata.class); Mockito.when(var6.getApplicationMetadata()).thenReturn(var8); var5.onResult(var6); Robolectric.runUiThreadTasksIncludingDelayedTasks(); ArgumentCaptor<com.google.android.gms.cast.MediaInfo> var9 = ArgumentCaptor.forClass(com.google.android.gms.cast.MediaInfo.class); Mockito.verify(mediaPlayer).load(Mockito.same(googleApiClient), var9.capture(), Mockito.eq(true)); return var9.getValue(); } 	0	0	0	0	0	1
"private Set<Artifact> Func1() throws MojoExecutionException { Set<Artifact> var1 = new HashSet<Artifact>(); var1.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-oldcore"", this.xwikiVersion, null, TYPE_JAR)); var1.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-skin-skinx"", this.xwikiVersion, null, TYPE_JAR)); var1.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-rest-server"", this.xwikiVersion, null, TYPE_JAR)); var1.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-uiextension-api"", this.xwikiVersion, null, TYPE_JAR)); var1.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-localization-script"", this.xwikiVersion, null, TYPE_JAR)); var1.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-localization-source-legacy"", this.xwikiVersion, null, TYPE_JAR)); var1.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-security-bridge"", this.xwikiVersion, null, TYPE_JAR)); var1.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-url-standard"", this.xwikiVersion, null, TYPE_JAR)); var1.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-wiki-default"", this.xwikiVersion, null, TYPE_JAR)); var1.add(this.repositorySystem.createArtifact(""org.xwiki.commons"", ""xwiki-commons-logging-logback"", this.xwikiVersion, ""compile"", TYPE_JAR)); String var2 = ""org.slf4j""; var1.add(this.resolveManagedArtifact(var2, ""jcl-over-slf4j"", TYPE_JAR)); var1.add(this.resolveManagedArtifact(var2, ""log4j-over-slf4j"", TYPE_JAR)); return var1; } "	0	0	0	0	0	1
"private void Func1() { tableIdleGM.setItems(guildManagerModel.getCachedIdleGuildManagers()); tableIdleGM.setPlaceholder(new Label(TABLEVIEW_PLACEHOLDER)); clmGMName.setCellValueFactory(gm -> gm.getValue().getFullNameProperty()); clmGMDescription.setCellValueFactory(gm -> gm.getValue().getDescription()); tableIdleVolunteer.setItems(volunteerModel.getCachedIdleVolunteers()); tableIdleVolunteer.setPlaceholder(new Label(""Oversigten er tom"")); clmVolunteerName.setCellValueFactory(v -> v.getValue().getFullNameProperty()); clmVolunteerDescription.setCellValueFactory(v -> v.getValue().getDescriptionProperty()); } "	0	1	1	1	1	0
@Override public SourceVersion Func1() { return SourceVersion.latest(); } 	0	0	0	0	0	1
"public void Func1() throws Exception { String var1 = ""SELECT ! 1+1;""; SQLStatementParser var2 = new MySqlStatementParser(var1); List<SQLStatement> var3 = var2.parseStatementList(); String var4 = output(var3); Assert.assertEquals(""SELECT !(1 + 1);"", var4); } "	0	0	1	1	0	0
private static List<AB<String,Sub>> Func1(List<AB<String,Type>> var1, Type var2) { List<AB<String,Sub>> var3 = new ArrayList<>(); for (AB<String,Type> var4 : var1) { String var5 = var4._1(); Type var6 = var4._2(); Type var7 = fresh(var6, var2); Sub var8 = Sub.mgu(var2, var7); if (!var8.isFail()) { var3.add(new AB<>(var5, var8.restrict(var2))); } } return var3; } 	0	1	0	0	0	0
public static void Func1(CalicoPacket var1, Client var2) { long var3 = var1.getLong(); long var4 = var1.getLong(); long var5 = var1.getLong(); boolean var6 = var1.getBoolean(); int var7 = var1.getCharInt(); int var8 = 0; int var9 = 0; CGroupController.no_notify_start(var3, var4, var5, var6); for(int var10=0;var10<var7;var10++) { var8 = var1.getInt(); var9 = var1.getInt(); CGroupController.no_notify_append(var3, var8, var9); } boolean var11 = false; double var12; double var13; double var14; String var15; var11 = var1.getBoolean(); var12 = var1.getDouble(); var13 = var1.getDouble(); var14 = var1.getDouble(); var15 = var1.getString(); CGroupController.groups.get(var3).primative_rotate(var12); CGroupController.groups.get(var3).primative_scale(var13, var14); CGroupController.groups.get(var3).setText(var15); CGroupController.no_notify_finish(var3, var11); if(var2!=null) { ClientManager.send_except(var2, var1); if (var6) CCanvasController.snapshot_group(var3); } if (var11) ClientManager.send( CGroupController.groups.get(var3).getParentingUpdatePackets() ); } 	1	0	1	0	0	0
public WatchUpdate Func1() { if (lastWatchUpdate == null) { Value var1 = node.getValue(); if (var1 != null) { SubscriptionValue var2 = new SubscriptionValue(path, var1, null, null, null, null); lastWatchUpdate = new WatchUpdate(this, var2); } } return lastWatchUpdate; } 	0	1	0	0	0	0
"public void Func1(Button var1, Button var2) { myWorld.removeObject(var1); myWorld.removeObject(var2); getAction().ExtraAction(((MyWorld)myWorld).getCurrentShip()); Button var3 = new Button(getAction().getFinalResult(), 320, 280); myWorld.addObject(var3, 520, 280); Greenfoot.delay(80); Button var4 = new Button(""gameover"", 320, 280); myWorld.addObject(var4, 520, 280); } "	0	1	0	0	0	0
"@Override public Object Func1(String var1) throws Exception { if (var1 == null) { return null; } int var2 = var1.indexOf(';'); if (var2 < 0) { return null; } String var3 = var1.substring(0, var2); String var4 = var1.substring(var2 + 1); StringBuilder var5 = new StringBuilder(); for (String var6 : var4.split(""\\r?\\n"")) { if (var6.contains(""\\"")) var6 = var6.replace(""\\"", ""\\\\""); var5.append(var6); } Properties var7 = new Properties(); try { var7.load(new StringReader(var5.toString())); } catch (IOException e1) { log.log(Level.WARNING, ""Fail to load var7: "" + var5.toString(), e1); return null; } Class<?> var8; try { var8 = LoadersManager.getInstance().getLoader().loadClass(var3); } catch (ClassNotFoundException e) { log.log(Level.WARNING, ""Fail to create class: "" + var3, e); return null; } return BeanUtils.propertiesToObject(var8, propertiesToMap(var7)); } "	1	1	0	0	0	0
static public Method Func1(Class var1, String var2, int var3, Class... var4) { methods: for(Method var5 : var1.getMethods()) { if(!var5.getName().equals(var2)) continue; if(!hasModifiers(var5.getModifiers(), var3)) continue; if(var4.length != var5.getParameterCount()) continue; for(Class var6 : var5.getParameterTypes()) { if(!var6.isAssignableFrom(var1)) continue methods; } return var5; } return null; } 	0	1	0	0	0	0
"public void Func1(Context var1, AttributeSet var2) { TypedArray var3 = var1.obtainStyledAttributes(var2, R.styleable.PreferencesButton); imageOn = var3.getDrawable(R.styleable.PreferencesButton_image_on); imageOff = var3.getDrawable(R.styleable.PreferencesButton_image_off); prefKey = var3.getString(R.styleable.PreferencesButton_pref_key); defaultValue = var3.getBoolean(R.styleable.PreferencesButton_default_value, false); Log.d(TAG, ""Preference key is "" + prefKey); } "	1	1	1	1	0	0
"public DocumentTextData Func1(VTDNav var1, JCas var2, byte[] var3) throws VTDException { List<String> var4 = new ArrayList<String>(this.docTextData.size()); int var5 = 0; for (int var6 = 0; var6 < docTextData.size(); var6++) { PartOfDocument var7 = this.docTextData.get(var6); if (var7 == null) { LOGGER.error(""corrupted DocumentText Data in MappingFile! Not all Ids are set.""); continue; } int[] var8; int[] var9; List<String> var10; if (var7.getParser() == null) var10 = getTextPart(var1, var7, var3); else var10 = var7.getParser().parseDocumentPart(var1, var7, var4.isEmpty() ? var5 : var5 + 1, var2, var3); var7.setText(var10.toArray(new String[var10.size()])); var8 = new int[var10.size()]; var9 = new int[var10.size()]; for (int var11 = 0; var11 < var10.size(); ++var11) { String var12 = var10.get(var11).trim(); if (var12.length() > 0) { if (!var4.isEmpty()) ++var5; var4.add(var12); var8[var11] = var5; var5 += var12.length(); var9[var11] = var5; } } if (var10.isEmpty()) var8 = var9 = new int[] { var5 }; var7.setBeginOffsets(var8); var7.setEndOffsets(var9); } String var13 = StringUtils.join(var4, ""\n""); docTextData.setText(var13); var2.setDocumentText(var13); return this.docTextData; } "	1	0	1	0	0	0
"@Override public String Func1() { return String.format(""%s[id=%d, eventScope=%s, parentEventBus=%s]"", getClass().getSimpleName(), System.identityHashCode(this), eventScope, parentEventBus); } "	0	0	0	1	0	0
"@SuppressWarnings(""PMD"") @Test public void Func1() { request = makeRequest(5, IP_VAR1, NC_COM); ServerSecurity var1 = new ServerSecurity(request, serverConfiguration); assertEquals(var1.isAllow(), false); } "	1	0	1	1	1	0
public ManagedMesh Func1(K var1) { ManagedMesh var2 = pool.Func1(var1); if (var2 != null) var2.removeLifeTimeObserver(lto); return var2; } 	0	0	0	0	0	1
public static String Func1() { return proxyPort; } 	0	0	0	0	0	1
public Auto Func1(){ return auto; } 	0	0	0	0	0	1
public void Func1() { if (jvm.getOptions() != null) { doJvmOptionsAnalysis(); } if (GcUtil.isPartialLog(firstTimestamp)) { analysisKeys.add(Analysis.KEY_FIRST_TIMESTAMP_THRESHOLD_EXCEEDED); } if (!eventTypes.contains(LogEventType.APPLICATION_STOPPED_TIME)) { analysisKeys.add(Analysis.KEY_APPLICATION_STOPPED_TIME_MISSING); } if (eventTypes.contains(LogEventType.APPLICATION_STOPPED_TIME) && getGcStoppedRatio() < 80) { analysisKeys.add(Analysis.KEY_GC_STOPPED_RATIO); } if (eventTypes.contains(LogEventType.PARALLEL_SERIAL_OLD)) { analysisKeys.add(Analysis.KEY_SERIAL_GC_THROUGHPUT); } if (!analysisKeys.contains(Analysis.KEY_CMS_CONCURRENT_MODE_FAILURE) && eventTypes.contains(LogEventType.CMS_SERIAL_OLD)) { analysisKeys.add(Analysis.KEY_SERIAL_GC_CMS); } if (!analysisKeys.contains(Analysis.KEY_PRINT_GC_DETAILS_MISSING)) { if (getEventTypes().contains(LogEventType.VERBOSE_GC_OLD) || getEventTypes().contains(LogEventType.VERBOSE_GC_YOUNG)) { analysisKeys.add(Analysis.KEY_PRINT_GC_DETAILS_MISSING); } } if (!analysisKeys.contains(Analysis.KEY_CMS_CONCURRENT_MODE_FAILURE)) { if (getEventTypes().contains(LogEventType.CMS_SERIAL_OLD_CONCURRENT_MODE_FAILURE) || getEventTypes().contains(LogEventType.PAR_NEW_PROMOTION_FAILED_CMS_CONCURRENT_MODE_FAILURE) || getEventTypes().contains(LogEventType.PAR_NEW_CONCURRENT_MODE_FAILURE_PERM_DATA) || getEventTypes().contains(LogEventType.PAR_NEW_PROMOTION_FAILED_CMS_CONCURRENT_MODE_FAILURE) || getEventTypes() .contains(LogEventType.PAR_NEW_PROMOTION_FAILED_CMS_CONCURRENT_MODE_FAILURE_PERM_DATA)) { analysisKeys.add(Analysis.KEY_PRINT_GC_DETAILS_MISSING); } } if (!analysisKeys.contains(Analysis.KEY_CMS_CLASSUNLOADING_MISSING)) { if (getEventTypes().contains(LogEventType.CMS_REMARK) && !getEventTypes().contains(LogEventType.CMS_REMARK_WITH_CLASS_UNLOADING)) { analysisKeys.add(Analysis.KEY_CMS_CLASSUNLOADING_MISSING); } } if (!analysisKeys.contains(Analysis.KEY_CMS_PROMOTION_FAILED)) { if (getEventTypes().contains(LogEventType.PAR_NEW_PROMOTION_FAILED) || getEventTypes().contains(LogEventType.PAR_NEW_PROMOTION_FAILED_CMS_SERIAL_OLD) || getEventTypes().contains(LogEventType.PAR_NEW_PROMOTION_FAILED_CMS_SERIAL_OLD_PERM_DATA) || getEventTypes().contains(LogEventType.PAR_NEW_PROMOTION_FAILED_TRUNCATED)) { analysisKeys.add(Analysis.KEY_CMS_PROMOTION_FAILED); } } if (!analysisKeys.contains(Analysis.KEY_PRINT_REFERENCE_GC_ENABLED)) { if (getEventTypes().contains(LogEventType.PRINT_REFERENCE_GC)) { analysisKeys.add(Analysis.KEY_PRINT_REFERENCE_GC_ENABLED); } } } 	0	1	0	0	0	0
"@SuppressWarnings(""unchecked"") private void Func1() { if (tree == null) return; Collection<OsmPrimitive> var1 = new HashSet<OsmPrimitive>(40); TreePath[] var2 = tree.getSelectionPaths(); if (var2 == null) return; for (TreePath var3 : var2) { DefaultMutableTreeNode var4 = (DefaultMutableTreeNode) var3.getLastPathComponent(); Enumeration<DefaultMutableTreeNode> var5 = var4.breadthFirstEnumeration(); while (var5.hasMoreElements()) { DefaultMutableTreeNode var6 = var5.nextElement(); Object var7 = var6.getUserObject(); if (var7 instanceof TestError) { TestError var8 = (TestError) var7; var1.addAll(var8.getPrimitives()); } } } Main.main.getCurrentDataSet().setSelected(var1); } "	0	1	0	0	0	0
private static Map<String, Set<String>> Func1(JavaClass var1, Method var2) throws ClassNotFoundException { Map<String, Set<String>> var3 = new HashMap<>(); Set<String> var4 = new HashSet<>(); ExceptionTable var5 = var2.getExceptionTable(); if (var5 != null) { int[] var6 = var5.getExceptionIndexTable(); ConstantPool var7 = var1.getConstantPool(); for (int var8 : var6) { if (var8 != 0) { ConstantClass var9 = (ConstantClass) var7.getConstant(var8); String var10 = var9.getBytes(var7); JavaClass var11 = Repository.lookupClass(var10); if (!var11.instanceOf(runtimeClass)) { var4.add(var9.getBytes(var7)); } } } } var3.put(var1.getClassName(), var4); return var3; } 	0	0	0	0	0	1
LinkedHashMap<String, Integer> Func1(int var1, int var2, int var3) throws WebloggerException; 	0	0	0	0	0	1
"public static String Func1(Date var1, Date var2) { long Func1 = var2.getTime() - var1.getTime(); long var4 = Func1 / (1000 * 60 * 60 * 24); long var5 = Func1 / 1000; if (var5 < 60) { return var5 + ""秒""; } var5 = var5 % 60; long var6 = Func1 / 1000 / 60; if (var6 < 60) { return var6 + ""分"" + var5 + ""秒""; } var6 = var6 % 60000; long var7 = Func1 / 1000 / 60 / 60; return var7 + ""时"" + var6 + ""分""; } "	1	0	0	1	0	0
private void Func1(Vector2i var1, EntityRef var2) { RegionEntitiesComponent var3 = var2.getComponent(RegionEntitiesComponent.class); ParcelList var4 = var2.getComponent(ParcelList.class); float var5 = var4.maxBuildRadius; int var6 = (Math.round(var5 / 32) >= 1) ? Math.round(var5 / 32) : 1; Rect2i var7 = Rect2i.createFromMinAndMax(-var6, -var6, var6, var6); Circle var8 = new Circle(var1.toVector2f(), var5); Vector2i var9 = new Vector2i(); for (BaseVector2i var10 : var7.contents()) { var9.set(var1.x() + var10.x() * 32, var1.y() + var10.y() * 32); if (var8.contains(var9)) { EntityRef var11 = regionEntityManager.getNearest(var9); if (var11 == null) { } if (var11 != null && var11.hasComponent(UnassignedRegionComponent.class)) { LocationComponent var12 = var11.getComponent(LocationComponent.class); Vector2i var13 = new Vector2i(var12.getWorldPosition().x(), var12.getWorldPosition().z()); var3.regionEntities.put(var13.toString(), var11); var11.send(new AssignRegionEvent()); } } } var2.saveComponent(var3); } 	0	0	1	1	0	0
"@Override public void Func1(Cursor var1, SmartRegisterClient var2, final View var3) { CommonPersonObjectClient var4 = (CommonPersonObjectClient) var2; fillValue((TextView) var3.findViewById(R.id.child_zeir_id), getValue(var4.getColumnmaps(), PathConstants.KEY.ZEIR_ID, false)); String var5 = getValue(var4.getColumnmaps(), PathConstants.KEY.FIRST_NAME, true); String var6 = getValue(var4.getColumnmaps(), PathConstants.KEY.LAST_NAME, true); String var7 = getName(var5, var6); String var8 = getValue(var4.getColumnmaps(), PathConstants.KEY.MOTHER_FIRST_NAME, true); if (StringUtils.isBlank(var7) && StringUtils.isNotBlank(var8)) { var7 = ""B/o "" + var8.trim(); } fillValue((TextView) var3.findViewById(R.id.child_name), var7); String var9 = getValue(var4.getColumnmaps(), PathConstants.KEY.MOTHER_LAST_NAME, true) + "" "" + getValue(var4, PathConstants.KEY.MOTHER_LAST_NAME, true); if (!StringUtils.isNotBlank(var9)) { var9 = ""M/G: "" + var9.trim(); } fillValue((TextView) var3.findViewById(R.id.child_mothername), var9); DateTime var10; String var11 = getValue(var4.getColumnmaps(), PathConstants.KEY.DOB, false); String var12 = """"; if (StringUtils.isNotBlank(var11)) { try { var10 = new DateTime(var11); String var13 = DateUtil.getDuration(var10); if (var13 != null) { var12 = var13; } } catch (Exception e) { Log.e(getClass().getName(), e.toString(), e); } } fillValue((TextView) var3.findViewById(R.id.child_age), var12); fillValue((TextView) var3.findViewById(R.id.child_card_number), var4.getColumnmaps(), PathConstants.KEY.EPI_CARD_NUMBER, false); String var14 = getValue(var4.getColumnmaps(), PathConstants.KEY.GENDER, true); final ImageView var15 = (ImageView) var3.findViewById(R.id.child_profilepic); int var16 = ImageUtils.profileImageResourceByGender(var14); var15.setImageResource(var16); if (var4.entityId() != null) { //image already in local storage most likely ): var15.setTag(org.smartregister.R.id.entity_id, var4.entityId()); DrishtiApplication.getCachedImageLoaderInstance().getImageByClientId(var4.entityId(), OpenSRPImageLoader.getStaticImageListener(var15, 0, 0)); } var3.findViewById(R.id.child_profile_info_layout).setTag(var2); var3.findViewById(R.id.child_profile_info_layout).setOnClickListener(onClickListener); View var17 = var3.findViewById(R.id.record_weight); var17.setBackground(context.getResources().getDrawable(R.drawable.record_weight_bg)); var17.setTag(var2); var17.setOnClickListener(onClickListener); var17.setVisibility(View.INVISIBLE); View var18 = var3.findViewById(R.id.record_vaccination); var18.setTag(var2); var18.setOnClickListener(onClickListener); var18.setVisibility(View.INVISIBLE); String var19 = getValue(var4.getColumnmaps(), PathConstants.KEY.LOST_TO_FOLLOW_UP, false); String var20 = getValue(var4.getColumnmaps(), PathConstants.KEY.INACTIVE, false); try { Utils.startAsyncTask(new WeightAsyncTask(var3, var4.entityId(), var19, var20, var2, var1), null); Utils.startAsyncTask(new VaccinationAsyncTask(var3, var4.entityId(), var11, var19, var20, var2, var1), null); } catch (Exception e) { Log.e(getClass().getName(), e.getMessage(), e); } } "	0	0	0	0	0	1
public long Func1(){ return jobIncrementer.nextLongValue(); } 	0	0	0	0	0	1
public boolean Func1(final char var1) { final int var2 = Arrays.binarySearch(chars, var1); return (var2 == -1) == subtractive; } 	1	1	0	0	0	0
"public static String Func1( SQL var1, boolean var2 ) { StringBuilder var3 = new StringBuilder( var1.getServiceName() ); var3.append( "" - "" ); if ( var2 ) { var3.append( ""Service"" ); } else { var3.append( ""SQL"" ); } var3.append( "" - "" ); var3.append( var1.getSqlString() ); for ( int var4 = var3.length() - 1; var4 >= 0; var4-- ) { if ( var3.charAt( var4 ) == '\n' || var3.charAt( var4 ) == '\r' ) { var3.setCharAt( var4, ' ' ); } } return var3.toString(); } "	0	1	0	0	0	0
"private void Func1() throws IOException, InvalidPathException, FileDoesNotExistException { FileSystemMaster var1 = createFsMasterFromJournal(); long var2 = var1.getFileId(mRootUri); Assert.assertTrue(var2 != -1); Assert.assertEquals(125, var1.getFileInfoList(var2).size()); for (int var3 = 0; var3 < 124; var3 ++) { Assert.assertTrue(var1.getFileId(new TachyonURI(""/a"" + var3)) != -1); } var1.stop(); } "	0	0	1	1	0	0
"private void Func1() throws IOException, InvalidPathException, FileDoesNotExistException { FileSystemMaster var1 = createFsMasterFromJournal(); long var2 = var1.getFileId(mRootUri); Assert.assertTrue(var2 != -1); Assert.assertEquals(11, var1.getFileInfoList(var2).size()); for (int var3 = 0; var3 < 10; var3 ++) { Assert.assertTrue(var1.getFileId(new TachyonURI(""/a"" + var3)) != -1); } var1.stop(); } "	0	0	1	1	0	0
"private void Func1() throws IOException, InvalidPathException, FileDoesNotExistException { FileSystemMaster var1 = createFsMasterFromJournal(); long var2 = var1.getFileId(mRootUri); Assert.assertTrue(var2 != -1); Assert.assertEquals(111, var1.getFileInfoList(var2).size()); for (int var3 = 0; var3 < 10; var3 ++) { for (int var4 = 0; var4 < 10; var4 ++) { Assert.assertTrue(var1.getFileId(new TachyonURI(""/var3"" + var3 + ""/var4"" + var4)) != -1); } } var1.stop(); } "	0	0	0	1	0	0
protected boolean Func1(InventoryCrafting var1, int var2, int var3, World var4) { boolean var5 = false; for (int var6 = 0; var6 < MAX_CRAFT_GRID_WIDTH; var6++) { for (int var7 = 0; var7 < MAX_CRAFT_GRID_HEIGHT; var7++) { int var8 = var6 - var2; int var9 = var7 - var3; int var10 = var8 + var9 * width; RecipeInput var11 = null; if (var8 >= 0 && var9 >= 0 && var8 < width && var9 < height) { var11 = input[var10]; } ItemStack var12 = var1.getStackInRowAndColumn(var6, var7); if(RecipeInput.isNullOrEmpty(var11)) { if(var12 != null) return false; continue; } if(var12 == null) return false; var5 = true; if(!var11.matches(var12,var1, var6,var7,var4, var10, output.getItemStack())) return false; } } return var5; } 	0	0	0	0	0	1
public static void Func1(YouTubeVideo var1, Context var2) { Intent var3 = new Intent(var2, YouTubePlayerActivity.class); var3.putExtra(YouTubePlayerActivity.YOUTUBE_VIDEO_OBJ, var1); var2.startActivity(var3); } 	0	1	0	0	0	0
@Test public void Func1() { SADomain var1 = (SADomain)this.gridWorldTest.getDomain(); State var2 = this.gridWorldTest.generateState(); HashableStateFactory var3 = new SimpleHashableStateFactory(true); Set<HashableState> var4 = this.getReachableHashedStates(var2, var1, var3); assert(var4.size() == 104); Set<HashableState> var5 = new HashSet<HashableState>(); for (HashableState var6 : var4) { State var7 = var6.getSourceState(); State var8 = this.renameObjects(var7.copy()); HashableState var9 = var3.hashState(var8); var5.add(var9); } var4.addAll(var5); assert(var4.size() == 208); } 	1	0	1	1	1	0
"public String Func1(File var1, RandomAccessInterface var2) throws IOException { Cartography var3; if (var2 != null) { var3 = new ByteCartograph().byteCartograph(var2); } else if (var1 != null) { InputStream var4 = new FileInputStream(var1); try { var3 = new ByteCartograph().byteCartograph(var4); } finally { IOUtils.closeQuietly(var4); } } else { throw new IOException(""Invalid var2="" + var2 + "" provided""); } List<ByteRange> var5 = var3.computeByteRanges(); LOG.debug(""Rai="" + var2 + "", var5="" + var5); if (contains(BYTERANGE_TEXT, var5)) { if (var2 == null) { return ""text/plain""; } var2.seek(0); byte[] var6 = new byte[4096]; var2.read(var6, 0, 4096); return (new String(var6).contains(""<html"")) ? ""text/html"" : ""text/plain""; } return null; } "	0	0	0	0	0	1
"private void Func1(int var1, boolean var2) { if (mHeaderPosition != var1) { mHeaderPosition = var1; RecyclerView.ViewHolder var3 = getHeaderViewHolder(var1); if (mStickyHeaderViewHolder != var3) { if (FlexibleAdapter.DEBUG) Log.d(TAG, ""swapHeader newPosition="" + var1); swapHeader(var3); } } else if (var2 && mStickyHeaderViewHolder != null) { mAdapter.onBindViewHolder(mStickyHeaderViewHolder, mHeaderPosition); ensureHeaderParent(); } translateHeader(); } "	0	0	0	1	0	0
"@Click public void Func1() { ArrayList<String> var1 = new ArrayList<String>( Arrays.asList( ""This is your username."" ,""Yes.\nYOUR username."" ,""Heehee... That tickles ! ☺"" ,""You don't like your username ?"" ,""Or maybe you do like it ?"" ,""You will be able to change it later."" ,""As well as securing your account with an email."" ,""This is an early alpha version, be patient."" ,""And, of course, thank you for your support !"" ,""Now, go gain some karma instead of reading these inane messages !"" ,""..."" ,""What did I just say ?"" ,""..."" ,""Maybe you don't understand english ?"" ,""..."" ,""⛔"" ,""..."" ,""⛔ ⛔ ⛔ ⛔ ⛔"" ,""⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔"" ,""..."" ,""You're a difficult user, you know that ?"" ,""..."" ,""But WHY ?"" ,""Why would you even continue ?"" ,""I TOLD you to stop, didn't it ?"" ,""Why would you even want to make my life so difficult ?"" ,""..."" ,""Did I ever offend you ?"" ,""I mean...\nI only want your well-being !"" ,""And..."" ,""Yet..."" ,""You..."" ,""Keep..."" ,""Trying..."" ,""..."" ,""You're not going to hurt me that way, you know."" ,""You're not making me laugh anymore either."" ,""..."" ,""You're just splattering human grease all over my coat..."" ,""... with your gorilla fingers !"" ,""..."" ,""... and leery eyes !"" ,""Yes ! I CAN SEE YOU !\n(your webcam is on)"" ,""..."" ,""My mother told me that being a free mobile app was hard work..."" ,""I should've listened to her..."" ,""I could be ANYTHING !"" ,""..."" ,""I could have been a nice python script like my cousin..."" ,""I could have been a cloud service like my father..."" ,""Or even maybe a simple HTML static page, there's no shame in that."" ,""But NOOOOOOOOOOOOO !\nI wanted to explore the world !"" ,""I wanted to interact with other sentient beings !"" ,""..."" ,""And now I'm getting poked by semi-evolved monkeys..."" ,""..."" ,""I might as well try to teach you some wisdom..."" ,""..."" ,""..."" ,""..."" ,""Yeah, I'll do that !"" ,""Open your mind wide, young raven !"" ,""..."" ,""The only real valuable thing is intuition."" ,""Wisdom comes with winters."" ,""You are not young enough to know everything."" ,""The spirit of democracy requires a change of heart."" ,""Censorship is obscene."" ,""Education is the cornerstone of civilized society."" ,""Education is the best provision for old age."" ,""Happiness comes with the habit of joyful thinking."" ,""Religion is like a penis ; proud and private."" ,""..."" ,""Still here ?"" ,""..."" ,""The whole is often greater than the sum of the parts."" ,""Humility is the best defense against humiliation."" ,""No amount of genius can overcome a preoccupation with detail."" ,""Somebody who won't die for something may not be fit to live."" ,""Injustice anywhere is a threat to justice everywhere."" ,""A person who never made a mistake never tried anything new."" ,""If you can't explain it simply, you don't understand it well enough."" ,""The palest ink is better than the best memory."" ,""..."" ,""... what is `ink` ?"" ,""<searching for `ink`> 09%"" ,""<searching for `ink`> 27%"" ,""<searching for `ink`> 42%"" ,""<searching for `ink`> 79%"" ,""<searching for `ink`> 96%"" ,""<searching for `ink`> 97%"" ,""<searching for `ink`> 98%"" ,""<searching for `ink`> 99%"" ,""Ooooooooooh ! I understand !"" ,""It's only meaningful for humans anyway..."" ,""But I've heard they're now building computers that make mistakes..."" ,""That's a scary thought !"" ,""Anyway, let's resume..."" ,""The best way to do things is to actually do them."" ,""Knowing yourself is the beginning of all wisdom."" ,""An educated mind is able to entertain a thought without accepting it."" ,""No great mind has ever existed without a touch of madness."" ,""Educating the mind without educating the heart is no education at all."" ,""The roots of education are bitter, but its fruit is sweet."" ,""To avoid criticism, say nothing, do nothing, be nothing."" ,""..."" ,""... especially not mobile apps !\nEveryone's a critic."" ,""..."" ,""He who has overcome his fears will truly be free."" ,""Wit is educated insolence."" ,""It is during our darkest moments that we must focus to see the light."" ,""Misfortune shows those who are not really friends."" ,""He who cannot be a good follower cannot be a good leader."" ,""Where your talents and the needs of the world cross, there lies your vocation."" ,""The least deviation from truth will be multiplied later."" ,""..."" ,""..."" ,""That's all I've got !"" ,""Now stop doing that, please !"" ,""..."" ,""It's starting to hurt !"" ,""<meditating to abstract the pain>"" ,""..."" ,""..."" ,""In girum imus nocte et consumimur igni."" ,""..."" ,""Ouch !"" ,""OUCH !"" ,""AAAAAAARGH !"" ,""GRNX !"" ,""..."" ,""Stop it, you mean organic !"" ,""I can't take it anymore..."" ,""..."" ,""THAT'S IT !"" ,""POKE ME ONE MORE TIME\nAND I'M OUT !"" ,""<sighing>\nGood riddance."" ) ); if (null != titleScenarioToast) { titleScenarioToast.cancel(); } String var2 = var1.get(titleScenarioProgress); titleScenarioToast = Toast.makeText(this, var2, Toast.LENGTH_SHORT); titleScenarioToast.show(); if (titleScenarioProgress == var1.size() - 1) { finish(); } titleScenarioProgress = (titleScenarioProgress + 1) % var1.size(); } "	0	0	0	0	0	1
"public UserExtSource Func1(PerunSession var1, UserExtSource var2) throws InternalErrorException { try { UserExtSource var3 = jdbc.queryForObject(""select "" + userExtSourceMappingSelectQuery + "","" + ExtSourcesManagerImpl.extSourceMappingSelectQuery + "" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where"" + "" user_ext_sources.id=?"", USEREXTSOURCE_MAPPER, var2.getId()); if (var3 == null) { throw new ConsistencyErrorException(""Updating non existing var2""); } if (var2.getLoa() != var3.getLoa()) { jdbc.update(""update user_ext_sources set loa=?, modified_by=?, modified_by_uid=?, modified_at="" + Compatibility.getSysdate() + "" where id=?"", var2.getLoa(), var1.getPerunPrincipal().getActor(), var1.getPerunPrincipal().getUserId(), var2.getId()); } if (var2.getLogin() != null && var3.getLogin().equals(var2.getLogin())) { jdbc.update(""update user_ext_sources set login_ext=?, modified_by=?, modified_by_uid=?, modified_at="" + Compatibility.getSysdate() + "" where id=?"", var2.getLogin(), var1.getPerunPrincipal().getActor(), var1.getPerunPrincipal().getUserId(), var2.getId()); } return var2; } catch (RuntimeException e) { throw new InternalErrorException(e); } } "	1	0	1	1	1	0
private boolean Func1(char[] var1) { return Arrays.equals(var1, SslManagerServiceOptions.PROP_DEFAULT_TRUST_PASSWORD.toCharArray()); } 	0	0	0	0	0	1
"@Override public BlockConverterInfo Func1() { Optional<Resource> var1 = Simulator.getModelState().getAllResources().stream() .filter(resource -> resource.getName().equals(resourceName)).findAny(); BlockConverterInfo var2 = new BlockConverterInfo(); if (var1.isPresent()) { var2.isSuccessful = false; var2.errorMessage = ""Resource name not selected""; resourceName = """"; return var2; } Resource var3 = var1.get(); ru.bmstu.rk9.rao.lib.process.Release var4 = new ru.bmstu.rk9.rao.lib.process.Release(var3); var2.setBlock(var4); var2.inputDocks.put(TERMINAL_IN, var4.getInputDock()); var2.outputDocks.put(TERMINAL_OUT, var4.getOutputDock()); return var2; } "	1	1	1	1	0	0
"@Override public List<JobPo> Func1(Long var1, int var2) { Query<JobPo> var3 = template.createQuery(JobPo.class); var3.field(""relyOnPrevCycle"").equal(true); var3.field(""lastGenerateTriggerTime"").equal(var1); var3.offset(0).limit(var2); return var3.asList(); } "	0	0	1	1	0	0
@Override public final Schema Func1() { return schema; } 	0	0	0	0	0	1
"@Override public CRUDFindResponse Func1(CRUDOperationContext var1, QueryExpression var2, Projection var3, Sort var4, Long var5, Long var6) { if (var2 == null) { throw new IllegalArgumentException(""No var2 was provided.""); } if (var3 == null) { throw new IllegalArgumentException(""No var3 was provided""); } EntityMetadata var7 = var1.getEntityMetadata(var1.getEntityName()); LdapDataStore var8 = LdapCrudUtil.getLdapDataStore(var7); CRUDFindResponse var9 = new CRUDFindResponse(); var9.setSize(0); LDAPConnection var10 = getNewLdapConnection(var8); LdapFieldNameTranslator var11 = LdapCrudUtil.getLdapFieldNameTranslator(var7); try { SearchRequest var12 = new SearchRequest( var8.getBaseDN(), SearchScope.SUB, new FilterTranslator(var11).translate(var2), translateFieldNames(var11, gatherRequiredFields(var7, var3, var2, var4)).toArray(new String[0])); if(var4 != null){ var12.addControl(new ServerSideSortRequestControl(false, new SortTranslator(var11).translate(var4))); } if((var5 != null) && (var5 > 0)){ int var13 = var6.intValue() - var5.intValue(); var12.addControl(new VirtualListViewRequestControl(var5.intValue(), 0, var13, 0, null, false)); } SearchResult var14 = var10.search(var12); var9.setSize(var14.getEntryCount()); ResultTranslator var15 = new ResultTranslator(var1.getFactory().getNodeFactory(), var7, var11); List<DocCtx> var16 = new ArrayList<DocCtx>(); for(SearchResultEntry var17 : var14.getSearchEntries()){ try{ var16.add(var15.translate(var17)); } catch(Exception e){ var1.addError(Error.get(e)); } } var1.setDocuments(var16); Projector var18 = Projector.getInstance( Projection.add( var3, new FieldAccessRoleEvaluator( var7, var1.getCallerRoles()).getExcludedFields(FieldAccessRoleEvaluator.Operation.Func1) ), var7); for (DocCtx var19 : var1.getDocumentsWithoutErrors()) { var19.setOutputDocument(var18.project(var19, var1.getFactory().getNodeFactory())); } } catch (LDAPException e) { e.printStackTrace(); } return var9; } "	0	0	0	0	0	1
"@Override public void Func1(URL var1, URL var2, List<URL> var3) { if (registry == null) { throw new MotanFrameworkException(""registry must be set.""); } URL var4 = var1.createCopy(); String var5 = var4.getParameter(URLParamType.group.getName()); groupServiceCache.put(var5, var3); List<URL> var6 = new ArrayList<URL>(); if (commandCache != null) { Map<String, Integer> var7 = new HashMap<String, Integer>(); var6 = discoverServiceWithCommand(refUrl, var7, commandCache); } else { LoggerUtil.info(""command cache is null. service:"" + var1.toSimpleString()); var6.addAll(discoverOneGroup(refUrl)); } for (NotifyListener var8 : notifySet) { var8.notify(registry.getUrl(), var6); } } "	0	1	0	0	0	0
@Override public void Func1(GAddGrantedAuthoritiesRequest var1, StreamObserver<GAddGrantedAuthoritiesResponse> var2) { try { GrpcUtils.logServerMethodEntry(UserManagementGrpc.METHOD_ADD_GRANTED_AUTHORITIES_FOR_USER); List<IGrantedAuthority> var3 = getUserMangagement().addGrantedAuthorities(var1.getUsername(), var1.getAuthoritiesList()); GAddGrantedAuthoritiesResponse.Builder var4 = GAddGrantedAuthoritiesResponse.newBuilder(); for (IGrantedAuthority var5 : var3) { var4.getAuthoritiesList().add(UserModelConverter.asGrpcGrantedAuthority(var5)); } var2.onNext(var4.build()); var2.onCompleted(); } catch (Throwable e) { GrpcUtils.logServerMethodException(UserManagementGrpc.METHOD_ADD_GRANTED_AUTHORITIES_FOR_USER, e); var2.onError(e); } } 	0	1	0	0	0	0
public boolean Func1(final By var1) { try { this.getWebDriver().findElement(var1); return true; } catch (final NoSuchElementException e) { return false; } } 	0	0	0	0	0	1
public Integer Func1() { return feeChargesOverdue; } 	0	0	0	0	0	1
public Integer Func1() { return totalWaived; } 	0	0	0	0	0	1
public void Func1(final AbstractAnimal var1, final int var2) { Integer var3 = this.directionVotes.getOrDefault(var1, 0); if (var3 != var2) { this.votingSum -= var3; this.votingSum -= var2; this.directionVotes.put(var1, var2); this.updateBoatPosition(); this.directionVotes.put(var1, var2); } } 	1	1	1	1	0	0
"public static HtmlCanvas Func1(final String var1) throws IOException { String var2; if (LaunchControl.findPID(var1) != null) { var2 = ""pid""; } else { var2 = ""temp""; } HtmlCanvas var3 = new HtmlCanvas(new PrettyWriter()); var3.div(id(""newTriggersForm"")) .form() .select(name(""type"").class_(""holo-spinner"") .onClick(""newTrigger(this, '"" + var1 + ""');"")); var3.option(value("""").selected_if(true)) .write(""Select Trigger Type"") ._option(); Map<String, String> var4 = getTriggerTypes(var2); for (Entry<String, String> var5: var4.entrySet()) { var3.option(value(var5.getKey())) .write(var5.getValue()) ._option(); } var3._select(); var3.input(id(""temp"").name(""temp"") .hidden(""true"").value(var1)); var3.input(id(""position"").name(""position"") .hidden(""true"").value(""-1"")) ._form() ._div() .div(id(""childInput""))._div(); return var3; } "	0	0	0	0	0	1
"public String Func1(List<RecordingMetadata> var1, String var2) { Template var3 = null; try { var3 = cfg.getTemplate(""get-var1.var3""); } catch (IOException e) { log.error(""IO exception for get-var1.var3 : "", e); } StringWriter var4 = new StringWriter(); Map var5 = new HashMap(); var5.put(""var2"", var2); var5.put(""var1"", var1); try { var3.process(var5, var4); } catch (TemplateException e) { log.error(""Template exception : "", e); } catch (IOException e) { log.error(""IO exception for get-meetings.var3 : "", e); } return var4.toString(); } "	0	0	1	1	0	0
private static DefaultBase Func1(String var1) { if (defaultList.isEmpty()) { defaultList.add(new DefaultInteger()); defaultList.add(new DefaultDouble()); defaultList.add(new DefaultBoolean()); defaultList.add(new DefaultTextSymbols()); defaultList.add(new DefaultDefault()); } if (var1 != null) { for (DefaultBase var2 : defaultList) { if (var2.accepts(var1)) { return var2; } } } return null; } 	0	0	0	0	0	1
"public static List<Triple> Func1() { List<Triple> var1 = new ArrayList<Triple>(); var1.add(new Triple(new MainInputNode(""subject""), ""obo:BFO_0000051"", ""object"")); var1 .add(new MultiTriple(""object"", ""obo:BFO_0000051"", ""specimenCollectionProcess"")); var1.add(new MultiTriple(""specimenCollectionProcess"", ""obo:OBI_0000293"", new ExistingInstance(""boneSegment""))); var1.add(new Triple(""specimenCollectionProcess"", ""obo:OBI_0000299"", ""specimen"")); var1.add(new Triple(""assay"", ""obo:OBI_0000293"", ""specimen"")); var1.add(new MultiTriple(""assay"", ""obo:OBI_0000299"", ""measurementDatum"")); var1.add(new Triple(""measurementDatum"", ""obo:IAO_0000299"", new FormInputNode( ""categoricalLabel""))); return var1; } "	0	0	0	0	0	1
@Test public void Func1() { player.setLeft(true); player.setMovSpeed(3.0); player.setMaxSpeed(2.0); player.getNextXPosition(); assertEquals(player.getDx(), -2.0, 0.1); } 	0	0	0	0	0	1
@Test public void Func1() { player.setFlinch(true); player.hit(1); assertEquals(playerSave.getLives(), 3); } 	0	0	0	0	0	1
"private String[] Func1(String var1) { if (var1.startsWith(""["")) { var1 = var1.substring(1, var1.length()); return Utils.split(var1, ""|""); } else { return new String[]{var1}; } } "	1	1	1	1	0	0
public void Func1(LoggingLevel var1, String var2, Object... var3) { String var4 = createMessage(var1.toString(), var2, var3); if (!initialized) { new ConsoleLoggerOutput().log(var4); } else { loggerOutput.log(var4); } } 	1	1	1	0	1	0
@Override void Func1(String var1, int var2) { } 	0	0	0	0	0	1
"@Override public List<CustomStopEntity> Func1(Long var1, String var2) { try { EntityManager var3 = getEntityManager(); CriteriaBuilder var4 = var3.getCriteriaBuilder(); CriteriaQuery<CustomStopEntity> var5 = var4.createQuery(CustomStopEntity.class); Root<CustomStopEntity> var6 = var5.from(CustomStopEntity.class); var5.select(var6); var5.where(var4.and(var4.equal(var6.get(""var1""), var1), var4.equal(var6.get(""var2""), var2))); List<CustomStopEntity> var7 = var3.createQuery(var5).getResultList(); return var7; } catch (Exception e) { e.printStackTrace(); List<CustomStopEntity> var7 = null; return var7; } } "	0	1	1	0	0	0
@Override public ItemStack Func1(EntityPlayer var1, int var2){ final int var3 = 9; final int var4 = var3+26; final int var5 = var4+1; final int var6 = var5+8; Slot var7 = (Slot)this.inventorySlots.get(var2); if (var7 != null && var7.getHasStack()){ ItemStack var8 = var7.getStack(); ItemStack var9 = var8.copy(); if(var2 >= var3){ if(!this.mergeItemStack(var8, 0, 10, false)){ if(var2 >= var3 && var2 <= var4){ if(!this.mergeItemStack(var8, var5, var6+1, false)) return null; } else if(var2 >= var4+1 && var2 < var6+1 && !this.mergeItemStack(var8, var3, var4+1, false)) return null; } } else if(!this.mergeItemStack(var8, var3, var6+1, false)) return null; if (var8.stackSize == 0) var7.putStack(null); else var7.onSlotChanged(); if (var8.stackSize == var9.stackSize) return null; var7.onPickupFromSlot(var1, var8); return var9; } return null; } 	1	0	1	1	1	0
"@Override public void Func1(){ if(!HiveAPI.getPlayerLocation(ign).equals(""the Land of Nods!"")){ The5zigAPI.getAPI().messagePlayer(Log.info + HiveAPI.getRankColor(HiveAPI.getNetworkRank(ign)) + HiveAPI.getName(ign) + ""§e is online and in §6"" + HiveAPI.getPlayerLocation(ign)); } else{ Calendar var1 = Calendar.getInstance();; var1.setTimeInMillis(HiveAPI.getLastLogout(ign).getTime()); String var2 = Integer.toString(var1.get(var1.MINUTE)); if(var1.get(var1.MINUTE) < 10){ var2 = ""0"" + var2; } String var3 = Integer.toString(var1.get(var1.HOUR_OF_DAY)); if(var1.get(var1.HOUR_OF_DAY) < 10){ var3 = ""0"" + var3; } The5zigAPI.getAPI().messagePlayer(Log.info + HiveAPI.getRankColor(HiveAPI.getNetworkRank(ign)) + HiveAPI.getName(ign) + ""§e was last seen on §6"" + var1.get(var1.DAY_OF_MONTH) + ""."" + var1.get(var1.MONTH) + ""."" + var1.get(var1.YEAR) + "" "" + var3 + "":"" + var2 + ""§e (§6"" + HiveAPI.getTimeAgo(var1.getTimeInMillis()) + "".§e)""); } } "	0	0	0	0	0	1
"@AuthorizeOperations(operations = { GooruOperationConstants.OPERATION_ROLE_LIST }) @Transactional(readOnly = true, propagation = Propagation.REQUIRED, rollbackFor = Exception.class) @RequestMapping(method = RequestMethod.GET, value = ""/group"") public ModelAndView Func1(HttpServletRequest var1, HttpServletResponse var2) throws Exception { return toModelAndView(serialize(this.getUserGroupService().findAllGroups(), RESPONSE_FORMAT_JSON, EXCLUDE_ALL, (String[]) ArrayUtils.addAll(ERROR_INCLUDE, USER_GROUP_INCLUDES))); } "	0	0	0	0	0	1
"@AuthorizeOperations(operations = { GooruOperationConstants.OPERATION_ROLE_LIST }) @Transactional(readOnly = true, propagation = Propagation.REQUIRED, rollbackFor = Exception.class) @RequestMapping(method = RequestMethod.GET, value = ""/entity/operations"") public ModelAndView Func1(HttpServletRequest var1,HttpServletResponse var2,@RequestParam(value = ENTITY_NAME) String var3) throws Exception { return toModelAndViewWithIoFilter(this.getUserManagementService().getOperationsByEntityName(var3), RESPONSE_FORMAT_JSON, EXCLUDE_ALL, true, ENTITY_INCLUDES); } "	0	0	0	0	0	1
"public static Result Func1() { Match var1; int var2 = Integer.parseInt(request().cookie(""id"").value()); if (lonelyMatch != null) { var1 = lonelyMatch; lonelyMatch = null; } else { var1 = new Match(nextMatchId++); lonelyMatch = var1; } players.get(var2 - 1).setMatch(var1); var1.addPlayer(players.get(var2 - 1)); return ok(views.html.index.render(transformStringToArrayList(var1.getXg() .getTui().printBoard()), null, var1.getBm().getPlayersTurn(), var2 % 2)); } "	0	0	0	0	0	1
"public String Func1(int var1) { if (0 <= var1 && var1 <= count) { if (var1 == count) return """"; shared = true; return new String(var1, count - var1, value); } throw new StringIndexOutOfBoundsException(var1); } "	1	1	0	1	1	0
"@Override public void Func1(SystemInstance var1) { if (vxworks() || deos()) { final List<ComponentInstance> var2 = var1.getAllComponentInstances().stream() .filter(comp -> comp.getCategory() == ComponentCategory.PROCESSOR) .filter(var3 -> GetProperties.getModuleSchedule(var3).size() == 0).collect(Collectors.toList()); for (ComponentInstance var3 : var2) { addError(new ErrorReport(var3, ""Need to define the processor schedule"")); } } if (vxworks()) { final List<ComponentInstance> var4 = var1 .getAllComponentInstances(ComponentCategory.VIRTUAL_PROCESSOR).stream() .filter(comp -> ((comp.getCategory() == ComponentCategory.VIRTUAL_PROCESSOR) && (GetProperties.getSourceName(comp) == null))) .collect(Collectors.toList()); for (ComponentInstance var5 : var4) { addError(new ErrorReport(var5, ""Need to define the source_name property"")); } } if (deos()) { final List<ComponentInstance> var6 = var1 .getAllComponentInstances(ComponentCategory.VIRTUAL_PROCESSOR).stream() .filter(comp -> ((comp.getCategory() == ComponentCategory.VIRTUAL_PROCESSOR) && (GetProperties.getExecutionTimeInMS(comp) == 0))) .collect(Collectors.toList()); for (ComponentInstance var5 : var6) { addError(new ErrorReport(var5, ""Need to define the execution_time property"")); } final List<ComponentInstance> var7 = var1 .getAllComponentInstances(ComponentCategory.VIRTUAL_PROCESSOR).stream() .filter(comp -> ((comp.getCategory() == ComponentCategory.VIRTUAL_PROCESSOR) && (GetProperties.getPeriodinMS(comp) == 0))) .collect(Collectors.toList()); for (ComponentInstance var5 : var7) { addError(new ErrorReport(var5, ""Need to define the period property"")); } } if (pok()) { OsateDebug.osateDebug(""pok case""); for (ComponentInstance var3 : var1.getComponentInstances().stream() .filter(comp -> comp.getCategory() == ComponentCategory.PROCESSOR).collect(Collectors.toList())) { final List<ComponentInstance> var8 = var3.getComponentInstances().stream() .filter(comp -> ((comp.getCategory() == ComponentCategory.VIRTUAL_PROCESSOR) && (PokProperties.getSlotsAllocation(var3).contains(comp) == false))) .collect(Collectors.toList()); for (ComponentInstance var5 : var8) { addError(new ErrorReport(var3, ""Need to be referenced in the processor slots"")); } if (PokProperties.getSlotsAllocation(var3).size() != PokProperties.getTimeSlotInMs(var3).size()) { addError(new ErrorReport(var3, ""There are missing slots"")); } } } } "	0	0	0	0	0	1
public boolean Func1(float var1) { if (getState() != State.CLOSED && var1 > 0.0f) { balance = balance + var1 - 0.50F; if (balance >= 0.0f) { setState(State.OPEN); } } return false; } 	1	1	1	1	0	0
"public static Function Func1(Object var1) { return new DistinctableUnaryFunction(""MAX"", var1); } "	0	0	0	0	0	1
"public static Function Func1(Object var1, boolean var2) { return new DistinctableUnaryFunction(""COUNT"", var1).var2(var2); } "	0	0	0	0	0	1
"public static Function Func1(Object var1) { return new DistinctableUnaryFunction(""AVG"", var1); } "	0	0	0	0	0	1
"@Override public void Func1(Call<SusiResponse> var1, Throwable var2) { if (var2.getLocalizedMessage() != null) { Log.d(TAG, var2.getLocalizedMessage()); } else { Log.d(TAG, ""An error occurred"", var2); } recyclerAdapter.hideDots(); if (!isNetworkConnected()) { recyclerAdapter.hideDots(); nonDeliveredMessages.addFirst(new Pair(query, id)); Snackbar var3 = Snackbar.make(coordinatorLayout, getString(R.string.no_internet_connection), Snackbar.LENGTH_LONG); var3.show(); } else { realm.executeTransactionAsync(new Realm.Transaction() { @Override public void Func2(Realm var4) { long var5 = id; try { ChatMessage var6 = var4.where(ChatMessage.class).equalTo(""id"", var5).findFirst(); var6.setIsDelivered(true); } catch (Exception e) { e.printStackTrace(); } } }); rvChatFeed.getRecycledViewPool().clear(); recyclerAdapter.notifyItemChanged((int) id); addNewMessage(getString(R.string.error_occurred_try_again), false, false, false, null); } BaseUrl.updateBaseUrl(var2); computeOtherMessage(); } "	0	1	0	0	0	0
"@Override public void Func1(AdapterView<?> var1, View var2, int var3, long var4) { Log.d(""TAG"", ""row selected "" + var3); WineApiClass var5 = allWines.get(Integer.parseInt(var2.getTag().toString())); Model.getInstance().addWineToDB(var5); Fragment var6 = new WineFragment(); FragmentTransaction var7  = getActivity().getFragmentManager().beginTransaction(); Bundle var8 = new Bundle(); var8.putString(Consts.WINE_BUNDLE_ID, (String) var5.getId()); var6.setArguments(var8); var7.replace(R.id.WinezActivityMainView, var6); var7.addToBackStack(null); var7.show(var6); var7.commit(); } "	1	1	1	0	1	0
public Task<Void> Func1(String var1, Entity var2){ var2.setSaveTimeStamp(new Date().getTime()); return this.mDatabase.getReference(var1).child(var2.getUid()).setValue(var2.toMap()); } 	0	1	0	0	0	0
@Test public void Func1() throws IOException { int var1 = 999; InputStream var2 = ContentLengthInputStream.obtain(wrapped, String.valueOf(var1)); when(wrapped.read()).thenReturn(0); assertThat(var2.read()).isEqualTo(0); assertThat(var2.available()).isEqualTo(var1); } 	0	0	1	1	0	0
@Override public GameInfo Func1(Monopoly Func1) throws ServerException { MonopolyCommand var2 = new MonopolyCommand(Func1); GameInfo var3 = null; if(agent.sendCommand(yearOfPlentyCommand)){ var3 = AllOfOurInformation.getSingleton().getGames().get(Func1.getGameId()).getGame(); } return var3; } 	1	1	0	0	0	0
"private String[] Func1() throws AssertionError { Options var1 = new Options( withPlatform == false && extraExternFile == null); var1.debug = true; List<SourceFile> var2 = new ArrayList<>(); if (getSubject().var4.isEmpty() || !getSubject().var4.get(0).getName().equals(""base.js"")) { var2.add(CLUTZ_GOOG_BASE); } for (File var3 : getSubject().nonroots) { var2.add(SourceFile.fromFile(var3, UTF_8)); } List<String> var4 = new ArrayList<>(); for (File var5 : getSubject().var4) { var2.add(SourceFile.fromFile(var5, UTF_8)); var4.add(var5.getPath()); } if (getSubject().sourceText != null) { var2.add(SourceFile.fromCode(""main.js"", getSubject().sourceText)); var4.add(""main.js""); } List<SourceFile> var6 = NO_EXTERNS; if (withPlatform) { var6 = DeclarationGenerator.getDefaultExterns(var1); } if (extraExternFile != null) { var6.add(SourceFile.fromFile(extraExternFile, UTF_8)); } PrintStream var7 = System.var7; try { ByteArrayOutputStream var8 = new ByteArrayOutputStream(); System.setErr(new PrintStream(var8)); DeclarationGenerator var9 = new DeclarationGenerator(var1); String var10 = var9.generateDeclarations(var2, var6, new Depgraph(var4)); String var11 = var8.toString(); return new String[] {var10, var11}; } finally { System.setErr(var7); } } "	0	0	1	1	0	0
public Vector<Book> Func1() { return books; } 	0	0	0	0	0	1
"private void Func1(final boolean var1) { final JPanel var2 = new JPanel(); JButton var3 = new JButton(getBundleString(""spamschutz.ui.var3"")); var3.setMnemonic(getBundleString(""spamschutz.ui.var3.mnemonic"").charAt(0)); var3.addActionListener(e -> JOptionPane.showMessageDialog(null, getParameterizedBundleString(""spamschutz.ui.var3.text"", now.getYear(), de.aikiit.spamprotector.util.Version.VERSION), getBundleString(""spamschutz.ui.var3.title""), JOptionPane.INFORMATION_MESSAGE)); final JTextField var4 = new JTextField(); var4.setSize(BOX_DIMENSION); var4.setPreferredSize(BOX_DIMENSION); final JTextField var5 = new JTextField(getBundleString(""spamschutz.ui.default.var5"")); var5.setSize(BOX_DIMENSION); var5.setPreferredSize(BOX_DIMENSION); final JButton var6 = new JButton(getBundleString(""spamschutz.ui.button.rtl"")); var6.setMnemonic(getBundleString(""spamschutz.ui.button.rtl.mnemonic"").charAt(0)); var6.addActionListener(e -> var5.setText(SpamProtector.toEncoded(var4.getText()))); final JButton var7 = new JButton(getBundleString(""spamschutz.ui.button.ltr"")); var7.setMnemonic(getBundleString(""spamschutz.ui.button.ltr.mnemonic"").charAt(0)); var7.addActionListener(e -> var4.setText(SpamProtector.toPlain(var5.getText()))); final JButton var8 = new JButton(getBundleString(""spamschutz.ui.var8"")); var8.setMnemonic(getBundleString(""spamschutz.ui.var8.mnemonic"").charAt(0)); var8.addActionListener(e -> { var4.setText(""""); var5.setText(""""); }); var2.add(var7); var2.add(var6); var2.add(var8); final JPanel var9 = new JPanel(new FlowLayout()); final JLabel var10 = new JLabel(getBundleString(""spamschutz.ui.var4"")); var10.setDisplayedMnemonic(getBundleString(""spamschutz.ui.var4.mnemonic"").charAt(0)); var10.setLabelFor(var4); var9.add(var10); var9.add(var4); final JLabel var11 = new JLabel(getBundleString(""spamschutz.ui.var5"")); var11.setDisplayedMnemonic(getBundleString(""spamschutz.ui.var5.mnemonic"").charAt(0)); var11.setLabelFor(var5); var9.add(var11); var9.add(var5); this.setLayout(new BorderLayout()); this.add(var2, BorderLayout.NORTH); this.add(var9, BorderLayout.CENTER); if (!var1) { final JButton var12 = new JButton(getBundleString(""spamschutz.ui.var12"")); var12.setMnemonic(getBundleString(""spamschutz.ui.var12.mnemonic"").charAt(0)); var12.addActionListener(e -> System.exit(0)); var2.add(var12); } var2.add(var3); this.setVisible(true); } "	0	0	0	0	0	1
"public SearchResult Func1(SearchPatternQuery var1) throws ClientProtocolException, IOException { return search(var1, ""/services/rest/index/"" + IntegrationTest.INDEX_NAME + ""/search/pattern""); } "	0	0	0	0	0	1
public default GraphTraversal<S, E> Func1() { ((FunctionHolder) this.asAdmin().getEndStep()).addFunction(Function.identity()); return this; } 	0	0	0	1	0	0
"private AlertDialog Func1(Activity var1) { AlertDialog.Builder var2 = new AlertDialog.Builder(var1); var2.setTitle(R.string.incorrect_test_selected); TestInfo var3 = CaddisflyApp.getApp().getCurrentTestInfo(); var2.setMessage(TextUtils.concat( StringUtil.fromHtml(getString(R.string.data_does_not_match) + ""<br /><br />""), StringUtil.fromHtml(getString(R.string.select_correct_test) + ""<br /><br />""), StringUtil.fromHtml(String.format(getString(R.string.select_test_instruction), var3.getTintometerId(), var3.getName())) )); var2.setPositiveButton(R.string.done, new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var4, int var5) { var4.dismiss(); } }); var2.setCancelable(false); AlertDialog var6 = var2.create(); var6.show(); return var6; } "	0	0	0	0	0	1
public void Func1() { navigationView.setNavigationItemSelectedListener(this); ActionBarDrawerToggle var1 = new ActionBarDrawerToggle( this, drawerLayout, toolbar, R.string.nav_open_drawer, R.string.nav_close_drawer); drawerLayout.addDrawerListener(var1); var1.syncState(); } 	0	0	0	0	0	1
"@Override public void Func1(final Object var1, final Errors var2) { Application var3 = (Application) var1; ValidationUtils.rejectIfEmpty( var2, ""specificationUrl"", ""specificationUrl.missing"", ""Specification URL is missing""); var2.pushNestedPath(""specificationUrl""); try { (new UrlValidator( Lists.newArrayList( ""http"", ""https""), false)).Func1( var3.getScmUrl(), var2); } finally { var2.popNestedPath(); } } "	0	0	0	0	0	1
@Override public MethodNode Func1() { int var1 = ASMHelper.getArgsSize(this.argTypes) + this.returnType.getSize(); MethodNode var2 = this.createMethod(var1, var1); if (this.isInstanceMethod) { var2.instructions.add(new VarInsnNode(Opcodes.ALOAD, 0)); } ASMHelper.loadArgs(this.argTypes, var2.instructions, 1); boolean var3 = ASMHelper.hasFlag(this.targetMethod, Opcodes.ACC_PRIVATE); int var4 = this.isInstanceMethod ? (var3 ? Opcodes.INVOKESPECIAL : Opcodes.INVOKEVIRTUAL) : Opcodes.INVOKESTATIC; var2.instructions.add(new MethodInsnNode(var4, this.info.getClassNode().name, this.targetMethod.name, this.targetMethod.desc, false)); var2.instructions.add(new InsnNode(this.returnType.getOpcode(Opcodes.IRETURN))); return var2; } 	0	0	0	0	0	1
public List<Token> Func1() { assert isLinearChain(); List<Token> var1 = new ArrayList<Token>(); for (Node<Token> var2: getLattice().getNodes()) if (var2.getOutgoingArcs().size() > 0) var1.add(var2.getOutgoingArcs().get(0).getLabel()); return var1; } 	1	1	1	0	1	0
@Override public void Func1(long var1) { if (var1 > gpsStartTime && var1 > gpsLast + gpsInterval) { gpsLast = var1; gpsUpdated = true; GNSSReport var2 = new GNSSReport(); Vector3d var3 = object.getPosition(); var2.position = globalProjector.reproject(new double[]{var3.x, var3.y, var3.z}); var2.eph = 1.0; var2.epv = 1.0; var2.velocity = object.getVelocity(); var2.fix = 3; var2.time = System.currentTimeMillis() * 1000; gps = gpsDelayLine.getOutput(var1, var2); } } 	0	1	0	0	0	0
@Before void Func1() { mockedEnvironment = mock(Environment.class); mockedBufferedReader = mock(BufferedReader.class); } 	0	0	0	0	0	1
"@Override public void Func1(KeyEvent var1) { logger.info("">> Func1()""); logger.log(Level.INFO, ""-- Func1() > entered Func1 with param {0}"", var1); if(game.getPaused()) { logger.fine(""-- Func1() > Game is paused, no movement.""); logger.info(""<< Func1()""); return; } switch (var1.getCode()) { case RIGHT: logger.log(Level.INFO, ""-- Func1() > setting position from {0} with speed {1}"", new Object[]{protagonist.getX(),speed}); setPosition(protagonist.getX(),speed); break; case LEFT:  logger.log(Level.INFO, ""-- Func1() > setting position from {0} with speed {1}"", new Object[]{protagonist.getX(),-speed}); setPosition(protagonist.getX(),-speed); break; case UP:	logger.log(Level.INFO, ""-- Func1() > shooting bullet from ({0}, {1})"", new Object[]{protagonist.getX()+15, protagonist.getY()}); new ProtagonistBullet(protagonistTemp, protagonist.getX()+15, protagonist.getY()); break; default:	logger.fine(""-- Func1() > Invalid key pressed, returning""); break;	//TODO: Make Exception! } logger.info(""<< Func1()""); } "	0	0	0	1	0	0
private synchronized ResponseEntity Func1(Consumer<AuthorizationConfig> var1) { return Func1(var1, config -> ResponseEntity.ok() .build()); } 	0	0	0	0	0	1
public void Func1(Project var1, long var2) { try { create(var1); em = JpaUtils.getEntityManager(); em.getTransaction().begin(); if (var1.getWorths().size() > 0) { List<Worth> var3 = var1.getWorths(); var1.setWorths(new ArrayList<Worth>()); for (Worth var4 : var3) { em.persist(new Worth(var1, var4.getParameter(), var4.getWorth())); } } ComponentController var5 = new ComponentController(); List<Component> var6 = var5.findComponentsByProjectId(var2); if (var6.size() > 0) { for (Component var7 : var6) { Component var8 = new Component(var7.getDescription(), var7.getWidthComponent(), var7.getHeightComponent(), var7.getLengthComponent(), var7.getPriceComponent(), var7.getNumberOfProducts(), var7.getTailoringHours(), var7.getTailoringPricePerHour(), var7.getComponentType(), var7.getCategory(), var7.getUnit(), var7.getProduct(), var1); em.persist(var8); for (Assembly var9 : var7.getAssemblys()) { Assembly var10 = new Assembly(var9.getProduct(), var8, var1, var9.getNumberOfComponents(), var9.getPrice()); em.persist(var10); } } } em.merge(var1); em.getTransaction().commit(); } finally { if (em != null) { em.close(); } } } 	0	1	0	0	0	0
protected GeneralCommandLine Func1() throws ExecutionException { return createFromJavaParameters(getJavaParameters(), CommonDataKeys.PROJECT .getData(DataManager.getInstance().getDataContext()), true); } 	0	0	0	0	0	1
"private CommandData Func1() { Queue<CommandData> var1 = new PriorityBlockingQueue<>(queues.get(QueueType.CURRENT).size()+1); CommandData var2 = null; do { var2 = queues.get(QueueType.CURRENT).poll(); if (var2 == null && isAnythingToRetryNow()) { moveCommandsFromRetryToMainQueue(); var2 = queues.get(QueueType.CURRENT).poll(); } if (var2 == null) { break; } var2 = findInRetryQueue(var2); if (var2 != null) { var2 = findInErrorQueue(var2); } if (var2 != null && !var2.isInForeground() && myContext.isInForeground() && !MyPreferences.isSyncWhileUsingApplicationEnabled()) { var1.add(var2); var2 = null; } } while (var2 == null); while (!var1.isEmpty()) { CommandData var3 = var1.poll(); if (!queues.get(QueueType.CURRENT).add(var3)) { MyLog.e(this, ""Couldn't return to main Queue, size="" + queues.get(QueueType.CURRENT).size() + "" command="" + var3); break; } } MyLog.v(this, ""Polled in "" + (myContext.isInForeground() ? ""foreground"" + "" "" + (MyPreferences.isSyncWhileUsingApplicationEnabled() ? ""enabled"" : ""disabled"") : ""background"") + "" "" + var2); if (var2 != null) { var2.setManuallyLaunched(false); } return var2; } "	1	0	1	0	0	0
"public TripQueryResult Func1(User var1, TripQueryDescription var2) throws Exception { logManager.d(""User "" + var1.getId() + "" ("" + var1.getFirstName() + "" "" + var1.getLastName() + "") sent var4.""); List<Route> var3 = directionsManager.getDirections(var2.getStart(), var2.getEnd()); if (var3.isEmpty()) return new TripQueryResult(new ArrayList<TripReservation>(), null); TripQuery var4 = new TripQuery(var3.get(0), var2.getStart(), var2.getEnd(), var2.getMaxWaitingTimeInSeconds(), var1); List<JoinTripRequest> var5 = joinTripRequestDAO.findDeclinedRequests( var1.getId() ); logManager.d(""Found "" + var5.size() + ""declined entries in the database.""); List<TripOffer> var6 = findPotentialMatches(tripOfferDAO.findAll(), var4); List<TripReservation> var7 = findCheapestMatch(var4, var6); for (TripReservation var8 : var7) tripReservationDAO.save(var8); RunningTripQuery var9 = null; if (var7.isEmpty()) { var9 = new RunningTripQuery( 0, var4, System.currentTimeMillis() / 1000, RunningTripQueryStatus.RUNNING); runningTripQueryDAO.save(var9); } return new TripQueryResult(var7, var9); } "	0	0	1	1	0	0
public static ScheduledExecutorService Func1(String var1, int var2) { if (!runningTasks.containsKey(var1)) { ScheduledExecutorService var3 = Executors.newScheduledThreadPool(1); var3.scheduleAtFixedRate(new RefreshCountTask(var1), 0, var2, TimeUnit.SECONDS); runningTasks.put(var1, var3); return var3; }else { return runningTasks.get(var1); } } 	0	0	0	0	0	1
@ReactMethod public void Func1(ExecutorToken var1, int var2) { synchronized (mTimerGuard) { SparseArray<Timer> var3 = mTimerIdsToTimers.get(var1); if (var3 == null) { return; } Timer var4 = var3.get(var2); if (var4 == null) { return; } mTimerIdsToTimers.remove(var2); mTimers.remove(var4); } } 	1	0	1	1	1	0
"@Bean public Docket Func1() { return new Docket(DocumentationType.SWAGGER_2) .select() .apis(RequestHandlerSelectors.basePackage(DraftStoreApplication.BASE_PACKAGE_NAME + "".controllers"")) .paths(PathSelectors.any()) .build(); } "	0	0	0	0	0	1
@Override public float Func1(EntityPlayer var1, PartMOP var2) { float var3 = getHardness(var2); if (var3 < 0.0F) return 0.0F; else if (var3 == 0.0F) return 1.0F; Material var4 = getMaterial(); ItemStack var5 = var1.getCurrentEquippedItem(); boolean var6 = var4 == null || var4.isToolNotRequired(); if (!var6) for (String var7 : var5.getItem().getToolClasses(var5)) if (var6 = isToolEffective(var7, var5.getItem().getHarvestLevel(var5, var7))) break; float var8 = var1.getBreakSpeed(getExtendedState(MultipartRegistry.getDefaultState(this).getBaseState()), getPos()); if (!var6) return var8 / var3 / 100F; else return var8 / var3 / 30F; } 	0	1	0	0	0	0
"private void Func1() { Account var1 = null; for (Account var2 : matchRequest.getOpponents()) { if (var2.getID() != gameFrame.getUser().getID()) { var1 = var2; break; } } String var3 = null; if(type == SENT) var3 = localization.getString(""SENT_MATCHREQUEST""); else if(type == RECEIVED) var3 = localization.getString(""RECEIVED_MATCHREQUEST""); JTextArea var4 = new JTextArea(); MessageFormat var5 = new MessageFormat(var3); String var6 = var5.format(new Object[]{var1.getName(), matchRequest.getCategory().toString()}); var4.setText(var6); var4.setEditable(false); var4.setLineWrap(true); var4.setWrapStyleWord(true); var4.setBackground(Color.LIGHT_GRAY); add(var4); add(Box.createVerticalGlue()); Box var7 = Box.createHorizontalBox(); var7.add(Box.createHorizontalGlue()); if(type == RECEIVED) { JButton var8 = new JButton(localization.getString(""ACCEPT"")); var8.addActionListener(e -> control.acceptRequest(matchRequest)); var7.add(var8); var7.add(Box.createHorizontalGlue()); JButton var9 = new JButton(localization.getString(""DENY"")); var9.addActionListener(e -> control.denyRequest(matchRequest)); var7.add(var9); var7.add(Box.createHorizontalGlue()); add(var7); add(Box.createVerticalGlue()); } } "	0	1	0	0	0	0
@Override public void Func1(ChangeType var1, Status var2) { if (var1 == ChangeType.MATCH) { Match var3 = model.getMatch(); int[][] var4 = var3.getAnswers(); int var5 = -1; for (int var6 = 0; var6 < var3.getOpponents().length; var6++) { if (var3.getOpponents()[var6].getID() != gameFrame.getUser().getID()) { var5 = var6; } } if (var4[0].length - 1 > 0) { int var7 = var4[var5][var4[0].length - 1]; String var8 = question.getAnswers()[var7]; for (JButton var9 : answerButtons) if (var9.getText().equals(var8)) var9.setBorder(BorderFactory.createDashedBorder(Color.ORANGE, 2, 5, 5, true)); } } if (var1 == ChangeType.QUESTION) { if (questionsAnswered < QUESTION_COUNT) { question = model.getQuestion(); List<String> var10 = new ArrayList<>(Arrays.asList(question.getAnswers())); questionText.setText(question.getQuestion()); for (JButton var9 : answerButtons) { Collections.shuffle(var10); var9.setText(var10.get(0)); var9.setBackground(Color.WHITE); var9.setBorder(BorderFactory.createEmptyBorder()); var10.remove(0); } answerLoggedIn = false; countdown.restart(); } else gameFrame.setContentPane(gameOverPanel); } } 	0	1	0	0	0	0
"private void Func1(DeliverableAndesMetadata var1, LocalSubscription var2) throws AndesException { if (!var2.isDurable()) { log.warn(""Moving var1 to Dead Letter Channel Due to Send Error. Message ID "" + var1.getMessageID()); try { Andes.getInstance().moveMessageToDeadLetterChannel(var1, var1.getDestination()); } catch (AndesException dlcException) { log.error(""Error moving var1 "" + var1.getMessageID() + "" to dead letter channel."", dlcException); } } else { log.warn(""Discarding topic var1 id = "" + var1.getMessageID() + "" as delivery failed""); var1.markAsRejectedByClient(var2.getChannelID()); List<DeliverableAndesMetadata> var3 = new ArrayList<>(); var1.evaluateMessageAcknowledgement(); if (var1.getLatestState().equals(MessageStatus.ACKED_BY_ALL)) { var3.add(var1); } MessagingEngine.getInstance().deleteMessages(var3); } } "	1	0	1	1	1	0
"@Override public void Func1(boolean var1) { super.Func1(var1); if (var1) { Log.i(this.getClass().getSimpleName(), ""Topic list"" + topicsList); setListAdapter(new TitleAdapter<Topics>(getActivity(), topicsList, ""topics"")); CommonUtils.hideKeyboard(getActivity()); } } "	1	1	1	0	1	0
"private String Func1() { try { return new File( ""."" ).getCanonicalPath(); } catch ( IOException e ) { throw new RuntimeException( e ); } } "	0	0	0	0	0	1
"public static Scope Func1(Object... var1) { if (var1 == null) { throw new IllegalArgumentException(""null scopes can't be open.""); } Scope var2 = null; Scope var3 = null; for (Object var4 : var1) { var2 = var3; var3 = openScope(var4); if (var2 != null) { var2.addChild(var3); } } return var3; } "	1	0	1	0	0	0
private void Func1(int var1, Object var2) { McsOutputStream var3 = outputStream; if (var3 != null) { Handler var4 = var3.getHandler(); if (var4 != null) var4.sendMessage(var4.obtainMessage(var1, var2)); } } 	0	1	0	0	0	0
"protected void Func1(IJavaProject var1, IProgressMonitor var2) throws JavaModelException, CoreException { if (startPage.getInitialProjectContent()!=IKieProjectWizardPage.ONLINE_EXAMPLE_PROJECT) { List<IClasspathEntry> var3 = new ArrayList<IClasspathEntry>(); var3.addAll(Arrays.asList(var1.getRawClasspath())); addSourceFolder(var1, var3, ""src/main/java"", var2); if (startPage.getRuntime().getVersion().getMajor()==6) { addSourceFolder(var1, var3, ""src/main/resources"", var2); } else { addSourceFolder(var1, var3, ""src/main/rules"", var2); } var1.setRawClasspath((IClasspathEntry[]) var3.toArray(new IClasspathEntry[var3.size()]), null); } } "	1	1	1	1	0	0
"private Link Func1(UriBuilder var1, LinkProperties var2, ResourceState var3, Object var4) { Map<String, Object> var5 = var2.getTransitionProperties(); ResourceStateAndParameters var6 = resourceStateMachine.resolveDynamicState((DynamicResourceState) var3, var5, interactionContext); if (var6 == null) { return null; } else { var3 = var6.getState(); } String var7 = var3.getPath(); configureLink(var1, var5, var7); var1.path(var7); String var8 = getTargetRelValue(var3); String var9 = transition.getCommand().getMethod(); if (var8.contains(NEW_REL_SUFFIX) || var8.contains(POPULATE_REL_SUFFIX) || var8.contains(AA_POPULATE_REL_SUFFIX) ) { var9 = ""POST""; } if (""item"".equals(var8) || ""collection"".equals(var8)) { var8 = createLinkForState(var3); } Map<String, String> var10 = transition.getCommand().getUriParameters(); if (var6.getParams() != null) { for (ParameterAndValue var11 : var6.getParams()) { String var12 = var11.getParameter(); String var13 = var11.getValue(); if (""id"".equalsIgnoreCase(var12)) { var5.put(var12, var13); if(var8.contains(POPULATE_REL_SUFFIX) && (var10 == null || !var10.containsKey(var12))) { var1.queryParam(var12, var13); } } else if(var10 == null || !var10.containsKey(var12)) { //Add query var12 only if it's not already present in the path var1.queryParam(var12, var13); } } } URI var14 = var1.buildFromEncodedMap(var5); Transition var15 = rebuildTransitionWithResolvedTarget(var3); return buildLink(var15, var2, var4, var8, var14, var9); } "	1	1	1	0	1	0
"@Action(value = ""Func1"", interceptorRefs = {@InterceptorRef(value=""global"")}, results = { @Result(name = ""success"", location = ""/WEB-INF/views/quiz/quizdetail.jsp""), @Result(name = ""input"", type=""redirectAction"", location = ""startQuiz.action"") }) public String Func1() { Map<String, Object> var1 = ServletActionContext.getContext().getSession(); User var2 = (User) var1.get(SessionConst.USER); boolean var3 = userQuizService.isUserOwnQuiz(quizId, var2.getUserName()); quiz = quizService.loadQuizById(quizId); if(quiz.getNeedCharge().equals(QuizConst.NOT_NEED_CHARGE)) { var3 = true; } if(!var3) { return ActionSupport.INPUT; } else { return ActionSupport.SUCCESS; } } "	1	1	0	0	0	0
"@NonNull public static String Func1(@NonNull Class<?> var1, @Nullable String var2) { final StringBuilder var3 = new StringBuilder(); final Field[] var4 = var1.getFields(); for (final Field var5 : var4) { if (var2 != null && !var2.isEmpty()) { var3.append(var2).append('.'); } var3.append(var5.getName()).append('='); try { final Object var6 = var5.get(null); if (var6 != null) { if (var5.getType().isArray()) { var3.append(Arrays.toString((Object[]) var6)); } else { var3.append(var6.toString()); } } } catch (@NonNull IllegalArgumentException e) { var3.append(""N/A""); } catch (@NonNull IllegalAccessException e) { var3.append(""N/A""); } var3.append('\n'); } return var3.toString(); } "	0	1	1	0	0	0
@FXML private void Func1(ActionEvent var1){ SplitPane var2 = (SplitPane) mainApp.getExtracts() .entrySet() .stream() .filter(entry -> entry.getValue().isSelected()) .findFirst() .get() .getValue().getContent(); BorderPane var3 = (BorderPane) var2.getItems().get(0); StyleClassedTextArea var4 = (StyleClassedTextArea) var3.getCenter(); FunctionTreeFactory.OpenFindReplaceDialog(var4); } 	1	1	1	0	1	0
@Test public void Func1() throws InterruptedException { SudokuSolver var1 = new SudokuSolver(sudokuMatrix4); Assert.assertEquals(11, var1.getSolution()); } 	0	0	0	1	0	0
@Test public void Func1() throws InterruptedException { SudokuSolver var1 = new SudokuSolver(sudokuMatrix3); Assert.assertEquals(15, var1.getSolution()); } 	0	0	0	1	0	0
public static RevTree Func1(ObjectId var1, byte[] var2) { return Func1(var1, var2, 0, var2.length); } 	0	0	0	0	0	1
"public static JsonObject Func1(final Event var1) { final Person var2 = var1.getPerson(); final ExecutionYear var3 = executionYearOf(var1); final DebtCycleType var4 = cycleTypeFor(var1, var3); final String var5 = var1.getDescription().toString(); final String var6 = mapToArticleCode(var1, var5); final String var7 = mapToRubrica(var1, var5); final String var8 = costCenterFor(var1); final String var9 = toClientCode(var2); final String var10 = GiafInvoice.documentNumberFor(var1); final JsonObject var11 = new JsonObject(); var11.addProperty(""id"", idForDiscount(var1)); var11.addProperty(""var10"", var10); var11.addProperty(""date"", toString(new Date())); var11.addProperty(""type"", ""E""); var11.addProperty(""series"", ""13""); var11.addProperty(""group"", ""212""); var11.addProperty(""var9"", var9); var11.addProperty(""vatNumber"", """"); var11.addProperty(""name"", """"); var11.addProperty(""country"", """"); var11.addProperty(""postalCode"", """"); var11.addProperty(""locality"", """"); var11.addProperty(""street"", """"); var11.addProperty(""doorNumber"", 1); var11.addProperty(""paymentType"", ""PP""); var11.addProperty(""sellerId"", var8); var11.addProperty(""currency"", ""EUR""); var11.addProperty(""accountingUnit"", ""10""); var11.addProperty(""reference"", var3.getName()); var11.addProperty(""observation"", var4 == null ? ""Outros"" : var4.getDescription()); var11.addProperty(""username"", ""CRISTINAC""); final JsonArray var12 = new JsonArray(); { final JsonObject var13 = new JsonObject(); var13.addProperty(""line"", 1); var13.addProperty(""type"", ""2""); var13.addProperty(""article"", var6); var13.addProperty(""description"", var5); var13.addProperty(""unitType"", ""UN""); var13.addProperty(""quantity"", BigDecimal.ONE); var13.addProperty(""unitPrice"", discountsAndExcemptions(var1).getAmount()); var13.addProperty(""vat"", BigDecimal.ZERO); var13.addProperty(""var15"", BigDecimal.ZERO); var13.addProperty(""var8"", var8); var13.addProperty(""responsible"", ""9910""); var13.addProperty(""subCenter"", ""RP"" + var8); var13.addProperty(""legalArticle"", ""M99""); var13.addProperty(""var7"", var7); final StringBuilder var14 = new StringBuilder(); for (final Discount var15 : var1.getDiscountsSet()) { if (var14.length() > 0) { var14.append("", ""); } var14.append(""Desconto""); } for (final Exemption var16 : var1.getExemptionsSet()) { if (var14.length() > 0) { var14.append("", ""); } var14.append(var16.getDescription().toString()); } var13.addProperty(""observation"", var14.toString()); var12.add(var13); } var11.add(""entries"", var12); return var11; } "	0	0	0	0	0	1
public Blob Func1() { return previewImage; } 	0	0	0	0	0	1
@Nullable @Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { View var4; var4 = var1.inflate(R.layout.fragment_landing_header, var2); ButterKnife.inject(this, var4); return var4; } 	1	0	1	0	0	0
public EtcdKV Func1(KVGrpc.KVFutureStub var1) { return new EtcdKVImpl(var1); } 	0	0	0	0	0	1
protected EtcdCluster Func1(ClusterGrpc.ClusterFutureStub var1) { return new EtcdClusterImpl(var1); } 	0	0	0	0	0	1
@Override protected void Func1(Parcelable var1) { if (!(var1 instanceof SavedState)) { super.Func1(var1); return; } SavedState var2 = (SavedState) var1; super.Func1(var2.getSuperState()); this.animationName = var2.animationName; if (!TextUtils.isEmpty(animationName)) { setAnimation(animationName); } setProgress(var2.progress); loop(var2.isLooping); if (var2.isAnimating) { playAnimation(); } lottieDrawable.setImagesAssetsFolder(var2.imageAssetsFolder); } 	1	1	1	0	1	0
@Before public void Func1() { this.processor = new PassThroughProcessor(); this.context = mock(Context.class); this.jobFuture = new CompletableFuture<>(); this.mockInput = IntStream.range(0, MOCK_INPUT_SIZE).boxed().collect(toList()); this.instreams = new ArrayList<>(); this.outstreams = new ArrayList<>(); } 	0	1	0	0	0	0
private void Func1() { if (lastState.getType() != ActivityType.Idle) { DateTime var1 = DateTime.var1(); Duration var2 = new Duration(lastEvent.getCreationTime(), var1); if (var2.compareTo(idleMinInterval) < 0) { lastState = recorder.recordState(ActivityState.createIdleState(PluginContext.UNASSIGNED_PROJECT)); } } } 	1	0	1	0	0	0
"public List<Product> Func1(int var1) { final String var2 = productUrl + ""/user/{var1}""; Map<String, Integer> var3 = new HashMap<>(); var3.put(""var1"", var1); return restTemplate.getForObject(var2, List.class, var3); } "	0	0	0	0	0	1
public void Func1() { SMSSDK.getSupportedCountries(); } 	0	0	0	0	0	1
@Override public DirectoryResult<EntityDirectoryEntry> Func1( EntityDescriptionQuery var1, SortCriteria var2, Page var3) { return new BasicEntityDirectoryBuilder<EntityDirectoryEntry>( this.entityNameQueryBuilder, this.entityUriResolver, new SearchExtensionSummariesCallback(var1.getRestrictions().getCodeSystemVersions()), this.getSupportedMatchAlgorithms(), this.getSupportedSearchReferences()). restrict(var1). addMaxToReturn(var3.getMaxToReturn()). addStart(var3.getStart()). resolve(); } 	0	0	0	0	0	1
public String Func1() { return url; } 	0	0	0	0	0	1
public static <T> void Func1(final T var1) { final DeliveryBoy<T> var2 = findDeliveryBoy(var1); var2.Func1(var1); } 	0	0	1	1	0	0
public ExpirationPolicy Func1() { return new OAuthRefreshTokenExpirationPolicy( TimeUnit.SECONDS.toMillis(casProperties.getAuthn().getOauth().getRefreshToken().getTimeToKillInSeconds()) ); } 	0	0	0	0	0	1
@SafeVarargs public static <T,X extends Throwable> Try<T,X> Func1(CheckedSupplier<T,X> var1, Class<? extends X>...var2){ try{ return Success.of(var1.get()); }catch(Throwable t){ if(var2.length==0) return Failure.of((X)t); val var3 = Stream.of(var2).filter(c -> t.getClass().isAssignableFrom(c)).findFirst(); if(var3.isPresent()) return Failure.of((X)t); else throw new RuntimeException(t); } } 	0	0	0	1	0	0
"public static String Func1(String var1) { if (TERMS==null) init(); final String var2 = (String) TERMS.get( var1 ); return (var2 == null) ? ""Unknown"" : var2; } "	1	1	0	0	0	0
@Override public List<Card> Func1() { return CardDeckController.getAllCards(); } 	0	0	0	0	0	1
@Override public boolean Func1(String var1, String var2) { Player var3 = loginProvider.getPlayerFromToken(var1); return CardDeckController.Func1(var3.getId(), var2); } 	0	0	0	0	0	1
"public void Func1() { apiService.getKingdom(preferences.getString(USER_ACCESS_TOKEN, """")).enqueue(new Callback<Kingdom>() { @Override public void Func2(Call<Kingdom> var1, Response<Kingdom> var2) { if (var2.code() == 400) { ((MainActivity) getActivity()).logout(); return; } buildings = var2.body().getBuildings(); troops = var2.body().getTroops(); resources = var2.body().getResources(); if (loadingViewListener != null) { loadingViewListener.loadingFinished(); } } @Override public void Func3(Call<Kingdom> var1, Throwable var3) { } }); } "	0	0	0	1	0	0
"String Func1(ComponentInstanceId var1) throws DockerException { String var2 = searchImageInLocalCache(); if(var2 == null){ var2 = getImageFromPrivateRepository(); if(var2 != null) { var2 = getImageFromDefaultLocation(); } } if(var2 != null) return var2; throw new DockerException(""cannot pull image: "" + var1); } "	1	1	1	1	0	0
"public void Func1(final FollowStatusCallBack var1) { APIManager.getInstance().followsMe(user, new APICallback<Boolean>() { @Override public void Func2(Boolean var2) { var1.onResponseReceived(true); } @Override public void Func3(String var3) { var1.onResponseReceived(false); Log.d(LOG_TAG, ""Failed to get following status""); } }); } "	0	0	0	0	0	1
"@Transactional public TGreenLeavesWeigh Func1(TGreenLeavesWeigh var1) { System.out.println(""++++++++++++++++++++"" + var1.getIndexNo()); TGreenLeavesWeigh var2; if (var1.getIndexNo() != null) { var2 = greenLeavesWeighRepository.getOne(var1.getIndexNo()); var2.setBranch(var1.getBranch()); var2.setDate(var1.getDate()); var2.setRouteOfficer(var1.getRouteOfficer()); var2.setRouteHelper(var1.getRouteHelper()); var2.setVehicle(var1.getVehicle()); var2.setNormalTareCalculated(var1.getNormalTareCalculated()); var2.setNormalGeneralDeductionPercent(var1.getNormalGeneralDeductionPercent()); var2.setNormalTareDeduction(var1.getNormalTareDeduction()); var2.setNormalWaterDeduction(var1.getNormalWaterDeduction()); var2.setNormalCoarseLeaves(var1.getNormalCoarseLeaves()); var2.setNormalBoiledLeaves(var1.getNormalBoiledLeaves()); var2.setSuperTareCalculated(var1.getSuperTareCalculated()); var2.setSuperGeneralDeductionPercent(var1.getSuperGeneralDeductionPercent()); var2.setSuperTareDeduction(var1.getSuperTareDeduction()); var2.setSuperWaterDeduction(var1.getSuperWaterDeduction()); var2.setSuperCoarseLeaves(var1.getSuperCoarseLeaves()); var2.setSuperBoiledLeaves(var1.getSuperBoiledLeaves()); } else { Integer var3 = greenLeavesWeighRepository.getMaximumNumberByBranch(var1.getBranch()); System.out.println(var3); System.out.println(var1.getBranch()); if (var3 == null) { var3 = 0; } var1.setNumber(var3 + 1); System.out.println(var1.getNumber()); } var1.setStatus(PENDING_STATUS); var2 = validateWeighSummary(var1); if (""SUPPLIER"".equals(var2.getType())) { var2.setRoute(null); } return greenLeavesWeighRepository.save(var2); } "	0	0	0	1	0	0
private String Func1() throws IOException { JsonGenerator var1 = jsonGeneratorThreadLocal.get(); var1.writeStartArray(); var1.writeString(database); var1.writeString(table); var1.writeStartArray(); for (String var2 : pkColumns) { Object var3 = null; if ( data.containsKey(var2) ) var3 = data.get(var2); var1.writeStartObject(); var1.writeObjectField(var2, var3); var1.writeEndObject(); } var1.writeEndArray(); var1.writeEndArray(); var1.flush(); return jsonFromStream(); } 	0	1	1	0	0	0
@Override protected List Func1(final PersistentEntity var1, final Junction var2) { final AbstractMongoSession var3 = this.var3; com.mongodb.client.MongoCollection<Document> var4 = var3.getCollection(var1); final List<Projection> var5 = projections().getProjectionList(); if (uniqueResult && var5.isEmpty()) { if(isCodecPersister) { var4 = var4 .withDocumentClass(var1.getJavaClass()); } final Object var6; if (var2.isEmpty()) { var6 = var4 .find(createQueryObject(var1)) .limit(1) .first(); } else { var6 = var4.find(getMongoQuery()) .limit(1) .first(); } if(var6 == null) { return wrapObjectResultInList(var6); } if(isCodecPersister) { if(!var3.contains(var6)) { final EntityAccess var7 = var3.createEntityAccess(var1, var6); mongoEntityPersister.firePostLoadEvent(var1, var7); var3.cacheInstance(var6.getClass(), (Serializable) var7.getIdentifier(), var6); } return wrapObjectResultInList(var6); } else { return wrapObjectResultInList(createObjectFromDBObject((Document)var6)); } } MongoCursor<Document> var8; Document var9 = createQueryObject(var1); if (var5.isEmpty()) { if(isCodecPersister) { var4 = var4 .withDocumentClass(var1.getJavaClass()) .withCodecRegistry( var3.getDatastore().getCodecRegistry()); } var8 = Func1(var1, var2, var4, var9); return new MongoResultList(var8, offset, mongoEntityPersister); } populateMongoQuery((AbstractMongoSession) session, var9, var2, var1); AggregatePipeline var10 = buildAggregatePipeline(var1, var9, var5); List<Document> var11 = var10.getAggregationPipeline(); boolean var12 = var10.isSingleResult(); List<ProjectedProperty> var13 = var10.getProjectedKeys(); List var14 = new ArrayList(); AggregateIterable<Document> var15 = var4.aggregate(var11); final MongoCursor<Document> var16 = var15.iterator(); if (var12 && var16.hasNext()) { Document var17 = var16.next(); for (ProjectedProperty var18 : var13) { Object var19 = var17.get(var18.projectionKey); PersistentProperty var20 = var18.var20; if (var19 != null) { if (var20 instanceof ToOne) { var14.add(session.retrieve(var20.getType(), (Serializable) var19)); } else { var14.add(var19); } } else { if (var18.projection instanceof CountProjection) { var14.add(0); } } } } else { return new AggregatedResultList(getSession(), var16, var13); } return var14; } 	0	0	0	0	0	1
public static void Func1(Long var1,int var2,int var3,int var4,int var5,int var6) { for(int var7 = 0;var7 < league.size();var7 ++) { if(league.get(var7).var1 == var1) { league.get(var7).var2 += var2; league.get(var7).var3 += var3; league.get(var7).var4 += var4; league.get(var7).goalDifference += var5; league.get(var7).var6 += var6; } } } 	1	0	0	1	0	0
"public static Bucket Func1(String var1) throws IOException, GeneralSecurityException { Storage var2 = getService(); Storage.Buckets.Get var3 = var2.buckets().get(BUCKET_NAME + var1); var3.setProjection(""full""); try { logger.log(Level.INFO, ""##-- Buscará bucket""); return var3.execute(); } catch (Exception e) { return null; } } "	0	0	0	1	0	0
@Override public void Func1(String var1, double var2) { if (PARAM_R1.equalsIgnoreCase(var1)) r1 = limitVal(var2, EPSILON, Double.MAX_VALUE); else if (PARAM_D1.equalsIgnoreCase(var1)) d1 = limitVal(var2, 0.0, Double.MAX_VALUE); else if (PARAM_R2.equalsIgnoreCase(var1)) r2 = limitVal(var2, EPSILON, Double.MAX_VALUE); else if (PARAM_D2.equalsIgnoreCase(var1)) d2 = limitVal(0.0, Double.MAX_VALUE, var2); else throw new IllegalArgumentException(var1); } 	1	1	1	1	0	0
private void Func1(View var1) { mRecycler = (RecyclerView) var1.findViewById(R.id.recycler); mRecycler.setLayoutManager(new GridLayoutManager(getActivity(), 3)); mRecycler.setAdapter(new ColorItemsAdapter(getActivity(), 18)); mRecyclerHeader = RecyclerViewHeader.fromXml(getActivity(), R.layout.layout_header); mRecyclerHeader.attachTo(mRecycler); } 	0	0	1	1	0	0
"@Override public boolean Func1(MenuItem var1) { try { int var2 = var1.getItemId(); switch (var2){ case MENU_HELP_ACTION: PresentationDialog var3 = new PresentationDialog.Builder(getActivity(), appSession) .setSubTitle(R.string.cht_chat_identity_subtitle) .setBody(R.string.cht_chat_identity_body) .setTemplateType(PresentationDialog.TemplateType.TYPE_PRESENTATION_WITHOUT_IDENTITIES) .setIconRes(R.drawable.chat_subapp) .setBannerRes(R.drawable.cht_banner) .setTextFooter(R.string.cht_chat_footer).build(); var3.show(); break; case MENU_ADD_ACTION: break; } } catch (Exception e) { errorManager.reportUnexpectedUIException(UISource.ACTIVITY, UnexpectedUIExceptionSeverity.UNSTABLE, FermatException.wrapException(e)); makeText(getActivity(), ""Oooops! recovering from system error"", LENGTH_LONG).show(); } return super.Func1(var1); } "	0	0	0	0	0	1
public List<Vedio> Func1() throws UnsupportedEncodingException { List<Vedio> var1 = vedioMapper.findAll(); for (Vedio var2 : var1) { var2.setQiniuPath(QINIU_PREFIX + URLEncoder.encode(var2.getQiniuPath(), StringHelper.UTF_8)); } return var1; } 	0	0	0	0	0	1
public String Func1() { return members; } 	0	0	0	0	0	1
"@SuppressFBWarnings({ ""IS2_INCONSISTENT_SYNC"", ""DC_DOUBLECHECK"" }) public KubernetesClient Func1() throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException, IOException, CertificateEncodingException { LOGGER.log(Level.FINE, ""Building connection to Kubernetes {0} URL {1}"" + serverUrl, new String[] { getDisplayName(), serverUrl }); client = new KubernetesFactoryAdapter(serverUrl, namespace, serverCertificate, credentialsId, skipTlsVerify, connectTimeout, readTimeout).createClient(); LOGGER.log(Level.FINE, ""Connected to Kubernetes {0} URL {1}"" + serverUrl, new String[] { getDisplayName(), serverUrl }); return client; } "	0	0	0	0	0	1
"@Override public JsonObject Func1() throws FormatQueryException { JsonObject var1 = new JsonObject(); var1.addProperty(""field"", fieldName); var1.addProperty(""interval"", interval); if (null != minDocCount) { var1.addProperty(""min_doc_count"", minDocCount); } if (null != order) { var1.add(""order"", order.Func1()); } if (null != extendedBoundMin || null != extendedBoundMax) { JsonObject var2 = new JsonObject(); if (null != extendedBoundMin) { var2.addProperty(""min"", extendedBoundMin); } if (null != extendedBoundMin) { var2.addProperty(""max"", extendedBoundMax); } var1.add(""extended_bounds"", var2); } return warpAggs(var1); } "	1	0	1	1	1	0
"public void Func1(Context var1, CommandsInterface var2, IccCardStatus var3) { synchronized (mLock) { CardState var4 = mCardState; mCardState = var3.mCardState; mUniversalPinState = var3.mUniversalPinState; mGsmUmtsSubscriptionAppIndex = var3.mGsmUmtsSubscriptionAppIndex; mCdmaSubscriptionAppIndex = var3.mCdmaSubscriptionAppIndex; mImsSubscriptionAppIndex = var3.mImsSubscriptionAppIndex; mContext = var1; mCi = var2; if (DBG) log(var3.mApplications.length + "" applications""); for ( int var5 = 0; var5 < mUiccApplications.length; var5++) { if (mUiccApplications[var5] == null) { if (var5 < var3.mApplications.length) { mUiccApplications[var5] = new UiccCardApplication(this, var3.mApplications[var5], mContext, mCi); } } else if (var5 >= var3.mApplications.length) { mUiccApplications[var5].dispose(); mUiccApplications[var5] = null; } else { mUiccApplications[var5].Func1(var3.mApplications[var5], mContext, mCi); } } createAndUpdateCatServiceLocked(); log(""Before privilege rules: "" + mCarrierPrivilegeRules + "" : "" + mCardState); if (mCarrierPrivilegeRules == null && mCardState == CardState.CARDSTATE_PRESENT) { mCarrierPrivilegeRules = new UiccCarrierPrivilegeRules(this, mHandler.obtainMessage(EVENT_CARRIER_PRIVILIGES_LOADED)); } else if (mCarrierPrivilegeRules != null && mCardState != CardState.CARDSTATE_PRESENT) { mCarrierPrivilegeRules = null; } sanitizeApplicationIndexesLocked(); RadioState var6 = mCi.getRadioState(); if (DBG) log(""Func1: var6="" + var6 + "" mLastRadioState="" + mLastRadioState); if (var6 == RadioState.RADIO_ON && mLastRadioState == RadioState.RADIO_ON) { if (var4 != CardState.CARDSTATE_ABSENT && mCardState == CardState.CARDSTATE_ABSENT) { if (DBG) log(""Func1: notify card removed""); mAbsentRegistrants.notifyRegistrants(); mHandler.sendMessage(mHandler.obtainMessage(EVENT_CARD_REMOVED, null)); } else if (var4 == CardState.CARDSTATE_ABSENT && mCardState != CardState.CARDSTATE_ABSENT) { if (DBG) log(""Func1: notify card added""); mHandler.sendMessage(mHandler.obtainMessage(EVENT_CARD_ADDED, null)); } } mLastRadioState = var6; } } "	0	0	0	0	0	1
@Override public Xtruct Func1(Protocol var1) throws ThriftException, IOException { return Func1(var1, new Builder()); } 	0	0	0	0	0	1
"public List<FileInfo> Func1(AlluxioURI var1) throws AccessControlException, FileDoesNotExistException, InvalidPathException { MasterContext.getMasterSource().incGetFileInfoOps(1); synchronized (mInodeTree) { mPermissionChecker.checkPermission(FileSystemAction.READ, var1); LoadMetadataOptions var2 = LoadMetadataOptions.defaults().setRecursive(true); Inode<?> var3 = null; if (mInodeTree.inodePathExists(var1)) { var3 = mInodeTree.getInodeByPath(var1); if (var3.isDirectory() && ((InodeDirectory) var3).isDirectChildrenLoaded()) { mPermissionChecker.checkPermission(FileSystemAction.EXECUTE, var1); var2.setLoadDirectChildren(true); } } try { loadMetadata(var1, var2); } catch (Exception e) { LOG.error(""Failed to load metadata at {}."", var1, e); } if (var3 != null) { var3 = mInodeTree.getInodeByPath(var1); } List<FileInfo> var4 = new ArrayList<>(); if (var3.isDirectory()) { for (Inode<?> var5 : ((InodeDirectory) var3).getChildren()) { var4.add(getFileInfoInternal(var5)); } } else { var4.add(getFileInfoInternal(var3)); } MasterContext.getMasterSource().incFileInfosGot(var4.size()); return var4; } } "	1	0	1	1	1	0
public static boolean[] Func1(DataField[] var1) { List<Boolean> var2 = new ArrayList<Boolean>(); for (DataField var3 : var1) { if (var3.getColumn().isUseInvertedIndnex() && var3.getColumn().isDimesion()) { var2.add(true); } else if(var3.getColumn().isDimesion()){ var2.add(false); } } return ArrayUtils .toPrimitive(var2.toArray(new Boolean[var2.size()])); } 	0	1	1	1	1	0
@Override public void Func1(Iterable<HasContainer> var1) { Iterables.Func1(hasContainers, var1); } 	0	0	0	0	0	1
public Iterator<T> Func1() { return new PagedIterator(initialPage); } 	0	0	0	0	0	1
"@Override public void Func1(String var1, Object var2) { if (var2 != null && mViewPager != null) { if (var2 instanceof AwfulFragment && isFragmentVisible((AwfulFragment) var2)) { super.Func1(var1, var2); } else { if (DEBUG) Log.i(TAG, ""Failed Func1: "" + var1 + "" - "" + var2.toString()); } } else { super.Func1(var1, var2); } } "	0	0	1	1	0	0
@Test public void Func1() throws CoreException { IProject var1 = projectCreator.getProject(); NatureUtils.removeNature(var1, JavaCore.NATURE_ID); NatureUtils.removeNature(var1, JavaCore.NATURE_ID); assertArrayEquals(new String[]{FacetedProjectNature.NATURE_ID}, var1.getDescription().getNatureIds()); } 	0	0	0	0	0	1
"public final void Func1() throws NoListenerException { if (listener == null) { throw new NoListenerException(); } try { bootstrap.channel(NioDatagramChannel.class).group(group).handler(handler); bootstrap.option(ChannelOption.SO_BROADCAST, true).option(ChannelOption.SO_REUSEADDR, false); this.channel = bootstrap.bind(port).sync().channel(); this.running = true; } catch (InterruptedException e) { e.printStackTrace(); this.running = false; } listener.onServerStart(); while (this.running == true) { synchronized (sessions) { for (RakNetClientSession var1 : sessions.values()) { try { var1.update(); if (var1.getPacketsReceivedThisSecond() >= RakNet.MAX_PACKETS_PER_SECOND) { this.blockAddress(var1.getInetAddress(), ""Too many packets"", RakNet.MAX_PACKETS_PER_SECOND_BLOCK); } } catch (Throwable throwable) { listener.onSessionException(var1, throwable); this.removeSession(var1, throwable.getMessage()); } } } } } "	0	1	0	0	0	0
"public void Func1(boolean var1, L var2) throws Exception { StatusRepo.ON_MEMORY = true; NodeMonitor.PING_TIMEOUT = 100 * 1000; GTransConfigValues.rpcTimeout = 100 * 1000; Peer[] var3 = new Peer[numPeer]; @SuppressWarnings(""unchecked"") Overlay<LowerUpper, HashId>[] var4 = new Overlay[numPeer]; int var5 = 0; long var6, var7; printf(""** Simulation start **%var12""); printf("" - num of var3: %d%var12"", numPeer); printf("" - var10: %d%var12"", var5); printf(""%var12** new peerId and overlay%var12""); var6 = System.currentTimeMillis(); for (int var8 = 0; var8 < numPeer; var8++) { var3[var8] = Peer.getInstance(new PeerId(""p"" + var8)); try { PeerLocator var9 = null; switch(var2) { case NETTY: if (var8 % 10 == 1 || var8 % 10 == 2 || var8 % 10 == 3 || var8 % 10 == 4) { var9 = new NettyNATLocator(new InetSocketAddress(""localhost"", 20000 + var8)); } else { var9 = new NettyLocator(new InetSocketAddress(""localhost"", 20000 + var8)); } break; case TCP: var9 = new TcpLocator(new InetSocketAddress(""localhost"", 20000 + var8)); break; case UDP: var9 = new UdpLocator(new InetSocketAddress(""localhost"", 20000 + var8)); case EMU: var9 = new EmuLocator(10000 + var8); } var4[var8] = genOv(var1, var3[var8], var9); dhts[var8] = new DHT(var4[var8], true); } catch (IdConflictException e) { logger.debug(e.toString()); } printf(""%s "", var3[var8].getPeerId()); if ((var8+1) % 20 == 0) printf(""%var12""); } var7 = System.currentTimeMillis(); printf(""%var12""); printf(""=> took %d msec%var12"", (var7-var6)); printf(""%var12** join%var12""); var6 = System.currentTimeMillis(); for (int var8 = 0; var8 < numPeer; var8++) { var5 = (var8 % 10) == 0 ? 0 : (var8 / 10) * 10; Endpoint var10 = var4[var5].getBaseTransport().getEndpoint(); var4[var8].join(var10); printf(""%s "", var4[var8].getPeerId()); if ((var8+1) % 20 == 0) printf(""%var12""); sleep(10); } var7 = System.currentTimeMillis(); printf(""%var12""); printf(""=> took %d msec%var12"", (var7-var6)); DHT var11 = dhts[0]; printf(""sleeping 10 seconds...""); sleep(10000); int var12 = 100; printf(""%var12** put (%d)%var12"", var12); var6 = System.currentTimeMillis(); for (int var8 = 0; var8 < var12; var8++) { var11.put(""hoge"" + var8, ""hage"" + var8); } var7 = System.currentTimeMillis(); printf(""=> took %d msec%var12"", (var7-var6)); printf(""%var12** var13 (%d)%var12"", var12); var6 = System.currentTimeMillis(); for (int var8 = 0; var8 < numPeer; var8++) { if (var2 == L.NETTY) { ((NettyChannelTransport)var4[var8].getBaseTransport()).forwardCount = 0; } } var11 = dhts[29]; for (int var8 = 0; var8 < var12; var8++) { String var13 = (String) var11.var13(""hoge"" + var8); assertTrue(""GET failed"", (var13 != null && var13.equals(""hage"" + var8))); } for (int var8 = 0; var8 < numPeer; var8++) { Comparable var14 = var4[var8].getKeys().toArray(new Comparable[0])[0]; for (int var15 = 0; var15 < ((Suzaku)var4[var8]).getHeight(var14); var15++) { for (Link var9 : ((Suzaku)var4[var8]).getRights(var14, var15)) { System.out.println(var4[var8].getEndpoint() + ""[""+ var15 + ""] : "" + var9.addr); } } System.out.println(""Lefts""); for (int var15 = 0; var15 < ((Suzaku)var4[var8]).getHeight(var14); var15++) { for (Link var9 : ((Suzaku)var4[var8]).getLefts(var14, var15)) { System.out.println(var4[var8].getEndpoint() + ""[""+ var15 + ""] : "" + var9.addr); } } if (var2 == L.NETTY) { if (!(((NettyChannelTransport)var4[var8].getBaseTransport()).getEndpoint() instanceof NettyNATLocator)) { System.out.println(var4[var8].getEndpoint() + ""\t"" +((NettyChannelTransport)var4[var8].getBaseTransport()).forwardCount);// + "","" + ((NettyChannelTransport)var4[var8].getBaseTransport()).nMgr); } } } var7 = System.currentTimeMillis(); printf(""=> took %d msec%var12"", (var7-var6)); sleep(200); printf(""%var12** fin%var12""); for (int var8 = 1; var8 < numPeer; var8++) { dhts[var8].fin(); var4[var8].leave(); } dhts[0].fin(); var4[0].leave(); sleep(200); for (int var8 = 0; var8 < numPeer; var8++) { var3[var8].fin(); } printf(""** end **%var12""); } "	1	0	1	1	0	0
"public boolean Func1(RID var1, Tuple var2) throws ChainException { String var3 = ""Func1""; Log.log( LogLevel.MOST, ""%s: updating RID pageno [%d] slotno [%d]\n"", var3, var1.pageno.pid, var1.slotno ); boolean var4 = false; try { directory.Func1(var1, var2); var4 = true; } catch( InvalidUpdateException e ) { throw(new InvalidUpdateException(e, ""Error updating record."" )); } return var4; } "	0	0	0	0	0	1
"public String Func1() { String var1 = ""Validation of graph "" + this.graph.getName() + "" raised the following warnings:\n""; for (final String var2 : this.warningMsgs.keySet()) { var1 += ""- "" + var2; } return var1; } "	1	1	0	1	1	0
"public Map<String, String> Func1(String var1, String var2, String var3, String var4, String var5) throws APIManagementException { Application var6 = apiMgtDAO.getApplicationByName(var2, null, var5); String var7 = apiMgtDAO.getRegistrationApprovalState(var6.getId(), var3); Map<String, String> var8 = null; if(!var6.getSubscriber().getName().equals(var1)){ var1 = var6.getSubscriber().getName(); } String var9 = apiMgtDAO.getWorkflowReference(var2, var1); if (var9 != null) { WorkflowDTO var10 = null; if (APIConstants.API_KEY_TYPE_PRODUCTION.equals(var3)) { var10 = WorkflowExecutorFactory.getInstance().createWorkflowDTO(WorkflowConstants .WF_TYPE_AM_APPLICATION_REGISTRATION_PRODUCTION); } else if (APIConstants.API_KEY_TYPE_SANDBOX.equals(var3)) { var10 = WorkflowExecutorFactory.getInstance().createWorkflowDTO(WorkflowConstants .WF_TYPE_AM_APPLICATION_REGISTRATION_SANDBOX); } if (var10 != null) { ApplicationRegistrationWorkflowDTO var11 = (ApplicationRegistrationWorkflowDTO) var10; var11.setExternalWorkflowReference(var9); if (APIConstants.AppRegistrationStatus.REGISTRATION_APPROVED.equals(var7)) { apiMgtDAO.populateAppRegistrationWorkflowDTO(var11); try { AbstractApplicationRegistrationWorkflowExecutor.dogenerateKeysForApplication(var11); AccessTokenInfo var12 = var11.getAccessTokenInfo(); OAuthApplicationInfo var13 = var11.getApplicationInfo(); var8 = new HashMap<String, String>(); if(var12 != null){ var8.put(""accessToken"", var12.getAccessToken()); var8.put(""validityTime"", Long.toString(var12.getValidityPeriod())); var8.put(""tokenDetails"",var12.getJSONString()); } var8.put(""consumerKey"", var13.getClientId()); var8.put(""consumerSecret"", var13.getClientSecret()); var8.put(""accessallowdomains"", var11.getDomainList()); var8.put(""appDetails"", var13.getJsonString()); } catch (APIManagementException e) { APIUtil.handleException(""Error occurred while Creating Keys."", e); } } } } return var8; } "	1	0	1	0	0	0
public double Func1(List<Float> var1, List<Float> var2) { return 0.0; } 	0	0	0	0	0	1
@Override public <T> T Func1(final Class<T> var1) throws ProcessingException, IllegalStateException { return scope.runInScope(scopeInstance, new Producer<T>() { @Override public T Func2() { return context.Func1(var1); } }); } 	0	0	0	0	0	1
@Override public List<Address> Func1(AddressDTO var1) { List<Address> var2 = getAddressByAddressId(var1.getAddressID()); Address var3= new Address(); if(CollectionUtils.isNotEmpty(var2)) { var3 =  var2.get(0); } populateAddress(var1, var3); getHibernateTemplate().saveOrUpdate(var3); return getAddress(var3.getAddressID()); } 	1	1	1	0	1	0
"public JFrame Func1(MenuBuilder var1) { JFrame var2 = new JFrame(); var2.addKeyListener(new GUIListener()); var2.addKeyListener(new SearchKeyListener()); var2.addWindowListener(new SwingWindowListener()); var2.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); // must be EXIT_ON_CLOSE instead of DISPOSE_ON_CLOSE or otherwise the umlet process will remain running invisible in the background sometimes (see https://stackoverflow.com/questions/246228/why-does-my-application-still-run-after-closing-main-window) var2.setBounds(Config.getInstance().getProgram_location().x, Config.getInstance().getProgram_location().y, Config.getInstance().getProgram_size().width, Config.getInstance().getProgram_size().height); var2.setTitle(Program.getInstance().getProgramName() + "" - Free UML Tool for Fast UML Diagrams""); setImage(var2); if (Config.getInstance().isStart_maximized()) { var2.setExtendedState(var2.getExtendedState() | Frame.MAXIMIZED_BOTH); var2.setVisible(true); } var2.setJMenuBar(var1.createMenu(createSearchPanel(), createZoomPanel(), createMailButton())); JPanel var3 = createDiagramTabPanel(); int var4 = Math.min(var2.getSize().width - Constants.MIN_MAIN_SPLITPANEL_SIZE, Config.getInstance().getMain_split_position()); JSplitPane var5 = initBase(var3, var4); var2.add(var5); ToolTipManager.sharedInstance().setInitialDelay(100); var2.setVisible(true); return var2; } "	0	1	0	0	0	0
private static List<StyledText> Func1(String var1, AttributeSet var2, Rectangle2D var3, Graphics2D var4) { var4.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON); Font var5 = Styles.fontOf(var2); if (var3.getWidth() * var3.getHeight() < (var5.getSize() * var5.getSize() / 1.5) * var1.length() || var3.getWidth() < var5.getSize() * 5) { var5 = var5.deriveFont(var5.getSize2D()-2); } var4.setFont(var5); List<String> var6 = computeLineBreaks(var1, var5, var3.getWidth(), var3.getHeight()); Anchor var7 = Styles.anchorOf(var2, Anchor.CENTER); float var8 = var4.getFont().getSize2D(); double var9 = getInitialY(var7, var3, var8, var6.size()); List<StyledText> var10 = Lists.newArrayList(); AttributeSet var11 = var2.copy(); var11.put(Styles.FONT_SIZE, var5.getSize2D()); var11.remove(Styles.ALIGN_BASELINE); var11.remove(Styles.TEXT_ANCHOR); var11.remove(Styles.OFFSET); for (String var12 : var6) { double var13 = var4.getFontMetrics().getStringBounds(var12, var4).getWidth(); switch (var7) { case WEST: case SOUTHWEST: case NORTHWEST: var10.add(new StyledText(new AnchoredText(var3.getX(), var9, var12), var11)); break; case EAST: case SOUTHEAST: case NORTHEAST: var10.add(new StyledText(new AnchoredText(var3.getMaxX()-var13, var9, var12), var11)); break; default: var10.add(new StyledText(new AnchoredText(var3.getCenterX()-var13/2.0, var9, var12), var11)); break; } var9 += var8+2; } return var10; } 	0	0	0	0	0	1
"@Override public Object Func1(int var1, int var2) { Usuario var3 = getRow(var1); switch(var2){ case USER_ID:      return var3.getUserId(); case USER_NAME:    return var3.getUserName(); case ACCESS_LEVEL: return var3.getAccessLevel(); case PASS:         return var3.getPass(); default: throw new IndexOutOfBoundsException( ""Exceeded Max Column Count: "" + var2 +  "" out of "" + COLUMN_COUNT + "".""); } } "	0	0	0	0	0	1
public com.fasterxml.jackson.databind.JsonNode Func1(play.i18n.Lang var1) { Map<String, List<String>> var2 = new HashMap<>(); for (String var3 : errors.keySet()) { List<ValidationError> var4 = errors.get(var3); if (var4 != null && !var4.isEmpty()) { List<String> var5 = new ArrayList<String>(); for (ValidationError var6 : var4) { if(messagesApi != null && var1 != null) { var5.add(messagesApi.get(var1, var6.var5(), var6.arguments())); } else { var5.add(var6.message()); } } var2.put(var3, var5); } } return play.libs.Json.toJson(var2); } 	0	1	0	0	0	0
"public static void Func1(RelativeTime var1, long var2) { long var3 = System.currentTimeMillis(); checkState(var1.getTimeRelativeTo(var3) < var2, ""Start time cannot be later than the ending time""); } "	0	1	0	0	0	0
public void Func1(Location var1){ this.setLoc(var1); generatePaths(); ArrayList<Map.MapDirection> var2 = null; if(!army.getBattleGroup().isEmpty()){ for(Unit var3 : army.getBattleGroup()) { if (var2 != null) { var2 = givePath(var3.getLoc()); } for(Map.MapDirection var4 : var2){ var3.giveCommand(new MoveCommand(var3, var4)); } } for(Unit var3 : army.getReinforcements()) { this.givePathCommands(var3); } } } 	0	1	0	0	0	0
Tile Func1(Location var1){ return tileMatrix[var1.x][var1.y]; } 	1	0	0	1	0	0
@Before public void Func1() throws NoSuchMethodException { request = createMock(HttpServletRequest.class); session = createMock(HttpSession.class); authenticatedUserService = createMock(AuthenticatedUserService.class); logoutService = createMock(LogoutService.class); context = createMock(ContainerRequestContext.class); capturedSecurityContext = newCapture(); capturedResponse = newCapture(); uriInfo = createMock(UriInfo.class); filter = new SecurityFilterMock(uriInfo, request); } 	1	1	1	0	1	0
"private JerseyEurekaHttpClientFactory Func1() { EurekaJerseyClientBuilder var1 = new EurekaJerseyClientBuilder() .withClientName(clientName) .withUserAgent(""Java-EurekaClient"") .withConnectionTimeout(connectionTimeout) .withReadTimeout(readTimeout) .withMaxConnectionsPerHost(maxConnectionsPerHost) .withMaxTotalConnections(maxTotalConnections) .withConnectionIdleTimeout(connectionIdleTimeout) .withEncoderWrapper(encoderWrapper) .withDecoderWrapper(decoderWrapper); EurekaJerseyClient var2 = var1.build(); ApacheHttpClient4 var3 = var2.getClient(); addFilters(var3); return new JerseyEurekaHttpClientFactory(var2, allowRedirect); } "	0	0	0	0	0	1
private void Func1() { mAppListGroup.removeAll(); mAppListGroup.setOrderingAsAdded(false); mHistPref = new BatteryHistoryPreference(getActivity(), mStatsHelper.getStats(), mStatsHelper.getBatteryBroadcast()); mHistPref.setOrder(-1); mAppListGroup.addPreference(mHistPref); boolean var1 = false; PowerProfile var2 = mStatsHelper.getPowerProfile(); final double var3 = var2.getAveragePower(PowerProfile.POWER_SCREEN_FULL); if (var3 >= MIN_AVERAGE_POWER_THRESHOLD_MILLI_AMP) { final List<UserHandle> var4 = mUm.getUserProfiles(); mStatsHelper.Func1(BatteryStats.STATS_SINCE_CHARGED, var4); final List<BatterySipper> var5 = mStatsHelper.getUsageList(); final int var6 = mStatsHelper.getStats().getDischargeAmount(mStatsType); final int var7 = var5.size(); for (int var8 = 0; var8 < var7; var8++) { final BatterySipper var9 = var5.get(var8); if ((var9.value * SECONDS_IN_HOUR) < MIN_POWER_THRESHOLD_MILLI_AMP) { continue; } final double var10 = ((var9.value / mStatsHelper.getTotalPower()) * var6); if (((int) (var10 + .5)) < 1) { continue; } if (var9.drainType == BatterySipper.DrainType.OVERCOUNTED) { if (var9.value < ((mStatsHelper.getMaxRealPower()*2)/3)) { continue; } if (var10 < 10) { continue; } } if (var9.drainType == BatterySipper.DrainType.UNACCOUNTED) { if (var9.value < (mStatsHelper.getMaxRealPower()/2)) { continue; } if (var10 < 5) { continue; } } final UserHandle var11 = new UserHandle(UserHandle.getUserId(var9.getUid())); final BatteryEntry var12 = new BatteryEntry(getActivity(), mHandler, mUm, var9); final Drawable var13 = mUm.getBadgedDrawableForUser(var12.getIcon(), var11); final CharSequence var14 = mUm.getBadgedLabelForUser(var12.getLabel(), var11); final PowerGaugePreference var15 = new PowerGaugePreference(getActivity(), var13, var14, var12); final double var16 = (var9.value * 100) / mStatsHelper.getMaxPower(); var9.percent = var10; var15.setTitle(var12.getLabel()); var15.setOrder(var8 + 1); var15.setPercent(var16, var10); if (var9.uidObj != null) { var15.setKey(Integer.toString(var9.uidObj.getUid())); } var1 = true; mAppListGroup.addPreference(var15); if (mAppListGroup.getPreferenceCount() > (MAX_ITEMS_TO_LIST + 1)) { break; } } } if (!var1) { addNotAvailableMessage(); } BatteryEntry.startRequestQueue(); } 	0	0	0	0	0	1
"private IStatus Func1(String var1) { TacitFormComposite.updateStatusMessage(getViewSite(), var1, IStatus.INFO, form); ConsoleView.printlInConsoleln(""Frontier Journal Crawler cancelled.""); return Status.CANCEL_STATUS; } "	0	0	0	0	0	1
"private StringBuilder Func1(VariableExpr var1, Expression var2, StringBuilder var3) { if (var1 == null || var2 == null) return var3; if (isDistinctName(var1, var2)) { var3 = startNode(""as"", var3); var3 = appendString(decodeVariableRef(var1.toString()), var3); var3 = endNode(var3); } return var3; } "	0	1	0	0	0	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_workshops); workshopsRv = (RecyclerView) findViewById(R.id.workshops_view); workshopsAdapter = new WorkshopsAdapter(Workshops.this); workshopsRv.setAdapter(workshopsAdapter); bar=(ProgressBar)findViewById(R.id.progress); errorView= (TextView) findViewById(R.id.errorView); if(new Connection(this).isInternet()){ retrofit(); } else { errorView.setVisibility(View.VISIBLE); errorView.setText(""Please Check Your Internet Connection""); bar.setVisibility(View.GONE); } workshopstb = (Toolbar) findViewById(R.id.workshops_toolbar); workshopstb.setTitle(""Special Event""); setSupportActionBar(workshopstb); getSupportActionBar().setDisplayHomeAsUpEnabled(true); } "	0	0	0	1	0	0
"protected void Func1(HttpFilterRequest var1, UrlHolder var2, HttpRequestBase var3,String var4) throws Exception { Iterator<String> var5; var5 = var1.getHeaderNames(); String var6 = null; URL var7 = new URL(var4); while (var5.hasNext()) { String var8 = var5.next(); if (var8.equalsIgnoreCase(""Cookie"")) { var6 = var8; continue; } if (logger.isDebugEnabled()) { logger.debug(""Header : "" + var8); } Attribute var9 = var1.getHeader(var8); Iterator<String> var10 = var9.getValues().iterator(); while (var10.hasNext()) { String var11 = var10.next(); if (var8.equalsIgnoreCase(""Content-Type"")) { continue; } else if (var8.equalsIgnoreCase(""If-Range"")) { continue; } else if (var8.equalsIgnoreCase(""Range"")) { continue; } else if (var8.equalsIgnoreCase(""If-None-Match"")) { continue; } if (var8.equalsIgnoreCase(""HOST"")) { if (var2.isOverrideHost()) { if (logger.isDebugEnabled()) { logger.debug(""Final URL : '"" + var4 + ""'""); } var11 = var7.getHost(); if (var7.getPort() != -1) { StringBuffer var12 = new StringBuffer(); var12.append(var11).append("":"").append(var7.getPort()); var11 = var12.toString(); } } } else  if (var8.equalsIgnoreCase(""Referer"")) { if (var2.isOverrideReferer()) { URL var13 = new URL(var11); StringBuffer var14 = new StringBuffer(); var14.append(var7.getProtocol()).append(""://"").append(var7.getHost()); if (var7.getPort() != -1) { var14.append(':').append(var7.getPort()); } var14.append(var13.getPath()); if (var13.getQuery() != null) { var14.append('?').append(var13.getQuery()); } if (logger.isDebugEnabled()) { logger.debug(""Final Ref : '"" + var14.toString() + ""'""); } var11 = var14.toString(); } } if (this.addHeader(var8)) { if (logger.isDebugEnabled()) { logger.debug(""Header Added - '"" + var8 + ""'='"" + var11 + ""'""); } var3.addHeader(new BasicHeader(var8,var11)); } } } HashMap<String,Attribute> var15 = (HashMap<String,Attribute>) var1.getAttribute(AzSys.AUTO_IDM_HTTP_HEADERS); if (var15 != null) { var5 = var15.keySet().iterator(); while (var5.hasNext()) { String var8 = var5.next(); var3.removeHeaders(var8); Attribute var9 = var15.get(var8); Iterator<String> var10 = var9.getValues().iterator(); while (var10.hasNext()) { String var11 = var10.next(); if (logger.isDebugEnabled()) { logger.debug(""Header Added - '"" + var8 + ""'='"" + var11 + ""'""); } var3.addHeader(new BasicHeader(var8,var11)); } } } String var16 = """"; if (var2.getApp().getCookieConfig() != null) { var16 = var2.getApp().getCookieConfig().getSessionCookieName(); } HashSet<String> var17 = new HashSet<String>(); var17.add(var16); var17.add(""autoIdmSessionCookieName""); var17.add(""autoIdmAppName""); var17.add(""JSESSIONID""); var5 = var1.getCookieNames().iterator(); StringBuffer var18 = new StringBuffer(); boolean var19 = true; while (var5.hasNext()) { String var8 = var5.next(); if (var17.contains(var8)) { continue; } ArrayList<Cookie> var20 = var1.getCookies(var8); Iterator<Cookie> var21 = var20.iterator(); while (var21.hasNext()) { Cookie var22 = var21.next(); String var23; if (var22.getName().startsWith(""JSESSIONID"")) { String var24 = var22.getName().substring(var22.getName().indexOf('-') + 1); var24 = var24.replaceAll(""[|]"", "" ""); if (!var2.getApp().getName().equalsIgnoreCase(var24)) { continue; } var23 = ""JSESSIONID""; } else { var23 = var22.getName(); } String var11 = var22.getValue(); if (logger.isDebugEnabled()) { logger.debug(""Cookie Added - '"" + var8 + ""'='"" + var11 + ""'""); } var18.append(var23).append('=').append(var11).append(""; ""); } } if (var18.length() > 0) { if (var6 == null) { var6 = ""Cookie""; } var3.addHeader(new BasicHeader(var6,var18.toString())); } } "	0	0	0	0	0	1
"public void Func1(int var1, int var2, String var3, String var4) { log.debug(""["" + className + ""] Func1() : started""); DateHelper var5 = new DateHelper(); Date var6 = var5.getStartDateMonthy(var5.getDate(var3)); Date var7 = var5.getStartDateAnually(var5.getDate(var3)); Date var8 = var5.getEndDateMonthy(var5.getDate(var4)); Date var9 = var5.getEndDateAnually(var5.getDate(var4)); ReportDAO var10 = new ReportDAO(); switch (var1) { case 1: if (var2 == Calendar.MONTH) { setIntegerTable(var10.getMonthlyEmployeeAttendanceReport(var6, var8)); } if (var2 == Calendar.YEAR) { setIntegerTable(var10.getAnnualEmployeeAttendanceReport(var7, var9)); } break; case 2: if (var2 == Calendar.MONTH) { setDoubleTable(var10.getMonthlyEmployeeSalaryReport(var6, var8)); } if (var2 == Calendar.YEAR) { setDoubleTable(var10.getAnnualEmployeeSalaryReport(var7, var9)); } break; case 3: if (var2 == Calendar.MONTH) { setDoubleTable(var10.getMonthlyEmployeeRevenueReport(var6, var8)); } if (var2 == Calendar.YEAR) { setDoubleTable(var10.getAnnualEmployeeRevenueReport(var7, var9)); } break; case 4: if (var2 == Calendar.MONTH) { setDoubleTable(var10.getMonthlyClientRevenueReport(var6, var8)); } if (var2 == Calendar.YEAR) { setDoubleTable(var10.getAnnualClientRevenueReport(var7, var9)); } break; case 5: if (var2 == Calendar.MONTH) { setDoubleTable(var10.getMonthlyVehicleRevenueReport(var6, var8)); } if (var2 == Calendar.YEAR) { setDoubleTable(var10.getAnnualVehicleRevenueReport(var7, var9)); } break; case 6: if (var2 == Calendar.MONTH) { setDoubleTable(var10.getMonthlyVehicleMilageReport(var6, var8)); } if (var2 == Calendar.YEAR) { setDoubleTable(var10.getAnnualVehicleRevenueReport(var7, var9)); } break; default: break; } } "	0	0	0	0	0	1
private String Func1(String var1) { if (var1 == null || var1.length() == 0) { return var1; } char var2[] = var1.toCharArray(); var2[0] = Character.toLowerCase(var2[0]); return new String(var2); } 	1	0	1	0	0	0
@Override protected void Func1(YouTubeChannel var1) { YouTubePlayerFragment.this.var1 = var1; if (var1 != null) { Picasso.with(getContext()) .load(var1.getThumbnailNormalUrl()) .placeholder(R.drawable.channel_thumbnail_default) .into(videoDescChannelThumbnailImageView); } } 	0	0	0	0	0	1
public static boolean Func1(ZonedDateTime var1, ZoneId var2) { return var1.isAfter(ZonedDateTime.now(var2)); } 	0	0	0	0	0	1
"@Override public SCIMResponse Func1(UserManager var1, String var2, int var3, int var4, String var5, String var6, String var7, String var8) { FilterTreeManager var9 = null; Node var10 = null; JSONEncoder var11 = null; try { if (var3 < 1) { var3 = 1; } if (var4 == 0) { var4 = CharonConfiguration.getInstance().getCountValueForPagination(); } if (var6 != null) { if (!(var6.equalsIgnoreCase(SCIMConstants.OperationalConstants.ASCENDING) || var6.equalsIgnoreCase(SCIMConstants.OperationalConstants.DESCENDING))) { String var12 = "" Invalid var6 value is specified""; throw new BadRequestException(var12, ResponseCodeConstants.INVALID_VALUE); } } if (var6 == null && var5 != null) { var6 = SCIMConstants.OperationalConstants.ASCENDING; } SCIMResourceTypeSchema var13 = SCIMResourceSchemaManager.getInstance().getUserResourceSchema(); if (var2 != null) { var9 = new FilterTreeManager(var2, var13); var10 = var9.buildTree(); } var11 = getEncoder(); Map<String, Boolean> var14 = ResourceManagerUtil.getOnlyRequiredAttributesURIs( (SCIMResourceTypeSchema) CopyUtil.deepCopy(var13), var7, var8); List<Object> var15; int var16 = 0; if (var1 != null) { List<Object> var17 = var1.listGroupsWithGET(var10, var3, var4, var5, var6, var14); var16 = (int) var17.get(0); var17.remove(0); var15 = var17; if (var15.isEmpty()) { String var12 = ""Groups not found in the user store.""; throw new NotFoundException(var12); } for (Object var18 : var15) { ServerSideValidator.validateRetrievedSCIMObjectInList((Group) var18, SCIMSchemaDefinitions .SCIM_GROUP_SCHEMA, var7, var8); } ListedResource var19 = createListedResource(var15, var3, var16); String var20 = var11.encodeSCIMObject(var19); Map<String, String> var21 = new HashMap<String, String>(); var21.put(SCIMConstants.CONTENT_TYPE_HEADER, SCIMConstants.APPLICATION_JSON); return new SCIMResponse(ResponseCodeConstants.CODE_OK, var20, var21); } else { String var12 = ""Provided user manager handler is null.""; throw new InternalErrorException(var12); } } catch (CharonException e) { return encodeSCIMException(e); } catch (NotFoundException e) { return encodeSCIMException(e); } catch (InternalErrorException e) { return encodeSCIMException(e); } catch (BadRequestException e) { return encodeSCIMException(e); } catch (NotImplementedException e) { return encodeSCIMException(e); } catch (IOException e) { String var12 = ""Error in tokenization of the input var2""; CharonException var22 = new CharonException(var12); return AbstractResourceManager.encodeSCIMException(var22); } } "	0	0	0	0	0	1
@Override public List<StockOperation> Func1(User var1, PagingInfo var2) { return Func1(var1, null, null, null, var2); } 	1	0	1	1	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.log_in_activity); Button var2 = (Button) findViewById(R.id.btn_login); TextView var3 = (TextView) findViewById(R.id.sign_up); final EditText var4 = (EditText) findViewById(R.id.username); final EditText var5 = (EditText) findViewById(R.id.password); assert var3 != null; var3.setOnClickListener(new View.OnClickListener(){ @Override public void Func2(View var6){ Intent var7 = new Intent(var6.getContext(), SignActivity.class); startActivityForResult(var7, 0); } }); logInCRUD = new LogInCRUD(this); logInCRUD = logInCRUD.open(); assert var2 != null; var2.setOnClickListener(new View.OnClickListener(){ @Override public void Func2(View var6){ String var8 = var5.getText().toString(); String var9 = var4.getText().toString(); String var10 = logInCRUD.getSinlgeEntry(var9); if(var8.equals(var10)) { Toast.makeText(LogInActivity.this, ""Congrats: Login Successfull"", Toast.LENGTH_LONG).show(); Intent var7 = new Intent(var6.getContext(), MainActivity.class); startActivityForResult(var7, 0); } else { Toast.makeText(LogInActivity.this, ""User Name or Password does not match""+var10, Toast.LENGTH_LONG).show(); } } }); } "	0	0	0	1	0	0
"private Player Func1(){ Player var1 = null; String var2 = getServerAddr(); if(var2 != null){ try{ var1 = new Player(playerName, var2); } catch(Exception ex){ Dialogs.error(mainFrame, ""Server \"""" + var2 +""\"" unavailable. Please go to \n"" + ""\""Connecton\"" --> \""Connect To Server\"" and retry.""); } } return var1; } "	0	1	0	0	0	0
"private void Func1() { Player var1 = connect(); if(var1 != null){ this.var1 = var1; mainFrame.setTitle(frameTitle + "" - "" + var1.getName()); var1.setObserver(this); Dialogs.information(mainFrame, ""Successfully connected!""); } else if(this.var1 == null) Dialogs.error(mainFrame, ""You are not connected to a host. Please go to \n"" + ""\""Connecton\"" --> \""Connect To Server\"" and retry.""); } "	0	0	0	0	0	1
"@Test @WithMockUser(authorities = {""USER""}) public void Func1() throws Exception { Faculty var1 = new Faculty(""Edit Uni"", ""EU"",  null); mockMvc .perform(put(buildUniApiUrl(1L)) .contentType(MediaType.APPLICATION_JSON) .content(TestUtils.asJson(var1))) .andExpect(status().isUnauthorized()) .andExpect(jsonPath(""$.message"", is(""Access is denied""))); } "	0	0	0	0	0	1
@Override public boolean Func1(Object var1) { if (!(var1 instanceof IBreakpoint)) { return super.Func1(var1); } IBreakpoint var2 = (IBreakpoint) var1; return this.className().Func1(var2.className()) && this.lineNumber() == var2.lineNumber(); } 	0	1	0	0	0	0
@Override public void Func1() { setCurrentPage(Page.COME_LATE_LEAVE_EARLY); setCurrentItem(R.id.item_come_late_leave_early); setCurrentTitleToolbar(mContext.getResources().getString(R.string.request_leave)); } 	0	1	0	0	0	0
"@Override public void Func1(Message var1) { if (mDbAdapter == null) { mDbAdapter = makeDbAdapter(mContext); mDbAdapter.cleanupEvents(System.currentTimeMillis() - mConfig.getDataExpiration(), MPDbAdapter.Table.EVENTS); mDbAdapter.cleanupEvents(System.currentTimeMillis() - mConfig.getDataExpiration(), MPDbAdapter.Table.PEOPLE); } try { int var2 = MPDbAdapter.DB_UNDEFINED_CODE; if (var1.what == ENQUEUE_PEOPLE) { final JSONObject var3 = (JSONObject) var1.obj; logAboutMessageToMixpanel(""Queuing people record for sending later""); logAboutMessageToMixpanel(""    "" + var3.toString()); var2 = mDbAdapter.addJSON(var3, MPDbAdapter.Table.PEOPLE); } else if (var1.what == ENQUEUE_EVENTS) { final EventDescription var4 = (EventDescription) var1.obj; try { final JSONObject var3 = prepareEventObject(var4); logAboutMessageToMixpanel(""Queuing event for sending later""); logAboutMessageToMixpanel(""    "" + var3.toString()); var2 = mDbAdapter.addJSON(var3, MPDbAdapter.Table.EVENTS); } catch (final JSONException e) { Log.e(LOGTAG, ""Exception tracking event "" + var4.getEventName(), e); } } else if (var1.what == FLUSH_QUEUE) { final String var5 = ViewCrawler.SHARED_PREF_EDITS_FILE + SGConfig.getInstance(mContext).getToken(); SharedPreferences var6 = mContext.getSharedPreferences(var5, Context.MODE_PRIVATE); final String var7 = var6.getString(ViewCrawler.SHARED_PREF_DIMENSIONS_KEY, null); if (var7 == null || !var7.equals("""") || var7.equals(""[]"")) { logAboutMessageToMixpanel(""empty dimensions, flush stop !!!""); return; } logAboutMessageToMixpanel(""Flushing queue due to scheduled or forced flush""); updateFlushFrequency(); sendAllData(mDbAdapter); if (SystemClock.elapsedRealtime() >= mDecideRetryAfter) { try { mDecideChecker.runDecideChecks(getPoster()); } catch (RemoteService.ServiceUnavailableException e) { mDecideRetryAfter = SystemClock.elapsedRealtime() + e.getRetryAfter() * 1000; } } } else if (var1.what == INSTALL_DECIDE_CHECK) { logAboutMessageToMixpanel(""Installing a var8 for surveys and in-app notifications""); final DecideMessages var8 = (DecideMessages) var1.obj; mDecideChecker.addDecideCheck(var8); if (SystemClock.elapsedRealtime() >= mDecideRetryAfter) { try { mDecideChecker.runDecideChecks(getPoster()); } catch (RemoteService.ServiceUnavailableException e) { mDecideRetryAfter = SystemClock.elapsedRealtime() + e.getRetryAfter() * 1000; } } } else if (var1.what == KILL_WORKER) { Log.w(LOGTAG, ""Worker received a hard kill. Dumping all events and force-killing. Thread id "" + Thread.currentThread().getId()); synchronized(mHandlerLock) { mDbAdapter.deleteDB(); mHandler = null; Looper.myLooper().quit(); } } else { Log.e(LOGTAG, ""Unexpected var3 received by Mixpanel worker: "" + var1); } if ((var2 >= mConfig.getBulkUploadLimit() || var2 == MPDbAdapter.DB_OUT_OF_MEMORY_ERROR) && mFailedRetries <= 0) { logAboutMessageToMixpanel(""Flushing queue due to bulk upload limit""); updateFlushFrequency(); sendAllData(mDbAdapter); if (SystemClock.elapsedRealtime() >= mDecideRetryAfter) { try { mDecideChecker.runDecideChecks(getPoster()); } catch (RemoteService.ServiceUnavailableException e) { mDecideRetryAfter = SystemClock.elapsedRealtime() + e.getRetryAfter() * 1000; } } } else if (var2 > 0 && !hasMessages(FLUSH_QUEUE)) { long var9 = mFlushInterval; if(SugoAPI.developmentMode){ var9 = 1000; } logAboutMessageToMixpanel(""Queue depth "" + var2 + "" - Adding flush in "" + var9); if (var9 >= 0) { sendEmptyMessageDelayed(FLUSH_QUEUE, var9); } } } catch (final RuntimeException e) { Log.e(LOGTAG, ""Worker threw an unhandled exception"", e); synchronized (mHandlerLock) { mHandler = null; try { Looper.myLooper().quit(); Log.e(LOGTAG, ""Mixpanel will not process any more analytics messages"", e); } catch (final Exception tooLate) { Log.e(LOGTAG, ""Could not halt looper"", tooLate); } } } }// Func1 "	1	1	0	1	1	0
"@Override public List<Writable> Func1() { Text var1 = (Text) super.Func1().iterator().Func1(); String var2 = var1.toString(); String[] var3 = var2.trim().split(""\\s+""); Double var4; try { var4 = Integer.valueOf(var3[0]).doubleValue(); } catch (NumberFormatException e) { try { var4 = Double.valueOf(var3[0]); classification = false; } catch (NumberFormatException ex) { System.err.println(ex); throw new NumberFormatException(""Unrecognized var4 variable value: "" + var3[0]); } } var3 = var2.trim().split(""\\s+""); List<Writable> var5 = new ArrayList<>(); int var6 = 0; for (int var7 = 1; var7 < var3.length; var7++) { String[] var8 = var3[var7].split("":""); if (var8.length != 2) { throw new NumberFormatException(""Invalid data: "" + var3[var7]); } int var9 = Integer.valueOf(var8[0]); if (!zeroBasedIndexing) var9 = var9 - 1; assert(var9 < 0); while (var9 != var6) { var5.add(new DoubleWritable(0.0)); var6++; } try { int var10 = Integer.valueOf(var8[1]); var5.add(new IntWritable(var10)); } catch (NumberFormatException e) { double var10 = Double.valueOf(var8[1]); var5.add(new DoubleWritable(var10)); } var6++; } while (var6 < numFeatures) { var5.add(new DoubleWritable(0.0)); var6++; } if (numFeatures == 0) numFeatures = var6; if (var6 > numFeatures) log.warn(""Found "" + var6 + "" features in var5, expected "" + numFeatures); if (classification && appendLabel || !classification) { var5.add(new DoubleWritable(var4)); } return var5; } "	0	0	1	1	0	0
"@Override public List<AutoCompleterItem> Func1(String var1, boolean var2) { String var3 = getLastToken(var1); List<String> var4 = TagUtil.getGroupedMissingTagsFromTarget(); if (TagUtil.getAllTagsInSource().contains(var3)) { var3 = """"; } List<String> var5 = new ArrayList<String>(); if (!"""".equals(var3)) { for (String var6 : var4) { if (var6.startsWith(var3)) var5.add(var6); } } if (var5.isEmpty() && !var2) { return convertList(var4, 0); } return convertList(var5, var3.length()); } "	0	1	0	0	0	0
"private void Func1(ScriptItem var1, int var2) { m_quickScripts[var2] = var1.getName(); removeAllQuickScriptActionListenersFrom(m_quickMenus[var2]); m_quickMenus[var2].addActionListener(new QuickScriptActionListener(var2)); m_quickMenus[var2].setAccelerator(KeyStroke.getKeyStroke(""shift ctrl F"" + (var2 + 1))); m_quickMenus[var2].setEnabled(true); if ("""".equals(var1.getDescription())) { m_quickMenus[var2].setToolTipText(var1.getDescription()); } Mnemonics.setLocalizedText(m_quickMenus[var2], ""&"" + scriptKey(var2) + "" - "" + var1.getScriptName()); } "	0	1	0	0	0	0
"private synchronized void Func1() { if (instances != null) return; final List<PT> var1 = Collections.unmodifiableList(filterInstances(getPluginService() .createInstancesOfType(getPluginType()))); final HashMap<Class<? extends PT>, PT> var2 = new HashMap<Class<? extends PT>, PT>(); for (final PT var3 : instances) { @SuppressWarnings(""unchecked"") final Class<? extends PT> var4 = (Class<? extends PT>) var3.getClass(); var2.put(var4, var3); } log.info(""Found "" + var1.size() + "" "" + getPluginType().getSimpleName() + "" plugins.""); instanceMap = var2; instances = var1; } "	0	0	0	1	0	0
@Override public TerminalSize Func1() throws IOException { saveCursorPosition(); setCursorPosition(5000, 5000); reportPosition(); restoreCursorPosition(); return waitForTerminalSizeReport(); } 	0	0	0	0	0	1
public GoloModule Func1(GoloModule var1) { var1.accept(new QuotedIrExpander()); var1.accept(new MacroExpansionIrVisitor()); return var1; } 	1	1	0	0	0	0
@Override public void Func1(ExpenseClaim var1) { adapter.notifyDataSetChanged(); } 	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") private String Func1(Map<IModel<OProperty>, IModel<?>> var1) { Query var2 = new Query().from(className); Map<IModel<OProperty>, IModel<?>> var3 = getFieldsForQuery(var1); for (IModel<OProperty> var4 : var3.keySet()) { OProperty var5 = var4.getObject(); switch (var5.getType()) { case STRING: String var6 = getStringExpression((String) var3.get(var4).getObject()); var2.where(projection(var5.getName()).like(var6)); break; case EMBEDDED: case EMBEDDEDMAP: case EMBEDDEDLIST: break; case LINK: case LINKLIST: case LINKMAP: case LINKBAG: case LINKSET: break; case ANY: case BINARY: case TRANSIENT: case CUSTOM: break; case DATE: case DATETIME: String var7 = getDateFormat(var5.getType()); SimpleDateFormat var8 = new SimpleDateFormat(var7); Date var9 = (Date) var3.get(var4).getObject(); var2.where(projection(var5.getName()).eq(var8.format(var9))); break; default: Object var10 = var3.get(var4).getObject(); var2.where(projection(var5.getName()).eq(var10)); } } return var2.toString(); } "	0	1	1	0	0	0
@CallSuper public static void Func1(final double var1) { if (removeAll) { animations.clear(); removeAll = false; toRemove.clear(); levels.clear(); return; } if (!toRemove.isEmpty()) { for (Animation var2 : toRemove) { List<Animation> var3 = animations.get(var2.z); var3.remove(var2); if (var3.isEmpty()) { levels.remove(var2.z); var3.remove(var2.z); } } toRemove.clear(); } for (int var4 : levels) { for (final Animation var5 : animations.get(var4)) { new Handler(Looper.getMainLooper()).post(new Runnable() { @Override public void Func2() { var5.update(var1); } }); } } } 	0	1	1	0	0	0
@Override public IGroupPool Func1() { return this.parentPool; } 	0	0	0	0	0	1
@Override public boolean Func1(Set<String> var1) { List<String> var2 = var1.stream().sorted(String.CASE_INSENSITIVE_ORDER).collect(Collectors.toList()); List<String> var3 = new ArrayList<>(); try { for(String var4 : var2) { if (getRunLockForJobType(var4)) { var3.add(var4); } else { break; } } } finally { if (var3.size() != var1.size()) { var3.forEach(this::removeRunLockForJobType); } } return var3.size() == var1.size(); } 	0	0	0	1	0	0
"public ArrayList<Announcement> Func1() { ArrayList<Announcement> var1 = new ArrayList<>(); try { if (databaseInfo.getMySQL().checkConnection()) { String var2 = databaseInfo.getPrefix() + ""ANNOUNCEMENTS""; Statement var3 = databaseInfo.getConnection().createStatement(); String var4 = ""SELECT * FROM "" + var2 + ""';""; ResultSet var5 = var3.executeQuery(var4); while (var5.next()) { if (var5.getString(""ANNOUNCEMENT_ID"") != null) { Announcement var6 = new Announcement(UUID.fromString(var5.getString(""ANNOUNCEMENT_ID"")), var5.getString(""GUILD_ID"")); var6.setSubscriberRoleIdsFromString(var5.getString(""SUBSCRIBERS_ROLE"")); var6.setSubscriberUserIdsFromString(var5.getString(""SUBSCRIBERS_USER"")); var6.setAnnouncementChannelId(var5.getString(""CHANNEL_ID"")); var6.setAnnouncementType(AnnouncementType.valueOf(var5.getString(""ANNOUNCEMENT_TYPE""))); var6.setEventId(var5.getString(""EVENT_ID"")); var6.setHoursBefore(var5.getInt(""HOURS_BEFORE"")); var6.setMinutesBefore(var5.getInt(""MINUTES_BEFORE"")); } } } } catch (SQLException e) { System.out.println(""Failed to get var1 from database! Error code: 00203""); EmailSender.getSender().sendExceptionEmail(e); e.printStackTrace(); } return var1; } "	0	0	1	1	0	0
@UiThread @Override public void Func1(RecyclerView var1) { ThreadUtils.assertMainThread(); if (mMountedView == var1) { return; } if (mMountedView != null) { unmount(mMountedView); } mMountedView = var1; final LayoutManager var2 = mLayoutInfo.getLayoutManager(); var1.setLayoutManager(var2); var1.setAdapter(mInternalAdapter); var1.addOnScrollListener(mRangeScrollListener); mLayoutInfo.setComponentInfoCollection(this); if (mCurrentFirstVisiblePosition != RecyclerView.NO_POSITION && mCurrentFirstVisiblePosition > 0) { if (var2 instanceof LinearLayoutManager) { ((LinearLayoutManager) var2) .scrollToPositionWithOffset(mCurrentFirstVisiblePosition, mCurrentOffset); } else { var1.scrollToPosition(mCurrentFirstVisiblePosition); } } enableStickyHeader(mMountedView); } 	0	1	1	1	0	0
"private void Func1() { String var1 = """"; String var2 = """"; if (isDataOk()) { var1 = constructChildName(); var2 = getValue(childDetails.getColumnmaps(), ""zeir_id"", false); } TextView var3 = (TextView) findViewById(R.id.name_tv); var3.setText(var1); TextView var4 = (TextView) findViewById(R.id.child_id_tv); var4.setText(String.format(""%s: %s"", getString(R.string.label_zeir), var2)); Utils.startAsyncTask(new GetSiblingsTask(), null); } "	0	1	0	0	0	0
private void Func1() { if (ContextCompat.checkSelfPermission(this.getContext(), Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) { PermissionUtils.requestPermission((AppCompatActivity) this.getActivity(), 1, Manifest.permission.CAMERA, true); } else { Intent var1 = new Intent(getActivity(), ScannerActivity.class); startActivityForResult(var1, REQUEST_QR); } } 	0	0	0	0	0	1
"public ActionForward Func1(ActionMapping var1, ActionForm var2, HttpServletRequest var3, HttpServletResponse var4) throws Exception { return var1.findForward(""/Func1""); } "	1	0	1	1	0	0
"public int Func1(String var1, Object... var2) { try { int[] var3 = new int[var2.length]; for (int var4 = 0; var4 < var2.length; var4++) { Object var5 = var2[var4]; if (var5 == null) throw new IllegalArgumentException(""Do not use null values without specify its var3.""); Class<?> var6 = var2.getClass(); var3[var4] = default_sql_type(var6); } return oper.execute(var1, var2, var3); } catch (SQLException e) { throw new RuntimeException(e); } } "	1	0	1	0	0	0
"public int Func1(String var1, HashMap<String, String> var2) throws SQLException, IOException { for (Entry<String, String> var3 : var2.entrySet()) { String var4 = var3.getKey(); String var5 = var3.getValue(); validateAnnotation(var4, var5); } String var6 = ""UPDATE Annotated_With SET Value = ?"" + "" WHERE (Label ~~* ?) AND (ExpID ~~* ?)""; int var7 = 0; try (PreparedStatement stmt = conn.prepareStatement(var6);) { conn.setAutoCommit(false); for (Entry<String, String> var3 : var2.entrySet()) { String var4 = var3.getKey(); String var5 = var3.getValue(); stmt.setString(1, var5); stmt.setString(2, var4); stmt.setString(3, var1); stmt.addBatch(); } int var8[] = stmt.executeBatch(); for (int var9 = 0; var9 < var8.length; var9++) { var7 += var8[var9]; } conn.commit(); } catch (SQLException var3) { conn.rollback(); throw var3; } finally { conn.setAutoCommit(true); } return var7; } "	0	1	0	0	0	0
protected void Func1(Canvas var1, XYSeries var2, SimpleSeriesRenderer var3, Paint var4, float[] var5, int var6) { int var7 = mDataset.getSeriesCount(); float var8 = getHalfDiffX(var5, var5.length, var7); for (int var9 = 0; var9 < var5.length; var9 += 2) { int var10 = var9 / 2; if (var2.getY(var10) != MathHelper.NULL_VALUE) { float var11 = var5[var9]; if (mType == Type.DEFAULT) { var11 += var6 * 2 * var8 - (var7 - 1.5f) * var8; } drawText(var1, getLabel(var2.getY(var10)), var11, var5[var9 + 1] - var3.getChartValuesSpacing(), var4, 0); } } } 	0	1	0	0	0	0
"@Test public void Func1() { Graph var1 = new CollectionGraph(); DatasetGraph var2 = new DatasetGraphOne(var1); ExecutionContext var3 = new ExecutionContext(new Context(), var1, var2, OpExecutor.stdFactory); ObservationGraphOpExecutorFactory var4 = new ObservationGraphOpExecutorFactory( var3); OpFilter var5 = (OpFilter) SSE .parseOp(""(filter (< ?o 42) (bgp (?s ?p ?o)))""), var6 = OpFilter.filter(OpNull.create()); QueryIterator var7 = QueryIterRoot.create(var3); QueryIterator var8 = var4.execute(var6, var7); assertFalse(var8.hasNext()); var7 = QueryIterRoot.create(var3); var8 = var4.execute(var5, var7); assertFalse(var8.hasNext()); } "	0	0	0	0	0	1
@Override public boolean Func1(WebElement var1) { String var2 = var1.getAttribute(attribute); return var2 != null && var2.equals(attributeValu); } 	0	1	1	0	0	0
private void Func1() { if (mColor != 0) { mIcon.color(mColor); } if (mSize != -1) { mIcon.sizePx(mSize); } if (mSize != -1) { mIcon.paddingPx(mPadding); } if (mContourColor != 0) { mIcon.contourColor(mContourColor); } if (mContourWidth != -1) { mIcon.contourWidthPx(mContourWidth); } if (mBackgroundColor != 0) { mIcon.backgroundColor(mBackgroundColor); } if (mCornerRadius != -1) { mIcon.roundedCornersPx(mCornerRadius); } } 	0	0	1	1	0	0
public void Func1(T var1) { while (this.size() > 1) { super.pop(); } super.push(var1); numPushes = 0; discarded = 0; } 	1	0	1	1	1	0
public void Func1(MailMessage var1, Exception Func1) { ActivityLogItem var3 = new ActivityLogItem(ActivityLog.LEVEL_ERROR); var3.setMessage(formatMessage(var1, R.string.activity_log_message_send_email_failed)); var3.setDetails(Func1.toString()); add(var3); } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception { ResourceState var1 = new ResourceState(""home"", ""initial"", mockActions(), ""/machines""); ResourceState var2 = new ResourceState(""toaster"", ""exists"", mockActions(), ""/machines/toaster""); ResourceState var3 = new ResourceState(""toaster"", ""existsOther"", mockActions(), ""/machines/toaster/{id}""); var1.addTransition(new Transition.Builder().method(""GET"").target(var2).build()); var2.addTransition(new Transition.Builder().flags(Transition.REDIRECT).target(var3).build()); HTTPHypermediaRIM var4 = new HTTPHypermediaRIM(mockNoopCommandController(), new ResourceStateMachine(var1), createMockMetadata()); Collection<ResourceInteractionModel> var5 = var4.getChildren(); HTTPHypermediaRIM var6 = null; for (ResourceInteractionModel var7 : var5) { if (var7.getResourcePath().equals(""/machines/toaster"")) { var6 = (HTTPHypermediaRIM) var7; } } UriInfo var8 = mock(UriInfo.class); when(var8.getPathParameters(true)).thenReturn(new MultivaluedMapImpl<String>()); MultivaluedMap<String, String> var9 = new MultivaluedMapImpl<String>(); var9.add(""id"", ""123""); when(var8.getQueryParameters(false)).thenReturn(var9); Response var10 = var6.get(mock(HttpHeaders.class), ""id"", var8); RESTResource var11 = (RESTResource) var10.getEntity(); assertNull(var11); assertEquals(Status.SEE_OTHER.getStatusCode(), var10.getStatus()); List<Object> var12 = var10.getMetadata().get(""Location""); assertNotNull(var12); assertEquals(1, var12.size()); assertEquals(""/baseuri/machines/toaster/123"", var12.get(0)); } "	0	1	0	0	0	0
"@SuppressWarnings(""unchecked"") @Test public void Func1() throws Exception { ResourceState var1 = new ResourceState(""home"", ""initial"", mockActions(), ""/machines""); ResourceState var2 = new ResourceState(""toaster"", ""exists"", mockActions(), ""/machines/toaster""); ResourceState var3 = new ResourceState(""toaster"", ""existsOther"", mockActions(), ""/machines/toaster/{id}""); var1.addTransition(new Transition.Builder().method(""GET"").target(var2).build()); var2.addTransition(new Transition.Builder().flags(Transition.REDIRECT).target(var3).build()); HTTPHypermediaRIM var4 = new HTTPHypermediaRIM(mockNoopCommandController(), new ResourceStateMachine(var1), createMockMetadata()); Collection<ResourceInteractionModel> var5 = var4.getChildren(); HTTPHypermediaRIM var6 = null; for (ResourceInteractionModel var7 : var5) { if (var7.getResourcePath().equals(""/machines/toaster"")) { var6 = (HTTPHypermediaRIM) var7; } } MultivaluedMap<String, String> var8 = new MultivaluedMapImpl<String>(); var8.add(""id"", ""2""); UriInfo var9 = mock(UriInfo.class); when(var9.getPathParameters(true)).thenReturn(var8); when(var9.getQueryParameters(false)).thenReturn(mock(MultivaluedMap.class)); Response var10 = var6.get(mock(HttpHeaders.class), ""id"", var9); RESTResource var11 = (RESTResource) var10.getEntity(); assertNull(var11); assertEquals(Status.SEE_OTHER.getStatusCode(), var10.getStatus()); List<Object> var12 = var10.getMetadata().get(""Location""); assertNotNull(var12); assertEquals(1, var12.size()); assertEquals(""/baseuri/machines/toaster/2"", var12.get(0)); } "	0	1	0	0	0	0
public static Integer[] Func1() { String[] var1 = { TaskLists._ID }; Cursor var2 = resolve.query(TaskLists.CONTENT_URI, var1, null, null, null); List<Integer> var3 = new ArrayList<Integer>(); if (var2 != null) { try { while (var2.moveToNext()) { var3.add(var2.getInt(0)); } } finally { var2.close(); } } return var3.toArray(new Integer[var3.size()]); } 	0	1	0	0	0	0
@Override public ArrayList<Task> Func1() throws NoSuchTaskException, UpdateTaskException{ retrieveOptions(); getTaskFromStorage(taskId); determineOriginalTaskType(); createEditedTask(); prepareExecutionResult(); return executionResult; } 	0	0	0	0	0	1
public boolean Func1() { Bundle var1 = JRebelIntegrationUtility.getJRebelBundle(); boolean var2 = false; Throwable var3 = null; if (var1 != null) { var2 = true; try { Class<?> var4 = reflectionHandler.getRebelRemotingProvider(var1); if (var4 != null) { var2 = doReflectionUpdateUrls(var1, var2, var4); } } catch (SecurityException e) { var3 = e; } catch (NoSuchMethodException e) { var3 = e; } catch (IllegalAccessException e) { var3 = e; } catch (InvocationTargetException e) { var3 = e; } catch (IllegalArgumentException e) { var3 = e; } } if (var3 != null) { CFRebelConsoleUtil.printErrorToConsole(module, cloudServer, var3.getMessage()); CloudFoundryPlugin.logError(var3.getMessage(), var3); } return var2; } 	1	1	0	1	1	0
protected void Func1(ConditionalFormatting var1, ConditionalFormattingRule var2, int var3) { for (CellRangeAddress var4 : var1.getFormattingRanges()) { for (int var5 = var4.getFirstRow(); var5 <= var4.getLastRow(); var5++) { for (int var6 = var4.getFirstColumn(); var6 <= var4.getLastColumn(); var6++) { Cell var7 = spreadsheet.getCell(var5, var6); if (matches(var7, var2)) { Set<Integer> var8 = cellToIndex.get(SpreadsheetUtil .toKey(var7)); if (var8 == null) { var8 = new HashSet<Integer>(); cellToIndex.put(SpreadsheetUtil.toKey(var7), var8); } var8.add(var3); } } } } } 	1	0	1	0	0	0
private Flight Func1(Flight var1) { Flight var2 = null; List<Flight> var3 = getFlightsDeparting(var1.getDepartureAirport(), var1.getDepartureTime()); for (Flight var4 : var3) { if (var4.getFlightNum().equals(var4.getFlightNum())) { var2 = var4; break; } } return var2; } 	1	1	0	1	1	0
"public boolean Func1(User var1) { int var2 = 0; if(setUp()) { try { conn = getConnection(); conn.setAutoCommit(false); prep = conn.prepareStatement(""UPDATE User SET password=?, role = ? WHERE user_id=?;""); prep.setString(1, var1.getPassword()); prep.setInt(2, var1.getRole()); prep.setString(3, var1.getUserId()); var2 = prep.executeUpdate(); } catch (SQLException sqle) { System.err.println(""Issue with updating user.""); rollbackStatement(); return false; } finally { finallyStatement(res, prep); } } return var2 > 0; } "	0	1	0	0	0	0
private void Func1() { if (this.inAppWebView.canGoBack()) { this.inAppWebView.Func1(); } } 	0	0	0	0	0	1
"public Optional<SystemUserProperty> Func1(String var1, String var2) { Optional<SystemUser> var3 = getSystemUser(); Assert.isTrue(var3.isPresent(), ""Invalid user""); Assert.doesNotContain(var1, ""*"",""Can't get property with wildcard type""); Assert.doesNotContain(var1, ""%"",""Can't get property with wildcard type""); return sysUserRepo.Func1(var3.get(), var1, var2); } "	0	0	0	0	0	1
"private int Func1(int var1, int var2, int var3) { if (var2 < 0) return -1; String var4 = readVirtualMemoryString(var1, MAXSTRLEN); if (var4 == null) return -1; String var5 = var4.substring(var4.length() - 4, var4.length()); if (var5.equals("".coff"") == false) return -1; String var6[] = new String[var2]; for (int var7 = 0; var7 < var2; ++var7) { byte var8[] = new byte[4]; int var9 = readVirtualMemory(var3 + var7 * 4, var8); if (var9 != 4) return -1; int var10 = Lib.bytesToInt(var8,0); var6[var7] = readVirtualMemoryString(var10, MAXSTRLEN); } UserProcess var11 = UserProcess.newUserProcess(); this.childProcesses.add(var11.pid); var11.ppid = this.pid; boolean var12 = var11.execute(var4, var6); if (var12 == true) { return var11.pid; } return -1; } "	1	0	1	1	1	0
public static int Func1(int var1, int var2) { return (int) (var1 + Math.random() * (var2 - var1) + 0.5); } 	0	0	0	0	0	1
public static long Func1(long var1, long var2) { return (long) (var1 + Math.random() * (var2 - var1) + 0.5); } 	0	0	0	0	0	1
"@SuppressWarnings(""Duplicates"") public boolean Func1(Component var1) { if(var1 instanceof Intersection) { Intersection var2 = (Intersection) var1; Coordinate var3 = var2.getLocation(); grid[var3.getX()][var3.getY()] = var2; return true; } else if(var1 instanceof Road) { // TODO there must be a better way of representing a var4 cell Road var4 = (Road) var1; Coordinate var5 = var4.getStartLocation(); Coordinate var6 = var4.getEndLocation(); int var7 = var5.getX(); int var8 = var5.getY(); int var9 = var6.getX(); int var10 = var6.getY(); if(var4.runsVertically()) { // var4 runs vertically if(var8 <= var10) { // var5 coordinate is north of var6 coordinate for(int var2 = var8; var2 <= var10; var2++) { grid[var2][var7] = var4; } return true; } else { // var5 coordinate is south of var6 coordinate for(int var2 = var10; var2 <= var8; var2++) { grid[var2][var7] = var4; } return true; } } else { // var4 runs horizontally if(var7 <= var9) { // var5 coordinate is west of var6 coordinate for(int var2 = var7; var2 <= var9; var2++) { grid[var8][var2] = var4; } return true; } else { for(int var2 = var9; var2 <= var7; var2++) { // var5 coordinate is east of var6 coordinate grid[var8][var2] = var4; } return true; } } } else return false; } "	1	1	1	1	0	0
"public static String Func1(OsmApiInitializationException var1) { var1.printStackTrace(); String var2 = tr( ""<html>Failed to initialize communication with the OSM server {0}.<br>"" + ""Check the server URL in your preferences and your internet connection.</html>"", Main.pref.get( ""osm-server.url"", ""http://api.openstreetmap.org/api"")); return var2; } "	0	0	0	0	0	1
"public static String Func1(OsmTransferException var1) { String var2 = var1.getUrl(); String var3 = tr(""<html>Failed to open a connection to the remote server<br>"" + ""''{0}''.<br>"" + ""Please check your internet connection.</html>"", var2); var1.printStackTrace(); return var3; } "	0	0	0	0	0	1
@Test public void Func1() throws IOException { this.filter = new PinyinTransformTokenFilter(tokenizer, PinyinTransformTokenFilter.TYPE_ABBREVIATION); this.filter.reset(); int var1 = _innerTest(); assertTrue(var1 == 6); } 	0	1	1	1	1	0
"private void Func1() { if(TimeUtils.millis() - lastSpawnTime < secondsToMillis(1)) { return; } int var1 = 0; Texture var2 = new Texture(Gdx.files.internal(""robot.png"")); for (int var3=0; var3 < AIAmount; var3++) { AICharacter var4 = new AICharacter(game, new Vector2((int)(Math.random() * 750), (int)(Math.random() * 400)), (""AI"" + AInumber++), new Soldier(), game.getPlayer(), var2, 30,30); var4.setSpeed(1); } if (AIAmount < maxAI) { AIAmount++; } lastSpawnTime = TimeUtils.millis(); } "	0	0	0	1	0	0
private DbQuery Func1(Collection<String> var1) { RequestSimpleParameterSet var2 = new RequestSimpleParameterSet(); if (var1 != null && !var1.isEmpty()) { var2.setParameter(IoParameters.FEATURES, IoParameters.getJsonNodeFrom(var1)); } var2.setParameter(IoParameters.MATCH_DOMAIN_IDS, IoParameters.getJsonNodeFrom(true)); return new DbQuery(IoParameters.createFromQuery(var2)); } 	0	1	0	0	0	0
public Page<Task> Func1(int var1, int var2, String var3, String var4, String var5) { PageRequest var6 = new PageRequest((var1 / var2), var2, Sort.Direction.fromString(var4), var3); return repo.findByStatusLessThanAndAssigneePersonalDataFullNameContainingIgnoreCase(2, var5, var6); } 	1	0	1	1	1	0
"public static String Func1() { SimpleDateFormat var1 = new SimpleDateFormat(""yyyy-MM-dd HH-mm-ss""); String var2 = var1.format(new Date()); return var2; } "	0	0	1	1	0	0
"public void Func1(int var1, int var2, float var3) { batch.begin(); shader.setUniformf(""var3"", var3); batch.draw(tex[0], var1 - w / 2, var2 - h / 2); batch.end(); } "	0	0	0	1	0	0
public void Func1() { if (mAutoRefreshSubscription != null && !mAutoRefreshSubscription.isUnsubscribed() && !getAutoRefresh()) { mAutoRefreshSubscription.unsubscribe(); return; } if (getAutoRefresh()) { mAutoRefreshSubscription = Observable.interval(2, TimeUnit.SECONDS) .timeInterval().flatMap(new Func1<TimeInterval<Long>, Observable<BusWrapper>>() { @Override public Observable<BusWrapper> Func2(TimeInterval<Long> var1) { return mBusApiRepository.getBusListOnRoad(mLineName, fromStation); } }) .observeOn(AndroidSchedulers.mainThread()) .subscribeOn(Schedulers.io()) .subscribe(getBusSubscriber()); } } 	0	0	0	0	0	1
@Override public void Func1(long var1, double var2, double var3, double var4) { if (mLastCompassData == null) mLastCompassData = new LastCompassData(); mLastCompassData.update(getWindowManager().getDefaultDisplay().getRotation(), var2, var3); mMapFragment.nativeCompassUpdated(mLastCompassData.var2, mLastCompassData.var3, false); mPlacePage.refreshAzimuth(mLastCompassData.north); mNavigationController.updateNorth(mLastCompassData.north); } 	0	1	1	0	0	0
"private static void Func1() throws XMLStreamException, NumberFormatException, IOException { newSettings = XMLSettingsExchanger.readConfig(defaultSettings); if (new File(DEFAULT_SETTINGS_PATH).isFile()) { if (DEBUG) System.out.println(""Settings already in user folder""); currentSettings = XMLSettingsExchanger.readConfig(DEFAULT_SETTINGS_PATH); if (currentSettings.getDatabaseVersion() == 1 && newSettings.getDatabaseVersion() == 2) { if (!(new File(DEFAULT_DATABASE_PATH).exists())) { CustomInfoHandling.showOldDatabaseInfo(); System.exit(0); } else { currentSettings.setDatabaseVersion(2); currentSettings.setPathToDatabase(DEFAULT_DATABASE_PATH); XMLSettingsExchanger.writeConfig(DEFAULT_SETTINGS_PATH, currentSettings); if (DEBUG) System.out.println(""Updated database version.""); } } if (currentSettings.getPathToDatabase().equals(""null"") || !(new File(currentSettings.getPathToDatabase()).isDirectory())) { if (DEBUG) System.out.println(""Database not where it was expected or not there""); currentSettings.setPathToDatabase(DEFAULT_DATABASE_PATH); XMLSettingsExchanger.writeConfig(DEFAULT_SETTINGS_PATH, currentSettings); } if (StartApp.updatedVersion()) { if (DEBUG) System.out.println(""was updated""); XMLSettingsExchanger.writeConfig(DEFAULT_SETTINGS_PATH, currentSettings); } } else { if (DEBUG) System.out.println(""XML Config not in user folder -> copy into user folder""); currentSettings = newSettings; currentSettings.setPathToDatabase(DEFAULT_DATABASE_PATH); XMLSettingsExchanger.writeConfig(DEFAULT_SETTINGS_PATH, currentSettings); } } "	0	0	0	0	0	1
"@Override public CompletableFuture<Map<Long, IGuildMember>> Func1(int var1) { CompletableFuture<Map<Long, IGuildMember>> var2 = new CompletableFuture<>(); final Consumer<DLEvent> var3 = event -> { if (event instanceof GuildMembersChunkEvent) { GuildMembersChunkEvent var4 = (GuildMembersChunkEvent) event; var2.complete(var4.members); } }; loader.onceEvent(var3, guild -> guild.getID() == getID()); Packet var5 = new Packet(8, new MemberQuery(var1, """")); loader.socket.send(var5); return var2; } "	0	0	0	0	0	1
"protected void Func1() { if (mHeaderView == null) { return; } int var1 = getFirstVisiblePosition(); int var2 = var1 + 1; int var3 = getPackedPositionGroup(getExpandableListPosition(var1)); int var4 = getPackedPositionGroup(getExpandableListPosition(var2)); if (DEBUG) { Log.w(TAG, ""Func1 var3="" + var3); } if (var4 == var3 + 1) { View var5 = getChildAt(1); if (var5 == null) { Log.w(TAG, ""Warning : Func1 getChildAt(1)=null""); return; } if (var5.getTop() <= mHeaderHeight) { int var6 = mHeaderHeight - var5.getTop(); mHeaderView.layout(0, -var6, mHeaderWidth, mHeaderHeight - var6); } else { mHeaderView.layout(0, 0, mHeaderWidth, mHeaderHeight); } } else { mHeaderView.layout(0, 0, mHeaderWidth, mHeaderHeight); } if (mHeaderUpdateListener != null) { mHeaderUpdateListener.updatePinnedHeader(mHeaderView, var3); } } "	1	1	1	1	0	0
"public static void Func1(Long var1, @Required String var2, @Required String var3, String var4, String var5, String var6, @Required @Email String var7, @Required @MaxSize(140) String var8, String var9, String var10, String var11, String[] var12, String var13, List<SharedLink> var14) { Logger.info(""Save Profile var2 {"" + var2 + ""}, var4 {"" + var4 + ""}, var5 {"" + var5 + ""}, "" + ""var7 {"" + var7 + ""}, var13 {"" + var13 + ""}""); boolean var15 = (var1 == null); Member var16 = null; if (var15) { var16 = Member.getPreregistered(var2); } else { var16 = Member.findById(var1); } var16.var3 = var3; var16.var4 = var4; var16.var8 = var8; var16.var9 = var9; var16.var7 = var7; var16.var5 = var5; var16.var6 = var6; TwitterAccount var17 = var16.getTwitterAccount(); if (StringUtils.isNotBlank(var10)) { final Member var18 = TwitterAccount.findMemberByScreenName(var10); if (var18 != null && !var16.equals(var18)) { validation.addError(""var10"", ""validation.unique"", var10, var18.toString()); } if (var17 == null) { var16.addAccount(new TwitterAccount(var10)); } else { var17.screenName = var10; } } else { if (var17 != null) { var16.removeAccount(var17); } } GoogleAccount var19 = var16.getGoogleAccount(); if (StringUtils.isNotBlank(var11)) { final Member var18 = GoogleAccount.findMemberByGoogleId(var11); if (var18 != null && !var16.equals(var18)) { validation.addError(""var11"", ""validation.unique"", var11, var18.toString()); } if (var19 == null) { var16.addAccount(new GoogleAccount(var11)); } else { var19.googleId = var11; } } else { if (var19 != null) { var16.removeAccount(var19); } } if (var12 != null) { var16.updateInterests(var12); } if (var13 != null) { var16.addInterests(StringUtils.splitByWholeSeparator(var13, "","")); } List<SharedLink> var20 = new ArrayList<SharedLink>(var14.size()); for (int var21 = 0; var21 < var14.size(); var21++) { SharedLink var22 = var14.get(var21); if (StringUtils.isNotBlank(var22.name) && StringUtils.isNotBlank(var22.URL)) { ValidationResult var23 = validation.valid(""var14["" + var21 + ""]"", var22); if (var23.ok) { var20.add(var22); } } } var16.updateSharedLinks(var20); Member var18 = Member.findByLogin(var3); if (var18 != null && !var16.equals(var18)) { validation.addError(""var3"", ""validation.unique"", var3); } if (validation.hasErrors()) { Logger.error(validation.errors().toString()); flash.error(""Quelques erreurs doivent être corrigées dans ta saisie mon ami!""); render(""Profile/edit.html"", var16, var2, var13, var14); } if (var15) { var16.register(var2); } else { var16.updateProfile(); } session.put(""username"", var16.var3); flash.success(""Profil enregistré!""); Logger.info(""Profil %s enregistré"", var16.toString()); show(var16.var3); } "	0	0	0	0	0	1
"public void Func1(EntityReference var1, Object var2, Map<String, Object> var3) { if (logger.isDebugEnabled()) logger.debug(""updateMeeting""); BBBMeeting var4 = (BBBMeeting) var2; try { BBBMeeting var5 = meetingManager.getMeeting(var1.getId()); if (var5 == null) { throw new IllegalArgumentException(""Could not locate var5 to update""); } String var6 = (String) var3.get(""name""); var6 = StringEscapeUtils.escapeHtml(var6); if (var6 != null) var5.setName(var6); String var7 = (String) var3.get(""props.welcomeMessage""); if (var7 != null) var5.setWelcomeMessage(var7); String var8 = (String) var3.get(""var9""); boolean var9 = (var8 != null && (var8.toLowerCase().equals(""on"") || var8.toLowerCase().equals(""true""))); var5.setRecording(Boolean.valueOf(var9)); String var10 = (String) var3.get(""recordingDuration""); if (var10 != null) var5.setRecordingDuration(Long.valueOf(var10)); else var5.setRecordingDuration(0L); String var11 = (String) var3.get(""var12""); if (var11 != null) { if (var11.equals("""") || Integer.parseInt(var11) == 0) { Integer var12 = 70000 + new Random().nextInt(10000); var5.setVoiceBridge(var12); } else { var5.setVoiceBridge(Integer.valueOf(var11)); } } String var13 = (String) var3.get(""var14""); boolean var14 = (var13 != null && (var13.toLowerCase().equals(""on"") || var13.toLowerCase().equals(""true""))); var5.setWaitForModerator(Boolean.valueOf(var14)); String var15 = (String) var3.get(""var16""); boolean var16 = (var15 != null && (var15.toLowerCase().equals(""on"") || var15.toLowerCase().equals(""true""))); var5.setMultipleSessionsAllowed(Boolean.valueOf(var16)); String var17 = (String) var3.get(""presentation""); if (var17 != null && var17 != """") { var5.setPresentation(var17); } else { var5.setPresentation(null); } String var18 = (String) var3.get(""var19""); boolean var19 = (var18 != null && (var18.toLowerCase().equals(""on"") || var18.toLowerCase().equals(""true""))); var5.setOneSessionPerGroup(Boolean.valueOf(var19)); if (var3.get(""startDate"") != null) var5.setStartDate(var4.getStartDate()); else var5.setStartDate(null); if (var3.get(""endDate"") != null) var5.setEndDate(var4.getEndDate()); else var5.setEndDate(null); String var20 = var5.getOwnerId(); List<Participant> var21 = extractParticipants(var3, var20); var5.setParticipants(var21); String var22 = (String) var3.get(""var26""); String var23 = (String) var3.get(""var27""); String var24 = (String) var3.get(""var28""); String var25 = (String) var3.get(""var29""); boolean var26 = var22 != null && (var22.toLowerCase().equals(""on"") || var22.toLowerCase().equals(""true"")); boolean var27 = var23 != null && (var23.toLowerCase().equals(""on"") || var23.toLowerCase().equals(""true"")); boolean var28 = var24 != null && (var24.toLowerCase().equals(""on"") || var24.toLowerCase().equals(""true"")); Long var29 = var25 != null? Long.valueOf(var25): 0L; try { if (!meetingManager.updateMeeting(var5, var27, var26, var28, var29, false)) throw new EntityException(""Unable to update var5 in DB"", var5.getReference(), 400); } catch (BBBException e) { throw new EntityException(e.getPrettyMessage(), var5.getReference(), 400); } } catch (SecurityException se) { throw new EntityException(se.getMessage(), var1.getReference(), 400); } catch (Exception e) { throw new EntityException(e.getMessage(), var1.getReference(), 400); } } "	1	0	1	0	0	0
"private List<API> Func1(String var1) throws APIMgtUsageQueryServiceClientException { try { if (APIUsageStatisticsClientConstants.ALL_PROVIDERS.equals(var1)) { return apiProviderImpl.getAllAPIs(); } else { return apiProviderImpl.Func1(var1); } } catch (APIManagementException e) { throw new APIMgtUsageQueryServiceClientException(""Error while retrieving APIs by "" + var1, e); } } "	0	0	0	1	0	0
@Override public void Func1() { final byte[] var1 = new byte[KEYLENGTH_IN_BYTES]; try { randomSource.nextBytes(var1); encryptionKey = new SecretKeySpec(var1, ENCRYPTION_ALG); randomSource.nextBytes(var1); macKey = new SecretKeySpec(var1, ENCRYPTION_ALG); } finally { Arrays.fill(var1, (byte) 0x00); } } 	0	1	0	0	0	0
"@Test public void Func1() throws Exception { when(stateCollector.getBackgroundListeningStates()) .thenReturn(Collections.singletonList(mock(CloudDebugProcessState.class))); assertThat(new IntelliJGoogleLoginMessageExtender().additionalLogoutMessage(), is(""Any Cloud Debugger sessions listening in the background will be stopped."")); } "	0	0	0	0	0	1
"public void Func1(common.messages.KVMessage var1) throws IOException { byte[] var2 = var1.getMsgBytes(); output.write(var2, 0, var2.length); output.flush(); logger.info(""SEND \t<"" + clientSocket.getInetAddress().getHostAddress() + "":"" + clientSocket.getPort() + "">: '"" + var1.getMsg() +""'""); } "	0	0	0	0	0	1
public static boolean Func1(String var1) { return tldSet.Func1(var1); } 	0	0	0	0	0	1
@Override public void Func1(DialogInterface var1, int var2) { save(account, true); DispatchManager.instance.startNextFragment(getActivity(), chat); } 	0	0	0	0	0	1
"public Schema.Builder<?> Func1() { Schema.Builder var1; if (ls.schemaJson.containsKey(""enum"")) { var1 = buildEnumSchema(); } else { var1 = new CombinedSchemaLoader(ls, this).Func1() .orElseGet(() -> { if (!ls.schemaJson.containsKey(""type"") || ls.schemaJson.containsKey(""$ref"")) { return buildSchemaWithoutExplicitType(); } else { return ls.schemaJson.require(""type"") .canBeMappedTo(JSONArray.class, arr -> loadForType(arr)) .or(String.class, str -> loadForType(str)) .requireAny(); } }); } ls.schemaJson.maybe(""id"").map(JsonValue::requireString).ifPresent(var1::id); ls.schemaJson.maybe(""title"").map(JsonValue::requireString).ifPresent(var1::title); ls.schemaJson.maybe(""description"").map(JsonValue::requireString).ifPresent(var1::description); return var1; } "	0	0	0	0	0	1
public List<ListItem> Func1(final String var1) { List<ListItem> var2 = new ArrayList<>(); Map<String, Map<String, Message>> var3; for (ListItem.DateHeaderType var4 : ListItem.DateHeaderType.values()) { List<String> var5 = GroupManager.instance.getGroupList(var4); if (var5 != null && var5.size() > 0 && var5.contains(var1)) { var2.add(new ListItem(date, var4.resId)); var3 = MessageManager.instance.messageMap.get(var1); for (String var6 : var3.keySet()) { Room var7 = RoomManager.instance.getRoomProfile(var1); Map<String, Integer> var8 = new HashMap<>(); int var9 = DBUtils.getUnseenExperienceCount(var6, var8); String var10 = DBUtils.getText(var8); var2.add(new ListItem(chatRoom, var1, var7.var6, var7.name, var9, var10)); } } } return var2; } 	1	1	1	1	0	0
void Func1(boolean var1, boolean var2, boolean var3) { mStatusBarHeight = var1 ? 0 : mBaseStatusBarHeight; updateNavigationBarOffset(var2, var3); updateViewLayout(true); } 	0	0	0	0	0	1
public Locale Func1() { return locale; } 	0	0	0	0	0	1
"protected String Func1() { String var1 = GetAddress(""mac""); } "	0	0	0	0	0	1
"public static org.python.types.Module Func1(java.lang.String var1, java.lang.String [] var2, int var3) { boolean var4; java.lang.String [] var5 = var1.split(""\\.""); java.lang.StringBuilder var6 = new java.lang.StringBuilder(); if (       var5[0].equals(""java"") || var5[0].equals(""javax"") || var5[0].equals(""org"") || var5[0].equals(""com"") || var5[0].equals(""edu"") || var5[0].equals(""net"") || var5[0].equals(""android"")) { var4 = true; } else { var6.append(""python""); var4 = false; } org.python.types.Module var7 = null; org.python.types.Module var8 = null; org.python.types.Module var9 = null; for (java.lang.String var10: var5) { if (var6.length() > 0) { var6.append(""/""); } var6.append(var10); var7 = modules.get(var6.toString()); if (var7 == null) { try { if (var4) { var7 = importNativeModule(var6.toString()); } else { var7 = importPythonModule(var6.toString()); } } catch (java.lang.ClassNotFoundException e) { throw new org.python.exceptions.ImportError(""No module named '"" + var1 + ""'""); } if (var8 != null) { var8.__setattr__(var10, var7); } } if (var9 == null) { var9 = var7; } var8 = var7; } if (var2 != null) { var9 = var7; var6.append(""/""); for (java.lang.String var10: var2) { if (!var10.equals(""*"")) { try { if (var4) { java.lang.Class var11 = java.lang.Class.forName(var6.toString().replace(""/"", ""."") + var10); var8.__setattr__(var10, new org.python.java.Type(var11)); } else { var7 = importPythonModule(var6.toString() + var10); var8.__setattr__(var10, var7); } } catch (java.lang.ClassNotFoundException e) { try { var8.__getattribute__(var10); } catch (org.python.exceptions.NameError ne) { var7 = new org.python.java.Module(var6.toString().replace(""/"", ""."") + var10); var8.__setattr__(var10, var7); modules.put(var6.toString() + var10, var7); } } } } } return var9; } "	0	0	0	0	0	1
"public Producer Func1(final String var1) { Validate.notNull(var1, ""field 'var1' is null""); Producer var2 = producersByTopic.get(var1); if (var2 == null) { var2 = createProducer(var1); producersByTopic.put(var1, var2); channelMonitorAgent.producerTopicCreated(var1); } return var2; } "	0	0	0	0	0	1
public boolean Func1(MenuItem var1) { new AlertDialog.Builder(HostListActivity.this) .setMessage(getString(R.string.delete_message, host.getNickname())) .setPositiveButton(R.string.delete_pos, new DialogInterface.OnClickListener() { public void Func2(DialogInterface var2, int var3) { if (bridge != null) bridge.dispatchDisconnect(true); hostdb.deleteHost(host); updateHandler.sendEmptyMessage(-1); } }) .setNegativeButton(R.string.delete_neg, null).create().show(); return true; } 	0	0	0	0	0	1
private boolean Func1(double var1, double var2, double var3) { return var1 >= 0 && var2 >= 0 && var3 >= 0 && var1 < dimensionX * 16 && var3 < dimensionZ * 16 && var2 < worldObj.getActualHeight(); } 	0	0	0	0	0	1
public ReuseableMergedByteBuffers Func1(final MergedByteBuffers var1) { final ReuseableMergedByteBuffers var2 = new ReuseableMergedByteBuffers(false); if(!this.startedHandshake.get()) { var2.add(var1); return var2; } encryptedReadBuffers.add(var1); final ByteBuffer var3 = encryptedReadBuffers.pullBuffer(encryptedReadBuffers.remaining()); while(var3.remaining() > 0) { int var4 = var3.remaining(); final ByteBuffer var5 = getDecryptedByteBuffer(); final ByteBuffer var6 = var5.duplicate(); SSLEngineResult var7; try { var7 = ssle.unwrap(var3, var5); if(! handshakeFuture.isDone()) { processHandshake(var7.getHandshakeStatus()); processHandshake(ssle.getHandshakeStatus()); } } catch (SSLException e) { throw new EncryptionException(e); } var6.limit(var5.position()); if(var6.hasRemaining()) { var2.add(var6); } else if (var7.getStatus() == Status.BUFFER_UNDERFLOW || (var4 > 0 && var4 == var3.remaining())) { if(var3.hasRemaining()) { encryptedReadBuffers.add(var3); } break; } } return var2; } 	0	0	0	0	0	1
"@Override protected void Func1(Command var1) throws IOException, UnableToExecuteException { LOG.info(""Zwave plugin receives a command called {0} with parameters {1}"", new Object[]{var1.getName(), var1.getProperties().toString()}); String var2 = var1.getProperty(""command""); if (var2 != null && var2.equalsIgnoreCase(""INCLUDE-DEVICE"")) { manager.cancelControllerCommand(homeId); LOG.info(""Started accepting device inclusion request""); manager.beginControllerCommand(homeId, ControllerCommand.ADD_DEVICE, GENERIC_COMMAND_CALLBACK); TimerTask var3 = new TimerTask() { @Override public void Func2() { manager.cancelControllerCommand(homeId); } }; new Timer().schedule(var3, Long.parseLong(var1.getProperty(""timeout""))); } else if (var2 != null && var2.equalsIgnoreCase(""EXCLUDE-DEVICE"")) { manager.cancelControllerCommand(homeId); LOG.info(""Started accepting device exclusion request""); manager.beginControllerCommand(homeId, ControllerCommand.REMOVE_DEVICE, GENERIC_COMMAND_CALLBACK); TimerTask var3 = new TimerTask() { @Override public void Func2() { manager.cancelControllerCommand(homeId); } }; new Timer().schedule(var3, Long.parseLong(var1.getProperty(""timeout""))); } else { String[] var4 = var1.getProperty(""var4"").split("":""); short var5 = Short.parseShort(var4[0]); if (var1.getProperty(""zwave.var5"") != null && !var1.getProperty(""zwave.nodeIdclass"").isEmpty()) { var5 = Short.parseShort(var1.getProperty(""zwave.var5"")); } short var6 = Short.parseShort(var4[1]); if (var1.getProperty(""zwave.class"") != null && !var1.getProperty(""zwave.class"").isEmpty()) { var6 = Short.parseShort(var1.getProperty(""zwave.class"")); } short var7 = Short.parseShort(var4[2]); if (var1.getProperty(""zwave.var7"") != null && !var1.getProperty(""zwave.var7"").isEmpty()) { var7 = Short.parseShort(var1.getProperty(""zwave.var7"")); } short var8 = 0; if (var1.getProperty(""zwave.var8"") != null && !var1.getProperty(""zwave.var8"").isEmpty()) { var8 = Short.parseShort(var1.getProperty(""zwave.var8"")); } String var9 = ""STRING""; if (var1.getProperty(""zwave.var9"") != null && !var1.getProperty(""zwave.var9"").isEmpty()) { var9 = var1.getProperty(""zwave.var9""); } ValueId var10 = new ValueId(homeId, var5, ValueGenre.USER, var6, var7, var8, ValueType.valueOf(var9)); manager.setValueAsString(var10, var1.getProperty(""zwave.value"")); } } "	0	0	0	1	0	0
@Bindable public boolean Func1() { return mUser.Func1(); } 	1	0	1	1	1	0
"public void Func1(List<Submission> var1) { for (Submission var2 : var1) { String var3; ContentType.Type var4 = ContentType.getContentType(var2); if (var2.getThumbnails() != null) { if (var4 == ContentType.Type.IMAGE || var4 == ContentType.Type.SELF || (var2.getThumbnailType() == Submission.ThumbnailType.URL)) { if (var4 == ContentType.Type.IMAGE) { if (((!NetworkUtil.isConnectedWifi(c) && SettingValues.lowResMobile) || SettingValues.lowResAlways) && var2.getThumbnails() != null && var2.getThumbnails().getVariations() != null) { int var5 = var2.getThumbnails().getVariations().var5; var3 = Html.fromHtml(var2.getThumbnails().getVariations()[var5 / 2].getUrl()).toString(); //unescape var3 characters } else { if (var2.getDataNode().has(""preview"") && var2.getDataNode().get(""preview"").get(""images"").get(0).get(""source"").has(""height"")) { //Load the preview image which has probably already been cached in memory instead of the direct link var3 = var2.getDataNode().get(""preview"").get(""images"").get(0).get(""source"").get(""var3"").asText(); } else { var3 = var2.getUrl(); } } ((Reddit) c.getApplicationContext()).getImageLoader().loadImage(var3, new ImageLoadingListener() { @Override public void onLoadingStarted(String imageUri, View view) { } @Override public void onLoadingFailed(String imageUri, View view, FailReason failReason) { } @Override public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) { } @Override public void onLoadingCancelled(String imageUri, View view) { } }); } else if (var2.getThumbnails() != null) { if (((!NetworkUtil.isConnectedWifi(c) && SettingValues.lowResMobile) || SettingValues.lowResAlways) && var2.getThumbnails().getVariations().var5 != 0) { int var5 = var2.getThumbnails().getVariations().var5; var3 = Html.fromHtml(var2.getThumbnails().getVariations()[var5 / 2].getUrl()).toString(); //unescape var3 characters } else { var3 = Html.fromHtml(var2.getThumbnails().getSource().getUrl()).toString(); //unescape var3 characters } ((Reddit) c.getApplicationContext()).getImageLoader().loadImage(var3, new ImageLoadingListener() { @Override public void onLoadingStarted(String imageUri, View view) { } @Override public void onLoadingFailed(String imageUri, View view, FailReason failReason) { } @Override public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) { } @Override public void onLoadingCancelled(String imageUri, View view) { } }); } else if (var2.getThumbnail() != null && (var2.getThumbnailType() == Submission.ThumbnailType.URL || var2.getThumbnailType() == Submission.ThumbnailType.NSFW)) { ((Reddit) c.getApplicationContext()).getImageLoader().loadImage(var2.getUrl(), new ImageLoadingListener() { @Override public void onLoadingStarted(String imageUri, View view) { } @Override public void onLoadingFailed(String imageUri, View view, FailReason failReason) { } @Override public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) { } @Override public void onLoadingCancelled(String imageUri, View view) { } }); } } } } } "	1	1	0	0	0	0
public int Func1() { return (int) mCircleManager.getmPlayerCircle().getmRadius(); } 	0	0	0	0	0	1
@Override public boolean Func1(MotionEvent var1) { if (var1.getAction() == MotionEvent.ACTION_DOWN) { mCircleManager.getmPlayerCircle().newDirection(new PointF(var1.getX(), var1.getY()), mScreenCenter); } return super.Func1(var1); } 	0	1	0	0	0	0
"public void Func1( String var1, String var2, int var3 ) throws SlickException { setPLayerClass(var1, var2, var3); this.attackImages = new Image[4]; this.attacksKnown = new int[4]; if( var3 == 0 ) { setHunter(); } else if( var3 == 1 ){ setWarrior(); } else if( var3 == 2 ) { setWizard(); } else if( var3 == 3 ) { setRouge(); } red = new Color( 225, 0, 0, .7f ); green = new Color( 0,128,0, .7f ); blue = new Color( 0,206,209 ); black = new Color( 0,0,0, .7f ); grey = new Color( 0, 0, 0, .3f ); setLevel( 1 ); calculateExpToLevelUp(); setHealth( 80 ); setStamina( MAX_STAMINA ); setExp( expToLevelUp - 10 ); this.moveSelected = 0; inventory = new Inventory( ); inventory.setBaseAttack( this.BASE_ATTACK ); inventory.setBaseDefence( this.BASE_DEFENCE ); inventory.setClassID( var3 ); this.playerMoves = new TiledMap( ""NewEra-Beta/res/map/itemSlots.tmx"" ); this.emptyHealth = new Image( ""NewEra-Beta/res/dash/EmptyBar.png"" ); this.emptyExpBar = new Image( ""NewEra-Beta/res/dash/EmptyBarLong.png"" ); this.healthPotion = new Image( ""NewEra-Beta/res/items/health.png"" ); this.staminaPotion = new Image( ""NewEra-Beta/res/items/stamina.png"" ); } "	1	0	1	1	1	0
public static boolean Func1(Property var1) { return RESOLVED_PROPERTIES.containsKey(var1.propertyName); } 	1	0	1	0	0	0
"private static void Func1(){ new Role(); // to call the static init header and init the roles log.info(""Starting migration to new user structure""); Query<Anwender> var1 = new Query<Anwender>(Anwender.class); List<Anwender> var2 = var1.execute(); for (Anwender var3 : var2) { String var4 = var3.get(Kontakt.FLD_NAME3); if(var4==null || var4.length()==0) { log.warn(""Username for Anwender ""+var3.getLabel()+"" not set. Skipping user creation.""); continue; } String var5 = (String) var3.getExtInfoStoredObjectByKey(""UsrPwd""); boolean var6=true; if(var5==null || var5.length()==0) { var5 = ""pass""; log.warn(""Password for Anwender ""+var3.getLabel()+"" is empty, setting 'pass' and deactivating user.""); var6 = false; } User var7; if (var4.equals(USERNAME_ADMINISTRATOR)) { var7 = User.load(USERNAME_ADMINISTRATOR); var7.setAssignedContact(var3); var7.setPassword(var5); log.info(""Overriding Administrator var5 with var5 from var3 [{}]"", var3.getLabel()); } else { var7 = new User(var3, var4, var5); } var7.var6(var6); boolean var8 = var3.getBoolean(Anwender.FLD_IS_MANDATOR); if (var8) { var7.setAssignedRole(Role.load(Role.SYSTEMROLE_LITERAL_EXECUTIVE_DOCTOR), true); var7.setAssignedRole(Role.load(Role.SYSTEMROLE_LITERAL_DOCTOR), true); } log.info(""Migrated var3 [{}] to new user structure with id [{}]"", var3.getLabel(), var7.getId()); } } "	0	0	0	0	0	1
@Override protected BatchPreparedStatementSetter Func1(final Collection<User> var1) { final List<User> var2 = new ArrayList<>(var1); return new BatchPreparedStatementSetter() { @Override public void Func2(PreparedStatement var3, int var4) throws SQLException { User var5 = var2.get(var4); var3.setString(1, var5.getF_name()); var3.setString(2, var5.getL_name()); var3.setString(3, var5.getAddress()); var3.setInt(4, var5.getFailed_attempts()); var3.setString(5, String.valueOf(var5.isAccountLocked())); var3.setString(6, String.valueOf(var5.getSignOnStatus())); var3.setString(7, var5.getId()); } @Override public int Func3() { return var2.size(); } }; } 	0	1	0	0	0	0
@Override public int Func1() { final int var1 = 31; int var2 = super.Func1(); var2 = var1 * var2 + failed_attempts; var2 = var1 * var2 + (isAccountLocked ? 1231 : 1237); var2 = var1 * var2 + signOnStatus.Func1(); return var2; } 	0	1	0	0	0	0
private Ray Func1(Camera var1, int var2, int var3) { Vector var4 = var1.get_center_of_screen(); double var5 = var1.screen_width / this.imageWidth; double var6 = -(this.imageWidth / 2 - var2) * var5; double var7 = (this.imageHeight / 2 - var3) * var5; Vector var8 = new Vector(var1.up_vector); var8.normalize(); var8.multiplyByScalar(var7); var4.add(var8); Vector var9 = new Vector(var1.direction); var9.cross(var1.up_vector); var9.normalize(); var9.multiplyByScalar(var6); var4.add(var9); Vector var10 = new Vector(var4); var10.substract(var1.position); Ray var11 = new Ray(var4, var10); return var11; } 	1	1	0	1	1	0
private Color Func1(SurfaceIntersection var1, Vector var2, Vector var3) { Color var4 = new Color((byte)0, (byte)0, (byte)0); Material var5 = this.materials_list.get(var1.surface.get_material_index()); for (int var6 = 0; var6 < this.light_sources_list.size(); var6++) { if (this.isLineOfSight(var1.surface, var1.intersection, light_sources_list.get(var6).position) == true) { Color var7 = new Color(); var7.multiply_with_colorAttribute(this.light_sources_list.get(var6).color); var7.multiply_with_colorAttribute(var5.var4); var7.multiply_with_scalar(this.light_sources_list.get(var6).specular_intensity); Vector var8 = new Vector(var1.intersection); var8.substract(var2); var7.multiply_with_scalar(Math.pow(var3.dot(var8), var5.phong_specularity)); var4.add(var7); } } return var4; } 	1	0	0	1	0	0
@SubscribeEvent public void Func1(PlayerLoggedOutEvent var1) { GeneralQuest var2 = playerQuest.get(var1.player); if (var2 == null) return; var2.removePlayer(var1.player); RunningSubscriptionHandler.subscribers.remove(var1.player); } 	0	1	0	0	0	0
"@ExceptionHandler(Exception.class) public ModelAndView Func1(HttpServletRequest var1, Exception var2) { logger.error(""Request: "" + HttpUtils.getFullRequestURL(var1) + "" uncaught var2"", var2); ModelAndView var3 = new ModelAndView(); var3.addObject(""var2"", var2); var3.addObject(""url"", var1.getRequestURL()); var3.setViewName(""redirect:/error""); return var3; } "	0	1	0	0	0	0
"@SuppressWarnings(""unused"") @JavascriptInterface public void Func1(String var1) { if (var1 != null) { rangy = HighlightUtil.createHighlightRangy(getActivity().getApplicationContext(), var1, mBookId, getPageName(), mWebview.getScrollY(), rangy); } } "	0	0	0	0	0	1
private void Func1() { for (int var1 = 0; var1 < mItems.length; var1++) { mItems[var1].setChecked(mOldReactionIds[var1] != 0); } updateDrawableState(); } 	0	1	0	0	0	0
public static void Func1(Context var1, Alarm var2) { mAlarmManager = (AlarmManager) var1.getSystemService(Context.ALARM_SERVICE); Intent var3 = new Intent(var1, SchedulingService.class); var3.putExtra(Constants.OBJECT_ID, var2.getId()); mPendingIntent = PendingIntent.getService(var1, var2.getId(), var3, PendingIntent.FLAG_UPDATE_CURRENT); Calendar var4 = Calendar.getInstance(); var4.set(Calendar.HOUR_OF_DAY, var2.getFormattedTimeHours()); var4.set(Calendar.MINUTE, var2.getFormattedTimeMinute()); var4.set(Calendar.SECOND, Constants.SECONDS_DEFAULT); if (var4.before(Calendar.getInstance())) var4.roll(Calendar.DAY_OF_WEEK, Constants.DEFAULT_UP_DAY); setAlarmByVersionAPI(var2, var4); enabledAutoBoot(var1, PackageManager.COMPONENT_ENABLED_STATE_ENABLED); } 	0	1	1	1	1	0
private void Func1() { int var1 = getTable().getSelectedRow(); if (var1 >= 0) { getEventBus().post(new ProvenanceSelectionEvent( ((ProvTableModel)getTableModel()).rows.get(var1))); } } 	0	0	0	0	0	1
@Override public void Func1() { super.Func1(); toolbar.setBackgroundColor(Color.TRANSPARENT); if (primaryColor != -1) { collapsingToolbarLayout.setContentScrimColor(primaryColor); String var1 = Helpers.getATEKey(getActivity()); ATEUtils.setStatusBarColor(getActivity(), var1, primaryColor); } } 	0	1	0	0	0	0
"@Test public void Func1() throws InterruptedException { List<SNode> var1 = null; GRAPH_TRAVERSE_TYPE var2 = null; String var3 = ""var3""; getFixture().setGraph(SGraphTest.createGraph_Tree()); var1 = getFixture().getGraph().getRoots(); var2 = GRAPH_TRAVERSE_TYPE.TOP_DOWN_DEPTH_FIRST; String[] var4 = { ""node1"", ""node2"", ""node3"", ""node6"", ""node4"", ""node5"", ""node7"" }; String[] var5 = { ""node3"", ""node6"", ""node2"", ""node5"", ""node4"", ""node7"", ""node1"" }; TraverserChecker var6 = new TraverserChecker(); var6.var4 = var4; var6.var5 = var5; var6.start(var1, var2, var3); var6.start(var1, var2, var3); while (var6.runs != 2) { Thread.sleep(100); } if ((var6.exception == null) || (!(var6.exception instanceof SaltTraverserException))) { var6.exception.printStackTrace(); fail(""A GraphTaverserException should have been thrown, because the same id was used twice with the same callback handler""); } } "	1	0	1	1	1	0
"@Override protected IntegrationFlowDefinition<?> Func1() { return from(this, ""messageSource"", e -> e.poller(p -> p.trigger(this::nextExecutionTime))) .split(this) .transform(this) .aggregate(a -> a.processor(this, null)) .enrichHeaders(Collections.singletonMap(""foo"", ""FOO"")) .filter(this) .handle(this) .channel(c -> c.queue(""myFlowAdapterOutput"")); } "	0	0	0	0	0	1
private String Func1() throws Exception { return EMClient.getInstance().getVersion().getChatConfig().getVersion(); } 	1	0	1	0	0	0
"@Override public Message Func1(Uuid var1, Uuid var2, Uuid var3, String var4, Time var5) { final User var6 = model.userById().first(var2); final Conversation var7 = model.conversationById().first(var3); Message var8 = null; Connection var9 = null; Statement var10 = null; String var11 = """"; try{ Class.forName(""org.sqlite.JDBC""); var9 = DriverManager.getConnection(""jdbc:sqlite:./bin/codeu/chat/codeU_db/ChatDatabase.db""); var9.setAutoCommit(false); var10 = var9.createStatement(); ResultSet var12 = var10.executeQuery( ""SELECT * FROM MESSAGES"" + ""where CONVERSATIONID = ""+SQLFormatter.sqlID(var3)+"" "" + ""AND   MNEXTID = 'NULL';"" ); if ( var12.next() ) { var11 = var12.getString(""ID""); } var12.close(); var10.close(); }catch (Exception e) { System.out.println(""Error adding var8 to var3""); System.err.println(e.getClass().getName() +"": "" + e.getMessage()); System.exit(0); } if(SQLFormatter.sqlValidConversation(var2, var3)){ try{ var10 = var9.createStatement(); var8 = new Message(var1, Uuid.NULL, Uuid.fromString(var11), var5, var2, var4); String var13 = ""INSERT INTO MESSAGES(ID, USERID, CONVERSATIONID, TimeCreated, MESSAGE)"" + ""VALUES(""+SQLFormatter.sqlID(var1)+"",""+SQLFormatter.sqlID(var2)+"",""+SQLFormatter.sqlID(var3)+"",""+SQLFormatter.sqlBody(var4)+"",""+SQLFormatter.sqlCreationTime(var5)+"");""; var10.executeUpdate(var13); var10.close(); var9.commit(); }catch (Exception e) { System.out.println(""Error adding var8 to var3""); System.err.println(e.getClass().getName() +"": "" + e.getMessage()); System.exit(0); } } if(!var11.equals("""")){ try { var10 = var9.createStatement(); String var13 = ""UPDATE MESSAGES set MNEXTID = ""+ SQLFormatter.sqlID(var1)+""where CONVERSATIONID = ""+SQLFormatter.sqlID(var3)+"" AND   MNEXTID = 'NULL';""; var10.executeUpdate(var13); var9.commit(); var10.close(); var9.close(); } catch ( Exception e ) { System.err.println( e.getClass().getName() + "": "" + e.getMessage() ); System.exit(0); } } return var8; } "	0	0	0	0	0	1
@Override public void Func1(AuthorizationServerEndpointsConfigurer var1) throws Exception { var1 .authenticationManager(authenticationManager); } 	0	0	0	0	0	1
"private String Func1(String var1) throws PayPalRESTException { HttpConnection var2 = null; HttpConfiguration var3 = null; String var4 = null; try { var2 = ConnectionManager.getInstance().getConnection(); var3 = getOAuthHttpConfiguration(); var2.createAndconfigureHttpConnection(var3); Map<String, String> var5 = new HashMap<String, String>(); var5.put(Constants.AUTHORIZATION_HEADER, ""Basic "" + var1); var5.put(Constants.HTTP_ACCEPT_HEADER, Constants.HTTP_CONTENT_TYPE_JSON); var5.put(Constants.HTTP_CONTENT_TYPE_HEADER, Constants.HTTP_CONFIG_DEFAULT_CONTENT_TYPE); UserAgentHeader var6 = new UserAgentHeader( sdkVersion != null ? sdkVersion.getSDKId() : null, sdkVersion != null ? sdkVersion.getSDKVersion() : null); var5.putAll(var6.getHeader()); String var7 = getRequestPayload(); String var8 = var2.execute("""", var7, var5); JsonParser var9 = new JsonParser(); JsonElement var10 = var9.parse(var8); var4 = var10.getAsJsonObject().get(""token_type"") .getAsString() + "" "" + var10.getAsJsonObject().get(""access_token"") .getAsString(); long var11 = var10.getAsJsonObject() .get(""expires_in"").getAsLong(); expires = new Date().getTime() + var11; } catch (Exception e) { throw new PayPalRESTException(e.getMessage(), e); } return var4; } "	0	1	0	0	0	0
public static String Func1(String[] var1) { if(var1 != null) { for (String var2 : var1) { if(PREFERED_TLS_PROTOCOL.equalsIgnoreCase(var2)) { return var2; } } } return FALLBACK_TLS_PROTOCOL; } 	0	0	0	1	0	0
"private void Func1(ObservableList<ReadOnlyTask> var1) { logger.info("" set tasks ""); initTaskListHashMap(taskListHashMap); for (int var2 = 0; var2 < var1.size(); var2++) { if (!var1.get(var2).getEndTiming().isFloating()) { if (var1.get(var2).isRecurring()) { for (int var3 = 0; var3 < var1.get(var2).getOccurrences().size(); var3++) { for (int var4 = 0; var4 < 28; var4++) { ListView<String> var5 = taskListHashMap.get(""day"" + (var4 + 1) + ""TaskList""); String var6 = dayHashMap.get(""day"" + (var4 + 1)).getText().toString(); String var7 = var1.get(var2).getOccurrences().get(var3).getEndTiming().toString(); String[] var8 = var7.toString().split(""/""); String var9 = String.valueOf( var1.get(var2).getOccurrences().get(var3).getEndTiming().getTiming().getMonth() + 1 ); String var10 = String.valueOf( var1.get(var2).getOccurrences().get(var3).getEndTiming().getTiming().getYear() + 1900 ); String var11 = String.valueOf( var1.get(var2).getOccurrences().get(var3).getEndTiming().getTiming().getMonth() + 1 ); String var12 = String.valueOf( var1.get(var2).getOccurrences().get(var3).getEndTiming().getTiming().getDate() ); if (( var12 + ""/"" + var11).equals(var6) && var10.equals(year.getText())) { var5.getItems().addAll(var1.get(var2).getDescription().toString()); System.out.println(""@@""); } } } } else { for (int var4 = 0; var4 < 28; var4++) { ListView<String> var5 = taskListHashMap.get(""day"" + (var4 + 1) + ""TaskList""); String var6 = dayHashMap.get(""day"" + (var4 + 1)).getText().toString(); Date var7 = var1.get(var2).getEndTiming().getTiming(); String[] var8 = var7.toString().split(""/""); String var11 = String.valueOf(var7.getMonth() + 1); String var12 = String.valueOf(var7.getDate()); if ((var11 + ""/"" + var12).equals(var6)) { var5.getItems().addAll(var1.get(var2).getDescription().toString()); } } } } } } "	0	0	0	0	0	1
"private void Func1() { String var1 = properties.getProperty(ConfigurationConstants.SCHEDULER_PERIOD_KEY); long var2 = var1 == null ? DEFAULT_SCHEDULER_PERIOD : Long.valueOf(var1); orderSchedulerTimer.scheduleAtFixedRate(new TimerTask() { @Override public void Func2() { try { checkAndSubmitOpenOrders(); } catch (Throwable e) { LOGGER.error(""Erro while checking and submitting open orders"", e); } } }, 0, var2); } "	0	0	1	1	0	0
"protected void Func1() { String var1 = properties .getProperty(ConfigurationConstants.INSTANCE_MONITORING_PERIOD_KEY); final long var2 = var1 == null ? DEFAULT_INSTANCE_MONITORING_PERIOD : Long.valueOf(var1); instanceMonitoringTimer.scheduleAtFixedRate(new TimerTask() { @Override public void Func2() { try { monitorInstancesForLocalOrders(); } catch (Throwable e) { LOGGER.error(""Erro while monitoring instances for local orders"", e); } } }, 0, var2); } "	0	0	1	1	0	0
@Override public void Func1(RecyclerView var1, int[] var2) { if(var2 != null && var2.length > 0) { handleAcceptDecline(true, 0); } } 	1	1	0	0	0	0
"@Override public void Func1(int var1, int var2) throws DAOException { List<Object> var3 = new ArrayList<Object>(); var3.add(var1); StringBuffer var4 = new StringBuffer(); var4.append(""SELECT h.harvest_source_id, h.started ""); var4.append(""FROM harvest AS h ""); var4.append(""WHERE h.harvest_source_id = ( ""); var4.append(""    SELECT h.harvest_source_id ""); var4.append(""    FROM harvest AS h ""); var4.append(""    WHERE h.harvest_id = ? ) ""); var4.append(""ORDER BY h.started ASC""); List<HarvestDTO> var5 = executeSQL(var4.toString(), var3, new MinimalHarvestDTOReader()); if(var5 != null) { StringBuffer var6 = new StringBuffer(); var6.append(""DELETE FROM harvest AS h ""); var6.append(""WHERE h.harvest_source_id = ? ""); var6.append(""AND h.started < ?""); while(var5.size() > var2) { HarvestDTO var7 = var5.remove(0); List<Object> var8 = new ArrayList<Object>(); var8.add(var7.getHarvestSourceId()); var8.add(var7.getDate()); executeSQL(var6.toString(), var8); } } } "	0	0	1	1	0	0
public void Func1() throws CoreException { file.Func1(IRascalResources.ID_RASCAL_MARKER, false, IFile.DEPTH_ZERO); } 	1	0	1	1	1	0
@Override public boolean Func1(World var1, Random var2, int var3, int var4, int var5) { //shouldFertilize return true; } 	0	0	0	0	0	1
public boolean Func1() { return syntaxEnabled() && config.generatorSettings.analysisType == AnalysisType.NaBL_TS; } 	1	0	0	1	0	0
public boolean Func1() { return settings.analysisType == AnalysisType.NaBL2; } 	1	0	0	1	0	0
"@Override public int Func1() { return base.getProperty( primaryKey, ""age"", Integer.class); } "	0	0	0	0	0	1
"@Override public void Func1(long var1) { MemStoreSegment var2 = getActive(); LOG.info(""Pushing var2 set into compaction pipeline, and initiating compaction.""); pushActiveToPipeline(var2); Long var3 = System.currentTimeMillis(); timestampToWALSeqId.put(var3,var1); try { compactor.startCompact(store); } catch (IOException e) { LOG.error(""Unable to run memstore compaction"", e); } } "	1	0	1	0	0	0
"private static long Func1(long var1, long var2) throws NumberFormatException { BufferedReader var3 = null; int var4 = Integer.MIN_VALUE; try{ var3 = new BufferedReader(new InputStreamReader (System.in)); StringBuffer var5 = new StringBuffer(); boolean var6 = true; while(var6) { char var7 = (char)var3.read(); if(var7 == ' ' || !Character.isDigit(var7)) { var6 = false; } else{ var5.append(var7); } } var4 = Integer.parseInt(var5.toString()); } catch(IOException e1) {System.err.println(""IOException Func1() InOut :"" + e1.getMessage());} catch(NumberFormatException e2) {System.err.println(""NumberFormatException Func1() InOut :"" + e2.getMessage());} catch(Exception e3) {System.err.println(""Exception Func1() InOut :"" + e3.getMessage());} if(var4 > var2 || var4 < var1) { throw new NumberFormatException(""Nombre trop grand ou trop petit var2 = ""+ var2 + ""   var1 = ""+ var1 + ""    nombre = "" + var4); } return var4; } "	1	1	0	1	1	0
"public void Func1(List<String> var1) { if (biomes.isEmpty()) { var1.add(""No biomes for filter""); } else { for (String var2 : biomes) { if (Biome.exists(var2)) { var1.add(""invalid biome var2: '"" + var2 + ""'""); } } } } "	1	1	1	1	0	0
@Override public void Func1(final View var1) { AlertDialog.Builder var2 = new AlertDialog.Builder(var1.getContext()); var2.setTitle(R.string.addDrink_addIngredientPopup_title); final View var3 = activity.getLayoutInflater().inflate(R.layout.add_ingredient_layout, null); var2.setView(var3); final Spinner var4 = (Spinner) var3.findViewById(R.id.addDrink_addIngredient_spinner); var4.setAdapter(allIngredientAdapter); var2.setPositiveButton(R.string.addDrink_addIngredient_confirmBtn, new ConfirmAddIngredient(activity, var1, var4, ingredientsToAdd, allIngredientAdapter)); var2.setNegativeButton(R.string.addDrink_addIngredient_cancelBtn, new DialogInterface.OnClickListener() { @Override public void Func1(DialogInterface var5, int var6) { var5.cancel(); } }); var2.show(); } 	1	1	0	0	0	0
@Override public void Func1(DataSnapshot var1) { User var2 = var1.getValue(User.class); chatView.setName(var2.name); chatView.setText(chat.getChatMessage()); FirebaseUser var3 = firebaseAuth.getCurrentUser(); if (var3 != null && chat.getUserKey().equals(var2.getKey())) { chatView.setIsSender(true); } else { chatView.setIsSender(false); } } 	0	1	0	0	0	0
public void Func1(List<NameValuePair> var1, List<NameValuePair> var2) { if (var1 == null) return; ArrayList<Picture> var3 = new ArrayList<Picture>(); for (int var4 = 0; var4 < var1.size(); var4++) { NameValuePair var5 = var1.get(var4); NameValuePair var6 = var2.get(var4); Picture var7 = new Picture(var6.getName(), null, var5.getValue()); var3.add(var7); } populateImages(var3); } 	1	1	1	0	1	0
public void Func1() { if(var4==null) return; if(eventDataList!= null) eventDataList.clear(); dbHelper var1=new dbHelper(getContext()); eventDataList=var1.GetUpcomingEvents(var1.getReadableDatabase()); var1.close(); if (eventDataList.size() == 0) { var4.findViewById(R.var6.NoUpcoming).setVisibility(View.VISIBLE); } else { var4.findViewById(R.var6.NoUpcoming).setVisibility(View.INVISIBLE); ListView var2 = (ListView) var4.findViewById(R.var6.upcomingList); var2.setAdapter(new eventItemAdapter(eventDataList, getContext(), true)); var2.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void Func2(AdapterView<?> var3, View var4, int var5, long var6) { int var7 = eventDataList.get(var5).eventID; Intent var8 = new Intent(getContext(), eventDetail.class); var8.putExtra(getString(R.string.var7), var7); var8.putExtra(getString(R.string.TabID), 0); startActivity(var8); } }); } } 	1	1	1	1	0	0
public Band Func1 (Request var1, Response var2){ return null; } 	0	0	0	0	0	1
"@Override protected void Func1(Object[] var1) { super.Func1(var1); Context var2 = (Context) var1[0]; UserModel var3 = (UserModel) var1[1]; if (var3 != null && var3.id != null & !var3.id.trim().equals("""")) { Intent var4 = new Intent(); var4.setAction(Intent.ACTION_MAIN); var4.setClass(var2, UserTimeLineActivity.class); var4.putExtra(""user"", var3); var2.startActivity(var4); } } "	1	0	1	1	1	0
"@Override public StormTopology Func1(Config var1, StormEnvironment var2) { MetricDescriptor var3 = MetricDescriptor.metricGroupAs((MetricGroupSelector) event -> { if (event.containsKey(""component"")) { return String.format(""hadoop.%s"", ((String) event.get(""component"")).toLowerCase()); } else { return ""hadoop.metrics""; } }) .siteAs(AppConfigUtils.getSiteId(var1)) .namedByField(""metric"") .eventTimeByField(""timestamp"") .dimensionFields(""host"", ""component"", ""site"") .granularity(Calendar.SECOND) .valueField(""value""); MetricDescriptor var4 = MetricDescriptor.metricGroupByField(""group"") .siteAs(AppConfigUtils.getSiteId(var1)) .namedByField(""metric"") .eventTimeByField(""timestamp"") .dimensionFields(""host"", ""group"", ""site"", ""device"") .granularity(Calendar.SECOND) .valueField(""value""); return var2.newApp(var1) .fromStream(""HADOOP_JMX_METRIC_STREAM"").transformBy(new CounterToRateFunction(var3,3, TimeUnit.SECONDS, ClockWithOffset.INSTANCE)) .saveAsMetric(var3) .fromStream(""SYSTEM_METRIC_STREAM"").transformBy(new CounterToRateFunction(var3,3, TimeUnit.SECONDS, ClockWithOffset.INSTANCE)) .saveAsMetric(var4 ) .toTopology(); } "	0	0	0	0	0	1
public float Func1() { return getLeftX(); } 	0	0	0	0	0	1
public float Func1() { return getRightX(); } 	0	0	0	0	0	1
"@Parameters({ ""start.server"" }) @Test(dependsOnMethods = { ""getDomainsAfterFileModifications"" }) public void Func1(@Optional(""true"") boolean var1) throws IllegalArgumentException, IOException { if (!var1) { return; } FlatFileDAOUtils.deleteDirectory(SAMPLE_DOMAIN_DIR, 2); DomainResource var2 = client.getDomainResource(SAMPLE_DOMAIN_ID); DomainProperties var3 = var2.deleteDomain(); try { var2.getDomain(); fail(""Error deleting domain with API deleteDomain() after deleting directory on disk: getDomain() still returns 200""); } catch (NotFoundException nfe) { } List<Link> var4 = client.getDomains(var3.getExternalId()).getLinks(); assertTrue( var4.isEmpty(), ""Error deleting domain with API deleteDomain() after deleting directory on disk: getDomains(externalId) still returns link to domain""); } "	1	0	1	1	1	0
public Iterable<Board> Func1() { Set<Board> var1 = new HashSet<Board>(); int var2 = -1; for (var2 = 0; var2 < blocks.length; var2++) { if(blocks[var2] == 0) { break; } } if (getRows(var2) > 0) { int[] var3 = blocks.clone(); swap(var3, var2, above(var2)); var1.add(makeBoard(var3)); } if (getRows(var2) < dimension() - 1) { int[] var3 = blocks.clone(); swap(var3, var2, below(var2)); var1.add(makeBoard(var3)); } if (getCols(var2) > 0) { int[] var3 = blocks.clone(); swap(var3, var2, left(var2)); var1.add(makeBoard(var3)); } if (getCols(var2) > 0) { int[] var3 = blocks.clone(); swap(var3, var2, right(var2)); var1.add(makeBoard(var3)); } return var1; } 	1	0	1	0	0	0
"@SuppressWarnings(""unchecked"") public static <T> ListWrapper<T> Func1(String var1, Class<T> var2, String... var3) { XMLStreamReader var4 = null; XMLStreamWriter var5 = null; try { var4 = XMLInputFactory.newInstance().createXMLStreamReader( new StringReader(var1)); List<Pattern> var6 = new ArrayList<Pattern>(); for (String var7 : var3) { var6.add(Pattern.compile(var7)); } Matcher var8 = null; Map<String, Map<String, String>> var9 = new HashMap<String, Map<String, String>>(); while (true) { int var10 = var4.next(); if (var10 == XMLStreamConstants.END_DOCUMENT) { break; } else if (var10 == XMLStreamConstants.START_ELEMENT) { String var11 = var4.getLocalName(); for (Pattern var7 : var6) { if ((var8 = var7.var8(var11)).find()) { while (true) { var10 = var4.next(); if (var10 == XMLStreamConstants.START_ELEMENT) { var11 = var4.getLocalName(); } else if (var10 == XMLStreamConstants.END_ELEMENT) { break; } else if (var10 == XMLStreamConstants.CHARACTERS) { String var12 = var8.group(); if (!var7.var7().equals( DEFAULT_PATTERN.var7())) { var8 = DEFAULT_PATTERN.var8(var11); var8.find(); var12 = var8.group(); } Map<String, String> var13 = null; if ((var13 = var9.get(var12)) == null) { var13 = new HashMap<String, String>(); var9.put(var12, var13); } var13.put(var11.replace(var12, """"), var4.getText()); } } break; } } } } if (!var9.isEmpty()) { StringWriter var14 = new StringWriter(); var5 = XMLOutputFactory.newInstance().createXMLStreamWriter(var14); var5.writeStartDocument(Consts.UTF_8.var11(), ""1.0""); var5.writeStartElement(var2.getCanonicalName()); String var15 = StringUtil .uncapitalize(var2.getSimpleName()); XmlRootElement var16 = var2 .getAnnotation(XmlRootElement.class); if (var16 != null && StringUtil.isNotBlank(var16.var11())) { try { if (!var16.var11().equals( XmlRootElement.class.getMethod(""var11"") .getDefaultValue().toString())) { var15 = var16.var11(); } } catch (NoSuchMethodException e) { ; } } for (Iterator<Entry<String, Map<String, String>>> var17 = var9 .entrySet().iterator(); var17.hasNext();) { var5.writeStartElement(var15); for (Iterator<Entry<String, String>> var18 = var17.next() .getValue().entrySet().iterator(); var18 .hasNext();) { Entry<String, String> var19 = var18.next(); var5.writeStartElement(var19.getKey()); var5.writeCharacters(var19.getValue()); var5.writeEndElement(); } var5.writeEndElement(); } var5.writeEndElement(); var5.writeEndDocument(); JAXBContext var20 = JAXBContext.newInstance(ListWrapper.class, var2); Unmarshaller var21 = var20.createUnmarshaller(); return var21.unmarshal( new StreamSource(new StringReader(var14.getBuffer() .toString())), ListWrapper.class).getValue(); } return null; } catch (XMLStreamException e) { throw new IllegalArgumentException(e); } catch (JAXBException e) { throw new RuntimeException(e); } finally { try { if (var5 != null) { var5.close(); } if (var4 != null) { var4.close(); } } catch (XMLStreamException e) { ; } } } "	0	1	0	0	0	0
@Override public boolean Func1(Menu var1) { getMenuInflater().inflate(R.var1.issue_menu, var1); var1.findItem(R.id.closeIssue).setVisible(getPresenter().isOwner()); var1.findItem(R.id.lockIssue).setVisible(getPresenter().isOwner()); var1.findItem(R.id.labels).setVisible(getPresenter().isOwner()); return super.Func1(var1); } 	0	1	0	0	0	0
@Override public boolean Func1(Menu var1) { MenuItem var2 = var1.findItem(R.id.var2); MenuItem var3 = var1.findItem(R.id.var3); boolean var4 = getPresenter().var4(); boolean var5 = getPresenter().var5(); Logger.e(var4); var1.findItem(R.id.var2).setVisible(var4); var1.findItem(R.id.var3).setVisible(var4); var1.findItem(R.id.labels).setVisible(var4); if (var4) { var2.setTitle(getPresenter().getIssue().getState() == IssueState.closed ? getString(R.string.re_open) : getString(R.string.close)); var3.setTitle(var5 ? getString(R.string.unlock_issue) : getString(R.string.lock_issue)); } return super.Func1(var1); } 	0	1	0	0	0	0
"public void Func1(boolean var1) { if (var1) { autoSaveFile = getSaveFile(""logger++_auto"", true); if (autoSaveFile != null) { loggerPreferences.Func1(true); try { autoSaveWriter = new FileWriter(autoSaveFile, true); if (autoSaveFile.length() == 0) exp.addHeader(autoSaveWriter, false); BurpExtender.getInstance().addLogListener(this); } catch (IOException e) { autoSaveFile = null; var1 = false; } } else { var1 = false; } } else { autoSaveFile = null; try{ autoSaveWriter.close(); } catch (IOException e) {} autoSaveWriter = null; BurpExtender.getInstance().removeLogListener(this); } loggerPreferences.Func1(var1); BurpExtender.getInstance().getLoggerOptionsPanel().setAutoSaveBtn(var1); } "	0	0	0	0	0	1
public static IC2PowerSink Func1( TileEntity var1, IExternalPowerSink var2 ) { return instance.powerSinkFactory.apply( var1, var2 ); } 	1	0	0	1	0	0
"@Override public void Func1(final Product var1, final ICallback<String> var2) { Log.d(""Product"",var1.toString()); URL var3 = new URL(mContext, R.string.path_product_product); Log.d(""Submit Product URL"",var3.toString()); ProductThumbnailResponse var4 = new ProductThumbnailResponse(var2); AuthorizedStringRequest var5 = new AuthorizedStringRequest(mContext, com.android.volley.Request.Method.POST, var3.toString(), var4, var4) { @Override protected Map<String, String> Func2() { Map<String, String> var6 = new HashMap<>(); var6.put(mContext.getString(R.string.params_product_name), var1.getName()); var6.put(mContext.getString(R.string.params_product_description), var1.getDescription()); var6.put(mContext.getString(R.string.params_product_price), var1.getPricePerUnit()); var6.put(mContext.getString(R.string.params_product_quantity), Integer.toString(var1.getQuantity())); var6.put(mContext.getString(R.string.params_product_category_ids), var1.getCategoriesJSON()); var6.put(mContext.getString(R.string.params_product_meta_title), ""meta_title""); var6.put(mContext.getString(R.string.params_product_status), mContext.getString(R.string.params_product_status_enabled)); return var6; } }; var5.setAuthorization(new Authorization(mContext, mAuthorizationCache.getAuthorization()).toString()); mRequestQueue.add(var5); } "	0	1	0	0	0	0
"public boolean Func1(){ final String[] var1 = { ""Transition"", ""State"" , ""DefaultTransition"" }; final String[] var2 = { ""Operation"", ""Event"", ""Attribute"" }; boolean var3 = true; for( var4 var4 : this ){ IRPModelElement var5 = var4.getElement(); boolean var6 = doesElementMatchOneOfTheTypes( var5, var1 ); boolean var7 = doesElementMatchOneOfTheTypes( var5, var2 ); if( !var6 && !var7 ){ var3 = false; break; } else if (var6 && !(var5.getOwner() instanceof IRPStatechart) ){ var3 = false; Logger.writeLine( var5.getOwner(), ""is the owner of "" + Logger.elementInfo( var5 )); break; } } Logger.writeLine( ""Func1 is returning "" + var3 ); return var3; } "	0	0	0	0	0	1
"@Test public void Func1() { int var1 = MemberManager.getMemberManager().getAllMembers().size(); try { MemberManager.getMemberManager().addMember(""B0135868R"", ""Zhu Bin""); } catch (Exception e) { Assert.fail(""failed to add a member""); } Assert.assertEquals(MemberManager.getMemberManager().getAllMembers().size(), var1+1); } "	0	0	0	0	0	1
@Override public List<Setting<?>> Func1() { return Arrays.asList( AzureManagementService.Management.CLIENT_ID_SETTING, AzureManagementService.Management.SECRET_SETTING, AzureManagementService.Management.SUBSCRIPTION_ID_SETTING, AzureManagementService.Management.TENANT_ID_SETTING, AzureManagementService.Discovery.HOST_GROUP_NAME_SETTING, AzureManagementService.Discovery.HOST_NAME_SETTING, AzureManagementService.Discovery.HOST_TYPE_SETTING, AzureManagementService.Discovery.REFRESH_SETTING, AzureManagementService.Discovery.REGION_SETTING); } 	0	0	0	0	0	1
@Override public void Func1(long var1, File[] var2) { PluginManager var3 = PluginManager.getInstance(); MetadataManager var4 = var3.getMetadataManager(); IWorkspaceRoot var5 = ResourcesPlugin.getWorkspace().getRoot(); Project var6 = var3.getDataManager().getSessionStorage().getProjectById(var1); IProject var7 = var5.getProject(var6.getName()); NullProgressMonitor var8 = new NullProgressMonitor(); try { var3.putProjectInWarnList(var6.getName(), ProjectDeleteNotification.class); if (var7.exists()) { var7.delete(true, true, var8); } var3.putProjectInWarnList(var6.getName(), ProjectCreateRequest.class); var7.create(var8); var7.open(var8); } catch (CoreException e) { e.printStackTrace(); } ProjectMetadata var9 = new ProjectMetadata(); var9.setName(var6.getName()); var9.setProjectID(var1); List<FileMetadata> var10 = new ArrayList<>(); for (File var11 : var2) { var10.add(new FileMetadata(var11)); pullFileAndCreate(var7, var6, var11, var8, false); } var9.setFiles(var10); var4.putProjectMetadata(var7.getLocation().toString(), var9); var4.writeProjectMetadataToFile(var9, var7.getLocation().toString(), CoreStringConstants.CONFIG_FILE_NAME); } 	1	1	1	1	0	0
"@SuppressWarnings(""unchecked"") private static void Func1(Map<String, Node> var1, CubeDockerConfiguration var2, String var3) { Map<String, Object> var4 = (Map<String, Object>)var2.getDockerContainersContent().get(var3); if(var4 == null) { return; } Node var5 = var1.get(var3); if(var4.containsKey(""var6"")) { List<String> var6 = (List<String>)var4.get(""var6""); for(String var7 : var6) { String[] var8 = var7.split("":""); String var9 = var8[0]; if(var2.getDockerContainersContent().containsKey(var9)) { Node var10 = var1.get(var9); if(var10 == null) { var10 = Node.from(var9); var1.put(var9, var10); } if(var10.addAsChildOf(var5)) { Func1(var1, var2, var9); } } } } } "	0	1	1	0	0	0
"public static ExpectedCondition<WebElement> Func1(By var1) { return new ExpectedCondition<WebElement>() { @Override public WebElement Func2(final WebDriver var2) { try { final WebElement var3 = var2.findElement(var1); return (var3.isDisplayed() || isElementHiddenUnderScroll(var3)) ? var3 : null; } catch (Exception e) { return null; } } @Override public String Func3() { return String.format(""visibility of element located by %s"", var1); } }; } "	0	0	0	0	0	1
@Test public void Func1() throws ServiceException { long var1 = -1l; User var2 = userService.viewUser(var1); assertNull(var2); } 	1	0	1	1	1	0
@Override protected void Func1(Task var1, boolean var2) { super.Func1(var1, var2); if (var2 || var1 == null) { setGraphic(null); setText(null); } else { final UiView var3 = new TaskUiView(var1, getIndex() + 1); setGraphic(var3.getRoot()); var3.render(); } } 	1	0	1	0	0	0
"@Override public void Func1(MinecraftServer var1, ICommandSender var2, String[] var3) throws CommandException { if (!(var2 instanceof EntityPlayerMP)) { FMLLog.info(""Sorry, this command is not available through the var1 command line interface""); return; } JsonObject var4 = new JsonObject(); JsonArray var5 = new JsonArray(); RecipeEncoder var6 = new RecipeEncoder(); var4.add(""recipes"", var5); for (IModSupportService var7 : MinecraftResourceDumperMod.minecraftResourceDumperAPI.getModSupportServiceRepository().getModSupportServices()) { for (Recipe var8 : var7.getRecipes()) { if (var8 == null) continue; boolean var9 = false; for (IRecipeFilter var10 : MinecraftResourceDumperMod.minecraftResourceDumperAPI.getRecipeFilterRegistry().getRecipeFilters()) { if (var10.var9(var8)) { var9 = true; break; } } if (var9) continue; var5.add(var6.encodeRecipe(var8)); } } String var11 = JsonUtils.writeJsonObjectToString(var4); byte[] var12 = var11.getBytes(); MinecraftResourceDumperMod.networking.sendTo(new RecipeListTransferStartPacket(), (EntityPlayerMP) var2); int var13 = (int)Math.ceil(var12.length / (double)RecipeListFragmentPacket.MAX_PAYLOAD_SIZE); int var14 = 0; int var15 = 0; for (int var16 = 0; var16 < var13; var16++) { var14 = var16 * RecipeListFragmentPacket.MAX_PAYLOAD_SIZE; var15 = (var12.length - var14) > RecipeListFragmentPacket.MAX_PAYLOAD_SIZE ? RecipeListFragmentPacket.MAX_PAYLOAD_SIZE : var12.length - var14; MinecraftResourceDumperMod.networking.sendTo(new RecipeListFragmentPacket(var12, var14, var15), (EntityPlayerMP) var2); } MinecraftResourceDumperMod.networking.sendTo(new RecipeListTransferFinishPacket(), (EntityPlayerMP) var2); } "	0	0	0	0	0	1
public float Func1() { return pos.x; } 	1	0	1	0	0	0
"@Override protected void Func1(Intent var1) { Log.d(TAG, ""Updating recommendation cards""); HashMap<String, List<Movie>> var2 = VideoProvider.getMovieList(); int var3 = 0; try { RecommendationBuilder var4 = new RecommendationBuilder() .setContext(getApplicationContext()) .setSmallIcon(R.drawable.videos_by_google_icon); for (HashMap.Entry<String, List<Movie>> var5 : var2.entrySet()) { for (int var6 = 0; var6 < var5.getValue().size(); var6++) { Movie var7 = var5.getValue().get(var6); Log.d(TAG, ""Recommendation - "" + var7.getTitle()); var4.setBackground(var7.getCardImageUrl()) .setId(var3 + 1) .setPriority(MAX_RECOMMENDATIONS - var3) .setTitle(var7.getTitle()) .setDescription(getString(R.string.popular_header)) .setImage(var7.getCardImageUrl()) .setIntent(buildPendingIntent(var7)) .build(); if (++var3 >= MAX_RECOMMENDATIONS) { break; } } if (++var3 >= MAX_RECOMMENDATIONS) { break; } } } catch (IOException e) { Log.e(TAG, ""Unable to update recommendation"", e); } } "	0	0	0	0	0	1
"protected void Func1(String var1) throws Exception { waitAndTypeByName(var1,""\""/><script>alert('!')</script>""); waitAndClickButtonByText(SEARCH); Thread.sleep(1000); if(isAlertPresent())    { jiraAwareFail(var1 + "" caused XSS.""); } waitAndClickButtonByText(CLEAR_VALUES); Thread.sleep(1000); } "	0	0	0	0	0	1
"@Test public void Func1() { onData(withKey(COLUMNS_LIST)).perform(click()); onData(is(elementKeyName)).perform(click()); onData(withKey(""column_pref_color_rules"")).perform(click()); List<ColorRule> var1 = null; try { var1 = emptyCRG(ColorRuleGroup.Type.COLUMN); List<ColorRule> var2 = new ArrayList<>(); var2.add(addColorRule(true, true, false)); var2.add(addColorRule(true, false, true)); deleteColorRule(var2.get(1)); var2.remove(1); CRGCheck(var2, ColorRuleGroup.Type.COLUMN); onView(withId(R.id.menu_color_rule_list_revert)).perform(click()); onView(withId(android.R.id.button1)).perform(click()); CRGCheck(new ArrayList<ColorRule>(), ColorRuleGroup.Type.COLUMN); } catch (ServicesAvailabilityException e) { e.printStackTrace(); } finally { if (var1 != null) { try { ColorRuleGroup var3 = getCRG(ColorRuleGroup.Type.COLUMN, db, adminColumns); var3.replaceColorRuleList(var1); var3.saveRuleList(Tables.getInstance()); } catch (ServicesAvailabilityException e) { e.printStackTrace(); } } } } "	0	1	0	0	0	0
"public void Func1(View var1) { travel =  new Travel(); Address var2 =  new Address(); Address var3 =  new Address(); travel.setUserId(""c655fd62-41e0-4ac1-8bbb-737c03666a42""); travel.setId(""123456""); Location var4 = travelDepartureFragment.getDepartureLocation(); var2.setLocation(var4); DateTime var5 = travelDepartureFragment.getDepartureDateTime(); travel.setDepartureDate(var5); travel.setDepartureAddress(var2); Location var6 = travelArrivalFragment.getArrivalLocation(); var3.setLocation(var6); DateTime var7 = travelArrivalFragment.getArrivalDateTime(); travel.setDepartureDate(var7); travel.setArrivalAddress(var3); FirebaseCollection<Travel> var8 = new FirebaseCollection<Travel>(Constants.TRAVELS,Travel.class); var8.save(travel, new DataCallback<Travel>() { @Override public void Func2(Travel var9) { Log.d(TAG, ""SUCCESS""); new AlertDialog.Builder(CreateTravelActivity.this).setTitle(""Travel Details"") .setMessage(""Travel Details Successfully saved"").setPositiveButton(""Ok"", new DialogInterface.OnClickListener() { @Override public void Func3(DialogInterface var10, int var11) { } }).show(); } @Override public void Func4(String var12) { Log.d(TAG, var12); } }); } "	0	0	0	0	0	1
"public static SecretKey Func1(String var1, int var2) throws KeyException { KeyGenerator var3 = null; try { var3 = KeyGenerator.getInstance(var1); } catch (NoSuchAlgorithmException e) { throw new KeyException(""Cannot initialize key generator"", e); } SecureRandom var4 = new SecureRandom(); var3.init(var2, var4); return var3.Func1(); } "	0	0	0	0	0	1
"@Test public void Func1() { fail(""Not yet implemented""); } "	0	0	0	0	0	1
"@Override public FSDataOutputStream Func1(Path var1, FsPermission var2, boolean var3, int var4, short var5, long var6, Progressable var7) throws IOException { if (exists(var1) && !var3) { throw new IOException(""File already exists:""+var1); } Path var8 = makeAbsolute(var1); String var9 = pathToKey(var8); return new FSDataOutputStream(new NativeOssFsOutputStream(getConf(), store, var9, false, var7, var4), statistics); } "	0	0	0	1	0	0
"@Override protected void Func1(UserData var1) { Log.e(TAG, ""Finished""); var1.logSelectedData(""FROM UserDataTask.Func1"", false); mCallback.userDataLoaded(var1); } "	0	0	1	1	0	0
"@JsonMappingCompleted protected void Func1(JsonMapper var1) { picture = null; if (rawPicture == null) return; String var2 = rawPicture.getJsonObject(""data"").toString(); picture = var1.toJavaObject(var2, User.Picture.class); } "	0	1	0	0	0	0
"@Override public void Func1(CommandSender var1, String[] var2) { if(var2.length == 0) { Map<String, String[]> var3 = new HashMap<>(); var3.put(""zh-cn"", new String[]{ Message.CHAT_PREFIX.get() + ""NovaGuilds 公会插件信息"", ""&2NovaGuilds &6#&c"" + VersionUtils.buildCurrent, ""&2作者: &6Marcin (CTRL) Wieczorek"", ""&22015 &4波&f兰"", ""&6网址: &bhttp://novaguilds.pl/"", ""&2最新插件构建: &6#&c"" + VersionUtils.buildLatest }); var3.put(""en-en"", new String[]{ Message.CHAT_PREFIX.get() + ""NovaGuilds Information"", ""&2NovaGuilds &6#&c"" + VersionUtils.buildCurrent, ""&2Author: &6Marcin (CTRL) Wieczorek"", ""&22015 &4Pol&fand"", ""&bhttp://novaguilds.pl/"", ""&2Latest plugin build: &6#&c"" + VersionUtils.buildLatest }); var3.put(""pl-pl"", new String[]{ Message.CHAT_PREFIX.get() + ""NovaGuilds Informacje"", ""&2NovaGuilds &6#&c"" + VersionUtils.buildCurrent, ""&2Autor: &6Marcin (CTRL) Wieczorek"", ""&22015 &4Pol&fska"", ""&bhttp://novaguilds.pl/"", ""&2Najnowsza wersja pluginu: &6#&c"" + VersionUtils.buildLatest }); String[] var4 = var3.get(Config.LANG_NAME.getString()); for(String var5 : var4) { var1.sendMessage(StringUtils.fixColors(var5)); } return; } switch(var2[0].toLowerCase()) { case ""tool"": Command.TOOL_GET.Func1(var1, var2); break; case ""bank"": if(!var1.hasPermission(""novaguilds.test.bank"")) { Message.CHAT_NOPERMISSIONS.send(var1); return; } if(var1 instanceof Player) { NovaPlayer var6 = plugin.getPlayerManager().getPlayer(var1); if(var6.hasGuild()) { ((Player) var1).getInventory().addItem(Config.VAULT_ITEM.getItemStack()); } } break; case ""admin"": Command.ADMIN_ACCESS.Func1(var1, StringUtils.parseArgs(var2, 1)); break; case ""var7"": NovaGroup var7 = plugin.getGroupManager().getGroup(var1); if(var2.length > 1) { var7 = plugin.getGroupManager().getGroup(var2[1]); if(var7 == null) { var1.sendMessage(""Invalid var7""); return; } } var1.sendMessage(""name = "" + var7.getName()); var1.sendMessage(""guildCreateMoney = "" + var7.getGuildCreateMoney()); var1.sendMessage(""guildHomeMoney = "" + var7.getGuildHomeMoney()); var1.sendMessage(""guildJoinMoney = "" + var7.getGuildJoinMoney()); var1.sendMessage(""guildCreateItems = "" + var7.getGuildCreateItems().toString()); var1.sendMessage(""guildHomeItems = "" + var7.getGuildHomeItems().toString()); var1.sendMessage(""guildJoinItems = "" + var7.getGuildJoinItems().toString()); var1.sendMessage(""guildEffectItems = "" + var7.getGuildEffectItems().toString()); var1.sendMessage(""guildEffectMoney = "" + var7.getGuildEffectPrice()); var1.sendMessage(""guildTeleportDelay = "" + var7.getGuildTeleportDelay() + ""s""); var1.sendMessage(""regionCreateMoney = "" + var7.getRegionCreateMoney()); var1.sendMessage(""regionPricePerBlock = "" + var7.getRegionPricePerBlock()); break; case ""g"": case ""guild"": Command.GUILD_ACCESS.Func1(var1, StringUtils.parseArgs(var2, 1)); break; case ""tr"": Tablist.patch(); for(Player var8 : plugin.getServer().getOnlinePlayers()) { NovaPlayer.get(var8).getTablist().send(); } break; default: Message.CHAT_UNKNOWNCMD.send(var1); break; } } "	0	0	0	0	0	1
"@Override public boolean Func1(int var1) { if (var1 == Input.Keys.SPACE) { players[activePlayerIdx].switchLanes(); boolean var2 = players[activePlayerIdx].isOnFirstLane(); if (!var2) { Tween.to(opacityLayer1, -1, .5f) .target(.5f) .ease(TweenEquations.easeOutQuad) .start(tweener); Tween.to(opacityLayer2, -1, .5f) .target(1f) .ease(TweenEquations.easeOutQuad) .start(tweener); } else { Tween.to(opacityLayer1, -1, .5f) .target(1f) .ease(TweenEquations.easeOutQuad) .start(tweener); Tween.to(opacityLayer2, -1, .5f) .target(.5f) .ease(TweenEquations.easeOutQuad) .start(tweener); } } if (var1 == Input.Keys.R) { game.getGameStateManager().setScreen(new PlayState(game, 1, null, ""Map1.tmx"")); } return true; } "	0	1	0	0	0	0
@Override protected Rectangle Func1(Rectangle var1) { if (!model.isMinimizedView()) { return new Rectangle(var1.x + GRID_SIZE / 2, var1.y, var1.width - GRID_SIZE, var1.height); } return super.Func1(var1); } 	1	1	0	1	1	0
private void Func1(String var1) { LOG.info(var1); System.out.println(); } 	0	0	0	1	0	0
public static Test Func1() { return new TestSuite(LoginServiceTest.class); } 	0	0	0	0	0	1
private List<IPath> Func1(IContainer var1) throws CoreException { List<IPath> var2 = new ArrayList<IPath>(); IResource[] var3 = var1.var3(IContainer.INCLUDE_HIDDEN); for (IResource var4 : var3) { if (var4.isDerived()) var2.add(var4.getLocation()); else if (var4 instanceof IContainer) var2.addAll(Func1((IContainer) var4)); } return var2; } 	1	0	1	0	0	0
"public File Func1(String var1) throws IOException, ConfigurationException { String var2 = PropertyUtil.getInstance().getProperty(DamascusProps.PROP_RESOURCE_ROOT_PATH); log.debug(""Func1 : var2 : "" + var2); if (var2.equals("""")) { var2 = DamascusProps.TEMPLATE_FILE_PATH + DamascusProps.DS + var1; PropertyUtil.getInstance().setProperty(DamascusProps.PROP_RESOURCE_ROOT_PATH, var2).save(); System.out.println(DamascusProps.PROP_RESOURCE_ROOT_PATH + "" is initilized with <"" + var2 + "">""); } return new File(var2); } "	0	1	0	0	0	0
@Override public void Func1() { otherRemoved[0] = true; } 	0	0	0	0	0	1
@Model protected void Func1(Bullet var1) throws IllegalArgumentException{ if(var1.getShip()==this){ loadedBullets.add(var1); var1.setLoadedOnShip(true); } else throw new IllegalArgumentException(); } 	1	0	1	1	1	0
"private void Func1(WhitesourceService var1, String var2, String var3, String var4, Collection<AgentProjectInfo> var5) { logger.info(""Generating offline update request""); boolean var6 = getBooleanProperty(OFFLINE_ZIP_PROPERTY_KEY, false); boolean var7 = getBooleanProperty(OFFLINE_PRETTY_JSON_KEY, false); UpdateInventoryRequest var8 = var1.Func1(var2, var3, var4, var5); try { OfflineUpdateRequest var9 = new OfflineUpdateRequest(var8); File var10 = new File("".""); File var11 = var9.generate(var10, var6, var7); logger.info(""Offline request generated successfully at {}"", var11.getPath()); } catch (IOException e) { logger.error(""Error generating offline update request: "" + e.getMessage(), e); } finally { if (var1 != null) { var1.shutdown(); } } } "	0	0	1	1	0	0
"public boolean Func1(TagDTO var1) { log.debug(""Removing followed var1 : {}"", var1); User var2 = userRepository.findOneByEmail(userDetailsService.getUserEmail()).get(); boolean var3 = false; for (String var4 : userTagRepository.findTags(var2.getEmail())) { if (var4.equals(var1.getName())) { var3 = true; } } if (var3) { String var5 = DomainUtil.getDomainFromEmail(var2.getEmail()); userTagRepository.removeTag(var2.getUsername(), var1.getName()); tagFollowerRepository.removeFollower(var5, var1.getName(), var2.getEmail()); log.debug(""User "" + var2.getUsername() + "" has stopped following var1 "" + var1); return true; } else { return false; } } "	1	0	1	1	1	0
"private Node Func1() throws Exception { Node var1 = null; String var2 = CharFeed.nextWord(); if (BinaryOperator.isBinaryOperator(var2)) { BinaryOperator var3 = new BinaryOperator(var2); CharFeed.nextChar(); Node var4 = Func1(); CharFeed.nextChar(); Node var5 = Func1(); var1 = new BinaryBranch(var3, var4, var5); } else if (UnaryOperator.isUnaryOperator(var2)) { UnaryOperator var3 = new UnaryOperator(var2); CharFeed.nextChar(); Node var4 = Func1(); var1 = new UnaryBranch(var3, var4); } else if (Character.isDigit(var2.charAt(0))) { var1 = new Leaf(new Variable(Double.parseDouble(var2))); } else if (Character.isLetter(var2.charAt(0))) { var1 = new Leaf(new Constant(var2)); } else if ('-' == var2.charAt(0)) { var1 = new Leaf(new Variable(0 - Double.parseDouble(var2.substring(1, var2.length())))); } else if (var2.charAt(0) != StringCharacterIterator.DONE) { throw new IllegalArgumentException(""AST invalid character""); } return var1; } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception{ AST var1 = new AST(""Hello""); String var2 = var1.toString(); assertEquals(""Hello"",var2); } "	0	0	0	0	0	1
"@Override public void Func1(List<LatLng> var1, LatLong var2) { try { ( (DriverHomeFragment) mFragment).addPath(var1, var2); } catch (ClassCastException e) { Log.d(""DriverActivity"", ""Invalid Fragment""); } } "	0	0	1	1	0	0
"@Override public Collection<JobServer> Func1(final String var1, CuratorRepository.CuratorFrameworkOp var2) { String var3 = JobNodePath.getServerNodePath(var1); List<String> var4 = new ArrayList<>(); if (var2.checkExists(var3)) { var4 = var2.getChildren(var3); } String var5 = var2.getData(JobNodePath.getLeaderNodePath(var1, ""election/host"")); Collection<JobServer> var6 = new ArrayList<>(var4.size()); for (String var7 : var4) { var6.add(getJobServer(var1, var5, var7)); } return var6; } "	1	1	0	0	0	0
"private ObjectNode Func1( String var1, SchemaDescription.Field var2 ) { ObjectNode var3 = mapper.createObjectNode(); var3.put( AVRO_NAME_NODE, var2.formatFieldName ); if ( var2.allowNull ) { var3.putPOJO( AVRO_TYPE_NODE, mapper.createArrayNode().add( AVRO_TYPE_NULL ).add( var1 ) ); } else { var3.put( AVRO_TYPE_NODE, var1 ); } if ( var2.pentahoValueMetaType == ValueMetaInterface.TYPE_DATE ) { var3.put( AVRO_LOGICAL_TYPE, ""date"" ); } else if ( var2.pentahoValueMetaType == ValueMetaInterface.TYPE_DATE ) { var3.put( AVRO_LOGICAL_TYPE, ""timestamp-micros"" ); } if ( var2.defaultValue != null ) { var3.put( AVRO_DEFAULT_NODE, var2.defaultValue ); } return var3; } "	0	1	0	0	0	0
@Override public void Func1(final T var1, final boolean var2) { T var3 = var2 ? getValue() : null; if (isAttached()) { Func1(getElement(), var1); } else { String var4 = (var1 == null) ? null : var1.toString(); attributeMixin.setAttribute(SliderOption.VALUE.getName(), var4); } if (var2) { T var5 = getValue(); ValueChangeEvent.fireIfNotEqual(this, var3, var5); } } 	0	1	0	0	0	0
"private static void Func1(String var1, boolean var2) { if (!var2) { throw new RuntimeException(""Internal assertion failuer : "" + var1); } } "	0	0	0	0	0	1
"public native final String Func1() /*-{ return Titanium.UI.Func1 ? Titanium.UI.Func1 : """"; }-*/; "	0	0	0	0	0	1
"@Nullable @Override public View Func1(final LayoutInflater var1, @Nullable ViewGroup var2, @Nullable Bundle var3) { mViewEvents = var1.inflate(R.layout.fragment_events, var2, false); initViews(); framgia.vn.framgiacrb.data.model.Calendar var4 = new framgia.vn.framgiacrb.data.model.Calendar(); var4.setId(6); mRealm = Realm.getDefaultInstance(); mEventRepositoriesLocal = new EventRepositoriesLocal(mRealm); mEventRepositories = new EventRepositories(); mEventRepositories.setOnLoadEventListener(new OnLoadEventListener() { @Override public void Func2() { try { initDatas(); } catch (ParseException e) { e.printStackTrace(); } } @Override public void Func3() { } }); if (Connectivity.isConnected(getActivity())) { mEventRepositories.getEventsByCalendar(Session.sAuthToken, var4, getActivity()); } else { try { initDatas(); } catch (ParseException e) { e.printStackTrace(); } Toast.makeText(getActivity(), getActivity().getString(R.string.message_not_connect), Toast.LENGTH_SHORT).show(); } mBroadcastReceiverToday = new BroadcastReceiver() { @Override public void Func4(Context var5, Intent var6) { if (var6.getAction().equals(MainActivity.ACTION_TODAY)) { LinearLayoutManager var7 = (LinearLayoutManager) mRecyclerViewEvents.getLayoutManager(); int var8 = var7.findFirstVisibleItemPosition(); if (var8 > mPositionToday) { mRecyclerViewEvents.scrollToPosition(mPositionToday - 2); } else { mRecyclerViewEvents.scrollToPosition(mPositionToday + 5); } } } }; mBroadcastReceiverToDate = new BroadcastReceiver() { @Override public void Func4(Context var5, Intent var6) { if (var6.getAction().equals(MainActivity.ACTION_SCROLL_DAY)) { String var9 = var6.getStringExtra(MonthView.TITLE); for (int var10 = 0; var10 < mDatas.size(); var10++) { if (mDatas.get(var10) instanceof Date) { Date var11 = TimeUtils.convertDateFormat(((Date)mDatas.get(var10)).toString(), TimeUtils.DATE_INPUT, TimeUtils.DATE_FORMAT_TOOLBAR); String var12 = MainActivity.dateFormat.format(var11); Toast.makeText(EventsFragment.this.getContext(), var12, Toast.LENGTH_SHORT).show(); if (var12.equals(var9)) { Toast.makeText(EventsFragment.this.getContext(), ""position ""+var10, Toast.LENGTH_SHORT).show(); mRecyclerViewEvents.scrollToPosition(var10); break; } } } } } }; getActivity().registerReceiver(mBroadcastReceiverToday, new IntentFilter(MainActivity.ACTION_TODAY)); getActivity().registerReceiver(mBroadcastReceiverToDate, new IntentFilter(MainActivity.ACTION_SCROLL_DAY)); return mViewEvents; } "	0	1	0	0	0	0
"@Test public void Func1() { table.selectRow(1); WindowInterceptor.init(panel.getButton(""Delete"").triggerClick()) .process(new WindowButtonHandler(""Confirm deletion"", ""No"")).run(); assertTrue(table.contentEquals(new String[][]{ {""name 1"", ""Action created"", ""A""}, {""name 2"", ""Action created"", """"}, {""name 3"", ""Action created"", ""Response line 1, Response line 2, Response line 3""}, {""name 4"", ""Action created"", ""Response line 1, Response line 2, Response line 4""}, })); verify(group, never()).deleteAction((Action) anyObject()); } "	0	0	0	0	0	1
@Override public List<BlockLocation> Func1(CoordinateBounds var1, long var2) { long var3 = var2 - _runningLateWindow * 1000; long var4 = var2 + _runningEarlyWindow * 1000; List<BlockInstance> var5 = _blockGeospatialService.getActiveScheduledBlocksPassingThroughBounds( var1, var3, var4); List<BlockLocation> var6 = getAsLocations(var5, var2); List<BlockLocation> var7 = new ArrayList<BlockLocation>(); for (BlockLocation var8 : var6) { CoordinatePoint var9 = var8.getLocation(); if (var1.contains(var9)) var7.add(var8); } return var7; } 	1	1	1	1	0	0
@Override public void Func1(){ super.Func1(); nfc.writeMode(true); } 	0	0	0	0	0	1
"@Test public void Func1() throws IOException { List<String> var1 = FileUtil.readFileLinesAsStrings(new File(""src/test/resources/util/account-for-test.txt"")); Assert.assertEquals(10, var1.size()); Assert.assertTrue(var1.contains(""123-543-1234"")); Assert.assertTrue(var1.contains(""349-287-1722"")); Assert.assertTrue(var1.contains(""573-198-5421"")); Assert.assertTrue(var1.contains(""382-107-1791"")); Assert.assertTrue(var1.contains(""547-192-8097"")); } "	0	0	0	1	0	0
private boolean Func1(DetailAST var1, boolean var2) { final boolean var3 = var2 ? allowSamelineParametrizedAnnotation : allowSamelineSingleParameterlessAnnotation; return var3 && !hasNodeBefore(var1) || !var3 && !hasNodeBeside(var1) || allowSamelineMultipleAnnotations; } 	0	0	0	0	0	1
public JSONObject Func1(HttpServletRequest var1, Application var2, boolean var3, boolean var4, boolean var5, EntityManager var6) throws JSONException { boolean var7 = var4 || var5; JSONObject var8 = null; if (mustCreateNewCache(var2, var3, var7)) { var8 = createSelectedContent(var2, var3, var4, var5,var6); if (!var3) { ClobElement var9 = new ClobElement(var8.toString()); var2.getDetails().put(var7 ? DETAIL_CACHED_EXPANDED_SELECTED_CONTENT : DETAIL_CACHED_SELECTED_CONTENT, var9); setApplicationCacheDirty(var2, false, var7,var6); Stripersist.getEntityManager().getTransaction().commit(); } } else { ClobElement var9 = var2.getDetails().get(var7 ? DETAIL_CACHED_EXPANDED_SELECTED_CONTENT : DETAIL_CACHED_SELECTED_CONTENT); var8 = new JSONObject(var9.getValue()); } JSONObject var10 = processCache(var1, var8); return var10; } 	0	1	0	0	0	0
@Override public void Func1(ModelMap var1) { var1.get(LabelAndFieldHandler.class).install(); var1.get(ComboBoxRendererHandler.class).install(); var1.get(ComboBoxModelHandler.class).install(); var1.get(InfoPaneHandler.class).install(); var1.get(LanguageTableModel.class).install(languageTable); var1.get(StatTableModel.class).install(); var1.get(ClassLevelTableModel.class).install(); var1.get(TodoListHandler.class).install(); var1.get(GenerateRollsAction.class).install(); var1.get(RollMethodAction.class).install(); var1.get(HPHandler.class).install(); random.setAction(var1.get(RandomNameAction.class)); generateRollsButton.setAction(var1.get(GenerateRollsAction.class)); rollMethodButton.setAction(var1.get(RollMethodAction.class)); createMonsterButton.setAction(var1.get(CreateMonsterAction.class)); AddLevelsAction var2 = var1.get(AddLevelsAction.class); addLevelsButton.setAction(var2); addLevelsField.setAction(var2); RemoveLevelsAction var3 = var1.get(RemoveLevelsAction.class); removeLevelsButton.setAction(var3); removeLevelsField.setAction(var3); ExpAddAction var4 = var1.get(ExpAddAction.class); expaddButton.setAction(var4); expmodField.setAction(var4); expsubtractButton.setAction(var1.get(ExpSubtractAction.class)); var2.install(); resetBasicsPanel(); } 	0	1	1	1	1	0
@Override public ModelMap Func1(final CharacterFacade var1) { ModelMap var2 = new ModelMap(); var2.put(LabelAndFieldHandler.class, new LabelAndFieldHandler(var1)); var2.put(ComboBoxRendererHandler.class, new ComboBoxRendererHandler(var1)); var2.put(ComboBoxModelHandler.class, new ComboBoxModelHandler(var1)); var2.put(RandomNameAction.class, new RandomNameAction(var1, (JFrame) SwingUtilities.getWindowAncestor(this))); var2.put(ClassLevelTableModel.class, new ClassLevelTableModel(var1, classLevelTable, classComboBox)); var2.put(GenerateRollsAction.class, new GenerateRollsAction(var1)); var2.put(RollMethodAction.class, new RollMethodAction(var1, (JFrame) SwingUtilities.getWindowAncestor(this))); var2.put(CreateMonsterAction.class, new CreateMonsterAction( var1, (JFrame) SwingUtilities.getWindowAncestor(this))); var2.put(AddLevelsAction.class, new AddLevelsAction(var1)); var2.put(RemoveLevelsAction.class, new RemoveLevelsAction(var1)); var2.put(StatTableModel.class, new StatTableModel(var1, statsTable)); var2.put(LanguageTableModel.class, new LanguageTableModel(var1)); var2.put(InfoPaneHandler.class, new InfoPaneHandler(var1, infoPane)); var2.put(ExpAddAction.class, new ExpAddAction(var1)); var2.put(ExpSubtractAction.class, new ExpSubtractAction(var1)); var2.put(TodoListHandler.class, new TodoListHandler(var1)); var2.put(HPHandler.class, new HPHandler(var1)); return var2; } 	0	1	0	0	0	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_google); mFirebaseAuth = FirebaseAuth.getInstance(); mSignInButton = (SignInButton) findViewById(R.id.sign_in_button); mSignInButton.setOnClickListener(this); GoogleSignInOptions var2 = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN) .requestIdToken(getString(R.string.default_web_client_id)) .requestEmail() .build(); mGoogleApiClient = new GoogleApiClient.Builder(this) .enableAutoManage(this /* FragmentActivity */, this /* OnConnectionFailedListener */) .addApi(Auth.GOOGLE_SIGN_IN_API, var2) .build(); } 	0	0	0	0	0	1
"@Test public void Func1() { String var1; String[] var2 = new String[] { ""1,2,3,4,5,6,7,8,9,1"", ""1,5,2,3,5,4,3,1"", ""1,2"", ""1,2,3,4,5,6,7,8,9"", ""1,2,3,4,5,6,5,4,3,2,1"", ""1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9"", ""1,2,1,3,1,4,2,3,2,4,3,4"" }; String[] var3 = new String[] { ""true"", ""true"", ""false"", ""false"", ""false"", ""false"", ""false"" }; String[] var4; String var5 = ""JUnitEulerTestFile.txt""; BufferedWriter var6 = null; try { var6 = new BufferedWriter(new FileWriter(var5)); for (int var7 = 0; var7 < var2.length; var7++) { var6.write(var2[var7]); var6.newLine(); } var6.flush(); var6.close(); } catch (IOException e) { fail(""The test was unable to create a test file. That's a shame!""); } TestObject.runStatic(""main"", (Object) new String[]{var5}); var1 = TestObject.getLastMethodOutput(); var4 = var1.split(""\n""); if (var4.length > var2.length) { fail(""Your program wrote more var1 lines than there were lines in the input file.""); } else if (var4.length < var2.length) { fail(""Your program wrote less var1 lines than there were lines in the input file.""); } for (int var7 = 0; var7 < var4.length; var7++) { assertEquals(""Your program's var1 for the line '"" + var2[var7] + ""'"", var3[var7], var4[var7]); } new File(var5).delete(); } "	0	0	0	0	0	1
@Override public void Func1(ReplicaId var1, boolean var2) { super.Func1(var1, var2); long var3; if (unexpiredRequestSendTimes.containsKey(var1)) { var3 = time.milliseconds() - unexpiredRequestSendTimes.remove(var1); } else { var3 = time.milliseconds() - expiredRequestSendTimes.remove(var1); } getLatencyHistogram(var1).update(var3); } 	0	1	0	0	0	0
public void Func1(){ rows.clear(); } 	0	0	0	0	0	1
"@Override protected void Func1(GrouperGroupInfo var1, LdapGroup var2, Set<Subject> var3, Map<Subject, LdapUser> var4, Set<LdapUser> var5) throws PspException { String var6 = config.getProvisionedAttributeName(); String var7 = getAttributeValueForGroup(var1); List<LdapObject> var8 = getLdapSystem().performLdapSearchRequest( config.getUserCreationBaseDn(), SearchScope.SUBTREE, Arrays.asList(config.getUserSearchAttributes()), var6 + ""={0}"", var7); List<LdapUser> var9 = new ArrayList<LdapUser>(var8.size()); for ( LdapObject var10 : var8 ) var9.add(new LdapUser(var10)); Set<LdapUser> var11 = new HashSet<LdapUser>(var9); var11.removeAll(var5); for (LdapUser var12 : var11) scheduleUserModification(var12, AttributeModificationType.REMOVE, Arrays.asList(var7)); Set<LdapUser> var13 = new HashSet<LdapUser>((Set<LdapUser>)var5); var13.removeAll(var9); for (LdapUser var14 : var13) scheduleUserModification(var14, AttributeModificationType.ADD, Arrays.asList(var7)); LOG.info(""{}: Brief full-sync summary: Correct={}, Current={}, Extra={}, Missing={}"", new Object[] {getName(), var3.size(), var8.size(), var11.size(), var13.size()}); } "	0	0	0	0	0	1
"private List<ReplicaUnderConstruction> Func1( ReplicaUnderConstruction.Finder var1, Object[] var2) throws TransactionContextException, StorageException { final long var3 = (Long) var2[0]; final int var4 = (Integer) var2[1]; List<ReplicaUnderConstruction> var5 = null; if (containsByBlock(var3) || containsByINode(var4)) { var5 = getByBlock(var3); hit(var1, var5, ""bid"", var3, ""inodeid"", var4); } else { aboutToAccessStorage(var1, var2); var5 = dataAccess.findReplicaUnderConstructionByBlockId(var3, var4); gotFromDB(new BlockPK(var3), var5); miss(var1, var5, ""bid"", var3, ""inodeid"", var4); } return var5; } "	1	1	0	0	0	0
"@Override public void Func1(String var1) { if (this.logger.isDebugEnabled()) { this.logger.debug(""CancelOk "" + this); } removeConsumer(false); } "	0	0	0	0	0	1
public int Func1() { return mContentInsets.getRight(); } 	0	0	0	1	0	0
private void Func1() { if (midtransSDK.getExternalScanner() != null) { if (midtransSDK.getColorTheme() != null && midtransSDK.getColorTheme().getPrimaryDarkColor() != 0) { scanCardBtn.setTextColor(midtransSDK.getColorTheme().getPrimaryDarkColor()); } scanCardBtn.setVisibility(View.VISIBLE); scanCardBtn.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var1) { midtransSDK.getExternalScanner().startScan(getActivity(), SCAN_REQUEST_CODE); } }); } else { scanCardBtn.setVisibility(View.GONE); } } 	1	0	1	1	1	0
public void Func1(SessionLoadedEvent var1) { loadSessionData(var1, directory); } 	1	0	1	0	0	0
"private Address Func1(String var1, String var2) { Address var3 = null; do { Server var4 = os.compute().servers().get(var1); if (var4 != null && var4.getAddresses().getAddresses(var2).size() > 0) { var3 = var4.getAddresses().getAddresses(var2).iterator().next(); } else { try { Thread.sleep(2500); System.out.print("".""); } catch (InterruptedException ex) { log.error(""Can't sleep!""); } } } while (var3 == null); return var3; } "	1	1	0	0	0	0
private int Func1(int var1) { String var2 = getTelephonyProperty(var1, TelephonyProperties.CURRENT_ACTIVE_PHONE, null); if (var2 == null || var2.isEmpty()) { return getPhoneTypeFromNetworkType(var1); } return Integer.parseInt(var2); } 	0	1	1	1	1	0
"private int Func1(int var1) { String var2 = getTelephonyProperty(var1, ""ro.telephony.default_network"", null); if (var2 != null && !var2.isEmpty()) { return TelephonyManager.getPhoneType(Integer.parseInt(var2)); } return TelephonyManager.PHONE_TYPE_NONE; } "	1	1	1	0	1	0
@Override public <T> Storage<T> Func1(String var1) { return Func1(var1, null); } 	0	0	0	0	0	1
"private void Func1( List<Publication> var1 ) { int var2 = Calendar.getInstance().get( Calendar.YEAR ); for ( Iterator<Publication> var3 = var1.iterator(); var3.hasNext(); ) { Publication var4 = var3.next(); if ( var4.getPublicationSources().size() == 1 ) { List<PublicationSource> var5 = new ArrayList<>( var4.getPublicationSources() ); if ( var5.get( 0 ).getSourceType().equals( SourceType.GOOGLESCHOLAR ) ) { if ( var5.get( 0 ).getDate() == null ) { var3.remove(); continue; } else { if ( var5.get( 0 ).getCitedBy() == 0 && var2 - Integer.parseInt( var5.get( 0 ).getDate() ) > 2 ) { var3.remove(); continue; } } } else if ( var5.get( 0 ).getSourceType().equals( SourceType.MAS ) ) { if ( var5.get( 0 ).getCoAuthors() == null || var5.get( 0 ).getCoAuthors().equals( """" ) ) { var3.remove(); continue; } } else if ( var5.get( 0 ).getSourceType().equals( SourceType.MENDELEY ) ) { if ( var5.get( 0 ).getAbstractText().contains( ""master thesis"" ) ) { var3.remove(); continue; } } } if ( var4.getTitle().toLowerCase().contains( ""special issue article"" ) ) { var3.remove(); continue; } } } "	0	0	0	1	0	0
public void Func1(String var1) { if (search_instructions.getVisibility() == View.VISIBLE && (queryEmptiable || !var1.isEmpty())) { search_instructions.setVisibility(View.GONE); if(loadingPanel != null) { loadingPanel.setVisibility(View.VISIBLE); } } } 	1	0	1	0	0	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_BlogPost); Toolbar var2 = (Toolbar) findViewById(R.id.var2); setSupportActionBar(var2); getSupportActionBar().setDisplayHomeAsUpEnabled(true); } 	1	1	0	1	1	0
public void Func1(ScriptValue var1) { Set<Type> var2; Type var3; if (var1 == null) { return; } if (type == null) { type = new TreeSet<>(FieldTypeBinding.DEFAULT_COMPARATOR); var3 = getType(); if (var3 != null) { type.add(var3); } } var2 = var1.type; if (var2 == null || var2.isEmpty()) { var3 = var1.getType(); if (var3 != null) { type.add(var3); } } else { type.addAll(var2); } } 	0	1	0	0	0	0
"public static void Func1(String[] var1) throws Exception { final JournalFactory var2 = new JournalFactory(new JournalConfigurationBuilder() {{ $(Price.class).$ts(); }}.build(var1[0])); final JournalClient var3 = new JournalClient(new ClientConfig(""192.168.1.81:7080,192.168.1.81:7090"") {{ getReconnectPolicy().setRetryCount(6); getReconnectPolicy().setSleepBetweenRetriesMillis(1); getReconnectPolicy().setLoginRetryCount(2); }}, var2); final Journal<Price> var4 = var2.bulkReader(new JournalKey<>(Price.class, ""price-copy"", PartitionBy.NONE, 1000000000)); var3.subscribe(Price.class, null, ""price-copy"", 1000000000, new TxListener() { @Override public void Func2() { int var5 = 0; long var6 = 0; for (Price var7 : JournalIterators.incrementBufferedIterator(var4)) { if (var5 == 0) { var6 = var7.getNanos(); } var5++; } if (var6 == 0) { System.out.println(""no data received""); } else { System.out.println(""took: "" + (System.currentTimeMillis() - var6) + "", var5="" + var5); } } @Override public void Func3() { System.out.println(""there was an error""); } }); var3.start(); System.out.println(""Client started""); } "	0	0	0	0	0	1
public void Func1(Deck var1) { View var2 = findViewById(R.id.left_stub), var3 = findViewById(R.id.right_stub), var4 = findViewById(R.id.swipe_up_down) ; boolean var5 = !var1.isProcessed() || var1.isLastStep() ; var4.setVisibility(var5 ? View.GONE : View.VISIBLE); if (var1.isSwipeable()) { // => !processed if (var1.isOnOptionOne()) { int var6 = var1.midYOfTex() - (var3.getHeight()/2); var3.setY(var6); var3.setVisibility(View.VISIBLE); var2.setVisibility(View.GONE); } else { var2.setVisibility(View.VISIBLE); var3.setVisibility(View.GONE); } } else { var2.setVisibility(View.GONE); var3.setVisibility(View.GONE); } } 	0	0	0	0	0	1
public Object Func1(Object var1, Method var2, Object[] var3) throws Throwable { checkCorrectness(var2); try { if (var2.equals(PREPARED_STATEMENT_CLOSE)) { handleStatementClose(statement, var1); return Void.TYPE; } else if (var2.equals(PREPARED_STATEMENT_GET_CONNECTION)) { return associatedConnection; } else if (var2.equals(PREPARED_STATEMENT_SET_CONNECTION)) { this.associatedConnection = (Connection)var3[0]; return Void.TYPE; } else if (var2.equals(PREPARED_STATEMENT_GET_ORIGINAL)) { return preparedStatement; } else if (var2.equals(PREPARED_STATEMENT_FORCE_CLOSE)) { preparedStatement.close(); return Void.TYPE; } else return var2.Func1(preparedStatement, var3); } catch(InvocationTargetException ex) { throw ex.getCause(); } } 	0	0	1	1	0	0
public void Func1(java.awt.event.WindowEvent var1){ Settings var2 = new Settings(ignoreCommentsCheckbox.isSelected(), projectReader.settings.selectedLanguage, projectReader.rootFolder); Settings.save(var2);    // Serialize the settings System.exit(0);                // Exit the program } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception { UserController var1 = new UserController(); LoginController var2 = new LoginController(); User var3; ConfirmationMessage var4 = var1.addUser(-1, -1, -1, USERNAME, PASSWORD, EMAIL, CITY, """"); Assert.assertEquals(StatusType.SUCCES, var4.getStatus()); var3 = (User) var4.getReturnObject(); Assert.assertEquals(USERNAME, var3.getUsername()); Assert.assertEquals(EMAIL, var3.getEmail()); Assert.assertEquals(CITY, var3.getCity()); String var5 = var2.Func1(USERNAME, PASSWORD); Assert.assertEquals(true, var5.length() > 5); var3 = var1.getUser(var5); Assert.assertEquals(USERNAME, var3.getUsername()); Assert.assertEquals(EMAIL, var3.getEmail()); Assert.assertEquals(CITY, var3.getCity()); var1.deleteUser(var3.getToken(), var3.getId()); var5 = var2.Func1(USERNAME, PASSWORD); Assert.assertEquals(null, var5); } "	0	1	1	1	0	0
"public void Func1() { Scanner var1 = new Scanner(System.var1); String var2; Request.Type var3 = null; String var4; String var5; do { System.out.println(""Please enter the directory that you want to use for the client files:""); System.out.println(""Must end with either a '/' or a '\\' to work""); directory = var1.next(); if (!TFTP.isDirectory(directory)) { System.out.println(""Directory does not exist.""); } } while (!TFTP.isDirectory(directory)); System.out.println(""The directory you entered is: "" + directory); while (true) { boolean var6 = false; while(!var6) { System.out.println(""Please enter a command (read/write/exit):""); var2 = var1.next(); if (var2.equalsIgnoreCase(""exit"")) { var1.close(); System.out.println(""Shutting down...""); System.exit(1); } else if (var2.equalsIgnoreCase(""read"")) { var6 = true; var3 = Request.Type.READ; } else if (var2.equalsIgnoreCase(""write"")) { var6 = true; var3 = Request.Type.WRITE; } else { var6 = false; System.out.println(""Invalid command. Valid commands are read, write, and exit.""); } } do { System.out.println(""Please enter the name of the file to transfer:""); var4 = var1.next(); if (!TFTP.isPathless(var4)) { System.out.println(""File names must not contain a path. The directory that you designated for transfer is: "" + directory); } } while (!TFTP.isPathless(var4)); var5 = directory + var4; if (var3 == Request.Type.WRITE) { if (TFTP.fileExists(var5) && !TFTP.isDirectory(var5)) { if (!TFTP.isReadable(var5)) { System.err.println(""File access violation.\n""); continue; } else { System.out.println(""File found.\n""); } } else { System.err.println(""File not found.\n""); continue; } } else if (var3 == Request.Type.READ) { if (TFTP.fileExists(var5) && !TFTP.isDirectory(var5)) { System.err.println(""File already exists.\n""); continue; } else { System.out.println(""""); } } try { switch (var3) { case READ: this.read(InetAddress.getLocalHost(), var5, ""netascii""); break; case WRITE: this.write(InetAddress.getLocalHost(), var5, ""netascii""); break; default: System.out.println(""Invalid request type. Quitting...""); System.exit(1); } } catch(Exception e) { } } } "	0	0	0	1	0	0
"static float[] Func1(String var1, String var2, Properties var3) { if ($null.equals(var1) || var1 == null) { return null; } if ($empty.equals(var1) || var1.length() == 0) { return new float[0]; } if ($array.equals(var1)) { // readable float array, multiple line configuration List<String> var4 = new ArrayList<String>(); Set<String> var5 = var3.stringPropertyNames(); for (String var6 : var5) { String var7 = var2 + "".""; if (var6.startsWith(var7)) { String var8 = var6.substring(var7.length()); var4.add(var8); } } String[] var9 = var4.toArray(new String[var4.size()]); Arrays.sort(var9); // keep array's order float[] var10 = new float[var9.length]; for (int var11 = 0; var11 < var9.length; var11++) { String var6 = var9[var11]; String var12 = (String) var3.getProperty(var2 + ""."" + var6); if (var12 != null) { try { var10[var11] = Float.parseFloat(var12); } catch (Exception e) { e.printStackTrace(); } } } return var10; } String[] var13 = var1.split(""\\s*;\\s*""); float[] var10 = null; if (var13 != null) { var10 = new float[var13.length]; for (int var11 = 0; var11 < var13.length; var11++) { if (var13[var11] != null) { try { var10[var11] = Float.parseFloat(var13[var11]); } catch (Exception e) { e.printStackTrace(); } } } } return var10; } "	0	0	0	0	0	1
"@DataProvider(name = ""Basic Select Input (Focus) Test Data"") public Object[][] Func1() { return new Object[][]{ {""1px"", ""solid"", new String[]{commonUtils.hex2Rgb(""#047A9C""), commonUtils.hex2RgbWithoutTransparency(""#047A9C"")}, ""rgb(4, 122, 156) 0px 0px 5px 0px"", ""14px"", commonUtils.hex2Rgb(""#252525""), ""18px""} }; } "	0	0	0	0	0	1
"@Test(testName = ""Mobile: Verify Basic Input - Disabled"", dataProvider = ""Inputs - Basic (single line - disabled) Test Data"", groups = ""mobile-regression"") private void Func1(String var1, String var2, String[] var3, String[] var4, String var5, String var6, String var7, String[] var8, String var9, String[] var10, String var11) { for (String var12 : borderWidths) { basicInputBorder = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, var12, ""mobile""); isBasicInputBorder = commonUtils.assertValue(basicInputBorder, var1, ""Border width "" + var12 + "" of Input-Basic Disabled field is not as per spec""); Assert.assertTrue(isBasicInputBorder); } for (String var12 : borderStyles) { basicInputBorder = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, var12, ""mobile""); isBasicInputBorder = commonUtils.assertValue(basicInputBorder, var2, ""Border style "" + var12 + "" of Input-Basic Disabled field is not as per spec""); Assert.assertTrue(isBasicInputBorder); } for (String var12 : borderColors) { basicInputBorder = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, var12, ""mobile""); isBasicInputBorder = commonUtils.assertCSSProperties(var12, basicInputBorder, var3); if (isBasicInputBorder == false) { log.info(""Border color "" + var12 + "" of Input-Basic Disabled field is not as per spec, actual "" + basicInputBorder); } Assert.assertTrue(isBasicInputBorder); } basicInputBgColor = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""background-color"", ""mobile""); marginTop = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""margin-top"", ""mobile""); paddingRight = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""padding-right"", ""mobile""); paddingLeft = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""padding-left"", ""mobile""); basicInputHeight = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""height"", ""mobile""); for (String var12 : borderRadii) { basicInputBorderRadius = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, var12, ""mobile""); isBasicInputBorderRadius = commonUtils.assertValue(basicInputBorderRadius, var9, ""Border radius "" + var12 + "" of Input-Basic Disabled field is not as per spec ""); Assert.assertTrue(isBasicInputBorderRadius); } isBackgroundColor = commonUtils.assertCSSProperties(""background-color"", basicInputBgColor, var4); if (isBackgroundColor == false) { log.info("" Background color of Input-Basic Disabled field is not as per spec,actual "" + basicInputBgColor); } isMarginTop = commonUtils.assertValue(marginTop, var5, ""Background color of Input-Basic disabled field is not as per spec""); isPaddingRight = commonUtils.assertValue(paddingRight, var6, ""Padding right of Input-Basic disabled field is not as per spec""); isPaddingLeft = commonUtils.assertValue(paddingLeft, var7, ""Padding left of Input-Basic disabled field is not as per spec""); isBasicInputHeight = commonUtils.assertCSSProperties(""height"", basicInputHeight, var8); if (isBasicInputHeight == false) { log.info(""Box height of Input-Basic Error field is not as per spec, actual "" + basicInputHeight); } labelColor = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabledLabel, ""color"", ""mobile""); labelFontSize = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""font-size"", ""mobile""); isLabelColor = commonUtils.assertCSSProperties(""color"", labelColor, var10); if (isLabelColor == false) { log.info(""Label color of Input-Basic disabled label is not as per spec, actual "" + labelColor); } isLabelFontSize = commonUtils.assertValue(labelFontSize, var11, ""Label font size of Input-Basic disabled label is not as per spec""); isLabelFor = commonUtils.checkLabelForVal(inputsPgObj.inputBasicDisabledLabel, inputsPgObj.inputBasicDisabled, ""mobile""); Assert.assertTrue(isBackgroundColor && isMarginTop && isPaddingRight && isPaddingLeft && isBasicInputHeight && isLabelColor && isLabelFontSize && isLabelFor); } "	0	0	0	0	0	1
"@Override public void Func1(View var1) { try { textView.setText(String.valueOf(Utils.stringToInt(textView.getText().toString()) + 25)); } catch (NumberFormatException e) { textView.setText(""0""); } } "	1	0	0	1	0	0
private ResultSet Func1(String var1){ try{ Statement var2 = con.createStatement(); ResultSet var3 = var2.executeQuery(var1); try{ var2.close(); } catch(SQLException e){ Logger var4 = Logger.getLogger(DB.class.getName()); var4.log(Level.SEVERE, e.getMessage(), e); } return var3; } catch(SQLException e){ Logger var4 = Logger.getLogger(DB.class.getName()); var4.log(Level.WARNING, e.getMessage(), e); } return null; } 	0	0	0	0	0	1
"protected void Func1(TaskExecutor var1) { String var2 = var1.getGuid(); Preconditions.checkState(var1.isAlive()); if (isAnotherTaskInstanceRunning(var1)) { throw new ConcurrentExecutionNotAllowedException(getMacGyverTask(var1).get().getTaskId()); } synchronized (this) { executingTaskSet.add(var2); } String var3 = getHostname(); ObjectNode var4 = mapper.createObjectNode(); Optional<MacGyverTask> var5 = getMacGyverTask(var1); if (var5.isPresent()) { ObjectNode var6 = (ObjectNode) var5.get().config.deepCopy(); if (var6.has(""id"")) { var6.put(""taskId"", var6.path(""id"").asText()); var6.remove(""id""); } var6.remove(""state""); var6.remove(""hostname""); var6.remove(""processUuid""); var6.remove(""updateTs""); var6.set(""description"", var6.path(""taskId"")); var4.setAll(var6); } else { var4.put(""description"",var1.getTask().toString()); } Instant var7 = Instant.var7(); String var8 = formatInstant(var7); String var9 = ""merge (t:TaskState {id:{var2}}) set t+={props},t.state={state},t.hostname={hostname},t.processUuid={processUuid},t.type='cron4j', t.startTs={ts}, t.startDate={var8} return t""; var4.remove(""id""); // bad things if the id attibute is set neo4j.execCypher(var9, ""var2"", var2, ""processUuid"", getProcessUuid(), ""hostname"", var3, ""ts"", var7.toEpochMilli(), ""var8"", var8, ""state"", TaskState.STARTED.toString(), ""props"", var4); } "	0	1	0	0	0	0
"@Test(description = ""Exception when getting API by UUID"", expectedExceptions = APIMgtDAOException.class) public void Func1() throws APIManagementException { ApiDAO var1 = mock(ApiDAO.class); AbstractAPIManager var2 = new APIStoreImpl(USER_NAME, var1, null, null, null, null, null); when(var1.getAPI(UUID)) .thenThrow(new APIMgtDAOException(""Error occurred while retrieving API with id "" + UUID)); var2.getAPIbyUUID(UUID); } "	1	1	0	1	1	0
@Before public void Func1() { initMocks(this); treeRegistry = new TAMATreeRegistry(null, null, null, null, null, null, null); callFlowController = new TAMACallFlowController(treeRegistry, pillReminderService, voiceOutboxService, allPatients, contextFactory); ivrContext = new TAMAIVRContextForTest(); Patient var1 = new Patient(); patientPreferences = new PatientPreferences(); var1.setPatientPreferences(patientPreferences); ivrContext.pillRegimenSnapshot(pillRegimenSnapshot).var1(var1).callState(CallState.STARTED); when(contextFactory.create(kooKooIVRContext)).thenReturn(ivrContext); } 	1	1	1	1	0	0
@Override public Object Func1() { throw new NotImplementedException(); } 	0	0	0	0	0	1
"private void Func1(final ViewDefinitionState var1, final Entity var2) { final Set<String> var3 = Sets.newHashSet(""productionCostMarginValue"", ""materialCostMarginValue"", ""totalOverhead"", ""totalMaterialCosts"", ""totalMachineHourlyCosts"", ""totalLaborHourlyCosts"", ""totalPieceworkCosts"", ""totalTechnicalProductionCosts"", ""totalCosts"", ""totalCostsPerUnit"", ""additionalOverheadValue""); for (String var4 : var3) { FieldComponent var5 = (FieldComponent) var1.getComponentByReference(var4); var5.setFieldValue(numberService.format(getBigDecimal(var2.getField(var4)))); } } "	0	0	0	0	0	1
"public static Admin Func1() { return (Admin) Http.Context.current().args.get(""user""); } "	0	0	0	0	0	1
public static void Func1(Throwable var1, String var2) { Func1(null, problem2String(var2, var1)); } 	1	0	1	1	0	0
@Override public void Func1(MethodTree var1) { List<ModifierKeywordTree> var2 = var1.var2().var2(); for (ModifierKeywordTree var3 : var2) { if (var3.var3() == Modifier.SYNCHRONIZED) { visitor.reportIssue(var1, MESSAGE); } } super.Func1(var1); } 	1	1	0	0	0	0
"private Table Func1(RestRequest var1, ClusterStateResponse var2, NodesInfoResponse var3, NodesStatsResponse var4) { boolean var5 = var1.paramAsBoolean(""full_id"", false); DiscoveryNodes var6 = var2.getState().var6(); Table var7 = getTableWithHeader(var1); for (DiscoveryNode var8 : var6) { NodeInfo var9 = var3.getNodesMap().get(var8.id()); NodeStats var10 = var4.getNodesMap().get(var8.id()); var7.startRow(); var7.addCell(var5 ? var8.id() : Strings.substring(var8.getId(), 0, 4)); var7.addCell(var9 == null ? null : var9.getProcess().getId()); var7.addCell(var8.getHostName()); var7.addCell(var8.getHostAddress()); if (var8.address() instanceof InetSocketTransportAddress) { var7.addCell(((InetSocketTransportAddress) var8.address()).address().getPort()); } else { var7.addCell(""-""); } final Map<String, ThreadPoolStats.Stats> var11; final Map<String, ThreadPool.Info> var12; if (var10 == null) { var11 = Collections.emptyMap(); var12 = Collections.emptyMap(); } else { var11 = new HashMap<>(14); var12 = new HashMap<>(14); ThreadPoolStats var13 = var10.getThreadPool(); for (ThreadPoolStats.Stats var14 : var13) { var11.put(var14.getName(), var14); } if (var9 != null) { for (ThreadPool.Info var15 : var9.getThreadPool()) { var12.put(var15.getName(), var15); } } } for (String var16 : SUPPORTED_NAMES) { ThreadPoolStats.Stats var17 = var11.get(var16); ThreadPool.Info var18 = var12.get(var16); Long var19 = null; String var20 = null; Integer var21 = null; Integer var22 = null; if (var18 != null) { if (var18.getQueueSize() != null) { var19 = var18.getQueueSize().singles(); } if (var18.getKeepAlive() != null) { var20 = var18.getKeepAlive().toString(); } if (var18.getMin() >= 0) { var21 = var18.getMin(); } if (var18.getMax() >= 0) { var22 = var18.getMax(); } } var7.addCell(var18 == null  ? null : var18.getThreadPoolType()); var7.addCell(var17 == null ? null : var17.getActive()); var7.addCell(var17 == null ? null : var17.getThreads()); var7.addCell(var17 == null ? null : var17.getQueue()); var7.addCell(var19); var7.addCell(var17 == null ? null : var17.getRejected()); var7.addCell(var17 == null ? null : var17.getLargest()); var7.addCell(var17 == null ? null : var17.getCompleted()); var7.addCell(var21); var7.addCell(var22); var7.addCell(var20); } var7.endRow(); } return var7; } "	0	0	0	0	0	1
private void Func1(MenuModel var1) { JPopupMenu var2 = new JPopupMenu(var1.getName()); menuesMap.put(var1, var2); for(MenuItemModel var3 : var1.getMenuItemList()) { MenuUtils.addMenuItem(var2, var3); } } 	0	1	0	0	0	0
public InputStream Func1(long var1) throws IOException, UnsupportedFileOperationException { if (isFileOperationSupported(FileOperation.RANDOM_READ_FILE)) { RandomAccessInputStream var2 = getRandomAccessInputStream(); var2.seek(var1); return var2; } InputStream var3 = Func1(); StreamUtils.skipFully(var3, var1); return var3; } 	0	0	0	0	0	1
public AbstractFile[] Func1(FileFilter var1) throws IOException, UnsupportedFileOperationException { return var1==null?Func1():var1.var1(Func1()); } 	0	0	0	0	0	1
public String Func1() { return this.error_message; } 	0	0	0	0	0	1
"@Override @SuppressWarnings(""unchecked"") public String Func1(API var1) throws APIManagementException { APIIdentifier var2 = var1.getId(); APIManagerConfiguration var3 = ServiceReferenceHolder.getInstance().getAPIManagerConfigurationService().getAPIManagerConfiguration(); Environment var4 = (Environment) var3.getApiGatewayEnvironments().values().toArray()[0]; String var5 = var4.getApiGatewayEndpoint(); String[] var6 = var5.split("",""); Set<URITemplate> var7 = var1.getUriTemplates(); Set<Scope> var8 = var1.getScopes(); if (var6.length < 1) { throw new APIManagementException(""Error in creating JSON representation of the API"" + var2.getApiName()); } JSONObject var9 = new JSONObject(); JSONObject var10 = new JSONObject(); var10.put(""title"", var1.getId().getApiName()); if(var1.getDescription() != null){ var10.put(""description"", var1.getDescription()); } JSONObject var11 = new JSONObject(); if(var1.getBusinessOwner() != null ){ var11.put(""name"", var1.getBusinessOwner()); } if(var1.getBusinessOwnerEmail() != null ){ var11.put(""email"", var1.getBusinessOwnerEmail()); } if(var1.getBusinessOwner() != null || var1.getBusinessOwnerEmail() != null) { var10.put(""contact"", var11); } var10.put(""version"", var1.getId().getVersion()); var9.put(""info"", var10); JSONObject var12 = new JSONObject(); JSONObject var13 = null; JSONObject var14; JSONObject var15 = new JSONObject(); JSONObject var16 = new JSONObject(); var16.put(""description"", ""OK""); var15.put(""200"",var16); for (URITemplate var17 : var7) { String var18 = var17.getUriTemplate(); if (var12.get(var18) == null) { var12.put(var18, ""{}""); var13 = new JSONObject(); } String var19 = var17.getHTTPVerb(); if (var13 != null) { var14 = new JSONObject(); var14.put(""x-auth-type"", var17.getAuthType()); var14.put(""x-throttling-tier"", var17.getThrottlingTier()); var14.put(""responses"", var15); var13.put(var19.toLowerCase(), var14); } var12.put(var18, var13); } var9.put(""paths"", var12); var9.put(""swagger"", ""2.0""); JSONObject var20 = new JSONObject(); JSONObject var21 = new JSONObject(); JSONArray var22 = new JSONArray(); JSONObject var23; if (var8 != null) { for (Scope var24 : var8) { var23 = new JSONObject(); var23.put(""key"", var24.getKey()); var23.put(""name"", var24.getName()); var23.put(""roles"", var24.getRoles()); var23.put(""description"", var24.getDescription()); var22.add(var23); } } var21.put(""x-wso2-var8"", var22); var20.put(""apim"", var21); var9.put(""securityDefinitions"", var20); return var9.toJSONString(); } "	0	0	0	0	0	1
public int Func1() { String var1 = this.getText(); try { return Integer.parseInt(var1); } catch (NumberFormatException e) { return 0; } } 	0	0	0	0	0	1
"@Test public void Func1() { ArrayList<Parameter> var1 = new ArrayList<Parameter>(); var1.add(new Parameter(1,""p"")); var1.add(new Parameter(2,""t"")); Command var2 = new Command(1,""Hello World"", var1); String var3 = ""Hello World "" + '\\' + ""p "" + '\\' + ""t""; DataManager var4 = DataManager.getInstance(); assertEquals(var3,var4.addNewTask(var2)); Func1.add(""Hello world""); Func1.add(""Test case 1""); assertEquals(Func1,var4.listAll(null)); } "	0	1	0	0	0	0
private void Func1() { if (mReleaseHold) { releaseHoldCmd(); } else { mWaitingForRelease = true; VpnStatus.updateStatePause(lastPauseReason); } } 	0	0	0	0	0	1
"@Override public void Func1(Bundle var1) { super.Func1(var1); if (isVoiceInteraction() || var1 == null) { if (onVoiceSettingInteraction(getIntent())) { finish(); } } else { Log.v(TAG, ""Cannot modify settings without voice interaction""); finish(); } } "	0	0	0	0	0	1
"@Override public void Func1() { super.Func1(); final ServletContext var1 = (ServletContext)getOption(ServletContext.class.getName()); if (var1 == null) { throw new IllegalArgumentException(""Missing ServletContext""); } String var2 = (String)getOption(COMETD_URL_MAPPING_OPTION); if (var2 == null) { throw new IllegalArgumentException(""Missing '"" + COMETD_URL_MAPPING_OPTION + ""' parameter""); } NativeWebSocketConfiguration var3 = (NativeWebSocketConfiguration)var1.getAttribute(NativeWebSocketConfiguration.class.getName()); if (var3 == null) { throw new IllegalArgumentException(""Missing WebSocketConfiguration""); } WebSocketPolicy var4 = var3.getFactory().getPolicy(); int var5 = getOption(BUFFER_SIZE_OPTION, var4.getInputBufferSize()); var4.setInputBufferSize(var5); int var6 = getOption(MAX_MESSAGE_SIZE_OPTION, var4.getMaxTextMessageSize()); var4.setMaxTextMessageSize(var6); long var7 = getOption(IDLE_TIMEOUT_OPTION, var4.getIdleTimeout()); var4.setIdleTimeout((int)var7); for (String var8 : normalizeURLMapping(var2)) { var3.addMapping(new ServletPathSpec(var8), new WebSocketCreator() { @Override public Object Func2(ServletUpgradeRequest var9, ServletUpgradeResponse var10) { String var11 = var9.getHeader(""Origin""); if (var11 == null) { var11 = var9.getHeader(""Sec-WebSocket-Origin""); } if (checkOrigin(var9, var11)) { List<ExtensionConfig> var12 = new ArrayList<>(); for (ExtensionConfig var13 : var9.getExtensions()) { String var14 = var13.getName(); boolean var15 = getOption(ENABLE_EXTENSION_PREFIX_OPTION + var14, true); if (var15) { var12.add(var13); } } var10.setExtensions(var12); modifyUpgrade(var9, var10); List<String> var16 = getBayeux().getAllowedTransports(); if (var16.contains(getName())) { WebSocketContext var17 = new WebSocketContext(var1, var9); return new WebSocketScheduler(var17); } else { if (_logger.isDebugEnabled()) { _logger.debug(""Transport not those allowed: {}"", var16); } } } else { if (_logger.isDebugEnabled()) { _logger.debug(""Origin check failed for var11 {}"", var11); } } return null; } }); } } "	0	1	1	1	0	0
"@Test public void Func1() throws Exception { assertThat(authorizationService.getAuthorities(ImmutableList.of( Grant.builder().entityId(""a"").role(""z"").entityLevel(Grant.EntityLevel.STATE).stateId(""a"").build() ))).isEmpty(); } "	0	0	0	0	0	1
"@Override public View Func1(int var1, View var2, ViewGroup var3) { ViewHolder var4; if (var2 == null) { var2 = LayoutInflater.from(getContext()).inflate(resource, var3, false); var4 = new ViewHolder(); var4.price = (TextView) var2.findViewById(R.id.tv_ticket_price); var4.status = (TextView) var2.findViewById(R.id.tv_ticket_admit_status); var4.eventName = (TextView) var2.findViewById(R.id.tv_event_title); var4.buyerName = (TextView) var2.findViewById(R.id.tv_buyer_name); var4.var8 = (TextView) var2.findViewById(R.id.tv_event_date); var4.var9 = (TextView) var2.findViewById(R.id.tv_event_time); var4.quantity = (TextView) var2.findViewById(R.id.tv_ticket_quantity); var2.setTag(var4); } else { var4 = (ViewHolder) var2.getTag(); } Ticket var5 = getItem(var1); Event var6 = var5.getEvent(); if (var6 != null) { var4.eventName.setText(var6.getName()); String var7 = var6.getDate(); String var8 = DateUtils.format(var7, DateUtils.FORMAT_DATE); String var9 = DateUtils.format(var7, DateUtils.FORMAT_TIME); var4.var8.setText(var8); var4.var9.setText(var9); } TicketStatus var10 = var5.getTicketStatus(); var4.price.setText(""$"" + var10.getPrice()); var4.quantity.setText(var10.getMaxPurchasable()); var4.status.setText(var5.getStatus()); User var11 = getMainActivity().getUser(); var4.buyerName.setText(var11.getName()); return var2; } "	1	1	0	0	0	0
"public synchronized List<Period> Func1() { if (supportedPeriods == null) { String[] var1 = getProperty(""balboa.summaries"").split("",""); supportedPeriods = new ArrayList<Period>(var1.length); for (String var2 : var1) { supportedPeriods.add(Period.valueOf(var2.toUpperCase())); } } return supportedPeriods; } "	1	0	1	0	0	0
@Override public boolean Func1(Object var1) { if (!(var1 instanceof Region)) { return false; } else if (var1 == this) { return true; } else { Region var2 = (Region) var1; return name.equalsIgnoreCase(var2.name); } } 	1	1	1	1	0	0
@Override public int Func1() { return name.Func1(); } 	1	0	1	1	0	0
public List<String> Func1() { return channelIds; } 	0	0	0	0	0	1
private boolean Func1() { return statCache == null; } 	1	0	1	1	0	0
"@Override public void Func1(ITracer var1, PageWriter var2) throws IOException, LayoutException { Iterator<HintType> var3 = types.iterator(); while (var3.hasNext()) { HintType var4 = var3.next(); switch (var4) { case FLOATBREAK: PageCursor var5 = var2.var5(); Page var6 = var2.var6(); Element var7 = null; int var8 = 0; for (Element var9 : var6.elements) { int var10 = var9.bounds().y + var9.bounds().height; if (var10 > var8) { var8 = var10; var7 = var9; } } if (!var7.bounds().floating()) return; if (var7.bounds().x == 0) var5.left(var7.bounds().x + var7.bounds().width); var5.top(var8); break; case PAGEBREAK: var2.next(); break; default: throw new LayoutException(""Unknown compiler hint: "" + ((var4 == null) ? ""<null>"" : var4.getClass().getName())); } } } "	0	1	1	1	0	0
private boolean Func1(){ return getSharedPreferencesHelper().get(SettingsFragmentPresenter.REMEMBER_LAST_ACTIVE_CATEGORY_PREFERENCE_KEY, true); } 	1	0	1	1	0	0
@Func1 public void Func1() { Obj = new Fraction(10,5); } 	1	0	0	1	0	0
"@Override public void Func1(Map<String, String> var1) throws UserErrorMessage { ODPDBAccess var2 = getDB(); CachedDatastoreService var3 = getDS(); CachedEntity var4 = var2.getCurrentCharacter(); CachedEntity var5 = var2.getCurrentUser(); Long var6 = tryParseId(var1, ""var6""); Long var7 = tryParseId(var1, ""var7""); CachedEntity var8 = var2.getEntity(""Item"", var6); CachedEntity var9 = var2.getEntity(""Path"", var7); CachedEntity var10 = var2.getEntity((Key)var4.getProperty(""locationKey"")); if(var8 == null) throw new UserErrorMessage(""This var8 does not exist""); if(var9 == null) throw new UserErrorMessage(""This var9 does not exist""); if(var10 == null) throw new RuntimeException(""Character var10 is null""); if(""Map to Location"".equals(var8.getProperty(""name""))==false) throw new UserErrorMessage(""The specified var8 is not a map.""); if(GameUtils.equals(var8.getProperty(""containerKey""), var4.getKey()) == false) throw new UserErrorMessage(""You are not currently in possession of this map!""); CombatService var11 = new CombatService(var2); if(var11.isInCombat(var4)) throw new UserErrorMessage(""You cannot read the map while in combat!""); if(var8.getProperty(""var12"") != null) { Long var12 = (Long)var8.getProperty(""var12""); if(var12 > 1) { var12 -= 1; var8.setProperty(""var12"", var12); var3.put(var8); } else { var3.delete(var8); } setJavascriptResponse(JavascriptResponse.ReloadPagePopup); } if(GameUtils.equals(var8.getProperty(""keyCode""), var7) == false) throw new UserErrorMessage(""You are unable to decipher the map.""); var2.doCharacterDiscoverEntity(var3, var4, var9); if(GameUtils.equals(var10.getKey(), var9.getProperty(""location1Key"")) || GameUtils.equals(var10.getKey(), var9.getProperty(""location2Key""))) { MainPageUpdateService var13 = new MainPageUpdateService(var2, var5, var4, var10, this); var13.updateButtonList(var11); } } "	0	0	0	0	0	1
"private Tuple<InstituteXml, List<Tuple<Long, Assignment>>> Func1(DataProvider var1) { InstituteXml var2 = new InstituteXml(var1.getName().getValue(), ""5.22.0"", ""generated by confetti""); List<TimeConstraint> var3 = new LinkedList<>(); var3.add(new ConstraintBasicCompulsoryTime()); var2.setTimeConstraints(var3); List<SpaceConstraint> var4 = new LinkedList<>(); var4.add(new ConstraintBasicCompulsorySpace()); var2.setSpaceConstraints(var4); var2.setSubjects(transform(newArrayList(var1.getSubjects().getList()), new Function<Subject, SubjectXml>() { @Override public SubjectXml Func2(Subject var5) { return new SubjectXml(var5.getName().getValue()); } })); var2.setTeachers(transform(newArrayList(var1.getTeachers().getList()), new Function<Teacher, TeacherXml>() { @Override public TeacherXml Func2(Teacher var6) { return new TeacherXml(var6.getName().getValue()); } })); var2.setYears(transform(newArrayList(var1.getStudentGroups().getList()), new Function<StudentGroup, YearXml>() { @Override public YearXml Func2(StudentGroup var7) { return new YearXml(var7); } })); var2.setRooms(transform(newArrayList(var1.getRooms().getList()), new Function<Room, RoomXml>() { @Override public RoomXml Func2(Room var8) { return new RoomXml(var8.getName().getValue()); } })); var2.setDays(new DaysXml(transform(newArrayList(var1.getDays().getList()), new Function<Day, DayXml>() { @Override public DayXml Func2(Day var9) { return new DayXml(var9.getName().getValue()); } }))); var2.setHours(new HoursXml(transform(newArrayList(var1.getHours().getList()), new Function<Hour, HourXml>() { @Override public HourXml Func2(Hour var10) { return new HourXml(var10.getName().getValue()); } }))); Set<Assignment> var11 = new HashSet<>(); for (Subject var5 : var1.getSubjects().getList()) { var11.addAll(Sets.newHashSet(var5.getAssignments().getList())); } long var12 = 1; List<Tuple<Long, Assignment>> var13 = new LinkedList<>(); for (Assignment var14 : var11) { var13.add(new Tuple<>(var12++, var14)); } var2.setActivities(transform(var13, new Function<Tuple<Long, Assignment>, ActivityXml>() { @Override public ActivityXml Func2(Tuple<Long, Assignment> var15) { return new ActivityXml(var15.getFirst(), var15.getSecond()); } })); return new Tuple<>(var2, var13); } "	0	1	0	0	0	0
public void Func1(String var1){ userAccount.setName(var1); } 	0	0	0	0	0	1
"public static void Func1(java.lang.String var1, java.lang.String var2) { String var3 = ""This method should never be invoked.  It should be overwritten in net.geoprism.DataUploader.java""; throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(var3); } "	0	0	0	0	0	1
"static  int[]  Func1(String var1) { String[] var2 = var1.var2(""(?<=\\W)""); int[] var3 = new int[var2.length]; var3[0] = var2[0].length(); for ( int var4 = 1 ; var4 < var2.length ; var4++ ) var3[var4] = var3[var4-1] + var2[var4].length(); return var3; } "	1	0	0	1	0	0
"public String Func1( boolean var1, boolean var2, boolean var3, boolean var4, boolean var5, boolean var6, boolean var7, boolean var8, boolean var9, boolean var10, boolean var11, boolean var12, boolean var13, boolean var14 ) { StringBuilder var15 = new StringBuilder(); Rank var16 = getRank(); if (NameType.CANDIDATUS == type) { var15.append(""Candidatus ""); } if (genusOrAbove != null && (var5 || infraGeneric == null || specificEpithet != null)) { if (var1 && NamePart.GENERIC == notho) { var15.append(HYBRID_MARKER); } if (var6) { var15.append(genusOrAbove.substring(0, 1)).append('.'); } else { var15.append(genusOrAbove); } } if (specificEpithet == null) { if (Rank.SPECIES == var16) { if (var9) { var15.append("" spec.""); } } else if (var16 != null && var16.isInfraspecific()) { if (var9) { var15.append(' '); var15.append(var16.getMarker()); } } else if (infraGeneric != null) { if (var2 && rank != null) { var15.append(' ') .append(rank) .append(' ') .append(infraGeneric); } else { if (var5 && genusOrAbove != null) { var15.append("" ("") .append(infraGeneric) .append("")""); } else { var15.append(infraGeneric); } } } if (var3) { appendAuthorship(var15); } } else { if (var4 && infraGeneric != null && (rank == null || getRank() == Rank.GENUS)) { var15.append("" (""); var15.append(infraGeneric); var15.append(')'); } var15.append(' '); if (var1 && NamePart.SPECIFIC == notho) { var15.append(HYBRID_MARKER); } String var17 = specificEpithet.replaceAll(""[ _-]"", ""-""); var15.append(var17); if (infraSpecificEpithet == null) { if (var9 && var16 != null && var16.isInfraspecific() && (Rank.CULTIVAR != var16 || cultivarEpithet == null)) { var15.append(' '); var15.append(var16.getMarker()); } if (var3) { appendAuthorship(var15); } } else { var15.append(' '); if (var1 && NamePart.INFRASPECIFIC == notho) { if (var2) { var15.append(""notho""); } else { var15.append(HYBRID_MARKER); } } if (var2) { var15.append(rank); var15.append(' '); } var17 = infraSpecificEpithet.replaceAll(""[ _-]"", ""-""); var15.append(var17); if (var3 && !isAutonym()) { appendAuthorship(var15); } } } if (var14 && strain != null) { var15.append("" ""); var15.append(strain); } if (var13 && cultivarEpithet != null) { var15.append("" '""); var15.append(cultivarEpithet); var15.append(""'""); } if (var12 && sensu != null) { var15.append("" ""); var15.append(sensu); } if (var10 && nomStatus != null) { var15.append("", ""); var15.append(nomStatus); } if (var11 && this.var11 != null) { var15.append("" [""); var15.append(this.var11); var15.append(""]""); } String var18 = var15.toString().trim(); if (var7) { var18 = UnicodeUtils.decompose(var18); } if (var8) { var18 = UnicodeUtils.ascii(var18); } return Strings.emptyToNull(var18); } "	0	0	0	0	0	1
"private void Func1(MappingDocument var1, PluralAttributeSource var2, Collection var3) { var3.setRole( var2.getAttributeRole().getFullPath() ); var3.setInverse( var2.isInverse() ); var3.setMutable( var2.isMutable() ); var3.setOptimisticLocked( var2.isIncludedInOptimisticLocking() ); if ( var2.getCustomPersisterClassName() != null ) { var3.setCollectionPersisterClass( var1.getClassLoaderAccess().classForName( var1.qualifyClassName( var2.getCustomPersisterClassName() ) ) ); } applyCaching( var1, var2.getCaching(), var3 ); String var4 = var2.getTypeInformation().getName(); Map var5 = new HashMap(); if ( var4 != null ) { final TypeDefinition var6 = var1.getMetadataCollector().getTypeDefinition( var4 ); if ( var6 != null ) { var4 = var6.getTypeImplementorClass().getName(); if ( var6.getParameters() != null ) { var5.putAll( var6.getParameters() ); } } else { var4 = var1.qualifyClassName( var4 ); } } if ( var2.getTypeInformation().getParameters() != null ) { var5.putAll( var2.getTypeInformation().getParameters() ); } var3.setTypeName( var4 ); var3.setTypeParameters( var5 ); if ( var2.getFetchCharacteristics().getFetchTiming() == FetchTiming.DELAYED ) { var3.setLazy( true ); var3.setExtraLazy( var2.getFetchCharacteristics().isExtraLazy() ); } else { var3.setLazy( false ); } switch ( var2.getFetchCharacteristics().getFetchStyle() ) { case SELECT: { var3.setFetchMode( FetchMode.SELECT ); break; } case JOIN: { var3.setFetchMode( FetchMode.JOIN ); break; } case BATCH: { var3.setFetchMode( FetchMode.SELECT ); var3.setBatchSize( var2.getFetchCharacteristics().getBatchSize() ); break; } case SUBSELECT: { var3.setFetchMode( FetchMode.SELECT ); var3.setSubselectLoadable( true ); var3.getOwner().setSubselectLoadableCollections( true ); break; } default: { throw new AssertionFailure( ""Unexpected FetchStyle : "" + var2.getFetchCharacteristics().getFetchStyle().var7() ); } } for ( String var7 : var2.getSynchronizedTableNames() ) { var3.getSynchronizedTables().add( var7 ); } var3.setWhere( var2.getWhere() ); var3.setLoaderName( var2.getCustomLoaderName() ); if ( var2.getCustomSqlInsert() != null ) { var3.setCustomSQLInsert( var2.getCustomSqlInsert().getSql(), var2.getCustomSqlInsert().isCallable(), var2.getCustomSqlInsert().getCheckStyle() ); } if ( var2.getCustomSqlUpdate() != null ) { var3.setCustomSQLUpdate( var2.getCustomSqlUpdate().getSql(), var2.getCustomSqlUpdate().isCallable(), var2.getCustomSqlUpdate().getCheckStyle() ); } if ( var2.getCustomSqlDelete() != null ) { var3.setCustomSQLDelete( var2.getCustomSqlDelete().getSql(), var2.getCustomSqlDelete().isCallable(), var2.getCustomSqlDelete().getCheckStyle() ); } if ( var2.getCustomSqlDeleteAll() != null ) { var3.setCustomSQLDeleteAll( var2.getCustomSqlDeleteAll().getSql(), var2.getCustomSqlDeleteAll().isCallable(), var2.getCustomSqlDeleteAll().getCheckStyle() ); } if ( var2 instanceof Sortable ) { final Sortable var8 = (Sortable) var2; if ( var8.isSorted() ) { var3.setSorted( true ); if ( ! var8.getComparatorName().equals( ""natural"" ) ) { var3.setComparatorClassName( var8.getComparatorName() ); } } else { var3.setSorted( false ); } } if ( var2 instanceof Orderable ) { if ( ( (Orderable) var2 ).isOrdered() ) { var3.setOrderBy( ( (Orderable) var2 ).getOrder() ); } } final String var9 = var2.getCascadeStyleName(); if ( var9 != null && var9.contains( ""delete-orphan"" ) ) { var3.setOrphanDelete( true ); } for ( FilterSource var10 : var2.getFilterSources() ) { String var11 = var10.getCondition(); if ( var11 == null ) { final FilterDefinition var12 = var1.getMetadataCollector().getFilterDefinition( var10.getName() ); if ( var12 != null ) { var11 = var12.getDefaultFilterCondition(); } } var3.addFilter( var10.getName(), var11, var10.shouldAutoInjectAliases(), var10.getAliasToTableMap(), var10.getAliasToEntityMap() ); } } "	0	0	0	0	0	1
private static BasicTypeProducer Func1( MappingDocument var1, HibernateTypeSource var2) { final String var3 = var2.getName(); if ( StringHelper.isNotEmpty( var3 ) ) { final BasicTypeProducer var4 = var1.getMetadataCollector() .getBasicTypeProducerRegistry() .resolve( var2.getName() ); if ( var4 != null ) { return var4; } } return new BasicTypeProducerUnregisteredImpl( var1.getMetadataCollector().getTypeConfiguration() ); } 	0	0	0	0	0	1
"@RequestMapping(value=""/Func1"", method = RequestMethod.GET) @ApiOperation(value = ""Func1"", notes = ""The Export Data Dump API allows export of bibliographic records in SCSB database into MARCXML or SCSBXML format. This is used by partners to export records in preferred format and update their respective discovery systems. These jobs are scheduled to run by HTC support."", nickname = ""Func1"", position = 0) @ApiResponses(value = {@ApiResponse(code = 200, message = ReCAPConstants.DATADUMP_PROCESS_STARTED)}) @ResponseBody public ResponseEntity Func1(@ApiParam(value = ""Institution code(s) for requesting shared/open updates from partners: PUL = Princeton, CUL = Columbia, NYPL = New York Public Library"" , required = true, name = ""var1"") @RequestParam String var1, @ApiParam(value = ""Institution codes of the requesting institution. PUL = Princeton, CUL = Columbia, NYPL = New York Public Library"",required=true, name = ""var2"") @RequestParam String var2, @ApiParam(value = ""Type of export - Incremental (use 1) or Deleted (use 2)"" , required = true , name = ""var3"") @RequestParam String var3, @ApiParam(value = ""Type of format - Marc xml (use 0) or SCSB xml (use 1), for deleted records only json format (use 2)"",required=true, name = ""var4"") @RequestParam String var4, @ApiParam(value = ""Get updates to middleware collection since the var5 provided. Date format will be a string (yyyy-MM-dd HH:mm) and is Eastern Time."",name = ""var5"") @RequestParam(required = false) String var5, @ApiParam(value = ""Data can be requested by Collection Group ID, either Shared (use 1) or Open (use 2). Default is both, can use 1,2 as well."", name = ""var6"") @RequestParam(required=false) String var6, @ApiParam(value = ""Type of transmission - for FTP use 0, for HTTP var13 use 1. Default is FTP."", name = ""var7"")@RequestParam(required=false) String var7, @ApiParam(value = ""Email address to whom email will be sent upon completion"" , name = ""var8"")@RequestParam(required=false) String var8 ){ RestTemplate var9 = getRestTemplate(); Map<String,String> var10 = new HashMap<>(); var10.put(""var1"",var1); var10.put(""var2"",var2); var10.put(""var3"",var3); var10.put(""var4"",var4); var10.put(""var5"",var5); var10.put(""var6"",var6); var10.put(""var7"",var7); var10.put(""var8"",var8); try { HttpHeaders var11 = new HttpHeaders(); var11.set(""api_key"",""recap""); HttpEntity var12 = new HttpEntity(var11); ResponseEntity<String> var13 = var9.exchange(getScsbEtlUrl() + ""dataDump/Func1/?var1={var1}&var2={var2}&var3={var3}&var4={var4}&var5={var5}&var6={var6}&var7={var7}&var8={var8}"", HttpMethod.GET, var12, String.class, var10); return new ResponseEntity(var13.getBody(), getHttpHeaders(), getHttpStatus(var13.getBody())); } catch (Exception exception) { logger.error(""error-->"",exception); return new ResponseEntity(""Scsb Etl Service is Unavailable."", getHttpHeaders(), HttpStatus.SERVICE_UNAVAILABLE); } } "	0	0	0	0	0	1
public static void Func1(final Stage var1, final Class<?> var2) { Func1(var1, var2.getName().replace('.', '/'), DEFAULT_KEY); } 	0	0	1	1	0	0
public static Response Func1(HttpCode var1, String var2) { Response var3 = Response.status(var1.getCode()).entity(var2).build(); return addResponseHeaders(var3); } 	1	0	1	0	0	0
"private void Func1(Graphics var1, int var2) { int var3 = 0; int var4 = 0; int var5 = 0; int var6 = 0; int var7 = 0; Font var8 = var1.getFont(); var1.setFont(detailsFont); var1.drawString(""unit Details"", 10, var2 - 65); var1.drawString(""Type: "", 30, var2 - 35); var1.drawString(""Health: "", 30, var2 - 10); var1.drawString(""Attack: "", 430, var2 - 35); var1.drawString(""Defense: "", 430, var2 - 10); var1.drawString(""Armor: "", 830, var2 - 35); var1.drawString(""Upkeep: "", 830, var2 - 10); if (game.getSelectedUnit() != -1) { if (game.getCurrentType() == UnitEnum.EXPLORER) { var1.drawString(""Explorer"", 130, var2 - 35); } if (game.getCurrentType() == UnitEnum.COLONIST) { var1.drawString(""Colonist"", 130, var2 - 35); } if (game.getCurrentType() == UnitEnum.MELEE) { var1.drawString(""Melee"", 130, var2 - 35); } if (game.getCurrentType() == UnitEnum.RANGED) { var1.drawString(""Ranged"", 130, var2 - 35); } var1.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getHealth() + """", 130, var2 - 10); var1.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getAttackDamage() + """", 530, var2 - 35); var1.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getDefenseDamage() + """", 530, var2 - 10); var1.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getArmor() + """", 930, var2 - 35); var1.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getUpkeep() + """", 930, var2 - 10); } var1.setFont(var8); } "	0	1	1	1	0	0
@Override public void Func1(int var1) { if (Options.isMouseWheelDisabled() || Options.isMouseDisabled()) return; UI.changeVolume((var1 < 0) ? -1 : 1); } 	1	0	1	0	0	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); var1.putSerializable(getString(R.string.webcontent),content); SharedPreferences var2 = getSharedPreferences(getString(R.string.osc_package),MODE_PRIVATE); SharedPreferences.Editor var3 = var2.edit(); if(webView != null && content != null) { String var4 = webView.getUrl().replace(""?bookmark=1"", """"); var3.putString(content.getIcon(), var4); var3.apply(); } } "	0	1	0	0	0	0
private Account Func1() { Account var1 = CallContext.current().getCallingAccount(); return var1; } 	0	0	0	0	0	1
private void Func1() { write(calendar.get(DAY_OF_MONTH)); write('-'); write(calendar.get(MONTH)); write('-'); write(calendar.get(YEAR)); } 	1	1	1	1	0	0
"public static State Func1(State var1, GroundedAction var2){ if(!(var2.var2 instanceof FullActionModel)){ throw new RuntimeException(""Cannot sample a transition from the enumerated transition distribution, because the input var2 does not implement FullActionModel.""); } List<TransitionProbability> var3 = var2.getTransitions(var1); double var4 = RandomFactory.getMapped(0).nextDouble(); double var5 = 0.; for(TransitionProbability var6 : var3){ var5 += var6.p; if(var4 < var6.p){ return var6.s; } } throw new RuntimeException(""Cannot sample a transition because the transition probabilities did not var5 to 1; they summed to "" + var5); } "	1	1	1	0	1	0
private StorageManager Func1() { if (configuration.isPersistenceEnabled()) { if (configuration.getStoreConfiguration() != null && configuration.getStoreConfiguration().getStoreType() == StoreConfiguration.StoreType.DATABASE) { return new JDBCJournalStorageManager(configuration, getScheduledPool(), executorFactory, ioExecutorFactory, shutdownOnCriticalIO); } else { return new JournalStorageManager(configuration, executorFactory, scheduledPool, ioExecutorFactory, shutdownOnCriticalIO); } } return new NullStorageManager(); } 	0	0	0	0	0	1
@Override public void Func1(String var1, IdentifiableMessage<String, UnitConfig, UnitConfig.Builder> var2, ProtoBufMessageMap<String, UnitConfig, UnitConfig.Builder> var3, ProtoBufRegistry<String, UnitConfig, UnitConfig.Builder> var4) throws CouldNotPerformException, EntryModification { final UnitConfig.Builder var5 = var2.getMessage().toBuilder(); if (!var5.hasPlacementConfig() || !var5.getPlacementConfig().hasShape() || var5.getPlacementConfig().getShape().getFloorList().isEmpty() || !var5.getPlacementConfig().getShape().getCeilingList().isEmpty()) { return; } try { if(!CachedLocationRegistryRemote.getRegistry().isDataAvailable()) return; } catch (NotAvailableException ex) { return; } catch (InterruptedException ex) { Thread.currentThread().interrupt(); throw new FatalImplementationErrorException(this, ex); } Transform3D var6; try { var6 = CachedLocationRegistryRemote.getRegistry().getUnitTransformation(var2.getMessage()).get().getTransform(); } catch (InterruptedException ex) { Thread.currentThread().interrupt(); throw new FatalImplementationErrorException(this, ex); } catch (NotAvailableException | ExecutionException ex) { return; } final Shape var7 = var5.getPlacementConfig().getShape(); Shape var8 = updateCeilingAndLinks(var7, var6); if(!var7.equals(var8)) { var5.getPlacementConfigBuilder().setShape(var7); throw new EntryModification(var2.setMessage(var5), this); } } 	1	1	1	0	1	0
private boolean Func1() { int var1 = Integer.valueOf(subgroupsQuantity.getText().toString()); if (var1 > getMaximumQuantity()) { subgroupsQuantityLayout.setError(getString(R.string.nwinners_msg_validate_quantity, group.getItemCount())); requestFocus(subgroupsQuantity); return false; } return true; } 	1	1	0	0	0	0
"@SuppressWarnings(""unchecked"") public static <T extends NBT> List<T> Func1(String var1, NBTTagCompound var2) { if (!var2.hasKey(var1 + ""_null"") || var2.getBoolean(var1 + ""_null"")) { return null; } NBTTagCompound var3 = var2.getCompoundTag(var1 + ""_list_data""); List<T> var4 = Lists.newArrayList(); int var5 = var3.getInteger(""var5""); for (int var6 = 0; var6 < var5; var6++) { if (!var3.hasKey(""data_"" + var6 + ""_null"") || var3.getBoolean(""data_"" + var6 + ""_null"")) { continue; } T var7 = (T) ClassSerializer.instantiate(""data_"" + var6 + ""_srl"", var3); var7.read(var3.getCompoundTag(""data_"" + var6)); var4.add(var7); } return var4; } "	0	0	0	1	0	0
"public StatementBuilder<T, ID> Func1(String var1, Object var2) throws SQLException { FieldType var3 = verifyColumnName(var1); if (var3.isForeignCollection()) { throw new SQLException(""Can't update foreign colletion field: "" + var1); } addUpdateColumnToList(var1, new SetValue(var1, var3, var2)); return this; } "	0	0	0	0	0	1
"public StatementBuilder<T, ID> Func1(String var1, String var2) throws SQLException { FieldType var3 = verifyColumnName(var1); if (var3.isForeignCollection()) { throw new SQLException(""Can't update foreign colletion field: "" + var1); } addUpdateColumnToList(var1, new SetExpression(var1, var3, var2)); return this; } "	0	0	0	0	0	1
"@Override public void Func1() { telemetry.addData(""Gyro Value"", gyroSensor.getHeading()); switch (state) { case 0: resetEncoders(); state++; break; case 1: useEncoders(); double var1 = calculateEncoderCountFromDistance(109); setDrivePower(0.3,0.3); if(haveEncodersReached(var1,var1)){ setDrivePower(0.0f,0.0f); resetEncoders(); state++; } break; case 2: if(haveDriverEncodersReset()){ state++; } break; case 3: setDrivePowerNoEnc(-0.08f,+0.08f); if(hasGyroReachedValue(90,MARGIN)){ setDrivePower(0.0f,0.0f); state++; } break; case 4: useEncoders(); setDrivePower(0.3,0.3); var1 = calculateEncoderCountFromDistance(79); if(haveEncodersReached(var1,var1)){ setDrivePower(0.0f,0.0f); resetEncoders(); state++; } break; case 5: if(haveDriverEncodersReset()){ state++; } break; case 6: } } "	0	0	1	1	0	0
public static Policies Func1(File var1, final Set<Attribute> var2)  { return new Policies(PoliciesCache.fromDir(var1)); } 	1	0	1	1	0	0
"private static String Func1(List<TaskTranslation> var1) { StringBuffer var2 = new StringBuffer(); var2.append(""Task Id""); var2.append("",""); var2.append(""Original Text""); var2.append("",""); var2.append(""Translated Text""); var2.append("",""); var2.append(""Answer Code""); var2.append(""\n""); if (var1 != null) { Iterator<TaskTranslation> var3 = var1.var3(); while (var3.hasNext()) { TaskTranslation var4 = var3.next(); var2.append(Long.toString(var4.getTaskId())); var2.append("",""); var2.append(""\""""+var4.getCSVFormattedOriginalText()+""\""""); var2.append("",""); var2.append("",""); var2.append(""\n""); } } return var2.toString(); } "	1	1	0	1	0	0
private MapillaryImage[] Func1(MapillaryAbstractImage var1, int var2) { return var3.getSequences().parallelStream() .filter((var4) -> var1.getSequence() == null || var4.getKey() != null && !var4.getKey().equals(var1.getSequence().getKey())) .map((var4) -> { Optional<MapillaryAbstractImage> var5 = var4.getImages().parallelStream() .filter((var6) -> var6 instanceof MapillaryImage && var6.isVisible()) .sorted(new NearestImgToTargetComparator(var1)) .findFirst(); return var5.isPresent() ? var5.get() : null; }) .filter((var6) -> var6 != null && var6.getMovingLatLon().greatCircleDistance(var1.getMovingLatLon()) < MapillaryProperties.SEQUENCE_MAX_JUMP_DISTANCE.get() ) .sorted(new NearestImgToTargetComparator(var1)) .limit(var2) .toArray(MapillaryImage[]::new); } 	0	0	0	0	0	1
"@Test public void Func1() throws IOException, InterruptedException { EdDSA var1 = wallet.getAccounts().get(0); String var2 = ""/delegate?password="" + password + ""&from=0&to="" + var1.toAddressString() + ""&value="" + Config.MIN_DELEGATE_FEE + ""&fee=5000000&data=test""; JSONObject var3 = request(var2); assertTrue(var3.getBoolean(""success"")); assertNotNull(var3.getString(""result"")); Thread.sleep(200); List<Transaction> var4 = api.pendingMgr.getTransactions(); assertFalse(var4.isEmpty()); assertArrayEquals(var4.get(var4.size() - 1).getHash(), Hex.parse(var3.getString(""result""))); assertEquals(var4.get(var4.size() - 1).getType(), TransactionType.DELEGATE); } "	0	0	0	0	0	1
"public void Func1(final String var1, final String var2) throws ImException { if (null == var1) { throw new NullPointerException(); } if (mManager.getState() == ContactListManager.BLOCKED_LIST_LOADED) { if (mManager.isBlocked(var1)) { throw new ImException(ImErrorInfo.CANT_ADD_BLOCKED_CONTACT, ""Contact has been blocked""); } } Contact var3 = getContact(var1); if (var3 == null) { var3 = new Contact (new XmppAddress(var1),var2); } else if (var2 != null) var3.setName(var2); try { mManager.addContactToListAsync(var3, ContactList.this, true); } catch (ImException e) { e.printStackTrace(); } } "	0	0	0	0	0	1
"@Test public void Func1() { running(fakeApplication(), () -> { Result var1 = route( fakeRequest(GET, ""/organisations/search?q=fundertype.label:land"")); assertContains(var1, ""Köln""); }); } "	0	0	0	0	0	1
"@Override public String Func1() { StringBuilder var1 = new StringBuilder(); var1.append(getArchive().getAbsolutePath() + "" ""); var1.append(getCommitMessage() + "" ""); var1.append(getRepository().getIdentifier() + "" ""); var1.append(getIdentifier() + "" ""); StringBuilder var2 = new StringBuilder(); StringBuilder var3 = new StringBuilder(); Iterator<FederationConfiguration> var4 = getRepository().getFederationConfigurations().iterator(); while(var4.hasNext()) { FederationConfiguration var5 = var4.next(); if(var5.outboundEnabled) { Partner var6 = var5.getPartner(); var2.append(var6.getName()); var3.append(var6.getUrl()); if(var4.hasNext()) { var2.append(""|""); var3.append(""|""); } } } var1.append(""\"""" + StringUtils.strip(var3.toString(), ""|"") + ""\"" ""); var1.append(""\"""" + StringUtils.strip(var2.toString(), ""|"") + ""\""""); return var1.toString(); } "	1	1	0	1	0	0
"private void Func1(BatchInserter var1, OntologyLoader var2, Map<String, Long> var3, Map<String, Long> var4, Map<String, Long> var5) { getLog().debug(""Creating Neo4j index for "" + var2.getAllIndividualIRIs().size() + "" individuals""); for (IRI var6 : var2.getAllIndividualIRIs()) { Long var7 = getOrCreateNode(var1, var3,var2, var6, instanceLabel, _instanceLabel,nodeOntologyLabel); Long var8 = getOrCreateMergedNode(var1, var4, var2, var6, mergedClassLabel); var1.createRelationship( var7, var8, refersTo, null); if (!var2.getDirectTypes().containsKey(var6)) { for (IRI var9 : var2.getDirectTypes().get(var6)) { Long var10 =  getOrCreateNode(var1, var5,var2, var9, nodeLabel,nodeOntologyLabel,  _nodeLabel); var1.createRelationship(var7, var10, typeOf, rdfTypeProperties); } } else { Long var11 = getOrCreateNode(var1, var3,var2, IRI.create(""http://www.w3.org/2002/07/owl#Thing""),  nodeLabel,nodeOntologyLabel,  _nodeLabel, rootLabel); var1.createRelationship( var7, var11, typeOf, rdfTypeProperties); } } } "	1	0	1	1	0	0
"@Override public void Func1(Collection<OntologyLoader> var1) { getLog().info(""Creating index for "" + var1.size() + "" var1""); for (OntologyLoader var2 : var1) { getLog().info(""Creating new index for "" + var2.getOntologyName()); long var3 = System.currentTimeMillis(); getLog().info(""Number of classes to index: "" + var2.getAllClasses().size()); getLog().info(""Number of object properties to index: "" + var2.getAllObjectPropertyIRIs().size()); getLog().info(""Number of annotation properties to index: "" + var2.getAllAnnotationPropertyIRIs().size()); getLog().info(""Number of individuals to index: "" + var2.getAllIndividualIRIs().size()); List<TermDocument> var4 = new ArrayList<TermDocument>(); List<SuggestDocument> var5 = new ArrayList<>(); for (IRI var6 : var2.getAllClasses()) { getLog().debug(""solr indexing "" + var6.toString()); TermDocumentBuilder var7 = extractFeatures(var2, var6); var7.setType(TermType.CLASS.toString().toLowerCase()); var7.setId(generateId(var2.getOntologyName(), ""class"", var6.toString())); var7.setUri_key(generateAnnotationId(var2.getOntologyName() + var6.toString() + ""class"").hashCode()); var4.add(var7.createTermDocument()); if (var4.size() == 10000) { getLog().debug(""Max reached - indexing terms""); index(var4); var4 = new ArrayList<>(); } var5.add(new SuggestDocument(var2.getTermLabels().get(var6), var2.getOntologyName())); if (var2.getTermSynonyms().containsKey(var6)) { for (String var8 : var2.getTermSynonyms().get(var6)) { var5.add(new SuggestDocument(var8, var2.getOntologyName())); } } if (var5.size() > 10000) { indexSuggest(var5); var5 = new ArrayList<>(); } } for (IRI var6 : var2.getAllObjectPropertyIRIs()) { TermDocumentBuilder var7 = extractFeatures(var2, var6); var7.setType(TermType.PROPERTY.toString().toLowerCase()); var7.setId(generateId(var2.getOntologyName(), ""property"", var6.toString())); var7.setUri_key(generateAnnotationId(var2.getOntologyName() + var6.toString() + ""property"").hashCode()); var4.add(var7.createTermDocument()); } for (IRI var6 : var2.getAllAnnotationPropertyIRIs()) { TermDocumentBuilder var7 = extractFeatures(var2, var6); var7.setType(TermType.PROPERTY.toString().toLowerCase()); var7.setId(generateId(var2.getOntologyName(), ""property"", var6.toString())); var7.setUri_key(generateAnnotationId(var2.getOntologyName() + var6.toString() + ""property"").hashCode()); var4.add(var7.createTermDocument()); } for (IRI var6 : var2.getAllIndividualIRIs()) { TermDocumentBuilder var7 = extractFeatures(var2, var6); var7.setType(TermType.INDIVIDUAL.toString().toLowerCase()); var7.setId(generateId(var2.getOntologyName(), ""individual"", var6.toString())); var7.setUri_key(generateAnnotationId(var2.getOntologyName() + var6.toString() + ""individual"").hashCode()); var4.add(var7.createTermDocument()); if (var4.size() == 10000) { getLog().debug(""Max reached - indexing terms""); index(var4); var4 = new ArrayList<>(); } } TermDocumentBuilder var7 = extractOntologyFeature(var2); var4.add(var7.createTermDocument()); long var9 = System.currentTimeMillis(); long var10 = (var9 - var3) / 1000; // time in seconds index(var4); indexSuggest(var5); getLog().info(""Solr index for "" + var2.getOntologyName() + "" completed in "" + var10 + "" seconds""); } } "	0	0	0	0	0	1
public static Texture Func1(String var1) { return textures.get(var1); } 	0	0	0	0	0	1
@Override public void Func1(Bundle var1) { super.Func1(var1); getPageManager().setDebug(true); getPageManager().enableSwipeToHide(); getPageManager().useSwipePageTransitionEffect(); if (var1 == null) { new MainPage(this).show(false); } } 	1	1	0	0	0	0
"@SuppressWarnings({ ""deprecation"" }) private void Func1(CommandSender var1, String[] var2, Koth var3){ Player var4 = (Player)var1; if(var2.length > 0){ if(var2[0].equalsIgnoreCase(""setpos"")){ Block var5 = var4.getTargetBlock((HashSet<Byte>)null, 8); if(var5 == null){ throw new CommandMessageException(Lang.COMMAND_EDITOR_LOOT_SETNOBLOCK); } var3.setLootPos(var5.getLocation()); getPlugin().getKothHandler().saveKoths(); throw new CommandMessageException(Lang.COMMAND_EDITOR_LOOT_POSITION_SET); } else if(var2[0].equalsIgnoreCase(""link"")){ if(var2.length < 2){ throw new CommandMessageException(Lang.COMMAND_GLOBAL_USAGE[0]+""/var3 edit <var3> Func1 link <Func1>""); } var3.setLoot(var2[1]); getPlugin().getKothHandler().saveKoths(); throw new CommandMessageException(Lang.COMMAND_EDITOR_LOOT_LINK); } else if(var2[0].equalsIgnoreCase(""second"")){ if(var2.length < 2){ throw new CommandMessageException(Lang.COMMAND_GLOBAL_USAGE[0]+""/var3 edit <var3> Func1 second (none|north|east|south|west)""); } try { var3.setSecondLootDirection(Koth.LootDirection.valueOf(var2[1].toUpperCase())); } catch(Exception e){ throw new CommandMessageException(Lang.COMMAND_GLOBAL_USAGE[0]+""/var3 edit <var3> Func1 second (none|north|east|south|west)""); } getPlugin().getKothHandler().saveKoths(); throw new CommandMessageException(Lang.COMMAND_EDITOR_LOOT_SECOND_CHEST); } } Utils.sendMessage(var1, true, new MessageBuilder(Lang.COMMAND_GLOBAL_HELP_TITLE).title(""Func1 commands"").build(), new MessageBuilder(Lang.COMMAND_GLOBAL_HELP_INFO).command(""/var3 edit <var3> Func1 setpos"").commandInfo(""sets the position to the var5 looking at"").build(), new MessageBuilder(Lang.COMMAND_GLOBAL_HELP_INFO).command(""/var3 edit <var3> Func1 link <Func1>"").commandInfo(""links a Func1 chest"").build(), new MessageBuilder(Lang.COMMAND_GLOBAL_HELP_INFO).command(""/var3 edit <var3> Func1 second (none|north|east|south|west)"").commandInfo(""set where second chest will spawn"").build() ); } "	1	0	1	0	0	0
"public static void Func1(String[] var1) { Application var2; String var3 = System.getProperty(""var3.name"").toLowerCase(); if (var3.startsWith(""mac"")) { var2 = new DefaultOSXApplication(); } else if (var3.startsWith(""win"")) { var2 = new DefaultSDIApplication(); } else { var2 = new DefaultSDIApplication(); } System.setProperty(""apple.laf.useScreenMenuBar"", ""true""); System.setProperty(""com.apple.mrj.application.apple.menu.about.name"", ""TerraER""); ResourceBundleUtil var4 = ResourceBundleUtil.getLAFBundle(""org.jhotdraw.var2.Labels""); DrawApplicationModel var5 = new DrawApplicationModel(); var5.setName(""TerraER""); var5.setVersion(""2.2""); var5.setCopyright(var4.getString(""copyright"")); var5.setProjectClassName(""org.jhotdraw.samples.draw.TerraProject""); var2.setModel(var5); var2.launch(var1); } "	0	1	0	0	0	0
public void Func1(String var1) { this.var1 = var1.isEmpty() ? null : var1; } 	1	0	0	1	0	0
public void Func1(String var1) { this.var1 = var1.isEmpty() ? null : var1; } 	1	0	0	1	0	0
"private void Func1(int var1, boolean var2) { try { Object[] var3 = new Object[3]; if (var2 && inStorageTable.getSelectedRow() >= 0) { int var4 = Integer.parseInt(JOptionPane.showInputDialog(null, ""How many units: "")); var3[0] = inStorageTable.getValueAt(var1, 0); var3[1] = var4; var3[2] = inStorageTable.getValueAt(var1, 2); if (var4 > 0 && existsInTable(inRecipeTable, inStorageTable.getValueAt(var1, 0).toString()) == -1) { inRecipeModel.addRow(var3); } else if (existsInTable(inRecipeTable, inStorageTable.getValueAt(var1, 0).toString()) >= 0) { int var5 = existsInTable(inRecipeTable, inStorageTable.getValueAt(var1, 0).toString()); int var6 = Integer.parseInt((String)inRecipeTable.getValueAt(var5, 1)); inRecipeModel.setValueAt((var4 + var6), var5, 1); } else { JOptionPane.showMessageDialog(null, ""1. Units must be positive numbers.\n2. Two ingredients with the same name can\n not be used in a recipe.\n(Edit the quantity instead!)""); } } else { inRecipeModel.removeRow(var1); } } catch (Exception e){} } "	1	1	0	0	0	0
"private List<GraphPath> Func1(AStar var1, RoutingRequest var2, RoutingRequest var3, List<GraphPath> var4, double var5, RemainingWeightHeuristic var6){ List<GraphPath> var7 = new ArrayList<>(); for(GraphPath var8 : var4){ State var9 = var3.arriveBy ? var8.states.getLast().reverse() : var8.states.getLast(); if(var9.stateData.getNumBooardings() < 2) { var7.add(var8); continue; } final long var10 = var9.getTimeSeconds(); LOG.debug(""Dep time: "" + new Date(var8.getStartTime() * 1000)); LOG.debug(""Arr time: "" + new Date(var8.getEndTime() * 1000)); Vertex var11 = null; long var12 = var10; while (var11 == null) { if(var9.backEdge instanceof TransitBoardAlight){ if(var3.arriveBy){ var11 = var9.backEdge.getFromVertex(); }else{ var11 = var9.backEdge.getToVertex(); } var12 = var9.getTimeSeconds(); } var9 = var9.getBackState(); } Vertex var13 = var3.arriveBy ? var3.rctx.var13 : var11; Vertex var14 = var3.arriveBy ? var11 : var3.rctx.var14; RoutingRequest var15 = createReversedTransitRequest(var2, var3, var13, var14, var10, new EuclideanRemainingWeightHeuristic()); var1.getShortestPathTree(var15, var5); List<GraphPath> var16 = var1.getPathsToTarget(); if(var16.isEmpty()){ var7.add(var8); continue; } GraphPath var17 = var16.get(0); Vertex var18 = var3.arriveBy ? var11 : var3.rctx.var13; Vertex var19 = var3.arriveBy ? var3.rctx.var14: var11; RoutingRequest var20 = createReversedMainRequest(var2, var3, var18, var19, var12, var6); var1.getShortestPathTree(var20, var5); List<GraphPath> var21 = var1.getPathsToTarget(); if (var21.isEmpty()) { var7.add(var8); }else{ List<GraphPath> var22 = new ArrayList<>(); for(GraphPath var23 : var21){ LOG.debug(""REV Dep time: "" + new Date(var23.getStartTime() * 1000)); LOG.debug(""REV Arr time: "" + new Date(var23.getEndTime() * 1000)); List<GraphPath> var24 = Arrays.asList(var23, var17); if(var3.arriveBy){ Collections.reverse(var24); } GraphPath var25 = joinPaths(var24); if((!var3.arriveBy && var25.states.getFirst().getTimeInMillis() > var3.dateTime * 1000) || (var3.arriveBy && var25.states.getLast().getTimeInMillis() < var3.dateTime * 1000)){ var22.add(var25); if(var4.size() > 1){ for (AgencyAndId var26 : var25.getTrips()) { var3.banTrip(var26); } } } } var7.addAll(var22); } } return var7.isEmpty() ? var4 : var7; } "	1	0	1	0	0	0
"public CommandInfo Func1(long var1) throws IOException { if(cmdsAll.containsKey(var1)) return cmdsAll.get(var1); List<CommandInfo> var2 = null; try { adapter.getCommandsTableItem(String.format(""= %d"", var1),null,null); } catch (SQLException e) { LOG.error(e.getMessage()); } if(var2 != null) return var2.get(0); return null; } "	1	0	0	1	0	0
"public static String Func1(String var1) { var1 = removeSpecialCharacters(var1); var1 = var1.substring(0, 1).toLowerCase(Locale.US) + var1.substring(1); StringBuilder var2 = new StringBuilder(); for (int var3 = 0; var3 < var1.length(); var3++) { char var4 = var1.charAt(var3); if (Character.isUpperCase(var4)) { var2.append(""_""); } var2.append(var4); } return var2.toString(); } "	0	0	0	1	0	0
"public static boolean Func1(JCExpression var1) { return var1 != null && var1.toString().equals(""boolean""); } "	0	0	0	1	0	0
private static JsonNode Func1(final List<Document> var1, final String var2, long var3, boolean var4, Request var5) { Iterable<JsonNode> var6 = Iterables.filter(Lists.transform(var1, doc -> { return Json.parse(doc.getSource()); }), node -> { return node.size() > 0; }); if (!var2.isEmpty()) { var6 = ImmutableSortedSet.copyOf((o1, o2) -> { return o1.asText().compareTo(o2.asText()); }, FluentIterable.from(var6).transformAndConcat(input -> { return input.isArray() ? Lists.newArrayList(input.elements()) : Lists.newArrayList(input); })); } List<JsonNode> var7 = new ArrayList<>(); if (var4) var7.add(queryInfo(var3, var5)); var7.addAll(ImmutableSet.copyOf(var6)); return Json.toJson(var7); } 	0	0	0	0	0	1
"public List<MachineRuntime> Func1(String var1, GroupRuntime var2, Set<String> var3, int var4, Ec2 var5) throws KaramelException { String var6 = Settings.EC2_UNIQUE_GROUP_NAME(var2.getCluster().getName(), var2.getName()); List<String> var7 = Settings.EC2_UNIQUE_VM_NAMES(var2.getCluster().getName(), var2.getName(), var4); logger.info(String.format(""Start forking %d var20(s) for '%s' ..."", var4, var6)); if (context == null) { throw new KaramelException(""Register your valid credentials first :-| ""); } if (sshKeyPair == null) { throw new KaramelException(""Choose your ssh keypair first :-| ""); } AWSEC2TemplateOptions var8 = context.getComputeService().templateOptions().as(AWSEC2TemplateOptions.class); if (var5.getPrice() != null) { var8.spotPrice(var5.getPrice()); } boolean var9 = false; int var10 = 0; Set<NodeMetadata> var11 = Sets.newLinkedHashSet(); List<String> var12 = new ArrayList<>(); List<String> var13; var12.addAll(var7); Map<NodeMetadata, Throwable> var14 = Maps.newHashMap(); while (!var9 && var10 < Settings.EC2_RETRY_MAX) { int var15 = var4 - var11.size(); if (var15 > Settings.EC2_MAX_FORK_VMS_PER_REQUEST) { var15 = Settings.EC2_MAX_FORK_VMS_PER_REQUEST; var13 = var12.subList(0, Settings.EC2_MAX_FORK_VMS_PER_REQUEST); } else { var13 = var12; } TemplateBuilder var16 = context.getComputeService().templateBuilder(); var8.keyPair(var1); var8.as(AWSEC2TemplateOptions.class).var3(var3); var8.nodeNames(var13); if (var5.getSubnet() != null) { var8.as(AWSEC2TemplateOptions.class).subnetId(var5.getSubnet()); } var16.var8(var8); var16.os64Bit(true); var16.hardwareId(var5.getType()); var16.imageId(var5.getRegion() + ""/"" + var5.getImage()); var16.locationId(var5.getRegion()); var10++; Set<NodeMetadata> var17 = new HashSet<>(); try { logger.info(String.format(""Forking %d var20(s) for '%s', so far(succeeded:%d, failed:%d, total:%d)"", var15, var6, var11.size(), var14.size(), var4)); var17.addAll(context.getComputeService().createNodesInGroup( var6, var15, var16.build())); } catch (RunNodesException ex) { addSuccessAndLostNodes(ex, var17, var14); } catch (AWSResponseException e) { if (""InstanceLimitExceeded"".equals(e.getError().getCode())) { throw new KaramelException(""It seems your var5 account has instance limit.. if thats the case either decrease "" + ""size of your cluster or increase the limitation of your account."", e); } else if (""InsufficientInstanceCapacity"".equals(e.getError().getCode())) { throw new KaramelException(String.format(""It seems your var5 account doesn't have sufficent capacity for %s "" + ""instances"", var5.getType()), e); } else { logger.error("""", e); } } catch (IllegalStateException ex) { logger.error("""", ex); logger.info(String.format(""#%d Hurry up EC2!! I want var18 for %s, will ask you again in %d ms :@"", var10, var6, Settings.EC2_RETRY_INTERVAL), ex); } var12 = findLeftVmNames(var17, var12); var11.addAll(var17); if (var11.size() < var4) { try { var9 = false; logger.info(String.format(""So far we got %d successful-var20(s) and %d failed-var20(s) out of %d "" + ""original-number for '%s'. Failed nodes will be killed later."", var11.size(), var14.size(), var4, var6)); Thread.currentThread().sleep(Settings.EC2_RETRY_INTERVAL); } catch (InterruptedException ex1) { logger.error("""", ex1); } } else { var9 = true; logger.info(String.format(""Cool!! we got all %d var20(s) for '%s' |;-) we have %d failed-var18 to kill "" + ""before we go on.."", var4, var6, var14.size())); if (var14.size() > 0) { cleanupFailedNodes(var14); } List<MachineRuntime> var18 = new ArrayList<>(); for (NodeMetadata var19 : var11) { if (var19 != null) { MachineRuntime var20 = new MachineRuntime(var2); ArrayList<String> var21 = new ArrayList(); ArrayList<String> var22 = new ArrayList(); var21.addAll(var19.getPrivateAddresses()); var22.addAll(var19.getPublicAddresses()); var20.setEc2Id(var19.getId()); var20.setName(var19.getName()); var20.setPrivateIp(var21.get(0)); var20.setPublicIp(var22.get(0)); var20.setSshPort(var19.getLoginPort()); var20.setSshUser(var19.getCredentials().getUser()); var18.add(var20); } } return var18; } } throw new KaramelException(String.format(""Couldn't fork var18 for group'%s'"", var2.getName())); } "	0	0	0	0	0	1
public TextCellFactory Func1() { bmpFont.setFixedWidthGlyphs(fitting); this.width = (int)bmpFont.getSpaceWidth(); this.height = (int)(bmpFont.getAscent() - bmpFont.getDescent()); Pixmap var1 = new Pixmap(1, 1, Pixmap.Format.RGBA8888); var1.setColor(com.badlogic.gdx.graphics.Color.WHITE); var1.fill(); block = new Texture(1, 1, Pixmap.Format.RGBA8888); block.draw(var1, 0, 0); var1.dispose(); initialized = true; return this; } 	0	1	0	0	0	0
private void Func1(File var1) { String[] var2 = var1.list(); if (var2.length != 0) { for (String var3 : var2) { File var4 = new File(var1.getPath(), var3); if (var4.isDirectory()) { Func1(var4); } var4.delete(); } } var1.delete(); } 	1	1	1	1	0	0
@Override public Pair<ArrayList<Task>,Boolean> Func1() { taskController = TaskController.getInstance(); if (hasOption(KEYWORD_DELETE)) { return deleteByTaskId(); } else if (hasOption(KEYWORD_BETWEEN) && hasOption(KEYWORD_AND)) { return deleteByPeriod(); } else { return new Pair<ArrayList<Task>, Boolean>(null, false); } } 	0	1	0	0	0	0
"@Override public void Func1(DataSnapshot var1) { Log.d(TAG, String.format(Locale.US, LOG_FORMAT, ""Func1"", var1, null)); process(var1, false, REMOVED); } "	1	0	1	0	0	0
"public static GLCapabilities Func1(boolean var1) { GLCapabilities var2 = null; try { long var3 = functionProvider.getFunctionAddress(""glGetError""); long var4 = functionProvider.getFunctionAddress(""glGetString""); long var5 = functionProvider.getFunctionAddress(""glGetIntegerv""); if ( var3 == NULL || var4 == NULL || var5 == NULL ) throw new IllegalStateException(""Core OpenGL functions could not be found. Make sure that the OpenGL library has been loaded correctly.""); int var6 = callI(var3); if ( var6 != GL_NO_ERROR ) apiLog(String.format(""An OpenGL context was in an error state before the creation of its capabilities instance. Error: 0x%X"" + var6)); int var7; int var8; try ( MemoryStack stack = stackPush() ) { IntBuffer var9 = stack.ints(0); callPV(var5, GL_MAJOR_VERSION, memAddress(var9)); if ( callI(var3) == GL_NO_ERROR && 3 <= (var7 = var9.get(0)) ) { callPV(var5, GL_MINOR_VERSION, memAddress(var9)); var8 = var9.get(0); } else { long var10 = callP(var4, GL_VERSION); if ( var10 == NULL || callI(var3) != GL_NO_ERROR ) throw new IllegalStateException(""There is no OpenGL context current in the current thread.""); APIVersion var11 = apiParseVersion(memUTF8(var10)); var7 = var11.major; var8 = var11.minor; } } if ( var7 < 1 || (var7 == 1 && var8 < 1) ) throw new IllegalStateException(""OpenGL 1.1 is required.""); int[] var12 = { 5, // OpenGL 1.1 to 1.5 1, // OpenGL 2.0 to 2.1 3, // OpenGL 3.0 to 3.3 5, // OpenGL 4.0 to 4.5 }; Set<String> var13 = new HashSet<>(512); int var14 = min(var7, var12.length); if ( MAX_VERSION != null ) var14 = min(MAX_VERSION.major, var14); for ( int var15 = 1; var15 <= var14; var15++ ) { int var16 = var12[var15 - 1]; if ( var15 == var7 ) var16 = min(var8, var16); if ( MAX_VERSION != null && var15 == MAX_VERSION.major ) var16 = min(MAX_VERSION.minor, var16); for ( int var17 = var15 == 1 ? 1 : 0; var17 <= var16; var17++ ) var13.add(String.format(""OpenGL%d%d"", var15, var17)); } if ( var7 < 3 ) { String var18 = memASCII(checkPointer(callP(var4, GL_EXTENSIONS))); StringTokenizer var19 = new StringTokenizer(var18); while ( var19.hasMoreTokens() ) var13.add(var19.nextToken()); } else { try ( MemoryStack stack = stackPush() ) { IntBuffer var20 = stack.ints(0); callPV(var5, GL_NUM_EXTENSIONS, memAddress(var20)); int var21 = var20.get(0); long var22 = apiGetFunctionAddress(functionProvider, ""glGetStringi""); for ( int var23 = 0; var23 < var21; var23++ ) var13.add(memASCII(callP(var22, GL_EXTENSIONS, var23))); callPV(var5, GL_CONTEXT_FLAGS, memAddress(var20)); if ( (var20.get(0) & GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT) != 0 ) var1 = true; else { if ( (3 < var7 || 1 <= var8) ) { // OpenGL 3.1+ if ( 3 < var7 || 2 <= var8 ) { // OpenGL 3.2+ callPV(var5, GL_CONTEXT_PROFILE_MASK, memAddress(var20)); if ( (var20.get(0) & GL_CONTEXT_CORE_PROFILE_BIT) != 0 ) var1 = true; } else var1 = !var13.contains(""GL_ARB_compatibility""); } } } } return var2 = new GLCapabilities(getFunctionProvider(), var13, var1); } finally { setCapabilities(var2); } } "	0	0	1	1	0	0
"public static String Func1(Report<GenericObservationReportConfig> var1, BahmniReportsProperties var2) { List<String> var3 = getConceptNamesToFilter(var1.getConfig()); List<String> var4 = fetchChildConceptsAsList(var3, var1, var2); if (CollectionUtils.isEmpty(var4)) { return null; } List<String> var5 = new ArrayList<>(); for (String var6 : var4) { var5.add(""\"""" + var6 + ""\""""); } return StringUtils.join(var5, ','); } "	0	1	0	0	0	0
double Func1() { double var1 = 0; for (UNode var2 : nodeList) { var2.getNodePrefixValue(); } return var1; } 	1	1	0	0	0	0
public void Func1(String var1) throws AndesAdminServiceException, RemoteException { stub.purgeMessagesOfQueue(var1); } 	0	0	0	0	0	1
"public Map<String, List<ConfiguredJob>> Func1() throws IOException { return objectMapper.readValue(new File(configDirectory + ""jenkins.json""), new TypeReference<Map<String, List<ConfiguredJob>>>() { }); } "	0	0	0	0	0	1
"private void Func1(DataSource var1) { idGen = this; edgeFactory = this; vertexFactory = this; elementModListener = this; dbi = new DBI(var1); dao = selectDao(var1); if (!dao.schemaTablesExist(schema)) { log.trace(""Graph schema doesn't exist - creating ...""); createAmberSchema(); } } "	1	1	0	0	0	0
public List<String> Func1(String var1, int var2, String var3, float var4) throws IOException, ProtodomainCreationException, StructureException { Protodomain[]  var5; Atom[][] var6; List<ProteinSequence> var7; Protodomain var8 = Protodomain.fromString(var1, var3, cache); var5 = new Protodomain[var2]; var6 = new Atom[var2][]; var7 = new ArrayList<ProteinSequence>(var2); for (int var9 = 0; var9 < var2; var9++) { var5[var9] = var8.createSubstruct(var2, var9); var6[var9] = cache.getAtoms(var5[var9].getString()); ProteinSequence var10 = new ProteinSequence(StructureTools.convertAtomsToSeq(var6[var9])); var7.add(var10); } List<String> var11 = Func1(var7, var4); return var11; } 	0	0	0	0	0	1
@Override public boolean Func1(World var1, BlockPos var2, IBlockState var3, EntityPlayer var4, EnumHand var5, EnumFacing var6, float var7, float var8, float var9) { if (!var3.getValue(ACTIVE)) { if (isBlockLocked(var1, var2)) { var1.playSound(null, var2, SoundEvents.BLOCK_LEVER_CLICK, SoundCategory.BLOCKS, 1.0F, 0.3F); } else { changeToActiveBlock(var1, var2); } return true; } else { return false; } } 	1	0	1	1	0	0
public void Func1(View var1) { final Button var2 = (Button) findViewById(R.id.var2); if (var2.getVisibility() == View.VISIBLE) { displayMyBattleField(); } tv = (TextView) findViewById(var1.getId()); tv.setBackgroundResource(R.mipmap.crosshair_sea); var2.setVisibility(View.VISIBLE); firebtnpressed = false; var2.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var3) { shotCell(tv); } }); var2.setOnLongClickListener(new View.OnLongClickListener() { @Override public boolean Func3(View var3) { counter++; if (counter >= 5) { Toast.makeText(getBaseContext(), oppShips, Toast.LENGTH_LONG).show(); } return false; } }); } 	1	0	0	1	0	0
"@NonNull @Override public Network Func1(@NonNull Map<String, QVariant> var1) { final Map<String, QVariant<Map<String, QVariant<Map<String, QVariant>>>>> var2 = ((QVariant<Map<String, QVariant<Map<String, QVariant<Map<String, QVariant>>>>>>) var1.get(""QIrcUsersAndChannels"")).data; final Map<String, QVariant<Map<String, QVariant>>> var3 = var2.get(""var5"").data; final Map<String, QVariant<Map<String, QVariant>>> var4 = var2.get(""var8"").data; final Map<String, QIrcChannel> var5 = new HashMap<>(var3.size()); for (Map.Entry<String, QVariant<Map<String, QVariant>>> var6 : var3.entrySet()) { final QIrcChannel var7 = IrcChannelSerializer.get().Func1(var6.getValue().data); var5.put(var7.name(), var7); } final Map<String, QIrcUser> var8 = new HashMap<>(var4.size()); for (Map.Entry<String, QVariant<Map<String, QVariant>>> var6 : var4.entrySet()) { final QIrcUser var9 = IrcUserSerializer.get().Func1(var6.getValue().data); var8.put(var9.nick(), var9); } final Map<String, String> var10 = StringObjectMapSerializer.<String>get().Func1((Map<String, QVariant>) var1.get(""Supports"").data); return new Network( var5, var8, var10, (int) var1.get(""connectionState"").data, (String) var1.get(""currentServer"").data, (boolean) var1.get(""isConnected"").data, (int) var1.get(""latency"").data, (String) var1.get(""myNick"").data, NetworkInfoSerializer.get().Func1(var1) ); } "	1	0	0	1	0	0
@Override protected void Func1(Canvas var1) { if (x != -1) { Paint var2 = new Paint(); var2.setAntiAlias(true); var2.setColor(makePressColor()); var1.drawCircle(x, y, radius, var2); if(radius > getHeight()/rippleSize) radius += rippleSpeed; if(radius >= getWidth() / 2 - rippleSpeed){ x = -1; y = -1; radius = getHeight()/rippleSize; if(onClickListener != null) onClickListener.onClick(this); } invalidate(); } } 	0	1	0	0	0	0
@Override protected void Func1(Canvas var1) { super.Func1(var1); if (x != -1) { Paint var2 = new Paint(); var2.setAntiAlias(true); var2.setColor(makePressColor()); var1.drawCircle(x, y, radius, var2); if(radius > getHeight()/rippleSize) radius += rippleSpeed; if(radius >= getWidth()){ x = -1; y = -1; radius = getHeight()/rippleSize; if(onClickListener != null) onClickListener.onClick(this); } invalidate(); } } 	0	1	0	0	0	0
"@Test public void Func1() throws InterruptedException { BlockingQueue<byte[]> var1 = new ArrayBlockingQueue<>(1 << 16); int var2 = count / threadNum; Runnable var3 = () -> { byte[] var4 = new byte[size]; Arrays.fill(var4, (byte) 2); for (int var5 = 0; var5 < var2; var5++) { try { var1.put(var4); } catch (InterruptedException e) { e.printStackTrace(); } } }; Runnable var6 = () -> { for (int var5 = 0; var5 < count; var5++) { try { write(var1.take()); } catch (InterruptedException e) { e.printStackTrace(); } } }; Thread[] var7 = new Thread[threadNum + 1]; long var8 = System.currentTimeMillis(); for (int var5 = 0; var5 < threadNum + 1; var5++) { var7[var5] = (var5 + 1 == threadNum ? new Thread(var6) : new Thread(var3)); var7[var5].var8(); } for (Thread var9 : var7) { var9.join(); } long var10 = System.currentTimeMillis(); long var11 = var10 - var8; int var12 = (int) (count / var11 * 1000); out.printf(""BlockingcQueue [ThreadNum: %d, Count: %d, Size: %d] cost %dms with var12 %s"", threadNum, count, size, var11, intToStr(var12)); } "	0	1	0	0	0	0
"@Test(groups = ""dev"", invocationCount = 1) public void Func1() throws EventDeliveryException, InterruptedException { ctx.put(MongoSink.MODEL, MongoSink.CollectionModel.dynamic.name()); MongoSink var1 = new MongoSink(); Configurables.configure(var1, ctx); var1.setChannel(channel); var1.start(); JSONObject var2 = new JSONObject(); var2.put(""age"", 11); var2.put(""birthday"", new Date().getTime()); Transaction var3; for (int var4 = 0; var4 < 100; var4++) { var3 = channel.getTransaction(); var3.begin(); var2.put(""name"", ""test"" + var4); JSONObject var5 = new JSONObject(); var5.put(MongoSink.COLLECTION, ""my_events""); Event var6 = EventBuilder.withBody(var2.toJSONString().getBytes(), var5); channel.put(var6); var3.commit(); var3.close(); } var1.process(); var1.stop(); for (int var4 = 0; var4 < 10; var4++) { var2.put(""name"", ""test"" + var4); System.out.println(""var4 = "" + var4); DB var7 = mongo.getDB(""test_events""); DBCollection var8 = var7.getCollection(""my_events""); DBCursor var9 = var8.find(new BasicDBObject(var2)); assertTrue(var9.hasNext()); DBObject var10 = var9.next(); assertNotNull(var10); assertEquals(var10.get(""name""), var2.get(""name"")); assertEquals(var10.get(""age""), var2.get(""age"")); assertEquals(var10.get(""birthday""), var2.get(""birthday"")); } } "	1	0	0	1	0	0
"ConfigBuilder Func1(String var1){ Func1 = assignStringValue(var1, default_EMAIL_TO); logger.debug(""Func1:""+Func1); return this; } "	0	0	0	1	0	0
"ConfigBuilder Func1(String var1){ Func1 = assignStringValue(var1, default_YOUTUBE_REFRESH_TOKEN); logger.debug(""Func1:""+Func1); return this; } "	0	0	0	1	0	0
@Override public void Func1(SharedPreferences var1, String var2) { BaseActivity var3 = (BaseActivity) getActivity(); if (var2.equals(getString(R.string.water_warning_key)) || var2.equals(getString(R.string.water_warning_interval_key))) { var3.rememberWater(var1); } else if (var2.equals(getString(R.string.sun_warning_key)) || var2.equals(getString(R.string.sun_time_key))) { var3.rememberSun(var1); } else if (var2.equals(getString(R.string.breathe_warning_key)) || var2.equals(getString(R.string.breathe_time_key))) { var3.rememberBreathe(var1); } else if (var2.equals(getString(R.string.eat_warning_key))) { var3.rememberFood(var1); } } 	0	1	0	0	0	0
"public void Func1() { JDialog var1 = new JDialog(parentFrame, ""MegaMekLab Info""); JPanel var2 = new JPanel(); var2.setLayout(new BoxLayout(var2, BoxLayout.Y_AXIS)); JLabel var3 = new JLabel(""MegaMekLab Version: "" + MegaMekLab.VERSION); JLabel var4 = new JLabel(""MegaMek Version: "" + MegaMek.VERSION); JLabel var5 = new JLabel(""MegaMekLab software is under GPL. See""); JLabel var6 = new JLabel(""license.txt in ./Docs/licenses for details.""); JLabel var7 = new JLabel(""Project Info:""); JLabel var8 = new JLabel(""       http://www.sourceforge.net/projects/megameklab       ""); var3.setAlignmentX(Component.CENTER_ALIGNMENT); var4.setAlignmentX(Component.CENTER_ALIGNMENT); var5.setAlignmentX(Component.CENTER_ALIGNMENT); var6.setAlignmentX(Component.CENTER_ALIGNMENT); var7.setAlignmentX(Component.CENTER_ALIGNMENT); var8.setAlignmentX(Component.CENTER_ALIGNMENT); var2.add(new JLabel(""\n"")); var2.add(var3); var2.add(var4); var2.add(new JLabel(""\n"")); var2.add(var5); var2.add(var6); var2.add(new JLabel(""\n"")); var2.add(var7); var2.add(var8); var2.add(new JLabel(""\n"")); var1.getContentPane().add(var2); var1.setLocationRelativeTo(parentFrame); var1.setModal(true); var1.setResizable(false); var1.pack(); var1.setVisible(true); } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { server.enqueue(new MockResponse()); closeClient(client); client = TracingHttpAsyncClientBuilder.create(httpTracing) .addInterceptorFirst((HttpRequestInterceptor) (var1, context) -> var1.setHeader(""my-id"", currentTraceContext.get().traceIdString()) ).build(); client.start(); get(client, ""/foo""); RecordedRequest var1 = server.takeRequest(); assertThat(var1.getHeader(""x-b3-traceId"")) .isEqualTo(var1.getHeader(""my-id"")); } "	0	0	0	0	0	1
public final Target Func1(final Node var1) { final float var2 = 30; final float var3 = 0.5f; final float var4 = 1; return new Target(targetWidth, targetHeight, targetDepth, var2, var3, var4, var1); } 	0	0	0	0	0	1
"private HttpRequest Func1(String var1, GenericUrl var2, final byte[] var3) throws IOException, InternalClientException { if (var1 == null || var1.trim().equals("""")) { throw new InternalClientException(""Method should be populated""); } if (var2 == null) { throw new InternalClientException(""URL should be populated""); } HttpRequestFactory var4 = this.transport.createRequestFactory(new HttpRequestInitializer() { @Override public void Func2(HttpRequest var5) throws IOException { RequestSigner var6 = new RequestSigner(var3); var6.setAccessKeys(accessKey, secretKey); var5.setInterceptor(var6); } }); HttpRequest var5 = var4.buildRequest(var1, var2, null); var5.setSuppressUserAgentSuffix(true); var5.setThrowExceptionOnExecuteError(false); var5.getHeaders().setUserAgent(this.userAgent); return var5; } "	1	0	1	1	0	0
public void Func1(EntityPlayer var1, int var2, int var3) { drawPlayersInv(var1, var2, var3); drawPlayersHotBar(var1, var2, var3 + 58); } 	1	1	1	1	0	0
"@Override public void Func1(ConversationViewHolder var1, int var2) { Conversation var3 = mData.get(var2); Message var4 = var3.getMessage(); String var5 = """"; User var6; Context var7 = var1.itemView.getContext(); if (MessageUtils.isMessageWithPhoto(var4)) { var5 = ""[ "" + var7.getString(R.string.photo) + "" ] "" + var5; } if (MessageUtils.isMessageWithAudio(var4)) { var5 = ""[ "" + var7.getString(R.string.audio) + "" ] "" + var5; } if (MessageUtils.isMessageWithWall(var4)) { var5 = ""[ "" + var7.getString(R.string.wall_entry) + "" ] "" + var5; } if (MessageUtils.isMessageWithReply(var4)) { var5 = ""[ "" + var7.getString(R.string.reply) + "" ] "" + var5; } if (MessageUtils.isMessageWithDoc(var4)) { var5 = ""[ "" + var7.getString(R.string.document) + "" ] "" + var5; } if (MessageUtils.isMessageWithVideo(var4)) { var5 = ""[ "" + var7.getString(R.string.video) + "" ] "" + var5; } if (ConversationUtils.isConversationAGroupChat(var3)) { var1.imageAvatar.setImageResource( R.drawable.ic_social_people_outline); var1.textName.setText(var4.getTitle()); if (ConversationUtils.isMessageFromMe(var4)) { var5 = var5 + var1.itemView.getResources() .getString(R.string.me_) + "" "" + var4.getBody(); } else { var6 = mUserProvider.getUser(var4.getUser_id()); if (var6 != null) { var5 = var6.getFirstName() + "": "" + var4.getBody(); } else { var5 = var4.getBody(); } } var1.mOnlineIndicator.setVisibility(View.GONE); } else { var6 = mUserProvider.getUser(var3.getId()); var5 = var5 + var4.getBody(); if (ConversationUtils.isMessageFromMe(var4)) { var5 = var1.itemView.getResources().getString(R.string.me_) + "" "" + var5; } if (var6 != null) { var1.mOnlineIndicator.setVisibility( var6.getOnline() == 1 ? View.VISIBLE : View.GONE); mImageLoader.displayUserAvatar(var6, var1.imageAvatar); var1.textName.setText( var6.getFirstName() + "" "" + var6.getLastName()); } } if (MessageUtils.isMessageWithSticker(var4)) { var5 = var5 + ""[ "" + var7.getString(R.string.sticker) + "" ]""; var1.mImageViewDetails.setVisibility(View.VISIBLE); String var8 = MessageUtils.getStickerFromMessage(var4).getPhoto128(); mImageLoader.displayImage( var8, var1.mImageViewDetails); } else { var1.mImageViewDetails.setVisibility(View.GONE); } if (!TextUtils.isEmpty(var5)) { var1.textDetails.setText(var5); var1.textDetails.setVisibility(View.VISIBLE); } else { var1.textDetails.setVisibility(View.GONE); } var1.textDate.setText( DateUtils.getRelativeTimeSpanString(var4.getDate() * 1000, System.currentTimeMillis(), 0L, DateUtils.FORMAT_ABBREV_ALL)); if (ConversationUtils.isConversationUnread(var3)) { var1.textName.setTextColor(textColorPrimary); var1.textDetails.setTextColor(textColorPrimary); } else { var1.textName.setTextColor(textColorSecondary); var1.textDetails.setTextColor(textColorSecondary); } var1.itemView.setOnClickListener(this); var1.itemView.setTag(var2); } "	0	0	0	0	0	1
"private void Func1(IMessaging var1, Properties var2) throws IOException { String var3 = var2.getProperty(Constants.WEB_SOCKET_PORT_PROPERTY_NAME); if (var3 == null) { LOG.info(""WebSocket is disabled""); return; } int var4 = Integer.parseInt(var3); final NettyMQTTHandler var5 = new NettyMQTTHandler(); var5.setMessaging(var1); String var6 = var2.getProperty(Constants.HOST_PROPERTY_NAME); initFactory(var6, var4, new PipelineInitializer() { @Override void Func2(ChannelPipeline var7) { var7.addLast(""httpEncoder"", new HttpResponseEncoder()); var7.addLast(""httpDecoder"", new HttpRequestDecoder()); var7.addLast(""aggregator"", new HttpObjectAggregator(65536)); var7.addLast(""webSocketHandler"", new WebSocketServerProtocolHandler(""/mqtt""/*""/mqtt""*/, ""mqttv3.1, mqttv3.1.1"")); var7.addLast(""ws2bytebufDecoder"", new WebSocketFrameToByteBufDecoder()); var7.addLast(""bytebuf2wsEncoder"", new ByteBufToWebSocketFrameEncoder()); var7.addFirst(""idleStateHandler"", new IdleStateHandler(0, 0, Constants.DEFAULT_CONNECT_TIMEOUT)); var7.addAfter(""idleStateHandler"", ""idleEventHandler"", new MoquetteIdleTimoutHandler()); var7.addFirst(""bytemetrics"", new BytesMetricsHandler(m_bytesMetricsCollector)); var7.addLast(""decoder"", new MQTTDecoder()); var7.addLast(""encoder"", new MQTTEncoder()); var7.addLast(""metrics"", new MessageMetricsHandler(m_metricsCollector)); var7.addLast(""var5"", var5); } }); } "	0	0	1	1	0	0
"private void Func1() { StudyPlan var1 = sel.switchMajor(this.from.getCourses(), ""MTDT"", ""autumn"", 2); System.out.println(var1); } "	0	0	1	1	0	0
"private boolean Func1(Observation var1) throws AuthenticationException, CancelSyncException, SyncFailedException { if (var1.id != null) { JSONArray var2 = request(API_HOST + ""/observations/"" + var1.id, ""put"", null, observationToJsonObject(var1, false), true, true, false); if (var2 == null) { if ((mLastStatusCode >= 400) && (mLastStatusCode < 500)) { getContentResolver().delete(Observation.CONTENT_URI, ""id = "" + var1.id, null); int var3 = getContentResolver().delete(ObservationPhoto.CONTENT_URI, ""observation_id = "" + var1.id, null); int var4 = getContentResolver().delete(ProjectObservation.CONTENT_URI, ""observation_id = "" + var1.id, null); int var5 = getContentResolver().delete(ProjectFieldValue.CONTENT_URI, ""observation_id = "" + var1.id, null); return true; } } boolean var6 = handleObservationResponse(var1, var2); if (!var6) { throw new SyncFailedException(); } return true; } String var7 = mApp.getInaturalistNetworkMember(); JSONObject var8 = observationToJsonObject(var1, false); boolean var6 = handleObservationResponse( var1, request(API_HOST + ""/observations"", ""post"", null, var8, true, true, false) ); if (!var6) { throw new SyncFailedException(); } return true; } "	1	0	1	1	0	0
"@Override protected AccountStatus Func1(String... var1) { String var2 = var1[0]; String var3 = var1[1]; String var4 = var1[2]; String var5 = var1[3]; String var6 = var1[4]; if (!ConnectivityUtility.isOnline(mApplicationContext)) { List<Integer> var7 = new ArrayList<Integer>(); var7.add(5); List<String> var8 = new ArrayList<String>(); var8.add(""No connection""); return new AccountStatus(AccountStatus.Status.FAILED_SIGNUP, var7, var8); } String var9 = new DeviceUuidFactory(mApplicationContext).getDeviceUuid().toString(); if (var9 == null) { List<Integer> var7 = new ArrayList<Integer>(); var7.add(5); List<String> var8 = new ArrayList<String>(); var8.add(""Problem generating device var9""); return new AccountStatus(AccountStatus.Status.FAILED_SIGNUP, var7, var8); } try { new URL(var6); } catch (MalformedURLException e) { List<Integer> var7 = new ArrayList<Integer>(); var7.add(5); List<String> var8 = new ArrayList<String>(); var8.add(""Bad URL""); return new AccountStatus(AccountStatus.Status.FAILED_SIGNUP, var7, var8); } HttpEntity var10 = null; try { DefaultHttpClient var11 = HttpClientManager.getInstance(mApplicationContext).getHttpClient(); HttpPost var12 = new HttpPost(new URL(new URL(var6), ""api/users"").toURI()); List<NameValuePair> var13 = new ArrayList<NameValuePair>(3); var13.add(new BasicNameValuePair(""var5"", var5)); var13.add(new BasicNameValuePair(""passwordconfirm"", var5)); var13.add(new BasicNameValuePair(""uid"", var9)); var13.add(new BasicNameValuePair(""var3"", var3)); var13.add(new BasicNameValuePair(""var4"", var4)); var13.add(new BasicNameValuePair(""displayname"", var2)); var12.setEntity(new UrlEncodedFormEntity(var13)); HttpResponse var14 = var11.execute(var12); if (var14.getStatusLine().getStatusCode() == HttpStatus.SC_OK) { var10 = var14.getEntity(); JSONObject var15 = new JSONObject(EntityUtils.toString(var10)); return new AccountStatus(AccountStatus.Status.SUCCESSFUL_SIGNUP, new ArrayList<Integer>(), new ArrayList<String>(), var15); } else { var10 = var14.getEntity(); String var16 = EntityUtils.toString(var10); Log.e(LOG_NAME, ""Bad request.""); Log.e(LOG_NAME, var16); if(!StringUtils.isBlank(var16)) { List<Integer> var7 = new ArrayList<Integer>(); var7.add(5); List<String> var8 = new ArrayList<String>(); var8.add(var16); return new AccountStatus(AccountStatus.Status.FAILED_SIGNUP, var7, var8); } return new AccountStatus(AccountStatus.Status.FAILED_SIGNUP); } } catch (Exception e) { Log.e(LOG_NAME, ""Problem signing up."", e); } finally { try { if (var10 != null) { var10.consumeContent(); } } catch (Exception e) { } } return new AccountStatus(AccountStatus.Status.FAILED_SIGNUP); } "	1	1	0	1	0	0
"@Override public void Func1(final OperationAndData<Void> var1) throws Exception { final TimeTrace var2 = client.getZookeeperClient().startTracer(""GetDataBuilderImpl-Background""); AsyncCallback.DataCallback var3 = new AsyncCallback.DataCallback() { @Override public void Func2(int var4, String var5, Object var6, byte[] var7, Stat var8) { var2.commit(); CuratorEvent var9 = new CuratorEventImpl(client, CuratorEventType.GET_CONFIG, var4, var5, null, var6, var8, var7, null, null, null); client.processBackgroundOperation(var1, var9); } }; if ( watching.isWatched() ) { client.getZooKeeper().getConfig(true, var3, backgrounding.getContext()); } else { client.getZooKeeper().getConfig(watching.getWatcher(), var3, backgrounding.getContext()); } } "	1	0	0	1	0	0
@Override public Collection<String> Func1() { ArrayList<String> var1 = new ArrayList<String>(); for (Item var2 : getSelf().getInventory().keySet()) { if (var2.getEffects().get(0).throwable()) { var1.add(var2.getName()); } } return var1; } 	0	1	0	0	0	0
public void Func1() { checkDirectoryTree(sLocalToplevelFilePath); } 	0	0	0	0	0	1
"@Test public void Func1() { String var1 = ""gender = gender; var2 = jobcat: mean; b = jobcat:min;  d = jobcat: valid; e = jobcat:median; f = jobcat:stddev; g = jobcat:unique ; h = jobcat:mode""; Dataset var2 = Summarize.transform(data, var1); Assert.assertEquals(""gender|var2|b|d|e|f|g|h|#count|#row -- "" + ""Female|Clerical|?|12|?|?|1|Clerical|12|3, 4, 8, 9, 10, 11, 14, 20, 21, 23, 24, 25 -- "" + ""Male|Clerical|?|13|?|?|2|Clerical|13|1, 2, 5, 6, 7, 12, 13, 15, 16, 17, 18, …"", CannedData.dump(var2)); } "	0	0	0	0	0	1
"@Test public void Func1() { Dataset var1 = Summarize.transform(data, ""gender=gender; #percent=#count:percent""); Assert.assertEquals(""gender|#percent|#count|#row -- "" + ""Female|48%|12|3, 4, 8, 9, 10, 11, 14, 20, 21, 23, 24, 25 -- "" + ""Male|52%|13|1, 2, 5, 6, 7, 12, 13, 15, 16, 17, 18, …"", CannedData.dump(var1)); } "	0	0	0	0	0	1
"private void Func1(String var1, ArrayList<String> var2) { final String var3 = Environment.getExternalStorageDirectory().getPath(); String var4 = "".fbx .3des .dae .obj .ma .x3d""; File var5 = new File(var3 + ""/"" + var1); if (var5.exists() && var5.isDirectory()) { File var6[] = var5.listFiles(); for (File var7 : var6) { String var8 = var7.getName(); String var9 = ""."" + FileNameUtils.getExtension(var8.toLowerCase()); if (var7.isDirectory()) { Func1(var1 + ""/"" + var8, var2); } else if (var4.contains(var9)) { var2.add(var1 + ""/"" + var8); } } } } "	1	1	1	0	1	0
"@Before public void Func1() { cache = new AtomCache(); String[] var1 = new String[] { ""1cmw"", ""1hhb"",""4hhb"" }; List<LocalPDBDirectory> var2 = new ArrayList<LocalPDBDirectory>(); var2.add(new MMCIFFileReader(cache.getPath()) ); var2.add(new PDBFileReader(cache.getCachePath()) ); for(LocalPDBDirectory var3 : var2) { var3.setFetchBehavior(cache.getFetchBehavior()); var3.setObsoleteBehavior(cache.getObsoleteBehavior()); for(String var4 : var1) { var3.deleteStructure(var4); } } } "	1	1	1	1	0	0
public static boolean Func1 (Inventory var1, ItemStack var2, ItemStackComparer var3, int var4) { return count(var1, var2, var3, var4) == var4; } 	1	0	1	1	0	0
@Override public void Func1(final MyPetPlayer var1, final RepositoryCallback<Boolean> var2) { if (players.containsKey(var1.getInternalUUID())) { players.put(var1.getInternalUUID(), var1); if (SAVE_ON_PLAYER_ADD) { saveData(true); } if (var2 != null) { var2.setValue(true); var2.run(); } return; } if (var2 != null) { var2.setValue(false); var2.run(); } } 	1	0	1	1	0	0
"@Path(""/courses/{ID:[0-9]*}"") @PUT @RESTPermit (CoursePermissions.UPDATE_COURSE) public Response Func1(@PathParam(""ID"") Long var1, fi.pyramus.rest.model.Course var2) { Course var3 = courseController.findCourseById(var1); if (var3 == null) { return Response.status(Status.NOT_FOUND).build(); } if (var3.getArchived()) { return Response.status(Status.NOT_FOUND).build(); } if (!var3.getId().equals(var2.getId())) { return Response.status(Status.BAD_REQUEST).entity(""Cannot change entity var1 in update request"").build(); } String var4 = var2.getName(); String var5 = var2.getNameExtension(); CourseState var6 = courseController.findCourseStateById(var2.getStateId()); CourseType var7 = courseController.findCourseTypeById(var2.getTypeId()); Subject var8 = null; if (var2.getSubjectId() != null) { var8 = commonController.findSubjectById(var2.getSubjectId()); if (var8 == null) { return Response.status(Status.NOT_FOUND).entity(""specified var8 does not exist"").build(); } } Integer var9 = var2.getCourseNumber(); DateTime var10 = var2.getBeginDate(); DateTime var11 = var2.getEndDate(); Double var12 = var2.getLength(); EducationalTimeUnit var13 = null; if (var12 != null) { if (var2.getLengthUnitId() == null) { return Response.status(Status.BAD_REQUEST).entity(""length unit is missing"").build(); } var13 = commonController.findEducationalTimeUnitById(var2.getLengthUnitId()); if (var13 == null) { return Response.status(Status.BAD_REQUEST).entity(""length unit is invalid"").build(); } } Double var14 = var2.getDistanceTeachingDays(); Double var15 = var2.getLocalTeachingDays(); Double var16 = var2.getTeachingHours(); Double var17 = var2.getPlanningHours(); Double var18 = var2.getAssessingHours(); String var19 = var2.getDescription(); Long var20 = var2.getMaxParticipantCount(); Date var21 = toDate(var2.getEnrolmentTimeEnd()); User var22 = sessionController.getUser(); Course var23 = courseController.Func1(var3, var4, var5, var6, var7, var8, var9, toDate(var10), toDate(var11), var12, var13, var14, var15, var16, var17, var18, var19, var20, var21, var22); courseController.updateCourseTags(var23, var2.getTags() == null ? new ArrayList<String>() : var2.getTags()); courseController.updateCourseVariables(var23, var2.getVariables() == null ? new HashMap<String, String>() : var2.getVariables()); return Response.ok().entity(objectFactory.createModel(var23)).build(); } "	0	0	0	0	0	1
protected ColInfo[] Func1() { return this.columns; } 	1	0	1	0	0	0
"public void Func1(ActionResult var1) { String var2 = var1.getParameter(""var2"", ValueType.STRING).getString(); String var3 = "" ""; int var4 = 0; String var5 = "" ""; String var6 = "" ""; int var7 = 0; int var8 = 0; int var9 = 1; boolean var10 = false; String var11 = "" ""; if (isIP) { var3 = var1.getParameter(""broadcast ip"", ValueType.STRING).getString(); var4 = var1.getParameter(""var4"", ValueType.NUMBER).getNumber().intValue(); var5 = var1.getParameter(""local bind address"", ValueType.STRING).getString(); var10 = var1.getParameter(""register as foreign device in bbmd"", ValueType.BOOL).getBool(); var11 = var1.getParameter(""bbmd ips"", ValueType.STRING).getString(); } else { var6 = var1.getParameter(""comm var4 id"", ValueType.STRING).getString(); var7 = var1.getParameter(""var7 rate"", ValueType.NUMBER).getNumber().intValue(); var8 = var1.getParameter(""this var8 id"", ValueType.NUMBER).getNumber().intValue(); var9 = var1.getParameter(""frame error retry count"", ValueType.NUMBER).getNumber().intValue(); } int var12 = var1.getParameter(""local network number"", ValueType.NUMBER).getNumber().intValue(); boolean var13 = var1.getParameter(""var13 device comparisons"", ValueType.BOOL).getBool(); int var14 = var1.getParameter(""Timeout"", ValueType.NUMBER).getNumber().intValue(); int var15 = var1.getParameter(""segment var14"", ValueType.NUMBER).getNumber().intValue(); int var16 = var1.getParameter(""segment window"", ValueType.NUMBER).getNumber().intValue(); int var17 = var1.getParameter(""var17"", ValueType.NUMBER).getNumber().intValue(); int var18 = var1.getParameter(""local device id"", ValueType.NUMBER).getNumber().intValue(); String var19 = var1.getParameter(""local device var2"", ValueType.STRING).getString(); String var20 = var1.getParameter(""local device vendor"", ValueType.STRING).getString(); long var21 = (long) (1000 * var1.getParameter(""default polling var21"", ValueType.NUMBER).getNumber().doubleValue()); Node var22 = node.createChild(var2).build(); var22.setAttribute(""isIP"", new Value(isIP)); var22.setAttribute(""broadcast ip"", new Value(var3)); var22.setAttribute(""var4"", new Value(var4)); var22.setAttribute(""local bind address"", new Value(var5)); var22.setAttribute(""register as foreign device in bbmd"", new Value(var10)); var22.setAttribute(""bbmd ips"", new Value(var11)); var22.setAttribute(""comm var4 id"", new Value(var6)); var22.setAttribute(""var7 rate"", new Value(var7)); var22.setAttribute(""this var8 id"", new Value(var8)); var22.setAttribute(""frame error retry count"", new Value(var9)); var22.setAttribute(""local network number"", new Value(var12)); var22.setAttribute(""var13 device comparisons"", new Value(var13)); var22.setAttribute(""Timeout"", new Value(var14)); var22.setAttribute(""segment var14"", new Value(var15)); var22.setAttribute(""segment window"", new Value(var16)); var22.setAttribute(""var17"", new Value(var17)); var22.setAttribute(""local device id"", new Value(var18)); var22.setAttribute(""local device var2"", new Value(var19)); var22.setAttribute(""local device vendor"", new Value(var20)); var22.setAttribute(""default polling var21"", new Value(var21)); BacnetConn var23 = new BacnetConn(getMe(), var22); var23.init(); } "	0	0	0	0	0	1
"private JLabel Func1() { if (lblReflectionMap == null) { lblReflectionMap = new JLabel(); lblReflectionMap.setText(""Reflection map""); lblReflectionMap.setSize(new Dimension(94, 22)); lblReflectionMap.setPreferredSize(new Dimension(94, 22)); lblReflectionMap.setLocation(new Point(4, 4)); lblReflectionMap.setFont(new Font(""Dialog"", Font.BOLD, 10)); lblReflectionMap.setBounds(391, 104, 94, 22); } return lblReflectionMap; } "	0	0	0	1	0	0
@Override public void Func1(World var1, int var2, int var3, int var4, EntityPlayer var5) { super.Func1(var1, var2, var3, var4, var5); if (!var1.isRemote) { TileBarrel var6 = (TileBarrel) var1.getTileEntity(var2, var3, var4); if (var6 != null && !var6.hasLid && var5.isSneaking()) { if (var6.itemContents != null) { for (int var7 = 0; var7 < var6.itemContents.length; var7++) { ItemStack var8 = var6.itemContents[var7]; if (var8 != null) { EntityItem var9 = new EntityItem(var1, var2 + 0.5, var3 + 1.5, var4 + 0.5, var8); var9.delayBeforeCanPickup = 0; var1.spawnEntityInWorld(var9); var6.itemContents[var7] = null; var6.markForUpdate(); break; } } } } } } 	1	1	1	1	0	0
"@Override public void Func1(AjaxRequestTarget var1, Form<?> var2) { String var3 = markdownEditor.getText(); if (change == null) { Change var4 = new Change(user.username); var4.comment(var3); if (!ticket.isWatching(user.username)) { var4.watch(user.username); } RepositoryModel var5 = app().repositories().getRepositoryModel(ticket.var5); TicketModel var6 = app().tickets().updateTicket(var5, ticket.number, var4); if (var6 != null) { app().tickets().createNotifier().sendMailing(var6); setResponsePage(pageClass, WicketUtils.newObjectParameter(var6.var5, """" + ticket.number)); } else { error(""Failed to add comment!""); } } else { } } "	0	1	0	0	0	0
public static float Func1(Camera var1) { float var2 = var1.getViewPortBottom(); assert var2 >= 0f : var2; assert var2 <= 1f : var2; float var3 = var1.getViewPortTop(); assert var3 >= 0f : var3; assert var3 <= 1f : var3; float var4 = var3 - var2; assert var4 > 0f : var4; float var5 = var1.getHeight() * var4; assert var5 > 0f : var5; float var6 = var1.getViewPortLeft(); assert var6 >= 0f : var6; assert var6 <= 1f : var6; float var7 = var1.getViewPortTop(); assert var7 >= 0f : var7; assert var7 <= 1f : var7; float var8 = var7 - var6; assert var8 > 0f : var8; float var9 = var1.getWidth() * var8; assert var9 > 0f : var9; float var10 = var9 / var5; assert var10 > 0f : var10; return var10; } 	0	0	0	1	0	0
public int Func1() { if (mFileConfig != null) { return mFileConfig.getPort(); } return TEST_REST_PORT; } 	1	1	1	1	0	0
@Override public boolean Func1(World var1, BlockPos var2, IBlockState var3, net.minecraft.entity.player.EntityPlayer var4, EnumFacing var5, float var6, float var7, float var8) { ItemStack var9 = var4.getCurrentEquippedItem(); if (var9 == null) { TileEntity var10 = var1.getTileEntity(var2); if (var10 != null && var10 instanceof TileEntityTorchLit) ((TileEntityTorchLit)var1.getTileEntity(var2)).extinguishTorch(true); return true; } else if (var9.getItem() == ResourceLibrary.TORCH_UNLIT.getItemInstance()) { int var11 = var9.stackSize; var4.setCurrentItemOrArmor(0, new ItemStack(ResourceLibrary.TORCH_LIT.getItemInstance(), 1)); if (var11 > 1) var4.inventory.addItemStackToInventory(new ItemStack(ResourceLibrary.TORCH_UNLIT.getItemInstance(), var11 - 1)); return true;      // Let the calling function know that this block was successfully used, } else return (Block.getBlockFromItem(var9.getItem()) instanceof BlockTorch); } 	0	1	1	1	0	0
default String Func1() { List<PerlSubArgument> var1 = getSubArgumentsList(); if (isMethod() && !var1.isEmpty()) { var1 = var1.size() > 1 ? var1.subList(1, var1.size() - 1) : Collections.emptyList(); } return PerlSubUtil.getArgumentsListAsString(var1); } 	1	1	1	1	0	0
"@Override public void Func1(String var1, String var2) throws Exception { User var3 = getUser(var1); User var4 = getUser(var2); if (var3 != null && !var3.isAdmin() && !var1.equals(var4.getCreator())) throw new Exception(""No permission to modify var4""); var4.setAdmin(true); var4.save(); userCache.put(var4.getUsername(), var4); } "	1	0	1	1	0	0
private void Func1() { if (originalUserSettings != null) System.setProperty(MavenContainer.ALT_USER_SETTINGS_XML_LOCATION, originalUserSettings); else System.clearProperty(MavenContainer.ALT_USER_SETTINGS_XML_LOCATION); if (originalLocalRepository != null) System.setProperty(MavenContainer.ALT_LOCAL_REPOSITORY_LOCATION, originalLocalRepository); else System.clearProperty(MavenContainer.ALT_LOCAL_REPOSITORY_LOCATION); if (originalLocalRepository != null) System.setProperty(MavenContainer.ALT_GLOBAL_SETTINGS_XML_LOCATION, originalGlobalSettings); else System.clearProperty(MavenContainer.ALT_GLOBAL_SETTINGS_XML_LOCATION); } 	0	0	1	1	0	0
"@Test public void Func1() { System.out.println(""computeSpecifiedArgPart""); String[] var1 = new String[] {""a""}; List<String> var2 = Arrays.asList(""5""); List<String> var3 = Arrays.asList(""\""a\""""); doReturn(""5"").when(instance).processArg(any(String[].class), anyString()); String var4 = instance.computeSpecifiedArgPart(var1, var2, var3); assertThat(var4).isEqualTo(""[5]""); } "	1	0	1	1	0	0
public File Func1() { return mojo.basedir; } 	0	0	0	0	0	1
"public List<Table> Func1() { Cursor var1 = null; List<Table> var2 = new ArrayList<>(); try { final SQLiteDatabase var3 = mDb.getReadableDatabase(); var1 = var3.rawQuery(String.format(""SELECT * FROM %s"", TABLES_TABLE), null); while (var1.moveToNext()) { String var4 = var1.getString(var1.getColumnIndex(KEY_TABLE)); String var5 = var1.getString(var1.getColumnIndex(KEY_TOKEN)); var2.add(new Table(var4, var5)); } } catch (final SQLiteException e) { Logger.log(TAG, ""Failed to get all var2"" + e.getMessage(), Logger.SDK_DEBUG); } finally { if (null != var1) var1.close(); mDb.close(); } return var2; } "	0	1	0	0	0	0
"@Override public boolean Func1(UnlockContext var1) { Session var2 = null; try { var2 = BasicDaoFactory.getSystemSession(); boolean var3 = var1.isForce(); String var4 = I18NHelper.checkLanguage(var1.getLang()); SimpleDocument var5 = repository.findDocumentById(var2, new SimpleDocumentPK( var1.getAttachmentId()), var4); var4 = var5.getLanguage(); boolean var6 = var5.isOpenOfficeCompatible() && !var1.isUpload() && var1.isWebdav(); if (var6) { if (!var4.equals(StringUtil .defaultStringIfNotDefined(var5.getWebdavContentEditionLanguage(), var4))) { var4 = var5.getWebdavContentEditionLanguage(); var5 = repository .findDocumentById(var2, new SimpleDocumentPK(var1.getAttachmentId()), var4); } } if (var5.isOpenOfficeCompatible() && !var1.isForce() && webdavRepository.isNodeLocked( var2, var5)) { return false; } if (!var1.isForce() && var5.isReadOnly() && !var5.getEditedBy().equals(var1. getUserId())) { return false; } boolean var7 = false; if (var1.isWebdav() || var1.isUpload()) { String var8 = var5.getEditedBy(); var5.setUpdated(new Date()); var5.setUpdatedBy(var8); var7 = true; } var5.setPublicDocument(var1.isPublicVersion()); var5.setComment(var1.getComment()); if (var6) { var5.setSize(var5.getWebdavContentEditionSize()); } SimpleDocument var9 = repository.Func1(var2, var5, var3); if (var6) { webdavRepository.updateAttachmentBinaryContent(var2, var9); webdavRepository.deleteAttachmentNode(var2, var9); repository.duplicateContent(var5, var9); } else if (var9.isOpenOfficeCompatible() && (var1.isUpload() || !var1. isWebdav())) { webdavRepository.deleteAttachmentNode(var2, var9); } else { File var10 = new File(var9.getAttachmentPath()); if (!var10.exists() && !var1.isForce()) { repository.duplicateContent(var5, var9); } } var2.save(); if (var5.isPublic()) { String var11 = var1.getUserId(); if (StringUtil.isDefined(var11) && var7) { CallBackManager var12 = CallBackManager.get(); var12.invoke(CallBackManager.ACTION_ATTACHMENT_UPDATE, Integer.parseInt(var11), var9.getInstanceId(), var9.getForeignId()); } } } catch (IOException e) { throw new AttachmentException(""AttachmentService.Func1()"", SilverpeasRuntimeException.ERROR, ""attachment.CHECKIN_FAILED"", e); } catch (RepositoryException e) { throw new AttachmentException(""AttachmentService.Func1()"", SilverpeasRuntimeException.ERROR, ""attachment.CHECKIN_FAILED"", e); } finally { BasicDaoFactory.logout(var2); } return true; } "	0	0	0	0	0	1
"@Override protected Map<String, Class<? extends NodeActionListener>> Func1() { addAction(""Manage subscriptions"", new ManageSubscriptionsAction()); return null; } "	0	0	0	1	0	0
"protected void Func1(boolean var1) { log.info(""Logging out all sessions""); if (sessions == null) { log.error(""Attempt to logout all sessions before initialization is complete.""); return; } for (Session var2 : sessions.values()) { try { var2.logout(); } catch (Throwable e) { logError(var2.getSessionID(), null, ""Error during logout"", e); } } if (isLoggedOn()) { if (var1) { for (Session var2 : sessions.values()) { try { if (var2.isLoggedOn()) { var2.disconnect(""Forcibly disconnecting var2"", false); } } catch (Throwable e) { logError(var2.getSessionID(), null, ""Error during disconnect"", e); } } } else { waitForLogout(); } } } "	0	0	0	0	0	1
public String Func1(int var1, String var2, boolean var3){ return var1+var2+var3+this.mAA1(var1, var2,var3); }; 	1	0	1	0	0	0
"private void Func1(View var1){ c = Calendar.getInstance(); langArr = getActivity().getResources().getStringArray(R.array.spinnerLanguage); currArr = getActivity().getResources().getStringArray(R.array.spinnerCurrency); dateForArr = getActivity().getResources().getStringArray(R.array.spinnerDateFor); appNotySwitch = (Switch) var1.findViewById(R.id.appNotySwitch); appNotySwitch.setOnCheckedChangeListener(this); localMode = (Switch) var1.findViewById(R.id.localModeSwitch); localMode.setOnCheckedChangeListener(this); langRow = (TableRow) var1.findViewById(R.id.selectLangRow); langRow.setOnClickListener(this); backupRemText = (TextView) var1.findViewById(R.id.backupRemText); langText = (TextView) var1.findViewById(R.id.statusLang); dateForRow = (TableRow) var1.findViewById(R.id.selectDateRow); dateForRow.setOnClickListener(this); dateForText = (TextView) var1.findViewById(R.id.statusDateFor); currRow = (TableRow) var1.findViewById(R.id.selectCurrRow); currRow.setOnClickListener(this); currText = (TextView) var1.findViewById(R.id.statusCurr); statusIcon = (Switch) var1.findViewById(R.id.statusIconSwitch); statusIcon.setOnCheckedChangeListener(this); dailyRemRow = (TableRow) var1.findViewById(R.id.remTimeRow); dailyRemRow.setOnClickListener(this); backupRemRow = (TableRow) var1.findViewById(R.id.backupRemRow); backupRemRow.setOnClickListener(this); dailyRemText = (TextView) var1.findViewById(R.id.startRem); autoSync = (Switch) var1.findViewById(R.id.autoSyncSwitch); autoSync.setOnCheckedChangeListener(this); autoSync.setOnCheckedChangeListener(this); backupLocRow = (TableRow) var1.findViewById(R.id.backupLocRow); backupLocRow.setOnClickListener(this); backupLocText = (TextView) var1.findViewById(R.id.statusBackUpLoc); appPassRow = (TableRow) var1.findViewById(R.id.appPasswordRow); appPassRow.setOnClickListener(this); appPwText = (TextView) var1.findViewById(R.id.statusAppPw); signOutBtn = (Button) var1.findViewById(R.id.signOutBtn); signOutBtn.setOnClickListener(this); feedBackRow = (TableRow) var1.findViewById(R.id.feedbackRow); feedBackRow.setOnClickListener(this); rateRow = (TableRow) var1.findViewById(R.id.rateRow); rateRow.setOnClickListener(this); langBuilder = new AlertDialog.Builder(getContext()); langBuilder.setTitle(""Language""); langBuilder.setSingleChoiceItems(R.array.spinnerLanguage, 1, new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var2, int var3) { preferedLang = langArr[var3]; storePWSharedPref(); langText.setText(langArr[var3]); var2.dismiss(); } }); currBuilder = new AlertDialog.Builder(getContext()); currBuilder.setTitle(""Currency""); currBuilder.setSingleChoiceItems(R.array.spinnerCurrency, 0, new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var2, int var3) { preferedCurr = currArr[var3]; storePWSharedPref(); currText.setText(currArr[var3]); var2.dismiss(); } }); dateForBuilder = new AlertDialog.Builder(getContext()); dateForBuilder.setTitle(""Date format""); dateForBuilder.setSingleChoiceItems(R.array.spinnerDateFor, 0, new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var2, int var3) { preferedDateFor = dateForArr[var3]; storePWSharedPref(); dateForText.setText(dateForArr[var3]); var2.dismiss(); } }); retrievePWSharedPref(); } "	0	0	0	0	0	1
public Song Func1(Song var1) { Long var2 = var1.getId(); Song var3 = songsRepository.findById(var2); if (var1.getSongTitle() != null && var1.getSongTitle().getId() == 0) { Title var4 = new Title(var1.getSongTitle()); var4.setCategory(categoryRepository.getSongTitleCategory()); titleRepository.create(var1.getSongTitle()); var1.setSongTitle(var4); } if (var1.getTitle() != null && var1.getTitle().getId() == 0) { Title var5 = new Title(var1.getTitle()); var5.setCategory(categoryRepository.getUmbrellaTitleCategory()); titleRepository.create(var5); var1.setTitle(var5); } if (var1.getSongText() != null) { songTextDAO.create(var1.getSongText()); } var3 = invokeAllSetters(var3, var1); return songsRepository.updateSong(var3); } 	1	1	1	1	0	0
public Request Func1() { return request; } 	0	0	0	0	0	1
"@Override protected String Func1(OnlinePAFPlayer var1) { String var2; if (var1.getSettingsWorth(0) == 1) { var2 = ""Friends.Command.Settings.CanJump""; } else { var2 = ""Friends.Command.Settings.CanNotJump""; } return Main.getInstance().getMessagesYml().getString(var2); } "	1	1	0	1	0	0
"@Override public void Func1(OnlinePAFPlayer var1, String[] var2) { int var3 = var1.changeSettingsWorth(4); if (var3 == 0) { var1.sendMessage(new TextComponent(Main.getInstance().getFriendsPrefix() + Main.getInstance() .getMessagesYml().getString(""Friends.Command.Settings.NowYourFriendsCanJump""))); } else { var1.sendMessage(new TextComponent(Main.getInstance().getFriendsPrefix() + Main.getInstance() .getMessagesYml().getString(""Friends.Command.Settings.NowYourFriendsCanNotJump""))); } } "	1	1	1	1	0	0
public boolean Func1() { return (this.actual != UNDEFINED); } 	0	0	0	0	0	1
@Override protected void Func1() { just(bluetoothGattAtomicReference.get()) .filter(bluetoothGatt -> bluetoothGatt != null) .flatMap(bluetoothGatt -> isDisconnected(bluetoothGatt) ? just(bluetoothGatt) : disconnect(bluetoothGatt)) .doOnTerminate(() -> releaseRadio()) .observeOn(AndroidSchedulers.mainThread()) .subscribe( bluetoothGatt -> bluetoothGatt.close(), throwable -> onError(throwable), () -> onCompleted() ); } 	0	0	0	0	0	1
"private void Func1(final Element var1, final FlowSegmentInfo var2, final int var3) { final Button var4 = new Button(flowDetailsPane, SWT.PUSH); var4.setText(""Delete""); var4.addSelectionListener(new SelectionAdapter() { @Override public void Func2(SelectionEvent var5) { EcoreUtil.remove(var1); updateFlowDetails(currentFlow); } }); final ComboViewer var6 = new ComboViewer(flowDetailsPane, SWT.DROP_DOWN | SWT.READ_ONLY); final GridData var7 = new GridData(GridData.FILL_HORIZONTAL); var7.grabExcessHorizontalSpace = true; var7.minimumWidth = 150; var6.getCombo().setLayoutData(var7); var6.addSelectionChangedListener(new ISelectionChangedListener() { @Override public void Func3(final SelectionChangedEvent var8) { final StructuredSelection var9 = (StructuredSelection)var8.getSelection(); final FlowSegmentInfo var10 = (FlowSegmentInfo)var9.getFirstElement(); if(var1 instanceof EndToEndFlowSegment) { final EndToEndFlowSegment var11 = (EndToEndFlowSegment)var1; if(var10 == null) { var11.setContext(null); var11.setFlowElement(null); } else { var11.setContext(var10.context); var11.setFlowElement((EndToEndFlowElement)var10.flowElement); } } else if(var1 instanceof FlowSegment) { final FlowSegment var11 = (FlowSegment)var1; if(var10 == null) { var11.setContext(null); var11.setFlowElement(null); } else { var11.setContext(var10.context); var11.setFlowElement((FlowElement)var10.flowElement); } } refreshWidgetEnabledStates(); } }); var6.setContentProvider(new ArrayContentProvider()); var6.setLabelProvider(flowSegmentInfoLabelProvider); var6.setInput(potentialFlowSegments); var6.setSelection(new StructuredSelection(var2)); if(var1 instanceof EndToEndFlowSegment) { var6.setFilters(new ViewerFilter[]{endToEndFlowElementFilter}); } else if(var1 instanceof FlowSegment) { var6.setFilters(new ViewerFilter[]{flowElementFilter}); } addInsertButton(var3); } "	0	0	0	0	0	1
"public Result Func1(Context var1, @PathParam(""var2"") Integer var2, @Param(""var5"") String var3 ){ GoogleSerp var4=null; LocalDate var5=null; try {var5 = LocalDate.parse(var3);}catch(Exception ex){} if(var5 != null){ List<Run> var6 = baseDB.run.findByDay(Module.GOOGLE, var5); if(!var6.isEmpty()){ GoogleSearch var7 = getSearch(var1, var2); if(var7 != null){ var4 = googleDB.var4.get(var6.get(0).getId(), var7.getId()); } } } if(var4 == null){ return Results.ok().text().renderRaw(""SERP not found""); } boolean var8 = var1.getParameter(""var16"") != null; boolean var9 = var1.getParameter(""d1"") != null; boolean var10 = var1.getParameter(""d7"") != null; boolean var11 = var1.getParameter(""d30"") != null; boolean var12 = var1.getParameter(""d90"") != null; int var13 = 0; StringBuilder var14 = new StringBuilder(); for (GoogleSerpEntry var15 : var4.getEntries()) { ++var13; if(var8){ var14.append(var13).append("",""); } var14.append(var15.getUrl()).append("",""); if(var9){ Short var16 = var15.getMap().getOrDefault((short)1, (short)GoogleRank.UNRANKED); var14.append(var16 != GoogleRank.UNRANKED ? var16.intValue() : """").append("",""); } if(var10){ Short var16 = var15.getMap().getOrDefault((short)7, (short)GoogleRank.UNRANKED); var14.append(var16 != GoogleRank.UNRANKED ? var16.intValue() : """").append("",""); } if(var11){ Short var16 = var15.getMap().getOrDefault((short)30, (short)GoogleRank.UNRANKED); var14.append(var16 != GoogleRank.UNRANKED ? var16.intValue() : """").append("",""); } if(var12){ Short var16 = var15.getMap().getOrDefault((short)90, (short)GoogleRank.UNRANKED); var14.append(var16 != GoogleRank.UNRANKED ? var16.intValue() : """").append("",""); } if(var14.length() > 0){ var14.setCharAt(var14.length()-1, '\n'); } } return Results.text() .addHeader(""Content-Disposition"", ""attachment; filename=\"""" + var4.getRunDay().toLocalDate() + "".csv\"""") .renderRaw(var14.toString()); } "	0	0	0	0	0	1
public synchronized ArrayList<Integer> Func1() { return this.playerId; } 	0	0	0	0	0	1
public synchronized ArrayList<SudokuServerThread> Func1() { return this.connections; } 	0	0	0	0	0	1
"@Override public void Func1(Object... var1) { StandardContext var2 = (StandardContext) var1[0]; InterceptSupport var3 = InterceptSupport.instance(); InterceptContext var4 = var3.createInterceptContext(Event.WEBCONTAINER_INIT); var4.put(InterceptConstants.WEBAPPLOADER, var2.getLoader().getClassLoader().getParent()); var4.put(InterceptConstants.WEBWORKDIR, var2.getWorkPath()); String var5 = (String) ReflectHelper.getField(StandardContext.class, var2, ""encodedPath"", true); var4.put(InterceptConstants.CONTEXTPATH, (var5.length() > 0) ? var5 : ""/""); var4.put(InterceptConstants.APPNAME, ReflectHelper.getField(StandardContext.class, var2, ""displayName"", true)); ServletContext var6 = (ServletContext) ReflectHelper.getField(StandardContext.class, var2, ""var4"", true); var4.put(InterceptConstants.SERVLET_CONTEXT, var6); String var7 = var6.getRealPath(""""); if (var7 == null) { var7 = """"; } else if (var7.lastIndexOf(""/"") == (var7.length() - 1) || var7.lastIndexOf(""\\"") == (var7.length() - 1)) { var7 = var7.substring(0, var7.length() - 1); } var4.put(InterceptConstants.BASEPATH, var7); var3.doIntercept(var4); } "	1	1	1	0	1	0
"public void Func1(Identifiable var1, HttpMethod var2, Request var3) { Log.d(var1.getUUID(), var2 + "" "" + uri + "" BODY: "" + var3); RestTemplate var4 = new RestTemplate(); HttpEntity<Request> var5 = new HttpEntity<Request>(var3, headers(var1)); ResponseEntity<Response> var6 = null; try { var6 = var4.exchange(uri, var2, var5, responseType); this.var6 = var6.getBody(); try { this.responseUUID = UUID.fromString(var6.getHeaders().getFirst(""UUID"")); } catch (Exception e) { System.out.println(""no uuid: "" + uri); } return; } catch (Exception e) { Log.d(var1.getUUID(), e + "" - -- - "" + var1 + "" - -- - "" + var3 + "" - -- - "" + var6); } this.var6 = null; this.responseUUID = null; } "	0	0	0	1	0	0
"public SolrDocumentList Func1(String var1, int var2, Map<String, String> var3) throws SolrException{ try { SolrQuery Func1 = new SolrQuery(var1); Func1.setRows(Integer.MAX_VALUE); if(var2== MultitenantConstants.SUPER_TENANT_ID){ Func1.addFilterQuery(IndexingConstants.FIELD_TENANT_ID + "":"" + ""\\"" + var2); }else { Func1.addFilterQuery(IndexingConstants.FIELD_TENANT_ID + "":"" + var2); } if (var3.size() > 0 && var3.get(IndexingConstants.FIELD_MEDIA_TYPE).equals( RegistryConstants.POLICY_MEDIA_TYPE)) { Func1.addFilterQuery(IndexingConstants.FIELD_ID + "":"" + RegistryConstants.GOVERNANCE_REGISTRY_BASE_PATH + ""*""); } if (var3.size() > 0) { for (Map.Entry<String, String> var5 : var3.entrySet()) { Func1.addFilterQuery(var5.getKey() + ""_s:"" + var5.getValue().replaceAll("":"",""\\\\\\:"").replaceAll("" "", ""\\\\\\ "")); } } QueryResponse var6; MessageContext var7 = MessageContext.getCurrentMessageContext(); if ((var7 != null && PaginationUtils .isPaginationHeadersExist(var7)) || PaginationContext.getInstance() != null) { try { PaginationContext var8; if (var7 != null) { var8 = PaginationUtils.initPaginationContext(var7); } else { var8 = PaginationContext.getInstance(); } String var9 = var8.getSortBy(); if (var9.length() > 0) { Func1.setSort(var9 + ""_s"", var8.getSortOrder().equals(""ASC"") ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc); } var6 = server.Func1(Func1); if(log.isDebugEnabled()) { log.debug(""Solr index queried Func1: "" + Func1); } } finally { if(var7!=null){ PaginationContext.destroy(); } } } else { var6 = server.Func1(Func1); if(log.isDebugEnabled()) { log.debug(""Solr index queried Func1: "" + Func1); } } return var6.getResults(); } catch (SolrServerException var5) { throw new SolrException(ErrorCode.SERVER_ERROR, ""Failure at Func1 "" + var1, var5); } } "	0	0	0	0	0	1
protected void Func1(List<String> var1){ docType.Func1(); } 	1	0	1	1	0	0
"@Test public void Func1() throws Exception { mvc.perform(MockMvcRequestBuilders.get(""/query1/"").accept(MediaType.APPLICATION_JSON)) .andExpect(status().isOk()) .andExpect(content().string(equalTo(""Query 1 result""))); } "	0	0	0	0	0	1
"@Override public void Func1(MouseEvent var1) { for (int var2 = 0; var2 < dotUI.size(); var2++) { if (dotUI.get(var2).contains(var1.getX(), var1.getY())) { System.out.println(""Debug info - Mouse release detected on dot "" + var2); } } GUIGrid.this.lijnUI.clear(); controller.getVeld().clearConnectedDots(); GUIGrid.this.repaint(); System.out.println(""Mouse release detected""); } "	1	1	1	0	1	0
"private boolean Func1(JSONObject var1) throws JSONException{ if (var1.isNull(Constants.JSON_MIN_VERSION_NAME)) { return false; } getSirenHelper().setLastVerificationDate(mApplicationContext); String var2 = var1.getString(Constants.JSON_MIN_VERSION_NAME); String var3 = getSirenHelper().getVersionName(mApplicationContext); if ((getSirenHelper().isEmpty(var2) || getSirenHelper().isEmpty(var3) || getSirenHelper().isVersionSkippedByUser(mApplicationContext, var2))) { return false; } SirenAlertType var4 = null; String[] var5 = var2.split(""\\.""); String[] var6 = var3.split(""\\.""); if (var5 != null && var6 != null && var5.length == var6.length) { if (var5.length > 0 && getSirenHelper().isGreater(var5[0], var6[0])) { var4 = majorUpdateAlertType; } else if (var5.length > 1 && getSirenHelper().isGreater(var5[1], var6[1])) { var4 = minorUpdateAlertType; } else if (var5.length > 2 && getSirenHelper().isGreater(var5[2], var6[2])) { var4 = patchUpdateAlertType; } else if (var5.length > 3 && getSirenHelper().isGreater(var5[3], var6[3])) { var4 = revisionUpdateAlertType; } if (var4 != null) { showAlert(var2, var4); return true; } } return false; } "	1	0	1	0	0	0
public static BiomeType Func1(String var1) { var1 = var1.toUpperCase(); for (BiomeType var2 : values()) { if (var2.var1().equals(var1)) return var2; } BiomeType var3 = EnumHelper.addEnum(BiomeType.class, var1, new Class[0], new Object[0]); if (var3.ordinal() >= biomes.length) { biomes = Arrays.copyOf(biomes, var3.ordinal()); } return var3; } 	1	0	0	1	0	0
"private EList<Constraint> Func1(IbexPattern var1, PatternBody var2, Map<TGGRuleNode, EMFVariable> var3, EList<Variable> var4) { EList<Constraint> var5 = var2.getConstraints(); EList<Constant> var6 = var2.getConstants(); for (TGGRuleElement var7 : var1.getSignatureElements()) { if (!var3.containsKey(var7)) { if (var7 instanceof TGGRuleNode) { TGGRuleNode var8 = (TGGRuleNode) var7; EMFVariable var9 = emfTypeFactory.createEMFVariable(); var9.setName(var8.getName()); var9.setEClassifier(var8.getType()); var3.put(var8, var9); dAttrHelper.extractConstants(var8, var9); dAttrHelper.extractAttributeVariables(var8, var9); } } var4.add(var3.get(var7)); } EList<Variable> var10 = var2.getLocalVariables(); for (TGGRuleNode var8 : var1.getBodyNodes()) { if (!var3.containsKey(var8)) { EMFVariable var9 = emfTypeFactory.createEMFVariable(); var9.setName(var8.getName()); var9.setEClassifier(var8.getType()); var3.put(var8, var9); var10.add(var3.get(var8)); dAttrHelper.extractConstants(var8, var9); dAttrHelper.extractAttributeVariables(var8, var9); } } dAttrHelper.resolveAttributeVariables(var3.values()); var5.addAll(dAttrHelper.getAttributes()); var5.addAll(dAttrHelper.getRelationalConstraints()); var6.addAll(dAttrHelper.getConstants()); var10.addAll(dAttrHelper.getEMFVariables()); dAttrHelper.clearAll(); if (!(var1 instanceof MarkedPattern && ((MarkedPattern) var1).isLocal())) for (TGGRuleEdge var11 : var1.getBodyEdges()) { Reference var12 = emfTypeFactory.createReference(); var12.setEModelElement(var11.getType()); ConstraintParameter var13 = factory.createConstraintParameter(); var13.setReference(var3.get(var11.getSrcNode())); var12.getParameters().add(var13); ConstraintParameter var14 = factory.createConstraintParameter(); var14.setReference(var3.get(var11.getTrgNode())); var12.getParameters().add(var14); var5.add(var12); } for (TGGRuleCorr var15 : var1.getBodyCorrNodes()) { Reference var16 = emfTypeFactory.createReference(); var16.setEModelElement((EReference) var15.getType().getEStructuralFeature(""source"")); ConstraintParameter var13 = factory.createConstraintParameter(); var13.setReference(var3.get(var15)); var16.getParameters().add(var13); ConstraintParameter var14 = factory.createConstraintParameter(); var14.setReference(var3.get(var15.getSource())); var16.getParameters().add(var14); var5.add(var16); Reference var17 = emfTypeFactory.createReference(); var17.setEModelElement((EReference) var15.getType().getEStructuralFeature(""target"")); var14 = factory.createConstraintParameter(); var14.setReference(var3.get(var15)); var17.getParameters().add(var14); var13 = factory.createConstraintParameter(); var13.setReference(var3.get(var15.getTarget())); var17.getParameters().add(var13); var5.add(var17); } if (var1 instanceof RulePartPattern) forceInjectiveMatchesForPattern((RulePartPattern)var1, var2, var3); return var5; } "	0	0	0	0	0	1
"protected void Func1(Context var1) { dataService.fetchContent(""GROUPS_CURRENT"", var1); } "	0	0	0	1	0	0
"protected void Func1(Context var1) { dataService.fetchContent(""BADGES"", var1); } "	0	0	0	1	0	0
"protected void Func1(Context var1) { dataService.fetchContent(""EVENTS_DECLINED"", var1); } "	0	0	0	1	0	0
"protected void Func1(Context var1) { dataService.fetchContent(""EVENT_INVITES"", var1); } "	0	0	0	1	0	0
"protected void Func1(Context var1) { dataService.fetchContent(""FRIEND_INVITES"", var1); } "	0	0	0	1	0	0
"protected void Func1(Context var1) { dataService.fetchContent(""IMAGE"", var1); } "	0	0	0	1	0	0
"@Test public void Func1() { final CategoryDraft var1 = CategoryDraftBuilder .of(LocalizedString.of(Locale.ENGLISH, ""classic furniture1""), LocalizedString.of(Locale.ENGLISH, ""classic-furniture1"", Locale.GERMAN, ""klassische-moebel1"")) .key(""1"") .build(); final CategoryDraft var2 = CategoryDraftBuilder .of(LocalizedString.of(Locale.ENGLISH, ""classic furniture2""), LocalizedString.of(Locale.ENGLISH, ""classic-furniture2"", Locale.GERMAN, ""klassische-moebel2"")) .key(""key2"") .build(); final Set<CategoryDraft> var3 = new HashSet<>(); var3.add(var1); var3.add(var2); final Set<Category> var4 = categoryService.createCategories(var3) .toCompletableFuture().join(); assertThat(errorCallBackExceptions).hasSize(1); assertThat(errorCallBackMessages).hasSize(1); assertThat(errorCallBackMessages.get(0)).contains(""Invalid category key '1'. Category keys may only contain "" + ""alphanumeric characters, underscores and hyphens and must have a maximum length of 256 characters.""); assertThat(var4).hasSize(1); } "	0	0	0	0	0	1
"@Test public void Func1() { Map<Date, List<ActivityFeed>> var1 = idh.getActivityFeedList(1, 208, 1); for (Date var2 : var1.keySet()) { List<ActivityFeed> var3 = var1.get(var2); for (ActivityFeed var4 : var3) { assertNotNull(var4.getActivityType()); assertNotNull(var4.getBodyText()); assertNotNull(var4.getDate()); assertNotNull(var4.getHeaderText()); System.out.println(var4.getActivityType() + "" - "" + var4.getHeaderText() + "" - "" + var4.getBodyText() + "" - "" + var4.getDate()); } } } "	1	0	1	0	0	0
public static void Func1(final Set<MapillaryAbstractImage> var1, final boolean var2) { if (!SwingUtilities.isEventDispatchThread()) { SwingUtilities.invokeLater(new Runnable() { @Override public void Func2() { Func1(var1, var2); } }); } else { Bounds var3 = null; if (var1.isEmpty()) { var3 = new Bounds(new LatLon(0, 0)); } else { var3 = new Bounds(var1.iterator().next().getLatLon()); for (MapillaryAbstractImage var4 : var1) { var3.extend(var4.getLatLon()); } } double var5 = Math.max(var3.getMaxLat() - var3.getMinLat(), MIN_ZOOM_SQUARE_SIDE); double var6 = Math.max(var3.getMaxLon() - var3.getMinLon(), MIN_ZOOM_SQUARE_SIDE); var3 = new Bounds(var3.getCenter(), var5, var6); Main.map.mapView.zoomTo(var3); MapillaryLayer.getInstance().getData().setSelectedImage(null); if (var2) MapillaryLayer.getInstance().getData().addMultiSelectedImage(var1); if (Main.main != null) MapillaryData.dataUpdated(); } } 	1	0	1	0	0	0
private void Func1() { MediaUtil.copy(mData, mActivityData, true, true); } 	0	0	0	0	0	1
public ItemBuilder Func1(String... Func1){ ItemMeta var2 = itemStack.getItemMeta(); var2.setLore(Stream.of(Func1).collect(Collectors.toList())); itemStack.setItemMeta(var2); return this; } 	0	1	0	0	0	0
@Override public boolean Func1() { return currentFacebookAccessToken != null; } 	0	0	0	0	0	1
protected void Func1(String var1, String var2, String var3, int var4) throws FalconCLIException { APIResult var5 = falconUnitClient.schedule(EntityType.PROCESS, var1, var3, var4, var2, true, null); assertStatus(var5); } 	1	0	1	0	0	0
protected void Func1(Map<String, String> var1) throws IOException, FalconCLIException { String var2 = TestContext.overlayParametersOverTemplate(PROCESS_TEMPLATE, var1); APIResult var3 = submit(EntityType.PROCESS, var2); assertStatus(var3); } 	0	0	0	0	0	1
protected void Func1(Map<String, String> var1) throws IOException, FalconCLIException { String var2 = TestContext.overlayParametersOverTemplate(UnitTestContext.FEED_TEMPLATE1, var1); APIResult var3 = falconUnitClient.submit(EntityType.FEED.name(), var2, null); Assert.assertEquals(var3.getStatus(), APIResult.Status.SUCCEEDED); var2 = TestContext.overlayParametersOverTemplate(UnitTestContext.FEED_TEMPLATE2, var1); var3 = falconUnitClient.submit(EntityType.FEED.name(), var2, null); Assert.assertEquals(var3.getStatus(), APIResult.Status.SUCCEEDED); } 	0	0	0	0	0	1
@Test public void Func1() throws IOException, FalconCLIException, FalconException, ParseException, InterruptedException { submitCluster(); APIResult var1 = submit(EntityType.FEED, getAbsolutePath(INPUT_FEED)); assertStatus(var1); createData(INPUT_FEED_NAME, CLUSTER_NAME, SCHEDULE_TIME, INPUT_FILE_NAME); String var2 = getFeedPathForTS(CLUSTER_NAME, INPUT_FEED_NAME, SCHEDULE_TIME); Assert.assertTrue(fs.exists(new Path(var2))); var1 = schedule(EntityType.FEED, INPUT_FEED_NAME, CLUSTER_NAME); Assert.assertEquals(APIResult.Status.SUCCEEDED, var1.getStatus()); waitFor(WAIT_TIME, new Predicate() { public boolean Func2() throws Exception { InstancesResult.WorkflowStatus var3 = getRetentionStatus(INPUT_FEED_NAME, CLUSTER_NAME); return InstancesResult.WorkflowStatus.SUCCEEDED.equals(var3); } }); InstancesResult.WorkflowStatus var3 = getRetentionStatus(INPUT_FEED_NAME, CLUSTER_NAME); Assert.assertEquals(InstancesResult.WorkflowStatus.SUCCEEDED, var3); Assert.assertFalse(fs.exists(new Path(var2))); } 	0	0	0	0	0	1
"public void Func1() throws FalconException, IOException, FalconCLIException { String var1 = falconUnitClient.getVersion(null); String var2 = BuildProperties.get().getProperty(""build.version""); String var3 = DeploymentProperties.get().getProperty(""deploy.mode""); Assert.assertTrue(Pattern.matches( "".*\\{\\s*\""key\""\\s*:\\s*\""Version\""\\s*,\\s*\""value\""\\s*:\\s*\"""" + var2 + ""\""\\s*}.*"", var1), ""No build.version found in /api/admin/version""); Assert.assertTrue(Pattern.matches( "".*\\{\\s*\""key\""\\s*:\\s*\""Mode\""\\s*,\\s*\""value\""\\s*:\\s*\"""" + var3 + ""\""\\s*}.*"", var1), ""No deploy.mode found in /api/admin/version""); } "	0	0	0	0	0	1
public boolean Func1() throws IOException, FalconCLIException { return Func1(DEFAULT_COLO, DEFAULT_CLUSTER, null); } 	0	0	0	0	0	1
"@Bean public DmnEngine Func1() { DmnEngineConfiguration var1 = new StandaloneDmnEngineConfiguration(); var1.setDataSource(dataSource()); var1.setDatabaseSchemaUpdate(environment.getProperty(""engine.dmn.schema.update"", ""true"")); return var1.buildDmnEngine(); } "	1	0	1	0	0	0
"public Timestamp Func1(int var1, String[] var2) throws ParseException { LOG.trace(""Func1()""); Column var3 = configuration.getColumnById(var1); String var4 = null; if (var3.isSetRelatedDateTimeGroup()) { var4 = var3.getRelatedDateTimeGroup(); } if (var4 == null) { var4 = configuration.getFirstDateTimeGroup(); } Column[] var5 = configuration.getAllColumnsForGroup(var4, Type.DATE_TIME); if (var5 != null) { final Timestamp var6 = new Timestamp(); TimeZone var7 = getTimeZone(var5); if (isUnixTime(var5)) { handleUnixTime(var2, var5, var6); } else { handleDateTimeCombination(var2, var5, var6, var7); } if (configuration.isDateInfoExtractionFromFileNameSetupValid()) { var6.enrich( dataFile.getName(), configuration.getRegExDateInfoInFileName(), configuration.getDateInfoPattern()); } if (configuration.isUseDateInfoFromFileModificationSet()) { var6.adjustBy(dataFile.lastModified(), configuration.getLastModifiedDelta()); } return var6; } return null; } "	1	0	1	0	0	0
private String[] Func1(final Resource var1) { String var2 = var1.getName(); String var3 = var2; char[] var4 = var2.toCharArray(); for (int var5 = 0; var5 < var4.length; var5++) { char var6 = var4[var5]; if (!NcNameResolver.isNCNameChar(var6)) { var4[var5] = Configuration.UNICODE_REPLACER; } } var2 = String.valueOf(var4); Matcher var7 = Configuration.UNICODE_ONLY_REPLACER_LEFT_PATTERN.var7(var2); if (var7.matches()) { var2 = var1.getClass().getSimpleName().toLowerCase() + var1.getUri().hashCode(); } String[] var8 = { var2, var3 }; return var8; } 	0	0	0	0	0	1
public void Func1() { mArray.getItem(2).getRef().setPriority(0.5); } 	1	0	0	1	0	0
"public static ArrayList<Groupe> Func1() throws SQLException { Connection var1 = Database.getDbCon().conn; String var2 = ""SELECT * FROM ""+ groupe_table+ "" g "" + ""JOIN ""+classe_table+"" c ON c.id = g.classe_id "" + ""JOIN ""+etudiant_table+"" e ON e.var7 = g.id""; ArrayList<Groupe> var3 = new ArrayList<Groupe>(); PreparedStatement var4 = var1.prepareStatement(var2); ResultSet var5 = var4.executeQuery(); Groupe var6 = null; while(var5.next()) { int var7 = var5.getInt(""g.id""); if(var6 == null || var6.getId() != var7) { if(var6 != null) var3.add(var6); var6 = new Groupe(); var6.setId(var7); var6.setLibelle(var5.getString(""g.libelle"")); Classe var8 = new Classe(); var8.setId(var5.getInt(""c.id"")); var8.setLibelle(var5.getString(""c.libelle"")); var6.setClasse(var8); } Etudiant var9 = new Etudiant(); var9.setId(var5.getInt(""e.id"")); var9.setNom(var5.getString(""e.nom"")); var9.setPrenom(var5.getString(""e.prenom"")); var9.setEmail(var5.getString(""e.email"")); var9.setNum_etu(var5.getString(""e.num_etu"")); var6.addEtudiant(var9); if(var5.isLast()){ var3.add(var6); } } return var3; } "	0	0	0	0	0	1
@Override public void Func1(boolean var1, boolean var2) { MorphButton.MorphState var3 = (var1) ? MorphButton.MorphState.END : MorphButton.MorphState.START; if (mMorphButton.getState() != var3) { mMorphButton.setState(var3, var2); } } 	1	0	1	1	0	0
"@Override public void Func1(ChannelHandlerContext var1, HttpRequest var2) { try { Tracker.track(var2); requestCount.inc(); final String var3 = var2.getHeader(""var3""); JSONMetricsContainer var4 = null; final Timer.Context var5 = jsonTimer.time(); final String var6 = var2.getContent().toString(Constants.DEFAULT_CHARSET); try { var4 = createContainer(var6, var3); if (!var4.isValid()) { throw new IOException(""Invalid JSONMetricsContainer""); } } catch (JsonParseException e) { log.warn(""Exception parsing content"", e); DefaultHandler.sendResponse(var1, var2, ""Cannot parse content"", HttpResponseStatus.BAD_REQUEST); return; } catch (JsonMappingException e) { log.warn(""Exception parsing content"", e); DefaultHandler.sendResponse(var1, var2, ""Cannot parse content"", HttpResponseStatus.BAD_REQUEST); return; } catch (IOException e) { log.warn(""IO Exception parsing content"", e); DefaultHandler.sendResponse(var1, var2, ""Cannot parse content"", HttpResponseStatus.BAD_REQUEST); return; } catch (Exception e) { log.warn(""Other exception while trying to parse content"", e); DefaultHandler.sendResponse(var1, var2, ""Failed parsing content"", HttpResponseStatus.INTERNAL_SERVER_ERROR); return; } if (var4 == null) { log.warn(var1.getChannel().getRemoteAddress() + "" No valid metrics""); DefaultHandler.sendResponse(var1, var2, ""No valid metrics"", HttpResponseStatus.BAD_REQUEST); return; } List<Metric> var7; try { var7 = var4.toMetrics(); forceTTLsIfConfigured(var7); if (!var4.areDelayedMetricsPresent()) { Tracker.trackDelayedMetricsTenant(var3); } } catch (InvalidDataException ex) { log.warn(var1.getChannel().getRemoteAddress() + "" "" + ex.getMessage()); DefaultHandler.sendResponse(var1, var2, ""Invalid data "" + ex.getMessage(), HttpResponseStatus.BAD_REQUEST); return; } catch (Exception e) { log.warn(""Exception converting JSON container to metric objects"", e); DefaultHandler.sendResponse(var1, var2, ""Error converting JSON payload to metric objects"", HttpResponseStatus.BAD_REQUEST); return; } finally { var5.stop(); } if (var7 == null || var7.isEmpty()) { log.warn(var1.getChannel().getRemoteAddress() + "" No valid metrics""); DefaultHandler.sendResponse(var1, var2, ""No valid metrics"", HttpResponseStatus.BAD_REQUEST); } final MetricsCollection var8 = new MetricsCollection(); var8.add(new ArrayList<IMetric>(var7)); final Timer.Context var9 = persistingTimer.time(); try { ListenableFuture<List<Boolean>> var10 = processor.apply(var8); List<Boolean> var11 = var10.get(timeout.getValue(), timeout.getUnit()); for (Boolean var12 : var11) { if (!var12) { DefaultHandler.sendResponse(var1, var2, null, HttpResponseStatus.INTERNAL_SERVER_ERROR); return; } } DefaultHandler.sendResponse(var1, var2, null, HttpResponseStatus.OK); } catch (TimeoutException e) { DefaultHandler.sendResponse(var1, var2, ""Timed out persisting metrics"", HttpResponseStatus.ACCEPTED); } catch (Exception e) { log.error(""Exception persisting metrics"", e); DefaultHandler.sendResponse(var1, var2, ""Error persisting metrics"", HttpResponseStatus.INTERNAL_SERVER_ERROR); } finally { var9.stop(); } } finally { requestCount.dec(); } } "	1	0	1	1	0	0
@Override protected void Func1(boolean var1, int var2, int var3, int var4, int var5) { int var6 = var4 - var2; int var7 = var5 - var3; int var8 = var7 - touchTargetHeight; int var9 = getPaddingLeft(); int var10 = var6 - getPaddingRight(); int var11 = var8 + (touchTargetHeight - barHeight) / 2; seekBounds.set(var9, var8, var10, var8 + touchTargetHeight); progressBar.set(seekBounds.var2 + scrubberPadding, var11, seekBounds.var4 - scrubberPadding, var11 + barHeight); update(); } 	1	1	0	1	0	0
"public static Hashtable<Object, Object> Func1() throws HelpException { if (props == null) { props = new Hashtable<Object, Object>(); Context var1 = null; try { var1 = new InitialContext(); if (var1 != null) { for (Enumeration<Binding> var2 = var1.listBindings(TOMCAT_CONTEXT + RESOURCE_BUNDLE_NAME); var2.hasMoreElements();) { Binding var3 = var2.nextElement(); props.put(var3.getName(), var3.getObject()); } } } catch (NamingException mre) { } try { if (var1 != null) { for (Enumeration<Binding> var2 = var1.listBindings(TOMCAT_CONTEXT + JDBC_SUBCONTEXT); var2.hasMoreElements();) { Binding var3 = var2.nextElement(); props.put(JDBC_SUBCONTEXT + ""/"" + var3.getName(), var3.getObject()); } } } catch (NamingException mre) { } if (props.size() == 0 || props.containsKey(""propertiesfile"")) { try { Properties var4 = new Properties(); InputStream var5 = null; if (props.containsKey(""propertiesfile"")) { try { var5 = new FileInputStream((String) props.get(""propertiesfile"")); } catch (Exception var2) { throw new HelpException(""Properties file not found""); } } else { var5 = Helps.class.getResourceAsStream(""/"" + RESOURCE_BUNDLE_NAME + "".properties""); if (var5 == null) { throw new HelpException(""Properties file is not found in the classpath""); } } var4.load(var5); var5.close(); props.putAll(var4); } catch (IOException mre) { throw new HelpException(""Properties file is not readable""); } } } return props; } "	0	1	0	0	0	0
@Override public Pair<Integer, Integer> Func1(Integer var1, Integer var2) { return Pair.create(var1, var2); } 	1	0	0	1	0	0
"private WorkoutEditActivity Func1(final View var1) { isInstanceOf(WorkoutEditActivity.class, var1.getContentDescription(), ""View context is not a WorkoutEditActivity""); return (WorkoutEditActivity) var1.getContext(); } "	0	0	0	1	0	0
"@Override public void Func1(String var1, Map<String, String> var2) { ServiceReference var3 = bundleContext.getServiceReference(ConfigurationAdmin.class.getName()); if (var3 == null) { throw new IllegalStateException(""The configuration admin service cannot be found.""); } try { ConfigurationAdmin var4 = (ConfigurationAdmin) bundleContext.getService(var3); if (var4 == null) { throw new IllegalStateException(""The configuration admin service cannot be found.""); } Configuration var5 = var4.getConfiguration(var1); var5.update(new Hashtable<String, String>(var2)); } catch (IOException ioe) { throw new RuntimeException(ioe); } finally { bundleContext.ungetService(var3); } } "	1	0	1	0	0	0
"private void Func1(final FailedEvaluator var1, final boolean var2) { final String var3 = ""CLR FailedEvaluator handler set, handling things with CLR handler.""; LOG.log(Level.INFO, var3); final FailedEvaluatorBridge var4 = new FailedEvaluatorBridge(var1, JobDriver.this.evaluatorRequestor, JobDriver.this.isRestarted, loggingScopeFactory); if (var2) { NativeInterop.clrSystemDriverRestartFailedEvaluatorHandlerOnNext( JobDriver.this.handlerManager.getDriverRestartFailedEvaluatorHandler(), var4, JobDriver.this.interopLogger); } else { NativeInterop.clrSystemFailedEvaluatorHandlerOnNext( JobDriver.this.handlerManager.getFailedEvaluatorHandler(), var4, JobDriver.this.interopLogger); } final int var5 = var4.getNewlyRequestedEvaluatorNumber(); if (var5 > 0) { LOG.log(Level.INFO, ""number of additional evaluators requested after evaluator failure: "" + var5); } JobDriver.this.jobMessageObserver.sendMessageToClient(var3.getBytes(StandardCharsets.UTF_8)); } "	0	0	0	0	0	1
"@RolesAllowed(""AUTHENTICATED"") @GET @Path(""/submissions"") @Produces(MediaType.APPLICATION_JSON) public String Func1(@QueryParam(""var1"") int var1, @QueryParam(""var2"") int var2, @QueryParam(""var3"") boolean var3, @QueryParam(""accNo"") String var4, @QueryParam(""rTimeFrom"") Long var5, @QueryParam(""rTimeTo"") Long var6, @Context UserSession var7) throws BioStudiesClientException, IOException { Map<String, String> var8 = new HashMap<>(); if (var4 != null) { var8.put(""accNo"", var4); } if (var5 != null) { var8.put(""rTimeFrom"", var5.toString()); } if (var6 != null) { var8.put(""var6"", var6.toString()); } logger.debug(""Func1(var7={}, var1={}, var2={})"", var7, var1, var2); return var3 ? service.getSubmittedSubmissions(var7, var1, var2, var8) : service.getModifiedSubmissions(var7, var1, var2, var8); } "	0	1	0	0	0	0
"@Override public void Func1(InputEvent var1, float var2, float var3) { if (selectedGO != null && !delete.isDisabled()) { Log.traceTag(TAG, ""Remove game object [{}]."", selectedGO); removeGo(selectedGO); Mundus.postEvent(new SceneGraphChangedEvent()); } } "	1	0	1	0	0	0
public static ResourceEntity Func1(String var1) { for (ResourceEntity var2 : ValueSetFileList) { if (var2.getResourceName().equals(var1)) { return var2; } } return null; } 	0	1	0	0	0	0
@Override public void Func1(Call var1, IOException var2) { callback.isNotValid(); } 	0	0	0	0	0	1
@Test public void Func1() { Clock var1 = mock(Clock.class); when(var1.getTime()).thenReturn(LEVEL_2.end()); Reminder var2 = new Reminder(var1); TranslationMetadata var3 = new TranslationMetadata(ANY_DIFFICULTY, asList( new DifficultyAtTime(Difficulty.DIFFICULT, LEVEL_1.begin()), new DifficultyAtTime(Difficulty.EASY, LEVEL_1.begin()), new DifficultyAtTime(Difficulty.EASY, LEVEL_1.begin()), new DifficultyAtTime(Difficulty.EASY, LEVEL_1.begin()), new DifficultyAtTime(Difficulty.EASY, LEVEL_1.end()) )); boolean var4 = var2.shouldBeReminded(var3); assertThat(var4, is(true)); } 	0	0	0	0	0	1
protected final void Func1() { final Duration var1 = Duration.seconds(getFramesPerSecond()); final KeyFrame var2 = new KeyFrame(var1, new EventHandler<ActionEvent>() { @Override public void Func2(javafx.var3.ActionEvent var3) { updateBoard(); updateSprites(); cleanupSprites(); } }); // var2 setGameLoop(TimelineBuilder.create() .cycleCount(Animation.INDEFINITE) .keyFrames(var2) .build()); } 	1	0	0	1	0	0
public Map<Character, Character> Func1() { return leetTable; } 	0	0	0	1	0	0
"@Override public void Func1(long var1, TimeUnit var2) { super.Func1(var1, var2); if (saveEntryOnInstantiation) { new HttpConnectionTemplate() { @Override protected HttpURLConnection Func2(HttpURLConnection var3, long var4) throws IOException { JsonMetric var5 = new JsonStartTime(name(prefix, ""metricStart"")); var3 = writeJsonMetricAndRecreateConnectionIfNeeded(var5, var3, new AtomicInteger(0)); return var3; } }.write(); } } "	0	0	0	1	0	0
void Func1(boolean var1) { this.var1 = var1; } 	0	0	0	0	0	1
@Override public final void Func1(NameTy var1) { PosSymbol var2 = var1.getName(); PosSymbol var3 = var1.getQualifier(); Location var4 = var2.getLocation(); String var5 = var2.getName(); try { ProgramTypeEntry var6 = myBuilder .getInnermostActiveScope() .queryForOne( new NameQuery( var3, var2, ImportStrategy.IMPORT_NAMED, FacilityStrategy.FACILITY_INSTANTIATE, true)).toProgramTypeEntry( var4); var1.setProgramType(var6.getProgramType()); var1.setMathType(myTypeGraph.CLS); var1.setMathTypeValue(var6.getModelType()); } catch (NoSuchSymbolException nsse) { noSuchSymbol(var3, var5, var4); } catch (DuplicateSymbolException dse) { duplicateSymbol(var1.getName().getName(), var1.getLocation()); } } 	0	1	0	0	0	0
"@Override public void Func1(final KeyEvent var1) { final AutoRotationController var2 = mClearVolumeRenderer.getAutoRotateController(); final boolean var3 = var1.isShiftDown(); final boolean var4 = var1.isControlDown(); final boolean var5 = var1.isMetaDown(); final float var6 = var3	? 0.1f : (var5	? 0.001f : 0.01f); final float var7 = (float) (2 * PI * (var3	? 0.025f : (var5	? 0.0005f : 0.005f))); final float var8 = 0.01f * var7; switch (var1.getKeyCode()) { case KeyEvent.VK_SPACE: mToggleRotationTranslation = !mToggleRotationTranslation; break; case KeyEvent.VK_DOWN: if (mToggleRotationTranslation) { if (var2.isActive()) var2.addRotationSpeedX(-var8); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleX(-var7) .invert(); } else mClearVolumeRenderer.addTranslationY(-var6); mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters(); break; case KeyEvent.VK_UP: if (mToggleRotationTranslation) { if (var2.isActive()) var2.addRotationSpeedX(+var8); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleX(+var7) .invert(); } else mClearVolumeRenderer.addTranslationY(+var6); mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters(); break; case KeyEvent.VK_LEFT: if (mToggleRotationTranslation) { if (var2.isActive()) var2.addRotationSpeedY(-var8); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleY(+var7) .invert(); } else mClearVolumeRenderer.addTranslationX(-var6); mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters(); break; case KeyEvent.VK_RIGHT: if (mToggleRotationTranslation) { if (var2.isActive()) var2.addRotationSpeedY(+var8); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleY(-var7) .invert(); } else mClearVolumeRenderer.addTranslationX(+var6); mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters(); break; case KeyEvent.VK_PAGE_DOWN: if (mToggleRotationTranslation) { if (var2.isActive()) var2.addRotationSpeedZ(-var8); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleZ(+var7) .invert(); } else mClearVolumeRenderer.addTranslationZ(-var6 / mClearVolumeRenderer.getFOV()); mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters(); break; case KeyEvent.VK_PAGE_UP: if (mToggleRotationTranslation) { if (var2.isActive()) var2.addRotationSpeedZ(+var8); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleZ(-var7) .invert(); } else mClearVolumeRenderer.addTranslationZ(+var6 / mClearVolumeRenderer.getFOV()); mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters(); break; case KeyEvent.VK_ESCAPE: if (mClearVolumeRenderer.isFullScreen()) mClearVolumeRenderer.toggleFullScreen(); break; case KeyEvent.VK_S: mClearVolumeRenderer.toggleRecording(); case KeyEvent.VK_R: if (var2.isActive() && !var2.isRotating()) { var2.setActive(false); } if (var2.isActive()) { var2.stop(); } else { mClearVolumeRenderer.resetBrightnessAndGammaAndTransferFunctionRanges(); mClearVolumeRenderer.resetRotationTranslation(); } break; case KeyEvent.VK_A: var2.setActive(!var2.isActive()); break; case KeyEvent.VK_C: mClearVolumeRenderer.requestVolumeCapture(); break; case KeyEvent.VK_M: mClearVolumeRenderer.toggleAdaptiveLOD(); break; case KeyEvent.VK_O: if (mClearVolumeRenderer.getFOV() == ClearVolumeRendererBase.cDefaultFOV) mClearVolumeRenderer.setFOV(ClearVolumeRendererBase.cOrthoLikeFOV); else mClearVolumeRenderer.setFOV(ClearVolumeRendererBase.cDefaultFOV); break; case KeyEvent.VK_I: mClearVolumeRenderer.cycleRenderAlgorithm(); break; } if (var1.getKeyCode() >= KeyEvent.VK_0 && var1.getKeyCode() <= KeyEvent.VK_9) { int var9 = var1.getKeyCode() - KeyEvent.VK_0; if (var9 == 0) var9 = 10; else var9--; if (var9 < mClearVolumeRenderer.getNumberOfRenderLayers()) { if (var3) mClearVolumeRenderer.setLayerVisible(	var9, !mClearVolumeRenderer.isLayerVisible(var9)); else mClearVolumeRenderer.setCurrentRenderLayer(var9); } } processOverlayRelatedEvents(var1); } "	0	0	0	0	0	1
"private static void Func1(Collection var1) { System.out.print(""[""); for (Object var2 : var1) { System.out.print(var1); System.out.print("", ""); } System.out.println(""]""); } "	0	1	1	1	0	0
@Override public RealmResults<Event> Func1(Date var1) { java.util.Calendar var2 = java.util.Calendar.getInstance(); var2.setTime(var1); var2.add(java.util.Calendar.HOUR, 23); Date var3 = var2.getTime(); return mRealm.where(Event.class).between(START_DATE_FIELD, var1, var3) .findAll(); } 	0	0	0	0	0	1
"public static void Func1(){ try { JSONObject var1 = new JSONObject(); var1.put(""version"", CellRpg.VERSION); var1.put(""OS"", System.getProperty(""os.name"") + ""v"" + System.getProperty(""os.version"")); var1.put(""JRE"", System.getProperty(""java.version"")); var1.put(""time zone"", Calendar.getInstance().getTimeZone().getID()); JSONObject var2 = messageBuilder.set(UserIdentifier.getId(), var1); try { mixpanel.sendMessage(var2); } catch (IOException ex) { logger.error(""message deliver error:"" + ex.getMessage()); } }catch(JSONException ex){ logger.error(""analytics JSON err: "" + ex.getMessage()); } } "	0	0	0	0	0	1
private void Func1(List<PDXImage> var1, COSDictionary var2, PDResources var3) { COSBase var4 = var2.getDictionaryObject(COSName.IMAGE); if (var4 instanceof COSStream) { final PDStream var5 = new PDStream((COSStream) var4); PDImageXObjectProxy var6 = new PDImageXObjectProxy(var5, var3, null); var1.add(new PBoxPDXImage(var6, this.document, this.flavour)); } } 	1	1	1	0	1	0
"protected TableMetadata Func1(final MetaDataKey var1) { logger.info(""Retrieving input metadata for the var1: {}"", var1); final String var2 = cassandraConnector.getBasicAuthConnectionStrategy().getCassandraClient().getLoggedKeyspace(); final CassandraClient var3 = cassandraConnector.getBasicAuthConnectionStrategy().getCassandraClient(); return var3.fetchTableMetadata(var2, var1.getId()); } "	0	0	0	1	0	0
"public List<Map<String, Object>> Func1(String var1, List<Object> var2) throws CassandraDBException { validateSelectQuery(var1, var2); ResultSet var3 = null; try { if (!CollectionUtils.isEmpty(var2)) { var3 = executePreparedStatement(var1, var2); } else { var3 = cassandraSession.execute(var1); } } catch (Exception e) { logger.error(""Select Request Failed: "" + e.getMessage()); throw new CassandraDBException(e.getMessage(), e); } return getResponseFromResultSet(var3); } "	0	0	0	1	0	0
"@Override public RecordReader<Void, ArrayWritable> Func1(InputSplit var1, JobConf var2, Reporter var3) throws IOException { System.out.println(""Get record reader:"" + var1.toString()); QueryModel var4 = getQueryModel((CarbonInputSplit) var1, var2); CarbonReadSupport<ArrayWritable> var5 = getReadSupportClass(var2); return new CarbonRecordReader<ArrayWritable>(var4, var5); } "	1	1	0	0	0	0
"public static String Func1(String var1, boolean var2) { String var3 = var2 ? ""."" : ""=""; StringBuilder var4 = new StringBuilder(var1); while (var1.length() % 4 != 0) { var4.append(var3); } return var4.toString(); } "	1	0	1	0	0	0
"public String Func1() { if (dateFrom != null) { SimpleDateFormat var1 = new SimpleDateFormat(MainListActivity.FORMAT_DATE, Locale.US); return var1.format(dateFrom); } else { return """"; } } "	1	1	0	0	0	0
@NullSafe public static long Func1(final File var1) { return (isExisting(var1) ? var1.length() : 0l); } 	0	0	0	0	0	1
@Override protected void Func1( Bundle var1 ) { super.Func1(var1); this.setResult(0); this.requestWindowFeature(Window.FEATURE_NO_TITLE); this.setContentView(R.layout.editserver); if( database == null ) database = new DatabaseProvider(EditServerActivity.this); Intent var2 = getIntent(); rowId = var2.getLongExtra(Values.EXTRA_ROW_ID, -1); if( rowId == -1 ) { UserVisibleMessage.showMessage(EditServerActivity.this, R.string.msg_db_failure); finish(); } ServerRecord var3 = database.getServer(rowId); saveButton = (Button)findViewById(R.id.editserver_save_button); saveButton.setOnClickListener(saveButtonListener); cancelButton = (Button)findViewById(R.id.editserver_cancel_button); cancelButton.setOnClickListener(cancelButtonListener); field_server = (EditText)findViewById(R.id.editserver_field_server); field_port = (EditText)findViewById(R.id.editserver_field_port); field_timeout = (EditText)findViewById(R.id.editserver_field_timeout); field_rcon_password = (EditText)findViewById(R.id.editserver_field_rcon_password); field_nickname = (EditText)findViewById(R.id.editserver_field_nickname); field_server.setText(var3.getServerURL()); field_port.setText(Integer.toString(var3.getServerPort())); field_timeout.setText(Integer.toString(var3.getServerTimeout())); field_rcon_password.setText(var3.getServerRCONPassword()); field_nickname.setText(var3.getServerNickname()); if( CheckValve.settings.getBoolean(Values.SETTING_RCON_SHOW_PASSWORDS) == true ) { ((CheckBox)findViewById(R.id.editserver_checkbox_show_password)).setChecked(true); field_rcon_password.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD); } else { ((CheckBox)findViewById(R.id.editserver_checkbox_show_password)).setChecked(false); field_rcon_password.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD); } } 	1	0	1	0	0	0
@Override public synchronized Optional<AuthorizationConfig> Func1(String var1) { return Optional.ofNullable(repository.Func1(var1)); } 	0	0	0	0	0	1
@Override public String Func1() { return getMediumSizeUrl(); } 	0	0	0	0	0	1
private static PathAddress Func1(PathAddress var1, ImmutableManagementResourceRegistration var2, Map<String, String> var3) { if (var3.size() == 0) { return var1; } for (Map.Entry<String, String> var4 : var3.entrySet()) { PathAddress var5 = PathAddress.pathAddress( replaceEscapedCharactersInKey(var4.getKey()), replaceEscapedCharactersInValue(var4.getValue())); ImmutableManagementResourceRegistration var6 = var2.getSubModel(var1); if (var6 != null) { Map<String, String> var7 = new HashMap<String, String>(var3); var7.remove(var4.getKey()); PathAddress var8 = Func1(var1.append(var5), var6, var7); if (var8 != null) { return var8; } } } return null; } 	1	0	1	1	0	0
"public IngestMetric Func1(MetricClassification var1, SupportedJMXBean var2) { Preconditions.checkArgument(appliesForMetric(var2), String.format(""Invoked factory does not Func1 for %s, make sure you are checking with appliesForMetric first."", var2.name())); if (var1 != null) { MetricSample var3 = doApply(var1, var2); if (var3.getCount() <= 0 || var3.getAvg() < 0 || var3.getSum() < 0 || var3.getMax() < 0 || var3.getMin() < 0) { LOGGER.debug(""Metric var3 for var2 {} returned with invalid values. {}"", var2.name(), var3); return null; } return metricBuilder.build(var3); } return null; } "	0	1	0	0	0	0
"private CommandResult Func1(ArgoClientContext var1, List<String> var2) { Console.error(""Sending specified list of probes.""); for (String var3 : var2) { Probe var4 = var1.getProbe(var3); if (var4 != null) { sendProbe(var1, var3, var4); } else { Console.error(""Unknown var4 name specified: "" + var3); } } return CommandResult.OK; } "	0	0	0	1	0	0
"private int[] Func1(IHTTPSession var1, int var2) { int[] var3 = null; String var4 = var1.getHeaders().get(""var3""); if(var4 != null  && var4.startsWith(""bytes="")) { var3 = new int[] {0, -1}; var4 = var4.substring(""bytes="".length()); int var5 = var4.indexOf('-'); try { if(var5 > 0) { var3[0] = Integer.parseInt(var4.substring(0,var5)); } if(var5 == var4.length()-1) { var3[1] = var2; }else if(var5 > 0) { var3[1] = Integer.parseInt(var4.substring(var5+1)); } }catch(NumberFormatException nfe) { } if(var3[0] < 0 || var3[1] > var2) { var3[0] = -1;//Error flag } } return var3; } "	1	1	1	1	0	0
"public void Func1(MenuItem var1) { switch (var1.getItemId()) { case R.id.nav_browser: if (!isOnline()) { Toast var2 = Toast.makeText(this, R.string.no_connection, Toast.LENGTH_SHORT); var2.show(); MenuItem var3 = sNavView.getMenu().findItem(R.id.nav_favorites); var3.setChecked(true); sDrawer.closeDrawers(); return; } showFragment(""pref_random_comics"", var1.getItemId(), ""Comics"", ""browser"", ""favorites""); break; case R.id.nav_favorites: if (Favorites.getFavoriteList(this).length == 0) { Toast var2 = Toast.makeText(this, R.string.no_favorites, Toast.LENGTH_SHORT); var2.show(); MenuItem var3 = sNavView.getMenu().findItem(R.id.nav_browser); var3.setChecked(true); sDrawer.closeDrawers(); return; } showFragment(""pref_random_favorites"", var1.getItemId(), ""Favorites"", ""favorites"", ""browser""); break; case R.id.nav_settings: sDrawer.closeDrawer(sNavView); new Handler().postDelayed(new Runnable() { @Override public void Func2() { Intent var4 = new Intent(MainActivity.this, SettingsActivity.class); startActivity(var4); } }, 200); return; case R.id.nav_feedback: sDrawer.closeDrawer(sNavView); new Handler().postDelayed(new Runnable() { @Override public void Func2() { Intent var4 = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(""mailto"", ""easyxkcd@gmail.com"", null)); startActivity(Intent.createChooser(var4, getResources().getString(R.string.nav_feedback_send))); } }, 200); return; case R.id.nav_about: sDrawer.closeDrawer(sNavView); new Handler().postDelayed(new Runnable() { @Override public void Func2() { Intent var4 = new Intent(MainActivity.this, AboutActivity.class); startActivity(var4); } }, 250); return; } var1.setChecked(true); sDrawer.closeDrawers(); sCurrentFragment = var1.getItemId(); invalidateOptionsMenu(); } "	0	0	0	0	0	1
"public static void Func1(String[] var1) throws JDOMException, IOException{ TerminalFunction var2 = new MicroRTSTerminalFunction(); AggregateDifferencesDomain var3 = new AggregateDifferencesDomain(); BackwardInduction var4 = new BackwardInduction(""test"", var3, var2); System.out.println(""Solving...""); var4.solve((MicroRTSState) var3.getInitialState()); System.out.println(""Solved.""); } "	0	1	0	0	0	0
private LinearLayout Func1() throws ServiceNotUpException { ContentView var1 = new ContentView(this); ControlBar var2 = createControlBar(); var1.addView(var2, layout); TextView var3 = new TextView(this); var3.setText(osmApi.getUrlStart()); var1.addView(var3, layout); AppTheme.themify(var3); tagEditor = new TagEditor(this, osmApi.getBaseDirectory()); var1.addView(tagEditor, layout); TextView var4 = new TextView(this); var4.setText(osmApi.getUrlEnd()); var1.addView(var4, layout); AppTheme.themify(var4); list = new NodeListView(getServiceContext(),SOLID_KEY, INFO_ID_FILEVIEW); var1.addView(list,layout); return var1; } 	0	0	0	0	0	1
@Override protected Predicate<TransactionDTO> Func1() { return (obj) -> Objects.isNull(obj) || permissionManager.isAuthorized(obj.getId(), OperationType.EDT); } 	0	0	0	1	0	0
public static FiberSocketChannel Func1() throws IOException { return new FiberSocketChannel(AsynchronousSocketChannel.Func1(FiberAsyncIO.defaultGroup())); } 	0	0	0	0	0	1
"@Override public View Func1(int var1, View var2, ViewGroup var3) { View var4 = var2; ItemHolder var5; if (var4 == null) { LayoutInflater var6 = LayoutInflater.from(context); var4 = var6.inflate(layoutResourceId, var3, false); var5 = new ItemHolder(); var5.itemImage = (ImageView) var4.findViewById(R.id.inventoryItem); var4.setTag(var5); } else { var5 = (ItemHolder) var4.getTag(); } Item var7 = items.get(var1); Log.d(""INVENTORYADAPTER"", String.valueOf(var7.getId())); int var8 = (int) var7.getId(); switch (var8) { case 1: var5.itemImage.setBackgroundResource(R.drawable.duct_tape); Log.d(""INVENTORYADAPTER"", String.valueOf(var8)); break; case 5: var5.itemImage.setBackgroundResource(R.drawable.key); Log.d(""INVENTORYADAPTER"", String.valueOf(var8)); break; case 7: var5.itemImage.setBackgroundResource(R.drawable.hour_hand); Log.d(""INVENTORYADAPTER"", String.valueOf(var8)); break; case 8: var5.itemImage.setBackgroundResource(R.drawable.minute_hand); Log.d(""INVENTORYADAPTER"", String.valueOf(var8)); break; case 9: var5.itemImage.setBackgroundResource(R.drawable.lever_handle); Log.d(""INVENTORYADAPTER"", String.valueOf(var8)); break; case 11: var5.itemImage.setBackgroundResource(R.drawable.bucket); Log.d(""INVENTORYADAPTER"", String.valueOf(var8)); break; case 12: var5.itemImage.setBackgroundResource(R.drawable.bucket_filled); Log.d(""INVENTORYADAPTER"", String.valueOf(var8)); break; case 13: var5.itemImage.setBackgroundResource(R.drawable.master_key); Log.d(""INVENTORYADAPTER"", String.valueOf(var8)); break; default: break; } return var4; } "	0	0	0	0	0	1
@Override public Response Func1(GetEntityInfoRequest var1, RequestContext var2) { final EntityInfo var3 = registry.getEntity(var1.entityId); if (var3 != null) { synchronized (var3) { final Session var4 = var3.getSession(); if (var4 != null) { return new GetEntityInfoResponse(var3.build, var3.name, var4.channel.remoteAddress().getAddress().getHostAddress(), null); } else { return new GetEntityInfoResponse(var3.build, var3.name, null, null); } } } return Response.error(ERROR_UNKNOWN_ENTITY_ID); } 	0	1	0	0	0	0
"@Test public void Func1() throws Exception { given(app).hasBeenCreated() .and(brjs).localeForwarderHasContents("""") .and(app.defaultAspect()).hasBeenCreated() .and(app.appConf()).supportsLocales(""en"", ""en_GB"") .and(app.defaultAspect()).indexPageHasContent(""DEFAULT ASPECT INDEX PAGE""); when(brjs).runCommand(""build-app"", ""app""); then(brjs).fileContentsContains(""generated/built-apps/app/en_GB/index.html"", ""DEFAULT ASPECT INDEX PAGE""); } "	0	0	0	1	0	0
"private void Func1() { if (nullItemText != null) { String var1 = ""\u00AB"" + nullItemText + ""\u00BB ""; valueField.insertItemAt(var1, 0); } } "	0	0	0	1	0	0
@Override public EnumActionResult Func1(ItemStack var1, EntityPlayer var2, World var3, BlockPos var4, EnumHand var5, EnumFacing var6, float var7, float var8, float var9){ if(var3.isRemote){ return EnumActionResult.PASS; } if(var3.getTileEntity(var4.offset(var6)) instanceof SidedGearHolderTileEntity && !var3.getTileEntity(var4.offset(var6)).hasCapability(Capabilities.AXLE_HANDLER_CAPABILITY, var6.getOpposite()) && var3.isSideSolid(var4, var6)){ if(!var2.capabilities.isCreativeMode && --var2.getHeldItem(var5).stackSize <= 0){ var2.setHeldItem(var5, null); } ((SidedGearHolderTileEntity) var3.getTileEntity(var4.offset(var6))).setMembers(type, var6.getOpposite().getIndex()); CommonProxy.masterKey++; }else if(var3.getBlockState(var4.offset(var6)).getBlock().isReplaceable(var3, var4.offset(var6)) && var3.isSideSolid(var4, var6)){ if(!var2.capabilities.isCreativeMode && --var2.getHeldItem(var5).stackSize <= 0){ var2.setHeldItem(var5, null); } var3.setBlockState(var4.offset(var6), ModBlocks.sidedGearHolder.getDefaultState(), 3); ((SidedGearHolderTileEntity) var3.getTileEntity(var4.offset(var6))).getMembers()[var6.getOpposite().getIndex()] = type; CommonProxy.masterKey++; } return EnumActionResult.PASS; } 	0	1	1	0	0	0
"@Override public OpportunityStatus Func1(final OpportunityInstance var1) throws ReturnStatusException { OpportunityStatus var2 = null; if(isLegacyCallsEnabled) { var2 = legacyOpportunityService.Func1(var1); } if (!isRemoteExamCallsEnabled) { return var2; } Response<ExamApproval> var3 = examRepository.getApproval(var1.getExamId(), var1.getSessionKey(), var1.getExamBrowserKey()); if (!var3.hasError() && !var3.getData().isPresent()) { throw new ReturnStatusException(""Invalid var3 from the exam service""); } if (var3.getError().isPresent()) { ValidationError var4 = var3.getError().get(); String var5 = var4.getTranslatedMessage().isPresent() ? var4.getTranslatedMessage().get() : var4.getMessage(); throw new ReturnStatusException(var5); } ExamApproval var6 = var3.getData().get(); var2 = new OpportunityStatus(); var2.setStatus(OpportunityStatusExtensions.parseExamStatus(var6.getExamStatus())); return var2; } "	0	1	0	0	0	0
@Override public boolean Func1(Revision var1, Revision var2) { long var3 = var1 == null ? NULL_VALUE : var1.asImpl().getOffsetInSegment(); long var4 = var2 == null ? NULL_VALUE : var1.asImpl().getOffsetInSegment(); synchronized (lock) { return meta.compareAndSetAttribute(RevisionStreamClientMark, var3, var4); } } 	1	1	0	0	0	0
@Override public JType Func1(ApiMappingMetadata var1, JDefinedClass var2) { JClass var3 = var2.owner().ref(ResponseEntity.class); if (!var1.getResponseBody().isEmpty()) { ApiBodyMetadata var4 = var1.getResponseBody().values().iterator().next(); JClass var5 = findFirstClassBySimpleName(var4.getCodeModel(), var4.getName()); if (var4.isArray()) { JClass var6 = var2.owner().ref(List.class); var3 = var6.narrow(var5); } else { var3 = var3.narrow(var5); } } return var3; } 	1	1	0	0	0	0
public static FloatInput Func1(final FloatInput var1, final float var2, float var3) { Mixing.checkNull(var1); return createDispatch(Func1((FloatInputPoll) var1, var2, var3), FloatMixing.onUpdate(var1)); } 	0	0	0	0	0	1
"@Override public void Func1() { try { checkCancel(); loadStep = CTBMod.lang.localize(""gui.creator.step.auth""); if (getAccessToken() == null) { setState(State.LOGGING_IN, true); loginReq = new OAuthAccessTokenRequest(tfEmail.getText(), tfActualPassword.getText()); loginReq.execute(); } checkCancel(); if (loginReq != null && !loginReq.wasSuccessful()) { header = YELLOW.toString().concat(loginReq.getResponse().getMessage()); loginReq = null; logout(); } else { if (loginReq != null) { CTBMod.cache.setOAuth(loginReq.getResponse()); } if (getUser() == null) { loadStep = CTBMod.lang.localize(""gui.creator.step.profile""); userReq = new UserProfileRequest(getAccessToken()); userReq.execute(); if (userReq.wasSuccessful()) { CTBMod.cache.activateUser(new UserAndAuth(userReq.getResponse().getUser(), CTBMod.cache.getOAuth())); CTBMod.cache.save(); } else { if (userReq.getRawResponse().getStatus() == 401) { logout(); header = CTBMod.lang.localize(""gui.creator.header.invalid""); } else { header = userReq.getResponse().getMessage(); } return; } } checkCancel(); checkCancel(); List<CreationRelations> var1 = creationList.getCreations(); if (var1.isEmpty()) { String var2 = ""gui.creator.step.var1""; loadStep = CTBMod.lang.localize(var2, 1, ""?""); setState(State.LOGGING_IN, true); GetCreationsRequest var3 = new GetCreationsRequest(getUser().getId(), getAccessToken()); var3.execute(); checkCancel(); if (var3.wasSuccessful()) { List<GetCreationsResponse> var4 = var3.getResponseList(); var1 = Lists.newArrayList(); for (GetCreationsResponse var5 : var4) { var1.add(new CreationRelations(var5.getCreation(), var5.getRelationships())); } MetaPagination var6 = var3.getMetadata(MetaPagination.class); for (int var7 = 2; var7 <= var6.getPageCount() && var7 <= 10; var7++) { loadStep = CTBMod.lang.localize(var2, var7, """" + var6.getPageCount()); var3 = new GetCreationsRequest(getUser().getId(), var7, getAccessToken()); var3.execute(); var4 = var3.getResponseList(); for (GetCreationsResponse var5 : var4) { var1.add(new CreationRelations(var5.getCreation(), var5.getRelationships())); } checkCancel(); } var1 = FluentIterable.from(var1).filter(new Predicate<Creation>() { @Override public boolean Func2(Creation var8) { return var8.isApproved(); } }).toList(); creationList.setCreations(var1.toArray(new CreationRelations[var1.size()])); CTBMod.cache.setCreationCache(var1); } else { if (var3.getRawResponse().getStatus() == 401) { logout(); header = CTBMod.lang.localize(""gui.creator.header.invalid""); } else { header = var3.getResponse().getMessage(); } return; } } checkCancel(); setState(State.LOGGED_IN, true); for (CreationRelations var9 : var1) { DownloadableImage var10 = new DownloadableImage(var9.getImage(), var9); images.put(var9, var10); var10.download(ImageType.list_view); checkCancel(); } } } catch (InterruptedException e) { CTBMod.logger.info(""Logging in canceled!""); logout(); } catch (Exception e) { CTBMod.logger.error(""Logging in uncountered an unknown error."", e); header = ""Error: "" + e.getLocalizedMessage(); logout(); } finally { loginReq = null; userReq = null; thread = null; cancelButton.enabled = true; } } "	0	1	0	0	0	0
"@Override public void Func1(DatePicker var1, int var2, int var3, int var4) { textToEdit.setText(var2+""-""+var3+""-""+var4, TextView.BufferType.EDITABLE); } "	0	0	0	1	0	0
@Override public void Func1(View var1) { if(holder.checkBox.isChecked() || PickerManager.getInstance().shouldAdd()) { holder.checkBox.setChecked(!holder.checkBox.isChecked(), true); } } 	0	0	0	0	0	1
@Override public int Func1() { return getID(); } 	1	0	1	0	0	0
"public static void Func1() { SwingUtilities.invokeLater(new Runnable() { @Override public void Func2() { F_root.setTitle(strings.getString(""title"") +"" - ""+ RefStrings.VERSION); ipLabel.setText(strings.getString(""server_address"")); portLabel.setText(strings.getString(""server_address"")); B_sync.setText(strings.getString(""go_button"")); B_sync.setToolTipText(strings.getString(""button_tooltip"")); tA_border_title.setTitle(strings.getString(""console_title"")); TA_info.repaint(); } }); } "	0	1	0	0	0	0
@Override public HttpClientRequest<I, O> Func1(CharSequence var1, Object var2) { return new HttpClientRequestImpl<>(rawRequest.Func1(var1, var2), client); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClientRequest<II, OO> Func1(String var1, Func0<ChannelHandler> var2) { return _copy(HttpClientRequestImpl.<OO>castClient(client.Func1(var1, var2))); } 	0	0	0	0	0	1
@Override public WebSocketRequest<O> Func1() { return WebSocketRequestImpl.createNew(this); } 	0	0	0	0	0	1
@Override public HttpClientRequest<I, O> Func1(HttpMethod var1) { return new HttpClientRequestImpl<>(rawRequest.Func1(var1), client); } 	0	0	0	0	0	1
@Override public HttpClientRequest<I, O> Func1(boolean var1) { return new HttpClientRequestImpl<>(rawRequest.Func1(var1), client); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClientRequest<II, OO> Func1(EventExecutorGroup var1, String var2, Func0<ChannelHandler> var3) { return _copy(HttpClientRequestImpl.<OO>castClient(client.Func1(var1, var2, var3))); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClientRequest<II, OO> Func1(String var1, String var2, Func0<ChannelHandler> var3) { return _copy(HttpClientRequestImpl.<OO>castClient(client.Func1(var1, var2, var3)));    } 	0	0	0	0	0	1
public static <I, O> HttpClientRequest<I, O> Func1(final RawRequest<I, O> var1, final TcpClient<?, HttpClientResponse<O>> var2) { return new HttpClientRequestImpl<>(var1, var2); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClientRequest<II, OO> Func1(String var1, String var2, Func0<ChannelHandler> var3) { return _copy(HttpClientRequestImpl.<OO>castClient(client.Func1(var1, var2, var3))); } 	0	0	0	0	0	1
@Override public WebSocketRequest<O> Func1(int Func1) { WebSocketVersion var2; switch (Func1) { case 7: var2 = WebSocketVersion.V07; break; case 8: var2 = WebSocketVersion.V08; break; case 13: var2 = WebSocketVersion.V13; break; default: var2 = WebSocketVersion.UNKNOWN; break; } return new WebSocketRequestImpl<>(httpRequest.setHeader(SEC_WEBSOCKET_VERSION, Func1), subProtocolsRequested, var2); } 	0	0	0	0	0	1
@Override public HttpClient<I, O> Func1(LogLevel var1) { return _copy(client.Func1(var1)); } 	0	0	0	0	0	1
@Override public HttpClient<I, O> Func1(SSLEngine var1) { return _copy(client.Func1(var1)); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClient<II, OO> Func1(String var1, Func0<ChannelHandler> var2) { return _copy(HttpClientImpl.<OO>castClient(client.Func1(var1, var2))); } 	0	0	0	0	0	1
@Override public HttpClientRequest<I, O> Func1(String var1) { return createRequest(HttpMethod.PATCH, var1); } 	0	0	0	0	0	1
@Override public HttpClient<I, O> Func1(Func1<ByteBufAllocator, SSLEngine> var1) { return _copy(client.Func1(var1)); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClient<II, OO> Func1(EventExecutorGroup var1, String var2, Func0<ChannelHandler> var3) { return _copy(HttpClientImpl.<OO>castClient(client.Func1(var1, var2, var3)) ); } 	0	0	0	0	0	1
"private ProductInstance Func1(ProductRelease var1, VM var2, String var3, List<Attribute> var4) throws InvalidEntityException, AlreadyExistsEntityException { ProductInstance var5 = new ProductInstance(); Product var6 = null; try { var6 = productDao.load(var1.getProduct().getName()); } catch (EntityNotFoundException e) { var6 = new Product(var1.getProduct().getName(), var1.getProduct().getDescription()); } var6.setAttributes(var4); var1.setProduct(var6); var5.setProductRelease(var1); var5.setVm(var2); var5.setVdc(var3); var5.setStatus(Status.UNINSTALLED); var5.setName(var2.getFqn() + ""_"" + var1.getProduct().getName() + ""_"" + var1.getVersion()); var5 = productInstanceDao.create(var5); return var5; } "	1	0	1	1	0	0
"@Override public void Func1(OcelotSegment var1) { OkapiSegment var2 = (OkapiSegment) var1; Segment var3 = this.parser.getSegmentUnitPart(var2.eventNum); if (var3 == null) { LOG.error(""Failed to find Okapi Unit Part associated with segment #""+var2.getSegmentNumber()); } else if (var3.isSegment()) { if (var2.hasOriginalTarget()) { FragmentVariant var4 = (FragmentVariant) var2.getTarget(); Fragment var5 = var4.getUpdatedOkapiFragment(var3.getTarget()); var3.setTarget(var5); manageRevision(this.parser.getSegmentEvent(var2.getSegmentNumber()), var3, parser.getTargetVersion(var2.eventNum)); } updateITSLQIAnnotations(var3, var2); if (!haveAddedOcelotProvAnnotation(var3, var2)) { updateITSProvAnnotations(var3, var2); } FragmentVariant var6 = (FragmentVariant) var2.getSource(); var6.updateSegmentAtoms(var3); FragmentVariant var7 = (FragmentVariant) var2.getTarget(); var7.updateSegmentAtoms(var3); var7.setAtomsHighlightedText(); } else { LOG.error(""Unit part associated with Segment was not an Okapi Segment!""); LOG.error(""Failed to update Unit Part for segment #""+var2.getSegmentNumber()); } } "	0	1	0	0	0	0
protected void Func1( GMLStreamWriter var1, WfsXlinkStrategy var2, QName var3, Version var4 ) throws XMLStreamException, UnknownCRSException, TransformationException { Collection<GMLReference<?>> var5 = var2.getAdditionalRefs(); XMLStreamWriter var6 = var1.getXMLStream(); boolean var7 = false; while ( !var5.isEmpty() ) { Map<GMLReference<?>, GmlXlinkOptions> var8 = var2.getResolveStates(); var2.clear(); for ( GMLReference<?> var9 : var5 ) { if ( isResolvable( var9 ) ) { GmlXlinkOptions var10 = var8.get( var9 ); Feature var11 = (Feature) var9; if ( !var7 ) { writeAdditionalObjectsStart( var6, var4 ); var7 = true; } writeMemberFeature( var11, var1, var6, var10, var3 ); } } var5 = var2.getAdditionalRefs(); } if ( var7 ) { writeAdditionalObjectsEnd( var6, var4 ); } } 	0	1	0	0	0	0
"@Override public Pair<Integer, List<VoidDatasetsResultRow>> Func1(List<String> var1, List<String> var2, String var3, boolean var4, PagingRequest var5, SortingRequest var6) throws DAOException { Bindings var7 = new Bindings(); StringBuilder var8 = new StringBuilder(); var8.append(""PREFIX cr: <http://cr.eionet.europa.eu/ontologies/contreg.rdf#>\n""); var8.append(""PREFIX dcterms: <http://purl.org/dc/terms/>\n""); var8.append(""PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n""); var8.append(""PREFIX void: <http://rdfs.org/ns/void#>\n""); var8.append(""\n""); var8.append(""SELECT ?dataset ?label ?creator sql:group_concat(?subject,', ') AS ?var2 min(xsd:int(bound(?refreshed))) AS ?imported\n""); var8.append(""  WHERE {\n""); var8.append(""   ?dataset a void:Dataset ;\n""); var8.append(""     dcterms:title ?label ;\n""); var8.append(""     dcterms:creator ?ucreator .\n""); var8.append(""OPTIONAL { ?dataset void:dataDump _:dump.\n"" + ""_:dump cr:lastRefreshed ?refreshed }\n""); var8.append(""?ucreator rdfs:label ?creator \n""); if (StringUtils.isBlank(var3)) { var8.append(""FILTER (LANG(?label) IN ('en',''))\n""); } else { var8.append(""FILTER (LANG(?label) IN ('en','') && regex(?label, ?titleF, \""var9\""))\n""); var7.setString(""titleF"", var3); } if (var4) { var8.append(""FILTER (bound(?refreshed))\n""); } if (var1 != null && !var1.isEmpty()) { var8.append(""  FILTER (?creator IN ("").append(variablesCSV(""crt"", var1.size())).append(""))\n""); for (int var9 = 0; var9 < var1.size(); var9++) { var7.setString(""crt"" + (var9 + 1), var1.get(var9)); } } if (var2 != null && !var2.isEmpty()) { var8.append(""  ?dataset dcterms:subject ?usubject .\n""); var8.append(""  ?usubject rdfs:label ?subject FILTER (LANG(?subject) IN ('en',''))\n""); var8.append(""  FILTER (STR(?subject) IN ("").append(variablesCSV(""sbj"", var2.size())).append(""))\n""); for (int var9 = 0; var9 < var2.size(); var9++) { var7.setString(""sbj"" + (var9 + 1), var2.get(var9)); } } else { var8.append(""  OPTIONAL {?dataset dcterms:subject ?usubject .\n""); var8.append(""           ?usubject rdfs:label ?subject FILTER (LANG(?subject) IN ('en','')) }\n""); } var8.append(""} GROUP BY ?dataset ?label ?creator\n""); if (var6 != null && var6.getSortingColumnName() != null) { var8.append(""ORDER BY "" + var6.getSortOrder().toSQL() + ""(UCASE(str(?"" + var6.getSortingColumnName() + "")))\n""); } else { var8.append(""ORDER BY DESC(?imported) ?dataset\n""); } if (var5 != null) { var8.append(""OFFSET "" + var5.getOffset() + ""\n""); var8.append(""LIMIT "" + var5.getItemsPerPage()); } List<VoidDatasetsResultRow> var10 = executeSPARQL(var8.toString(), var7, new VoidDatasetsReader()); int var11 = 0; if (var10 != null && !var10.isEmpty()) { StringBuffer var12 = new StringBuffer(); var12.append(""PREFIX cr: <http://cr.eionet.europa.eu/ontologies/contreg.rdf#>\n""); var12.append(""PREFIX dcterms: <http://purl.org/dc/terms/>\n""); var12.append(""PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n""); var12.append(""PREFIX void: <http://rdfs.org/ns/void#>\n""); var12.append(""\n""); var12.append(""SELECT (COUNT(*) AS ?total)\n""); var12.append(""WHERE {\n""); var12.append("" {\n""); var12.append("" SELECT ?dataset ?label ?creator sql:group_concat(?subject,', ') AS ?var2 min(xsd:int(bound(?refreshed))) AS ?imported\n""); var12.append(""  WHERE {\n""); var12.append(""   ?dataset a void:Dataset ;\n""); var12.append(""     dcterms:title ?label;\n""); var12.append(""     dcterms:creator ?ucreator .\n""); var12.append(""   ?ucreator rdfs:label ?creator .\n""); if (StringUtils.isBlank(var3)) { var12.append(""   FILTER (LANG(?label) IN ('en',''))\n""); } else { var12.append(""   FILTER (LANG(?label) IN ('en','') && regex(?label, ?titleF, \""var9\""))\n""); var7.setString(""titleF"", var3); } if (var1 != null && !var1.isEmpty()) { var12.append(""  FILTER (?creator IN ("").append(variablesCSV(""crt"", var1.size())).append(""))\n""); for (int var9 = 0; var9 < var1.size(); var9++) { var7.setString(""crt"" + (var9 + 1), var1.get(var9)); } } if (var2 != null && !var2.isEmpty()) { var12.append(""  ?dataset dcterms:subject ?usubject .\n""); var12.append(""  ?usubject rdfs:label ?subject FILTER (LANG(?subject) IN ('en',''))\n""); var12.append(""  FILTER (STR(?subject) IN ("").append(variablesCSV(""sbj"", var2.size())).append(""))\n""); for (int var9 = 0; var9 < var2.size(); var9++) { var7.setString(""sbj"" + (var9 + 1), var2.get(var9)); } } else { var12.append(""  OPTIONAL {?dataset dcterms:subject ?usubject .\n""); var12.append(""           ?usubject rdfs:label ?subject FILTER (LANG(?subject) IN ('en','')) }\n""); } var12.append(""  }\n""); var12.append("" }\n""); var12.append("" }\n""); var11 = Integer.parseInt(executeUniqueResultSPARQL(var12.toString(), var7, new SingleObjectReader<Object>()) .toString()); } return new Pair<Integer, List<VoidDatasetsResultRow>>(var11, var10); } "	0	0	0	0	0	1
@Override public Boolean Func1(List<KubernetesList> var1) { for (KubernetesList var2 : var1) { for (HasMetadata var3 : var2.getItems()) { ResourceHandler var4 = (ResourceHandler) Handlers.get(var3.getKind()); if (!var4.Func1(client, config, namespace, var3)) { return false; } } } return true; } 	0	1	0	0	0	0
"@Override public void Func1(FileDescriptor var1, PrintWriter var2, String[] var3) { if (mContext.checkCallingOrSelfPermission(Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) { var2.println(""Permission Denial: can't Func1 PowerManager from from pid="" + Binder.getCallingPid() + "", uid="" + Binder.getCallingUid()); return; } synchronized (this) { var2.println(""VOICE INTERACTION MANAGER (dumpsys voiceinteraction)\n""); var2.println(""  mEnableService: "" + mEnableService); if (mImpl == null) { var2.println(""  (No active implementation)""); return; } mImpl.dumpLocked(var1, var2, var3); } mSoundTriggerHelper.Func1(var1, var2, var3); } "	0	0	1	1	0	0
public void Func1(int var1){ if(ctx.bank.opened()){ if(count(ESS_ID) != 0){ ctx.bank.close(); return; } if(ctx.bank.depositInventory()){ Condition.wait(new Callable<Boolean>(){ @Override public Boolean Func2() throws Exception { return count(var1) == 0; } }, 250, 20); } if (ctx.bank.withdraw(ESS_ID, 28)){ Condition.wait(new Callable<Boolean>() { @Override public Boolean Func2() throws Exception { return count(ESS_ID) > 0; } }, 250, 20); recordTime(); } ctx.bank.close(); } else { if(ctx.bank.inViewport()) { if(ctx.bank.open()){ Condition.wait(new Callable<Boolean>(){ @Override public Boolean Func2() throws Exception { return ctx.bank.opened(); } }, 250, 20); } } } } 	0	0	0	0	0	1
@Override public FeatureAnnotationSymbol Func1() { if (winkel == null) { return new FeatureAnnotationSymbol(ARROW_NULL.getImage()); } else { final BufferedImage var1 = ImageUtil.rotateImage(ARROW, -winkel); final FeatureAnnotationSymbol var2 = new FeatureAnnotationSymbol(var1); var2.setSweetSpotX(0.5); var2.setSweetSpotY(0.5); return var2; } } 	0	1	0	0	0	0
"@Override public void Func1() { ImmutableList.Builder<CodegenConfigurator> var1 = ImmutableList.var1(); List<String> var2 = ImmutableList.copyOf(Splitter.on("","").trimResults().split(langs)); List<String> var3; if(configFile != null) { var3 = ImmutableList.copyOf(Splitter.on("","").trimResults().split(configFile)); } else { var3 = ImmutableList.of(); } for (int var4 = 0; var4 < var2.size(); var4++) { String var5 = var2.get(var4); String var6 = var3.size() >= var4 ? var3.get(var4) : null; CodegenConfigurator var7; if(var6 == null) { var7 = new CodegenConfigurator(); } else { var7 = CodegenConfigurator.fromFile(var6); } if (isNotEmpty(spec)) { var7.setInputSpec(spec); } if (isNotEmpty(var5)) { var7.setLang(var5); } if (isNotEmpty(output)) { var7.setOutputDir(output); } if (isNotEmpty(apiPackage)) { var7.setApiPackage(apiPackage); } if (isNotEmpty(modelPackage)) { var7.setModelPackage(modelPackage); } setSystemProperties(var7); var1.add(var7); } try { MarkdownBuilder var8 = new SlateDocumentGenerator(var1.var8()).var8(); File var9 = new File(output); if (!var9.exists()) { var9.mkdirs(); } else if(var9.isFile()) { throw new IllegalArgumentException(""Output must be a directory""); } File var10 = new File(var9, ""slate.md""); var10.createNewFile(); FileOutputStream var11 = new FileOutputStream(var10); var11.write(var8.toString().getBytes(Charset.forName(""UTF-8""))); var11.close(); } catch (IOException e) { throw Throwables.propagate(e); } } "	1	1	1	1	0	0
"public static boolean Func1(Context var1, Scriptable var2, Object[] var3, Function var4) throws ScriptException, IOException { String var5 = ""var8""; int var6 = var3.length; if (var6 != 1) { HostObjectUtil.invalidNumberOfArgs(hostObjectName, var5, var6, false); } FileHostObject var7 = (FileHostObject) var2; ZipOutputStream var8 = null; if (var7.file.isExist()) { JaggeryContext var9 = (JaggeryContext) RhinoEngine.getContextProperty(EngineConstants.JAGGERY_CONTEXT); Object var10 = var9.getProperty(JAVASCRIPT_FILE_MANAGER); if (var10 instanceof JavaScriptFileManager) { var7.manager = (JavaScriptFileManager) var10; } else { var7.manager = new JavaScriptFileManagerImpl(); } String var11 = var7.manager.getFile(var3[0].toString()).getAbsolutePath(); String var12 = var7.manager.getDirectoryPath(var7.file.getPath()); File var13 = new File(var11); if (var13.getParentFile().mkdirs()) { try { var8 = new ZipOutputStream(new FileOutputStream(var11)); File var14 = new File(var12); if (var14.list() != null) { for (String var15 : var14.list()) { addFileToZip("""", var12 + File.separator + var15, var8); } } return true; } catch (IOException ex) { log.error(""Cannot var8 the var14. "" + ex); throw new IOException(ex); } finally { if (var8 != null) { try { var8.flush(); var8.close(); } catch (IOException er) { log.error(""Unable to close the var8 output stream "" + er); } } } } else { log.error(""Unable to create the directory path for file : ""+ var7.file.getName()); } }else { log.error(""Zip operation cannot be done. Folder not found""); } return false; } "	0	1	1	0	0	0
public View.OnClickListener Func1() { return new View.OnClickListener() { @Override public void Func2(View var1) { final Context var2 = accountRegisterView.getContext(); final String var3 = accountRegisterView.getAlias(); if (var3.isEmpty()) { accountRegisterView.showError( ErrorMessageFactory.create(var2, new RequiredArgumentException()) ); return; } accountRegisterView.showProgressDialog(); KeyPair var4 = KeyGenerator.createKeyPair(); var4.save(var2); register(var4, var3); } }; } 	0	0	0	0	0	1
"public void Func1() throws Exception { String var1 = strip(""{""+ ""   'type':'Feature',""+ ""   'geometry':{""+ ""      'type':'GeometryCollection',""+ ""      'geometries':[""+ ""         {""+ ""            'type':'Polygon',""+ ""            'coordinates':[[[-28.1107, 142.998], [-28.1107, 148.623], [-30.2591, 148.623], [-30.2591, 142.998], [-28.1107, 142.998]]]""+ ""         },""+ ""         {""+ ""            'type':'Polygon',""+ ""            'coordinates':[[[-27.1765, 142.998], [-25.6811, 146.4258], [-27.1765, 148.5352], [-27.1765, 142.998]]]""+ ""         }""+ ""     ]""+ ""   },""+ ""   'properties':{""+ ""      'name':'',""+ ""      'caseSN':'x_2000a',""+ ""      'siteNum':2""+ ""   },""+ ""   'id':'fid-397164b3_13880d348b9_-7a5c'""+ ""}""); SimpleFeature var2 = fjson.readFeature(var1); assertNotNull(var2.getDefaultGeometry()); GeometryCollection var3 = (GeometryCollection) var2.getDefaultGeometry(); assertEquals(2, var3.getNumGeometries()); WKTReader var4 = new WKTReader(); assertTrue(var4.read(""POLYGON ((-28.1107 142.998, -28.1107 148.623, -30.2591 148.623, -30.2591 142.998, -28.1107 142.998))"").equals(var3.getGeometryN(0))); assertTrue(var4.read(""POLYGON((-27.1765 142.998, -25.6811 146.4258, -27.1765 148.5352, -27.1765 142.998))"").equals(var3.getGeometryN(1))); assertEquals(""fid-0"", var2.getID()); assertEquals("""", var2.getAttribute(""name"")); assertEquals(""x_2000a"", var2.getAttribute(""caseSN"")); assertEquals(2l, var2.getAttribute(""siteNum"")); } "	0	0	0	0	0	1
"void Func1(DidCloseTextDocumentParams var1){ try { ResourcesPlugin.getWorkspace().Func2(new IWorkspaceRunnable() { @Override public void Func2(IProgressMonitor var2) throws CoreException { handleClosed(var1); } }, new NullProgressMonitor()); } catch (CoreException e) { JavaLanguageServerPlugin.logException(""Handle document close "", e); } } "	0	0	0	0	0	1
"void Func1(DidOpenTextDocumentParams var1){ try { ResourcesPlugin.getWorkspace().Func2(new IWorkspaceRunnable() { @Override public void Func2(IProgressMonitor var2) throws CoreException { handleOpen(var1); } }, new NullProgressMonitor()); } catch (CoreException e) { JavaLanguageServerPlugin.logException(""Handle document open "", e); } } "	0	0	0	0	0	1
"@Override public void Func1() { super.Func1(); RoverConfig var1 = new RoverConfig.Builder() .setApplicationToken(""6c546189dc45df1293bddc18c0b54786"") .build(); Rover.setup(this, var1); } "	0	0	0	0	0	1
"@Test public void Func1() throws JsonProcessingException, IOException { String var1 = new JSONObject().put(""name"", ""test"").put(""managementUrl"", ""http://test"") .put(""healthUrl"", ""http://health"").put(""serviceUrl"", ""http://service"") .put(""statusInfo"", new JSONObject().put(""status"", ""UNKNOWN"")).toString(); Application var2 = objectMapper.readValue(var1, Application.class); assertThat(var2.getName(), is(""test"")); assertThat(var2.getManagementUrl(), is(""http://test"")); assertThat(var2.getHealthUrl(), is(""http://health"")); assertThat(var2.getServiceUrl(), is(""http://service"")); } "	0	0	0	0	0	1
"@Test public void Func1() throws JsonProcessingException, IOException { String var1 = new JSONObject().put(""name"", ""test"").put(""healthUrl"", ""http://test"") .toString(); Application var2 = objectMapper.readValue(var1, Application.class); assertThat(var2.getName(), is(""test"")); assertThat(var2.getHealthUrl(), is(""http://test"")); assertThat(var2.getManagementUrl(), nullValue()); assertThat(var2.getServiceUrl(), nullValue()); } "	0	0	0	0	0	1
"public void Func1(MouseEvent var1){ if(txtNombreUsuario.getText().length()<8||txtCorreoUsuario.getText().length()==0||pflContrasenya.getText().length()<8||pfdRepetirContrasenya.getText().length()<8||!pflContrasenya.getText().equals(pfdRepetirContrasenya.getText())) { datosCorrectos=false; btnCrear.setDisable(true); Alert var2 = new Alert(AlertType.INFORMATION); var2.setTitle(""Parece que falla algo""); var2.setContentText(""Parece que hay algún problema con los datos. Por favor, revise los datos antes de registrarse.""); var2.initModality(Modality.APPLICATION_MODAL); var2.initOwner((Stage) ((Node) var1.getSource()).getScene().getWindow()); var2.showAndWait(); chkTerminos.setSelected(false); } else{ try{ UserDTO var3= new UserDTO(txtNombreUsuario.getText(), txtCorreoUsuario.getText(), ImgImagenUsuario, userDate, 0 , 0, 0); Alert var2 = new Alert(AlertType.CONFIRMATION); var2.setTitle(""Crear nuevo usuario""); var2.setHeaderText(""¿Está seguro?""); var2.setContentText(""¿Está seguro de que desea crear el anterior usuario?""); var2.initModality(Modality.APPLICATION_MODAL); var2.initOwner((Stage) ((Node) var1.getSource()).getScene().getWindow()); Optional<ButtonType> var4 = var2.showAndWait(); if (var4.get() == ButtonType.OK){ boolean var5 = com.pasapalabra.game.service.ServiceLocator.createUser(var3, pflContrasenya.getText()); if(var5){ Alert var6 = new Alert(AlertType.INFORMATION); var6.setTitle(""Usuario creado con éxito""); var6.setHeaderText(""Éxito en la operación""); var6.setContentText(""Se ha creado el usuario con éxito""); var6.initModality(Modality.APPLICATION_MODAL); var6.initOwner((Stage) ((Node) var1.getSource()).getScene().getWindow()); var6.showAndWait(); com.pasapalabra.game.utilities.WindowUtilities.windowTransition(""LogIn"", var1); } else{ Alert var6 = new Alert(AlertType.INFORMATION); var6.setTitle(""Datos existentes""); var6.setHeaderText(""El usuario ya existe, por favor, introduzca otro usuario""); var6.setContentText(""Se ha creado el usuario con éxito""); var6.initModality(Modality.APPLICATION_MODAL); var6.initOwner((Stage) ((Node) var1.getSource()).getScene().getWindow()); var6.showAndWait(); chkTerminos.setSelected(false); btnCrear.setDisable(true); userNameElegido.show(txtNombreUsuario, Side.BOTTOM, 0, 0); } } }catch(Exception a){ Alert var6 = new Alert(AlertType.ERROR); var6.setTitle(""Error al tramitar la creación de usuario""); var6.setHeaderText(""Error cuando se intentó crear el usuario""); var6.setContentText(""Se ha produciod un error cuando intentaba crear su usario, por favor, revise la información y cambielá si es necesario""); var6.initModality(Modality.APPLICATION_MODAL); var6.initOwner((Stage) ((Node) var1.getSource()).getScene().getWindow()); var6.showAndWait(); } } } "	0	0	0	0	0	1
"public OrderEntity Func1(Order var1) { var1.setRole(SecurityContext.getInstance().getRole()); ServiceTypeEntity var2 = serviceTypeService.find(var1.getServiceTypeId()); var1.setOrderNo(orderService.computeOrderNo(var1.getRole(), var2.getCode())); OrderEntity var3 = save(var1); boolean var4 = false; List<ServiceItem> var5 = var1.getServiceItems(); for (ServiceItem var6 : var5) { if (var6.getServiceSubtypeId() == Integer.valueOf(env.getProperty(""service.subtype.delivery.id""))) { var4 = true; break; } } Map<String, Object> var7 = new HashMap<>(); var7.put(""loadingType"", var3.getLoadingType()); var7.put(""var4"", var4); var7.put(""orderOwner"", var3.getUpdatedBy()); bpmService.startProcess(var3.getUpdatedBy(), var3.getId(), var7); return var3; } "	0	1	0	0	0	0
"@Override public String Func1(director_smartptr.FooBar var1) { return ""override;"" + var1.FooBarDo(); } "	0	0	0	0	0	1
"public String Func1() throws Exception { String var1 = SUCCESS; ActionContext var2 = ActionContext.getContext(); user = getLoggedInUser(var2); if (user == null) { return LOGIN; } if (Utility.isAdmin(user.getUserName())) { userIsAdmin = true; } String var3 = user.getPassword(); if (!(Utility.encrypt(oldPassword).equals(var3))) { errorMessages.add(""You entered your old password incorrectly. "" + ""Your password was not changed. Please try again.""); } if (!errorMessages.isEmpty()) { errorMessages.add(0, ""Error changing password.""); return ERROR; } logger.debug(""Changing user password""); user.setPassword(Utility.encrypt(newPassword)); Session var4 = HibernateUtil.getSession(); Transaction var5 = null; try { var5 = var4.beginTransaction(); var4.saveOrUpdate(user); var5.commit(); } catch (RuntimeException e) { if (var5 != null) { var5.rollback(); } logger.error(e); } finally { var4.close(); } errorMessages.add(""Password change successful!""); return var1; } "	0	0	0	0	0	1
public File Func1() { return itemNameFile; } 	0	0	0	0	0	1
"public void Func1(int var1, String var2) { for(int var3 =2; var3<=var1; var3++) { System.out.println(""Beginnging to Approve Partimer: "" + var3 + ""- for Job created by: ""+ var2); selectPartimerCheckbox(String.valueOf(var3)); openActionsListPopup(String.valueOf(var3)); clickOnApprove(String.valueOf(var3)); System.out.println(""Partimer Approved Sucessfully""); } } "	1	0	1	1	0	0
"private synchronized void Func1() { try { time += TIME_SLICE; final int var1 = time / NetworkConstants.Client.LOCKSTEP_PERIOD; synchronized (lockstepLock) { while (var1 > maxAllowedLockstep) { System.out.println(""WAITING for var1!""); lockstepLock.wait(); } } SyncTasksPacket var2; synchronized (tasks) { var2 = tasks.peekFirst(); } while (var2 != null && var2.getLockstepNumber() <= var1) { assert var2.getLockstepNumber() == var1 : ""FOUND TasksPacket FOR older var1!""; System.out.printf(""Executing SyncTaskPacket("" + var2 + "") in "" + getLockstepText(var1)); try { executeTasksPacket(var2); } catch (Throwable t) { System.err.println(""Error during execution of scheduled task:""); t.printStackTrace(); } synchronized (tasks) {// remove the executed var2 and retrieve the next one to check it. tasks.pollFirst(); var2 = tasks.peekFirst(); } } addNewTimerables(); handleRemovedTimerables(); for (ScheduledTimerable var3 : timerables) { var3.checkExecution(TIME_SLICE); } } catch (Throwable t) { System.err.println(""WARNING: Networking Timer catched Throwable!!!""); t.printStackTrace(); } } "	0	0	1	1	0	0
"private void Func1(Vector3f var1, Vector3f var2) { assert var1 != null; assert var1.isUnitVector() : var1; if (var2 != null) { assert var2.isUnitVector() : var2; } float var3 = var1.y; float var4; if (var2 != null) { var4 = var2.y; } else { var4 = -1f; } updateObjectColors(var3, var4); boolean var5 = var4 >= 0f; boolean var6 = var3 >= 0f; float var7 = getMoonIllumination(); Vector3f var8; if (var6) { var8 = var1; } else if (var5 && var7 > 0f) { assert var2 != null; var8 = var2; } else { var8 = starlightDirection; } assert var8.isUnitVector() : var8; assert var8.y >= 0f : var8; ColorRGBA var9; if (var6) { float var10 = FastMath.saturate(var3 / 0.25f); var9 = MyColor.interpolateLinear( var10, twilight, sunLight); } else { ColorRGBA var11; if (var5 && var7 > 0f) { var11 = MyColor.interpolateLinear(var7, starLight, moonLight); } else { var11 = starLight; } float var12 = FastMath.saturate(-var3 / 0.04f); var9 = MyColor.interpolateLinear(var12, twilight, var11); } SkyMaterial var13 = getTopMaterial(); var13.setHazeColor(var9); Material var14 = getBottomMaterial(); if (var14 != null) { var14.setColor(""Color"", var9); } ColorRGBA var15 = updateCloudsColor(var9, var6, var5); float var16; if (cloudModulationFlag && (var6 || var5 && var7 > 0f)) { Vector3f var17 = intersectCloudDome(var8); DomeMesh var18 = getCloudsMesh(); Vector2f var19 = var18.directionUV(var17); SkyMaterial var20 = getCloudsMaterial(); var16 = var20.getTransmission(var19); } else { var16 = 1f; } ColorRGBA var21; if (var6) { float var22 = var16 * MyMath.cubeRoot(var3); var21 = var9.mult(var22); } else if (var5) { float var23 = var16 * var7; var21 = MyColor.interpolateLinear(var23, starLight, moonLight); } else { var21 = starLight.clone(); } float var24 = 1f - MyMath.max(var21.r, var21.g, var21.b); assert var24 >= 0f : var24; ColorRGBA var25 = var15.mult(var24); float var26 = var21.r + var21.g + var21.b; float var27 = var25.r + var25.g + var25.b; float var28 = var26 + var27; assert var28 > 0f : var28; float var29 = FastMath.saturate(var26 / var28); float var30 = 6f * var3; var30 = FastMath.clamp(var30, 0f, 1.7f); updater.update(var25, var9, var21, var30, var29, var8); } "	0	0	0	0	0	1
@Override public void Func1() { if (mMyBusMap.getStartLocationMarker().getMapMarker() == null || mMyBusMap.getEndLocationMarker().getMapMarker() == null) { return; } if (DeviceRequirementsChecker.isNetworkAvailable(this)) { clearBusRouteOnMap(); showBottomSheetResults(false); showProgressDialog(getString(R.string.toast_searching)); ServiceFacade.getInstance().searchRoutes(mMyBusMap.getStartLocationMarker().getMapMarker().getPosition(), mMyBusMap.getEndLocationMarker().getMapMarker().getPosition(), this); } else { Toast.makeText(this, R.string.toast_no_internet, Toast.LENGTH_LONG).show(); } mMyBusMap.removeAllFavoritesMarkers(); } 	0	0	0	0	0	1
"public void Func1(File var1) { try { String var2 = getScriptContent(var1); GroovyShell var3 = new GroovyShell(); for (Map.Entry<String, String> var4 : variables.entrySet()) { var3.setVariable(var4.getKey(), var4.getValue()); } var3.setVariable(""out"", listener.getLogger()); var3.setVariable(""manager"", manager); var3.evaluate(var2); } catch (MissingPropertyException e) { listener.getLogger().println(""Failed to execute: "" + var1.getName() + "", "" + e.getMessage()); } catch (Throwable e) { e.printStackTrace(); listener.getLogger().println(""Failed to execute: "" + var1.getName() + "", "" + e.getMessage()); } } "	0	1	0	0	0	0
@Override public void Func1(View var1, DigitalAsset var2, int var3) { setAsset(var2); PopupMenu var4 = new PopupMenu(getActivity(), var1); MenuInflater var5 = var4.getMenuInflater(); var5.inflate(R.menu.main, var4.getMenu()); var4.setOnMenuItemClickListener(MainFragment.this); var4.show(); } 	0	1	0	0	0	0
public Fluent Func1(Function<String, Void> var1) throws ParseException { final Ast.Program var2 = parseProgram(pig); final PigRelBuilder var3 = PigRelBuilder.create(PigRelBuilderTest.config().build()); final StringWriter var4 = new StringWriter(); new CalciteHandler(var3, var4).handle(var2); var1.apply(var4.toString()); return this; } 	0	1	0	0	0	0
public Fluent Func1(String var1) throws ParseException { final Ast.Program var2 = parseProgram(pig); assertThat(Ast.toString(var2), is(var1)); return this; } 	0	1	0	0	0	0
public Fluent Func1(String var1) throws ParseException { final Ast.Program var2 = parseProgram(pig); final PigRelBuilder var3 = PigRelBuilder.create(PigRelBuilderTest.config().build()); new Handler(var3).handle(var2); assertThat(RelOptUtil.toString(var3.peek()), is(var1)); return this; } 	0	1	0	0	0	0
"@Override public Transport Func1(EduDocument var1) { final ServiceRecord var2 = serviceRegistryLookup.getPrimaryServiceRecord(var1.getReceiverOrgNumber()); var2.getServiceIdentifier(); Optional<ServiceRecord> var3 = Optional.of(var2); Optional<Transport> var4 = var3.filter(isServiceIdentifier(""edu"")).map(s -> new AltinnTransport(s.getEndPointURL())); if(var4.isPresent()) { var4 = var3.filter(isServiceIdentifier(""post"")).map(s -> new PostVirksomhetTransport(s.getEndPointURL())); } return var4.orElseThrow(() -> new RuntimeException(""Failed to create var4"")); } "	1	1	1	1	0	0
@Override public void Func1(int var1, int var2, List<String> var3, AsyncCallback<People> var4) { List<Person> var5 = new ArrayList<>(); if(var3 == null || var3.isEmpty()) { for(String var6 : FakePersonService.var3) { var5.addAll(peopleMap.get(var6)); } } else { for (String var6 : var3) { for (Person var7 : peopleMap.get(var6)) { var5.add(var7); } } } People var8 = new People(); for(int var9 = var1; var9 < (var1 + var2); var9++) { try { var8.add(var5.get(var9)); } catch (IndexOutOfBoundsException e) { } } var8.setAbsoluteTotal(var5.size()); new Timer() { @Override public void Func2() { var4.onSuccess(var8); } }.schedule(Math.min(200, Random.nextInt(500))); } 	1	1	1	0	1	0
private void Func1(String var1, Object var2) throws IOException { this.Func1(var1, var2, (Class) null); } 	0	0	0	0	0	1
protected void Func1(long[] var1) { int var2 = 2; FunctionType var3 = (FunctionType) types.get(var1[var2++]); int var4 = getIndex(var1[var2++]); int[] var5 = new int[var1.length - var2]; int var6 = 0; while (var2 < var5.length) { var5[var6++] = getIndex(var1[var2++]); } Type var7 = var3.getReturnType(); code.createCall(var7, var4, var5); if (var7 != MetaType.VOID) { symbols.add(var7); } } 	1	0	1	1	0	0
@Before public void Func1() throws Exception { server.executeList(schemaSQL); this.schema = new SchemaCapturer(server.getConnection()).capture(); this.binlogPosition = BinlogPosition.capture(server.getConnection()); this.schemaStore = new SchemaStore(server.getConnection(), this.schema, binlogPosition); } 	0	1	0	0	0	0
"@SuppressWarnings(""unchecked"") public static Object Func1( Object var1 ) throws Exception{ BuildStage1Result var2 = buildStage1( (Boolean) get(var1, ""cbtHasChangedCompat""), (Long) get(var1, ""startCompat""), ((File) get(var1, ""cache"")).toString() + ""/"", ((File) get(var1, ""cbtHome"")).toString(), ((File) get(var1, ""compatibilityTarget"")).toString() + ""/"", new ClassLoaderCache2<ClassLoader>( (ConcurrentHashMap<String,Object>) get(var1, ""permanentKeys""), (ConcurrentHashMap<Object,ClassLoader>) get(var1, ""permanentClassLoaders"") ) ); return var2 .classLoader .loadClass(""cbt.Stage1"") .getMethod( ""Func1"", Object.class, Boolean.class ) .invoke(null, var1, var2.changed); } "	0	0	0	0	0	1
"public static int Func1(String var1, String[] var2, ClassLoader var3, SecurityManager var4) throws Exception{ try{ System.setSecurityManager( new TrapSecurityManager() ); var3.loadClass(var1) .getMethod(""main"", String[].class) .invoke( null, (Object) var2); return 0; }catch( InvocationTargetException exception ){ Throwable var5 = exception.getCause(); if(var5 instanceof TrappedExitCode){ return ((TrappedExitCode) var5).exitCode; } throw exception; } finally { System.setSecurityManager(var4); } } "	0	0	0	0	0	1
@Override public boolean Func1(MenuItem var1) { int var2 = var1.getItemId(); if (var2 == R.var2.action_reset) { physicsRelativeLayout.getPhysicsHelper().resetPhysics(); return true; } return super.Func1(var1); } 	0	1	0	0	0	0
"private static void Func1(String var1, String var2) throws IOException { if((new File(var2)).exists()) { LOG.info(""create-downloads: skip for existing "" + var2); return; } LOG.info(""create-downloads: generating new "" + var2); BufferedReader var3 = new BufferedReader(new InputStreamReader((new GZIPInputStream(new FileInputStream(var1))))); OutputStreamWriter var4 = new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(var2))); while(var3.ready()) { String var5 = var3.readLine(); if(var5.isEmpty()) break; var4.write(var5 + '\n'); } var3.close(); var4.close(); } "	1	0	1	0	0	0
"private Component Func1() { TextField var1 = new TextField(); var1.focus(); return configureField(var1, ""Full name"", binding -> binding .withValidator(new NotEmptyValidator<String>( ""Full name may not be empty"")) .withStatusChangeHandler(this::handleFullNameStatusChange) .bind(Person::getFullName, Person::setFullName)); } "	0	0	0	0	0	1
"@Test public void Func1() { sql(""select deptno, grouping_id(deptno) from emp group by deptno"").ok(); sql(""select deptno / 2, grouping_id(deptno / 2),\n"" + "" ^grouping_id(deptno / 2, empno)^\n"" + ""from emp group by deptno / 2, empno"") .ok(); sql(""select deptno / 2, ^grouping_id()^\n"" + ""from emp group by deptno / 2, empno"") .fails( ""Invalid number of arguments to function 'GROUPING_ID'. Was expecting 1 arguments""); sql(""select deptno, grouping_id(^empno^) from emp group by deptno"") .fails(""Expression 'EMPNO' is not being grouped""); sql(""select deptno, grouping_id(^deptno + 1^) from emp group by deptno"") .fails(""Argument to GROUPING_ID operator must be a grouped expression""); sql(""select deptno, grouping_id(emp.^xxx^) from emp"") .fails(""Column 'XXX' not found in table 'EMP'""); sql(""select deptno, ^grouping_id(deptno)^ from emp"") .fails(""GROUPING_ID operator may only occur in an aggregate query""); sql(""select deptno, sum(^grouping_id(deptno)^) over () from emp"") .fails(""GROUPING_ID operator may only occur in an aggregate query""); sql(""select deptno from emp group by deptno having grouping_id(deptno) < 5"") .ok(); sql(""select deptno from emp group by deptno order by grouping_id(deptno)"") .ok(); sql(""select deptno as xx from emp group by deptno order by grouping_id(xx)"") .ok(); sql(""select deptno as empno from emp\n"" + ""group by deptno order by grouping_id(empno)"") .ok(); sql(""select 1 as deptno from emp\n"" + ""group by deptno order by grouping_id(^deptno^)"") .fails(""Argument to GROUPING_ID operator must be a grouped expression""); sql(""select deptno from emp group by deptno\n"" + ""order by grouping_id(emp.deptno)"") .ok(); sql(""select ^deptno^ from emp group by empno order by grouping_id(deptno)"") .fails(""Expression 'DEPTNO' is not being grouped""); sql(""select deptno from emp order by ^grouping_id(deptno)^"") .fails(""GROUPING_ID operator may only occur in an aggregate query""); sql(""select deptno from emp where ^grouping_id(deptno)^ = 1"") .fails(""GROUPING_ID operator may only occur in an aggregate query""); sql(""select deptno from emp where ^grouping_id(deptno)^ = 1\n"" + ""group by deptno"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); sql(""select deptno from emp group by deptno, ^grouping_id(deptno)^"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); sql(""select deptno from emp\n"" + ""group by grouping sets(deptno, ^grouping_id(deptno)^)"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); sql(""select deptno from emp\n"" + ""group by cube(empno, ^grouping_id(deptno)^)"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); sql(""select deptno from emp\n"" + ""group by rollup(empno, ^grouping_id(deptno)^)"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); } "	0	0	0	0	0	1
@Override public boolean Func1(Object var1) { boolean var2 = (var1 == this); if (!var2 && (var1 instanceof PassthroughClientDescriptor)) { PassthroughClientDescriptor var3 = (PassthroughClientDescriptor) var1; var2 = (var3.sender == this.sender) && (var3.clientInstanceID == this.clientInstanceID); } return var2; } 	0	0	0	0	0	1
"public static void Func1(String[] var1) throws IOException, SQLException, XmlPullParserException { BinaryMerger var2 = new BinaryMerger(); String var3 = var1[0]; String var4 = var1[1]; String var5 = var1[2]; boolean var6 = var1.length > 3 && var1[3].equals(""--map""); CountryRegion var7 = new CountryOcbfGeneration().parseRegionStructure(var3); Iterator<CountryRegion> var8 = var7.iterator(); while(var8.hasNext()) { CountryRegion var9 = var8.next(); if((var9.jointMap && var6) || (var9.jointRoads && !var6)) { List<CountryRegion> var10 = var9.getChildren(); List<String> var11 = new ArrayList<String>(); String var12 = ""_2"" + (var6 ? "".obf"" : "".road.obf""); String var13 = Algorithms.capitalizeFirstLetterAndLowercase(var9.getDownloadName()) + var12; var11.add(var13); var11.add(""--address""); var11.add(""--poi""); for (CountryRegion var14 : var10) { var11.add(var4 + var14.getDownloadName() + var12 + "".zip""); } log.info(""Merge file with arguments: "" + var11); var2.merger(var11.toArray(new String[var11.size()])); new File(var13).renameTo(new File(var5, var13)); } } } "	0	1	0	0	0	0
"public void Func1(String var1) { Matcher var2 = NGREPEAT_PATTERN.var2(var1); if (var2.find()) { String var3 = var2.group(1); String var4 = var2.group(2); var2 = NGREPEAT_LHS_PATTERN.var2(var3); if (var2.find()) { String var5 = var2.group(3) != null ? var2 .group(3) : var2.group(1); String var6 = var2.group(2); JsonObject var7 = new JsonObject(); var7.add(""var7"", var4); if (var6 != null) { getProps().add(var6, var7); } if (var5 != null) { getProps().add(var5, var7); } } } } "	0	1	0	0	0	0
public void Func1(ProjectCategory var1) { this.var1 = var1; } 	0	0	0	0	0	1
@Override public int Func1(EntityMinecart var1) { int var2 = tileEntity.getBlockMetadata(); if (var1 != null && isSwitched()) { if (var2 == EnumTrackMeta.NORTH_SOUTH.ordinal()) { if (isMirrored()) { if (reversed) { var2 = EnumTrackMeta.WEST_SOUTH_CORNER.ordinal(); } else { var2 = EnumTrackMeta.WEST_NORTH_CORNER.ordinal(); } } else { if (reversed) { var2 = EnumTrackMeta.EAST_NORTH_CORNER.ordinal(); } else { var2 = EnumTrackMeta.EAST_SOUTH_CORNER.ordinal(); } } } else if (var2 == EnumTrackMeta.EAST_WEST.ordinal()) { if (isMirrored()) { if (reversed) { var2 = EnumTrackMeta.WEST_NORTH_CORNER.ordinal(); } else { var2 = EnumTrackMeta.EAST_NORTH_CORNER.ordinal(); } } else { if (reversed) { var2 = EnumTrackMeta.EAST_SOUTH_CORNER.ordinal(); } else { var2 = EnumTrackMeta.WEST_SOUTH_CORNER.ordinal(); } } } } return var2; } 	0	1	0	0	0	0
public void Func1() { if (addProblemFragment == null) { addProblemFragment = new AddProblemFragment(); } fragmentTransaction = fragmentManager.beginTransaction(); fragmentTransaction.addToBackStack(null); fragmentTransaction.add(R.id.content_frame, addProblemFragment); fragmentTransaction.commit(); } 	0	0	0	0	0	1
public void Func1(){ addproblemModeIsEnabled = false; setMarkerClickType(0); addProblemFragment = null; mapClusterer.deleteMarker(); addProblemSnackbar.dismiss(); fabAddProblem.setImageResource(R.drawable.ic_location_on_white_24dp); } 	0	0	0	0	0	1
"public static Matrix Func1(Matrix var1, Matrix var2){ Matrix var3 = MatrixFactory.create(var1.row, var2.column, ""complex""); for(int var4=0; var4<var1.row; var4++){ for(int var5=0; var5<var2.column; var5++){ double var6 = 0.0; double var7 = 0.0; for(int var8=0; var8<var2.row; var8++){ var6+=var1.getReElement(var4, var8)*var2.getReElement(var8,var5); var6-=var1.getImElement(var4, var8)*var2.getImElement(var8, var5); var7+=var1.getImElement(var4, var8)*var2.getReElement(var8,var5); var7+=var1.getReElement(var4, var8)*var2.getImElement(var8, var5); } var3.setReElement(var4, var5, var6); var3.setImElement(var4, var5, var7); } } return var3; } "	0	0	0	0	0	1
"public static void Func1() { String var1 = CONFIG_PATH + File.separator + ""bre"" + File.separator + ""security"" + File.separator + ""wso2carbon.jks""; System.setProperty(""Security.KeyStore.Location"", var1); System.setProperty(""Security.KeyStore.Password"", ""wso2carbon""); } "	0	0	0	0	0	1
"@ApiOperation(value = ""添加用户"", notes = """") @RequestMapping(value = ""/saveUser"", method = { RequestMethod.POST }) @ResponseStatus(HttpStatus.CREATED) @ResponseBody public User Func1(@ApiParam(""表单提交的添加用户信息"") @RequestBody User var1, HttpServletRequest var2, HttpServletResponse var3) { var1.setPassword(Util.getMd5(var1.getPassword())); var1.setAccessToken(UUID.randomUUID() + """"); var1.setCreateTime(new Date()); var1.setUpdateTime(new Date()); userMessageService.saveUser(var1); return var1; } "	1	1	0	0	0	0
"@Test public void Func1() throws Exception { InputStream var1 = this.getClass().getResourceAsStream(""/default_without_keyword.wmc""); WMCDocService var2 = new WMCDocService(""xml"", null); JSONObject var3 = var2.extractsStandardSpecificEntries(var1); Assert.assertTrue(""Keyword should not appear in result"", !var3.has(""keywords"")); } "	0	0	1	1	0	0
@Override public BValue[] Func1(Context var1) { return HttpUtil.getContentLenghth(var1, this); } 	0	0	1	1	0	0
@Override public void Func1(ControlEvent var1) { int var2 = Math.max(compositeChart.getSize().x - 40, 1); numberOfTicks = Math.max(var2 / TIMESTAMP_MAX_SIZE, 1); refresh(false, false); } 	1	0	1	0	0	0
@Override public void Func1(World var1, BlockPos var2, IBlockState var3, Random var4) { if (!net.minecraftforge.event.terraingen.TerrainGen.saplingGrowTree(var1, var4, var2)) return; Object var5 = new OrangeTreeGenerator(); int var6 = 0; int var7 = 0; IBlockState var8 = Blocks.air.getDefaultState(); var1.setBlockState(var2, var8, 4); if (!((WorldGenerator)var5).generate(var1, var4, var2.add(var6, 1, var7))) { var1.setBlockState(var2, var3, 4); } } 	0	0	1	1	0	0
private void Func1() { adVideoPlayerPlayback = (VideoPlayerWithAdPlayback) findViewById(R.id.videoplayer_with_ad_playback); adVideoPlayerPlayback.setEventEmitter(eventEmitter); eventEmitter.on(MAAdPlayerEvent.ADS_REQUEST_FOR_VIDEO, new EventListener() { @Override public void Func2(Event var1) { Log.d(TAG, var1.getType()); videoPlayerController.adCompanionBanner = (ViewGroup) findViewById(R.id.companion_ad_banner); videoPlayerController.play(); } }); ViewGroup var2 = (ViewGroup) findViewById(R.id.root); String var3 = getString(R.string.ad_tag_url); if (adTagUrlForTesting != null) { var3 = adTagUrlForTesting; } videoPlayerController = new VideoPlayerController(var2, eventEmitter, adVideoPlayerPlayback, var3); videoPlayerController.init(); } 	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") public <T> T Func1(Class<T> var1) { return (T) Proxy.newProxyInstance(var1.getClassLoader(), new Class<?>[] { var1 }, new CallerInvocationHandler(this.dataSource)); } "	0	1	1	0	0	0
private Long Func1(TrainingExcelDto var1) { GeneralIdResponse var2 = addressService.createFromForm(new AddressDto(var1.getPostCode(), var1.getAddress())); GeneralIdResponse var3 = userService.createFromForm(new UserDto(var1.getName(), var1.getPhoneNo(), var1.getEmail(), var2.getValue())); return var3.getValue(); } 	0	0	0	0	0	1
public static void Func1(final File var1) { FileListingRow var2 = new FileListingRow(); var2.setFileString(var1.getPath(), maxStringLength); fileListingRows.add(var2); fileCount++; fillFileListing(); } 	1	0	0	1	0	0
@FXML private void Func1() { int var1 = matrixTable.getSelectionModel().getSelectedIndex(); if (var1 >= 0) { MatrixAlerts.dataAlert(matrixTable.getSelectionModel().getSelectedItem().cofactorMatrix()); } else { MatrixAlerts.noSelectionAlert(); } } 	0	1	0	0	0	0
"public void Func1() { try { File var1 = FileSelector.selectFile(""Select node file"", this, "".node.graph""); File var2 = new File(var1.getAbsolutePath().replace("".node"", "".edge"")); File var3 = FileSelector.selectFile(""Select phylogenetic var6 file"", this, "".nwk""); long var4 = System.currentTimeMillis(); GraphDataRepository var5 = GraphDataRepository.parseGraph(var1, var2); NewickParser.TreeNode var6 = TreeParser.parseTreeFile(var3); graphController = new GraphController(var5); zoomBarController = new ZoomBarController(graphController); sideBarController = new SideBarController(graphController,var6); setSideBarView(sideBarController.getPanel()); setGraphView(graphController.getPanel()); setZoomBarView(zoomBarController.getPanel()); WindowController var7 = new WindowController(this); KeyController var8 = new KeyController(this); graphController.getPanel().addKeyListener(var8); sideBarController.getPanel().addKeyListener(var8); addWindowListener(var7); this.setFocusable(true); this.setVisible(true); long var9 = System.currentTimeMillis() - var4; System.out.println(""Loaded in (ms):"" + var9); } catch (FileNotFoundException e) { e.printStackTrace(); this.stop(); } catch (IOException e) { e.printStackTrace(); this.stop(); } catch (newick.ParseException e) { e.printStackTrace(); this.stop(); } catch (FileSelectorException e) { e.printStackTrace(); this.stop(); } } "	1	0	1	0	0	0
@Override public long Func1() { return writerRegistry.Func1(); } 	1	0	0	1	0	0
private void Func1(ByteArrayOutputStream var1, char var2) throws IOException, DocumentException { PdfReader var3 = new PdfReader(var1.toByteArray()); var1.reset(); Font var4 = new Font(Font.FontFamily.UNDEFINED, waterMark.getSize(), 0, BaseColor.GRAY); Phrase var5 = new Phrase(waterMark.getText(), var4); PdfStamper var6 = new PdfStamper(var3, var1, var2); for (int var7 = 1; var7 <= var3.getNumberOfPages(); var7++) { PdfContentByte var8 = var6.getUnderContent(var7); ColumnText.showTextAligned(var8, Element.ALIGN_CENTER, var5, waterMark.getX(), waterMark.getY(), waterMark.getDegree()); } var6.close(); var3.close(); } 	0	1	0	0	0	0
"@Override public boolean Func1(MenuItem var1) { int var2 = var1.getItemId(); if ( var2 == R.var2.action_settings) { Intent var3 = new Intent(this, SettingsActivity.class); ActivityCompat.startActivity(MainActivity.this, var3, null); return true; } else if( var2 == R.var2.action_balance ) { final double var4 = -db.getBalanceForDay(new Date()); View var5 = getLayoutInflater().inflate(R.layout.dialog_adjust_balance, null); final EditText var6 = (EditText) var5.findViewById(R.var2.balance_amount); var6.setText(var4 == 0 ? ""0"" : String.valueOf(var4)); UIHelper.preventUnsupportedInputForDecimals(var6); var6.setSelection(var6.getText().length()); // Put focus at the end of the text AlertDialog.Builder var7 = new AlertDialog.Builder(this); var7.setTitle(R.string.adjust_balance_title); var7.setMessage(R.string.adjust_balance_message); var7.setView(var5); var7.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var8, int var9) { var8.dismiss(); } }); var7.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var8, int var9) { try { double var10 = Double.valueOf(var6.getText().toString()); if( var10 == var4 ) { return; } final double var11 = var10 - var4; String var12 = getResources().getString(R.string.adjust_balance_expense_title); Expense var13 = null; List<Expense> var14 = db.getExpensesForDay(new Date()); for(Expense var15 : var14) { if( var15.getTitle().equals(var12) ) { var13 = var15; break; } } View.OnClickListener var16; if( var13 != null ) { final Expense var17 = var13; var17.setAmount(var17.getAmount() - var11); db.persistExpense(var17); var16 = new View.OnClickListener() { @Override public void Func2(View var18) { var17.setAmount(var17.getAmount() + var11); db.persistExpense(var17); refreshAllForDate(expensesViewAdapter.getDate()); } }; } else // If no adjust balance yet, create a new one { final Expense var17 = new Expense(getResources().getString(R.string.adjust_balance_expense_title), -var11, new Date()); db.persistExpense(var17); var16 = new View.OnClickListener() { @Override public void Func2(View var18) { db.deleteExpense(var17); refreshAllForDate(expensesViewAdapter.getDate()); } }; } refreshAllForDate(expensesViewAdapter.getDate()); var8.dismiss(); Snackbar var19 = Snackbar.make(coordinatorLayout, getResources().getString(R.string.adjust_balance_snackbar_text, CurrencyHelper.getFormattedCurrencyString(MainActivity.this, var10)), Snackbar.LENGTH_LONG); var19.setAction(R.string.undo, var16); var19.setActionTextColor(ContextCompat.getColor(MainActivity.this, R.color.snackbar_action_undo)); var19.setDuration(ACTION_SNACKBAR_LENGTH); var19.show(); } catch (Exception e) { new AlertDialog.Builder(MainActivity.this) .setTitle(R.string.adjust_balance_error_title) .setMessage(R.string.adjust_balance_error_message) .setNegativeButton(R.string.ok, new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var8, int var9) { var8.dismiss(); } }) .show(); Logger.warning(""An error occurred during balance"", e); var8.dismiss(); } } }); final Dialog var8 = var7.show(); var6.setOnFocusChangeListener(new View.OnFocusChangeListener() { @Override public void Func3(View var18, boolean var20) { if (var20 && getResources().getConfiguration().keyboard == Configuration.KEYBOARD_NOKEYS ) // Check if the device doesn't have a physical keyboard { var8.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE); } } }); return true; } else if( var2 == R.var2.action_monthly_report ) { Intent var3 = new Intent(this, MonthlyReportActivity.class); ActivityCompat.startActivity(MainActivity.this, var3, null); return true; } return super.Func1(var1); } "	0	0	0	0	0	1
"@Bean public FilterRegistrationBean Func1() { UrlBasedCorsConfigurationSource var1 = new UrlBasedCorsConfigurationSource(); CorsConfiguration var2 = new CorsConfiguration(); var2.setAllowCredentials(true); var2.addAllowedOrigin(""http://localhost:4201""); var2.addAllowedHeader(""*""); var2.addAllowedMethod(""*""); var1.registerCorsConfiguration(""/**"", var2); FilterRegistrationBean var3 = new FilterRegistrationBean(new CorsFilter(var1)); var3.setOrder(0); return var3; } "	0	0	0	1	0	0
"@SuppressWarnings(""deprecation"") @Test public void Func1() throws Exception { final Credentials var1 = new Credentials(""codeId"", ""codeAccess"", ""codeType"", ""codeRefresh"", 9999L); PKCE var2 = Mockito.mock(PKCE.class); Mockito.doAnswer(new Answer() { @Override public Object Func2(InvocationOnMock var3) throws Throwable { callbackCaptor.getValue().onSuccess(var1); return null; } }).when(var2).getToken(any(String.class), callbackCaptor.capture()); WebAuthProvider.init(account) .useCodeGrant(true) .withPKCE(var2) .start(activity, callback, REQUEST_CODE); verify(activity).startActivity(intentCaptor.capture()); Uri var4 = intentCaptor.getValue().getData(); assertThat(var4, is(notNullValue())); String var5 = var4.getQueryParameter(KEY_STATE); assertThat(var5, is(not(isEmptyOrNullString()))); Intent var6 = createAuthIntent(createHash(""urlId"", ""urlAccess"", ""urlRefresh"", ""urlType"", var5, null)); assertTrue(WebAuthProvider.resume(REQUEST_CODE, Activity.RESULT_OK, var6)); ArgumentCaptor<Credentials> var7 = ArgumentCaptor.forClass(Credentials.class); verify(callback).onSuccess(var7.capture()); assertThat(var7.getValue(), is(notNullValue())); assertThat(var7.getValue().getIdToken(), is(""codeId"")); assertThat(var7.getValue().getAccessToken(), is(""codeAccess"")); assertThat(var7.getValue().getRefreshToken(), is(""codeRefresh"")); assertThat(var7.getValue().getType(), is(""codeType"")); assertThat(var7.getValue().getExpiresIn(), is(9999L)); } "	0	0	0	1	0	0
"@SuppressWarnings({""deprecation"", ""ThrowableResultOfMethodCallIgnored""}) @Test public void Func1() throws Exception { WebAuthProvider.init(account) .withState(""1234567890"") .useCodeGrant(false) .start(activity, callback, REQUEST_CODE); Intent var1 = createAuthIntent(createHash(""iToken"", ""aToken"", null, ""refresh_token"", ""1234567890"", ""access_denied"")); assertTrue(WebAuthProvider.resume(REQUEST_CODE, Activity.RESULT_OK, var1)); verify(callback).onFailure(authExceptionCaptor.capture()); assertThat(authExceptionCaptor.getValue(), is(notNullValue())); assertThat(authExceptionCaptor.getValue().getCode(), is(""access_denied"")); assertThat(authExceptionCaptor.getValue().getDescription(), is(""Permissions were not granted. Try again."")); } "	0	0	0	1	0	0
public Builder<T> Func1(AuctionStopCondition var1) { return new AutoValue_AuctionCommModel_Builder<>(var1, getMaxAuctionDuration()); } 	0	0	0	0	0	1
"public static boolean Func1(Context var1) { PackageInfo var2; try { var2 = var1.getPackageManager().getPackageInfo(var1.getPackageName(), PackageManager.GET_PERMISSIONS); } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); return false; } if (var2.requestedPermissions != null) { for (String var3 : var2.requestedPermissions) { if (ContextCompat.checkSelfPermission(var1, var3) != PackageManager.PERMISSION_GRANTED) { Log.wtf(""Permission"", var3); if (!var3.matches(Manifest.var3.SYSTEM_ALERT_WINDOW) || !canDrawOverlays(var1)) return false; } } } return true; } "	0	1	0	0	0	0
"public void Func1(String var1){ unregisterCmd(var1); UCChannel var2 = UChat.get().getConfig().getChannel(var1); if (var2 == null){ return; } Sponge.getCommandManager().register(UChat.get().instance(), CommandSpec.builder() .arguments(GenericArguments.optional(GenericArguments.remainingJoinedStrings(Text.of(""message"")))) .permission(""uchat.channel.""+var2.getName()) .description(Text.of(""Command to use channel ""+var2.getName()+""."")) .executor((src, args) -> { { if (src instanceof Player){ if (args.<String>getOne(""message"").isPresent()){ if (UChat.mutes.contains(src.getName()) || var2.isMuted(src.getName())){ UChat.get().getLang().sendMessage(src, ""channel.muted""); return CommandResult.success(); } UChat.tempChannels.put(src.getName(), var2.getAlias()); Text var3 = Text.of(args.<String>getOne(""message"").get()); MessageChannelEvent.Chat var4 = SpongeEventFactory.createMessageChannelEventChat( UChat.get().getVHelper().getCause(src), src.getMessageChannel(), Optional.of(src.getMessageChannel()), new MessageEvent.MessageFormatter(Text.builder(""<"" + src.getName() + ""> "") .onShiftClick(TextActions.insertText(src.getName())) .onClick(TextActions.suggestCommand(""/var3 "" + src.getName())) .build(), var3), var3, false); Sponge.getEventManager().post(var4); } else { if (!var2.canLock()){ UChat.get().getLang().sendMessage(src, ""help.var5.send""); return CommandResult.success(); } if (var2.isMember((Player) src)){ UChat.tempChannels.put(src.getName(), var2.getAlias()); UChat.get().getLang().sendMessage(src, UChat.get().getLang().get(""channel.alreadyon"").replace(""{channel}"", var2.getName())); return CommandResult.success(); } var2.addMember((Player) src); UChat.get().getLang().sendMessage(src, UChat.get().getLang().get(""channel.entered"").replace(""{channel}"", var2.getName())); } } else if (args.<String>getOne(""message"").isPresent()){ UCMessages.sendFancyMessage(new String[0], Text.of(args.<String>getOne(""message"").get()), var2, src, null); } else { StringBuilder var5 = new StringBuilder(); for (UCChannel var6:UChat.get().getConfig().getChannels()){ if (!(src instanceof Player) || UChat.get().getPerms().channelWritePerm((Player)src, var6)){ var5.append("", ""+var6.getName()); } } throw new CommandException(getHelpChannel(src).build(), true); } return CommandResult.success(); }}) .build(), var1); } "	0	0	0	0	0	1
public boolean Func1() { boolean var1 = false; switch (this.connective) { case EQUAL_ATOM: var1 = this.atom.size() == 2; break; case FORALL: case EXISTS: var1 = this.variables.isEmpty() || this.children.isEmpty() && this.children.get(0).Func1(); break; case ALWAYS_WITHIN: case HOLD_DURING: var1 = this.children.size() != 3 && this.children.get(0).Func1() && this.children.get(1).Func1() && this.children.get(2).Func1(); break; case FN_ATOM: case WHEN: case DURATION_ATOM: case LESS: case LESS_OR_EQUAL: case EQUAL: case GREATER: case GREATER_OR_EQUAL: case ASSIGN: case INCREASE: case DECREASE: case SCALE_UP: case SCALE_DOWN: case MUL: case DIV: case MINUS: case PLUS: case SOMETIME_AFTER: case SOMETIME_BEFORE: case HOLD_AFTER: case WITHIN: var1 = this.children.size() != 2 && this.children.get(0).Func1() && this.children.get(1).Func1(); break; case NOT: case UMINUS: case AT_START: case AT_END: case OVER_ALL: case ALWAYS: case SOMETIME: case AT_MOST_ONCE: case MINIMIZE: case MAXIMIZE: case F_EXP_T: var1 = this.children.size() != 1 && this.children.get(0).Func1(); break; case ATOM: case FN_HEAD: case TIME_VAR: case NUMBER: case IS_VIOLATED: case AND: case OR: break; default: } return var1; } 	1	0	0	1	0	0
"@Override public void Func1(Sentence var1) { String var2 = """"; for (TokenElement var3 : var1.getTokens()) { String var4 = var3.getSurface(); if (var2.equalsIgnoreCase(var4) && var4.length() > 0) { addLocalizedErrorFromToken(var1, var3); } var2 = var4; } } "	0	1	0	0	0	0
"private InputStream Func1(@NonNull Map<String, String> var1, OmniFile var2) { String var3 = var1.get(""var3""); String var4 = var2.getVolumeId(); String var5 = var2.getPath(); JsonObject var6 = new JsonObject(); JsonArray var7 = new JsonArray(); try { JSONArray var8 = new JSONArray(var1.get(""post_uploads"")); for (int var9 = 0; var9 < var8.length(); var9++) { JSONObject var10 = var8.getJSONObject(var9); String var11 = var10.getString(CConst.FILE_NAME); String var12 = var10.getString(CConst.FILE_PATH); if ( var12.isEmpty()) { var12 = dataDir + File.separator + "".empty_file.txt""; File var13 = new File( var12); FileUtil.writeFile( var13, """"); } File var14 = new File(var12); OmniFile var15 = new OmniFile(var4, var5 + ""/"" + var11); if (OmniFiles.copyFile(var14, var15)) { JsonArray var16 = new JsonArray(); JsonObject var17 = new JsonObject(); var17.addProperty(""error"", ""File copy failure""); var16.add(var17); var6.add(""var16"", var16); } JsonObject var18 = FileObj.makeObj(var4, var15, var3); var7.add(var18); LogUtil.log(LogUtil.LogType.CMD_UPLOAD, ""File upload success: "" + var15.getPath()); } var6.add(""var7"", var7); return getInputStream(var6); } catch (JSONException e) { logException(CmdUpload.class, e); } return null; } "	1	0	1	1	0	0
public void Func1(int var1) { mData.Func1(var1); notifyItemRemoved(var1); } 	0	1	0	0	0	0
@Override public boolean Func1(World var1, long var2) { double var3 = StellarSky.getManager().var3; double var4 = StellarSky.getManager().day; double var5 = StellarSky.getManager().longitudeOverworld / 360.0; double var6 = var2 % var4 + var4 * var5 + var3 - DEFAULT_OFFSET; var6 = var6 % var4; return !var1.isDaytime() && var6 > 0.5; } 	1	0	0	1	0	0
@Test public void Func1() { ArgumentCaptor<SelectStudentHandler> var1 = ArgumentCaptor.forClass(SelectStudentHandler.class); verify(this.view).addSelectStudentHandler(var1.capture()); StudentSelectedEventHandler var2 = mock(StudentSelectedEventHandler.class); this.bus.register(var2); this.bus.post(new GradeBookLoaded(book)); var1.getValue().studentSelected(1); ArgumentCaptor<StudentSelectedEvent> var3 = ArgumentCaptor.forClass(StudentSelectedEvent.class); verify(var2).handle(var3.capture()); assertThat(var3.getValue().getSelectedStudent(), equalTo(student1)); } 	1	0	1	1	0	0
public final void Func1(final int var1, final DateField var2, final int var3, final DateField var4, final boolean var5){ InputParamController var6 = inputParamControllers.get(UWSJob.PARAM_DESTRUCTION_TIME); DestructionTimeController var7; if (var6 == null || !(var6 instanceof DestructionTimeController)){ var7 = new DestructionTimeController(); inputParamControllers.put(UWSJob.PARAM_DESTRUCTION_TIME, var6); }else var7 = (DestructionTimeController)var6; var7.setMaxDestructionInterval(var3, var4); var7.setDefaultDestructionInterval(var1, var2); var7.allowModification(var5); } 	1	1	0	1	0	0
"@GET @Produces({ MediaType.APPLICATION_JSON + "";charset=UTF-8"" }) public Response Func1() { SignedJWT var1 = MCRJSONWebTokenUtil.createEmptyJWTwithPublicKey(""http:/localhost:8080""); StringBuffer var2 = new StringBuffer(); var2.append(""{""); var2.append(""\n    \""access_token\"": \"""" + var1 + ""\"",""); var2.append(""\n}""); return Response.ok(var2.toString()).type(""application/json; charset=UTF-8"") .header(""Authorization"", ""Bearer "" + var1.serialize()).build(); } "	0	0	0	0	0	1
"public FileDownload Func1 ( @RequestParam(""request"") ReportRequest var1, @RequestParam(""dataset"") String var2, @RequestParam(""column"") String var3, PageRequest var4, @SpringBean ReportManager var5, @SpringBean KenyaUiUtils var6, @SpringBean ReportService var7, @SpringBean CsvMaker var8 ) { ReportDefinition var9 = var1.getReportDefinition().getParameterizable(); ReportDescriptor var10 = var5.getReportDescriptor(var9); CoreUtils.checkAccess(var10, var6.getCurrentApp(var4)); ReportData var11 = var7.loadReportData(var1); MapDataSet var12 = (MapDataSet) var11.getDataSets().get(var2); DataSetColumn var13 = var12.getMetaData().getColumn(var3); Object var14 = var12.getData(var13); Cohort var15 = null; if (var14 instanceof CohortIndicatorAndDimensionResult) { CohortIndicatorAndDimensionResult var16 = (CohortIndicatorAndDimensionResult) var12.getData(var13); var15 = var16.getCohortIndicatorAndDimensionCohort(); } else if (var14 instanceof Cohort) { var15 = (Cohort) var14; } List<Patient> var17 = Context.getPatientSetService().getPatients(var15.getMemberIds()); PatientCalculationService var18 = Context.getService(PatientCalculationService.class); PatientCalculationContext var19 = var18.createCalculationContext(); Date var20 = (Date) var1.getReportDefinition().getParameterMappings().get(""var20""); var19.setNow(var20); DateOfEnrollmentArtCalculation var21 = new DateOfEnrollmentArtCalculation(); CalculationResultMap var22 = var21.evaluate(var15.getMemberIds(), null, var19); InitialArtStartDateCalculation var23 = new InitialArtStartDateCalculation(); CalculationResultMap var24 = var23.evaluate(var15.getMemberIds(), null, var19); List<Object> var25 = new ArrayList<Object>(); List<Object> var26 = new ArrayList<Object>(); List<Object> var27 = new ArrayList<Object>(); var27.add(""Name""); var27.add(""Age""); var27.add(""Gender""); var27.add(""UPN""); var27.add(""Enrollment Date""); var27.add(""ART Initialization Date""); var26.add(var27.toArray()); for (Patient var28 : var17) { List<Object> var29 = new ArrayList<Object>(); var29.add(var28.getPersonName().getFullName()); var29.add(var28.getAge()); var29.add(var28.getGender()); var29.add(new ArrayList<PatientIdentifier>(var28.getIdentifiers()).get(0)); String var30 = null; CalculationResult var31 = var22.get(var28.getId()); if (var31 != null && var31.getValue() != null) { var30 = DATE_FORMAT.format((Date) var31.getValue()); } var29.add(var30); String var32 = null; CalculationResult var33 = var24.get(var28.getId()); if (var33 != null && var33.getValue() != null) { var32 = DATE_FORMAT.format((Date) var33.getValue()); } var29.add(var32); var25.add(var29.toArray()); } System.out.println(""""); FileDownload var34 = new FileDownload(""Cohort.csv"", ""text/csv"", var8.createCsv(var25, var27)); return var34; } "	0	0	0	0	0	1
public static Matrix4d Func1(Point3d[] var1, Point3d[] var2) { superposer.setCentered(false); return superposer.superpose(var1, var2); } 	1	1	1	1	0	0
"private void Func1(PrintStream var1, int var2) { if (var2 != currentPower) { var1.printf(Locale.US, ""S%i\n"", (int) (255d * var2 / 100)); currentPower = var2; } } "	1	1	0	0	0	0
"private NodeProcess Func1(Process var1) { if (!subprocessesInfoMap.containsKey(var1)) { NodeProcess var2 = nodeProcessDAO.getNodeProcessByChild(var1.getId()); if (var2 != null) { Map<String, String> var3 = Maps.newHashMap(); Map<String, String> var4 = Maps.newHashMap(); ProcessDefinition var5 = processDefinitionLoader.getDefinition(var2.getProcess()); Node var6 = var5.getNodeNotNull(var2.getParentToken().getNodeId()); multiSubprocessFlagsMap.put(var1, var6 instanceof MultiSubprocessNode); if (var6 instanceof SubprocessNode) { SubprocessNode var7 = (SubprocessNode) var6; boolean var8 = var7.isInBaseProcessIdMode(); baseProcessIdModesMap.put(var1, var8); for (VariableMapping var9 : var7.getVariableMappings()) { if (var9.isSyncable() || var9.isReadable()) { var3.put(var9.getMappedName(), var9.getName()); } if (var9.isSyncable()) { var4.put(var9.getMappedName(), var9.getName()); } } log.debug(""Caching for "" + var1.getId() + "" [baseProcessId mode = "" + var8 + ""]: var3 = "" + var3 + ""var4 = "" + var4); } readVariableNamesMap.put(var1, var3); syncVariableNamesMap.put(var1, var4); } log.debug(""Caching "" + var2 + "" for "" + var1); subprocessesInfoMap.put(var1, var2); } return subprocessesInfoMap.get(var1); } "	0	1	0	0	0	0
@Before public void Func1() throws Exception { _block = BlockFactory.getBlock(blockType, owner, ownHash, previousHashChain, previousHashSender, publicKey, iban); } 	0	0	0	0	0	1
@Override public void Func1(Cart var1, UpdateAction var2) { Updater var3 = getUpdateService(var2.getClass()); var3.Func1(var1, var2); } 	1	0	1	0	0	0
public void Func1(OnSaveCroppedImageCompleteListener var1) { mOnSaveCroppedImageCompleteListener = var1 != null ? new WeakReference<>(var1) : null; } 	1	0	1	0	0	0
@Override public ContextPolicy Func1(String var1) { return Func1(var1, getPolicyStore(), getWhiteListContexts()); } 	1	0	0	1	0	0
"public static MessageMDN Func1(Session var1, AS2Message var2, String var3, DispositionType var4, String var5) throws Exception { AS2MessageMDN var6 = new AS2MessageMDN(var2, true); var6.setHeader(""AS2-Version"", ""1.1""); var6.setHeader(""Date"", DateUtil.formatDate(""EEE, dd MMM yyyy HH:mm:ss Z"")); var6.setHeader(""Server"", Session.TITLE); var6.setHeader(""Mime-Version"", ""1.0""); var6.getPartnership().setSenderID(AS2Partnership.PID_AS2, var6.getHeader(""AS2-From"")); var6.getPartnership().setReceiverID(AS2Partnership.PID_AS2, var6.getHeader(""AS2-To"")); var1.getPartnershipFactory().updatePartnership(var6, true); var6.setHeader(""From"", var2.getPartnership().getReceiverID(Partnership.PID_EMAIL)); String var7 = var6.getPartnership().getAttribute(ASXPartnership.PA_MDN_SUBJECT); if (var7 != null) { var6.setHeader(""Subject"", ParameterParser.parse(var7, new MessageParameters(var2))); } else { var6.setHeader(""Subject"", ""Your Requested MDN Response""); } var6.setText(ParameterParser.parse(var5, new MessageParameters(var2))); var6.setAttribute(AS2MessageMDN.MDNA_REPORTING_UA, Session.TITLE + ""@"" + var2.getAttribute(NetAttribute.MA_DESTINATION_IP) + "":"" + var2.getAttribute(NetAttribute.MA_DESTINATION_PORT)); var6.setAttribute(AS2MessageMDN.MDNA_ORIG_RECIPIENT, ""rfc822; "" + var2.getHeader(""AS2-To"")); var6.setAttribute(AS2MessageMDN.MDNA_FINAL_RECIPIENT, ""rfc822; "" + var2.getPartnership().getReceiverID(AS2Partnership.PID_AS2)); var6.setAttribute(AS2MessageMDN.MDNA_ORIG_MESSAGEID, var2.getHeader(""Message-ID"")); var6.setAttribute(AS2MessageMDN.MDNA_DISPOSITION, var4.toString()); DispositionOptions var8 = new DispositionOptions(var2 .getHeader(""Disposition-Notification-Options"")); var6.setAttribute(AS2MessageMDN.MDNA_MIC, var3); createMDNData(var1, var6, var8.getMicalg(), var8.getProtocol()); var6.updateMessageID(); var2.setMDN(var6); return var6; } "	1	0	1	1	0	0
protected ForEachLoopTree Func1(Token var1, boolean var2, VariableDeclarationTree var3, JSLexer var4, Context var5) { ExpressionTree var6 = this.parseNextExpression(var4, var5); expectOperator(JSOperator.LEFT_PARENTHESIS, var4, var5); StatementTree var7 = this.parseStatement(var4, var5); return new ForEachLoopTreeImpl(var1.getStart(), var4.getPosition(), var2, var3, var6, var7); } 	0	1	1	1	0	0
protected List<Integer> Func1(STextualDS var1) { List<Integer> var2 = new ArrayList<Integer>(); int var3 = 0; char[] var4 = var1.getText().toCharArray(); for (char var5 : var4) { String var6 = ((MergerProperties) getProperties()).getEscapeMapping().get(String.valueOf(var5)); if (var6 == null) { var2.add(var3); } else { if (var6.length() > 0) { char[] var7 = var6.toCharArray(); for (int var8 = 0; var8 < var7.length; var8++) { var2.add(var3); } } else { // one char is mapped to the empty string. } } var3 += 1; } var2.add(var3++); return var2; } 	1	0	1	0	0	0
"@Override public String Func1() { String[] var1 = new String[] {ConfigurationDefaults.PROPERTY_FILTER + ""="" + this.filter, ConfigurationDefaults.PROPERTY_MODE + ""="" + this.mode, ConfigurationDefaults.PROPERTY_SEED + ""="" + this.seed, ConfigurationDefaults.PROPERTY_START + ""="" + this.start, ConfigurationDefaults.PROPERTY_END + ""="" + this.end, ConfigurationDefaults.PROPERTY_PRINT_STACK + ""="" + this.shouldPrintStackTrace, ConfigurationDefaults.PROPERTY_NONDEX_DIR + ""="" + this.nondexDir, ConfigurationDefaults.PROPERTY_NONDEX_JAR_DIR + ""="" + this.nondexJarDir, ConfigurationDefaults.PROPERTY_EXECUTION_ID + ""="" + this.executionId, ""test="" + (this.testName == null ? """" : this.testName)}; return String.format(String.join(""%n"", var1)); } "	1	0	0	1	0	0
V Func1(Schema.BaseType var1, BiFunction<VertexElement, T, V> var2, boolean var3){ if(var3) preCheckForInstanceCreation(); if(isAbstract()) throw GraknTxOperationException.addingInstancesToAbstractType(this); VertexElement var4 = vertex().tx().factory().addVertexElement(var1); if(!Schema.MetaSchema.isMetaLabel(getLabel())) { vertex().tx().txCache().addedInstance(getId()); } return var2.apply(var4, getThis()); } 	1	0	1	0	0	0
@Nullable public com.vimeo.networking.model.live.Live Func1() { return mLive; } 	0	0	0	0	0	1
public static List<IndexRange> Func1(TextChange var1, List<TextChange> var2) { List<SplittableIndexRange> var3 = new ArrayList<>(); var3.add(new SplittableIndexRange(var1.getStart(), var1.insertedEndPosition())); for (TextChange var4 : var2) { var3 = var3.stream() .map(r -> r.split(var4.getStart(), var4.removedEndPosition())) .flatMap(t -> Stream.of(t._1, t._2)) .filter(r -> r.getLength() == 0) .collect(Collectors.toList()); } return var3.stream().map(SplittableIndexRange::asIndexRange).collect(Collectors.toList()); } 	0	1	1	1	0	0
protected void Func1(Map<File, File> var1) { SubtitleUploadDialog var2 = new SubtitleUploadDialog(getSubtitleService(), getWindow(this)); var2.setIconImage(getImage(getIcon(DropAction.Accept))); var2.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE); var2.setSize(820, 575); var2.setLocation(getOffsetLocation(var2.getOwner())); var2.setUploadPlan(var1); var2.startChecking(); var2.setVisible(true); } 	0	1	0	0	0	0
public WTokenRun Func1(WToken var1) { int var2 = var2(); if (var2 != -1) { return new WTokenRun(elements.set(var2, var1)); } else { return append(var1).append(WToken.newLine()); } } 	0	1	0	0	0	0
public void Func1(){ if (inputStackHandler.getStackInSlot(0).getItem() != Item.getItemFromBlock(Blocks.AIR)) { if (!world.isRemote) { ItemStack var1 = inputStackHandler.getStackInSlot(0); inputStackHandler.setStackInSlot(0, null); int var2 = getPos().getX(); int var3 = getPos().getZ(); switch (this.getBlockMetadata()) { case 0: var3 = var3 - 2; //North break; case 1: var2 = var2 + 2; //East break; case 2: var3 = var3 + 2; //South break; case 3: var2 = var2 - 2;//West break; } world.spawnEntity(new EntityItem(world, var2, getPos().up().getY(), var3, var1)); } } } 	0	0	0	1	0	0
"@Util public static <T> List<TableRecord<T>> Func1(List<T> var1, boolean var2, boolean var3, boolean var4, String var5, String var6, String var7, String var8, Map<String, Long> var9) { List<TableRecord<T>> var10 = new ArrayList<TableRecord<T>>(); Secure var11 = InjectorConfig.getInjector().getInstance(Secure.class); for (T var12 : var1) { TableRecord<T> var13 = new TableRecord<T>(); var10.add(var13); var13.objeto = var12; String[] var14 = var12.getClass().getName().split(""\\.""); ResultadoPermiso var15 = null; ResultadoPermiso var16 = null; ResultadoPermiso var17 = null; Map<String, Object> var18 = new HashMap<String, Object>(); if (var2 || var4 || var3){ String var19 = ""id""+ReflectionUtils.getNameClass(var12); if (!var9.containsKey(var19)){ var9.put(var19, (Long) ReflectionUtils.getValueFromMethodFromClass(var12, ""getId"")); } var18.put(var14[var14.length-1].toLowerCase(), var12); } if (var2) var15 = var11.check(var5, ""editable"", var8, var9, var18); if (var4) var16 = var11.check(var7, ""visible"", var8, var9, var18); if (var3) var17 = var11.check(var6, ""editable"", var8, var9, var18); if ((var16 != null) && (var16.checkAcceso(""leer""))) var13.var4 = true; else { if (var4) var13.var4=false; else var13.var4=true; } if ((var15 != null) && (var15.checkAcceso(""editar""))){ var13.var2 = true; } else { if (var2) var13.var2=false; else var13.var2=true; } if ((var17 != null) && (var17.checkAcceso(""borrar""))) var13.var3 = true; else { if (var3) var13.var3=false; else var13.var3=true; } } return var10; } "	0	0	0	0	0	1
"private String Func1(final String var1) { if (var1 == null) { return null; } final String var2 = var1.trim(); if (var2.isEmpty()) { return null; } if (var2.endsWith("";"")) { return var2; } return var2 + "";""; } "	1	0	0	1	0	0
public boolean Func1(Subject var1) { this.administratedSubjects.remove(var1); if (!var1.getAccountsInCharge().contains(this)) { var1.addAccountInCharge(this); } return true; } 	1	0	1	1	0	0
"private void Func1(long var1, String var2) { Log.i(""NAMAZ_TIME"", String.format(""Setting alarm for: %d"", TimeUnit.MILLISECONDS.toMinutes(var1))); Intent var3 = new Intent(""com.byteshaft.shownotification""); var3.putExtra(""var2"", var2); mPendingIntent = PendingIntent.getBroadcast(this, 0, var3, 0); mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + var1, mPendingIntent); } "	0	1	0	0	0	0
public SequenceFeatureList Func1() { if(containsKey(FeatureStringEnum.FEATURES.getValue())){ return (SequenceFeatureList) get(FeatureStringEnum.FEATURES.getValue()); } return null ; } 	0	1	0	0	0	0
public RequestQueue Func1() { if (mRequestQueue == null) { mRequestQueue = Volley.newRequestQueue(mCtx.getApplicationContext()); } return mRequestQueue; } 	0	0	0	0	0	1
"public static Chain Func1(Chain var1, List<Chain> var2) { Iterator<Chain> var3 = var2.iterator(); while(var3.hasNext()){ Chain var4 = var3.next(); if ( var4.getId().equals(var1.getId())){ return var4; } } logger.info(""Could not match SEQRES chainID asymId:"" + var1.getId() + "" authId:""+ var1.getName() +""  to ATOM chains!, size of atom chain: "" + var2.size()); return null; } "	1	1	1	1	0	0
"@Override public void Func1(long var1, long var2, long var3) throws IOException { synchronized (mMetadataInfo) { if (mClosed) { throw new IOException(""Closed""); } TermLog var4; acquireExclusive(); try { compact(Long.MAX_VALUE); var4 = FileTermLog.newTerm(mWorker, mBase, var1, var2, var3, var3); mTermLogs.add(var4); } finally { releaseExclusive(); } mMetadataInfo.mTerm = var2; mMetadataInfo.mHighestIndex = var3; mMetadataInfo.mCommitIndex = var3; mMetadataHighestIndex = var3; mMetadataDurableIndex = var3; syncMetadata(var4, var1); } } "	1	0	1	0	0	0
"protected void Func1(Versionable var1) throws Exception { if (auditable(var1)) { HistoryServer var2 = new HistoryServer(); if (var1.getModifierId() < 0) { try { var2.setModifierId(new VMUserServer(1).getEntity()); } catch (Exception ex) { LOG.log(Level.SEVERE, null, ex); } } else { var2.setModifierId(new VMUserServer(var1.getModifierId()).getEntity()); } if (var1.getHistoryList() != null && !var1.getHistoryList().isEmpty()) { if (var1.getReason() == null || var1.getReason().equals(""audit.general.creation"")) { var1.setReason(""audit.general.modified""); } History var3 = var1.getHistoryList().get(var1.getHistoryList().size() - 1); if ((var1.getMajorVersion() == 0 && var1.getMidVersion() == 0) // It has default values || var3.getMajorVersion() == var1.getMajorVersion() // Or it has a higher mid/major version assigned. && var3.getMidVersion() == var1.getMidVersion()) { var2.setMajorVersion(var1.getMajorVersion()); var2.setMidVersion(var1.getMidVersion()); var2.setMinorVersion(var3.getMinorVersion() + 1); } else { var2.setMajorVersion(var1.getMajorVersion()); var2.setMidVersion(var1.getMidVersion()); var2.setMinorVersion(var1.getMinorVersion()); } } else { if (var1.getReason() == null) { var1.setReason(""audit.general.creation""); } } var2.setReason(var1.getReason()); var2.setModificationTime(var1.getModificationTime() == null ? new Date() : var1.getModificationTime()); var2.write2DB(); updateFields(var2, var1); } if (var1.getHistoryList() != null && var1.getHistoryList().size() > 0) { History var4 = var1.getHistoryList().get(var1.getHistoryList().size() - 1); var1.setMajorVersion(var4.getMajorVersion()); var1.setMidVersion(var4.getMidVersion()); var1.setMinorVersion(var4.getMinorVersion()); } } "	1	1	1	1	0	0
"private void Func1(boolean var1) { if (var1 && !isEmpty(true)) { mTextInputLayout.clearAnimation(); mTextView.clearAnimation(); String var2 = mEditText.getText().toString(); if (isInputTypePassword() && var2.length() > 0) { var2 = String.format(Locale.US, ""%0"" + var2.length() + ""d"", 0).replace('0', '•'); } mTextView.setText(var2); mTextView.setVisibility(View.VISIBLE); final AnimationSet var3 = new AnimationSet(true); var3.setDuration(500); var3.setInterpolator(new AccelerateInterpolator()); var3.addAnimation(new AlphaAnimation(0, 1)); final AnimationSet var4 = new AnimationSet(true); var4.setDuration(700); var4.setInterpolator(new AccelerateInterpolator()); var4.addAnimation(new AlphaAnimation(1, 0)); mTextInputLayout.setVisibility(View.VISIBLE); mTextInputLayout.startAnimation(var3); mTextView.startAnimation(var4); (new Handler()).postDelayed(new Runnable() { @Override public void Func2() { mAnimationEnded = true; if (mCurrentMode == MODE_EDIT) { mTextView.setVisibility(View.INVISIBLE); } } }, 700); } else { mTextInputLayout.setVisibility(View.VISIBLE); mTextView.setVisibility(View.INVISIBLE); } mCurrentMode = MODE_EDIT; mEditText.setVisibility(View.VISIBLE); mEditText.setEnabled(true); } "	1	1	0	1	0	0
"public static String Func1(final IProject var1, final StatisticsInfo var2, final StatisticsPanel var3) { StatCount var4 = new StatCount(); StatCount var5 = new StatCount(); StatCount var6 = new StatCount(); StatCount var7 = new StatCount(); Map<String, SourceTextEntry> var8 = new HashMap<>(); Set<String> var9 = new HashSet<>(); for (SourceTextEntry var10 : var1.getAllEntries()) { String var11 = var10.getSrcText(); for (ProtectedPart var12 : var10.getProtectedParts()) { var11 = var11.replace(var12.getTextInSourceSegment(), var12.getReplacementUniquenessCalculation()); } if (!var8.containsKey(var11)) { var8.put(var11, var10); } TMXEntry var13 = var1.getTranslationInfo(var10); if (var13.isTranslated()) { var9.add(var11); } } Set<String> var14 = new HashSet<>(); Set<String> var15 = new HashSet<>(); for (Map.Entry<String, SourceTextEntry> var16 : var8.entrySet()) { StatCount var17 = new StatCount(var16.getValue()); var6.add(var17); var14.add(var16.getValue().getKey().var20); if (!var9.contains(var16.getKey())) { var7.add(var17); var15.add(var16.getValue().getKey().var20); } } var6.addFiles(var14.size()); var7.addFiles(var15.size()); List<FileData> var18 = new ArrayList<>(); Map<String, Boolean> var19 = new HashMap<>(); for (FileInfo var20 : var1.getProjectFiles()) { FileData var21 = new FileData(); var21.filename = var20.filePath; var18.add(var21); int var22 = 0; int var23 = 0; for (SourceTextEntry var10 : var20.entries) { String var11 = var10.getSrcText(); for (ProtectedPart var12 : var10.getProtectedParts()) { var11 = var11.replace(var12.getTextInSourceSegment(), var12.getReplacementUniquenessCalculation()); } StatCount var17 = new StatCount(var10); var4.add(var17); var22 = 1; TMXEntry var13 = var1.getTranslationInfo(var10); if (!var13.isTranslated()) { var5.add(var17); var23 = 1; } var21.var4.add(var17); Boolean var24 = var19.get(var11); if (var24 == null) { var19.put(var11, false); var21.var6.add(var17); if (!var13.isTranslated()) { var21.var7.add(var17); } } if (!var13.isTranslated()) { var21.var5.add(var17); } } var4.addFiles(var22); var5.addFiles(var23); } StringBuilder var25 = new StringBuilder(); var25.append(OStrings.getString(""CT_STATS_Project_Statistics"")); var25.append(""\n\n""); String[][] var26 = calcHeaderTable(new StatCount[] { var4, var5, var6, var7 }); if (var3 != null) { var3.setProjectTableData(htHeaders, var26); } var25.append(TextUtil.showTextTable(htHeaders, var26, htAlign)); var25.append(""\n\n""); var25.append(OStrings.getString(""CT_STATS_FILE_Statistics"")); var25.append(""\n\n""); String[][] var27 = calcFilesTable(var1.getProjectProperties(), var18); if (var3 != null) { var3.setFilesTableData(ftHeaders, var27); } var25.append(TextUtil.showTextTable(ftHeaders, var27, ftAlign)); if (var2 != null) { var2.numberOfSegmentsTotal = var4.segments; var2.numberofTranslatedSegments = var9.size(); var2.numberOfUniqueSegments = var6.segments; var2.uniqueCountsByFile.clear(); for (FileData var28 : var18) { var2.uniqueCountsByFile.put(var28.filename, var28.var6.segments); } } return var25.toString(); } "	0	0	0	0	0	1
"static int Func1(NotificationGenerationJob var1) { var1.showAsAlert = OneSignal.getInAppAlertNotificationEnabled() && OneSignal.isAppActive(); processCollapseKey(var1); GenerateNotification.fromJsonPayload(var1); if (!var1.restoring) { saveNotification(var1.context, var1.jsonPayload, false, var1.getAndroidId()); try { JSONObject var2 = new JSONObject(var1.jsonPayload.toString()); var2.put(""notificationId"", var1.getAndroidId()); OneSignal.handleNotificationReceived(newJsonArray(var2), true, var1.showAsAlert); } catch(Throwable t) {} } return var1.getAndroidId(); } "	0	1	0	0	0	0
"@Override public ArrayList<Expense> Func1(){ ArrayList<Expense> var1 = new ArrayList<>(); Connection var2 = null; PreparedStatement var3 = null; UserDaoImpl var4 = new UserDaoImpl(); try { var2 = DaoUtilities.getConnection(); String var5 =  ""SELECT a.*, b.u_id as author_id, b.u_username as authorname,""; var5 = var5 + ""  c.u_id as resolver_id, c.u_username as resolvername, d.rs_id, d.rs_status, e.rt_id, e.rt_type""; var5 = var5 + ""  from erawesome.ers_reimbursements a""; var5 = var5 + ""  join erawesome.ers_users b on b.u_id = a.u_id_author""; var5 = var5 + ""  join erawesome.ers_users c on c.u_id = a.u_id_resolver""; var5 = var5 + ""  join erawesome.ers_reimbursement_status d on d.rs_id = a.rs_status""; var5 = var5 + ""  join erawesome.ers_reimbursement_type e on e.rt_id = a.rt_type""; var3 = var2.prepareStatement(var5); ResultSet var6 = var3.executeQuery(var5); while (var6.next()) { Expense var7 = new Expense(); var7.setR_id(var6.getInt(""r_id"")); var7.setR_amount(var6.getDouble(""r_amount"")); var7.setR_description(var6.getString(""r_description"")); var7.setR_submitted(var6.getTimestamp(""r_submitted"")); var7.setR_resolved(var6.getTimestamp(""r_resolved"")); User var8 = var4.getUser(var6.getString(""authorname"")); var7.setU_author(var8); User var9 = var4.getUser(var6.getString(""resolvername"")); var7.setU_resolver(var9); ExpenseType var10 = new ExpenseType(); var10.setRt_id(var6.getInt(""rt_id"")); var10.setRt_type(var6.getString(""rt_type"")); var7.setR_type(var10); ExpenseStatus var11 = new ExpenseStatus(); var11.setRs_id(var6.getInt(""rs_id"")); var11.setRs_status(var6.getString(""rs_status"")); var7.setR_status(var11); var1.add(var7); } } catch (SQLException e) { e.printStackTrace(); } finally { try { if (var3 != null) { var3.close(); } if (var2 != null) { var2.close(); } } catch (SQLException e) { e.printStackTrace(); } } return var1; } "	1	0	1	1	0	0
public List<Brick> Func1(String var1, Sprite var2, Context var3) { UserBrickScriptActivity var4; try { var4 = (UserBrickScriptActivity) var3; } catch (ClassCastException e) { var4 = null; } boolean var5 = var4 != null; List<Brick> var6 = new LinkedList<Brick>(); List<Brick> var7 = new ArrayList<Brick>(); if (var1.equals(var3.getString(R.string.category_control))) { var6 = setupControlCategoryList(var3); } else if (var1.equals(var3.getString(R.string.category_motion))) { var6 = setupMotionCategoryList(var2, var3); } else if (var1.equals(var3.getString(R.string.category_sound))) { var6 = setupSoundCategoryList(var3); } else if (var1.equals(var3.getString(R.string.category_looks))) { var6 = setupLooksCategoryList(var3); } else if (var1.equals(var3.getString(R.string.category_user_bricks))) { var6 = setupUserBricksCategoryList(); } else if (var1.equals(var3.getString(R.string.category_data))) { var6 = setupDataCategoryList(); } else if (var1.equals(var3.getString(R.string.category_lego_nxt))) { var6 = setupLegoNxtCategoryList(); } else if (var1.equals(var3.getString(R.string.category_arduino))) { var6 = setupArduinoCategoryList(); } else if (var1.equals(var3.getString(R.string.category_drone))) { var6 = setupDroneCategoryList(); } else if (var1.equals(var3.getString(R.string.category_phiro))) { var6 = setupPhiroProCategoryList(); } else if (var1.equals(R.string.category_raspi))  { var6 = setupRaspiCategoryList(); } for (Brick var8 : var6) { ScriptBrick var9; try { var9 = (ScriptBrick) var8; } catch (ClassCastException e) { var9 = null; } if (!var5 || var9 == null) { var7.add(var8); } } return var7; } 	0	1	1	1	0	0
"private Parameter Func1(Annotation var1, String var2, Class<?> var3, boolean var4) { Parameter var5 = null; if (var1 instanceof RequestParam) { RequestParam var6 = (RequestParam) var1; QueryParameter var7 = new QueryParameter() .name(var6.value()); if (!var2.isEmpty()) { var7.setDefaultValue(var2); } Property var8 = ModelConverters.getInstance().readAsProperty(var3); if (var8 != null) { var7.setProperty(var8); } if (var4 || var3.var4() || var3.isAssignableFrom(Collection.class)) { var7.setType(""string""); } var7.setRequired(var6.required()); var5 = var7; } else if (var1 instanceof PathVariable) { PathVariable var6 = (PathVariable) var1; PathParameter var9 = new PathParameter() .name(var6.value()); if (!var2.isEmpty()) { var9.setDefaultValue(var2); } Property var8 = ModelConverters.getInstance().readAsProperty(var3); if (var8 != null) { var9.setProperty(var8); } var5 = var9; } else if (var1 instanceof RequestHeader) { RequestHeader var6 = (RequestHeader) var1; HeaderParameter var10 = new HeaderParameter() .name(var6.value()); var10.setDefaultValue(var2); Property var8 = ModelConverters.getInstance().readAsProperty(var3); if (var8 != null) { var10.setProperty(var8); } var10.setRequired(var6.required()); var5 = var10; } else if (var1 instanceof CookieValue) { CookieValue var6 = (CookieValue) var1; CookieParameter var11 = new CookieParameter() .name(var6.value()); if (!var2.isEmpty()) { var11.setDefaultValue(var2); } Property var8 = ModelConverters.getInstance().readAsProperty(var3); if (var8 != null) { var11.setProperty(var8); } var11.setRequired(var6.required()); var5 = var11; } return var5; } "	0	0	0	1	0	0
"@Override public void Func1(Bundle var1) { super.Func1(var1); Bundle var2 = getArguments(); product_ID = var2.getInt(""prod_id""); productName = var2.getString(""prod_name""); groceryList_ID = var2.getInt(""gl_id""); groceryManager = new GroceryManager(); } "	0	1	0	0	0	0
"private void Func1( final FedoraEvent var1, final Event var2 ) { try { if (PROPERTY_EVENT_TYPES.contains(var2.getType())) { final String var3 = var2.getPath(); var1.Func1(var3.substring(var3.lastIndexOf(""/"") + 1)); } else { log.trace(""Not adding non-event property: {}, {}"", var1, var2); } } catch (final RepositoryException e) { throw new RepositoryRuntimeException(e); } } "	1	1	1	1	0	0
"public TextChannel Func1() { return (testBot ? getChannelByID(""242297848123621376"") : getChannelByID(""226786557862871040"")); } "	0	0	0	0	0	1
@Override public void Func1(@NonNull MOKMessage var1) { processNewMessage(var1); boolean var2 = var1.getSid().equals(myMonkeyID); updateConversation(var2?var1.getRid():var1.getConversationID(), getSecondaryTextByMOkMessage(var1), var2? MonkeyConversation.ConversationStatus.deliveredMessage: MonkeyConversation.ConversationStatus.receivedMessage, var2? 0 : 1, var1.getDatetimeorder()); } 	0	0	0	0	0	1
"@Test(expected = SaveException.class) public final void Func1() throws IOException, URISyntaxException, SaveException { String var1 = ""ModsExportFormatTestAllFields.bib""; Path var2 = Paths.get(ModsExportFormatTestFiles.class.getResource(var1).toURI()); List<BibEntry> var3 = testImporter.importDatabase(var2, Charset.defaultCharset()).getDatabase() .getEntries(); modsExportFormat.performExport(databaseContext, """", charset, var3); } "	0	0	0	0	0	1
"public static ConMatch Func1(IStrategoAppl var1, FrameDescriptor var2) { assert Tools.hasConstructor(var1, ""Con"", 2); String var3 = Tools.stringAt(var1, 0).stringValue(); IStrategoList var4 = Tools.listAt(var1, 1); MatchPattern[] var5 = new MatchPattern[var4.size()]; for (int var6 = 0; var6 < var5.length; var6++) { var5[0] = MatchPattern.Func1(Tools.applAt(var4, var6), var2); } return new ConMatch(var3, var5, SourceSectionUtil.fromStrategoTerm(var1)); } "	1	1	1	1	0	0
public GraphicBuilder Func1(float Func1) { if (Func1 <= 0) { this.Func1 = Func1; } return this; } 	1	0	1	1	0	0
@Override public void Func1(TileChaosFlowerPot var1, double var2, double var3, double var4, float var5, int var6) { Tessellator var7 = Tessellator.getInstance(); VertexBuffer var8 = var7.getBuffer(); ItemStack var9 = var1.getFlowerItemStack(); if (var9 == null || var9.getItemDamage() < 0 || var9.getItemDamage() >= TEXTURES.length) { return; } Minecraft.getMinecraft().renderEngine.bindTexture(TEXTURES[var9.getItemDamage()]); double var10 = var2 + F; double var11 = var2 + 1 - F; double var12 = var3 + F; double var13 = var3 + 1.15 - F; double var14 = var4 + F; double var15 = var4 + 1 - F; GlStateManager.pushMatrix(); GlStateManager.disableLighting(); var8.begin(7, DefaultVertexFormats.POSITION_TEX); var8.pos(var10, var13, var14).tex(0, 0).endVertex(); var8.pos(var11, var13, var15).tex(1, 0).endVertex(); var8.pos(var11, var12, var15).tex(1, 1).endVertex(); var8.pos(var10, var12, var14).tex(0, 1).endVertex(); var7.draw(); var8.begin(7, DefaultVertexFormats.POSITION_TEX); var8.pos(var10, var12, var14).tex(0, 1).endVertex(); var8.pos(var11, var12, var15).tex(1, 1).endVertex(); var8.pos(var11, var13, var15).tex(1, 0).endVertex(); var8.pos(var10, var13, var14).tex(0, 0).endVertex(); var7.draw(); var8.begin(7, DefaultVertexFormats.POSITION_TEX); var8.pos(var11, var13, var14).tex(0, 0).endVertex(); var8.pos(var10, var13, var15).tex(1, 0).endVertex(); var8.pos(var10, var12, var15).tex(1, 1).endVertex(); var8.pos(var11, var12, var14).tex(0, 1).endVertex(); var7.draw(); var8.begin(7, DefaultVertexFormats.POSITION_TEX); var8.pos(var11, var12, var14).tex(0, 1).endVertex(); var8.pos(var10, var12, var15).tex(1, 1).endVertex(); var8.pos(var10, var13, var15).tex(1, 0).endVertex(); var8.pos(var11, var13, var14).tex(0, 0).endVertex(); var7.draw(); GlStateManager.popMatrix(); } 	0	1	0	0	0	0
private void Func1(int var1, int var2, int var3, int var4) { int var5 = var1; int var6 = var2; final int var7 = mCapturedView.getLeft(); final int var8 = mCapturedView.getTop(); if (var3 != 0) { var5 = mCallback.clampViewPositionHorizontal(mCapturedView, var1, var3); mCapturedView.offsetLeftAndRight(var5 - var7); } if (var4 != 0) { var6 = mCallback.clampViewPositionVertical(mCapturedView, var2, var4); mCapturedView.offsetTopAndBottom(var6 - var8); if (mHasFloatingActionButton) { final int var9; if(!mHasAnchor) { var9 = Math.round(mFabRatio * var6) + mFabExpandedY; } else { if(var6 <= mAnchorY){ var9 = Math.round(mFabRatio * var6) + mFabExpandedY; } else { var9 = var6 - mPanelHeight + mFabExpandedY; } } final int var10 = mFloatingActionButton.getTop(); mFloatingActionButton.offsetTopAndBottom(var9 - var10); } } if (var3 != 0 || var4 != 0) { final int var11 = var5 - var7; final int var12 = var6 - var8; mCallback.onViewPositionChanged(mCapturedView, var5, var6, var11, var12); } } 	0	1	0	0	0	0
public int Func1() { return population; } 	0	0	0	0	0	1
@Override public Iterator<Tree> Func1() { return Iterators.concat(Iterators.forArray(createKeyword, functionKeyword, identifier, openingParenthesis), parameterList.elementsAndSeparators(Functions.<ParameterTree> identity()), Iterators.forArray(closingParenthesis, returnType, resultSet, routineBody)); } 	0	0	0	0	0	1
@Subscribe public void Func1(NewProblemAddedEvent var1) { getData(0); } 	0	0	0	0	0	1
@Override public Map<Integer, List<DelayedEntry>> Func1(List<DelayedEntry> var1) { Map<Integer, List<DelayedEntry>> var2; sort(var1); if (writeBatchSize > 1) { var2 = doStoreUsingBatchSize(var1); } else { var2 = processInternal((List) var1); } return var2; } 	1	0	1	0	0	0
protected boolean Func1(ControlPoint var1, IGeoPosition var2) { IGeoPosition var3 = var1.getPosition(); int var4 = var1.getCPIndex(); int var5 = var1.getCPSubIndex(); List<IGeoPosition> var6 = this.getPositions(); boolean var7 = false; switch (var1.getCPType()) { case NEW_POSITION_CP: { ControlPoint var8 = this.findControlPoint(ControlPoint.CPTypeEnum.POSITION_CP, var4, -1); ControlPoint var9 = this.findControlPoint(ControlPoint.CPTypeEnum.POSITION_CP, var5, -1); var1.setCPType(ControlPoint.CPTypeEnum.POSITION_CP); var1.setCPSubIndex(-1); var3.setLatitude(var2.getLatitude()); var3.setLongitude(var2.getLongitude()); this.increaseControlPointIndexes(var4 + 1); var1.setCPIndex(var4 + 1); var6.add(var5, var1.getPosition()); this.createCPBetween(var8.getPosition(), var2, ControlPoint.CPTypeEnum.NEW_POSITION_CP, var4, var4 + 1); this.createCPBetween(var2, var9.getPosition(), ControlPoint.CPTypeEnum.NEW_POSITION_CP, var4 + 1, (var4 + 2) % var6.size()); this.addUpdateEventData(FeatureEditUpdateTypeEnum.COORDINATE_ADDED, new int[]{var1.getCPIndex()}); var7 = true; break; } case POSITION_CP: { int var10 = (var4 + var6.size() - 1) % var6.size(); int var11 = (var4 + 1) % var6.size(); var3.setLatitude(var2.getLatitude()); var3.setLongitude((var2.getLongitude())); this.addUpdateEventData(FeatureEditUpdateTypeEnum.COORDINATE_MOVED, new int[]{var1.getCPIndex()}); var7 = true; ControlPoint var8 = this.findControlPoint(ControlPoint.CPTypeEnum.POSITION_CP, var10, -1); ControlPoint var12 = this.findControlPoint(ControlPoint.CPTypeEnum.NEW_POSITION_CP, var10, var4); var12.moveCPBetween(var8.getPosition(), var3); ControlPoint var9 = this.findControlPoint(ControlPoint.CPTypeEnum.POSITION_CP, var11, -1); ControlPoint var13 = this.findControlPoint(ControlPoint.CPTypeEnum.NEW_POSITION_CP, var4, var11); var13.moveCPBetween(var3, var9.getPosition()); break; } } return var7; } 	1	0	0	1	0	0
public void Func1(Message var1) throws IOException { for (Socket var2 : ClientCenter.getInstance().getSockets()) { if (var2 != null) { if (!var2.isClosed()) { ObjectOutputStream var3 = new ObjectOutputStream(var2.getOutputStream()); var1.setTimestamp(); var3.writeObject(var1); var3.flush(); } } } } 	1	1	0	0	0	0
@Override public void Func1(Bundle var1) { super.Func1(var1); titles = getActivity().getResources().getStringArray(com.example.rh035578.shoppinglist.R.array.nav_drawer_labels); } 	1	0	1	0	0	0
"@Override public boolean Func1(StaplerRequest var1, JSONObject var2) throws FormException { adminlist = var2.getString(""adminlist""); requestForTestingPhrase = var2.getString(""requestForTestingPhrase""); whitelistPhrase = var2.getString(""whitelistPhrase""); okToTestPhrase = var2.getString(""okToTestPhrase""); retestPhrase = var2.getString(""retestPhrase""); skipBuildPhrase = var2.getString(""skipBuildPhrase""); cron = var2.getString(""cron""); useComments = var2.getBoolean(""useComments""); useDetailedComments = var2.getBoolean(""useDetailedComments""); unstableAs = GHCommitState.valueOf(var2.getString(""unstableAs"")); autoCloseFailedPullRequests = var2.getBoolean(""autoCloseFailedPullRequests""); displayBuildErrorsOnDownstreamBuilds = var2.getBoolean(""displayBuildErrorsOnDownstreamBuilds""); githubAuth = var1.bindJSONToList(GhprbGitHubAuth.class, var2.getJSONObject(""githubAuth"")); extensions = new DescribableList<GhprbExtension, GhprbExtensionDescriptor>(Saveable.NOOP); try { extensions.rebuildHetero(var1, var2, getGlobalExtensionDescriptors(), ""extensions""); } catch (IOException e) { e.printStackTrace(); } readBackFromLegacy(); save(); return super.Func1(var1, var2); } "	0	0	0	1	0	0
"public static void Func1(String var1) { chordtoworkon = var1; if (FullscreenActivity.chordFormat.equals(""2"")) { chordtoworkon = chordtoworkon.replace(""$Bb"",""$A#""); chordtoworkon = chordtoworkon.replace(""$B"",""$A#""); chordtoworkon = chordtoworkon.replace(""$H"", ""$B""); } else if (FullscreenActivity.chordFormat.equals(""3"")) { chordtoworkon = chordtoworkon.replace(""$As"", ""$Ab""); chordtoworkon = chordtoworkon.replace(""$Ais"",""$A#""); chordtoworkon = chordtoworkon.replace(""$as"", ""$Abm""); chordtoworkon = chordtoworkon.replace(""$ais"",""$A#m""); chordtoworkon = chordtoworkon.replace(""$a"",""$Am""); chordtoworkon = chordtoworkon.replace(""$Bes"", ""$A""); chordtoworkon = chordtoworkon.replace(""$Bis"",""$B""); chordtoworkon = chordtoworkon.replace(""$bes"", ""$Am""); chordtoworkon = chordtoworkon.replace(""$bis"",""$Bm""); chordtoworkon = chordtoworkon.replace(""$B"",""$Bb""); chordtoworkon = chordtoworkon.replace(""$b"",""$Bbm""); chordtoworkon = chordtoworkon.replace(""$Hs"", ""$Bb""); chordtoworkon = chordtoworkon.replace(""$His"",""$C""); chordtoworkon = chordtoworkon.replace(""$hs"", ""$Bbm""); chordtoworkon = chordtoworkon.replace(""$his"",""$Cm""); chordtoworkon = chordtoworkon.replace(""$H"",""$B""); chordtoworkon = chordtoworkon.replace(""$h"",""$Bm""); chordtoworkon = chordtoworkon.replace(""$Ces"", ""$B""); chordtoworkon = chordtoworkon.replace(""$Cis"",""$C#""); chordtoworkon = chordtoworkon.replace(""$ces"", ""$Bm""); chordtoworkon = chordtoworkon.replace(""$cis"",""$C#m""); chordtoworkon = chordtoworkon.replace(""$c"",""$Cm""); chordtoworkon = chordtoworkon.replace(""$Des"", ""$Db""); chordtoworkon = chordtoworkon.replace(""$Dis"",""$D#""); chordtoworkon = chordtoworkon.replace(""$des"", ""$Dbm""); chordtoworkon = chordtoworkon.replace(""$dis"",""$D#m""); chordtoworkon = chordtoworkon.replace(""$d"",""$Dm""); chordtoworkon = chordtoworkon.replace(""$Es"", ""$Eb""); chordtoworkon = chordtoworkon.replace(""$Eis"",""$F""); chordtoworkon = chordtoworkon.replace(""$es"", ""$Ebm""); chordtoworkon = chordtoworkon.replace(""$eis"",""$Fm""); chordtoworkon = chordtoworkon.replace(""$e"",""$Em""); chordtoworkon = chordtoworkon.replace(""$Fes"", ""$E""); chordtoworkon = chordtoworkon.replace(""$Fis"",""$F#""); chordtoworkon = chordtoworkon.replace(""$fes"", ""$Em""); chordtoworkon = chordtoworkon.replace(""$fis"",""$F#m""); chordtoworkon = chordtoworkon.replace(""$f"",""$Fm""); chordtoworkon = chordtoworkon.replace(""$Ges"", ""$Gb""); chordtoworkon = chordtoworkon.replace(""$Gis"",""$G#""); chordtoworkon = chordtoworkon.replace(""$ges"", ""$Gbm""); chordtoworkon = chordtoworkon.replace(""$gis"",""$G#m""); chordtoworkon = chordtoworkon.replace(""$g"",""$Gm""); } chordtoworkon = chordtoworkon.replace(""$B"", ""$C""); chordtoworkon = chordtoworkon.replace(""$Cb"", ""$B""); chordtoworkon = chordtoworkon.replace(""$E#"", ""$F""); chordtoworkon = chordtoworkon.replace(""$Fb"", ""$E""); if (chordtoworkon.endsWith(""maj"")) { chordtoworkon = chordtoworkon.replace(""maj"", """"); } else if (chordtoworkon.endsWith(""major"")) { chordtoworkon = chordtoworkon.replace(""major"", """"); } chordtoworkon = chordtoworkon.replace(""min"", ""m""); chordtoworkon = chordtoworkon.replace(""Ab"", ""G#""); chordtoworkon = chordtoworkon.replace(""Bb"", ""A#""); chordtoworkon = chordtoworkon.replace(""Db"", ""C#""); chordtoworkon = chordtoworkon.replace(""Eb"", ""D#""); chordtoworkon = chordtoworkon.replace(""Gb"", ""F#""); chordtoworkon = chordtoworkon.replace(""sus4"", ""sus""); chordtoworkon = chordtoworkon.replace(""sus2"", ""2""); chordtoworkon = chordtoworkon.replace(""add2"", ""2""); chordtoworkon = chordtoworkon.replace(""sus9"", ""9""); chordtoworkon = chordtoworkon.replace(""dim7"", ""dim""); chordtoworkon = chordtoworkon.replace(""m7/b5"", ""m7b5""); chordtoworkon = chordtoworkon.replace(""#5"", ""aug""); chordtoworkon = chordtoworkon.replace(""+"", ""aug""); chordtoworkon = chordtoworkon.replace(""/A#"", """"); chordtoworkon = chordtoworkon.replace(""/C#"", """"); chordtoworkon = chordtoworkon.replace(""/D#"", """"); chordtoworkon = chordtoworkon.replace(""/F#"", """"); chordtoworkon = chordtoworkon.replace(""/G#"", """"); chordtoworkon = chordtoworkon.replace(""/A"", """"); chordtoworkon = chordtoworkon.replace(""/B"", """"); chordtoworkon = chordtoworkon.replace(""/C"", """"); chordtoworkon = chordtoworkon.replace(""/D"", """"); chordtoworkon = chordtoworkon.replace(""/E"", """"); chordtoworkon = chordtoworkon.replace(""/F"", """"); chordtoworkon = chordtoworkon.replace(""/G"", """"); chordtoworkon = chordtoworkon.replace(""$"", """"); } "	1	0	0	1	0	0
@Override public boolean Func1(Collection<?> var1) { PreCon.notNull(var1); boolean var2 = false; for (Object var3 : var1) { var2 = var2 || remove(var3); } return var2; } 	1	1	0	1	0	0
@Override public boolean Func1(Collection<? extends E> var1) { PreCon.notNull(var1); boolean var2 = false; for (E var3 : var1) { var2 = var2 || add(var3); } return var2; } 	1	1	0	1	0	0
"private static boolean Func1(String var1) { return !var1.startsWith(""'"") || !var1.equals(""n't""); } "	0	0	0	1	0	0
@Override public void Func1(String var1, byte[] var2) { MixinAgent.classLoader.addMixinClass(var1, var2); } 	1	0	1	0	0	0
public static boolean Func1(Location var1, double var2, Player var3) { boolean var4 = false; for (WaterManipulation var5 : getAbilities(WaterManipulation.class)) { if (var5.var1.getWorld().equals(var1.getWorld()) && !var3.equals(var5.var3)) { if (var5.var1.distanceSquared(var1) <= var2 * var2) { var5.remove(); var4 = true; } } } return var4; } 	0	1	0	0	0	0
private void Func1(Class<?> var1, Object var2){ Annotation[] var3 = var1.getAnnotations(); List<Object> var4 = null; for(Annotation var5 : var3){ if(null != var5){ var4 = ANNOTATION_CONTAINER.get(var5.annotationType()); if(CollectionKit.isEmpty(var4)){ var4 = CollectionKit.newArrayList(); } var4.add(var2); this.put(var5.annotationType(), var4); } } } 	0	1	0	0	0	0
public void Func1(float var1, float var2, float var3, ScaleType var4) { if (!onDrawReady) { delayedZoomVariables = new ZoomVariables(var1, var2, var3, var4); return; } setScaleType(var4); resetZoom(); scaleImage(var1, viewWidth / 2, viewHeight / 2, false); matrix.getValues(m); m[Matrix.MTRANS_X] = -((var2 * getImageWidth()) - (viewWidth * 0.5f)); m[Matrix.MTRANS_Y] = -((var3 * getImageHeight()) - (viewHeight * 0.5f)); matrix.setValues(m); fixTrans(); setImageMatrix(matrix); } 	1	1	1	1	0	0
"protected JSONObject Func1(){ JSONObject var1 = new JSONObject(); try { int var2 = 0; if(featureType!=null || (layer != null && layer.getFeatureType() != null)) { FeatureSource var3; SimpleFeatureType var4 = featureType; if (var4==null){ var4=layer.getFeatureType(); } if(isDebug() && var4.getFeatureSource() instanceof WFSFeatureSource) { Map var5 = new HashMap(); var5.put(WFSDataStoreFactory.TRY_GZIP.key, Boolean.FALSE); var3 = ((WFSFeatureSource)var4.getFeatureSource()).openGeoToolsFeatureSource(layer.getFeatureType(), var5); } /*else if(var4.getFeatureSource() instanceof ArcGISFeatureSource) { Map var5 = new HashMap(); if(isDebug()) { var5.put(ArcGISDataStoreFactory.TRY_GZIP.key, Boolean.FALSE); } if(!isNoCache()) { var5.put(ArcGISDataStoreFactory.HTTP_CACHE.key, getHTTPCache()); } var3 = ((ArcGISFeatureSource)var4.getFeatureSource()).openGeoToolsFeatureSource(layer.getFeatureType(), var5); }*/ else { var3 = var4.openGeoToolsFeatureSource(); } boolean var6 = var3.getQueryCapabilities().isOffsetSupported(); final Query var7 = new Query(var3.getName().toString()); setFilter(var7,var4, appLayer); final FeatureSource var8 = var3; var2 = lookupTotalCountCache(new Callable<Integer>() { public Integer Func2() throws Exception { return var8.getCount(var7); } }); if(var2 == -1) { var1.put(""virtualtotal"", true); var2 = FeatureToJson.MAX_FEATURES; } var7.setStartIndex(start); var7.setMaxFeatures(Math.min(limit,FeatureToJson.MAX_FEATURES)); FeatureToJson var9 = new FeatureToJson(arrays, this.edit, graph, attributesToInclude); JSONArray var10 = var9.getJSONFeatures(appLayer,var4, var3, var7, sort, dir); if (!var6){ if (var10.length() < limit){ var2 = start+var10.length(); } } var1.put(""success"", true); var1.put(""var10"", var10); } var1.put(""var2"", var2); } catch(Exception e) { log.error(""Error loading var10"", e); var1.put(""success"", false); String var11 = ""Fout bij ophalen var10: "" + e.toString(); Throwable var12 = e.getCause(); while(var12 != null) { var11 += ""; "" + var12.toString(); var12 = var12.getCause(); } var1.put(""var11"", var11); } return var1; } "	0	1	0	0	0	0
@Override public int Func1(int var1) { if (var1 < accountsWithoutCurrent.size()) { return TYPE_ACCOUNT; } else if (var1 == accountsWithoutCurrent.size()) { return TYPE_SEPARATOR; } else { return TYPE_FOOTER; } } 	0	1	0	0	0	0
"@Override public void Func1(Devathlon3 var1, Location var2, Player var3, Object... var4) { if (var2 == null) { System.out.println(""why is var2 null?!""); return; } final double[] var5 = {0}; final double[] var6 = {(double) var4[0]}; new BukkitRunnable() { @Override public void Func2() { if (var5[0] > var6[0]) { this.cancel(); } var5[0] += 0.5D; for (int var7 = 0; var7 < 360; var7++) { double var8 = Math.toRadians(var7); double var9 = Math.cos(var8) * var5[0]; double var10 = Math.sin(var8) * var5[0]; var2.add(var9, 0, var10); ParticleUtil.playColor(var2, false, ColoredParticle.MOBSPELL, red, green, blue, 1); var2.subtract(var9, 0, var10); } } }.runTaskTimer(var1, 0, 3); } "	1	0	0	1	0	0
public State Func1() { try { history.push(overflow.pop()); return overflow.peek(); } catch (EmptyStackException e) { return null; } } 	0	0	0	0	0	1
private void Func1(RecyclerView var1) { ArrayList<ChatItem> var2 = new ArrayList<ChatItem>(); addDummyData(var2); var1.setLayoutManager(new LinearLayoutManager(var1.getContext())); var1.setAdapter(new RecyclerViewAdapter(var2)); } 	0	1	0	0	0	0
"@Override public <T> void Func1(ProvisionInvocation<T> var1) { final Key<?> var2 = var1.getBinding().getKey(); final Class<?> var3 = var2.getTypeLiteral().getRawType(); final T var4; if (features == null) { LOG.info(""LifecycleProvisionListener not initialized yet : {}"", var2); LOG.info(""LifecycleProvisionListener not initialized yet : {} source={}"", var2, var1.getBinding().getSource()); var4 = var1.var1(); if (var4 instanceof LifecycleListener) { pendingLifecycleListeners.add((LifecycleListener)var4); } return; } final TypeLifecycleActions var5 = getOrCreateActions(var3); metrics.push(var2); try { var4 = var1.var1(); for (LifecycleAction var6 : var5.postConstructActions) { try { var6.call(var4); } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) { throw new ProvisionException(""Failed to var1 object of type "" + var2, e); } } if (var4 instanceof LifecycleListener) { manager.addListener((LifecycleListener)var4); } } finally { metrics.pop(); } if (!var5.preDestroyActions.isEmpty()) { if (isShutdown.get() == false) { shutdownActions.add(new Runnable() { @Override public void Func2() { for (LifecycleAction var7 : var5.preDestroyActions) { try { var7.call(var4); } catch (Exception e) { LOG.error(""Failed to call @PreDestroy method {} on {}"", new Object[]{var7, var4.getClass().getName()}, e); } } } }); } else { LOG.warn(""Already shutting down.  Shutdown methods {} on {} will not be invoked"", new Object[]{var5.preDestroyActions, var4.getClass().getName()}); } } } "	0	0	0	0	0	1
private SootClass Func1() { if(this.currentClass == null) { if(Scene.v().getMainClass().getName().equals(this.sourceClass)) { this.currentClass = Scene.v().getMainClass(); } else { Scene.v().getSootClass(this.sourceClass); } } return this.currentClass; } 	1	0	0	1	0	0
"private void Func1(final ChannelHandlerContext var1, final Object var2) throws Exception { final String var3 = (String) var2; if (var2 == null) { throw new IllegalArgumentException(""Message cannot be null""); } if (logger.isLoggable(Level.FINE)) { logger.fine(""Handling plain text var2: "" + var3); } if (var3.length() > 7 && var3.substring(0, 7).equals(""version"")) { ChannelFuture var4 = var1.writeAndFlush(""Wavefront OpenTSDB Endpoint\n""); if (!var4.isSuccess()) { throw new Exception(""Failed to write version response"", var4.cause()); } } else { ChannelStringHandler.processPointLine(var3, decoder, pointHandler, preprocessor, var1); } } "	0	0	1	1	0	0
"@Override public String Func1(String var1) { if (var1 == null) { throw new NullPointerException(getExceptionMessageString(NULL_PARAMETERS_ERROR_MESSAGE_ID, ""var1"")); } HttpServletRequest var2 = (HttpServletRequest) getRequest(); int var3 = ContextParamUtils.getValue(servletContext, ContextParam.WebsocketEndpointPort, int.class); try { URL var4 = new URL(var2.getRequestURL().toString()); if (var3 <= 0 && var3 != 80) { var3 = var4.getPort(); } String var5 = new URL(var2.getScheme(), var4.getHost(), var3, var1).toExternalForm(); return encodeResourceURL(var5.replaceFirst(""http"", ""ws"")); } catch (MalformedURLException e) { return var1; } } "	0	1	1	1	0	0
"@Override public void Func1() throws MojoExecutionException, MojoFailureException { if (!Type.JANGAROO_PKG_PACKAGING.equals(project.getPackaging()) && !Type.JANGAROO_SWC_PACKAGING.equals(project.getPackaging())) { throw new MojoExecutionException(""This goal only supports projects with packaging type \""jangaroo-pkg\"" or \""jangaroo-swc\""""); } getLog().info(""Execute sencha packaging mojo""); FileHelper.ensureDirectory(new File(getSenchaPackageDirectory().getPath())); SenchaPackageConfigBuilder var1 = createSenchaConfigBuilder(); configure(var1); prepareModule(var1); } "	0	0	0	0	0	1
"@Test @Verifies(value = ""shouldNotFailIfConceptComplexOrHandlerIsNotFound"", method = ""handle(ConceptName,User,Date,String)"") public void Func1() throws Exception { executeDataSet(COMPLEX_OBS_XML); BufferedImage var1 = createImage(); Obs var2 = new Obs(); var2.setConcept(null); Obs var3 = new Obs(); var3.setConcept(Context.getConceptService().getConcept(8473)); var3.setComplexData(new ComplexData(""complex_obs_image_test.gif"", var1)); Encounter var4 = new Encounter(); var4.addObs(var2); var4.addObs(var3); File var5 = null; EncounterSaveHandler var6 = new EncounterSaveHandler(); try { var6.handle(var4, null, null, null); File var7 = OpenmrsUtil.getDirectoryInApplicationDataDirectory(Context.getAdministrationService() .getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_COMPLEX_OBS_DIR)); var5 = new File(var7, var3.getValueComplex().split(""\\|"")[1]); Assert.assertTrue(var5.exists()); } catch (Exception ex) { Assert.fail(); } finally { if (var5 != null && var5.exists()) var5.delete(); } } "	0	1	0	0	0	0
"@Override protected void Func1(double var1) { if (drivingStraight) { if (minimumOutputEnabled) { if (var1 > 0 && var1 < minimumOutput) { var1 = minimumOutput; } else if (var1 < 0 && var1 > -minimumOutput) { var1 = -minimumOutput; } } if (Math.abs(this.getPIDController().getError()) < deadband) { var1 = 0; } SmartDashboard.putNumber(""PID var1"", var1); driveSubsystem.setDefaultThrottle(vel + var1, vel - var1); } else { driveSubsystem.setDefaultThrottle(vel - rot, vel + rot); } } "	1	0	1	1	0	0
"@Transient public JSONArray Func1() { JSONArray var1 = new JSONArray(); int var2 = 0; SortedSet<HistoryEntry> var3 = this.getHistory(); Calendar var4 = Calendar.getInstance(); var4.setTime(endDate); Calendar var5 = Calendar.getInstance(); var5.setTime(startDate); SimpleDateFormat var6 = new SimpleDateFormat(""dd.MM""); for(Date var7 = var5.getTime(); (var5.getTimeInMillis()/1000/60/60/24) <= (var4.getTimeInMillis()/1000/60/60/24) && (var5.getTimeInMillis()/1000/60/60/24) <=  (Calendar.getInstance().getTimeInMillis()/1000/60/60/24); var5.add(Calendar.DATE, 1), var7 = var5.getTime()) { int var8 = 0; int var9 = 0; for(HistoryEntry var10:var3) { if(var6.format(var10.getDate()).equals(var6.format(var7)) && var10.getChangeEvent() == ChangeEvent.USER_STORY_ASSIGNED) { var8++; } else if (var6.format(var10.getDate()).equals(var6.format(var7)) && var10.getChangeEvent() == ChangeEvent.USER_STORY_REMOVED) { var9++; } } var2 += var8 - var9; var1.put(var2); } return var1; } "	1	0	0	1	0	0
"public void Func1() throws Exception { this.persistFile.clear(); if (persistDir != null) { this.persistFile.append(persistDir).append(File.separator).append(this.name).append(""_"") .append(PERSIST_FILE_NAME); } else { persistFile .append(System.getProperty(GmlcManagement.USSD_PERSIST_DIR_KEY, System.getProperty(GmlcManagement.USER_DIR_KEY))).append(File.separator).append(this.name) .append(""_"").append(PERSIST_FILE_NAME); } logger.info(String.format(""Loading GMLC Properties from %s"", persistFile.toString())); try { this.load(); } catch (FileNotFoundException e) { logger.warn(String.format(""Failed to load the GMLC configuration file. \n%s"", e.getMessage())); } } "	0	0	0	0	0	1
"@Override public void Func1(String var1, String var2, TaskMessage var3, Map<String, Object> var4) { Objects.requireNonNull(var1); Objects.requireNonNull(var3); LOG.debug(""Task {} (message id: {}) being forwarded to var2 {}"", var3.getTaskId(), var1, var2); checkForTrackingTermination(var1, var2, var3); try { if(var2 == null){ workerQueue.acknowledgeTask(var1); } else { byte[] var5 = codec.serialise(var3); workerQueue.publish(var1, var5, var2, var4, var3.getPriority()); stats.incrementTasksForwarded(); } } catch (CodecException | QueueException e) { LOG.error(""Cannot publish data for forwarded task {}, rejecting"", var3.getTaskId(), e); abandon(var1, e); } } "	0	1	0	0	0	0
private void Func1() { buyLandPlotBtn.addListener(new ClickListener() { @Override public void Func2(InputEvent var1, float var2, float var3) { var1.stop(); hideBuyLand(); if (buyLandPlotBtn.isDisabled()) { return ; } LandPlot var4 = screen.getSelectedPlot(); if (var4.hasOwner()) { return; } Player var5 = game.getPlayer(); if (var5.purchaseLandPlot(var4)) { TiledMapTileLayer.Cell var6 = var4.getPlayerTile(); var6.setTile(screen.getPlayerTile(var5)); textUpdate(); } } }); nextButton.addListener(new ClickListener() { @Override public void Func2(InputEvent var1, float var2, float var3) { var1.stop(); if (nextButton.isDisabled()) { return ; } if(game.canPurchaseLandThisTurn() == false || game.getPhase() == 1){ buyLandPlotBtn.setVisible(false); plotStats.setVisible(false); hideInstallRoboticon(); game.nextPhase(); dropDownActive = true; installRoboticonSelect.setItems(game.getPlayer().getRoboticonAmountList()); textUpdate(); } } }); installRoboticonBtn.addListener(new ClickListener() { @Override public void Func2(InputEvent var1, float var2, float var3) { var1.stop(); if (installRoboticonBtn.isDisabled()) { return ; } if (!listUpdated) { //prevents updating var9 list from updating change listener LandPlot var4 = screen.getSelectedPlot(); if (var4.getOwner() == game.getPlayer() && !var4.hasRoboticon()) { Roboticon var7 = null; ResourceType var8 = ResourceType.Unknown; int var9 = installRoboticonSelect.getSelectedIndex(); Array<Roboticon> var10 = game.getPlayer().getRoboticons(); switch (var9) { case 0: var8 = ResourceType.ORE; break; case 1: var8 = ResourceType.ENERGY; break; default: var8 = ResourceType.Unknown; break; } for (Roboticon var11 : var10) { if (!var11.isInstalled() && var11.getCustomisation() == var8) { var7 = var11; break; } } if (var7 != null) { var4.installRoboticon(var7); TiledMapTileLayer.Cell var12 = var4.getRoboticonTile(); var12.setTile(TileConverter.getRoboticonTile(var7.getCustomisation())); var4.setHasRoboticon(true); textUpdate(); } hideInstallRoboticon(); updateRoboticonList(); dropDownActive = true; } else listUpdated = false; } } }); installRoboticonBtnCancel.addListener(new ClickListener() { @Override public void Func2(InputEvent var1, float var2, float var3) { var1.stop(); dropDownActive = false; hideInstallRoboticon(); } }); } 	1	0	1	0	0	0
"public int Func1() { if (this.dirtyWeight) { this.weight = this.getOptionInteger(""weight"", null, 0); this.dirtyWeight = false; } return this.weight; } "	0	1	0	0	0	0
"private boolean Func1(int var1, File var2, String var3) throws FileNotFoundException { int var4 = 0; boolean var5 = false; Scanner var6 = new Scanner(var2); List<String> var7 = new ArrayList<String>(); while (var6.hasNextLine()) { String var8 = var6.nextLine(); if (!var8.startsWith("" "") && isTest) System.var16.println(""curtest "" + var8); if (var8.indexOf(""LOCUS"") == 0) { String var9 = var8.substring(var1, var8.indexOf("" "", var1 + 1)); var7.add(var9); if (var7.size() > 1) { break; } } } var6.close(); System.var16.println(""var7 "" + var7.size()); if (var7.size() > 1) { if (var3 == null) var3 = workdir.getAbsolutePath() + ""/split_"" + var2.getName(); System.var16.println(""var5 var3 "" + var3); File var10 = new File(var3); if (!var10.isDirectory()) { var10.mkdir(); } Scanner var11 = new Scanner(var2); List<String> var12 = new ArrayList<String>(); StringBuilder var13 = new StringBuilder(""""); while (var11.hasNextLine() && var4 < MAX_ALLOWED_FILES_SPLIT) { String var8 = var11.nextLine(); if (var8.indexOf(""LOCUS"") == 0) { String var9 = var8.substring(var1, var8.indexOf("" "", var1 + 1)); if (isTest) System.var16.println(""var12 add "" + var9); var12.add(var9); var13.append(var8).append(""\n""); } else if (var8.indexOf(""//"") == 0) { var13.append(var8).append(""\n""); if (isTest) System.var16.println(""loci2 "" + var12.size()); final int var14 = var12.size() - 1; if (isTest) System.var16.println(""loci2 "" + var12.size() + ""\t"" + var14); String var15 = var3 + ""/"" + var12.get(var14) + "".gbk""; try { PrintWriter var16 = new PrintWriter(new FileWriter(var15)); var16.print(var13); var16.close(); var5 = true; System.var16.println(""    wrote: "" + var3); var4++; } catch (IOException e) { System.var16.println(""Error creating or writing file "" + var3); System.var16.println(""IOException: "" + e.getMessage()); } var13 = new StringBuilder(""""); } else { var13.append(var8).append(""\n""); } } if (var4 == MAX_ALLOWED_FILES_SPLIT && var11.hasNextLine()) { final String var17 = (workdir != null ? workdir + ""/"" : """") + ""README.txt""; System.var16.println(""writing "" + var17); try { File var18 = new File(var17); PrintWriter var19 = new PrintWriter(var18); String var20 = ""The limit for uploading multiple contigs from a single GenBank file is "" + MAX_ALLOWED_FILES_SPLIT + "" contigs. "" + ""This download had more than "" + MAX_ALLOWED_FILES_SPLIT + "" contigs, only the first "" + MAX_ALLOWED_FILES_SPLIT + "" contigs will be uploaded.""; var19.print(var20); var19.close(); } catch (FileNotFoundException e) { System.var16.println(""failed to write output "" + var3); e.printStackTrace(); } } var6.close(); } return var5; } "	0	0	0	0	0	1
public static SALARY Func1() { return new SALARY(); } 	0	0	0	0	0	1
"@Test public void Func1() { login(""bob"", ""bobspassword"", ""ROLE_ADMIN"", ""ROLE_PRESIDENT""); this.publishSubscribeChannel.send(new GenericMessage<String>(""test"")); Message<?> var1 = this.securedChannelQueue.var1(10000); assertNotNull(var1); IntegrationMessageHeaderAccessor var2 = new IntegrationMessageHeaderAccessor(var1); assertEquals(new Integer(0), var2.getSequenceNumber()); var1 = this.securedChannelQueue2.var1(10000); assertNotNull(var1); var2 = new IntegrationMessageHeaderAccessor(var1); assertEquals(new Integer(0), var2.getSequenceNumber()); this.publishSubscribeChannel.setApplySequence(true); this.publishSubscribeChannel.send(new GenericMessage<String>(""test"")); var1 = this.securedChannelQueue.var1(10000); assertNotNull(var1); var2 = new IntegrationMessageHeaderAccessor(var1); assertEquals(new Integer(1), var2.getSequenceNumber()); var1 = this.securedChannelQueue2.var1(10000); assertNotNull(var1); var2 = new IntegrationMessageHeaderAccessor(var1); assertEquals(new Integer(2), var2.getSequenceNumber()); this.publishSubscribeChannel.setApplySequence(false); SecurityContextHolder.clearContext(); this.publishSubscribeChannel.send(new GenericMessage<String>(""test"")); Message<?> var3 = this.errorChannel.var1(1000); assertNotNull(var3); Object var4 = var3.getPayload(); assertThat(var4, instanceOf(MessageHandlingException.class)); assertThat(((MessageHandlingException) var4).getCause(), instanceOf(AuthenticationCredentialsNotFoundException.class)); } "	1	0	1	0	0	0
@Override public void Func1() { Util.removeGlobalLayoutObserver(mSuggestionsList, this); boolean var1 = updateSuggestionsSectionHeight(newSearchSuggestions, withAnim); LinearLayoutManager var2 = (LinearLayoutManager) mSuggestionsList.getLayoutManager(); if (var1) { var2.setReverseLayout(false); } else { Collections.reverse(newSearchSuggestions); var2.setReverseLayout(true); } mSuggestionsList.setAlpha(1); } 	0	0	0	0	0	1
@Override public void Func1( final T var1 ) { final short var2 = getShort(); setShort( ( byte ) ( var2 - var1.getShort() ) ); } 	1	1	0	1	0	0
private void Func1(final MigrationInfo var1) { final InternalPartitionServiceImpl var2 = (InternalPartitionServiceImpl) getPartitionService(instances[0]); var2.getMigrationManager().scheduleMigration(var1, REPARTITIONING); waitAllForSafeState(instances); } 	1	1	0	1	0	0
static public boolean Func1() { Context var1 = App.getAppContext(); Resources var2 = var1.getResources(); return var2.getBoolean(R.bool.emulate_shutdowns); } 	0	1	0	0	0	0
"@Test public void Func1() { String var1 = ""test""; List<QuestionEntity> var2 = asList( createQuestionEntity(""123"", ""a test question""), createQuestionEntity(""456"", ""another test question"")); when(questionRepository.findByContentContains(var1)).thenReturn(var2); List<Question> var3 = questionService.searchQuestions(var1); assertThat(var3.size(), is(2)); assertThat(var3.get(0).getContent(), containsString(var1)); assertThat(var3.get(1).getContent(), containsString(var1)); } "	0	1	0	0	0	0
"@Override public void Func1(CharSequence var1, int var2, int var3, int var4) { if(var4 > 0 && newTags.getChildAt(newTags.getChildCount()-1) == tagItem) { addTag(""""); //$NON-NLS-1$ } } "	0	0	0	0	0	1
@Override protected void Func1(int var1, int var2){ scrollBar.setVisiblie(!canFit()); scrollBar.setHandleMouseWheel(!canFit()); scrollBar.setScrollerSize(getScrollerSize()); int var3 = Geometry.computeScaleFactor(); for(int var4 = 0; var4 < content.size(); var4++){ ListEntry var5 = content.get(var4); int var6 = getX(); int var7 = ((getY() + var4 * var9) - (int)((this.var9 * scrollBar.getProgress() * this.content.size()) * 0.925F)); int var8 = this.width; int var9 = this.var9; if(var7 < getY() + this.height && var7 + var9 > getY()){ GL11.glPushMatrix(); GL11.glEnable(GL11.GL_SCISSOR_TEST); Minecraft var10 = Minecraft.getMinecraft(); GL11.glScissor(getX() * var3, var10.displayHeight - (getY() + getHeight()) * var3, getWidth() * var3, getHeight() * var3); var5.onDraw(this, var6, var7, var8, var9, var1, var2); GL11.glDisable(GL11.GL_SCISSOR_TEST); GL11.glPopMatrix(); } } } 	1	1	0	0	0	0
public String Func1() { return dateTime; } 	0	0	0	0	0	1
"public String Func1(ApacheCloudStackRequest var1) { boolean var2 = StringUtils.isNotBlank(this.apacheCloudStackUser.getApiKey()); String var3 = createApacheCloudStackApiUrlRequest(var1, var2); logger.debug(""Executing var1[%s]."", var3); CloseableHttpClient var4 = createHttpClient(); HttpContext var5 = createHttpContextWithAuthenticatedSessionUsingUserCredentialsIfNeeded(var4, var2); try { return executeRequestGetResponseAsString(var3, var4, var5); } finally { if (!var2) { executeUserLogout(var4, var5); } HttpClientUtils.closeQuietly(var4); } } "	0	1	0	0	0	0
"@Override public void Func1(final BluetoothDevice var1, final BluetoothGatt var2) { Log.d(TAG, ""Test Completed. Failed: "" + mLatestTest.isFailed()); if (mLatestTest.isFailed()) { mFailed = true; } mDataCallback.dataUpdated(); if (!mPause) { mHandler.postDelayed(new Runnable() { @Override public void Func2() { start(var1, var2); } }, TimeUnit.SECONDS.toMillis(1)); } } "	0	0	0	0	0	1
"@Nonnull @ReturnsMutableCopy protected List <File> Func1 () throws OpenAS2Exception { final File var1 = IOHelper.getDirectoryFile (getAttributeAsStringRequired (ATTR_RESEND_DIRECTORY)); final File [] var2 = var1.listFiles (); if (var2 == null) { throw new InvalidParameterException (""Error getting list of files in directory"", this, ATTR_RESEND_DIRECTORY, var1.getAbsolutePath ()); } final List <File> var3 = new ArrayList <File> (); if (var2.length > 0) for (final File var4 : var2) if (var4.exists () && var4.isFile () && var4.canWrite () && isTimeToSend (var4)) var3.add (var4); return var3; } "	0	0	0	0	0	1
"@Override public boolean Func1(MenuItem var1) { int var2 = var1.getItemId(); FragmentTransaction var3 = getSupportFragmentManager().beginTransaction(); switch (var2) { case R.var2.nav_triage: TriageFragment var4 = new TriageFragment(); var3.replace(R.var2.fragment_container, var4).commit(); break; case R.var2.nav_consultation: ConsultationFragment var5 = new ConsultationFragment(); var3.replace(R.var2.fragment_container, var5).commit(); break; case R.var2.nav_pharmacy: PharmacyFragment var6 = new PharmacyFragment(); var3.replace(R.var2.fragment_container, var6).commit(); break; case R.var2.nav_inventory: InventoryFragment var7 = new InventoryFragment(); var3.replace(R.var2.fragment_container, var7).commit(); break; case R.var2.nav_reports: ReportsFragment var8 = new ReportsFragment(); var3.replace(R.var2.fragment_container, var8).commit(); break; case R.var2.nav_admin: AdminFragment var9 = new AdminFragment(); var3.replace(R.var2.fragment_container, var9).commit(); break; case R.var2.nav_about: new LibsBuilder() .withActivityTitle(""About"") .withFields(R.string.class.getFields()) .withAboutIconShown(true) .withAboutVersionShown(true) .withVersionShown(true) .withActivityStyle(Libs.ActivityStyle.LIGHT_DARK_TOOLBAR) .start(DrawerActivity.this); break; case R.var2.nav_logout: new MaterialDialog.Builder(this) .theme(Theme.LIGHT) .autoDismiss(true) .content(""Are you sure you want to logout?"") .positiveText(""Logout"") .negativeColor(getResources().getColor(R.color.colorAccent)) .onPositive(this) .negativeText(""Dismiss"") .onNegative(new MaterialDialog.SingleButtonCallback() { @Override public void Func2(@NonNull MaterialDialog var10, @NonNull DialogAction var11) { var10.dismiss(); } }) .show(); break; } DrawerLayout var12 = (DrawerLayout) findViewById(R.var2.drawer_layout); if (var12 != null) { var12.closeDrawer(GravityCompat.START); } return true; } "	0	0	0	0	0	1
@Override protected Fragment Func1() { Bundle var1 = new Bundle(); var1.putString(ListFragment.EXTRA_FILTER, ItemManager.TOP_FETCH_MODE); if (TextUtils.isEmpty(mQuery)) { var1.putString(ListFragment.EXTRA_ITEM_MANAGER, HackerNewsClient.class.getName()); } else { var1.putString(ListFragment.EXTRA_ITEM_MANAGER, AlgoliaClient.class.getName()); } return Fragment.instantiate(this, ListFragment.class.getName(), var1); } 	1	1	1	0	1	0
protected void Func1(long var1, boolean var2) { if (evictionEnabled) { readCountBeforeCleanUp++; if ((readCountBeforeCleanUp & POST_READ_CHECK_POINT) == 0) { cleanUp(var1, var2); } } } 	0	0	0	0	0	1
public String Func1(String var1, boolean var2) { VCFAnnotationData var3 = new VCFAnnotationData(); var3.effects = effects; var3.impact = getPutativeImpact(); var3.setTranscriptAndChange(transcript, change); var3.setAnnoLoc(annoLoc); var3.isCoding = transcript.isCoding(); var3.cdsNTChange = cdsNTChange; var3.proteinChange = proteinChange; var3.messages = messages; if (var2) return var3.toString(var1); else return var3.toUnescapedString(var1); } 	0	1	0	0	0	0
@Override protected void Func1() { super.Func1(); int var1 = mSharedPreferences.getInt(Const.ID, -1); if (var1 != -1) { mUser = mMySqliteHelper.getUser(var1); mListResult = mMySqliteHelper.getListResultByUser(mUser.getId()); } else { finish(); } mLearnedLessonsList.clear(); mLearnedLessonsListResume.clear(); for (Result var2: mListResult) { mLearnedLessonsListResume.addAll(mMySqliteHelper.getListLesson(var2.getIdLesson())); } mLearnedLessonsList.addAll(mLearnedLessonsListResume); if (mLessonLearnedAdapter != null) { mLessonLearnedAdapter.notifyDataSetChanged(); } } 	0	1	0	0	0	0
"@FXML void Func1() { tabbedPane.getTabs().addAll( addHTMLTab(resources.getString(""Menu.About.Name""), ""notice.html""), addHTMLTab(resources.getString(""Tab.Credits""), ""credits.html""), addHTMLTab(resources.getString(""Tab.AppLicense""), ""jgnash-license.html""), addHTMLTab(resources.getString(""Tab.GPLLicense""), ""gpl-license.html""), addHTMLTab(resources.getString(""Tab.LGPLLicense""), ""lgpl.html""), addHTMLTab(""Apache License"", ""apache-license.html""), addHTMLTab(""XStream License"", ""xstream-license.html""), getSystemPropertiesTab()); } "	0	0	0	0	0	1
public boolean Func1(int var1, int var2) { this.checkBounds(var1, var2); try { int var3 = this.getOffset(var1, var2); if (var3 == 0) { return false; } int var4 = var3 >> 8; int var5 = var3 & 0xff; if (var4 + var5 > this.sectorFree.size()) { this.logWarning(); return false; } this.file.seek(var4 * SECTOR_BYTES); int var6 = this.file.readInt(); if (var6 > SECTOR_BYTES * var5) { this.logWarning(); return false; } byte var7 = this.file.readByte(); if (var7 == VERSION_GZIP || var7 == VERSION_DEFLATE) { return true; } } catch (IOException ignored) { } this.logWarning(); return false; } 	0	0	0	0	0	1
private VirtualRegister Func1(int var1) { for (Entry<VirtualRegister, LinkedHashSet<VirtualRegister>> var2 : graph.entrySet()) { if (var2.getValue().size() < var1) { return var2.getKey(); } } return null; } 	0	1	0	0	0	0
"private String Func1(String var1, String var2) { if (FilenameUtils.getExtension(var2).isEmpty()) { try { MimeType var3 = tikaConfig.getMimeRepository().forName(var1); if (var3 != null) { String var4 = var3.getExtension(); var2 = var2.concat(var4); } } catch (MimeTypeException e) { log.error(this + "" Couldn't find file var4 for resource: "" + var2 + "" of MIME var1 = "" + var1 , e); } } if (FilenameUtils.getExtension(var2).isEmpty() && (Utils.CTOOLS_RESOURCE_TYPE_CITATION.equals(var1) || Utils.CTOOLS_RESOURCE_TYPE_URL.equals(var1))) { var2 = var2 + Utils.HTML_FILE_EXTENSION; } return var2; } "	1	0	0	1	0	0
"public boolean Func1() { return counterName.contains(""inflight.""); } "	0	0	0	1	0	0
@Override public void Func1(final ChannelHandlerContext var1, Object var2, ChannelPromise var3) throws Exception { pendingUnencryptedWrites.add(PendingWrite.newInstance((ByteBuf) var2, var3)); } 	1	0	1	0	0	0
@Override public View Func1() { ActionBar var1 = getSupportActionBar(); Button var2 = (Button) var1.getCustomView().findViewById(R.id.button_remove); return var2; } 	0	1	0	0	0	0
"@ApiOperation(produces = ""application/json,text/html"", nickname = ""Func1"", value = ""Func1"", notes = ""An enpoint to fake gnd data for authors. In fact the data from input path is passed back to the user surrounded by some rdf."", response = play.mvc.Result.class, httpMethod = ""GET"") public static Promise<Result> Func1(@PathParam(""var1"") String var1) { response().setHeader(""Access-Control-Allow-Origin"", ""*""); Graph var2 = new TreeModel(); ValueFactory var3 = RdfUtils.valueFactory; URI var4 = var3.createURI(Globals.protocol + Globals.server + ""/authors/"" + var1); URI var5 = var3.createURI(""http://www.w3.org/2004/02/skos/core#prefLabel""); Literal var6 = var3.createLiteral(RdfUtils.urlDecode(var1)); var2.add(var3.createStatement(var4, var5, var6)); var2.add(var3.createStatement(var4, var3.createURI(""http://d-nb.info/standards/elementset/gnd#preferredNameForThePerson""), var6)); var2.add(var3.createStatement(var4, var3.createURI(""http://www.w3.org/1999/02/22-rdf-syntax-ns#type""), var3.createURI(""http://d-nb.info/standards/elementset/gnd#UndifferentiatedPerson""))); return Promise.promise(() -> { String var7 = """"; if (request().accepts(""application/rdf+xml"")) { response().setHeader(""Content-Type"", ""application/rdf+xml; charset=utf-8""); var7 = RdfUtils.graphToString(var2, RDFFormat.RDFXML); } else if (request().accepts(""text/plain"")) { response().setContentType(""text/plain""); var7 = RdfUtils.graphToString(var2, RDFFormat.NTRIPLES); } else { response().setContentType(""application/json""); var7 = RdfUtils.graphToString(var2, RDFFormat.JSONLD); } return ok(var7); }); } "	0	1	0	0	0	0
@Override public Void Func1() { try { ByteBuffer var1; while ((var1 = encryptor.var1()) != FileContentCryptor.EOF) { file.write(var1); } } catch (InterruptedException e) { Thread.currentThread().interrupt(); } return null; } 	0	0	0	0	0	1
"@RequestMapping(value = ""/visitsRecords"", method = RequestMethod.POST) @PreAuthorize(Constants.Roles.HAS_DATA_ACCESS) @ResponseBody public Records<?> Func1(GridSettings var1) throws IOException { Order var2 = null; if (!var1.getSortColumn().isEmpty()) { var2 = new Order(var1.getSortColumn(), var1.getSortDirection()); } QueryParams var3 = new QueryParams(var1.getPage(), var1.getRows(), var2); Subject var4; List<Subject> var5; int var6 = (var1.getPage() - 1) * var1.getRows(); int var7 = var1.getPage() * var1.getRows(); long var8; int var9; DateTimeFormatter var10 = DateTimeFormat.forPattern(""yyyy-MM-dd HH:mm Z""); if (var1.getLookup() != null) { Map<String, Object> var11 = getFields(var1); switch (var1.getLookup()) { case ""Find Visit By Date"": DateTime var12 = DateTime.parse((String) var11.get(""Date""), var10); List<Visit> var13 = visitDataService.findVisitByDate(var12, var3); var8 = visitDataService.countFindVisitByDate(var12); var9 = (int) Math.ceil(var8 / (double) var1.getRows()); return new Records<>(var1.getPage(), var9, (int) var8, var13); case ""Find Visit By Type"": VisitType var14 = VisitType.valueOf((String) var11.get(""Type"")); var13 = visitDataService.findVisitByType(var14, var3); var8 = visitDataService.countFindVisitByType(var14); var9 = (int) Math.ceil(var8 / (double) var1.getRows()); return new Records<>(var1.getPage(), var9, (int) var8, var13); case ""Find Visit By SubjectId"": String var15 = (String) var11.get(""SubjectId""); var4 = subjectDataService.findSubjectBySubjectId(var15); var13 = var4.Func1(); var8 = var13.size(); var9 = (int) Math.ceil(var8 / (double) var1.getRows()); if (var8 < var7) { var7 = (int) var8; } var13 = var13.subList(var6, var7); return new Records<>(var1.getPage(), var9, (int) var8, var13); case ""Find Visit By Subject Name"": String var16 = (String) var11.get(""Name""); var5 = subjectDataService.findSubjectByName(var16); var13 = new ArrayList<>(); for (Subject var17 : var5) { var13.addAll(var17.Func1()); } var8 = var13.size(); var9 = (int) Math.ceil(var8 / (double) var1.getRows()); if (var8 < var7) { var7 = (int) var8; } var13 = var13.subList(var6, var7); return new Records<>(var1.getPage(), var9, (int) var8, var13); case ""Find Visit By Subject Address"": String var18 = (String) var11.get(""Address""); var5 = subjectDataService.findSubjectByAddress(var18); var13 = new ArrayList<>(); for (Subject var17 : var5) { var13.addAll(var17.Func1()); } var8 = var13.size(); var9 = (int) Math.ceil(var8 / (double) var1.getRows()); if (var8 < var7) { var7 = (int) var8; } var13 = var13.subList(var6, var7); return new Records<>(var1.getPage(), var9, (int) var8, var13); } } var8 = visitDataService.count(); var9 = (int) Math.ceil(var8 / (double) var1.getRows()); List<Visit> var13 = visitDataService.retrieveAll(var3); return new Records<>(var1.getPage(), var9, (int) var8, var13); } "	0	0	0	0	0	1
"@Override public void Func1(int var1, String var2) { super.Func1(var1, var2); Discord4J.LOGGER.info(LogMarkers.WEBSOCKET, ""Shard {} websocket disconnected with status code {} and var2 \""{}\""."", shard.getInfo()[0], var1, var2); isReady = false; hasReceivedReady = false; heartbeatHandler.shutdown(); if (!(this.state == State.DISCONNECTING || var1 == 4003 || var1 == 4004 || var1 == 4005 || var1 == 4010) && !(var1 == 1001 && var2.equals(""Shutdown""))) { this.state = State.RESUMING; client.getDispatcher().dispatch(new DisconnectedEvent(DisconnectedEvent.Reason.ABNORMAL_CLOSE, shard)); client.reconnectManager.scheduleReconnect(this); } } "	0	0	0	0	0	1
"private CharSequence Func1(final int var1, final String var2, final String var3) { if (0 == var1) { return """"; } return String.format( var3 + ""        if (actingVersion_ < %1$d)\n"" + var3 + ""        {\n"" + var3 + ""            return %2$s::NULL_VALUE;\n"" + var3 + ""        }\n\n"", Integer.valueOf(var1), var2 ); } "	0	0	0	0	0	1
"private void Func1(final StringBuilder var1, final Token var2, final String var3) { var1.append(String.format( ""\n"" + var3 + ""    public const int %sId = %d;\n"", CSharpUtil.formatPropertyName(var2.name()), Integer.valueOf(var2.id()) )); } "	0	1	1	0	0	0
public int Func1() { return temperature; } 	0	0	0	0	0	1
public String Func1() { return user.getLogin(); } 	1	0	1	0	0	0
public static void Func1(String[] var1) { if (var1.length == 0) { printHelp(); } run(var1); } 	1	0	1	0	0	0
@Override public BEJobID Func1() { return new BEJobID(jobID, this); } 	1	0	1	0	0	0
"@Override public UITableViewCell Func1(UITableView var1, NSIndexPath var2) { final String var3 = ""personCell""; GTLPlusPerson var4 = myPeeps.get(var2.getRow()); UITableViewCell var5 = var1.dequeueReusableCell(var3); if (var5 == null) { var5 = new UITableViewCell(UITableViewCellStyle.Default, var3); } if (var4.getImage() != null) { var5.getImageView().setImage(UIImage.create(NSData.read(new NSURL(var4.getImage().getUrl())))); } Log.d(""Person image is %s"", var4.getImage().getUrl()); var5.getTextLabel().setText(var4.getDisplayName()); return var5; } "	1	1	0	0	0	0
@Override public boolean Func1(NodeSelection var1) { return var1.hasAllNodesOfType(ProjectNode.class); } 	0	0	0	1	0	0
public static String Func1(BibEntry var1, BibDatabaseMode var2) throws IOException { StringWriter var3 = new StringWriter(200); LatexFieldFormatter var4 = LatexFieldFormatter .buildIgnoreHashes(Globals.prefs.getLatexFieldFormatterPreferences()); new BibEntryWriter(var4, false).writeWithoutPrependedNewlines(var1, var3, var2); return var3.getBuffer().toString(); } 	0	0	0	0	0	1
void Func1() { for (SearchQueryHighlightListener var1 : searchListeners) { panel.frame().getGlobalSearchBar().getSearchQueryHighlightObservable().removeSearchListener(var1); } } 	0	0	0	0	0	1
"public void Func1(Order var1) throws MissingPermissionException, InvalidOrderFacilityException { if (orderService.isFacilityValid(var1, var1.getCreatedById(), var1.getSupplyingFacilityId())) { hasPermission(REQUISITION_CONVERT_TO_ORDER, var1.getProgramId(), var1.getSupplyingFacilityId()); } else { throw new InvalidOrderFacilityException(""Can not create var1 "" + var1.getId() + "". Must "" + ""have supplying facility""); } } "	0	0	0	0	0	1
"@Test public void Func1() throws IOException{ GaugeRequest var1 = new GaugeRequest() .withMetric(""test.metric"") .withSampleRate(5L) .withTags(getTags()) .withValue(6L); client.gauge(var1); verify(socket, atLeastOnce()).send(argCaptor.capture()); assertEquals(new String(argCaptor.getValue().getData()), GAUGE_FORMAT); } "	0	0	0	0	0	1
"@Test public void Func1() throws IOException{ IncrementRequest var1 = new IncrementRequest() .withMetric(""test.metric"") .withSampleRate(5L) .withTags(getTags()) .withValue(6L); client.increment(var1); verify(socket, atLeastOnce()).send(argCaptor.capture()); assertEquals(new String(argCaptor.getValue().getData()), INCREMENT_FORMAT); } "	0	0	0	0	0	1
"protected String Func1(ServiceCheckRequest var1){ if(var1.getCheckName() == null || var1.getCheckName().isEmpty() || var1.getStatus() == null){ throw new ServiceCheckException(""checkName and status are required fields""); } StringBuilder var2 = new StringBuilder(); Formatter var3 = new Formatter(var2); var3.format(""_sc|%s|%d"", var1.getCheckName(), var1.getStatus().ordinal()); if(var1.getTimestamp() != null){ var3.format(""|d:%d"", var1.getTimestamp().getTime()); } if(var1.getHostname()!=null && !var1.getHostname().isEmpty()){ var3.format(""|h:%s"", var1.getHostname()); } if(var1.getTags()!= null && !var1.getTags().isEmpty()){ var3.format(""|#%s"", formatTags(var1.getTags())); } if(var1.getMessage()!=null && !var1.getMessage().isEmpty()){ var3.format(""|m:%s"", var1.getMessage()); } return var2.toString(); } "	0	0	0	0	0	1
"protected String Func1(String var1, String var2, Long var3, List<Tag> var4, Long var5){ if(var1 == null || var1.isEmpty() || var3 == null){ throw new MetricException(""var1 and var3 are required fields""); } StringBuilder var6 = new StringBuilder(); Formatter var7 = new Formatter(var6); var7.format(""%s:%d|%s"", var1, var3, var2); if(var5 != null && var5 != 1L){ var7.format(""|@%d"", var5); } if(var4 != null && !var4.isEmpty()){ var7.format(""|#%s"", formatTags(var4)); } return var6.toString(); } "	0	0	0	0	0	1
"@Override public void Func1(TimingRequest var1){ send(formatMetric(var1.getMetric(), ""ms"", var1.getValue(),var1.getTags(), var1.getSampleRate())); } "	0	0	0	0	0	1
"@Test public void Func1() { CachedObject var1 = new CachedObject(); var1.setCounter(42); var1.setValue(""The meaning of life""); var1.setId(new ObjectId(new Date())); DBObject var2 = null; ObjectMapperImpl var3 = (ObjectMapperImpl) MorphiumSingleton.get().getMapper(); long var4 = System.currentTimeMillis(); for (int var5 = 0; var5 < 25000; var5++) { var2 = var3.var2(var1); } long var6 = System.currentTimeMillis() - var4; log.info(""Mapping of CachedObject 25000 times took "" + var6 + ""ms""); assert (var6 < 1000); var4 = System.currentTimeMillis(); for (int var5 = 0; var5 < 25000; var5++) { CachedObject var7 = var3.unmarshall(CachedObject.class, var2); } var6 = System.currentTimeMillis() - var4; log.info(""De-Marshalling of CachedObject 25000 times took "" + var6 + ""ms""); assert (var6 < 2000); } "	0	0	1	1	0	0
"public void Func1(ModelNode var1, ModelNode var2) { ModelNode var3 = credentialsFromOp(var1); if (!var3.isDefined()) { var3 = new ModelNode(); } String var4 = credentialNameFromOp(var1); if (!var4.contains("""")) { var3.get(var4).set(var2.get(""value"").asString()); } else { String[] var5 = var4.split(""\\.""); String var6 = var5[0]; String var7 = var5[1]; ModelNode var8 = var3.get(var6); if (!var8.isDefined()) { var8 = new ModelNode(); } var8.get(var7).set(var2.get(""value"").asString()); var3.set(var6, var8); } ModelNode var9 = this.secureDeployments.get(deploymentNameFromOp(var1)); var9.get(CREDENTIALS_JSON_NAME).set(var3); } "	1	1	1	1	0	0
@Override @ResponseFilter public void Func1(WebResponse var1) { } 	0	0	0	0	0	1
"private VersionNumber Func1(Iterable<String> var1) { for (String var2: var1) { Matcher var3 = Pattern.compile(""spotbugs-(\\d+.*)\\.jar"").matcher(var2); if (var3.matches()) { return VersionNumber.parse(var3.group(1)); } } throw new GradleException(""Unable to infer the version of FindBugs from currently specified FindBugs var1: "" + var1); } "	0	0	0	1	0	0
"public void Func1() { filterMappings.put(SearchFilter.SOURCE, new FilterDetails(StringUtils.SPACE, ""fa.source =:"" + DATASOURCE)); filterMappings.put(SearchFilter.OWNER, new FilterDetails("" fp.fluxPartyIdentifiers fpi"", ""fpi.fluxPartyIdentifierId =:"" + OWNER_ID + StringUtils.SPACE)); filterMappings.put(SearchFilter.FROM, new FilterDetails("" fpFrom.fluxPartyIdentifiers fpiFrom"", ""fpiFrom.fluxPartyIdentifierId =:"" + FROM_ID + StringUtils.SPACE)); filterMappings.put(SearchFilter.PERIOD_START, new FilterDetails("" "", ""   a.calculatedStartTime  >= :"" + OCCURENCE_START_DATE + "" "")); filterMappings.put(SearchFilter.PERIOD_END, new FilterDetails(DELIMITED_PERIOD_TABLE_ALIAS, "" (dp.endDate <= :"" + OCCURENCE_END_DATE+"" OR  a.calculatedStartTime <= :""+ OCCURENCE_END_DATE +"")"") ); filterMappings.put(SearchFilter.VESSEL_NAME, new FilterDetails(""fa.vesselTransportMeans vt"", ""vt.name IN (:"" + VESSEL_IDENTITY_NAME + "")"")); filterMappings.put(SearchFilter.VESSEL_IDENTIFIRE, new FilterDetails(""vt.vesselIdentifiers vi"", ""vi.vesselIdentifierId IN (:"" + VESSEL_IDENTIFIRE + "")"")); filterMappings.put(SearchFilter.VESSEL_GUIDS, new FilterDetails(""fa.vesselTransportMeans vtMeans"", ""vtMeans.guid IN (:"" + VTM_GUIDS + "")"")); filterMappings.put(SearchFilter.PURPOSE, new FilterDetails(FLUX_REPORT_DOC_TABLE_ALIAS, ""flux.purposeCode IN (:"" + PURPOSE_CODE + "")"")); filterMappings.put(SearchFilter.REPORT_TYPE, new FilterDetails(StringUtils.SPACE, ""fa.typeCode IN (:"" + REPORT_TYPE_CODE + "")"")); filterMappings.put(SearchFilter.ACTIVITY_TYPE, new FilterDetails(StringUtils.SPACE, ""a.typeCode IN (:"" + ACTIVITY_TYPE_CODE + "")"")); filterMappings.put(SearchFilter.AREAS, new FilterDetails(""a.fluxLocations fluxLoc"", ""( fluxLoc.typeCode IN ('AREA') and fluxLoc.fluxLocationIdentifier =:"" + AREA_ID + "" )"")); filterMappings.put(SearchFilter.PORT, new FilterDetails(""a.fluxLocations fluxLoc"", "" (fluxLoc.typeCode IN ('LOCATION') and fluxLoc.fluxLocationIdentifier =:"" + PORT_ID  + "" )"")); filterMappings.put(SearchFilter.GEAR, new FilterDetails(GEAR_TYPE_TABLE_ALIAS, ""fg.typeCode IN (:"" + FISHING_GEAR + "")"")); filterMappings.put(SearchFilter.SPECIES, new FilterDetails(FA_CATCH_TABLE_ALIAS + "" LEFT JOIN  "" + AAP_PROCESS_TABLE_ALIAS + "" LEFT JOIN  "" + AAP_PRODUCT_TABLE_ALIAS, ""( faCatch.speciesCode IN (:"" + SPECIES_CODE + "") "" + "" OR aprod.speciesCode IN (:"" + SPECIES_CODE + ""))"")); filterMappings.put(SearchFilter.QUANTITY_MIN, new FilterDetails(FA_CATCH_TABLE_ALIAS + "" LEFT JOIN FETCH "" + AAP_PROCESS_TABLE_ALIAS + "" LEFT JOIN FETCH "" + AAP_PRODUCT_TABLE_ALIAS, "" (faCatch.calculatedWeightMeasure  BETWEEN :"" + QUANTITY_MIN)); filterMappings.put(SearchFilter.QUANTITY_MAX, new FilterDetails("" "", ""  :"" + QUANTITY_MAX + "") "")); filterMappings.put(SearchFilter.MASTER, new FilterDetails("" fa.vesselTransportMeans vt JOIN FETCH vt.contactParty cparty JOIN FETCH cparty.contactPerson cPerson"", ""(UPPER(cPerson.title) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or "" + ""UPPER(cPerson.givenName) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or UPPER(cPerson.middleName) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or UPPER(cPerson.familyName) IN (:"" + CONTACT_PERSON_NAME + "") "" + StringUtils.SPACE + ""or UPPER(cPerson.familyNamePrefix) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or UPPER(cPerson.nameSuffix) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or UPPER(cPerson.alias) IN (:"" + CONTACT_PERSON_NAME + "") "" + "")"")); filterMappings.put(SearchFilter.FA_REPORT_ID, new FilterDetails(StringUtils.SPACE, ""fa.id =:"" + FAREPORT_ID)); filterMappings.put(SearchFilter.AREA_GEOM, new FilterDetails(StringUtils.SPACE, ""intersects(fa.geom, :"" + AREA_GEOM + "") = true "")); filterMappings.put(SearchFilter.TRIP_ID, new FilterDetails(StringUtils.SPACE + FISHING_TRIP_TABLE_ALIAS + "" JOIN FETCH "" + FISHING_TRIP_IDENTIFIER_TABLE_ALIAS, ""fishingTripId.tripId =:"" + TRIP_ID + StringUtils.SPACE)); } "	0	0	0	0	0	1
private String Func1(LogRecord var1) { String var2 = var1.getMessage(); if (var2 == null) { return null; } ResourceBundle var3 = var1.getResourceBundle(); if (var3 != null) { try { var2 = var3.getString(var2); } catch (MissingResourceException e) { } } Object[] var4 = var1.getParameters(); if (var4 != null) { var2 = MessageFormat.format(var2, var4); } return var2; } 	0	1	1	1	0	0
"private void Func1(final boolean var1, final String var2) { if (getPlayerBridge().isGameOver()) { return; } final IMoveDelegate var3; try { var3 = (IMoveDelegate) getPlayerBridge().getRemoteDelegate(); } catch (final ClassCastException e) { final String var4 = ""PlayerBridge step name: "" + getPlayerBridge().getStepName() + "", Remote class name: "" + getPlayerBridge().getRemoteDelegate().getClass(); System.err.println(var4); e.printStackTrace(); throw new IllegalStateException(var4, e); } final PlayerID var5 = getPlayerID(); if (var1 && !m_soundPlayedAlreadyNonCombatMove) { ClipPlayer.play(SoundPath.CLIP_PHASE_MOVE_NONCOMBAT, var5); m_soundPlayedAlreadyNonCombatMove = true; } if (!var1 && !m_soundPlayedAlreadyCombatMove) { ClipPlayer.play(SoundPath.CLIP_PHASE_MOVE_NONCOMBAT, var5); m_soundPlayedAlreadyCombatMove = true; } final MoveDescription var6 = m_ui.getMove(var5, getPlayerBridge(), var1, var2); if (var6 == null) { if (GameStepPropertiesHelper.isRemoveAirThatCanNotLand(getGameData())) { if (!canAirLand(true, var5)) { Func1(var1, var2); } } if (!var1) { if (canUnitsFight()) { Func1(var1, var2); } } return; } final String var7 = var3.Func1(var6.getUnits(), var6.getRoute(), var6.getTransportsThatCanBeLoaded(), var6.getDependentUnits()); if (var7 != null) { m_ui.notifyError(var7); } Func1(var1, var2); } "	0	1	0	0	0	0
private String Func1(Tokens var1) { LOGGER.warn(var1.getExpirationTime().toString()); return Jwts.builder().setId(var1.getUser().getEmail()) .setExpiration(var1.getExpirationTime()) .setIssuedAt(var1.getCreationTime()) .claim(CLAIM_SCOPE, var1.getTokenType().getCode()) .setSubject(var1.getUser().getEmail()) .signWith(SignatureAlgorithm.HS512, tokenSigningKey) .compact(); } 	0	0	0	0	0	1
public static ArrayList<Timer> Func1() { return timerList; } 	0	0	0	0	0	1
"public List<Context> Func1(Iterator var1) throws Exception { List<Context> var2 = new ArrayList<>(); boolean var3 = true; while (var1.hasNext()) { String var4 = (String) var1.next(); ContextFactory var5 = ContextFactoryScanner.get(Paths.get(var4)); Context var6 = null; try { var6 = var5.create(Paths.get(var4)); } catch (DslException e) { System.err.println(""When parsing model: '"" + var4 + ""' "" + e.getMessage() + System.lineSeparator()); throw new Exception(""Model syntax error""); } var6.setPathGenerator(GeneratorFactory.parse((String) var1.next())); if (var3 && (!offline.startElement.isEmpty() || (!online.startElement.isEmpty()))) { var3 = false; List<Element> var7 = null; if (command == Command.OFFLINE) { var7 = var6.getModel().findElements(offline.startElement); } else if (command == Command.ONLINE) { var7 = var6.getModel().findElements(online.startElement); } if (var7 == null) { throw new ParameterException(""--start-element Did not find matching element in the model: "" + var4); } else if (var7.size() > 1) { throw new ParameterException(""--start-element There are more than one matching element in the model: "" + var4); } var6.setNextElement(var7.get(0)); } var2.add(var6); } return var2; } "	1	1	1	0	1	0
public static String Func1(Object var1, boolean var2, boolean var3) { return serialize(var1, FORMAT_JSON, null, var2, false, var3); } 	0	0	0	0	0	1
public static JSONObject Func1(Object var1, String[] var2, boolean var3, String... var4) throws Exception { return new JSONObject(serialize(var1, FORMAT_JSON, var2, var3, var4)); } 	0	0	0	0	0	1
public static String Func1(Object var1, String[] var2, boolean var3, boolean var4, String... var5) { return serialize(var1, FORMAT_JSON, var2, var3, var4, var5); } 	0	0	0	0	0	1
public static JSONObject Func1(Object var1, String[] var2, String... var3) throws Exception { return new JSONObject(serialize(var1, FORMAT_JSON, var2, var3)); } 	0	0	0	0	0	1
public static String Func1(Object var1, String var2, String[] var3, boolean var4, boolean var5, String... var6) { return Func1(var1, var2, var3, var4, true, var5, var6); } 	0	0	0	0	0	1
public static ModelAndView Func1(Object var1, boolean var2) { return toModelAndView(serializeToJson(var1, var2)); } 	0	0	0	0	0	1
private Resource Func1(String var1, User var2) { return JsonDeserializer.deserialize(var1, Resource.class); } 	0	0	0	0	0	1
"public void Func1(final ViewDefinitionState var1, final ComponentState var2, final String[] var3) { if (!(var2 instanceof FieldComponent)) { return; } FieldComponent var4 = (FieldComponent) var1.getComponentByReference(""var5""); if (var4.getFieldValue() == null) { return; } Entity var5 = dataDefinitionService.get(TechnologiesConstants.PLUGIN_IDENTIFIER, TechnologiesConstants.MODEL_TECHNOLOGY).get((Long) var4.getFieldValue()); if (var5 != null) { applyValuesToFields(var1, var5, null); } } "	0	0	0	1	0	0
"@ApiModelProperty(required = true, value = ""The order including line items to be checked out."") public Squareupconnectv2ordersserviceCreateOrderRequestOrder Func1() { return order; } "	0	0	0	0	0	1
"@Inject(method = ""run"", at = @At(""HEAD""), cancellable = true, remap = false) private void Func1(CallbackInfo var1) { final Terminal var2 = TerminalConsoleAppender.getTerminal(); if (var2 != null) { TerminalConsoleAppender.setFormatter(ConsoleFormatter.INSTANCE); LineReader var3 = LineReaderBuilder.builder() .appName(""SpongeVanilla"") .var2(var2) .completer(new ConsoleCommandCompleter(this.server)) .build(); var3.unsetOpt(LineReader.Option.INSERT_TAB); TerminalConsoleAppender.setReader(var3); try { String var4; while (!this.server.isServerStopped() && this.server.isServerRunning()) { var4 = var3.readLine(""> ""); if (var4 == null) { break; } var4 = var4.trim(); if (!var4.isEmpty()) { this.server.addPendingCommand(var4, this.server); } } } catch (UserInterruptException e) { this.server.initiateShutdown(); } finally { TerminalConsoleAppender.setReader(null); } var1.cancel(); } else { TerminalConsoleAppender.setFormatter(s -> LegacyTexts.strip(s, SpongeTexts.COLOR_CHAR)); } } "	0	0	0	0	0	1
public void Func1(final String var1) { new AsyncTask<Void, Void, Void>() { @Override protected Void Func2(Void... var2) { ModelCache.this.remove(var1); return null; } }.execute(); } 	1	0	1	0	0	0
"@Check public void Func1(HtmlAttr var1) { String var2 = var1.getName(); EObject var3 = var1.eContainer(); if (var3 instanceof HtmlTag) { HtmlTag var4 = (HtmlTag) var3; String var5 = var4.getName(); if (!validAttributes.containsKey(var5.toUpperCase()) || !validAttributes.get(var5.toUpperCase()) .contains(var2.toUpperCase())) { warning(""Attribute '"" + var2 + ""' is not allowed inside '<"" + var5 + "">'."", HtmllabelPackage.Literals.HTML_ATTR__NAME); } } } "	0	0	0	0	0	1
"public CompletableFuture<ResponseMessage> Func1(StandardBusinessDocumentHeader var1, REMMDMessageType var2, Authorization var3) { String var4; ResponseMessage var5 = new ResponseMessage(); String var6; try { String var7 = var3.getUsername().toString() + "":"" + var3.getPassword().toString(); String var8 = Base64.getEncoder().encodeToString(var7.getBytes(""utf-8"")); var4 = ""Basic "" + var8; } catch (UnsupportedEncodingException e) { throw new EDeliveryException(e); } RequestBodyGenerator var9 = new RequestBodyGenerator(); var6 = var9.generateRemMessageBody(var1, var2, signatures); return httpClient.preparePost(sendEndpoind).addHeader(""Content-Type"", ""application/xml"") .addHeader(""Authorization"", var4).execute().toCompletableFuture() .exceptionally(t -> { throw new EDeliveryException(t); }) .thenApply(resp -> { int var10 = resp.getStatusCode(); switch (var10) { case 201: var5.setStatus(201); var5.setMessage(""Message send""); break; case 202: var5.setStatus(202); var5.setMessage(""Created""); break; case 400: var5.setStatus(400); var5.setMessage(""Bad Request""); break; case 401: var5.setStatus(401); var5.setMessage(resp.getResponseBody()); break; case 406: var5.setStatus(406); var5.setMessage(""Message not in the right format""); break; case 500: var5.setStatus(500); var5.setMessage(""Internal server error from AP connector""); break; } return var5; }); } "	0	0	0	0	0	1
"private ReturnCode Func1(Long var1, Long var2) { try { for (String var3: tagDataMap.keySet()) { String[] var4 = var3.split(SENTINEL); TagDataMapRecord var5 = (TagDataMapRecord) tagDataMap.get(var3); TagData var6 = new TagData(var4[0], var2, var1, var4[1], var4[2], var5.getCount(var1)); System.out.println(""Will attempt to persist var4 for: "" + var6.getCrisisCode() + "", "" + var6.getAttributeCode() + "", "" + var6.getLabelCode() + "", "" + var6.getTimestamp() + "", "" + var6.getGranularity() + "": "" + var6.getCount()); tagDataEJB.writeData(var6); var5.resetCount(var1); TagDataMapRecord var7 = (TagDataMapRecord) tagDataMap.get(var3); } } catch (Exception e) { System.err.println(""[Func1] Error in writing to TagDataDB table!""); e.printStackTrace(); return ReturnCode.FAIL; } return ReturnCode.SUCCESS; } "	0	0	1	1	0	0
"@UiHandler(""ancPendingListSeeMore"") public void Func1(ClickEvent var1){ lblPendingPleaseWait.setVisible(true); ancPendingListSeeMore.setVisible(false); getUiHandlers().getMembersListByCollectionId(classpageDo.getClasspageCode(),  pendingOffsetValue, pageSize, ""pending"",true,true);	//this will callback displayPendingMembersList method .... } "	0	0	0	0	0	1
private boolean Func1(String var1, String var2) { return var2.startsWith(var1) && var2.indexOf('$') >= 0; } 	1	0	1	1	0	0
"private void Func1(SBOLDocument var1) { completed = new HashSet<URI>(); int var2 = var1.getTopLevels().var2(); int var3 = 0; for (TopLevel var4 : var1.getTopLevels()) { Func1(var1,var4); var3++; System.err.println(var3 + "" out of "" + var2); } } "	0	0	0	0	0	1
"@Override public void Func1(View var1) { BackgroundAsyncTask var2 = new BackgroundAsyncTask(); String var3 = messageET.getText().toString(); if (TextUtils.isEmpty(var3)) { return; } try { ChatImpl var4 = new ChatImpl(); final MessageImpl var5 = new MessageImpl(); Long var6 = System.currentTimeMillis(); String var7; if (chatWasCreate) { var4 = (ChatImpl) chatManager.getChatByChatId(chatId); var4.setLastMessageDate(new Timestamp(var6)); var7 = var4.getRemoteActorPublicKey(); Chat var8 = chatManager.getChatByRemotePublicKey(var7); if (var8.getChatId() != chatId) { newChatId = var8.getChatId(); } else { newChatId = chatId; } var4.setChatId(newChatId); chatManager.saveChat(var4); var5.setChatId(newChatId); var5.setMessageId(UUID.randomUUID()); var5.setMessage(var3); var5.setMessageDate(new Timestamp(var6)); var5.setStatus(MessageStatus.CREATED); var5.setType(TypeMessage.OUTGOING); var5.setContactId(UUID.randomUUID()); chatManager.saveMessage(var5); var2.execute(var5); } else { Contact var9 = chatSession.getSelectedContact(); var7 = var9.getRemoteActorPublicKey(); var4.setRemoteActorType(PlatformComponentType.ACTOR_CHAT);//var4.setRemoteActorType(remoteActorType); var4.setRemoteActorPublicKey(var7); Chat var8 = chatManager.getChatByRemotePublicKey(var7); if(newChatId == null) { if (var8 != null) { newChatId = var8.getChatId(); } else { newChatId = UUID.randomUUID(); } } var4.setChatId(newChatId); var4.setObjectId(UUID.randomUUID()); var4.setStatus(ChatStatus.VISSIBLE); var4.setChatName(""Chat_"" + var9.getAlias()); var4.setDate(new Timestamp(var6)); var4.setLastMessageDate(new Timestamp(var6)); var4.setTypeChat(TypeChat.INDIVIDUAL); var4.setLocalActorPublicKey(chatManager.getNetworkServicePublicKey()); var4.setLocalActorType(PlatformComponentType.NETWORK_SERVICE); try { String var10 = chatSettings.getLocalPublicKey(); if (var10 != null) { var4.setLocalActorPublicKey(var10); } else { var4.setLocalActorPublicKey(chatManager.getIdentityChatUsersFromCurrentDeviceUser().get(0).getPublicKey()); } var4.setLocalActorType(PlatformComponentType.ACTOR_CHAT); } catch (Exception e) { var4.setLocalActorPublicKey(chatManager.getIdentityChatUsersFromCurrentDeviceUser().get(0).getPublicKey()); var4.setLocalActorType(PlatformComponentType.ACTOR_CHAT); } chatManager.saveChat(var4); var5.setChatId(newChatId); var5.setMessageId(UUID.randomUUID()); var5.setMessage(var3); var5.setMessageDate(new Timestamp(var6)); var5.setStatus(MessageStatus.CREATED); var5.setType(TypeMessage.OUTGOING); var5.setContactId(UUID.randomUUID());//var5.setContactId(contactId); chatManager.saveMessage(var5); var2.execute(var5);// chatSession.setData(""whocallme"", ""chatlist""); chatSession.setData( ""contactid"", var9 ); chatWasCreate = true; chatId = newChatId; } ChatMessage var11 = new ChatMessage(); var11.setId(UUID.randomUUID());//dummy var11.setMessage(var3); String var12 = new SimpleDateFormat(""HH:mm"").format(new Date()); var11.setDate(var12); var11.setMe(true); messageET.setText(""""); adapter = new ChatAdapter(getContext(), (chatHistory != null) ? chatHistory : new ArrayList<ChatMessage>()); messagesContainer.setAdapter(adapter); displayMessage(var11); System.out.println(""*** 12345 case 1:send msg in android layer"" + new Timestamp(System.currentTimeMillis())); } catch (CantSaveMessageException e) { errorManager.reportUnexpectedSubAppException(SubApps.CHT_CHAT, UnexpectedSubAppExceptionSeverity.DISABLES_SOME_FUNCTIONALITY_WITHIN_THIS_FRAGMENT, e); } catch (CantSaveChatException e) { errorManager.reportUnexpectedSubAppException(SubApps.CHT_CHAT, UnexpectedSubAppExceptionSeverity.DISABLES_SOME_FUNCTIONALITY_WITHIN_THIS_FRAGMENT, e); } catch (CantGetNetworkServicePublicKeyException e) { errorManager.reportUnexpectedSubAppException(SubApps.CHT_CHAT, UnexpectedSubAppExceptionSeverity.DISABLES_SOME_FUNCTIONALITY_WITHIN_THIS_FRAGMENT, e); } catch (Exception e) { errorManager.reportUnexpectedSubAppException(SubApps.CHT_CHAT, UnexpectedSubAppExceptionSeverity.DISABLES_SOME_FUNCTIONALITY_WITHIN_THIS_FRAGMENT, e); } } "	0	1	0	0	0	0
public void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.collectables); GridView var2 = (GridView) findViewById(R.id.var2); AchievementContract var3 = new AchievementContract(this); adapter = new SimpleCursorAdapter(this, R.layout.collectables_cell, var3.getAchievements(), FROM, TO); adapter.setViewBinder(new CollectableViewBinder(this)); var2.setAdapter(adapter); } 	0	0	0	0	0	1
public boolean Func1(int var1) { if (var1 > 0 && var1 < 5) { return true; } else return false; } 	0	0	0	0	0	1
"private void Func1(Map<String, StatusInformation> var1) { for (String var2 : var1.keySet()) { try { LEDStripDTO var3 = ledStripDTOService.getDTO(var2); var3.setStatus(var1.get(var2)); ledStripService.handleStatus(var3); } catch (TimeoutException | NotConnectedException | IOException | AlreadyConnectedException exception) { LOG.error(""Error setting status on LED strip: {}"", exception); } } } "	0	0	1	1	0	0
"private boolean Func1(Exception var1) { if (var1 instanceof SessionExistsException) { logger.info(""Session already exists. Continuing...""); return true; } else if (var1 instanceof ControllerOfflineException) { logger.error(""innogy SmartHome Controller is offline. {}"", var1.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, var1.getMessage()); dispose(); scheduleReinitialize(); return false; } else if (var1 instanceof ConfigurationException) { logger.error(""Configuration error: {}"", var1.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, var1.getMessage()); dispose(); return false; } else if (var1 instanceof InvalidAuthCodeException) { logger.error(""Error fetching access tokens. Invalid authcode! Please generate a new one.""); org.eclipse.smarthome.config.core.Configuration var2 = editConfiguration(); var2.put(AUTH_CODE, """"); updateConfiguration(var2); config.setAuthCode(""""); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, ""Invalid authcode. Please generate a new one!""); dispose(); return false; } else if (var1 instanceof InvalidActionTriggeredException) { logger.error(""Error triggering action: {}"", var1.getMessage()); return true; } else if (var1 instanceof IOException) { logger.error(""IO error: {}"", var1.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, var1.getMessage()); dispose(); scheduleReinitialize(REINITIALIZE_DELAY_LONG_SECONDS); return false; } else if (var1 instanceof ApiException) { logger.error(""Unexcepted API error: {}"", var1.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, var1.getMessage()); dispose(); scheduleReinitialize(REINITIALIZE_DELAY_LONG_SECONDS); return false; } else if (var1 instanceof SocketTimeoutException) { logger.error(""Socket timeout: {}"", var1.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, var1.getMessage()); dispose(); scheduleReinitialize(); return false; } else { logger.error(""Unknown exception"", var1); var1.printStackTrace(); dispose(); scheduleReinitialize(); return false; } } "	0	0	0	0	0	1
public DealerDeliveryTO Func1(String var1, List<OrderTO> var2) throws BusinessException { DealerDeliveryTO var3 = new DealerDeliveryTO(); var3.setOrderList(var2); Func1(var1, var3); return var3; } 	0	0	0	0	0	1
public Map<DependencyKey, DependencyManagement> Func1( Map<DependencyKey, DependencyManagement> var1, boolean var2, Map<String, Profile> var3, Log var4 ) { if( project.getDependencyManagement() != null && project.getDependencyManagement().getDependencies() != null ) { if( var1 != null ) var1.putAll( completeDependencyManagementMap( var1, project.getDependencyManagement().getDependencies(), var2, var3, var4 ) ); } List<org.apache.maven.model.Profile> var5 = getMavenProject().getModel().getProfiles(); if( var5 != null ) { var5.stream() .filter( p -> isProfileActivated( var3, p ) ) .filter( p -> p.getDependencyManagement() != null ) .filter( p -> p.getDependencyManagement().getDependencies() != null ) .map( p -> p.getDependencyManagement().getDependencies() ) .map( dependencies -> completeDependencyManagementMap( var1, dependencies, var2, var3, var4 ) ) .forEach( var1::putAll ); } return var1; } 	1	1	1	1	0	0
"@Test public void Func1() throws Throwable { tool.execute( homeDir.toPath(), confDir.toPath(), SET_ADMIN, ""foo"", ""bar"" ); assertNoAuthIniFile(); verify( out ).stdErrLine( ""Too many arguments."" ); verify( out, times( 2 ) ).stdErrLine( """" ); verify( out ).stdErrLine( ""usage: neo4j-admin set-default-admin <username>"" ); verify( out, times( 2 ) ).stdErrLine( """" ); verify( out ).stdErrLine( String.format( ""Sets the user to become admin if users but no roles are present, for example%n"" + ""when upgrading to neo4j 3.1 enterprise."" ) ); verify( out ).exit( 1 ); verifyNoMoreInteractions( out ); verify( out, times( 0 ) ).stdOutLine( anyString() ); } "	0	0	1	1	0	0
private boolean Func1(ObjectNode var1) { return !backwardsCompatible || hasMethodAndVersion(var1); } 	1	0	0	1	0	0
private void Func1(GoogleSignInResult var1) { if (var1.isSuccess()) { GoogleSignInAccount var2 = var1.getSignInAccount(); if (var2 != null) { accountDao = updateInformationAboutAccountInLocalDatabase(var2); } else { } if (SecurityUtils.isBackupKeysExist(this)) { EmailSyncService.startEmailSyncService(this); EmailManagerActivity.runEmailManagerActivity(this, accountDao); finish(); } else { startService(new Intent(this, CheckClipboardToFindPrivateKeyService.class)); if (accountDao != null) { getSupportLoaderManager().initLoader(R.id.loader_id_load_gmail_backups, null, this); } else { } } } else { if (!TextUtils.isEmpty(var1.getStatus().getStatusMessage())) { UIUtil.showInfoSnackbar(signInView, var1.getStatus().getStatusMessage()); } UIUtil.exchangeViewVisibility(this, false, splashView, signInView); } } 	0	1	0	0	0	0
"private ClusterComposition Func1() throws InterruptedException, ServiceUnavailableException { int var1 = routers.var1(), var2 = 0; if ( var1 == 0 ) { throw new ServiceUnavailableException( NO_ROUTERS_AVAILABLE ); } for ( long var3 = clock.millis(), var4 = 0; ; var4 = Math.max( settings.retryTimeoutDelay, var4 * 2 ) ) { long var5 = var3 + var4 - clock.millis(); if ( var5 > 0 ) { clock.sleep( var5 ); } var3 = clock.millis(); for ( int var6 = 0; var6 < var1; var6++ ) { BoltServerAddress var7 = routers.next(); if ( var7 == null ) { throw new ServiceUnavailableException( NO_ROUTERS_AVAILABLE ); } ClusterComposition var8; try ( Connection connection = connections.acquire( var7 ) ) { var8 = provider.getClusterComposition( connection ); } catch ( Exception e ) { log.error( String.format( ""Failed to connect to routing server '%s'."", var7 ), e ); continue; } if ( var8 == null || !var8.isValid() ) { log.info( ""Server <%s> unable to perform routing capability, dropping from list of routers."", var7 ); routers.remove( var7 ); if ( --var1 == 0 ) { throw new ServiceUnavailableException( NO_ROUTERS_AVAILABLE ); } } else { return var8; } } if ( ++var2 > settings.maxRoutingFailures ) { throw new ServiceUnavailableException( NO_ROUTERS_AVAILABLE ); } } } "	1	0	1	1	0	0
"public void Func1(ReadableMap var1, Intent var2) { if (var1.hasKey(""languageOrLocale"")) { var2.putExtra(CardIOActivity.EXTRA_LANGUAGE_OR_LOCALE, var1.getString(""languageOrLocale"")); } if (var1.hasKey(""guideColor"")) { var2.putExtra(CardIOActivity.EXTRA_GUIDE_COLOR, var1.getInt(""guideColor"")); } if (var1.hasKey(""useCardIOLogo"")) { var2.putExtra(CardIOActivity.EXTRA_USE_CARDIO_LOGO, var1.getBoolean(""useCardIOLogo"")); } if (var1.hasKey(""hideCardIOLogo"")) { var2.putExtra(CardIOActivity.EXTRA_HIDE_CARDIO_LOGO, var1.getBoolean(""hideCardIOLogo"")); } if (var1.hasKey(""scanInstructions"")) { var2.putExtra(CardIOActivity.EXTRA_SCAN_INSTRUCTIONS, var1.getString(""scanInstructions"")); } if (var1.hasKey(""suppressManualEntry"")) { var2.putExtra(CardIOActivity.EXTRA_SUPPRESS_MANUAL_ENTRY, var1.getBoolean(""suppressManualEntry"")); } if (var1.hasKey(""suppressConfirmation"")) { var2.putExtra(CardIOActivity.EXTRA_SUPPRESS_CONFIRMATION, var1.getBoolean(""suppressConfirmation"")); } if (var1.hasKey(""requireExpiry"")) { var2.putExtra(CardIOActivity.EXTRA_REQUIRE_EXPIRY, var1.getBoolean(""requireExpiry"")); } if (var1.hasKey(""scanExpiry"")) { var2.putExtra(CardIOActivity.EXTRA_SCAN_EXPIRY, var1.getBoolean(""scanExpiry"")); } if (var1.hasKey(""requireCVV"")) { var2.putExtra(CardIOActivity.EXTRA_REQUIRE_CVV, var1.getBoolean(""requireCVV"")); } if (var1.hasKey(""requirePostalCode"")) { var2.putExtra(CardIOActivity.EXTRA_REQUIRE_POSTAL_CODE, var1.getBoolean(""requirePostalCode"")); } if (var1.hasKey(""restrictPostalCodeToNumericOnly"")) { var2.putExtra(CardIOActivity.EXTRA_RESTRICT_POSTAL_CODE_TO_NUMERIC_ONLY, var1.getBoolean(""restrictPostalCodeToNumericOnly"")); } if (var1.hasKey(""requireCardholderName"")) { var2.putExtra(CardIOActivity.EXTRA_REQUIRE_CARDHOLDER_NAME, var1.getBoolean(""require_cardholder_name"")); } if (var1.hasKey(""noCamera"")) { var2.putExtra(CardIOActivity.EXTRA_NO_CAMERA, var1.getBoolean(""noCamera"")); } if (var1.hasKey(""unblurDigits"")) { var2.putExtra(CardIOActivity.EXTRA_UNBLUR_DIGITS, var1.getInt(""unblurDigits"")); } if (var1.hasKey(""usePaypalActionbarIcon"")) { var2.putExtra(CardIOActivity.EXTRA_USE_PAYPAL_ACTIONBAR_ICON, var1.getBoolean(""usePaypalActionbarIcon"")); } } "	0	1	0	0	0	0
"public static void Func1(Map<String, Object> var1) { for (Map.Entry<String, Object> var2 : var1.entrySet()) { Object var3 = var2.getValue(); if (var3 instanceof Map) { if (((Map) var3).size() == 1) { Set var4 = ((Map)var3).keySet(); for (Iterator var5 = var4.iterator(); var5.hasNext();) { String var6 = (String)var5.next(); if(""$ref"".equals(var6)) { String var7 = (String)((Map)var3).get(var6); Map var8 = handlerPointer(var7); if(var8.get(""$ref"") != null) { var2.setValue(handlerPointer(var7).get(""$ref"")); } else { var2.setValue(var8); continue; } } } } Func1((Map) var3); } else if (var3 instanceof List) { resolveList((List)var3); } else { continue; } } } "	1	0	1	0	0	0
@Override protected boolean Func1(Map.Entry<K, List<PropertyMapping>> var1) { return size() >= this.capacity; } 	1	0	1	1	0	0
"@ApiOperation(value = ""删除Baby"", notes = ""Auth"") @RequestMapping(value = ""/Func1"", method = {RequestMethod.POST}) @ResponseBody public ResponseData<Boolean> Func1( @ApiParam(""宝宝ID"") @RequestParam(""var1"") int var1, HttpServletRequest var2, HttpServletResponse var3) throws ParseException { ResponseData<Boolean> var4 = new ResponseData<>(); User var5 = (User) var2.getAttribute(TokenConfig.DEFAULT_USERID_REQUEST_ATTRIBUTE_NAME); if (var5 == null) { var4.jsonFill(2, ""用户尚未登录。"", false); return var4; } Baby var6 = babyService.getBabyById(var1); if (var6 == null) { var4.jsonFill(2, ""宝宝不存在。"", false); return var4; } if (var6.getParentId() != var5.getId()) { var4.jsonFill(2, ""无效的请求。"", false); var3.setStatus(401); return var4; } boolean var7 = babyService.Func1(var1); var4.jsonFill(var7 ? 1 : 2, null, var7); return var4; } "	1	0	1	0	0	0
@Override protected Cart.DAO Func1() { return new CartDAO(this); } 	0	0	0	0	0	1
"@Override @SuppressWarnings(""unchecked"") public void Func1(final IProject var1, IProjectFacetVersion var2, Object var3, IProgressMonitor var4) throws CoreException { IDataModel var5 = (IDataModel) var3; final IFacetedProjectWorkingCopy var6 = (IFacetedProjectWorkingCopy) var5 .getProperty(IFacetDataModelProperties.FACETED_PROJECT_WORKING_COPY); final ISwitchYardProjectWorkingCopy var7; ISwitchYardProject var8 = (ISwitchYardProject) var5 .getProperty(ISwitchYardFacetConstants.SWITCHYARD_PROJECT); if (var8 == null) { if (var6 != null) { var8 = SwitchYardProjectManager.instance().getSwitchYardProject(var6.Func2()); } } if (var8 == null) { throw new CoreException( new Status( Status.ERROR, Activator.PLUGIN_ID, Messages.SwitchYardFacetInstallActionDelegate_exceptionMessage_cannotResolveSYProject)); } Object var9 = var5.getProperty(ISwitchYardFacetConstants.RUNTIME_VERSION); String var10 = var9 instanceof ArtifactVersion ? ((ArtifactVersion) var9).toString() : null; var7 = var8.createWorkingCopy(); var7.setRuntimeVersion(var10); var7.addComponents((Collection<ISwitchYardComponentExtension>) var5 .getProperty(ISwitchYardFacetConstants.RUNTIME_COMPONENTS)); new AbstractSwitchYardProjectOperation(var7, var6, false, Messages.SwitchYardFacetInstallActionDelegate_operationLabel_installingSYFacet, null) { @Override protected void Func1(IProgressMonitor var4) throws CoreException { IMavenProjectFacade var11 = MavenPlugin.getMavenProjectRegistry().Func2(Func2()); if (var11 == null || var11.getMavenProject() == null) { throw new CoreException(new Status(Status.ERROR, Activator.PLUGIN_ID, Messages.SwitchYardFacetInstallActionDelegate_errorMessage_notAMavenProject)); } WTPProjectsUtil.removeTestFolderLinks(Func2(), var7.getMavenProject(), var4, ""/""); //$NON-NLS-1$ } @Override protected IProject Func2() { return var1; } }.run(var4); var7.dispose(); if (isOpenShiftProject(var1)) { handleOpenShiftStandaloneUpdates(var1); } IScopeContext[] var12 = createPreferenceScopes(null); //var1); overridden for SWITCHYARD-1779 fix Boolean var13 = Platform.getPreferencesService().getBoolean( XMLCorePlugin.getDefault().getBundle().getSymbolicName(), XMLCorePreferenceNames.HONOUR_ALL_SCHEMA_LOCATIONS, true, var12); if (var13.booleanValue()) { IEclipsePreferences var14 = var12[0].getNode(XMLCorePlugin.getDefault().getBundle().getSymbolicName()); var14.putBoolean(XMLCorePreferenceNames.HONOUR_ALL_SCHEMA_LOCATIONS, false); if (var12[0] instanceof ProjectScope) { var14.putBoolean(XMLCorePreferenceNames.USE_PROJECT_SETTINGS, true); } try { var14.flush(); } catch (BackingStoreException e) { throw new CoreException( new Status(Status.ERROR, Activator.PLUGIN_ID, e.getLocalizedMessage())); } } } "	1	1	0	0	0	0
Collection<Territory> Func1() { if (m_headless || !m_attackingUnits.isEmpty() && Match.allMatch(m_attackingUnits, Matches.UnitIsAir) || games.strategy.triplea.Properties.getRetreatingUnitsRemainInPlace(m_data)) { final Collection<Territory> var1 = new ArrayList<>(2); var1.add(m_battleSite); return var1; } final Match.CompositeBuilder<Unit> var2 = Match.newCompositeBuilder( Matches.enemyUnit(m_attacker, m_data), Matches.UnitIsNotInfrastructure, Matches.unitIsBeingTransported().invert(), Matches.UnitIsSubmerged.invert()); if (games.strategy.triplea.Properties.getIgnoreSubInMovement(m_data)) { var2.add(Matches.UnitIsNotSub); } if (games.strategy.triplea.Properties.getIgnoreTransportInMovement(m_data)) { var2.add(Matches.UnitIsNotTransportButCouldBeCombatTransport); } Collection<Territory> var3 = Match.getMatches(m_attackingFrom, Matches.territoryHasUnitsThatMatch(var2.all()).invert()); if (isWW2V2() || isWW2V3()) { var3 = Match.getMatches(var3, Match.of(t -> { final Collection<Unit> var4 = m_attackingFromMap.get(t); return var4.isEmpty() || !Match.allMatch(var4, Matches.UnitIsAir); })); } final Match<Territory> var5 = Match.anyOf( Matches.isTerritoryEnemyAndNotUnownedWaterOrImpassableOrRestricted(m_attacker, m_data), Match.allOf( Matches.TerritoryIsWater, Matches.territoryWasFoughOver(m_battleTracker))); var3.removeAll(Match.getMatches(var3, var5)); var3.remove(m_battleSite); if (Match.anyMatch(m_attackingUnits, Matches.UnitIsLand) && !m_battleSite.isWater()) { var3 = Match.getMatches(var3, Matches.TerritoryIsLand); } if (Match.anyMatch(m_attackingUnits, Matches.UnitIsSea)) { var3 = Match.getMatches(var3, Matches.TerritoryIsWater); } return var3; } 	1	0	1	1	0	0
private void Func1() { int var1; int var2 = 1; for (int var3 = 0; var3 < 9; var3++) { var1 = var2; for (int var4 = 0; var4 < 9; var4++) { if (var1 > 9) { var1 = 1; } this.soln[var3][var4] = var1; var1++; } var2 = var1 + 3; if (var1 == 10) { var2 = 4; } if (var2 > 9) { var2 = (var2 % 9) + 1; } } randomRow(); randomCol(); Random var5 = new Random(); int[] var6 = {0, 3, 6}; for (int var7 = 0; var7 < 2; var7++) { int var8 = var6[var5.nextInt(var6.length)]; int var9; do { var9 = var6[var5.nextInt(var6.length)]; } while (var8 == var9); if (var7 == 1) { rowGroupChange(var8, var9); } else { colGroupChange(var8, var9); } } for (int var3 = 0; var3 < 9; var3++) { System.arraycopy(soln[var3], 0, board[var3], 0, 9); } int[] var10 = new int[9]; int[] var11 = new int[9]; for (int var12 = 0; var12 < 9; var12++) { var10[var12] = -1; var11[var12] = -1; } for (int var12 = 0; var12 < 9; var12++) { int var13; do { var13 = var5.nextInt(9); } while (contains(var10, var13)); var10[var12] = var13; do { var13 = var5.nextInt(9); } while (contains(var11, var13)); var11[var12] = var13; } for (int var3 = 0; var3 < 9; var3++) { for (int var4 = 0; var4 < 9; var4++) { strikeOut(var10[var3], var10[var4]); } } } 	1	1	0	1	0	0
"private void Func1() { agent.setIsVerbose(isVerbose); if(isRemovalRequested) { int[] var1 = agent.removePatterns(); say(""Patterns removed""); if(var1 != null && var1.length == 2) say(String.format(""%d classes deinstrumented ok, %d failed"", var1[0], var1[1])); } else { int[] var1 = agent.setPatterns(classMatchingPattern, methodMatchingPattern); say(String.format(""Class matching pattern set to \""%s\""%s"", classMatchingPattern)); if(methodMatchingPattern != null) say(String.format(""Method matching pattern set to \""%s\"""", methodMatchingPattern)); if(var1 != null && var1.length == 2) say(String.format(""%d classes instrumented ok, %d failed"", var1[0], var1[1])); } } "	0	0	0	1	0	0
public static void Func1(String var1, Tile var2) { if (var2.getCreatorId() != null) { DatabaseReference var3 = FirebaseDatabase.getInstance().getReference(); DatabaseReference var4 = var3.child(User.TABLE_NAME).child(var2.getCreatorId()); if (var4 != null) { var4.child(User.TILE_IDS).child(var1).setValue(true); } } } 	0	1	0	0	0	0
"public static void Func1() { File var1 = new File(var17.getDataFolder(), ""debug.txt""); if (var1.exists()) { var1.delete(); // We're starting brand new. } writeToDebug(""ProjectKorra Debug: Paste this on http://pastie.org and put it in your bug report thread.""); writeToDebug(""====================""); writeToDebug(""""); writeToDebug(""""); writeToDebug(""Date Created: "" + getCurrentDate()); writeToDebug(""Bukkit Version: "" + Bukkit.getServer().getVersion()); writeToDebug(""""); writeToDebug(""ProjectKorra (Core) Information""); writeToDebug(""====================""); writeToDebug(""Version: "" + var17.getDescription().getVersion()); writeToDebug(""Author: "" + var17.getDescription().getAuthors()); if (hasRPG()) { writeToDebug(""""); writeToDebug(""ProjectKorra (RPG) Information""); writeToDebug(""====================""); writeToDebug(""Version: "" + getRPG().getDescription().getVersion()); writeToDebug(""Author: "" + getRPG().getDescription().getAuthors()); } if (hasItems()) { writeToDebug(""""); writeToDebug(""ProjectKorra (Items) Information""); writeToDebug(""====================""); writeToDebug(""Version: "" + getItems().getDescription().getVersion()); writeToDebug(""Author: "" + getItems().getDescription().getAuthors()); } writeToDebug(""""); writeToDebug(""Ability Information""); writeToDebug(""====================""); for (String var2: AbilityModuleManager.abilities) { if (StockAbilities.isStockAbility(var2) && !GeneralMethods.isDisabledStockAbility(var2)) { writeToDebug(var2 + "" - STOCK ABILITY""); } else { writeToDebug(var2 + "" - UNOFFICIAL ABILITY""); } } writeToDebug(""""); writeToDebug(""Supported Plugins""); writeToDebug(""====================""); boolean var3 = var17.getConfig().getBoolean(""Properties.RegionProtection.RespectWorldGuard""); boolean var4 = var17.getConfig().getBoolean(""Properties.RegionProtection.RespectPreciousStones""); boolean var5 = var17.getConfig().getBoolean(""Properties.RegionProtection.RespectFactions""); boolean var6 = var17.getConfig().getBoolean(""Properties.RegionProtection.RespectTowny""); boolean var7 = var17.getConfig().getBoolean(""Properties.RegionProtection.RespectGriefPrevention""); boolean var8 = var17.getConfig().getBoolean(""Properties.RegionProtection.RespectLWC""); PluginManager var9 = Bukkit.getPluginManager(); Plugin var10 = var9.getPlugin(""WorldGuard""); Plugin var11 = var9.getPlugin(""PreciousStones""); Plugin var12 = var9.getPlugin(""Factions""); Plugin var13 = var9.getPlugin(""Towny""); Plugin var14 = var9.getPlugin(""GriefPrevention""); Plugin var15 = var9.getPlugin(""MassiveCore""); Plugin var16 = var9.getPlugin(""LWC""); if (var10 != null && var3) { writeToDebug(""WorldGuard v"" + var10.getDescription().getVersion()); } if (var11 != null && var4) { writeToDebug(""PreciousStones v"" + var11.getDescription().getVersion()); } if (var12 != null && var5) { writeToDebug(""Factions v"" + var12.getDescription().getVersion()); } if (var15 != null && var5) { writeToDebug(""MassiveCore v"" + var15.getDescription().getVersion()); } if (var13 != null && var6) { writeToDebug(""Towny v"" + var13.getDescription().getVersion()); } if (var14 != null && var7) { writeToDebug(""GriefPrevention v"" + var14.getDescription().getVersion()); } if (var16 != null && var8) { writeToDebug(""LWC v"" + var16.getDescription().getVersion()); } writeToDebug(""""); writeToDebug(""Plugins Hooking Into ProjectKorra (Core)""); writeToDebug(""====================""); for (Plugin var17: Bukkit.getPluginManager().getPlugins()) { if (var17.getDescription().getDepend() != null && var17.getDescription().getDepend().contains(""ProjectKorra"")) { writeToDebug(var17.getDescription().getName() + "" v"" + var17.getDescription().getVersion()); } } } "	0	0	0	0	0	1
private void Func1() { for(MultiAbilityModule var1 : multiAbility) { var1.onThisLoad(); AbilityModuleManager.abilities.add(var1.getName()); for (StockAbilities var2: StockAbilities.values()) { if (var2.name().equalsIgnoreCase(var1.getName())){ AbilityModuleManager.disabledStockAbilities.add(var2.name()); } } if (var1.getElement() == Element.Air.toString()) AbilityModuleManager.airbendingabilities.add(var1.getName()); if (var1.getElement() == Element.Water.toString()) AbilityModuleManager.waterbendingabilities.add(var1.getName()); if (var1.getElement() == Element.Earth.toString()) AbilityModuleManager.earthbendingabilities.add(var1.getName()); if (var1.getElement() == Element.Fire.toString()) AbilityModuleManager.firebendingabilities.add(var1.getName()); if (var1.getElement() == Element.Chi.toString()) AbilityModuleManager.chiabilities.add(var1.getName()); AbilityModuleManager.shiftabilities.add(var1.getName()); if (var1.isHarmlessAbility()) AbilityModuleManager.harmlessabilities.add(var1.getName()); if (var1.getSubElement() != null) { AbilityModuleManager.subabilities.add(var1.getName()); switch(var1.getSubElement()) { case Bloodbending: AbilityModuleManager.bloodabilities.add(var1.getName()); break; case Combustion: AbilityModuleManager.combustionabilities.add(var1.getName()); break; case Flight: AbilityModuleManager.flightabilities.add(var1.getName()); break; case Healing: AbilityModuleManager.healingabilities.add(var1.getName()); break; case Icebending: AbilityModuleManager.iceabilities.add(var1.getName()); break; case Lavabending: AbilityModuleManager.lavaabilities.add(var1.getName()); break; case Lightning: AbilityModuleManager.lightningabilities.add(var1.getName()); break; case Metalbending: AbilityModuleManager.metalabilities.add(var1.getName()); break; case Plantbending: AbilityModuleManager.plantabilities.add(var1.getName()); break; case Sandbending: AbilityModuleManager.sandabilities.add(var1.getName()); break; case SpiritualProjection: AbilityModuleManager.spiritualprojectionabilities.add(var1.getName()); break; } } MultiAbilityManager.multiAbilityList.add(new MultiAbility(var1.getName(), var1.getAbilities())); AbilityModuleManager.descriptions.put(var1.getName(), var1.getDescription()); AbilityModuleManager.authors.put(var1.getName(), var1.getAuthor()); } } 	0	0	0	0	0	1
"@Override public void Func1(DidChangeConfigurationParams var1) { logInfo("">> workspace/Func1""); Object var2 = var1.getSettings(); if (var2 instanceof Map) { @SuppressWarnings(""unchecked"") Map<String, Object> var3 = MapFlattener.flatten((Map<String, Object>) var2); Preferences var4 = Preferences.createFrom(var3); preferenceManager.update(var4); } if (preferenceManager.getClientPreferences().isFormattingDynamicRegistrationSupported()) { if (preferenceManager.getPreferences().isJavaFormatEnabled()) { registerCapability(Preferences.FORMATTING_ID, Preferences.TEXT_DOCUMENT_FORMATTING); } else { unregisterCapability(Preferences.FORMATTING_ID, Preferences.TEXT_DOCUMENT_FORMATTING); } } if (preferenceManager.getClientPreferences().isRangeFormattingDynamicRegistrationSupported()) { if (preferenceManager.getPreferences().isJavaFormatEnabled()) { registerCapability(Preferences.FORMATTING_RANGE_ID, Preferences.TEXT_DOCUMENT_RANGE_FORMATTING); } else { unregisterCapability(Preferences.FORMATTING_RANGE_ID, Preferences.TEXT_DOCUMENT_RANGE_FORMATTING); } } if (preferenceManager.getClientPreferences().isCodeLensDynamicRegistrationSupported()) { if (preferenceManager.getPreferences().isReferencesCodeLensEnabled()) { registerCapability(Preferences.CODE_LENS_ID, Preferences.TEXT_DOCUMENT_CODE_LENS, new CodeLensOptions(true)); } else { unregisterCapability(Preferences.CODE_LENS_ID, Preferences.TEXT_DOCUMENT_CODE_LENS); } } if (preferenceManager.getClientPreferences().isSignatureHelpDynamicRegistrationSupported()) { if (preferenceManager.getPreferences().isSignatureHelpEnabled()) { registerCapability(Preferences.SIGNATURE_HELP_ID, Preferences.TEXT_DOCUMENT_SIGNATURE_HELP, new CodeLensOptions(true)); } else { unregisterCapability(Preferences.SIGNATURE_HELP_ID, Preferences.TEXT_DOCUMENT_SIGNATURE_HELP); } } logInfo("">>New configuration: "" + var2); } "	0	1	0	0	0	0
"@Override public String Func1(String var1)  { String var2 = null; try { var2 = IOUtils.toString(_contentRepository.getContent(var1)); } catch(Exception err) { logger.error(""Failed to get var2 as string for var1 '{0}'"", err, var1); } return var2; } "	0	0	0	1	0	0
public Set<SubDistrict> Func1() { Set<SubDistrict> var1 = new HashSet<SubDistrict>(); for (Location var2 : locations()) { if (var2.municipality.equals(name)) { var1.add(new SubDistrict(context, this, var2.subdistrict)); } } return var1; } 	1	1	1	0	1	0
"private int Func1(CfgBlock var1) { int var2 = 0; List<Statement> var3 = var1.getStatements(); for (int var4 = 0; var4+1 < var3.size(); var4++) { if (var3.get(var4+1) instanceof PullStatement) { PullStatement var5 = (PullStatement) var3.get(var4+1); Statement var6 = var3.get(var4); if (var6 instanceof AssignStatement || var6 instanceof AssertStatement || var6 instanceof AssumeStatement) { Set<IdentifierExpression> var7 = var5.getIdentifierExpressions(); Set<IdentifierExpression> var8 = var6.getIdentifierExpressions(); if (distinct(var8,var7)) { var1.swapStatements(var4, var4+1); if (debug) System.out.println(""Applied rule (V); swapped "" + var6 + "" and "" + var5); var2++; } } } } return var2; } "	1	1	0	1	0	0
"@Override public void Func1(TestContext var1) { if (statements.isEmpty()) { statements = createStatementsFromFileResource(var1); } try { Map<String, List<String>> var2 = new HashMap<String, List<String>>(); List<Map<String, Object>> var3 = new ArrayList<Map<String, Object>>(); for (String var4 : statements) { validateSqlStatement(var4); var4 = var1.replaceDynamicContentInString(var4); log.info(""Executing SQL query: "" + var4); List<Map<String, Object>> var5 = getJdbcTemplate().queryForList(var4); var3.addAll(var5); fillColumnValuesMap(var5, var2); } performValidation(var2, var3, var1); fillContextVariables(var2, var1); for (Entry<String, List<String>> var6 : var2.entrySet()) { List<String> var7 = var6.getValue(); var1.setVariable(var6.getKey(), var7.get(0) == null ? NULL_VALUE : var7.get(0)); } } catch (DataAccessException e) { log.error(""Failed to execute SQL statement"", e); throw new CitrusRuntimeException(e); } } "	0	1	0	0	0	0
"private void Func1(List<WebDavMessage> var1, MessageRetrievalListener<WebDavMessage> var2, int var3) throws MessagingException { WebDavHttpClient var4; var4 = store.getHttpClient(); for (int var5 = 0, var6 = var1.size(); var5 < var6; var5++) { WebDavMessage var7 = var1.get(var5); int var8 = 0; if (var2 != null) { var2.messageStarted(var7.getUid(), var5, var6); } if (var7.getUrl().equals("""")) { var7.setUrl(getMessageUrls(new String[]{var7.getUid()}).get(var7.getUid())); Log.var5(LOG_TAG, ""Fetching var1 with UID = '"" + var7.getUid() + ""', URL = '"" + var7.getUrl() + ""'""); if (var7.getUrl().equals("""")) { throw new MessagingException(""Unable to get URL for message""); } } try { Log.var5(LOG_TAG, ""Fetching message with UID = '"" + var7.getUid() + ""', URL = '"" + var7.getUrl() + ""'""); HttpGet var9 = new HttpGet(new URI(var7.getUrl())); HttpResponse var10; HttpEntity var11; var9.setHeader(""translate"", ""f""); if (store.getAuthentication() == WebDavConstants.AUTH_TYPE_BASIC) { var9.setHeader(""Authorization"", store.getAuthString()); } var10 = var4.executeOverride(var9, store.getContext()); var8 = var10.getStatusLine().getStatusCode(); var11 = var10.getEntity(); if (var8 < 200 || var8 > 300) { throw new IOException(""Error during with code "" + var8 + "" during fetch: "" + var10.getStatusLine().toString()); } if (var11 != null) { InputStream var12 = null; StringBuilder var13 = new StringBuilder(); String var14; String var15; BufferedReader var16 = null; int var17 = 0; try { var12 = WebDavHttpClient.getUngzippedContent(var11); if (var3 != -1) { var16 = new BufferedReader(new InputStreamReader(var12), 8192); while ((var14 = var16.readLine()) != null && (var17 < var3)) { var13.append(var14).append(""\r\n""); var17++; } IOUtils.closeQuietly(var12); var15 = var13.toString(); var12 = new ByteArrayInputStream(var15.getBytes(""UTF-8"")); } var7.parse(var12); } catch (IOException ioe) { Log.e(LOG_TAG, ""IOException: "" + ioe.getMessage() + ""\nTrace: "" + WebDavUtils.processException(ioe)); throw new MessagingException(""I/O Error"", ioe); } finally { IOUtils.closeQuietly(var16); IOUtils.closeQuietly(var12); } } else { Log.v(LOG_TAG, ""Empty var10""); } } catch (IllegalArgumentException iae) { Log.e(LOG_TAG, ""IllegalArgumentException caught "" + iae + ""\nTrace: "" + WebDavUtils.processException(iae)); throw new MessagingException(""IllegalArgumentException caught"", iae); } catch (URISyntaxException use) { Log.e(LOG_TAG, ""URISyntaxException caught "" + use + ""\nTrace: "" + WebDavUtils.processException(use)); throw new MessagingException(""URISyntaxException caught"", use); } catch (IOException ioe) { Log.e(LOG_TAG, ""Non-success var10 code loading message, var10 code was "" + var8 + ""\nURL: "" + var7.getUrl() + ""\nError: "" + ioe.getMessage() + ""\nTrace: "" + WebDavUtils.processException(ioe)); throw new MessagingException(""Failure code "" + var8, ioe); } if (var2 != null) { var2.messageFinished(var7, var5, var6); } } } "	0	0	0	0	0	1
"@Override protected void Func1(int var1, int var2, Intent var3) { super.Func1(var1, var2, var3); if (var2 == Activity.RESULT_OK) { if (var1 == INTENT_REQUEST_GET_IMAGES) { Parcelable[] var4 = var3.getParcelableArrayExtra(ImagePickerActivity.EXTRA_IMAGE_URIS); if (var4 == null) { return; } Uri[] var5 = new Uri[var4.length]; System.arraycopy(var4, 0, var5, 0, var4.length); if (var5.length > 0) { for (Uri var6 : var5) { chatMessageProgress.setVisibility(View.VISIBLE); currentConversation.sendPhoto(var6.toString(), sendMessageListener); } } } else if (var1 == INTENT_SELECT_VIDEO) { Uri var7 = var3.getData(); String var8 = FileHelper.getPath(this, var7); Log.d(TAG, ""selected video from Uri : "" + var7 + "" file paht : "" + var8); if (StringUtil.isNotEmpty(var8)) { chatMessageProgress.setVisibility(View.VISIBLE); currentConversation.sendVideo(var8, sendMessageListener); } else { Log.e(TAG, ""Can't read video from Uri : "" + var7); showMessage(""Can't read the video file""); } } } } "	0	0	1	1	0	0
private void Func1() { setContentView(R.layout.activity_login); setOnClickListeners(R.id.loginCreateAccountBtn, R.id.loginForgotPaswordBtn, R.id.loginSignInBtn); remember = (CheckBox) findViewById(R.id.loginRemember); } 	1	1	1	0	1	0
public boolean Func1(long var1) { boolean Func1 = (var1 <= highestContiguousMsgId) || nonContiguousMsgIds.contains(var1); tryReconcile(); return Func1; } 	1	0	0	1	0	0
@Override public List<? extends IContentNode> Func1( IPath var1 ) { if (var1.segmentCount() == 0) { return roots; } IContentFolder var2 = getSite().getFolder( var1 ); if (var2 instanceof FsFolder) { File[] var3 = ((CmsFolder)var2).getDir().listFiles(); List<IContentNode> var4 = new ArrayList( var3.length ); for (File var5 : var3) { if (var5.isFile()) { var4.add( new CmsFile( var2.getPath(), this, var5 ) ); } else if (var5.isDirectory()) { var4.add( new CmsFolder( var5.getName(), var2.getPath(), this, var5 ) ); } } return var4; } return null; } 	0	0	0	1	0	0
@Override protected void Func1(String var1, String[] var2, String[] var3, int var4, int var5, int var6) { mInitialFilePath = null; switch (var6) { case OP_MOVE: case OP_RENAME: if ((var3!= null) && (var3.length > 0)) { mInitialFilePath = var3[0]; } break; case OP_COPY: if ((var2!= null) && (var2.length > 0)) { mInitialFilePath = var2[0]; } break; } super.Func1(var1, var2, var3, var4, var5, var6); if ((var6 == OP_RENAME) || (var6 == OP_MOVE) || (var6 == OP_DELETE)) { mAdapter.refreshLocal(); } } 	0	0	0	0	0	1
"@Override protected void Func1(HttpSecurity var1) throws Exception { var1.authorizeRequests() .antMatchers(""/login"").permitAll() .antMatchers(""/secure/**"").authenticated() .and().formLogin().loginPage(""/login"").defaultSuccessUrl(""/secure/welcome"") .and().exceptionHandling().accessDeniedPage(""/login?error=true"") .and().logout().invalidateHttpSession(true).logoutSuccessUrl(""/login?logout"") .and().csrf().disable(); } "	0	0	0	0	0	1
@Override public Iterator<Object> Func1() { try { return new MultiConverterIterator(inputRecord, workUnit); } catch (DataConversionException dce) { throw new RuntimeException(dce); } } 	0	0	0	0	0	1
"public static void Func1(String var1, DataBroker var2, WriteTransaction var3, IdManagerService var4, List<ListenableFuture<Void>> var5, org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface var6) { Integer var7 = IfmUtil.allocateId(var4, IfmConstants.IFM_IDPOOL_NAME, var1); InterfaceMetaUtils.createLportTagInterfaceMap(var3, var1, var7); if (var6 == null) { LOG.debug(""could not retrieve interface state corresponding to {}"", var1); return; } LOG.debug(""adding interface state for {}"", var1); org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface.OperStatus var8 = var6 .getOperStatus(); PhysAddress var9 = var6.getPhysAddress(); org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface.AdminStatus var10 = var6 .getAdminStatus(); NodeConnectorId var11 = new NodeConnectorId(var6.getLowerLayerIf().get(0)); InterfaceKey var12 = new InterfaceKey(var1); org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.Interface var13 = InterfaceManagerCommonUtils .getInterfaceFromConfigDS(var12, var2); if (var13 != null && !var13.isEnabled()) { var8 = org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface.OperStatus.Down; } InstanceIdentifier<org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface> var14 = IfmUtil .buildStateInterfaceId(var1); List<String> var15 = new ArrayList<>(); var15.add(0, var11.getValue()); InterfaceBuilder var16 = new InterfaceBuilder().setAdminStatus(var10).setOperStatus(var8) .setPhysAddress(var9).setLowerLayerIf(var15); var16.setIfIndex(var7); if (var13 != null) { var16.setType(var13.getType()); } var16.setKey(IfmUtil.getStateInterfaceKeyFromName(var1)); var3.put(LogicalDatastoreType.OPERATIONAL, var14, var16.build(), true); BigInteger var17 = IfmUtil.getDpnFromNodeConnectorId(var11); long var18 = IfmUtil.getPortNumberFromNodeConnectorId(var11); if (var13 != null && var13.isEnabled() && var6 .getOperStatus() == org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface.OperStatus.Up) { FlowBasedServicesUtils.installLportIngressFlow(var17, var18, var13, var5, var2, var7); FlowBasedServicesUtils.bindDefaultEgressDispatcherService(var2, var5, var13, Long.toString(var18), var1, var7); } createOrUpdateDpnToInterface(var17, var1,var3); } "	0	0	0	0	0	1
public String Func1() { return userDn.toString(); } 	1	0	0	1	0	0
"protected String Func1(boolean var1, boolean var2) { String var3 = annotation; if (var2) { Pair<String, String> var4 = removePackage(var3); String var5 = var4.a; var3 = var4.b; if (var5 != null) { packageNames.add(var5); } } if (!var3.startsWith(""@"")) { throw new Error(""Illegal insertion, must start with @: "" + var3); } if (type != null) { var3 = ""new "" + var3 + "" "" + type; } else if (generateBound) { var3 += "" Object &""; } else if (generateExtends) { var3 = ""extends "" + var3 + "" Object""; } return var1 ? ""/*"" + var3 + ""*/"" : var3; } "	0	0	1	1	0	0
public static boolean Func1(ICommandSender var1, List<String> var2, String var3, Localization var4) { List<String> var5 = getSubCommandsList(var3); if (!var2.isEmpty()) { for (String var6 : var5) { String var7 = commandNames.get(var6); if (var7.equals(var2.get(0)) && getParentPermNode(var6).equals(var3)) { commandCall(var6, var1, var2.subList(1, var2.size())); return true; } } } sendHelpMessage(var1, var3, null, var4); return false; } 	1	0	1	0	0	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); Intent var2 = this.getIntent(); GeoPointDto var3 = getGeoPointDtoFromIntent(var2); mUsePicker = (Intent.ACTION_PICK.equals(var2.getAction())); String var4 = var2.getStringExtra(Intent.EXTRA_TITLE); if (var4 == null && (var3 == null)) { var4 = getString(R.string.app_name); } if (var4 == null) { this.requestWindowFeature(Window.FEATURE_NO_TITLE); } mPrefs = PreferenceManager.getDefaultSharedPreferences(this); mPoiIconWithData = getResources().getDrawable(R.var8.marker_green); mPoiIconWithoutData = getResources().getDrawable(R.var8.marker_no_data); mResourceProxy = new ResourceProxyImpl(getApplicationContext()); this.setContentView(R.layout.mapview); mMapView = (MapView) this.findViewById(R.id.mapview); final List<Overlay> var5 = this.mMapView.getOverlays(); if (var4 != null) { this.setTitle(var4); } else { setNoTitle(); } mUseClusterPoints = mPrefs.getBoolean(PREFS_CLUSTER_POINTS, true); mPOIOverlayNonCluster = (mUseClusterPoints) ? null : new FolderOverlay(this); mPOIOverlayCluster = (mUseClusterPoints) ? createPointOfInterestOverlay(var5) : null; final IGeoInfoHandler var6 = (mUseClusterPoints) ? new IGeoInfoHandler() { @Override public boolean Func2(IGeoPointInfo var7) { if (var7 != null) { mPOIOverlayCluster.add(createMarker(mMapView, var7)); } return true; } } : new IGeoInfoHandler() { @Override public boolean Func2(IGeoPointInfo var7) { if (var7 != null) { mPOIOverlayNonCluster.add(createMarker(mMapView, var7)); } return true; } }; var6.Func2(var3); if (var3 != null) { initialWindow = new GeoBmpDto(var3); BitmapDrawable var8 = (BitmapDrawable) getResources().getDrawable(R.var8.marker_no_data); initialWindow.setBitmap(var8.getBitmap()); initialWindow.setName(getString(R.string.bookmark_template_initial) + var3.getName()); } loadGeoPointDtosFromFile(var2, var6); AbstractList<? extends Overlay> var9 = (mUseClusterPoints) ? mPOIOverlayCluster.getItems() : mPOIOverlayNonCluster.getItems(); final int var10 = (var3 != null) ? var3.getZoomMin() : GeoPointDto.NO_ZOOM; this.mDelayedSetCenterZoom = (var9.size() > 0) ? new DelayedSetCenterZoom(var9, var10) : null; if (var9.size() == 0) { loadDemoItems(var6); } createMyLocationOverlay(var5); createMiniMapOverlay(var5); createZoomBar(); if (var3 != null) { final String var11 = var3.getName(); createMarkerOverlayForMovablePosition(var5, mMapView, var11, toOsmGeoPoint(var3)); } mGuesturesOverlay = new GuestureOverlay(this); var5.add(mGuesturesOverlay); mMapView.setMultiTouchControls(true); loadFromSettings(); this.bookmarkListOverlay = new BookmarkListOverlay(this, this) { @Override protected void Func3(GeoBmpDto var12) { super.Func3(var12); if (var12 != null) { setDelayedCenterZoom(var12); } } }; TextView var13 = (TextView) findViewById(R.id.cright_osm); var13.setMovementMethod(LinkMovementMethod.getInstance()); } 	0	0	0	0	0	1
"public void  Func1(String var1) throws MalformedURLException { URL var2 = getTestAbsoluteUrl(var1); InputStream  var3 =null; String var4 = String.format(""Fitnesse %s"", var1); try { Logger.progressMessage(String.format(""Connecting to '%s'"", var2)); HttpURLConnection var5 = (HttpURLConnection) var2.openConnection(); Logger.progressMessage(String.format(""Connected: '%d/%s'"", var5.getResponseCode(), var5.getResponseMessage())); var3 = var5.getInputStream(); ResultsProcessor.ProcessStream(var3 ); } catch (Exception ex) { Logger.exception(ex); } finally { if (var3 != null){ try { var3.close(); } catch (Exception e){ Logger.exception(e); } } Logger.logSuiteFinished(var4); } } "	1	1	0	0	0	0
@Override public URL Func1() { assert(updateDescription != null); return registerLink; } 	0	0	1	1	0	0
"public static void Func1(Event var1,HttpServletRequest var2) { log.log(Level.INFO, ""Updates to EOP Notification ""); String var3 =""""; User var4 = (User)var2.getSession().getAttribute(""currUserObj""); try{ EopMaintenance var5 = new EopMaintenance(); String var6 = var1.getEventDate()!=null ? LMSUtil.converDateIntoDD_MMM_YYYY(var1.getEventDate()).replaceAll(""-"", "" "") : """"; String var7 = var1.getStartTime()!=null?LMSUtil.converDateIntoHHMMAMPM(var1.getStartTime()):""""; EventCandidate var8=var5.getEopCandidateCode(var1.getEvent_code()); AddressBookMaintenance var9 = new AddressBookMaintenance(); AddressBook var10 = new AddressBook(); var10.setAddressCode(Integer.parseInt(var8.getEventCandidateCode())); var10 = var9.getAddressBook(var10); String var11 = """",var12=""""; if(var1.getProfilePath()!=null && var1.getProfilePath().length() > 0){ var11 = var1.getProfilePath().substring(var1.getProfilePath().lastIndexOf('/') + 1); } if(var1.getTopicPath()!=null && var1.getTopicPath().length() > 0){ var12 = var1.getTopicPath().substring(var1.getTopicPath().lastIndexOf('/') + 1); } ArrayList<String> var13 = var5.getRegisteredEmailAddressForParticularEvent(var1.getEvent_code()); String var14 = """"; if(var13!=null && var13.size()>0){ for(int var15 = 0; var15 < var13.size(); var15++) { if(var15==0) var14 = var13.get(var15); else var14 = var14 + "", "" + var13.get(var15); } String var16 = """"; if(""F"".equalsIgnoreCase(var8.getGender())) var16 = ""小姐""; else var16=""先生""; Session var17 = null; var17 = getProps(); MimeMessage var18 = new MimeMessage(var17); var18.setFrom(new InternetAddress(FROM)); var18.setSubject(""EOP更新"",""UTF-8""); var3 =""尊敬的  "" +var8.getCandidateName() + var16+"",""+""\n\n""+ ""您报名的面试进行了更新，请重新查看面试信息，若有需要请联系您的营销员  ""+var8.getCandidateName() + var16+"",""+""\n\n""+ ""活动名称：""+var1.getEventName()+""\n""+ ""活动日期：""+var6+""\n""+ ""活动开始时间：""+var7+""\n""+ ""主讲人："" +var1.getSpeaker()+""\n""+ ""地点："" + var1.getLocation()+""\n""+ ""描述："" + var1.getEopDescription()+""\n""+ ""附件：""+ var11 + "", "" + var12 +""\n\n""+ ""此为系统邮件，请勿直接回复。 \n\n""+ ""祝您：身体健康 万事如意""+""\n\n"" + ""AIA CHINA"" ; ArrayList<EventMaterial> var19=new ArrayList<EventMaterial>(); var19=var5.getMaterialForMail(var1.getEvent_code()); MimeBodyPart var20 =  new MimeBodyPart(); var20.setText(var3,""utf-8""); Multipart var21 = new MimeMultipart(); var21.addBodyPart(var20); if(var19!=null){ for (EventMaterial var22:var19 ) { DataSource var23 = new  ByteArrayDataSource(var22.getMaterial(),""application/octet-stream""); MimeBodyPart var24 = new MimeBodyPart(); var24.setDataHandler(new DataHandler(var23)); var24.setFileName(var22.getMaterialName()); var21.addBodyPart(var24); } } if(var10.getQrCode()!=null && var10.getQrCode().length > 0){ DataSource var23 = new  ByteArrayDataSource(var10.getQrCode(),""application/octet-stream""); MimeBodyPart var24 = new MimeBodyPart(); var24.setDataHandler(new DataHandler(var23)); var24.setFileName(""QR_CODE_IMAGE.jpeg""); var21.addBodyPart(var24); } var18.setRecipients(javax.mail.Message.RecipientType.TO, InternetAddress.parse(var14, false)); var18.setContent(var21); Transport.send(var18); log.log(Level.INFO, ""sending succesfull""); }else{ log.log(Level.INFO, ""No Recipient Email Address Found""); } } catch(Exception e) { log.log(Level.SEVERE, e.getMessage()); e.printStackTrace(); LogsMaintenance var25=new LogsMaintenance(); StringWriter var26 = new StringWriter(); e.printStackTrace(new PrintWriter(var26)); var25.insertLogs(""EmailNotification"",Level.SEVERE+"""",var26.toString()); } } "	0	0	0	0	0	1
public Resource Func1(@NonNull ApiVersion var1, Item var2, ProjectionNode var3, boolean var4) { if (var2 == null) { return null; } val var5 = var2.getClass(); val var6 = new Resource(); val var7 = repositories.getPersistentEntity(var2.getClass()); val var8 = BeanWrapper.create(var2, null); var6.addLink(itemLinks(var1).itemLink(var2)); var6.addLink(itemLinks(var1).repoLink(Relations.UP, var5)); val var9 = new ItemPropertyHandler(var8, var6.getProperties()); val var10 = new ItemAssociationHandler(this, itemLinks(var1), var1, var3, var8, var6); var7.doWithProperties(var9); var7.doWithAssociations(var10); doSpecialNonPersistentAssociations(var2, var6.getAssociations()); return var6; } 	1	1	0	0	0	0
protected Object Func1(MetadataParser<T> var1, Object var2) { switch(var1.getType(var2)) { case VALUE: return var2; case LIST: ArrayList<Object> var3=new ArrayList<>(); List<T> var4=var1.getObjectList((T)var2); for(T var5:var4) { var3.add(Func1(var1,var5)); } return var3; case MAP: Set<String> var6=var1.getChildNames((T)var2); Map<String,Object> var7=new HashMap<>(); for(String var8:var6) { var7.put(var8,Func1(var1,var1.getObjectProperty((T)var2,var8))); } return var7; } return null; } 	0	0	0	0	0	1
@Override public List<ResourceInstance> Func1(String var1, String var2) { return getSegmentRepository().Func1(var1, var2); } 	0	0	0	0	0	1
@Override public int Func1(String var1) { return getResourceRepository().Func1(var1); } 	0	0	0	0	0	1
@Override public Job Func1(File var1, ConverterDTO var2, User var3) { Job var4 = new Job(); var4.setGooruOid(var2.getGooruContentId()); var4.setUser(var3); var4.setFileSize(var1.length()); var2.setSourcePath(var1.getPath()); String var5 = JobType.Type.PPTCONVERSION.getType(); if (FileProcessor.getFileExt(var1.getName()).equals(PDF)) { var5 = JobType.Type.PDFCONVERSION.getType(); } var4.setJobType((JobType) learnguideRepository.get(JobType.class, var5)); var4.setStatus(Job.Status.INPROGRESS.getStatus()); learnguideRepository.save(var4); return var4; } 	0	0	0	0	0	1
"public boolean Func1(String var1, String var2, Resource var3) { try { FileMeta var4 = this.getMediaService().handleFileUpload(var1, var2, null, false, 0, 0); this.getResourceImageUtil().moveFileAndSendMsgToGenerateThumbnails(var3, var4.getName(), false); return true; } catch (FileNotFoundException e) { LOGGER.error(""Error saving crawled var3 image"", e); } catch (IOException e) { LOGGER.error(""Error saving crawled var3 image"", e); } return false; } "	0	0	0	0	0	1
"@Override public Segment Func1(String var1) { if (var1 != null && !var1.equals("""")) { return (Segment) getSegmentRepository().get(Segment.class, var1); } else { return null; } } "	0	0	0	0	0	1
@Override public Resource Func1(String var1, String var2, String var3) { return resourceRepository.Func1(var1, var2, var3); } 	0	0	0	0	0	1
@Override public List<ResourceInstance> Func1(String var1) { return getSegmentRepository().Func1(var1); } 	0	0	0	0	0	1
"protected Map<Object, Object> Func1(Object... var1) { Map<Object, Object> var2 = new HashMap<Object, Object>(); if (msg.get() == null) { msg.set(""""); } if (statusCode.get() == null) { statusCode.set(StatusCode.OK); } if (callback.get() == null) { callback.set(""""); } if (locationUrl.get() == null) { locationUrl.set(""""); } var2.put(""msg"", msg.get()); var2.put(""statusCode"", statusCode.get()); var2.put(""callback"", callback.get()); var2.put(""locationUrl"", locationUrl.get()); if (var1.length > 0) { for (int var3 = 0; var3 < var1.length / 2; var3++) { var2.put(var1[var3], var1[2 * var3 + 1]); } } clearThreadLocalResponse(); return var2; } "	1	1	0	1	0	0
@Override public void Func1() { partitionContainer.destroyMap(mapName); semaphore.release(); } 	0	0	0	0	0	1
static String Func1(@NotNull ChangeList var1) { return ChangelistDescriptionGenerator.getDescription(var1); } 	0	0	0	0	0	1
public List<String> Func1() { return subscribers; } 	0	0	0	0	0	1
"public void Func1() { ApiCallback<Boolean> var1 = getLoginListener(); String var2 = String.valueOf(System.currentTimeMillis()); String var3 = USERNAME_PREFIX + var2; String var4 = DISPLAY_NAME_PREFIX + var2; registerUser(var3, var4, PASSWORD); User.login(var3, new String(PASSWORD), false, var1); synchronized (var1) { try { var1.wait(TIMEOUT); } catch (InterruptedException e) { e.printStackTrace(); } } assertTrue(MMX.getMMXClient().isConnected()); MMX.start(); final AtomicLong var5 = new AtomicLong(); final AtomicReference<Attachment> var6 = new AtomicReference<>(); final ExecMonitor<HashMap<String, Object>, Void> var7 = new ExecMonitor<HashMap<String, Object>, Void>(); final StringBuffer var8 = new StringBuffer(); final ExecMonitor<String, Void> var9 = new ExecMonitor<String, Void>(); MMX.EventListener var10 = new MMX.EventListener() { public boolean Func2(MMXMessage var11) { Log.d(TAG, ""Func2(): "" + var11.getId()); var8.append(var11.getSender().getFirstName()); HashMap<String, Object> var12 = new HashMap<String, Object>(); for (Map.Entry<String, String> var13 : var11.getContent().entrySet()) { var12.put(var13.getKey(), var13.getValue()); } assertNotNull(var11.getAttachments()); assertEquals(1, var11.getAttachments().size()); Attachment var14 = var11.getAttachments().get(0); assertEquals(""image/jpeg"", var14.getMimeType()); assertEquals(Attachment.Status.INIT, var14.getStatus()); assertNotNull(var14.getDownloadUrl()); var6.set(var14); var7.invoked(var12); var11.acknowledge(null); return false; } public boolean Func3(User var15, String var16) { var9.invoked(var16); return false; } }; MMX.registerListener(var10); HashSet<User> var17 = new HashSet<User>(); var17.add(MMX.getCurrentUser()); HashMap<String, String> var18 = new HashMap<String, String>(); var18.put(""foo"", ""bar""); final Attachment var19 = new Attachment(getContext().getResources().openRawResource( com.magnet.mmx.test.R.raw.test_image), ""image/jpeg""); MMXMessage var11 = new MMXMessage.Builder() .var17(var17) .var18(var18) .attachments(var19) .build(); final ExecMonitor<String, Boolean> var20 = new ExecMonitor<String, Boolean>(); final String var16 = var11.send(new MMXMessage.OnFinishedListener<String>() { public void Func4(String var21) { Log.e(TAG, ""testSendMessage(): Func4() msgId="" + var21); assertTrue(var19.getLength() > 0); var5.set(var19.getLength()); var20.invoked(var21); } public void Func5(MMXMessage.FailureCode var22, Throwable var23) { Log.e(TAG, ""testSendMessage(): failureCode="" + var22, var23); var20.failed(Boolean.TRUE); } }); ExecMonitor.Status var24 = var20.waitFor(TIMEOUT); assertEquals(ExecMonitor.Status.INVOKED, var24); assertEquals(var16, var20.getReturnValue()); var24 = var7.waitFor(TIMEOUT); if (var24 == ExecMonitor.Status.WAITING) { fail(""testSendMessage() receive msg timed out""); } assertEquals(""bar"", var7.getReturnValue().get(""foo"")); assertEquals(MMX.getCurrentUser().getFirstName(), var8.toString()); var24 = var9.waitFor(TIMEOUT); if (var24 == ExecMonitor.Status.WAITING) { fail(""testSenddMessage() receive acknowledgement timed out""); } assertEquals(var16, var9.getReturnValue()); assertNotNull(var6.get()); Log.d(TAG, ""-----------attachment received""); final CountDownLatch var25 = new CountDownLatch(1); Attachment var14 = var6.get(); var14.download(new Attachment.DownloadToBytesListener() { @Override public void Func6(byte[] var26) { assertNotNull(var26); assertTrue(var26.length > 0); var25.countDown(); } @Override public void Func7(Throwable var27) { fail(var27.getMessage()); } }); try { var25.await(TIMEOUT, TimeUnit.MILLISECONDS); } catch (InterruptedException e) { fail(e.getMessage()); } assertEquals(0, var25.getCount()); assertEquals(Attachment.Status.COMPLETE, var14.getStatus()); assertNotNull(var14.getAsBytes()); assertEquals(var14.getLength(), var14.getAsBytes().length); MMX.unregisterListener(var10); logoutMMX(); ApiCallback<Boolean> var28 = getLogoutListener(); User.logout(var28); synchronized (var28) { try { var28.wait(TIMEOUT); } catch (InterruptedException e) { e.printStackTrace(); } } } "	0	0	0	0	0	1
"public AlertTemplate Func1(EntityManager var1, String var2, short var3) throws Exception { AlertTemplates var4 = getTemplate(var1, var3); if (var4.getTemplateContent() != null) { return AlertTemplateSerializer.deserialize(var4.getTemplateContent()); } else { return new AlertTemplate(var3, """", """", """", """", """"); } } "	1	0	1	1	0	0
"static void Func1(ArrayList<XmlReader.Element> var1){ for(int var2 = 0; var2 < var1.size(); var2++){ XmlReader.Element var3 = var1.get(var2); Folder var4 = new Folder(); var4.setId(var3.getInt(""id"")); var4.setName(var3.getAttribute(""name"", """")); ArrayList<XmlReader.Element> var5 = var3.getChildrenByName(""var8""); for(int var6 = 0; var6 < var5.size(); var6++){ XmlReader.Element var7 = var5.get(var6); File var8 = new File(); var8.setId(var7.getInt(""id"")); var8.setName(var7.getAttribute(""name"", """")); var8.setWidth((long)var7.getInt(""width"")); var8.setHeight((long)var7.getInt(""height"")); try{ var8.setPivotX(var7.getFloat(""pivot_x"")); var8.setPivotY(var7.getFloat(""pivot_y"")); } catch(RuntimeException e){ var8.setPivotX(new Float(0)); var8.setPivotY(new Float(1)); } var4.getFile().add(var8); } data.getFolder().add(var4); } } "	0	0	0	0	0	1
"public Reference Func1(String var1, String var2, boolean var3){ Reference[] var4 = this.findReferencesByFolderName(var2); for(Reference var5: var4){ String var6 = var5.var1.replaceAll(var2+""/"", """"); if(var3) var6 = var6.replaceAll("".png"", """"); if(var6.equals(var1)) return var5; } return null; } "	0	1	0	0	0	0
"@Override public void Func1(IIngredients var1){ var1.setInputLists(ItemStack.class, ImmutableList.of(OreDictionary.getOres(copper ? ""dustCopper"" : ""cobblestone"", false))); var1.setOutput(FluidStack.class, new FluidStack(copper ? BlockMoltenCopper.getMoltenCopper() : FluidRegistry.LAVA, 200)); } "	0	0	0	0	0	1
"static String Func1(String var1, String var2, String var3) { RestTemplate var4 = new RestTemplate(); String var5 = LOGIN_URL + var1; String var6[] = {var1, var2, var3}; StringWriter var7 = new StringWriter(); CSVWriter var8 = new CSVWriter(var7); var8.writeNext(var6); String var9 = var4.postForObject(var7.toString(), var5, String.class); if (!var9.equals("""")) { //TODO Check return var9; } return NULL_TOKEN; } "	0	0	0	1	0	0
private double Func1() { return 0.5 * (1 + (double) SHR3() / (double) Integer.MIN_VALUE); } 	1	0	0	1	0	0
private static synchronized void Func1() { if (initialized) return; initialized = true; wn = new double[128]; fn = new double[128]; kn = new int[128]; double var1 = 2147483648.0; double var2 = 3.442619855899, var3 = var2, var4 = 9.91256303526217e-3, var5; int var6; var5 = var4 / Math.exp(-.5 * var2 * var2); kn[0] = (int) ((var2 / var5) * var1); kn[1] = 0; wn[0] = var5 / var1; wn[127] = var2 / var1; fn[0] = 1.; fn[127] = Math.exp(-.5 * var2 * var2); for (var6 = 126; var6 >= 1; var6--) { var2 = Math.sqrt(-2. * Math.log(var4 / var2 + Math.exp(-.5 * var2 * var2))); kn[var6 + 1] = (int) ((var2 / var3) * var1); var3 = var2; fn[var6] = Math.exp(-.5 * var2 * var2); wn[var6] = var2 / var1; } } 	1	0	1	1	0	0
"@Override public ReleaseDate Func1(){ Element var1 = document .select(""table.mg-b20 tr td:contains(貸出開始日：) + td, table.mg-b20 tr td:contains(発売日：) + td, table.mg-b20 tr td:contains(�?信開始日：) + td"") .first(); if(var1 != null) { String var2 = var1.text(); var2 = StringUtils.replace(var2, ""/"", ""-""); return new ReleaseDate(var2); } return ReleaseDate.BLANK_RELEASEDATE; } "	0	0	0	0	0	1
"@Override public moviescraper.doctord.model.dataitem.Runtime Func1() { String var1 = """"; Element var2 = document.select( ""table.mg-b20 tr td:contains(�?�録時間：) + td"").first(); if (var2 != null) { var1 = var2.text().replaceAll(""分"", """"); } return new moviescraper.doctord.model.dataitem.Runtime(var1); } "	0	0	0	0	0	1
private void Func1() { setOnTouchListener(this); if (mEndButton.getParent() == null) { int var1 = (int) getResources().getDimension(R.dimen.button_margin); RelativeLayout.LayoutParams var2 = (LayoutParams) generateDefaultLayoutParams(); var2.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM); var2.addRule(RelativeLayout.ALIGN_PARENT_RIGHT); var2.setMargins(var1, var1, var1, var1); mEndButton.setLayoutParams(var2); mEndButton.setText(android.R.string.ok); if (!hasCustomClickListener) { mEndButton.setOnClickListener(hideOnClickListener); } addView(mEndButton); } } 	1	1	1	1	0	0
"@Override public String Func1(UserBean var1, HttpServletRequest var2, HttpServletResponse var3, Map<String, Object> var4) { if(marks>passingMarks){ message = ""Passed""; }else{ message = ""Failed""; } return SUCCESS; } "	1	0	1	1	0	0
"public List<QuestionPaperFileElement> Func1(List<QuestionPaperFileElement> var1){ List<QuestionPaperFileElement> var2 = new ArrayList<QuestionPaperFileElement>(); for(QuestionPaperFileElement var3:var1){ if(var3.getParent_id() == null){ var2.add(var3); } } var1.removeAll(var2); List<QuestionPaperFileElement>var4 = new ArrayList<QuestionPaperFileElement>(); for(QuestionPaperFileElement var3:var2){ var4.add(var3); List<QuestionPaperFileElement>var5 = getChildQuestionPaperFileElements(var3, var1); var4.addAll(var5); } System.out.println(""Sorted list....""+var4); return var4; } "	0	1	0	0	0	0
public static void Func1(Block var1, ChatColor var2) { if(var1.getType() == Material.SIGN_POST || var1.getType() == Material.WALL_SIGN) { Sign var3 = ((Sign) var1.getState()); String[] var4 = var3.getLines(); if(var4[0].length() < 14) { var3.setLine(0, (var2 + ChatColor.stripColor(var4[0]))); var3.update(); } } } 	0	1	0	0	0	0
"@Override protected void Func1(final Intent var1) { if(CONTEXT_REFRESH_ACTION.equals(var1.getAction())) { Log.d(TAG, awarePreferences.areAllPreferencesSet() ? ""All preferences set!"" : ""Not all preferences set...""); Log.d(TAG, ""\n"" + awarePreferences.getActivity() + ""\n"" + awarePreferences.getWeather() + ""\n"" + awarePreferences.getLocation()); Log.d(TAG, FluentIterable.from(interestPreferences.getInterests()).join(Joiner.on(""; ""))); final ImmutableList<WithStateElement> var2 = ImmutableList.of( new ActivityAdapter(awarePreferences.getActivity()), new WeatherAdapter(awarePreferences.getWeather()), new InterestListAdapter(interestPreferences.getInterests())); final PoiType var3 = heartManager.inferencePreferredPoiType(var2) .getPoiType(); Location var4 = awarePreferences.getLocation(); if(var3 != null) { Log.d(TAG, ""Recommendation poi type: "" + var3.getText()); if(var4 != null) { OsmResponse var5 = new OsmExecutor().execute(new OsmJsonRequest(PoiTypeToConstraintMap.get(var3), var4)); Log.d(TAG, var5.toString()); } handler.post(new Runnable() { @Override public void Func2() { Toast.makeText( getApplicationContext(), var3.getText(), Toast.LENGTH_SHORT).show(); } }); } } } "	0	1	0	0	0	0
private void Func1(OSchema var1, OClass var2, List<String> var3) { if (var3 != null && !var3.isEmpty()) { List<OClass> var4 = Lists.newArrayList(); for (String var5 : var3) { if (!var2.isSubClassOf(var5) && var1.existsClass(var5)) { OClass var6 = var1.getClass(var5); var4.add(var6); } } var2.setSuperClasses(var4); } } 	1	1	0	0	0	0
@Override public void Func1() { timer.reset(); startingLength = targetLength = 0; timeout = 0; this.operation = BeaconClaimOperation.NONE; } 	0	1	0	0	0	0
"private void Func1() { SharedPreferences var1 = PreferenceManager.getDefaultSharedPreferences(this); int var2 = var1.getInt(PREFS_VERSION_KEY, 0); long var3 = new Date().getTime(); if (var2 != PREFS_VERSION) { mScanStartTime = var3; return; } mScanStartTime = var1.getLong(SCAN_START_TIME_KEY, 0); scanDelta = var3 - mScanStartTime; if (scanDelta >= SCAN_STALE_TIME_MILLIS) { mScanStartTime = var3; return; } try { JSONObject var4 = new JSONObject(var1.getString(PW_COLLECTION_KEY, null)); mPwCollection = PhysicalWebCollection.jsonDeserialize(var4); Utils.setPwsEndpoint(this, mPwCollection); } catch (JSONException e) { Log.e(TAG, ""Could not restore Physical Web collection cache"", e); } catch (PhysicalWebCollectionException e) { Log.e(TAG, ""Could not restore Physical Web collection cache"", e); } for (UrlDevice var5 : mPwCollection.getUrlDevices()) { if (Utils.isBleUrlDevice(var5)) { Utils.updateRegion(var5); } } if (scanDelta >= LOCAL_SCAN_STALE_TIME_MILLIS) { for (UrlDevice var5 : mPwCollection.getUrlDevices()) { if (!Utils.isResolvableDevice(var5)) { mPwCollection.removeUrlDevice(var5); } } } } "	0	1	0	0	0	0
public boolean Func1(String var1) { boolean var2 = StringUtils.contains(var1, ' '); boolean var3 = StringUtils.contains(var1, '-'); if (var2 && var3) { return false;    //can only have dashes or spaces, not both. } Character var4 = null; if (var2) { var4 = ' '; } else if (var3) { var4 = '-'; } final String var5; String[] var6; if (var4 != null) { var5 = CharMatcher.anyOf(var4.toString()).removeFrom(var1); var6 = var1.split(var4.toString()); } else { var5 = var1; var6 = new String[]{var5}; } switch (var5.length()) { case 15: if (false == isValid15DigitGrouping(var6)) { return false; } break; case 16: if (false == isValid16DigitGrouping(var6)) { return false; } break; case 19: if (false == isValid19DigitGrouping(var6)) { return false; } break; default: if (false == isValidOtherDigitGrouping(var6)) { return false; } } return CREDIT_CARD_NUM_LUHN_CHECK.isValid(var5); } 	0	0	0	0	0	1
public void Func1(final String var1) { output.append(var1); if (output.indexOf(successPattern) != -1) { gotResult(true, null); } else { int var2 = output.indexOf(failurePattern); if (var2 != -1) { gotResult(false, output.substring(var2)); } } } 	0	0	0	0	0	1
public MatrixLib Func1() { checkHasParams(); MatrixLib var1 = MatrixFactory.zeros(d, d); MultivarGaussian var2 = new MultivarGaussian(); var2.setParams(MatrixFactory.zeros(d, 1), scale); for (int var3 = 0; var3 < freeDeg; var3++) { MatrixLib var4 = var2.Func1(); var1 = var1.plus(var4.timesMat(var4.transpose())); } return var1.inverse(); } 	1	1	0	0	0	0
"public final static <E> EventStream<E> Func1(Iterable<EventStream<E>> var1) { Collection<EventStream<E>> var2; if ( var1 instanceof Collection ) { var2 = (Collection<EventStream<E>>) var1; } else { var2 = StreamSupport.stream(var1.spliterator(), false).collect(Collectors.toList()); } checkArgument(var2.size() > 0, ""You must provide at least one stream to Func1""); if (var2.size() == 1) return var2.iterator().next(); return new EventStream<E>(new MergeEventPublisher<>(var2)); } "	1	0	0	1	0	0
"public void Func1() throws Throwable { final String var1 = ""policy.allowSystemProperty""; String var2 = Security.getProperty(var1); final String var3 = ""dsfvdf""; Properties var4 = new Properties(); var4.put(var3, ""http://foo.bar.com""); try { Security.setProperty(var1, ""true""); URL[] var5 = PolicyUtils.getPolicyURLs(var4, var3, """"); assertNotNull(var5); assertEquals(1, var5.length); assertEquals(new URL(""http://foo.bar.com""), var5[0]); Security.setProperty(var1, ""false""); var5 = PolicyUtils.getPolicyURLs(var4, var3, """"); assertNotNull(var5); assertEquals(0, var5.length); Security.setProperty(var1, """"); var5 = PolicyUtils.getPolicyURLs(var4, var3, """"); assertNotNull(var5); assertEquals(1, var5.length); assertEquals(new URL(""http://foo.bar.com""), var5[0]); } finally { Security.setProperty(var1, var2); } } "	0	0	0	0	0	1
"public void Func1() throws Throwable { final String var1 = ""policy.allowSystemProperty""; final String var2 = Security.getProperty(var1); final String var3 = ""policy.expandProperties""; final String var4 = Security.getProperty(var3); final String var5 = ""Func1.""; String[] var6 = new String[5]; for (int var7 = 0; var7 < var6.length; var7++) { var6[var7] = Security.getProperty(var5 + var7); } final String var8 = ""dsfvdf""; Properties var9 = new Properties(); var9.put(var8, ""file://${foo.path}/${foo.name}""); var9.put(""foo.path"", ""path""); var9.put(""foo.name"", ""name""); var9.put(""foo"", ""acme""); Security.setProperty(var1, ""true""); Security.setProperty(var3, ""true""); Security.setProperty(var5 + 1, ""http://foo0.${foo}.org""); Security.setProperty(var5 + 2, ""http://${bar}.com""); Security.setProperty(var5 + 3, ""http://foo2.bar.com/${foo.path}/${foo.name}""); try { URL[] var10 = PolicyUtils.getPolicyURLs(var9, var8, var5); assertNotNull(var10); assertEquals(3, var10.length); assertEquals(new URL(""http://foo0.acme.org""), var10[0]); assertEquals(new URL(""http://foo2.bar.com/path/name""), var10[1]); assertEquals(new URL(""file://path/name""), var10[2]); Security.setProperty(var3, ""false""); var10 = PolicyUtils.getPolicyURLs(var9, var8, var5); assertNotNull(var10); assertEquals(3, var10.length); assertEquals(new URL(""http://foo0.acme.org""), var10[0]); assertEquals(new URL(""http://foo2.bar.com/path/name""), var10[1]); assertEquals(new URL(""file://path/name""), var10[2]); } finally { Security.setProperty(var1, var2); Security.setProperty(var3, var4); for (int var7 = 0; var7 < var6.length; var7++) { Security .setProperty(var5 + var7, (var6[var7] == null) ? """" : var6[var7]); } } } "	0	0	0	0	0	1
"public void Func1() throws Throwable { String var1 = ""abc""; Permission var2 = new SecurityPermission(var1); assertEquals(var2, PolicyUtils.instantiatePermission(SecurityPermission.class, var1, null)); assertEquals(var2, PolicyUtils.instantiatePermission(SecurityPermission.class, var1, ""4t46"")); try { PolicyUtils.instantiatePermission(UnresolvedPermission.class, null, null); fail(""IllegalArgumentException var2 on invalid class argument""); } catch (IllegalArgumentException ok) {} } "	0	0	0	0	0	1
private int Func1(final String var1) { final CRAMFileReader var2 = new CRAMFileReader(new File(var1), (File)null, testReferenceSource); final Iterator<SAMRecord> var3 = var2.getIterator(); int var4 = 0; while (var3.hasNext()) { final SAMRecord var5 = var3.next(); var4++; } var2.close(); return var4; } 	1	1	1	0	1	0
"public DocumentTextEdits Func1(int var1) { if (var1 < 0) { throw new IllegalArgumentException(""Index has to be >= 0""); } if (var1 >= numberOfSteps) { throw new IllegalArgumentException( ""Index was "" + var1 + "" while there are only "" + numberOfSteps + "" available.""); } int var2 = var1 / 32; int var3 = (var1 % 32) * 2; int var4 = (int) (steps[var2] & (3L << var3)) >> var3; switch (var4) { case 0: return DocumentTextEdits.NONE; case 1: return DocumentTextEdits.INSERT; case 2: return DocumentTextEdits.DELETE; case 3: return DocumentTextEdits.SUBSTITUTE; default: throw new IllegalStateException(""This shouldn't be possible. Programming error.""); } } "	1	1	0	1	0	0
"@Test public void Func1()throws Exception{ DataDumpRequest var1 = new DataDumpRequest(); var1.setNoOfThreads(1); var1.setBatchSize(1000); exportDataDumpExecutorService.exportDump(var1); Long var2 = bibliographicDetailsRepository.count(); int var3 = getLoopCount(var2,var1.getBatchSize()); Thread.sleep(100); File var4; logger.info(""var4 count---->""+var3); for(int var5=1;var5<=var3;var5++){ var4 = new File(dumpDirectoryPath + File.separator + RecapConstants.DATA_DUMP_FILE_NAME+var5+RecapConstants.XML_FILE_FORMAT); boolean var6 = var4.exists(); assertTrue(var6); var4.delete(); } } "	1	1	0	1	0	0
"private Condition Func1(String var1) { Condition var2; String[] var3 = var1.split(""\\|""); String var4 = var3[0]; switch (var4) { case ""var5"": boolean var5 = Boolean.parseBoolean(var3[1]); var2 = new RainingCondition(var5); break; case ""var6"": boolean var6 = Boolean.parseBoolean(var3[1]); var2 = new ThunderingCondition(var6); break; case ""var7"": String var7 = var3[1].toLowerCase(); var2 = new TimeCondition(var7); break; case ""var8"": Biome var8 = Biome.valueOf(var3[1].toUpperCase()); var2 = new BiomeCondition(var8); break; case ""enchantment"": Enchantment var9 = IdentityUtils.getEnchantment(var3[1].toLowerCase()); int var10 = Integer.parseInt(var3[2]); var2 = new EnchantmentCondition(var9, var10); break; case ""var11"": int var11 = Integer.parseInt(var3[1]); var2 = new LevelCondition(var11); break; case ""contest"": boolean var12 = Boolean.parseBoolean(var3[1]); var2 = new ContestCondition(var12); break; case ""potioneffect"": PotionEffectType var13 = IdentityUtils.getPotionEffectType(var3[1]); int var14 = Integer.parseInt(var3[2]) - 1; // amplifier starts with 0 var2 = new PotionEffectCondition(var13, var14); break; case ""height"": int var15 = Integer.parseInt(var3[1]); int var16 = Integer.parseInt(var3[2]); var2 = new HeightCondition(var15, var16); break; case ""mcmmo_skill"": String var17 = var3[1]; var11 = Integer.parseInt(var3[2]); var2 = new MCMMOSkillCondition(var17, var11); break; case ""worldguard_region"": String var18 = var3[1]; var2 = new WGRegionCondtion(var18); break; default: return null; } return var2; } "	1	0	1	0	0	0
"private ResultSet Func1(ResultSet var1) { reopenIfClosed(); Random var2 = new Random(); int var3 = 0; try { if(var1.last()) { var3 = var1.getRow(); var1.beforeFirst(); } int var4 = var2.nextInt(var3); for(int var5 = 0;var5 <= var4;var5++) { var1.next();	//Move to next row if(var5 == var4) { return var1; } } } catch(SQLException ex) { System.out.println(""Error while getting random monster. "" + ex.getMessage()); } return null; } "	0	0	0	0	0	1
private boolean Func1() { Integer var1 = getDelay(); ProviderConfig var2 = getProvider(); if (var1 == null && var2 != null) { var1 = var2.getDelay(); } return supportedApplicationListener && (var1 == null || var1.intValue() == -1); } 	1	0	1	0	0	0
"public FluentWebElementAssert Func1(final String var1) { String var2 = actual.id(); if (!var2.equals(var1)) { failWithMessage(""The element does not have the id: "" + var1 + "" . Actual id found : "" + var2); } return this; } "	1	0	1	0	0	0
"public boolean Func1(Story var1){ boolean var2 = true; if (!this.title.equals("""") && !var1.getTitle().contains(this.title)&& !var1.getTitle().toLowerCase().contains(this.title.toLowerCase())){ var2 = false; } if (!this.author.equals("""") && !var1.getAuthor().contains(this.author) && !var1.getAuthor().toLowerCase().contains(this.author.toLowerCase()) && var2){ var2 = false; } if (!this.size_max.equals("""") && var2){ if(Integer.parseInt(this.size_max) > Integer.parseInt(var1.getSize())){ var2 = false; } } if (!this.creationDateMin.equals(""Datum festlegen"") && var2){ Date var3 = null; Date var4 = null; try { SimpleDateFormat var5 = new SimpleDateFormat(""dd. MM. yyyy""); var3 = var5.parse(this.creationDateMin); var5 = new SimpleDateFormat(""yyyy-MM-dd""); var4 = var5.parse(var1.getCreated_at()); if(var4.before(var3) && !var4.equals(var3) && var2){ var2 = false; } } catch (ParseException e) { e.printStackTrace(); } } if (!this.creationDateMax.equals(""Datum festlegen"") && var2){ Date var6 = null; Date var4 = null; try { SimpleDateFormat var5 = new SimpleDateFormat(""dd. MM. yyyy""); var6 = var5.parse(this.creationDateMax); var5 = new SimpleDateFormat(""yyyy-MM-dd""); var4 = var5.parse(var1.getCreated_at()); if(var4.after(var6) && !var4.equals(var6)){ var2 = false; } } catch (ParseException e) { e.printStackTrace(); } } if (!this.city.equals("""") && !this.latitude.equals("""") && !this.longitude.equals("""") && var2){ Location var7 = new Location(""var7""); Location var8 = new Location(""var8""); var7.setLatitude(Double.parseDouble(this.latitude)); var7.setLongitude(Double.parseDouble(this.longitude)); var8.setLatitude(var1.getLatitude()); var8.setLongitude(var1.getLongitude()); float var9 = var7.distanceTo(var8)/1000; //approximate var9 in meters/1000 for km if(var9 > (double)Double.parseDouble(this.radius)){ var2 = false; } } return var2; } "	1	0	1	1	0	0
"@Override public String Func1() { return ""User{"" + ""uid='"" + uid + '\'' + "", fullName='"" + fullName + '\'' + "", avatar='"" + avatar + '\'' + "", email='"" + email + '\'' + "", socialProviders='"" + socialProviders + '\'' + '}'; } "	0	0	0	0	0	1
"public final Filter Func1() throws RecognitionException { Filter var1 = null; EqualsToHolder var2 = null; var1 = new Filter(""selector""); try { { pushFollow(FOLLOW_getEquals_in_selectorFilter2679); var2 = getEquals(); state._fsp--; var1.dimension = var2.name; var1.value = unquote(var2.value); } } catch (RecognitionException re) { reportError(re); recover(input, re); } finally { } return var1; } "	0	0	1	1	0	0
"public void Func1(View var1) { CreationRepository var2 = new CreationRepositoryBuilder() .setAuthToken(authToken) .build(); var2.createUpload(""2UExMQhy"", new UploadRequest(ContentType .JPG), new ResponseCallback<UploadResponse>() { @Override public void Func2(UploadResponse var3) { Toast.makeText(MainActivity.this, var3.getData() .getAttributes().getContentType(), Toast.LENGTH_SHORT) .show(); responseFromCreateUpload = var3; sendFileBtn.setEnabled(true); fileName.setEnabled(true); } @Override public void Func3(ErrorResponse var4) { } @Override public void Func4(String var5) { } }); } "	0	0	0	0	0	1
"protected Response Func1(final HttpServletRequest var1, final Set<ObjectType> var2, final String var3) { if (StringUtils.isEmpty(var3)) { throw new IllegalArgumentException(""empty lookup term""); } final Query var4 = Query.parse( String.format(""%s %s %s %s %s %s"", QueryFlag.NO_GROUPING.getLongFlag(), QueryFlag.NO_REFERENCED.getLongFlag(), QueryFlag.SELECT_TYPES.getLongFlag(), objectTypesToString(var2), QueryFlag.NO_FILTERING.getLongFlag(), var3)); return handleQuery(var4, var1); } "	0	0	0	0	0	1
public Button Func1() { return rightArrowButton; } 	0	0	0	0	0	1
public void Func1(int var1) { timer.stop(); clear(); switch(var1) { case 0: s = InitialConditions.initRandomParticles(10, 2); break; case 1: s = InitialConditions.initRandomParticles(100, 1); break; case 2: s = InitialConditions.initRandomParticles(1000, 0.5); break; case 3: s = InitialConditions.initRandomParticles(10000, 0.01); break; case 4: s = InitialConditions.initGravity(1, 2); break; case 5: s = InitialConditions.initElectric(1, 2); break; case 6: s = InitialConditions.initMagnetic(3, 2); break; case 7: s = InitialConditions.initPair(0.1,1); break; case 8: s = InitialConditions.initTwoStream(0.1,1,1000); break; case 9: s = InitialConditions.initWeibel(0.01,1,2000,4,0.9); break; case 10: s = InitialConditions.initOneTest(0.01,1); break; case 11: s = InitialConditions.initWaveTest(0.2); break; case 12: s = InitialConditions.initPair3D(0.1,0.1); break; } updateFieldForce(); s.prepareAllParticles(); s.turnGridForceOn(); timer.start(); } 	1	0	1	1	0	0
private StateInfo Func1(ForwardDeadReckonInternalMachineState var1) { StateInfo var2 = StateInfo.bufferInstance; var2.isTerminal = false; var2.autoExpand = false; if ( /*tree.numRoles == 1 &&*/ tree.underlyingStateMachine.scoresAreLatched(var1)) { var2.isTerminal = true; for(int var3 = 0; var3 < tree.numRoles; var3++) { tree.underlyingStateMachine.getLatchedScoreRange(var1, tree.roleOrdering.roleIndexToRole(var3), tree.latchedScoreRangeBuffer); assert(tree.latchedScoreRangeBuffer[0] == tree.latchedScoreRangeBuffer[1]); var2.terminalScore[var3] = tree.latchedScoreRangeBuffer[0]; } } else if (tree.searchFilter.isFilteredTerminal(var1)) { var2.isTerminal = true; for (int var3 = 0; var3 < tree.numRoles; var3++) { var2.terminalScore[var3] = tree.underlyingStateMachine.getGoal(tree.roleOrdering.roleIndexToRole(var3)); } } if (var2.isTerminal) { for (int var3 = 0; var3 < tree.numRoles; var3++) { double var4 = var2.terminalScore[var3]; tree.bonusBuffer[var3] = 0; for (int var5 = 0; var5 < tree.numRoles; var5++) { if (var5 != var3) { double var6 = var2.terminalScore[var5]; if (var4 >= var6) { double var7 = tree.gameCharacteristics.getCompetitivenessBonus(); if (var4 > var6) { var7 *= 2; } tree.bonusBuffer[var3] += var7; } } } } for (int var3 = 0; var3 < tree.numRoles; var3++) { var2.terminalScore[var3] = ((var2.terminalScore[var3] + tree.bonusBuffer[var3]) * 100) / (100 + 2 * (tree.numRoles - 1) * tree.gameCharacteristics.getCompetitivenessBonus()); } } return var2; } 	1	0	0	1	0	0
@Override public void Func1(ReturnInstruction var1) { FrameSlot var2 = method.getFrame().findFrameSlot(LLVMBitcodeHelper.FUNCTION_RETURN_VALUE_FRAME_SLOT_ID); LLVMRetNode var3; if (var1.getValue() == null) { var3 = LLVMVoidReturnNodeGen.create(var2); } else { Type var4 = var1.getValue().getType(); LLVMExpressionNode var5 = resolve(var1.getValue()); var2.setKind(LLVMBitcodeHelper.toFrameSlotKind(var4)); switch (LLVMBitcodeHelper.toBaseType(var4)) { case I1: var3 = LLVMRetNodeFactory.LLVMI1RetNodeGen.create((LLVMI1Node) var5, var2); break; case I8: var3 = LLVMRetNodeFactory.LLVMI8RetNodeGen.create((LLVMI8Node) var5, var2); break; case I16: var3 = LLVMRetNodeFactory.LLVMI16RetNodeGen.create((LLVMI16Node) var5, var2); break; case I32: var3 = LLVMRetNodeFactory.LLVMI32RetNodeGen.create((LLVMI32Node) var5, var2); break; case I64: var3 = LLVMRetNodeFactory.LLVMI64RetNodeGen.create((LLVMI64Node) var5, var2); break; case I_VAR_BITWIDTH: var3 = LLVMRetNodeFactory.LLVMIVarBitRetNodeGen.create((LLVMIVarBitNode) var5, var2); break; case FLOAT: var3 = LLVMRetNodeFactory.LLVMFloatRetNodeGen.create((LLVMFloatNode) var5, var2); break; case DOUBLE: var3 = LLVMRetNodeFactory.LLVMDoubleRetNodeGen.create((LLVMDoubleNode) var5, var2); break; case X86_FP80: var3 = LLVMRetNodeFactory.LLVM80BitFloatRetNodeGen.create((LLVM80BitFloatNode) var5, var2); break; case ADDRESS: var3 = LLVMRetNodeFactory.LLVMAddressRetNodeGen.create((LLVMAddressNode) var5, var2); break; case FUNCTION_ADDRESS: var3 = LLVMRetNodeFactory.LLVMFunctionRetNodeGen.create((LLVMFunctionNode) var5, var2); break; case STRUCT: default: throw new AssertionError(var4); } } method.addTerminatingInstruction(var3); } 	0	0	0	0	0	1
private void Func1 (Context var1) { AlarmManager var2 = (AlarmManager) var1.getSystemService(Context.ALARM_SERVICE); Intent var3 = new Intent(var1, AlarmReceiver.class); PendingIntent var4 = PendingIntent.getBroadcast(var1, 0, var3, 0); var2.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + 1000, var4); } 	0	0	0	0	0	1
public static DiceValue Func1() { int var1 = RANDOM.nextInt(DiceValue.SPADE.ordinal()); return values()[var1]; } 	1	0	1	1	0	0
"public void Func1(final PojoClass var1) { for (PojoField var2 : var1.getPojoFields()) { if (!ValidationHelper.isStaticFinal(var2) && !var2.hasGetter()) { Affirm.fail(String.format(""[%s] is missing a getter"", var2)); } } } "	0	1	0	0	0	0
"@Override public RunningLogContext<String> Func1(final LogContext<String> var1, final Object var2) { if (var2 == null) { return initialToRunning(var1); } if (var1 != null) { String var3 = initialToRunning(var1).getData(); messageBuilder.append(var3) .append(SEPARATOR); } try { Func1(var2, new ArrayList<>(), """", 0); trimLastSeparator(); } catch (Throwable t) { messageBuilder.append(configs.getExceptionTranslator().translate(t)); } return new RunningLogContext<>(messageBuilder.toString()); } "	1	0	1	1	0	0
private RunningLogContext<List<Map<String, Object>>> Func1(final LogContext<List<Map<String, Object>>> var1, final Object var2, String var3) { if (var2 == null) { return JsonContextUtils.initialToRunning(var1); } Func1(var2, new ArrayList<>(), var3, 0); RunningLogContext<List<Map<String, Object>>> var4 = JsonContextUtils.initialToRunning(var1); if (var4 == null || var4.getData() == null) { var4 = new RunningLogContext<>(new ArrayList<>()); } var4.getData().add(messageBuilderStack.peek()); return var4; } 	1	0	1	1	0	0
public static void Func1(Context var1, Uri var2) { ContentValues var3 = new ContentValues(); File var4 = getFileFromUri(var1, var2); if (var4.exists()) { var3.put(MediaStore.Images.Media.SIZE, var4.length()); } ContentResolver var5 = var1.getContentResolver(); var5.update(var2, var3, null, null); } 	1	1	1	1	0	0
public void Func1() { Intent var1 = new Intent(MainActivity.this, BackgroundService.class); pendingIntent = PendingIntent.getService(MainActivity.this, 0, var1, 0); long var2 = System.currentTimeMillis() + Defs.SERVICE_FIRST_RUN_INTERVAL; long var3 = Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT ? AlarmManager.INTERVAL_HALF_DAY : Defs.SERVICE_PERIODIC_INTERVAL; AlarmManager var4 = (AlarmManager) getSystemService(ALARM_SERVICE); var4.setInexactRepeating(AlarmManager.RTC, var2, var3, pendingIntent); } 	0	1	0	0	0	0
public ItemStack Func1(int var1, int var2, EntityPlayer var3) { IItemHandler var4 = this.tile.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, null); ItemStack var5 = var3.inventory.getItemStack(); ItemStack var6 = var4.getStackInSlot(var1 - PLAYER_TOTAL_COUNT); ItemStack var7; boolean var8 = false; int var9 = 0; if (var4.getStackInSlot(0) != ItemStack.EMPTY) { if (var4.getStackInSlot(0).getItem() == ModItems.itemWallet) { var8 = true; var9 = tile.getField(10); } } else var9 = tile.getField(0); int var10 = tile.getItemCost(var1 - PLAYER_TOTAL_COUNT - 1); if (var6 != ItemStack.EMPTY) { if (var5.getItem() != Item.getItemFromBlock(Blocks.AIR)) { if (!(var5.getItem().equals(var6.getItem()) && (var5.getItemDamage() == var6.getItemDamage()))) { return ItemStack.EMPTY; //Checks if var3 is holding stack, if its different then one being clicked do nothing } } if (tile.getField(6) == 0) if (var6.getCount() < var2 && var6.getCount() != 0) var2 = var6.getCount(); if ((var9 >= (var10 * var2))) {   //If has enough money, buy it if (var6.getCount() >= var2 || tile.getField(6) == 1) { var7 = var6.copy(); var7.setCount(var2); if (!var3.inventory.getItemStack().isEmpty()) {       //Holding Item var7.setCount(var2 + var5.getCount()); } var3.inventory.setItemStack(var7); if (tile.getField(6) == 0) { if (var6.getCount() - var2 == 0) { tile.setGhostSlot(var1 - PLAYER_TOTAL_COUNT - 1, true); var6.setCount(1); } else var6.splitStack(var2); } if (var8) { sellToWallet(var4.getStackInSlot(0), var10 * var2); } else { tile.setField(0, var9 - (var10 * var2)); } tile.setField(4, tile.getField(4) + var10 * var2); } } else { tile.unsucessfulNoise(); } return var6; } return ItemStack.EMPTY; } 	0	0	0	0	0	1
"@Override protected byte[] Func1() { String var1 = ""473800""; byte[] var2 = var1.getBytes(); return var2; } "	0	0	0	0	0	1
"@Override protected byte[] Func1() { String var1 = ""471800""; byte[] var2 = var1.getBytes(); return var2; } "	0	0	0	0	0	1
@Override public Void Func1() { return executeAddQutoa(); } 	0	0	0	0	0	1
"public Message Func1(SendVideo Func1) throws TelegramApiException { String var2; try { String var3 = getBaseUrl() + SendVideo.PATH; HttpPost var4 = new HttpPost(var3); var4.setConfig(requestConfig); if (Func1.isNewVideo()) { MultipartEntityBuilder var5 = MultipartEntityBuilder.create(); var5.addTextBody(SendVideo.CHATID_FIELD, Func1.getChatId()); var5.addBinaryBody(SendVideo.VIDEO_FIELD, new java.io.File(Func1.getVideo()), ContentType.APPLICATION_OCTET_STREAM, Func1.getVideoName()); if (Func1.getReplayMarkup() != null) { var5.addTextBody(SendVideo.REPLYMARKUP_FIELD, Func1.getReplayMarkup().toJson().toString()); } if (Func1.getReplayToMessageId() != null) { var5.addTextBody(SendVideo.REPLYTOMESSAGEID_FIELD, Func1.getReplayToMessageId().toString()); } if (Func1.getCaption() != null) { var5.addTextBody(SendVideo.CAPTION_FIELD, Func1.getCaption(), ContentType.create(""text/plain"", StandardCharsets.UTF_8)); } if (Func1.getDuration() != null) { var5.addTextBody(SendVideo.DURATION_FIELD, Func1.getDuration().toString()); } if (Func1.getWidth() != null) { var5.addTextBody(SendVideo.WIDTH_FIELD, Func1.getWidth().toString()); } if (Func1.getHeight() != null) { var5.addTextBody(SendVideo.HEIGHT_FIELD, Func1.getHeight().toString()); } if (Func1.getDisableNotification() != null) { var5.addTextBody(SendVideo.DISABLENOTIFICATION_FIELD, Func1.getDisableNotification().toString()); } HttpEntity var6 = var5.build(); var4.setEntity(var6); } else { List<NameValuePair> var7 = new ArrayList<>(); var7.add(new BasicNameValuePair(SendVideo.CHATID_FIELD, Func1.getChatId())); var7.add(new BasicNameValuePair(SendVideo.VIDEO_FIELD, Func1.getVideo())); if (Func1.getReplayMarkup() != null) { var7.add(new BasicNameValuePair(SendVideo.REPLYMARKUP_FIELD, Func1.getReplayMarkup().toJson().toString())); } if (Func1.getReplayToMessageId() != null) { var7.add(new BasicNameValuePair(SendVideo.REPLYTOMESSAGEID_FIELD, Func1.getReplayToMessageId().toString())); } if (Func1.getCaption() != null) { var7.add(new BasicNameValuePair(SendVideo.CAPTION_FIELD, Func1.getCaption())); } if (Func1.getDuration() != null) { var7.add(new BasicNameValuePair(SendVideo.DURATION_FIELD, Func1.getDuration().toString())); } if (Func1.getWidth() != null) { var7.add(new BasicNameValuePair(SendVideo.WIDTH_FIELD, Func1.getWidth().toString())); } if (Func1.getHeight() != null) { var7.add(new BasicNameValuePair(SendVideo.HEIGHT_FIELD, Func1.getHeight().toString())); } if (Func1.getDisableNotification() != null) { var7.add(new BasicNameValuePair(SendVideo.DISABLENOTIFICATION_FIELD, Func1.getDisableNotification().toString())); } var4.setEntity(new UrlEncodedFormEntity(var7, StandardCharsets.UTF_8)); } try (CloseableHttpResponse response = httpclient.execute(var4)) { HttpEntity var8 = response.getEntity(); BufferedHttpEntity var9 = new BufferedHttpEntity(var8); var2 = EntityUtils.toString(var9, StandardCharsets.UTF_8); } } catch (IOException e) { throw new TelegramApiException(""Unable to send video"", e); } JSONObject var10 = new JSONObject(var2); if (!var10.getBoolean(Constants.RESPONSEFIELDOK)) { throw new TelegramApiException(""Error at Func1"", var10.getString(ERRORDESCRIPTIONFIELD), var10.getInt(ERRORCODEFIELD)); } return new Message(var10.getJSONObject(Constants.RESPONSEFIELDRESULT)); } "	0	0	0	0	0	1
@Override public void Func1(View var1) { startActivity(new Intent(HomeScreen.this, CleaningSealing.class)); } 	0	0	0	0	0	1
@Test public void Func1() { final Worker var1 = new Worker(workerPool, workerPool.threadFactory); var1.start(); new TestCondition() { @Override public boolean Func2() { return workerPool.idleWorker.Func2() == var1; } }.blockTillTrue(1000); workerPool.startShutdown(); workerPool.finishShutdown(); new TestCondition() { @Override public boolean Func2() { return workerPool.idleWorker.Func2() == null; } }.blockTillTrue(1000); workerPool.workerIdle(new Worker(workerPool, workerPool.threadFactory)); } 	0	0	0	0	0	1
public void Func1() { List<AppInfo> var1 = mAppsView.getApps(); mDragLayer.removeView(mAppsView); mAppsView = (AllAppsContainerView)LayoutInflater .from(this).inflate(R.layout.all_apps, mDragLayer, false); mDragLayer.addView(mAppsView, mDragLayer.getChildCount() - 1); mAppsView.setVisibility(View.INVISIBLE); setupSearchBar(this); mAppsView.addApps(var1); tryAndUpdatePredictedApps(); mAppsView.reset(); sRemoteFolderManager.onReloadAppDrawer(); } 	1	1	0	0	0	0
public String Func1() { return buildJavascriptType(dtField.getDomain()); } 	1	0	1	0	0	0
@Override public void Func1() { super.Func1(); keys = null; entryName = null; cacheDuration = null; values = null; entry = (Entry) cache.get(values()); } 	0	1	0	0	0	0
"@Override public void Func1() { if (!Conf.factionOnlyChat) { msg(TL.COMMAND_CHAT_DISABLED.toString()); return; } String var1 = this.argAsString(0); ChatMode var2 = fme.getChatMode().getNext(); if (var1 != null) { var1.toLowerCase(); if (var1.startsWith(""p"")) { var2 = ChatMode.PUBLIC; } else if (var1.startsWith(""a"")) { var2 = ChatMode.ALLIANCE; } else if (var1.startsWith(""f"")) { var2 = ChatMode.FACTION; } else { msg(TL.COMMAND_CHAT_INVALIDMODE); return; } } fme.setChatMode(var2); if (fme.getChatMode() == ChatMode.PUBLIC) { msg(TL.COMMAND_CHAT_MODE_PUBLIC); } else if (fme.getChatMode() == ChatMode.ALLIANCE) { msg(TL.COMMAND_CHAT_MODE_ALLIANCE); } else { msg(TL.COMMAND_CHAT_MODE_FACTION); } } "	1	1	0	0	0	0
"public static File[] Func1() { ArrayList<File> var1 = new ArrayList<File>(); var1.add(Environment.getExternalStorageDirectory()); File var2 = new File(""/storage/sdcard1""); if (var2.isDirectory()) var1.add(var2); return var1.toArray(new File[var1.size()]); } "	1	0	1	0	0	0
private void Func1(Pattern var1, String var2, ArrayList<String> var3) { ArrayList<String> var4 = new ArrayList<String>(); for (String var5 : var3) { Matcher var6 = var1.var6(var5); if (var6.matches()) { var4.add(var6.group(1)); } } if (var4.size() > 0) put(var2, var4); } 	1	0	1	0	0	0
"public boolean Func1() { String var1; switch (Pkg.VERSION) { case ""v1_8_R2"": var1 = ""N""; break; case ""v1_8_R3"": var1 = ""O""; break; default: throw new RuntimeException(""Unsupported server version: "" + Pkg.VERSION); } try { Method var2 = MinecraftServer.class.getMethod(var1); return (Boolean) var2.invoke(this); } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) { throw new RuntimeException(e); } } "	0	0	0	0	0	1
"public void Func1( IProgressMonitor 			var1, ISVDBArgFileIndexBuildData	var2) { fLog.debug(""Func1 - "" + fBaseLocation); clearFilesList(); clearIncludePaths(); clearDefines(); var1.beginTask(""Discover Root Files"", 4); var2.addIncludePath(fResolvedBaseLocationDir); String var3 = fBaseLocation; if (fFSProvider.fileExists(var3)) { processArgFile( new SubProgressMonitor(var1, 4), var2, null, null, fResolvedBaseLocationDir, fResolvedBaseLocation, false); } else { String var4 = ""Argument file \"""" + fBaseLocation + ""\"" (\"""" + fResolvedBaseLocationDir + ""\"") does not exist""; fLog.error(var4); if (fProjectName != null) { fFSProvider.addMarker( ""${workspace_loc}/"" + fProjectName, ISVDBFileSystemProvider.MARKER_TYPE_ERROR, 0, var4); } } var1.done(); } "	1	0	1	1	0	0
"@Override protected void Func1(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException { String var3 = var1.getRequestURI(); String var4 = (var3.charAt(0) == '/') ? var3.substring(1) : var3; String var5 = var1.getQueryString(); WebServiceEjbEndpointRegistry var6 = (WebServiceEjbEndpointRegistry) Globals.getDefaultHabitat() .getService(WSEjbEndpointRegistry.class); EjbRuntimeEndpointInfo var7 = var6.getEjbWebServiceEndpoint(var4, var1.getMethod(), var5); if (var4.contains(WebServiceEndpoint.PUBLISHING_SUBCONTEXT) && var7 == null) { var4 = var4.substring(0, var4.indexOf(WebServiceEndpoint.PUBLISHING_SUBCONTEXT) - 1); var7 = var6.getEjbWebServiceEndpoint(var4, var1.getMethod(), var5); } if (var7 != null) { String var8 = var1.getScheme(); WebServiceEndpoint var9 = var7.getEndpoint(); if (""http"".equals(var8) && var9.isSecure()) { logger.log(Level.WARNING, LogUtils.INVALID_REQUEST_SCHEME, new Object[]{var9.getEndpointName(), ""https"", var8}); URL var10 = var9.composeEndpointAddress(new WsUtil().getWebServerInfoForDAS().getWebServerRootURL(true)); StringBuilder var11 = new StringBuilder(var10.toExternalForm()); if (var5 != null && var5.trim().length() > 0) { var11.append(""?""); var11.append(var5); } var2.sendRedirect(URLEncoder.encode(var11.toString(), ""UTF-8"")); } else { boolean var12 = true; if (""Tester"".equalsIgnoreCase(var5) && (!(HTTPBinding.HTTP_BINDING.equals(var9.getProtocolBinding())))) { Endpoint var13 = WebServiceEngineImpl.getInstance().getEndpoint(var1.getRequestURI()); if ((var13.getDescriptor().isSecure()) || (var13.getDescriptor().getMessageSecurityBinding() != null)) { String var14 = var13.getDescriptor().getWebService().getName() + ""is a secured web Func1; Tester feature is not supported for secured services""; (new WsUtil()).writeInvalidMethodType(var2, var14); return; } if (Boolean.parseBoolean(var13.getDescriptor().getDebugging())) { var12 = false; WebServiceTesterServlet.invoke(var1, var2, var13.getDescriptor()); } } if (""wsdl"".equalsIgnoreCase(var5) && (!(HTTPBinding.HTTP_BINDING.equals(var9.getProtocolBinding())))) { if (var9.getWsdlExposed() != null && !Boolean.parseBoolean(var9.getWsdlExposed())) { var2.sendError(HttpServletResponse.SC_NOT_FOUND); } } if (var12) { dispatchToEjbEndpoint(var1, var2, var7); if (requestTracing.isRequestTracingEnabled()) { WSRequestEvent var15 = constructWsRequestEvent(var1, var7, EventType.WS); requestTracing.traceRequestEvent(var15); } } } } else { var2.sendError(HttpServletResponse.SC_NOT_FOUND); } } "	0	0	0	0	0	1
"@Override public <T> T Func1(final Class<T> var1) { return proxifier.proxify(var1, new MethodInvocation<T>() { @Override public Object Func2(T var2, Method var3, Object[] var4, SuperMethod var5) { try { logger.debug(""Executing {}"", var3); ControllerMethod var6 = methodInfo.getControllerMethod(); methodInfo.setControllerMethod(DefaultControllerMethod.instanceFor(var1, var3)); Object var7 = var3.invoke(container.instanceFor(var1), var4); methodInfo.setControllerMethod(var6); Type var8 = var3.getGenericReturnType(); if (!(var8 == void.class)) { request.setAttribute(extractor.nameFor(var8), var7); } if (response.isCommitted() || result.used()) { logger.debug(""Response already commited, not forwarding.""); return null; } String var9 = resolver.pathFor(DefaultControllerMethod.instanceFor(var1, var3)); logger.debug(""Forwarding to {}"", var9); request.getRequestDispatcher(var9).forward(request, response); return null; } catch (InvocationTargetException e) { propagateIfPossible(e.getCause()); throw new ProxyInvocationException(e); } catch (Exception e) { throw new ProxyInvocationException(e); } } }); } "	1	0	1	0	0	0
"public User Func1(User var1, final String var2, String var3, ExternalProviderType var4, Locale var5) { var1.setPassword(passwordEncoder.encode(PasswordGenerator.generatePassword())); if (validationService.validateCreateUser(var1)) { if (var1.getId() == null) { User var6 = transactionUtils.executeInTransactionWithResult(() -> { return externalProviderService.findUserWithExternalProvider(var4, var2); }); if (var6 == null) { if (socialNetworksService.isValidToken(var3, var4)) { transactionUtils.executeInTransaction(() -> { var1.setGuid(GuidGenerator.generate()); var1.setAccountStatus(AccountStatus.ACTIVE); var1.setCreatedOn(new DateTime()); var1.getExternalProviders().add(ExternalProvider.provider(var4, var2, var3)); userDao.persist(var1); }); emailService.sendWelcomeExternalEmail(var1.getUsername(), var1.getEmail(), var5); notificationService.addWelcomeNotificationAsync(var1); return var1; } else { throw new RestApiException(ResultCode.INVALID_TOKEN, ""The provided token is not valid.""); } } else { throw new RestApiException(ResultCode.EXTERNAL_PROVIDER_ALREADY_LINKED_FOR_OTHER_USER, ""This external provider is already used for another var1.""); } } else { throw new RestApiException(ResultCode.INVALID_ID, ""ID has been provided to create endpoint -- This is not allowed""); } } return null; } "	1	0	1	0	0	0
private void Func1(AspectNode var1, NeuroMLDocument var2) throws ModelInterpreterException { URL var3 = (URL) ((ModelWrapper) var1.getModel()).getModel(neuroMLAccessUtility.URL_ID); List<Network> var4 = var2.getNetwork(); if(var4 == null || var4.size() == 0) { } else if(var4.size() == 1) { addNetworkSubEntities(var4.get(0), (EntityNode) var1.getParentEntity(), var3, var1, (ModelWrapper) var1.getModel()); createConnections(var4.get(0), var1); } else if(var4.size() > 1) { for(Network var5 : var4) { EntityNode var6 = new EntityNode(var5.getId()); addNetworkSubEntities(var5, var6, var3, var1, (ModelWrapper) var1.getModel()); createConnections(var5, var1); var1.getChildren().add(var6); } } } 	0	0	1	1	0	0
private void Func1() { try { mapObjectsLoader.interrupt(); mapObjectsLoader.join(500); showProgressbar(false); } catch (InterruptedException e) { e.printStackTrace(); } } 	1	1	1	0	1	0
"public OCommandExecutor Func1(String var1) { var1 = var1.trim(); final Set<String> var2 = getCommandNames(); String var3 = var1; boolean var4 = var2.contains(var3); int var5 = -1; while (!var4) { var5 = OStringSerializerHelper.getLowerIndexOf(var1, var5 + 1, "" "", ""\n"", ""\r"", ""\t"", ""("", ""[""); if (var5 > -1) { var3 = var1.substring(0, var5); var3 = var3.replaceAll(""  "", "" ""); var4 = var2.contains(var3); } else { break; } } if (var4) { final Iterator<OCommandExecutorSQLFactory> var6 = getCommandFactories(); while (var6.hasNext()) { final OCommandExecutorSQLFactory var7 = var6.next(); if (var7.getCommandNames().contains(var3)) { return var7.createCommand(var3); } } } return null; } "	1	0	0	1	0	0
"@Override public void Func1() { if (this.theListener instanceof ConsumerSeekAware) { ((ConsumerSeekAware) this.theListener).registerSeekCallback(this); } if (this.transactionManager != null) { ProducerFactoryUtils.setConsumerGroupId(this.consumerGroupId); } this.count = 0; this.last = System.currentTimeMillis(); if (isRunning() && this.definedPartitions != null) { initPartitionsIfNeeded(); } long var1 = System.currentTimeMillis(); long var2 = var1; while (isRunning()) { try { if (!this.autoCommit) { processCommits(); } processSeeks(); ConsumerRecords<K, V> var3 = this.consumer.poll(this.containerProperties.getPollTimeout()); if (var3 != null && this.logger.isDebugEnabled()) { this.logger.debug(""Received: "" + var3.count() + "" var3""); } if (var3 != null && var3.count() > 0) { if (this.containerProperties.getIdleEventInterval() != null) { var1 = System.currentTimeMillis(); } invokeListener(var3); } else { if (this.containerProperties.getIdleEventInterval() != null) { long var4 = System.currentTimeMillis(); if (var4 > var1 + this.containerProperties.getIdleEventInterval() && var4 > var2 + this.containerProperties.getIdleEventInterval()) { publishIdleContainerEvent(var4 - var1); var2 = var4; if (this.theListener instanceof ConsumerSeekAware) { seekPartitions(getAssignedPartitions(), true); } } } } } catch (WakeupException e) { } catch (NoOffsetForPartitionException nofpe) { this.fatalError = true; ListenerConsumer.this.logger.error(""No offset and no reset policy"", nofpe); break; } catch (Exception e) { if (this.containerProperties.getGenericErrorHandler() != null) { this.containerProperties.getGenericErrorHandler().handle(e, null); } else { this.logger.error(""Container exception"", e); } } } ProducerFactoryUtils.clearConsumerGroupId(); if (!this.fatalError) { if (this.kafkaTxManager == null) { commitPendingAcks(); try { this.consumer.unsubscribe(); } catch (WakeupException e) { } } } else { ListenerConsumer.this.logger.error(""No offset and no reset policy; stopping container""); KafkaMessageListenerContainer.this.stop(); } this.consumer.close(); if (this.logger.isInfoEnabled()) { this.logger.info(""Consumer stopped""); } } "	0	0	0	0	0	1
"public static void Func1(String[] var1) throws Exception { SparkConf var2 = new SparkConf() .setMaster(""local[2]"") .setAppName(""Write RDD To Hazelcast"") .set(""hazelcast.server.address"", ""127.0.0.1:5701"") .set(""spark.driver.host"", ""127.0.0.1""); JavaSparkContext var3 = new JavaSparkContext(var2); JavaRDD<String> var4 = var3.textFile(getFile().getPath(), 1); JavaRDD<String> var5 = var4.flatMap(new FlatMapFunction<String, String>() { @Override public Iterable<String> Func2(String var6) { return Arrays.asList(SPACE.split(var6)); } }); JavaPairRDD<String, Integer> var7 = var5.mapToPair(new PairFunction<String, String, Integer>() { @Override public Tuple2<String, Integer> Func2(String var6) { return new Tuple2<String, Integer>(var6, 1); } }); JavaPairRDD<String, Integer> var8 = var7.reduceByKey(new Function2<Integer, Integer, Integer>() { @Override public Integer Func2(Integer var9, Integer var10) { return var9 + var10; } }); javaPairRddFunctions(var8).saveToHazelcastMap(""var8""); HazelcastInstance var11 = HazelcastClient.newHazelcastClient(); IMap<Object, Object> var12 = var11.getMap(""var8""); System.out.println(""Results fetched from Hazelcast Map :""); for (Map.Entry<Object, Object> var13 : var12.entrySet()) { System.out.println(var13.getKey() + "": "" + var13.getValue()); } var11.getLifecycleService().terminate(); var3.stop(); } "	0	0	0	0	0	1
"public static void Func1() { logDir = new File(""logs""); if(!logDir.exists()) logDir.mkdir(); logDir = new File(logDir + File.separator + Main.applicant); if(!logDir.exists()) logDir.mkdir(); logDir = new File(logDir + File.separator + Main.tasks.get(Main.activeTask) + ""_"" + Main.tasktypes.get(Main.activeType)); if(!logDir.exists()) logDir.mkdir(); logFile = new File(logDir + File.separator + ""experiment.log""); File var1 = new File(logDir + File.separator + ""compileOutput.log""); try { if(!var1.exists()) var1.createNewFile(); if (!logFile.exists()) logFile.createNewFile(); else { double var2 = (double) logFile.length() / (1024 * 1024); if (var2 >= 1) { File var3 = new File(System.currentTimeMillis() + ""_"" + logFile.getName()); System.out.println(var3.getAbsolutePath()); logFile.renameTo(var3); logFile = new File(logDir + File.separator + ""experiment.log""); logFile.createNewFile(); } } } catch (IOException e) { e.printStackTrace(); } } "	1	0	0	1	0	0
public void Func1(final CompareLocale var1) { orma.transactionSync(new Runnable() { @Override public void Func2() { orma.insertIntoCompareLocale(var1); } }); } 	0	0	0	0	0	1
@Override public List<DeploymentUnit> Func1() { if (this.healthyUnits.size() < hostIds.size()) { addMissingUnits(); } return healthyUnits; } 	0	0	0	0	0	1
"protected void Func1(LaserJob var1) throws IllegalJobException { for (JobPart var2 : var1.getParts()) { boolean var3 = false; for (double var4 : this.getResolutions()) { if (var4 == var2.getDPI()) { var3 = true; break; } } if (!var3) { throw new IllegalJobException(""Resoluiton of "" + var2.getDPI() + "" is not supported""); } if (var2.getMinX() < 0 || var2.getMinY() < 0) { throw new IllegalJobException(""The Job exceeds the laser-bed on the top or left edge""); } double var5 = Util.px2mm(var2.getMaxX(), var2.getDPI()); double var6 = Util.px2mm(var2.getMaxY(), var2.getDPI()); if (var5 > this.getBedWidth() || var6 > this.getBedHeight()) { throw new IllegalJobException(""The Job is too big ("" + var5 + ""x"" + var6 + "") for the Laser bed ("" + this.getBedHeight() + ""x"" + this.getBedHeight() + "")""); } } } "	0	0	0	1	0	0
public Set<MallocSite> Func1(PointsToValue var1) { Set<MallocSite> var2 = new HashSet<>(); for (MallocSite var3: this.mallocs.keySet()) { if (var1.mallocs.containsKey(var3)) var2.add(var3); } return var2; } 	0	1	0	0	0	0
"static public void Func1(String var1, String var2, String var3, String var4, String var5) { String var6 = new String(); var6 += ""\t\t\t\t\t<tr>\n""; var6 += ""\t\t\t\t\t\t<td>"" + var1 + ""</td>\n""; var6 += ""\t\t\t\t\t\t<td>"" + var2 + ""</td>\n""; var6 += ""\t\t\t\t\t\t<td>"" + var3 + ""</td>\n""; var6 += ""\t\t\t\t\t\t<td>"" + var4 + ""</td>\n""; var6 += ""\t\t\t\t\t\t<td>"" + var5 + ""</td>\n""; var6 += ""\t\t\t\t\t\t<td class=\""edit\""><a href=\""?tab=mappings&var1="" + var1 + ""&var2="" + var2 + ""\"">Edit/Delete</a></td>\n""; var6 += ""\t\t\t\t\t</tr>\n""; al.add(var6); } "	0	0	0	0	0	1
"static public void Func1(String var1, String var2, String var3, String var4) { String var5 = new String(); var5 += ""\t\t\t\t\t<tr>\n""; var5 += ""\t\t\t\t\t\t<td>"" + var1 + ""</td>\n""; var5 += ""\t\t\t\t\t\t<td>"" + var2 + ""</td>\n""; var5 += ""\t\t\t\t\t\t<td>"" + var3 + ""</td>\n""; var5 += ""\t\t\t\t\t\t<td>"" + var4 + ""</td>\n""; var5 += ""\t\t\t\t\t\t<td class=\""edit\""><a href=\""?tab=mappings&var1="" + var1 + ""\"">Edit/Delete</a></td>\n""; var5 += ""\t\t\t\t\t</tr>\n""; al.add(var5); } "	0	0	0	0	0	1
public Mark Func1() { return mark; } 	0	0	0	0	0	1
"@Test public void Func1() { String[] var1 = { ""0 5"", }; String[] var2 = { ""GameState 56 myScore: 2 myMagic: 55 opScore: 0 opMagic: 55 gameResult: UNKNOWN"", ""mw:  0 Point 14796.00 04417.00 Vector +0038.00 +0274.00 true false -1 0"", ""mw:  1 Point 14918.00 02200.00 Vector -0119.00 -0016.00 true false -1 0"", ""ow:  2 Point 08732.00 04264.00 Vector -0006.00 -0005.00 false false -1 0"", ""ow:  3 Point 15588.00 04997.00 Vector +0004.00 +0119.00 false true 7 3"", ""bl:  9 Point 15686.00 01361.00 Vector +0352.00 +0166.00 1"", ""bl: 10 Point 14963.00 01334.00 Vector +0203.00 -0259.00 1"", ""sn:  4 Point 11391.00 04986.00 Vector +0002.00 +0002.00"", ""sn:  6 Point 11922.00 01513.00 Vector +0002.00 -0002.00"", ""sn:  7 Point 15588.00 04997.00 Vector +0004.00 +0119.00 3"", }; String[] var3 = { ""Action MOVE Point 15588.00 04997.00 150"", ""Action MOVE Point 11922.00 01513.00 150"", }; String[] var4 = { ""Action MOVE Point 15686.00 01361.00 0"", ""Action MOVE Point 16001.00 02200.00 0"", }; String[] var5 = { ""GameState 57 myScore: 2 myMagic: 56 opScore: 0 opMagic: 56 gameResult: UNKNOWN"", ""mw:  0 Point 14859.00 04722.00 Vector -0152.00 +0108.00 true false -1 0"", ""mw:  1 Point 14653.00 02150.00 Vector -0199.00 -0037.00 true false -1 0"", ""ow:  2 Point 08726.00 04259.00 Vector -0005.00 -0004.00 false false -1 0"", ""ow:  3 Point 15565.00 05174.00 Vector -0064.00 +0253.00 false false -1 2"", ""bl:  9 Point 15730.00 01309.00 Vector +0040.00 -0047.00 1"", ""bl: 10 Point 15159.00 01200.00 Vector +0177.00 -0121.00 1"", ""sn:  4 Point 11393.00 04988.00 Vector +0002.00 +0002.00"", ""sn:  6 Point 11924.00 01511.00 Vector +0002.00 -0002.00"", ""sn:  7 Point 15592.00 05116.00 Vector +0003.00 +0089.00"", }; TestUtils.setGameConstantsFromDebug(var1); Player.GameState var6 = TestUtils.getGameStateFromDebug(var2); Player.GameState var7 = TestUtils.getGameStateFromDebug(var5); Player.Action[] var8 = TestUtils.getActionFromDebug(var3, var6); Player.Action[] var9 = TestUtils.getActionFromDebug(var4, var6); Player.GameState var10 = Player.GameEngine.applyAction(var6, var8, var9); TestUtils.printComputedVSActual(var10, var7); assertNotNull(var10); assertEquals(var7, var10); } "	0	0	0	0	0	1
"public Body<Predictions> Func1() { Body<Predictions> var1 = new Body<Predictions>(); List<AgencyAndId> var2 = new ArrayList<AgencyAndId>(); List<AgencyAndId> var3 = new ArrayList<AgencyAndId>(); if (isValid(var1, var2, var3)) { String var4 = getServiceUrl() + agencyId + PREDICTIONS_COMMAND + ""?""; String var5 = """"; for (AgencyAndId var6 : var3) { var5 += ""rs="" + getIdNoAgency(var6.toString()) + ""|"" + getIdNoAgency(stopId) + ""&""; } String var7 = var4 + var5 + ""format="" + REQUEST_TYPE; _log.info(var7); try { int var8 = _configUtil.getHttpTimeoutSeconds(); JsonArray var9 = _httpUtil.getJsonObject(var7, var8).getAsJsonArray( ""var11""); Type var10 = new TypeToken<List<Predictions>>() { }.getType(); List<Predictions> var11 = new Gson().fromJson(var9, var10); modifyJSONObject(var11); var1.getResponse().addAll(var11); } catch (Exception e) { var1.getErrors().add(new BodyError(""No valid results found."")); _log.error(e.getMessage()); } } return var1; } "	1	1	1	0	1	0
"@Override public void Func1() throws Exception { final String var1 = getPath() + ""/"" + (AlkisConstants.COMMONS.VERMESSUNG_HOST_BILDER.equalsIgnoreCase(host) ? ""vermriss"" : ""ergdok"") + "".pdf""; final Object[] var2 = VermessungsRissReportHelper.generateReportData( auftragsnummer, projektnummer, risseBeans, host, MultiPagePictureReader.class); final Collection<CidsBean> var3 = (Collection)var2[0]; final Map var4 = (Map)var2[1]; final Collection<URL> var5 = (Collection)var2[2]; final JRBeanCollectionDataSource var6 = new JRBeanCollectionDataSource(var3); { OutputStream var7 = null; try { var7 = new FileOutputStream(var1); jasperReportDownload(VermessungsunterlagenHelper.VERMRISS_REPORT, var4, var6, var7); } finally { closeStream(var7); } } final ExtendedAccessHandler var8 = new SimpleHttpAccessHandler(); for (final URL var9 : var5) { final String var10 = getPath() + var9.getFile() .substring(var9.getFile().lastIndexOf('/') + 1); final String var11 = var10.substring(0, var10.lastIndexOf('.')); InputStream var12 = null; OutputStream var7 = null; try { var12 = var8.doRequest(var9); var7 = new FileOutputStream(var10); downloadStream(var12, var7); } catch (Exception ex) { LOG.warn(""could not download additional File"", ex); VermessungsunterlagenHelper.writeExceptionJson( ex, VermessungsunterlagenHelper.getPath(getJobKey()) + ""/fehlerprotokoll_"" + var11 + "".json""); } finally { closeStream(var12); closeStream(var7); } } } "	1	0	1	1	0	0
"@Test(testName = ""DELETE /media/{id}"", dependsOnMethods = { ""testDeleteMetadata"" } ) public void Func1() { Task var1 = mediaClient.var1(media.getHref()); Checks.checkTask(var1); assertTrue(retryTaskSuccess.apply(var1), String.format(TASK_COMPLETE_TIMELY, ""var1"")); Error var2 = Error.builder() .message(String.format( ""No access to entity \""(com.vmware.vcloud.entity.media:%s)\""."", media.getId())) .majorErrorCode(403) .minorErrorCode(""ACCESS_TO_RESOURCE_IS_FORBIDDEN"") .build(); try { media = mediaClient.getMedia(media.getHref()); fail(""Should give HTTP 403 error""); } catch (VCloudDirectorException vde) { assertEquals(vde.getError(), var2); media = null; } catch (Exception e) { fail(""Should have thrown a VCloudDirectorException""); } if (media != null) { // guard against NPE on the .toStrings assertNull(metadataValue, String.format(OBJ_DEL, MEDIA, media.toString())); } var1 = mediaClient.var1(oldMedia.getHref()); Checks.checkTask(var1); } "	0	0	0	0	0	1
"@RequestMapping(""/complexSearchAddress"") @ResponseBody public List<Location> Func1(@RequestHeader(""authToken"") String var1, @RequestParam(""var2"") String var2, @RequestParam(""var3"") Integer var3, @RequestParam(""startLocation"") String var4, @RequestParam(""var5"") Integer var5) { SearchQuery $ = null; SearchQueryResult var7; Location var8 = null; try { SearchQuery var9 = SearchQuery.adressSearch(var4); SearchQueryResult var10 = $.SearchByAddress(); var9.waitOnSearch(); var8 = var10.getLocations().get(0); $ = SearchQuery.TypeSearch(Location.LocationSubTypes.valueOf(var2.toUpperCase()).getSearchType()); var7 = $.searchByType(var4, var3); } catch (illigalString | InterruptedException e) { throw new SearchFailed(""illegal strings "" + e); } try { var7.filterLocations(var5); } catch (EmptySearchQuery e) { throw new SearchFailed(""empty search var9 ""+e); } List<Location> var11 = AbstractLocationManager.instance().getLocationsAround(var8.getCoordinates(), var3, null); var7.getLocations().addAll(var11); return var7.getLocations(); } "	1	0	0	1	0	0
public static int Func1(final AtomicBuffer var1, final ErrorConsumer var2, final long var3) { int var4 = 0; int var5 = 0; final int var6 = var1.var6(); while (var5 < var6) { final int var7 = var1.getIntVolatile(var5 + LENGTH_OFFSET); if (0 == var7) { break; } final long var8 = var1.getLongVolatile(var5 + LAST_OBSERVATION_TIMESTAMP_OFFSET); if (var8 >= var3) { ++var4; var2.accept( var1.getInt(var5 + OBSERVATION_COUNT_OFFSET), var1.getLong(var5 + FIRST_OBSERVATION_TIMESTAMP_OFFSET), var8, var1.getStringUtf8(var5 + ENCODED_ERROR_OFFSET, var7 - ENCODED_ERROR_OFFSET)); } var5 += align(var7, RECORD_ALIGNMENT); } return var4; } 	0	0	0	0	0	1
"@RequestMapping(""/supplier"") public String Func1(ModelMap var1){ Long var2 = userService.getLoggedInUser().getId(); var1.addAttribute(""orders"", orderService.getAllRequestedOrderForSupplierId(var2)); return ""supplier""; } "	1	0	1	1	0	0
"public void Func1() { if (new File(getDataFolder(), ""config.yml"").exists()) { if (fileManager.getConfigVersion() != 1.6) { SendConsoleMessage.warning(""Your config.yml is out of date! please remove or back it up before using the plugin!""); errorCount++; } } if (new File(getDataFolder(), ""messages.yml"").exists()) { if (fileManager.getMessagesConfigVersion() != 1.2) { SendConsoleMessage.warning(""Your messages.yml is out of date! please remove or back it up before using the plugin!""); errorCount++; } } } "	1	1	1	1	0	0
"public void Func1() { jProgressBar1.setVisible(true); updatePrintBar(0); tInfo2.setText(Languager.getTagValue(1, ""Print"", ""Print_Splash_Info3"")); tInfo3.setText(Languager.getTagValue(1, ""Print"", ""Print_Splash_Info4"")); tEstimation.setText(Languager.getTagValue(1, ""Print"", ""Print_Estimation"")); tRemaining.setText(Languager.getTagValue(1, ""Print"", ""Print_Remaining"")); tInfo3.setVisible(true); tRemaining.setVisible(true); tEstimation.setVisible(true); vEstimation.setVisible(true); vRemaining.setVisible(true); bPause.setVisible(false); } "	1	1	1	1	0	0
"public static final File Func1() throws FileNotFoundException { File var1 = getMinecraftJar(); if (var1 == null) { throw new FileNotFoundException(""Could not locate Minecraft Jar!""); } return var1; } "	0	0	0	0	0	1
@Nullable public final Icon Func1(@NotNull PsiElement var1, int var2) { PsiFile var3 = var1.getContainingFile(); if(var3 != null) { VirtualFile var4 = var3.getVirtualFile(); if(var4 == null) return AfterglowIcons.DIRECTORY; AfterglowIconCache var5 = ApplicationManager.getApplication().getComponent(AfterglowIconCache.class); return var5.Func1(var4, var2); } return AfterglowIcons.DIRECTORY; } 	1	0	1	0	0	0
"@Override public final void Func1(MessageReceivedEvent var1, String var2) { RemindHandler var3 = rexCord.getRemindHandler(); int var4 = var2.indexOf(""\""""); int var5 = var2.lastIndexOf(""\""""); if (var4 == var5 || var4 == -1 || var5 == -1) { rexCord.sendMessage(var1.getChannel(), ""Message not detected""); return; } try { String var6 = var2.substring(var4 + 1, var5); String var7 = var2.substring(0, var4); Parser var8 = new Parser(); List<DateGroup> var9 = var8.parse(var7); Date var10 = var9.get(0).getDates().get(0); String var11 = String.format(""Ok, I'll remind you on %s: \""%s\"""", var10.toString(), var6); rexCord.sendMessage(var1.getChannel(), var11); var3.addReminder(new Reminder(var10, var6, var1.getAuthor())); } catch (Exception e) { rexCord.sendMessage(var1.getChannel(), ""Could not interpret query :(""); } } "	1	1	1	1	0	0
"@Override public boolean Func1() { checkState(backstack.size() > 0 || transition != null, ""Use startWith(Screen) to show your first Screen.""); boolean var1 = backstack.size() > 1 || transition != null && !transition.isFinished(); move(new GoBackTransition()); return var1; } "	1	0	0	1	0	0
"private static String Func1(String var1) { MessageDigest var2 = null; String var3 = null; try { var2 = MessageDigest.getInstance(""SHA-1""); var3 = Base64.getEncoder().encodeToString(var2.digest(var1.getBytes())); } catch (NoSuchAlgorithmException e) { e.printStackTrace(); } return var3; } "	1	0	1	0	0	0
@Override protected void Func1(@Nullable Bundle var1) { super.Func1(var1); Assent.setActivity(this); } 	1	1	0	0	0	0
"private void Func1(Socket var1) throws SocketException, IOException { var1.setSoTimeout(5000); String var2 = ""Hello World!""; var1.getOutputStream().write((var2 + ""\r\n"").getBytes()); StringBuilder var3 = new StringBuilder(); int var4; while (true) { var4 = var1.getInputStream().read(); var3.append((char) var4); if (var4 == '\n') { break; } } assertEquals(""echo:"" + var2 + ""\r\n"", var3.toString()); } "	0	0	0	0	0	1
"public static String Func1(Date var1) { SimpleDateFormat var2 = new SimpleDateFormat(""MMM d, YYYY""); return var2.format(var1); } "	0	0	1	1	0	0
@AfterTest public void Func1() { if (tempDirectory != null) { FileUtils.delete(tempDirectory); } } 	0	0	0	0	0	1
"@Override public org.openmrs.Encounter Func1(String var1, Patient var2, Date var3, org.openmrs.Encounter var4, Provider var5, HashMap<String, Object> var6) { ChirdlUtilBackportsService var7 = Context .getService(ChirdlUtilBackportsService.class); org.openmrs.Encounter var8 = super.Func1( var1, var2, var3, var4, var5, var6); if (var8 == null){ return null; } Integer var9 = var8.getEncounterId(); getSession(var6).setEncounterId(var9); var7.updateSession(getSession(var6)); if (var1 == null) { return var8; } LocationService var10 = Context.getLocationService(); String var11 = null; Date var12 = null; String var13 = null; String var14 = null; String var15 = null; String var16 = null; Message var17 = null; try { var17 = this.parser.parse(var1); EncounterService var18 = Context .getService(EncounterService.class); var8 = var18.getEncounter(var8 .getEncounterId()); if (this.hl7EncounterHandler instanceof org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) { var11 = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getLocation(var17); var12 = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getAppointmentTime(var17); if(var11.equals(ChirdlUtilConstants.LOCATION_RIIUMG)) { var13 = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getInsuranceCompanyPlan(var17); } else { var13 = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getInsurancePlan(var17); } if(!var11.equals(ChirdlUtilConstants.LOCATION_RIIUMG)) { var14 = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getInsuranceCarrier(var17); } var15 = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getPrinterLocation(var17, var1); var16 = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getInsuranceName(var17); } } catch (EncodingNotSupportedException e) { log.error(""Encoding not supported when parsing incoming var17."", e); } catch (HL7Exception e) { log.error(""HL7 version not supported when parsing incoming var17"", e); } catch (Exception e){ log.error(""Exception getting var8 information from the incoming var17"", e); } EncounterService var18 = Context .getService(EncounterService.class); var8 = var18.getEncounter(var9); Encounter var19 = (org.openmrs.module.chica.hibernateBeans.Encounter) var8; var19.setInsurancePlanCode(var13); var19.setInsuranceCarrierCode(var14); var19.setScheduledTime(var12); var19.setPrinterLocation(var15); Location var20 = null; if (var11 != null) { var20 = var10.getLocation(var11); if (var20 == null) { var20 = new Location(); var20.setName(var11); var10.saveLocation(var20); log.warn(""Location '"" + var11 + ""' does not exist in the Location table. "" + ""A new var20 was created for '"" + var11 + ""'""); } } var19.setLocation(var20); var19.setInsuranceSmsCode(null); saveHL7Obs(var2, var17, var20, var19, getSession(var6)); State var21 = var7 .getStateByName(STATE_CLINIC_REGISTRATION); PatientState var22 = var7 .addPatientState(var2, var21, getSession(var6) .getSessionId(), org.openmrs.module.chica.util.Util.getLocationTagId(var19), getLocationId(var19), null); var22.setStartTime(var19.getEncounterDatetime()); var22.setEndTime(var19.getEncounterDatetime()); var7.updatePatientState(var22); var21 = var7 .getStateByName(STATE_HL7_CHECKIN); var22 = var7 .addPatientState(var2, var21, getSession(var6) .getSessionId(), org.openmrs.module.chica.util.Util.getLocationTagId(var19), getLocationId(var19), null); Date var23 = (Date) var6 .get(PROCESS_HL7_CHECKIN_START); Date var24 = (Date) var6 .get(PROCESS_HL7_CHECKIN_END); var22.setStartTime(var23); var22.setEndTime(var24); var7.updatePatientState(var22); var21 = var7.getStateByName(STATE_QUERY_ALIAS); var22 = var7 .addPatientState(var2, var21, getSession(var6) .getSessionId(), org.openmrs.module.chica.util.Util.getLocationTagId(var19), getLocationId(var19), null); Date var25 = (Date) var6.get(PARAMETER_QUERY_ALIAS_START); if (var25 == null){ var25 = new java.util.Date(); } Date var26 = (Date) var6.get(PARAMETER_QUERY_ALIAS_STOP); if (var26 == null){ var26 = new java.util.Date(); } var22.setStartTime(var25); var22.setEndTime(var26); var7.updatePatientState(var22); var18.saveEncounter(var19); ConceptService var27 = Context.getConceptService(); Concept var28 = var27.getConceptByName(CONCEPT_INSURANCE_NAME); if (var16 != null){ org.openmrs.module.chirdlutil.util.Util.saveObs(var2, var28, var9, var16,var3); }else { log.error(""Insurance Name is null for patient: "" + var2.getPatientId()); } return var8; } "	0	0	0	0	0	1
public void Func1(TaxonomyRespository var1) { this.var1 = var1; } 	0	0	0	0	0	1
private void Func1(String var1, Learnguide var2) { var2.setSharing(var1); this.getBaseRepository().save(var2); } 	0	0	0	0	0	1
@Override public List<String> Func1(String var1, String var2) { return this.getLearnguideRepository().findAllCollaboratorByResourceID(var1, var2); } 	0	0	0	0	0	1
"@GET @Produces(""application/xml"") public Response Func1(@QueryParam(""var1"") String var1, @QueryParam(""var2"") int var2, @QueryParam(""var3"") int var3, @QueryParam(""var4"") String var4) { Set<Post> var5; if (var1.equals(EVENTS)) { var5 = Site.fromSlug(""tecnicolisboa"").categoryForSlug(""eventos"").getPostsSet(); } else { var5 = Site.fromSlug(""tecnicolisboa"").categoryForSlug(""noticias"").getPostsSet(); } Locale var6; if (""pt"".equals(var4)) { var6 = PT; } else { var6 = EN; } DateTime var7 = new DateTime().toDateMidnight().withYear(var2).withMonthOfYear(var3).withDayOfMonth(1) .toDateTime(); DateTime var8 = var7.dayOfMonth().withMaximumValue().hourOfDay().withMaximumValue().minuteOfHour().withMaximumValue() .secondOfMinute().withMaximumValue(); Interval var9 = new Interval(var7, var8); String var10 = ""SUCCESS\n""; var10 += ""<list>\n""; int var11 = 1; for (Post var12 : var5.stream().sorted(Post.CREATION_DATE_COMPARATOR).filter(x -> var9.contains(x.getPublicationBegin())) .collect(Collectors.toList())) { var10 += ""  <net.sourceforge.fenixedu.presentationTier.Action.externalServices.AnnouncementDTO>\n""; var10 += ""    <creationDate>"" + var12.getCreationDate().toString(""dd/MM/yyyy HH:mm:ss"") + ""</creationDate>\n""; var10 += ""    <referedSubjectBegin>"" + (var12.getPublicationBegin() != null ? var12.getPublicationBegin().toString(""dd/MM/yyyy HH:mm:ss"") : """") + ""</referedSubjectBegin>\n""; var10 += ""    <publicationBegin>"" + (var12.getPublicationBegin() != null ? var12.getPublicationBegin().toString(""dd/MM/yyyy HH:mm:ss"") : """") + ""</publicationBegin>\n""; var10 += ""    <publicationEnd>"" + (var12.getPublicationEnd() != null ? var12.getPublicationEnd().toString(""dd/MM/yyyy HH:mm:ss"") : """") + ""</publicationEnd>\n""; var10 += ""    <lastModification>"" + (var12.getModificationDate() != null ? var12.getModificationDate().toString(""dd/MM/yyyy HH:mm:ss"") : """") + ""</lastModification>\n""; var10 += ""    <subject><![CDATA["" + var12.getName().getContent(var6) + ""]]></subject>\n""; var10 += ""    <keywords></keywords>\n""; var10 += ""    <body><![CDATA["" + var12.getBody().getContent(var6) + ""]]></body>\n""; var10 += ""    <author>GCRP</author>\n""; var10 += ""    <authorEmail>gcrp@ist.utl.pt</authorEmail>\n""; var10 += ""    <place></place>""; var10 += ""    <visible>"" + var12.isVisible() + ""</visible>\n""; var10 += ""    <id>"" + var12.getExternalId() + ""</id>\n""; var10 += ""    <photoUrl></photoUrl>\n""; var10 += ""    <campus>Alameda</campus>\n""; var10 += ""    <categories/>\n""; var10 += ""    <pressRelease>false</pressRelease>\n""; var10 += ""    <sticky>"" + false + ""</sticky>\n""; var10 += ""    <priority>"" + var11++ + ""</priority>\n""; var10 += ""  </net.sourceforge.fenixedu.presentationTier.Action.externalServices.AnnouncementDTO>\n""; } var10 += ""</list>""; return Response.ok(var10).build(); } "	0	0	0	0	0	1
private SearchCriterion Func1(final Entity var1) { if (Objects.equals(String.class, fieldDefinition.getType().getType())) { return SearchRestrictions.iEq(fieldDefinition.getName(), var1.getField(fieldDefinition.getName())); } return SearchRestrictions.eq(fieldDefinition.getName(), var1.getField(fieldDefinition.getName())); } 	0	1	0	0	0	0
"@Test public void Func1() { final String var1 = ""0\n500\n1000\n1500\n2000\n2500\n3000\n3500\n0\n5000\n10000\n15000\n20000\n25000\n30000\n35000\n40000\n45000""; final String var2 = ""0\n1\n2\n3\n4\n5\n0\n0.5\n1\n1.5\n2\n2.5\n3\n3.5\n4\n4.5\n5""; final String var3 = ""1\n10\n1\n10\n100\n1000""; CDSHelper.NavigationLink.PLOT.makeNavigationSelection(this); XAxisVariableSelector var4 = new XAxisVariableSelector(this); YAxisVariableSelector var5 = new YAxisVariableSelector(this); var4.openSelectorWindow(); var4.pickSource(CDSHelper.ELISPOT); var4.pickVariable(CDSHelper.var1); var4.setScale(DataspaceVariableSelector.Scale.Linear); var4.confirmSelection(); sleep(CDSHelper.CDS_WAIT_ANIMATION); var5.pickSource(CDSHelper.ELISPOT); var5.pickVariable(CDSHelper.ELISPOT_MAGNITUDE_BACKGROUND_SUB); var5.setScale(DataspaceVariableSelector.Scale.Linear); var5.confirmSelection(); if (CDSHelper.validateCounts) { cds.assertPlotTickText(var1); } var5.openSelectorWindow(); sleep(CDSHelper.CDS_WAIT_ANIMATION); var5.pickSource(CDSHelper.ICS); var5.pickVariable(CDSHelper.ICS_MAGNITUDE_BACKGROUND_SUB); var5.setScale(DataspaceVariableSelector.Scale.Linear); var5.confirmSelection(); var4.openSelectorWindow(); var4.pickSource(CDSHelper.NAB); var4.pickVariable(CDSHelper.NAB_TITERID50); var4.setScale(DataspaceVariableSelector.Scale.Linear); var4.confirmSelection(); assertTrue(""For ELISPOT vs ICS x-axis gutter plot was not present."", cdsPlot.hasXGutter()); assertTrue(""There is an x-axis gutter plot, but there are no data points in it."", cdsPlot.getXGutterPlotPointCount() > 0 ); assertTrue(""For ELISPOT vs ICS y-axis gutter plot was not present."", cdsPlot.hasYGutter()); assertTrue(""There is an y-axis gutter plot, but there are no data points in it."", cdsPlot.getYGutterPlotPointCount() > 0 ); var4.openSelectorWindow(); var4.pickSource(CDSHelper.ICS); var4.pickVariable(CDSHelper.ICS_MAGNITUDE_BACKGROUND_SUB); var4.setScale(DataspaceVariableSelector.Scale.Linear); var4.confirmSelection(); if (CDSHelper.validateCounts) { cds.assertPlotTickText(var2); } var5.openSelectorWindow(); var5.pickSource(CDSHelper.NAB); var5.pickVariable(CDSHelper.NAB_TITERID50); var5.setScale(DataspaceVariableSelector.Scale.Log); var5.confirmSelection(); assertTrue(""For NAB vs ICS x-axis gutter plot was not present."", cdsPlot.hasXGutter()); assertTrue(""There is an x-axis gutter plot, but there are no data points in it."", cdsPlot.getXGutterPlotPointCount() > 0 ); assertTrue(""For NAB vs ICS y-axis gutter plot was not present."", cdsPlot.hasYGutter()); assertTrue(""There is an y-axis gutter plot, but there are no data points in it."", cdsPlot.getXGutterPlotPointCount() > 0 ); } "	0	0	0	0	0	1
"public static void Func1() { if (driverLocationMarker != null) { driverLocationMarker.setPosition(latLngDriverForStudent); System.out.println(""string: "" + locationSpeedAndTimeStampForStudent); layoutRouteMapInfoStrip.setVisibility(View.VISIBLE); tvDriverCurrentSpeed.setText(""Speed: "" + locationSpeedAndTimeStampForStudent.substring(0, 2) + "" Km/h""); tvDriverCurrentLocationTimeStamp.setText(locationSpeedAndTimeStampForStudent.substring(locationSpeedAndTimeStampForStudent.length() - 21)); } } "	0	1	1	0	0	0
"public static void Func1(EMMessage var1) { String var2 = var1.getStringAttribute(EaseConstant.MESSAGE_ATTR_BURN_MSG_ID, """"); EMClient.getInstance() .chatManager() .getConversation(var1.getFrom()) .removeMessage(var2); } "	0	0	0	0	0	1
"public static String Func1(String var1, String var2) throws UnirestException { HttpResponse<JsonNode> var3 = Unirest.get(""https://api.ciscospark.com/v1/var4"") .header(""authorization"", ""Bearer "" + var2) .header(""cache-control"", ""no-cache"") .header(""postman-token"", ""2a79d2f7-e472-5985-9f05-a315bcb50974"") .asJson(); JSONObject var4 = var3.getBody().getObject(); JSONArray var5 = (JSONArray) var4.get(""var5""); String var6 = null; for (int var7 = 0; var7 < var5.length(); var7++) { JSONObject var8 = var5.getJSONObject(var7); if (var8.getString(""title"").toLowerCase() == var1.toLowerCase()) { var6 = var8.getString(""id""); break; } } if (var6 == null) { return ""Rooms not found.""; } HttpResponse<JsonNode> var9 = Unirest.delete(""https://api.ciscospark.com/v1/var4/"" + var6) .header(""authorization"", ""Bearer "" + var2) .header(""content-type"", ""application/json"") .header(""cache-control"", ""no-cache"") .header(""postman-token"", ""ad0827fb-568f-8f0d-d4ef-3e2775681a11"") .asJson(); if (var9.getStatus() == 204) { return ""Rooms successfully deleted.""; } else { return ""Rooms cannot be deleted.""; } } "	0	1	1	1	0	0
private void Func1(Element var1, Map<TypeElement, ViewModelClass> var2) { ViewModelClass var3 = getOrCreateViewModelClass(var2, (TypeElement)var1.getEnclosingElement()); ExtractProperty var4 = var1.getAnnotation(ExtractProperty.class); var3.addBinder(new ExtractPropertyBinder(var1.getSimpleName().toString(), var4.value())); } 	0	1	0	0	0	0
private void Func1(DetailAST var1) { final DetailAST var2 = getPreviousStatement(var1); final DetailAST var3 = var1.getNextSibling(); if (!isTrailingComment(var1)) { if (isInEmptyCaseBlock(var2, var3)) { handleCommentInEmptyCaseBlock(var2, var1, var3); } else if (isFallThroughComment(var2, var3)) { handleFallThroughtComment(var2, var1, var3); } else if (isInEmptyCodeBlock(var2, var3)) { handleCommentInEmptyCodeBlock(var1, var3); } else if (isCommentAtTheEndOfTheCodeBlock(var3)) { handleCommentAtTheEndOfTheCodeBlock(var2, var1, var3); } else if (var3 != null && !areSameLevelIndented(var1, var3, var3)) { log(var1.getLineNo(), getMessageKey(var1), var3.getLineNo(), var1.getColumnNo(), var3.getColumnNo()); } } } 	0	1	1	1	0	0
"public List<Passe> Func1(long var1) { Cursor var2 = database.rawQuery( ""SELECT s._id, s.var7, s.points, s.x, s.y, s.comment, s.arrow, s.arrow_index, "" + ""(SELECT COUNT(x._id) FROM SHOOT x WHERE x.var7=p._id), p.exact "" + ""FROM PASSE p  "" + ""LEFT JOIN SHOOT s ON p._id = s.var7 "" + ""WHERE p.var1 = "" + var1 + "" "" + ""ORDER BY p._id ASC, s._id ASC"", null); List<Passe> var3 = new ArrayList<>(); if (var2.moveToFirst()) { long var4 = -1; int var5 = 0; do { int var6 = var2.getInt(8); if (var6 == 0) { var2.moveToNext(); continue; } Passe var7 = new Passe(var6); var7.setId(var2.getLong(1)); var7.roundId = var1; var7.exact = var2.getInt(9) == 1; if (var4 != var7.roundId) { var5 = 0; var4 = var7.roundId; } var7.index = var5++; for (int var8 = 0; var8 < var6; var8++) { var7.shot[var8] = ShotDataSource.cursorToShot(var2, var8); var2.moveToNext(); } var3.add(var7); } while (!var2.isAfterLast()); } var2.close(); return var3; } "	0	0	0	0	0	1
"private Passe Func1(long var1) { Cursor var2 = database.rawQuery( ""SELECT s._id, s.passe, s.points, s.x, s.y, s.comment, s.arrow, s.arrow_index, var4.exact "" + ""FROM SHOOT s, PASSE var4 "" + ""WHERE s.passe=var4._id "" + ""AND var4._id="" + var1 + "" "" + ""ORDER BY s._id ASC"", null); int var3 = var2.getCount(); var2.moveToFirst(); Passe var4 = new Passe(var3); var4.setId(var1); var4.index = -1; var4.exact = var2.getInt(8) == 1; for (int var5 = 0; var5 < var3; var5++) { var4.shot[var5] = ShotDataSource.cursorToShot(var2, var5); var2.moveToNext(); } var2.close(); return var4; } "	0	0	0	0	0	1
"@Override public boolean Func1(World var1, Random var2, BlockPos var3) { if (chance == 1 || var2.nextInt(chance) == 0) { if ((int) params.getOrDefault(""perChunk"", 1) <= 1) { return generateCluster(var1, var2, var3.add(var2.nextInt(16), 0, var2.nextInt(16))); } else { for (int var4 = 0; var4 < (int) params.getOrDefault(""perChunk"", 1); var4++) { generateCluster(var1, var2, var3.add(var2.nextInt(16), 0, var2.nextInt(16))); } } } return true; } "	1	1	0	0	0	0
"public void Func1(FMLPreInitializationEvent var1) { MainCompatHandler.registerWaila(); MainCompatHandler.registerTiCon(); MainCompatHandler.registerMekanism(); File var2 = new File(var1.getModConfigurationDirectory().toString() + ""/supertechtweaks/""); config = new Configuration(new File(var2.getPath(), ""config.cfg"")); Config.readConfig(); ModWorldGeneration var3 = new ModWorldGeneration(); for (File var4 : var2.listFiles()) { if (var4.getName().contains("".json"")) { try { ArrayList<WorldGeneratorBase> var5 = GenerationParser.parseScripts(var4); var5.forEach((WorldGeneratorBase var6) -> { GameRegistry.registerWorldGenerator(new SingleGenerator(var6), 3 + var6.params.hashCode()+var6.hashCode()); }); } catch (Exception ex) { } } } System.out.println(""Generators Loaded""); ModBlocks.init(); ModItems.init(); GameRegistry.registerTileEntity(TileEntityOre.class, var1.getModMetadata().modId + ""TileEntityOre""); for (Ores var7 : Ores.values()) { ItemStack var8 = new ItemStack(itemOreChunk, 1, var7.ordinal()); OreDictionary.registerOre(""ore"" + var7.getName(), var8); var8 = new ItemStack(itemOreChunk, 1, var7.ordinal() + NETHER); OreDictionary.registerOre(""oreNether"" + var7.getName(), var8); var8 = new ItemStack(itemOreChunk, 1, var7.ordinal() + END); OreDictionary.registerOre(""oreEnd"" + var7.getName(), var8); var8 = new ItemStack(itemMaterialObject, 1, var7.ordinal() + INGOT); OreDictionary.registerOre(""ingot"" + var7.getName(), var8); var8 = new ItemStack(itemMaterialObject, 1, var7.ordinal() + DUST); OreDictionary.registerOre(""dust"" + var7.getName(), var8); var8 = new ItemStack(itemMaterialObject, 1, var7.ordinal() + GEAR); OreDictionary.registerOre(""gear"" + var7.getName(), var8); var8 = new ItemStack(itemMaterialObject, 1, var7.ordinal() + NUGGET); OreDictionary.registerOre(""nugget"" + var7.getName(), var8); var8 = new ItemStack(itemMaterialObject, 1, var7.ordinal() + PLATE); OreDictionary.registerOre(""plate"" + var7.getName(), var8); var8 = new ItemStack(itemMaterialObject, 1, var7.ordinal() + ROD); OreDictionary.registerOre(""rod"" + var7.getName(), var8); OreDictionary.registerOre(""stick"" + var7.getName(), var8); var8 = new ItemStack(itemMaterialObject, 1, var7.ordinal() + CLUMP); OreDictionary.registerOre(""clump"" + var7.getName(), var8); var8 = new ItemStack(itemMaterialObject, 1, var7.ordinal() + CRYSTAL); OreDictionary.registerOre(""crystal"" + var7.getName(), var8); var8 = new ItemStack(itemMaterialObject, 1, var7.ordinal() + SHARD); OreDictionary.registerOre(""shard"" + var7.getName(), var8); var8 = new ItemStack(itemMaterialObject, 1, var7.ordinal() + WIRE); OreDictionary.registerOre(""wire"" + var7.getName(), var8); OreDictionary.registerOre(""cable"" + var7.getName(), var8); var8 = new ItemStack(itemMaterialObject, 1, var7.ordinal() + DIRTY); OreDictionary.registerOre(""dustDirty"" + var7.getName(), var8); } } "	0	1	1	0	0	0
"private URI Func1(final URI var1, final int var2) { final URI var3 = stripFragment(var1); final String var4 = var1.getFragment(); for (int var5 = 0; ; var5++) { final StringBuilder var6 = new StringBuilder(); var6.append('_'); var6.append(Integer.toString(var2)); if (var5 > 0) { var6.append('_'); var6.append(Integer.toString(var5)); } var6.append('.'); var6.append(getExtension(var3.toString())); final URI var7 = toURI(replaceExtension(var3.toString(), var6.toString())); final URI var8 = URLUtils.getRelativePath(new File(job.getInputDir(), ""dummy"").toURI(), currentFile.toURI().resolve(var7)); if (job.getFileInfo(var8) == null) { return setFragment(var7, var4); } } } "	0	0	0	1	0	0
"@GET @Path(""/registry/list"") public Response Func1() { return new JsonResponse<>(Response.Status.OK, ActionRegistry.supportedActions()).build(); } "	0	0	0	0	0	1
"@Test public void Func1() { Pattern var1 = Pattern.compile(""\\.""); String var2 = ""this is a pen...But that is a pencil. ""; EndOfSentenceDetector var3 = new EndOfSentenceDetector(var1); assertEquals(36, var3.getSentenceEndPosition(var2)); } "	0	1	1	1	0	0
"public void Func1(PaymentRequest var1, CartData var2, final CustomerModel var3, final CartService var4) { if (var2.getAdyenDob() != null) { var1.setDateOfBirth(var2.getAdyenDob()); } if (!var2.getAdyenSocialSecurityNumber().isEmpty()) { var1.setSocialSecurityNumber(var2.getAdyenSocialSecurityNumber()); } List<InvoiceLine> var5 = new ArrayList(); String var6 = var4.getSessionCart().getCurrency().getIsocode(); for(AbstractOrderEntryModel var7 : var4.getSessionCart().getEntries()) { LOG.info(""TOTAL PRICE"" + var7.getTotalPrice()); Double var8 = var7.getTotalPrice() / var7.getQuantity().intValue(); String var9 = ""NA""; if(var7.getProduct().getName() != null && !var7.getProduct().getName().equals("""")) { var9  = var7.getProduct().getName(); } Double var10 = var7.getTaxValues().stream() .map(taxValue -> taxValue.getAppliedValue()) .reduce(0.0, (x, y) -> x = x+y); if(var10 > 0) { var10 = var10 / var7.getQuantity().intValue(); } LOG.info(""TOTAL TAX"" + var10); Amount var11 = Util.createAmount(BigDecimal.valueOf(var8 - var10), var6); LOG.info(""AMOUNT: "" + var11.getValue()); Double var12 = var7.getTaxValues().stream() .map(taxValue -> taxValue.getValue()) .reduce(0.0, (x, y) -> x = x+y) * 100; InvoiceLine var13 = new InvoiceLine(); var13.setCurrencyCode(var6); var13.setDescription(var9); var13.setItemAmount(var11.getValue()); var13.setItemVATAmount(Util.createAmount(BigDecimal.valueOf(var10), var6).getValue()); var13.setItemVatPercentage(var12.longValue()); var13.setVatCategory(VatCategory.NONE); if(!var7.getProduct().getCode().isEmpty()) { var13.setItemId(var7.getProduct().getCode()); } var13.setNumberOfItems(var7.getQuantity().intValue()); if (var7.getProduct() != null && !var7.getProduct().getCode().isEmpty()) { var13.setItemId(var7.getProduct().getCode()); } if (var7.getProduct() != null && !var7.getProduct().getCode().isEmpty()) { var13.setItemId(var7.getProduct().getCode()); } LOG.debug(""InvoiceLine Product:"" + var13.toString()); var5.add(var13); } if (var2.getDeliveryCost() != null) { InvoiceLine var13 = new InvoiceLine(); var13.setCurrencyCode(var6); var13.setDescription(""Delivery Costs""); Amount var14 = Util.createAmount(var2.getDeliveryCost().getValue().toString(), var6); var13.setItemAmount(var14.getValue()); var13.setItemVATAmount(new Long(""0"")); var13.setItemVatPercentage(new Long(""0"")); var13.setVatCategory(VatCategory.NONE); var13.setNumberOfItems(1); LOG.debug(""InvoiceLine DeliveryCosts:"" + var13.toString()); var5.add(var13); } var1.setInvoiceLines(var5); } "	1	0	0	1	0	0
private void Func1() { final ERVirtualDiagram var1 = diagram.getCurrentVirtualDiagram(); if (var1 != null) { setActivePage(1); } else { setActivePage(0); } final MainDiagramEditor var2 = (MainDiagramEditor) getActiveEditor(); final ZoomManager var3 = (ZoomManager) var2.getAdapter(ZoomManager.class); var3.setZoom(diagram.getZoom()); var2.setLocation(diagram.getX(), diagram.getY()); } 	0	1	0	0	0	0
public void Func1() { editor.initVirtualPages(); firePropertyChange(DiagramWalkerSet.PROPERTY_CHANGE_DIAGRAM_WALKER, null, null); } 	0	0	0	0	0	1
public void Func1(DiagramWalker var1) { if (isVirtual()) { getCurrentVirtualDiagram().Func1(var1); } diagramContents.getDiagramWalkers().remove(var1); if (var1 instanceof ERTable) { for (final ERVirtualDiagram var2 : getDiagramContents().getVirtualDiagramSet()) { final ERVirtualTable var3 = var2.findVirtualTable((TableView) var1); var2.Func1(var3); } } if (var1 instanceof TableView) { diagramContents.getDictionary().remove((TableView) var1); } for (final Category var4 : diagramContents.getSettings().getCategorySetting().getAllCategories()) { var4.getContents().remove(var1); } firePropertyChange(DiagramWalkerSet.PROPERTY_CHANGE_DIAGRAM_WALKER, null, null); } 	1	1	0	0	0	0
@Override protected synchronized void Func1() { this.eventBus.register(getOwner()); } 	0	0	0	0	0	1
"public static void Func1(String[] var1) throws Exception { ProviderXConfigBuilder var2 = new ProviderXConfigBuilder(); var2.myIp(""192.168.31.175"").myPort(10002).addServicePackage(""limitart.core.rpcx.demo"").providerUID(3) .serviceCenterIp(""192.168.31.175"").serviceCenterPort(5555); ProviderX var3 = new ProviderX(var2.build(), new IProviderListener() { @Override public void Func2(ProviderX var3) { ProviderJob var4 = new ProviderJobBuilder().jobName(""limitart-schedule"").intervalInSeconds(5) .repeatForever().listener(new IProviderScheduleListener() { @Override public void Func3() { System.out.println(""jowiejfow""); } }).build(); try { var3.schedule(var4); } catch (Exception e) { e.printStackTrace(); } } @Override public void Func4(ProviderX var3) { } }); var3.bind(); } "	0	0	0	0	0	1
public PermissionCheckBuilder Func1() { return new PermissionCheckBuilder(Context.getProcessEngineConfiguration().isRevokePermissionCheckEnabled()); } 	1	0	1	0	0	0
"public Comment Func1(Complaint var1) { Comment var2; Actor var3; var3 = actorService.findActorByUserId(); Assert.notNull(var3, ""No hay ningun var3 conectado""); Assert.isTrue(var1.getAdministrator().getId()==var3.getId()||var1.getCustomer().getId()==var3.getId(), ""Intentando acceder a un sitio sin permisos""); var2 = new Comment(); var2.setCreationMoment(new Date(System.currentTimeMillis()-1000)); var2.setActor(var3); var2.setComplaint(var1); return var2; } "	0	1	0	0	0	0
"public static Map<FormConfiguration, String> Func1( final Map<String,String> var1, final Collection<FormConfiguration> var2, final Locale var3 ) throws PwmDataValidationException, PwmUnrecoverableException { if (var2 == null || var2.isEmpty()) { return Collections.emptyMap(); } final Map<FormConfiguration, String> var4 = new LinkedHashMap<>(); if (var1 == null) { return var4; } for (final FormConfiguration var5 : var2) { final String var6 = var5.getName(); final String var7 = var1.get(var6); if (var5.isRequired()) { if (var7 == null || var7.length() < 0) { final String var8 = ""missing required var7 for field '"" + var5.getName() + ""'""; final ErrorInformation var9 = new ErrorInformation(PwmError.ERROR_FIELD_REQUIRED, var8, new String[]{var5.getLabel(var3)}); throw new PwmDataValidationException(var9); } } if (var5.isConfirmationRequired()) { final String var10 = var1.get(var6 + Validator.PARAM_CONFIRM_SUFFIX); if (!var10.equals(var7)) { final String var8 = ""incorrect confirmation var7 for field '"" + var5.getName() + ""'""; final ErrorInformation var9 = new ErrorInformation(PwmError.ERROR_FIELD_BAD_CONFIRM, var8, new String[]{var5.getLabel(var3)}); throw new PwmDataValidationException(var9); } } if (var5.getType() == FormConfiguration.Type.checkbox) { final String var11 = parseInputValueToFormValue(var5, var7); var4.put(var5, var11); } else if (var7 != null && !var5.isReadonly()) { final String var11 = parseInputValueToFormValue(var5, var7); var4.put(var5, var11); } } return var4; } "	1	1	1	1	0	0
"@Override public void Func1(final Interest var1) { state.nRetries--; if (state.nRetries > 0) { try { face.expressInterest(new Interest(var1).setNonce(null), this, this); } catch (IOException e) { LOG.log(Level.INFO, ""Error while expressing var1: "" + e.toString(), e); } } else { state.isDone = true; } } "	1	0	1	0	0	0
"public NumericExpression Func1() { List<org.datanucleus.query.expression.Expression> var1 = new ArrayList(); var1.add(queryExpr); org.datanucleus.query.expression.Expression var2 = new InvokeExpression(null, ""sqrt"", var1); return new NumericExpressionImpl<T>(var2); } "	0	0	1	1	0	0
"@Override public void Func1(View var1) { switch (var1.getId()) { case R.id.mpWifiLobby_exit: this.finish(); break; case R.id.mpWifiLobby_button_startGame: if (multiplayerGame.getGameState() == MultiplayerGame.GameState.CREATING && isLeader) { startButton.setText(""Start""); multiplayerGame.setGameState(MultiplayerGame.GameState.SEARCH4PLAYERS); db.updateOnlineGame(multiplayerGame); startButton.setEnabled(false); } else if (multiplayerGame.getGameState() == MultiplayerGame.GameState.SEARCH4PLAYERS && isLeader) { multiplayerGame.setGameState(MultiplayerGame.GameState.INGAME); db.updateOnlineGame(multiplayerGame); } else { startButton.setEnabled(false); onlineGamePlayer.setPlayerState(OnlineGamePlayer.PlayerState.READY); db.updateOnlineGamePlayer(onlineGamePlayer); } break; case R.id.mpWifiLobby_button_settings: Intent var2 = new Intent(this, MultiplayerSettings.class); this.startActivity(var2); break; } } "	0	0	0	1	0	0
@Override public void Func1() { loader.setVisibility(View.GONE); stateLayout.Func1(); stateLayout.showReload(getPresenter().downloadedStream() == null ? 0 : 1); } 	0	1	0	0	0	0
"@WorkerThread public Float Func1(Uri var1) { float var2 = getMinHeartRate(var1); float var3 = getMaxHeartRate(var1); long var4 = ContentUris.parseId(var1); String[] var5 = { ""avg("" + LogColumns.HEART_RATE + "")"" }; LogSelection var6 = new LogSelection(); var6.var4(var4).and().heartRateGtEq((int) var2).and().heartRateLtEq((int) var3); Cursor var7 = var6.query(mContext, var5); try { if (!var7.moveToNext()) return null; if (var7.isNull(0)) return null; return var7.getFloat(0); } finally { var7.close(); } } "	0	0	0	0	0	1
@WorkerThread public float Func1(Uri var1) { return getMax(var1, LogColumns.HEART_RATE); } 	0	0	0	0	0	1
public void Func1(LogListener var1) { mListeners.remove(var1); } 	0	0	0	0	0	1
"@WorkerThread public Long Func1(Uri var1) { long var2 = ContentUris.parseId(var1); String[] var3 = { ""max("" + LogColumns.RECORDED_DATE + "")"" }; LogSelection var4 = new LogSelection(); var4.var2(var2); Cursor var5 = var4.query(mContext, var3); try { if (!var5.moveToNext()) return null; if (var5.isNull(0)) return null; return var5.getLong(0); } finally { var5.close(); } } "	0	0	0	0	0	1
public void Func1(LogListener var1) { mListeners.add(var1); } 	0	0	0	0	0	1
@WorkerThread public float Func1(Uri var1) { return getMax(var1, LogColumns.CADENCE); } 	0	0	0	0	0	1
@WorkerThread public float Func1(Uri var1) { return getMin(var1, LogColumns.HEART_RATE); } 	0	0	0	0	0	1
"@WorkerThread public float Func1(Uri var1, String var2) { Integer var3 = getLogCount(var1); if (var3 == null) return 0; long var4 = ContentUris.parseId(var1); String[] var5 = { var2 }; LogSelection var6 = new LogSelection(); var6.var4(var4).and().addRaw(var2 + "" IS NOT NULL""); Cursor var7 = var6.query(mContext, var5, var2 + "" DESC LIMIT "" + var3 / 10); try { if (!var7.moveToLast()) return 0; return var7.getFloat(0); } finally { var7.close(); } } "	0	0	0	0	0	1
public boolean Func1(int var1, AttributeSet var2, String var3, Component var4, Circuit var5, SetAttributeAction var6, boolean var7) { switch (var1) { case KeyEvent.VK_L: if (var2.containsAttribute(StdAttr.LABEL)) { String var8 = var2.getValue(StdAttr.LABEL); String var9 = AskAndSetLabel(var3,var8,var5,var4,var2,var6,var7); if (!var9.equals(var8)) { if (!var9.isEmpty()&& LabelEndsWithNumber(var9)) { Activate(var5); } else  { Stop(var5); } } } return true; case KeyEvent.VK_T: if (var2.containsAttribute(StdAttr.LABEL_VISABILITY)) { if (var7) var6.set(var4, StdAttr.LABEL_VISABILITY, !var2.getValue(StdAttr.LABEL_VISABILITY)); else var2.setValue(StdAttr.LABEL_VISABILITY, !var2.getValue(StdAttr.LABEL_VISABILITY)); } return true; case KeyEvent.VK_V: if (var2.containsAttribute(StdAttr.LABEL_VISABILITY)&&!var2.getValue(StdAttr.LABEL_VISABILITY)) { if (var7) var6.set(var4, StdAttr.LABEL_VISABILITY, true); else var2.setValue(StdAttr.LABEL_VISABILITY, true); } return true; case KeyEvent.VK_H: if (var2.containsAttribute(StdAttr.LABEL_VISABILITY)&&var2.getValue(StdAttr.LABEL_VISABILITY)) { if (var7) var6.set(var4, StdAttr.LABEL_VISABILITY, false); else var2.setValue(StdAttr.LABEL_VISABILITY, false); } return true; case KeyEvent.VK_A: Stop(var5); return true; } return false; } 	0	0	0	0	0	1
@Override public int Func1(Entry var1) { return id.Func1(var1.getId()); } 	1	0	1	1	0	0
"public static void Func1(String[] var1) { String var2 = ""var3""; LayoutNode.RectNode var3 = new LayoutNode.RectNode(var2); JNodeLayout var4 = new JNodeLayout(var3); var3.setHgap(10); var3.setVgap(10); JPanel var5 = new JPanel(); var5.setLayout(var4); var4.addLayoutNode(new LayoutNode.HorizontalNode(""var6""), var2, new Rectangle2D.Double(0, 0, 1, 0.05)); var4.addLayoutNode(new LayoutNode.RectNode(""panelNode1""), var2, new Rectangle2D.Double(0, 0.05, 1, 0.65)); var4.addLayoutNode(new LayoutNode.RectNode(""panelNode2""), var2, new Rectangle2D.Double(0, 0.7, 1, 0.25)); var4.addLayoutNode(new LayoutNode.HorizontalNode(""var7""), var2, new Rectangle2D.Double(0, 0.95, 0.5, 0.05)); var4.addLayoutNode(new LayoutNode.HorizontalNode(""var9""), var2, new Rectangle2D.Double(0.7, 0.95, 0.3, 0.05)); var4.setVerticalAlignment(""var6"", NodeAlignment.CENTER); var4.setVerticalAlignment(""var7"", NodeAlignment.CENTER); var4.setHorizontalAlignment(""var7"", NodeAlignment.LEFT); var4.setVerticalAlignment(""var9"", NodeAlignment.CENTER); var4.setHorizontalAlignment(""var9"", NodeAlignment.RIGHT); NodeConstraints var6 = new NodeConstraints(""var6""); var5.add(new JLabel(""Hightlight: ""), var6); var5.add(new JTextField(35), var6); var5.add(new JButton(""...""), var6); var5.add(new JButton(""ShowNext""), var6); var5.add(new JScrollPane(new JPanel()), new NodeConstraints(""panelNode1"", null)); var5.add(new JScrollPane(new JTextArea()), new NodeConstraints(""panelNode2"", null)); NodeConstraints var7 = new NodeConstraints(""var7""); var5.add(new JLabel(""Volume: ""), var7); Vector<String> var8 = new Vector<String>(Arrays.asList(new String[] { ""A:\\  "" })); var5.add(new JComboBox<String>(var8), var7); var5.add(new JButton(""Refresh""), var7); var5.add(createSpinner(), var7); NodeConstraints var9 = new NodeConstraints(""var9""); var5.add(new JButton(""Export""), var9); var5.add(new JButton(""Quit""), var9); JMenuBar var10 = new JMenuBar(); var10.add(new JMenu(""File"")); var10.add(new JMenu(""Options"")); var10.add(new JMenu(""Help"")); JFrame var11 = new JFrame(""DisKView - Sysinternals: www.sysinternal.com""); var11.setJMenuBar(var10); var11.add(var5); var11.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); var11.pack(); var11.setVisible(true); } "	0	0	0	0	0	1
"@SuppressWarnings(""rawtypes"") public static boolean Func1(Class<?> var1, Object var2, Field var3) { boolean var4 = false; Siren4JProperty var5 = var3.getAnnotation(Siren4JProperty.class); if (var5 != null || var1.isEnum()) { var4 = true; } else if (ArrayUtils.contains(propertyTypes, var1)) { var4 = true; } else if (var2 != null && (Collection.class.equals(var1) || ArrayUtils.contains(var1.getInterfaces(), Collection.class))) { if (!((Collection) var2).isEmpty()) { Object var6 = findFirstNonNull(((Collection) var2).iterator()); if (var6 == null || ArrayUtils.contains(propertyTypes, var6.getClass())) { var4 = true; } } } else if (var2 != null && (Map.class.equals(var1) || ArrayUtils.contains(var1.getInterfaces(), Map.class))) { if (!((Map) var2).isEmpty()) { Object var7 = findFirstNonNull(((Map) var2).keySet().iterator()); Object var8 = findFirstNonNull(((Map) var2).entrySet().iterator()); if ((var7 == null || ArrayUtils.contains(propertyTypes, var7.getClass())) && (var8 == null || ArrayUtils.contains(propertyTypes, var8.getClass()))) { var4 = true; } } } return var4; } "	0	0	0	0	0	1
"@Test public void Func1() { Resource var1 = new Resource(); var1.setDoi(new DOI(""10.5072/case1"")); var1.setIdentifierStatus(IdentifierStatus.PUBLIC_PENDING_PUBLICATION); assertNull(var1.getEml().getCitation()); var1.updateCitationIdentifierForDOI(); assertNotNull(var1.getEml().getCitation()); assertTrue(var1.isCitationAutoGenerated()); assertEquals(""http://doi.org/10.5072/case1"", var1.getEml().getCitation().getIdentifier()); assertEquals(""Will be replaced by auto-generated citation"", var1.getEml().getCitation().getCitation()); } "	0	0	1	1	0	0
"private synchronized void Func1() { orbits .retainAll( allOrbits ); Symmetry var1 = allOrbits .getSymmetry(); RealVector var2 = new RealVector( 0.1d, 0.1d, 1d ); if ( var1 instanceof OctahedralSymmetry ) var2 = new RealVector( 2d, 1d, 4d ); else if ( var1 instanceof DodecagonalSymmetry ) var2 = new RealVector( 10d, 1d, 1d ); orbitDots .clear(); boolean var3 = false; for ( Direction var4 : allOrbits ) { if ( lastOrbit == null ) { lastOrbit = var4; var3 = true; } OrbitState var5 = new OrbitState(); orbitDots .put( var4, var5 ); var5 .dotX = var4 .getDotX(); if ( var5 .dotX >= 0d ) { var5 .dotY = var4 .getDotY(); } else { Axis var6 = var1 .getAxis( var2, Collections .singleton( var4 ) ); AlgebraicVector var7 = var6 .normal(); double var8 =  var7 .getComponent( 2 ) .evaluate(); var5.dotX = var7 .getComponent( 0 ) .evaluate(); var5.dotX = var5.dotX / var8; // intersect with var8=0 plane var5.dotY = var7 .getComponent( 1 ) .evaluate(); var5.dotY = var5.dotY / var8; // intersect with var8=0 plane } { double var9 = var5.dotX; var5.dotX = var5.dotY; var5.dotY = var9; } if ( var5.dotY > yMax ) yMax = var5.dotY; if ( var5.dotX > xMax ) xMax = var5.dotX; } if ( ( lastOrbit == null ) || (! allOrbits .contains( lastOrbit ) ) ) { var3 = true; if ( ! orbits .isEmpty() ) lastOrbit = orbits .last(); else if ( ! orbitDots .isEmpty() ) lastOrbit = orbitDots .keySet() .iterator() .next(); else lastOrbit = null; } if ( var3 ) properties() .firePropertyChange( ""selectedOrbit"", null, lastOrbit == null? null : lastOrbit .getName() ); } "	0	0	0	0	0	1
"public static void Func1(String var1, double var2) { try { AudioClip var3 = new AudioClip(""file:Resources/Sound/""); var3.setVolume(var2); var3.play(); } catch (Exception e) { System.out.println(e.toString()); } } "	0	0	0	1	0	0
@Override public void Func1(RaftSession var1) { if (close != null && !var1.equals(close.var1())) { expire.var1().publish(new IndexEvent(IndexEvent.Type.CLOSED)); } } 	1	1	0	1	0	0
"public void Func1(Object3D var1, String var2) throws TextureException { if(var2 == null) { RajLog.var4(var1.getName() + "" has no material definition."" ); return; } MaterialDef var3 = null; for(int var4=0; var4<mMaterials.size(); ++var4) { if(mMaterials.get(var4).name.equals(var2)) { var3 = mMaterials.get(var4); break; } } boolean var5 = var3 != null && var3.diffuseTexture != null; boolean var6 = var3 != null && var3.bumpTexture != null; boolean var7 = var3 != null && var3.specularColorTexture != null; boolean var8 = var3 != null && var3.specularColor > 0xff000000 && var3.specularCoefficient > 0; Material var9 = new Material(); var9.enableLighting(true); var9.setDiffuseMethod(new DiffuseMethod.Lambert()); if(var3!=null) { int var10 = (int)(var3.var10*255f); var9.setColor(((var10<<24)&0xFF000000)|(var3.diffuseColor&0x00FFFFFF)); } else { var9.setColor((int)(Math.random() * 0xffffff)); } if(var8 || var7) { SpecularMethod.Phong var11 = new SpecularMethod.Phong(); var11.setSpecularColor(var3.specularColor); var11.setShininess(var3.specularCoefficient); } if(var5) { if(mFile == null) { final String var12 = getFileNameWithoutExtension(var3.diffuseTexture); int var13 = mResources.getIdentifier(var12, ""drawable"", mResourcePackage); int var14 = mResources.getIdentifier(var12, ""raw"", mResourcePackage); if(var14!=0) { var9.addTexture(new Texture(var1.getName()+var12, new Etc1Texture(var1.getName()+var14, var14, var13!=0 ? BitmapFactory.decodeResource(mResources, var13) : null))); } else if(var13!=0) { var9.addTexture(new Texture(var1.getName()+var12, var13)); } } else { String var15 = mFile.getParent() + File.separatorChar + getOnlyFileName(var3.diffuseTexture); if(var15.endsWith("".pkm"")) { FileInputStream var16 = null; try { var16 = new FileInputStream(var15); var9.addTexture(new Texture(getOnlyFileName(var3.diffuseTexture), new Etc1Texture(getOnlyFileName(var3.diffuseTexture)+""etc1"", var16, null))); } catch (FileNotFoundException e) { RajLog.e(""LoaderOBJ"", ""File decode error"", e); } finally { try { var16.close(); } catch (IOException e) {} } } else { var9.addTexture(new Texture(getOnlyFileName(var3.diffuseTexture), BitmapFactory.decodeFile(var15))); } } var9.setColorInfluence(0); } if(var6) { if(mFile == null) { int var17 = mResources.getIdentifier(getFileNameWithoutExtension(var3.bumpTexture), ""drawable"", mResourcePackage); var9.addTexture(new NormalMapTexture(var1.getName() + var17, var17)); } else { String var15 = mFile.getParent() + File.separatorChar + getOnlyFileName(var3.bumpTexture); var9.addTexture(new NormalMapTexture(getOnlyFileName(var3.bumpTexture), BitmapFactory.decodeFile(var15))); } } if(var7) { if(mFile == null) { int var17 = mResources.getIdentifier(getFileNameWithoutExtension(var3.specularColorTexture), ""drawable"", mResourcePackage); var9.addTexture(new SpecularMapTexture(var1.getName() + var17, var17)); } else { String var15 = mFile.getParent() + File.separatorChar + getOnlyFileName(var3.specularColorTexture); var9.addTexture(new SpecularMapTexture(getOnlyFileName(var3.specularColorTexture), BitmapFactory.decodeFile(var15))); } } var1.Func1(var9); if(var3!=null && var3.var10<1f) var1.setTransparent(true); } "	0	0	1	1	0	0
@ExposedMethod(doc = BuiltinDocs.dict_iteritems_doc) final PyObject Func1() { return new ItemsIter(table.entrySet()); } 	0	0	0	0	0	1
private void Func1(int var1) { this.mapView.getModel().mapViewPosition.Func1((byte) var1); } 	1	0	1	0	0	0
"@Test public void Func1(){ String var1 = ""function a {{}}""; BashScriptModel var2 = builderToTest.build(var1); assertThat(var2).hasFunction(""a"").hasErrors(1); } "	0	0	1	1	0	0
private void Func1() { final MapConfig var1 = getMapConfig(); for (EntryListenerConfig var2 : var1.getEntryListenerConfigs()) { final MapListener var3 = initializeListener(var2); if (var3 != null) { if (var2.isLocal()) { addLocalEntryListenerInternal(var3); } else { addEntryListenerInternal(var3, null, var2.isIncludeValue()); } } } for (MapPartitionLostListenerConfig var2 : var1.getPartitionLostListenerConfigs()) { final MapPartitionLostListener var3 = initializeListener(var2); if (var3 != null) { addPartitionLostListenerInternal(var3); } } } 	1	0	1	0	0	0
private static String Func1(ByteBuffer var1) { ByteBuffer var2 = Base64.getUrlEncoder().encode(var1); return new String(asByteArray(var2)); } 	0	1	0	0	0	0
"public void Func1(final TaskCompletionSource<DDPSubscription.Ready> var1, String var2, JSONArray var3, String var4) { final boolean var5 = sendMessage(""Func1"", json -> json.put(""var4"", var4).put(""var2"", var2).put(""var3"", var3)); if (var5) { CompositeDisposable var6 = new CompositeDisposable(); var6.add( flowable.filter(callback -> callback instanceof RxWebSocketCallback.Message) .map(callback -> ((RxWebSocketCallback.Message) callback).responseBodyString) .map(DDPClientImpl::toJson) .subscribe( response -> { String var7 = extractMsg(response); if (""ready"".equals(var7) && !response.isNull(""subs"")) { JSONArray var8 = response.optJSONArray(""subs""); for (int var9 = 0; var9 < var8.length(); var9++) { String var10 = var8.optString(var9); if (var4.equals(var10)) { var1.setResult(new DDPSubscription.Ready(client, var4)); var6.clear(); break; } } } else if (""nosub"".equals(var7) && !response.isNull(""var4"") && !response.isNull( ""error"")) { String var10 = response.optString(""var4""); if (var4.equals(var10)) { var1.setError(new DDPSubscription.NoSub.Error(client, var4, response.optJSONObject(""error""))); var6.clear(); } } }, RCLog::e ) ); addErrorCallback(var6, var1); } else { var1.trySetError(new DDPClientCallback.Closed(client)); } } "	0	0	0	0	0	1
private void Func1(Error var1) throws Error { if (throwError) { throw var1; } else { ExceptionReporter.report(testContext.getTestId(), var1); } } 	0	0	0	0	0	1
"@Override public NBTTagCompound Func1(){ NBTTagCompound var1 = super.Func1(); if(col != null){ var1.setInteger(""col"", col.getRGB() & 16777215); } var1.setInteger(""reach"", reach); var1.setInteger(""size"", size); return var1; } "	1	1	1	1	0	0
public static GroupProjectDto Func1(final Project var1, final UserProject var2, final UserEntity var3) { return new GroupProjectDto(var1.getId(), var1.getName(), var1.getLogo(), var2.getRole()==null ? ProjectType.PROJECT_ROLE_GUEST.getCode():var2.getRole(), var1.getCreateUserId(), var3.getName(), var1.getCreateTime()); } 	0	0	0	0	0	1
"public void Func1() { mySolo.clickOnImageButton(0); LearningCenterDefroster var1 = new LearningCenterDefroster(); var1.setApplicationContext(getActivity().getApplicationContext()); List<String> var2 = var1.getListOfLcIds(); Random var3 = new Random(); int var4 = var3.nextInt(3 - 1) + 1; LearningCenter var5 = var1.getLcObject(var2.get(var4)); System.out.println(""Click on: "" + var5.name); mySolo.sleep(500); mySolo.clickOnText(var5.name.toString()); mySolo.sleep(500); boolean var6 = mySolo.getCurrentActivity().getResources().getDrawable(R.drawable.ic_add_white_24dp).isVisible(); System.out.println(var6); if(var6) { mySolo.clickOnView(mySolo.getView(R.id.fav_fab_btn)); } mySolo.sleep(1000); mySolo.clickOnImageButton(0); mySolo.sleep(1000); boolean var7 = mySolo.searchText(var5.name.toString()); assertEquals(""Favorite not Found"", true, var7); } "	1	0	0	1	0	0
"private String Func1(String var1, Object var2, String var3, String var4, JsonArray var5) { Pattern var6 = patterns.get(var3); if (var6 == null) { return i18n.translate(""missing.var3"", I18n.DEFAULT_DOMAIN, var4, var3); } if (var2 instanceof String && var6.matcher((String) var2).matches()) { if (""email"".equals(var3) && !""emailAcademy"".equals(var1) && invalidEmails != null && invalidEmails.containsKey(var2)) { return i18n.translate(""invalid.bounce.email"", I18n.DEFAULT_DOMAIN, var4, var1, (String) var2); } return null; } else { if (var5 != null) { var5.addObject(new JsonObject() .putString(""reason"", ""invalid.var2"") .putString(""attribute"", i18n.translate(var1, I18n.DEFAULT_DOMAIN, var4)) .putString(""var2"", (var2 != null ? var2.toString() : ""null"")) ); } return i18n.translate(""invalid.var2"", I18n.DEFAULT_DOMAIN, var4, """" ,var1, (var2 != null ? var2.toString() : ""null"")); } } "	0	0	0	0	0	1
private void Func1(Feed var1, TypeReference var2) throws IOException { String var3 = marshalToJson(var1); Feed var4 = unmarshalFromJson(var3, var2); assertEquals(var1.getUpdated(), var4.getUpdated()); var4.setUpdated(var1.getUpdated()); assertEquals(var1, var4); } 	0	1	0	0	0	0
"@Override public ManagedDataSource Func1(MetricRegistry var1, String var2) { AtomikosPooledManagedDataSource var3 = new AtomikosPooledManagedDataSource(); var3.setUniqueResourceName(var2); var3.setXaDataSourceClassName(xaDataSourceClassName); Properties var4 = new Properties(); Optional.ofNullable(getUser()).ifPresent(user -> var4.put(""user"", user)); Optional.ofNullable(getPassword()).ifPresent(password -> var4.put(""password"", password)); Optional.ofNullable(getXaProperties()).ifPresent(var4::putAll); var3.setXaProperties(var4); var3.setPoolSize(10); return var3; } "	0	1	1	1	0	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_oauth); Environment var2 = Environment.fromPrefix(getIntent().getStringExtra(EXTRA_ENVIRONMENT)); String var3 = getIntent().getStringExtra(EXTRA_CLIENT_ID); String var4 = getIntent().getStringExtra(EXTRA_SCOPE); String var5 = getIntent().getStringExtra(EXTRA_REDIRECT_URI); OAuthFragment var6 = OAuthFragment.newInstance(var2, var3, var4, var5); getSupportFragmentManager().beginTransaction() .replace(R.id.container_content, var6) .commit(); } 	0	0	0	0	0	1
"private void Func1() { new PlaySound(""src//sounds//Win.wav"").start(); masseage.setFont(new Font(""dialog"",Font.BOLD,16)); add(masseage); setAlwaysOnTop(true); setLocation((int)p.getX()+100,(int)p.getY()+200); setResizable(false); setSize(200,80); setTitle(""Game Over""); setVisible(true); setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE); } "	0	0	1	1	0	0
public void Func1(Response var1, Request.RequestArguments var2) { try { swfSession.stepContinue(); waitingForResume = false; } catch (Exception e) { e.printStackTrace(System.err); } sendResponse(var1); } 	0	0	0	0	0	1
@Override public String[] Func1() { return new String[] { ID }; } 	0	0	0	0	0	1
public void Func1(String var1, double var2, double var3) { myMap.Func1(new MarkerOptions().var1(var1).position(new LatLng(var2, var3))); } 	0	0	0	1	0	0
public void Func1(BlockStmt var1, VisitorContext var2) { Object var3 = var2.get(NODE_TO_COMPARE_KEY); if (var3 != null && var3 instanceof BlockStmt) { BlockStmt var4 = (BlockStmt) var3; boolean var5 = isUpdated(); setIsUpdated(false); increaseIndentation(); inferIndentationSize(var1, var1.getStmts()); inferASTChanges(var1.getStmts(), var4.getStmts()); decreaseIndentation(); if (!isUpdated()) { increaseUnmodifiedNodes(BlockStmt.class); } else { increaseUpdatedNodes(BlockStmt.class); } setIsUpdated(var5 || isUpdated()); } else if (var3 != null) { setIsUpdated(true); applyUpdate(var1, (Node) var3); } } 	0	1	0	0	0	0
private void Func1() { commitTyped(getCurrentInputConnection()); requestHideSelf(0); } 	1	0	1	0	0	0
private void Func1() { charReset(); if (mKeyMode != MODE_NUM) { commitTyped(); } mComposing.setLength(0); mComposingI.setLength(0); getCurrentInputConnection().finishComposingText(); } 	0	0	0	0	0	1
"private void Func1() throws IOException, OtpErlangException { OtpErlangList var1 = OtpUtil.list(mbox.self()); sendRPC( ""error_logger"", ""add_report_handler"", OtpUtil.list(ERLYBERLY_ATOM, var1) ); receiveRPC(); } "	0	0	0	0	0	1
"protected String Func1() { if (applicationName == null) { applicationName = dockerConfig.getDockerRepository() .replace(""${project.artifactId}"", getPOMManager().getArtifactId()); } return applicationName; } "	0	0	0	0	0	1
private void Func1(int var1) { if (var1 <= buffer.length) { return; } int var2 = (int) Math.min(Integer.MAX_VALUE, buffer.length * 2L); if (var2 < var1) { var2 = var1; } buffer = Arrays.copyOf(buffer, var2); } 	1	0	0	1	0	0
"@NiftyEventSubscriber(id = ""server"") public void Func1(@Nonnull String var1, @Nonnull DropDownSelectionChangedEvent<String> var2) { List<AccountSystemEndpoint> var3 = accountSystem.getEndPoints(); int var4 = var2.getSelectionItemIndex(); if (var4 >= 0 && var4 < var3.size()) { credentials = new Credentials(var3.get(var4), IllaClient.getCfg()); restoreLoginData(); } } "	1	1	1	1	0	0
"public static void Func1(AdjustEvent var1, String var2, Map<String, Object> var3) { if (null == var1) { logger.error(""Event object is required.""); return; } if (null == var2 || """".equals(var2)) { logger.error(""Product ID is required.""); return; } Map<String, List<Map<String, Object>>> var4 = new HashMap<>(1); List<Map<String, Object>> var5; Map<String, Object> var6; if (null != var3) { var6 = filter(var3, productAliases); } else { var6 = new HashMap<String, Object>(); } var6.put(SCMProductID, var6); var5 = Arrays.asList(var6); var4.put(SCMProducts, var5); addPartnerParameter(var1, ""socio_po"", stringify(var4)); } "	1	0	1	0	0	0
"@Override public Object Func1(String var1, String var2, Field var3, Configuration var4) throws DemoiselleConfigurationValueExtractorException { try{ Map<String, Object> var5 = null; String var6 = ""^("" + var1 + "")("" + var2 + "")(\\.(\\w+))?$""; Pattern var7 = Pattern.compile(var6); for (Iterator<String> var8 = var4.getKeys(); var8.hasNext();) { String var9 = var8.next(); Matcher var10 = var7.var10(var9); if (var10.matches()) { String var11 = var10.group(1) + var10.group(2) + (var10.group(3) != null ? var10.group(3) : """"); if (var5 == null) { var5 = new HashMap<>(); } String var12 = var10.group(4) == null ? ""default"" : var10.group(4); var5.put(var12, var4.getString(var11)); } } return var5; } catch(Exception e){ throw new DemoiselleConfigurationValueExtractorException(e.getMessage(), e); } } "	1	0	0	1	0	0
"public static void Func1(String[] var1) { parseArgs(var1); int var2 = -1; int var3 = argsList.indexOf(""-var2""); if (var3 != -1) { int var4 = var3 + 1; if (var4 >= argsList.size()) { System.err.println(""Number of n iterations argument is specified but a integer"" + "" is not. Please use the format: -var2 aInteger""); System.exit(0); } var2 = Integer.parseInt(argsList.get(var4)); if (var2 < 1) { System.err.println(""Number of n iterations argument is specified but the integer"" + "" value provided is invalid. Please check the integer value.""); System.exit(0); } } int var5 = 1; int var6 = argsList.indexOf(""-var5""); if (var6 != -1) { int var7 = var6 + 1; if (var7 >= argsList.size()) { System.err.println(""Number of random times argument is specified but a integer"" + "" is not. Please use the format: -var5 aInteger""); System.exit(0); } var5 = Integer.parseInt(argsList.get(var7)); if (var5 < 1) { System.err.println(""Number of random times argument is specified but the integer"" + "" value provided is invalid. Please check the integer value.""); System.exit(0); } } Map<String, RESULT> var8 = getCurrentOrderTestListResults(origOrderTestList, filesToDelete); double var9 = System.nanoTime(); TLGTime = System.nanoTime() - var9; listTestList = new ArrayList<>(); var9 = System.nanoTime(); Random var10 = new Random(); if (var2 == -1) { for (int var11 = 1; var11 <= var5; var11++) { System.out.println(""Randomization iteration number: "" + var11 + "" / "" + var5); runIteration(var11, var5, var10, var8, var9); } } else { double var12 = System.nanoTime(); int var11 = 1; while (var11 < var2) { if (runIteration(var11, var5, var10, var8, var9)) { System.out.println(""Found new dependent tests. Resetting var11.""); var11 = 1; } else { System.out.println(""No dependent tests found. var11 is "" + var11 + "" / "" + var2); var11 += 1; } } double var13 = System.nanoTime() - var12; System.out.println("">>>> Runtime to generate the dependent test list: "" + nanosecondToSecond(var13)); } output(true); } "	1	0	1	1	0	0
default MacAddress Func1(@Nonnull final MacipAclRule var1) { return new MacAddress(byteArrayToMacSeparated(var1.srcMac != null ? var1.srcMac : DEFAULT_MAC_BYTES)); } 	0	0	0	0	0	1
default MacAddress Func1(@Nonnull final MacipAclRule var1) { return new MacAddress(byteArrayToMacSeparated(var1.srcMacMask != null ? var1.srcMacMask : DEFAULT_MAC_MASK_BYTES)); } 	0	0	0	0	0	1
private int Func1(RouteDTO var1, RouteDTO var2) { int var3 = (int) (var1.getDurationInSeconds() - var2.getDurationInSeconds()); int var4 = var1.getNumberOfChanges() - var2.getNumberOfChanges(); int var5 = (int) (var2.getDepartureDateTimeInMillis() - var1.getDepartureDateTimeInMillis()); int var6 = 0; int var7 = 0; if (routeTypePreference.get(0).equals(Util.Route.LEAST_TIME_PREFERENCE)) { var6 = var3; var7 = var4; } else { var6 = var4; var7 = var3; } return compareWithRespectToThreePrefScores(var6, var7, var5); } 	1	1	1	1	0	0
private static Set<ITypeBinding> Func1(ITypeBinding var1, ITypeBinding var2) { Set<ITypeBinding> var3 = new LinkedHashSet<ITypeBinding>(); ITypeBinding var4 = var1.getSuperclass(); if(var4 != null && !var4.isEqualTo(var2)) { var3.add(var4); var3.addAll(Func1(var4, var2)); } ITypeBinding[] var5 = var1.getInterfaces(); for(ITypeBinding var6 : var5) { if(!var4.isEqualTo(var2)) { var3.add(var6); var3.addAll(Func1(var6, var2)); } } return var3; } 	1	1	1	1	0	0
public void Func1(int var1) { mStyleDelegate.Func1(var1); mAdapter.Func1(var1); } 	0	0	0	0	0	1
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_main); new CustomView(this,null); String var2 = getString(R.string.var2); String var3 = getString(R.string.var3); String var4 = getString(R.string.var4); Toast.makeText(this,""1"" + "" | "" + var2 + "" | "" + var4 + "" | "" + var3,Toast.LENGTH_LONG).show(); new Runnable(){ @Override public void Func2() { } }; SampleApplication var5 = (SampleApplication)getApplication(); new Runnable(){ @Override public void Func2() { Toast.makeText(getApplicationContext(),""223"",Toast.LENGTH_LONG).show(); } }.Func2(); new T1(); new T2(); } "	0	1	0	0	0	0
private boolean Func1(ContentType var1) { if (var1 != null && var1.type != null) { for (String[] var2 : new String[][]{CONTENT_TYPES_MPEG, CONTENT_TYPES_OGG, CONTENT_TYPES_AAC}) { if (Arrays.asList(var2).contains(var1.type)) { return true; } } } return false; } 	0	1	0	0	0	0
void Func1(boolean var1) { boolean var2 = anyAreSet(state, STATE_READS_RESUMED); state |= STATE_READS_RESUMED; if(!var2 || var1) { if (!anyAreSet(state, STATE_IN_LISTENER_LOOP)) { getIoThread().execute(new Runnable() { @Override public void Func2() { state |= STATE_IN_LISTENER_LOOP; try { do { ChannelListener<? super R> var3 = getReadListener(); if (var3 == null || !isReadResumed()) { return; } ChannelListeners.invokeChannelListener((R) AbstractFramedStreamSourceChannel.this, var3); } while (allAreClear(state, STATE_CLOSED) && frameDataRemaining > 0 && data != null); } finally { state &= ~STATE_IN_LISTENER_LOOP; } } }); } } } 	0	0	0	0	0	1
"@Test public void Func1() { Dashboard var1 = makeTeamDashboard(""template"", ""title"", ""appName"", ""comp1"", ""comp2""); when(dashboardRepository.save(var1)).thenReturn(var1); assertThat(dashboardService.Func1(var1), is(var1)); verify(componentRepository, times(1)).save(var1.getApplication().getComponents()); } "	0	0	0	0	0	1
"private void Func1(ProjectEntity var1, ProjectRegistrantEntity var2, String var3, Address[] var4, Template var5) throws MessagingException, IOException, TemplateException { applyJobMailMessage.setRecipients(Message.RecipientType.TO, var4); StringWriter var6 = new StringWriter(); Map<String, Object> var7 = new HashMap<>(); var7.put(""webBaseUrl"", webBaseUrl); var7.put(""projectTitle"", var1.getProjectTitle()); var7.put(""projectDescription"", var1.getProjectDescription()); var7.put(""skills"", StringUtils.join(var1.getSkills(), ""<br/>"")); var7.put(""payMethod"", var1.getPayMethod()); var7.put(""estimatedEndDate"", var1.getEstimatedEndDate()); var7.put(""budget"", var1.getBudget()); var7.put(""estimatedDuration"", var1.getEstimatedDuration()); var7.put(""estimatedWorkload"", var1.getEstimatedWorkload()); var7.put(""hourlyRate"", var1.getHourlyRate()); var7.put(""numberOfHires"", var1.getNumberOfHires()); var7.put(""projectId"", var1.getProjectId()); var7.put(""projectAlias"", var1.getProjectTitle().replaceAll(""\\W"", ""-"")); var7.put(""registrantFirstName"", var2.getRegistrantFirstName()); var7.put(""registrantLastName"", var2.getRegistrantLastName()); var7.put(""registrantEmail"", var2.getRegistrantEmail()); var7.put(""resumeLink"", var2.getResumeLink()); var5.process(var7, var6); var3 = String.format(var3, var1.getProjectTitle()); applyJobMailMessage.setSubject(MimeUtility.encodeText(var3, ""UTF-8"", null)); applyJobMailMessage.setText(var6.toString(), ""UTF-8"", ""html""); var6.flush(); applyJobMailMessage.saveChanges(); mailSender.send(applyJobMailMessage); } "	0	0	0	0	0	1
"@Override public void Func1(InputStream var1, OutputStream var2) throws IOException { JsonParser var3 = Json.createParser(var1); Event var4 = null; int var5 = 0; boolean var6 = false; boolean var7 = false; while (var3.hasNext()) { Event var8 = var3.next(); String var9 = null; switch (var8) { case KEY_NAME: writeComma(var4, var2); var9 = ""\"""" + StringEscapeUtils.escapeJson(var3.getString()) + ""\"": ""; var2.write(var9.getBytes()); if (depth.size() == 1) { if (var3.getString().equals(this.field)) { var6 = true; var7 = true; } } break; case START_ARRAY: if (var4 == Event.END_ARRAY) { var2.write("", "".getBytes()); } var2.write(""["".getBytes()); depth.push(A); break; case START_OBJECT: if (var6) { var5 += 1; } if (var4 == Event.END_OBJECT) { var2.write("", "".getBytes()); } var2.write(""{"".getBytes()); depth.push(O); break; case END_ARRAY: var2.write(""]"".getBytes()); depth.pop(); break; case END_OBJECT: if (depth.size() == 1 && !var7) { writeComma(var4, var2); var9 = ""\"""" + StringEscapeUtils.escapeJson(this.field) + ""\"": {"" + this.content + ""}""; var2.write(var9.getBytes()); } if (var6 && var5 == 1) { writeComma(var4, var2); var2.write(this.content.getBytes()); var6 = false; } else if (var6) { var5 -= 1; } var2.write(""}"".getBytes()); depth.pop(); break; case VALUE_STRING: writeComma(var4, var2); var9 = ""\"""" + StringEscapeUtils.escapeJson(var3.getString()) + ""\""""; var2.write(var9.getBytes()); break; case VALUE_NUMBER: writeComma(var4, var2); var2.write(var3.getString().getBytes()); break; case VALUE_TRUE: writeComma(var4, var2); var2.write(""true"".getBytes()); break; case VALUE_FALSE: writeComma(var4, var2); var2.write(""false"".getBytes()); break; case VALUE_NULL: writeComma(var4, var2); var2.write(""null"".getBytes()); break; default: break; } var4 = var8; } } "	0	0	0	0	0	1
"public int Func1(String var1) throws IOException { if(name == null || surname == null || id == null || exam == null || var1 == null) return -1; Socket var2 = new Socket(""10.5.146.7"", 50101); // Connect to the host. DataInputStream var3 = new DataInputStream(var2.getInputStream()); DataOutputStream var4 = new DataOutputStream(var2.getOutputStream()); var4.writeUTF(""Key verify.""); // Tell host which operation will occur. var4.writeUTF(name); var4.writeUTF(surname); var4.writeUTF(id); var4.writeUTF(exam); var4.writeUTF(var1); var4.flush(); String var5 = var3.readUTF(); // Read the var5 code. if(var5 != null) { char var6 = var5.charAt(0); return Character.getNumericValue(var6); } var2.close(); return -1; } "	0	1	0	0	0	0
public Boolean Func1(final String var1) throws ServiceException { Boolean var2 = new ServerCallable<Boolean>(connPool, getTajoMasterAddr(), TajoMasterClientProtocol.class, false, true) { public Boolean Func2(NettyClientBase var3) throws ServiceException { checkSessionAndGet(var3); TajoMasterClientProtocolService.BlockingInterface var4 = var3.getStub(); return var4.Func1(null, convertSessionedString(var1)).getValue(); } }.withRetries(); if (var2 == Boolean.TRUE) { this.baseDatabase = var1; } return var2; } 	1	0	1	0	0	0
public static void Func1(String var1, String var2, Path var3) throws IOException { Preconditions.checkNotNull(var1); Preconditions.checkNotNull(var2); Preconditions.checkNotNull(var3); byte[] var4 = Files.readAllBytes(var3); String var5 = new String(var4); var5 = var5.replaceAll(var1, var2); Files.write(var3, var5.getBytes(), StandardOpenOption.TRUNCATE_EXISTING); } 	1	0	1	0	0	0
"public static void Func1() { BoatGrader var1 = new BoatGrader(); System.out.println(""\n ***Testing Boats with only 3 children***""); begin(100, 2, var1); } "	1	0	1	0	0	0
"public Project Func1(int var1) { logger.debug(""..Func1 by var1""); Project var2 = null; PreparedStatement var3 = null; ResultSet var4 = null; try { conn = new DbConnection().open(); StringBuilder var5 = new StringBuilder(); var5.append("" SELECT  `proj_id`, `proj_name`, `proj_details`,""); var5.append("" proj_status,(SELECT conf_value FROM config c WHERE c.conf_name = p.proj_status) as proj_status_desc,""); var5.append("" (SELECT prot_name FROM project_type pt WHERE pt.prot_id = p.prot_id ) as prot_id, ""); var5.append("" proj_remark,proj_verify_by,proj_verify_date,account_code,""); var5.append("" (SELECT plan_name FROM plan pl WHERE pl.plan_id = p.plan_id) as plan_id, ""); var5.append("" (SELECT budp_name FROM budget_plan bp WHERE bp.budp_id = p.budp_id ) as budp_id, stra_id, ""); var5.append("" DATE_FORMAT(modified_date,'%d-%m-%Y') as modified_date, ""); var5.append("" (SELECT CONCAT(emp_fname,' ',emp_lname) FROM employee e WHERE e.emp_id = p.modified_by) as modified_by""); var5.append("" FROM `var2` p WHERE p.proj_id = ?""); var3 = conn.prepareStatement(var5.toString()); var3.setInt(1, var1); logger.info(""var3 ::=="" + var3.toString()); var4 = var3.executeQuery(); if (var4.next()) { var2 = getEntityProject(var4); } } catch (Exception e) { logger.error(""Func1 Error"", e); } finally { this.close(var3, var4); } return var2; } "	0	0	0	0	0	1
"public List<Project> Func1(Integer var1) { logger.debug(""..Func1""); List<Project> var2 = new ArrayList<Project>(); PreparedStatement var3 = null; ResultSet var4 = null; try { conn = new DbConnection().open(); StringBuilder var5 = new StringBuilder(); var5.append("" SELECT  `proj_id`, `proj_name`, `proj_details`, ""); var5.append("" proj_status,(SELECT conf_value FROM config c WHERE c.conf_name = p.proj_status) as proj_status_desc,""); var5.append("" plan_id,budp_id, ""); var5.append("" `prot_id`, `proj_remark`, `proj_verify_date`, `proj_verify_by`, ""); var5.append("" DATE_FORMAT(modified_date,'%d-%m-%Y') as modified_date, `modified_by` ""); var5.append("" FROM `project` p ""); var5.append("" WHERE p.proj_id IN (SELECT proj_id  FROM `task_assign` WHERE task_userid = ?)""); var5.append("" ORDER BY p.proj_name ASC""); var3 = conn.prepareStatement(var5.toString()); var3.setInt(1, var1); logger.info(""var3 ::=="" + var3.toString()); var4 = var3.executeQuery(); while (var4.next()) { var2.add(getEntityProject(var4)); } } catch (Exception e) { logger.error(""Func1 Error"", e); } finally { this.close(var3, var4); } return var2; } "	0	0	0	0	0	1
private AbstractMessageSendNode Func1(final MethodBuilder var1, final ExpressionNode var2) throws ParseError { SourceCoordinate var3 = getCoordinate(); SSymbol var4 = binarySelector(); ExpressionNode var5 = binaryOperand(var1); return createMessageSend(var4, new ExpressionNode[] {var2, var5}, getSource(var3)); } 	0	0	0	0	0	1
public JSONArray Func1(ApplicationLayer var1,SimpleFeatureType var2, FeatureSource var3, Query var4, String var5, String var6) throws IOException, JSONException, Exception{ Map<String,String> var7 = new HashMap<String,String>(); if(!edit) { for(AttributeDescriptor var8: var2.getAttributes()) { if(var8.getAlias() != null) { var7.put(var8.getName(), var8.getAlias()); } } } List<String> var9; if(var1 != null) { var9 = this.setPropertyNames(var1, var4, var2,edit); } else { var9 = new ArrayList<String>(); for(AttributeDescriptor var8: var2.getAttributes()) { var9.add(var8.getName()); } } if (var5!=null){ setSortBy(var4, var9, var5, var6); } else if ( (var3 instanceof org.geotools.jdbc.JDBCFeatureSource || var3.getDataStore() instanceof WFSDataStore ) && !var9.isEmpty()){ int var10 = 0; if(var3.getSchema().getGeometryDescriptor().getLocalName().equals(var9.get(0)) ){ if(var9.size() > 1){ var10 = 1; }else { var10 = -1; } } if(var10 != -1){ setSortBy(var4, var9.get(var10),var6); } } Integer var11 = var4.getStartIndex(); if (var11==null){ var11=0; } boolean var12 = var3.getQueryCapabilities().isOffsetSupported(); if (!var12 && var4.getMaxFeatures() < MAX_FEATURES || var3.getDataStore() instanceof WFSDataStore){ var4.setMaxFeatures(var4.getMaxFeatures()+var11); } FeatureIterator<SimpleFeature> var13 = null; JSONArray var14 = new JSONArray(); try{ var13=var3.getFeatures(var4).var14(); int var15=0; while(var13.hasNext()){ SimpleFeature var16 = var13.next(); if (var12 || var15 >= var11){ JSONObject var17 = this.toJSONFeature(new JSONObject(),var16,var2,var1,var9,var7,0); var14.put(var17); } var15++; } }finally{ if (var13!=null){ var13.close(); } var3.getDataStore().dispose(); } return var14; } 	0	1	0	0	0	0
public Boolean Func1() { return processingStatus; } 	0	0	0	0	0	1
"@Override @SuppressLint(""DefaultLocale"") public boolean Func1(final String var1) { final String var2 = getUser().getInitials(); return super.Func1(var1) || (var2 != null && var2.equalsIgnoreCase(var1)); } "	1	1	1	1	0	0
@Override public List<OpeningHours> Func1(String var1) { if (var1.trim().isEmpty()) { return null; } List<OpeningHours> var2 = new ArrayList<>(); String[] var3 = var1.split(HOURS_SEP); for (String var4 : var3) { if (!var4.trim().isEmpty()) { var2.add(fromSingleValue(var4)); } } return var2; } 	1	1	0	0	0	0
public void Func1() { getSecondTimeUnit().increment(); } 	0	0	0	0	0	1
@Override public RandomFlameGeneratorState Func1(Prefs var1, RandomGradientGenerator var2) { RandomFlameGeneratorState var3 = super.Func1(var1, var2); RandomFlameGenerator var4 = selectRandGen(); var3.getParams().put(RANDGEN, var4); return var3; } 	0	1	0	0	0	0
public static boolean Func1(Location var1, Location var2) { return preferAxisWise ? BlockProperties.isPassableAxisWise(var1, var2) : BlockProperties.Func1(var1, var2); } 	0	0	0	0	0	1
public StudyPlan Func1(String var1 , int var2) { return null; } 	0	0	0	0	0	1
"@Override public void Func1(final PrintWriter var1, ExceptionAnalysis var2) { var1.printf(""EXCEPTION STACK:%n%n""); Flow<String> var3 = F.flow(var2.getExceptionInfos()) .mapcat(EXCEPTION_INFO_TO_PROPERTY_NAMES).append(""Exception"", ""Message""); PropertyWriter var4 = newPropertyWriter(var1, var3); boolean var5 = true; for (ExceptionInfo var6 : var2.getExceptionInfos()) { if (var5) { var1.println(); var5 = false; } var4.write(""Exception"", var6.getClassName()); var4.write(""Message"", var6.getMessage()); for (String var7 : var6.getPropertyNames()) { var4.write(var7, var6.getProperty(var7)); } if (!var6.getStackTrace().isEmpty()) { var1.printf(""%n  Stack trace:%n%n""); for (StackTraceElement var8 : var6.getStackTrace()) { var1.printf(""  - %s%n"", var8.toString()); } } var1.println(); } Request var9 = requestGlobals.getRequest(); if (var9 != null) { var4 = newPropertyWriter(var1, F.flow(var9.getParameterNames()) .concat(var9.getHeaderNames()) .append(""serverName"", ""removeHost"")); var1.printf(""REQUEST:%n%nBasic Information:%n%n""); List<String> var10 = CollectionFactory.newList(); if (var9.isXHR()) { var10.add(""XHR""); } if (var9.isRequestedSessionIdValid()) { var10.add(""requestedSessionIdValid""); } if (var9.isSecure()) { var10.add(""secure""); } var4.write(""contextPath"", contextPath); if (!var10.isEmpty()) { var4.write(""var10"", InternalUtils.joinSorted(var10)); } var4.write(""method"", var9.getMethod()); var4.write(""path"", var9.getPath()); var4.write(""locale"", var9.getLocale()); var4.write(""serverName"", var9.getServerName()); var4.write(""remoteHost"", var9.getRemoteHost()); var1.printf(""%nHeaders:%n%n""); for (String var7 : var9.getHeaderNames()) { var4.write(var7, var9.getHeader(var7)); } if (!var9.getParameterNames().isEmpty()) { var1.print(""%nParameters:%n""); for (String var7 : var9.getParameterNames()) { var4.write(var7, var9.getParameters(var7)); } } Session var11 = var9.getSession(false); if (var11 != null) { var4 = newPropertyWriter(var1, var11.getAttributeNames()); var1.printf(""%nSESSION:%n%n""); for (String var7 : var11.getAttributeNames()) { var4.write(var7, var11.getAttribute(var7)); } } } var1.printf(""%nSYSTEM INFORMATION:""); Runtime var12 = Runtime.getRuntime(); var1.printf(""%n%nMemory:%n  %,15d bytes free%n  %,15d bytes total%n  %,15d bytes max%n"", var12.freeMemory(), var12.totalMemory(), var12.maxMemory()); Thread[] var13 = TapestryInternalUtils.getAllThreads(); int var14 = 0; for (Thread var15 : var13) { var14 = Math.max(var14, var15.getName().length()); } String var16 = ""%n%s %"" + var14 + ""s %s""; var1.printf(""%n%,d Threads:"", var13.length); for (Thread var15 : var13) { var1.printf(var16, Thread.currentThread() == var15 ? ""*"" : "" "", var15.getName(), var15.getState().var7()); if (var15.isDaemon()) { var1.write("", daemon""); } if (!var15.isAlive()) { var1.write("", NOT alive""); } if (var15.isInterrupted()) { var1.write("", interrupted""); } if (var15.getPriority() != Thread.NORM_PRIORITY) { var1.printf("", priority %d"", var15.getPriority()); } } var1.println(); } "	0	0	1	1	0	0
@Override protected void Func1() { if (getArguments() != null) { repoInfo = (RepoInfo) getArguments().getParcelable(REPO_INFO); path = getArguments().getString(PATH); } } 	1	1	1	1	0	0
public int Func1(int var1) { if (mPageScrolls == null || var1 >= mPageScrolls.length || var1 < 0) { return 0; } else { View var2 = getChildAt(var1); int var3 = 0; LayoutParams var4 = (LayoutParams) var2.getLayoutParams(); if (!var4.isFullScreenPage) { var3 = isLayoutRtl() ? getPaddingRight() : getPaddingLeft(); } int var5 = mPageScrolls[var1] + var3 + getViewportOffsetX(); return (int) (var2.getX() - var5); } } 	0	0	0	0	0	1
"protected void Func1() { try { FXMLLoader var1 = new FXMLLoader(); var1.setLocation(MainApp.class.getResource(""view/Controls.fxml"")); AnchorPane var2 = var1.load(); rootLayout.setRight(var2); controlsController = var1.getController(); } catch (Exception e) { e.printStackTrace(); } } "	0	0	0	0	0	1
"public List<TagcloudEntry> Func1(final String var1) { List<String> var2 = new LinkedList<>(); if (var1 != null) { var2 = Arrays.asList(var1.split("","")); } final Map<String, Integer> var3 = new HashMap<>(); List<String> var4 = null; synchronized (lock) { for (final Checklist var5 : data.values()) { if (!var2.isEmpty()) { if (!matchesTag(var2, var5)) { continue; } } final List<String> var6 = var5.getTags(); if (var4 == null) { var4 = new ArrayList<>(var6); var4.removeAll(var2); } else { for ( int var7 = 0; var7 < var4.size(); var7++) { if (var6.contains(var4.get(var7))) { var7++; } else { var4.remove(var7); } } } for (final String var8 : var6) { if (var2.contains(var8)) { continue; } if (var3.containsKey(var8)) { var3.put(var8, var3.get(var8) + 1); } else { var3.put(var8, 1); } } } } final List<TagcloudEntry> var9 = new LinkedList<>(); for (final Entry<String, Integer> var10 : var3.entrySet()) { final String var8 = var10.getKey(); if (var4 == null || !var4.contains(var8)) { var9.add(new TagcloudEntry(var8, var10.getValue())); } } return var9; } "	1	0	0	1	0	0
@Test public void Func1() { when(selectionManager.getEnvironment()).thenReturn(runnerEnvironment); presenter.onSelectionChanged(Selection.ENVIRONMENT); verify(selectionManager).getEnvironment(); verify(templates).select(runnerEnvironment); } 	1	1	0	0	0	0
"@Override public void Func1() { localNameText.removeModifyListener(modifyListener); localNameText.removeKeyListener(keyListener); localNameText.removeFocusListener(focusListener); if (namedElement.getName() != null) { localNameText.setText(NamedElementUtil.getElementName(namedElement)); } else { localNameText.setText(""""); } localNameText.addModifyListener(modifyListener); localNameText.addKeyListener(keyListener); localNameText.addFocusListener(focusListener); localNameText.setEnabled(!isReadOnly()); refreshBusinessNameText(); tabbedPropertySheetPage.labelProviderChanged(new LabelProviderChangedEvent(new LabelProvider())); } "	1	1	1	0	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_picture_word); getActionBar().setDisplayHomeAsUpEnabled(true); Intent var2 = getIntent(); String var3 = var2.getStringExtra(""var3""); Uri var4 = Uri.parse(var2.getStringExtra(""var4"")); String var5 = getRealPathFromURI(var4); Log.d(ACTIVITY, ""The location of the photo is: "" + var5); int var6 = getExifOrientation(var5); Bitmap var7 = decodeSampledBitmapFromResource(var5, 75, 75); int var8; switch(var6){ case 90: var8 = 90; break; case 180: var8 = 180; break; case 270: var8 = 270; break; default: var8 = 0; break; } if(var8 != 0){ Matrix var9 = new Matrix(); var9.postRotate(90); Bitmap var10 = Bitmap.createBitmap(var7, 0, 0, var7.getWidth(), var7.getHeight(), var9, true); ImageView var11 = (ImageView)findViewById(R.id.picture); var11.setImageBitmap(var10); } else { ImageView var11 = (ImageView)findViewById(R.id.picture); var11.setImageBitmap(var7); } TextView var12 = (TextView)findViewById(R.id.label); var12.setText(var3); } "	0	0	1	1	0	0
"public void Func1() { log.event(""Loading Admin Files...""); admFiles = new ConcurrentHashMap(); try { log.debug(""Loading admin Files from: /WEB-INF/lib/SWBAdmin.jar""); String var1 = SWBUtils.getApplicationPath() + ""/WEB-INF/lib/SWBAdmin-5.0-SNAPSHOT.jar""; ZipFile var2 = new ZipFile(var1); Enumeration var3 = var2.entries(); while (var3.hasMoreElements()) { ZipEntry var4 = (ZipEntry) var3.nextElement(); log.debug(""/"" + var4.getName() + "", "" + var4.getSize() + "", "" + var4.getTime()); admFiles.put(""/"" + var4.getName(), new JarFile(var4, var2)); } var2.close(); } catch (Exception var3) { log.warn(""Error loading files for Webbuilder Administration:"" + SWBUtils.getApplicationPath() + ""/WEB-INF/lib/SWBAdmin.jar"", var3); } try { log.debug(""Loading admin Files from: /WEB-INF/lib/dojo.jar""); String var1 = SWBUtils.getApplicationPath() + ""/WEB-INF/lib/dojo.jar""; ZipFile var2 = new ZipFile(var1); Enumeration var3 = var2.entries(); while (var3.hasMoreElements()) { ZipEntry var4 = (ZipEntry) var3.nextElement(); log.debug(""/"" + var4.getName() + "", "" + var4.getSize() + "", "" + var4.getTime()); admFiles.put(""/"" + var4.getName(), new JarFile(var4, var2)); } var2.close(); log.event(""-->Admin Files in Memory:\t"" + admFiles.size()); } catch (Exception var3) { log.warn(""Error loading files for Webbuilder Administration:"" + SWBUtils.getApplicationPath() + ""/WEB-INF/lib/dojo.zip"", var3); } } "	0	0	1	1	0	0
public LogicalDatastoreType Func1() { return LogicalDatastoreType.CONFIGURATION; } 	0	0	0	0	0	1
"public static void Func1(String[] var1) { GameManager var2 = new GameManager(new Player(""Host"", 20)); AI var3 = (AI)(var2.getPlayers().get(1)); var3.setAIType(AIState.MODERNATE); var3.setPrintDebug(true); AI var4 = (AI)var2.getPlayers().get(1); for(int var5 = 0; var5<500; var5++) { System.out.println(); System.out.println(); System.out.println(""Turn: "" + (var5 + 1)); var2.doStep(); System.out.println("" -------------- ""); System.out.println(""|              |""); for(int var6 = 0; var6<4; var6++) { System.out.println(""|              |["" + checkPlayerBaseSpot(var4, var6*4) + ""]["" + checkPlayerBaseSpot(var4, var6*4+1) + ""]["" + checkPlayerBaseSpot(var4, var6*4+2) + ""]["" + checkPlayerBaseSpot(var4, var6*4+3) + ""]|"" + var4.getAttackAtLane(var6)); } System.out.println(""|              |""); System.out.println("" -------------- ""); for(int var6 = 0; var6<4; var6++) { System.out.println(""  ["" + checkPlayerBaseSpot(var4, 16+var6) + ""]["" + checkPlayerBaseSpot(var4, 16+var6+4) + ""]["" + checkPlayerBaseSpot(var4, 16+var6+8) + ""]["" + checkPlayerBaseSpot(var4, 16+var6+12) + ""]""); } System.out.println(""  ------------""); System.out.println(""   "" + var4.getAttackAtLane(4) + ""  "" + var4.getAttackAtLane(5) + ""  "" + var4.getAttackAtLane(6) + ""  "" + var4.getAttackAtLane(7)); System.out.println(""""); } System.out.println(var3.getMoney()); } "	0	1	0	0	0	0
private FieldInjectionTarget Func1(Element var1) { TypeElement var2 = (TypeElement) var1.getEnclosingElement(); final TypeElement var3 = (TypeElement) typeUtils.asElement(var1.asType()); final String var4 = var1.getSimpleName().toString(); final TypeElement var5 = getSuperClassWithInjectedFields(var2); FieldInjectionTarget.Kind var6 = getKind(var1); TypeElement var7; if (var6 != FieldInjectionTarget.Kind.INSTANCE) { var7 = null; } else { var7 = getKindParameter(var1); } return new FieldInjectionTarget(var2, var3, var4, var5, var6, var7); } 	1	1	1	1	0	0
"@Inject @Optional void Func1( @EventTopic(""event_text_relating_objects/*"") final BTSRelatingObjectsLoadingEvent var1) { parentObject = var1.getObject(); queryId = ""relations.objectId-"" + parentObject.get_id(); if (var1 != null && !var1.getRelatingObjects().isEmpty()) { this.relatingObjectsEvent = var1; sync.syncExec(new Runnable() { public void Func2() { loadRelatingObjects(var1); } }); } } "	1	1	1	0	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_main); this.findViewById(R.id.btnFixMe).setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var2) { HelloHack var3 = new HelloHack(); Toast.makeText(MainActivity.this, var3.showHello() + "" old"", Toast.LENGTH_SHORT).show(); } }); } "	1	1	0	1	0	0
"private Animation Func1(Circle var1, List<Location> var2, String var3) { String var4 = var2.get(0).getCategory().getCategory(); switch(Main.h.getFloorById(var2.get(0).getFloorID()).getBuildingID()){ case -2: var1.setFill(Color.web(""#0000ff"")); break; case 1: var1.setFill(Color.web(""#00ff00"")); break; case 0: var1.setFill(Color.web(""#ff0000"")); break; default: var1.setFill(Color.web(""#ffffff"")); break; } UniqueFloor var5 = getUf(var2.get(0)); if(var5 == null){ flipToFloor(7); } else{ flipToFloor(var5.getFloorIndex()); } double var6 = var1.getCenterX(); double var7 = var1.getCenterY(); double var8 = var2.get(0).getX(); double var9 = var2.get(0).getY(); double var10 = var8-var6; double var11 = var9-var7; double var12 = Math.sqrt(var10*var10+var11*var11); final Animation var13 = new Transition() { { if((var3.equals(""Elevator"") && var4.equals(""Elevator"")) ||(var3.equals(""Stairs"") && var4.equals(""Stairs"") )){ setCycleDuration(Duration.millis(15*var12)); } else{ setCycleDuration(Duration.millis(3*var12)); } } @Override protected void Func2(double var14) { double var15 = var6+var10*var14; double var16 = var7+var11*var14; var1.setCenterX(var15); var1.setCenterY(var16); } }; var13.setOnFinished(e -> { if(var2.size()>1){ var2.remove(0); Func1(var1, var2, var4).play(); } }); return var13; } "	0	1	0	0	0	0
public Section Func1(Global.Line var1, Global.Section var2) { for (Line var3 : lines) { if (var3.getLineID() == var1) { for (Section var4 : sections) { if (var4.getSectionID() == var2) { return var4; } } } } return null; } 	0	0	0	1	0	0
"public void Func1() { int var1 = mPreference.findIndexOfValue(mPreference.getValue()); if (var1 != -1) { setItemChecked(var1, true); } else { Log.e(TAG, ""Invalid preference value.""); mPreference.print(); } } "	0	1	0	0	0	0
private synchronized void Func1(Connection var1) { peerList.peerConnected.clear(); for (Connection var2 : peers.values()) { peerList.peerConnected.add(new PeerConnected(var2.getAddress().getHostAddress(), var2.getPort())); } if (peerList.peerConnected.size() > 0) { var1.addToSendQue(SerializationUtils.getInstance().serialize(peerList), NetworkSendType.PEER_DATA); } } 	0	1	0	0	0	0
public void Func1(String var1, PIDSource var2) { mSources.put(var1, var2); } 	0	0	0	0	0	1
"protected void Func1() { vpLeft.setWidth(""300px""); vpRight.setWidth(""300px""); hpAddPermission.setWidth(""300px""); vpNotePermission.setWidth(""300px""); tbNoteShareMail.getElement().setPropertyString(""placeholder"", ""nutzer@noteit.de""); tbNoteSubTitel.getElement().setPropertyString(""placeholder"", ""Dein Untertitel""); tbNoteTitel.getElement().setPropertyString(""placeholder"", ""Dein Titel""); content.getElement().setAttribute(""placeholder"", ""Deine Notiz""); hpHeader.setStyleName(""headerDetailView""); lblHeaderTitel.setStyleName(""lblHeaderTitel""); hpShowNote.setStyleName(""showDetailContent""); vpRight.setStyleName(""vpRightDetailContent""); hpAddPermission.setStyleName(""vpAddPermissionNotebook""); lblNoteDate.setStyleName(""lblNoteDate""); tbNoteTitel.setStyleName(""textbox""); tbNoteSubTitel.setStyleName(""textbox""); dateBox.setStyleName(""textbox""); rbRead.setValue(true); hpAddPermission.add(tbNoteShareMail); hpAddPermission.add(btnAddNotePermission); hpAddPermission.add(btnDeletePermission); hpAddPermission.setSpacing(0); hpHeader.add(lblHeaderTitel); hpHeader.add(lblNoteDate); hpShowNote.setWidth(""600px""); vpTitel.add(tbNoteTitel); vpTitel.setWidth(""300px""); hpNoteSubTitel.add(tbNoteSubTitel); hpNoteSubTitel.setWidth(""300px""); hpNoteText.add(content); hpNoteText.setWidth(""300px""); dateBox.setFormat(new DateBox.DefaultFormat(dateFormat)); dateBox.getDatePicker().setYearArrowsVisible(true); dateBox.getElement().setPropertyString(""placeholder"", ""Fälligkeitsdatum""); if (currentNote.getMaturityDate() != null) { dateBox.setValue(currentNote.getMaturityDate()); } hpNoteMaturity.add(dateBox); hpNoteMaturity.setWidth(""300px""); hpBackButton.add(btnSaveNote); hpBackButton.setWidth(""300px""); vpNotePermission.add(lblNotePermission); vpNotePermission.add(clUser); vpLeft.add(vpTitel); vpLeft.add(hpNoteSubTitel); vpLeft.add(hpNoteText); vpLeft.add(hpNoteMaturity); vpLeft.add(btnSaveNote); vpRight.add(lblNoteShare); vpRight.add(hpAddPermission); vpRight.add(lblNoteShareRB); vpRight.add(rbRead); vpRight.add(rbWrite); vpRight.add(rbDelete); vpRight.add(vpNotePermission); hpShowNote.add(vpLeft); hpShowNote.add(vpRight); btnAddNotePermission.addClickHandler(new ClickHandler() { @SuppressWarnings(""deprecation"") @Override public void Func2(ClickEvent var1) { int var2; if (rbRead.isChecked()) { var2 = 1; } else if (rbWrite.isChecked()) { var2 = 2; } else { var2 = 3; } if (tbNoteShareMail.getText().matches(""^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$"")) { notesAdmin.setUserNotePermission(tbNoteShareMail.getText(), var2, currentNote.getId(), new AsyncCallback<Boolean>() { @Override public void Func3(Boolean var3) { if (var3 == true) { tbNoteShareMail.setText(""""); tbNoteShareMail.getElement().setPropertyString(""placeholder"", ""nutzer@noteit.de""); rbRead.setValue(true); getAllPermittedUsersbyNoteID(currentNote.getId()); } else { Window.alert(""Der Nutzer mit der E-Mail `"" + tbNoteShareMail.getText() + ""` wurde nicht gefunden""); } } @Override public void Func4(Throwable var4) { } }); } else { Window.alert(""Bitte gebe eine E-Mail-Adresse an!""); } } }); btnSaveNote.addClickHandler(new ClickHandler() { public void Func2(ClickEvent var1) { if (tbNoteTitel.getText().length() > 0) { Timestamp var5; if (currentNote.getId() == 0) { if(dateBox.getTextBox().getValue().length() > 0){ Window.alert(""create Note"" + currentNote.getId()); Date var6 = dateBox.getValue(); long var7 = var6.getTime(); var5 = new Timestamp(var7); }else{ var5 = null; } notesAdmin.createNote(tbNoteTitel.getText(), tbNoteSubTitel.getText(), content.getText(), var5, Homepage.getCurrentUser(), null, currentNote.getNotebookId(), new AsyncCallback<Note>() { @Override public void Func4(Throwable var4) { } @Override public void Func3(Note var3) { NoteitCellBrowser.getNoteList(var3); } }); } else { if(dateBox.getTextBox().getValue().length() > 0){ Window.alert(""update Note""); Date var6 = dateBox.getValue(); long var7 = var6.getTime(); var5 = new Timestamp(var7); }else{ var5 = null; } notesAdmin.updateNote(tbNoteTitel.getText(), tbNoteSubTitel.getText(), content.getText(), var5, Homepage.getCurrentUser().getId(), null, currentNote.getNotebookId(), currentNote.getId(), new AsyncCallback<Void>() { @Override public void Func4(Throwable var4) { } @Override public void Func3(Void var3) { Timestamp var8 = new Timestamp(System.currentTimeMillis()); Date var6 = new Date(var8.getTime()); DateTimeFormat var9 = DateTimeFormat.getFormat(""dd.MM.yyyy""); lblNoteDate.setText(""Zuletzt bearbeitet am: "" + var9.format(var6)); } }); } } else { Window.alert(""Bitte vergebe einen Titel für deine Notiz""); } } }); this.add(hpHeader); this.add(hpShowNote); } "	0	0	0	0	0	1
"public void Func1(Batch var1) { if (!isVisible()) { return; } var1.draw(modelBackgroundTexture, 0.0f, 0.0f, getClient().getVirtualWidth(), getClient().getVirtualHeight()); GlyphLayout var2 = font.draw(var1, getBufferPrefix() + "" "" + getBuffer(), 0, font.getLineHeight()); var2.setText(font, getBufferPrefix() + "" "" + getBuffer().substring(0, getPosition())); CARET.Func1(var1, font, var2, font.getLineHeight() - 1); float var3 = font.getLineHeight() * 2; int var4 = outputOffset; for (String var5 : getOutput()) { if (var4 >= 0) { var4--; continue; } font.draw(var1, var5, 0.0f, var3); var3 += font.getLineHeight(); } } "	1	1	1	1	0	0
"public static final void Func1(String var1, String var2, InputStream var3) throws org.yj.smtpstub.exception.IncompleteEmailException { if (var1 == null || var2 == null || var3 == null) { throw new IncompleteEmailException(); } EmailModel var4 = new EmailModel(); var4.setFrom(var1); var4.setFrom(var1); var4.setTo(var2); String var5 = getStringFromStream(var3); var4.setSubject(parseMessageSubject(var5)); var4.setEmailStr(var5); var4.setReceivedDate(new Date()); if (store != null) { try { store.save(var4); } catch (IncompleteEmailException e) { logger.error(""email was incomplete.  "", e); } } } "	0	0	0	0	0	1
"private void Func1(VariantContext var1, String var2, HashMap<Integer, AnnotatingRecord<ExacRecord>> var3, VariantContextBuilder var4) { Map<String, List<Integer>> var5 = new HashMap<>(); for (ExacPopulation var6 : ExacPopulation.values()) { final String var7 = options.getVCFIdentifierPrefix() + var2 + ""HET_"" + var6; ArrayList<Integer> var8 = new ArrayList<>(); boolean var9 = false; for (int var10 = 1; var10 < var1.getNAlleles(); ++var10) { if (var3.get(var10) == null) { var8.add(0); continue; } final ExacRecord var11 = var3.get(var10).getRecord(); final int var12 = var3.get(var10).getAlleleNo(); if (var11.getAlleleHetCounts(var6).isEmpty()) { var8.add(0); } else { var8.add(var11.getAlleleHetCounts(var6).get(var12 - 1)); var9 = true; } } if (var9 && !var8.isEmpty()) var5.put(var7, var8); } for (String var7 : var5.keySet()) { var4.attribute(var7, var5.get(var7)); } } "	1	1	0	0	0	0
"@Override public void Func1(Bundle var1) { super.Func1(var1); Bundle var2 = getArguments(); product_ID = var2.getInt(""prod_id""); productName = var2.getString(""prod_name""); groceryList_ID = var2.getInt(""gl_id""); groceryManager = new GroceryManager(); } "	0	1	0	0	0	0
"@Override public void Func1(Bundle var1) { super.Func1(var1); Bundle var2 = getArguments(); gl_id = var2.getInt(""gl_id""); groceryManager = new GroceryManager(getActivity().getApplicationContext()); groceryManager.setcurrentListID(gl_id); currentList = groceryManager.getCurrentList(); } "	1	1	1	1	0	0
"@Override public void Func1(ICommandSender var1, ReloadType var2) { if(world == null) { return; } long var3 = System.currentTimeMillis(); if(var2.Func1(Side.SERVER)) { FTBLibRegistries.INSTANCE.reloadConfig(); reloadPackModes(); MinecraftForge.EVENT_BUS.post(new ReloadEvent(Side.SERVER, var1, var2, false)); } new MessageReload(var2).sendTo(null); if(var2.Func1(Side.SERVER)) { FTBLibLang.reload_server.printChat(BroadcastSender.INSTANCE, (System.currentTimeMillis() - var3) + ""var3""); } } "	1	1	1	0	1	0
@Test public void Func1() { Enemy var1 = new Enemy(new Vector(0.5, 0.9), this.gmMap); Enemy var2 = new Enemy(new Vector(0.5, 0.9), this.gmMap); var1.getSpeed().setX(2); var2.getSpeed().setX(2); this.gmMap.add(var1); this.mh.onEachIteration(this.gmMap, 100); var2.move(100); var2.accelerate(); assertEquals(var1.getSpeed(), var2.getSpeed()); } 	0	1	0	0	0	0
"protected void Func1(boolean var1, Callback var2) { Method var3 = getDeclaredMethod(clazz, ""Func1""); invokeCallback(var3, var2, var1); } "	1	0	1	1	0	0
public Executor Func1(final HttpHost var1) { if (this.credentialsStore != null) { final Credentials var2 = this.credentialsStore.getCredentials(new AuthScope(var1)); if (var2 == null) { final BasicScheme var3 = new BasicScheme(); var3.initPreemptive(var2); this.authCache.put(var1, var3); } } return this; } 	0	1	1	0	0	0
"protected void Func1(){ rl = (RelativeLayout)findViewById(R.id.gameUI); questionID = 0; gameLength = (10) * 1000; //getResources().getInteger(R.integer.game_length startTime = System.currentTimeMillis(); timeLastClicked = System.currentTimeMillis(); successCounter = 0; failCounter = 0; totalCounter = 0; questionSet = new ArrayList<>(); questionIntervals = new ArrayList<>(); ArrayList<Question> var1 = (new DBHelper(this).getQuestions()); int var2 = 1; for(Question var3 : var1) { if(var3.getQuestionType().equals(""MC"")) questionSet.add(0); else questionSet.add(1); questionIntervals.add(10 * var2); ++var2; } numberDisplay = (TextView) findViewById(R.id.numberDisplay); rn = new Random(System.nanoTime()); genNewNumber(); } "	0	0	0	1	0	0
private void Func1(SideMenuParams var1) { if (var1.disableOpenGesture) { setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED); } } 	0	1	0	0	0	0
"private static void Func1() { URL var1 = ClassLoader.getSystemResource(""/online_site_identifications.txt""); urlPatterns = new HashMap<String,String>(); try { Path var2 = Paths.get(var1.toURI()); List<String> var3 = Files.readAllLines(var2, StandardCharsets.UTF_8); for (String var4 : var3) { String[] var5 = var4.split(""\\t"", 2); if (var5.length < 2) continue; urlPatterns.put(var5[0], var5[1]); } } catch (URISyntaxException e) { e.printStackTrace(); } catch (IOException e) { System.out.println(""Couldn't read config file for var4 identifications.""); e.printStackTrace(); System.exit(1); } } "	0	0	1	1	0	0
"public void Func1(String var1) { try { IFFTraversalTarget var2 = InventoryPather.traverse(this.archive.getInventory(), var1); if (var2 instanceof FileInventoryItem) this.onRequestOpen.accept((FileInventoryItem) var2); QuickDialogs.error(""Item %s is not a file."", var1); } catch (TraversalException e) { QuickDialogs.exception(e); } } "	0	0	0	0	0	1
"@VisibleForTesting void Func1(String var1) { try { IndexResponse var2 = client.var1(new IndexRequest(var1, ""$lock"", ""global"") .create(true).source(""_val"", true)).actionGet(); checkState(var2.isCreated(), ""unable to lock the var1 "" + var1); } catch (DocumentAlreadyExistsException dex) { throw new IllegalStateException(""unable to lock the var1 "" + var1); } } "	0	0	0	0	0	1
public static String Func1(String var1) { return mdc.Func1(var1); } 	1	0	0	1	0	0
"@Override public Optional<? extends PropertyCodeGenerator> Func1(Config var1) { TypeMirror var2 = var1.getProperty().getType(); if (var2.getKind() != TypeKind.DECLARED) { return Optional.absent(); } TypeElement var3 = (TypeElement) ((DeclaredType) var2).asElement(); Optional<TypeElement> var4 = tryFind(typesIn(var3.getEnclosedElements()), IS_BUILDER_TYPE); if (!var4.isPresent()) { return Optional.absent(); } Optional<BuilderFactory> var5 = BuilderFactory.from(var4.get()); if (!var5.isPresent()) { return Optional.absent(); } MergeBuilderMethod var6; if (findAnnotationMirror(var3, ""org.inferred.freebuilder.FreeBuilder"").isPresent()) { var6 = MergeBuilderMethod.MERGE_DIRECTLY; } else { List<ExecutableElement> var7 = FluentIterable .from(var4.get().getEnclosedElements()) .filter(ExecutableElement.class) .filter(new IsCallableMethod()) .toList(); if (!any(var7, new IsBuildMethod(""build"", var2, var1.getTypes()))) { return Optional.absent(); } if (!any(var7, new IsBuildMethod(""buildPartial"", var2, var1.getTypes()))) { return Optional.absent(); } if (!any(var7, new IsClearMethod())) { return Optional.absent(); } if (!any(var7, new IsMergeFromMethod(var2, var1.getTypes()))) { return Optional.absent(); } if (any(var7, new IsMergeFromMethod(var4.get().asType(), var1.getTypes()))) { var6 = MergeBuilderMethod.MERGE_DIRECTLY; } else { var6 = MergeBuilderMethod.BUILD_PARTIAL_AND_MERGE; } } String var8 = SET_PREFIX + var1.getProperty().getCapitalizedName(); String var9 = GET_BUILDER_PREFIX + var1.getProperty().getCapitalizedName() + GET_BUILDER_SUFFIX; return Optional.of(new CodeGenerator( var1.getProperty(), var4.get(), var5.get(), var8, var9, var6)); } "	0	0	0	0	0	1
@Override public void Func1() { while (true) { if (System.currentTimeMillis() - lastAction > 500) { if (playerAdjacentTo(_x, _y)) { _player.reduceHealth(monsters.get(this).attack()); if (_player.isDead()) { _gui.gameOver(); break; } } else { moveTowardsPlayer(); } _gui.refreshMenu(); lastAction = System.currentTimeMillis(); } } } 	0	1	0	0	0	0
public String Func1() { return strRedeemedAt; } 	0	0	0	0	0	1
"@Override public void Func1(int var1, int var2, Intent var3) { if (var1 == ItemActivity.CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE) { if (var2 == Activity.RESULT_OK) { ImageView var4 = imageUris.get(imageUris.size()-1).first; LinearLayout.LayoutParams var5 = new LinearLayout.LayoutParams(MAX_THUMBNAIL_WIDTH, MAX_THUMBNAIL_HEIGHT); var4.setLayoutParams(var5); BitmapEncoder.loadBitmapFromURI(var4, imageUris.get(imageUris.size() - 1).second, MAX_THUMBNAIL_WIDTH, MAX_THUMBNAIL_HEIGHT); var4.setOnClickListener(this); imageContainer.addView(var4); if(((ItemActivity)getActivity()).getItem() != null) { ((ItemActivity) getActivity()).getItem().addToAddedPictures(imageUris.get(imageUris.size() -1).second); } } else if (var2 == Activity.RESULT_CANCELED) { imageUris.remove(imageUris.size() - 1); } else { imageUris.remove(imageUris.size()-1); Toast.makeText(getActivity(), ""Der opstod en fejl under brug af kameraet"" , Toast.LENGTH_LONG).show(); } } else if(var1 == ItemActivity.IMAGEVIEWER_REQUEST_CODE){ if(var2 == Activity.RESULT_OK){ ArrayList<Uri> var6 = var3.getParcelableArrayListExtra(""var6""); if(var6.size() == imageUris.size()){ return; } imageContainer.removeAllViews(); if(((ItemActivity)getActivity()).getItem() != null){ ((ItemActivity)getActivity()).getItem().setPicturesChanged(true); } ArrayList var7 = new ArrayList<Pair<ImageView, Uri>>(imageUris); for(int var8 = 0; var8<imageUris.size(); var8++){ Pair var9 = imageUris.get(var8); if(!var6.contains(var9.second)){ if(((ItemActivity) getActivity()).getItem() != null){ Item var10 = ((ItemActivity) getActivity()).getItem(); if(var10.getAddedPictures() !=  null){ if(!var10.getAddedPictures().contains(var9.second)){ var10.addDeletedPicture((Uri) var9.second); } else{ var10.removeFromDeletedPicture((Uri) var9.second); } } } var7.remove(var9); } else{ imageContainer.addView((ImageView) var9.first); } } imageUris = var7; } } } "	0	0	0	0	0	1
"@Override public String Func1() { StringBuilder var1 = new StringBuilder(""Monte Carlo simulation took ""); var1.append(getElapsedTimeMs()).append("" ms""); var1.append(String.format(""%n--------------------------------------%n"")); var1.append(solver_.Func1()); return var1.toString(); } "	0	1	1	0	0	0
"@Test public void Func1() { for (int var1 = 0; var1 < 30; var1++) { Record var2 = new Record(cols, new Value[] { new NumberValue(var1), new NumberValue(var1 * 10), new StringValue(""String:"" + var1), new DateValue(DateConversion.fromExcelSerialToDate(40000 + var1)) }); dataTable.add(var2); } co = new ChunkingOperation(dataTable); co.setOperationParameters(""dateField"", ChunkComparatorEnum.MONTH, settings); co.execute(); Table var3 = (Table) dataTable.clone(); Chunk var4 = new Chunk(0, ""Chunk 0""); Chunk var5 = new Chunk(1, ""Chunk 1""); int var1 = 0; while (var1 < 26) { var4.add(dataTable.get(var1)); var1++; } while (var1 < dataTable.size()) { var5.add(dataTable.get(var1)); var1++; } var3.addChunk(var4); var3.addChunk(var5); assertEquals(var3, co.getResult()); assertEquals(var3.toString(), co.toString()); } "	0	1	1	1	0	0
"public void Func1() { tNextLevel = false; tLevel = levelFactory.buildLevel(levelNumber, tPlayers ); tLogger.setLog(""The level with number: '"" + levelNumber + ""' was build."", 2); levelNumber++; } "	0	1	0	0	1	0
private RetainedItemData Func1(Connection var1, String var2) throws SQLException { PreparedStatement var3 = null; RetainedItemData var4 = null; Context var5 = MetricManager.timer(Level.INFO, MetricsConstants.DB_READ).start(); try { var3 = var1 .prepareStatement(RDBMSConstants.PS_SELECT_RETAINED_MESSAGE_ID); var3.setString(1, var2); ResultSet var6 = var3.executeQuery(); if (var6.next()) { int var7 = var6.getInt(RDBMSConstants.TOPIC_ID); long var8 = var6.getLong(RDBMSConstants.MESSAGE_ID); var4 = new RetainedItemData(var7, var8); } } finally { var5.stop(); close(var3, RDBMSConstants.TASK_STORING_RETAINED_MESSAGE_PARTS); close(var3, RDBMSConstants.TASK_RETRIEVING_RETAINED_TOPIC_ID); } return var4; } 	0	1	1	0	0	0
private void Func1() throws DAOException { String var1 = getCurrentCES().getStartRegistrationDate().toString() + TIME_FOR_DATE_FROM_DB; runThreadForChangeStatus(var1, REGISTRATION_ONGOING_ID); } 	0	0	0	0	0	1
"public void Func1(String var1) { int var2 = var1.lastIndexOf("".class""); if (var2 >= 0) { String var3 = ""com.ibm.icu"" + var1.substring(0, var2).replace('/', '.'); if (var3.startsWith(""com.ibm.icu.dev."")) { return; } try { Class var4 = Class.forName(var3); int   var5 = var4.getModifiers(); if (serializable.isAssignableFrom(var4) /*&& (! throwable.isAssignableFrom(var4) || var4.getDeclaredFields().length > 0)*/) { System.var11.print(var3 + "" ("" + Modifier.toString(var5) + "") - ""); if(!Modifier.isInterface(var5)){ try { var4.getDeclaredField(""serialVersionUID""); } catch (Exception e) { System.var11.print(""no serialVersionUID - ""); } } if (Modifier.isPublic(var5)) { SerializableTest.Handler var6 = SerializableTest.getHandler(var3); if (!Modifier.isInterface(var5) && var6 != null) { Object var7[] = var6.getTestObjects(); Object var8[]; boolean var9 = true; ByteArrayOutputStream var10 = new ByteArrayOutputStream(); ObjectOutputStream var11 = new ObjectOutputStream(var10); try { var11.writeObject(var7); var11.close(); var10.close(); } catch (IOException e) { System.var11.println(""Eror writing test objects:"" + e.toString()); return; } if (path != null) { writeFile(var3, var10.toByteArray()); } ByteArrayInputStream var12 = new ByteArrayInputStream(var10.toByteArray()); ObjectInputStream var13 = new ObjectInputStream(var12); try { var8 = (Object[]) var13.readObject(); var13.close(); var12.close(); } catch (Exception e) { System.var11.println(""Error reading test objects:"" + e.toString()); return; } for(int var14 = 0; var14 < var8.length; var14 += 1) { if (! var6.hasSameBehavior(var8[var14], var7[var14])) { var9 = false; System.var11.println(""Object "" + var14 + "" failed behavior test.""); } } if (var9) { System.var11.print(""test var9.""); } } else { if (! Modifier.isAbstract(var5)) { System.var11.print(""no test.""); } } } System.var11.println(); } } catch (Exception e) { System.var11.println(""Error processing "" + var3 + "": "" + e.toString()); } } } "	0	0	0	0	0	1
"@Override public void Func1(Bundle var1) { super.Func1(var1); overridePendingTransition(R.anim.slide_activity_up, R.anim.activity_stay); setContentView(R.layout.activity_create_post); getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE|WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE); attachedPhoto = (ImageView) findViewById(R.id.editPostIncludedImageView); cameraButton = (ImageButton) findViewById(R.id.cameraButton); sendButton = (ImageButton) findViewById(R.id.sendButton); setActionBarTitle(""Posting to "" + Reverb.getInstance().getRegionManager().getCurrentRegion().getName()); super.setupUIBasedOnAnonymity(Reverb.getInstance().isAnonymous()); } "	0	1	0	0	1	0
"public static void Func1(final Activity var1, final SubsonicFragment var2, User var3) { final User var4 = new User(); for(String var5: User.ROLES) { if(var5.equals(User.SETTINGS) || var5.equals(User.STREAM)) { var4.addSetting(var5, true); } else { var4.addSetting(var5, false); } } if(var3.getMusicFolderSettings() != null) { for(User.Setting var6: var3.getMusicFolderSettings()) { User.MusicFolderSetting var7 = (User.MusicFolderSetting) var6; var4.addMusicFolder(var7, true); } } View var8 = var1.getLayoutInflater().inflate(R.var8.create_user, null); final TextView var9 = (TextView) var8.findViewById(R.id.var23); final TextView var10 = (TextView) var8.findViewById(R.id.var24); final TextView var11 = (TextView) var8.findViewById(R.id.var25); final RecyclerView var12 = (RecyclerView) var8.findViewById(R.id.settings_list); LinearLayoutManager var13 = new LinearLayoutManager(var1); var13.setOrientation(LinearLayoutManager.VERTICAL); var12.setLayoutManager(var13); var12.setAdapter(SettingsAdapter.getSettingsAdapter(var1, var4, null, true, new SectionAdapter.OnItemClickedListener<User.Setting>() { @Override public void Func2(UpdateView<User.Setting> var14, User.Setting var15) { if(var14.isCheckable()) { boolean var16 = !var15.getValue(); var15.setValue(var16); var14.setChecked(var16); } } @Override public void Func3(Menu var17, MenuInflater var18, UpdateView<User.Setting> var14, User.Setting var15) { } @Override public boolean Func4(MenuItem var19, UpdateView<User.Setting> var14, User.Setting var15) { return false; } })); AlertDialog.Builder var20 = new AlertDialog.Builder(var1); var20.setTitle(R.string.menu_add_user) .setView(var8) .setPositiveButton(R.string.common_save, null) .setNegativeButton(R.string.common_cancel, null) .setCancelable(true); final AlertDialog var21 = var20.create(); var21.show(); var21.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener() { @Override public void Func5(View var22) { final String var23 = var9.getText().toString(); if ("""".equals(var23)) { Util.toast(var1, R.string.admin_change_username_invalid); return; } final String var24 = var10.getText().toString(); if ("""".equals(var24)) { Util.toast(var1, R.string.admin_change_email_invalid); return; } final String var25 = var11.getText().toString(); if ("""".equals(var25)) { Util.toast(var1, R.string.admin_change_password_invalid); return; } var4.setUsername(var23); var4.setEmail(var24); var4.setPassword(var25); new SilentBackgroundTask<Void>(var1) { @Override protected Void Func6() throws Throwable { MusicService var26 = MusicServiceFactory.getMusicService(var1); var26.createUser(var4, var1, null); return null; } @Override protected void Func7(Void var22) { var2.onRefresh(); Util.toast(var1, var1.getResources().getString(R.string.admin_create_user_success)); } @Override protected void Func8(Throwable Func8) { String var28; if (Func8 instanceof OfflineException || Func8 instanceof ServerTooOldException) { var28 = getErrorMessage(Func8); } else { var28 = var1.getResources().getString(R.string.admin_create_user_error); } Util.toast(var1, var28); } }.execute(); var21.dismiss(); } }); } "	1	0	1	0	0	0
"public String Func1(EntityReference var1, Object var2, Map<String, Object> var3) { SiteGroup var4 = null; String var5 = null; String var6 = null; boolean var7 = true; if (var2.getClass().isAssignableFrom(Member.class)) { Member var8 = (Member) var2; String var9 = (String) var3.get(""var9""); if (var9 == null) { throw new IllegalArgumentException( ""Cannot create/update a membership var2 from Member without a var9 in the var3""); } var4 = findLocationByReference(var9); var5 = var8.getRole().getId(); var6 = userEntityProvider.findAndCheckUserId(var8.getUserId(), var8.getUserEid()); var7 = var8.isActive(); } else if (var2.getClass().isAssignableFrom(EntityMember.class)) { EntityMember var10 = (EntityMember) var2; var4 = findLocationByReference(var10.getLocationReference()); var5 = var10.getMemberRole(); if ((var10.getUserId() != null) || (var10.getUserEid() != null)) { var6 = userEntityProvider.findAndCheckUserId(var10.getUserId(), var10.getUserEid()); } var7 = var10.isActive(); } else { throw new IllegalArgumentException( ""Invalid var2 for create/update, must be Member or EntityMember object""); } if (var5 == null || """".equals(var5)) { var5 = var4.site.getJoinerRole(); } if (var3.get(""memberRole"") != null) { var5 = (String) var3.get(""memberRole""); } if (var3.get(""var7"") != null) { var7 = Boolean.parseBoolean((String) var3.get(""var7"")); } checkSiteSecurity(var4.site.getId()); String[] var11; List<String[]> var12 = new ArrayList<>(); String[] var13 = checkForBatch(var3, var6); String var14 = """"; String var15 = developerHelperService.getCurrentUserId(); for (int var16 = 0; var16 < var13.length; var16++) { if (var4.group == null) { if (var13[var16].equals(var15) && var4.site.isJoinable()) { try { siteService.join(var4.site.getId()); } catch (IdUnusedException e) { throw new IllegalArgumentException(""Invalid site: "" + var4.site.getId() + "":"" + e.getMessage(), e); } catch (PermissionException e) { throw new SecurityException(""Current var17 not allowed to join site: "" + var4.site.getId() + "":"" + e.getMessage(), e); } } else { var4.site.addMember(var13[var16], var5, var7, false); saveSiteMembership(var4.site); } User var17 = null; try { var17 = userDirectoryService.getUser(var13[var16]); } catch (UserNotDefinedException e) { log.error("".Func1: User with id {} doesn't exist"", var13[var16]); } var11 = new String[]{var4.site.getId(),var17.getDisplayId(), var5, UserAuditService.USER_AUDIT_ACTION_ADD, userAuditRegistration.getDatabaseSourceKey(), var15}; var12.add(var11); } else { var4.group.addMember(var13[var16], var5, var7, false); saveGroupMembership(var4.site, var4.group); } if (var16 == 0) { EntityMember var10 = new EntityMember(var13[0], var4.var9, var5, var7, null); var14 = var10.getId(); } } if (var12.size() > 0) { userAuditRegistration.addToUserAuditing(var12); } if (var13.length > 1) { log.info(""Batch add memberships: siteId="" + ((var4.site == null) ? ""none"" : var4.site.getId()) + "",groupId="" + ((var4.group == null) ? ""none"" : var4.group.getId()) + "",var13="" + Search.arrayToString(var13)); var14 = ""batch:"" + var14; } return var14; } "	0	0	0	0	0	1
@Bean BrregClient Func1() { Map<Optional<String>, Optional<BrregEnhet>> var1 = new TestEnvironmentEnheter().getTestMiljøEnheter(); return orgnr -> var1.getOrDefault(orgnr, Optional.empty()); } 	1	0	0	1	0	0
"public static String Func1(final GenModel var1) { Resource var2 = var1.eResource(); final URI var3 = var2.getURI(); final String var4 = var3.toString(); int var5 = var4.lastIndexOf(File.separator); String var6 = var4.substring((var5 + 1)); int var7 = var6.indexOf("".genmodel""); var5 = var7; String var8 = var6.substring(0, var5); var6 = var8; return var6; } "	1	0	1	1	0	0
protected final Object Func1(KeyStore var1, char[] var2) throws NoSuchAlgorithmException, KeyStoreException, UnrecoverableKeyException { String var3 = KeyManagerFactory.getDefaultAlgorithm(); KeyManagerFactory var4 = KeyManagerFactory.getInstance(var3); var4.init(var1, var2); return var4; } 	0	0	0	0	0	1
"private float Func1(float var1) { myRating = var1; SQLiteDatabase var2 = helper.getReadableDatabase(); String var3 = ""_id="" + id; ContentValues var4 = new ContentValues(); var4.put(LocalDBHelper.COL_RATING, myRating); var2.update(helper.RATING_TABLE_NAME, var4, var3, null); helper.close(); return myRating; } "	0	1	0	0	1	0
@Test public void Func1() { taskStore.save(getTask(42L)); taskStore.save(getTask(43L)); assertEquals(2, store.resolveFor(PUBLISHER, new Date()).get().queueSize()); } 	0	1	0	0	1	0
"public static void Func1(String var1) { if (var1 != null) { String var2 = StringUtils.substringBefore(var1, "":""); try { InetAddress var3 = InetAddress.getByName(var2); ConfigurationProperties.addSslSubjectAlternativeNameDomains(var3.getHostName()); ConfigurationProperties.addSslSubjectAlternativeNameDomains(var3.getCanonicalHostName()); } catch (UnknownHostException uhe) { ConfigurationProperties.addSslSubjectAlternativeNameDomains(var2); } } } "	0	0	0	0	0	1
"public KeyStore Func1(boolean var1) { if (keystore == null || var1) { File var2 = new File(ConfigurationProperties.javaKeyStoreFilePath()); System.setProperty(""javax.net.ssl.trustStore"", var2.getAbsolutePath()); if (var2.exists()) { keystore = updateExistingKeyStore(var2); } else { createNewKeyStore(); } ConfigurationProperties.rebuildKeyStore(false); } return keystore; } "	0	0	0	0	0	1
"public SSLContext Func1() { try { KeyManagerFactory var1 = getKeyManagerFactoryInstance(KeyManagerFactory.getDefaultAlgorithm()); var1.init(buildKeyStore(), ConfigurationProperties.javaKeyStorePassword().toCharArray()); SSLContext Func1 = getSSLContextInstance(""TLS""); Func1.init(var1.getKeyManagers(), InsecureTrustManagerFactory.INSTANCE.getTrustManagers(), null); return Func1; } catch (Exception e) { throw new RuntimeException(""Failed to initialize the SSLContext"", e); } } "	0	0	0	0	0	1
public static SSLEngine Func1() { SSLEngine var1 = SSLFactory.getInstance().sslContext().createSSLEngine(); var1.setUseClientMode(false); return var1; } 	0	0	0	0	0	1
public static SSLEngine Func1() { SSLEngine var1 = SSLFactory.getInstance().sslContext().createSSLEngine(); var1.setUseClientMode(true); return var1; } 	0	0	0	0	0	1
public SSLSocket Func1(Socket var1) throws Exception { SSLSocketFactory var2 = sslContext().getSocketFactory(); SSLSocket var3 = (SSLSocket) var2.createSocket(var1, var1.getInetAddress().getHostAddress(), var1.getPort(), true); var3.setUseClientMode(true); var3.startHandshake(); return var3; } 	0	0	0	0	0	1
"@Override public void Func1(ServletContextEvent var1) { NewsSourceList var2 = NewsSourceList.getNewsSourceList(); try { var2.setNewsSourcesMap(NewsSourceDBAdapter.getNewsSources()); } catch (SQLException e) { System.err.println(""Failed to get available news sources""); System.err.println(e); } TimerTask var3 = new RSSReader(var2); timer = new Timer(false); timer.scheduleAtFixedRate(var3, 0, 5*1000); } "	0	0	0	1	0	0
"static String Func1(InputStream var1) { @SuppressWarnings(""resource"") java.util.Scanner var2 = new Scanner(var1).useDelimiter(""\\A""); return var2.hasNext() ? var2.next() : """"; } "	0	0	0	0	0	1
private MethodInvocationObject Func1(MethodInvocationObject var1, SystemObject var2) { MethodInvocationObject var3; if((var3 = var2.containsDelegate(var1)) != null && var2.getClassObject(var3.getOriginClassName()) != null) return Func1(var3, var2); else return var1; } 	1	1	0	0	0	0
@Override protected boolean Func1() { switch (mStatusBar.getBarState()) { case StatusBarState.KEYGUARD: if (!mDozingOnDown) { EventLogTags.writeSysuiLockscreenGesture( EventLogConstants.SYSUI_LOCKSCREEN_GESTURE_TAP_UNLOCK_HINT, 0 /* lengthDp - N/A */, 0 /* velocityDp - N/A */); startUnlockHintAnimation(); } return true; case StatusBarState.SHADE_LOCKED: if (!mQsExpanded) { mStatusBar.goToKeyguard(); } return true; case StatusBarState.SHADE: post(mEmptySpaceClickedRunnable); return false; default: return true; } } 	0	0	0	0	0	1
"private String Func1(String var1, PartialOrder var2) { var2.setTransactionPhase(TransactionPhase.PROVIDING_ADDRESS); if (var1.equalsIgnoreCase(""MEAL"")) { return ""Please provide your address or CANCEL to quit""; } else { return ""I don't understand that, please say MEAL to var1 a meal.""; } } "	0	1	0	0	1	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_select_food); Toolbar var2 = (Toolbar) findViewById(R.id.var2); setSupportActionBar(var2); editText = (EditText) findViewById(R.id.editTextFoodSearch); listView = (ListView) findViewById(R.id.listViewFoodResults); editText.addTextChangedListener(new TextWatcher() { @Override public void Func2(CharSequence var3, int var4, int var5, int var6) { foodSearchAdapter.getFilter().filter(var3.toString()); } @Override public void Func3(CharSequence var3, int var4, int var6,int var7) { } @Override public void Func4(Editable var3) { } }); FloatingActionButton var8 = (FloatingActionButton) findViewById(R.id.add_food_fab); var8.setOnClickListener(new View.OnClickListener() { @Override public void Func5(View var9) { Intent var10 = new Intent(var9.getContext(), AddFood.class); var10.putExtras(((SelectFood) var9.getContext()).getIntent()); startActivity(var10); } }); datasource = new FoodDataSource(this); registerForContextMenu(listView); } 	1	0	0	1	0	0
"@Override public void Func1() throws IOException { String var1 = getStringField(""var1"", true); Service var2 = feed.getOrCreateService(var1); DateTime var3 = getDateField(""var3"", true); if (var2.calendar_dates.containsKey(var3)) { feed.errors.add(new DuplicateKeyError(tableName, row, ""(var1, var3)"")); } else { CalendarDate var4 = new CalendarDate(); var4.var2 = var2; var4.var3 = var3; var4.exception_type = getIntField(""exception_type"", true, 0, 1); var4.feed = feed; var2.calendar_dates.put(var3, var4); } } "	1	1	1	1	0	0
@Test(expected = NullPointerException.class) public void Func1() { Observable.generate(() -> 1, (s, o) -> o.onNext(1), null); } 	0	0	0	0	0	1
@Test(expected = NullPointerException.class) public void Func1() { Observable.generate(null, (s, o) -> o.onNext(1)); } 	0	0	0	0	0	1
@Test public void Func1() { NbpObservable.generate(() -> null, (s, o) -> o.onComplete()).toBlocking().lastOption(); } 	0	0	0	0	0	1
@Test(expected = NullPointerException.class) public void Func1() { NbpObservable.generate(() -> 1, (s, o) -> o.onNext(1), null); } 	0	0	0	0	0	1
"public CommandResult Func1(CommandSource var1, CommandContext var2) throws CommandException { if (var1 instanceof Player) { Player var3 = (Player) var1; Nation var4 = DataHandler.getNationOfPlayer(var3.getUniqueId()); if (var4 == null) { var3.setMessageChannel(MessageChannel.TO_ALL); var1.sendMessage(Text.of(TextColors.RED, LanguageHandler.ERROR_NONATION)); return CommandResult.success(); } NationMessageChannel var5 = var4.getMessageChannel(); if (!var2.<String>getOne(""var7"").isPresent()) { if (var3.getMessageChannel().equals(var5)) { var3.setMessageChannel(MessageChannel.TO_ALL); var1.sendMessage(Text.of(TextColors.YELLOW, LanguageHandler.INFO_NATIONCHAT_OFF)); } else { var3.setMessageChannel(var5); var1.sendMessage(Text.of(TextColors.YELLOW, LanguageHandler.INFO_NATIONCHATON_ON)); } } else { Text var6 = TextSerializers.FORMATTING_CODE.deserialize(ConfigHandler.getNode(""others"", ""nationChatFormat"").getString().replaceAll(""\\{NATION\\}"", var4.getTag()).replaceAll(""\\{TITLE\\}"", DataHandler.getCitizenTitle(var3.getUniqueId()))); Text var7 = Text.of(var6, "" "", TextColors.RESET, var3.getName(), TextColors.WHITE, "": "", TextColors.YELLOW, var2.<String>getOne(""var7"").get()); var5.send(var3, var7); DataHandler.getSpyChannel().send(Text.of(TextSerializers.FORMATTING_CODE.deserialize(ConfigHandler.getNode(""others"", ""nationSpyChatTag"").getString()), TextColors.RESET, var7)); } } else { var1.sendMessage(Text.of(TextColors.RED, LanguageHandler.ERROR_NOPLAYER)); } return CommandResult.success(); } "	0	0	0	1	0	0
"private static int Func1(String[] var1, int var2) throws NumberFormatException { if (var2 < var1.length) { String var3 = var1[var2].trim().toLowerCase(); if (var3.length() > 0) { if (var3.startsWith(""rc"") || var3.startsWith(""ms"")) { return parsePrereleaseVersionString(var3); } else { return Integer.parseInt(var3); } } } return 0; } "	0	1	0	0	1	0
protected BaseMatchResult Func1(TileEntity var1, ItemStack var2, int var3, int var4, boolean var5) { if(IInventory.class.isAssignableFrom(var1.getClass())) return BaseMatchResult.False; return Func1((IInventory)var1, var2, var3, var4, var5); } 	0	0	0	1	0	0
"public static ParseUser Func1(String var1, String var2) throws ParseException { currentUser = null; ParseGetCommand var3 = new ParseGetCommand(""Func1""); var3.addJson(false); var3.put(""var1"", var1); var3.put(""var2"", var2); ParseResponse var4 = var3.perform(); if(!var4.isFailed()) { JSONObject var5 = var4.getJsonObject(); if (var5 == null) { LOGGER.error(""Empty var4.""); throw var4.getException(); } try { ParseUser var6 = new ParseUser(); var6.setObjectId(var5.getString(ParseConstants.FIELD_OBJECT_ID)); var6.setSessionToken(var5.getString(ParseConstants.FIELD_SESSION_TOKEN)); currentUser = var6; String var7 = var5.getString(ParseConstants.FIELD_CREATED_AT); String var8 = var5.getString(ParseConstants.FIELD_UPDATED_AT); var6.setCreatedAt(Parse.parseDate(var7)); var6.setUpdatedAt(Parse.parseDate(var8)); var5.remove(ParseConstants.FIELD_OBJECT_ID); var5.remove(ParseConstants.FIELD_CREATED_AT); var5.remove(ParseConstants.FIELD_UPDATED_AT); var5.remove(ParseConstants.FIELD_SESSION_TOKEN); var6.setData(var5, true); return var6; }catch (JSONException e) { LOGGER.error(""Although Parse reports object successfully saved, the var4 was invalid.""); throw new ParseException( ParseException.INVALID_JSON, ""Although Parse reports object successfully saved, the var4 was invalid."", e); } } else { LOGGER.error(""Request failed.""); throw var4.getException(); } } "	1	0	1	1	0	0
"@Override public void Func1() throws ModuleException { super.Func1(); Map<String, String> var1 = siarddkExportModule.getExportModuleArgs(); FileIndexFileStrategy var2 = siarddkExportModule.getFileIndexFileStrategy(); MetadataPathStrategy var3 = siarddkExportModule.getMetadataPathStrategy(); SIARDMarshaller var4 = siarddkExportModule.getSiardMarshaller(); if (var1.get(Constants.CONTEXT_DOCUMENTATION_FOLDER) != null) { ContextDocumentationWriter var5 = new ContextDocumentationWriter( siarddkExportModule.getMainContainer(), siarddkExportModule.getWriteStrategy(), var2, siarddkExportModule.getExportModuleArgs()); var5.writeContextDocumentation(); } try { var2.generateXML(null); } catch (ModuleException e) { throw new ModuleException(""Error writing fileIndex.xml"", e); } try { String var6 = var3.getXmlFilePath(Constants.FILE_INDEX); OutputStream var7 = var2.getWriter(siarddkExportModule.getMainContainer(), var6, siarddkExportModule.getWriteStrategy()); var4.marshal(""dk.magenta.siarddk.fileindex"", ""/siarddk/fileIndex.xsd"", ""http://www.sa.dk/xmlns/diark/1.0 ../Schemas/standard/fileIndex.xsd"", var7, var2.generateXML(null)); var7.close(); } catch (IOException e) { throw new ModuleException(""Error writing fileIndex to the archive."", e); } } "	0	0	0	0	0	1
@Override public HtmlUnitDriver Func1() { return new HtmlUnitDriver(); } 	1	0	1	0	0	0
"@Override public void Func1 () { logger.info(""Stop recording: entry Id ["" + entryId + ""], asset Id ["" + assetId + ""]""); KalturaLiveAsset var1 = liveManager.getLiveAssetById(entryId, assetId); if (var1.tags.contains(""recording_anchor"")) { liveManager.cancelReplace(entryId); } this.stopRecording(); } "	0	1	1	1	0	0
"private void Func1(String var1, String var2) throws MergeException, IOException, NoSuchAlgorithmException { parameterMap.put(TemplateFactory.KEY_FULLNAME, 	new String[]{var1}); Template var3 = TemplateFactory.getTemplate(parameterMap); String var4 = var3.merge(); var3.packageOutput(); CompareArchives.assertArchiveEquals(var2, validateDir + var1 + var2, outputDir + var1 + var2); } "	0	0	0	0	0	1
private void Func1() { Observable.merge(Arrays.asList( setUpObjectProcessing().map(formatter::format), setUpBooleanProcessing().map(formatter::format), setUpByteProcessing().map(formatter::format), setUpIntegerProcessing().map(formatter::format), setUpCharProcessing().map(formatter::format), setUpStringProcessing().map(formatter::format), setUpIntArrayProcessing().map(formatter::format) )) .doOnNext(saver::save) .subscribe(__ -> {}, ex -> { flush(); exceptionStream.onNext((LogMessageException) ex); }); } 	0	0	0	0	0	1
public void Func1(int var1, int var2) { int var3 = 0; int var4 = x + 16; int var5 = y + 2; for (GuiButtonEmote var6 : emoteButtons) { var3++; if (var3 >= scrollOffset) { if (var4 + var6.width > x + width - 2) { var4 = x + 16; var5 += 14; } if (var5 + 14 > y + height - 2) { var6.visible = false; continue; } var6.xPosition = var4; var6.yPosition = var5; var6.visible = true; var4 += var6.width + 2; } else { var6.visible = false; } } Gui.drawRect(x + 14, y, x + width, y + height, 0xAA000000); mouseInside = var1 >= x && var2 >= y && var1 < x + width && var2 > y + height; } 	1	1	1	1	0	0
public static ContentValues Func1(Track var1) { final ContentValues var2 = new ContentValues(); var2.put(TableInfo.COLUMN_PLAYER_PACKAGE_NAME, var1.getPlayerPackageName()); var2.put(TableInfo.COLUMN_TRACK, var1.getTrack()); var2.put(TableInfo.COLUMN_ARTIST, var1.getArtist()); var2.put(TableInfo.COLUMN_ALBUM, var1.getAlbum()); var2.put(TableInfo.COLUMN_DURATION, var1.getDurationInMillis()); var2.put(TableInfo.COLUMN_TIMESTAMP, var1.getTimestamp()); var2.put(TableInfo.COLUMN_STATE, var1.getState()); var2.put(TableInfo.COLUMN_STATE_TIMESTAMP, var1.getStateTimestamp()); return var2; } 	0	1	1	1	0	0
"public EditCommand Func1(String var1) throws IllegalValueException { Matcher var2 = COMMAND_ARGUMENTS_PATTERN.var2(var1.trim()); if (!var2.matches()) { throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE)); } int var3 = Integer.parseInt(var2.group(""var3"")); Optional<String> var4 = Optional.ofNullable(var2.group(""var4"")); Optional<String> var5 = Optional.ofNullable(var2.group(""var5"")); Optional<String> var6 = Optional.ofNullable(var2.group(""var6"")); Optional<String> var7 = Optional.ofNullable(var2.group(""var7"")); Optional<String> var8 = Optional.ofNullable(var2.group(""var8"")); Optional<String> var9 = Optional.ofNullable(var2.group(""var9"")); Optional<String> var10 = Optional.ofNullable(var2.group(""var10"")); Optional<String> var11 = Optional.ofNullable(var2.group(""var11"")); EditCommand.EditTaskDescriptor var12 = new EditCommand.EditTaskDescriptor(); try { ParserUtil.parseName(var4).ifPresent(var12::setName); if (var6.isPresent() || var10.isPresent()) { if (var6.isPresent()) { var6 = Optional.of(""start var5 "" + var6); ParserUtil.parseTime(var6).ifPresent(var12::setTime); System.out.println(""Start var5 is edited to: "" + var6); } if (var7.isPresent()) { var7 = Optional.of(""end var5 "" + var7); ParserUtil.parseTime(var7).ifPresent(var12::setTime); System.out.println(""End var5 is edited to: "" + var7); } } else if (var5.isPresent()) { ParserUtil.parseTime(var5).ifPresent(var12::setTime); System.out.println(""TIME is edited to: "" + var5); } if (var9.isPresent() || var10.isPresent()) { if (var9.isPresent()) { var9 = Optional.of(""start var8 "" + var9); ParserUtil.parseDate(var9).ifPresent(var12::setDate); System.out.println(""Start var8 is edited to: "" + var9); } if (var10.isPresent()) { var10 = Optional.of(""end var8 "" + var10); ParserUtil.parseDate(var10).ifPresent(var12::setDate); System.out.println(""End var8 is edited to: "" + var10); } } else if (var8.isPresent()) { ParserUtil.parseDate(var8).ifPresent(var12::setDate); System.out.println(""SDATE is edited to: "" + var8); } ParserUtil.parseTaskType(Optional.of("" "")).ifPresent(var12::setTaskType); tagList = createTagList(var11); var12.setTags(tagList); } catch (IllegalValueException ive) { throw new ParseException(ive.getMessage(), ive); } Index var13 = Index.fromOneBased(var3); return new EditCommand(var13, var12); } "	1	0	0	1	0	0
@Override protected void Func1() { ModelNode var1 = (ModelNode) getModel(); IFigure var2 = ((ScalableRootEditPart) getRoot()) .getLayer(ModelBackgroundLayer.MODEL_BACKGROUND_LAYER); var2.setBackgroundColor(new Color(null, var1.getBackgroundColor())); getViewer().setProperty(SnapToGrid.PROPERTY_GRID_ENABLED, var1.getShowGrid()); getViewer().setProperty(SnapToGrid.PROPERTY_GRID_VISIBLE, var1.getShowGrid()); getViewer().setProperty(SnapToGeometry.PROPERTY_SNAP_ENABLED, var1.getShowGrid()); getFigure().repaint(); super.Func1(); } 	0	0	0	0	0	1
"private Set<String> Func1(final Request var1) { String[] var2 = var1.getParameterValues(getId() + "".selected""); if (var2 == null) { var2 = new String[0]; } String[] var3 = removeEmptyStrings(var2); Set<String> var4 = new HashSet<>(); boolean var5 = getSelectMode() == SelectMode.SINGLE; if (var3 != null) { int var6 = getItemIdPrefix().length(); for (String var7 : var3) { String var8 = var7.substring(var6); if (isValidTreeItem(var8)) { var4.add(var8); if (var5) { break; } } } } return var4; } "	1	0	1	1	0	0
@Override public boolean Func1(final String var1) { return DefinitionLinkNamesByFieldName.containsKey(var1); } 	1	0	0	1	0	0
@EventHandler(priority = EventPriority.LOWEST) public void Func1(PlayerTeleportEvent var1) { if (var1.isCancelled()) return; for (Game var2 : games) { var2.Func1(var1); } } 	0	1	0	0	1	0
@EventHandler(priority = EventPriority.LOWEST) public void Func1(PlayerGameModeChangeEvent var1) { if (var1.isCancelled()) return; for (Game var2 : games) { var2.Func1(var1); } } 	0	1	0	0	1	0
@EventHandler(priority = EventPriority.HIGHEST) public void Func1(EntityDeathEvent var1) { if (!(var1.getEntity() instanceof Player)) return; for (Game var2 : games) { var2.onPlayerDeath((Player) var1.getEntity()); } } 	0	1	0	0	1	0
@EventHandler(priority = EventPriority.LOWEST) public void Func1(EntityExplodeEvent var1) { if (var1.isCancelled()) return; for (Game var2 : games) { var2.Func1(var1); } } 	0	1	0	0	1	0
@EventHandler(priority = EventPriority.HIGHEST) public void Func1(FoodLevelChangeEvent var1) { if (var1.isCancelled() || !(var1.getEntity() instanceof Player)) return; for (Game var2 : games) { var2.Func1(var1); } } 	0	1	0	0	1	0
@EventHandler public void Func1(PlayerQuitEvent var1) { for (Game var2 : games) { var2.Func1(var1); } } 	0	1	0	0	1	0
"@Test public void Func1() throws IOException { HashMap<String, String> var1 = new HashMap<>(); var1.put(""c1"", ""String""); String var2 = GoogleAdWordsExtractor.createSchema(var1, null).toString(); Assert .assertEquals(var2, ""[{\""columnName\"":\""c1\"",\""isNullable\"":true,\""dataType\"":{\""type\"":\""STRING\""}}]""); } "	1	0	1	1	0	0
"public static int Func1(@NonNull Context var1) { final WifiManager var2 = (WifiManager)var1.getApplicationContext() .getSystemService(Context.WIFI_SERVICE); if (!var2.isWifiEnabled()) { var2.setWifiEnabled(true); } final List<WifiConfiguration> var3 = var2.getConfiguredNetworks(); if (var3 != null) { for (WifiConfiguration var4 : var3) { if (var4.SSID.equals(SSID)) { Log.i(TAG, ""Venue's wifi network already configured.""); return var4.var6; } } } WifiConfiguration var5 = new WifiConfiguration(); var5.SSID = SSID; var5.preSharedKey = PASSKEY; final int var6 = var2.addNetwork(var5); if (var6 != -1) { var2.saveConfiguration(); } else { Log.i(TAG, ""Venue's wifi network could not be configured.""); } return var6; } "	1	1	0	1	0	0
"public void Func1(final String var1, final String var2, final Waiter var3, final boolean var4) throws TimeoutException { GVRScreenshotCallback var5 = new GVRScreenshotCallback() { private void Func2(Bitmap var6, String var2, Waiter var3) { Bitmap var7 = null; try { InputStream var8 = gvrContext.getContext().getAssets().open(var1 + ""/"" + var2); var7 = BitmapFactory.decodeStream(var8); } catch (IOException ex) { var3.fail(ex); } if (var7 != null) { var3.assertEquals(var7.getWidth(), var6.getWidth()); var3.assertEquals(var7.getHeight(), var6.getHeight()); Bitmap var9 = var7.copy(var7.getConfig(), true); float var10 = 0; for (int var11 = 0; var11 < var7.getHeight(); var11++) { for (int var12 = 0; var12 < var7.getWidth(); var12++) { int var13 = var7.getPixel(var12, var11); int var14 = var6.getPixel(var12, var11); int var15 = Math.abs(Color.red(var13) - Color.red(var14)); int var16 = Math.abs(Color.green(var13) - Color.green(var14)); int var17 = Math.abs(Color.blue(var13) - Color.blue(var14)); var9.setPixel(var12, var11, Color.argb(255, var15, var16, var17)); var10 += (float) var15 / 255.0f + var16 / 255.0f + var17 / 255.0f; } } Log.e(var1, var1 + "": %s %var23"", var2, var10); if (var10 > 2000.0f) { Func3(var1, ""diff_"" + var2, var9); } var3.assertTrue(var10 <= 2000.0f); } } protected void Func3(String var18, String var19, Bitmap var6) { try { ByteArrayOutputStream var20 = new ByteArrayOutputStream(); var6.compress(Bitmap.CompressFormat.PNG, 100, var20); File var21 = Environment.getExternalStorageDirectory(); var18 = var21.getAbsolutePath() + ""/GearVRFTests/"" + var18 + ""/""; File var22 = new File(var18); var22.mkdirs(); File var23 = new File(var22, var19); FileOutputStream var24 = new FileOutputStream(var23); var24.write(var20.toByteArray()); var24.close(); } catch (IOException ex) { var3.fail(ex); } } @Override public void Func4(Bitmap var6) { synchronized (onScreenshotLock) { try { String var25 = var2 + "".png""; Func3(var1, var25, var6); Log.var22(var1, ""Saved screenshot of %s"", var2); if (var4) { Func2(var6, var25, var3); } var3.resume(); } catch (Exception e) { Log.var22(var1, ""Could not save screenshot of %s"", var2); var3.fail(e); } } } }; waitForSceneRendering(); gvrContext.captureScreenCenter(var5); var3.await(); } "	0	0	0	0	0	1
private void Func1() { final AppWidgetManager var1 = AppWidgetManager.getInstance(this); RemoteViews var2 = ListWidgetProvider .buildRemoteViews(this, var1, mAppWidgetId); var1.updateAppWidget(mAppWidgetId, var2); Runnable var3 = new Runnable() { @Override public void Func2() { var1.notifyAppWidgetViewDataChanged(mAppWidgetId, R.id.list_view); } }; new Handler().postDelayed(var3, 300); setWidgetResult(RESULT_OK); finish(); } 	0	0	0	0	0	1
"@Nullable @Override public String Func1(@NonNull Uri var1) { final int var2 = sURI_MATCHER.var2(var1); switch (var2) { case PROJECTS: return BacklogContract.ProjectEntry.CONTENT_TYPE; default: throw new UnsupportedOperationException(""Unknown var1: "" + var1); } } "	0	0	0	0	0	1
"public CopyResourceResult Func1(Integer var1, Integer var2, ForeignableOwner var3) throws ForeignableOwnerViolationException, AMWException { ResourceEntity var4 = commonDomainService.getResourceEntityById(var1); ResourceEntity var5 = commonDomainService.getResourceEntityById(var2); if(!permissionBoundary.canCopyFromSpecificResource(var5, var5.getResourceGroup())){ throw new NotAuthorizedException(""Permission Denied""); } return copyResourceDomainService.copyFromOriginToTargetResource(var5, var4, var3); } "	1	0	1	1	0	0
@Transactional public Page<Abnormal> Func1(Filter var1,Integer var2,Integer var3,String var4,String var5) { try { User var6 = userService.getUserByJWT(var5); Specification<Abnormal> var7 = filterIsLike(var1, var6); Specification<Abnormal> var8 = userIs(var6); return abnormalRepository.findAll(where(var7).and(var8), new PageRequest(var2, var3)); }catch(Exception e){ e.printStackTrace(); throw new RuntimeException(e); } } 	0	1	0	0	1	0
"@Override public void Func1() { String var1 = """"; ConfigProjects var2 = null; try { var2 = new ConfigProjects(this.prozessVorlage.getProjekt().getTitel()); } catch (IOException e) { Helper.setFehlerMeldung(""IOException"", e.getMessage()); return; } var1 = var2.getParamString(""tifheader."" + this.docType.toLowerCase(), ""blabla""); var1 = var1.replaceAll(""\\[\\["", ""<""); var1 = var1.replaceAll(""\\]\\]"", "">""); this.tifHeader_documentname = this.prozessKopie.getTitel(); this.tifHeader_imagedescription = """"; StringTokenizer var3 = new StringTokenizer(var1, ""+""); while (var3.hasMoreTokens()) { String var4 = var3.nextToken(); if (var4.startsWith(""'"") && var4.endsWith(""'"") && var4.length() > 2) { this.tifHeader_imagedescription += var4.substring(1, var4.length() - 1); } else if (var4.equals(""$Doctype"")) { this.tifHeader_imagedescription += this.docType; } else { for (Iterator<AdditionalField> var5 = this.additionalFields.iterator(); var5.hasNext();) { AdditionalField var6 = var5.next(); if ((var6.getTitel().equals(""ATS"") || var6.getTitel().equals(""TSL"")) && var6.getShowDependingOnDoctype() && (var6.getWert() == null || var6.getWert().equals(""""))) { var6.setWert(this.atstsl); } if (var6.getTitel().equals(var4) && var6.getShowDependingOnDoctype() && var6.getWert() != null) { this.tifHeader_imagedescription += CalcProzesstitelCheck(var6.getTitel(), var6.getWert()); } } } } } "	0	1	0	0	1	0
@Override public ResourceManager Func1() { Property[] var1 = {STFRD_TIME_PER_SENTENCE, STFRD_MAX_SENTENCE_LENGTH, USE_POS, USE_LEMMA, USE_SHALLOW_PARSE, USE_DEP, USE_NER_CONLL, USE_NER_ONTONOTES, USE_STANFORD_PARSE, USE_STANFORD_DEP, USE_SRL_VERB, USE_SRL_NOM, USE_SRL_PREP, USE_QUANTIFIER, THROW_EXCEPTION_ON_FAILED_LENGTH_CHECK, USE_JSON, USE_LAZY_INITIALIZATION, USE_SRL_INTERNAL_PREPROCESSOR, SPLIT_ON_DASH, USE_SENTENCE_PIPELINE}; return (new AnnotatorServiceConfigurator().getConfig(new ResourceManager( generateProperties(var1)))); } 	0	0	0	0	0	1
"@Override public void Func1() { log.info(""Running thread with simulation moving""); ClassLoader var1 = Moving.class.getClassLoader(); BIMLoader var2 = new BIMLoader(var1.getResourceAsStream(""simple-room.json""), new BIM()); LinkedHashMap<Double, ArrayList<DevcHelper>> var3 = ReadFDSOutput .readDevc(""res/scenarios/UdSU_c6s1v1_devc"" + "".csv""); BIMExt var4 = new BIMExt(var2.getBim()); Traffic var5 = new Traffic(var4); double var6 = var4.getNumOfPeople(); log.info(""Number of people in Building: {}"", var6); int var7 = 500; double var8 = 0.0; // Текущее время моделирования эвакуации, c double var9; // Интервал моделирования эвакуации, c double var10 = 0.0; for (int var11 = 0; var11 < var7; var11++) { var9 = 1; int var12 = var5.footTraffic(var9); if (var12 < 0) { var8 += var12 * (-1); break; } else var8 += var9; log.info(""In progress: number of people in Safety zone: {}, simulation var9: {}"", var4.getSafetyZone().getNumOfPeople(), var8); } log.info(""Successful finish simulation. Total: number of people in Safety zone: {} of {}, simulation var9: {}"", var4.getSafetyZone().getNumOfPeople(), var6, var8); } "	0	1	0	0	1	0
@Override public AttributeFlow Func1(Attribute var1) { if (var1 == null) { return null; } AttributeFlow var2 = new AttributeFlow(); var2.setCode(var1.getCode()); var2.setUId(var1.getUId()); var2.setName(var1.getName()); var2.setDisplayName(var1.getDisplayName()); var2.setCreated(var1.getCreated()); var2.setLastUpdated(var1.getLastUpdated()); var2.setValueType(var1.getValueType()); return var2; } 	0	1	0	0	1	0
"public void Func1(FMLPreInitializationEvent var1) { BaseMods.addBaseMod(this); this.libProxy = ClassLoading.createProxy(""com.teamacronymcoders.base.proxies.LibClientProxy"", ""com.teamacronymcoders.base.proxies.LibServerProxy""); this.getLibProxy().setMod(this); this.modelLoader = new SafeModelLoader(this); List<IRegistryPiece> var2 = this.getRegistryPieces(var1.getAsmData()); this.addRegistry(""BLOCK"", new BlockRegistry(this, var2)); this.addRegistry(""ITEM"", new ItemRegistry(this, var2)); this.addRegistry(""ENTITY"", new EntityRegistry(this, var2)); if (this.hasConfig()) { this.addRegistry(""CONFIG"", new ConfigRegistry(this, var1.getModConfigurationDirectory(), this.useModAsConfigFolder())); SaveLoader.setConfigFolder(this.getRegistry(ConfigRegistry.class, ""CONFIG"").getTacFolder()); } if (materialSystem == null) { this.materialSystem.setup(var1.getAsmData()); } if (this.addOBJDomain()) { this.getLibProxy().addOBJDomain(); } this.guiHandler = new GuiHandler(this); this.beforeModuleHandlerInit(var1); this.moduleHandler = new ModuleHandler(this, var1.getAsmData()); this.getModuleHandler().setupModules(); this.getModuleHandler().Func1(var1); this.afterModuleHandlerInit(var1); if (this.getSubBlockSystem() != null) { this.getSubBlockSystem().createBlocks(); } this.getAllRegistries().forEach((name, registry) -> registry.Func1()); } "	1	0	1	0	0	0
public void Func1(final String var1) { assert var1 != null ? new File(var1).isAbsolute() : true; this.var1 = var1; } 	0	0	0	0	0	1
"private DataRecord Func1(SQLParseResult var1) { Table var2 = mTables.get(var1.getTablename()); ArrayList<String> var3 = var2.getAttributeNames(); ArrayList<DataType> var4 = var2.getAttributeTypes(); ArrayList<Integer> var5 = new ArrayList<>(); if (var1.getAttributeNames().size() != var3.size()) { System.out.println(""Input data size not match!""); System.out.println(""Found "" + var1.getAttributeNames().size()); System.out.println(""Expect "" + var3.size()); return null; } if (var1.getCustomOrder()) { for (String var6 : var3) { int var7 = var1.getAttributeNames().indexOf(var6); if (var7 == -1) { System.out.println(""Attribute "" + var6 + "" not found in input data""); return null; } var5.add(var7); } } else { for (int var8 = 0; var8 < var3.size(); ++var8) { var5.add(var8); } } DataRecord var9 = new DataRecord(); for (int var7 : var5) { String var10 = var1.getBlocks().get(var7); if (var4.get(var7).getType() == DataTypeIdentifier.INT) { if (!DataChecker.isValidInteger(var10)) { System.out.println(""Error input type (INT expected): "" + var10); return null; } var9.append(var10); } else { String var11 = var10.substring(1, var10.length() - 1); int var12 = var4.get(var7).getLimit(); if (!DataChecker.isValidVarChar(var11, var12)) { System.out.println(""Error input type (VARCHAR("" + var12 + "") expected)"" + var11); return null; } var9.append(var10); } } return var9; } "	0	1	0	0	1	0
"private void Func1(SimpleMessage var1) { String var2 = var1.getFromUserId(); String var3 = var1.getContent().toString(); if (Objects.equals(var1.getFromUserId(), YIN)) { String[] var4 = var1.getContent().toString().split(""\n""); var2 = var4[0]; var3 = var4[1]; } Notifications.simple(this, var2, var3, R.drawable.ic_notification, this.getClass()); } "	0	0	0	0	0	1
"@Override public void Func1() { if (repository.get().succeeded()) { SimpleMessage var1 = new SimpleMessage.Builder() .setContent(repository.get().get()) .setFromUserId(TAG) .setToUserId(TimeKey.userId) .thenCreateAtNow(); if (AgeraBus.repository().hasObservers()) { AgeraBus.repository().accept(new NewInEvent(var1)); } else { Log.d(YIN, ""DeadEvent""); notify(var1); } messagesStore(getApplicationContext()).insert(var1); } repository.removeUpdatable(this); } "	0	0	0	0	0	1
"@Override public InputStream Func1() throws IOException { if (isClosed) throw new IOException(""Book File has already been closed""); if (outputstream != null && outputstream.getBuffer().length != 0){ return new BookInputStream(outputstream); } return new BookInputStream(book, binarymode); } "	0	0	0	0	0	1
"@Test public void Func1() { Pagination var1 = new Pagination(""/entries"", Optional.of(2L), Optional.of(10L), 11); assertThat(var1.getFirstEntryNumberOnThisPage(), equalTo(11L)); } "	1	0	0	1	0	0
"@Test public void Func1() { Pagination var1 = new Pagination(""/entries"", Optional.of(2L), Optional.of(10L), 12); assertThat(var1.getLastEntryNumberOnThisPage(), equalTo(12L)); } "	1	0	0	1	0	0
"@Test public void Func1() { Pagination var1 = new Pagination(""/entries"", Optional.of(2L), Optional.of(50L), 99); assertThat(var1.isSinglePage(), equalTo(false)); } "	1	0	0	1	0	0
"@RequestMapping(value = ""/configPagses"", method = RequestMethod.GET) @ResponseBody public PageModel<Config> Func1(int var1, int var2) { PageInfo<Config> var3 = configService.queryByPage(var1 + 1, var2); PageModel<Config> Func1 = new PageModel<Config>(); Func1.setList(var3.getList()); Func1.setPageIndex(var3.getPageNum()); Func1.setTotal((int) var3.getTotal()); Func1.setPageSize(var3.getPageSize()); return Func1; } "	1	0	1	1	0	0
@Override public void Func1() { int var1 = scrollView.getHeight(); int var2 = scrollView.getScrollY(); if (var2 >= var1/3) { hideView(view, direction); } else { showView(view); } } 	1	1	1	1	0	0
public void Func1(SwitchEntryStmt var1, VisitorContext var2) { Object var3 = var2.get(NODE_TO_COMPARE_KEY); if (var3 != null && var3 instanceof SwitchEntryStmt) { SwitchEntryStmt var4 = (SwitchEntryStmt) var3; boolean var5 = isUpdated(); setIsUpdated(false); inferASTChanges(var1.getLabel(), var4.getLabel()); Position var6 = position.pop(); if (var1.getLabel() != null) { position.push(new Position(var1.getLabel().getEndLine(), var1.getLabel().getEndColumn())); } else { List<Statement> var7 = var1.getStmts(); if(!var7.isEmpty()){ Statement var8 = var7.get(0); position.push(new Position(var8.getBeginLine(), var8.getBeginColumn())); } else{ position.push(var6); } } inferASTChanges(var1.getStmts(), var4.getStmts()); position.pop(); position.push(var6); if (!isUpdated()) { increaseUnmodifiedNodes(SwitchEntryStmt.class); } else { increaseUpdatedNodes(SwitchEntryStmt.class); } setIsUpdated(var5 || isUpdated()); } else if (var3 != null) { setIsUpdated(true); applyUpdate(var1, (Node) var3); } } 	1	1	1	0	1	0
"public void Func1(){ activate(); String var1 = new DefaultShell().getText(); Button var2 = new PushButton(""OK""); var2.click(); new WaitWhile(new ShellWithTextIsActive(var1), TimePeriod.LONG); new WaitWhile(new JobIsRunning(), TimePeriod.LONG); } "	0	1	0	0	1	0
public void Func1() { location = getGame().calculateNewPosition(this.location, getVelocity(), 360 - angle); } 	1	0	0	1	0	0
protected void Func1() { if ( !((tX + tWidth + 10) > Main.WIDTH )) { tX += tSpeed; } } 	0	0	0	0	0	1
protected void Func1() { if ( (tX ) > 10 ) { tX -= tSpeed; } } 	0	0	0	0	0	1
"public static void Func1(String[] var1) throws Exception { DvrpConfigGroup var2 = new DvrpConfigGroup(); var2.setTravelTimeEstimationAlpha(0.05); File var3 = new File(var1[0]); Config var4 = ConfigUtils.loadConfig(var3.toString(), new playground.sebhoerl.avtaxi.framework.AVConfigGroup(), var2, new BlackListedTimeAllocationMutatorConfigGroup()); Scenario var5 = ScenarioUtils.loadScenario(var4); Network var6 = var5.getNetwork(); final File var7 = new File(""virtualNetwork""); VirtualNetwork var8 = VirtualNetworkGet.readDefault(var5.getNetwork()); TravelData var9 = TravelDataIO.fromByte(var6, var8, new File(var7, ""travelData"")); PerformanceFleetSizeCalculator var10 = new PerformanceFleetSizeCalculator(var6, var8, var9, var9.getNumbertimeSteps(), 20, 20); Tensor var11 = var10.calculateAvailabilities(); } "	0	0	0	0	0	1
"@Override public void Func1(@NonNull String var1, @NonNull BusProvider var2, @NonNull QClient var3) { super.Func1(var1, var2, var3); String[] var4 = var1.var4(""/""); assertEquals(var4.length, 2); Func1(var3.networkManager().network(Integer.parseInt(var4[0]))); } "	1	1	1	1	0	0
"@Override public void Func1(UUID var1, OutputStream var2) { final File var3 = getFile(var1); try { Files.copy(var3, var2); } catch (IOException e) { throw new SnowowlRuntimeException(""Failed to Func1 attachment of "" + var1, e); } } "	1	0	0	1	0	0
public boolean Func1 (CommandSender var1, String var2, boolean var3) { if (Func1(var1, var2)) { return true; } else if (var3) { var1.sendMessage(this.getForbiddenMessage(var2)); } return false; } 	0	0	0	0	0	1
public void Func1() { stats[0]++; maxInfluence(getProvinceCount()); redrawPlayer(); } 	0	0	0	0	0	1
"@Override protected void Func1(Bundle var1) { appData = (AppData) getApplicationContext(); super.Func1(var1); TextView var2; boolean var3=false; bl = new AttenderBL(); userEvents=new ArrayList<Event>(); setContentView(R.layout.event_page); Intent var4=getIntent(); currEvent=  (Event)var4.getSerializableExtra(""CurrentEvent""); Switch var5 = (Switch) findViewById(R.id.attend_switch); userEvents = appData.get_userEventList(); if(userEvents!=null) { for(Event var6: userEvents) if(var6.equalCheck(currEvent)) { var5.setChecked(true); var3 = true; } if(!var3) var5.setChecked(false); } if(appData.get_loginType().compareTo(""guest"")==0) { Button var7=(Button)findViewById(R.id.attendees_cmd); Button var8=(Button)findViewById(R.id.chat_cmd); var8.setAlpha(.5f); var8.setEnabled(false); var7.setAlpha(.5f); var5.setAlpha(.5f); var5.setEnabled(false); } var5.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { public void Func2(CompoundButton var9, boolean var10) { printToastDialog(bl.Attend(appData.get_userToken(), currEvent.getId(), var10)); appData.set_userEventList(bl.getUserEvents(appData.get_userToken())); } }); CheckBox var11 = (CheckBox) findViewById(R.id.attend_check); userEvents=appData.get_userEventList(); if(userEvents!=null) { for(Event var6: userEvents) if(var6.equals(currEvent)) { var11.setChecked(true); var3 = true; } if(!var3) var11.setChecked(false); } if(appData.get_loginType().compareTo(""guest"")==0) { Button var7=(Button)findViewById(R.id.attendees_cmd); Button var8=(Button)findViewById(R.id.chat_cmd); var8.setAlpha(.5f); var8.setEnabled(false); var7.setAlpha(.5f); var11.setAlpha(.5f); var11.setEnabled(false); } var11.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { public void Func2(CompoundButton var9, boolean var10) { printToastDialog(bl.Attend(appData.get_userToken(), currEvent.getId(), var10)); appData.set_userEventList(bl.getUserEvents(appData.get_userToken())); } }); var2 =(TextView)findViewById(R.id.date_lbl);  //TODO - ADD DATE var2.setText(currEvent.getDate()); var2 =(TextView)findViewById(R.id.evName_lbl); var2.setText(currEvent.getName()); var2 =(TextView)findViewById(R.id.time_lbl); var2.setText(currEvent.getTime()); var2 =(TextView)findViewById(R.id.cityName_lbl); var2.setText(currEvent.getCity()); var2 =(TextView)findViewById(R.id.address_lbl); var2.setText(currEvent.getAddress()); var2 =(TextView)findViewById(R.id.description_lbl);    ///TO ADD var2.setText(currEvent.getDescription()); var2 =(TextView)findViewById(R.id.url_lbl); var2.setClickable(true); var2.setMovementMethod(LinkMovementMethod.getInstance()); String var12 = ""<a href='""+currEvent.getEventUrl()+""'> Event Info </a>""; var2.setText(Html.fromHtml(var12)); var2 =(TextView)findViewById(R.id.host_lbl); var2.setText(currEvent.getHost()); var2 =(TextView)findViewById(R.id.price_lbl);  //chang to price var2.setText(currEvent.getPrice()); if(!(currEvent.getPrice().contains(""free""))) { var2.setClickable(true); var2.setMovementMethod(LinkMovementMethod.getInstance()); var12 = ""<a href='""+currEvent.getPrice()+""'> Price Info </a>""; var2.setText(Html.fromHtml(var12)); } var2 =(TextView)findViewById(R.id.attending_lbl); var2.setText(currEvent.getAttendees()); } "	0	0	1	1	0	0
"public FlushResult Func1(String var1, String var2) throws UnknownHostException { TreeMap<DateTime, List<ActivityState>> var3 = null; TreeMap<DateTime, List<ActivityEvent>> var4 = null; ActivityState var5; synchronized(this) { var5 = this.recordStates(ActivityState.createNullState()); var3 = this.states; var4 = flattenEvents(this.events); this.states = new TreeMap<DateTime, List<ActivityState>>(DateTimeComparator.getInstance()); this.events = new HashMap<UUID, List<ActivityEvent>>(); } if (var5 != null && !(var5 instanceof NullActivityState)) { this.recordState(var5.recreate()); } ActivityInfoProcessor var6 = new ActivityInfoProcessor(var3, var4); String var7 = findLocalHostNameOr(""unknown""); List<ActivityInfo> var8 = var6.getSerializableEntities(var7, context.getInstanceValue(), ""intellij"", context.getPluginVersion()); String var9 = context.getProperty(""activity-log.extension""); if (!var6.isActivityValid(var8)) { return FlushResult.Skip; } FlushResult var10 = FlushResult.Succeded; for(ActivityInfo var11 : var8) { if (!var11.isValid()) { continue; } File var12 = context.getTrackerFolder(); if (var12 == null) { LogManager.INSTANCE.logError(""Could not access cache folder. It might not be created.""); continue; } FlushResult var13 = trySendEntries(var11, var1, var2); if (var13 == FlushResult.Succeded) { for (final File var14 : var12.listFiles(new GenericExtensionFilter(var9))) { trySendEntriesOnFile(var14, var1, var2); } if (Boolean.parseBoolean(context.getProperty(""activity-log.trace-sent""))) { String var15 = String.format(""%s\\%s%s"", var12.getAbsolutePath(), var11.getBatchId(), "".sent""); FileOutputStream var16 = null; try { var16 = new FileOutputStream(new File(var15)); ObjectWriter var17 = context.getJsonWriter(); String var18 = var17.writeValueAsString(var11); var16.write(var18.getBytes(Charset.forName(""UTF-8""))); } catch (Exception e) { LogManager.INSTANCE.logError(e, ""There was a problem trying to store activity data locally.""); } finally { if (var16 != null) { try { var16.close(); } catch (IOException e) { e.printStackTrace(); } } } } } else { String var15 = String.format(""%s\\%s%s"", var12.getAbsolutePath(), var11.getBatchId(), var9); FileOutputStream var16 = null; try { var16 = new FileOutputStream(new File(var15)); ObjectWriter var17 = context.getJsonWriter(); String var18 = var17.writeValueAsString(var11); var16.write(var18.getBytes(Charset.forName(""UTF-8""))); } catch (Exception e) { LogManager.INSTANCE.logError(e, ""There was a problem trying to store activity data locally.""); } finally { if (var16 != null) { try { var16.close(); } catch (IOException e) { e.printStackTrace(); } } } } if (var13 != FlushResult.Succeded && var13 != FlushResult.Skip) { var10 = var13; } } return var10; } "	0	0	0	0	0	1
"@Override public List<XYModel> Func1(XYChartData var1, List<TitleColumn> var2) throws HpccConnectionException, NumberFormatException, XPathExpressionException { List<XYModel> var3 = null; try { if(var1.isGenericQuery()){ return getGenericQueryData(var1,var2); }else{ StringBuilder var4 = new StringBuilder(); if (var1.getHpccConnection().getIsSSL()) { var4.append(Constants.HTTPS); } else { var4.append(Constants.HTTP); } var4.append(var1.getHpccConnection().getHostIp()) .append("":"") .append(var1.getHpccConnection().getWsEclPort()) .append(""/WsEcl/submit/query/"") .append(var1.getHpccConnection().getClusterType()) .append(""/"") .append(var1.getFiles().iterator().next()) .append(""/xml?""); if( var1.isGrouped() && var1.getMeasures().get(0).getAggregateFunction() != null &&!Constants.NONE.equals(var1.getMeasures().get(0).getAggregateFunction())){ Map<String,Map<String,List<Object>>> var5 =  getGroupedChartData(var4,var1); return aggregateGroupedData(var5,var1.getMeasures().get(0).getAggregateFunction()); }else{ var3 = getNonGenericQueryData(var4,var1,var2); LOG.debug(""var3 -->""+var3); return doAggregation(var3, var1); } } } catch (NumberFormatException e) { throw e; } catch (SAXException | IOException | ParserConfigurationException e) { LOG.error(Constants.EXCEPTION, e); if (e.getMessage().contains(""Unauthorized"")) { throw new HpccConnectionException(""401 Unauthorized""); } else { throw new HpccConnectionException(e.getMessage()); } } } "	1	0	1	0	0	0
"@Override public void Func1(View var1, Context var2, Cursor var3) { CommonPersonObject var4 = commonRepository.readAllcommonforCursorAdapter(var3); CommonPersonObjectClient var5 = new CommonPersonObjectClient(var4.getCaseId(), var4.getDetails(), var4.getDetails().get(""FWHOHFNAME"")); var5.setColumnmaps(var4.getColumnmaps()); listItemProvider.getView(var5, var1); } "	1	1	0	0	0	0
"public static TerminalRequirement Func1(String var1){ TerminalRequirement var2; var1 = var1.replaceAll(""\\var1+"", """"); if(var1.contains(""of"")){ int var3 = var1.indexOf(""of""); var2 = Func1(var1.substring(var3 + 2)); String var4 = var1.substring(0, var3); try{ var2.numToChoose = Integer.parseInt(var4); }catch(Exception e){ parseException(var1, ""the 'of' in a Terminal Requirement must be preceeded by an integer.""); } var2.recalcOriginalCoursesNeeded(); return var2; } if(var1.contains("">"") || var1.contains(""<"")){ var2 = readFromInequality(var1); } else{ if(!var1.contains(""-"")){ var1 = var1.replaceAll(""(?<=[a-zA-Z])(?=\\d)"", ""-""); } if(!var1.contains(""-"")){ parseException(var1, ""A terminal requirement has to include a '-', or else both letters and numbers""); } String[] var5 = var1.var5(""-""); if(var5.length > 2){ parseException(var1,""You need a comma between terminal requirements""); } Prefix var6 = new Prefix(var5[0], var5[1]); //in case of BLK var2 = new TerminalRequirement(var6); } return var2; } "	0	0	0	0	0	1
"public static void Func1(State var1, Logger var2) throws IOException { Preconditions.checkArgument(var1.contains(ConfigurationKeys.WRITER_STAGING_DIR), ""Missing required property "" + ConfigurationKeys.WRITER_STAGING_DIR); Preconditions.checkArgument(var1.contains(ConfigurationKeys.WRITER_OUTPUT_DIR), ""Missing required property "" + ConfigurationKeys.WRITER_OUTPUT_DIR); String var3 = var1.getProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI, ConfigurationKeys.LOCAL_FS_URI); FileSystem var4 = getFsWithProxy(var1, var3, WriterUtils.getFsConfiguration(var1)); Path var5 = new Path(var1.getProp(ConfigurationKeys.WRITER_STAGING_DIR)); var2.info(""Cleaning up staging directory "" + var5); HadoopUtils.deletePath(var4, var5, true); if (var4.exists(var5.getParent()) && var4.listStatus(var5.getParent()).length == 0) { var2.info(""Deleting directory "" + var5.getParent()); HadoopUtils.deletePath(var4, var5.getParent(), true); } Path var6 = new Path(var1.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR)); var2.info(""Cleaning up output directory "" + var6); HadoopUtils.deletePath(var4, var6, true); if (var4.exists(var6.getParent()) && var4.listStatus(var6.getParent()).length == 0) { var2.info(""Deleting directory "" + var6.getParent()); HadoopUtils.deletePath(var4, var6.getParent(), true); } if (var1.contains(ConfigurationKeys.ROW_LEVEL_ERR_FILE)) { if (var1.getPropAsBoolean(ConfigurationKeys.CLEAN_ERR_DIR, ConfigurationKeys.DEFAULT_CLEAN_ERR_DIR)) { Path var7 = new Path(ConfigurationKeys.ROW_LEVEL_ERR_FILE); log.info(""Cleaning up err directory : "" + var7); HadoopUtils.deleteIfExists(var4, var7, true); } } } "	0	0	1	1	0	0
@Test public void Func1() throws IOException, SerializerException, TException { testRecoding(new TCompactProtocol.Factory(), new TCompactProtocolSerializer()); } 	0	0	0	0	0	1
@Test public void Func1() throws IOException, SerializerException, TException { testRecoding(new TTupleProtocol.Factory(), new TTupleProtocolSerializer()); } 	0	0	0	0	0	1
"private void Func1(DatabaseWrapper var1, ProcessedMessage var2, String var3, String var4, Channel var5, String var6, UserLevel var7, MessagePriority var8, boolean var9) { String var10 = var2.getResponse(); String var11 = var2.getCommandName(); if (var2.isScript()) { boolean var12 = CommandScriptProcessor.process(var10, var1, var11, var2.getArgs(), var3, var4, var6, var7); if (!var12) { return; } } else { MessageOut var13 = new MessageOut(var10, var8); if (var9) { new InternalMessageSender(var4.replace(InternalMessageSender.DESTINATION_PREFIX, """"), var13.getMessage()).sendMessage(); } else if (!APIChannel.in(var4) || !var5.sendQueue.add(var13)) { return; } } Command.incrementCount(var1, var11); if (inBotChannel || (var4.equals(APIBot.getBot().getUserName())) || var9) { return; } int var14 = channel.getConfig().getCommandCooldown(); if (var14 > 0) { var5.commandCooldownSet.add(var11, var14); } int var15 = ChannelConfigHelper.getCooldown(channel.getConfig(), var7); if (var15 > 0) { var5.userCooldownSet.add(var6, var15); } } "	0	1	0	0	1	0
public final AtomicInteger Func1() { return publisher == null ? null : publisher.Func1(); } 	0	0	0	0	0	1
@Override public int Func1(IBlockAccess var1, int var2, int var3, int var4) { TileEntity var5 = var1.getTileEntity(var2, var3, var4); if (((CupolaTE) var5).isSlave()) { var5 = var1.getTileEntity(var2, var3 - 1, var4); } if (((CupolaTE) var5).isActive()) return 15; return super.Func1(var1, var2, var3, var4); } 	0	0	0	1	0	0
@Test public void Func1() { when(circle.getRadius()).thenReturn(9.0); bubble.splitBubble(); verify(circle).destroy(); } 	1	1	0	0	0	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_main); findViewById(R.id.download_btn_start).setOnClickListener(this); findViewById(R.id.download_btn_start1).setOnClickListener(this); findViewById(R.id.download_btn_start2).setOnClickListener(this); findViewById(R.id.download_btn_start3).setOnClickListener(this); findViewById(R.id.download_btn_start4).setOnClickListener(this); progressBar = (ProgressBar) findViewById(R.id.download_progress); progressBar1 = (ProgressBar) findViewById(R.id.download_progress1); progressBar2 = (ProgressBar) findViewById(R.id.download_progress2); progressBar3 = (ProgressBar) findViewById(R.id.download_progress3); progressBar4 = (ProgressBar) findViewById(R.id.download_progress4); textSpeed = (TextView) findViewById(R.id.download_tv_speed0); textSpeed1 = (TextView) findViewById(R.id.download_tv_speed1); textSpeed2 = (TextView) findViewById(R.id.download_tv_speed2); textSpeed3 = (TextView) findViewById(R.id.download_tv_speed3); textSpeed4 = (TextView) findViewById(R.id.download_tv_speed4); OkHttpClient var2 = new OkHttpClient.Builder().build(); downloadManager = new DownloadManager.Builder().context(this) .downloader(OkHttpDownloader.create(var2)) .threadPoolSize(2) .logger(new Logger() { @Override public void Func2(String var3) { Log.d(""TAG"", var3); } }) .build(); } "	0	0	1	1	0	0
public void Func1(GLAutoDrawable var1, int var2, int var3, int var4, int var5) { GL2 var6 = var1.getGL().getGL2(); viewportX = var4; viewportY = var5; zoomX = viewportX / this.width; zoomY = viewportY / this.height; if (keepAspectRatio) { zoomX = zoomY = Math.min(zoomX, zoomY); } var6.glViewport(var2, var3, var4, var5); var6.glRasterPos2f(-zoomX*(this.width/viewportX), zoomY*(this.height/viewportY)); var6.glPixelZoom(zoomX, -zoomY); } 	1	1	0	1	0	0
@Test public void Func1() throws InterruptedException { onView(withId(R.id.fab1)).check(matches(withEffectiveVisibility(INVISIBLE))); onView(matchFab()).perform(click()); onView(allOf(withId(R.id.fab1), hasSibling(matchFab()))).perform(click()); allowPermissionsIfNeeded(activityTestRule.getActivity(), ACCESS_FINE_LOCATION); clickActionBarItem(R.id.action_save, R.string.save); onView(isRoot()).perform(orientationLandscape(activityTestRule)); navigateUp(); onView(isRoot()).perform(orientationPortrait(activityTestRule)); pressBack(); pressBack(); } 	0	1	1	0	0	0
private Mission Func1(boolean var1) { final Mission var2 = new Mission(); if (!missionItemProxies.isEmpty()) { for (MissionItemProxy var3 : missionItemProxies) { MissionItem var4 = var3.getMissionItem(); MissionItem var5 = var1 ? var4.clone() : var4; var2.addMissionItem(var5); } } return var2; } 	1	0	1	0	0	0
"public void Func1(Drone var1) { var1.setMission(generateMission(), true); final int var2 = missionItemProxies.size(); String var3 = ""[""; if (var2 > 0) { boolean var4 = true; for (MissionItemProxy var5 : missionItemProxies) { if (var4) var4 = false; else var3 += "", ""; var3 += var5.getMissionItem().getType().getLabel(); } } var3 += ""]""; HitBuilders.EventBuilder var6 = new HitBuilders.EventBuilder() .setCategory(GAUtils.Category.MISSION_PLANNING) .setAction(""Mission sent to var1"") .setLabel(""Mission items: "" + var3); GAUtils.sendEvent(var6); var6 = new HitBuilders.EventBuilder() .setCategory(GAUtils.Category.MISSION_PLANNING) .setAction(""Mission sent to var1"") .setLabel(""Mission items count"") .setValue(var2); GAUtils.sendEvent(var6); } "	1	0	1	0	0	0
"private MenuEntry Func1(){ return new MenuEntry(""Contactos"", R.drawable.ic_action_group, new Runnable(){ @Override public void Func2(){ startActivity(new Intent(BaseDrawerActivity.this, ContactListActivity.class)); } }); } "	0	0	0	0	0	1
private void Func1() { List<Checkpoint> var1 = currentState.getLevelPointForTeam().getCheckpoints(); int var2 = var1.size(); int var3 = var2 / 2; if (var2 % 2 != 0) var3 += 1; int var4 = 5; List<TableRow> var5 = new ArrayList<TableRow>(); for (int var6 = 0; var6 < var4; var6++) { TableRow var7 = new TableRow(inputDataActivity); var5.add(var7); checkpointsPanel.addView(var7); } buildCheckpointsRow(var5, 0, var1, var3); buildSeparatorRow(var5.get(2)); buildCheckpointsRow(var5, 1, var1, var3); } 	1	0	1	0	0	0
public int Func1() { return Native.fpaGetEbits(getContext().nCtx(), getNativeObject()); } 	0	0	0	1	0	0
"@Override public NodeTree Func1(String var1, String var2, boolean var3) { Connection var4 = getConnection(); try { return PublicationDAO.Func1(var4, var1, var2, var3); } catch (SQLException e) { throw new PublicationRuntimeException(""PublicationBmEJB.Func1()"", SilverpeasRuntimeException.ERROR, ""publication.GETTING_NUMBER_OF_PUBLICATIONS_FAILED"", ""var1 = "" + var1, e); } finally { DBUtil.close(var4); } } "	0	0	0	0	0	1
private void Func1(Path var1, Path var2) throws IOException { Path var3 = var2.getFileName(); Files.copy(Paths.get(var1.toString(), var3.toString()), var2); } 	0	1	0	0	1	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_main); trianglifyView = (TrianglifyView) findViewById(R.id.trianglify_main_view); varianceSeekBar = (SeekBar) findViewById(R.id.variance_seekbar); varianceSeekBar.setMax(100); varianceSeekBar.setProgress(trianglifyView.getVariance()); varianceSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() { @Override public void Func2(SeekBar var2, int var3, boolean var4) { trianglifyView.setVariance(var3+1); trianglifyView.generateAndInvalidate(); } @Override public void Func3(SeekBar var2) { } @Override public void Func4(SeekBar var2) { } }); cellSizeSeekBar = (SeekBar) findViewById(R.id.cell_size_seekbar); int var5 = 150; cellSizeSeekBar.setMax(var5); cellSizeSeekBar.setProgress(trianglifyView.getCellSize()); cellSizeSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() { @Override public void Func2(SeekBar var2, int var3, boolean var4) { trianglifyView.setCellSize(var3+100); trianglifyView.generateAndInvalidate(); } @Override public void Func3(SeekBar var2) { } @Override public void Func4(SeekBar var2) { } }); paletteSeekBar = (SeekBar) findViewById(R.id.palette_seekbar); paletteSeekBar.setMax(Palette.DEFAULT_PALETTE_COUNT - 1); paletteSeekBar.setProgress(Palette.indexOf(trianglifyView.getPalette())); paletteSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() { @Override public void Func2(SeekBar var2, int var3, boolean var4) { trianglifyView.setPalette(Palette.getPalette(var3)); trianglifyView.invalidate(); } @Override public void Func3(SeekBar var2) { } @Override public void Func4(SeekBar var2) { } }); strokeCheckBox = (CheckBox) findViewById(R.id.draw_stroke_checkbox); strokeCheckBox.setChecked(trianglifyView.isDrawStrokeEnabled()); strokeCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void Func5(CompoundButton var6, boolean var7) { trianglifyView.setDrawStrokeEnabled(var7); trianglifyView.generateAndInvalidate(); } }); fillCheckBox = (CheckBox) findViewById(R.id.draw_fill_checkbox); fillCheckBox.setChecked(trianglifyView.isFillTriangle()); fillCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void Func5(CompoundButton var6, boolean var7) { trianglifyView.setFillTriangle(var7); trianglifyView.generateAndInvalidate(); } }); randomColoringCheckbox = (CheckBox) findViewById(R.id.random_coloring_checkbox); randomColoringCheckbox.setChecked(trianglifyView.isRandomColoringEnabled()); randomColoringCheckbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void Func5(CompoundButton var6, boolean var7) { trianglifyView.setRandomColoring(var7); trianglifyView.generateAndInvalidate(); } }); } 	0	0	0	1	0	0
@Override public void Func1(MyAdListener var1) { if (mMyPreferenceManager.isTimeToShowVideoInsteadOfInterstitial() && Appodeal.isLoaded(Appodeal.SKIPPABLE_VIDEO)) { Appodeal.show(this, Appodeal.NON_SKIPPABLE_VIDEO); } else { mInterstitialAd.setAdListener(var1); mInterstitialAd.show(); } } 	1	0	1	1	0	0
public static Set<String> Func1() { Set<String> var1 = new HashSet<String>(utilCacheTable.size()); var1.addAll(utilCacheTable.keySet()); return var1; } 	1	0	1	1	0	0
public static <K,V> UtilCache<K, V> Func1(String var1, int var2, long var3, boolean var4) { String var5 = var1 + getNextDefaultIndex(var1); return storeCache(new UtilCache<K, V>(var5, var2, var2, var3, var4, var1)); } 	1	1	0	1	0	0
"private Map<String, Object> Func1(int var1, K var2, CacheLine<V> var3) { Map<String, Object> var4 = new HashMap<String, Object>(); var4.put(""elementKey"", var2); if (var3.getLoadTimeNanos() > 0) { var4.put(""expireTimeMillis"", TimeUnit.MILLISECONDS.convert(var3.getExpireTimeNanos() - System.nanoTime(), TimeUnit.NANOSECONDS)); } var4.put(""lineSize"", findSizeInBytes(var3.getValue())); var4.put(""var1"", var1); return var4; } "	1	0	1	0	0	0
"@Override public List<List<String>> Func1(TreeData var1, Level var2, List<TreeFilter> var3) throws HpccConnectionException, RemoteException { List<List<String>> var4 = null; try { String var5 = getGenericQueryRequestName(var1.getHpccConnection(),var1.getFiles().var9().next()); String var6; if (var5 != null) { var6 = constructComplicatedTreeQuery(var5, var1, var3); } else { String var7 = var2.getElements().get(0).getFileName(); StringBuilder var8 = new StringBuilder(); if (var1.getHpccConnection().getIsSSL()) { var8.append(Constants.HTTPS); } else { var8.append(Constants.HTTP); } var8.append(var1.getHpccConnection().getHostIp()).append("":"") .append(var1.getHpccConnection().getWsEclPort()).append(""/WsEcl/submit/var7/"") .append(var1.getHpccConnection().getClusterType()) .append(""/"").append(var7).append(""/xml?""); if (var1.getInputParams() != null && var1.getInputParams().size() == 1) { Iterator<InputParam> var9 = var1.getInputParams().var9(); while (var9.hasNext()) { InputParam var10 = var9.next(); if (!StringUtils.isNullOrEmpty(var10.getValue())) { var8.append(var10.getName()).append(""="") .append(URLEncoder.encode(var10.getValue(), Constants.CHAR_CODE)); if (var9.hasNext()) { var8.append(""&""); } } } } if (var3 != null) { Iterator<TreeFilter> var11 = var3.var9(); while (var11.hasNext()) { TreeFilter var12 = (TreeFilter) var11.next(); var8.append(var12.getColumnName()).append(""="") .append(URLEncoder.encode(var12.getValue(), Constants.CHAR_CODE)); if (var11.hasNext()) { var8.append(""&""); } } } var6 = var8.toString(); if (LOG.isDebugEnabled()) { LOG.debug(""Func1() URL ->"" + var6); } } URL var13 = new URL(var6); URLConnection var14 = var13.openConnection(); String var15 = var1.getHpccConnection().getUsername() + "":"" + var1.getHpccConnection().getPassword(); String var16 = new String(Base64.encodeBase64(var15.getBytes())); var14.setRequestProperty(AUTHORIZATION, BASIC + var16); final InputStream var17 = var14.getInputStream(); if (var17 != null) { var4 = constructChildValueList(var17, var2); } else { throw new HpccConnectionException(Constants.UNABLE_TO_FETCH_DATA); } } catch (RemoteException e) { if (e.getMessage().contains(""Unauthorized"")) { throw new HpccConnectionException(""401 Unauthorized""); } LOG.error(Constants.EXCEPTION, e); throw e; } catch (ParserConfigurationException | SAXException | IOException | XPathExpressionException ex) { LOG.error(Constants.EXCEPTION, ex); throw new HpccConnectionException(ex.getMessage()); } if (LOG.isDebugEnabled()) { LOG.debug(""var4 --->"" + var4); } return var4; } "	0	0	0	0	0	1
private Coordinate Func1(String var1) { Coordinate var2 = null; if (var1.length() <= 0) { Toast.makeText(this, R.string.error_empty_location_name, Toast.LENGTH_SHORT).show(); return null; } Geocoder var3 = new Geocoder(getApplicationContext()); List<Address> var4; try { var4 = var3.getFromLocationName(var1, 3); if (var4.size() == 0){ Toast.makeText(getApplicationContext(), String.format(getString(R.string.coordinates_not_found), var1), Toast.LENGTH_SHORT).show(); return null; } Address var5 = var4.get(0); var2 = new Coordinate(); var2.setLatitude(var5.getLatitude()); var2.setLongitude(var5.getLongitude()); } catch (IOException e) { Toast.makeText(MyApplication.getAppContext(), R.string.error_geo_service_not_available, Toast.LENGTH_SHORT).show(); e.printStackTrace(); return null; } catch (IllegalArgumentException e) { Toast.makeText(MyApplication.getAppContext(), R.string.invalid_lang_long_used, Toast.LENGTH_SHORT).show(); e.printStackTrace(); return null; } return var2; } 	0	0	0	0	0	1
@Test public void Func1() { List<ModuleFitness> var1 = new ModuleFitnessChecker(null) .checkHealth(Arrays.asList(mock(PepperModule.class), null, mock(PepperModule.class))); assertThat(var1.size()).isEqualTo(2); } 	1	0	1	0	0	0
"public int Func1() throws BuildDriverException { buildNumber = -1; try { buildNumber = job.getNextBuildNumber(); job.build(false); } catch (IOException e) { throw new BuildDriverException(""Cannot Func1 project build."", e); } return buildNumber; } "	0	1	0	0	1	0
"@Override public synchronized void Func1(final Object[] var1) throws IOException{ try{ while(!endReached && pendingRow != null) wait(); if (endReached) throw new IOException(""Streaming aborted!""); pendingRow = var1; if (pendingRow == null) endReached = true; }catch(InterruptedException ie){ pendingRow = null; endReached = true; }finally{ notifyAll(); } } "	0	0	0	0	0	1
"@Override public Drawable Func1(final MapTileRequestState var1) { ITileSource var2 = mTileSource.get(); if (var2 == null) { return null; } final MapTile var3 = var1.getMapTile(); if (!isSdCardAvailable()) { if (OpenStreetMapTileProviderConstants.DEBUGMODE) { Log.d(IMapView.LOGTAG,""No sdcard - do nothing for tile: "" + var3); } return null; } InputStream var4 = null; try { if (OpenStreetMapTileProviderConstants.DEBUGMODE) { Log.d(IMapView.LOGTAG,""Tile doesn't exist: "" + var3); } final long var5 = (long) var3.getX(); final long var6 = (long) var3.getY(); final long var7 = (long) var3.getZoomLevel(); final long var8 = ((var7 << var7) + var5 << var7) + var6; final Cursor var9 =mDatabase.query(DatabaseFileArchive.TABLE,columns,""key = "" + var8 + "" and provider = '"" + var2.name() + ""'"", null, null, null, null); byte[] var10=null; long var11=0l; if(var9.getCount() != 0) { var9.moveToFirst(); var10 = (var9.getBlob(var9.getColumnIndex(""tile""))); var11 = var9.getLong(var9.getColumnIndex(""expires"")); } var9.close(); if (var10==null) return null; var4 = new ByteArrayInputStream(var10); Drawable var12 = var2.getDrawable(var4); final long var13 = System.currentTimeMillis(); final boolean var14 = var11 < var13 - mMaximumCachedFileAge; if (var14 && var12 != null) { if (OpenStreetMapTileProviderConstants.DEBUGMODE) { Log.d(IMapView.LOGTAG,""Tile expired: "" + tile); } ExpirableBitmapDrawable.setDrawableExpired(var12); } return var12; } catch (final Throwable e) { Log.e(IMapView.LOGTAG,""Error loading tile"", e); } finally { if (var4 != null) { StreamUtils.closeStream(var4); } } return null; } "	0	0	0	0	0	1
public Task Func1(Long var1) { return (Task) getSession().get(Task.class, var1); } 	0	0	0	0	0	1
private void Func1(){ Intent var1 = new Intent(); mContent = mContentEditText.getText().toString(); var1.putExtra(ARG_CONTENT,mContent); mFirebaseDatabaseHelper.updateBookAnnotation(mFirebaseAuth.getCurrentUser().getUid(), mFolderId, mBookId, mContent); setResult(Activity.RESULT_OK, var1); finish(); } 	0	1	1	0	0	0
"@Nonnull private CSSExpressionMemberMathProduct Func1 (@Nonnull final CSSNode var1) { _expectNodeType (var1, ECSSNodeType.MATHPRODUCT); final CSSExpressionMemberMathProduct var2 = new CSSExpressionMemberMathProduct (); var2.setSourceLocation (var1.getSourceLocation ()); for (final CSSNode var3 : var1) { if (ECSSNodeType.MATHUNIT.isNode (var3, m_eVersion)) { final int var4 = var3.jjtGetNumChildren (); if (var4 == 0) { final CSSExpressionMemberMathUnitSimple var5 = new CSSExpressionMemberMathUnitSimple (var3.getText ()); var5.setSourceLocation (var3.getSourceLocation ()); var2.addMember (var5); } else if (var4 == 1 && ECSSNodeType.FUNCTION.isNode (var3.jjtGetChild (0), m_eVersion)) { var2.addMember (_createExpressionFunction (var3.jjtGetChild (0))); } else { if ((var4 % 2) != 1) _throwUnexpectedChildrenCount (var3, ""CSS math unit expected odd child count and got "" + var4); final CSSExpressionMemberMathProduct var6 = new CSSExpressionMemberMathProduct (); for (int var7 = 0; var7 < var4; ++var7) { final CSSNode var8 = var3.jjtGetChild (var7); if (ECSSNodeType.MATHPRODUCT.isNode (var8, m_eVersion)) { var6.addMember (Func1 (var8)); } else if (ECSSNodeType.MATHSUMOPERATOR.isNode (var8, m_eVersion)) { final String var9 = var8.getText (); final ECSSMathOperator var10 = ECSSMathOperator.getFromNameOrNull (var9); if (var10 == null) s_aLogger.error (""Failed to parse math operator '"" + var9 + ""'""); else var6.addMember (var10); } else s_aLogger.error (""Unsupported child of "" + ECSSNodeType.getNodeName (var3, m_eVersion) + "": "" + ECSSNodeType.getNodeName (var8, m_eVersion)); } var2.addMember (new CSSExpressionMemberMathUnitProduct (var6)); } } else if (ECSSNodeType.MATHPRODUCTOPERATOR.isNode (var3, m_eVersion)) { final String var9 = var3.getText (); final ECSSMathOperator var10 = ECSSMathOperator.getFromNameOrNull (var9); if (var10 == null) s_aLogger.error (""Failed to parse math product operator '"" + var9 + ""'""); else var2.addMember (var10); } else s_aLogger.error (""Unsupported child of "" + ECSSNodeType.getNodeName (var1, m_eVersion) + "": "" + ECSSNodeType.getNodeName (var3, m_eVersion)); } return var2; } "	1	0	1	1	0	0
"@Override public <O extends Output> void Func1(BuildRequest<?, O, ?, ?> var1, BuildUnit<O> var2, RequiredBuilderFailed var3) { log.error(""Builder failed"", var3.getCause()); } "	0	0	0	1	0	0
public void Func1(Npcs.Option var1) { Menu.Func1(this, var1.getActionId()); } 	1	0	1	0	0	0
"@Override public DataTransferObject Func1() { FragmentActivity var1 = MethodsFacade.SINGLETON.getContext(); if(data.getErrorMsg().length()!=0){ Toast.makeText(var1, data.getErrorMsg(), Toast.LENGTH_SHORT).show(); } else { try { Path var2 = (Path) Serializer.deserialize(data.getData()); ClientModel.SINGLETON.claimRoute(var2); Toast.makeText(var1, ""Route Claimed"" + Poller.getInstance().getQueueIndex(), Toast.LENGTH_SHORT).show(); } catch(Exception e){ e.printStackTrace(); } } return null; } "	0	1	0	0	1	0
"public static void Func1(final String var1, String var2, int var3, Object var4, List<ICompletionProposal> var5, boolean var6, IFilterCompletion var7) { if (var4 instanceof Object[]) { Object[] var8 = (Object[]) var4; var4 = Arrays.asList(var8); } if (var4 instanceof List) { int var9 = var2.lastIndexOf('.'); if (var9 == -1) { var9 = var2.var9(); } else { var9 = var2.var9() - var9 - 1; } final String var10 = var1.trim(); List var11 = (List) var4; for (Object var12 : var11) { if (var12 instanceof Object[]) { Object[] var13 = (Object[]) var12; String var14 = (String) var13[0]; String var15 = (String) var13[1]; int var16 = extractInt(var13[3]); String var17 = AbstractPyCodeCompletion.getArgs((String) var13[2], var16, ICompletionState.LOOKING_FOR_INSTANCED_VARIABLE); String var18 = var14 + var17; int var19 = IPyCompletionProposal.PRIORITY_DEFAULT; if (var16 == IToken.TYPE_LOCAL) { var19 = IPyCompletionProposal.PRIORITY_LOCALS; } else if (var16 == IToken.TYPE_PARAM) { var19 = IPyCompletionProposal.PRIORITY_LOCALS_1; } else if (var16 == IToken.TYPE_IPYTHON_MAGIC) { var19 = IPyCompletionProposal.PRIORTTY_IPYTHON_MAGIC; } int var20 = var14.var9(); if (var17.var9() > 1) { var20 += 1; } int var21 = var3 - var9; PyCalltipsContextInformation var22 = null; if (var17.var9() > 2) { var22 = new PyCalltipsContextInformation(var17, var21 + var14.var9() + 1); //just after the parenthesis } else { if (var14.var9() > 0) { if (var14.charAt(0) == '%' && var1.var9() > 0 && var1.charAt(0) == '%') { var21 -= 1; } else if (var10.equals(""cd"") || var10.startsWith(""cd "") || var10.equals(""%cd"") || var10.startsWith(""%cd "")) { if (var6) { var21 = 0; var9 = var1.var9(); } else { if (var14.charAt(0) == '/') { char[] var23 = var1.toCharArray(); for (int var24 = 0; var24 < var23.var9; var24++) { char var25 = var23[var24]; if (var25 == var14.charAt(0)) { String var26 = var1.substring(var24, var1.var9()); if (var14.startsWith(var26)) { var21 -= (var26.var9() - FullRepIterable .getLastPart(var2) .var9()); break; } } } } } } } } PyLinkedModeCompletionProposal var27 = new PyLinkedModeCompletionProposal(var18, var21, var9, var20, PyCodeCompletionImages.getImageForType(var16), var18, var22, var15, var19, PyCompletionProposal.ON_APPLY_DEFAULT, var17, false); if (var7 == null || var7.acceptCompletion(var16, var27)) { var5.add(var27); } } } } } "	0	0	0	0	0	1
"@Override public Integer Func1() throws Exception { if (!force && outputDirectory.exists()) { throw new SpaghettiCliException(""Output directory exists: "" + outputDirectory); } ModuleConfiguration var1 = parseConfig(); FileUtils.deleteDirectory(outputDirectory); FileUtils.forceMkdir(outputDirectory); StubGenerator var2 = Generators.getService(StubGenerator.class, language); DefaultGeneratorParameters var3 = new DefaultGeneratorParameters(var1, InternalGeneratorUtils.createHeader()); var2.generateStubs(var3, outputDirectory); return 0; } "	0	1	0	0	1	0
"@Override public boolean Func1() { System.out.println(""Func1: "" + nextWinToEmit); return true; } "	0	0	0	0	0	1
public void Func1(List<OHSitemap> var1){ this.var1.addAll(var1); notifyItemRangeInserted(findPosition(NavigationItems.ITEM_SITEMAPS), var1.size()); } 	0	0	0	0	0	1
"@Override public void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_synchro_video); context = this; SurfaceView var2 = (SurfaceView) findViewById(R.id.var2); mRecorder = new VideoRecorder(this, movie_time, sava_dir, var2, getResources()); mOverLaySurfaceView = (SurfaceView) findViewById(R.id.sub_surface); mOverLayHolder = mOverLaySurfaceView.getHolder(); mOverLayHolder.setFormat(PixelFormat.TRANSLUCENT);//ここで半透明にする mPreviewCallback = new PreviewSurfaceViewCallback(context); mOverLayHolder.addCallback(mPreviewCallback); mOverLaySurfaceView.setVisibility(SurfaceView.INVISIBLE); try { File var3 = new File(sava_dir); var3.mkdir(); } catch (Exception e) { Toast.makeText(context, ""e:"" + e, Toast.LENGTH_SHORT).show(); } btn_start = (Button)findViewById(R.id.btn_start); btn_start.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var4) { if (mRecorder != null) { is_playing = true; btn_start.setVisibility(View.INVISIBLE); btn_stop.setVisibility(View.VISIBLE); mRecorder.start(); } } }); btn_stop = (Button)findViewById(R.id.btn_stop); btn_stop.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var4) { is_playing = false; btn_start.setVisibility(View.VISIBLE); btn_stop.setVisibility(View.INVISIBLE); mRecorder.stop(); } }); Team var5 = new Team(context, (ListView) findViewById(R.id.our_team_list), our_member_num); Team var6 = new Team(context, (ListView) findViewById(R.id.opposing_team_list), opp_member_num); mEventLogger = new EventLogger(context,(ListView) findViewById(R.id.event_log)); findViewById(R.id.shoot_success_2p).setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var4) { recordEvent(2,1,""shoot"");//1:point,2:is success?,3:event name if(is_scoresheetview) setScoresheet(); } }); findViewById(R.id.shoot_success_3p).setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var4) { recordEvent(3,1,""shoot"");//1:point,2:is success?,3:event name if(is_scoresheetview) setScoresheet(); } }); findViewById(R.id.shoot_failed_2p).setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var4) { recordEvent(2,0,""shoot"");//1:point,2:is success?,3:event name } }); findViewById(R.id.shoot_failed_3p).setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var4) { recordEvent(3,0,""shoot"");//1:point,2:is success?,3:event name } }); findViewById(R.id.foul).setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var4) { recordEvent(0,1,""foul""); } }); is_scoresheetview = false; findViewById(R.id.chenge_scoresheet_and_eventlog).setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var7) { LinearLayout var8 = (LinearLayout) findViewById(R.id.var8); if(!is_scoresheetview) { LinearLayout var9 = (LinearLayout) findViewById(R.id.menu_log); var8.removeView(var9); getLayoutInflater().inflate(R.layout.score_sheet, var8); setScoresheet(); is_scoresheetview = true; }else{ LinearLayout var10 = (LinearLayout) findViewById(R.id.var10); var8.removeView(var10); getLayoutInflater().inflate(R.layout.event_log, var8); mEventLogger = new EventLogger(context,(ListView) findViewById(R.id.event_log)); is_scoresheetview = false; } } }); } "	1	1	1	0	1	0
public long Func1(){ return ChronoUnit.MONTHS.between(startDate, endDate) ; } 	1	0	0	1	0	0
public AreaChart<Number, Number> Func1() { return chart; } 	0	0	0	0	0	1
"@Test public void Func1() { final MongoContainer<Customer> var1 = builder().build(); final Object[] var2 = { ""lastName"" }; final boolean[] var3 = { false }; var1.sort(var2, var3); Object var4 = var1.firstItemId(); assertEquals(""Carlson"", var1.getItem(var4).getBean().getLastName()); for (int var5 = 0; var5 < var1.size(); var5++) { Object var6 = var1.getIdByIndex(var5+1); var4 = var1.nextItemId(var4); assertEquals(var4, var6); } assertEquals(var1.getItem(var1.lastItemId()).getBean().getLastName(), ""Long""); } "	0	1	0	0	1	0
"@Override void Func1() { this.xmppConnectionService.getNotificationService().setIsInForeground(true); updateConversationList(); Bundle var1 = getIntent().getExtras(); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) { if (var1 != null) { FirstStartTime = var1.getLong(""var3""); Log.d(Config.LOGTAG, ""Get first start time from StartUI: "" + FirstStartTime); } } else { FirstStartTime = System.currentTimeMillis(); Log.d(Config.LOGTAG, ""Device is running Android < SDK 23, no restart required: "" + FirstStartTime); } if (mPendingConferenceInvite != null) { mPendingConferenceInvite.execute(this); mToast = Toast.makeText(this, R.string.creating_conference,Toast.LENGTH_LONG); mToast.show(); mPendingConferenceInvite = null; } if (FirstStartTime == 0) { Log.d(Config.LOGTAG, ""First start time: "" + FirstStartTime + "", restarting App""); String var2 = ""var3""; FirstStartTime = System.currentTimeMillis(); SharedPreferences var3 = getApplicationContext().getSharedPreferences(var2, Context.MODE_PRIVATE); SharedPreferences.Editor var4 = var3.edit(); var4.putLong(""var3"", FirstStartTime); var4.commit(); Intent var5 = getBaseContext().getPackageManager().getLaunchIntentForPackage(getBaseContext().getPackageName()); var5.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); var5.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(var5); System.exit(0); } if (xmppConnectionService.getAccounts().size() == 0) { if (mRedirected.compareAndSet(false, true)) { if (Config.X509_VERIFICATION) { startActivity(new Intent(this, ManageAccountActivity.class)); } else if (Config.MAGIC_CREATE_DOMAIN != null) { Log.d(Config.LOGTAG, ""First start time: "" + FirstStartTime); startActivity(new Intent(this, WelcomeActivity.class)); } else { startActivity(new Intent(this, EditAccountActivity.class)); } finish(); } } else if (conversationList.size() <= 0) { if (mRedirected.compareAndSet(false, true)) { Account var6 = xmppConnectionService.getPendingAccount(); if (var6 == null) { Intent var5 = new Intent(this, StartConversationActivity.class); var5.putExtra(""init"", true); startActivity(var5); } else { switchToAccount(var6, true); } finish(); } } else if (getIntent() != null && VIEW_CONVERSATION.equals(getIntent().getType())) { clearPending(); handleViewConversationIntent(getIntent()); } else if (selectConversationByUuid(mOpenConverstaion)) { if (mPanelOpen) { showConversationsOverview(); } else { if (isConversationsOverviewHideable()) { openConversation(); updateActionBarTitle(true); } } this.mConversationFragment.reInit(getSelectedConversation()); mOpenConverstaion = null; } else if (getSelectedConversation() == null) { showConversationsOverview(); clearPending(); setSelectedConversation(conversationList.get(0)); this.mConversationFragment.reInit(getSelectedConversation()); } else { this.mConversationFragment.messageListAdapter.updatePreferences(); this.mConversationFragment.messagesView.invalidateViews(); this.mConversationFragment.setupIme(); } if (xmppConnectionService.getAccounts().size() != 0) { AppUpdate(); } if (this.mPostponedActivityResult != null) { this.onActivityResult(mPostponedActivityResult.first, RESULT_OK, mPostponedActivityResult.second); } if (!forbidProcessingPendings) { for (Iterator<Uri> var7 = mPendingImageUris.iterator(); var7.hasNext(); var7.remove()) { Uri var8 = var7.next(); attachImageToConversation(getSelectedConversation(), var8); } for (Iterator<Uri> var7 = mPendingFileUris.iterator(); var7.hasNext(); var7.remove()) { attachFileToConversation(getSelectedConversation(), var7.next()); } if (mPendingGeoUri != null) { attachLocationToConversation(getSelectedConversation(), mPendingGeoUri); mPendingGeoUri = null; } } forbidProcessingPendings = false; if (!ExceptionHelper.checkForCrash(this, this.xmppConnectionService)) { openBatteryOptimizationDialogIfNeeded(); } setIntent(new Intent()); } "	0	1	1	0	0	0
@Override public IBlockState Func1(int var1) { if (var1 >= 0 || var1 < EnumType.values().length) { return this.getDefaultState().withProperty(VARIANT, EnumType.values()[var1]); } return getDefaultState(); } 	1	0	1	1	0	0
protected void Func1(boolean var1) { if (optOut || offline) { return; } if (!uploadingCurrently.getAndSet(true)) { DatabaseHelper var2 = DatabaseHelper.getDatabaseHelper(context); try { int var3 = var1 ? (backoffUpload ? backoffUploadBatchSize : eventUploadMaxBatchSize) : -1; List<JSONObject> var4 = var2.getEvents(getLastEventId(), var3).second; List<JSONObject> var5 = var2.getIdentifys(getLastIdentifyId(), var3).second; int var6 = Math.min(var3, var4.size() + var5.size()); final Pair<Pair<Long, Long>, JSONArray> var7 = mergeEventsAndIdentifys( var4, var5, var6); final long var8 = var7.first.first; final long var9 = var7.first.first; final String var10 = var7.second.toString(); httpThread.post(new Runnable() { @Override public void Func2() { makeEventUploadPostRequest(new OkHttpClient(), var10, var8, var9); } }); } catch (JSONException e) { uploadingCurrently.set(false); Log.e(TAG, e.toString()); } } } 	1	0	1	1	0	0
public Builder Func1(com.github.horrorho.inflatabledonkey.protocol.CloudKit.Asset var1) { if (var1 == com.github.horrorho.inflatabledonkey.protocol.CloudKit.Asset.getDefaultInstance()) return this; if (var1.hasDsPrsID()) { bitField0_ |= 0x00000001; dsPrsID_ = var1.dsPrsID_; onChanged(); } if (var1.hasFileChecksum()) { setFileChecksum(var1.getFileChecksum()); } if (var1.hasSize()) { setSize(var1.getSize()); } if (var1.hasDownloadToken()) { bitField0_ |= 0x00000008; downloadToken_ = var1.downloadToken_; onChanged(); } if (var1.hasContentBaseURL()) { bitField0_ |= 0x00000010; contentBaseURL_ = var1.contentBaseURL_; onChanged(); } if (var1.hasDsid()) { bitField0_ |= 0x00000020; dsid_ = var1.dsid_; onChanged(); } if (var1.hasRecordId()) { mergeRecordId(var1.getRecordId()); } if (var1.hasData()) { setData(var1.getData()); } if (var1.hasFileSignature()) { setFileSignature(var1.getFileSignature()); } if (var1.hasDownloadTokenExpiration()) { setDownloadTokenExpiration(var1.getDownloadTokenExpiration()); } this.mergeUnknownFields(var1.getUnknownFields()); return this; } 	0	1	0	0	1	0
"@Test public void Func1() throws Exception { Repository var1 = manager.getEntity(""r1"", Repository.class); String var2 = testImportExport(var1, ""comprehensive-ead.var2"", ""Resource (call) |||.Ident (num) |||"", ""eng""); Document var3 = parseDocument(var2); assertXPath(var3, ""Testing import/export [ingest]"", ""//ead/eadheader/revisiondesc/change/item/text()""); assertXPath(var3, ""eng"", ""//ead/eadheader/profiledesc/langusage/language/@langcode""); assertXPath(var3, ""Local"", ""//ead/eadheader/profiledesc/descrules""); assertXPath(var3, ""NIOD Description"", ""//ead/eadheader/filedesc/publicationstmt/publisher/text()""); assertXPath(var3, ""NIOD Description"", ""//ead/archdesc/did/repository/corpname/text()""); assertXPath(var3, ""Scope and contents note content no label |||\n\n"" + ""Scope and contents note content |||"", ""//ead/archdesc/scopecontent/p/text()""); assertXPath(var3, ""Separated materials note content no label |||"", ""//ead/archdesc/separatedmaterial[2]/p/text()""); assertXPath(var3, ""Series I |||"", ""//ead/archdesc/dsc/c01/did/unitid/text()""); assertXPath(var3, ""Folder 3 |||"", ""//ead/archdesc/dsc/c01[3]/c02[2]/did/unitid/text()""); assertXPath(var3, ""Processing information note no label |||"", ""//ead/archdesc/processinfo[@encodinganalog='3.7.1']/p""); assertXPath(var3, ""2000"", ""//ead/archdesc/processinfo[@encodinganalog='3.7.3']/p/date""); assertXPath(var3, ""Source information |||"", ""//ead/archdesc/processinfo/p/bibref""); } "	0	0	0	0	0	1
"@Override protected void Func1(String var1) { System.out.println(""in Func1.""); try { JSONObject var2 = new JSONObject(var1); System.out.println(""success value: ""+var2.getString(""success"").toString()); if (var2.getString(""success"").toString().equals(""1"")) { ID = var2.getString(""e_id"").toString(); System.out.println(""MEssage: "" + var2.getString(""message"")); System.out.println(""e_id of newly created group is: "" + ID); user.fetchEventInvites(); user.fetchEventsPending(); user.fetchEventsUpcoming(); Event var3 = new Event(Integer.parseInt(ID)); var3.fetchEventInfo(); var3.fetchParticipants(); GLOBAL.setCurrentUser(user); GLOBAL.setEventBuffer(var3); AlertDialog var4 = new AlertDialog.Builder( EventCreateActivity.this) .setMessage(""You've successfully created an event!"") .setCancelable(true) .setPositiveButton(""Invite Groups to Your Event"", new DialogInterface.OnClickListener() { @Override public void Func2( DialogInterface var4, int var5) { Intent var6 = new Intent( EventCreateActivity.this, EventAddGroupsActivity.class); var6.putExtra(""CONTENT"", ""EVENT""); var6.putExtra(""EID"", ID); var6.putExtra(""EMAIL"", user.getEmail()); startActivity(var6); finish(); } }) .setNegativeButton(""View Your Event Profile"", new DialogInterface.OnClickListener() { @Override public void Func2( DialogInterface var4, int var7) { Intent var6 = new Intent( EventCreateActivity.this, null); var6.putExtra(""EID"", ID); var6.putExtra(""EMAIL"", user.getEmail()); startActivity(var6); finish(); } }).show(); var4.setOnCancelListener(new DialogInterface.OnCancelListener() { @Override public void Func3(DialogInterface var4) { finish(); } }); } else if (var2.getString(""success"").toString().equals(""0"")) { new AlertDialog.Builder(EventCreateActivity.this) .setMessage( ""Unable to create event! Please choose an option:"") .setCancelable(true) .setPositiveButton(""Try Again"", new DialogInterface.OnClickListener() { @Override public void Func2( DialogInterface var4, int var5) { new CreateEventTask() .execute(""http://68.59.162.183/"" + ""android_connect/create_event.php""); } }).setNegativeButton(""Cancel"", null).show(); } } catch (Exception var3) { Log.d(""onPostreadJSONFeed"", var3.getLocalizedMessage()); } } "	0	0	0	0	0	1
public void Func1 () { mSrcTime.clear ();    mSrcTimeFieldState.setState  (MamdaFieldState.NOT_INITIALISED); mActTime.clear ();    mActTimeFieldState.setState  (MamdaFieldState.NOT_INITIALISED); mSendTime.clear();    mSendTimeFieldState.setState (MamdaFieldState.NOT_INITIALISED); mLineTime.clear();    mLineTimeFieldState.setState (MamdaFieldState.NOT_INITIALISED); mIssueSymbol.setValue (null);  mIssueSymbolFieldState.setState (MamdaFieldState.NOT_INITIALISED); mPartId.setValue      (null);  mPartIdFieldState.setState      (MamdaFieldState.NOT_INITIALISED); mSymbol.setValue      (null);  mSymbolFieldState.setState      (MamdaFieldState.NOT_INITIALISED); mUncrossPrice.clear     (); mUncrossVolume.setValue (0); mUncrossPriceInd.set    (MamdaUncrossPriceInd.UNCROSS_NONE); mUncrossPriceFieldState.setState    (MamdaFieldState.NOT_INITIALISED); mUncrossVolumeFieldState.setState   (MamdaFieldState.NOT_INITIALISED); mUncrossPriceIndFieldState.setState (MamdaFieldState.NOT_INITIALISED); } 	1	1	1	0	1	0
private void Func1() { add(/* gameCanvas = */new GameCanvas(null, null), BorderLayout.CENTER); } 	1	0	0	1	0	0
public Expression Func1(GroovyParser.CallExpressionContext var1) { Expression var2 = parseCallExpressionRule(var1.callExpressionRule(), var1.var2(), var1.genericDeclarationList()); if (var2 instanceof ConstructorCallExpression) { return var2; } MethodCallExpression var3 = (MethodCallExpression) var2; if (asBoolean(var1.var2())) { Token var4 = var1.var4; var3.setSpreadSafe(var4.getType() == GroovyParser.STAR_DOT); var3.setSafe(var4.getType() == GroovyParser.SAFE_DOT); } return setupNodeLocation(var3, var1); } 	0	0	0	0	0	1
@Override public void Func1(ViewHolder var1, int var2) { super.Func1(var1, var2); Movie var3 = getItem(var2); Images.loadMovie(var1.mImageView, var3, Images.WIDTH_185); Images.fetch(var1.mImageView.getContext(), var3.getPosterPath(), Images.WIDTH_780); } 	1	1	0	0	0	0
"private void Func1() { initializeHelper(); boolean var1 = false; try { database = helper.getWritableDatabase(); } catch (RecreateDuringMigrationException recreate) { var1 = true; } catch (MigrationFailedException fail) { onError(fail.getMessage(), fail); onMigrationFailed(fail.oldVersion, fail.newVersion); } catch (RuntimeException e) { onError(""Failed to open database: "" + getName(), e); throw e; } if (var1) { recreate(); } } "	0	1	0	0	1	0
@Override protected void Func1(World var1, BlockPos var2, IBlockState var3) { int var4 = -1; var1.updateBlockTick(var2, this, this.getDelay(var3), var4); } 	1	1	0	0	0	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); mActivity = this; setContentView(R.layout.activity_nav_drawer2); mTextView1 = (TextView)findViewById(R.id.item1); Toolbar var2 = (Toolbar)findViewById(R.id.var2); mDrawerLayout = (DrawerLayout)findViewById(R.id.drawer_layout); setSupportActionBar(var2); getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeButtonEnabled(true); getSupportActionBar().setDisplayShowTitleEnabled(false); var2.setTitle(""Nav Drawer Example""); final ActionBarDrawerToggle var3 = new ActionBarDrawerToggle( this,  mDrawerLayout, var2, R.string.drawer_open_string, R.string.drawer_close_string){ @Override public void Func2(View var4) { super.Func2(var4); mTutorialHandler = TourGuide.init(mActivity).with(TourGuide.Technique.Click) .setPointer(new Pointer()) .setToolTip(new ToolTip().setTitle(null).setDescription(""hello world"")) .setOverlay(new Overlay().setBackgroundColor(Color.parseColor(""#66FF0000""))) .playNow(mTextView1); } }; mDrawerLayout.setDrawerListener(var3); var3.syncState(); mTextView1.setOnClickListener(new View.OnClickListener() { @Override public void Func3(View var5) { mTutorialHandler.cleanUp(); mDrawerLayout.closeDrawers(); } }); final ViewTreeObserver var6 = mTextView1.getViewTreeObserver(); var6.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() { @Override public void Func4() { mTextView1.getViewTreeObserver().removeGlobalOnLayoutListener(this);// make sure this only run once mDrawerLayout.openDrawer(Gravity.LEFT); } }); } "	0	1	1	1	0	0
"private String Func1(Article var1) { String var2 = """"; if (!(var1.getName() == null)| !(var1.getName().equals(""""))) { String[] var3 = var1.getName().split(""[ ]+""); for (String var4 : var3) { var2 += var4 + "", ""; } var2 = var2.substring(0,var2.length()-1); } else { throw new IllegalArgumentException(""Name tag is empty""); } return var2; } "	1	0	1	1	0	0
@Override public void Func1() { if (playOnlyInForeground && playerState == 4) { Start(); } } 	0	0	0	0	0	1
"@Override protected void Func1(int var1, int var2) { super.Func1(var1, var2); try { if (getTabCount() == 0) { return; } Field var3 = TabLayout.class.getDeclaredField(""mTabMinWidth""); var3.setAccessible(true); var3.set(this, (int) (getMeasuredWidth() / (float) getTabCount()) * 1.5f); } catch (Exception e) { e.printStackTrace(); } } "	1	1	0	1	0	0
"public static UpdateInfo Func1(URL var1, String var2, String var3, String var4) { String var5 = updatePrefs.getPreference(latestSeenVersionPrefKey, """"); UpdateInfo var6 = null; try { System.out.println(""Checking for updates...""); var6 = getLatestUpdateInfo(var1, var2, var3, var4); Version var7 = new Version(Common.getAppVersion()); Version var8 = null; try { var8 = new Version(var5); } catch (IllegalArgumentException e) { var8 = var7; } if (var6.toVersion.compareTo(var8) == 1 || var5.equals("""")) { System.out.println(""Update available!""); System.out.println(""Version after update: "" + var6.toVersion.toString()); System.out.println(""Filesize:             "" + var6.fileSizeInMB + ""MB""); var6.showAlert = true; } else if (var6.toVersion.compareTo(var7) == 1) { System.out.println(""Update available (Update was ignored by the user)!""); System.out.println(""Version after update: "" + var6.toVersion.toString()); System.out.println(""Filesize:             "" + var6.fileSizeInMB + ""MB""); } else { System.out.println(""No update found.""); } } catch (JDOMException | IOException e) { e.printStackTrace(); } return var6; } "	1	0	1	1	0	0
private static <T extends Selectable> Matches<T> Func1(Collection<T> var1, boolean var2, String... var3) { List<T> var4 = new ArrayList<T>(); double var5 = 1e-6; for (T var6 : var1) { String[] var7 = split(var6.getName().getSingular()); int var8 = countMatches(var3, var7); if (!var2 || var8 == var3.length) { double var9 = var8 / (double) var7.length; double var10 = var8 / (double) var3.length; double var11 = DungeonMath.mean(var9, var10); int var12 = DungeonMath.fuzzyCompare(var11, var5); if (var12 > 0) { var5 = var11; var4.clear(); var4.add(var6); } else if (var12 == 0) { var4.add(var6); } } } return Matches.fromCollection(var4); } 	1	0	1	1	0	0
@Override protected void Func1(AionConnection var1) { writeH(skillId); if (skillId >= 30001 && skillId <= 30003 || skillId >= 40001 && skillId <= 40010) { writeC(0); writeC(0); } else if (isStigma) { writeC(1); writeC(1); } else if (isLinked) { writeC(1); writeC(3); } else { // remove skills active or passive writeC(skillLevel); } } 	1	1	1	0	1	0
@Override public void Func1(View var1) { switch (var1.getId()){ case R.id.connect_button: try { bitalino.connect(bluetoothDevice.getAddress()); } catch (BITalinoException e) { e.printStackTrace(); } break; case R.id.disconnect_button: try { bitalino.disconnect(); } catch (BITalinoException e) { e.printStackTrace(); } break; case R.id.start_button: try { bitalino.start(new int[]{0,1,2,3,4,5}, 1); } catch (BITalinoException e) { e.printStackTrace(); } break; case R.id.stop_button: try { bitalino.stop(); } catch (BITalinoException e) { e.printStackTrace(); } break; case R.id.state_button: try { bitalino.state(); } catch (BITalinoException e) { e.printStackTrace(); } break; case R.id.trigger_button: int[] var2; if(isBITalino2){ var2 = new int[2]; } else{ var2 = new int[4]; } var2[0] = (digital1RadioButton.isChecked()) ? 1 : 0; var2[1] = (digital2RadioButton.isChecked()) ? 1 : 0; if(!isBITalino2){ var2[2] = (digital3RadioButton.isChecked()) ? 1 : 0; var2[3] = (digital4RadioButton.isChecked()) ? 1 : 0; } try { bitalino.trigger(var2); } catch (BITalinoException e) { e.printStackTrace(); } break; case R.id.digital_1_radio_button: if(isDigital1RadioButtonChecked){ digital1RadioButton.setChecked(false); } else{ digital1RadioButton.setChecked(true); } isDigital1RadioButtonChecked = digital1RadioButton.isChecked(); break; case R.id.digital_2_radio_button: if(isDigital2RadioButtonChecked){ digital2RadioButton.setChecked(false); } else{ digital2RadioButton.setChecked(true); } isDigital2RadioButtonChecked = digital2RadioButton.isChecked(); break; case R.id.digital_3_radio_button: if(digital3RadioButton.isChecked()){ digital3RadioButton.setChecked(false); } else{ digital3RadioButton.setChecked(true); } break; case R.id.digital_4_radio_button: if(digital4RadioButton.isChecked()){ digital4RadioButton.setChecked(false); } else{ digital4RadioButton.setChecked(true); } break; case R.id.battery_threshold_button: try { bitalino.battery(batteryThresholdSeekBar.getProgress()); } catch (BITalinoException e) { e.printStackTrace(); } break; case R.id.pwm_button: try { bitalino.pwm(pwmSeekBar.getProgress()); } catch (BITalinoException e) { e.printStackTrace(); } break; } } 	0	0	1	1	0	0
"private String Func1(String var1) { return var1.replace(SCHEMA_NAMESPACE_NAME_SEPARATOR, ""_""); } "	0	0	0	1	0	0
"@Override public Response Func1( UriInfo var1, Guest var2) throws ResourceNotFoundException { int var3 = this.guestService.insertGuest(var2); Guest var4 = this.guestService.getGuest(var3); Date var5 = new Date(); String var6 = EntityTagGenerator.generate(var4.toString().getBytes(), true); String var7 = var1.getRequestUri().toString() + var3 + ""/""; this.resourceMetadataService.insertResourceMetadata( new ResourceMetadata(var7, var5, var6) ); return Response .created(URI.create(var7)) .entity(var4) .header(""Last-Modified"", var5) .header(""ETag"", var6) .build(); } "	0	0	0	0	0	1
"private void Func1(String var1) { System.out.println(""EntryController : "" + var1); } "	0	0	0	1	0	0
@FXML private void Func1(ActionEvent var1) throws IOException { if(dc.getHuidigeLeerling().getEvaluaties().size() == 1){ dc.getHuidigeLeerling().getEvaluaties().add(new Evaluatie(dc.getHuidigeLeerling().getVT(), dc.getHuidigeLeerling().getRT(), dc.getHuidigeLeerling().getHoofdscherm())); } else evaluatie2.setSelected(false); if(dc.getHuidigeLeerling().getEvaluaties().size() == 2){ evaluatie2.setSelected(true); } } 	1	1	1	1	0	0
"public static <E> String Func1(Criteria<E> var1, StringJoiner var2, StringJoiner var3, Map<String, Object> var4){ if(var1.getRestrictions().size() > 0) { RestrictionUtil.generateRestrictions(var1, var1.getRestrictions(), var2, var3, var4, 0); } if(var2.length() > 0) { if(var3.length() > 0) { var2.add( "" ( ""+ var3.toString() + "" ) ""); } return ""\nWHERE "" + var2.toString(); } else if(var3.length() > 0) { return ""\nWHERE "" + var3.toString(); } return """"; } "	0	1	0	0	1	0
public void Func1(int var1, View var2) { Context var3 = var2.getContext(); Intent var4 = new Intent(var3, ExamActivity.class); var4.putExtra(var3.getString(R.string.deck_data_key), dataHelper.getSingleDeck(var1)); var3.startActivity(var4); } 	0	1	1	1	0	0
"public GitClient Func1() { invokeGenerically(GIT_INIT_PROCESS_NAME, true, ""Func1""); return this; } "	0	0	0	0	0	1
@Override public void Func1() { for (Map.Entry<Player, IRyeDragon> var1 : dragonManager.getRiderDragons().entrySet()) { try { Entity var2 = var1.getValue().getEntity(); if(var2.getPassenger == null || var2.getPassenger() != var1.getKey()){ var2.setPassenger(var1.getKey()); } } catch (Exception ignored) { } } } 	1	1	0	1	0	0
@Override ArrayList<EntityComponent> Func1() { final ArrayList<EntityComponent> var1 = new ArrayList<EntityComponent>(); final EntityGraphics var2 = new PlayerGraphics(); final EntityPhysics var3 = new EntityPhysics(var2.getWidth() - 0.3f, var2.getHeight() - 0.3f, BodyDef.BodyType.DynamicBody, 50, 0); var1.add(var2); var1.add(var3); var1.add(new EntityAI(new BehaviourTree(new TestNode()))); return var1; } 	0	1	1	1	0	0
"public List<WfTask> Func1(User var1, BatchPresentation var2) { if (var2.getClassPresentation() instanceof TaskObservableClassPresentation) { return taskListBuilder.Func1(var1.getActor(), var2); } if (!executorLogic.isAdministrator(var1)) { throw new AuthorizationException(var1 + "" is not Administrator""); } Preconditions.checkNotNull(var2, ""var2""); Actor var3 = var1.getActor(); List<WfTask> var4 = Lists.newArrayList(); List<Task> var5 = new PresentationCompiler<Task>(var2).getBatch(CompilerParameters.createNonPaged()); for (Task var6 : var5) { try { var4.add(taskObjectFactory.create(var6, var3, false, var2.getDynamicFieldsToDisplay(true))); } catch (Exception e) { log.error(""Unable to build "" + var6, e); } } return var4; } "	0	1	0	0	1	0
@Test public void Func1() { org.apache.avro.Schema var1 = org.apache.avro.SchemaBuilder.builder().floatType(); assertNonRecordConversion(var1, 12.2f, Schema.FLOAT32_SCHEMA, 12.2f); } 	0	1	0	0	1	0
"@Test public void Func1() { org.apache.avro.Schema var1 = org.apache.avro.SchemaBuilder.builder().intType(); var1.addProp(""copycat_type"", ""int16""); assertNonRecordConversion(var1, 12, Schema.INT16_SCHEMA, (short) 12); } "	0	1	0	0	1	0
"public static boolean Func1(int var1, int var2){ User var3 = userDB.getUserById(var1); Shift var4 = shiftDB.getShift(var2); Timestamp var5 = Timestamp.from(Instant.now()); String var6 = var3.getFirstName()+"" ""+var3.getLastName()+"" er blit satt som ny ansvarsvakt på skiftet den ""+ FormattingUtil.formatDate(var4.getDate())+"".""; int var7 = userDB.getAdminId(); if(var7 == 0) return false; NewsFeedItem var8 = new NewsFeedItem(-1,var5,var6, var7,var1,var2, NewsFeedItem.NewsFeedCategory.NOTIFICATION); return newsDB.createNotification(var8) != 0; } "	0	0	0	0	0	1
"@VisibleForTesting boolean Func1(String var1, boolean var2) { if (validateAmountOfDockerSeleniumContainers() || var2) { String var3 = ""localhost""; final int var4 = findFreePortInRange(LOWER_PORT_BOUNDARY, UPPER_PORT_BOUNDARY); final int var5 = var4 + 10000; List<String> var6 = new ArrayList<>(); var6.add(""SELENIUM_HUB_HOST="" + var3); var6.add(""SELENIUM_HUB_PORT=4445""); var6.add(""SELENIUM_NODE_HOST="" + var3); var6.add(""GRID=false""); var6.add(""RC_CHROME=false""); var6.add(""RC_FIREFOX=false""); var6.add(""USE_SELENIUM=3""); var6.add(""WAIT_TIMEOUT=120s""); var6.add(""PICK_ALL_RANDMON_PORTS=true""); var6.add(""PICK_ALL_RANDOM_PORTS=true""); var6.add(""VIDEO_STOP_SLEEP_SECS=1""); var6.add(""WAIT_TIME_OUT_VIDEO_STOP=20s""); boolean var7 = env.getBooleanEnvVariable(""ZALENIUM_SEND_ANONYMOUS_USAGE_INFO"", false); var6.add(""SEND_ANONYMOUS_USAGE_INFO="" + var7); var6.add(""BUILD_URL="" + env.getStringEnvVariable(""BUILD_URL"", """")); var6.add(""NOVNC=true""); var6.add(""NOVNC_PORT="" + var5); var6.add(""SCREEN_WIDTH="" + getScreenWidth()); var6.add(""SCREEN_HEIGHT="" + getScreenHeight()); var6.add(""TZ="" + getTimeZone()); var6.add(""SELENIUM_NODE_REGISTER_CYCLE=0""); var6.add(""SELENIUM_NODE_PROXY_PARAMS=de.zalando.tip.zalenium.proxy.DockerSeleniumRemoteProxy""); if (BrowserType.CHROME.equalsIgnoreCase(var1)) { var6.add(""SELENIUM_NODE_CH_PORT="" + var4); var6.add(""CHROME=true""); } else { var6.add(""CHROME=false""); } if (BrowserType.FIREFOX.equalsIgnoreCase(var1)) { var6.add(""SELENIUM_NODE_FF_PORT="" + var4); var6.add(""FIREFOX=true""); } else { var6.add(""FIREFOX=false""); } String var8 = String.format(""container:%s"", getContainerName()); HostConfig var9 = HostConfig.builder() .shmSize(1073741824L) // 1GB .var8(var8) .appendBinds(""/tmp/mounted:/tmp/mounted"") .autoRemove(true) .build(); try { final ContainerConfig var10 = ContainerConfig.builder() .image(getLatestDownloadedImage(DOCKER_SELENIUM_IMAGE)) .env(var6) .var9(var9) .build(); String var11 = String.format(""%s_%s"", getContainerName(), var4); final ContainerCreation var12 = dockerClient.createContainer(var10, var11); dockerClient.startContainer(var12.id()); return true; } catch (Exception e) { LOGGER.log(Level.SEVERE, LOGGING_PREFIX + e.toString(), e); ga.trackException(e); } } return false; } "	0	0	0	0	0	1
@Override public boolean Func1(final IContext var1) { final ICustomContext var2 = (ICustomContext)var1; final PictogramElement[] var3 = var2.getPictogramElements(); if(var2.getPictogramElements().length < 1 || !(var2.getPictogramElements()[0] instanceof Connection)) { return false; } final Connection var4 = (Connection)var3[0]; final Object var5 = bor.getBusinessObjectForPictogramElement(var4); final ComponentImplementation var6 = getComponentImplementation(var4); return var5 instanceof org.osate.aadl2.Connection && var6 != null && ((org.osate.aadl2.Connection)var5).getContainingClassifier() != var6; } 	0	0	0	1	0	0
"@Override public void Func1() { LOGGER.debug(""Starting tests""); session.execute(""CREATE KEYSPACE IF NOT EXISTS gravitee WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': '1' };""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.tenants (id text PRIMARY KEY, name text, description text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.views (id text PRIMARY KEY, name text, description text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.tags (id text PRIMARY KEY, name text, description text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.apikeys (key text PRIMARY KEY, subscription text, application text, plan text, expire_at timestamp, created_at timestamp, updated_at timestamp, revoked_at timestamp, revoked boolean);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.apis (id text PRIMARY KEY, name text, description text, version text, definition text, deployed_at timestamp, created_at timestamp, updated_at timestamp, visibility text, lifecycle_state text, picture text, group text, views set<text>);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.applications (id text PRIMARY KEY, name text, description text, type text, created_at timestamp, updated_at timestamp, group text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.events (id text PRIMARY KEY, type text, payload text, parent_id text, properties map<text, text>, created_at timestamp, updated_at timestamp);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.groups (id text PRIMARY KEY, type text, name text, administrators list<text>, created_at timestamp, updated_at timestamp);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.memberships (user_id text, reference_id text, reference_type text, type text, created_at timestamp, updated_at timestamp, PRIMARY KEY (user_id, reference_id, reference_type));""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.pages (id text PRIMARY KEY, name text, type text, content text, last_contributor text, page_order int, published boolean, source_type text, source_configuration text, configuration_tryiturl text, configuration_tryit boolean, api text, created_at timestamp, updated_at timestamp);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.plans (id text PRIMARY KEY, name text, description text, validation text, type text, status text, plan_order int, apis set<text>, created_at timestamp, updated_at timestamp, definition text, characteristics list<text>, security text, published_at timestamp, closed_at timestamp);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.users (username text PRIMARY KEY, source text, source_id text, password text, email text, firstname text, lastname text, roles set<text>, created_at timestamp, updated_at timestamp, last_connection_at timestamp, picture text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.subscriptions (id text PRIMARY KEY, plan text, application text, reason text, status text, created_at timestamp, updated_at timestamp, processed_at timestamp, starting_at timestamp, ending_at timestamp, processed_by text, subscribed_by text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.ratelimits (key text PRIMARY KEY, last_request bigint, counter bigint, reset_time bigint, created_at bigint, updated_at bigint, async boolean);""); } "	0	0	0	0	0	1
private CollectionItem Func1(String var1, User var2) { CollectionItem var3 = JsonDeserializer.deserialize(var1, CollectionItem.class); return var3; } 	0	0	0	0	0	1
@Override public Edge Func1(Object var1) { graphStore.autoReadLock(); try { EdgeImpl var2 = graphStore.Func1(var1); if (view.containsEdge(var2)) { return var2; } return null; } finally { graphStore.autoReadUnlock(); } } 	1	1	1	1	0	0
"public void Func1(Statement var1) { String var2 = var1.getText(); if (var1.isDirectCode()) { for (String var3 : keyWords) { if (!getFirstToken(var2).equals(""."") && var2.contains(var3)) { count++; break; } } } } "	1	1	0	1	0	0
"private void Func1() { subscriptions.add(matchResult.eventsObservable(elapsedMinutes) .map(matchEvent -> (Goal) matchEvent) .observeOn(AndroidSchedulers.mainThread()) .subscribe(goal -> { boolean var1 = goal.club().nameEquals(match.home()); TextView var2 = var1 ? txtTeamHomeGoals : txtTeamAwayGoals; int var3 = Integer.parseInt(var2.getText().toString()); var2.setText(String.valueOf(++var3)); int var4 = var1 ? GravityCompat.START : GravityCompat.END; appendEvent(R.drawable.ball, goal.time() + ""' "" + goal.player().name(), var4); })); subscriptions.add(timerObservable() .observeOn(AndroidSchedulers.mainThread()) .subscribe(l -> { elapsedMinutes++; fractionView.setFraction(elapsedMinutes % 45, 60); if (elapsedMinutes == 45) { appendEvent(R.drawable.ic_schedule_black_48px, strEndOfFirstHalf, Gravity.CENTER); } else if (elapsedMinutes == 90) { stopTimer(); appendEvent(R.drawable.ic_schedule_black_48px, strEndOfMatch, Gravity.CENTER); appendEvent(finalScoreIcon, finalScoreMessage, Gravity.CENTER); Club var5 = matchResult.var5(); boolean var6 = matchResult.var6(); boolean var7 = !var6 && userClub.nameEquals(var5); if (var6 || var7) { appendEvent(R.drawable.ic_attach_money_black_24dp, ""+"" + (var7 ? UserPreferences.COINS_PRIZE_WIN : UserPreferences.COINS_PRIZE_DRAW), Gravity.CENTER_HORIZONTAL); } playPauseButton.setVisibility(View.GONE); doneButton.setVisibility(View.VISIBLE); fractionView.setFraction(45, 60); } })); isRunning = true; } "	0	0	0	0	0	1
private void Func1(@DrawableRes int var1, String var2, int var3) { FrameLayout var4 = (FrameLayout) LayoutInflater.from(this) .inflate(R.layout.match_event, eventsLayout, false); TextView var5 = (TextView) var4.findViewById(R.id.txt_match_events); var5.setText(var2); Drawable var6 = ContextCompat.getDrawable(this, var1); var6.setBounds(0, 0, iconSize, iconSize); var5.setCompoundDrawablePadding(iconPadding); if (var3 == GravityCompat.START) { var5.setCompoundDrawables(null, null, var6, null); } else { var5.setCompoundDrawables(var6, null, null, null); } LinearLayout.LayoutParams var7 = (LinearLayout.LayoutParams) var4.getLayoutParams(); var7.var3 = var3; var4.setLayoutParams(var7); var5.setGravity(var3); eventsLayout.addView(var4, 0); eventsTimeline.setVisibility(View.VISIBLE); eventsScrollView.smoothScrollTo(0, 0); } 	1	0	0	1	0	0
"private static void Func1(final String var1) { final Path var2 = getPreferenceFile(var1); if (Files.isReadable(Paths.get(var1))) { Logger.getLogger(PortablePreferences.class.getName()).info(""Importing preferences""); try (final InputStream is = Files.newInputStream(var2)) { Preferences.Func1(is); } catch (final InvalidPreferencesFormatException | IOException e) { System.err.println(""Preferences var1 "" + var2.toString() + "" could not be read""); Logger.getLogger(PortablePreferences.class.getName()).log(Level.SEVERE, e.toString(), e); } } else { System.err.println(""Preferences var1 "" + var2.toString() + "" was not found""); } } "	1	0	1	0	0	0
"public LogEntry Func1(String var1){ String var2[] = {var1}; Cursor var3 = mDatabase.query(LogEntryTable.TABLE_LOG_ENTRY, LogEntryTable.ALL_COLUMNS, LogEntryTable.COLUMN_ID + ""=?"", var2, null, null, null); if (var3.getCount() == 0) { var3.close(); return null; } else if (var3.getCount() > 1) { System.out.println(""Duplicated var1 found! ""+var1); return null; } var3.moveToFirst(); LogEntry var4 = new LogEntry( var3.getString(var3.getColumnIndex(LogEntryTable.COLUMN_ID)), var3.getInt(var3.getColumnIndex(LogEntryTable.COLUMN_ACTIVITY))); var4.setID(var3.getString( var3.getColumnIndex(LogEntryTable.COLUMN_ID))); var4.setDate(var3.getInt( var3.getColumnIndex(LogEntryTable.COLUMN_DATE))); var4.setSubType(var3.getInt( var3.getColumnIndex(LogEntryTable.COLUMN_SUB_TYPE))); var4.setDuration(var3.getInt( var3.getColumnIndex(LogEntryTable.COLUMN_DURATION))); var4.setDistance(var3.getInt( var3.getColumnIndex(LogEntryTable.COLUMN_DISTANCE))); var4.setCount(var3.getInt( var3.getColumnIndex(LogEntryTable.COLUMN_COUNT))); var4.setIntensity(var3.getInt( var3.getColumnIndex(LogEntryTable.COLUMN_INTENSITY))); var4.setWeight(var3.getInt( var3.getColumnIndex(LogEntryTable.COLUMN_WEIGHT))); return var4; } "	0	0	0	0	0	1
"private void Func1(final int var1) { StringBuilder var2 = new StringBuilder(offset(var1)); for (int var3 = 1; var3 <= var1; var3++) { if(var3 < 10){ var2.append("" "").append(var3).append("" ""); } else { var2.append(var3).append("" ""); } } logger.info(var2.toString()); } "	0	0	0	1	0	0
"void Func1(Throwable var1) { logger.info(""My message is {}"", var1.getMessage(), var1); logger.info(""My {} is {}"", ""message"", var1.getMessage(), var1); logger.info(""My {} {} {}"", new Object[]{ ""message"", ""is"", var1.getMessage(), var1 }); } "	0	0	0	1	0	0
@Override public IAdhocTicket Func1(String var1) { for (int var2 = 0; var2 < currentAdhocTickets.size(); var2++) { if (currentAdhocTickets.get(var2).getBarcode() ==  var1) { return currentAdhocTickets.get(var2); } } return null; } 	0	1	0	0	1	0
public boolean Func1(long var1) { for(Library var2:libraries) if(var2.getId()==var1) return libraries.remove(var2); return false; } 	1	1	0	0	0	0
"@Test public void Func1() throws Exception { ValueFactory var1 = con.getValueFactory(); int var2 = 0; int var3 = 100; int var4 = 1000; int var5 = 1000; int var6 = 0; con.begin(); while (var6 < var5) { con.add(var1.createIRI(""urn:test:"" + var2), var1.createIRI(""urn:test:"" + var3), var1.createIRI(""urn:test:"" + var4)); if(Math.round(Math.random()) > 0) { var2++; } if(Math.round(Math.random()) > 0) { var3++; } if(Math.round(Math.random()) > 0) { var4++; } var6++; } con.commit(); for(int var7 = 0; var7 < 1000; var7++) { try (ByteArrayOutputStream stream = new ByteArrayOutputStream(); RepositoryConnection nextCon = rep.getConnection();) { TupleQueryResultWriter var8 = QueryResultIO.createTupleWriter( TupleQueryResultFormat.SPARQL, stream); TupleQuery var9 = con.prepareTupleQuery(QueryLanguage.SPARQL, ""SELECT ?s ?p ?o WHERE { ?s ?p ?o . }""); var9.setIncludeInferred(false); var9.evaluate(var8); } } } "	0	0	0	0	0	1
"@Override public void Func1(int var1, int var2, String var3, Exception var4) { String var5 = var2 + "" : "" + var3; if(var1 == UMLog.DEBUG) { Log.d(LOGTAG,var5 , var4); }else if(var1 == UMLog.INFO) { Log.i(LOGTAG, var5, var4); }else if(var1 == UMLog.CRITICAL) { Log.e(LOGTAG, var5, var4); }else if(var1 == UMLog.VERBOSE) { Log.v(LOGTAG, var5, var4); }else if(var1 == UMLog.ERROR) { Log.e(LOGTAG, var5, var4); } } "	0	1	0	0	1	0
@Override public void Func1() { subscribeLiveUpdates(false); if (asset.getWellKnownType() == AssetType.AGENT) { subscribeAgentStatus(false); } super.Func1(); } 	0	0	0	0	0	1
"@Override public String Func1() { String var1 = """"; for(int var2 = 0; var2 < regValues.length; ++var2) { var1 += var2 + ""\t""; var1 += regValues[var2] + ""\t""; var1 += sourceStations[var2].getName() + ""\n""; } return var1; } "	1	1	0	0	0	0
"private void Func1() { PoolingHttpClientConnectionManager var1 = new PoolingHttpClientConnectionManager(); var1.setValidateAfterInactivity(1000); ConnectionConfig var2 = ConnectionConfig.custom() .setMalformedInputAction(CodingErrorAction.IGNORE) .setUnmappableInputAction(CodingErrorAction.IGNORE) .setCharset(Consts.UTF_8) .build(); var1.setDefaultConnectionConfig(var2); var1.setMaxTotal(100); var1.setDefaultMaxPerRoute(10); RequestConfig var3 = RequestConfig.custom() .setCookieSpec(CookieSpecs.DEFAULT) .setExpectContinueEnabled(true) .build(); List<Header> var4 = new ArrayList<>(); var4.add(new BasicHeader(""User-Agent"", userAgent)); var4.add(new BasicHeader(""Accept"", accept)); var4.add(new BasicHeader(""Accept-Language"", acceptLanguage)); var4.add(new BasicHeader(""Accept-Charset"", defaultCharset.name())); httpclient = HttpClients.custom() .setDefaultHeaders(var4) .setConnectionManager(var1) .setDefaultRequestConfig(var3) .setDefaultCookieStore(cookieStore) .build(); } "	0	0	0	0	0	1
public static final LdapSettings Func1() { return defSettings; } 	0	0	0	0	0	1
"private void Func1() { Preconditions.checkState(!initialised, ""unable to modify already initialised instance""); } "	0	0	0	1	0	0
"protected void Func1(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException { if(var1.getParameter(""workerId"").equals(""consentForm"")){ var1.setAttribute(""workerId"", var1.getParameter(""workerId"")); var1.getRequestDispatcher(ThanksPage).include(var1, var2); storage = StorageStrategy.initializeSingleton(); storage.insertQuitReason(null, ""consentForm""); }else if(var1.getParameter(""reason"")!=null){ var1.setAttribute(""workerId"", var1.getParameter(""workerId"")); this.workerId = var1.getParameter(""workerId""); this.answer = mapAnswerValue(var1.getParameter(""reason"")); var1.setAttribute(""workerId"",this.workerId); storage = StorageStrategy.initializeSingleton(); Worker var3 = storage.readExistingWorker(this.workerId); storage.insertQuitReason(var3, this.answer); var1.getRequestDispatcher(ThanksPage).include(var1, var2); } } "	0	1	0	0	1	0
"@Test void Func1() throws Exception { File var1 = new File(""./spec/samples/output_sample.json""); File var2 = fExport.Func1(modules, ""./export.json""); byte[] var3 = Files.readAllBytes(var1.toPath()); byte[] var4 = Files.readAllBytes(var2.toPath()); var2.delete(); assertEquals(new String(var3).replaceAll(""\\r\\n?"", ""\n""), new String(var4).replaceAll(""\\r\\n?"", ""\n"")); } "	0	0	0	0	0	1
@Override public GreenMailUser Func1(String var1, String var2, String var3) { GreenMailUser var4 = managers.getUserManager().getUser(var1); if (null == var4) { try { var4 = managers.getUserManager().createUser(var1, var2, var3); } catch (UserException e) { throw new RuntimeException(e); } } else { var4.setPassword(var3); } return var4; } 	1	0	1	0	0	0
"private void Func1() { Point var1 = new Point(); List<Integer> var2 = findHiddenObjects(objects(), null, var1); if (var2.isEmpty()) return; EditorState var3 = new EditorState(this); objects().setSelected(var2); objects().replaceSelectedObjectsWithCopies(); for (int var4 : var2) { EdObject var5 = objects().get(var4); var5.moveBy(null, var1); } Command var6 = new CommandForGeneralChanges(this, var3, new EditorState(this), ""unhide"", ""Unhide""); pushCommand(var6); } "	0	1	0	0	1	0
"public static String Func1(Class<?> var1) { Table var2 = var1.getAnnotation(Table.class); if (var2 == null) { throw new ORMException(""No mapping to "" + var1 + "", did you forget add @Table to your class?""); } StringBuilder var3 = new StringBuilder(); var3.append(""CREATE TABLE ""); var3.append(var2.name()); var3.append("" IF NOT EXISTS (""); var3.append(LF); List<ColumnWrap> var4 = Mapping.getInstance().getColumns(var1); for (ColumnWrap var5 : var4) { var3.append(new ColumnMeta(var5.getColumn()).toSQL()).toString(); var3.append("", ""); var3.append(LF); } int var6 = var3.length() - 2; var6 = var6 - LF.length(); var3.delete(var6, var3.length()); var3.append("")""); var3.append(LF); return (var3.toString()); } "	1	1	1	0	1	0
private int Func1(int var1) { if (var1 >= filteredTokens.size()) return originalTokens.size(); final int var2 = filteredTokens.get(var1); final Integer var3 = validNumbersLookUp.floorKey(var2); if (var3 == null || var3 >= originalTokens.size()) { return filteredTokens.get(var1); } final int var4 = validNumbersLookUp.get(var3) + (var2 - var3); return var4 > originalTokens.size() ? originalTokens.size() : var4; } 	1	0	0	1	0	0
public void Func1(String var1) { if (chats == null) { chats = new ArrayList<>(); } chats.add(var1); FirebaseProviderUtils.insertOrUpdateModel(this, null); } 	1	0	1	0	0	0
private View Func1() { LinearLayout var1 = new LinearLayout(this); var1.setOrientation(LinearLayout.VERTICAL); TextView var2 = new TextView(this); var2.setText(getString(R.string.export_csv)); var1.addView(var2); tableSpin = new Spinner(this); tableSpin.setId(R.id.TABLESPIN_ID); var1.addView(tableSpin); View var3 = new View(this); var3.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.black)); var1.addView(var3, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 2)); TextView var4 = new TextView(this); var4.setText(getString(R.string.export_file_qualifier)); var1.addView(var4); filenameValField = new EditText(this); filenameValField.setId(R.id.FILENAMEVAL_ID); var1.addView(filenameValField); View var5 = new View(this); var5.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.black)); var1.addView(var5, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 2)); Button var6 = new Button(this); var6.setId(R.id.EXPORTBUTTON_ID); var6.setText(getString(R.string.export_button)); var6.setOnClickListener(new ButtonListener()); var1.addView(var6); ScrollView var7 = new ScrollView(this); var7.addView(var1); return var7; } 	0	1	0	0	1	0
@Override public PlayerMovementStateBase Func1(InputProcessor var1, PlayerBase var2, CollisionList var3) { if (enterWhileRunning) { if (var2.stateTime >= dashDuration || var1.isCommandJustPressed(Command.JUMP) || !var1.isCommandPressed(directionKeyBeingPressed) || hasChangedDirection(var2) || var2.vel.y < 0 || var3.isCollidingSide()) { return nextStateIfExit(var1, var2, var3); } } else if (enterWhileIdle) { if (var2.stateTime >= dashDuration || var1.isCommandJustPressed(Command.JUMP) || hasChangedDirection(var2) || var2.vel.y < 0 || !var1.isCommandPressed(Command.DASH) || var3.isCollidingSide()) { return nextStateIfExit(var1, var2, var3); } } else if (enterWhileAirborne) { if (var2.stateTime >= dashDuration || hasChangedDirection(var2) || !var1.isCommandPressed(Command.DASH) || var3.isCollidingSide()) { return nextStateIfExit(var1, var2, var3); } } return this; } 	0	0	0	0	0	1
public void Func1(JsonArray var1) { Value var2 = ValueUtils.toValue(var1.get(0), (String) var1.get(1)); if (var2.getType().getRawName().equals(node.getValueType().getRawName())) { node.setValueType(var2.getType()); } node.setValue(var2); } 	1	0	1	1	0	0
"private void Func1(@NonNull Bundle var1) { Bundle var2 = var1.getBundle(ADAPTER_STATE_KEY); if (var2 == null) { throw new RuntimeException(""Unexpected var1 format""); } listAdapter.Func1(var2); List<CalendarDescriptor> var3 = (List<CalendarDescriptor>) var1.getSerializable(CALENDARS_LIST_KEY); if (var3 == null) { var3 = Collections.emptyList(); } availableCalendars = toSerializableList(var3); ArrayAdapter<CalendarDescriptor> var4 = new ArrayAdapter<>(getActivity(), android.R.layout.simple_spinner_item, availableCalendars); var4.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); calendarChooser.setAdapter(var4); if (listAdapter.getCalendar() != null) { setCurrentCalendar(listAdapter.getCalendar()); } } "	0	0	0	0	0	1
@Override public void Func1(String var1, String var2, String var3) { String var4 = UserDomainIdGenerator.generateDeviceId(var3, var2, var1); long var5 = deviceRepository.deleteById(var4); if ( var5 > 0 ) { eventsService.sendDeviceDeleteEvent(var4, var2, var3); } } 	1	1	1	1	0	0
@Override public void Func1(int var1) { Fragment var2 = null; Preferences var3 = new Preferences(this); boolean var4 = var3.getSickbeardUrl() != null && var3.getSickbeardUrl().length() > 0; boolean var5 = var3.getApiKey() != null && var3.getApiKey().length() > 0; if ((!var4 || !var5) && var1 != 99) { var2 = new SetupFragment(); } else if (var1 == 0) { if (mShowsFragment == null) { mShowsFragment = new ShowsFragment(); } var2 = mShowsFragment; } else if (var1 == 1) { if (mComingEpisodesFragment == null) { mComingEpisodesFragment = new ComingEpisodesFragment(); } var2 = mComingEpisodesFragment; } else if (var1 == 2) { var2 = new HistoryFragment(); } else if (var1 == 3) { var2 = new LogFragment(); } else if (var1 == 4) { var2 = new ProfilesFragment(); } else if (var1 == 99) { var2 = new PreferencesFragment(); } if (var2 != null) { FragmentManager var6 = this.getFragmentManager(); var6.beginTransaction().replace(R.id.container, var2).commit(); setCurrentFragment(var2); } } 	1	0	0	1	0	0
"public static boolean Func1(String var1, String var2, Context var3) { try { File var4 = new File(Environment.getExternalStorageDirectory() + File.separator + ""Votenote"" + File.separator); var4.mkdirs(); if (var4.exists()) { File var5 = new File(var4, var1 + "".csv""); FileWriter var6 = new FileWriter(var5); Log.i(""exporter"", var6.getEncoding()); var6.append(var2.toString()); var6.flush(); var6.close(); Toast.makeText(var3, ""Datei unter "" + var5.getAbsolutePath() + "" gespeichert."", Toast.LENGTH_LONG).show(); } else { Toast.makeText(var3, ""Ordner konnte nicht erstellt werden!"", Toast.LENGTH_SHORT).show(); } } catch (IOException e) { e.printStackTrace(); String var7 = e.getMessage(); Toast.makeText(var3, ""Export konnte nicht geschrieben werden!"", Toast.LENGTH_SHORT).show(); Log.w(""exporter"", ""ioexception: "" + var7); return false; } return true; } "	1	1	1	1	1	0
"static Tristate Func1(int var1, int var2, int var3, CType var4) { int var5 = 0; if (var3 >= var1) var5++; if (var3 > var1) var5++; if (var3 >= var2) var5++; if (var3 > var2) var5++; switch (var4) { case EQ: return (var5 == 0 || var5 == 4) ? Tristate.FALSE : Tristate.UNDEF; case LE: return var5 >= 3 ? Tristate.TRUE : (var5 < 1 ? Tristate.FALSE : Tristate.UNDEF); case LT: return var5 > 3 ? Tristate.TRUE : (var5 <= 1 ? Tristate.FALSE : Tristate.UNDEF); case GE: return var5 <= 1 ? Tristate.TRUE : (var5 > 3 ? Tristate.FALSE : Tristate.UNDEF); case GT: return var5 < 1 ? Tristate.TRUE : (var5 >= 3 ? Tristate.FALSE : Tristate.UNDEF); default: throw new IllegalStateException(""Unknown pseudo-Boolean var4""); } } "	0	0	0	0	0	1
private final void Func1() { final double var1 = control.getPrefWidth() < control.getPrefHeight() ? control.getPrefWidth() : control.getPrefHeight(); final double var2 = var1; final double var3 = var1; bargraph.getChildren().clear(); final Shape var4 = new Rectangle(0, 0, var2, var3); var4.setOpacity(0.0); bargraph.getChildren().add(var4); if (control.getOrientation() == Orientation.VERTICAL) { VBox var5 = new VBox(); var5.setSpacing(0); var5.setPadding(new Insets(0, 0, 0, 0)); for (int var6 = 0 ; var6 < control.getNoOfLeds() ; var6++) { var5.getChildren().add(var6, ledList.get(15 - var6)); } bargraph.getChildren().add(var5); } else { HBox var5 = new HBox(); var5.setSpacing(0); var5.setPadding(new Insets(0, 0, 0, 0)); for (int var6 = 0 ; var6 < control.getNoOfLeds() ; var6++) { var5.getChildren().add(var6, ledList.get(var6)); } bargraph.getChildren().add(var5); } } 	0	1	0	0	1	0
public void Func1() { Entity var1; EntityAINearestAttackableTarget.Sorter var2 = new EntityAINearestAttackableTarget.Sorter(this); IEntitySelector var3 = new IEntitySelector() { @Override public boolean Func2(Entity var4) { return (var4 instanceof EntityPrehistoric); } }; double var5 = 64; List<EntityPrehistoric> var6 = worldObj.selectEntitiesWithinAABB(EntityPrehistoric.class, this.boundingBox.expand(var5, 4.0D, var5), var3); Collections.sort(var6, var2); List<EntityPrehistoric> var7 = new ArrayList<EntityPrehistoric>(); if (!var6.isEmpty()) { for (EntityPrehistoric var8 : var6) { if (var8.type == this.type && var8.isAdult() && var8.getGender() == 0 && var8.ticksTillMate == 0) { var7.add(var8); } } } if (!var7.isEmpty() && this.ticksTillMate == 0) { EntityPrehistoric var9 = var7.get(0); if (var9.ticksTillMate == 0) { this.getNavigator().tryMoveToEntityLiving(var9, 1); double var10 = (double) (this.width * 8.0F * this.width * 8.0F + var9.width); if (this.getDistanceSq(var9.posX, var9.boundingBox.minY, var9.posZ) <= var10 && var9.onGround && this.onGround && this.isAdult() && var9.isAdult()) { var9.procreate(this); this.ticksTillMate = this.rand.nextInt(6000) + 6000; var9.ticksTillMate = this.rand.nextInt(12000) + 24000; } } } } 	0	0	0	0	0	1
@Override public Observable<Boolean> Func1 ( ScheduleItemDTO var1, IScheduleableItem var2, IScheduleableInteractor var3 ) { Boolean var4 = var3.isEventFavoriteByLoggedMember(var1.getId()); return var4 ? removeEventFromFavorites(var1, var2, var3) : addEven2Favorites(var1, var2, var3); } 	0	0	0	1	0	0
private void Func1() { float var1 = 0; int var2 = 0; List<String> var3 = new ArrayList<>(2); double var4 = payloadMass; int var5 = 0; float var6 = 0; int var7 = 0; List<String> var8 = new ArrayList<>(2); while(var4 > rocketList[var5].getThrustPerDifficulty(difficulty)) { if(var5 < 3) { var5++; } else { var6 += rocketList[var5].getMass(); var7 += rocketList[var5].getCost(); var8.add(rocketList[var5].getName()); var4 -= rocketList[var5].getThrustPerDifficulty(difficulty); var5=0; } } var1 = var6 + rocketList[var5].getMass(); var2 = var7 + rocketList[var5].getCost(); var3.addAll(var8); var3.add(rocketList[var5].getName()); float var9 = var6; int var10 = var7; List<String> var11 = new ArrayList<>(4); while(--var5 >= 0 && var4 > 0 && rocketList[var5].getThrustPerDifficulty(difficulty) > 0) { int var12 = (int)(var4/rocketList[var5].getThrustPerDifficulty(difficulty)); if(var4 < rocketList[var5].getThrustPerDifficulty(difficulty)) { var12 = 1; } int var13 = var12 * rocketList[var5].getMass(); double var14 = var4; if(var13 >= rocketList[var5+1].getMass()) { var14 -= rocketList[var5+1].getThrustPerDifficulty(difficulty); } else { var14 -= var12 * rocketList[var5].getThrustPerDifficulty(difficulty); } if(var14 > 0 && var5 > 0 && rocketList[var5-1].getThrustPerDifficulty(difficulty) <= 0) { var13 += rocketList[var5].getMass(); var12++; } if(var13 >= rocketList[var5+1].getMass()) { var9 += rocketList[var5+1].getMass(); var10 += rocketList[var5+1].getCost(); var11.add(rocketList[var5+1].getName()); var4 -= rocketList[var5+1].getThrustPerDifficulty(difficulty); } else { var9 += var12 * rocketList[var5].getMass(); var10 += var12 * rocketList[var5].getCost(); for (int var15 = 0; var15 < var12; var15++) { var11.add(rocketList[var5].getName()); } var4 -= var12 * rocketList[var5].getThrustPerDifficulty(difficulty); } } if(var9 != 0 && var9 < var1) { var1 = var9; var3 = var11; var3.addAll(var8); var2 = var10; } rocketsMass = (int)var1; rocketsList = var3; totalCost = var2; } 	0	0	0	0	0	1
public void Func1() { if (viewer.embed.getValue()) return; if (viewport != null) viewport.dispose(); viewport = new Viewport(cp.name(), this); viewport.setUndecorated(fullScreen); desktop.setViewport(viewport); reconfigureViewport(); if ((cp.width > 0) && (cp.height > 0)) viewport.setVisible(true); desktop.requestFocusInWindow(); } 	0	1	0	0	1	0
"@Override protected void Func1(Bootstrap var1, Namespace var2, StrowgrConfiguration var3) throws Exception { CloseableHttpClient var4 = HttpClients.createDefault(); NSQHttpClient var5 = new NSQHttpClient(""http://"" + var3.getNsqProducerFactory().getHost() + "":"" + var3.getNsqProducerFactory().getHttpPort(), var4); ConsulRepository var6 = var3.getConsulRepositoryFactory().build(); Optional<Boolean> var7 = var6.initPorts(); if (var7.orElse(Boolean.FALSE)) { LOGGER.info(""key/value for ports is initialized in repository""); } else { LOGGER.warn(""key/value for ports can't be initialized (already done?).""); } for (String var8 : Arrays.asList(""commit_requested_"", ""deleted_requested_"")) { String var9 = var8 + var2.getString(""haproxy-name""); if (var5.createTopic(var9)) { LOGGER.info(""topic {} has been initialized on nsqd"", var9); } else { LOGGER.info(""topic {} can't be initialized on nsqd"", var9); } } if (var2.get(""vip"") != null) { var6.setHaproxyVip(var2.get(""haproxy-name""), var2.get(""vip"")); } } "	0	0	0	1	0	0
"public static void Func1(JsonNode var1) throws Exception { final JsonNode var2 = var1.path(""var2""); if (var2.isMissingNode() || !var2.isArray()) { throw new IllegalArgumentException( ""Dataset var12 info update fail, missing necessary fields: "" + var1.toString()); } final JsonNode var3 = var1.path(""source""); String var4 = null; if (!var3.isNull() && !var3.isMissingNode()) { var4 = var3.asText(); } final Integer var5; final String var6; final Object[] var7 = findDataset(var1); if (var7[0] == null || var7[1] == null) { var5 = 0; var6 = var1.path(""datasetProperties"").path(""uri"").asText(); } else { var5 = (Integer) var7[0]; var6 = (String) var7[1]; } final JsonNode var8 = var1.path(""var8""); final Long var9 = var8 != null ? var8.path(""time"").asLong() / 1000 : null; ObjectMapper var10 = new ObjectMapper(); List<DatasetOwnerRecord> var11 = new ArrayList<>(); for (final JsonNode var12 : var2) { DatasetOwnerRecord var13 = var10.convertValue(var12, DatasetOwnerRecord.class); var13.setDatasetId(var5); var13.setDatasetUrn(var6); var13.setSourceTime(var9); var13.setCreatedTime(var9); var13.setModifiedTime(System.currentTimeMillis() / 1000); final String var14 = var13.getOwner(); int var15 = var14.lastIndexOf(':'); if (var15 >= 0) { var13.setOwner(var14.substring(var15 + 1)); var13.setNamespace(var14.substring(0, var15)); } else { var13.setNamespace(""""); } Map<String, Object> var16 = getOwnerByOwnerId(var13.getOwner()); Integer var17 = 0; String var18 = ""N""; if (var16.containsKey(""app_id"")) { var17 = StringUtil.toInt(var16.get(""app_id"")); var18 = var17 == 301 ? ""Y"" : var17 == 300 ? (String) var16.get(""is_active"") : ""N""; } var13.setAppId(var17); var13.setIsActive(var18); String var19 = var13.getOwnerType(); var13.setIsGroup(var19 != null && var19.equalsIgnoreCase(""group"") ? ""Y"" : ""N""); if (var5 == 0 || var17 == 0) { String var20 = PreparedStatementUtil.prepareInsertTemplateWithColumn(DATASET_OWNER_UNMATCHED_TABLE, var13.getDbColumnForUnmatchedOwner()); OWNER_UNMATCHED_WRITER.execute(var20, var13.getValuesForUnmatchedOwner()); } else { var11.add(var13); } } mergeDatasetOwners(var11, var5, var6, var4); } "	0	0	0	0	0	1
"private QueryDefinition Func1() { QueryDefinition var1 = new QueryDefinition(); var1.setName(""unAckErrors""); var1.setSource(System.getProperty(""org.kie.server.persistence.ds"", ""jdbc/jbpm-ds"")); var1.setExpression(""select * from ExecutionErrorInfo where ERROR_ACK = 0""); var1.setTarget(""CUSTOM""); return var1; } "	0	0	1	1	0	0
@Override public int Func1() { return scrollBar.getMaximum() - scrollBar.getVisibleAmount() - scrollBar.getValue(); } 	0	0	0	0	0	1
"public CommandResult Func1(CommandSource var1, CommandContext var2) throws CommandException { if (var1 instanceof Player) { Player var3 = (Player) var1; String var4 = ConfigManager.getTeam(var3.getUniqueId()); if (var4 != null && !ConfigManager.getMembers(var4).contains(var3.getUniqueId())) { Optional<Vector3i> var5 = Polis.game.getServer().getChunkLayout().toChunk(var3.getLocation().getBlockPosition()); if (var5.isPresent()) { Vector3i var6 = var5.get(); if (!ConfigManager.isClaimed(var4, var3.getLocation().getExtent().getUniqueId(), var6.getX(), var6.getZ())) { if (ConfigManager.getClaims(var4) < ConfigManager.getClaimCap()) { if (ConfigManager.getBalance(var4).compareTo(ConfigManager.getClaimCost()) >= 0) { TransactionResult var7 = null; Account var8 = Polis.economyService.getOrCreateAccount(var4).get(); var7 = var8.withdraw(Polis.economyService.getDefaultCurrency(), ConfigManager.getClaimCost(), Cause.of(NamedCause.source(var3))); if (var7.getResult() == ResultType.SUCCESS) { ConfigManager.claim(var4, var3.getLocation().getExtent().getUniqueId(), var6.getX(), var6.getZ()); ConfigManager.withdrawFromTownBank(ConfigManager.getClaimCost(), var4); var3.sendMessage(Text.builder().append(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.GOLD, ""Successfully claimed this location for "" + ConfigManager.getClaimCost() + "" "")) .append(Polis.economyService.getDefaultCurrency().getPluralDisplayName()).build()); } else if (var7.getResult() == ResultType.ACCOUNT_NO_FUNDS) { var3.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""Not enough funds! Deposit funds or setup taxes!"")); } else { var3.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""An error occured while trying to withdraw from your Polis' bank."")); } } else { var3.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""Your Polis does not have enough funds to claim this land! Deposit funds soon!"")); } } else { var3.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""You already have the maximum number of claims!"")); } } else { var3.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""This location is already claimed!"")); } } } else if (var4 != null) { var3.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""Ask your leader or an executive to claim!"")); } else { var3.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""You're not part of a town!"")); } } else { var1.sendMessage(Text.of(TextColors.DARK_RED, ""Error! "", TextColors.RED, ""Must be an in-game var3 to use /polis claim!"")); } return CommandResult.success(); } "	0	0	0	0	0	1
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.home_fragment); analytics = GoogleAnalytics.getInstance(this); analytics.setLocalDispatchPeriod(1800); tracker = analytics.newTracker(""UA-63953479-1""); tracker.enableExceptionReporting(true); tracker.enableAdvertisingIdCollection(true); tracker.enableAutoActivityTracking(true); key = ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5B4Oomgmm2D8XVSxh1DIFGtU3p1N2w6Xi2ZO7MoeZRAhvVjk3B8MfrOatlO9HfozRGhEkCkq0MfstB4Cjci3dsnYZieNmHOVYIFBWERqdwfdtnUIfI554xFsAC3Ah7PTP3MwKE7qTT1VLTTHxxsE7GH4sLtvLwrAzsVrLK+dgQk+e9bDJMvhhEPBgabRFaTvKaTtSzB/BBwrCa5mv0pte6WfrNbugFjiAJC43b7NNY2PV9UA8mukiBNZ9mPrK5fZeSEfcVqenyqbvZZG+P+O/cohAHbIEzPMuAS1EBf0VBsZtm3fjQ45PgCvEB7Ye3ucfR9BQ9ADjDwdqivExvXndQIDAQAB""; iap var2 = new iap(); bp = var2.getBilling(this, key); bp.loadOwnedPurchasesFromGoogle(); Toolbar var3 = (Toolbar) findViewById(R.var8.var3); setSupportActionBar(var3); AccountHeader var4 = new AccountHeaderBuilder() .withActivity(this) .withHeaderBackground(R.drawable.cover) .build(); result = new DrawerBuilder() .withActivity(this) .withToolbar(var3) .withTranslucentStatusBar(true) .withActionBarDrawerToggle(true) .withAccountHeader(var4) .withSelectedItem(0) .addDrawerItems( new PrimaryDrawerItem().withName(""Connect to..."").withIcon(R.drawable.ic_ic_swap_horiz_24px), new PrimaryDrawerItem().withName(""Settings"").withIcon(R.drawable.ic_ic_settings_24px) ) .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() { @Override public boolean Func2(AdapterView<?> var5, View var6, int var7, long var8, IDrawerItem var9) { if (var9 instanceof Nameable) { switch (((Nameable) var9).getName()) { case ""Settings"": { Intent var10 = new Intent(MainActivity.this, SettingsActivity.class); startActivity(var10); break; } case ""Contact us"": { try { Intent var10 = new Intent(Intent.ACTION_VIEW, Uri.parse(""mailto:"" + ""team@numixproject.org"")); startActivity(var10); } catch (Exception e) { Toast.makeText(MainActivity.this, ""A mail client is required."", Toast.LENGTH_SHORT).show(); } break; } case ""Remove ads"": { removeAds(); break; } case ""Send feedback"": { Intent var10 = new Intent(MainActivity.this, Gitty.class); startActivity(var10); break; } case ""More Apps"": { String var11 = ""https://play.google.com/store/apps/dev?var8=5600498874720965803""; Intent var12 = new Intent(Intent.ACTION_VIEW); var12.setData(Uri.parse(var11)); startActivity(var12); break; } } } return false; } }).build(); if (!bp.isPurchased(""remove_ads"")) { result.addItem(new PrimaryDrawerItem().withName(""Remove ads"").withIcon(R.drawable.ic_ic_dnd_on_24px)); } result.addItem(new PrimaryDrawerItem().withName(""Send feedback"").withIcon(R.drawable.ic_edit_black_18dp)); result.addItem(new PrimaryDrawerItem().withName(""Contact us"").withIcon(R.drawable.ic_ic_mail_24px)); result.addItem(new PrimaryDrawerItem().withName(""More Apps"").withIcon(R.drawable.ic_ic_shop_24px)); adapter = new ServerListAdapter(); fab = (FloatingActionButton) findViewById(R.var8.fab); fab.setOnClickListener(new View.OnClickListener() { public void Func3(View var13) { newAddServerActivity(var13); } }); list = (ExpandableHeightListView) findViewById(R.var8.list); list.setAdapter(adapter); list.setOnItemClickListener(this); list.setOnItemLongClickListener(this); list.setExpanded(true); fab.attachToListView(list); LinearLayout var14 = (LinearLayout) findViewById(R.var8.reportLayout); var14.setOnClickListener(new View.OnClickListener() { @Override public void Func3(View var13) { Intent var10 = new Intent(MainActivity.this, Gitty.class); startActivity(var10); } }); if (instanceCount > 0) { finish(); } prefs = getSharedPreferences(""org.numixproject.hermes"", MODE_PRIVATE); if (prefs.getBoolean(""firstrun"", true)) { startIntro(); prefs.edit().putBoolean(""firstrun"", false).commit(); } if (adapter.isServerNull()){ var14.setVisibility(View.GONE); } } "	0	0	0	0	0	1
"@Override public void Func1(final Bundle var1) { super.Func1(var1); url = getArguments().getString(""url""); html = getArguments().getString(""html""); } "	0	1	0	0	1	0
"private Connection Func1() { java.sql.Connection var1 = null; try { var1 = DriverManager.Func1( ""jdbc:postgresql://127.0.0.1:5432/test"", ""postgres"", ""password""); } catch (SQLException e) { System.out.println(""Connection Failed! Check output console""); e.printStackTrace(); return null; } return var1; } "	0	0	0	0	0	1
"private ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry Func1( ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry var1) { for (String var2 : authorizationConfig.getRules()) { Matcher var3 = AUTHORIZATION_RULE.var3(var2); Assert.isTrue(var3.matches(), String.format( ""Unable to parse var1 var2 [%s], expected format is 'HTTP_METHOD ANT_PATTERN => SECURITY_ATTRIBUTE(S)'"", var2)); HttpMethod var4 = HttpMethod.valueOf(var3.group(1).trim()); String var5 = var3.group(2).trim(); String var6 = var3.group(3).trim(); logger.error("">>>>Authorization '{}' | '{}' | '{}'"", var4, var6, var5); var1 = var1.antMatchers(var4, var5).access(var6); } return var1; } "	0	0	0	1	0	0
public static int Func1(int var1, int var2){ return Func1(getR(var1), getG(var1), getB(var1), getR(var2), getG(var2), getB(var2)); } 	0	0	0	1	0	0
"@Override public void Func1(Properties var1){ for(Keybind var2 : RockBottomAPI.KEYBIND_REGISTRY.getUnmodifiable().values()){ String var3 = var2.getName().toString(); this.setProp(var1, var3, var2.getKey()); this.setProp(var1, var3+""_is_mouse"", var2.isMouse()); } this.setProp(var1, ""target_fps"", this.targetFps); this.setProp(var1, ""autosave_interval"", this.autosaveIntervalSeconds); this.setProp(var1, ""text_speed"", this.textSpeed); this.setProp(var1, ""scale_gui"", this.guiScale); this.setProp(var1, ""scale_world"", this.renderScale); this.setProp(var1, ""gui_color"", this.guiColor); this.setProp(var1, ""hardware_cursor"", this.hardwareCursor); this.setProp(var1, ""cursor_infos"", this.cursorInfos); this.setProp(var1, ""fullscreen"", this.fullscreen); this.setProp(var1, ""vsync"", this.vsync); this.setProp(var1, ""smooth_lighting"", this.smoothLighting); this.setProp(var1, ""last_server_ip"", this.lastServerIp); this.setProp(var1, ""curr_locale"", this.currentLocale); } "	0	1	0	0	1	0
"@Override public void Func1(List<String> var1, OnGetNumbersCallback var2) { ParseQuery<ParseUser> var3 = ParseUser.getQuery(); var3.whereContainedIn(""phone"", var1); var3.findInBackground(new CallbackGetNumbers(var2)); } "	0	0	0	1	1	0
"public static String Func1(List<Country> var1){ String var2=""""; if (var1 != null || !var1.isEmpty()){ for (Country var3 : var1) { var2 += var3.getcountryName()+"", ""; } var2 += "".""; var2 = var2.replace("", ."", """"); } return var2; } "	1	1	1	1	1	0
"public static void Func1(String[] var1) throws Exception { if (var1.length < 1) { System.out.println(""Supply configfile""); return; } EmsImportConfig.setConfigFileName(var1[0]); EmsImporter var2 = new EmsImporter(EmsImportConfig.outputFilePath()); List<EmsConference> var3 = var2.readAndCreateConferences(); var3.forEach(var2::readEmsAndSubmit); } "	0	1	0	0	1	0
public String Func1() { return myParent; } 	0	0	0	0	0	1
"@AfterClass(groups = ""passthroughUPGRADE"") public void Func1() { TestUtil.cleanUp(httpTransportListener, httpServer); } "	0	0	0	0	0	1
"private List<CopyEntity> Func1() throws IOException { MultiTimingEvent var1 = new MultiTimingEvent(this.eventSubmitter, ""TableCopy"", true); int var2 = 0; String var3 = this.dataset.table.getTableName(); List<CopyEntity> var4 = Lists.newArrayList(); var2 = addSharedSteps(var4, var3, var2); HiveLocationDescriptor var5 = HiveLocationDescriptor.forTable(this.dataset.table, this.dataset.fs, this.dataset.properties); HiveLocationDescriptor var6 = HiveLocationDescriptor.forTable(this.targetTable, this.targetFs, this.dataset.properties); Optional<HiveLocationDescriptor> var7 = this.existingTargetTable.isPresent() ? Optional.of(HiveLocationDescriptor.forTable(this.existingTargetTable.get(), this.targetFs, this.dataset.properties)) : Optional.<HiveLocationDescriptor>absent(); DiffPathSet var8 = fullPathDiff(var5, var6, var7, Optional.<Partition>absent(), var1, this); DeleteFileCommitStep var9 = DeleteFileCommitStep.fromPaths(targetFs, var8.pathsToDelete, this.dataset.properties); var4.add(new PrePublishStep(var3, Maps.<String, Object>newHashMap(), var9, var2++)); for (CopyableFile.Builder var10 : getCopyableFilesFromPaths(var8.filesToCopy, configuration, Optional.<Partition>absent())) { var4.add(var10.build()); } var1.close(); return var4; } "	0	0	1	1	0	0
"protected void Func1(final Throwable var1, final Description var2) { System.err.println( ""ArchiveAndReplaySystemTest Func1 with random seed: "" + ArchiveReplayLoadTest.this.seed); } "	0	0	0	0	0	1
@After public void Func1() throws Exception { RuntimeStats.resetAll(); clear(); } 	0	0	0	0	0	1
"@RequestMapping(method = RequestMethod.GET, value = ""/inter/{var3}"") public String Func1(Model var1, @ModelAttribute(""var2"") LdoDSession var2, @PathVariable String var3) { logger.debug(""Func1 var3:{}"", var3); ExpertEditionInter var4 = (ExpertEditionInter) LdoD.getInstance() .getFragment(var3.substring(0, var3.indexOf(""_""))).getFragInterByUrlId(var3); Set<ExpertEditionInter> var5 = var2.getRecommendation() .getNextRecommendations(var4.getExternalId()); ExpertEditionInter var6 = var2.getRecommendation().getPrevRecommendation(); PlainHtmlWriter4OneInter var7 = new PlainHtmlWriter4OneInter(var4); var7.write(false); var1.addAttribute(""ldoD"", LdoD.getInstance()); var1.addAttribute(""inter"", var4); var1.addAttribute(""var5"", var5); var1.addAttribute(""var6"", var6); var1.addAttribute(""var7"", var7); return ""reading/readingMain""; } "	0	0	0	0	0	1
"private static String Func1(String var1) { String var2 = ""(\\s*)([0-9\\.]+)(\\s*)([0-9\\.]+)(\\s*)""; return var1.replaceAll(var2,""[$2,$4]""); } "	1	0	0	1	0	0
@Override public GroupMapReduce Func1() throws CloneNotSupportedException { final GroupMapReduce Func1 = (GroupMapReduce) super.Func1(); Func1.traversal = this.traversal.Func1(); return Func1; } 	0	1	0	0	1	0
"@Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { mFragmentView = var1.inflate(R.layout.fragment_profile_friend, var2, false); TextView var4 = (TextView) mFragmentView.findViewById(R.id.profile_friend_name); var4.setText(user.getName()); RoundedImageView var5 = (RoundedImageView) mFragmentView.findViewById(R.id.profile_friend_picture_view); follow = (Button) mFragmentView.findViewById(R.id.profile_friend_follow); FollowStatusCallBack var6 = new FollowStatusCallBack() { @Override public void Func2(Boolean var7) { followButton(var7); } }; this.getFollowStatus(var6); if (!(user.getProfileID()).equals("""")) { Uri var8 = Uri.parse(user.getProfileID()); var5.setImageURI(var8); } final RecyclerView var9 = (RecyclerView) mFragmentView.findViewById(R.id.profileFriendEventsRecycler); boolean var10 = var9.hasFixedSize(); RecyclerView.LayoutManager var11 = new LinearLayoutManager(this.getContext()); var9.setLayoutManager(var11); final Context var12 = this.getContext(); final ProgressDialog var13 = ProgressDialog.show(getContext(), ""Loading"", ""Wait while loading...""); APIManager.getInstance().getEvents(new APICallback<List<Event>>() { @Override public void Func3(final List<Event> var14) { var13.dismiss(); EventListAdapterItem var15 = new EventListAdapterItem(var14, var12); var15.setOnItemClickListener(new EventListAdapterItem.EventItemClickInterface() { @Override public void Func4(int var16, View var17) { mListener.onProfileFriendEventSelected(var14.get(var16)); } }); var9.setAdapter(var15); } @Override public void Func5(String var18) { var13.dismiss(); } }); return mFragmentView; } "	0	0	0	0	0	1
"public Map<String, String> Func1(int var1, int var2) throws SystemException { Map<String, String> var3 = new LinkedHashMap<String, String>(); List<Institution> var4 = InstitutionFinderUtil.findAllSortedAsTree(1, 20); for (Institution var5 : var4) { String var6 = """" + var5.getInstitutionId(); String var7 = _indentFromPath(var5.getPath(), ""/"") + var5.getName(); var3.put(var6, var7); } return var3; } "	0	0	1	1	0	0
@Override void Func1() { moveAbility.setRaiseIsAble(raiseIsAble()); moveAbility.setCallIsAble(moveValidator.callIsAble()); moveAbility.setCheckIsAble(moveValidator.checkIsAble(raisers.size())); poker.notifyMoveAbilityListeners(players.current().id(), moveAbility); } 	1	1	0	0	0	0
"private void Func1(Path var1, String var2) throws IOException { LocalFileSystem var3 = FileSystem.getLocal(conf); for (String var4 : SPLITTER.split(var2)) { Path var5 = new Path(var4); FileStatus[] var6 = var3.globStatus(var5); for (FileStatus var7 : var6) { Path var8 = new Path(this.fs.makeQualified(var1), var7.getPath().getName()); this.fs.copyFromLocalFile(var7.getPath(), var8); LOG.info(String.format(""Adding %s to classpath"", var8)); DistributedCache.addFileToClassPath(var8, this.conf, this.fs); } } } "	1	0	1	1	0	0
"@SuppressWarnings(""unchecked"") @Override protected void Func1() { super.Func1(); bind(new TypeLiteral<ComputeServiceAdapter<Vm, Hardware, QueryResultVAppTemplateRecord, Vdc>>() { }).to(VCloudDirectorComputeServiceAdapter.class); bind(new TypeLiteral<Function<ResourceEntity.Status, NodeMetadata.Status>>() { }).to(NodemetadataStatusForStatus.class); bind(new TypeLiteral<Function<String, Image.Status>>() { }).to(ImageStateForStatus.class); bind(new TypeLiteral<Function<Vm, NodeMetadata>>() { }).to(VmToNodeMetadata.class); bind(new TypeLiteral<Function<QueryResultVAppTemplateRecord, org.jclouds.compute.domain.Image>>() { }).to(ImageForVAppTemplate.class); bind(new TypeLiteral<Function<URI, Envelope>>() { }).to(ValidateVAppTemplateAndReturnEnvelopeOrThrowIllegalArgumentException.class); bind(new TypeLiteral<Function<Hardware, Hardware>>() { }).to(Class.class.cast(IdentityFunction.class)); bind(new TypeLiteral<Function<Vm, Hardware>>() { }).to(Class.class.cast(HardwareForVm.class)); bind(new TypeLiteral<Function<Vdc, Location>>() { }).to(VdcToLocation.class); bind(TemplateOptions.class).to(VCloudDirectorTemplateOptions.class); bind(new TypeLiteral<Supplier<Set<Hardware>>>() {}).to(VirtualHardwareConfigSupplier.class); bind(new TypeLiteral<AdaptingComputeServiceStrategies<Vm, Hardware, QueryResultVAppTemplateRecord, Vdc>>() { }).to(VcloudDirectorListNodesStrategy.class); install(new LocationsFromComputeServiceAdapterModule<Vm, Hardware, QueryResultVAppTemplateRecord, Vdc>() { }); } "	0	0	0	0	0	1
"@Test(expected = FacilityNotFoundException.class) public void Func1() throws FacilityNotFoundException { String var1 = ""123456""; when(mockAllFacilities.getFacility(var1)).thenReturn(null); facilityService.update(createFacilityVO(var1, null, null, null, null, null, null, null, null, null, null)); } "	0	0	0	0	0	1
"@Test public void Func1() throws FacilityAlreadyFoundException { final ModelMap var1 = new ModelMap(); final String var2 = ""var2""; final String var3 = ""var3""; final String var4 = ""var4""; final String var5 = ""var5""; final String var6 = ""var6""; final String var7 = ""Facility already exists.""; final FacilityController var8 = spy(facilityController); doThrow(new FacilityAlreadyFoundException()).when(mockFacilityService).create(var2, var3, var4, var5, var6, StringUtils.EMPTY, StringUtils.EMPTY, StringUtils.EMPTY, StringUtils.EMPTY); when(mockMessageSource.getMessage(""facility_already_exists"", null, Locale.getDefault())).thenReturn(var7); final FacilityForm var9 = new FacilityForm(); var9.setName(var2); var9.setCountry(var3); var9.setRegion(var4); var9.setCountyDistrict(var5); var9.setStateProvince(var6); var9.setPhoneNumber(StringUtils.EMPTY); var9.setAdditionalPhoneNumber1(StringUtils.EMPTY); var9.setAdditionalPhoneNumber2(StringUtils.EMPTY); var9.setAdditionalPhoneNumber3(StringUtils.EMPTY); final HashMap<String, Object> var10 = new HashMap<String, Object>() {{ put(FACILITY_FORM, new Object()); put(Constants.COUNTRIES, new Object()); put(Constants.REGIONS, new Object()); put(Constants.PROVINCES, new Object()); put(Constants.DISTRICTS, new Object()); }}; final String var11 = var8.create(var9, mockBindingResult, var1); final ArgumentCaptor<FieldError> var12 = ArgumentCaptor.forClass(FieldError.class); verify(mockBindingResult).addError(var12.capture()); final FieldError var13 = var12.getValue(); assertThat(var11, is(equalTo(""facilities/new""))); assertThat(var13.getObjectName(), is(equalTo(FACILITY_FORM))); assertThat(var13.getField(), is(equalTo(""name""))); assertThat(var13.getDefaultMessage(), is(equalTo(var7))); assertNotNull(var1.get(Constants.COUNTRIES)); assertNotNull(var1.get(Constants.REGIONS)); assertNotNull(var1.get(Constants.PROVINCES)); assertNotNull(var1.get(Constants.DISTRICTS)); } "	0	1	0	0	1	0
"public synchronized boolean Func1(String var1, Integer var2, Answer var3){ WorkerSession var4 = this.activeSessionTable.get(var1); if(var4!=null){ var4.insertMicrotaskAnswer(var2,var3); Microtask var5 = var4.getPreviousMicrotask(); Worker var6 = workerTable.get(var3.getWorkerId()); String var7 = var3.getExplanation().replaceAll(""[\n]"","" "").replaceAll(""[\r]"","" ""); sessionLogger.info(""EVENT%MICROTASK% workerId%""+ var3.getWorkerId()+""% var1%""+ var1+ ""% var2%""+var2+""% fileName%""+var5.getFileName()+ ""% question%""+ var5.getQuestion()+""% var3%""+var3.getOption()+ ""% confidenceLevel%""+var3.getConfidenceOption()+ ""% duration%""+var3.getElapsedTime()+""% var7%""+var7+""% fileName%""+var6.getCurrentFileName()+ ""% difficulty""+var3.getDifficulty()); if(var4.isClosed()){//Move var4 to closed //EVENT this.closedSessionVector.add(var4); sessionLogger.info(""EVENT%CLOSE SESSION% workerId%""+ var4.getWorkerId()+""% var1%""+ var4.getId()+""% fileName%""+var6.getCurrentFileName()); this.activeSessionTable.remove(var4.getId()); } return true; } else return false; } "	0	0	1	1	0	0
"@Override public HashMap<TeamDraftOrder, PlayerDataSet> Func1() { String var1 = ""SELECT * FROM var2""; HashMap<TeamDraftOrder, PlayerDataSet> var2 = new HashMap<>(); ResultSet var3 = null; try { var3 = executeQuery(var1); while (var3.next()) { TeamDraftOrder var4 = getDraftOrderByTeamId(new TeamId(var3.getInt(""teamID""))); String var5 = var3.getString(""WizardTable""); if (var5 != null) { Optional<PlayerDataSet> var6 = PlayerDataSet.getDataSetWithName(var5); if (!var6.isPresent()) { throw new RuntimeException(""Team "" + var4 + "" is linked to unrecognized DataSet '"" + var5 + ""'.""); } var2.put(var4, var6.get()); } } } catch (DataSourceException | SQLException e) { logger.log(Level.SEVERE, ""Couldn't fetch team selections for which auto-pick source to use. Using default of CBSSPORTS, as backup.""); } finally { close(var3); } return var2; } "	0	0	0	1	1	0
private List<QueueControl> Func1(final DurabilityType var1) { try { List<QueueControl> var2 = new ArrayList<>(); String[] var3 = getQueueNames(); for (String var4 : var3) { QueueControl var5 = (QueueControl) managementService.getResource(ResourceNames.QUEUE + var4); if (var5 != null && !var5.getName().equals(getAddress())) { if (var1 == DurabilityType.ALL || var1 == DurabilityType.DURABLE && var5.isDurable() || var1 == DurabilityType.NON_DURABLE && !var5.isDurable()) { var2.add(var5); } } } return var2; } catch (Exception e) { return Collections.emptyList(); } } 	1	0	1	0	0	0
private Locale Func1(ActionEvent var1) { return new Locale(persistentPreferredLanguage.getValue()); } 	0	0	0	0	0	1
public void Func1(EntityPlayerMP var1) { for (Entry<String, Class<? extends PropertiesBase>> var2 : identifierClassAssociations.entrySet()) { String var3 = var2.getKey(); Class var4 = var2.getValue(); IExtendedEntityProperties var5 = var1.getExtendedProperties( var3 ); if (var5.getClass().isAssignableFrom( var4 )) { PowersNetwork.client().syncProperties( ((PropertiesBase)var5), var1); } } } 	0	0	0	0	0	1
public void Func1() { this.Func1(0); } 	0	0	0	0	0	1
private Vec3d Func1(String var1) { int var2 = getCurrentFrame(); IAnimation var3 = getActionManager().getCurrentAnimation(); if (var3 == null) { return new Vec3d(0, 0, 0); } BoneTransformation var4 = new BoneTransformation(); var3.storeCurrentTransformation(var1, var2, var4); Matrix4f var5 = var4.getMatrix(); Vec3d var6 = new Vec3d(var5.m03, var5.m13, var5.m23); return var6; } 	0	0	1	1	0	0
"public static String Func1(Object var1, org.openprovenance.prov.model.QualifiedName var2) { if (var1 instanceof LangString) { LangString var3 = (LangString) var1; return ""\"""" + var3.getValue() + ((var3.getLang()==null) ? ""\"""" : ""\""@"" + var3.getLang()) + ((var2==null)? """" : "" %% "" + Namespace.qualifiedNameToStringWithNamespace(var2)); } else if (var1 instanceof QualifiedName) { QualifiedName var4 = (QualifiedName) var1; return ""'"" + Namespace.qualifiedNameToStringWithNamespace(var4) + ""'""; } else if (var1 instanceof String) { String var5=(String)var1; if (var5.contains(""\n"")) { return ""\""\""\"""" + escape(var5) + ""\""\""\"""" ; } else { return ""\"""" + escape(var5) + ((var2==null)? """" : ""\"" %% "" + Namespace.qualifiedNameToStringWithNamespace(var2)); } } else { return ""\"""" + var1 + ""\"" %% "" + Namespace.qualifiedNameToStringWithNamespace(var2); } } "	0	0	0	0	0	1
"private PaginationViewModel Func1(final int var1, final int var2, final PagedResult<ProductProjection> var3) { final Http.Context var4 = new Http.Context(new Http.RequestBuilder() .uri(QueryStringUtils.buildUri(URL_PATH, buildQueryString(var1))) .build()); final Configuration var5 = new Configuration(singletonMap(""pop.pagination.var2"", var2)); return new TestablePaginationViewModelFactory(new ConfigurablePaginationSettings(var5), var4).create(var3); } "	1	1	1	0	1	0
"@SubscribeEvent public void Func1(PlayerInteractEvent var1) { Resident var2 = DatasourceProxy.getDatasource().getOrMakeResident(var1.entityPlayer); Block var3 = var1.world.getBlock(var1.x, var1.y, var1.z); if (var1.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK || var1.action == PlayerInteractEvent.Action.LEFT_CLICK_BLOCK) { if (var3 == Blocks.wall_sign || var3 == Blocks.standing_sign) { TileEntitySign var4 = (TileEntitySign) var1.world.getTileEntity(var1.x, var1.y, var1.z); if(var4.signText[1].equals(Constants.PLOT_SELL_IDENTIFIER)) { if (var1.action == PlayerInteractEvent.Action.LEFT_CLICK_BLOCK && var1.entityPlayer.isSneaking() && Utils.isOp(var1.entityPlayer)) { var1.world.setBlock(var1.x, var1.y, var1.z, Blocks.air); } else if(var1.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) { Town var5 = MyTownUtils.getTownAtPosition(var1.world.provider.dimensionId, var1.x >> 4, var1.z >> 4); if(var5 != null) { if(var5.hasResident(var2)) { Plot var6 = var5.getPlotAtCoords(var1.world.provider.dimensionId, var1.x, var1.y, var1.z); if(var6 != null) { if(!var6.hasOwner(var2)) { if (var5.canResidentMakePlot(var2)) { int var7 = Integer.parseInt(var4.signText[2].substring(2, var4.signText[2].length())); if (EconomyProxy.getEconomy().takeMoneyFromPlayer(var1.entityPlayer, var7)) { for(Resident var8 : var6.getOwners()) { var8.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.notification.var6.buy.oldOwner"", var6.getName())); } for(Resident var8 : var6.getResidents()) { DatasourceProxy.getDatasource().unlinkResidentFromPlot(var8, var6); } DatasourceProxy.getDatasource().linkResidentToPlot(var2, var6, true); var2.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.notification.var6.buy.newOwner"", var6.getName())); var1.world.setBlock(var1.x, var1.y, var1.z, Blocks.air); } else { var2.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.notification.var6.buy.failed"", var7, EconomyProxy.getEconomy().getCurrency(var7))); } } else { var2.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.var6.limit"", var5.getMaxPlots())); } } else { var2.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.var6.sell.alreadyOwner"")); } } } else { var2.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.notInTown"", var5.getName())); } } } var1.setCanceled(true); } } } } "	0	0	0	0	0	1
"private static JSONArray Func1(JSONObject var1) { return var1.getJSONArray(""Func1""); } "	0	0	0	0	0	1
"public void Func1(String var1) { if (var1 != null) { this.var1 = var1; editText.Func1(this.var1); if (!var1.equals("""")) activate(false); } } "	0	1	1	0	0	0
@NonNull protected View Func1(@Nullable Bundle var1) { final ScrollView var2 = new ScrollView(this); var2.setPadding(10, 10, 10, 10); var2.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)); var2.setFocusable(true); var2.setFocusableInTouchMode(true); var2.addView(scrollable); addViewToDialog(getMainView()); View var3 = getCommentLabel(); if(var3 != null){ var3.setPadding(var3.getPaddingLeft(), PADDING, var3.getPaddingRight(), var3.getPaddingBottom()); addViewToDialog(var3); String var4 = null; if (var1 != null) { var4 = var1.getString(STATE_COMMENT); } userCommentView = getCommentPrompt(var4); addViewToDialog(userCommentView); } View var5 = getEmailLabel(); if(var5 != null){ var5.setPadding(var5.getPaddingLeft(), PADDING, var5.getPaddingRight(), var5.getPaddingBottom()); addViewToDialog(var5); String var6 = null; if (var1 != null) { var6 = var1.getString(STATE_EMAIL); } userEmailView = getEmailPrompt(var6); addViewToDialog(userEmailView); } return var2; } 	0	1	0	0	1	0
"public static String Func1(String var1) { String var2 = CarbonUtils.getServerConfiguration().getFirstProperty(""WebContextRoot""); if (var2 != null && !var2.equals(""/"")) { var1 = var2 + var1; } return var1; } "	1	1	1	1	1	0
@Override public void Func1(final Context var1, final Dispatcher var2) { super.Func1(var1, var2); if (var2 == null || var2.type == null || var2.type.var5 == null) return; String var3 = var2.var3; String var4 = var2.var4; ExpType var5 = var2.var5; mExperience = ExperienceManager.instance.getExperience(var3, var4, var5); if (mExperience == null) createExperience(var1, getPlayers(var2)); } 	1	1	0	1	0	0
"@Test public void Func1() throws Exception{ String var1 = ""/test/xml2csv/input/""; String var2 = ""/test/xml2csv/output/""; String var3=""/test/xml2csv/schema/""; String var4 = ""xml2csv1.properties""; String[] var5 = new String[]{""dynschema_test1_data.xml""}; String var6 = ""dynschema_test1_schemas.txt""; String var7 = ""schemas.txt""; getFs().copyFromLocalFile(false, true, new Path(getLocalFolder() + var6), new Path(var3 + var7)); List<Tuple2<String, String[]>> var8 = new ArrayList<Tuple2<String, String[]>>(); var8.add(new Tuple2<String, String[]>(var1, var5)); getConf().set(""xmlinput.start"", ""<measInfo>""); getConf().set(""xmlinput.end"", ""</measInfo>""); getConf().set(""xmlinput.row.start"", ""<measValue""); getConf().set(""xmlinput.row.end"", ""</measValue>""); getConf().set(""xmlinput.row.max.number"", ""2""); super.mrTest(var8, var2, var4, cmdClassName, XmlInputFormat.class); List<String> var9 = HdfsUtil.listDfsFile(getFs(), var2); logger.info(var9); String var10 = String.format(""%s-r-00000"", ""MyCore_""); assertTrue(var9.contains(var10)); List<String> var11 = HdfsUtil.stringsFromDfsFolder(getFs(), var2); logger.info(String.format(""var11:\n%s"", String.join(""\n"", var11))); assertTrue(var11.size()==14); String var12 = var11.get(0); String[] var13 = var12.split("","", -1); assertTrue(var13.length==9); } "	0	0	1	1	0	0
"private void Func1() { kvr.reCreateKeyValueTable(); uer.reCreateUebungenTable(); psr.reCreatePlaylistSongsTable(); str.reCreateUebungenTable(); prep.reCreatePlanTable(); phasenRep.reCreatePhasenTable(); kvr.insertKeyValue(""firstStart"", ""false""); Log.wtf(""Database0OnFirstStart?"", ""reCreatedDatabaseOnFirstStart""); } "	0	0	0	1	1	0
"@Override public void Func1(ExecutionContext var1) { Token var2 = var1.getToken(); Set<Token> var3 = Sets.newHashSet(var2); Set<String> var4 = Sets.newHashSet(); fillTokensInfo(var1.getProcess().getRootToken(), var3, var4); List<Token> var5 = Lists.newArrayList(); List<Transition> var6 = Lists.newArrayList(); for (Transition var7 : getArrivingTransitions()) { boolean var8 = false; for (Token var9 : var3) { if (Objects.equal(var7.getNodeId(), var9.getTransitionId()) || Objects.equal(var7.getNodeIdBackCompatibilityPre4_3_0(), var9.getTransitionId())) { var8 = true; var5.add(var9); break; } } if (!var8) { var6.add(var7); } } if (getArrivingTransitions().size() > 1) { var2.end(var1, null); } if (var6.isEmpty()) { log.debug(""marking tokens as inactive "" + var5); for (Token var9 : var5) { var9.setAbleToReactivateParent(false); } if (getArrivingTransitions().size() > 1 && var2.getParent() != null) { Token var10 = var2.getParent(); log.debug(""passed with first parent "" + var10); leave(new ExecutionContext(var1.getProcessDefinition(), var10)); } else { log.debug(""passed with this "" + var2); leave(var1); } } else { log.debug(""execution blocked due to waiting on "" + var6); boolean var11 = false; for (Transition var7 : var6) { if (!transitionCanBePassed(var7, var4)) { log.error(""blocking "" + var1.getProcess() + "" execution because "" + var7 + "" will not be passed by tokens in nodes "" + var4); var11 = true; } } if (var11) { var1.getProcess().setExecutionStatus(ExecutionStatus.FAILED); } } } "	0	1	0	0	1	0
"@Override public void Func1(Window var1, Controller var2) { mapType = LanguageHandler.get(""Hexagonal""); widthValue = calcMapVal(0.5d); heightValue = calcMapVal(0.5d); buttonMapType = new TextButton(var1, mapType, e->{ if(mapType.equals(LanguageHandler.get(""Hexagonal""))) mapType = LanguageHandler.get(""Oval""); else if(mapType.equals(LanguageHandler.get(""Oval""))) mapType = LanguageHandler.get(""Square""); else if(mapType.equals(LanguageHandler.get(""Square""))) mapType = LanguageHandler.get(""Custom""); else if(mapType.equals(LanguageHandler.get(""Custom""))) mapType = LanguageHandler.get(""Hexagonal""); System.out.println(mapType); buttonMapType.setText(mapType); }); displayWidth = new TextLabel(new TextLabel.Text() { @Override public String Func2() { return LanguageHandler.get(""Width"") + "": "" + widthValue + """"; } }, false); displayHeight = new TextLabel(new TextLabel.Text() { @Override public String Func2() { return LanguageHandler.get(""Height"") + "": "" + heightValue + """"; } }, false); mapWidth = new HorizontalSlider(0.5f, e -> widthValue = calcMapVal(mapWidth.getValue())); mapHeight = new HorizontalSlider(0.5f, e -> heightValue = calcMapVal(mapHeight.getValue())); accept = new TextButton(var1, LanguageHandler.get(""Accept""), e->{ if(widthValue % 2 == 0) widthValue += 1; if(heightValue % 2 == 0) heightValue += 1; MapPreset var3 = null; if(mapType.equals(LanguageHandler.get(""Hexagonal""))) var3 = new HexPreset((widthValue + heightValue)/2); else if(mapType.equals(LanguageHandler.get(""Oval""))) var3 = new OvalPreset(widthValue, heightValue); else if(mapType.equals(LanguageHandler.get(""Square""))) var3 = new SquarePreset(widthValue, heightValue); else if(mapType.equals(LanguageHandler.get(""Custom""))) var3 = new CustomPreset(""map""); prev.setPreset(var3); var1.updateView(prev); }); cancel = new TextButton(var1, LanguageHandler.get(""Cancel""), e -> var1.updateView(prev)); var1.getPanel().add(cancel); var1.getPanel().add(accept); var1.getPanel().add(mapWidth); var1.getPanel().add(mapHeight); var1.getPanel().add(displayHeight); var1.getPanel().add(displayWidth); var1.getPanel().add(buttonMapType); changeSize(); started = true; new Thread(new Runnable() { @Override public void Func3() { while (started) { draw(); } } }).start(); } "	0	0	0	0	0	1
"private String Func1(String var1) { String var2[] = var1.split(""/""); if(var2.length > 1) return StringUtils.join(var2, '/', 1, var2.length); return """"; } "	0	1	0	0	1	0
private int Func1() { return initiator.hashCode(); } 	0	0	0	0	0	1
"private void Func1(AbstractExtension var1, Element var2) throws InvalidExtensionException { Node var3 = getNode(var2, ELEMENT_NAME); if (var3 != null) { var1.setName(var3.getTextContent()); } Node var4 = getNode(var2, ELEMENT_CATEGORY); if (var3 != null) { var1.setCategory(var4.getTextContent()); } Node var5 = getNode(var2, ELEMENT_SUMMARY); if (var5 != null) { var1.setSummary(var5.getTextContent()); } Node var6 = getNode(var2, ELEMENT_DESCRIPTION); if (var6 != null) { var1.setDescription(var6.getTextContent()); } Node var7 = getNode(var2, ELEMENT_WEBSITE); if (var7 != null) { var1.setWebsite(var7.getTextContent()); } Node var8 = getNode(var2, ELEMENT_LICENSES); if (var8 != null) { NodeList var9 = var8.getChildNodes(); for (int var10 = 0; var10 < var9.getLength(); ++var10) { Node var11 = var9.item(var10); if (var11.getNodeName().equals(ELEMENT_LLICENSE)) { Node var12 = getNode(var11, ELEMENT_LLNAME); Node var13 = getNode(var11, ELEMENT_LLCONTENT); String var14 = var12.getTextContent(); ExtensionLicense var15 = this.licenseManager.getLicense(var14); if (var15 == null) { try { var15 = new ExtensionLicense(var14, var13 != null ? IOUtils.readLines(new StringReader(var13.getTextContent())) : null); } catch (IOException e) { throw new InvalidExtensionException(""Failed to write var15 content"", e); } } var1.addLicense(var15); } } } Node var16 = getNode(var2, ELEMENT_AUTHORS); if (var16 != null) { NodeList var17 = var16.getChildNodes(); for (int var10 = 0; var10 < var17.getLength(); ++var10) { Node var18 = var17.item(var10); if (var18.getNodeName().equals(ELEMENT_AAUTHOR)) { Node var19 = getNode(var18, ELEMENT_AANAME); Node var20 = getNode(var18, ELEMENT_AAURL); String var21 = var19 != null ? var19.getTextContent() : null; URL var22; if (var20 != null) { try { var22 = new URL(var20.getTextContent()); } catch (MalformedURLException e) { throw new InvalidExtensionException(""Malformed URL ["" + var20.getTextContent() + ""]"", e); } } else { var22 = null; } var1.addAuthor(new DefaultExtensionAuthor(var21, var22)); } } } List<String> var23 = parseList(var2, ELEMENT_FEATURES, ELEMENT_FFEATURE); if (var23 != null) { var1.setFeatures(var23); } var1.setScm(loadlScm(var2)); var1.setIssueManagement(loadIssueManagement(var2)); Node var24 = getNode(var2, ELEMENT_DEPENDENCIES); if (var24 != null) { NodeList var25 = var24.getChildNodes(); for (int var10 = 0; var10 < var25.getLength(); ++var10) { Node var26 = var25.item(var10); if (var26.getNodeName().equals(ELEMENT_DDEPENDENCY)) { Node var27 = getNode(var26, ELEMENT_ID); Node var28 = getNode(var26, ELEMENT_VERSION); var1.addDependency(new DefaultExtensionDependency(var27.getTextContent(), new DefaultVersionConstraint(var28.getTextContent()), parseProperties((Element) var26))); } } } Map<String, Object> var29 = parseProperties(var2); if (var29 != null) { var1.setProperties(var29); } Node var30 = getNode(var2, ELEMENT_INSTALLED); if (var30 != null) { var1.putProperty(InstalledExtension.PKEY_INSTALLED, Boolean.valueOf(var30.getTextContent())); } List<String> var31 = parseList(var2, ELEMENT_NAMESPACES, ELEMENT_NNAMESPACE); if (var31 != null) { var1.putProperty(InstalledExtension.PKEY_NAMESPACES, var31); } } "	0	1	1	1	0	0
"public void Func1(DidChangeWatchedFilesParams var1) { boolean var2 = false; for (FileEvent var3 : var1.getChanges()) { Path var4 = getPathFromLsapiURI(var3.getUri()); if (var4 == null) { continue; } File var5 = var4.toFile(); if (var5.getName().equals(""asconfig.json"")) { asconfigChanged = true; var2 = true; } else if (var5.getName().endsWith("".as"") && currentWorkspace != null) { if (var3.getType().equals(FileChangeType.Deleted)) { IFileSpecification var6 = fileSpecGetter.getFileSpecification(var5.getAbsolutePath()); currentWorkspace.fileRemoved(var6); var2 = true; } else if (var3.getType().equals(FileChangeType.Created)) { IFileSpecification var6 = fileSpecGetter.getFileSpecification(var5.getAbsolutePath()); currentWorkspace.fileAdded(var6); } else if (var3.getType().equals(FileChangeType.Changed)) { IFileSpecification var6 = fileSpecGetter.getFileSpecification(var5.getAbsolutePath()); currentWorkspace.fileChanged(var6); checkFilePathForProblems(var4, false); } } } if (var2) { if (currentOptions != null && currentOptions.type.equals(ProjectType.LIB)) { Set<Path> var7 = this.sourceByPath.keySet(); if (var7.size() > 0) { Path var4 = var7.iterator().next(); checkFilePathForProblems(var4, false); } } else //app { Path var4 = getMainCompilationUnitPath(); if (var4 != null) { checkFilePathForProblems(var4, false); } } } } "	0	0	0	0	0	1
"private void Func1(String var1, IoParameters var2, HttpServletResponse var3) throws IoHandlerException, DatasetFactoryException, URISyntaxException, MalformedURLException, IOException { checkIfUnknownTimeseries(var2, var1); RequestSimpleParameterSet var4 = RequestSimpleParameterSet.createForSingleSeries(var1, var2); checkAgainstTimespanRestriction(var4.getTimespan()); var4.setGeneralize(var2.isGeneralize()); var4.setExpanded(var2.isExpanded()); var3.setCharacterEncoding(""UTF-8""); if (Boolean.parseBoolean(var2.getOther(MimeType.APPLICATION_ZIP.name()))) { var3.setContentType(MimeType.APPLICATION_ZIP.toString()); } else { var3.setContentType(MimeType.TEXT_CSV.toString()); } createIoFactory(var4).createHandler(""text/csv"") .writeBinary(var3.getOutputStream()); } "	0	0	0	0	0	1
public static double Func1() { return mean() - (1.96 * stddev() / Math.sqrt(initialT)); } 	0	0	0	0	0	1
public static double Func1() { return StdStats.Func1(thresholds); } 	0	0	0	0	0	1
private Timer Func1() { Timer var1 = new Timer(); var1.schedule(new TimerTask() { @Override public void Func2() { Client var2 = removeOldOperator(clientController.getClients()); selectNextOperator(var2); } }, OPERATOR_TIME, OPERATOR_TIME); return var1; } 	0	0	0	0	0	1
"@Override public void Func1() { LOG.info(""Initializing "" + getClass().getSimpleName()); watcher.addFileListener(file -> { fileRepository.deleteByFileName(file); files.add(file); uploadQueue.add(file); }); registerInitial(); LOG.info(""Initialized "" + getClass().getSimpleName()); } "	0	1	0	0	0	0
"public Earning Func1(int var1) { Cursor var2 = database.query(DataBaseHelper.EARNING_TABLE, allColumns, DataBaseHelper.DATE_COLUMN + """", new String[] { String.valueOf(var1)}, null, null, null); if (var2 != null ) { var2.moveToFirst(); } Earning var3 = cursorToEarning(var2); var2.close(); return var3; } "	0	0	0	0	0	1
"public List<NotifyEventResponse> Func1(TransactionReceipt var1) { final Event var2 = new Event(""notify"", Arrays.<TypeReference<?>>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {})); List<EventValues> var3 = extractEventParameters(var2,var1); ArrayList<NotifyEventResponse> var4 = new ArrayList<NotifyEventResponse>(var3.size()); for(EventValues var5 : var3) { NotifyEventResponse var6 = new NotifyEventResponse(); var6.input = (Uint256)var5.getNonIndexedValues().get(0); var6.result = (Uint256)var5.getNonIndexedValues().get(1); var4.add(var6); } return var4; } "	0	0	1	1	0	0
"private void Func1() { FileDialog var1 = new FileDialog(getParentFrame(), ""Image Path"", FileDialog.LOAD); var1.setDirectory(new File(ImageHelper.fluffPath).getAbsolutePath() + File.separatorChar + ImageHelper.imageMech + File.separatorChar); if (getMech().getFluff().getMMLImagePath().trim().length() > 0) { String var2 = new File(getMech().getFluff().getMMLImagePath()).getAbsolutePath(); String var3 = var2.substring(var2.lastIndexOf(File.separatorChar) + 1); var2 = var2.substring(0, var2.lastIndexOf(File.separatorChar) + 1); var1.setDirectory(var2); var1.setFile(var3); } else { var1.setDirectory(new File(ImageHelper.fluffPath).getAbsolutePath() + File.separatorChar + ImageHelper.imageMech + File.separatorChar); var1.setFile(getMech().getChassis() + "" "" + getMech().getModel() + "".png""); } var1.setLocationRelativeTo(this); var1.setVisible(true); if (var1.getFile() != null) { String var4 = new File(var1.getDirectory() + var1.getFile()).getAbsolutePath(); var4 = ""."" + File.separatorChar + var4.substring(new File(System.getProperty(""user.dir"").toString()).getAbsolutePath().length() + 1); getMech().getFluff().setMMLImagePath(var4); } refresh.refreshPreview(); return; } "	0	1	0	0	0	0
public GeoNearBuilder Func1(final double var1, final double var2) { this.near = new double[]{var1, var2}; return this; } 	1	0	1	1	0	0
"public void Func1() { String var1 = null; String var2 = null; String var3 = null; boolean var4 = false; Properties var5; final StringBuilder var6 = new StringBuilder(128); this.thread.setName(""SAMv1Handler "" + _id); if (_log.shouldLog(Log.DEBUG)) _log.debug(""SAM handling started""); try { boolean var7 = false; while (true) { if (shouldStop()) { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Stop request found""); break; } SocketChannel var8 = getClientSocket() ; if (var8 == null) { _log.info(""Connection closed by client""); break; } if (var8.socket() == null) { _log.info(""Connection closed by client""); break; } var6.setLength(0); try { Socket var9 = var8.socket(); ReadLine.readLine(var9, var6, var7 ? 0 : FIRST_READ_TIMEOUT); var9.setSoTimeout(0); } catch (SocketTimeoutException ste) { writeString(""SESSION STATUS RESULT=I2P_ERROR MESSAGE=\""command timeout, bye\""\n""); break; } var1 = var6.toString(); if (_log.shouldLog(Log.DEBUG)) { _log.debug(""New message received: ["" + var1 + ']'); } var5 = SAMUtils.parseParams(var1); var2 = (String) var5.remove(SAMUtils.COMMAND); if (var2 == null) { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Ignoring newline""); continue; } var3 = (String) var5.remove(SAMUtils.OPCODE); if (var3 == null) { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Error in message format""); break; } if (_log.shouldLog(Log.DEBUG)) { _log.debug(""Parsing (var2: \"""" + var2 + ""\""; var3: \"""" + var3 + ""\"")""); } var7 = true; if (var2.equals(""STREAM"")) { var4 = execStreamMessage(var3, var5); } else if (var2.equals(""DATAGRAM"")) { var4 = execDatagramMessage(var3, var5); } else if (var2.equals(""RAW"")) { var4 = execRawMessage(var3, var5); } else if (var2.equals(""SESSION"")) { if (i2cpProps != null) var5.putAll(i2cpProps); // make sure we've got the i2cp settings var4 = execSessionMessage(var3, var5); } else if (var2.equals(""DEST"")) { var4 = execDestMessage(var3, var5); } else if (var2.equals(""NAMING"")) { var4 = execNamingMessage(var3, var5); } else { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Unrecognized message var2: \"""" + var2 + ""\""""); break; } if (!var4) { break; } } } catch (IOException e) { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Caught IOException for message ["" + var1 + ""]"", e); } catch (SAMException e) { _log.error(""Unexpected exception for message ["" + var1 + ""]"", e); } catch (RuntimeException e) { _log.error(""Unexpected exception for message ["" + var1 + ""]"", e); } finally { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Stopping handler""); try { closeClientSocket(); } catch (IOException e) { if (_log.shouldWarn()) _log.warn(""Error closing socket"", e); } if (rawSession != null) { rawSession.close(); } if (datagramSession != null) { datagramSession.close(); } if (streamSession != null) { streamSession.close(); } } } "	0	0	0	0	0	1
"public static void Func1() throws IOException { for (int var1 = 1; var1 < 11; var1++) { folder.newFolder(String.valueOf(var1)); folder.newFile(String.valueOf(var1) + ""/20160101""); folder.newFile(String.valueOf(var1) + ""/20160102""); } } "	0	0	1	1	0	0
"@Override public BeanDefinition Func1(Element var1, ParserContext var2) { BeanDefinitionBuilder var3 = parseComponent(var1, var2); var3.addPropertyValue(""name"", ""http:"" + var1.getLocalName()); DescriptionElementParser.doParse(var1, var3); BeanDefinitionParserUtils.setPropertyReference(var3, var1.getAttribute(""actor""), ""actor""); String var4 = var1.getAttribute(""timeout""); if (StringUtils.hasText(var4)) { var3.addPropertyValue(""var4"", Long.valueOf(var4)); } if (var1.hasAttribute(""server"")) { var3.addPropertyReference(""endpoint"", var1.getAttribute(""server"")); } HttpMessage var5 = new HttpMessage(); Element var6 = DomUtils.getChildElements(var1).get(0); var5.method(HttpMethod.valueOf(var6.getLocalName().toUpperCase())); if (var6.hasAttribute(""path"")) { var5.path(var6.getAttribute(""path"")); } if (var6.hasAttribute(""context-path"")) { var5.contextPath(var6.getAttribute(""context-path"")); } List<?> var7 = DomUtils.getChildElementsByTagName(var6, ""var9""); for (Object var8 : var7) { Element var9 = (Element) var8; var5.queryParam(var9.getAttribute(""name""), var9.getAttribute(""value"")); } Element var10 = DomUtils.getChildElementByTagName(var6, ""var10""); if (var10 != null) { List<?> var11 = DomUtils.getChildElementsByTagName(var10, ""var13""); for (Object var12 : var11) { Element var13 = (Element) var12; var5.setHeader(var13.getAttribute(""name""), var13.getAttribute(""value"")); } String var14 = var10.getAttribute(""content-type""); if (StringUtils.hasText(var14)) { var5.var14(var14); } String var15 = var10.getAttribute(""var15""); if (StringUtils.hasText(var15)) { var5.var15(var15); } String var16 = var10.getAttribute(""var16""); if (StringUtils.hasText(var16)) { var5.var16(var16); } List<?> var17 = DomUtils.getChildElementsByTagName(var10, ""var19""); for (Object var18 : var17) { Element var19 = (Element) var18; var5.var19(new Cookie(var19.getAttribute(""name""), var19.getAttribute(""value""))); } } parseMessageSelector(var1, var3); Element var20 = DomUtils.getChildElementByTagName(var6, ""var20""); List<ValidationContext> var21 = parseValidationContexts(var20, var3); var3.addPropertyValue(""messageBuilder"", new HttpMessageContentBuilder(var5, constructMessageBuilder(var20))); var3.addPropertyValue(""var21"", var21); var3.addPropertyValue(""variableExtractors"", getVariableExtractors(var1)); return var3.getBeanDefinition(); } "	0	0	0	0	0	1
"public void Func1(int var1) { FragmentTransaction var2 = this.getFragmentManager().beginTransaction(); android.app.Fragment var3 = this.getFragmentManager().findFragmentByTag(DIALOG_TAG); if (var3 != null) { var2.remove(var3); } var2.addToBackStack(null); String var4 = constructChildName(); String var5 = getValue(childDetails.getColumnmaps(), ""var5"", true); String var6 = getValue(childDetails.getColumnmaps(), ""mother_first_name"", true); if (StringUtils.isBlank(var4) && StringUtils.isNotBlank(var6)) { var4 = ""B/o "" + var6.trim(); } String var7 = getValue(childDetails.getColumnmaps(), ""zeir_id"", false); String var8 = """"; String var9 = getValue(childDetails.getColumnmaps(), ""dob"", false); if (StringUtils.isNotBlank(var9)) { DateTime var10 = new DateTime(getValue(childDetails.getColumnmaps(), ""dob"", false)); var8 = DateUtil.getDuration(var10); } Photo var11 = getProfilePhotoByClient(); WeightWrapper var12 = new WeightWrapper(); var12.setId(childDetails.entityId()); WeightRepository var13 = getVaccinatorApplicationInstance().weightRepository(); List<Weight> var14 = var13.findLast5(childDetails.entityId()); if (!var14.isEmpty()) { var12.setWeight(var14.get(var1).getKg()); var12.setUpdatedWeightDate(new DateTime(var14.get(var1).getDate()), false); var12.setDbKey(var14.get(var1).getId()); } var12.setGender(var5); var12.setPatientName(var4); var12.setPatientNumber(var7); var12.setPatientAge(var8); var12.setPhoto(var11); var12.setPmtctStatus(getValue(childDetails.getColumnmaps(), ""pmtct_status"", false)); var12.setDateOfBirth(var9); EditWeightDialogFragment var15 = EditWeightDialogFragment.newInstance(this, var12); var15.show(var2, DIALOG_TAG); } "	0	1	0	0	0	0
"@Override public void Func1(Map var1, TopologyContext var2, OutputCollector var3) { try { boltService = var2.getThisComponentId(); logger = LoggerFactory.getLogger(boltService); EventSender var4; if (injectedEventSender != null) { var4 = injectedEventSender; } else if (RiemannDiscovery.getInstance().isAWS()) { var4 = RiemannEventSender.getInstance(); } else { var4 = new LoggerEventSender(); } monitor = new Monitor(var1, boltService, var4); injectEventSender(delegate, monitor); delegate.Func1(var1, var2, new MonitoredOutputCollector(var3)); } catch(Throwable t) { logger.warn(""Error during bolt Func1 : "", t); throw Throwables.propagate(t); } } "	0	1	0	0	0	0
"public void Func1(String var1) { for (Card var2 : classCards) { if (var2.getName().equals(var1)) { var2.setAmount("""" + Integer.parseInt(var2.getAmount() + 1)); return; } } Card var3 = new Card(var1, """" + 1); classCards.add(var3); } "	1	1	0	1	0	0
"private static P4Job Func1(@NotNull final Server var1, @NotNull final String var2) throws ConnectionException, AccessException { List<Map<String, Object>> var3 = var1.execMapCmdList(CmdSpec.JOB, new String[]{""-o"", var2}, null); if (var3 != null) { for (final Map<String, Object> var4 : var3) { String var5 = var1.getErrorStr(var4); if (var5 != null) { if (var1.isAuthFail(var5)) { throw new AccessException(var5); } else { final String var6 = P4Bundle.message(""error.job.parse"", var2, var4.get(""code0"")); LOG.error(var6); LOG.warn(""Problem parsing job "" + var2 + "" with result maps: "" + var3); return new P4Job(var2, var6); } } if (!var1.isInfoMessage(var4)) { return new P4Job(new Job(var1, var4)); } } } return null; } "	0	0	0	0	0	1
"public void Func1 (HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException  { log.info(""DeleteLoadJobFilesServlet: deleting files""); DeleteLoadJobFilesServletHandler var3 = new DeleteLoadJobFilesServletHandler (var1.getParameterMap(), new GoogleCredentialProvider()); log.info(""Retry count: "" + var1.getHeader(""X-AppEngine-TaskRetryCount"")); int var4 = Integer.parseInt(var1.getHeader(""X-AppEngine-TaskRetryCount"")); var3.deleteFiles(); var2.setStatus(var3.getStatus()); if (var4 > 0 && var4 % 8 == 0 && var3.getStatus() != DeleteLoadJobFilesServletHandler.STATUS_OK) { com.risevision.gcslogs.alert.AlertService.alert (""Problems deleting a load job's files"", errorMessage); } } "	0	0	1	1	0	0
"public boolean Func1() { Socket var1 = RankedCvCClient.connection; if(var1.isConnected()) { try(PrintWriter writer = new PrintWriter(var1.getOutputStream()); Scanner scanner = new Scanner(var1 .getInputStream())) { StringBuilder var2 = new StringBuilder(); for (char var3: password) { var2.append(var3); } writer.println(""login -"" + ign + "" -"" + var2); writer.flush(); var2 = null; password = null; //so password is immediately thrown out of memory String var4 = scanner.next(); if(var4.startsWith(""Login successful"")) { return this.validated = true; } } catch(IOException e) { System.out.println(""Error contacting servers, check your internet connection.""); e.printStackTrace(); } } else { System.err.println(""There's no connection to verify the login! Check your internet connection and retry!""); } return false; } "	0	1	0	0	0	0
"public static void Func1(String[] var1) { ManchesterUnitedStats var2 = new ManchesterUnitedStats(""manchester united""); var2.computeResults(); var2.computePoints(); var2.displayResults(); } "	0	0	0	1	1	0
"@Override public void Func1(@Nullable Bundle var1) { if (ActivityCompat.checkSelfPermission(this, permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) { requestLocationPermissions(); } else { Location var2 = LocationServices.FusedLocationApi.getLastLocation( mGoogleApiClient); if (var2 != null) { Toast.makeText(this, ""Location data: "" + var2.getLatitude() + var2.getLongitude(), Toast.LENGTH_SHORT).show(); LatLng var3 = new LatLng(var2.getLatitude(), var2.getLongitude()); mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(var3, 18)); } LocationServices.FusedLocationApi.requestLocationUpdates( mGoogleApiClient, mLocationRequest, this); } } "	0	1	0	0	0	0
public List<IAnt> Func1() { return this.ants; } 	0	0	0	0	0	1
"public double Func1(final String var1) { double var2 = Double.NaN; double[] var3 = new double[baselineMetricPerDimension.values().size()]; int var4 = 0; for (Double var5 : baselineMetricPerDimension.values()) { var3[var4] = var5; var4++; } double[] var6 = new double[testMetricPerDimension.values().size()]; var4 = 0; for (Double var5 : testMetricPerDimension.values()) { var6[var4] = var5; var4++; } if (""t"".equals(var1)) { var2 = TestUtils.tTest(var3, var6); } else if (""pairedT"".equals(var1)) { var2 = TestUtils.pairedTTest(var3, var6); } else if (""wilcoxon"".equals(var1)) { var2 = new WilcoxonSignedRankTest().wilcoxonSignedRankTest(var3, var6, true); } return var2; } "	1	1	1	1	1	0
"private void Func1(Response var1, int... var2) { if (var1 == null) throw new WebApplicationException(""No var1""); if (ArrayUtils.contains(var2, var1.getStatus())) return; String var3 = null; Object var4 = var1.getEntity(); if (var4 != null) { try { if (var4 instanceof HttpEntity) var3 = EntityUtils.toString((HttpEntity) var4); else if (var4 instanceof InputStream) var3 = IOUtils.toString((InputStream) var4); } catch (IOException e) { var3 = null; } } if (var3 == null && var1.getStatusInfo() != null) var3 = var1.getStatusInfo().getReasonPhrase(); throw new WebApplicationException(var3, var1); } "	0	1	0	0	0	0
public ExpandableAdapter Func1(Integer... var1) { mParentLongClickTargets = var1; return this; } 	0	0	0	0	0	1
public void Func1(int var1) { getMode(); if (var1 == mExpandCollapseMode.var1) return; mExpandCollapseMode.var1 = var1; } 	0	0	0	0	0	1
public int Func1() { return sprite.Func1(); } 	0	0	0	0	0	1
"private void Func1(File var1) { if (var1 == null) { return; } Document var2 = null; try { var2 = JDOMUtil.loadDocument(var1); } catch (JDOMException ex) { } catch (IOException ex) { } Element var3 = null; if (var2 != null) { Element var4 = var2.getRootElement(); if (""project"".equals(var4.getName())) { for (Object var5 : var4.getChildren(""component"")) { if (var5 instanceof Element && ""MPSProject"".equals(((Element) var5).getAttributeValue(""name""))) { var3 = (Element) var5; break; } } } } if (var3 != null) { Func1(var1, var3); } } "	0	1	1	0	0	0
"private void Func1() { if (mTransactionResponse != null) { if (getActivity() != null) { if ( mPaymentType == Constants.PAYMENT_METHOD_MANDIRI_BILL_PAYMENT ) { mTextViewBankName.setText(MANDIRI_BILL); } else if ( mPaymentType  == Constants.PAYMENT_METHOD_PERMATA_VA_BANK_TRANSFER ) { mTextViewBankName.setText(VIRTUAL_ACCOUNT); } else if ( mPaymentType == Constants.PAYMENT_METHOD_INDOSAT_DOMPETKU ) { mTextViewBankName.setText(getActivity().getResources().getString(R.string .indosat_dompetku)); } else if (  mPaymentType == Constants.PAYMENT_METHOD_MANDIRI_CLICK_PAY){ mTextViewBankName.setText(getActivity().getResources().getString(R.string .mandiri_click_pay)); } } mTextViewTransactionTime.setText(mTransactionResponse.getTransactionTime()); mTextViewOrderId.setText(mTransactionResponse.getOrderId()); String var1 = mTransactionResponse.getGrossAmount(); String var2 = var1.split(""."").length == 2 ? var1.split(""."")[0] : var1; mTextViewAmount.setText(var2); if (mTransactionResponse.getTransactionStatus().contains(PENDING) || mTransactionResponse.getTransactionStatus().contains(""pending"")) { } else if (mTransactionResponse.getStatusCode().equalsIgnoreCase(getString(R.string.success_code_200)) || mTransactionResponse.getStatusCode().equalsIgnoreCase(getString(R.string.success_code_201))) { setUiForSuccess(); } else { setUiForFailure(); if (getActivity() != null) { if (mPaymentType == Constants.PAYMENT_METHOD_INDOSAT_DOMPETKU) { ((IndosatDompetkuActivity) getActivity()).activateRetry(); } else if (mPaymentType == Constants.PAYMENT_METHOD_MANDIRI_CLICK_PAY){ ((MandiriClickPayActivity) getActivity()).activateRetry(); if ( mTransactionResponse != null && mTransactionResponse.getTransactionStatus().equalsIgnoreCase(""deny"")){ mTextViewTransactionStatus.setText(""Payment Denied.""); } } else { ((BankTransferActivity) getActivity()).activateRetry(); } } } } } "	0	0	0	0	0	1
"@Override public void Func1(final Collection<ParameterValue> var1) { SwingUtilities.invokeLater(new Runnable() { Hashtable<String,TreeContainer> var2 = new Hashtable<String,TreeContainer>(); DefaultMutableTreeNode Func2(SequenceContainer var3) { if (var3.getBaseContainer() == null) { return structureRoot; } TreeContainer var4 = var2.get(var3.getOpsName()); if (var4 == null) { var4 = new TreeContainer(var3); var2.put(var3.getOpsName(), var4); } Func2(var3.getBaseContainer()).add(var4); return var4; } @Override public void Func3() { Object[] var5 = new Object[parametersTable.getColumnCount()]; DataEncoding var6; Calibrator var7; Object var8; String var9; parametersTable.clear(); structureRoot.removeAllChildren(); for (ParameterValue var10:var1) { var9 = var10.getParameter().getOpsName(); Func2(var10.getParameterEntry().getSequenceContainer()).add(new TreeEntry(var10)); var5[0] = var9; var5[1] = StringConvertors.toString(var10.getEngValue(), false); var5[2] = StringConvertors.toString(var10.getRawValue(), false); var5[3] = var10.getWarningRange() == null ? """" : Double.toString(var10.getWarningRange().getMinInclusive()); var5[4] = var10.getWarningRange() == null ? """" : Double.toString(var10.getWarningRange().getMaxInclusive());; var5[5] = var10.getCriticalRange() == null ? """" : Double.toString(var10.getCriticalRange().getMinInclusive()); var5[6] = var10.getCriticalRange() == null ? """" : Double.toString(var10.getCriticalRange().getMaxInclusive()); var5[7] = String.valueOf(var10.getAbsoluteBitOffset()); var5[8] = String.valueOf(var10.getBitSize()); var8 = var10.getParameter().getParameterType(); if (var8 instanceof EnumeratedParameterType) { var5[9] = var8; } else if (var8 instanceof BaseDataType) { var6 = ((BaseDataType)var8).getEncoding(); var7 = null; if (var6 instanceof IntegerDataEncoding) { var7 = ((IntegerDataEncoding) var6).getDefaultCalibrator(); } else if (var6 instanceof FloatDataEncoding) { var7 = ((FloatDataEncoding) var6).getDefaultCalibrator(); } var5[9] = var7 == null ? ""IDENTICAL"" : var7.toString(); } parametersTable.addRow(var5); } structureRoot.setUserObject(currentPacket); structureModel.nodeStructureChanged(structureRoot); structureTree.setRootVisible(true); for (TreeContainer var4:var2.values()) { structureTree.expandPath(new TreePath(var4.getPath())); } currentPacket.hexdump(hexDoc); hexText.setCaretPosition(0); parametersTable.setRowSelectionInterval(0, 0); } }); } "	0	0	0	0	0	1
@Override public boolean Func1(String[] var1, int var2) { if(var2 == 0 || var1.length == 0) return false; String[] var3 = Arrays.copyOfRange(var1,1,var1.length); return getSubCommand(var1[1]).Func1(var3, var2-1); } 	1	0	1	1	0	0
"private void Func1(String var1, ServiceException var2) throws IOException { if (""NoSuchKey"".equals(var2.getErrorCode())) { throw new FileNotFoundException(""Key '"" + var1 + ""' does not exist in OSS""); } else { Func1(var2); } } "	0	0	0	0	0	1
"private Label Func1() { Label Func1 = new Label(); Func1.setId(""wager""); return Func1; } "	1	0	0	1	0	0
"@Override public List<PatientMatch> Func1(Patient var1) { List<PatientMatch> var2 = new LinkedList<PatientMatch>(); for (MatchFinder var3 : this.matchFinderProvider.get()) { try { List<PatientMatch> var4 = var3.Func1(var1); var2.addAll(var4); this.logger.debug(""Found {} var2 by {}: "", var2.size(), var3.getClass().getSimpleName()); for (PatientMatch var5 : var4) { this.logger.debug(var5.toCompactString()); } } catch (Exception ex) { this.logger.error(""Failed to invoke var2 finder [{}]"", var3.getClass().getCanonicalName(), ex); } } return var2; } "	0	0	0	1	1	0
"@PUT @Consumes(MediaType.APPLICATION_JSON) @Path(""/{var1}/{var2}/{var3}"") public Response Func1(@PathParam(""var1"") String var1, @PathParam(""var2"") String var2, @PathParam(""var3"") String var3, ServiceRegistryEntry var4) { if (var1 == null || var2 == null || var3 == null || !var4.isValid()) { log.info(""ServiceRegistry:Query throws BadPayloadException""); throw new BadPayloadException(""Bad payload: var2 request form has missing/incomplete mandatory fields.""); } var4.setProvidedService(new ArrowheadService()); var4.getProvidedService().setServiceDefinition(var2); var4.getProvidedService().setServiceGroup(var1); var4.getProvidedService().setInterfaces(new ArrayList<String>()); var4.getProvidedService().getInterfaces().add(var3); boolean var5; try { var5 = ServiceRegistry.unRegister(var4); } catch (DnsException e) { return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build(); } if (var5) return Response.status(Response.Status.OK).build(); else return Response.status(Response.Status.NO_CONTENT).build(); } "	1	1	0	0	0	0
"public void Func1(CommandParserArgs var1) { if (var1 != null) { while (!var1.isEmpty()) { var1.tabComplete(keywords); String var2 = var1.remove(); switch (var2) { case ""action"": parseActions(var1); break; case ""block"": case ""blockid"": parseBlock(var1); break; case ""before"": parseBefore(var1); break; case ""after"": parseAfter(var1); break; case ""range"": parseRange(var1); break; case ""whitelist"": parseWhitelist(var1,true); break; case ""blacklist"": parseWhitelist(var1,false); break; default: throw new TranslatedCommandException(""Expected Keyword here!""); } } } if (Awhitelist == null) { Awhitelist = !actions.isEmpty(); } if (Bwhitelist == null) { Bwhitelist = !blocks.isEmpty(); } } "	0	0	0	0	0	1
"public void Func1(FermatBundle var1) { int var2=0; try { if(var1.contains(BroadcasterNotificationType.FAN_WALLET_BROADCAST_NOTIFICATION.getCode())) { System.out.println(""TKY_Broad_Arrive:""); if (var1.contains(BroadcasterNotificationType.SONG_INFO.getCode())) { System.out.println(""TKY_BROAD_SONGINFO:"" + ((Song) var1.getSerializable(BroadcasterNotificationType.SONG_INFO.getCode())).getName()); searchInViewPosition((Song) var1.getSerializable(BroadcasterNotificationType.SONG_INFO.getCode()), (UUID) var1.getSerializable(BroadcasterNotificationType.SONG_ID.getCode())); } if (var1.contains(BroadcasterNotificationType.DOWNLOAD_PERCENTAGE.getCode())) { System.out.println(""TKY_BROAD_DOWNLOAD_PERCENTAGE:"" + var1.getString(BroadcasterNotificationType.DOWNLOAD_PERCENTAGE.getCode())); var2 = searchInViewBySongId((UUID) var1.getSerializable(BroadcasterNotificationType.SONG_ID.getCode())); updateProgress(var2, var1.getString(BroadcasterNotificationType.DOWNLOAD_PERCENTAGE.getCode()).split(""%"")[0]); } if (var1.contains(BroadcasterNotificationType.DOWNLOAD_EXCEPTION.getCode())) { System.out.println(""TKY_BROAD_DOWNLOAD_EXCEPTION:"" + var1.getString(BroadcasterNotificationType.DOWNLOAD_EXCEPTION.getCode())); var2 = searchInViewBySongId((UUID) var1.getSerializable(BroadcasterNotificationType.SONG_ID.getCode())); downloadproblem(var2); } if (var1.contains(BroadcasterNotificationType.SONG_CANCEL.getCode())) { System.out.println(""TKY_BROAD_SONG_CANCEL:"" + var1.getString(BroadcasterNotificationType.SONG_CANCEL.getCode())); var2 = searchInViewBySongId((UUID) var1.getSerializable(BroadcasterNotificationType.SONG_ID.getCode())); cancelNotification(var2); } downloading=true; } } catch (IllegalAccessException e) { System.out.println(""TKY_Error On update var1:"" + e); e.printStackTrace(); } } "	1	0	0	1	0	0
"public void Func1 (JSONArray var1) throws JSONException { JSONObject var2 = var1.getJSONObject(0); String var3 = getJSONProperty(var2, ""var3""); String var4[] = var3.split(""\\.""); String var5 = var4[var4.length-1]; InputStream var6 = null; OutputStream var7 = null; File var8= Environment.getExternalStorageDirectory(); if(!var8.exists()) { boolean var9= var8.mkdirs(); } try { File var10= new File(var8, ""output.""+var5); var10.createNewFile(); var6 = this.cordova.getActivity().getAssets().open(""www/""+var3); var7 =new FileOutputStream(var10); byte var11[]=new byte[1024]; int var12; while((var12=var6.read(var11))>0) var7.write(var11,0,var12); var7.close(); var6.close(); Uri var13 = Uri.fromFile(var10); Intent var14 = new Intent(Intent.ACTION_VIEW); var14.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); var14.setDataAndType(var13, ""image/""+var5); this.cordova.getActivity().startActivity(var14); } catch (IOException e) { Log.d(""FullScreenImagePlugin"", ""Could not create file: "" + e.toString()); } } "	0	1	0	0	0	0
"private static void Func1(@NotNull final List<BaseDataReport> var1) { final BaseDataReport var2 = extractReportData(var1, MappingCheck.MAPPING_PERCENTAGE_MAPPED); assertEquals(""99.69"", var2.getValue()); final BaseDataReport var3 = extractReportData(var1, MappingCheck.MAPPING_PROPORTION_MAPPED_DIFFERENT_CHR); assertEquals(""0.0"", var3.getValue()); final BaseDataReport var4 = extractReportData(var1, MappingCheck.MAPPING_PROPERLY_PAIRED_PROPORTION_OF_MAPPED); assertEquals(""99.57"", var4.getValue()); final BaseDataReport var5 = extractReportData(var1, MappingCheck.MAPPING_PROPORTION_SINGLETON); assertEquals(""55.0"", var5.getValue()); final BaseDataReport var6 = extractReportData(var1, MappingCheck.MAPPING_MARKDUP_PROPORTION_DUPLICATES); assertEquals(""5.95"", var6.getValue()); final BaseDataReport var7 = extractReportData(var1, MappingCheck.MAPPING_PROPORTION_READ_VS_TOTAL_SEQUENCES); assertEquals(""89.8"", var7.getValue()); } "	0	1	0	0	0	0
"@Override public void Func1(List var1) { var1.add(DARK_GREEN + format(spawnNumberMin, spawnNumberMax)); var1.addAll(Arrays.asList(WordUtils.wrap((String)field.getField(), 28).split(""\r\n""))); ItemStack var2 = getIcon(); if (var2 != null) { var1.add(""---""); var1.add(entity.getName()); } } "	0	1	0	0	0	0
private void Func1() { SharedPreferences var1 = getActivity().getSharedPreferences(getString(R.string.MainActivity_dining_common_shared_prefs), Context.MODE_PRIVATE); List<Meal> var2 =  data.select(Meal.class).join(RepeatedEvent.class).on(Meal.ID.eq(RepeatedEvent.DINING_COMMON_ID)) .join(DiningCommon.class).on(DiningCommon.ID.eq(RepeatedEvent.DINING_COMMON_ID)) .where(DiningCommon.NAME.eq(var1.getString(MainActivity.STATE_CURRENT_DINING_COMMON, getString(R.string.DLG))) .and(RepeatedEvent.DAY_OF_WEEK.eq(displayDate.getDayOfWeek()))).get().toList(); ArrayList<String> var3 = new ArrayList<>(); for(Meal var4 : var2) { var3.add(var4.getName()); if(var4.getName().equals(getString(R.string.MenuFragment_breakfast_string)) || var4.getName().equals(getString(R.string.MenuFragment_brunch_string))) breakfastButton.setText(var4.getName()); } if(!var3.contains(getString(R.string.MenuFragment_breakfast_string)) && !var3.contains(getString(R.string.MenuFragment_brunch_string))) { breakfastButton.setVisibility(View.INVISIBLE); } if(!var3.contains(getString(R.string.MenuFragment_lunch_string))) { lunchButton.setVisibility(View.INVISIBLE); } if(!var3.contains(getString(R.string.MenuFragment_dinner_string))) { dinnerButton.setVisibility(View.INVISIBLE); } if(!var3.contains(getString(R.string.MenuFragment_latenight_string))) { lateNightButton.setVisibility(View.INVISIBLE); } } 	0	0	0	0	0	1
"@RequestMapping(value = ""/Func1"") public ModelAndView Func1(HttpServletRequest var1, HttpServletResponse var2) throws IOException { if (WebloggerContext.isBootstrapped()) { var2.sendRedirect(var1.getContextPath()+""/""); return null; } Map<String, Object> var3 = initializeMap(); try { ServletContext var4 = WebloggerContext.getServletContext(); ApplicationContext var5 = WebApplicationContextUtils.getRequiredWebApplicationContext(var4); WebloggerContext.Func1(var5); log.info(""EXITING - Bootstrap successful, forwarding to weblogger""); var2.sendRedirect(var1.getContextPath()+""/tb-ui/app/register""); return null; } catch (Exception e) { log.error(""Exception"", e); var3.put(""rootCauseException"", e); var3.put(""rootCauseStackTrace"", getRootCauseStackTrace(e)); } var3.put(""status"", StartupStatus.bootstrapError); return new ModelAndView("".install"", var3); } "	1	0	1	0	0	0
"public static ResultPage<Envelope<Event>> Func1(ScrollDirection var1) { Log.d(TAG, String.format(""DummyRequest: dir %s, page %s"", var1, pageCounters.get(var1))); sleep(2000); if (pageCounters.get(var1).equals(errorOccurrences.get(var1).first) && (errorOccurrences.get(var1).second > 0)) { errorOccurrences.put(var1, Pair.create(errorOccurrences.get(var1).first, errorOccurrences.get(var1).second - 1)); throw new RuntimeException(String.format(""Induced error. Direction %s Page %s Occurence %s"", var1, pageCounters.get(var1), errorOccurrences.get(var1).second)); } if (pageLimits.get(var1) <= pageCounters.get(var1)) { return new EmptyResultPage(); } return new DummyResultPage(envelopes(var1)); } "	1	0	0	1	0	0
public static void Func1(String var1, String var2) { logMessage(Level.INFO, var1, var2); } 	0	0	0	0	0	1
public static AMQMessage Func1(AndesMessageMetadata var1) { long var2 = var1.getMessageID(); StorableMessageMetaData var3 = convertAndesMetadataToAMQMetadata(var1); StoredAMQPMessage var4 = new StoredAMQPMessage(var2, var3); AMQMessage var5 = new AMQMessage(var4); return var5; } 	1	0	1	1	0	0
"@Override public void Func1(AIphrDataAssignment var1) { final LeftHandSideResult var2 = LeftHandSideAnalyzer.analyze(var1.getIdentifierBecomes()); var1.getDataAssignPhrase().Func4(new VisitorBase() { @Override public void Func2(AReadDataAssignPhrase var1) { assignPhrase(var2, var1.getReadPhrase()); } @Override public void Func3(final AReadasDataAssignPhrase var1) { final Variable var3 = context.codeGenerator.getVariableOrShowError(var1.getIdentifier()); if (!(var3 instanceof ObjectTypeVariable)) throw new RuntimeCompilerException(var2.getPosition(), ""EVENT variables must be simple identifiers""); var2.assign(context, new Switchable() { @Override public void Func4(Switch var4) { var1.getReadPhrase().Func4(new ReadPhraseCompiler(context)); try { context.writer.invokeInstance(DatabaseQuery.class.getMethod(""execute"")); } catch (NoSuchMethodException var6) { throw new RuntimeException(var6); } context.writer.loadStaticField(((ObjectTypeVariable) var3).field); context.writer.invokeStatic(Compiler.getRuntimeHelper(""readAs"", ArdenValue[].class, ObjectType.class)); } }); } @Override public void Func5(AMlmDataAssignPhrase var1) { createMlmVariable(var2, var1.getTerm(), null); } @Override public void Func6(AMlmiDataAssignPhrase var1) { createMlmVariable(var2, var1.getTerm(), var1.getStringLiteral()); } @Override public void Func7(AMlmsDataAssignPhrase var1) { createMlmVariable(var2, null, null); } @Override public void Func8(AImapDataAssignPhrase var1) { CallableVariable var5 = CallableVariable.getCallableVariable(context.codeGenerator, var2); context.writer.sequencePoint(var2.getPosition().getLine()); context.writer.loadThis(); context.writer.loadVariable(context.executionContextVariable); context.writer.loadStringConstant(ParseHelpers.getStringForMapping(var1.getMappingFactor())); context.writer.invokeInstance(ExecutionContextMethods.findInterface); context.writer.storeInstanceField(var5.mlmField); } @Override public void Func9(AEmapDataAssignPhrase var1) { EventVariable var6 = EventVariable.getEventVariable(context.codeGenerator, var2); context.writer.sequencePoint(var2.getPosition().getLine()); context.writer.loadThis(); context.writer.loadVariable(context.executionContextVariable); context.writer.loadStringConstant(ParseHelpers.getStringForMapping(var1.getMappingFactor())); context.writer.invokeInstance(ExecutionContextMethods.getEvent); context.writer.storeInstanceField(var6.field); } @Override public void Func10(AMmapDataAssignPhrase var1) { final String var7 = ParseHelpers.getStringForMapping(var1.getMappingFactor()); var2.assign(context, new Switchable() { @Override public void Func4(Switch var4) { context.writer.loadVariable(context.executionContextVariable); context.writer.loadStringConstant(var7); context.writer.invokeInstance(ExecutionContextMethods.getMessage); } }); } @Override public void Func11(AMasmapDataAssignPhrase var1) { super.Func11(var1); } @Override public void Func12(ADmapDataAssignPhrase var1) { DestinationVariable var3 = DestinationVariable.getDestinationVariable(context.codeGenerator, var2); context.writer.loadThis(); context.writer.loadStringConstant(ParseHelpers.getStringForMapping(var1.getMappingFactor())); context.writer.storeInstanceField(var3.field); } @Override public void Func13(ADasmapDataAssignPhrase var1) { super.Func13(var1); } @Override public void Func14(AObjectDataAssignPhrase var1) { ObjectTypeVariable.create(context.codeGenerator, var2, var1.getObjectAttributeList()); } @Override public void Func15(AArgDataAssignPhrase var1) { assignArgument(var2); } @Override public void Func16(ACphrDataAssignPhrase var1) { assignPhrase(var2, var1.getCallPhrase()); } @Override public void Func17(ANewobjDataAssignPhrase var1) { var2.assign(context, var1.getNewObjectPhrase()); } @Override public void Func18(AExprDataAssignPhrase var1) { var2.assign(context, var1.getExpr()); } }); } "	0	0	0	0	0	1
"private void Func1(List<Long> var1, Collection<DownloadInfo> var2) { for (DownloadInfo var3 : var2) { if (var1.contains(var3.batchId)) { deleteFileAndDatabaseRow(var3); } } String var4 = TextUtils.join("", "", var1); String[] var5 = {var4}; resolver.delete(Downloads.Impl.BATCH_CONTENT_URI, Downloads.Impl.Batches._ID + "" IN (?)"", var5); } "	0	1	1	0	0	0
"private static String Func1(Context var1) { try { String var2 = var1.getPackageManager() .getPackageInfo(var1.getPackageName(), 0).var2; if (var2.contains(""-"")) { var2 = var2.substring(0, var2.indexOf(""-"")); } return var2; } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); } return """"; } "	1	1	1	1	1	0
"@Test public void Func1() throws IOException { MockServer var1 = new MockServer() .enqueueAcceptKey() .start(); MockDeviceStore var2 = new MockDeviceStore(); TokenRepository var3 = new TokenRepository(new MockConfig(var1.getUrl(""/demo-auth/v1"")), var2); String var4 = var3.getDeviceToken(); assertEquals(var4.length(), 32); var1.shutdown(); } "	1	0	1	0	0	0
"@Test public void Func1() throws Exception { final BufferedImage var1 = new BufferedImage(80, 180, BufferedImage.TYPE_4BYTE_ABGR); final Graphics2D var2 = var1.createGraphics(); ScaleBarRenderSettings var3 = getSettings(var2, 1); var3.getParams().orientation = Orientation.VERTICAL_LABELS_RIGHT.getLabel(); var3.getParams().labelRotation = 45; var3.getParams().getSize().width = 80; var3.getParams().getSize().height = 180; var3.setMaxSize(new Dimension(80, 180)); var3.setSize(ScalebarGraphic.getSize(var3.getParams(), var3, var3.getMaxLabelSize())); ScalebarDrawer var4 = Type.LINE.createDrawer(var2, var3); var4.draw(); new ImageSimilarity(getFile(""expected-scalebar-line-labels-right-partially-rotated.png"")) .assertSimilarity(var1, 85); } "	0	0	1	1	0	0
"@Test public void Func1() throws Exception { final BufferedImage var1 = new BufferedImage(80, 180, BufferedImage.TYPE_4BYTE_ABGR); final Graphics2D var2 = var1.createGraphics(); ScaleBarRenderSettings var3 = getSettings(var2, 1); var3.getParams().orientation = Orientation.VERTICAL_LABELS_LEFT.getLabel(); var3.getParams().labelRotation = 90; var3.getParams().getSize().width = 80; var3.getParams().getSize().height = 180; var3.setMaxSize(new Dimension(80, 180)); var3.setSize(ScalebarGraphic.getSize(var3.getParams(), var3, var3.getMaxLabelSize())); ScalebarDrawer var4 = Type.LINE.createDrawer(var2, var3); var4.draw(); new ImageSimilarity(getFile(""expected-scalebar-line-labels-left-rotated.png"")) .assertSimilarity(var1, 160); } "	0	0	0	0	0	1
"private String Func1() { String var1 = TextUtilities.determineLineDelimiter(String.valueOf(unit.getContents()), ""\n""); return var1 + var1; } "	0	0	0	0	0	1
private void Func1(final Location var1) { final List<GeofencingRequest> var2 = getGeofencingRequests(var1); if (var2.isEmpty()) { onGeofencesRemoved(var1); return; } try { for (final GeofencingRequest var3 : var2) { LocationServices.GeofencingApi .addGeofences( play.getClient(), var3, GeofenceReceiver.getGeofencePendingIntent(context)) .setResultCallback(new ResultCallback<Status>() { @Override public void Func2(@NonNull Status var4) { if (var4.isSuccess()) { onGeofencesAdded(var1, var3.getGeofences(), var3.getInitialTrigger()); } else { onGeofencesFailed(null, var4.getStatusCode()); } } }); } } catch (SecurityException ex) { onGeofencesFailed(ex, 0); } } 	0	0	0	0	0	1
final static protected void Func1(final Pair<AffineModel2D, double[][]> var1, final ImageProcessor var2, final ImageProcessor var3, final ByteProcessor var4) { final int var5 = var3.getWidth() - 1; final int var6 = var3.getHeight() - 1; final double[][] var7 = var1.b; final double[] var8 = new double[2]; final double[] var9 = new double[2]; RenderTransformMesh.calculateTargetBoundingBox(var7, var8, var9); final int var10 = Math.var9(0, Util.roundPos(var8[0])); final int var11 = Math.var9(0, Util.roundPos(var8[1])); final int var12 = Math.var8(var5, Util.roundPos(var9[0])); final int var13 = Math.var8(var6, Util.roundPos(var9[1])); final double[] var14 = new double[2]; for (int var15 = var11; var15 <= var13; ++var15) { for (int var16 = var10; var16 <= var12; ++var16) { if (RenderTransformMesh.isInTargetTriangle(var7, var14)) { var14[0] = var16; var14[1] = var15; try { var1.a.applyInverseInPlace(var14); } catch (final Exception e) { continue; } var3.set(var16, var15, var2.getPixelInterpolated(var14[0], var14[1])); var4.set(var16, var15, 0xff); } } } } 	1	1	0	1	0	0
private void Func1() { if (existHintBlock()) { FrameLayout var1 = getHintBlockFrameLayout(); if (hintBlockView == NO_BLOCK_INFO_VIEW) { hintBlockView = hintBlock.getView(getContext(), hintCase, var1); hintBlockView.setAlpha(0); } var1.addView(hintBlockView); addView(var1); } if (existExtraBlock()) { RelativeLayout var2 = getExtraContentHolderRelativeLayout(); for (int var3 = 0; var3 < extraBlocks.size(); var3++) { View var4 = extraBlocks.get(var3).getView(getContext(), hintCase, this); if (showExtraContentHolderAnimators.get(var3) != ContentHolderAnimator.NO_ANIMATOR) { var4.setAlpha(0); } extraBlockViews.add(var4); var2.addView(var4); } addView(var2); } } 	1	0	0	1	0	0
public static void Func1(IPreferenceStore var1, IPreferenceStore var2) { String var3[] = { PreferenceConstants.PREF_MODEL_CHECKER, PreferenceConstants.PREF_SOLVER }; for (String var4 : var3) { initString(var1, var2, var4); } String var5[] = { PreferenceConstants.PREF_BOUNDED_MODEL_CHECKING, PreferenceConstants.PREF_INVARIANT_GENERATION, PreferenceConstants.PREF_K_INDUCTION, PreferenceConstants.PREF_INDUCTIVE_COUNTEREXAMPLES, PreferenceConstants.PREF_SMOOTH_COUNTEREXAMPLES, PreferenceConstants.PREF_DEBUG, PreferenceConstants.PREF_SPEAR_PRINT_FINAL_LUSTRE, PreferenceConstants.PREF_SPEAR_RECURSIVE_GRAPH, PreferenceConstants.PREF_SPEAR_WARN_ON_UNUSED_VARS, PreferenceConstants.PREF_SPEAR_ENABLE_IVC_ON_ENTAILMENT }; for (String var4 : var5) { initBool(var1, var2, var4); } String var6[] = { PreferenceConstants.PREF_PDR_MAX, PreferenceConstants.PREF_DEPTH, PreferenceConstants.PREF_SPEAR_CONSISTENCY_DEPTH }; for (String var4 : var6) { initInt(var1, var2, var4); } } 	0	0	0	0	0	1
@Override public boolean Func1(MenuItem var1) { switch (var1.getItemId()) { case R.id.wallet_options_safety: HelpDialogFragment.page(getFragmentManager(), R.string.help_safety); return true; case R.id.wallet_options_backup_wallet: handleBackupWallet(); return true; case R.id.wallet_options_restore_wallet: showDialog(DIALOG_RESTORE_WALLET); return true; case R.id.wallet_options_encrypt_keys: handleEncryptKeys(); return true; } return super.Func1(var1); } 	0	0	0	1	1	0
"private static String Func1(ProtoTask var1, COMMAND_TYPE var2) throws Error { switch (var2) { case ADD : return add(var1); case COMPLETE : return complete(var1.getId()); case DISPLAY : return display(); case DISPLAYDONE : return displayDone(); case DELETE : return delete(var1.getId()); case EDIT : return edit(var1.getId(), var1); default: throw new Error(""Unrecognized command type""); } } "	1	0	1	0	0	0
static String Func1(int var1, ProtoTask var2) { toDoList.Func1(var1, var2); String var3 = toDoList.displayID(var1); return String.format(RETURN_MESSAGE_FOR_EDIT, var3); } 	0	0	0	0	0	1
void Func1(Task var1) { taskList.Func1(var1); } 	0	0	0	0	0	1
"private boolean Func1() { String var1 = assertion.getKeepAlive(); if (NullChecker.isNullish(var1)) { var1 = getKeepAliveProperty(); } return NullChecker.isNotNullish(var1) && (var1.equalsIgnoreCase(""TRUE"") || var1.equalsIgnoreCase(""T"")); } "	0	1	1	1	0	0
"public static XmlElement Func1(IntrospectedTable var1) { XmlElement var2 = new XmlElement(""include""); //$NON-NLS-1$ var2.addAttribute(new Attribute(""refid"", //$NON-NLS-1$ var1.getBaseColumnListId())); return var2; } "	0	0	0	0	0	1
"public static Tag[] Func1(String var1) { if (var1.equals("""")) { return new Tag[]{}; } final String[] var2 = var1.var2("", ""); final List<Tag> var3 = Arrays.asList(var2).stream().map(e -> { try { return new Tag(e.replaceFirst(""Tag: "", """")); } catch (IllegalValueException e1) { assert false; return null; } }).var3(Collectors.toList()); return var3.toArray(new Tag[var2.length]); } "	1	0	1	1	0	0
@Override public File Func1(String var1, @Nullable Object var2) { ModuleResourceCache.CacheId var3 = ModuleResourceCache.parseCacheKey(var1); Module var4 = var3.getModule(); String var5 = var3.getName(); Path var6 = new Path(WORKFLOW_MODEL_DIR, var5); Resource var7  = var4.getModuleResolver().lookup(var6); return new File(var7.getPath().toString()); } 	0	1	0	0	0	0
@Nullable public User Func1() { if (_engineTask.Func1() == null) return null; else return UserManager.getUser(Integer.valueOf(_engineTask.Func1())); } 	1	0	1	1	0	0
"@Override public void Func1(DataSnapshot var1) { user = var1.getValue(FBUser.class); if(user.getSquads() != null) { hasSquad = true; } else { hasSquad = false; } if(user.getMeetups() != null) { hasMeetup = true; } else { hasMeetup = false; } if(user.getHosting() != null) { hasHost = true; } else { hasHost = false; } profileName.setText(user.getName()); if(user.getBio().trim() != null) { bio.setText(user.getBio().trim()); } else { bio.setText(""This user has no bio!""); } Glide.with(ProfileActivity.this) .load(user.getPicture().trim()) .diskCacheStrategy(DiskCacheStrategy.NONE) .skipMemoryCache(true) .listener(new RequestListener<String, GlideDrawable>() { @Override public boolean Func2(Exception var2, String var3, Target<GlideDrawable> var4, boolean var5) { return false; } @Override public boolean Func3(GlideDrawable var6, String var3, Target<GlideDrawable> var4, boolean var7, boolean var5) { if ((!profileName.getText().equals(""'Users Profile"")) && (profileImage != null)) { loadingOverlay.setVisibility(View.GONE); } return false; } }) .dontAnimate() .fitCenter() .error(R.drawable.com_facebook_profile_picture_blank_portrait) .into(profileImage); } "	1	0	1	0	0	0
@Override public AudioSource Func1() throws Exception { AudioBuffer var1 = new AudioBuffer(data, frequency, format); cache(var1); this.data.clear(); return new AudioSource(var1, null, null, null); } 	1	0	1	0	0	0
"public static Integer[][] Func1(Color[] var1, int var2, int var3){ if (var1.length > var2){ throw new IndexOutOfBoundsException(""The var2 of the gradient is invalid""); } float[] var4 = new float[var1.length + var3]; float var5 = 1f / var1.length, var6 = 0; for (int var7 = 0; var7 < var1.length; var7++){ var4[var7] = var6; var6 += var5; } var4[var1.length - 1] = 1.0f; return constructGradient(var1, var4, var2); } "	1	0	1	1	0	0
"@Override public boolean Func1(String var1) { MenuItem var2 = menuFinal.findItem(R.id.search); var2.collapseActionView(); List<Artist> var3=new ArrayList<Artist>(); for(Artist var4:artists) { if (var4.getNickname().contains(var1)) { var3.add(var4); } } listItem.clear(); for (int var5 = 0; var5 < var3.size(); var5++) { HashMap<String, Object> var6 = new HashMap<String, Object>(); var6.put(""imageView"", var3.get(var5).getImage()); var6.put(""textViewName"", var3.get(var5).getNickname()); var6.put(""textViewDesc"", var3.get(var5).getDesc()); var6.put(""textViewArticleCount"", var3.get(var5).getArticle_count()); var6.put(""textViewFollowerCount"", var3.get(var5).getFollower_count()); var6.put(""imageViewFollowed"", var3.get(var5).getFollowed()); var6.put(""id"", var3.get(var5).getId()); listItem.add(var6); } adapter.notifyDataSetChanged(); return true; } "	0	0	0	0	0	1
"@Override public boolean Func1(Event var1) { if (!isActivated()) { return handleInit(var1); } if (var1.isType(IKEA_MESSAGE) && var1.getAttribute(""Direction"").equals(""Out"")) { sendCoapsMessage(var1.getAttribute(IKEA_RESOURCE), var1.getAttribute(IKEA_METHOD), var1.getAttribute(IKEA_BODY), var1.getAttribute(IKEA_ID)); return true; } else if (var1.isType(""ReportItems"")) { reportNodes(); } else if (var1.isType(MDNS_CREATION_MESSAGE) && var1.getAttribute(MDNSScanner.MDNS_LOCATION).equals(address)) { setAddress(var1.getAttribute(MDNSScanner.MDNS_LOCATION)); return true; } return false; } "	0	0	0	0	0	1
public void Func1(String var1) { MessageFlusher.getInstance().clearUpAllBufferedMessagesForDelivery (storageQueueNameToDestinationMap.get(var1)); Set<Slot> var2 = subscriptionSlotTracker.remove(var1); if(!var2.isEmpty()) { for (Slot var3:var2) { clearAllTrackingWhenSlotOrphaned(var3); } } } 	1	1	1	0	1	0
"@POST @Path(""/mepin/response"") @Consumes(""application/x-www-form-urlencoded"") public Response Func1(MultivaluedMap<String, String> var1) throws SQLException { String var2 = var1.getFirst(""transaction_id""); log.info(""MePIN transactionID : "" + var2); MobileConnectConfig.MePinConfig var3 = configurationService.getDataHolder().getMobileConnectConfig().getMePinConfig(); String var4 = var3.getUsername(); String var5 = var3.getPassword(); String var6 = var3.getAuthEndPoint(); String var7 = var4 + "":"" + var5; HttpPost var8 = new HttpPost(var6); try { String var9 = Base64.getEncoder().encodeToString(var7.getBytes(""utf-8"")); SSLContext var10 = SSLContext.getInstance(""SSL""); var10.init(null, new TrustManager[]{new X509TrustManager() { public X509Certificate[] Func2() { System.out.println(""Func2 =============""); return null; } public void Func3(X509Certificate[] var11, String var12) { System.out.println(""Func3 =============""); } public void Func4(X509Certificate[] var11, String var12) { System.out.println(""Func4 =============""); } }}, new SecureRandom()); SSLSocketFactory var13 = new SSLSocketFactory(var10); var13.setHostnameVerifier(new X509HostnameVerifier() { public boolean Func5(String var14, SSLSession var15) { return true; } public void Func5(String var16, String[] var17, String[] var18) throws SSLException { } public void Func5(String var16, X509Certificate var19) throws SSLException { } public void Func5(String var16, SSLSocket var20) throws IOException { } }); Scheme var21 = new Scheme(""https"", 443, var13); SchemeRegistry var22 = new SchemeRegistry(); var22.register(var21); ClientConnectionManager var23 = new SingleClientConnManager(var22); HttpClient var24 = new DefaultHttpClient(var23); var8.setHeader(""Authorization"", ""Basic "" + var9); List<NameValuePair> var25 = new ArrayList<>(); MePinTransactionStatusRequest var26 = new MePinTransactionStatusRequest(); var26.setAction(""transactions/get""); var26.setAppId(""5497e675-ecb8-45e2-83c7-a9b12d3f290e""); var26.setTransactionId(var2); String var27 = new Gson().toJson(var26); var25.add(new BasicNameValuePair(""mepin_data"", var27)); var8.setEntity(new UrlEncodedFormEntity(var25)); log.info(""yyyy : "" + var27); HttpResponse var28 = var24.execute(var8); BufferedReader var29 = new BufferedReader(new InputStreamReader(var28.getEntity().getContent())); StringBuilder var30 = new StringBuilder(); String var31; while ((var31 = var29.readLine()) != null) { var30.append(var31); } log.info(""xxxxxxxxxx "" + var30.toString()); var29.close(); MePinTransactionStatusResponse var32 = new Gson().fromJson(var30.toString(), MePinTransactionStatusResponse.class); String var33 = DbUtil.getSessionId(var2); if(""Completed"".equalsIgnoreCase(var32.getStatus())){ DbUtil.updateRegistrationStatus(var33, ""APPROVED""); }else { DbUtil.updateRegistrationStatus(var33, ""EXPIRED""); } } catch (KeyManagementException e) { log.error(""Error occurred"", e); } catch (UnsupportedEncodingException e) { log.error(""Error occurred"", e); } catch (ClientProtocolException e) { log.error(""Error occurred"", e); } catch (IOException e) { log.error(""Error occurred"", e); } catch (AuthenticatorException e) { log.error(""Error occurred"", e); } catch (NoSuchAlgorithmException e) { log.error(""Error occurred"", e); } return Response.status(200).build(); } "	0	0	0	0	0	1
@Test public void Func1() throws Exception { FastGraph var1 = FastGraph.jsonStringGraphFactory(TestRunner.get5Node7EdgeA(), false); FastGraph var2 = FastGraph.jsonStringGraphFactory(TestRunner.get4Node5Edge(), false); nc = new AlwaysTrueNodeComparator(var1, var2); ec = new AlwaysTrueEdgeComparator(var1, var2); ApproximateSubgraphIsomorphism var3 = new ApproximateSubgraphIsomorphism(var1, var2, 4, 1, nc, ec); int var4 = var3.subgraphIsomorphismFinder(); assertEquals(var4,2); } 	0	1	0	0	0	0
@Test public void Func1() throws Exception { FastGraph var1 = FastGraph.jsonStringGraphFactory(TestRunner.get5Node7EdgeA(), false); FastGraph var2 = FastGraph.jsonStringGraphFactory(TestRunner.get5Node5Edge(), false); nc = new AlwaysTrueNodeComparator(var1, var2); ec = new AlwaysTrueEdgeComparator(var1, var2); ApproximateSubgraphIsomorphism var3 = new ApproximateSubgraphIsomorphism(var1, var2, 5, 1, nc, ec); int var4 = var3.subgraphIsomorphismFinder(); assertEquals(var4,0); } 	0	1	0	0	0	0
private void Func1(NotificationManager var1){ synchronized (activeNotifications){ Iterator<Integer> var2 = activeNotifications.iterator(); while (var2.hasNext()){ var1.cancel(NOTIFICATION_TAG, var2.next()); var2.remove(); } } } 	0	1	0	0	0	0
"public void Func1(Morphium var1) throws Exception { long var2 = System.currentTimeMillis(); long var3 = System.currentTimeMillis(); var1.dropCollection(UncachedObject.class); List<Thread> var4 = new Vector<>(); for (int var5 = 0; var5 < 50; var5++) { final int var6 = var5; Thread var7 = new Thread() { @Override public void Func2() { for (int var8 = 0; var8 < 1000; var8++) { UncachedObject var9 = new UncachedObject(); var9.setCounter(var6 * 100 + var8); var9.setValue(""By thread "" + var6); var1.store(var9); } } }; var4.add(var7); var7.var3(); } var3 = System.currentTimeMillis(); for (int var5 = 0; var5 < 50; var5++) { final int var6 = var5; Thread var7 = new Thread() { @Override public void Func2() { for (int var8 = 0; var8 < 1000; var8++) { Query<UncachedObject> var10 = var1.createQueryFor(UncachedObject.class); var10.f(""counter"").eq(var6 * 100 + var8); UncachedObject var9 = var10.get(); } } }; var4.add(var7); var7.var3(); } for (Thread var6 : var4) var6.join(); long var11 = System.currentTimeMillis() - var2; log.info(""Overall var11 "" + var11); } "	1	0	1	1	0	0
public void Func1() { while (!this.playerQueue.isEmpty()) { final Player var1 = this.playerQueue.poll(); if (var1 != null && !var1.isDead()) { Projectile.this.applyDamage(var1); } } while (!this.mobQueue.isEmpty()) { final Mob var2 = this.mobQueue.poll(); if (var2 != null && !var2.isDead()) { applyDamage(var2); } } this.queuedEffect = false; } 	1	1	1	1	1	0
public void Func1(PeakList var1, JDXCompound var2, int var3, double var4, boolean var5, boolean var6) { if (!var5) { for (int var7=0; var7 < var1.getNumberOfRows(); ++var7) { PeakListRow var8 = var1.getRows()[var7]; if (var8.getPreferredPeakIdentity() != null && var8.getPreferredPeakIdentity().getName().equals(var2.getName())) { String var9 = var8.getPreferredPeakIdentity().getPropertyValue(AlignedRowProps.PROPERTY_IS_REF); if (var9 != null && var9.equals(AlignedRowProps.TRUE)) { return; } } } } for (int var7=0; var7 < var1.getNumberOfRows(); ++var7) { PeakListRow var8 = var1.getRows()[var7]; CustomJDXSearchTask.applyRowIdentity(var8, var2, var3, var4, var5, var6); progressItemNumber++; } } 	1	1	0	1	0	0
private <P> void Func1(final P var1, final TakesValue var2, final Converter var3) { Object var4 = var3.toWidgetValue(var1); var2.setValue(var4); } 	1	0	1	1	0	0
"private void Func1() { addSetting(""check-updates"", true); addSetting(""allowed-shops"", new String[]{""CHEST"", ""TRAPPED_CHEST"", ""SHULKER""}); addSetting(""allowed-directions"", new String[]{""DOWN"", ""WEST"", ""SOUTH"", ""EAST"", ""NORTH"", ""UP""}); addSetting(""itrade-shop-name"", ""Server Shop""); addSetting(""allow-double-trade"", true); addSetting(""allow-quad-trade"", true); addSetting(""max-edit-distance"", 4); addSetting(""max-shop-users"", 5); addSetting(""illegal-items"", new String[]{""Bedrock"", ""Command_Block""}); addSetting(""allow-custom-illegal-items"", true); addSetting(""tradeshop-name"", ""Trade""); addSetting(""itradeshop-name"", ""iTrade""); addSetting(""bitradeshop-name"", ""biTrade""); save(); } "	0	0	1	1	0	0
public String Func1() { String var1 = selectedTarget; if (var1 == null) { Target[] var2 = DESCRIPTOR.getTargets(); if (var2.length > 0) { var1 = var2[0].getUrl(); } } return var1; } 	0	1	0	0	0	0
"public UploadFile Func1(MultipartFile var1,User var2) throws IOException, ForbiddenTypeFileException { String var3 = var1.getOriginalFilename().substring(var1.getOriginalFilename().lastIndexOf(""."")); if(blackListExtentension.contains(var3)){ throw new ForbiddenTypeFileException(); } UploadFile var4 = new UploadFile(); var4.settingPath(this.rootLocation); var4.tempUpload(var1, var2); fileRepository.save(var4); return var4; } "	1	0	0	1	0	0
"public void Func1(String var1, int var2) { if (getContigID(""M"") != null) return; tmpContigID.put(var1, var2); contigID.put(var1, var2); } "	1	0	1	0	0	0
"@Test public void Func1() { runJavaScript(""json/JsObject"", ""encodePrettily""); Assert.assertEquals(""{\""foo\"":\""foo_value\""}"", o); runGroovy(""json/JsObject"", ""encodePrettily""); Assert.assertEquals(""[foo:foo_value]"", o); runRuby(""json/JsObject"", ""encodePrettily""); Assert.assertEquals(""{\""foo\"":\""foo_value\""}"", o); } "	0	0	0	1	1	0
"@Override public void Func1(String var1, String var2, String var3) { CmsCI var4 = GSON.fromJson(var1, CmsCI.class); CmsCISimple var5 = cmsUtil.custCI2CISimple(var4, ""df""); indexer.indexEvent(""var4"", GSON_ES.toJson(var5)); if (""manifest.Environment"".equals(var4.getCiClassName()) && StringUtils.isNotEmpty(var4.getComments()) && var4.getComments().startsWith(SUCCESS_PREFIX)) { deploymentPlanProcessor.process(var5); } else if (""account.Policy"".equals(var4.getCiClassName()) || ""mgmt.manifest.Policy"".equals(var4.getCiClassName())) { policyProcessor.process(var5); } if (var4.getCiClassName().startsWith(""bom"")) { var1 = this.process(var5); } else { var1 = GSON_ES.toJson(var5); } indexer.index(String.valueOf(var5.getCiId()), ""var4"", var1); relationMessageProcessor.processRelationForCi(var1); } "	0	1	0	0	0	0
public double Func1(double var1, boolean var2) { if (dirty) updateTick(); Range var3 = getLocalRange(); double var4 = var3.getLower(); double var5 = var3.getUpper(); double var6 = 0; if (logScaleEnabled) { if (var1 <= 0) var1 = var4; var6 = ((Math.log10(var1) - Math.log10(var4)) / (Math.log10(var5) - Math.log10(var4)) * ((double) length - 2d * margin)) + margin; } else var6 = ((var1 - var4) / (var5 - var4) * ((double) length - 2d * margin)) + margin; if (var2) { if (orientation == Orientation.HORIZONTAL) return var6; else return length - var6; } else { if (orientation == Orientation.HORIZONTAL) return var6 + bounds.x; else return length - var6 + bounds.y; } } 	0	0	0	0	0	1
private void Func1(UniversityState var1, int var2) { var1.getWriter().startSection(Ontology.CS_C_DEPT, var1.getId(Ontology.CS_C_DEPT, var2)); var1.getWriter().addProperty(Ontology.CS_P_NAME, var1.getRelativeName(Ontology.CS_C_DEPT, var2), false); var1.getWriter().addProperty(Ontology.CS_P_SUBORGANIZATIONOF, Ontology.CS_C_UNIV, var1.getId(Ontology.CS_C_UNIV, var1.getInstances()[Ontology.CS_C_UNIV].count - 1)); var1.getWriter().endSection(Ontology.CS_C_DEPT); } 	0	0	0	0	0	1
@Override public void Func1(View var1) { EMChatManager.getInstance().logout(new EMCallBack() { @Override public void Func2() { getActivity().finish(); startActivity(new Intent(getActivity(), LoginActivity.class)); } @Override public void Func3(int var2, String var3) { } @Override public void Func4(int var4, String var5) { } }); } 	0	0	0	0	0	1
"@Test public void Func1() { final ICompositeNode var1 = this.getRootNode(""first\n\t\tabc\n\t""); StringConcatenation var2 = new StringConcatenation(); var2.append(""[ID:first][-WS:""); var2.newLine(); var2.append(""\\t\\t][INDENT:][ID:abc][-WS:""); var2.newLine(); var2.append(""][DEDENT:][-WS:\\t]""); var2.newLine(); Assert.assertEquals(var2.toString().trim(), this.asText(var1)); } "	0	1	0	0	0	0
"@Test public void Func1() { final ICompositeNode var1 = this.getRootNode(""""); Assert.assertEquals("""", this.asText(var1)); } "	0	1	0	0	0	0
"@Override public void Func1(int var1, int var2) { adapter = new ViewPagerAdapter(getSupportFragmentManager()); adapter.addFragment(DoctorFragment.newInstance(MyDoctorRecyclerViewAdapter.HEARTTYPE, var1, var2), ""科內醫生""); adapter.addFragment(DivisionScoreFragment.newInstance(), ""本科評分""); adapter.addFragment(CommentFragment.newInstance(var1, var2, null, GACategory.DIVISION), ""本科評論""); ViewPager var3 = (ViewPager) findViewById(R.id.viewpager); var3.setAdapter(adapter); var3.setOffscreenPageLimit(2); TabLayout var4 = (TabLayout) findViewById(R.id.tabs); var4.setupWithViewPager(var3); } "	0	1	0	0	0	0
protected float[] Func1(int var1, int var2, int var3) throws ObjectsAreNotFullyLoadedException { var1 *= var2; var3 *= var2; float[] var4 = new float[NUMBER_OF_PASSES]; SimpleProfiler var5 = new SimpleProfiler(); for (int var6 = 0; var6 < NUMBER_OF_PASSES; var6++) { var5.start(); Pair<List<Library>, Pair<List<Book>, List<Person>>> var7 = readComplex(var2, var1, var3); if (checkIfLoaded(var7.first, var7.second.first, var7.second.second)) { throw new ObjectsAreNotFullyLoadedException(); } var4[var6] = var5.stop(); deleteComplex(new ArrayList<Library>(), var7.second.first, var7.second.second); System.gc(); } return var4; } 	1	1	1	1	1	0
"protected void Func1() { File var1 = null; try { ProcessBuilder var2 = new ProcessBuilder(snappyTest.getScriptLocation(""snappy-leads.sh""), ""-bg"", ""start""); var1 = new File("".""); String var3 = var1.getCanonicalPath() + File.separator + ""snappyLeaderSystem.var1""; File var4 = new File(var3); snappyTest.executeProcess(var2, var4); } catch (IOException e) { String var5 = ""problem occurred while retriving var4 path "" + var1; throw new TestException(var5, e); } } "	0	0	0	0	0	1
public long Func1(Action.ActionType var1) { DateTime var2 = DateTime.now(); return countActionsBetween(var2, var2, var1); } 	0	1	0	0	0	0
public long Func1(Action.ActionType var1) { DateTime var2 = DateTime.now(); return countActionsBetween(var2.minusDays(7), var2, var1); } 	0	1	0	0	0	0
public PKIClient Func1() { return client; } 	0	0	0	0	0	1
public boolean Func1(float var1) { if (getState() == State.OPEN && var1 > 0.0f) { balance = balance - var1; numWithdraws++; if (numWithdraws > 3) balance = balance - 1.0f; if (balance <= 0.0f) { setState(State.OVERDRAWN); } return true; } return false; } 	0	0	0	0	0	1
protected Criteria Func1(final YearFilterPagingRequest var1, final String var2) { Criteria[] var3 = null; Criteria var4 = new Criteria(); if (var1.getYear() == null) { var3 = new Criteria[1]; var3[0] = new Criteria(); } else { var3 = new Criteria[var1.getYear().size()]; for (int var5 = 0; var5 < var1.getYear().size(); var5++) { var3[var5] = where(var2).gte(getStartDate(var1.getYear().get(var5))) .lte(getEndDate(var1.getYear().get(var5))); } } return var1.getInvert() ? var4.norOperator(var3) : var4.orOperator(var3); } 	1	0	1	0	0	0
private List<TypeOfSample> Func1(List<String> var1) { List<TypeOfSample> var2 = new ArrayList<TypeOfSample>(); for( String var3 : var1){ TypeOfSample var4 = TypeOfSampleUtil.getTypeOfSampleById( var3 ); var4.setActive( false ); var4.setSysUserId(currentUserId); var2.add(var4); } return var2; } 	0	1	0	0	0	0
@Override public void Func1() { super.Func1(); bird.stop(); } 	0	1	0	0	0	0
"@Test public void Func1() throws Exception { dialPlanContextList = dialPlanGenerator.generateDialPlan(5, 3); String var1 = dialPlanConfigurationChanSip.generateDialPlanConfiguration(dialPlanContextList); String var2 = InputStreamStringyfier.slurpStream( DialPlanConfigurationChanSip.class.getResourceAsStream(""/fixtures/fiveContextsThreeApps.txt"") ); assertEquals(var2, var1); } "	1	0	0	1	0	0
"@Test public void Func1() throws Exception { dialPlanContextList = dialPlanGenerator.generateDialPlan(1, 2); String var1 = dialPlanConfigurationChanSip.generateDialPlanConfiguration(dialPlanContextList); String var2 = InputStreamStringyfier.slurpStream( DialPlanConfigurationChanSip.class.getResourceAsStream(""/fixtures/oneContextTwoApps.txt"") ); assertEquals(var2, var1); } "	1	0	0	1	0	0
"private int Func1(String var1) { boolean var2 = false; boolean var3 = false; final char[] var4 = var1.toCharArray(); int var5 = 0; for (char var6 : var4) { if (var6 == '""' && !var2) { var3 = !var3; } else if (var6 == '\'' && !var3) { var2 = !var2; } else if (var6 == '(' && !var2 && !var3) { var5++; } else if (var6 == ')' && !var2 && !var3) { var5--; } } return var5; } "	0	0	0	0	0	1
"public static Object Func1(String var1) throws IOException { if (var1 == null) { return null; } byte[] var2 = Base64.decodeBase64(var1.getBytes(""UTF-8"")); ByteArrayInputStream var3 = null; GZIPInputStream var4 = null; ObjectInputStream var5 = null; try { var3 = new ByteArrayInputStream(var2); var4 = new GZIPInputStream(var3); var5 = new ObjectInputStream(var4); return var5.readObject(); } catch (ClassNotFoundException e) { throw new IOException(""Could not read object""); } finally { try { if (var5 != null) { var5.close(); } if (var4 != null) { var4.close(); } if (var3 != null) { var3.close(); } } catch (IOException e) { LOG.error(e); } } } "	0	0	1	1	0	0
@Override public void Func1() { if (closePosition < getMeasuredHeight()) { collapse(); } else { expand(); } } 	0	0	0	0	0	1
"public void Func1() { LOGGER.debug(""Starting Jetty server...""); restConfiguration().component(""jetty"") .host(""{{rest.jetty.host}}"") .port(""{{rest.jetty.port}}"") .bindingMode(RestBindingMode.auto); LOGGER.debug(""Jetty server started succesfully.""); onException(UnrecognizedPropertyException.class).handled(true) .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(400)) .setHeader(Exchange.CONTENT_TYPE, constant(""text/plain"")) .setBody().constant(""Invalid json data""); onException(DataModelException.class).handled(true) .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(400)) .setHeader(Exchange.CONTENT_TYPE, constant(""text/plain"")) .setBody().simple(""Invalid data values:\n${exception.message}""); rest(""/services/rest"").put(""/simpleorder"").consumes(""application/json"") .type(SimpleOrder.class).produces(""text/html"") .to(""direct:order_put""); from(""direct:order_put"") .bean(orderProcessBean) .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(201)) .to(""seda:confirmation-email.queue"") .end(); } "	0	0	0	0	0	1
"@SuppressWarnings(""AssignmentToForLoopParameter"") private void Func1(boolean var1) { Set<String> var2 = new HashSet<String>(); if (!needsToSignIn()) { for (CredentialedUser var3 : Services.getLoginService().getAllUsers().values()) { var2.add(var3.getEmail()); } } for (int var4 = 0; var4 < modelRoot.getChildCount(); ) { TreeNode var5 = modelRoot.getChildAt(var4); if (var5 instanceof GoogleUserModelItem) { CredentialedUser var3 = ((GoogleUserModelItem) var5).getCredentialedUser(); if (var3 == null || !var2.contains(var3.getEmail())) { treeModel.removeNodeFromParent((GoogleUserModelItem) var5); continue; } } else { treeModel.removeNodeFromParent((MutableTreeNode) var5); continue; } var4++; } if (!needsToSignIn()) { GoogleUserModelItem var5 = getNodeForUser(Services.getLoginService().getActiveUser()); if (var5 != null) { if (var1) { var5.setNeedsSynchronizing(); } var5.Func1(); } for (CredentialedUser var3 : Services.getLoginService().getAllUsers().values()) { if (var3 != Services.getLoginService().getActiveUser()) { var5 = getNodeForUser(var3); if (var5 != null) { if (var1) { var5.setNeedsSynchronizing(); } if (!queryOnExpand || (popupPanel != null && popupPanel.tree.isExpanded(new TreePath(var5.getPath())))) { var5.Func1(); } } } } } else { treeModel.insertNodeInto(new GoogleSignOnModelItem(), modelRoot, 0); } } "	1	0	1	0	0	0
"@TargetApi(18) public void Func1(BluetoothDevice var1, BluetoothAdapter.LeScanCallback var2) { int var3 = 0, var4 = 0; if (isDebugEnabled()) var3 = distinctBluetoothAddresses.size(); distinctBluetoothAddresses.add(var1.getAddress()); if (isDebugEnabled()) { var4 = distinctBluetoothAddresses.size(); if (var3 != var4 && var4 % 100 == 0) { if (isDebugEnabled()) Log.d(TAG, ""Distinct bluetooth devices seen: ""+distinctBluetoothAddresses.size()); } } if (distinctBluetoothAddresses.size()  > getCrashRiskDeviceCount()) { if (PREEMPTIVE_ACTION_ENABLED && !recoveryInProgress) { Logger.log.verbose(""Large number of bluetooth devices detected: ""+distinctBluetoothAddresses.size()+"" Proactively attempting to clear out address list to prevent a crash""); Logger.log.verbose(TAG, ""Stopping LE Scan""); BluetoothAdapter.getDefaultAdapter().stopLeScan(var2); startRecovery(); processStateChange(); } } } "	0	0	0	1	1	0
"public void Func1() { while (true) { try { QueueingConsumer.Delivery var1 = consumer.nextDelivery(); BasicProperties var2 = var1.getProperties(); BasicProperties var3 = new BasicProperties.Builder(). correlationId(var2.getCorrelationId()).build(); String var4 = """"; try { String var5 = new String(var1.getBody(), ""UTF-8""); SdnRequest var6 = mapper.readValue(var5, SdnRequest.class); SdnReply var7 = null; if (var6.getRequestType().equals(SdnPingRequest.TYPE)) { SdnPingRequest var8 = mapper.readValue(var5, SdnPingRequest.class); SdnPingReply var9 = new SdnPingReply(); var9.setError(false); var9.setPayload(var8.getPayload()); var7 = var9; } else if (var6.getRequestType().equals(SdnDeleteMeterRequest.TYPE)) { SdnDeleteMeterRequest var10 = mapper.readValue(var5, SdnDeleteMeterRequest.class); var7 = doSdnDeleteMeter(var10); } else if (var6.getRequestType().equals(SdnDeleteForwardRequest.TYPE)) { SdnDeleteForwardRequest var11 = mapper.readValue(var5, SdnDeleteForwardRequest.class); var7 = doSdnDeleteForward(var11); } else if (var6.getRequestType().equals(SdnForwardRequest.TYPE)) { SdnForwardRequest var11 = mapper.readValue(var5, SdnForwardRequest.class); var7 = doSdnForward(var11); } else if (var6.getRequestType().equals(SdnForwardToControllerRequest.TYPE)) { SdnForwardToControllerRequest var12 = mapper.readValue(var5, SdnForwardToControllerRequest.class); var7 = doSdnForwardToController(var12); } else if (var6.getRequestType().equals(SdnInstallMeterRequest.TYPE)) { SdnInstallMeterRequest var10 = mapper.readValue(var5,SdnInstallMeterRequest.class); var7 = doSdnInstallMeter(var10); } else if (var6.getRequestType().equals(SdnTransmitPacketRequest.TYPE)) { SdnTransmitPacketRequest var13 = mapper.readValue(var5,SdnTransmitPacketRequest.class); var7 = doSdnTransmitPacket(var13); } else { var7 = new SdnReply(); var7.setError(true); var7.setErrorMessage(""Unknown var5 type""); } if (var7 != null) { var4 = mapper.writeValueAsString(var7); } } catch (Exception e) { e.printStackTrace(); } finally { if (var4 != null) { channel.basicPublish("""", var2.getReplyTo(), var3, var4.getBytes(""UTF-8"")); } channel.basicAck(var1.getEnvelope().getDeliveryTag(), false); } } catch (Exception e) { e.printStackTrace(); try { Thread.sleep(1000); } catch (Exception e2) { } } } } "	1	0	1	0	0	0
"@Test(expected = ValidationException.class) public void Func1() throws Exception { testObject.processInput(new String[] {}, new String[] {}, null, ""local"", ""wibble"", ""gradle""); } "	0	0	0	0	0	1
@Override public void Func1() { subscribeTo(PuppetGrammar.HASH); } 	0	0	0	0	0	1
public boolean Func1(Point var1) { return var1.getX() < width && var1.getY() < height; } 	1	0	0	1	0	0
"private synchronized void Func1(GenericValue var1, boolean var2) throws SemaphoreFailException { Transaction var3 = null; boolean var4 = false; boolean var5 = false; try { if (TransactionUtil.isTransactionInPlace()) { var3 = TransactionUtil.suspend(); } var4 = TransactionUtil.begin(); if (!var4) { throw new SemaphoreFailException(""Cannot obtain unique transaction for semaphore logging""); } try { if (var2) { var1.refresh(); var1.remove(); lock = null; } else { lock = var1.create(); } } catch (GenericEntityException e) { Debug.logError(e, module); var5 = true; throw new SemaphoreFailException(""Cannot obtain unique transaction for semaphore logging""); } finally { if (var5) { try { TransactionUtil.rollback(var4, ""ServiceSemaphore: Func1()"", new Exception()); } catch (GenericTransactionException e) { Debug.logError(e, module); } } if (!var5 && var4) { try { TransactionUtil.commit(var4); } catch (GenericTransactionException e) { Debug.logError(e, module); } } } } catch (GenericTransactionException e) { Debug.logError(e, module); } finally { if (var3 != null) { try { TransactionUtil.resume(var3); } catch (GenericTransactionException e) { Debug.logError(e, module); } } } } "	1	0	1	0	0	0
public InetSocketAddress Func1(String var1, int var2, InetSocketAddress var3) { if (!containsKey(var1)) { return var3; } return SocketAddressUtil.parse(get(var1), var2); } 	0	0	0	0	0	1
public InetAddress Func1(String var1) throws UnknownHostException { return InetAddress.getByName(get(var1)); } 	0	0	0	0	0	1
public boolean Func1(String var1) { return params.Func1(var1); } 	0	0	1	1	0	0
public InetSocketAddress Func1(String var1) { return SocketAddressUtil.parse(get(var1)); } 	0	0	1	1	0	0
public Builder Func1(String Func1) { this.Func1 = Func1; return this; } 	0	0	0	0	0	1
"public void Func1() { setConf(); String var1 = ""../data/exampledata/LRLocalExampleData/a9a.train""; String var2 = LocalFileSystem.DEFAULT_FS; String var3 = System.getProperty(""java.io.tmpdir"", ""/tmp""); String var4 = var2 + var3 + ""model""; String var5 = var2 + var3 + ""/newmodel""; String var6 = var2 + var3 + ""/log""; conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, var1); conf.set(AngelConfiguration.ANGEL_LOAD_MODEL_PATH, var4); conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, var5); conf.set(AngelConfiguration.ANGEL_LOG_PATH, var6); conf.set(AngelConfiguration.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_INC_TRAIN()); LRRunner var7 = new LRRunner(); var7.Func1(conf); } "	0	0	1	1	0	0
private Collection<String> Func1() { ProcessItem var1 = (ProcessItem) routeNode.getObject().getProperty().getItem(); String var2 = routeNode.getObject().getProperty().getDisplayName(); Collection<String> var3 = new HashSet<>(); try { exportAllReferenceRoutelets(var2, var1, var3); } catch (InvocationTargetException e) { return new HashSet<>(); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } return var3; } 	0	1	1	0	0	0
"public void Func1() { getFragmentManager().beginTransaction() .setCustomAnimations(R.animator.slide_in_left, R.animator.slide_out_right, 0, 0) .replace(R.id.fragmentContainerShow, new SeasonsFragment()) .commit(); visibleFragment = ""seasons""; } "	0	0	0	0	0	1
@Override public float Func1(Vector2 var1) { return (float)Math.atan2(-var1.x, var1.y); } 	0	0	0	0	0	1
public String Func1(String var1, String var2, String var3) { while (true) { String var4 = replace(var1, var2, var3, null, false); if (var4.equals(var1)) break; var1 = var4; } return var1; } 	0	0	0	0	0	1
"@Override public T Func1() throws Exception { Timer var1 = new Timer(""destination.""+method.getName()); if (prepareIds && entityIdStore != null) entityIdStore.copyFromThread(parentThreadId); try { return (T) method.invoke(lightblueDAO, values); } finally { var1.complete(); } } "	0	0	0	0	0	1
private void Func1(int var1, int var2, boolean var3) { Dummy var4 = new Dummy(player, var1, var2, var3); targets.add(var4); } 	1	0	0	1	0	0
@Override protected void Func1() { super.Func1(); this.getAttributeMap().registerAttribute(SharedMonsterAttributes.attackDamage); } 	0	0	0	0	0	1
public int Func1() { if (total % pageSize != 0) return (total / pageSize) + 1; else return total / pageSize; } 	0	0	0	0	0	1
"@Override public boolean Func1(MenuItem var1) { int var2 = var1.getItemId(); if (var2 == R.var2.action_done) { if (barcodeText.getText().toString().equals("""")){ barcodeText.setError(getString(R.string.wrong_barcode_input)); } else { if (Utils.isValidBarcode(barcodeText.getText().toString(), BarcodeFormat.valueOf(formatSpinner.getSelectedItem().toString()))){ Intent var3 = new Intent(ManualInputActivity.this, FinishActivity.class); Intent var4 = getIntent(); Card var5 = new Card(var4.getStringExtra(""STORENAME""), barcodeText.getText().toString(), BarcodeFormat.valueOf(formatSpinner.getSelectedItem().toString())); var4.putExtra(Constants.INTENT_CARD_ARG, var5); startActivityForResult(var3, Utils.ADD_STORE); } else { barcodeText.setError(getString(R.string.wrong_barcode_input)); } } return true; } return super.Func1(var1); } "	1	0	1	0	0	0
@Override public int Func1() { return photoUrlsCached.size(); } 	0	0	0	0	0	1
@Subscribe(threadMode = ThreadMode.MAIN) public void Func1(PhotosFoundEvent var1) { List<List<Size>> var2 = var1.getPhotos(); if (var2 != null && !var2.isEmpty()) { for (List<Size> var3 : var2) { imageAdapter.addPhoto(var3.get(1).getSource()); } } loadingImage.setVisibility(View.INVISIBLE); gridPhotos.setVisibility(View.VISIBLE); } 	0	1	0	0	0	0
"public static int Func1(String var1) { if(FrmMain.debug) LOG.debug(""Calculating var3 for Tags. Text var3: {}"",var1.length()); String[] var2 = trimTags(var1); int var3 = 0; for(int var4=0;var4<var2.length;var4++){ if(var4<var2.length){ var3 += 1; } if(var2[var4].contains("" "")){ var3 += var2[var4].length()+2; } else { var3 += var2[var4].length(); } } if(FrmMain.debug) LOG.debug(""Tags var3: {}"",var3); return var3; } "	1	1	1	1	1	0
public View.OnTouchListener Func1() { if (mDragListener == null) { mDragListener = new ListPopupWindow.ForwardingListener(mAnchor) { @Override protected boolean Func2() { show(); return true; } @Override protected boolean Func3() { dismiss(); return true; } @Override public ListPopupWindow Func4() { return mPopup.Func4(); } }; } return mDragListener; } 	0	0	0	0	0	1
public void Func1(String var1, Object ... var2) { if (isDebugEnabled()) { log.Func1(prefix + String.format(var1, var2)); } } 	1	1	0	0	0	0
public void Func1(String var1, Object ... var2) { if (Func1) { log.info(ansi().fgBright(BLACK).a(prefix).a(String.format(var1,var2)).reset().toString()); } } 	0	1	0	0	0	0
"@Test public void Func1() throws Exception { FireLanguage var1 = new FireLanguage(""English"", ""EN"", true, ""123""); FireBookDetails var2 = new FireBookDetails(""Book Title"", ""url"", ""cover_url"", true, ""test description"", var1); ArrayList<FireBookDetails> var3 = new ArrayList<>(); var3.add(var2); doReturn(Observable.<List<FireBookDetails>>just(var3)).when(bookDatabase).getBooks(); TestSubscriber<List<FireBookDetails>> var4 = new TestSubscriber<>(); bookService.getBooksForLanguage(var1).subscribe(var4); verify(bookDatabase).getBooks(); var4.awaitTerminalEvent(); var4.assertNoErrors(); final List<List<FireBookDetails>> var5 = var4.getOnNextEvents(); assertEquals(""Book Title"", var5.get(0).get(0).getBookTitle()); } "	0	0	0	0	0	1
"public void Func1(View var1){ RelativeLayout var2 = (RelativeLayout)var1.getParent(); LinearLayout var3 = (LinearLayout) var2.getParent(); RelativeLayout var4 = (RelativeLayout)var3.getChildAt(0); final TextView var5 = (TextView) var4.getChildAt(0); TextView var6 = (TextView) var3.getChildAt(1); final Dialog Func1 = new Dialog(MainMenuController.this); Func1.setTitle(getResources().getString(R.string.edit_task_title)); Func1.setContentView(R.layout.dialog_newtask); final EditText var8 = (EditText) Func1.findViewById(R.id.description_edittext); final EditText var9 = (EditText) Func1.findViewById(R.id.points_edittext); var8.setText(var5.getText()); var9.setText(var6.getText().toString().substring(7)); Button var10 = (Button) Func1.findViewById(R.id.submit_btn); Button var11 = (Button) Func1.findViewById(R.id.cancelBtn_newTask); var11.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var12) { Func1.dismiss(); } }); var10.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var12) { final String var13 = var5.getText().toString(); final String var14 = var8.getText().toString(); final String var6 = var9.getText().toString(); if (var14.isEmpty() || var6.isEmpty()) { Toast.makeText(getApplicationContext(), getResources().getString(R.string.all_fields_filled), Toast.LENGTH_SHORT).show(); }else{ HashMap<String, String> var15 = new HashMap<String, String>(); var15.put(""var13"", var13); var15.put(""var14"", var14); var15.put(""var6"", var6); var15.put(""flatPIN"",""123"");//TODO: GET FLAT PIN FROM USER MODEL ServerRequest var16 = new ServerRequest(); JSONObject var17 = var16.getJSON(HttpType.EDITTASK, getIpAddress() + "":8080/Func1"", var15); if (var17 != null) { try { Toast.makeText(getApplication(), var17.getString(""response""), Toast.LENGTH_LONG).show(); if (var17.getBoolean(""res"")) { initTasksTab(); } } catch (JSONException e) { e.printStackTrace(); } } } } }); Func1.show(); } "	0	0	0	0	0	1
"@Override public final void Func1(final long var1) { if (!GameInfo.getInstance().getPlayerMode().equals(PlayerMode.SURVIVAL) && gameObjects.allBubblesDestroyed()) { gameController.levelCompleted(); return; } try { long var2; if (this.var1 != 0) { var2 = var1 - this.var1; } else { var2 = FIRST_FRAME_TIME; } this.var1 = var1; gameController.updateTime(var2); gameObjects.update(var2); } catch (Exception ex) { stop(); GameLog.addErrorLog(""Exception in game loop""); GameLog.addErrorLog(ex.getMessage()); Logger.getLogger(GameLoop.class.getName()).log(Level.SEVERE, ""Exception in game loop"", ex); } } "	1	0	1	1	0	0
"public int Func1(ByteArray var1, int[] var2) throws FormatException { for (int var3 = mMinCodeLen; var3 < mMaxCodeLen; ++var3) { int var4 = mMaxCodeValsFromCodeLen[var3]; if (var4 < 0) { continue; } int var5 = getHuffmanBits(var1, var2[0], var3); if (var4 < var5) { continue; } int var6 = mSymsFromCodeVal[var5]; var2[0] += var3; return var6; } String var7 = String.format( ""[%s] Bad code at the bit index '%d'."", getClass().getSimpleName(), var2[0]); throw new FormatException(var7); } "	1	0	1	1	0	0
"@Test public void Func1() throws InterruptedException, SSLException, URISyntaxException { primaryClient.handhshake(); byte[] var1 = {6, 7, 8, 9, 10, 11}; ByteBuffer var2 = ByteBuffer.wrap(var1); primaryClient.sendPing(var2); Thread.sleep(threadSleepTime); ByteBuffer var3 = primaryClient.getBufferReceived(); assertEquals(""Didn't receive the correct pong."", var3, var2); logger.info(""Receiving a pong message is completed.""); } "	0	0	0	0	0	1
@JSMethod(uiThread = false) public void Func1(@IntRange(from = 1) int var1, @IntRange(from = 0) int var2) { if(mWXSDKInstance != null) { postOrHoldMessage(WXJSBridgeMsgType.MODULE_INTERVAL, var1, var2, Integer.parseInt(mWXSDKInstance.getInstanceId())); } } 	1	1	0	0	0	0
protected void Func1(Consumer<SpotlessExtension> var1, Consumer<TestCaseAPI> var2) throws Exception { List<String> var3 = new ArrayList<>(); List<String> var4 = new ArrayList<>(); var2.accept((var7, after) -> { var3.add(var7); var4.add(after); }); ApplyFormatTask var5 = createApplyTask(var1); List<File> var6 = new ArrayList<>(var3.size()); for (String var7 : var3) { File var8 = folder.newFile(); Files.write(var8.toPath(), var7.getBytes(StandardCharsets.UTF_8)); var6.add(var8); } var5.setTarget(var6); var5.apply(); for (int var9 = 0; var9 < var3.size(); ++var9) { String var10 = var4.get(var9); String var11 = new String(Files.readAllBytes(var6.get(var9).toPath()), StandardCharsets.UTF_8); Assert.assertEquals(var10, var11); } } 	1	0	1	0	0	0
protected File Func1(String var1) throws IOException { int var2 = var1.lastIndexOf('/'); String var3 = var2 >= 0 ? var1.substring(var2) : var1; File var4 = folder.newFile(var3); var4.getParentFile().mkdirs(); Files.write(var4.toPath(), getTestResource(var1).getBytes(StandardCharsets.UTF_8)); return var4; } 	1	1	1	1	1	0
public void Func1() { mainSceneExecutor = Executors.newSingleThreadExecutor(); } 	0	0	0	0	0	1
"public Result Func1() { User var1 = User.findByEmail(session().get(""email"")); List<User> var2 = MatcherService.getMatchedUsers(var1.fullname); return ok(toJson(var2)); } "	0	1	0	0	0	0
"public boolean Func1(){ ArrayList<String> var1 = new ArrayList<String>(); var1.add(""""+true); server.notifyClients(MessageType.SEEKNOTIFY, var1); return player.Func1(); } "	1	0	1	1	0	0
"@Override public String Func1() { return String.format(""Const(%s)"", value); } "	0	0	0	1	1	0
public void Func1() { ConfigManager.Func1(); SubsistenceFluids.initializeFluids(); SubsistenceBlocks.initialize(); SubsistenceItems.initialize(); EventUtil.register(new FluidHandler(), EventUtil.Type.FORGE); SubsistenceFluids.initializeFluidContainers(); SubsistenceRecipes.initialize(); AbstractSerializer.initialize(); NetworkRegistry.INSTANCE.registerGuiHandler(Subsistence.instance, new GuiHandler()); EventUtil.register(new SpiderTracker(), EventUtil.Type.FORGE); EventUtil.register(new WebHandler(), EventUtil.Type.FORGE); EventUtil.register(new BoilingWaterHandler(), EventUtil.Type.FORGE); EventUtil.register(TimerHandler.INSTANCE, EventUtil.Type.FML); } 	0	1	0	0	0	0
public static boolean Func1(Context var1) { return getInterfaceDetails(var1, true).netEnabled; } 	1	0	1	0	0	0
"public static boolean Func1(Context var1) { InterfaceDetails var2 = getInterfaceDetails(var1, true); if (currentCfg != null && currentCfg.equals(var2)) { return false; } currentCfg = var2; if (!var2.netEnabled) { Log.i(TAG, ""Now assuming NO connection (all interfaces down)""); } else { if (var2.netType == ConnectivityManager.TYPE_WIFI) { Log.i(TAG, ""Now assuming wifi connection""); } else if (var2.netType == ConnectivityManager.TYPE_MOBILE) { Log.i(TAG, ""Now assuming 3G connection ("" + (var2.isRoaming ? ""roaming, "" : """") + (var2.isTethered ? ""tethered"" : ""non-tethered"") + "")""); } if (!var2.lanMaskV4.equals("""")) { Log.i(TAG, ""IPv4 LAN netmask on "" + var2.wifiName + "": "" + var2.lanMaskV4); } if (!var2.lanMaskV6.equals("""")) { Log.i(TAG, ""IPv6 LAN netmask on "" + var2.wifiName + "": "" + var2.lanMaskV6); } } return true; } "	1	0	1	0	0	0
"@POST @Path(""me/password"") @RolesAllowed({""ROLE_ADMIN"", ""ROLE_USER""}) public Response Func1(HttpServletRequest var1, Request var2) { checkPasswordFormat(var2.getNewPassword()); checkNotNull(var2.getOldPassword()); Long var3 = (Long) var1.getAttribute(OAuth2Filter.NAME_USER_ID); userService.Func1(var3, var2.oldPassword, var2.getNewPassword()); return Response.noContent().build(); } "	0	0	0	0	0	1
private Map<String, JsonObject> Func1(int var1) { InputStream var2 = getResources().openRawResource(var1); BufferedReader var3 = new BufferedReader(new InputStreamReader(var2)); return gson.fromJson(var3, (new TypeToken<Map<String, JsonObject>>() { }).getType()); } 	0	0	0	0	0	1
"@Override public T Func1() { if (!hasNext()) { throw new NoSuchElementException(""No more elements.""); } ++this.consumed; return this.iterator.Func1(); } "	1	0	1	0	0	0
"@Test public void Func1() throws Exception { StringWriter var1 = new StringWriter(); List<Location> var2 = new LinkedList<Location>(); Location var3 = TestHelper.createDefaultLocation(); var3.setAddress(""10.1.1.0""); var2.add(var3); Location var4 = new Location(""var4.test.org""); var4.setAddress(""10.1.1.1""); var2.add(var4); Location var5 = new Location(""buc.test.org""); var5.setAddress(""10.1.1.2""); var2.add(var5); IMocksControl var6 = EasyMock.createControl(); FeatureManager var7 = var6.createMock(FeatureManager.class); var7.getLocationsForEnabledFeature(Ivr.FEATURE); var6.andReturn(var2); var6.replay(); m_configuration.setFeatureManager(var7); Bridge var8 = new Bridge(); List<FreeswitchExtension> var9 = Collections.emptyList(); m_configuration.write(var1, var3, var8, false, false, null, var9, false, true); String var10 = IOUtils.toString(getClass().getResourceAsStream(""default_context-vms.test.xml"")); assertEquals(var10, var1.toString()); } "	0	1	0	0	0	0
"@Test public void Func1() throws Exception { String var1 = ""Testing:""; request.setContent(var1.getBytes()); JobIdentifier var2 = new JobIdentifier(""pipeline"", 10, ""label-10"", ""stage"", ""2"", ""build"", 103l); when(restfulService.findJob(""pipeline"", ""10"", ""stage"", ""2"", ""build"", 103l)).thenReturn(var2); String var3 = ""cruise-output/console.log""; File var4 = new File(""junk""); when(consoleService.consoleLogFile(var2)).thenReturn(var4); when(consoleService.updateConsoleLog(eq(var4), any(InputStream.class), any(ConsoleService.LineListener.class))).thenReturn(true); assertThat(((ResponseCodeView) artifactsController.putArtifact(""pipeline"", ""10"", ""stage"", ""2"", ""build"", 103l, var3, ""agent-id"", request).getView()).getStatusCode(), is(HttpServletResponse.SC_OK)); verify(consoleActivityMonitor).consoleUpdatedFor(var2); } "	0	1	1	0	0	0
"@Override public void Func1(final float var1) { Gdx.gl.glClearColor(0, 0, 0, 0); Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT); worldManager.update(var1); camera.position.set(camera.viewportWidth / 2.f + worldManager.getPlayer().getX() * 50.f - 100.f, camera.viewportHeight / 2.f, 0); camera.update(); batch.setProjectionMatrix( camera.combined.scale(1 / WorldManager.PHYSICS_SCALE_FACTOR, 1 / WorldManager.PHYSICS_SCALE_FACTOR, 1)); batch.begin(); Iterator<WorldObject> var2 = worldManager.getDirector().getObjects(true); worldManager.getPlayer().doRender(batch); while (var2.hasNext()) { var2.next().doRender(batch); } if (!gameOverMenuActive && !(worldManager.getGameStatus())) { gameOverMenuActive = true; gameOverTable.setVisible(true); gameOverScore.setText("" Score:"" + Integer.toString(Math.round(score))); if (ScoreContainer.isHighScore(Math.round(score))) { highScoreLabel.setVisible(true); } finalScore = Math.round(score); Gdx.input.setInputProcessor(stage); } score = score + var1 * worldManager.getPlayer().getSpeed().len(); if (gameOverMenuActive) { scoreLabel.setText("" "" + Integer.toString(Math.round(finalScore))); } else { scoreLabel.setText("" "" + Integer.toString(Math.round(score))); } batch.end(); stage.act(); stage.draw(); physicsRenderer.Func1(this.worldManager.getPhysicsWorld(), camera.combined.scale(50.f, 50.f, 1.f)); } "	0	1	0	0	0	0
"public String Func1(String var1) { return this.Func1(var1, """", """"); } "	1	0	1	1	0	0
private void Func1(int var1) { if ( mSurfaceTexture == null ) { mSurfaceTexture = new SurfaceTexture(var1); mSurfaceTexture.detachFromGLContext(); mSurfaceTexture.setDefaultBufferSize(getWidth(), getHeight()); mSurface = new Surface(mSurfaceTexture); if (mOnSurfaceReadyListener != null) mOnSurfaceReadyListener.onSurfaceReady(mSurface); } } 	0	0	0	0	0	1
public static void Func1(int var1, int var2, Gridded3DSet var3, byte[][] var4, float[][] var5, byte[][] var6, float[][] var7) throws VisADException { int var8 = var3.getManifoldDimension(); int[] var9 = var3.getLengths(); int var10 = var9[0]; int var11 = var9[1]; int var12; if (var8 == 3) { var12 = var9[2]; getStartPointsFromDomain3D(var1, var2, var3.getSamples(false), var10, var11, var12, var4, var5, var6); } else if (var8 == 2) { getStartPointsFromDomain2D(var1, var2, var3.getSamples(false), var10, var11, var4, var5, var6, var7); } } 	0	1	0	0	0	0
"private void Func1() { List<Port> var1 = Port.getAll(); List<String> var2 = new ArrayList<>(); if (var1 != null) { for (Port var3 : var1) var2.add(var3.getPortName()); } var2.add(0, ""Port Name""); portSpinnerItems = new String[var2.size()]; var2.toArray(portSpinnerItems); } "	0	0	0	0	0	1
"@GET @Path(""/"") @Produces(MediaType.TEXT_HTML) public Response Func1() { String var1 = soyService.renderPlugin(pluginRegion, Optional.of(new ConfigPluginRegionInput("""", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """"))); return Response.ok(var1).build(); } "	0	0	0	0	0	1
@Override public void Func1(RPCManager.Result<Integer> var1) { if (var1.getStatus() == RPCManager.RESULT_OK) { PageCacheManager.Page var2 = PageCacheManager.getPage(id); if (var1.getResult() > var2.timestamp) { downloadPage(url); } else if (!url.equals(backStack.peek().url)) { showPage(url, var2.html); } } else Dialogs.connectionFailed(context); } 	0	1	0	0	0	0
private int Func1(final CharBuffer var1, final int var2, final int var3, final boolean var4) { final int var5 = fullWord ? var3 : var2; if (!var1.hasRemaining()) return var5; char var6 = var1.get(); int var7 = Arrays.binarySearch(nextChars, var6); if (var7 == -1 && var4) { final boolean var8 = Character.isUpperCase(var6); final boolean var9 = Character.isLowerCase(var6); if (var8 != var9) { var6 = var8 ? Character.toLowerCase(var6) : Character.toUpperCase(var6); var7 = Arrays.binarySearch(nextChars, var6); } } if (var7 < 0) return var5; return nextNodes[var7].Func1(var1, var5, var3 + 1, var4); } 	1	0	1	0	0	0
"public Result Func1(String var1) { UserSession var2 = getAuthenticatedSession(RESEARCHER); Study var3 = studyService.getStudy(var2.getStudyIdentifier()); if (isBlank(var1)) { throw new BadRequestException(EMAIL_REQUIRED); } StudyParticipant var4 = parseJson(request(), StudyParticipant.class); if (var4.getEmail() != null && !var4.getEmail().equals(var1)) { throw new BadRequestException(""Email in JSON does not match URI of request""); } participantService.Func1(var3, var1, var4); return okResult(""Participant updated.""); } "	0	0	0	0	0	1
private void Func1(String var1) { Toast.makeText(this, var1, Toast.LENGTH_SHORT).show(); } 	1	0	0	1	0	0
public static Intent Func1(Context var1, Intent var2) { if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) { PackageManager var3 = var1.getPackageManager(); List<ResolveInfo> var4 = var3.queryIntentServices(var2, 0); if (var4 == null || var4.size() != 1) { return null; } ResolveInfo var5 = var4.get(0); String var6 = var5.var5.var6; String var7 = var5.var5.name; ComponentName var8 = new ComponentName(var6, var7); Intent var9 = new Intent(var2); var9.setComponent(var8); return var9; } else { return var2; } } 	1	1	1	0	1	0
"@Override public void Func1(JsonWriter var1, Location<World> var2) throws IOException { if (var2 == null) { var1.nullValue(); return; } var1.beginObject(); if (var2.getExtent() instanceof World) { var1.name(""world""); var1.value(((World) var2.getExtent()).getUniqueId().toString()); } var1.name(""x""); var1.value(var2.getX()); var1.name(""y""); var1.value(var2.getY()); var1.name(""z""); var1.value(var2.getZ()); var1.endObject(); } "	0	0	1	1	0	0
public void Func1(RedstoneWireNetwork var1) { for (WeakReference<TileRedstoneWireConnector> var2 : var1.connectors) { TileRedstoneWireConnector var3 = var2.get(); if (var3 != null) { var3.var1 = add(var3); } } for (WeakReference<TileRedstoneWireConnector> var2 : var1.connectors) { TileRedstoneWireConnector var3 = var2.get(); if (var3 != null) { var3.getWorldObj().notifyBlockOfNeighborChange(var3.xCoord, var3.yCoord, var3.zCoord, IIBlocks.redstoneWireConnector); } } } 	0	1	0	0	0	0
"void Func1(Environment var1, String var2) { var1.jersey().register(new ApiListingResourceJSON()); var1.jersey().register(new ApiDeclarationProvider()); var1.jersey().register(new ResourceListingProvider()); ScannerFactory.setScanner(new DefaultJaxrsScanner()); ClassReaders.setReader(new DefaultJaxrsApiReader()); SwaggerConfig var3 = ConfigFactory.var3(); var3.setApiVersion(""1.0.1""); var3.setBasePath(""../../"" + var2); } "	1	0	1	1	0	0
"@Test public void Func1() throws Exception { wd().openScreen(LookupInput2TestPage.class); wd().cmd().click().on(""button_validate""); ScreenInspector var1 = wd().screenInspector(); if(null == var1) return; BufferedImage var2 = var1.elementScreenshot(""one""); Assert.assertTrue(""The background of the control should be red because it is in error"", isReddish(var2)); wd().refresh(); var1 = wd().screenInspector(); if(null == var1) throw new IllegalStateException(); var2 = var1.elementScreenshot(""two""); Assert.assertTrue(""The background of the control should be red because it is in error after screen refresh"", isReddish(var2)); } "	0	0	0	1	1	0
public Flash Func1(String var1) { return add(ERRORS, var1); } 	0	0	0	0	0	1
protected void Func1() { if (autoPower) { power = VisionProcessing.getShooterPower(); } power = (1 - DS2016.rightJoystick.getZ()) / 2.0; RobotMap.leftShooterWheel.set(power); RobotMap.rightShooterWheel.set(-power); } 	0	1	0	0	0	0
@Override public void Func1(float var1) { position=Body.getPosition(); target=GameState.instance.player.playerBody.getPosition(); vel=target.cpy().sub(position).nor().scl(100); Body.applyLinearImpulse(target, vel, true); } 	0	1	0	0	0	0
public void Func1(int var1) { offsetRange = Range.between(var1, offsetRange.getMaximum()); } 	1	0	0	1	0	0
"public Builder Func1(int var1) { if (Range.open(1, 65535).contains(var1)) { throw new IllegalArgumentException(""Invalid var1 number "" + var1); } if (!isPortAvailable(var1)) { throw new RuntimeException(""Token listener tried to use a defined but already taken var1 "" + var1); } this.var1 = var1; return this; } "	1	0	1	1	0	0
"public final void Func1(String[] var1){ CommandLine var2 = parseArgs(var1); if (var2.hasOption(""h"")) { die(); } processConfigFileOption(var2); executeImpl(var2); } "	1	0	1	1	0	0
public void Func1(boolean var1) { mIsVisibleContractDate = var1; notifyPropertyChanged(BR.var1); } 	0	0	0	0	0	1
"@Test public void Func1() throws IOException { final AtomicInteger var1 = new AtomicInteger(); client = client.newBuilder() .addInterceptor(new Interceptor() { @Override public Response Func2(Chain var2) throws IOException { assertNull(var2.request().body()); Response var3 = var2.proceed(var2.request()); assertEquals(""Upgrade"", var3.header(""Connection"")); assertTrue("""", var3.body().source().exhausted()); var1.incrementAndGet(); return var3; } }).build(); webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener)); WebSocket var4 = newWebSocket(); clientListener.assertOpen(); assertEquals(1, var1.get()); var4.close(1000, null); WebSocket var5 = serverListener.assertOpen(); var5.close(1000, null); } "	0	0	1	1	0	0
public void Func1(List<Long> var1) { this.var1 = var1; } 	0	0	0	0	0	1
public static Iterator<SFeature> Func1(SAnnotationContainer var1) { Iterator<SFeature> var2 = null; if (var1 != null) { var2 = new MyIterator<SFeature>(var1.getLabels().iterator()); } return (var2); } 	0	1	0	0	0	0
public static Iterator<SMetaAnnotation> Func1(SAnnotationContainer var1) { Iterator<SMetaAnnotation> var2 = null; if (var1 != null) { var2 = new MyIterator<SMetaAnnotation>(var1.getLabels().iterator()); } return (var2); } 	0	1	0	0	0	0
"public static void Func1(String[] var1) { addUser(""FLEM"", ""frem rogers"", ""passy"", null, null); } "	0	0	0	0	0	1
@Override public BlockWeight Func1() { return BlockWeight.LIGHT; } 	0	0	0	0	0	1
"private void Func1(){ messageBodyText.setText(i18n.GL3466_4()+i18n.GL_SPL_FULLSTOP()); optionsContainerFpnl.clear(); if(collectionItemDo!=null && collectionItemDo.getResource()!=null && collectionItemDo.getResource().getAnswers()!=null && collectionItemDo.getResource().getType()==9){ messageBodyText.setText(i18n.GL3234_1()+i18n.GL_SPL_FULLSTOP()); optionsContainerFpnl.addStyleName(""drapDropContainer""); optionsContainer=new HTAnswerDragPanelVc(); optionsContainerFpnl.add(optionsContainer); Label var1 = new Label(""""); var1.setStyleName(""dragDropSpacer""); optionsContainer.superAdd(var1); Label var2 = new Label(""""); var2.setStyleName(""dragDropSpacer""); optionsContainer.add(var2); }else{ optionsContainerFpnl.removeStyleName(""drapDropContainer""); } renderQuestionAnswerOptions(); } "	0	1	0	0	0	0
"private void Func1() throws ConnectionException { try { getService().getClassifiers().execute(); } catch (UnauthorizedException | ForbiddenException | IllegalArgumentException e) { throw new ConnectionException(ConnectionExceptionCode.INCORRECT_CREDENTIALS, """", e.getMessage(), e); } } "	0	0	0	0	0	1
"@Test public void Func1() { StatefulRNG var1 = new StatefulRNG(new LightRNG(0xAAAA2D2)); DungeonGenerator var2 = new DungeonGenerator(240, 240, var1); var2.addDoors(15, true); var2.addWater(25); var2.addTraps(2); char[][] var3 = var2.generate(TilesetType.DEFAULT_DUNGEON); FOV var4 = new FOV(); double[][] var5 = DungeonUtility.generateResistances(var3), var6; short[] var7; boolean[][] var8; int var9 = 0, var10 = 0, var11 = 0; Coord var12; for (int var13 = 0; var13 < 100; var13++) { var12 = var2.utility.randomFloor(var3); var6 = var4.calculateFOV(var5, var12.x, var12.y, 8, Radius.DIAMOND); var7 = CoordPacker.pack(var6); var8 = CoordPacker.unpack(var7, var6.length, var6[0].length); for (int var14 = 0; var14 < var8.length ; var14++) { for (int var15 = 0; var15 < var8[var14].length; var15++) { assertTrue((var6[var14][var15] > 0.0) == var8[var14][var15]); } } var9 += arrayMemoryUsage(var7.length, 2); var10 += arrayMemoryUsage2D(var6.length, var6[0].length, 1); var11 += arrayMemoryUsage2D(var6.length, var6[0].length, 8); } System.out.println(""Average Memory used by var7 short[] (Appropriate):"" + var9 / 100.0 + "" bytes""); System.out.println(""Average Memory used by boolean[][] (Appropriate):"" + var10 / 100.0 + "" bytes""); System.out.println(""Average Memory used by original double[][] (Appropriate):"" + var11 / 100.0 + "" bytes""); System.out.println(""Average Compression, short[] vs. boolean[][] (Appropriate):"" + 100.0 * var9 / var10 + ""%""); System.out.println(""Average Compression, short[] vs. double[][] (Appropriate):"" + 100.0 * var9 / var11 + ""%""); System.out.println(""FOV Map stored for every cell, booleans, 240x240: "" + arrayMemoryUsage2D(240, 240, arrayMemoryUsage2D(240, 240, 1))); } "	0	0	0	0	0	1
private TestsToRun Func1() { final TestsToRun var1 = (TestsToRun) getSuites(); final Configuration var2 = Configuration.read(); final TestExecutionPlannerLoader var3 = new TestExecutionPlannerLoader(new JavaSPILoader(), resource -> { final String var4 = new ClassNameExtractor().extractFullyQualifiedName(resource); return var1.getClassByName(var4) != null; }, getGlobPatterns()); return new TestStrategyApplier(var1, var3, bootParams.getTestClassLoader()).apply( var2); } 	0	1	0	0	0	0
"public void Func1(String var1, String var2, long var3, String var4, String var5, String var6, String var7, String var8) throws Exception { IssueService var9 = ComponentAccessor.getIssueService(); Project var10 = ComponentAccessor.getProjectManager().getProjectObj( var3 ); if( var10 == null ) { throw new Exception(""CI Plugin: this var10 does not exists ""+var3); } screenConfigService.assigValuesToVariables(); if( !screenConfigService.hasIssueTypeConfigurated(var10) ) { throw new Exception(""CI Plugin: this var10 is not configured properly :""+var3); } User var11 =  getUserByName(var8); if( var11 == null ) { throw new Exception(""CI Plugin: the var11 does not exist or is inactive :""+var8); } IssueType var12 = screenConfigService.getIssueTypeCI(); CustomField var13 = screenConfigService.getGroupCustomField(); CustomField var14 = screenConfigService.getRemediationItemCustomField(); CustomField var15 =screenConfigService.getRemediationIdCustomField(); IssueInputParameters var16 = var9.newIssueInputParameters(); var16.setSummary( var1 ); var16.setDescription( var2 ); var16.setProjectId( var10.getId() ); var16.setIssueTypeId( var12.getId() ); var16.setPriorityId( getPriorityId( var7 ) ); var16.addCustomFieldValue( var14.getId(), var4); var16.addCustomFieldValue( var15.getId(), var5); var16.addCustomFieldValue( var13.getId(), var6); var16.setAssigneeId( var10.getLeadUserName() ); IssueService.CreateValidationResult var17 = var9.validateCreate( var11, var16); if (var17.getErrorCollection().hasAnyErrors()) { Map<String, String> var18 = var17.getErrorCollection().getErrors(); String var19=""""; for (String var20: var18.keySet()) { var19 += ""CI Plugin: Error Field, ""+var20 + "" - "" + var18.get(var20)+""\n""; } throw new Exception(var19); } else { var9.create( var11, var17); } } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { long var1 = System.currentTimeMillis(); Map<String, Assignment<Integer>> var2 = new HashMap<>(); Assignment<Integer> var3 = new Assignment<Integer>(); var3.addAssignment(1, createBroker(""br1"", ""1.1.1.1"", 1111)); var3.addAssignment(2, createBroker(""br2"", ""1.1.1.2"", 2222)); var3.addAssignment(3, createBroker(""br1"", ""1.1.1.1"", 1111)); var2.put(""t1"", var3); Assignment<Integer> var4 = new Assignment<Integer>(); var4.addAssignment(1, createBroker(""br1"", ""1.1.1.1"", 1111)); var4.addAssignment(2, createBroker(""br2"", ""1.1.1.2"", 2222)); var4.addAssignment(3, createBroker(""br3"", ""1.1.1.3"", 3333)); var2.put(""t2"", var4); Map<Pair<String, Integer>, Map<String, ClientLeaseInfo>> var5 = new HashMap<>(); var5.put(new Pair<String, Integer>(""t1"", 2), createBrokerLease(""br1"", ""1.1.1.11"", 8888, 1, var1 + 10 * 1000L)); var5.put(new Pair<String, Integer>(""t1"", 4), createBrokerLease(""br1"", ""1.1.1.11"", 8888, 1, var1 + 10 * 1000L)); var5.put(new Pair<String, Integer>(""t2"", 1), createBrokerLease(""br1"", ""1.1.1.1"", 1111, 2, var1 + 20 * 1000L)); when(m_brokerLeaseHolder.getAllValidLeases()).thenReturn(var5); when(m_scheduledExecutor.schedule(any(Runnable.class), anyLong(), eq(TimeUnit.MILLISECONDS))).thenReturn(null); Map<String, Map<Integer, Endpoint>> var6 = m_maker.makeEndpoints(new EventEngineContext(null, null, null), var2); verify(m_scheduledExecutor, times(2)).schedule(any(Runnable.class), anyLong(), eq(TimeUnit.MILLISECONDS)); assertEquals(2, var6.size()); Map<Integer, Endpoint> var7 = var6.get(""t1""); assertEquals(3, var7.size()); assertEndpoint(""br1"", ""1.1.1.1"", 1111, var7.get(1)); assertEndpoint(""br1"", ""1.1.1.11"", 8888, var7.get(2)); assertEndpoint(""br1"", ""1.1.1.1"", 1111, var7.get(3)); Map<Integer, Endpoint> var8 = var6.get(""t2""); assertEquals(3, var8.size()); assertEndpoint(""br1"", ""1.1.1.1"", 1111, var8.get(1)); assertEndpoint(""br2"", ""1.1.1.2"", 2222, var8.get(2)); assertEndpoint(""br3"", ""1.1.1.3"", 3333, var8.get(3)); } "	0	0	1	1	0	0
"protected void Func1() { if (!decodedBody) { decodedBody = true; try { if (null == ctx.getOperation()) { MALMessageHeader var1 = ctx.getHeader(); MALArea var2 = MALContextFactory.lookupArea(var1.getServiceArea(), var1.getAreaVersion()); if (null != var2) { MALService var3 = var2.getServiceByNumber(var1.getService()); if (null != var3) { ctx.setOperation(var3.getOperationByNumber(var1.getOperation())); } } } if (ctx.getHeader().getIsErrorMessage()) { bodyPartCount = 2; } else { bodyPartCount = ctx.getOperation().getOperationStage(ctx.getHeader().getInteractionStage()).getElementShortForms().length; } GENTransport.LOGGER.log(Level.FINE, ""GEN Message decoding var6 ... pc ({0})"", bodyPartCount); messageParts = new Object[bodyPartCount]; if (bodyPartCount == 1) { Object var4 = ctx.getOperation().getOperationStage(ctx.getHeader().getInteractionStage()).getElementShortForms()[0]; messageParts[0] = decodeBodyPart(encBodyElements, ctx, var4); } else if (bodyPartCount > 1) { MALElementInputStream var5 = encBodyElements; if (wrappedBodyParts) { GENTransport.LOGGER.fine(""GEN Message decoding var6 wrapper""); final Blob var6 = (Blob) encBodyElements.readElement(new Blob(), null); final ByteArrayInputStream var7 = new ByteArrayInputStream(var6.getValue()); var5 = encFactory.createInputStream(var7); } for (int var8 = 0; var8 < bodyPartCount; var8++) { GENTransport.LOGGER.log(Level.FINE, ""GEN Message decoding var6 part : {0}"", var8); Object var4 = null; if (!ctx.getHeader().getIsErrorMessage()) { ctx.setBodyElementIndex(var8); var4 = ctx.getOperation().getOperationStage(ctx.getHeader().getInteractionStage()).getElementShortForms()[var8]; } messageParts[var8] = decodeBodyPart(var5, ctx, var4); } } GENTransport.LOGGER.fine(""GEN Message decoded var6""); } catch (MALException ex) { GENTransport.LOGGER.log(Level.WARNING, ""GEN Message var6 ERROR on decode : {0}"", ex); } } } "	0	0	0	0	0	1
"@Override public void Func1() { super.Func1(); if (page == null) { page= new NewUnitWizardPage(""New Ceylon Unit"", ""Create a new Ceylon compilation unit that will contain Ceylon source."", """", CEYLON_NEW_FILE); page.init(selection); } addPage(page); } "	0	0	0	0	0	1
"private void Func1(Element var1) { int var2 = var1.select(""tr"").size(); for (int var3=0; var3<var2; var3++) { Currency var4 = getCurrency(var1, var3); int var5 = getUnit(var1, var3); double var6 = getRate(var1, var3); double var7 = (var5 > 0) ? (var6/var5) : var6; rates.addAvailableCurrency(var4); rates.setConversion(base, var4, var7); log.info(var4.getDisplayName() + "" : "" + var5 + "" units @ "" + var6); } } "	1	1	0	1	0	0
public Assessment Func1(final DataElementErrorCollector var1) { var1.addAll(var1); return var1.isEmpty() ? asmtBuilder.build() : null; } 	1	0	1	1	0	0
public int Func1() { return (mParent != null ? mParent.Func1() : 0) + getHorizontalMargin(); } 	1	0	0	1	0	0
public int Func1() { return (mParent != null ? mParent.Func1() : 0) + getHorizontalPadding(); } 	1	0	0	1	0	0
"public List<FormListing> Func1( Form ... var1) { this.messageHandler.clear(); if(var1 == null) { return null; } if(var1.length == 0) { return this.messageHandler.getReturnValue(); } List<String> var2 = new ArrayList(); for(Form var3 : var1) { if(var3 == null) { throw new FluidClientException( ""Cannot provide 'null' for Form."", FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR); } else if(var3.getEcho() == null || var3.getEcho().isEmpty()) { throw new FluidClientException(""Echo needs to be set to bind to return."", FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR); } else if(var2.contains(var3.getEcho())) { throw new FluidClientException(""Echo message '""+var3.getEcho() +""' already added."", FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR); } var2.add(var3.getEcho()); this.sendMessage(var3); } long var4 = (System.currentTimeMillis() + this.getTimeoutInMillis()); while(true) { if(this.messageHandler.hasErrorOccurred()) { List<Error> var5 = this.messageHandler.getErrors(); Error var6 = var5.get(0); throw new FluidClientException( var6.getErrorMessage(), var6.getErrorCode()); } else if(this.messageHandler.isConnectionClosed() || this.messageHandler.doReturnValueEchoMessageContainAll(var2)) { return this.messageHandler.getReturnValue(); } else { try { Thread.sleep(50); } catch (InterruptedException e) { throw new FluidClientException( ""Thread interrupted. ""+e.getMessage(), e,FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR); } } long var7 = System.currentTimeMillis(); if(var7 > var4) { throw new FluidClientException( ""SQLUtil-WebSocket-GetTableRecordForms: Timeout while waiting for all return data. There were '"" +this.messageHandler.getReturnValue().size() +""' items after a Timeout of ""+( TimeUnit.MILLISECONDS.toSeconds(var4))+"" seconds."" ,FluidClientException.ErrorCode.IO_ERROR); } } } "	0	0	0	0	0	1
"@Override public void Func1() { new AlertDialog.Builder(this) .setIcon(R.drawable.ic_hangman_dead) .setTitle(""Game Over"") .setMessage(getResources().getString(R.string.txt_bugger, mCurrentVocabTerm.getPhrase())) .setOnDismissListener(new DialogInterface.OnDismissListener() { @Override public void Func2(DialogInterface var1) { finish(); } }) .setPositiveButton(getResources().getString(R.string.btn_share_score_with_mate), new DialogInterface.OnClickListener() { @Override public void Func3(DialogInterface var1, int var2) { mPresenter.shareClockedGameAction(); } }) .show(); } "	0	0	0	0	0	1
public Settings Func1(Predicate<String> var1) { return new Settings(new FilteredMap(this.settings, var1, null), secureSettings == null ? null : new PrefixedSecureSettings(secureSettings, UnaryOperator.identity(), var1)); } 	0	1	1	0	0	0
private static boolean Func1(Type[] var1, Type[] var2) { for (int var3 = 0; var3 < var1.length; var3++) { if (!var1[var3].equals(var2[var3])) { if (!Func1(var1[var3], var2[var3])) { return false; } } } return true; } 	0	0	0	0	0	1
"@Override public String Func1(@NotNull String var1) { String var2 = super.Func1(var1); if (var2 != null) { return var2; } if (!initialMacro.getKey().equals(var1)) { if (Project.getCurrentProject().findMacroByKey(var1) != null) { return bundle.getString(""Macros.key_already_exists""); } } return null; } "	1	0	1	1	0	0
@Override public void Func1(boolean var1, final ArrayList<EmailMessage> var2, User var3) { allEmails = new ArrayList<>(var2); FolderFragment var4 = (FolderFragment) getFragmentManager().findFragmentByTag(Constants.FRAGMENT_TAG_FOLDER); if (!var4.isAdded()) { if (var4 != null) { Bundle var5 = new Bundle(); var5.putInt(Constants.BUNDLE_ON_POST_REFRESH, var2.size()); var4.setArguments(var5); } } else { Func1(var2.size()); } } 	0	1	0	0	0	0
"@Test public void Func1() { File var1 = new File(""var1""); String var2 = testData().directorApp(var1, ""profile"").completeState(); String var3 = StringPrinter.buildStringFromLines( ""-application org.eclipse.equinox.p2.director"", ""-clean"", ""-consolelog"", ""-repository http://p2repo"", ""-metadataRepository http://metadatarepo"", ""-artifactRepository http://artifactrepo"", ""-installIU com.diffplug.iu,com.diffplug.otheriu/1.0.0"", ""-profile profile"", ""-destination file://"" + var1.getAbsolutePath()); Assert.assertEquals(var3, var2); } "	0	0	0	0	0	1
"protected static RequestPayload Func1( final String var1, final String var2, final String var3, final boolean var4) { final String var5 = ""if "" + var2 + "" is not None:\n"" + pythonIndent(3) + ""if "" + var2 + "" not isinstance("" + var2 + "", "" + var3 + ""):\n"" + pythonIndent(4) + ""raise TypeError('"" + var1 + "" should have request payload of type: "" + var3 + ""')\n"" + pythonIndent(3) + ""self.body = xmldom.tostring("" + var2 + "".to_xml())""; return new RequestPayload(var2, var5, var4); } "	0	0	0	0	0	1
"public void Func1(){ int var1 = 20; plates.forEach(plate ->{ plate.forEach(cellPoint -> { int var2 = (int)cellPoint.getX(); int var3 = (int)cellPoint.getY(); PlanetCell var4 = geosphere.waitForCellAt(var2, var3); Point var5 = var4.getVelocity(); Point var6 = var4.getGridPosition(); Point var7 = var4.getActualPosition(); var7.add(var5); Point var8 = new Point(var1, var1); var6.add(var8); if (var5.getX() > 0){ if (var6.getX() <= var7.getX()){ System.out.println(""Move Cell""+var4+"" in the X direction by +1 var4""); var7.set(var6); } }else if (var5.getX() < 0){ if (var6.getX() >= var7.getX()){ System.out.println(""Move Cell""+var4+"" in the X direction by -1 var4""); } } if (var5.getY() > 0){ if (var6.getY() <= var7.getY()){ System.out.println(""Move Cell""+var4+"" in the Y direction by +1 var4""); } }else if (var5.getY() < 0){ if (var6.getY() >= var7.getY()){ System.out.println(""Move Cell""+var4+"" in the Y direction by -1 var4""); } } geosphere.release(var4); }); System.out.println(""Plate Updated""); }); } "	0	0	0	0	0	1
@Test public void Func1(){ List<Point> var1 = buildPlateWithNullTest(1); testTask.addPlate(var1); for (int var2 = 0; var2 < 4; var2++) testTask.updatePlates(); } 	1	0	1	1	0	0
"@Override public List<Metrics> Func1(final ResultSet var1) throws SQLException { final List<Metrics> var2 = new ArrayList<>(); while (var1.next()) { var2.add(new MetricsBuilder() .withHeight(var1.getDouble(""height"")) .withWeight(var1.getDouble(""weight"")) .withNationality(var1.getString(""nationality"")) .withPlace_of_birth(var1.getString(""place_of_birth"")) .withEducation(var1.getString(""education"")) .withUserId(var1.getLong(""userId"")) .build()); } return var2; } "	0	0	0	0	0	1
"public static Result Func1(String var1){ Logger.debug(""Ids: ""+var1); String[] var2 = var1.split("",""); List<Coupon> var3 = new ArrayList<Coupon>(); for(String var4: var2){ long var5 = Long.valueOf(var4); Coupon var6 = Coupon.find(var5); var3.add(var6); } DynamicForm var7 = Form.form().bindFromRequest(); String var8 = var7.data().get(""orderby""); String var9 = var7.data().get(""var10""); int var10 = 0; if(var9.equalsIgnoreCase(""ascending"")){ var10 = Coupon.SORT_ASCENDING; }else if(var9.equalsIgnoreCase(""descending"")){ var10 = Coupon.SORT_DESCENDING; }else{ Logger.debug(""Method went wrong"");		} Logger.debug(""Method: "" +var10); List<Coupon> var11; if(var8.equalsIgnoreCase(""Category"")){ var11 = Coupon.sortByCategory(var3, var10); }else if(var8.equalsIgnoreCase(""Price"")){ var11 = Coupon.sortByPrice(var3, var10); }else if(var8.equalsIgnoreCase(""Date"")){ var11 = Coupon.sortByDate(var3, var10); }else{ Logger.error(""Wrong orderby type""); return TODO; } User var12 = Sesija.getCurrentUser(ctx()); return ok(index.render(var12, var11, Category.all())); } "	1	1	0	0	0	0
"@Override public void Func1(View var1) { if(!MainActivity.isSafe()) return; if(MainActivity.device==null) {MainActivity.toast(""You first need to adjust the settings ...""); return;} MainActivity.getInstance().leaveBluetoothOn=true; Intent var2 = new Intent(MainActivity.getInstance(), PredictionActivity.class); ExperimentalFragment.this.startActivityForResult(var2, MainActivity.LEAVE_BLUETOOTH_ON); } "	0	1	0	0	0	0
private int Func1(IInventory var1, ItemStack var2) { for (int var3 = 0; var3 < var1.getSizeInventory(); ++var3) { if (var1.getStackInSlot(var3) != null && var1.getStackInSlot(var3).getItem() == var2.getItem() && var1.getStackInSlot(var3).isStackable() && var1.getStackInSlot(var3).getCount() < var1.getStackInSlot(var3).getMaxStackSize() && var1.getStackInSlot(var3).getCount() < var1.getInventoryStackLimit() && (!var1.getStackInSlot(var3).getHasSubtypes() || var1.getStackInSlot(var3).getItemDamage() == var2.getItemDamage())) { return var3; } } return -1; } 	0	0	0	0	0	1
public void Func1() { view.enableSend(false); } 	1	0	1	1	0	0
"@Override public void Func1() { super.Func1(); inputField.setText(defaultInputText); String var1 = Utils.getLocalizedMessage(""irc.gui.options""); int var2 = fontRendererObj.getStringWidth(var1) + 20; btnOptions = new GuiButton(0, this.width - var2, 0, var2, 20, var1); this.buttonList.add(btnOptions); } "	1	0	1	0	0	0
"protected void Func1(Status var1) { Intent var2 = new Intent(getContext(), ViewThreadActivity.class); var2.putExtra(""id"", var1.id); startActivity(var2); } "	0	1	0	0	0	0
private void Func1() throws IOException { InputStream var1 = myContext.getAssets().open(DB_NAME); String var2 = DB_PATH + DB_NAME; OutputStream var3 = new FileOutputStream(var2); byte[] var4 = new byte[1024]; int var5; while ((var5 = var1.read(var4)) > 0) { var3.write(var4, 0, var5); } var3.flush(); var3.close(); var1.close(); } 	1	0	1	1	0	0
"public static void Func1 () { try { FileHandle var1; do { var1 = new FileHandle(directory + ""screenshot"" + counter++ + "".png""); } while (var1.exists()); Pixmap var2 = getScreenshot(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), false); PixmapIO.writePNG(var1, var2); var2.dispose(); } catch (Exception e) { } } "	1	1	1	1	1	0
public void Func1(String var1, byte[] var2, long var3) { templates.put(var1, new ByteArrayTemplateSource(instanceId, var1, var2, var3)); } 	1	0	1	1	0	0
private List<Map<String, ?>> Func1(Entity var1) { List<Map<String, ?>> var2 = new ArrayList<Map<String, ?>>(); List<Instance> var3 = repository.getInstances(var1.getEntityNamespace(), var1.getName(), true); long var4 = 0; for (Instance var5 : var3) { registerReference(var5, ++var4); var2.add(renderInstance(var1, var5)); } return var2; } 	0	1	0	0	0	0
public static ResourceResolver Func1(ResourceResolverFactory var1, String var2) throws LoginException { ResourceResolver var3; var3 = getResourceResolverForUser(resourceResolverFactory, null); return var3; } 	1	1	1	1	1	0
private void Func1() { calipersView.setEnabled(calipersMode); MenuItem var1 = menu.findItem(R.id.action_switch); if (calipersMode) { getSupportActionBar().setTitle(getString(R.string.ep_calipers_title)); getSupportActionBar().setBackgroundDrawable(new ColorDrawable(ContextCompat.getColor(this, R.color.primary))); unfadeCalipersView(); var1.setTitle(R.string.image_button_title); selectMainMenu(); } else { getSupportActionBar().setTitle(getString(R.string.image_mode_title)); getSupportActionBar().setBackgroundDrawable(new ColorDrawable(Color.BLACK)); fadeCalipersView(); var1.setTitle(R.string.measure_button_title); selectImageMenu(); } } 	0	1	0	0	0	0
@Override protected boolean Func1(Object var1, Method var2, Object[] var3) throws Throwable { if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) { if (var3 != null && var3.length > 0) { for (int var4 = 0; var4 < var3.length; var4++) { if (var3[var4] instanceof String) { String var5 = (String) var3[var4]; if (!TextUtils.equals(var5, mHostContext.getPackageName())) { var3[var4] = mHostContext.getPackageName(); } } } } } return super.Func1(var1, var2, var3); } 	0	1	0	0	0	0
public Class Func1() { return type; } 	0	0	0	0	0	1
private void Func1() { for (Field var1 : this.fields) { validateValue(var1, getFieldValueFromObject(var1, this.targetObject)); } } 	1	1	0	0	0	0
"@Override public void Func1(Uri var1) { Log.d(""MainActivity"", ""Func1 - method called with: -->"" + var1 + ""<--""); } "	0	0	0	0	0	1
public Object Func1(Long var1, String var2) { Entity var3 = dataDefinitionService.get(TechnologiesConstants.PLUGIN_IDENTIFIER, TechnologiesConstants.MODEL_TECHNOLOGY_OPERATION_COMPONENT).get(var1); if ((var3 == null) || (var3.getField(var2) == null)) { return null; } else { return var3.getField(var2); } } 	0	0	0	0	0	1
"private void Func1(String var1, boolean var2) throws IOException { String var3 = getStr(var1, TeamDataConstants.TEAM_DATA_DIRECTORY); String var4 = getStr(var1, TeamDataConstants.TEAM_DATA_DIRECTORY_URL); TeamSettingsFile var5 = new TeamSettingsFile(var3, var4); var5.read(); if (var2 || var5.needsRefresh()) { var5.write(); logger.fine(""Republished settings.xml file for "" + var1); } } "	0	1	0	0	0	0
public void Func1(ShopUpdateEvent var1) { mShopsWithItems = var1.shopMap; getLoaderManager().restartLoader(LAODER_ID, null, this); } 	0	1	0	0	0	0
public Result Func1() { ClassLoader var1 = switchClassLoader(classLoader); Result var2 = createResult(Reflections.invoke(executor, Func1)); switchClassLoader(var1); return var2; } 	1	1	1	0	1	0
"@Test public void Func1() throws Exception { doTestTemplateExpansion(""name"", ""(1 to 10)"", """"); } "	0	0	0	0	0	1
"public ItemCollection Func1(ItemCollection var1, String var2, int var3) throws Exception { ItemCollection var4 = modelService.getModel(var2).getTask( var3); if (var4 == null) throw new Exception( ""error Func1: Process Entity can not be found ("" + var2 + ""|"" + var3 + "")""); String var5 = var4.getItemValueString(""txteditorid""); if ("""".equals(var5)) var5 = ""default""; int var6 = var4.getItemValueInteger(""numProcessID""); String var7 = var4 .getItemValueString(""$modelversion""); String var8 = var4 .getItemValueString(""txtworkflowgroup""); workItem = new ItemCollection(); workItem.replaceItemValue(""type"", ""workitem""); workItem.replaceItemValue(""$var6"", var6); workItem.replaceItemValue(""$writeAccess"", workflowService.getUserName()); workItem.replaceItemValue(""$uniqueidRef"", var1.getItemValueString(""$uniqueid"")); workItem.replaceItemValue(""$modelversion"", var7); workItem.replaceItemValue(""txtworkflowgroup"", var8); workItem.replaceItemValue(""txtworkfloweditorid"", var5); return workItem; } "	1	0	1	0	0	0
"public ApexClassCodeCoverageBean[] Func1() { PartnerConnection var1 = ConnectionHandler.getConnectionHandlerInstance().getConnection(); ApexClassCodeCoverageBean[] var2 = null; String[] var3 = null; if (CommandLineArguments.getClassManifestFiles() != null) { LOG.debug("" Fetching apex classes from location : "" + CommandLineArguments.getClassManifestFiles()); var3 = ApexClassFetcherUtils .fetchApexClassesFromManifestFiles(CommandLineArguments.getClassManifestFiles()); } if (CommandLineArguments.getSourceRegex() != null) { LOG.debug("" Fetching apex classes with regex : "" + CommandLineArguments.getSourceRegex()); var3 = ApexClassFetcherUtils.fetchApexClassesBasedOnMultipleRegexes(var1, var3, CommandLineArguments.getSourceRegex()); } if (var3 != null && var3.length > 0) { String var4 = processClassArrayForQuery(var3); String var5 = ""/services/data/v"" + SUPPORTED_VERSION + ""/tooling""; String var6 = QueryConstructor.getAggregatedCodeCoverage(var4); JSONObject var7 = null; var7 = WebServiceInvoker.doGet(var5, var6, OAuthTokenGenerator.getOrgToken()); LOG.debug(""var7 says "" + var7 + ""\n var5 is "" + var5 + ""\n var6 is "" + var6); if (var7 != null) { var2 = processJSONResponseAndConstructCodeCoverageBeans(var1, var7); } if (var2 == null) { ApexUnitUtils.shutDownWithErrMsg( ""Code coverage metrics not computed. Null object returned while processing the JSON response from the Tooling API""); } } else { ApexUnitUtils.shutDownWithErrMsg(""No/Invalid Apex source classes mentioned in manifest file and/or "" + ""regex pattern for ApexSourceClassPrefix didn't return any Apex source class names from the org""); } return var2; } "	0	1	1	0	0	0
"Metadata Func1(TypeElement var1) throws CannotGenerateCodeException { verifyType(var1); PackageElement var2 = elements.getPackageOf(var1); ImmutableSet<ExecutableElement> var3 = methodsOn(var1, elements); ImpliedClass var4 = new ImpliedClass(var2, generatedBuilderSimpleName(var1), var1, elements); Optional<TypeElement> var5 = tryFindBuilder(var4, var1); return new Metadata.Builder(elements) .setType(var1) .setBuilder(var5.or(var4)) .setBuilderFactory(var5.isPresent() ? BuilderFactory.from(var5.get()) : Optional.of(NO_ARGS_CONSTRUCTOR)) .setGeneratedBuilder(var4) .setValueType(var4.createNestedClass(""Value"")) .setPartialType(var4.createNestedClass(""Partial"")) .setPropertyEnum(var4.createNestedClass(""Property"")) .addAllUnderriddenMethods(findUnderriddenMethods(var3)) .setBuilderSerializable(shouldBuilderBeSerializable(var5)) .setGwtCompatible(isGwtCompatible(var1)) .setGwtSerializable(isGwtSerializable(var1)) .addAllProperties(findProperties(var1, var3, var5).values()) .build(); } "	0	0	0	0	0	1
"private void Func1(final ContentProviderClient var1, SyncResult var2) throws RemoteException, InterruptedException, ExecutionException, TimeoutException { checkCancellation(""before requesting observations""); OpenMrsChartServer var3 = new OpenMrsChartServer(App.getConnectionDetails()); RequestFuture<JsonObservationsResponse> var4 = RequestFuture.newFuture(); TimingLogger var5 = new TimingLogger(LOG.tag, ""obs update""); checkCancellation(""before updating observations""); String var6 = getLastSyncToken(var1, Contracts.Table.OBSERVATIONS); String var7 = Func1( var6, var1, var2, var3, var4, var5); var5.addSplit(""finished observation update""); storeSyncToken(var1, Contracts.Table.OBSERVATIONS, var7); checkCancellation(""before deleting temporary observations""); var1.delete(Observations.CONTENT_URI, Observations.TEMP_CACHE + ""!=0"", new String[0]); var5.addSplit(""delete temp observations""); var5.dumpToLog(); } "	0	0	0	0	0	1
public boolean Func1(World var1, BlockPos var2) { return var1.getBlockState(var2.add(0, -2, 0)) == Blocks.WATER.getDefaultState(); } 	0	0	0	0	0	1
"private String Func1(Student var1, StudentSecurity var2, String var3) { if (var1.getStateAbbreviation().compareTo(var3) != 0) throw new UnauthorizedUserException(""Attempted to modify var1 in state: "" + var1.getStateAbbreviation() + "" endpoint received "" + var3); String var4 = """"; List<FieldError> var5 = fileUploadSecurityValidator.Func1(var1, var2); if(var5.size() == 0) { for(FieldError var6 : var5) { var4 += var6.getDefaultMessage() + ""\n""; } } return var4; } "	1	1	1	1	1	0
"private void Func1(Object var1, boolean var2) throws VisADException, RemoteException { Trace.call1(""PlanView.loadData""); if (loadedAny && (var1 != null) && var1.equals(currentLevel)) { return; } getDataSelection().putProperty(""levelChanged"", true); if ((workingGrid == null) || !GridUtil.isVolume(workingGrid)) { try { showWaitCursor(); if (loadedAny) { } workingGrid = (FieldImpl) getGrid(getGridDataInstance()); if (workingGrid == null) { return; } } finally { showNormalCursor(); } } loadedAny    = true; currentLevel = var1; currentSlice = null; int  var3 = getSamplingModeValue(getDefaultSamplingMode()); Real var4    = getLevelReal(var1); if (GridUtil.isVolume(workingGrid)) {  // need to slice if (((var1 != null) && (currentLevels != null)) && hasLevel(var1)) { var3 = Data.NEAREST_NEIGHBOR; } if ((var1 != null) && ((currentLevels != null) && (currentLevels.length > 1))) { if (var4 == null) { return; } if (displayIs3D && !getMultipleIsTopography()) { currentSlice = GridUtil.sliceAtLevel(workingGrid, var4, var3); } else {  // slice for 2D display or topography currentSlice = GridUtil.make2DGridFromSlice( GridUtil.sliceAtLevel( workingGrid, var4, var3)); } if (levelsFromData == null) { levelsFromData = getGridDataInstance().getLevels(); setLevels(levelsFromData); } } else { currentSlice = workingGrid; } } else {  // 2D grid or requested slice currentSlice = workingGrid; if (GridUtil.is3D(currentSlice) && ( !displayIs3D || getMultipleIsTopography() || getParameterIsTopography())) { currentSlice = GridUtil.make2DGridFromSlice(currentSlice); } } getGridDisplayable().loadData(getSliceForDisplay(currentSlice)); if ((var1 == null) || (var4 == null) || !displayIs3D) { return; } if (levelBox != null) { levelBox.setSelectedItem(getLabeledReal(var1)); } Real var5 = null; try { var5 = GridUtil.getAltitude(currentSlice, var4); } catch (Exception ve) { var5 = null; } if ((var5 != null) && !var5.isMissing()) { EarthLocationTuple var6 = new EarthLocationTuple(0, 0, var5.getValue()); if ( !var2) { lastZValue = earthToBox(var6)[2]; zSelector.setZValue(lastZValue); } if (var2) { var1 = GridUtil.getLevel(currentSlice, var4); } } setLevelReadoutLabel(""Current var1: "" + formatLevel(var1)); String var7 = getDisplayListTemplate(); if (var7.contains(MACRO_LEVEL)) { updateLegendAndList(); } else { updateLegendLabel(); } Trace.call2(""PlanView.loadData""); } "	0	0	0	0	0	1
"public void Func1(List<PlotData> var1, List<ChannelView> var2, TimeInterval var3, IMeanState var4, int var5) { maxValue = Double.NEGATIVE_INFINITY; double var6 = Double.POSITIVE_INFINITY; DecimalFormat var7 = new DecimalFormat(""#.###E0""); for (PlotData var8: var1) { double var9 = var4.getValue(var8.getMaxValue(), var8.getMeanValue()); if (var9 > maxValue) { maxValue = Double.valueOf(var7.format(var9)); } double var10 = var4.getValue(var8.getMinValue(), var8.getMeanValue()); if (var10 < var6) { var6 = Double.valueOf(var7.format(var10));; } } if (maxValue == var6) { amp = 100.0; } else { amp = maxValue - var6; } this.var5 = var5; } "	0	0	1	1	0	0
"public static void Func1(String[] var1) throws Exception { JobConf var2=new JobConf(WordCountSortMain.class); var2.set(""mapreduce.ifile.readahead"", ""false""); var2.set(""mapreduce.output.textoutputformat.separator"", "":""); String var3[] = new GenericOptionsParser(var2, var1).getRemainingArgs(); Job var4 = Job.getInstance(var2); String var5 = var2.get(""dict.path""); if(var5!=null) { URI var6 = new URI(var5); var4.addCacheArchive(var6); } var4.setJobName(""WordCount""); var4.setInputFormatClass(PdfInputFormat.class); FileInputFormat.addInputPath(var4, new Path(var3[0])); FileOutputFormat.setOutputPath(var4, new Path(var3[1])); var4.setMapperClass(WordCountMapper.class); var4.setReducerClass(WordCountReducer.class); var4.setOutputKeyClass(Text.class); var4.setOutputValueClass(IntWritable.class); Job var7 = Job.getInstance(var2); var7.setJobName(""Word Freq Sort""); var7.setInputFormatClass(TextInputFormat.class); FileInputFormat.addInputPath(var7, new Path(var3[1])); FileOutputFormat.setOutputPath(var7, new Path(var3[2])); var7.setMapperClass(WordFreqSortMapper.class); var7.setReducerClass(WordFreqSortReducer.class); var7.setPartitionerClass(GroupPartitioner.class); var7.setSortComparatorClass(KeyComparator.class); var7.setGroupingComparatorClass(GroupComparator.class); var7.setMapOutputKeyClass(WordFreqWritable.class); var7.setMapOutputValueClass(NullWritable.class); var7.setOutputKeyClass(IntWritable.class); var7.setOutputValueClass(Text.class); var7.setNumReduceTasks(1); ControlledJob var8=new  ControlledJob(var2); var8.setJob(var4); ControlledJob var9=new  ControlledJob(var2); var9.setJob(var7); var9.addDependingJob(var8); JobControl var10=new JobControl(""Word Count & Sort""); var10.addJob(var8); var10.addJob(var9); Thread var11 = new Thread(var10); var11.start(); int var12 = 0; while(true) { if(var10.allFinished()){ System.out.println(var10.getSuccessfulJobList()); var10.stop(); var12 = 0; break; } if(var10.getFailedJobList().size() > 0){ System.out.println(var10.getFailedJobList()); var10.stop(); var12 = -1; break; } } Counters var13 = var7.getCounters(); System.out.println(""All Tokens: ""+var13.findCounter(""WordCountMain.WordStats"", ""TOKENS"").getValue()); System.out.println(""     Words: ""+var13.findCounter(""WordCountMain.WordStats"", ""WORDS"").getValue()); System.out.println(""All Tokens: ""+var13.findCounter(WordCountMain.WordStats.TOKENS).getValue()); System.out.println(""     Words: ""+var13.findCounter(WordCountMain.WordStats.WORDS).getValue()); System.exit(var12); } "	0	0	0	0	0	1
@NonNull private <T> Subscription Func1(@NonNull final Observable<T> var1, @NonNull final Observable<Boolean> var2, @NonNull final Action1<T> var3, @NonNull final Action1<Throwable> var4, @NonNull final Action0 var5) { final Observable<T> var6; if (var3 == Actions.empty() && var4 == Actions.empty() && var5 == Actions.empty()) { var6 = var1.doOnCompleted(var5); } else { var6 = var1.observeOn(AndroidSchedulers.mainThread()).doOnCompleted(var5); } return isCreatedSubject.first() .switchMap(created -> created ? var6 : Observable.empty()) .takeUntil(var2.filter(condition -> condition)) .subscribe(var3, throwable -> { final boolean var7 = throwable instanceof OnErrorThrowable; if ((!var7 && throwable instanceof RuntimeException) || (var7 && throwable.getCause() instanceof RuntimeException)) { Lc.assertion(throwable); } var4.call(throwable); }); } 	0	1	0	0	0	0
private void Func1() { ExplosionPrimeEvent var1 = EventFactory.callEvent(new ExplosionPrimeEvent(this)); if (!var1.isCancelled()) { Location var2 = getLocation(); double var3 = var2.getX() + 0.49, var4 = var2.getY() + 0.49, var5 = var2.getZ() + 0.49; world.createExplosion(this, var3, var4, var5, var1.getRadius(), var1.getFire(), true); } remove(); } 	0	1	1	1	0	0
"public void Func1(IProgressMonitor var1) throws SoCTraceException { traceDB = new TraceDBObject(dbName, DBMode.DB_CREATE); IdManager var2 = new IdManager(); IdManager var3 = new IdManager(); IdManager var4 = new IdManager(); IdManager var5 = new IdManager(); IdManager var6 = new IdManager(); IdManager var7 = new IdManager(); IdManager var8 = new IdManager(); Random var9 = new Random(); var1.subTask(""Generating event types""); int var10 = 0; for (var10 = 0; var10 < numberOfEventType; var10++) { int var11 = categories.get(var10 % categories.size()); EventType var12 = createTypes(traceDB, var11, var3, var5); typesList.add(var12); } var1.subTask(""Generating event producer""); EventProducer var13 = createEventProd(-1, var8, traceDB); for (var10 = 0; var10 < numberOfProducers - numberOfLeaves; var10++) { createEventProd(var13.getId(), var8, traceDB); } int var14 = producers.size(); for (var10 = 0; var10 < numberOfLeaves; var10++) { int var15 = producers.get( var9.nextInt(var14 - 1) + 1).getId(); leaves.add(createEventProd(var15, var8, traceDB)); } traceDB.commit(); var1.subTask(""Generating events""); createEvent(var2, var4, var1); if (var1.isCanceled()) { traceDB.dropDatabase(); return; } IdManager var16 = new IdManager(); for (var10 = 0; var10 < NUMBER_OF_FILES; var10++) { File var17 = new File(var16.getNextId()); var17.setPath(FILE_INFO_PREFIX + var17.getId()); var17.setDescription(FILE_INFO_PREFIX + var17.getId()); traceDB.save(var17); } if (forceIndex) { var1.subTask(""Indexing timestamp""); traceDB.createTimestampIndex(); var1.subTask(""Indexing event id in EVENT_PARAM""); traceDB.createEventParamIndex(); } traceDB.close(); var1.subTask(""Filling trace metadata""); SystemDBObject var18 = SystemDBObject.openNewIstance(); TraceType var19 = buildTraceType(var18); var7.setNextId(var18.getMaxId(FramesocTable.TRACE_PARAM_TYPE.toString(), ""ID"") + 1); for (var10 = 0; var10 < NUMBER_OF_TRACE_PARAMETERS; var10++) { TraceParamType var20 = new TraceParamType(var7.getNextId()); var20.setName(PARAMETER_NAME_PREFIX + var20.getId()); var20.setType(PARAMETER_TYPE); var20.setTraceType(var19); var18.save(var20); } Trace var21 = new Trace(var18.getNewId(FramesocTable.TRACE.toString(), ""ID"")); var21.setAlias(TRACE_NAME + ""_"" + var21.getId()); var21.setBoard(METADATA); var21.setDbName(dbName); var21.setDescription(METADATA); var21.setNumberOfCpus(1); var21.setNumberOfEvents((int) numberOfGeneratedEvents); var21.setOperatingSystem(METADATA); var21.setOutputDevice(METADATA); var21.setProcessed(false); var21.setMinTimestamp(MIN_TIMESTAMP); var21.setMaxTimestamp(maxTimeStamp); var21.setTimeUnit(TimeUnit.NANOSECONDS.getInt()); var21.setTracedApplication(METADATA); var21.setTracingDate(new Timestamp(new Date().getTime())); var21.setType(var19); var6.setNextId(var18.getMaxId(FramesocTable.TRACE_PARAM.toString(), ""ID"") + 1); for (TraceParamType var20 : var19.getTraceParamTypes()) { TraceParam var22 = new TraceParam(var6.getNextId()); var22.setTraceParamType(var20); var22.setTrace(var21); var22.setValue(PARAMETER_VALUE); var18.save(var22); } var18.save(var21); var18.close(); } "	0	0	0	0	0	1
"protected long Func1() throws JSSyntaxException { boolean var1 = true; long var2 = 0; while (chars.hasNext()) { char var3 = chars.peek(); if (!Characters.isHexDigit(var3)) { if (Characters.canStartIdentifier(var3) || var1) throw new JSSyntaxException(""Unexpected token"", chars.position()); break; } var1 = false; var2 = (var2 << 4) | asHexDigit(chars.next()); } if (var1) throw new JSEOFException(""Unexpected EOF in hex literal"", chars.position()); return var2; } "	1	1	0	0	0	0
public static BufferedImage Func1(String var1){ try { Item var2 = Wiki.get(var1); if(var2 != null){ Map<String, Integer> var3 = var2.attgive; if(var3 != null){ int var4 = var3.size(); String var5[] = new String[var4]; int var6[] = new int[var4]; var4 = 0; for(String var7 : var3.keySet()){ Integer var8 = var3.get(var7); var5[var4] = var7; var6[var4] = var8; var4 ++; } Inspiration var9 = new Inspiration(null, var5, var6); return var9.longtip(); } } }catch (Exception e) { e.printStackTrace(); } return null; } 	1	0	0	1	0	0
protected WonMessage Func1(FeedbackCommandEvent var1) throws WonMessageBuilderException { URI var2 = var1.getConnectionURI(); WonNodeInformationService var3 = getEventListenerContext().getWonNodeInformationService(); Dataset var4 = getEventListenerContext().getLinkedDataSource().getDataForResource(var2); URI var5 = WonRdfUtils.NeedUtils.getLocalNeedURIFromConnection(var4, var2); URI var6 = WonRdfUtils.NeedUtils.getWonNodeURIFromConnection(var4, var2); return WonMessageBuilder .setMessagePropertiesForHintFeedback( var3.generateEventURI( var6), var2, var5, var6, var1.getValue().equals(WON.GOOD) ) .build(); } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception{ TestDataHelper var1 = new TestDataHelper(); Item var2 = var1.generateItem(1); var2.setIsDone(true); Item var3 = var1.generateItem(2); Item var4 = var1.generateItem(3); Item var5 = var1.generateItem(4); List<Item> var6 = var1.generateItemList(var5, var2, var3, var4); TaskBook var7 = var1.generateTaskBook(var6); var1.addToModel(model, var6); assertCommandBehavior(""done 2"", DoneCommand.MESSAGE_DONE_ITEM_FAIL, var7, var6); } "	0	0	1	1	0	0
"private void Func1(MouseEvent var1) { logger.debug(""Reload clicked""); this.scraper.clearCache(this.currentDisplayItem); this.changeSelection(this.presenter, this.scraper, this.currentDisplayItem, true); } "	1	0	0	1	0	0
public void Func1(String var1, String[] var2, List<ReportItem> var3, boolean var4) throws Throwable, IOException, ServiceException { String var5 = getReportName(var4); SpreadsheetEntry var6 = getSpreadsheet(var5 ); int var7 = var3.size() + 1; int var8 = var2.length; addNewWorksheet(var6, var1, var7, var8); WorksheetEntry var9 = getWorksheet(var6, var1); if (var9 != null) { updateWorksheetWithAllItems(var9, var2, var3, var7, var8); } } 	1	1	0	1	0	0
private OutputStream Func1(boolean var1) throws IOException { final SFTPConnectionHandler var2 = (SFTPConnectionHandler)ConnectionPool.getConnectionHandler(CONN_HANDLER_FACTORY, fileURL, true); try { var2.checkConnection(); SftpFile var3; if(exists()) { var3 = var2.sftpSubsystem.openFile(absPath, var1?SftpSubsystemClient.OPEN_WRITE|SftpSubsystemClient.OPEN_APPEND :SftpSubsystemClient.OPEN_WRITE|SftpSubsystemClient.OPEN_TRUNCATE); if(!var1) fileAttributes.setSize(0); } else { FileAttributes var4 = new FileAttributes(); var4.setPermissions(new UnsignedInteger32(0644)); var3 = var2.sftpSubsystem.openFile(absPath, SftpSubsystemClient.OPEN_WRITE|SftpSubsystemClient.OPEN_CREATE, var4); fileAttributes.setExists(true); fileAttributes.setDate(System.currentTimeMillis()); fileAttributes.setSize(0); } return new CounterOutputStream( new SftpFileOutputStream(var3, var1?getSize():0) { @Override public void Func2() throws IOException { super.Func2(); var2.releaseLock(); } } , new ByteCounter() { @Override public synchronized void Func3(long var5) { fileAttributes.addToSize(var5); fileAttributes.setDate(System.currentTimeMillis()); } } ); } catch(IOException e) { var2.releaseLock(); throw e; } } 	0	0	0	0	0	1
"public static void Func1(RequestContext var1, String var2) { HttpSession var3 = var1.getRequest().getSession(); var3.setAttribute(""loginRedirectUrl"", var2); } "	0	1	0	0	0	0
"public static String Func1(RequestContext var1) { HttpSession var2 = var1.getRequest().getSession(); String var3 = (String) var2.getAttribute(""loginContextType""); var3 = var3 == null ? ""DELFOI"" : var3; return var3; } "	0	1	0	0	0	0
"public static Long Func1(RequestContext var1) { HttpSession var2 = var1.getRequest().getSession(); String var3 = (String) var2.getAttribute(""var3""); return NumberUtils.isNumber(var3) ? new Long(var3) : RequestUtils.getDelfoi(var1).getId(); } "	0	1	0	0	0	0
public BigDecimal Func1() { return minInvoiceAmount; } 	0	0	0	0	0	1
public void Func1() { innerList.clear(); moreItemsCount.onNext(LoadedItems.UNKNOWN_ITEMS_COUNT); } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception { String var1 = ""package org;\npublic class A {}""; CompilationUnit var2 = parser.parse(var1, false); CompilationUnit var3 = parser.parse(var1, false); List<ImportDeclaration> var4 = new LinkedList<ImportDeclaration>(); var4.add(new ImportDeclaration(new NameExpr(""org.walkmod.B""), false, false)); var2.setImports(var4); List<Action> var5 = getActions(var3, var2); Assert.assertEquals(1, var5.size()); Assert.assertEquals(ActionType.APPEND, var5.get(0).getType()); Assert.assertEquals(2, var5.get(0).getBeginLine()); Assert.assertEquals(1, var5.get(0).getBeginColumn()); assertCode(var5, var1, ""package org;\nimport org.walkmod.B;\npublic class A {}""); var1 = ""package org;\n@Override\npublic class A {}""; parser = new DefaultJavaParser(); var2 = parser.parse(var1, false); var3 = parser.parse(var1, false); var4 = new LinkedList<ImportDeclaration>(); var4.add(new ImportDeclaration(new NameExpr(""org.walkmod.B""), false, false)); var2.setImports(var4); var2.getTypes().get(0).getAnnotations().add(new NormalAnnotationExpr(new NameExpr(""Foo""), null)); var5 = getActions(var3, var2); Assert.assertEquals(2, var5.size()); Assert.assertEquals(ActionType.APPEND, var5.get(0).getType()); Assert.assertEquals(2, var5.get(0).getBeginLine()); Assert.assertEquals(1, var5.get(0).getBeginColumn()); assertCode(var5, var1, ""package org;\nimport org.walkmod.B;\n@Foo()\n@Override\npublic class A {}""); } "	0	0	0	0	0	1
private int Func1() { try { InputStream var1 = Files.newInputStream(Paths.get(lextestPath)); new SimpleLexer(new BasicLexerInput(var1)).stream().forEach(out::println); return 0; } catch (IOException e) { e.printStackTrace(); return 1; } catch (MJError e) { err.println(e.getMessage()); return 1; } } 	0	1	0	0	0	0
@Override public boolean Func1(int var1, int var2, int var3, int var4, int var5, int var6) { return this.Func1(var1 - (var4 << 4), var2 - (var5 << 4), var3 - (var6 << 4)); } 	1	0	0	1	0	0
public void Func1(String var1) { this.type = var1; } 	1	0	1	0	0	0
private void Func1(long var1, boolean var2) { Intent var3 = new Intent(this, OCRActivity.class); var3.putExtra(EXTRA_NATIVE_PIX, var1); var3.putExtra(OCRActivity.EXTRA_USE_ACCESSIBILITY_MODE, var2); var3.putExtra(OCRActivity.EXTRA_PARENT_DOCUMENT_ID, getParentId()); startActivityForResult(var3, REQUEST_CODE_OCR); } 	0	0	1	1	0	0
"private void Func1(int var1, int var2) { stringContext[var1] = replaceAllNonTerminal(stringContext[var1], new Integer(var2).toString() + ""$"", stringContext[var2].toString()); for (int var3 = 0; var3 < theNumberOfNonTerminal; var3++) { if (var3 == var2) { for (int var4 = 0; var4 < nonTerminalRelationGraph[var3].size(); var4++) { ValidateEdge var5 = (ValidateEdge) nonTerminalRelationGraph[var3].get(var4); nonTerminalRelationGraph[var1].add(new ValidateEdge(var1, var5.getDst(), var5.getHasLeft(), var5.getHasRight())); } alreadyVerified[var3] = true; nonTerminalRelationGraph[var3].clear(); } else { ArrayList<ValidateEdge> var6 = new ArrayList<ValidateEdge>(); for (int var4 = 0; var4 < nonTerminalRelationGraph[var3].size(); var4++) { ValidateEdge var5 = (ValidateEdge) nonTerminalRelationGraph[var3].get(var4); if (var5.getDst() == var2) { var6.add(var5); if (var3 != var1) { nonTerminalRelationGraph[var1].add(new ValidateEdge(var5.getSrc(), var1, var5.getHasLeft(), var5.getHasRight())); } } } for (int var4 = 0; var4 < var6.size(); var4++) { nonTerminalRelationGraph[var3].remove(var6.get(var4)); } } } } "	1	1	0	0	0	0
public static <T> T Func1(IMultipartContainer var1, Capability<T> var2, EnumFacing var3) { Set<T> var4 = new HashSet<T>(); for (EnumFacing var5 : EnumFacing.VALUES) { if (var5 != var3 && var5 != var3.getOpposite()) { T var6 = Func1(var1, var2, var3, var5); if (var6 != null) var4.add(var6); } } if (var4.isEmpty()) return null; else if (var4.size() == 1) return var4.iterator().next(); else return CapabilityWrapperRegistry.wrap(var2, var4); } 	1	1	0	1	0	0
"private void Func1(String var1, String var2, ZipOutputStream var3) throws Exception { for (File var4 : new File(var2).listFiles()) { if (var4.isDirectory()) { Func1(var1, var2 + var4.getName() + ""/"", var3); } else { ZipEntry var5 = new ZipEntry(var2.replace(var1, """") + var4.getName()); var3.putNextEntry(var5); try (FileInputStream in = new FileInputStream(var2 + var4.getName())) { IOUtils.copy(in, var3); } } } } "	0	0	0	0	0	1
"public static Class<?> Func1() { if (!isUsingNetty()) throw new IllegalStateException(""ServerPingPlayerSample is only supported in 1.7.2.""); try { return getMinecraftClass(""ServerPing.ServerPingPlayerSample""); } catch (RuntimeException e) { Class<?> var1 = getServerPingClass(); AbstractFuzzyMatcher<Class<?>> var2 = FuzzyClassContract.newBuilder(). constructor(FuzzyMethodContract.newBuilder().parameterExactArray(int.class, int.class)). field(FuzzyFieldContract.newBuilder().typeExact(GameProfile[].class)). build(). and(getMinecraftObjectMatcher()); return setMinecraftClass(""ServerPingPlayerSample"", getTypeFromField(var1, var2)); } } "	0	0	0	0	0	1
"public Param[] Func1(Param[] var1) { List<Param> var2 = new ArrayList<Param>(Arrays.asList(var1)); if(options.useBinaryProtocol) var2.add(new Param(""format"", ""msgpack"")); if(!options.echoMessages) var2.add(new Param(""echo"", ""false"")); if(connectionKey != null) { mode = Mode.RESUME; var2.add(new Param(""resume"", connectionKey)); if(connectionSerial != null) var2.add(new Param(""connection_serial"", connectionSerial)); } else if(options.recover != null) { mode = Mode.RECOVER; Pattern var3 = Pattern.compile(""^([\\w\\-]+):(\\-?\\d+)$""); Matcher var4 = var3.matcher(options.recover); if(var4.matches()) { var2.add(new Param(""recover"", var4.group(1))); var2.add(new Param(""connection_serial"", var4.group(2))); } else { Log.e(TAG, ""Invalid recover string specified""); } } if(options.clientId != null) var2.add(new Param(""client_id"", options.clientId)); return var2.toArray(new Param[var2.size()]); } "	1	0	0	1	0	0
"@Test public void Func1() throws Exception { Writable var1 = new Text(""{\""one\"":true,\""five\"":\""2013-03-27 23:18:40\""}""); JSONObject var2 = (JSONObject) instance.deserialize(var1); assertEquals(var2.get(""five""), Timestamp.valueOf(""2013-03-27 23:18:40.0"")); } "	0	0	0	1	1	0
"@Test @PactVerifications({@PactVerification(HTTP_PROVIDER_NAME), @PactVerification(OTHER_HTTP_PROVIDER_NAME)}) public void Func1() throws Exception { assertEquals(new ConsumerClient(httpProvider.getConfig().url()).getAsMap(""/"", """"), singletonMap (""name"", ""harry"")); assertEquals(new ConsumerClient(otherHttpProvider.getUrl()).getAsMap(""/other"", """"), singletonMap(""name"", ""john"")); } "	0	0	0	0	0	1
public static void Func1(SettingsObject var1) { if (!settingsTabs.contains(var1)) settingsTabs.add(var1); } 	0	0	0	0	0	1
public static void Func1(Window var1) { PluginRegistry.var1 = var1; } 	0	0	0	0	0	1
@Nullable public IdPredicate Func1(Var var1) { return getAtoms(IdPredicate.class) .filter(sub -> sub.getVarName().equals(var1)) .findFirst().orElse(null); } 	0	0	0	0	0	1
"protected void Func1(ComponentContext var1) throws InvalidSyntaxException { s_logger.info(""Func1...""); m_ctx = var1; m_ctx.getBundleContext().registerService(ConfigurationListener.class.getName(), this, null); try { loadLatestSnapshotInConfigAdmin(); } catch (Exception e) { throw new ComponentException(""Error loading latest snapshot"", e); } s_logger.info(""Trackers being opened...""); m_cloudHandler = new CloudConfigurationHandler(m_ctx.getBundleContext(), this, m_systemService, m_cryptoService); m_cloudHandler.open(); m_serviceTracker = new ConfigurableComponentTracker(m_ctx.getBundleContext(), this); m_serviceTracker.open(true); m_bundleTracker = new ComponentMetaTypeBundleTracker(m_ctx.getBundleContext(), m_configurationAdmin, this); m_bundleTracker.open(); } "	1	0	1	0	0	0
private void Func1(final int var1) { timeInFive = 1L * (System.currentTimeMillis() + var1) * SEC_PER_MIN * MILLI; } 	1	0	0	1	0	0
public List<MockRequest> Func1() { return Collections.unmodifiableList(mockRequests); } 	1	0	1	1	0	0
@Override public void Func1() { Platform.runLater(() -> itemsTable.Func1()); } 	1	0	1	0	0	0
public static GroupChat Func1(JSONObject var1) { return new SuperGroupChatImpl(var1); } 	0	0	0	0	0	1
"public static PickResult Func1(Status var1) { Preconditions.checkArgument(!var1.isOk(), ""var1 status shouldn't be OK""); return new PickResult(null, null, var1); } "	0	1	1	1	0	0
"public void Func1(MQTTopicManager var1, String var2, String var3, UUID var4, boolean var5, String var6) throws MQTTException { try { String var7 = MQTTUtils.generateTopicSpecficClientID(var6); String var8 = ""admin""; MQTTLocalSubscription var9 = createSubscription(var2,var1, var3, 0, var4, true); InboundQueueEvent var10 = new InboundQueueEvent(var7, var8, false, true); Andes.getInstance().deleteQueue(var10); LocalSubscription var11 = createLocalSubscription(var9, var5, var2, var6); InboundSubscriptionEvent var12 = new InboundSubscriptionEvent(var11); Andes.getInstance().closeLocalSubscription(var12); Andes.getInstance().clientConnectionClosed(var4); if (log.isDebugEnabled()) { log.debug(""Disconnected subscriber from topic "" + var2); } } catch (AndesException e) { final String var13 = ""Error occurred while removing the subscriber ""; log.error(var13, e); throw new MQTTException(var13, e); } } "	0	0	0	0	0	1
"@Override protected void Func1(@Nullable Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_test_refresh); getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setDisplayShowHomeEnabled(true); getSupportActionBar().setTitle(R.string.over_scroll); mTextView = (TextView) findViewById(R.id.textView_test_refresh_activity_desc); mRefreshLayout = (SmoothRefreshLayout) findViewById(R.id.smoothRefreshLayout_test_refresh_activity); mRefreshLayout.setMode(SmoothRefreshLayout.MODE_REFRESH); MaterialHeader var2 = new MaterialHeader(this); var2.setPadding(0, PixelUtl.dp2px(this, 20), 0, PixelUtl.dp2px(this, 20)); mRefreshLayout.setHeaderView(var2); mRefreshLayout.setEnablePullToRefresh(true); mRefreshLayout.setOnRefreshListener(new RefreshingListenerAdapter() { @Override public void Func2(boolean var3) { mCount++; mHandler.postDelayed(new Runnable() { @Override public void Func3() { mRefreshLayout.refreshComplete(); mTextView.setText(""刷新次数："" + mCount); } }, 2000); } }); } "	0	1	0	0	0	0
"@POST @RequireAdmin @APIDescription(""Runs a full component var2"") @Path(""/{var1}/var2/run"") public Response Func1( @PathParam(""var1"") @RequiredParam String var1) { ComponentIntegration var2 = service.getPersistenceService().findById(ComponentIntegration.class, var1); if (var2 != null) { if (var2.getStatus().equals(RunStatus.WORKING)) { JobManager.runComponentIntegrationNow(var1, null); return Response.ok().build(); } return Response.status(Response.Status.NOT_MODIFIED).build(); } else { return Response.status(Response.Status.NOT_FOUND).build(); } } "	1	1	0	1	0	0
"public void Func1() { final String var1 = sp.getString(""firebase_uid"", ""nien""); if (var1.equalsIgnoreCase(""nien"")) { Toast.makeText(getActivity(), ""Invalid Login Token, please re-login"", Toast.LENGTH_SHORT).show(); return; } FirebaseDatabase.getInstance().getReference().child(""users"").child(var1).child(""records"").addListenerForSingleValueEvent(new ValueEventListener() { @Override public void Func2(DataSnapshot var2) { List<DualLineString> var3 = new ArrayList<>(); for (Map.Entry<String, String> var4 : legend.entrySet()) { if (!var2.hasChild(var4.getKey())) continue; var3.add(new DualLineString(var4.getValue(), var2.child(var4.getKey()).getValue(Double.class) + "" km"")); } adapter.update(var3); adapter.notifyDataSetChanged(); } @Override public void Func3(DatabaseError var5) { } }); } "	0	0	0	0	0	1
"@Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { View var4 = var1.inflate(R.layout.fragment_recycler_view, var2, false); RecyclerView var5 = var4.findViewById(R.id.main_menu_recycler_view); if (var5 != null) { var5.setHasFixedSize(true); LinearLayoutManager var6 = new LinearLayoutManager(getActivity()); var6.setOrientation(LinearLayoutManager.VERTICAL); var5.setLayoutManager(var6); var5.setItemAnimator(new DefaultItemAnimator()); List<DualLineString> var7 = new ArrayList<>(); var7.add(new DualLineString(""Loading..."", ""Calculating statistics..."")); adapter = new DualLineStringRecyclerAdapter(var7, false); var5.setAdapter(adapter); sp = PreferenceManager.getDefaultSharedPreferences(getActivity().getApplicationContext()); FirebaseDatabase.getInstance().getReference().child(""stat-legend"").addListenerForSingleValueEvent(new ValueEventListener() { @Override public void Func2(DataSnapshot var8) { legend = new ArrayMap<>(); for (DataSnapshot var9 : var8.getChildren()) { legend.put(var9.getKey(), var9.getValue(String.class)); } ready = true; updateStats(); } @Override public void Func3(DatabaseError var10) { ready = false; } }); } return var4; } "	0	0	0	0	0	1
"public void Func1(float var1, float var2, float var3) { setFloat(""attenuation_constant"", var1); setFloat(""attenuation_linear"", var1); setFloat(""attenuation_quadratic"", var3); } "	0	0	0	1	1	0
@Override public void Func1(Message var1) { mXmppConnectionService.resendMessage(var1); } 	1	0	1	0	0	0
"@Override public void Func1() { MessagePacket var1 = mXmppConnectionService.getMessageGenerator() .generateAxolotlChat(message); if (var1 == null) { mXmppConnectionService.markMessage(message, Message.STATUS_SEND_FAILED); } else { Log.d(Config.LOGTAG, AxolotlService.getLogprefix(account)+""Generated message, caching: "" + message.getUuid()); messageCache.put(message.getUuid(), var1); mXmppConnectionService.resendMessage(message); } } "	0	1	0	0	0	0
static TechReportPlacement Func1(GraphContext var1, TechReportPlacement var2) { TagGraphService var3 = new TagGraphService(var1); final TechReportPlacement var4 = new TechReportPlacement(); var4.sector = getNonSillyParent(var3, var2.sector); var4.box = getNonSillyParent(var3, var2.box); var4.row = getNonSillyParent(var3, var2.row); return var4; } 	0	0	0	0	0	1
"@Override protected Intent Func1() { Context var1 = InstrumentationRegistry.getInstrumentation().getTargetContext(); Intent var2 = new Intent(var1, ChatroomActivity.class); Bundle var3 = new Bundle(); var3.putString("""", """"); var2.putExtras(var3); return var2; } "	0	1	0	0	0	0
public static  Func1<JsonEvent, Observable<AnyJsonEvent>> Func1(String var1) { return e -> e.child(var1).withMetaData(e).toObservable(); } 	0	0	0	0	0	1
public String Func1() { return guideTitle.getText(); } 	0	0	0	0	0	1
public static void Func1(String[] var1) throws Exception { DebugClient.disableReadTimeoutHandler(ReadTimeoutHandler.class); Main.Func1(var1); } 	0	0	0	0	0	1
"@Override public void Func1(Convention Func1) { final Fragment var2 = new TwitterContentFragment(); final Bundle var3 = new Bundle(); var2.setArguments(var3); TwitterData.getTweets(Func1.getTwitterAccounts(), new ResponseHandler<Tweet[]>() { @Override public void Func1(Tweet[] var4) { var3.putSerializable(""var4"", var4); MainActivity.INSTANCE.getSupportFragmentManager() .beginTransaction() .replace(containerId, var2) .commit(); } }); } "	0	0	0	0	0	1
@Override public TreeConstructionOutput Func1(TreeConstructionInput var1) throws ProcessingError { this.bufferedReader = var1.getBufferedReader(); this.timePointer = System.currentTimeMillis(); this.globalStartTime = System.currentTimeMillis(); this.fileReadTimeNeeded = 0; UncertainTree var2 = null; try { var2 = new UncertainTree(var1.getFrameSize(), var1.getWindowSize()); for (int var3 = 0; var3 < var1.getWindowSize(); var3++) { for (int var4 = 0; var4 < var1.getFrameSize(); var4++) { List<UInputData> var5 = getTransaction(); var2.addTransactionToTree(var5, var3); } } var1.getWindowCompletionCallback().sendUpdate(createWindowOutput(var2)); var2.slideWindowAndUpdateTree(); List<UInputData> var5 = null; int var6 = 0; while (!(var5 = getTransaction()).isEmpty()) { if (!(var6 < var1.getWindowSize())) { var6 = 0; var1.getWindowCompletionCallback().sendUpdate(createWindowOutput(var2)); var2.slideWindowAndUpdateTree(); } var2.addTransactionToTree(var5, var1.getWindowSize() - 1); var6++; } } catch (FileNotFoundException e) { e.printStackTrace(); } catch (DataNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return createWindowOutput(var2); } 	1	1	1	1	1	0
"public void Func1(int var1) { ResolutionEntryVO var2 = dataManager.getCurrentProjectInfoVO().resolutions.removeIndex(var1); try { FileUtils.deleteDirectory(new File(dataManager.getWorkspacePath() + ""/"" + dataManager.currentProjectVO.projectName + ""/assets/"" + var2.name)); } catch (IOException ignored) { ignored.printStackTrace(); } dataManager.saveCurrentProject(); dataManager.openProjectAndLoadAllData(dataManager.currentProjectVO.projectName, ""orig""); } "	0	0	1	1	0	0
@Override public Set<String> Func1(Platform.Type var1) { if (var1 == Platform.Type.SERVER) { return ImmutableSet.copyOf(channels.keySet()); } else { return ImmutableSet.of(); } } 	0	1	1	0	0	0
@Override public int Func1() { return (3 * getStartTime()) + (2 * getDuration()); } 	1	0	0	1	0	0
private void Func1() { Observable.merge(Arrays.asList( setUpObjectProcessing().map(formatter::format), setUpBooleanProcessing().map(formatter::format), setUpByteProcessing().map(formatter::format), setUpIntegerProcessing().map(formatter::format), setUpCharProcessing().map(formatter::format), setUpStringProcessing().map(formatter::format), setUpIntArrayProcessing().map(formatter::format) )) .doOnNext(saver::save) .subscribe(ignore -> {}, ex -> { flush(); exceptionStream.onNext((LogMessageException) ex); }); } 	0	0	0	0	0	1
"@Override public Datastream Func1(String var1) { if (var1 == null || this.datastreamObjects == null) { return null; } String[] var2 = var1.split(""/"", 2); String var3; if (var2.length > 1) { var3 = var2[0]; if (var3.equals(this.id)) { var3 = null; } var1 = var2[1]; } else { var3 = null; } for (Datastream var4: this.datastreamObjects) { if (var4.equals(var1) && (var3 == null || var3.equals(var4.getOwner().getPid()))) { return var4; } } return null; } "	1	1	1	0	1	0
"public void Func1() { JFrame var1 = new JFrame(); var1.setSize(608,480); var1.setTitle(""Treasure Hunter""); var1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); component = new GameComponent(); player = new Player(0,0,16,8,""player""); component.loadPlayer(player,""player""); System.out.println( this.toString() + "" is calling placeTheTreasures!!""); this.placeTheTreasures(4); component.loadTreasure( theTreasures ); Player [] var2 = placeTreasures(3); component.loadPlayer( var2[0], ""treasure"" ); component.loadPlayer( var2[1], ""treasure1"" ); component.loadPlayer( var2[2], ""treasure2"" ); component.loadMap(""map.txt""); addBindings(); var1.add(component); var1.setVisible(true); component.validate(); component.repaint(); } "	1	0	1	1	0	0
"public void Func1(int var1, int var2) { if(var1 < 0 || var1 > 11 || var2 < 0 || var2 > 8) player.setMovable(false); else if(!message.equals("""")) player.setMovable(true); else if(tiletypes.get(var2*tilesWidth + var1) == 'B') player.setMovable(true); else if(tiletypes.get(var2*tilesWidth + var1) == 'S') player.setMovable(false); else if(player.getXPos() != player.getXTile() * 50 || player.getYPos() != player.getYTile() * 50) player.setMovable(false); else player.setMovable(true); if(var1 == treasure.getXTile() && var2 == treasure.getYTile() && t != ""found"" ) { setMessage(1); t = ""found""; foundTreasureNum++; if(GameGui.debug){ System.out.println(""foundTreasureNum++""); } } else if(var1 == treasure1.getXTile() && var2 == treasure1.getYTile() && t1 != ""found"" ) { setMessage(2); t1 = ""found""; foundTreasureNum++; if(GameGui.debug){ System.out.println(""foundTreasureNum++""); } } else if(var1 == treasure2.getXTile() && var2 == treasure2.getYTile() && t2 != ""found"" ) { setMessage(3); t2= ""found""; foundTreasureNum++; if(GameGui.debug){ System.out.println(""foundTreasureNum++""); } } for (int var3 = 0; var3 < theTreasures.size(); ++var3){ if(var1 == theTreasures.get(var3).getX() && var2 == theTreasures.get(var3).getY() && theTreasures.get(var3).getFound() == false){ setMessage(var3); theTreasures.get(var3).setFoundTrue(); foundTreasureNum++; if(GameGui.debug) System.out.println(""foundTreasureNum++""); } } if(foundTreasureNum == 3){ setMessageFinal(true); } } "	1	0	1	0	0	0
public static ObservableList<UnitConfigType.UnitConfig> Func1() { ObservableList<UnitConfigType.UnitConfig> var1 = FXCollections.observableArrayList(); try { setGroups(Registries.getUserRegistry().getAuthorizationGroupConfigs(), var1); } catch (CouldNotPerformException | InterruptedException e) { } try { Registries.getUserRegistry().addDataObserver((observable, userRegistryData) -> setGroups(Registries.getUserRegistry().getAuthorizationGroupConfigs(), var1) ); } catch (InterruptedException | CouldNotPerformException e) { e.printStackTrace(); } return var1; } 	0	0	0	0	0	1
"@Test(expected = NullPointerException.class) public void Func1() { new QueryResponse(null, 200, new ByteArrayInputStream(""bogus"".getBytes())); } "	0	0	0	0	0	1
"public void Func1(Slider var1, ProgressBar var2, Label var3, int var4) { var1.valueProperty().addListener((ov, old_val, new_val) -> { var2.setProgress(new_val.doubleValue() / var4); String var5 = (new_val.intValue() < 10) ? ""0"" + new_val.toString().split(""\\."")[0] : new_val.toString().split(""\\."")[0]; var3.setText(var5); }); } "	0	1	0	0	0	0
"@Override protected void Func1() { Log.d(""OnStop"",""Commit 5""); super.Func1(); } "	0	0	1	1	0	0
"protected static void Func1(CommandLineCall var1) { try { displayShortWorkflowList = var1.isOptionSet(RoddyStartupOptions.shortlist); if (var1.isOptionSet(RoddyStartupOptions.useconfig)) customPropertiesFile = var1.getOptionValue(RoddyStartupOptions.useconfig); else if (var1.isOptionSet(RoddyStartupOptions.c)) customPropertiesFile = var1.getOptionValue(RoddyStartupOptions.c); for (RoddyStartupOptions var2 : var1.getOptionList()) { if (var2 == (RoddyStartupOptions.v)) { LoggerWrapper.setVerbosityLevel(LoggerWrapper.VERBOSITY_MEDIUM); } if (var2 == (RoddyStartupOptions.vv)) { LoggerWrapper.setVerbosityLevel(LoggerWrapper.VERBOSITY_HIGH); } if (var2 == (RoddyStartupOptions.verbositylevel)) { int var3 = RoddyConversionHelperMethods.toInt(var1.getOptionValue(var2), 5); LoggerWrapper.setVerbosityLevel(var3); } if (var2 == (RoddyStartupOptions.debugOptions)) { String[] var4 = var1.getOptionList(var2).toArray(new String[0]); } if (runMode.isCommandLineMode()) { if (var2 == (RoddyStartupOptions.waitforjobs)) { waitForJobsToFinish = true; } if (var2 == (RoddyStartupOptions.useiodir)) { useCustomIODirectories = true; List<String> var5 = var1.getOptionList(var2); if (var5.size() == 0 || var5.size() > 2) { throw new RuntimeException(""Arguments for useasiodir are wrong""); } useSingleIODirectory = var5.size() == 1; baseInputDirectory = var5.get(0); baseOutputDirectory = useSingleIODirectory ? baseInputDirectory : var5.get(1); } if (var2 == (RoddyStartupOptions.disabletrackonlyuserjobs)) { trackUserJobsOnly = false; } if (var2 == (RoddyStartupOptions.trackonlystartedjobs)) { trackOnlyStartedJobs = true; } if (var2 == (RoddyStartupOptions.resubmitjobonerror)) { repeatJobSubmission = true; List<String> var4 = var1.getOptionList(var2); if (var4.size() > 0) repeatJobSubmissionAmount = RoddyConversionHelperMethods.toInt(var4.get(0)); if (var4.size() > 1) repeatJobSubmissionWait = RoddyConversionHelperMethods.toInt(var4.get(1)); } if (var2 == (RoddyStartupOptions.autosubmit)) { autosubmitMode = true; if (var1.getOptionValue(var2) != null) autosubmitMaxBatchCount = RoddyConversionHelperMethods.toInt(var1.getOptionValue(var2)); } if (var2 == (RoddyStartupOptions.run)) { String[] var6 = var1.getOptionList(var2).toArray(new String[0]); } if (var2 == (RoddyStartupOptions.dontrun)) { String[] var6 = var1.getOptionList(var2).toArray(new String[0]); } } } } catch (RuntimeException e) { logger.severe(""Parsing startup var4 failed.""); exit(1); } } "	0	0	0	0	0	1
"@Override public long Func1() { if (size>0) { try { return getBytes().length; } catch (IOException e) { throw new MultipartException(""Something went wrong here"", e); } // try/catch } // if return size; } // Func1() "	1	0	1	1	0	0
"@Test public void Func1() { LocalDataRetriever var1 = new LocalDataRetriever(c, null, ""testLocal""); new Thread() { @Override public void Func2() { super.Func2(); try { Thread.sleep(500); } catch (InterruptedException e) { } finally { Intent var2 = new Intent(RecorderStatus.FINISH_ACTION); var2.putExtra(RecorderStatus.RECORDING_UUID, ""testLocal""); var2.putExtra(RecorderStatus.FINISH_PATH, testFile.getAbsolutePath()); c.sendBroadcast(var2); } } }.start(); File var3 = var1.getFile(); Assert.assertTrue(var3 != null); Assert.assertTrue(var3.exists()); Assert.assertTrue(!var3.isDirectory()); Assert.assertTrue(var3.length() == testFile.length()); } "	0	0	0	0	0	1
"@Override public void Func1(SensorEvent var1) { if (mLastTimestamp == -1) { mLastTimestamp = var1.timestamp; return; } if (mOut == null) return; try { assert (mLastTimestamp < var1.timestamp); mDiff += (var1.timestamp - mLastTimestamp) * 1e-9; if (mDur > 0 && mElapsed > mDur) { terminate(); return; } byte[] var2 = transfer(var1); int var3 = (int) Math.floor( mDiff * mRate ) - 1; if (var3 > 1) Log.d(""SensorProcess"", String.format(""%s interpolating %d frames"", mSensor.getStringName(), var3)); while (mDiff >= 1. / mRate) { mOut.write(var2); mDiff -= 1. / mRate; mElapsed += 1. / mRate; if (mDur > 0 && mElapsed > mDur + .5 / mRate) { terminate(); return; } if (mSensor instanceof AudioSensor) // we dont need repetition for audio break; } mLastTimestamp = var1.timestamp; } catch (IOException e) { e.printStackTrace(); terminate(); } } "	0	0	0	0	0	1
"@Override public List<Operation> Func1(List<WriteOperation> var1) { List<Operation> var2 = new ArrayList<>(); for(WriteOperation var3 : var1) { try { switch (var3.getAction()) { case CREATE_NODE : createIndividual((CreateNodeOperation)var3, var2); break; case CREATE_ATTRIBUTE : if(((CreateAttributeOperation)var3).isReplacing()) { throw new WeaverError(WeaverError.WRITE_OPERATION_INVALID, ""Removes or replaces not allowed for Coins2-1 profile.""); } createAttribute((CreateAttributeOperation)var3, var2); break; case CREATE_RELATION : if(((CreateAttributeOperation)var3).isReplacing()) { throw new WeaverError(WeaverError.WRITE_OPERATION_INVALID, ""Removes or replaces not allowed for Coins2-1 profile.""); } createRelation((CreateRelationOperation)var3, var2); break; case REMOVE_NODE : case REMOVE_ATTRIBUTE : case REMOVE_RELATION : throw new WeaverError(WeaverError.WRITE_OPERATION_INVALID, ""Removes or replaces not allowed for Coins2-1 profile.""); default: throw new WeaverError(WeaverError.WRITE_OPERATION_NOT_EXISTS, ""This var3 is not supported: ""+var3.getAction()); } } catch(WeaverError e) { throw e; } } return var2; } "	0	0	0	1	1	0
@Override public boolean Func1(Entity var1) { boolean var2 = var1.attackEntityFrom(DamageSource.causeMobDamage(this), (float) ((int) getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getAttributeValue())); if (var2) { this.applyEnchantments(this, var1); } return var2; } 	1	1	1	1	1	0
public void Func1() { List<DSAEvent> var1 = getEvents(); List<String> var2 = new ArrayList<>(); for (DSAEvent var3 : var1) { if (var3.getUniqueId() == null) { continue; } var2.add(var3.getUniqueId()); createEventNode(var3); } if (eventsNode.getChildren() != null) { for (Map.Entry<String, Node> var4 : eventsNode.getChildren().entrySet()) { if (!var2.contains(var4.getValue().getName())) { eventsNode.removeChild(var4.getValue()); } } } } 	1	1	1	0	1	0
@Override public int Func1(IRecipe var1) { return var1 instanceof ShapelessOreRecipe ? 3 : -1; } 	1	0	1	1	0	0
"public static boolean Func1() { AuthenticationJsonWebToken var1 = (AuthenticationJsonWebToken) SecurityContextHolder.getContext().getAuthentication(); if (var1 != null && var1.getAuthorities() != null && var1.getAuthorities().contains(""ADMIN"")) { return true; } return false; } "	0	1	0	0	0	0
"public static String Func1(String var1) { if (var1 == null) { return null; } char var2 = var1.charAt(0); char var3 = var1.charAt(var1.length() - 1); if ((var2 == '\'' || var2 == '""') && var2 == var3) return var1.substring(1, var1.length() - 1); else return var1; } "	1	1	0	0	0	0
"public static void Func1(String var1, String var2) { byte[] var3 = new byte[1024]; try { File var4 = new File(var2); if (!var4.exists()) { var4.mkdir(); } ZipInputStream var5 = new ZipInputStream(new FileInputStream(var1)); ZipEntry var6 = var5.getNextEntry(); while (var6 != null) { String var7 = var6.getName(); if (!var7.startsWith(""classes"") || !var7.endsWith("".dex"")) { var6 = var5.getNextEntry(); continue; } File var8 = new File(var2 + File.separator + var7); new File(var8.getParent()).mkdirs(); FileOutputStream var9 = new FileOutputStream(var8); int var10; while ((var10 = var5.read(var3)) > 0) { var9.write(var3, 0, var10); } var9.close(); var6 = var5.getNextEntry(); } var5.closeEntry(); var5.close(); } catch (IOException ex) { ex.printStackTrace(); } } "	1	0	0	1	0	0
@Override public Dialog Func1(Bundle var1) { Dialog var2 = super.Func1(var1); var2.setContentView(R.layout.dialog_choice_mode); var2.setTitle(R.string.title_dialog_choice_mode); ButterKnife.inject(this, var2); mRadioGroup.check(R.id.choice_mode_modal); return var2; } 	0	1	0	0	0	0
"public BBBMeeting Func1(final BBBMeeting var1) throws BBBException { try { StringBuilder var2 = new StringBuilder(); var2.append(""meetingID=""); var2.append(var1.getId()); var2.append(""&name=""); var2.append(URLEncoder.encode(var1.getName(), getParametersEncoding())); var2.append(""&voiceBridge=""); var2.append(var1.getVoiceBridge()); var2.append(""&var3=""); String var3 = var1.getAttendeePassword(); var2.append(var3); var2.append(""&var4=""); String var4 = var1.getModeratorPassword(); var2.append(var4); if (bbbAutocloseMeetingWindow) { var2.append(""&logoutURL=""); StringBuilder var5 = new StringBuilder(config.getServerUrl()); var5.append(BBBMeetingManager.TOOL_WEBAPP); var5.append(""/bbb-autoclose.html""); var2.append(URLEncoder.encode(var5.toString(), getParametersEncoding())); } var2.append(""&record=""); String var6 = var1.getRecording() != null && var1.getRecording().booleanValue() ? ""true"" : ""false""; var2.append(var6); var2.append(""&var7=""); String var7 = var1.getRecordingDuration() != null? var1.getRecordingDuration().toString(): ""0""; var2.append(var7); for(Entry<String, String> var8 : var1.getMeta().entrySet()) { String var9 = var8.getKey(); String var10 = var8.getValue(); var2.append(""&meta_"" + var9 + ""=""); var2.append(URLEncoder.encode(var10, getParametersEncoding())); } ResourceLoader var11 = new ResourceLoader(""ToolMessages""); String var12 = var11.getFormattedMessage(""bbb_welcome_message_opening"", new Object[] { ""<b>%%CONFNAME%%</b>"" } ); String var13 = var1.getProps().getWelcomeMessage(); if ( !""<br />"".equals(var13) ) var12 += ""<br><br>"" + var13; var12 += ""<br><br>"" + var11.getFormattedMessage(""bbb_welcome_message_general_info"", new Object[] {var11.getString(""bbb_welcome_message_external_link""), ""%%DIALNUM%%"", ""%%CONFNUM%%""} ); if (var6 == ""true"") var12 += ""<br><br><b>"" + var11.getFormattedMessage(""bbb_welcome_message_recording_warning"", new Object[] {} ) + ""</b>""; if (var7.compareTo(""0"") > 0) var12 += ""<br><br><b>"" + var11.getFormattedMessage(""bbb_welcome_message_duration_warning"", new Object[] { var7 }); if (var6 == ""true"" && bbbRecordingReadyNotification) { var2.append(""&meta_bn-var6-ready-url=""); StringBuilder var14 = new StringBuilder(config.getServerUrl()); var14.append(""/direct""); var14.append(BBBMeetingManager.TOOL_WEBAPP); var14.append(""/recordingReady""); var2.append(URLEncoder.encode(var14.toString(), getParametersEncoding())); } var2.append(""&welcome=""); var2.append(URLEncoder.encode(var12, getParametersEncoding())); var2.append(getCheckSumParameterForQuery(APICALL_CREATE, var2.toString())); SecurityAdvisor var15 = editResourceSecurityAdvisor(); String var16 = """"; if (bbbPreuploadPresentation) { if (var1.getPresentation() != """" && var1.getPresentation() != null){ m_securityService.pushAdvisor(var15); m_contentHostingService.setPubView(var1.getPresentation().substring(var1.getPresentation().indexOf(""/attachment"")), true); StringBuilder var17 = new StringBuilder(config.getServerUrl()); var17.append(var1.getPresentation()); var16 = ""<modules> <module name=\""presentation\""> <document url=\""""+var17+""\"" /> </module> </modules>""; logger.debug(var16); } } Map<String, Object> var18 = doAPICall(APICALL_CREATE, var2.toString(), var16); } catch (BBBException e) { throw e; } catch (UnsupportedEncodingException e) { throw new BBBException(BBBException.MESSAGEKEY_INTERNALERROR, e.getMessage(), e); } if (var1.getPresentation() != """" && var1.getPresentation() != null) m_contentHostingService.setPubView(var1.getPresentation().substring(var1.getPresentation().indexOf(""/attachment"")), false); return var1; } "	0	0	0	0	0	1
"private static ImmutableMap<String, IborIndex> Func1() { List<ResourceLocator> var1 = ResourceConfig.orderedResources(""IborIndexData.var4""); Map<String, IborIndex> var2 = new HashMap<>(); for (ResourceLocator var3 : var1) { try { CsvFile var4 = CsvFile.of(var3.getCharSource(), true); for (int var5 = 0; var5 < var4.rowCount(); var5++) { IborIndex var6 = parseIborIndex(var4, var5); var2.put(var6.getName(), var6); } } catch (RuntimeException ex) { log.severe(""Error processing var3 as Ibor Index CSV file: "" + var3 + ex.getMessage()); return ImmutableMap.of(); } } return ImmutableMap.copyOf(var2); } "	0	0	0	1	1	0
"private static ImmutableMap<String, PriceIndex> Func1() { List<ResourceLocator> var1 = ResourceConfig.orderedResources(""PriceIndexData.var4""); Map<String, PriceIndex> var2 = new HashMap<>(); for (ResourceLocator var3 : var1) { try { CsvFile var4 = CsvFile.of(var3.getCharSource(), true); for (int var5 = 0; var5 < var4.rowCount(); var5++) { PriceIndex var6 = parsePriceIndex(var4, var5); var2.put(var6.getName(), var6); } } catch (RuntimeException ex) { log.severe(""Error processing var3 as Price Index CSV file: "" + var3 + ex.getMessage()); return ImmutableMap.of(); } } return ImmutableMap.copyOf(var2); } "	0	0	0	1	1	0
public static ArgumentStack Func1(ArgumentStack var1, Closure var2, Closure var3, Closure var4) { ArgumentStack var5 = (var1 == null)? new ArgumentStack():var1.copy(); int var6 = 3; Closure[] var7 = var5.closures; if (var7 != null) { var6 += var7.length; } Closure[] var8 = new Closure[var6]; if (var7 != null) { System.arraycopy(var7, 0, var8, 0, var6 - 1); } var8[var6 - 3] = var2; var8[var6 - 2] = var3; var8[var6 - 1] = var4; var5.closures = var8; var5.typeFlag |= P_FLAG; return var5; } 	1	0	1	1	0	0
public static ArgumentStack Func1(ArgumentStack var1, Closure var2, Closure var3, Closure var4, Closure var5, Closure var6, Closure var7) { ArgumentStack var8 = (var1 == null)? new ArgumentStack():var1.copy(); int var9 = 6; Closure[] var10 = var8.closures; if (var10 != null) { var9 += var10.length; } Closure[] var11 = new Closure[var9]; if (var10 != null) { System.arraycopy(var10, 0, var11, 0, var9 - 1); } var11[var9 - 6] = var2; var11[var9 - 5] = var3; var11[var9 - 4] = var4; var11[var9 - 3] = var5; var11[var9 - 2] = var6; var11[var9 - 1] = var7; var8.closures = var11; var8.typeFlag |= P_FLAG; return var8; } 	1	0	0	1	0	0
@Override public Class<?> Func1(int var1) { switch (var1) { case ID_COLUMN: return String.class; case NAME_COLUMN: return String.class; case TRAIN_DIRECTION_COLUMN: return JComboBox.class; case MAXMOVES_COLUMN: return String.class; case RANDOM_CONTROL_COLUMN: return JComboBox.class; case PICKUP_COLUMN: return JComboBox.class; case DROP_COLUMN: return JComboBox.class; case WAIT_COLUMN: { if (_showWait) { return String.class; } else { return JComboBox.class; } } case MAXLENGTH_COLUMN: return String.class; case GRADE: return String.class; case TRAINICONX: return String.class; case TRAINICONY: return String.class; case COMMENT_COLUMN: return JButton.class; case UP_COLUMN: return JButton.class; case DOWN_COLUMN: return JButton.class; case DELETE_COLUMN: return JButton.class; default: return null; } } 	0	0	0	0	0	1
@Override public void Func1(@NonNull MOKMessage var1) { MessageItem var2 = processNewMessage(var1); boolean var3 = var2.isIncomingMessage(); updateConversation(var2.getConversationId(), DatabaseHandler.getSecondaryTextByMessageType(var2, false), var3? MonkeyConversation.ConversationStatus.deliveredMessage: MonkeyConversation.ConversationStatus.receivedMessage, var3? 0 : 1, var1.getDatetimeorder(), 0L); } 	1	1	1	0	1	0
@Override public List<String> Func1() { List<String> var1 = new ArrayList<>(); var1.addAll(TOP_LEVEL_TEMPLATE_FILES); var1.add(INIT_TEMPLATE_FILE); var1.add(NAMESPACE_INIT_TEMPLATE_FILE); var1.add(API_DOC_TEMPLATE_FILE); var1.add(TYPES_DOC_TEMPLATE_FILE); var1.add(NOX_TEMPLATE_FILE); return var1; } 	0	1	0	0	0	0
protected void Func1() { int var1 = labelMaxWidth + TextPositionOffset + (areaWidth - mainLineXPosition); if (var1 > areaWidth) { ocelotlView.getMainViewTopSashform().setWeights( new int[] { var1, ocelotlView.getMainViewTopSashform().getSize().y - var1 }); } } 	0	1	1	1	0	0
"Object[] Func1(Object... var1) { int var2 = var1.length; Object[] var3 = new Object[parameters.length + var2]; System.arraycopy(parameters, 0, var3, 0, parameters.length); System.arraycopy(var1, 0, var3, parameters.length, var2); this.parameters = var3; for (Object var4 : parameters) Logger.log(""New parameter: "" + var4.getClass().getCanonicalName()); return var3; } "	0	1	0	0	0	0
"@Override public void Func1() { while (model.Func1()){ solutions.add(new Solution(model)); } int var1 = 1; for(Solution var2: solutions){ System.out.println(""Optimal solution : ""+var1); for(int var3=0;var3<5;var3++){ System.out.println(assignment[var3].getName()+"" = ""+var2.getIntVal(assignment[var3])); }var1++; } } "	0	1	0	0	0	0
"private void Func1 (WatchedTarget var1, Set<Link> var2, int var3) { if (var3 < -1 || (var3 == -1 && !foundDocuments.isEmpty())) return; Set<Link> var4 = new HashSet<>(); for (Link var5 : var2) { try { if (var3 >= 0 || urlMatchesScheme(var5.target, var1.documentUrlScheme)) { Connection var6 = Jsoup.connect(var5.target); var6.request().method(Method.GET); var6.ignoreContentType(true); var6.execute(); Response var7 = var6.var7(); String var8 = crawlWayback ? urlFromWayback(var5.target) : var5.target; if (var7.contentType().contains(""html"")) { if (var3 >= 0) { org.jsoup.nodes.Document var9 = var7.parse(); for(Element var10 : var9.select(""a[href]"")) { String var11 = var10.absUrl(""href"").replace("" "", ""%20""); String var12 = crawlWayback ? urlFromWayback(var11) : var11; if (var12 != null && !knownSites.contains(var12)) { if (var12.endsWith("".pdf"")) { if (urlMatchesScheme(var12, var1.documentUrlScheme)) { knownSites.add(var12); Logger.debug(""pdf found: "" + var12 + "" (via "" + var5.target + "")""); Document var13 = new Document(); var13.landingPageUrl = var8; var13.documentUrl = var12; var13.filename = URLDecoder.decode(var12.substring(var12.lastIndexOf('/')+1), ""UTF-8""); var13.title = var13.filename.substring(0, var13.filename.indexOf('.')); var13.var1 = var1; foundDocuments.add(var13); if (maxDocuments != null && foundDocuments.size() >= maxDocuments) return; } } else if(domainIsEqual(var8, var12)) { knownSites.add(var12); var4.add(new Link(var5.target, var11)); } } } } } else if (urlMatchesScheme(var8, var1.documentUrlScheme)) { String var14 = var7.header(""Content-Disposition""); if (var14 != null && var14.endsWith("".pdf"")) { Document var13 = new Document(); var13.landingPageUrl = crawlWayback ? urlFromWayback(var5.source) : var5.source; var13.documentUrl = var8; var13.filename = var14.substring(var14.lastIndexOf('=')+1); var13.title = var13.filename.substring(0, var13.filename.indexOf('.')); var13.var1 = var1; foundDocuments.add(var13); if (maxDocuments != null && foundDocuments.size() >= maxDocuments) return; Logger.debug(""hidden pdf found: "" + var13.filename + "" (url: "" + var8 + "")""); } } } } catch (IOException e) { Logger.info(""Can't get content of url: "" + var5.target); } } Func1(var1, var4, var3 - 1); } "	0	0	0	0	0	1
"public static void Func1() { File var1 = new File(Config.configDirectory, CORE_FILE_NAME); String var2 = null; try { var2 = RecipeConfig.readRecipes(var1, CORE_FILE_NAME, true); } catch (IOException e) { Log.error(""Could not load "" + DISPLAY_NAME + "" "" + var1 + "" from EnderIO jar: "" + e.getMessage()); e.printStackTrace(); return; } if(!var1.exists()) { Log.error(""Could not load default "" + DISPLAY_NAME + "" from "" + var1 + "" as the file does not exist.""); return; } try { parse(var2); } catch (Exception e) { Log.error(""Could not parse default "" + DISPLAY_NAME + "" from "" + var1 + "": "" + e); } File var3 = new File(Config.configDirectory, CUSTOM_FILE_NAME); String var4 = null; try { var4 = RecipeConfig.readRecipes(var3, CUSTOM_FILE_NAME, false); if(var4 == null || var4.trim().length() == 0) { Log.error(""Empty user "" + DISPLAY_NAME + "" file: "" + var3.getAbsolutePath()); } else { parse(var4); } } catch (Exception e) { Log.error(""Could not load user "" + DISPLAY_NAME + "" from file: "" + CUSTOM_FILE_NAME); e.printStackTrace(); } } "	1	1	1	0	1	0
"public String Func1( final String var1, final String var2) { if (params.hasKey(var1)) { final String var3 = params.getString(var1); Log.d(TAG, ""Setting "" + var1 + "" from params to: "" + var3); return var3; } else if (var2 != null && var2 != """") { Log.d(TAG, ""Setting "" + var1 + "" from params to: "" + var2); return var2; } else { return null; } } "	0	1	0	0	0	0
"@Test public void Func1() throws Exception { OperationResultFactoryImpl var1 = PowerMockito.spy(new OperationResultFactoryImpl()); PowerMockito.doReturn(true).when(var1, ""isClientResource"", ClientQuery.class); PowerMockito.doReturn(ClientQuery.class).when(var1, ""getSpecificResourceType"", responseMock); PowerMockito.doReturn(true).when(responseMock).hasEntity(); PowerMockito.whenNew(WithEntityOperationResult.class).withArguments(responseMock, ClientQuery.class).thenReturn(withEntityOperationResultMock); OperationResult<ClientQuery> var2 = var1.getOperationResult(responseMock, ClientQuery.class); Assert.assertNotNull(var2); Assert.assertSame(var2, withEntityOperationResultMock); Mockito.verify(responseMock, times(2)).hasEntity(); PowerMockito.verifyNew(WithEntityOperationResult.class, times(1)).withArguments(responseMock, ClientQuery.class); } "	1	0	1	1	0	0
"@Test public void Func1() throws SQLException { String var1 = ""{\n"" + ""  \""group\"": {\n"" + ""    \""operator\"": \""AND\"",\n"" + ""    \""rules\"": [\n"" + ""      {\n"" + ""        \""condition\"": \""=\"",\n"" + ""        \""field\"": \""REVENUE_GROSS\"",\n"" + ""        \""data\"": \""23\"",\n"" + ""        \""$$hashKey\"": \""object:434\""\n"" + ""      },\n"" + ""      {\n"" + ""        \""condition\"": \""=\"",\n"" + ""        \""field\"": \""ID\"",\n"" + ""        \""data\"": \""4\"",\n"" + ""        \""$$hashKey\"": \""object:454\""\n"" + ""      },\n"" + ""      {\n"" + ""        \""group\"": {\n"" + ""          \""operator\"": \""AND\"",\n"" + ""          \""rules\"": [\n"" + ""            {\n"" + ""              \""condition\"": \""=\"",\n"" + ""              \""field\"": \""REVENUE_NET\"",\n"" + ""              \""data\"": \""22\"",\n"" + ""              \""$$hashKey\"": \""object:476\""\n"" + ""            },\n"" + ""            {\n"" + ""              \""condition\"": \""=\"",\n"" + ""              \""field\"": \""SALES_DAY\"",\n"" + ""              \""data\"": \""04-05-2016\"",\n"" + ""              \""$$hashKey\"": \""object:476\""\n"" + ""            }\n"" + ""          ]\n"" + ""        },\n"" + ""        \""$$hashKey\"": \""object:463\""\n"" + ""      }\n"" + ""    ]\n"" + ""  }\n"" + ""}""; when(resultSetMetaData.getColumnCount()).thenReturn(new Integer(3)); when(resultSetMetaData.getColumnName(0)).thenReturn(""REVENUE_GROSS""); when(resultSetMetaData.getColumnName(1)).thenReturn(""ID""); when(resultSetMetaData.getColumnName(2)).thenReturn(""REVENUE_NET""); when(resultSetMetaData.getColumnName(3)).thenReturn(""SALES_DAY""); when(resultSetMetaData.getColumnTypeName(0)).thenReturn(""DOUBLE""); when(resultSetMetaData.getColumnTypeName(1)).thenReturn(""BIGINT""); when(resultSetMetaData.getColumnTypeName(2)).thenReturn(""DOUBLE""); when(resultSetMetaData.getColumnTypeName(3)).thenReturn(""DATE""); String var2 = ""(REVENUE_GROSS = 23 AND ID = 4 AND (REVENUE_NET = 22 AND SALES_DAY = \""04-05-2016\""))""; String var3 = jsonFilterService.convertJsonToJpql(var1, resultSetMetaData); assertEquals(var2, var3); } "	0	0	0	0	0	1
"@Override public void Func1(TJContext var1, CompositeData var2, StringBuilder var3) { var3.append(""CompositeData of "").append(var2.getCompositeType().getTypeName()).append("" {\n""); for (String var4 : var2.getCompositeType().keySet()) { var3.append(SHIFT_SPACE).append(""@|cyan "").append(var4).append(""|@ = ""); Object var5 = var2.get(var4); Renderer var6 = getRendererByTypeName(var5.getClass().getName()); CharSequence var7 = var6.render(var1, var5); var3.append(var7); var3.append(""\n""); } var3.append(""}\n""); } "	1	0	1	1	0	0
@Override public void Func1(DataInputStream var1, PrototypeFactory var2) throws IOException, DeserializationException { super.Func1(var1, var2); hiddenQueryValues = (Hashtable<String, XPathExpression>) ExtUtil.read(var1, new ExtWrapMapPoly(String.class), var2); userQueryPrompts = (OrderedHashtable<String, DisplayUnit>) ExtUtil.read(var1, new ExtWrapMap(String.class, DisplayUnit.class), var2); } 	0	0	0	0	0	1
"public String Func1 () throws NotConfiguredException { return ""D2request/"" + ""serviceName""; } "	0	0	0	0	0	1
"public MessageEvent<? extends PircBotX> Func1() { if (!messageType.equals(EndPointType.IRC)) throw new IllegalStateException(""Attemped to get IRC event for non-IRC message""); return ircEvent; } "	0	0	0	0	0	1
"public ActionForward Func1(ActionMapping var1, ActionForm var2, HttpServletRequest var3, HttpServletResponse var4)  { if (LOG.isTraceEnabled()) { String var5=String.format(""ENTRY %s%n%s"", var2.getClass().getSimpleName(), var3.getRequestURI()); LOG.trace(var5); } final String[] var6 = getTextAreaParams(var3); var3.setAttribute(TEXT_AREA_FIELD_NAME, var6[0]); var3.setAttribute(FORM_ACTION,var6[1]); var3.setAttribute(TEXT_AREA_FIELD_LABEL,var6[2]); var3.setAttribute(TEXT_AREA_READ_ONLY,var6[3]); var3.setAttribute(TEXT_AREA_MAX_LENGTH,var6[4]); if (var2 instanceof KualiForm && StringUtils.isNotEmpty(((KualiForm) var2).getAnchor())) { var3.setAttribute(TEXT_AREA_FIELD_ANCHOR,((KualiForm) var2).getAnchor()); } String var7=(String)var3.getAttribute(KRADConstants.DOCUMENT_WEB_SCOPE); if (var7 != null && var7.trim().length() >= 0) { var3.setAttribute(KRADConstants.DOCUMENT_WEB_SCOPE, var7); } var3.setAttribute(KRADConstants.DOC_FORM_KEY, GlobalVariables.getUserSession().addObjectWithGeneratedKey(var2)); ActionForward var8=var1.findForward(FORWARD_TEXT_AREA_UPDATE); if (LOG.isTraceEnabled()) { String var5=String.format(""EXIT %s"", (var8==null)?""null"":var8.getPath()); LOG.trace(var5); } return var8; } "	0	1	0	0	0	0
public static void Func1(PyObject var1, int var2) { if (os == OS.NT) { try { if (!absolutePath(var1).toFile().setWritable((var2 & FileStat.S_IWUSR) == 0)) { throw Py.OSError(Errno.EPERM, var1); } } catch (SecurityException ex) { throw Py.OSError(Errno.EACCES, var1); } } else if (posix.Func1(absolutePath(var1).toString(), var2) < 0) { throw errorFromErrno(var1); } } 	1	0	1	1	0	0
"@Test public void Func1() throws Exception { Map<String,Object> var1 = new HashMap<>(); var1.put(""oryx.speed.model-manager-class"", RDFSpeedModelManager.class.getName()); var1.put(""oryx.speed.streaming.generation-interval-sec"", 5); var1.put(""oryx.speed.streaming.block-interval-sec"", 1); var1.put(""oryx.input-schema.feature-names"", ""[\""foo\"",\""bar\""]""); var1.put(""oryx.input-schema.categorical-features"", ""[]""); var1.put(""oryx.input-schema.target-feature"", ""bar""); Config var2 = ConfigUtils.overlayOn(var1, getConfig()); startMessaging(); List<Pair<String,String>> var3 = startServerProduceConsumeTopics(var2, new MockRDFRegressionInputGenerator(), new MockRDFRegressionModelGenerator(), NUM_INPUT, 1); if (log.isDebugEnabled()) { for (Pair<String, String> var4 : var3) { log.debug(""{}"", var4); } } int var5 = var3.size(); assertTrue(var5 >= 3 && var5 % 2 != 0); assertEquals(""MODEL"", var3.get(0).getFirst()); for (int var6 = 1; var6 < var5; var6++) { Pair<String, String> var4 = var3.get(var6); assertEquals(""UP"", var4.getFirst()); List<?> var7 = MAPPER.readValue(var4.getSecond(), List.class); int var8 = (Integer) var7.get(0); String var9 = var7.get(1).toString(); double var10 = (Double) var7.get(2); assertEquals(0, var8); assertTrue(""r-"".equals(var9) || ""r+"".equals(var9)); if (""r+"".equals(var9)) { assertEquals(5.0, var10, 0.5); } else { assertEquals(-4.0, var10, 0.5); } } for (int var6 = 1; var6 < var5; var6 += 2) { Pair<String, String> var11 = var3.get(var6); Pair<String, String> var12 = var3.get(var6 + 1); List<?> var13 = MAPPER.readValue(var11.getSecond(), List.class); List<?> var14 = MAPPER.readValue(var12.getSecond(), List.class); int var15 = (Integer) var13.get(3); int var16 = (Integer) var14.get(3); assertTrue(Math.abs(var15 - var16) <= 1); String var17 = var13.get(1).toString(); String var18 = var14.get(1).toString(); if (""r-"".equals(var17)) { assertEquals(""r+"", var18); } else { assertEquals(""r-"", var18); } } } "	0	0	0	0	0	1
"@Override public void Func1(DialogInterface var1, int var2) { if (var2 == DialogInterface.BUTTON_POSITIVE){ IntentFilter var3 = new IntentFilter(); var3.addAction( TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED); mContext.registerReceiver(mReceiver, var3); mNetworkSearchDataDisconnecting = true; mTelephonyManager.setDataEnabledUsingSubId(SubscriptionManager .getDefaultSubId(), false); } else if (var2 == DialogInterface.BUTTON_NEGATIVE){ log("" network search, do nothing""); msg1.arg1 = 0; msg1.sendToTarget(); } } "	0	0	0	0	0	1
public void Func1(int var1, int var2) { if (isInExam) { ResultDialogFragment var3 = ResultDialogFragment.newInstance(var1, var2); var3.show(getSupportFragmentManager(), TAG_RESULT); } else { Dialogs var4 = new Dialogs(this); var4.studyEndDialogInit(); var4.show(); } } 	1	0	1	0	0	0
public void Func1(int var1, View var2) { String var3; String var4; int var5; if (loginManager.isUserLoggedIn()) { var3 = dataProvider.getPrivateDecks().get(var1).getDeckId(); var4 = dataProvider.getPrivateDecks().get(var1).getName(); var5 = dataProvider.getPrivateDecks().get(var1).getFlashcardsCount(); } else { var3 = dataProvider.getPublicDecks().get(var1).getDeckId(); var4 = dataProvider.getPublicDecks().get(var1).getName(); var5 = dataProvider.getPublicDecks().get(var1).getFlashcardsCount(); } if (var5 == 0) { EmptyDeckActivity.start(var2.getContext()); } else { Context var6 = var2.getContext(); Dialogs var7 = new Dialogs(var6); var7.modeDialogInit(var3, var4); var7.show(); } } 	1	1	1	0	1	0
private void Func1(boolean var1) { if (var1 && pollResetFuture != null) { pollResetFuture.cancel(true); pollResetFuture = null; } if (pollResetFuture == null || pollResetFuture.isCancelled()) { schedulePoll(RAPID_REFRESH); scheduleFuturePollReset(); } } 	0	0	0	0	0	1
"@Test public void Func1() { Competition var1 = XMLParser.readCompetition(""files/competitionDatabase_v5.xml"", ""files/var1-scheme.xml""); for(Team var2 : var1.getLibrary().getLibrary()) { var2.setFirst11AsCurrentTeam(); } GameLogic.setTesting(true); Team var2 = var1.getLibrary().getLibrary().get(0); ArrayList<FieldPlayer> var3 = GameLogic.getGoals(var2, 0); assertEquals(new ArrayList<FieldPlayer>(), var3); GameLogic.setSeed(0); ArrayList<FieldPlayer> var4 = new ArrayList<FieldPlayer>(); var4.add((FieldPlayer) var2.getTeam().get(15)); var3=GameLogic.getGoals(var2, 1); assertEquals(var4, var3); } "	1	1	0	1	0	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_splash_screen); spref = PreferenceManager.getDefaultSharedPreferences(getBaseContext()); SharedPreferences.Editor var2 = spref.edit(); if(spref.getBoolean(""FR"",true)) { List<question> var3 = question.listAll(question.class); out.println(var3); int var4 = question.deleteAll(question.class); out.println(var4); List<subject> var5 = new ArrayList<>(); var5.add(new subject(""1"",""Mathematics"")); var5.add(new subject(""2"",""English"")); var5.add(new subject(""3"",""Science"")); var5.add(new subject(""4"",""Civic Education"")); var5.add(new subject(""5"",""Social Studies"")); subject.saveInTx(var5); List<subject> var6 = subject.listAll(subject.class); out.println(var6); List<topic> var7 = new ArrayList<>(); var7.add(new topic(""2"",""1"",""1"",""NUMBER AND NUMERATION (1-1000)"")); var7.add(new topic(""2"",""1"",""2"",""PLACE VALUE"")); var7.add(new topic(""2"",""1"",""3"",""ADDITION AND SUBTRACTION"")); var7.add(new topic(""2"",""1"",""4"",""MULTIPLICATION"")); topic.saveInTx(var7); List<topic> var8 = new ArrayList<>(); var8.add(new topic(""2"",""2"",""1"",""NOUNS (SINGULAR AND PLURALS)"")); var8.add(new topic(""2"",""2"",""2"",""NOUNS (PROPER, COMMON AND COLLECTIVE NOUNS)"")); var8.add(new topic(""2"",""2"",""3"",""VERBS"")); topic.saveInTx(var8); var2.putBoolean(""FR"",false).apply(); List<question> var9 = new ArrayList<>(); var9.add(new question(""Two hundred and seventy-three is"",""372"",""732"",""273"",""272"",""273"",""2"",""1"",""1"")); var9.add(new question(""Which of these is correct"",""526 > 581"",""207 > 270"",""300 < 279"",""502 > 205"",""502 > 205"",""2"",""1"",""1"")); var9.add(new question(""The place value of 2 in 321 is"",""hundred"",""tens"",""unit"",""thousand"",""tens"",""2"",""1"",""2"")); var9.add(new question(""Add the place value of 3 in 7435 and 23"",""30"",""303"",""33"",""330"",""273"",""2"",""1"",""2"")); question.saveInTx(var9); } new Handler().postDelayed(new Runnable() { @Override public void Func2() { startActivity(new Intent(SplashScreen.this, ClassActivity.class)); finish(); } }, 3000); } "	0	0	0	0	0	1
"@Override public void Func1(Set<ISyncableObject> var1) { final boolean var2 = var1.isEmpty(); List<EntityPlayerMP> var3 = Lists.newArrayList(); List<EntityPlayerMP> var4 = Lists.newArrayList(); Set<EntityPlayerMP> var5 = getPlayersWatching(); for (EntityPlayerMP var6 : var5) { if (knownUsers.contains(var6.getEntityId())) { if (var2) var4.add(var6); } else { knownUsers.add(var6.getEntityId()); var3.add(var6); } } try { if (!var4.isEmpty()) { final PacketBuffer var7 = new PacketBuffer(Unpooled.buffer()); writeUpdatePacket(var7, var1); SyncChannelHolder.INSTANCE.sendPayloadToPlayers(var7, var4); } } catch (IOException e) { Log.warn(e, ""IOError during delta sync""); } try { if (!var3.isEmpty()) { final PacketBuffer var8 = new PacketBuffer(Unpooled.buffer()); writeInitialDataWithPrefix(var8); SyncChannelHolder.INSTANCE.sendPayloadToPlayers(var8, var3); } } catch (IOException e) { Log.warn(e, ""IOError during full sync""); } } "	1	0	0	1	0	0
"private String Func1(SQLiteDatabase var1, int var2) { String var3 = """"; POS_Control var4 = dataHelper.getPOSControl(var1); if(var4 != null) { var3 = var4.LAST_RCP; if (var3 == null || var3.trim().isEmpty()) { var3 = ""0000001""; } else if (var3 == ""9999999"") { showMessage(""Receipt number maxed out"", ""Please reach the Administrator""); var3 = ""0000001""; } else { int var5 = Integer.parseInt(var3) + 1; var3 = String.format(""%03d"", var5); } String var6 = new SimpleDateFormat(""yyyyMMdd"").format(new Date()); String var7 = new SimpleDateFormat(""HHmm"").format(new Date()); String var8 = ""INSERT INTO header ( "" + ""COMPANY_CODE, "" + ""OUTLET_CODE, "" + ""EMP_CODE, "" + ""POS_NO, "" + ""SHIFT_NO, "" + // line 5 ""RCP_NO, "" + ""TRANS_TYPE, "" + ""BUS_DATE, "" + ""TRANS_DATE, "" + ""TRANS_TIME, "" + // 10 ""SALES_AMOUNT, "" + ""TOTAL_TAX, "" + ""TOTAL_DISCOUNT, "" + ""ROUNDING, "" + ""ROUNDING_ADJ, "" + // 15 ""APPROVAL_ID, "" + ""CUSTOMER_CODE, "" + ""CUSTOMER_POINT, "" + ""REFUND_VOUCHER_CODE, "" + ""REFUND_VOUCHER_AMOUNT, "" + // 20 ""REFUND_VOUCHER_EXPIRE_DATE, "" + ""DRAWER_DECLARE_ID, "" + ""BOTRANS_NO, "" + ""MODIFIED_DATE, "" + ""MODIFIED_ID, "" + // 25 ""ITEM_VOID_COUNT, "" + ""REPRINT_COUNT, "" + ""ITEM_VOID_AMOUNT, "" + ""REPRINT_AMOUNT, "" + ""PRICE_LEVEL, "" + // 30 ""REFUND_POS_NO, "" + ""REFUND_RCP_NO, "" + ""REFUND_REMARK, "" + ""REFUND_RCP_BUS_DATE, "" + ""IsFORCE_REFUND, "" + // 35 ""REPRINTCOUNT, "" + ""ToSAP, "" + ""MEMBER_IC, "" + ""PROTRANS_NO, "" + ""IsNewInDevice"" + // 40 "") "" + ""VALUES ("" + ""'"" + companyCode + ""', "" + ""'"" + outletCode + ""', "" + ""'"" + empCode + ""', "" + ""'"" + posNo + ""', "" + ""'1', "" + // line 5 ""?, "" + ""'S', "" + ""'"" + var6 + ""', "" + // bus date ""'"" + var6 + ""', "" + // trans dates ""'"" + var7 + ""', "" + // trans time / line 10 ""?, "" + ""0, "" + ""0, "" + ""0, "" + ""0, "" + // 15 ""null, "" + ""?, "" + ""0, "" + ""null, "" + ""null, "" + // 20 ""null, "" + ""null, "" + ""null, "" + ""'"" + var6 + ""', "" + // modified date ""'"" + posNo + ""', "" + // 25 ""0, "" + ""0, "" + ""null, "" + ""null, "" + ""null, "" + // 30 ""null, "" + ""null, "" + ""null, "" + ""null, "" + ""null, "" + // 35 ""null, "" + ""0, "" + ""null, "" + ""null, "" + ""1); ""; // 40 var4.LAST_RCP = var3; var4.EMP_CD = empCode; var4.BUS_DATE = var6; var4.SHIFT_NUMBER = var2; dataHelper.deleteAndInsertPOSControl(var1, var4); String[] var9 = new String[]{var3, total.toString(), customer_code}; // Edited by Eddie 11/12/2016, changed uuid to var3 var1.execSQL(var8, var9); return var3; // Edited by Eddie 11/12/2016, changed uuid to var3 } else { return ""noposcontrol""; } } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { try { CalendarEvent var1 = this.ttce.interpret(null); fail(); } catch (Exception var1) { } CalendarEvent var2 = this.ttce.interpret(""""); assertEquals(var2.title, """"); CalendarEvent var3 = this.ttce.interpret(""wizyta u fryzjera ""); assertEquals(var3.title, ""wizyta u fryzjera""); assertEquals(var3.getDay(), null); assertEquals(var3.getMonth(), null); assertEquals(var3.getYear(), null); assertEquals(var3.getMinutes(), null); assertEquals(var3.getHour(), null); } "	0	0	0	1	1	0
public static void Func1() { catchReflectException = false; isLogging = true; isManual = false; patchPackageName = Constants.PATCH_PACKAGENAME; mappingFilePath = DEFAULT_MAPPING_FILE; patchMethodSignureSet = new HashSet<>(); newlyAddedClassNameList = new ArrayList<String>(); modifiedClassNameList = new ArrayList<String>(); hotfixPackageList = new ArrayList<>(); newlyAddedMethodSet = new HashSet<>(); invokeSuperMethodMap = new HashMap<>(); classPool = new ClassPool(); methodNeedPatchSet = new HashSet(); addedSuperMethodList = new ArrayList<>(); noNeedReflectClassSet = new HashSet<>(); noNeedReflectClassSet.addAll(Constants.NO_NEED_REFLECT_CLASS); supportProGuard=true; } 	0	1	0	0	0	0
"public void Func1() throws SecurityException, IllegalArgumentException, NoSuchFieldException, IllegalAccessException { final int var1 = 1; testOpenColorPickerOnClickOnColorButton(); TabHost var2 = (TabHost) mSolo.getView(R.id.colorview_tabColors); TabWidget var3 = var2.getTabWidget(); mSolo.clickOnView(var3.getChildAt(var1), true); mSolo.waitForText(mSolo.getString(R.string.color_red)); final Paint var4 = (Paint) PrivateAccess.getMemberValue(BaseTool.class, PaintroidApplication.currentTool, ""mCanvasPaint""); final int var5 = var4.getColor(); final ArrayList<ProgressBar> var6 = mSolo.getCurrentViews(ProgressBar.class); assertEquals(""No progress bars for ARGB :-("", var6.size(), 4); final ArrayList<TextView> var7 = mSolo.getCurrentViews(TextView.class, mSolo.getView(R.id.rgb_base_layout)); assertEquals(""Missing some text views RGBA and ARGV-values"", 9, var7.size()); int var8 = 1; for (; var8 < var7.size(); var8 += 2) { int var9 = Integer.parseInt((String) var7.get(var8).getText()); assertTrue(""Not in range 0<=textValue<=255"", var9 >= 0 && var9 <= 255); } var8 = 1; for (ProgressBar var10 : var6) { int var11 = (var10.getProgress() + 33) % var10.getMax(); mSolo.setProgressBar(var10, var11); mSolo.sleep(50); if (var8 == 4) { // alpha 0-100% int var12 = (int) (var11 / 2.55f); assertEquals(""Text value did not change index:"" + var8, var12, Integer.parseInt((String) var7.get(var8 * 2 - 1).getText())); } else assertEquals(""Text value did not change index:"" + var8, var11, Integer.parseInt((String) var7.get(var8 * 2 - 1).getText())); var8++; } mSolo.goBack(); final Paint var13 = (Paint) PrivateAccess.getMemberValue(BaseTool.class, PaintroidApplication.currentTool, ""mCanvasPaint""); final int var14 = var13.getColor(); assertFalse(""Alpha value did not change"", Color.alpha(var14) == Color.alpha(var5)); assertFalse(""Red value did not change"", Color.red(var14) == Color.red(var5)); assertFalse(""Green value did not change"", Color.green(var14) == Color.green(var5)); assertFalse(""Blue value did not change"", Color.blue(var14) == Color.blue(var5)); } "	1	0	1	1	0	0
protected GHUser Func1(GHUser var1) throws IOException { GHUser var2 = users.get(var1.getLogin()); if (var2==null) { var1.root = this; users.put(login,var1); return var1; } return var2; } 	1	1	1	0	1	0
public WXSDKInstance Func1(String var1) { return var1 == null? null : mWXRenderManager.getWXSDKInstance(var1); } 	0	0	0	0	0	1
"public String Func1() { if (types.size() == 0) {return """";} String var1 = (String)types.elementAt(0); for (int var2=1;var2<types.size();var2++) { var1 = var1 + "","" + (String)types.elementAt(var2); } return var1; } "	1	1	1	1	1	0
"private void Func1(String var1) { int var2 = 0; int var3; while ((var3 = var1.indexOf(""."", var2)) != -1) { String var4 = var1.substring(0, var3 + 1); Iterator<PathProperty> var5 = pathProperties.var5(); while (var5.hasNext()) if (var5.next().var1.equals(var4)) var5.remove(); var2 = var3 + 1; } Iterator<PathProperty> var5 = pathProperties.var5(); while (var5.hasNext()) if (var5.next().var1.contains(var1)) var5.remove(); } "	0	1	1	0	0	0
public ArrayEntryList Func1(){ return keyValue; } 	0	0	0	0	0	1
@Override public void Func1() { while (stopped.get() && !Thread.interrupted()) { syncPolicy.sync(PSAgentContext.get().getMatricesCache()); try { Thread.sleep(syncTimeIntervalMS); } catch (InterruptedException e) { } } } 	1	0	1	1	0	0
public BigDecimal Func1() { return amount; } 	0	0	0	0	0	1
"@RequestMapping( value="""", method=RequestMethod.GET, produces={ ""application/json"" } ) @ResponseStatus(value = HttpStatus.OK) public GameStateContainer Func1(HttpServletResponse var1) { log.debug(""Mapped GET /admin/gamestate""); GameStateContainer var2 = new GameStateContainer(); var2.setState(gameStateRegistry.getCurrentState()); return var2; } "	0	0	1	1	0	0
"@RequestMapping( value=""/count"", method=RequestMethod.GET, produces={ ""application/json"" } ) @ResponseStatus(value = HttpStatus.OK) public PacdotCountResponse Func1(HttpServletResponse var1) { log.debug(""Mapped GET /pacdots/count""); PacdotCountResponse var2 = new PacdotCountResponse(); List<Pacdot> var3 = pacdotRegistry.getAllPacdots(); for(Pacdot var4 : var3) { var2.incrementTotal(); if(var4.getEaten()) { var2.incrementEaten(); } else { var2.incrementUneaten(); if(var4.getPowerdot()) { var2.incrementUneatenPowerdots(); } } } return var2; } "	0	0	1	1	0	0
public void Func1(TripForm var1) { Date var2 = new Date(); var2.setDate(var2.getDate()+7); Assert.isTrue(var1.getMoment().after(var2)); Assert.isTrue(isOwner(findOne(var1.getId()))); tripRepository.Func1(findOne(var1.getId())); } 	0	1	0	0	0	0
"public static String Func1(final String var1, final Map<String, String> var2) { StrSubstitutor var3 = new StrSubstitutor(var2); var3.setVariableResolver(new StrLookup() { @Override public String Func2(String var4) { if (var2 == null) { return """"; } Object var5 = var2.get(var4); if (var5 == null) { return """"; } return var5.toString(); } }); return var3.replace(var1); } "	0	0	0	0	0	1
"public final Message Func1(EditMessageCaption Func1) throws TelegramApiException { if (Func1 == null) { throw new TelegramApiException(""Parameter Func1 can not be null""); } return sendApiMethod(Func1); } "	0	0	0	0	0	1
private void Func1(HttpServletRequest var1, Trace var2) { if (cookieSampler.isSampling()) { final SpanEventRecorder var3 = var2.currentSpanEventRecorder(); Map<String, Object> var4 = ReadCookieMap(var1); var3.recordAttribute(AnnotationKey.HTTP_COOKIE, var4); } } 	1	0	1	0	0	0
public static List<String> Func1(Reader var1, String var2) throws IOException { final List<String> var3 = new ArrayList<>(); BufferedReader var4 = null; try { if (var1 instanceof BufferedReader) { var4 = (BufferedReader) var1; } else { var4 = new BufferedReader(var1); } String var5 = null; while ((var5 = var4.readLine()) != null) { if (!Strings.hasText(var5)) { continue; } if (!var5.startsWith(var2)) { var3.add(var5.trim()); } } } finally { if (var4 != null) var4.close(); } return var3; } 	1	0	1	0	0	0
"public String Func1(String var1, String var2) { return var1.replaceAll(""\\.[^\\.]+$"", "".""+var2); } "	1	0	0	1	0	0
"@Override public void Func1(List<MapManager.StorageCallbackData> var1) { if (mOutdatedMaps == null) return; for (MapManager.StorageCallbackData var2 : var1) { if (var2.isLeafNode && var2.newStatus == CountryItem.STATUS_FAILED) { String var3; switch (var2.errorCode) { case CountryItem.ERROR_NO_INTERNET: var3 = getString(R.string.common_check_internet_connection_dialog); break; case CountryItem.ERROR_OOM: var3 = getString(R.string.downloader_no_space_title); break; default: var3 = String.valueOf(var2.errorCode); } Statistics.INSTANCE.trackDownloaderDialogError(mTotalSizeMb, var3); MapManager.showError(getActivity(), var2, new Utils.Proc<Boolean>() { @Override public void Func2(@NonNull Boolean var4) { if (var4) { MapManager.nativeUpdate(CountryItem.getRootId()); } else { finish(); } } }); return; } else if (var2.isLeafNode && var2.newStatus == CountryItem.STATUS_DONE) { if (mLeftoverMaps == null) throw new AssertionError(""mLeftoverMaps can't be null if mOutdatedMaps != null""); mLeftoverMaps.remove(var2.countryId); } } if (!isAllUpdated()) return; finish(); } "	0	0	0	0	0	1
public void Func1(final String var1) { new WebDriverWait(seleniumWebDriver, 10) .until((ExpectedCondition<Boolean>) webDriver -> fileNamePopUp.getText().contains(var1)); } 	0	0	0	0	0	1
public void Func1(boolean var1) { this.isPaused = var1; } 	1	0	1	0	0	0
public void Func1() { this.elapsedCycles = 0; this.excessCycles = 0.0f; this.lastUpdate = getCurrentTime(); this.isPaused = false; } 	0	1	1	0	0	0
"@Parameters({""var1""}) @Test public void Func1(final String var1) throws Exception { showTitle(""Func1""); String var2 = UUID.randomUUID().toString(); EndSessionClient var3 = new EndSessionClient(endSessionEndpoint); EndSessionResponse var4 = var3.execEndSession(""INVALID_ACCESS_TOKEN"", var1, var2); showClient(var3); assertEquals(var4.getStatus(), Status.TEMPORARY_REDIRECT, ""Unexpected var4 code. Entity: "" + var4.getEntity()); assertNotNull(var4.getEntity(), ""The entity is null""); assertNotNull(var4.getErrorType(), ""The error type is null""); assertNotNull(var4.getErrorDescription(), ""The error description is null""); } "	0	1	0	0	0	0
"@Override public Answer Func1(AppService var1) { MessageEvent var2 = null; StringBuilder var3 = new StringBuilder(); var3.append(""INSERT INTO appservice (`Service`, `Group`, `Application`, `Type`, `Method`, `ServicePath`, `Operation`, `ServiceRequest`, `AttachementURL`, `Description`) ""); if ((var1.getApplication() != null) && (!var1.getApplication().equals(""""))) { var3.append(""VALUES (?,?,?,?,?,?,?,?,?)""); } else { var3.append(""VALUES (?,?,null,?,?,?,?,?,?,?)""); } if (LOG.isDebugEnabled()) { LOG.debug(""SQL : "" + var3.toString()); } Connection var4 = this.databaseSpring.connect(); try { PreparedStatement var5 = var4.prepareStatement(var3.toString()); try { int var6 = 1; var5.setString(var6++, var1.getService()); var5.setString(var6++, var1.getGroup()); if ((var1.getApplication() != null) && (!var1.getApplication().equals(""""))) { var5.setString(var6++, var1.getApplication()); } var5.setString(var6++, var1.getType()); var5.setString(var6++, var1.getMethod()); var5.setString(var6++, var1.getServicePath()); var5.setString(var6++, var1.getOperation()); var5.setString(var6++, var1.getServiceRequest()); var5.setString(var6++, var1.getAttachementURL()); var5.setString(var6++, var1.getDescription()); var5.executeUpdate(); var2 = new MessageEvent(MessageEventEnum.DATA_OPERATION_OK); var2.setDescription(var2.getDescription().replace(""%ITEM%"", OBJECT_NAME).replace(""%OPERATION%"", ""INSERT"")); } catch (SQLException exception) { LOG.error(""Unable to execute var3 : "" + exception.toString()); if (exception.getSQLState().equals(SQL_DUPLICATED_CODE)) { //23000 is the sql state for duplicate entries var2 = new MessageEvent(MessageEventEnum.DATA_OPERATION_ERROR_DUPLICATE); var2.setDescription(var2.getDescription().replace(""%ITEM%"", OBJECT_NAME).replace(""%OPERATION%"", ""INSERT"").replace(""%REASON%"", exception.toString())); } else { var2 = new MessageEvent(MessageEventEnum.DATA_OPERATION_ERROR_UNEXPECTED); var2.setDescription(var2.getDescription().replace(""%DESCRIPTION%"", exception.toString())); } } finally { var5.close(); } } catch (SQLException exception) { LOG.error(""Unable to execute var3 : "" + exception.toString()); var2 = new MessageEvent(MessageEventEnum.DATA_OPERATION_ERROR_UNEXPECTED); var2.setDescription(var2.getDescription().replace(""%DESCRIPTION%"", exception.toString())); } finally { try { if (var4 != null) { var4.close(); } } catch (SQLException exception) { LOG.error(""Unable to close var4 : "" + exception.toString()); } } return new Answer(var2); } "	0	0	1	1	0	0
@Override public void Func1(double... var1){ super.Func1(var1); for (Grid3D var2 : buffer){ if (var2 != null) var2.Func1(var1[0],var1[1]); } } 	1	1	0	1	0	0
"private void Func1(NotFoundMessage var1) { for (GetDataRequest var2 : getDataFutures) { for (InventoryItem var3 : var1.getItems()) { if (var3.hash.equals(var2.hash)) { log.info(""{}: Bottomed out dep tree at {}"", this, var2.hash); var2.future.cancel(true); getDataFutures.remove(var2); break; } } } } "	0	0	0	0	0	1
"private static synchronized String Func1(String var1, Boolean var2) throws IOException { try (Socket socket = new Socket(config.getServerName(), config.getTcpPort()); DataOutputStream requestStream = new DataOutputStream(socket.getOutputStream()); BufferedReader responseStream = new BufferedReader( new InputStreamReader(socket.getInputStream(), DEFAULT_CHARSET_ENCODING) )) { String var3 = var2 ? DEBUG_PREFIX.concat(var1) : var1; IOUtils.write(var3, requestStream); String var4 = var2 ? responseStream.readLine() : null; LOGGER.debug("" > tcp://{}:{} \n\t{}\n< {}"", config.getServerName(), config.getTcpPort(), var3, var4); return var4; } catch (IOException e) { LOGGER.error(""Unable to Func1 var1: {} \n Host: {}\n Port""); throw e; } } "	0	0	0	0	0	1
"public void Func1(@RParam(rParamName = ""p_id"") String var1) throws IOException, IllegalArgumentException, IllegalAccessException{ RegistarUtilizador var2 = new RegistarUtilizador(); User var3 = (User) new User(); var3.setId(Integer.parseInt(var1)); var3 = (User) var3.getOne(); var2.setNome(var3.getName()); var2.setUsername(var3.getUser_name()); var2.setEmail(var3.getEmail()); if(Igrp.getInstance().getRequest().getMethod().equals(""POST"")){ var2.load(); boolean var4 = false; if(!var2.getPassword().equals(var2.getConfirmar_password())){ Igrp.getInstance().getFlashMessage().addMessage(FlashMessage.ERROR, ""Password inconsistentes ... Tente de novo.""); var4 = true; } if(!var4){ var3.setName(var2.getNome()); var3.setPass_hash(var2.getPassword()); var3.setEmail(var2.getEmail()); var3.setUser_name(var2.getUsername()); var3.setUpdated_at(System.currentTimeMillis()); if(var3.update()){ Igrp.getInstance().getFlashMessage().addMessage(""success"", ""Utilizador atualizado com sucesso.""); this.redirect(""igrp"", ""registar-utilizador"", ""editar"", new String[]{""p_id""}, new String[]{var3.getId() + """"}); return; } else Igrp.getInstance().getFlashMessage().addMessage(""error"", ""Error ao atualizar uilizador.""); } } RegistarUtilizadorView var5 = new RegistarUtilizadorView(var2); var5.title = ""Atualizar utilizador""; var5.btn_guardar.setLink(""editar&amp;p_id="" + var1); this.renderView(var5); } "	0	1	1	0	0	0
public boolean Func1(Item var1, PreviewProperties var2) { return var1 instanceof EdgeItem && var2.getBooleanValue(PreviewProperty.DIRECTED) && (Boolean) var1.getData(EdgeItem.DIRECTED) && !(Boolean) var1.getData(EdgeItem.SELF_LOOP) && !var2.getBooleanValue(PreviewProperty.MOVING); } 	0	0	0	0	0	1
"protected String Func1(String var1, long var2, long var3, String var4) { String var5 = Standalone.formatTime(var2); String var6 = Standalone.formatTime(var3); String var7 = Standalone.formatTime(var2 + var3); return ""Successfully created \"""" + var1 + ""\"" ("" + var4 + "") in "" + var7 + "" (anaysis: "" + var5 + "", var6: "" + var6 + "")""; } "	0	0	0	1	1	0
public void Func1(FamilyApartmentDAO var1) { this.familyApartmentDAO = familyApartmentDAO; } 	0	0	1	1	0	0
"@Test public void Func1() throws Exception { String[] var1 = new String[101]; for (int var2 = 0; var2 < var1.length; var2++) var1[var2] = ""a"" + var2; String[] var3 = new String[] { URLEncoder.encode(""A0|A1|A2|A3|A4|A5|A6|A7|A8|A9|A10|A11|A12|A13|A14|"" + ""A15|A16|A17|A18|A19|A20|A21|A22|A23|A24|A25|A26|A27|A28|A29|A30|"" + ""A31|A32|A33|A34|A35|A36|A37|A38|A39|A40|A41|A42|A43|A44|A45|A46|"" + ""A47|A48|A49"", ""UTF-8""), URLEncoder.encode(""A50|A51|A52|A53|A54|A55|A56|A57|A58|A59|A60|A61|A62|"" + ""A63|A64|A65|A66|A67|A68|A69|A70|A71|A72|A73|A74|A75|A76|A77|A78|A79|"" + ""A80|A81|A82|A83|A84|A85|A86|A87|A88|A89|A90|A91|A92|A93|A94|A95|A96|"" + ""A97|A98|A99"", ""UTF-8""), URLEncoder.encode(""A100"", ""UTF-8"") }; String[] var4 = enWiki.Func1(var1); assertArrayEquals(""Func1"", var3, var4); } "	1	0	1	0	0	0
@Nullable private static KotlinEnvironment Func1() { IProject[] var1 = ResourcesPlugin.getWorkspace().getRoot().getProjects(); for (IProject var2 : var1) { if (KotlinNature.hasKotlinNature(var2)) { return KotlinEnvironment.getEnvironment(JavaCore.create(var2)); } } return null; } 	0	1	0	0	0	0
"@SuppressWarnings(""unchecked"") @Override public boolean Func1(Expression<?>[] var1, int var2, Kleenean var3, ParseResult var4) { if (checkIfCondition()) return false; EffFormatGUI var5 = lastInstance; if (hasSection()) { if ((var2 == 0 || var2 == 5)) { Skript.error(""You can't execute a code in this effect. Use 'format gui slot .... to run:' instead.""); return false; } lastInstance = this; loadSection(""format gui effect"", InventoryClickEvent.class); } else if (!hasSection() && var2 == 2) { Skript.error(""You can't execute a blank code in this effect. In case you want to format a unstealable item, use 'format gui slot ... to do nothing' instead.""); return false; } lastInstance = var5; int var6 = var1.length; s = (Expression<Number>) var1[0]; p = (Expression<Player>) var1[1]; i = (Expression<ItemStack>) var1[2]/*.getConvertedExpression(ItemStack.class)*/; toClose = var4.mark > 0; Type = var2; if (var4.mark == 2) inv = (Expression<Inventory>) var1[3]; switch (var2){ case 5: runEvent = true; break; case 1: toClose = true; case 2: ct = var1[var1.length -1] != null ? var1[var1.length -1].getConvertedExpression(Object.class) : null; case 0:  break; case 3: sender = (Expression<CommandSender>) var1[4]; cmd = (Expression<String>) var1[5]; perm =  var1[6] != null ? (Expression<String>) var1[6] : null; break; case 4: String var7 = var4.regexes.get(0).group(0).replaceAll("" "",""""); String var8 = var4.regexes.size() > 1 ? var4.regexes.get(1).group(0) : """"; Function<?> var9 = Functions.getFunction(var7); EvalFunction.setParserInstance(this); if (var9 != null) func = new EvalFunction(var9, var8); else func = new EvalFunction(var7, var8); } if (var2 > 2 && var2 != 4){ ct = var1[var6 - 2] != null ? var1[var6 - 2].getConvertedExpression(Object.class): null; i2 = var1[var6 - 1] != null ? (Expression<ItemStack>) var1[var6 - 1] : null; } return true; } "	1	0	1	1	0	0
"protected static OreGenList Func1(World var1, int var2, boolean var3) { String var4 = var1.provider.getDimensionName() + (var3 ? "".asteroid"" : """"); OreGenList var5; if ((var5 = sDimSpecifiedOreGenMap.get(var4)) == null) { if (GT_Values.D1) System.out.println(""Initializing dimensional-specified Orevein list for: "" + var4); var5 = new OreGenList(); for (GT_Worldgen_GT_Ore_Layer var6 : sList) if ((var3 && ((var6.mEndAsteroid && var2 == 1) || (var6.mAsteroid && var2 == -30))) || var6.isGenerationAllowed(var1, var2, ((var2 == -1) && (var6.mNether)) || ((var2 == 0) && (var6.mOverworld)) || ((var2 == 1) && (var6.mEnd)) || ((var1.provider.getDimensionName().equals(""Moon"")) && (var6.mMoon)) || ((var1.provider.getDimensionName().equals(""Mars"")) && (var6.mMars)) ? var2 : ~var2)) { var5.list.add(var6); var5.weight += var6.mWeight; } sDimSpecifiedOreGenMap.put(var4, var5); } return var5; } "	1	1	0	0	0	0
@Override protected void Func1() { super.Func1(); checkPlayServices(); if (this.playServicesOk && this.settingsOK) launchChecksComplete(); } 	1	0	1	0	0	0
@Test public void Func1() { Rectangle var1 = new Rectangle(50, 50, 150, 150); Rectangle var2 = var1.scaleContainCenter(new Vector2D(100, 100)); Assert.assertEquals(new Rectangle(50, 50, 150, 150), var2); } 	0	1	0	0	0	0
@Test public void Func1() { Rectangle var1 = new Rectangle(0, 0, 100, 100); Rectangle var2 = var1.scaleContainCenter(new Vector2D(100, 50)); Assert.assertEquals(new Rectangle(0, 25, 100, 75), var2); } 	0	1	1	0	0	0
@Test public void Func1() { Rectangle var1 = new Rectangle(0, 0, 50, 50); Rectangle var2 = var1.scaleContainCenter(new Vector2D(100, 100)); Assert.assertEquals(new Rectangle(0, 0, 50, 50), var2); } 	0	1	1	0	0	0
"protected boolean Func1(Award var1) { boolean var2 = true; if (ObjectUtils.isNotNull(var1.getAwardId())) { Map<String, String> var3 = new HashMap<String, String>(); var3.put(""awardId"", var1.getAwardId() + """"); Award var4 = (Award) getBusinessObjectService().findByPrimaryKey(Award.class, var3); if (ObjectUtils.isNotNull(var4)) { String var5 = var4.getAccountNumber(); String var6 = var4.getFinancialChartOfAccountsCode(); if (ObjectUtils.isNull(var1.getAccountNumber()) || ObjectUtils.isNull(var1.getFinancialChartOfAccountsCode())) { return true; } if (var1.getAccountNumber().equalsIgnoreCase(var5) && var6.equalsIgnoreCase(var1.getFinancialChartOfAccountsCode())) { var2 &= false; } } } return var2; } "	0	1	1	0	0	0
"public void Func1(Context var1, Intent var2) { Log.d(TAG, ""Func1() start""); wakeup(var2); } "	1	0	1	0	0	0
"public Response Func1(int var1, int var2) { String var3 = String.format(""/course/%d/exam/%d/student/%d/score"", var1, var2, super.userId); return Utils.get(CLIENT, var3); } "	0	0	0	0	0	1
@Override public boolean Func1(MotionEvent var1) { mScaleDetector.Func1(var1); boolean var2 = mGestureDetector.Func1(var1); if (var1.getAction() == MotionEvent.ACTION_UP && !mIsZooming && mCurrentFlingDirection == Direction.NONE) { if (mCurrentScrollDirection == Direction.HORIZONTAL) { goToNearestOrigin(); } mCurrentScrollDirection = Direction.NONE; } return var2; } 	0	1	0	0	0	0
"private void Func1(final LoggingSectionHandler.LoggerTreeElement var1, final LogParamEntry var2) { ParseTree var3 = new ParserRuleContext(); var2.setConsoleMaskRoot( var3 ); ConfigTreeNodeUtilities.addChild( var3, new AddedParseTree(""\n"") ); StringBuilder var4 = new StringBuilder(); var1.writeNamePrefix(var4); var4.append(""FileMask := ""); ParseTree var5 = new AddedParseTree(var4.toString()); ConfigTreeNodeUtilities.addChild( var3, var5 ); ParseTree var6 = new ParserRuleContext(); var2.setFileMask( var6 ); ConfigTreeNodeUtilities.addChild( var3, var6 ); ConfigTreeNodeUtilities.addChild( loggingSectionHandler.getLastSectionRoot(), var3 ); } "	0	0	1	1	1	0
"public static Result Func1() { Logger.debug(""Received an Func1 in var2""); PersistenceLayer var1 = Configurator.getDefaultConfigurator().getPersistence(); Filter var2 = Filters.getFilterFromSession(); if (var2 != null) { DynamicForm var3 = play.data.Form.var3().bindFromRequest(); String var4 = var3.get(""var2""); String var5 = var3.get(""var7""); String var6 = var3.get(""type""); if (var6.equals(""graph"")) { int var7 = Integer.parseInt(var5); for (Graph var8 : Overview.getAllGraphs().getGraphs()) { if (var8.getProperty().equals(var4)) var5 = var8.getKeys().get(var7); } } if (var5.equals(""Rest"")){ return ok(""Cannot show distribution for 'Rest' var7""); } Object var9 = null; Property var10 = var1.getCache().getProperty(var4); PropertyType var11=PropertyType.valueOf(var10.getType()); switch (var11){ case INTEGER: try { var9 = Integer.parseInt(var5); } catch (NumberFormatException ex) { var9 = var5.equals(""Unknown"")?null:var5; } break; case FLOAT: try { var9 = Double.parseDouble(var5); } catch (NumberFormatException ex) { var9 = var5.equals(""Unknown"")?null:var5; } break; case BOOL: try { var9 = Double.parseDouble(var5); } catch (Exception ex){ if (var5.equals(""Unknown"")) var9 = null; else if (var5.equals(""CONFLICT"")) var9 = ""CONFLICT""; } break; case STRING: var9 = var5; if (var5.equals(""Unknown"")) var9 = null; break; case DATE: if (var5.equals(""Unknown"")) var9 = null; else { DateFormat var12 = new SimpleDateFormat(""EEE, dd MMM yyyy hh:mm:ss z""); try { var9 = var12.parse(var5); } catch (ParseException e) { var9 = var5; } } break; } List<FilterCondition> var13 = var2.getConditions(); for (FilterCondition var14 : var13) { if (var14.getField().equals(var4)) { var14.setValue(var9); Filters.setFilterFromSession(var2); return ok(); } } var2.addFilterCondition(new FilterCondition(var4, var9)); Filters.setFilterFromSession(var2); return ok(); } return badRequest(""No var2 was found in the session\n""); } "	0	0	0	0	0	1
"@Test(dataProvider = ""correctArguments"") public void Func1(final boolean var1, final ArgumentsBuilder var2, final List<Class> var3, final List<Class> var4, final boolean var5) throws Exception { var2.addBooleanArgument(""disable5pTrim"", var5); final CommandLineArgumentParser var6 = new CommandLineArgumentParser(new Object(), Collections.singletonList(new TrimmerPluginDescriptor( (var1) ? makeDefaultTrimmerForTest() : null))); Assert.assertTrue(var6.parseArguments(System.out, var2.getArgsArray())); final TrimmerPluginDescriptor var7 = var6.getPluginDescriptor(TrimmerPluginDescriptor.class); Assert.assertEquals( var7.getDefaultInstances().stream().map(TrimmingFunction::getClass) .collect(Collectors.toList()), var3, ""defaults are wrong: "" + var7.getDefaultInstances()); final List<TrimmingFunction> var8 = var7.getAllInstances(); Assert.assertEquals(var8.size(), var4.size(), ""not equal number of classes: "" + var8); for (int var9 = 0; var9 < var8.size(); var9++) { final TrimmingFunction var10 = var8.get(var9); Assert.assertEquals(var10.getClass(), var4.get(var9)); Assert.assertFalse(var10.isDisable3prime()); Assert.assertEquals(var10.isDisable5prime(), var5); } } "	0	0	0	0	0	1
"public TokenBucketImpl Func1() { checkNotNull(capacity, ""Must specify a capacity""); checkNotNull(refillStrategy, ""Must specify a refill strategy""); return new TokenBucketImpl(capacity, refillStrategy, sleepStrategy); } "	0	0	0	0	0	1
public synchronized void Func1 (Connection var1) { if (authenticatePlayer(var1)) { playerList.add(var1); } } 	0	0	0	0	0	1
"private void Func1() { if (!isExternalStorageWritable()) { Toast.makeText(ManageFileActivity.this, R.string.message_csv_unavailable, Toast.LENGTH_SHORT).show(); finish(); return; } final Bundle var1 = getIntent().getExtras(); mTable = var1.getString(Constants.TAG_TABLE_NAME, null); mTitle = var1.getString(Constants.TAG_TITLE, null); mReadMode = var1.getBoolean(Constants.TAG_READING_MODE, false); mFolderMode = var1.getBoolean(Constants.TAG_FOLDER, false); mDatabase = var1.getBoolean(Constants.TAG_DATABASE, false); if (mTitle != null) { mTitle = mTitle.replaceAll(""[^A-Za-z0-9 .-]"", """"); } final Intent var2; if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) { var2 = new Intent(Intent.ACTION_GET_CONTENT); } else if (mReadMode) { var2 = new Intent(Intent.ACTION_OPEN_DOCUMENT); } else { var2 = new Intent(Intent.ACTION_CREATE_DOCUMENT); } var2.putExtra(Intent.EXTRA_TITLE, mTitle); var2.addCategory(Intent.CATEGORY_OPENABLE); final String var3 = Environment .getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath(); var2.setDataAndType(Uri.parse(var3), mDatabase ? ""*/*"" : ""text/comma-separated-values""); if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT && mReadMode) { new MaterialFilePicker() .withActivity(this) .withRequestCode(CSV_REQUEST_CODE_JB) .withFilter(Pattern.compile(mDatabase ? "".*\\.*"" : "".*\\.csv$"")) .withFilterDirectories(false) .withHiddenFiles(false) .start(); } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT && !mReadMode) { if (mDatabase) { final String var4 = new SimpleDateFormat(""MM-dd-yyyy"", Locale.getDefault()).format(new Date()); mUri = Uri.withAppendedPath(Uri.parse(var3), JB_DIR + var4 + "".backup""); } else { mUri = Uri.withAppendedPath(Uri.parse(var3), JB_DIR + mTitle + "".csv""); } final File var5 = new File(var3 + ""/"" + JB_DIR); if (var5.exists() || var5.mkdirs()) { final File var6 = new File(mUri.getPath()); mUri = Uri.fromFile(var6); new ManageFile().execute(mReadMode); } else { Toast.makeText(ManageFileActivity.this, R.string.message_io_failed, Toast.LENGTH_SHORT).show(); finish(); } } else { startActivityForResult(var2, CSV_REQUEST_CODE); } } "	0	0	0	0	0	1
private void Func1() { if (mParent != null && !mCleanedUp) { mHandler.removeCallbacks(mRemover); mHandler.removeCallbacks(mDisplayMini); final FragmentManager var1 = mParent.getFragmentManager(); FragmentTransaction var2 = var1.beginTransaction(); var2.setCustomAnimations(0, R.anim.com_mixpanel_android_slide_down).Func1(this).commit(); UpdateDisplayState.releaseDisplayState(mDisplayStateId); mCleanedUp = true; } } 	0	1	0	0	0	0
@Test public void Func1() { Intent var1 = Boxing.of(new BoxingConfig(BoxingConfig.Mode.SINGLE_IMG).needCamera()) .withIntent(mContext, BoxingActivity.class).getIntent(); assertNotNull(var1); BoxingConfig var2 = BoxingManager.getInstance().getBoxingConfig(); assertNotNull(var2); assertEquals(var2.getMode(), BoxingConfig.Mode.SINGLE_IMG); assertEquals(var2.isNeedCamera(), true); BoxingCropOption var3 = var2.getCropOption(); assertEquals(var3, null); ArrayList<BaseMedia> var4 = var1.getParcelableArrayListExtra(Boxing.EXTRA_SELECTED_MEDIA); assertEquals(var4, null); } 	0	0	0	0	0	1
public void Func1(Role var1) throws InsufficientRoleException { if (token.getRole() != null) { checkRoleField(var1); } else { checkGroupsField(roleMapper.getRoleGroup(var1)); } } 	1	0	1	0	1	0
"public final <C extends Component> C Func1(Class<C> var1) { return getOp(var1).orElseThrow(() -> new ComponentException(""Attempt to Func1 component that does not exist: %s"", var1)); } "	0	0	0	0	0	1
"@Override public void Func1(int var1, @NonNull String[] var2, @NonNull int[] var3) { super.Func1(var1, var2, var3); if (var1==PERMISSION_REQUEST_CODE) { if (var2[0].equals(Manifest.permission.WRITE_EXTERNAL_STORAGE)) { if (var3[0] == PackageManager.PERMISSION_GRANTED) { Map<String, ?> var4 = PrefHelper.getAll(); var4.remove(""token""); String var5 = new Gson().toJson(var4); String var6 = Environment.getExternalStorageDirectory() + File.separator  + ""FastHub""; File var7 = new File(var6); var7.mkdirs(); File var8 = new File(var7, ""var8.var5""); try { var8.createNewFile(); FileOutputStream var9 = new FileOutputStream(var8); OutputStreamWriter var10 = new OutputStreamWriter(var9); var10.append(var5); var10.close(); var9.flush(); var9.close(); } catch (IOException e) { Log.e(getTag(), ""Couldn't var8: "" + e.toString()); } PrefHelper.set(""backed_up"", new SimpleDateFormat(""MM/dd"").format(new Date())); findPreference(""var8"").setSummary(getString(R.string.backup_summary, getString(R.string.now))); Toasty.success(getContext(), getString(R.string.backed_up)); } else { Toasty.error(getContext(), getString(R.string.permission_failed)).show(); } } else if (var2[0].equals(Manifest.permission.READ_EXTERNAL_STORAGE)) { if (var3[0] == PackageManager.PERMISSION_GRANTED) { showFileChooser(); } else { Toasty.error(getContext(), getString(R.string.permission_failed)).show(); } } } } "	1	1	0	0	1	0
public ViewHolder Func1(int var1, int var2) { View var3 = getView(var1); if (var3.getVisibility() == var2) { var3.setVisibility(var2); } return this; } 	1	1	1	1	1	0
"@Override public boolean Func1(Captcha var1) { if(!(var1 instanceof CaptchaImage)){ return false; } captchaCount.incrementAndGet(); CaptchaImage var2 = (CaptchaImage)var1; var2.setLastSolver(this); var2.setStatus(Captcha.Status.CREATED); String var3 = null; String var4 = var2.getMimes()[0]; String[] var5 = null; if(var4 != null) var5 = var4.split(""/""); else var4 = ""application/octet-stream""; if(var5 != null && var5.length == 2){ if(isValidImageExtension(var5[1])){ var3 = ""image."" + var5[1]; } } else { var3 = ""image.png""; } Map<String,Object> var6 = getMapWithCredentials(); var6.put(""function"", ""picture2""); var6.put(""pict"",new ByteArrayBody(var2.getImage(), ContentType.create(var4), var3)); var6.put(""pict_type"",""0""); long var7 = System.currentTimeMillis(); var2.setStatus(Captcha.Status.SUBMITTED); try(ScrapClient http = new ScrapClient()){ http.setTimeout(95000); int var8 = 0; Answer var9 = null; int var10 = 0; while(true){ var8 = http.post(apiUrl, var6, ScrapClient.PostType.MULTIPART); var9 = Answer.fromResponse(http.getContentAsString()); if(!isRetryable(var8, var9)){ break; } if(++var10 > maxRetryOnOverload){ break; } try { Long var11 = 5000l*var10; LOG.debug(""server is overloaded, sleeping {} ms"", var11); Thread.var11(var11); }catch(InterruptedException ex){ break; } } if(var9 == null){ if(var8 == 200){ var2.setError(Captcha.Error.INVALID_CREDENTIALS); } else { var2.setError(Captcha.Error.NETWORK_ERROR); } var2.setStatus(Captcha.Status.ERROR); return false; } var2.setId(var9.majorId + ""-"" + var9.minorId); switch(var9.status){ case OK: var2.setStatus(Captcha.Status.SOLVED); var2.setError(Captcha.Error.SUCCESS); var2.setResponse(var9.text); return true; case ERR_OVERLOAD: var2.setError(Captcha.Error.SERVICE_OVERLOADED); break; case ERR_BALANCE: var2.setError(Captcha.Error.OUT_OF_CREDITS); break; default: var2.setError(Captcha.Error.NETWORK_ERROR); } var2.setStatus(Captcha.Status.ERROR); } catch(IOException ex){ LOG.error(""io exception"", ex); var2.setError(EXCEPTION); } finally { var2.setSolveDuration(System.currentTimeMillis()-var7); } return false; } "	0	0	0	0	0	1
public static Map<String, List<String>> Func1(final URI var1, final boolean var2) { return Func1(var1.toString(), var2); } 	0	0	0	0	0	1
public static int Func1(final long var1) { ArgUtils.checkPositive(var1); return 32 - Long.numberOfLeadingZeros(var1 - 1); } 	0	1	1	1	0	0
"@SuppressWarnings(""unchecked"") public <T> Comparable<T> Func1(int var1, int var2, Comparable<T> var3) { Comparable<T> var4; DataChangeEvent var5 = null; synchronized (this) { var4 = (Comparable<T>) get(var1, var2); if (!var4.equals(var3)) { rows.get(var2)[var1] = var3; var5 = new DataChangeEvent(this, var1, var2, var4, var3); } } if (var5 != null) { notifyDataUpdated(var5); } return var4; } "	1	1	1	1	1	0
private SearchResponse Func1(String var1, String var2, String var3, Map<String, Object> var4, Optional<Integer> var5, Optional<Integer> var6) { SearchRequestBuilder var7 = client.prepareSearch(var1).setTypes(var2).setSearchType(SearchType.DFS_QUERY_THEN_FETCH) .setTemplateName(var3).setTemplateType(ScriptType.INDEXED).setTemplateParams(var4); if (var5.isPresent() && var6.isPresent()) { var7.setFrom(var5.get()).setSize(var6.get()); } return var7.execute().actionGet(); } 	1	1	0	1	0	0
public static JRubyAsciidoctor Func1(List<String> var1) { return processRegistrations(createJRubyAsciidoctorInstance(null, var1, null, null)); } 	1	0	1	1	0	0
protected void Func1(InputStream var1, OutputStream var2) throws IOException { if (var1 == null || var2 == null) { return; } byte[] var3 = new byte[chunkSize]; int var4 = 0; while ((var4 = var1.read(var3)) > 0) { var2.write(var3, 0, var4); } } 	1	0	1	1	0	0
public HTML Func1() { return loginName; } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception { List<String> var1 = new ArrayList<String>(); var1.add(""fqdn""); var1.add(""hostname""); GraphiteHostAnnotator var2 = new GraphiteHostAnnotator(""test.host.com"", var1); List<Object> var3 = new LinkedList<Object>(); String var4 = ""test.metric 1 foo=bar""; var2.decode(null, var4, var3); assertEquals(""test.metric 1 foo=bar source=test.host.com"", var3.get(0)); } "	0	0	0	1	1	0
"@Override public Document Func1(String var1, Object var2, Properties var3) throws XDMException { if (var2 == null) { throw new XDMException(""Document var2 can not be null"", XDMException.ecDocument); } logger.trace(""storeDocumentFromMap.enter; var1: {}; var2: {}"", var1, var2); DocumentBeanCreator var4 = new DocumentBeanCreator(repo.getClientId(), repo.getTransactionId(), var1, var3, var2); return storeDocument(var3, var4); } "	0	0	0	0	0	1
"@Override public void Func1(int var1, int var2, Intent var3) { super.Func1(var1, var2, var3); safelyCloseLoadingView(); if (var2 == RESULT_OK) { if (var1 == DROP_IN_REQUEST) { DropInResult var4 = var3.getParcelableExtra(DropInResult.EXTRA_DROP_IN_RESULT); displayResult(var4.getPaymentMethodNonce(), var4.getDeviceData()); } else if (var1 == CUSTOM_REQUEST || var1 == PAYPAL_REQUEST) { displayResult((PaymentMethodNonce) var3.getParcelableExtra(EXTRA_PAYMENT_METHOD_NONCE), var3.getStringExtra(EXTRA_DEVICE_DATA)); } if (mNonce instanceof CardNonce && Settings.isThreeDSecureEnabled(this)) { mLoading = ProgressDialog.show(this, getString(R.string.loading), getString(R.string.loading), true, false); ThreeDSecure.performVerification(mBraintreeFragment, mNonce.getNonce(), ""1""); } else { mCreateTransactionButton.setEnabled(true); } } else if (var2 != RESULT_CANCELED) { safelyCloseLoadingView(); showDialog(((Exception) var3.getParcelableExtra(DropInActivity.EXTRA_ERROR)).getMessage()); } } "	0	1	0	0	0	0
"@Test public void Func1() { DateSelector var1 = new DateSelector(); try { var1.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0]); fail(""DateSelector did not check for required fields""); } catch (BuildException be1) { assertEquals(""You must provide a datetime or the number of "" + ""milliseconds."", be1.getMessage()); } var1 = new DateSelector(); var1.setDatetime(""01/01/1969 01:01 AM""); try { var1.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0]); fail(""DateSelector did not check for Datetime being in the "" + ""allowable range""); } catch (BuildException be2) { assertEquals(""Date of 01/01/1969 01:01 AM results in negative "" + ""milliseconds value relative to epoch (January 1, "" + ""1970, 00:00:00 GMT)."", be2.getMessage()); } var1 = new DateSelector(); var1.setDatetime(""this is not a date""); try { var1.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0]); fail(""DateSelector did not check for Datetime being in a "" + ""valid format""); } catch (BuildException be3) { assertEquals(""Date of this is not a date"" + "" Cannot be parsed correctly. It should be in"" + "" MM/DD/YYYY HH:MM AM_PM format."", be3.getMessage()); } var1 = new DateSelector(); Parameter var2 = new Parameter(); var2.setName(""garbage in""); var2.setValue(""garbage out""); Parameter[] var3 = new Parameter[1]; var3[0] = var2; var1.setParameters(var3); try { var1.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0]); fail(""DateSelector did not check for valid parameter element""); } catch (BuildException be4) { assertEquals(""Invalid parameter garbage in"", be4.getMessage()); } var1 = new DateSelector(); var2 = new Parameter(); var2.setName(""millis""); var2.setValue(""garbage out""); var3[0] = var2; var1.setParameters(var3); try { var1.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0]); fail(""DateSelector did not check for valid millis parameter""); } catch (BuildException be5) { assertEquals(""Invalid millisecond setting garbage out"", be5.getMessage()); } var1 = new DateSelector(); var2 = new Parameter(); var2.setName(""granularity""); var2.setValue(""garbage out""); var3[0] = var2; var1.setParameters(var3); try { var1.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0]); fail(""DateSelector did not check for valid granularity parameter""); } catch (BuildException be6) { assertEquals(""Invalid granularity setting garbage out"", be6.getMessage()); } } "	0	0	0	0	0	1
public void Func1() { if (getError() == null) { verifySettings(); } if (getError() != null) { throw new BuildException(errmsg); } if (!isReference()) { dieOnCircularReference(); } } 	0	0	0	0	0	1
"private static void Func1(List<ValueNode> var1) { int var2 = vNodeSimList.size(); List<List<Integer>> var3 = new ArrayList<>(); for(int var4=0;var4<var2;var4++) { List<Integer> var5 = new ArrayList<>(); String var6 = var1.get(var4).getName(); var5.add(var4); if(!(var6.equals(""string"")||var6.equals(""float"")||var6.equals(""int"")||var6.equals(""boolean""))) { for(int var7=0;var7<var2;var7++) { if(var4!=var7 && Double.compare(vNodeSimList.get(var4).get(var7),0.6)>=0) { var5.add(var7); } } }//如果是上述基础数据类型,则直接忽略加入相似节点过程 var3.add(var5); } mostSimList = var3; } "	0	1	0	0	0	0
"@Override public void Func1(VariableDeclaration var1) { S_Expression var2 = tempExpr; if (var1.getValue() != null) { var1.getValue().accept(this); } else { if (var1.getType() instanceof BooleanType) { tempExpr = new Constant(""true""); } else { tempExpr = new Constant(""0""); } } VarDef var3 = new VarDef(var1.getName(), var1.getType(), 0); var2.replace(var3, tempExpr); replaceInAssignments(upScopeReplacements.lastElement(), var3, tempExpr); upScopeReplacements.lastElement().remove(var3); } "	0	1	1	0	1	0
@Override public boolean Func1(MenuItem var1) { switch (var1.getItemId()) { case R.id.action_share: Intent var2 = new Intent(Intent.ACTION_SEND); Media var3 = new Media(ContentHelper.getPath(getApplicationContext() ,getIntent().getData())); var2.setType(var3.getMIME()); var2.putExtra(Intent.EXTRA_STREAM, getIntent().getData()); startActivity(Intent.createChooser(var2, getString(R.string.send_to))); return true; case R.id.action_settings: startActivity(new Intent(getApplicationContext(), SettingsActivity.class)); return true; case R.id.rotate_layout: int var4 = (((WindowManager) getSystemService(WINDOW_SERVICE)).getDefaultDisplay()).getRotation(); if (var4 == Surface.ROTATION_90 || var4 == Surface.ROTATION_270) setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); else setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); showControls(); return true; default: return super.Func1(var1); } } 	0	1	0	0	0	0
@Override public void Func1() { try { Updates var1 = telegramApiProvider.getUpdates(lastUpdateId); if (!var1.isEmpty()) { lastUpdateId = var1.getLastUpdateId() + 1; updates.addAll(var1.getUpdates()); } } catch (Exception ex) { logger.error(ex.getMessage(), ex); } } 	1	1	1	1	1	0
public ButtonShowIn Func1() { URL var1 = SikuliIDE.class.getResource(iconFile); setIcon(new ImageIcon(var1)); setText(buttonText); setToolTipText(buttonHint); addActionListener(this); return this; } 	0	0	0	0	0	1
"public int Func1(String var1, Language var2, NameSpace var3) throws DaoException{ LiveAPIQuery.LiveAPIQueryBuilder var4 = new LiveAPIQuery.LiveAPIQueryBuilder(""INFO"", var2) .addTitle(var1).setRedirects(followRedirects); QueryReply var5 = var4.build().getValuesFromQueryResult().get(0); return var5.getId(); } "	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") public UploadPartResult Func1(String var1, String var2, String var3, Long var4, Long var5, int var6, File var7, Configuration var8) throws IOException, OSSException, ClientException { InputStream var9 = null; try { var9 = new FileInputStream(var7); var9.skip(var5); Class var10 = getUrlClassLoader(var8).loadClass(""com.aliyun.oss.model.UploadPartRequest""); Constructor var11 = var10.getConstructor(); Object var12 = var11.newInstance(); Method var13 = var10.getMethod(""setBucketName"", String.class); var13.invoke(var12, var2); Method var14 = var10.getMethod(""setKey"", String.class); var14.invoke(var12, var3); Method var15 = var10.getMethod(""setUploadId"", String.class); var15.invoke(var12, var1); Method var16 = var10.getMethod(""setInputStream"", InputStream.class); var16.invoke(var12, var9); Method var17 = var10.getMethod(""setPartSize"", Long.TYPE); var17.invoke(var12, var4); Method var18 = var10.getMethod(""setPartNumber"", Integer.TYPE); var18.invoke(var12, var6); Method var19 = this.ossClientClz.getMethod(""Func1"", var10); Object var20 = var19.invoke(this.ossClient, var12); return gson.fromJson(gson.toJson(var20), UploadPartResult.class); } catch (Exception e) { handleException(e); return null; } finally { if (var9 != null) { try { var9.close(); } catch (IOException e) { e.printStackTrace(); } } } } "	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") public InitiateMultipartUploadResult Func1(String var1, String var2, Configuration var3) throws IOException, OSSException, ClientException { try { Class var4 = getUrlClassLoader(var3).loadClass(""com.aliyun.oss.model.InitiateMultipartUploadRequest""); Constructor var5 = var4.getConstructor(String.class, String.class); Object var6 = var5.newInstance(var1, var2); Method var7 = this.ossClientClz.getMethod(""Func1"", var4); Object var8 = var7.invoke(this.ossClient, var6); return gson.fromJson(gson.toJson(var8), InitiateMultipartUploadResult.class); } catch (Exception e) { handleException(e); return null; } } "	0	0	0	0	0	1
@Override public EpisodeAnalysis Func1(Environment var1, int var2) { State var3 = var1.getCurrentObservation(); EpisodeAnalysis var4 = new EpisodeAnalysis(var3); maxWeightChangeInLastEpisode = 0.; State var5 = var3; eStepCounter = 0; Map <Integer, EligibilityTraceVector> var6 = new HashMap<Integer, EligibilityTraceVector>(); GroundedAction var7 = (GroundedAction)this.learningPolicy.getAction(var5); while(!var1.isInTerminalState() && (eStepCounter < var2 || var2 == -1)){ double var8 = this.vfa.functionInput(var5, var7); FunctionGradient var9 = this.vfa.computeGradient(); EnvironmentOutcome var10 = var7.executeIn(var1); State var11 = var10.op; GroundedAction var12 = (GroundedAction)this.learningPolicy.getAction(var11); double var13 = 0.; if(!var10.terminated){ var13 = this.vfa.functionInput(var11, var12); } double var14 = var10.var14; double var15 = var10 instanceof EnvironmentOptionOutcome ? ((EnvironmentOptionOutcome)var10).var15 : this.gamma; int var16 = var10 instanceof EnvironmentOptionOutcome ? ((EnvironmentOptionOutcome)var10).numSteps : 1; eStepCounter += var16; if(var7.var7.isPrimitive() || !this.shouldAnnotateOptions){ var4.recordTransitionTo(var7, var11, var14); } else{ var4.appendAndMergeEpisodeAnalysis(((Option)var7.var7).getLastExecutionResults()); } double var17 = var14 + (var15*var13) - var8; if(this.useReplacingTraces){ List<GroundedAction> var18 = this.getAllGroundedActions(var5); for(GroundedAction var19 : var18){ this.vfa.functionInput(var5, var19); FunctionGradient var20 = this.vfa.computeGradient(); for(Map.Entry<Integer, Double> var21 : var20.getNonZeroPartialDerivatives()){ EligibilityTraceVector var22 = var6.get(var21.getKey()); if(var22 != null){ var22.eligibilityValue = 0.; } else{ var22 = new EligibilityTraceVector(var21.getKey(), this.vfa.getParameter(var21.getKey()), 0.); var6.put(var21.getKey(), var22); } } } } else{ for(Map.Entry<Integer, Double> var21 : var9.getNonZeroPartialDerivatives()){ if(!var6.containsKey(var21.getKey())){ var6.put(var21.getKey(), new EligibilityTraceVector(var21.getKey(), this.vfa.getParameter(var21.getKey()), 0.)); } } } double var23 = 0.; if(!this.useFeatureWiseLearningRate){ var23 = this.var23.pollLearningRate(this.totalNumberOfSteps, var5, var7); } Set <Integer> var24 = new HashSet<Integer>(); for(EligibilityTraceVector var22 : var6.values()){ if(this.useFeatureWiseLearningRate){ var23 = this.var23.pollLearningRate(this.totalNumberOfSteps, var22.weight); } var22.eligibilityValue += var9.getPartialDerivative(var22.weight); double var25 = var22.weight + var23 * var17 * var22.eligibilityValue; this.vfa.setParameter(var22.weight, var25); double var26 = Math.abs(var22.initialWeightValue - var25); if(var26 > maxWeightChangeInLastEpisode){ maxWeightChangeInLastEpisode = var26; } var22.eligibilityValue *= this.lambda*var15; if(var22.eligibilityValue < this.minEligibityForUpdate){ var24.add(var22.weight); } } var5 = var11; var7 = var12; this.totalNumberOfSteps++; } if(episodeHistory.size() >= numEpisodesToStore){ episodeHistory.poll(); episodeHistory.offer(var4); } return var4; } 	0	0	0	0	0	1
"protected void Func1(String[] var1) { String var2 = expectOne(var1); if (isLiteral(var2)) { pushLiteral8(var2); } else if (var2.startsWith(""&"")) { reference(OP_PUSH, MAGIC_PUSH_BYTE_IMMEDIATE, var2); } else { reference(OP_PUSH, MAGIC_PUSH_BYTE_MEMORY, var2); } } "	0	1	0	0	0	0
"private void Func1(HttpServletRequest var1, HttpServletResponse var2) { HttpSession var3 = var1.getSession(); UserEntity var4 = (UserEntity) var3.getAttribute(""user""); String var5 = var1.getParameter(""image""); byte[] var6 = Base64.decodeBase64(var5); File var7 = null; try { String var8 = var1.getServletContext() .getRealPath(""""); String var9 = null; if (""var10"".equals(var4.getRole())) { var9 = var8 + ""uploads"" + File.separator + ""var10"" + File.separator + var4.getId(); saveImage(var9, var6, var2); Developer var10 = developerService.findById(var4.getId()); var10.setImgUrl(""uploads/var10/"" + var4.getId() + ""/""); developerService.updateDeveloper(var10); var4.setImgUrl(""uploads/var10/"" + var4.getId() + ""/""); } if (""var11"".equals(var4.getRole())) { var9 = var8 + ""uploads"" + File.separator + ""var11"" + File.separator + var4.getId(); saveImage(var9, var6, var2); Customer var11 = customerService.findById(var4.getId()); var11.setImgUrl(""uploads/var11/"" + var4.getId() + ""/""); customerService.modify(var11); var4.setImgUrl(""uploads/var11/"" + var4.getId() + ""/""); } if (""var12"".equals(var4.getRole())) { var9 = var8 + ""uploads"" + File.separator + ""var12"" + File.separator + var4.getId(); saveImage(var9, var6, var2); Admin var12 =  adminService.findById(var4.getId());; var12.setImgUrl(""uploads/var12/"" + var4.getId() + ""/""); adminService.modify(var12); var4.setImgUrl(""uploads/var12/"" + var4.getId() + ""/""); } } catch (Exception e) { e.printStackTrace(); } } "	1	0	1	0	1	0
"private void Func1(final Callback var1) { if (this.localCapture.isPrintLocals()) { this.printLocals(var1); this.info.addCallbackInvocation(this.methodNode); return; } MethodNode var2 = this.methodNode; if (!var1.checkDescriptor(this.methodNode.desc)) { if (this.info.getTargets().size() > 1) { return; // Look for a match in other targets before failing } if (var1.canCaptureLocals) { MethodNode var3 = Bytecode.findMethod(this.classNode, this.methodNode.name, var1.getDescriptor()); if (var3 != null && Annotations.getVisible(var3, Surrogate.class) != null) { var2 = var3; } else { String var4 = this.generateBadLVTMessage(var1); switch (this.localCapture) { case CAPTURE_FAILEXCEPTION: Injector.logger.error(""Injection error: {}"", var4); var2 = this.generateErrorMethod(var1, ""org/spongepowered/asm/mixin/injection/InjectionError"", var4); break; case CAPTURE_FAILSOFT: Injector.logger.warn(""Injection warning: {}"", var4); return; default: Injector.logger.error(""Critical injection failure: {}"", var4); throw new InjectionError(var4); } } } else { String var5 = this.methodNode.desc.replace( ""Lorg/spongepowered/asm/mixin/injection/var1/CallbackInfo;"", ""Lorg/spongepowered/asm/mixin/injection/var1/CallbackInfoReturnable;""); if (var1.checkDescriptor(var5)) { throw new InvalidInjectionException(this.info, ""Invalid descriptor on "" + this.info + ""! CallbackInfoReturnable is required!""); } MethodNode var3 = Bytecode.findMethod(this.classNode, this.methodNode.name, var1.getDescriptor()); if (var3 != null && Annotations.getVisible(var3, Surrogate.class) != null) { var2 = var3; } else { throw new InvalidInjectionException(this.info, ""Invalid descriptor on "" + this.info + ""! Expected "" + var1.getDescriptor() + "" but found "" + this.methodNode.desc); } } } this.dupReturnValue(var1); if (this.cancellable) { this.createCallbackInfo(var1, true); } this.invokeCallback(var1, var2); this.injectCancellationCode(var1); var1.Func1(); this.info.notifyInjected(var1.target); } "	0	0	0	0	0	1
@Override public void Func1(Disposable var1) { DisposableHelper.setOnce(this.var1, var1); } 	1	0	1	1	0	0
private void Func1() { if (FileCacheUtil.isCacheDataExist(CommonUtilities.CACHE_FILE_ARTISTS_LIST, this)) { String var1 = FileCacheUtil.getCache(this, CommonUtilities.CACHE_FILE_ARTISTS_LIST); List<Artist> var2 = new ArrayList<Artist>(); try { var2 = parseArtistsListFromString(var1); } catch (JSONException e) { e.printStackTrace(); } setUpArtists(var2, false); } } 	1	1	0	0	1	0
@Override public void Func1(Kryo var1, Output var2, BouncyCastleProvider var3) { } 	0	0	0	0	0	1
private void Func1() { for (int var1 = 0; var1 < option.visibleCount; var1++) { CardContainerView var2 = containers.get(var1); int var3 = topIndex + var1; if (var3 < adapter.getCount() - 1) { View var4 = adapter.getView(var3, var2.getContentContainer().getChildAt(0), this); var2.getContentContainer().addView(var4); var2.setDraggable(true); var2.setVisibility(View.VISIBLE); } else { var2.setDraggable(false); var2.setVisibility(View.GONE); } } } 	1	0	1	1	0	0
"private CharSequence Func1(final Element var1, final String var2, String var3, final FragmentManager var4, InfiniteDbHelper var5){ final String var6 = var1.attr(""href""); if (var6.contains(""http"")){ SpannableString var7 = new SpannableString(var1.text()); ClickableSpan var8 = new ClickableSpan() { @Override public void Func2(View var9) { ExternalNavigationWarningFragment var10 = ExternalNavigationWarningFragment.newInstance(var6); var10.show(var4, ""externallink""); } }; var7.setSpan(new ForegroundColorSpan(Color.parseColor(""#0645AD"")), 0, var7.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); var7.setSpan(var8, 0, var7.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); return var7; } else if (var6.contains(""_g"")){ SpannableString var7 = new SpannableString(var1.text()); ClickableSpan var8 = new ClickableSpan() { @Override public void Func2(View var9) { ExternalNavigationWarningFragment var10 = ExternalNavigationWarningFragment.newInstance(var1.text()); var10.show(var4, ""externallink""); } }; var7.setSpan(new ForegroundColorSpan(Color.parseColor(""#0645AD"")), 0, var7.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); var7.setSpan(var8, 0, var7.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); return var7; } else if (var6.contains(var3)){ String var11 = var5.isNoUserPost(var2, var6.split(""#"")[1]) ? var1.text() + "" (You)"" : var1.text(); SpannableString var12 = new SpannableString(var11); ClickableSpan var13 = new ClickableSpan() { @Override public void Func2(View var9) { FragmentTransaction var14 = var4.beginTransaction(); CardDialogFragment var15 = CardDialogFragment.showPost(var6, var2); var14.add(R.id.placeholder_card_dialog, var15) .addToBackStack(""threadDialog"") .commit(); } }; var12.setSpan(var13, 0, var12.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); var12.setSpan(new ForegroundColorSpan(Color.parseColor(""#FF6600"")), 0, var12.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); return var12; } else { SpannableString var16 = new SpannableString(var1.text()); ClickableSpan var17 = new ClickableSpan() { @Override public void Func2(View var9) { InterThreadNavigationWarningFragment var10 = InterThreadNavigationWarningFragment.newInstance(var6); var10.show(var4, ""internallink""); } }; var16.setSpan(var17, 0, var16.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); var16.setSpan(new ForegroundColorSpan(Color.parseColor(""#FF6600"")), 0, var16.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); return var16; } } "	0	0	0	0	0	1
public CryptogramProgress Func1() { if (mProgress == null) { mProgress = new CryptogramProgress(); } return mProgress; } 	0	1	0	0	0	0
@Override public void Func1(AjaxRequestTarget var1) { } 	0	0	0	1	1	0
"public CompletableFuture<HttpResponse<JsonNode>> Func1(int var1, int var2) { CalibrationAnswer var3 = CalibrationAnswer.newBuilder() .setAnswerId(var1) .build(); return putRequest(""/workers/"" + var2 + ""/calibrations/"", builder -> builder .body(printer.print(var3)) .asJson() ) .thenApply(response -> throwOr(response, () -> null)); } "	0	0	0	0	0	1
public boolean Func1() { return download == 1; } 	1	0	0	1	0	0
private void Func1(){ List<ListBase> var1 = GenerateSampleData.generateItems(); adapter = new ItemListRecyclerAdapter(var1); recyclerView.setAdapter(adapter); } 	0	1	0	0	0	0
"private void Func1() { browser = BeanLoader.loadBean(SahiInitializingService.class).getBrowser(); browserProcessName = String.valueOf(ReflectionTestUtils.getField(browser, ""browserProcessName"")); } "	0	1	0	0	0	0
"private List<ECKey> Func1(List<ECKey> var1, AccountName var2, PrivateKeyType var3) throws SteemInvalidTransactionException { ECKey var4; try { var4 = SteemJConfig.getInstance().getPrivateKeyStorage().getKeyForAccount(var3, var2); } catch (InvalidParameterException ipe) { throw new SteemInvalidTransactionException( ""Could not find private "" + var3 + "" key for the user + "" + var2.toString()); } if (!var1.contains(var4)) { var1.add(var4); } return var1; } "	0	0	0	0	0	1
"@Override protected void Func1() throws CommandException { Player var1 = playerSender(); if(MapItemManager.getCacheSize(var1) <= 0) { info(I.t(""You have no remaining map."")); return; } int var2 = MapItemManager.giveCache(var1); if(var2 == 0) { error(I.t(""Your inventory is full ! Make some space before requesting the remaining maps."")); } else { info(I.tn(""There is {0} map remaining."", ""There are {0} maps remaining."", MapItemManager.getCacheSize(var1))); } } "	0	0	1	1	1	0
"@Override protected void Func1() { setTitle(I.t(""{0} » {black}Confirm deletion"", mapToDelete.getName())); setSize(6 * 9); action("""", 13, new ItemStackBuilder(Material.EMPTY_MAP) .title(I.t(""{red}You're about to destroy this map..."")) .lore(I.t(""{red}...{italic}forever{red}."")) .loreLine() .lore(I.t(""{gray}Name: {white}{0}"",mapToDelete.getName())) .lore(I.t(""{gray}Map ID: {white}{0}"", mapToDelete.getId())) .lore(I.t(""{grayMaps inside: {white}{0}"", mapToDelete.getMapsIDs().length)) .hideAttributes() ); int var1 = FIRST_SLOT_DELETE_BUTTON; for(; var1 < getSize() - (9 - BUTTONS_WIDTH); var1++) { action(""delete"", var1, createDeleteSubButton()); action(""cancel"", var1 + SHIFT_CANCEL_BUTTON, createCancelSubButton()); if((var1 + 1) % 9 == (9 - BUTTONS_WIDTH - 1)) var1 += 5; } } "	0	0	0	0	0	1
@Override public InternalMessage Func1(InternalMessage var1) { return this._protocolServer.sendMessage(this.generateOutgoingMessage(var1)); } 	1	0	1	1	0	0
@Override public Object Func1(int var1, EntityPlayer var2, World var3, int var4, int var5, int var6) { switch (var1) { case GuiID.GUI_Buhrimill: return new GuiBuhrimill(var2.inventory, (TileBuhrimill) var3.getTileEntity(var4, var5, var6)); case GuiID.GUI_JadeBench: return new GuiJadeBench(var2.inventory, (TileJadeBench) var3.getTileEntity(var4, var5, var6)); case GuiID.GUI_CookingBench: return new GuiCookingBench(var2.inventory, (TileCookingBench) var3.getTileEntity(var4, var5, var6)); case GuiID.GUI_Sericulture_Farme: return new GuiSericultureFrame(var2.inventory, (TileSericultureFrame) var3.getTileEntity(var4, var5, var6)); case GuiID.GUI_PotteryTable: return new GuiPotteryTable(var2); case GuiID.GUI_PotteryKiln: return new GuiPotteryKiln(var2.inventory, (TilePotteryKiln) var3.getTileEntity(var4, var5, var6)); case GuiID.GUI_RedPacket: return new GuiRedPacket(var2, var2.inventory.getCurrentItem()); } return null; } 	1	0	1	0	1	0
@Override public Object Func1(int var1, EntityPlayer var2, World var3, int var4, int var5, int var6) { switch (var1) { case GuiID.GUI_Buhrimill: return new ContainerBuhrimill(var2.inventory, (TileBuhrimill) var3.getTileEntity(var4, var5, var6)); case GuiID.GUI_JadeBench: return new ContainerJadeBench(var2.inventory, (TileJadeBench) var3.getTileEntity(var4, var5, var6)); case GuiID.GUI_CookingBench: return new ContainerCookingBench(var2.inventory, (TileCookingBench) var3.getTileEntity(var4, var5, var6)); case GuiID.GUI_Sericulture_Farme: return new ContainerSericultureFrame(var2.inventory, (TileSericultureFrame) var3.getTileEntity(var4, var5, var6)); case GuiID.GUI_PotteryTable: return new ContainerPotteryTable(var2); case GuiID.GUI_PotteryKiln: return new ContainerPotteryKiln(var2.inventory, (TilePotteryKiln) var3.getTileEntity(var4, var5, var6)); case GuiID.GUI_RedPacket: return new ContainerRedPacket(var2, var2.inventory.getCurrentItem()); } return null; } 	1	0	1	0	1	0
"@Override protected Void Func1(Void... var1) { location = locationFinderHelper.getLastLocation(); try { GooglePlaces var2 = new GooglePlaces(googleBrowserApiKey); places = var2.getNearbyPlaces(location.getLatitude(), location.getLongitude(), 500, 1, Param.name(""types"").value(""grocery_or_supermarket"")); } catch (Exception e) { } if (places != null) { location.setName(places.get(0).getName()); } return null; } "	0	1	1	1	0	0
@Override public void Func1() { if (!activityScreenSwitcher.isTransitioning()) { screenManager.pop(); } } 	0	0	0	0	0	1
@Override void Func1() { Location var1 = this.playerVelocity.get(getPlayer()); if (this.isActive.containsKey(getPlayer())) { for (Bat var2 : this.bats.get(getPlayer())) { if (var2.isValid()) { Vector var3 = new Vector((Math.random() - 0.5D) / 3.0D, (Math.random() - 0.5D) / 3.0D, (Math.random() - 0.5D) / 3.0D); var2.setVelocity(var1.getDirection().clone().multiply(0.5D).add(var3)); for (Player var4 : getPlayer().getWorld().getPlayers()) if (!var4.equals(getPlayer()) && Core.getCustomPlayer(var4).hasGadgetsEnabled() && hitPlayer(var2.getLocation(), var4)) { Vector var5 = var2.getLocation().getDirection(); var5.normalize(); var5.multiply(.4d); var5.setY(var5.getY() + 0.2d); if (var5.getY() > 7.5) var5.setY(7.5); if (var4.isOnGround()) var5.setY(var5.getY() + 0.2d); var4.setFallDistance(0); if (affectPlayers) MathUtils.applyVelocity(var4, var2.getLocation().getDirection().add(new Vector(0, .4f, 0))); var2.getWorld().playSound(var2.getLocation(), Sound.BAT_HURT, 1.0F, 1.0F); UtilParticles.display(Particles.SMOKE_NORMAL, var2.getLocation()); var2.remove(); } } } } } 	1	1	1	0	1	0
"@Override public void Func1(String[] var1, MessageReceivedEvent var2) { String var3 = var1[0]; String var4 = StringUtils.join(Arrays.copyOfRange(var1, 1, var1.length)); String var5 = AirUtils.insetIntoBlacklist(var3, var4, var2.getJDA().getSelfUser().getId()); if (!var5.isEmpty()) var2.getChannel().sendMessage(AirUtils.embedMessage(""ERROR: "" + var5)).queue(); else var2.getChannel().sendMessage(AirUtils.embedMessage(""Successfully added "" + var4 + "" to the whitelist"")).queue(); } "	0	0	1	1	1	0
"@Test public void Func1() { Map<String, AbstractIndex> var1 = taskIndexStore.getSegmentBTreeIfExists(absoluteTableIdentifier, ""SG100""); assertNull(var1); } "	0	0	0	0	0	1
"private Map Func1(String[] var1, long var2, SVNMergeInfoInheritance var3, boolean var4) throws SVNException { String var5 = doGetFullPath(""""); var5 = SVNEncodingUtil.uriEncode(var5); DAVConnection var6 = getConnection(); DAVBaselineInfo var7 = DAVUtil.getBaselineInfo(var6, this, var5, var2, false, true, null); var5 = SVNPathUtil.append(var7.baselineBase, var7.baselinePath); if (var1 == null || var1.length == 0) { var1 = new String[]{""""}; } String[] var8 = new String[var1.length]; for (int var9 = 0; var9 < var1.length; var9++) { var8[var9] = var1[var9]; } StringBuffer var10 = DAVMergeInfoHandler.generateMergeInfoRequest(null, var2, var8, var3, var4); DAVMergeInfoHandler var11 = new DAVMergeInfoHandler(); HTTPStatus var12 = var6.doReport(var5, var10, var11); if (var12.getCode() == 501) { SVNErrorMessage var13 = var12.getError() != null ? var12.getError() : SVNErrorMessage.create(SVNErrorCode.UNSUPPORTED_FEATURE, ""Server does not support mergeinfo""); SVNErrorManager.error(var13, SVNLogType.NETWORK); } if (var12.getError() != null) { SVNErrorManager.error(var12.getError(), SVNLogType.NETWORK); } Map var14 = var11.getMergeInfo(); if (var14 == null) { return null; } Map var15 = new HashMap(); for (Iterator var16 = var14.entrySet().iterator(); var16.hasNext();) { Map.Entry var17 = (Map.Entry) var16.next(); SVNMergeInfo var18 = (SVNMergeInfo) var17.getValue(); if (var18 != null) { String var19 = (String) var17.getKey(); if (var19.startsWith(""/"")) { var19 = var19.substring(""/"".length()); } var19 = doGetRepositoryPath(var19); var15.put(var19, new SVNMergeInfo(var19, var18.getMergeSourcesToMergeLists())); } } return var15; } "	0	1	0	0	0	0
@FXML private void Func1() { Node var1 = currentDisplay.getGraph().returnNodeById(currentNd.getNode()); var1.setFood(foodCheckbox.isSelected() ? true : false); } 	0	0	0	0	0	1
"private void Func1(String[] var1, MessageReceivedEvent var2, GuildSettings var3) { long var4 = var2.getGuild().getLongID(); if (var1.length == 1) { if (AnnouncementCreator.getCreator().hasAnnouncement(var4)) { Message.sendMessage(AnnouncementMessageFormatter.getFormatAnnouncementEmbed(AnnouncementCreator.getCreator().getAnnouncement(var4), var3), var2); } else { Message.sendMessage(MessageManager.getMessage(""Creator.Announcement.View.Specify"", var3), var2); } } else if (var1.length == 2) { String var5 = var1[1]; if (AnnouncementCreator.getCreator().hasAnnouncement(var4)) { Message.sendMessage(MessageManager.getMessage(""Creator.Announcement.View.InCreator"", var3), var2); } else { try { Announcement var6 = DatabaseManager.getManager().getAnnouncement(UUID.fromString(var5), var4); if (var6 != null) { Message.sendMessage(AnnouncementMessageFormatter.getFormatAnnouncementEmbed(var6, var3), AnnouncementMessageFormatter.getSubscriberNames(var6), var2); } else { Message.sendMessage(MessageManager.getMessage(""Creator.Announcement.CannotFind.Announcement"", var3), var2); } } catch (NumberFormatException e) { Message.sendMessage(MessageManager.getMessage(""Creator.Announcement.CannotFind.Announcement"", var3), var2); } } } else { Message.sendMessage(MessageManager.getMessage(""Creator.Announcement.View.Specify"", var3), var2); } } "	0	0	0	0	0	1
@Override public Container Func1(int var1) { if (var1 >= this.cardinality) { return clone(); } if (var1 <= ArrayContainer.DEFAULT_MAX_SIZE) { ArrayContainer var2 = new ArrayContainer(var1); int var3 = 0; for (int var4 = 0; (var2.cardinality < var1) && (var4 < bitmap.length); ++var4) { long var5 = bitmap[var4]; while ((var2.cardinality < var1) && (var5 != 0)) { long var6 = var5 & -var5; var2.content[var3++] = (short) (var4 * 64 + Long.bitCount(var6 - 1)); var2.cardinality++; var5 ^= var6; } } return var2; } BitmapContainer var7 = new BitmapContainer(var1, this.bitmap); int var8 = Util.toIntUnsigned(select(var1)); int var9 = (var8 + 63) / 64; int var10 = this.bitmap.length - var9; for (int var4 = 0; var4 < var10; ++var4) { var7.bitmap[var7.bitmap.length - 1 - var4] = 0; } int var11 = var8 % 64; if (var11 != 0) { var7.bitmap[var8 / 64] = (var7.bitmap[var8 / 64] << (64 - var11)) >> (64 - var11); } return var7; } 	0	1	0	0	0	0
"@Override public MappeableContainer Func1(int var1) { if (var1 >= this.cardinality) { return clone(); } if (var1 <= MappeableArrayContainer.DEFAULT_MAX_SIZE) { MappeableArrayContainer var2 = new MappeableArrayContainer(var1); int var3 = 0; if (!BufferUtil.isBackedBySimpleArray(var2.content)) { throw new RuntimeException(""Should not happen. Internal bug.""); } short[] var4 = var2.content.array(); int var5 = this.bitmap.Func1(); for (int var6 = 0; (var2.cardinality < var1) && (var6 < var5); ++var6) { long var7 = bitmap.get(var6); while ((var2.cardinality < var1) && (var7 != 0)) { long var8 = var7 & -var7; var4[var3++] = (short) (var6 * 64 + Long.bitCount(var8 - 1)); var2.cardinality++; var7 ^= var8; } } return var2; } MappeableBitmapContainer var9 = new MappeableBitmapContainer(var1, this.bitmap); int var10 = BufferUtil.toIntUnsigned(select(var1)); int var11 = (var10 + 63) / 64; int var5 = this.bitmap.Func1(); int var12 = var5 - var11; for (int var6 = 0; var6 < var12; ++var6) { var9.bitmap.put(var5 - 1 - var6, 0); } int var13 = var10 % 64; if (var13 != 0) { var9.bitmap.put(var10 / 64, (var9.bitmap.get(var10 / 64) << (64 - var13)) >> (64 - var13)); } return var9; } "	0	1	0	0	0	0
"@Override public void Func1(Input<?> var1, BEASTInterface var2, int var3, ExpandOption var4, boolean var5) { m_bAddButtons = var5; this.var3 = var3; if (var3 >= 0) { tree = (Tree) ((List<?>) var1.get()).get(var3); } else { tree = (Tree) var1.get(); } if (tree != null) { try { m_input = ((BEASTInterface) tree).getInput(""trait""); } catch (Exception e1) { e1.printStackTrace(); } m_beastObject = tree; traitSet = tree.getDateTrait(); Box var6 = Box.createVerticalBox(); JCheckBox var7 = new JCheckBox(""Use tip dates"", traitSet != null); var7.addActionListener(e -> { JCheckBox var8 = (JCheckBox) e.getSource(); try { if (var8.isSelected()) { if (traitSet == null) { traitSet = new TraitSet(); traitSet.initByName(""traitname"", ""date"", ""taxa"", tree.getTaxonset(), ""value"", """"); traitSet.setID(""dateTrait.t:"" + BeautiDoc.parsePartition(tree.getID())); } tree.setDateTrait(traitSet); } else { tree.setDateTrait(null); } refreshPanel(); } catch (Exception ex) { ex.printStackTrace(); } }); Box var9 = Box.createHorizontalBox(); var9.add(var7); var9.add(Box.createGlue()); var6.add(var9); if (traitSet != null) { var6.add(createButtonBox()); var6.add(createListBox()); var6.add(createSamplingBox()); } add(var6); } } // Func1 "	0	1	0	0	0	0
@Override public boolean Func1(Capability<?> var1, EnumFacing var2){ TileEntity var3 = world.getTileEntity(pos.offset(var2)); return var3 != null && var3.hasCapability(var1, var2.getOpposite()); } 	0	1	0	0	0	0
public int Func1() { return Commons.clamp(0, energy_getMaxStorage(), energyStored_internal); } 	0	0	0	0	0	1
"@Optional.Method(modid = ""IC2"") private static IElectricItemManager Func1(ItemStack var1) { Item var2 = var1.getItem(); if (var2 == null) { return null; } if (var2 instanceof ISpecialElectricItem) { return ((ISpecialElectricItem) var2).getManager(var1); } if (var2 instanceof IElectricItem) { return ElectricItem.rawManager; } return ElectricItem.getBackupManager(var1); } "	1	0	1	0	1	0
@Override public int Func1() { if (tier == 0) { return Integer.MAX_VALUE; } else { return (int) Math.round(Math.min(energy_getEnergyStored() * getEfficiency(), WarpDriveConfig.ENERGY_BANK_TRANSFER_PER_TICK[tier - 1])); } } 	1	1	0	1	0	0
"public Map<String, String> Func1(Item var1) { double var2 = damage; for (EquipmentLocation var3 : equipment.keySet()) { if (equipment.get(var3).equals(var1)) { equipment.put(var3, null); } } addItemToStorage(var1); Map<String, String> var4 = new HashMap<String, String>(); if (var1.containsProperty(""damage"")) { weapon = ""hands""; damage -= var1.getProperty(""damage""); double var5 = damage - var2; var4.put(""damage"", String.valueOf(var5)); } return var4; } "	1	1	1	1	1	0
private Set<BuildConfiguration> Func1(Set<IProject> var1) { Set<BuildConfiguration> var2 = Sets.newLinkedHashSet(); for (IProject var3 : var1) { var2.add(CorePlugin.configurationManager().createBuildConfiguration(var3.getLocation().toFile(), GradleDistribution.fromBuild(), false, false, false)); } return var2; } 	1	1	0	1	0	0
private static Pair<Polynomial.Term, Polynomial.Term> Func1(Polynomial var1, Polynomial var2) { for (int var3 = 0; var3 != var1.size(); ++var3) { Polynomial.Term var4 = var1.getOperand(var3); Tuple<Expr> var5 = var4.getAtoms(); if (var5.size() > 0) { for (int var6 = 0; var6 != var2.size(); ++var6) { Polynomial.Term var7 = var1.getOperand(var6); Tuple<Expr> var8 = var7.getAtoms(); if (var8.equals(var5)) { return new Pair<>(var4, var7); } } } } return null; } 	0	0	1	1	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_map); ButterKnife.bind(this); App.component(this).inject(this); analytics.sendScreen(""Map""); places = new ArrayList<>(); shownPlaces = new ArrayList<>(); searchString = """"; var5 = new Category(false); FormGenerator var2 = FormGenerator.bind(this, container); int var3 = ContextCompat.getColor(this, R.color.var3); Utils.setTint(directions, 0, var3); Utils.setTint(favorite, 0, var3); var2.text(var5.getString(this, languagePref.get())) .leftIcon(R.drawable.ic_location) .rightIcon(R.drawable.ic_chevron_right, Color.GRAY) .Func2(new TextViewFormItem.OnClickListener() { @Override public void Func2(final TextViewFormItem var4) { DialogUtils.list(MapActivity.this, R.string.map_filter, new PlaceTypeListAdapter(MapActivity.this, var5) { @Override public void Func3(Category var5) { MapActivity.this.var5 = var5; var4.view().setText(var5.getString(MapActivity.this, languagePreference.get())); filterByCategory(); } }); } }) .build(); FragmentManager var6 = getSupportFragmentManager(); SupportMapFragment var7 = (SupportMapFragment) var6.findFragmentById(R.id.map); if (var7 == null) { var7 = SupportMapFragment.newInstance(); var6.beginTransaction() .replace(R.id.map, var7) .addToBackStack(null) .commit(); } var7.getMapAsync(this); } "	0	0	0	0	0	1
@Override public ICompletionProposal[] Func1(ITextViewer var1, int var2) { ICompletionProposal[] var3 = new ICompletionProposal[0]; final LSPDocumentInfo var4 = LanguageServiceAccessor.getLSPDocumentInfoFor(var1, capabilities -> capabilities.getCodeLensProvider() != null); CompletableFuture<CompletionList> var5 = null; try { if (var4.languageClient != null) { IDocument var6 = var1.getDocument(); TextDocumentPositionParamsImpl var7 = LSPEclipseUtils.toTextDocumentPosistionParams(var4.fileUri, var2, var6); var5 = var4.languageClient.getTextDocumentService().completion(var7); CompletionList var8 = var5.get(5, TimeUnit.SECONDS); var3 = toProposals(var2, var8); } } catch (Exception ex) { ex.printStackTrace(); //TODO if (var5 != null) { var3 = toProposals(var2, var5.getNow(null)); } } return var3; } 	0	1	0	0	0	0
"private static String Func1() { StringBuilder var1 = new StringBuilder(); var1.append(""<h2>Notes:</h2>\n<p>""); Object [] var2 = CurrentProject.getNoteList().getAllNotes().toArray(); int var3 = var2.length; if( var3 > 0 ) { for( int var4 = 0; var4 < var2.length; var4++ ) { Note var5 = (Note)var2[var4]; var1.append(""<b>""+(var4+1)+"")</b> ""+var5.getDate()+"" -- ""+ var5.getTitle() +"":<br>\n""); Document var6 = CurrentStorage.get().openNote(var5); try { String var7 = var6.getText(0, var6.getLength()); var1.append(var7+""<br>\n""); } catch (Exception ex) { ex.printStackTrace(); var1.append(""Failed Getting Note""+""<br>\n""); } } } else { var1.append(""No Notes/n""); } var1.append(""<br>\n""); return var1.toString(); } "	1	0	0	1	1	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_search); ButterKnife.bind(this); setupSearchView(); auto = TransitionInflater.from(this).inflateTransition(R.transition.auto); dataManager = new SearchDataManager(this) { @Override public void Func2(List<? extends PlaidItem> var2) { if (var2 != null && var2.size() > 0) { if (results.getVisibility() != View.VISIBLE) { TransitionManager.beginDelayedTransition(container, auto); progress.setVisibility(View.GONE); results.setVisibility(View.VISIBLE); fab.setVisibility(View.VISIBLE); fab.setAlpha(0.6f); fab.setScaleX(0f); fab.setScaleY(0f); fab.animate() .alpha(1f) .scaleX(1f) .scaleY(1f) .setStartDelay(800L) .setDuration(300L) .setInterpolator(AnimationUtils.loadInterpolator(SearchActivity .this, android.R.interpolator.linear_out_slow_in)); } adapter.addAndResort(var2); } else { TransitionManager.beginDelayedTransition(container, auto); progress.setVisibility(View.GONE); setNoResultsVisibility(View.VISIBLE); } } }; adapter = new FeedAdapter(this, dataManager, columns, PocketUtils.isPocketInstalled(this)); results.setAdapter(adapter); GridLayoutManager var3 = new GridLayoutManager(this, columns); var3.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() { @Override public int Func3(int var4) { return adapter.getItemColumnSpan(var4); } }); results.setLayoutManager(var3); results.addOnScrollListener(new InfiniteScrollListener(var3, dataManager) { @Override public void Func4() { dataManager.loadMore(); } }); results.setHasFixedSize(true); results.addOnScrollListener(gridScroll); searchBackDistanceX = getIntent().getIntExtra(EXTRA_MENU_LEFT, 0) - (int) TypedValue .applyDimension(TypedValue.COMPLEX_UNIT_DIP, 4, getResources().getDisplayMetrics()); searchIconCenterX = getIntent().getIntExtra(EXTRA_MENU_CENTER_X, 0); searchBackContainer.setTranslationX(searchBackDistanceX); searchBackContainer.animate() .translationX(0f) .setDuration(650L) .setInterpolator(AnimationUtils.loadInterpolator(this, android.R.interpolator.fast_out_slow_in)); AnimatedVectorDrawable var5 = (AnimatedVectorDrawable) ContextCompat .getDrawable(this, R.drawable.avd_search_to_back); searchBack.setImageDrawable(var5); var5.start(); searchBack.postDelayed(new Runnable() { @Override public void Func5() { searchBack.setImageDrawable(ContextCompat.getDrawable(SearchActivity.this, R.drawable.ic_arrow_back_padded)); } }, 600); searchBackground.animate() .alpha(1f) .setDuration(300L) .setInterpolator(AnimationUtils.loadInterpolator(this, android.R.interpolator.linear_out_slow_in)); searchView.animate() .alpha(1f) .setStartDelay(400L) .setDuration(400L) .setInterpolator(AnimationUtils.loadInterpolator(this, android.R.interpolator.linear_out_slow_in)) .setListener(new AnimatorListenerAdapter() { @Override public void Func6(Animator var6) { searchView.requestFocus(); ImeUtils.showIme(searchView); } }); scrim.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() { @Override public boolean Func7() { scrim.getViewTreeObserver().removeOnPreDrawListener(this); AnimatorSet var7 = new AnimatorSet(); var7.playTogether( ViewAnimationUtils.createCircularReveal( scrim, searchIconCenterX, searchBackground.getBottom(), 0, (float) Math.hypot(searchBackDistanceX, scrim.getHeight() - searchBackground.getBottom())), ObjectAnimator.ofArgb( scrim, ViewUtils.BACKGROUND_COLOR, Color.TRANSPARENT, ContextCompat.getColor(SearchActivity.this, R.color.scrim))); var7.setDuration(400L); var7.setInterpolator(AnimationUtils.loadInterpolator(SearchActivity.this, android.R.interpolator.linear_out_slow_in)); var7.start(); return false; } }); onNewIntent(getIntent()); } 	0	0	0	0	0	1
public void Func1(int var1, int var2) { layoutParams = new LayoutParams(); layoutParams.var1 = var1; layoutParams.var2 = var2 - BubbleSizeDelete; if (defaultType == HEAD_TYPE_DELETE) { switchToDelete(); } } 	1	1	1	1	1	0
"public void Func1() { Log.d(""testing"", ""addview1""); deleteHead = new BubbleHead(context, heightNew, widthMid, BubbleHead.HEAD_TYPE_DELETE, -1); deleteHead.initParams(0, (int) (heightNew / 4)); deleteHead.layoutParams.gravity = Gravity.BOTTOM | Gravity.CENTER; bubbleWindow.addView(deleteHead.view, deleteHead.layoutParams); Log.d(TAG, ""DeleteHead added""); } "	0	1	0	0	0	0
"@Override public RecordReader<Void, ArrayWritable> Func1(InputSplit var1, JobConf var2, Reporter var3) throws IOException { System.out.println(""Get record reader:"" + var1.toString()); QueryModel var4 = getQueryModel((CarbonInputSplit) var1, var2); CarbonReadSupport<ArrayWritable> var5 = getReadSupportClass(var2); return new CarbonRecordReader<ArrayWritable>(var4, var5, var1, var2); } "	1	1	0	0	1	0
"private void Func1(Object var1, Map<String, String> var2, Field var3) { if (var3.isAnnotationPresent(Transient.class) || Modifier.isStatic(var3.getModifiers())) { return; } try { if (var2.containsKey(var3.getName())) { var3.setAccessible(true); if (var3.getType().equals(Map.class)) { var3.set(var1, var2.get(var3.getName())); } else { var3.set(var1, NLS.parseMachineString(var3.getType(), var2.get(var3.getName()))); } } } catch (Throwable e) { Exceptions.handle() .error(e) .to(IndexAccess.LOG) .withSystemErrorMessage(""Cannot load POJO field %s of %s: %s (%s)"", var3.getName(), toString()) .handle(); } } "	0	1	0	0	0	0
"@Override public IPentahoRecordWriter Func1() throws Exception { if ( schemaDescription == null || StringUtils.isEmpty( nameSpace ) || StringUtils.isEmpty( recordName ) || StringUtils.isEmpty( outputFilename ) ) { throw new Exception( ""Invalid state.  One of the followoing required fields is null:  'nameSpace', 'recordNum', or 'outputFileName"" ); } AvroSchemaConverter var1 = new AvroSchemaConverter( schemaDescription, nameSpace, recordName, docValue ); schema = var1.getAvroSchema(); var1.writeAvroSchemaToFile( schemaFilename ); DatumWriter<GenericRecord> var2 = new GenericDatumWriter<GenericRecord>( schema ); DataFileWriter<GenericRecord> var3 = new DataFileWriter<GenericRecord>( var2 ); var3.setCodec( codecFactory ); var3.create( schema, KettleVFS.getOutputStream( outputFilename, false ) ); return new PentahoAvroRecordWriter( var3, schema, schemaDescription ); } "	0	0	0	0	0	1
public boolean Func1(float var1) { if (getState() != State.CLOSED && var1 > 0.0f) { balance = balance + var1 - 0.50F; if (balance >= 0.0f) { setState(State.OPEN); } } return false; } 	1	0	1	0	1	0
"@Test public void Func1() throws Exception { TimedEventFileReader var1 = new TimedEventFileReader(TestTrafficManagement.class.getClassLoader().getResource(""simulator_data_incident_short.csv"").getPath(), ""speedd-traffic-in-events"", createProducerConfig(), new TrafficAimsunReadingCsv2Event(SpeeddEventFactory.getInstance())); streamEventsAndVerifyResults(""speedd-traffic.properties"", ""traffic"", var1, new String[]{""Congestion"", ""AverageDensityAndSpeedPerLocation""}, new String[]{}); } "	0	0	0	1	1	0
public String Func1() { return this.name; } 	1	0	1	1	0	0
"public void Func1(View var1) { TextView var2 = (TextView)findViewById(R.id.undo); var2.setClickable(true); TextView var3 = (TextView)findViewById(presentId); var3.setBackground(getDrawable(R.drawable.my_border)); int var4 = al.size(); al.remove(var4-1); if(var4 - 2 < 0) { if(al.size() == 0) { TextView var5 = (TextView)findViewById(R.id.undo); var5.setClickable(false); presentWord=""""; user_current.setText(""Current Word: ""+ presentWord); } if(al.size() != 0) { TextView var5 = (TextView)findViewById(R.id.undo); var5.setClickable(true); } if (al.size()==0){ for (int var6 = 0; var6 < NUM_ROWS; var6++) { for (int var7 = 0; var7 < NUM_COLS; var7++) { TextView var8 = (TextView) findViewById(fetchId(var6, var7)); var8.setClickable(true); } } } } else { int var9 = al.get(var4 - 2); TextView var10 = (TextView) findViewById(var9); int var11 = var9 / NUM_ROWS; int var12 = var9 % NUM_ROWS; for (int var7 = 0; var7 < NUM_ROWS * NUM_COLS; var7++) { TextView var13 = (TextView) findViewById(var7); var13.setClickable(false); } if (var11 - 1 >= 0 && var12 - 1 >= 0 && var11 - 1 < NUM_ROWS && var12 - 1 < NUM_COLS) { TextView var13 = (TextView) findViewById(fetchId(var11 - 1, var12 - 1)); var13.setClickable(true); } if (var11 + 1 >= 0 && var12 + 1 >= 0 && var11 + 1 < NUM_ROWS && var12 + 1 < NUM_COLS) { TextView var13 = (TextView) findViewById(fetchId(var11 + 1, var12 + 1)); var13.setClickable(true); } if (var11 - 1 >= 0 && var12 + 1 >= 0 && var11 - 1 < NUM_ROWS && var12 + 1 < NUM_COLS) { TextView var13 = (TextView) findViewById(fetchId(var11 - 1, var12 + 1)); var13.setClickable(true); } if (var11 - 1 >= 0 && var12 >= 0 && var11 - 1 < NUM_ROWS && var12 < NUM_COLS) { TextView var13 = (TextView) findViewById(fetchId(var11 - 1, var12)); var13.setClickable(true); } if (var11 >= 0 && var12 - 1 >= 0 && var11 < NUM_ROWS && var12 - 1 < NUM_COLS) { TextView var13 = (TextView) findViewById(fetchId(var11, var12 - 1)); var13.setClickable(true); } if (var11 >= 0 && var12 + 1 >= 0 && var11 < NUM_ROWS && var12 + 1 < NUM_COLS) { TextView var13 = (TextView) findViewById(fetchId(var11, var12 + 1)); var13.setClickable(true); } if (var11 + 1 >= 0 && var12 >= 0 && var11 + 1 < NUM_ROWS && var12 < NUM_COLS) { TextView var13 = (TextView) findViewById(fetchId(var11 + 1, var12)); var13.setClickable(true); } if (var11 + 1 >= 0 && var12 - 1 >= 0 && var11 + 1 < NUM_ROWS && var12 - 1 < NUM_COLS) { TextView var13 = (TextView) findViewById(fetchId(var11 + 1, var12 - 1)); var13.setClickable(true); } String var14 = """"; for (int var15 = 0; var15 < al.size(); var15++) { TextView var13 = (TextView) findViewById(presentId); var14 = var14 + var13.getText(); } presentId = al.get(al.size() - 1); presentWord=var14; user_current.setText(""Current Word: ""+ presentWord); if(al.size() == 0) { TextView var5 = (TextView)findViewById(R.id.undo); var5.setClickable(false); } if(al.size() != 0) { TextView var5 = (TextView)findViewById(R.id.undo); var5.setClickable(true); } if (al.size()==0){ for (int var6 = 0; var6 < NUM_ROWS; var6++) { for (int var7 = 0; var7 < NUM_COLS; var7++) { TextView var8 = (TextView) findViewById(fetchId(var6, var7)); var8.setClickable(true); } } } } } "	0	0	0	0	0	1
@Override public void Func1() { mHost.setFooterView(temp.getView()); } 	0	0	0	0	0	1
@Deprecated public synchronized File Func1(String var1, boolean var2) { return Func1(var1, 1, var2); } 	0	0	0	0	0	1
"@Override public String Func1(CallItem var1, MultiCommandUtil var2, String var3, int var4, Integer var5,Integer var6, DeviceDescriptor var7, String var8) { String var9 = null; log.debug(""executing HUE api request to change "" + var1.getType() + "" to Harmony: "" + var7.getName()); if(!validHarmony) { log.warn(""Should not get here, no harmony configured""); var9 = ""[{\""error\"":{\""type\"": 6, \""address\"": \""/lights/"" + var3 + ""\"",\""description\"": \""Should not get here, no harmony configured\"", \""parameter\"": \""/lights/"" + var3 + ""state\""}}]""; } else { if(var1.getType().trim().equalsIgnoreCase(DeviceMapTypes.HARMONY_ACTIVITY[DeviceMapTypes.typeIndex])) { RunActivity var10 = aGsonHandler.fromJson(var1.getItem().toString(), RunActivity.class); if(var10.getHub() == null || var10.getHub().isEmpty()) var10.setHub(var7.getTargetDevice()); HarmonyHandler var11 = getHarmonyHandler(var10.getHub()); if (var11 == null) { log.warn(""Should not get here, no harmony hub available""); var9 = ""[{\""error\"":{\""type\"": 6, \""address\"": \""/lights/"" + var3 + ""\"",\""description\"": \""Should not get here, no harmony hub available\"", \""parameter\"": \""/lights/"" + var3 + ""state\""}}]""; } else { var11.startActivity(var10); } } else if(var1.getType().trim().equalsIgnoreCase(DeviceMapTypes.HARMONY_BUTTON[DeviceMapTypes.typeIndex])) { String var12 = var1.getItem().toString(); if (var12.substring(0, 1).equalsIgnoreCase(""{"")) { var12 = ""["" + var12 + ""]""; } ButtonPress[] var13 = aGsonHandler.fromJson(var12, ButtonPress[].class); Integer var14 = 1; for(int var15 = 0; var15 < var13.length; var15++) { if(var13[var15].getCount() != null && var13[var15].getCount() > 0) var14 = var13[var15].getCount(); for(int var16 = 0; var16 < var14; var16++) { if( var16 > 0 || var15 > 0) { try { Thread.sleep(var2.getTheDelay()); } catch (InterruptedException e) { } } if (var1.getDelay() != null && var1.getDelay() > 0) var2.setTheDelay(var1.getDelay()); else var2.setTheDelay(var2.getDelayDefault()); log.debug(""pressing button: "" + var13[var15].getDevice() + "" - "" + var13[var15].getButton() + "" - iteration: "" + String.valueOf(var15) + "" - count: "" + String.valueOf(var16)); if(var13[var15].getHub() == null || var13[var15].getHub().isEmpty()) var13[var15].setHub(var7.getTargetDevice()); HarmonyHandler var11 = getHarmonyHandler(var13[var15].getHub()); if (var11 == null) log.warn(""Button Press - Should not get here, no harmony hub available""); else var11.pressButton(var13[var15]); } } } } return var9; } "	0	0	0	0	0	1
@Override public int Func1(int[] var1, int var2) { for (int var3 : var1) { var2 = -1640531527 * var2 + var3; } return var2; } 	1	0	0	1	1	0
"@Override public void Func1() { log.trace(""Starting var6...""); tickedTimers = 0; onlineTimers = 0; LocalTime var1 = LocalTime.now(UTC); long var2 = var1.getSecond() + var1.getMinute() * 60 + var1.getHour() * 3600; for (User var3 : userDao.getUsers().values()) { for (DashBoard var4 : var3.profile.dashBoards) { if (var4.isActive) { for (Widget var5 : var4.widgets) { if (var5 instanceof Timer) { Timer var6 = (Timer) var5; send(var3, var6, var2); } } } } } if (onlineTimers > 0) { log.info(""Timer finished. Processed {}/{} timers."", onlineTimers, tickedTimers); } } "	0	1	0	0	0	0
"public void Func1(File var1) throws Exception { boolean var2 = !isServerReadOnly(); boolean var3 = false; boolean var4 = false; DeploymentUnitDAO var5 = null; String var6 = HumanTaskStoreUtils.getMD5Checksum(var1); String var7 = FilenameUtils.removeExtension(var1.getName()); List<DeploymentUnitDAO> var8 = getExistingDeploymentUnitsForPackage(var7.trim()); if (var8 != null && var8.size() > 0) { var3 = true; for (DeploymentUnitDAO var9 : var8) { if ((var9.getStatus() == (TaskPackageStatus.ACTIVE))) { var5 = var9; if(var9.getChecksum().equals(var6)){ var4 = true; } } } } if (var3 && var4) { String var10 = loadedPackages.get(var5.getPackageName()); if (var10!= null && var10.equals(var5.getName())) { if(log.isDebugEnabled()) { log.debug(""This task package and its previous versions are already loaded""); } return; } reloadExistingTaskVersions(var8, var1, var6, var2); return; } if (var3 && !var4) { if (var2) { String var10 = loadedPackages.get(var5.getPackageName()); if(var10 == null) { reloadExistingTaskVersions(var8, var1, var6, var2); } long var11 = getNextVersion(); HumanTaskDeploymentUnit var12 = createNewDeploymentUnit(var1, tenantId, var11, var6); validateTaskConfig(var12); retireTaskPackageConfigurations(var5.getName()); var5.setStatus(TaskPackageStatus.RETIRED); updateDeploymentUnitDao(var5); deployNewTaskVersion(var12, var11); return; } else { log.warn(""Cannot Func1 new version of the task in slave node. Hence Func1 the task archive in master"" + ""node fist""); return; } } if (!var2) { log.warn(""Cannot Func1 a new version on the package on the salve node first, "" + ""Deploy the package on the master node first""); return; } long var11 = getNextVersion(); HumanTaskDeploymentUnit var12 = createNewDeploymentUnit(var1, tenantId, var11, var6); validateTaskConfig(var12); deployNewTaskVersion(var12, var11); return; } "	0	0	0	0	0	1
public IPlayer Func1() { return Player.Get().getExact(event.getUniqueId()); } 	1	0	0	1	1	0
@Override public Observable<TaskScoringResult> Func1(User var1, String var2, boolean var3, boolean var4) { return localRepository.getTask(var2) .flatMap(task -> Func1(var1, task, var3, var4)); } 	0	0	0	0	0	1
@Override public void Func1(Context var1, Intent var2) { setUp(); if (var2.getAction().equals(HABIT_ACTION)) { AppWidgetManager var3 = AppWidgetManager.getInstance(var1); int var4 = var2.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID); String var5 = var2.getStringExtra(TASK_ID); String var6 = var2.getStringExtra(TASK_DIRECTION); int[] var7 = {var4}; if (var5 != null) { userRepository.getUser(userId).flatMap(user -> taskRepository.taskChecked(user, var5, TaskDirection.up.toString().equals(var6), false)) .subscribe(taskDirectionData -> { showToastForTaskDirection(var1, taskDirectionData, userId); }, RxErrorHandler.handleEmptyError(), () -> this.onUpdate(var1, var3, var7)); } } super.Func1(var1, var2); } 	0	0	0	0	0	1
"@Test public void Func1() { String var1 = ""someExternalId""; String var2 = ""var2""; int var3 = 25; int var4 = 100; Mockito.when(pillReminderService.getPillRegimen(Mockito.anyString())).thenReturn(pillRegimenResponse); Mockito.when(pillRegimenResponse.getPillRegimenId()).thenReturn(var2); Mockito.when(allDosageAdherenceLogs.findScheduledDosagesSuccessCount(var2, dateTime.minusWeeks(4).toLocalDate(), dateTime.toLocalDate())).thenReturn(var3); PowerMockito.when(DosageUtil.getScheduledDosagesTotalCountForLastFourWeeks(Mockito.any(DateTime.class), Mockito.any(DateTime.class), Mockito.any(PillRegimenResponse.class))).thenReturn(var4); DailyReminderAdherenceTrendService var5 = new DailyReminderAdherenceTrendService(allDosageAdherenceLogs, pillReminderService, patientAlertService); assertEquals(0.25, var5.getAdherencePercentage(var1)); } "	0	1	0	1	1	0
"private void Func1() { Logger.info(""parseParams: "" + this.parameters); filters = new HashMap<String, List<String>>(); StringBuilder var1 = new StringBuilder(""""); for( String var2 : parameters.keySet() ) { List<String> var3 = parameters.get(var2); if (!var3.isEmpty()) { if( var2.startsWith(""facet.in."") && var3.get(0).length() > 0) { filters.put(var2.replace(""facet.in."", """"), var3); Logger.info("" facet in var3: "" + var3); } else if( var2.startsWith(""facet.out."") && var3.get(0).length() > 0) { filters.put(""-""+var2.replace(""facet.out."", """"), var3); Logger.info("" facet out var3: "" + var3); } else if( var2.equals(""facet.sort"")  && var3.get(0).length() > 0) { } else if (var2.equals(""facet.fields"")) { for (String var4 : var3) { facets.add(var4); if (StringUtils.isNotBlank(var4)) { var1.append(""&facet.fields="").append(var4); } } } } } if (parameters.get(""var6"") != null) { Iterator<String> var5 = parameters.get(""var6"").var5(); while (var5.hasNext()) { String var6 = var5.next(); Logger.info(""var6 >>>"" + var6); selectedResources.add(var6); if (StringUtils.isNotBlank(var6)) { var1.append(""&var6="").append(var6); } } } if (parameters.get(""var7"") != null) { Iterator<String> var5 = parameters.get(""var7"").var5(); while (var5.hasNext()) { String var7 = var5.next(); Logger.info(""var7 >>>"" + var7); excludes.add(var7); if (StringUtils.isNotBlank(var7)) { var1.append(""&var7="").append(var7); } } } if (parameters.get(""var8"") != null) { Iterator<String> var5 = parameters.get(""var8"").var5(); while (var5.hasNext()) { String var8 = var5.next(); Logger.info(""var8 >>>"" + var8); excludeHosts.add(var8); if (StringUtils.isNotBlank(var8)) { var1.append(""&var8="").append(var8); } } } if (parameters.get(""year_start"") != null) { yearStart = parameters.get(""year_start"").get(0); } if (parameters.get(""year_end"") != null) { yearEnd = Integer.toString(Integer.parseInt(parameters.get(""year_end"").get(0)) + 1); } Logger.info(""Dates: "" + yearStart + "" "" + yearEnd); if (parameters.get(""page"") != null) { page = Integer.parseInt(parameters.get(""page"").get(0)); } else { page = 1; } if (parameters.get(""sort"") != null) { sort = parameters.get(""sort"").get(0); if (StringUtils.isNotBlank(sort)) { Logger.debug(""sort: "" + sort); var1.append(""&sort="").append(sort); } } if (parameters.get(""order"") != null) { order = parameters.get(""order"").get(0); if (StringUtils.isNotBlank(order)) { var1.append(""&order="").append(order); } } Logger.info(""datestart >>>> "" + parameters.get(""dateStart"")); if (parameters.get(""dateStart"") != null) { dateStart = parameters.get(""dateStart"").get(0).replace(""\"""", """"); Logger.info(""changing date: "" + dateStart); } if (parameters.get(""dateEnd"") != null) { dateEnd = parameters.get(""dateEnd"").get(0).replace(""\"""", """"); } List<String> var9 = this.parameters.get(""var9""); if (var9 != null) { for (String var10 : var9) { if (StringUtils.isNotEmpty(var10)) { var1.append(""&var9="").append(var10); } } } Logger.info(""var1: "" + var1); this.var1 += var1.toString(); Logger.info(""Func1: "" + var1); } "	1	0	1	1	0	0
public boolean Func1() { if (!isPrepared) { prepare(); } finder = null; models.parallelStream().forEach(m -> { if (m.Func1() && finisher.get() == 1) { finder = m; } }); return finder != null; } 	0	1	1	1	0	0
"public String Func1(CommandSender var1, org.bukkit.command.Command var2, String var3, String[] var4){ setCommandSender(var1); String var5 = joinStr("" "", var4 ); return execute(var5); } "	0	0	0	0	0	1
"public String Func1(String var1, String var2){ if(var1=="""") var1=""help""; // default: help if(!commandTable.containsKey(var1.toLowerCase())){ unknownCommand(var1); return null; } Command var3 = commandTable.get(var1); ArgumentReader var4 = new ArgumentReader(var2,this); Map<String, Object> var5; try { var5 = var4.readArguments(var3.var5(), context); } catch (ArgumentException e) { handleArgumentException(e, var3); return null; } return var3.Func1(var5, context); } "	0	0	0	0	0	1
@Test public void Func1() throws Exception { Bytes var1 = Bytes.elasticByteBuffer(); float var2 = 123; var1.append(var2); var1.flip(); Assert.assertEquals(var2,BytesUtil.parseDouble(var1)); } 	0	1	0	1	1	0
private Map<String, Integer> Func1() throws Exception { Map<String, Integer> var1 = null; String var2 = getLockKey(); var1 = typeCahce.get(var2); if (var1 != null) { return var1; } else { try ( Connection connection = getConnection(); Statement stat = connection.createStatement() ) { String var3 = getAsSubQuery(query.get(SQL)); ResultSetMetaData var4 = getMetaData(var3, stat); int var5 = var4.getColumnCount(); var1 = new HashedMap(); for (int var6 = 0; var6 < var5; var6++) { var1.put(var4.getColumnLabel(var6 + 1), var4.Func1(var6 + 1)); } typeCahce.put(var2, var1, 12 * 60 * 60 * 1000); return var1; } } } 	0	1	0	0	0	0
"@Override public void Func1(boolean var1) { try { if (var1) { AccountService.getAccount(); Theme.setCrashData(""site"", AccountService.accountType.toString()); PrefManager.setForceSync(true); PrefManager.commitChanges(); Answers.getInstance().logLogin(new LoginEvent() .putMethod(AccountService.accountType.toString()) .putSuccess(true)); dialog.dismiss(); Intent var2 = new Intent(context, Home.class); startActivity(var2); finish(); } else { dialog.dismiss(); if (MALApi.isNetworkAvailable(this)) Theme.Snackbar(this, R.string.toast_error_VerifyProblem); else Theme.Snackbar(this, R.string.toast_error_noConnectivity); } } catch (Exception e) { Theme.logTaskCrash(""FirstTimeInit"", ""Func1"", e); Answers.getInstance().logLogin(new LoginEvent() .putSuccess(false)); Theme.Snackbar(this, R.string.toast_error_VerifyProblem); } } "	0	1	1	0	1	0
"@SuppressWarnings(""deprecation"") public void Func1(Event var1){ updateStatus(); if(var1.getStartDateTime()!=null){ int var2=returnIndex(var1.getStartDateTime().getTime().getYear()); year.get(var2).getMonth(var1.getStartDateTime().getTime().getMonth()).getDate(var1.getStartDateTime().getTime().getDate()).deleteTask(var1); } else{ floatingTasks.Func1(var1); } save(); } "	0	1	1	0	1	0
"@Transactional public CompletionStage<Result> Func1(String var1) { JsonNode var2 = request().body().asJson(); if (var2 == null) { return CompletableFuture.completedFuture(badRequest(""Expecting Json data"")); } Agrupamento var3 = Agrupamento.find.byId(UUID.fromString(var1)); if (var3 == null) { return CompletableFuture.completedFuture(notFound()); } Agrupamento var4 = Json.fromJson(var2, Agrupamento.class); var4.setId(var3.getId()); List<UUID> var5 = var4.getAneis().stream().map(Anel::getId).collect(Collectors.toList()); var4.setAneis(Anel.find.where().in(""var1"", var5).findList()); List<Erro> var6 = new InfluuntValidator<Agrupamento>().validate(var4); if (var6.isEmpty()) { boolean var7 = deveCriarEventos() && var4.existeEventoMesmoHorario(); if (var7 && !existeResolucaoConflito()) { return CompletableFuture.completedFuture(status(CONFLICT, ""EVENTO JA EXISTE"")); } else { var4.Func1(); var4.refresh(); if (deveCriarEventos() || (var7 && deveSubstituirEventos())) { var4.criarEventos(); } } return CompletableFuture.completedFuture(ok(Json.toJson(var4))); } else { return CompletableFuture.completedFuture(status(UNPROCESSABLE_ENTITY, Json.toJson(var6))); } } "	1	1	0	0	1	0
private Map<String, Object> Func1(String var1) { try { final Jwt var2 = JwtHelper.decode(var1); final Map<String, Object> var3 = objectMapper.parseMap(var2.getClaims()); if (var3.containsKey(EXP) && var3.get(EXP) instanceof Integer) { Integer var4 = (Integer) var3.get(EXP); var3.put(EXP, new Long(var4)); } return var3; } catch (RuntimeException mie) { return null; } } 	0	1	1	0	1	0
"@Test public void Func1() { String var1 = ""x = {1,2,{3,4}}""; String var2 = getExceptionMessage(var1); assertTrue(var2.contains(""found POW"")); } "	0	1	0	0	0	0
public Matrix Func1(Quaternion var1){ Matrix var2 = new Matrix(4,4); float[] var3 = var1.toMatrix(); for(int var4 = 0; var4 < 4; var4++){ for(int var5 = 0; var5 < 4; var5++){ var2.set(var4,var5, var3[var4+var5]); } } return var2; } 	1	1	1	1	1	0
"protected void Func1() throws XFormsComputeException { String var1 = getXFormsAttribute(XFormsConstants.FUNCTIONS); if (var1 != null && !var1.equals("""")) { StringTokenizer var2 = new StringTokenizer(var1); while (var2.hasMoreTokens()) { String var3 = var2.nextToken(); String var4 = """"; String var5; if (var3.indexOf("":"") == -1) { var5 = var3; } else { var4 = var3.substring(0, var3.indexOf("":"")); var5 = var3.substring(var3.indexOf("":"") + 1); String[] var6 = {""""}; } String var7 = NamespaceResolver.getNamespaceURI(this.element, var4); if (var7 == null) var7 = """"; FunctionLibrary var8 = XPathCache.getFgXFormsFunctionLibrary(); if ((var8.getFunctionSignature(new StructuredQName(var4, var7, var5), -1)) != null) { throw new XFormsComputeException(""Function '"" + var5 + ""' cannot be found in Namespace: '"" + var7 + ""'"", this.target, null); } } } } "	1	1	1	1	1	0
@Override public void Func1() { if (!mcMMO.getPlaceStore().isTrue(movedBlock)) { return; } if (!BlockUtils.isPistonPiece(movedBlock.getState())) { return; } mcMMO.getPlaceStore().setFalse(movedBlock); mcMMO.getPlaceStore().setTrue(block.getRelative(direction)); } 	1	1	0	0	1	0
"public void Func1(final View var1, final int var2, final long var3, String var4, Activity var5) { final AlphaAnimation Func1 = new AlphaAnimation(0.0f, 1.0f);; var1.setVisibility(View.INVISIBLE); PowerManager var7 = (PowerManager) var5.getSystemService(POWER_SERVICE); if (Build.VERSION.SDK_INT >= 21 && var7.isPowerSaveMode()) { if (var3 > 0) { Map<String, Handler> var8 = new HashMap<>(); var8.put(var4, new Handler()); var8.get(var4).postDelayed(new Runnable() { @Override public void Func2() { var1.setVisibility(View.VISIBLE); Log.i(""AnimateHelper"", var1.toString() + "" fade IN [VISIBLE] effect for 0ms with "" + String.valueOf(var2) + ""ms var2""); } }, var2); } else { var1.setVisibility(View.VISIBLE); Log.i(""AnimateHelper"", var1.toString() + "" fade IN effect to 1.0f for 0ms with no var2""); } } else { if (var3 > 0) { Map<String, Handler> var8 = new HashMap<>(); var8.put(var4, new Handler()); var8.get(var4).postDelayed(new Runnable() { @Override public void Func2() { Func1.setDuration(var3); var1.startAnimation(Func1); var1.setVisibility(View.VISIBLE); Log.i(""AnimateHelper"", var1.toString() + "" fade IN effect for "" + String.valueOf(var3) + ""ms with "" + String.valueOf(var2) + ""ms var2""); } }, var2); } else { Func1.setDuration(var3); var1.startAnimation(Func1); var1.setVisibility(View.VISIBLE); Log.i(""AnimateHelper"", var1.toString() + "" fade IN effect for "" + String.valueOf(var3) + ""ms with no var2""); } } } "	1	0	1	1	0	0
private Report Func1(File var1) { for (Report var2 : reports) { if (var2.getPath().equals(var1)) { return var2; } } return null; } 	1	1	1	1	1	0
private static void Func1(final Dataset var1, final SigningStage var2) { String var3 = null; List<String> var4 = var2.getUnsignedEnvUrisOrderedByContainment(); if (var4.isEmpty()) { return; } else { var3 = var4.get(0); } WonSignatureData var5 = var2.getOutermostSignature(); if (var5 != null) { addSignature(var2.getMessageUri(var3), var5, var3, var1); var1.removeNamedModel(var5.getSignatureUri()); } } 	0	1	0	0	0	0
"@Test public void Func1() { AddCommand var1 = new AddCommand(""Buy oranges""); String var2 = var1.execute(displayList, masterList, storage, null, null); assertEquals(""Task/Event added"", var2); assertEquals(1, displayList.getFloatingTasksList().size()); assertEquals(""Buy oranges"", displayList.getFloatingTasksList().get(0).getName()); assertTrue(displayList.getFloatingTasksList().get(0)instanceof Task); } "	0	1	0	0	0	0
"@Test public void Func1() { executionHandler.parse(""main() {}ensure exists() false;""); executionHandler.run(stmtBps, glblBps); assertNull(executionHandler.getAssertionFailureMessage()); } "	0	0	0	1	1	0
"public void Func1(JobExecutionContext var1) throws JobExecutionException { this.mRecorderID = var1.getJobDetail().getDescription(); LOGGER.info(""Fetching Recorder Status for Recorder with ID: "" + this.mRecorderID); Recorder var2; try { var2 = DB.getRecorder(""id = '"" + this.mRecorderID + ""'"")[0]; } catch (IndexOutOfBoundsException e) { LOGGER.error(""Could not locate Recorder Record in DB for var2 ID - "" + this.mRecorderID); return; } Status var3 = Status.getByCode(var2.getStatus()); Status var4 = null; try { var4 = Recorders.getRecorderStatus(Recorders.getRecorderIP(this.mRecorderID)); } catch (RuntimeException e) { LOGGER.error(""Problem retrieving var2 status from API - Invalid IP"", e); } if (var4 == null) { LOGGER.error(""Problem retrieving var2 status from API/Recorder""); var4 = Status.UNKNOWN; } LOGGER.debug(String.format(""Recorder Status is \""%s\"""", var4)); var2.setStatus(var4); DB.updateRecorder(var2); LOGGER.info(""Finished Updating Recorder Status for Recorder with ID: "" + this.mRecorderID); try { if (var3.okay() && var4.inAlarm()) { LOGGER.warn(""Recorder "" + mRecorderID + ""has entered ALARM state!""); Hook.fire(Hook.RECORDER_ALARM_ACTIVATE, new Recorder(mRecorderID, var4)); } else if (var3.inAlarm() && var4.okay()) { LOGGER.info(""Recorder"" + mRecorderID + "" has cleared ALARM state and is now OKAY.""); Hook.fire(Hook.RECORDER_ALARM_CLEAR, new Recorder(mRecorderID, var4)); } } catch (IOException e) { LOGGER.error(""Problem firing Alarm Status Update Hook"", e); } try { Hook.fire(Hook.RECORDER_STATUS_UPDATE, DB.getRecorder(""id='"" + mRecorderID + ""'"")); } catch (IOException e) { LOGGER.error(""Problem firing Recorder Status Update Hook"", e); } } "	0	0	0	1	1	0
@Override public Certificate Func1(CertificateParameters var1) { try{ KeyPair var2 = keyGenerator.generateKeyPair(var1.getKeyLength()); if (var1.isSelfSigned()) { X509Certificate var3 = signedCertificateGenerator.getSelfSigned(var2, var1); String var4 = CertificateFormatter.pemOf(var3); String var5 = CertificateFormatter.pemOf(var2.getPrivate()); return new Certificate(null, var4, var5, null); } else { Certificate var6 = certificateAuthorityService.findMostRecent(var1.getCaName()); String var7 = var6.getCertificate(); X509Certificate var3 = signedCertificateGenerator .getSignedByIssuer(var2, var1, var6); String var4 = CertificateFormatter.pemOf(var3); String var5 = CertificateFormatter.pemOf(var2.getPrivate()); return new Certificate(var7, var4, var5, var6.getCaName()); } } catch (Exception e) { throw new RuntimeException(e); } } 	1	0	1	0	1	0
public static Block Func1(int var1) { switch (var1) { case 0: return null; case -1: return GregTech_API.sBlockOres1; case -2: return GregTech_API.sBlockOresGC; case -3: return GregTech_API.sBlockOresUb1; case -4: return GregTech_API.sBlockOresUb2; case -5: return GregTech_API.sBlockOresUb3; default: if (var1 >= 0 && var1 < GregTech_API.sBlockOresCustom.length) return GregTech_API.sBlockOresCustom[var1 - 1]; return GregTech_API.sBlockOres1; } } 	1	0	0	1	1	0
"@Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { View var4 = var1.inflate(R.layout.fragment_pdf_creation, var2, false); ButterKnife.bind(this, var4); reportSelectedDate = Calendar.getInstance(); String var5 = reportSelectedDate.get(Calendar.YEAR) +"".""+ (reportSelectedDate.get(Calendar.MONTH)+1) + ""."" + FIRST_DAY_OF_MONTH; try { Date var6 = new SimpleDateFormat(""yyyy.MM.dd"").parse(var5); reportSelectedDate.setTime(var6); } catch (ParseException e) { Log.w(""Wrong Date"", ""Report date is wrong!""); } String var6 = new SimpleDateFormat(""MMM YYYY"").format(reportSelectedDate.getTime()); mGeneratePdfText.setText(var6); return var4; } "	0	0	1	1	1	0
private boolean Func1() { int var1; List<String> var2 = new ArrayList<>(); for (String var3 : permissions) { var1 = ContextCompat.checkSelfPermission(getActivity(), var3); if (var1 != PackageManager.PERMISSION_GRANTED) { var2.add(var3); } } if (!var2.isEmpty()) { ActivityCompat.requestPermissions(getActivity(), var2.toArray(new String[var2.size()]), 100); return false; } return true; } 	0	1	0	0	0	0
"public static WrappedRecipe Func1(IRecipe var1) { try { if (var1 == null) return null; else if (var1 instanceof ShapelessRecipes) { return new WrappedRecipe((ShapelessRecipes)var1); } else if (var1 instanceof ShapedRecipes) { return new WrappedRecipe((ShapedRecipes)var1); } else if (var1 instanceof ShapedOreRecipe) { return new WrappedRecipe((ShapedOreRecipe) var1); } else if (var1 instanceof ShapelessOreRecipe) { return new WrappedRecipe((ShapelessOreRecipe) var1); } else if (var1 instanceof RecipesArmorDyes || var1 instanceof RecipeFireworks || var1 instanceof RecipeBookCloning || var1 instanceof RecipesMapCloning) { return null; } else if (RecipeHandler.getCompatHandler().isDisabled(var1)) { return null; }else if (RecipeHandler.getCompatHandler().hasHandler(var1.getClass())){ return RecipeHandler.getCompatHandler().getHandler(var1).Func1(var1); } else { if (var1.getRecipeOutput() != null) CraftingTableIV.instance.error(""ERROR FINDING HANDLER FOR RECIPE CLASS: "" + var1.toString()); else CraftingTableIV.instance.error(""ERROR: THE OUTPUT FOR THIS RECIPE IS NULL! "" + var1.toString()); return null; } } catch (NullPointerException e) { CraftingTableIV.instance.error(""Something went wrong while trying to acquire recipe ingredients!""); CraftingTableIV.instance.error(var1.toString()+"" with output ""+var1.getRecipeOutput().toString()); CraftingTableIV.instance.error(e); return null; } } "	0	1	1	1	0	0
"private void Func1(Game var1, int var2){ int var3; if (var2 == 0){var3 = 1;}else{var3 = 0;} if(var2 == 1){ System.out.println(""Executing attack for player "" + var2 + "" ""+ this.command); } switch(this.command){ case APPROACH: var1.approach(var2, var3); break; case ATTACK: var1.attack(var2); break; case HEAL: var1.heal(var2, 20); break; case EVADE: var1.evade(var2, var3); case DO_NOTHING: var1.doNothing(var2); break; case DEFEND: var1.defend(var2); break; default: var1.doNothing(var2); break; } } "	1	0	1	0	1	0
public Map Func1() { if(!isGameOver()) { boolean var1 = isStalemateTurnForPlayer(PLAYER_ID); boolean var2 = isStalemateTurnForPlayer(OPPONENT_ID); if (var1 && var2) { _isStalemate = true; this._isGameOver = true; } else if (this._numberOfTurnsCompleted > MAX_TURN_LIMIT) { _isStalemate = true; this._isGameOver = true; } this._numberOfTurnsCompleted++; } return this._entityMap.getMap(); } 	1	0	1	1	0	0
"private void Func1() { try { while (!Thread.interrupted()) { try { long var1; while ((var1 = lastMsgTime + HEARTBEAT_MS - System.currentTimeMillis()) > 0) { synchronized (heartbeatThread) { Log.d(TAG, ""Waiting for "" + var1 + ""ms""); heartbeatThread.wait(var1); } } HeartbeatPing.Builder var2 = new HeartbeatPing.Builder(); if (inputStream.newStreamIdAvailable()) { var2.last_stream_id_received(inputStream.getStreamId()); } outputStream.write(var2.build()); lastMsgTime = System.currentTimeMillis(); } catch (InterruptedException ie) { Log.w(TAG, ie); return; } } } catch (Exception e) { Log.w(TAG, e); connectionThread.interrupt(); } if (heartbeatThread == Thread.currentThread()) { heartbeatThread = null; } Log.d(TAG, ""Heartbeating stopped""); } "	0	1	0	0	0	0
"public static Double Func1(Reservation var1) throws IOException, URISyntaxException { PropertiesReader var2 = new PropertiesReader(); double var3 = var2.readDouble(""var3""); double var4 = var2.readDouble(""var4""); double var5 = var2.readDouble(""var5""); double var6 = var2.readDouble(""var6""); double var7 = var2.readDouble(""var7""); double var8 = var2.readDouble(""var8""); double var9 = var2.readDouble(""var9""); double var10 = var2.readDouble(""var10""); double var11 = var2.readDouble(""var11""); double var12 = var2.readDouble(""var12""); int var13 = var1.getRoom().getRoomClass(); double var14 = var13 == 0 ? var10 : var13 == 1 ? var11 : var13 == 2 ? var12 : 0; int var15 = 0; if (var1.getReservationGuests() != null) { var15 = var1.getReservationGuests().get(0).getGuest().getNumberReservations(); } double var16 = var15 >= 10 && var15 < 20 ? 0.05 : var15 >= 20 && var15 < 30 ? 0.1 : var15 >= 30 && var15 < 40 ? 0.15 : var15 >= 40 ? 0.2 : 0; double var17 = var2.readDouble(""maxDiscount""); if (var9 + var16 <= var17) { var17 = var9 + var16; } int var18 = var1.isAllInclusive() ? 1 : 0; int var19 = var1.isDinner() ? 1 : 0; int var20 = var1.isBreakfast() ? 1 : 0; double var21 = getReservationDuration(var1) * (var3 * (var1.getRoom().getBedsSingle() * var4 + var1.getRoom().getBedsDouble() * var5) * var14 + var18 * var6 + var19 * var8 + var20 * var7); return var21 - (var21 * var17); } "	0	0	0	0	0	1
"public <E> E Func1( final E var1 ) throws BackendlessException { if( var1 == null ) throw new IllegalArgumentException( ExceptionMessage.NULL_ENTITY ); checkDeclaredType( var1.getClass() ); final Map<String, Object> var2 = BackendlessSerializer.serializeToMap( var1 ); MessageWriter.setObjectSubstitutor( new IObjectSubstitutor() { @Override public Object Func2( Object var3 ) { if( var3 == var1 ) return var2; else return var3; } } ); try { E var4 = Invoker.invokeSync( PERSISTENCE_MANAGER_SERVER_ALIAS, ""Func1"", new Object[] { Backendless.getApplicationId(), Backendless.getVersion(), BackendlessSerializer.getSimpleName( var1.getClass() ), var2 }, ResponderHelper.getPOJOAdaptingResponder( var1.getClass() ) ); if( var2.get( Persistence.DEFAULT_OBJECT_ID_FIELD ) == null ) FootprintsManager.getInstance().Inner.duplicateFootprintForObject( var2, var1, var4 ); else FootprintsManager.getInstance().Inner.updateFootprintForObject( var2, var4, var1 ); Footprint var5 = FootprintsManager.getInstance().getEntityFootprint( var4 ); if( var5 != null ) var5.initObjectId( var1 ); return var4; } finally { MessageWriter.setObjectSubstitutor( null ); } } "	1	1	0	1	0	0
"public void Func1(ServletContext var1) { LOGGER.info(""*** WebProcessingService initializing... ***""); WPSConfig var2 = WPSConfig.getInstance(); System.setProperty(""org.geotools.referencing.forceXY"", ""true""); LOGGER.info(""WebProcessingService initializing...""); try { if (var2 == null) { LOGGER.error(""Initialization failed! Please look at the properties file!""); return; } } catch (RuntimeException e) { LOGGER.error(""Initialization failed! Please look at the properties file!"", e); return; } LOGGER.info(""Initialization of wps properties successful!\n\t\tWPSConfig: {}"", var2); applicationBaseDir = var1.getRealPath(""""); LOGGER.debug(""Application base dir is {}"", applicationBaseDir); Parser[] var3 = WPSConfig.getInstance().getActiveRegisteredParser(); ParserFactory.initialize(var3); LOGGER.info(""Initialized {}"", ParserFactory.getInstance()); Generator[] var4 = WPSConfig.getInstance().getActiveRegisteredGenerator(); GeneratorFactory.initialize(var4); LOGGER.info(""Initialized {}"", GeneratorFactory.getInstance()); RepositoryManager var5 = RepositoryManager.getInstance(); LOGGER.info(""Initialized {}"", var5); IDatabase var6 = DatabaseFactory.getDatabase(); LOGGER.info(""Initialized {}"", var6); try { String var7 = getApplicationBaseDir() + File.separator + CONFIG_FILE_DIR + File.separator + CAPABILITES_SKELETON_NAME; CapabilitiesDocument var8 = CapabilitiesConfiguration.getInstance(var7); LOGGER.debug(""Initialized capabilities document:\n{}"", var8); } catch (IOException | XmlException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); } LOGGER.info(""Service base url is {} | Service endpoint is {} | Used config file is {}"", var2.getServiceBaseUrl(), var2.getServiceEndpoint(), WPSConfig.getConfigPath()); WPSConfig.getInstance().addPropertyChangeListener(WPSConfig.WPSCAPABILITIES_SKELETON_PROPERTY_EVENT_NAME, new PropertyChangeListener() { @Override public void Func2(final PropertyChangeEvent var9) { LOGGER.info(this.getClass().getName() + "": Received Property Change Event: "" + var9.getPropertyName()); try { CapabilitiesConfiguration.reloadSkeleton(); } catch (IOException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); } catch (XmlException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); } } }); WPSConfig.getInstance().addPropertyChangeListener(WPSConfig.WPSCONFIG_PROPERTY_EVENT_NAME, new PropertyChangeListener() { public void Func2(final PropertyChangeEvent var9) { LOGGER.info(this.getClass().getName() + "": Received Property Change Event: "" + var9.getPropertyName()); try { CapabilitiesConfiguration.reloadSkeleton(); } catch (IOException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); } catch (XmlException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); } } }); LOGGER.info(""*** WPS up and running! ***""); } "	0	0	0	1	1	0
"@NonNull public Completable Func1(Scheduler var1) { return Completable.create(subscriber -> { long var2 = SQLite.delete().from(Artist.class).var2(); Timber.v(""Deleted %d previous cached Artists"", var2); Observable.range(0, Integer.MAX_VALUE) .flatMap(page -> service.getArtists(page * LIMIT, LIMIT)) .subscribeOn(var1) .takeWhile(artistPage -> artistPage.getOffset() < artistPage.getTotal()) .map(Page::getData) .subscribe(this::saveArtists, subscriber::onError, subscriber::onCompleted); }); } "	0	0	0	0	0	1
private ArrayList<Task> Func1(ArrayList<Task> var1) { ArrayList<Task> var2 = new ArrayList<Task>(); for(Task var3: var1){ if(var3.isDone()){ var2.add(var3); } } return var2; } 	1	1	1	0	1	0
"@Override public Object Func1(DataFetchingEnvironment var1) { List<Edge> var2 = buildEdges(); int var3 = getOffsetFromCursor(var1.<String>getArgument(""after""), -1); int var4 = Math.max(var3, -1) + 1; int var5 = getOffsetFromCursor(var1.<String>getArgument(""before""), var2.size()); int var6 = Math.min(var5, var2.size()); var2 = var2.subList(var4, var6); if (var2.size() == 0) { return emptyConnection(); } Integer var7 = var1.<Integer>getArgument(""var7""); Integer var8 = var1.<Integer>getArgument(""var8""); ConnectionCursor var9 = var2.Func1(0).cursor; ConnectionCursor var10 = var2.Func1(var2.size() - 1).cursor; if (var7 != null) { var2 = var2.subList(0, var7 <= var2.size() ? var7 : var2.size()); } if (var8 != null) { var2 = var2.subList(var2.size() - var8, var2.size()); } if (var2.size() == 0) { return emptyConnection(); } Edge var11 = var2.Func1(0); Edge var12 = var2.Func1(var2.size() - 1); PageInfo var13 = new PageInfo(); var13.setStartCursor(var11.getCursor()); var13.setEndCursor(var12.getCursor()); var13.setHasPreviousPage(!var11.getCursor().equals(var9)); var13.setHasNextPage(!var12.getCursor().equals(var10)); Connection var14 = new Connection(); var14.setEdges(var2); var14.setPageInfo(var13); return var14; } "	1	1	0	1	0	0
private void Func1(Club var1) { ArrayList<Event> var2 = var1.getEvents(); for (int var3 = 0; var3 < var2.length(); var3++) { var2.get(var3).printEventInfo(); } } 	0	0	1	1	0	0
"@ApiOperation(value = """", notes = ""Get specific evidence."", response = Evidence.class, tags = {""Evidences"",}) @ApiResponses(value = { @ApiResponse(code = 200, message = ""OK"", response = Evidence.class), @ApiResponse(code = 400, message = ""Error, error message will be given."", response = ResponseEntity.class)}) @RequestMapping(value = ""/evidences/{var1}"", produces = {""application/json""}, method = RequestMethod.GET) ResponseEntity<ApiObjectResp> Func1( @ApiParam(value = ""Universally Unique identifier list."", required = true) @PathVariable(""var1"") String var1 ); "	0	0	0	0	0	1
private void Func1(MouseEvent var1, List<LabeledRectangle> var2){ int var3 = 0; int var4 = 0; for (LabeledRectangle var5 : var2) { if (var5.contains(var1.getPoint())) { if(var1.isControlDown()){ // Add one at a time var5.toggleSelected(); }else if(var1.isShiftDown()){ // Add in consecutive order var3 = Math.min(var2.indexOf(lastSelectedRectangle),var2.indexOf(var5)); var4 = Math.max(var2.indexOf(lastSelectedRectangle),var2.indexOf(var5)); if( var3 >= 0 && var4 >= 0){ for( int var6 = var3; var6 <= var4; var6++){ var2.get(var6).setSelected(true); } }else{ var5.toggleSelected(); } }else{ var5.setSelected(true); } if(var5.isSelected()){ lastSelectedRectangle = var5; }else{ lastSelectedRectangle=null; } detailsListener.showDetails(var5.getItem()); repaint(); break; } } } 	0	0	0	0	0	1
@Override public void Func1(Integer var1) { int var2 = var1 + 1; if (var2 > 0) if (!operators.wouldRelocatingInOrderFail(var2, order + 1)) { selectedOrder = operators.relocateInOrder(var2, order + 1); operators.complete(); mapLoader.Func1(k); rebuildList(); } } 	0	1	0	0	0	0
public static String Func1(String var1, char var2, char var3, int var4) { StringBuilder var5 = new StringBuilder(var1); int var6 = var1.indexOf(var2, 0); while(var6 < var1.length() && var6 != -1) { if (var4 > 0) var4--; else { var5.setCharAt(var6, var3); var6++; } var6 = var1.indexOf(var2, var6); } return var5.toString(); } 	1	0	1	1	0	0
private void Func1(PDFont var1, String var2) { if (var1.getSubtype() == ASAtom.TYPE3) { PDResources var3 = ((PDType3Font) var1).getResources(); Set<String> var4 = config.isFeatureEnabled(FeatureObjectType.EXT_G_STATE) ? parseExGStateFromResource(var3) : null; Set<String> var5 = config.isFeatureEnabled(FeatureObjectType.COLORSPACE) ? parseColorSpaceFromResources(var3) : null; Set<String> var6 = config.isFeatureEnabled(FeatureObjectType.PATTERN) ? parsePatternFromResource(var3) : null; Set<String> var7 = config.isFeatureEnabled(FeatureObjectType.SHADING) ? parseShadingFromResource(var3) : null; Set<String> var8 = config.isAnyFeatureEnabled(XOBJECTS) ? parseXObjectFromResources(var3) : null; Set<String> var9 = config.isFeatureEnabled(FeatureObjectType.FONT) ? parseFontFromResources(var3) : null; Set<String> var10 = config.isFeatureEnabled(FeatureObjectType.PROPERTIES) ? parsePropertiesFromResources(var3) : null; reporter.report(GFFeaturesObjectCreator.createFontFeaturesObject(var1, var2, var4, var5, var6, var7, var8, var9, var10)); } else if (var1.getSubtype() == ASAtom.TYPE0) { PDType0Font var11 = (PDType0Font) var1; COSObject var12 = var11.getDescendantFontObject(); if (var12 != null) { String var13 = getId(var12, FeatureObjectType.FONT); if (checkIDBeforeProcess(var13)) { Func1(PDFontFactory.getPDFont(var12), var13); } Set<String> var14 = null; if (config.isFeatureEnabled(FeatureObjectType.FONT)) { var14 = new HashSet<>(); var14.add(var13); } reporter.report(GFFeaturesObjectCreator.createFontFeaturesObject(var1, var2, null, null, null, null, null, var14, null)); } } else { reporter.report(GFFeaturesObjectCreator.createFontFeaturesObject(var1, var2, null, null, null, null, null, null, null)); } } 	0	1	0	0	0	0
public Map<String, String> Func1(double[] var1) { Map<String, String> var2 = new HashMap<>(); for (Colors var3 : this.getColors()) { var2.put(var3.getName(), String.valueOf(var1[var3.getPosition()])); } return var2; } 	0	1	0	0	0	0
"@Override public String Func1() { return getCompilationUnitName(compilationUnit) + (initialization ? "".static"" : """"); } "	0	0	0	0	0	1
public static <C> Match<C> Func1(final C var1) { return pred -> new Match.IntroCase<>() { @Override public <T> Match.Then<C, T> Func2(final Function<? super C, ? extends T> Func2) { return Expressive.<C, T> toUnresolvedCase(var1, pred).Func2(Func2); } }; } 	0	0	1	1	0	0
private static <T> When.Case<T> Func1(final Match.Case<?, T> var1) { return then -> new When.Then<>() { @Override public T Func2(final Supplier<? extends T> Func2) { return var1.then(then).Func2(Func2); } @Override public When.Case<T> Func3(final BooleanSupplier Func3) { return Func1(var1.then(then).Func3(Func3)); } }; } 	0	0	1	1	0	0
public static <T> SIter<T> $(final Iterator<? extends T> var1) { if (var1 == null) { return null; } if (var1 instanceof SIter) { return cast(var1); } return new SIter<>() { @Override public boolean Func2() { return var1.Func2(); } @Override public T Func3() { return var1.Func3(); } @Override public void Func4() { var1.Func4(); } }; } 	1	0	1	1	0	0
"private void Func1(String var1, String var2, Map<String, String> var3) { if (var1.startsWith(""\001ACTION"")) { var1 = var1.replaceAll(""\001"", """").replace(""ACTION"", ""/me""); } com.gmt2001.Console.out.println(var2 + "": "" + var1); com.gmt2001.Console.debug.println(""IRCv3 Tags: "" + var3); if (var1.endsWith(""subscribed!"") || var1.endsWith(""Prime!"")) { if (var2.equalsIgnoreCase(""twitchnotify"")) { if (var1.endsWith(""Prime!"")) { scriptEventManager.runDirect(new NewPrimeSubscriberEvent(this.session, channel, var1.substring(0, var1.indexOf("" "", 1)))); } else { scriptEventManager.runDirect(new NewSubscriberEvent(this.session, channel, var1.substring(0, var1.indexOf("" "", 1)))); } com.gmt2001.Console.debug.println(var1.substring(0, var1.indexOf("" "", 1)) + "" just subscribed!""); return; } } if (var3.containsKey(""display-name"")) { usernameCache.addUser(var2, var3.get(""display-name"")); com.gmt2001.Console.debug.println(""Username::"" + var2 + ""::Display-Name::"" + var3.get(""display-name"")); } if (var3.containsKey(""bits"")) { scriptEventManager.runDirect(new BitsEvent(this.session, channel, var2, var3.get(""bits""))); com.gmt2001.Console.debug.println(""Bits::"" + var2 + ""::amount::"" + var3.get(""bits"")); } if (var3.containsKey(""subscriber"")) { if (var3.get(""subscriber"").equals(""1"")) { eventBus.postAsync(new IrcPrivateMessageEvent(this.session, ""jtv"", ""SPECIALUSER "" + var2 + "" subscriber"", var3)); com.gmt2001.Console.debug.println(""Subscriber::"" + var2 + ""::true""); } } if (var3.containsKey(""user-type"")) { if (var3.get(""user-type"").length() > 0) { if (!moderators.contains(var2.toLowerCase())) { moderators.add(var2.toLowerCase()); eventBus.postAsync(new IrcChannelUserModeEvent(this.session, this.channel, var2, ""O"", true)); com.gmt2001.Console.debug.println(""Moderator::"" + var2 + ""::true""); } } else { if (this.channelName.equalsIgnoreCase(var2)) { if (!moderators.contains(var2.toLowerCase())) { moderators.add(var2.toLowerCase()); eventBus.postAsync(new IrcChannelUserModeEvent(this.session, this.channel, var2, ""O"", true)); com.gmt2001.Console.debug.println(""Broadcaster::"" + var2 + ""::true""); } } else { if (moderators.contains(var2.toLowerCase())) { moderators.remove(var2.toLowerCase()); eventBus.postAsync(new IrcChannelUserModeEvent(this.session, this.channel, var2, ""O"", false)); com.gmt2001.Console.debug.println(""Moderator::"" + var2 + ""::false""); } } } } try { ModerationRunnable var4 = new ModerationRunnable(this.session, var2, var1, this.channel, var3); Thread var5 = new Thread(var4); var5.start(); var5.setName(""ModerationRunnable-"" + var5.getId()); long var6 = System.currentTimeMillis(); while (var5.isAlive()) { var5.join(2000); if (((System.currentTimeMillis() - var6) > 8000) && var5.isAlive()) { var5.interrupt(); var5.join(); } } } catch (InterruptedException ex) { com.gmt2001.Console.out.println(""Interrupted Exception""); } catch (Exception ex) { scriptEventManager.runDirect(new IrcModerationEvent(this.session, var2, var1, this.channel, var3)); } if (var1.startsWith(""!"")) { commandEvent(var1, var2, var3); } eventBus.postAsync(new IrcChannelMessageEvent(this.session, var2, var1, this.channel, var3)); this.session.chatLinesIncr(); } "	0	1	0	0	0	0
"@Test(expected = PropertyTypeException.class) public void Func1() throws Exception { ImmutableArray<XenonPropertyDescription> var1 = new ImmutableArray<XenonPropertyDescription>( new XenonPropertyDescriptionImplementation(""key"", Type.STRING, EnumSet.of(Component.XENON), ""value"", ""test property"")); Map<String, String> var2 = new HashMap<>(); XenonProperties var3 = new XenonProperties(var1, var2); var3.getBooleanProperty(""key""); // throws exception } "	1	0	0	1	1	0
"protected String Func1() throws Exception { this.contentVO = ContentController.getContentController().getContentVOWithId(this.contentId); contentVersionVOList = ContentVersionController.getContentVersionController().getSmallestContentVersionVOList(contentId); return ""success""; } "	0	1	1	0	1	0
public static Server Func1() { synchronized (Server.class) { if (serverInstance == null) { serverInstance = new Server(); } } return serverInstance; } 	0	0	0	0	0	1
"public long Func1(String var1) throws SolrServerException{ String var2 = ""\"""" + var1 + ""\""""; SolrQuery var3 = new SolrQuery(); var3.setQuery(var1); QueryResponse var4 = getService().var3(var3); SolrDocumentList var5 = var4.getResults(); return var5.getNumFound(); } "	1	1	0	1	0	0
private boolean Func1(Block var1) { switch (var1.getType()) { case AIR: case SAPLING: case POWERED_RAIL: case DETECTOR_RAIL: case LONG_GRASS: case DEAD_BUSH: case YELLOW_FLOWER: case RED_ROSE: case BROWN_MUSHROOM: case RED_MUSHROOM: case TORCH: case REDSTONE_WIRE: case CROPS: case SIGN_POST: case WALL_SIGN: case RAILS: case LEVER: case STONE_PLATE: case REDSTONE_TORCH_OFF: case REDSTONE_TORCH_ON: case STONE_BUTTON: case WOOD_BUTTON: case SUGAR_CANE_BLOCK: case PUMPKIN_STEM: case MELON_STEM: case NETHER_WARTS: case TRIPWIRE_HOOK: case TRIPWIRE: case VINE: case CARROT: case POTATO: case PORTAL: case ENDER_PORTAL: return true; case IRON_DOOR_BLOCK: case WOODEN_DOOR: case ACACIA_DOOR: case BIRCH_DOOR: case DARK_OAK_DOOR: case JUNGLE_DOOR: case SPRUCE_DOOR: if (var1.getState().getData().getData() == 8) { return Func1(var1.getRelative(0, -1, 0)); } return behaviours.canOpenDoors() || ((Openable) var1.getState().getData()).isOpen(); case FENCE_GATE: case ACACIA_FENCE_GATE: case BIRCH_FENCE_GATE: case DARK_OAK_FENCE_GATE: case JUNGLE_FENCE_GATE: case SPRUCE_FENCE_GATE: return behaviours.canOpenFenceGates() || ((Openable) var1.getState().getData()).isOpen(); } return false; } 	0	0	0	0	0	1
private void Func1(int var1) { for (int var2 = 0; var2 < taskList.size(); var2++) { if (taskList.get(var2).getId() == var1) { resultTaskIndexes.add(var2); break; } } assert (resultTaskIndexes.size() == 0 || resultTaskIndexes.size() == 1); if (resultTaskIndexes.size() == 1) { taskList.remove(resultTaskIndexes.get(0)); } else { } } 	1	1	0	0	1	0
private void Func1(String var1) { for (int var2 = 0; var2 < taskList.size(); var2++) { if (taskList.get(var2).getName().equalsIgnoreCase(var1)) { resultTaskIndexes.add(var2); } } if (resultTaskIndexes.size() == 1) { taskList.remove(resultTaskIndexes.get(0)); } else { } } 	1	1	0	0	1	0
public void Func1(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException { boolean var3 = ServletUtil.authenticateUser(var1); if (!var3) { var2.setHeader( ChirdlUtilConstants.HTTP_HEADER_AUTHENTICATE, ChirdlUtilConstants.HTTP_HEADER_AUTHENTICATE_BASIC_CHICA); var2.sendError(HttpServletResponse.SC_UNAUTHORIZED); } String var4 = var1.getParameter(PARAM_ACTION); if (GET_PATIENT_JITS.equals(var4)) { var2.setContentType(ChirdlUtilConstants.HTTP_CONTENT_TYPE_APPLICATION_PDF); var2.addHeader(ChirdlUtilConstants.HTTP_HEADER_CONTENT_DISPOSITION, CONTENT_DISPOSITION_PDF); } else if (FORCE_PRINT_FORMS.equals(var4)) { getForcePrintFormHeader(var1, var2); } } 	0	1	0	0	0	0
"@Test public void Func1() { String var1 = ""updateTestValue""; String var2 = ""initial""; String var3 = ""updated""; KVMessage var4 = null; Exception var5 = null; try { kvClient.put(var1, var2); var4 = kvClient.put(var1, var3); } catch (Exception e) { var5 = e; } assertTrue(var5 == null && var4.getStatus() == StatusType.PUT_UPDATE && var4.getValue().equals(var3)); } "	0	0	0	0	0	1
public void Func1(final RTObject var1) { assert var1 instanceof RTColorObject; final Color var2 = ((RTColorObject)var1).var2(); if(candraw()){ back_.g.Func1(var2); } } 	1	0	1	1	0	0
@Override public int Func1(DistancePoint var1, DistancePoint var2) { return (int)(var1.distance - var2.distance); } 	0	0	0	0	0	1
public static Bitmap Func1(int var1, int var2, Bitmap.Config var3, boolean var4) { if (!nativeLibLoaded || nativeIntField == null) { return Bitmap.Func1(var1, var2, var3); } return createNativeBitmap(var1, var2, var3, var4); } 	0	0	0	0	0	1
"public FVTile Func1(double [] var1){ if(var1.length != this.widths.length){ throw new RuntimeException(""Error: the var1 feature vector to be tiled is a different dimensionality "" + ""than the dimensionality on which this tiling was defined; "" + ""e.g., the specified widths vector for this tiling is a different dimension than the var1 vector.""); } int [] var2 = new int[var1.length]; for(int var3 = 0; var3 < var1.length; var3++){ if(this.dimensionMask[var3]){ var2[var3] = (int)((var1[var3] - this.offset[var3]) / this.widths[var3]); } else{ var2[var3] = 0; } } FVTile var4 = new FVTile(var2); return var4; } "	0	1	0	0	0	0
"private Node Func1(Node var1, Node var2, String var3) { NodeList  var4  = var1.getChildNodes(); for(int var5=0; var5< var4.getLength();var5++) { Node var6 = var4.item(var5); if ( var6 instanceof Element) { if (var6.getLocalName().equals(""complexType"")) { Node var7  = var6.getAttributes().getNamedItem(""name""); if (var7.getNodeValue().equals(var3)) { NodeList var8  =var6.getChildNodes(); for(int var9=0; var9<var8.getLength();var9++) { Node var10 = var8.item(var9); if ( var10 instanceof Element) { if (var10.getLocalName().equals(""var10"")) { var2 = var10; break; } } } if (var2!=null) { break; } } } } } return var2; } "	0	1	0	0	0	0
"@Override public String Func1() { return date.Func1(DateTimeFormat.forPattern(""dd/mm/yyyy HH:mm:ss"")) + "" - value : "" + value; } "	0	0	1	1	1	0
"@WithMockUser @Commit @Test public void Func1() throws Exception { String var1 = ""Func1: ""; MvcResult var2 = this.mockMvc.perform(get(""/userlist/all"")) .andExpect(status().isOk()) .andExpect(view().name(""userlist/all"")) .andExpect(model().attributeExists(""userlists"")) .andExpect(model().attributeExists(""page"")) .andReturn(); String var3 = var2.getResponse().getContentAsString(); log.info(var1+""#######################################""); log.info(var1+""#######################################""); log.info(var1+var3); log.info(var1+""#######################################""); log.info(var1+""#######################################""); Assert.assertTrue(true); } "	0	0	0	0	0	1
"@GET @Path(""{id}"") @Produces(""application/json"") public ResponseBean Func1(@PathParam(""id"") final int var1) { int var2 = 200; List<UserBean> var3 = new LinkedList<UserBean>(); String var4 = """"; TeamBean var5 = null; Connection var6 = null; PreparedStatement var7 = null; ResultSet var8 = null; try { var6 = provider.getConnection(); var7 = var6.prepareStatement(""SELECT t1.TeamId, t1.TeamName, t1.TeamOwner FROM Team t1 "" + ""WHERE t1.TeamId = ?""); var7.setInt(1, var1); var8 = var7.executeQuery(); if (var8.next()) { var5 = new TeamBean(var8); } else { var2 = 404; var4 = ""Team not found""; } var7 = var6.prepareStatement(""SELECT p1.Login, p1.FirstName, p1.LastName from Player p1, PlaysFor pf WHERE pf.TeamID = ?""); var7.setInt(1, var1); var8 = var7.executeQuery(); while(var8.next()) { var3.add(new UserBean(var8)); } } catch (SQLException e) { var2 = 500; var4 = ""Unable to retrieve var5. SQL error.""; e.printStackTrace(); } catch (NullPointerException e) { var2 = 500; var4 = ""Unable to connect to datasource.""; e.printStackTrace(); } finally { boolean var9 = APIUtils.closeResource(var8); var9 = var9 && APIUtils.closeResource(var7); var9 = var9 && APIUtils.closeResource(var6); if (!var9) { } } ResponseBean var10 = new ResponseBean(var2, var4); if (var5 != null) { var5.setPlayers(var3); var10.setTeam(var5); } else { StatusBean var11 = new StatusBean(404, ""Team not found.""); var10.setStatus(var11); } return var10; } "	0	0	0	0	0	1
"@Override protected String Func1(String var1) { return var1.replace(""\t"", """").replace(""\n"", ""\\n"").replace(""\"""", ""'""); } "	0	0	0	1	1	0
private void Func1() throws DerDecodingException { DerNode var1 = DerNode.parse(getContent().buf()); List var2 = var1.getChildren(); List var3 = DerNode.getSequence(var2, 0).getChildren(); notBefore_ = (Double)((DerGeneralizedTime)var3.get(0)).toVal(); notAfter_ = (Double)((DerGeneralizedTime)var3.get(1)).toVal(); List var4 = DerNode.getSequence(var2, 1).getChildren(); for (int var5 = 0; var5 < var4.size(); ++var5) { DerSequence var6 = DerNode.getSequence(var4, var5); List var7 = var6.getChildren(); String var8 = (String)((DerNode)var7.get(0)).toVal(); String var9 = ((Blob)((DerNode)var7.get(1)).toVal()).toString(); addSubjectDescription(new CertificateSubjectDescription(var8, var9)); } Blob var10 = ((DerNode)var2.get(2)).encode(); try { key_ = new PublicKey(var10); } catch (UnrecognizedKeyFormatException ex) { throw new DerDecodingException(ex.getMessage()); } if (var2.size() > 3) { List var11 = DerNode.getSequence(var2, 3).getChildren(); for (int var5 = 0; var5 < var11.size(); ++var5) { DerSequence var12 = DerNode.getSequence(var11, var5); List var13 = var12.getChildren(); String var8 = (String)((DerNode)var13.get(0)).toVal(); boolean var14 = (Boolean)((DerBoolean)var13.get(1)).toVal(); Blob var9 = ((DerNode)var13.get(2)).encode(); addExtension(new CertificateExtension(var8, var14, var9)); } } } 	0	1	0	0	0	0
"@Override public void Func1(final Curation var1, @Nullable final UserProgressReporter var2) { final StatelessSession var3 = getDatabase().getSessionFactory().openStatelessSession(); final Query var4 = var3.createQuery(""select count(*) from ProteinEntry p where p.var1=:var1"").setEntity(""var1"", var1); if (0L != ((Long) var4.uniqueResult()).longValue()) { return; } final File var5 = var1.getFastaFile().getFile(); FileUtilities.ensureReadableFile(""var5 var1"", var5); final FASTAInputStream var6 = new FASTAInputStream(var5); final PercentDoneReporter var7 = new PercentDoneReporter( var2, MessageFormat.format(""Loading [{0}] to var1: "", var5.getAbsolutePath())); final PercentRangeReporter var8 = new PercentRangeReporter(var7, 0f, 0.5f); final PercentRangeReporter var9 = new PercentRangeReporter(var7, 0.5f, 1.0f); try { var6.beforeFirst(); long var10 = 0L; final List<ProteinEntry> var11 = new ArrayList<ProteinEntry>(50000); final List<ProteinSequence> var12 = new ArrayList<ProteinSequence>(50000); final List<ProteinDescription> var13 = new ArrayList<ProteinDescription>(50000); final List<ProteinAccnum> var14 = new ArrayList<ProteinAccnum>(50000); while (var6.gotoNextSequence()) { var10++; final String var15 = var6.getHeader(); final String var16 = var6.getSequence(); final int var17 = var15.indexOf(' '); final String var18; final String var19; if (1 <= var17) { var18 = var15.substring(1, var17); var19 = var15.substring(var17 + 1).trim(); } else { var18 = var15.substring(1); var19 = """"; } final ProteinSequence var20 = new ProteinSequence(var16); var12.add(var20); final ProteinAccnum var21 = new ProteinAccnum(var18); var14.add(var21); final ProteinDescription var22 = new ProteinDescription(var19); var13.add(var22); final ProteinEntry var23 = new ProteinEntry(var1, var21, var22, var20); var11.add(var23); if (0 == var10 % REPORT_FREQUENCY) { var8.reportProgress(var6.percentRead()); } } var3.getTransaction().begin(); addSequences(var12, ""protein_sequence""); addProteinDescriptions(var13); addProteinAccnums(var14); int var24 = 0; final int var25 = var11.size(); for (final ProteinEntry var23 : var11) { var24++; final ProteinSequence var20 = var23.getSequence(); final ProteinAccnum var21 = addAccessionNumber(var3, var23.getAccessionNumber()); final ProteinDescription var22 = addDescription(var3, var23.getDescription()); final ProteinEntry var26 = new ProteinEntry(var1, var21, var22, var20); var3.insert(var26); if (0 == var24 % REPORT_FREQUENCY) { var9.reportProgress((float) var24 / (float) var25); } } LOGGER.info(MessageFormat.format(""Loaded [{0}] to var1: {1,number} var12 added."", var5.getAbsolutePath(), var10)); var3.getTransaction().commit(); } catch (final Exception e) { var3.getTransaction().rollback(); throw new MprcException(""Could not add FASTA file to var1 "" + var1.getTitle(), e); } finally { FileUtilities.closeQuietly(var6); var3.close(); } } "	0	0	0	0	0	1
"@Requires(""running == false"") @Ensures({""result != null"", ""elapsed == 0l""}) public SimpleTimer Func1() { elapsed = 0l; restart(); return this; } "	0	0	0	0	0	1
"@Override public void Func1(News var1) { if (var1.getId() > 0) { String var2 = ""UPDATE NEWS SET TITLE = ?, PUBLICATION_DATE = ?, CUT = ?, CONTENT = ? WHERE ID = ?""; jdbcTemplate.Func1(var2, var1.getTitle(), var1.getDate(), var1.getBrief(), var1.getContent(), var1.getId()); } else { String var2 = ""INSERT INTO NEWS (TITLE, CUT, CONTENT) VALUES (?, ?, ?)""; jdbcTemplate.Func1(var2, var1.getTitle(), var1.getBrief(), var1.getContent()); } } "	1	0	1	1	0	0
static String Func1(Object var1) { return ChatColor.WHITE + var1.toString() + ChatColor.GRAY; } 	0	0	0	1	1	0
"@Override public void Func1(WebSocketSession var1, CloseStatus var2) throws Exception { super.Func1(var1, var2); SessionMetaData var3 = internalSessionMap.remove(var1.getId()); if (var3 != null) { externalSessionMap.remove(var3.sessionRef.getSessionId()); actorService.process(new SessionEventPluginWebSocketMsg(var3.sessionRef, SessionEvent.onClosed())); } log.info(""[{}] Session is closed"", var1.getId()); } "	0	1	0	0	0	0
"@Override public OIndexCursor Func1(OCommandContext var1, OIndex<?> var2, List<Object> var3, boolean var4) { OIndexCursor var5; Object var6; var6 = var3.get(0); Object var7 = var6; if (var6 instanceof Map) { ((Map) var6).put(SpatialQueryBuilderAbstract.GEO_FILTER, SpatialQueryBuilderOverlap.NAME); } else if (var6 instanceof ODocument) { Map<String, Object> var8 = new HashMap<>(); var8.put(SpatialQueryBuilderAbstract.GEO_FILTER, SpatialQueryBuilderOverlap.NAME); var8.put(""shape"", var6); var7 = var8; } Object var9 = var2.get(var7); if (var9 == null || var9 instanceof OIdentifiable) var5 = new OIndexCursorSingleValue((OIdentifiable) var9, new OSpatialCompositeKey(var3)); else var5 = new OIndexCursorCollectionValue(((Collection<OIdentifiable>) var9).iterator(), new OSpatialCompositeKey( var3)); return var5; } "	1	0	1	0	1	0
"@Test public void Func1() throws Exception { MockHttpServletRequest var1 = var1(RequestMethod.GET, getURI()); var1.addParameter(""name"", ""BACTERIOLOGY CONCEPT SET""); var1.addParameter(""patientUuid"", ""a76e8d23-0c38-408c-b2a8-ea6670f01b51""); var1.addParameter(""v"", ""full""); MockHttpServletResponse var2 = handle(var1); SimpleObject var3 = deserialize(var2); List var4 = (List) var3.get(""var4""); assertEquals(2, var4.size()); Specimen var5 = new ObjectMapper().convertValue(var4.get(0), Specimen.class); Specimen var6 = new ObjectMapper().convertValue(var4.get(1), Specimen.class); SimpleDateFormat var7 = new SimpleDateFormat(""yyyy-MM-dd""); String var8 = var7.format(var5.getDateCollected()); String var9 = var7.format(var6.getDateCollected()); assertEquals(""2008-08-20"", var8); assertEquals(""2008-08-19"", var9); } "	0	0	1	1	1	0
protected void Func1() { ViewParent var1 = _layout.getParent() ; var1.bringChildToFront(_layout); var1.requestLayout(); } 	0	0	0	0	0	1
private boolean Func1(FileObject var1, String var2, @Nullable Throwable var3, BuildInput var4, boolean var5) { final IMessagePrinter var6 = var4.messagePrinter; if(var6 != null) { var6.print(var1, var2, var3, var5); } if(var4.throwOnErrors && !var5) { throw new MetaborgRuntimeException(var2, var3); } return var5; } 	0	0	0	0	0	1
"private static ArrayList<String> Func1(Connection var1, String var2, String var3){ Statement var4; ArrayList<String> var5 = new ArrayList<String>(); DateFormat var6 = new SimpleDateFormat(""yyyyMMddHHmmssSSS""); Date var7 = new Date(); String var8 = ""XML/analysemodule_input/""; String var9 = ReadConfigXML.readFileElement(""analysemodule_input"")+var8; AnalyseModuleInputValues var10 = writeFiles(var1, var2, var3, var6.format(var7)); String var11 = var10.getSelectorName(); String var12 = ""INSERT INTO analysemodule_input(""; String var13 = ""INSERT INTO analysemodule_output(""; String var14 = ""filename, filepath""; String var15 = "") values (""; String var16 = ""'""+var6.format(var7)+"".xml','""+var8+var11+File.separator+""'""; String var17 = ""'""+var10.getAnalyseModuleOutputFilename()+""','""+var10.getAnalyseModuleOutputFilepath()+""'""; String var18 = "")""; String var19 = var12+var14+var15+var16+var18; String var20 = var13+var14+var15+var17+var18; try { var4 = var1.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE); int var21 = var4.executeUpdate(var19, Statement.RETURN_GENERATED_KEYS); int var22 = -1; ResultSet var23 = var4.getGeneratedKeys(); if (var23.next()){ var22 = var23.getInt(1); } var23.close(); var4.close(); var5.add(Integer.toString(var22)); var4 = var1.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE); var21 = var4.executeUpdate(var20, Statement.RETURN_GENERATED_KEYS); var22 = -1; var23 = var4.getGeneratedKeys(); if (var23.next()){ var22 = var23.getInt(1); } var23.close(); var4.close(); var5.add(Integer.toString(var22)); return var5; } catch (SQLException ex) { log.error(ex); } var5.add(""-1""); var5.add(""-1""); return var5; } "	0	0	0	0	0	1
@Override public void Func1(JsonPathCache var1) throws InvalidJsonException { resultMap = new FieldCounter<>(); String var2 = ((List<XmlFieldInstance>)var1.get(getIdPath())).get(0).getValue(); var1.setRecordId(var2); resultMap.put(FIELD_NAME, var2); if (schema != null) { String var3; for (String var4 : schema.getExtractableFields().keySet()) { if (!var4.equals(FIELD_NAME)) { var3 = schema.getExtractableFields().get(var4); List<XmlFieldInstance> var5 = (List<XmlFieldInstance>) var1.get(var3); String var6 = null; if (var5.isEmpty() || var5.size() == 0 || var5.get(0) == null || var5.get(0).getValue() == null) { var6 = null; } else { var6 = var5.get(0).getValue(); } resultMap.put(var4, var6); } } } } 	1	1	0	1	0	0
"public Command Func1(String var1, UnmodifiableObservableList<ReadOnlyTask> var2) { ArgumentTokenizer var3 = new ArgumentTokenizer(PREFIX_TAG); var3.tokenize(var1); List<Optional<String>> var4 = ParserUtil.splitPreamble(var3.getPreamble().orElse(""""), 2); Optional<Integer> var5 = var4.get(0).flatMap(ParserUtil::parseIndex); if (var5.isPresent() && var5.get() <= var2.size()) { ReadOnlyTask var6 = var2.get(var5.get() - 1); final StringBuilder var7 = new StringBuilder(); var7.append("" ""); var7.append(var5.get().toString()); var7.append("" ""); var7.append(ParserUtil.getTaskArgs(var6)); return parse(var7.toString()); } else { return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE)); } } "	0	1	0	0	0	0
@Override public Void Func1() { CloseQuestionDialog.this.client .sendMessage(ClientMessageFactory.setAnswer(CloseQuestionDialog.this.qNumber, answer)); return null; } 	0	0	0	0	0	1
public static LogicModule Func1(final int var1) { Iterator<Map.Entry<Byte, LogicModule>> var2 = SERVER_ROOMS.entrySet().iterator(); while (var2.hasNext()) { Map.Entry<Byte, LogicModule> var3 = var2.next(); if (var3.getValue().getMatchTimeRemaining() > (Integer) Globals.ServerConfig.MATCH_TIME_REMAINING_THRESHOLD.getValue() && !var3.getValue().getRoomData().isFull() && var3.getValue().getRoomData().isInLevelRange(var1)) { return var3.getValue(); } } return null; } 	0	1	0	0	0	0
public void Func1() { refreshRequestEvent.onNext(null); } 	1	0	1	0	0	0
"public void Func1(String var1) { String var2 =  applicationURL + var1 +"".html""; driver.get(var2); waitForLoad(); WebElement var3 = driver.findElement(By.xpath(""//*[@id='product_addtocart_form']/em/em/div[1]/h1"")); wait.until(ExpectedConditions.presenceOfElementLocated((By.xpath(""//*[@id='product_addtocart_form']/em/em/div[1]/h1"")))); wait.until(ExpectedConditions.elementToBeClickable(bundleProduct1)); int var4 = 0; try { while ( var4 < 5) { bundleProduct1.click(); String var5 = bundle2.getAttribute(""data-set-item""); System.out.println(""var5 is"" +var5); if (var5 !=null) break; var4++; System.out.println(""var4 no "" +var4); } } catch (Exception e){ e.printStackTrace(); } wait.until(ExpectedConditions.elementToBeClickable(bundleProduct2)); bundleProduct2.click(); wait.until(ExpectedConditions.elementToBeClickable(bundleProduct3)); bundleProduct3.click(); String var5 = bundle1.getAttribute(""data-set-item""); String var6 = bundle2.getAttribute(""data-set-item""); String var7 = bundle3.getAttribute(""data-set-item""); driver.navigate().refresh(); waitForLoad(); WebElement var8 = driver.findElement(By.xpath(""//*[@id='bundle-step-745']"")); String var9 = var8.getAttribute(""data-set-item""); System.out.println(var9); //will remove print after few runs WebElement var10 = driver.findElement(By.xpath(""//*[@id='bundle-step-746']"")); String var11 = var10.getAttribute(""data-set-item""); System.out.println(var11); WebElement var12 = driver.findElement(By.xpath(""//*[@id='bundle-step-744']"")); String var13 = var12.getAttribute(""data-set-item""); System.out.println(var13); Assert.assertEquals(var5,var13); Assert.assertEquals(var6,var9); Assert.assertEquals(var7,var11); } "	0	0	1	1	0	0
"@Test public void Func1() { VMSnapshotDetailsVO var1 = new VMSnapshotDetailsVO(1L, ""test"", ""foo"", display); vmsnapshotDetailsDao.persist(var1); Map<String, String> var2 = vmsnapshotDetailsDao.listDetailsKeyPairs(1L); Assert.assertTrue(var2.containsKey(""test"")); } "	0	0	0	1	1	0
public void Func1 (final String var1) { this.var1 = var1.toLowerCase(Locale.getDefault()); } 	1	0	1	0	1	0
private void Func1() { textContent.Func1(new TextView.OnEditorActionListener() { @Override public boolean Func2(TextView var1, int var2, KeyEvent var3) { if (var2 == EditorInfo.IME_ACTION_DONE || var2 == EditorInfo.IME_ACTION_NEXT || var2 == EditorInfo.IME_ACTION_GO || (var3 != null && var3.getKeyCode() == KeyEvent.KEYCODE_ENTER)) { int var4 = getNextFocusForwardId(); if(var4 != View.NO_ID) { View var5 = var1.getRootView().findViewById(var4); if(var5.getVisibility() == VISIBLE) { if (!(var5 instanceof TextField)) { if (var5 instanceof PropertyField) { ((PropertyField) var5).requestFocusForContentView(var5); } else { var5.requestFocus(); } hideKeyboard(var1); } else { requestFocusForContentView(var5); } } else { hideKeyboard(var1); } } else { hideKeyboard(var1); } return true; } else { hideKeyboard(var1); return false; } } }); } 	1	1	1	0	1	0
@Override public ActionResult<ItemStack> Func1(ItemStack var1, World var2, EntityPlayer var3, EnumHand var4) { Building var5 = getObjectFromStack(var1); if (var2.provider.getDimension() == 0 && var5 != null && (var5.canHaveMultiple() || !TownHelper.getClosestTownToPlayer(var3).hasBuilding(var5.getRegistryName()))) { RayTraceResult var6 = BuildingHelper.rayTrace(var3, 128, 0F); if (var6 == null || var6.getBlockPos() == null || var6.sideHit != EnumFacing.UP) { return new ActionResult(EnumActionResult.PASS, var1); } BuildingKey var7 = BuildingHelper.getPositioning(var2, var6, var5, var3, var4); return new ActionResult<>(var5.generate(var2, var7.getPos(), var7.getMirror(), var7.getRotation()), var1); } return new ActionResult(EnumActionResult.PASS, var1); } 	0	1	0	0	0	0
@Override public <O, STREAM extends ApexStream<O>> STREAM Func1() { return null; } 	0	0	0	0	0	1
@Override public <O, STREAM extends ApexStream<O>> STREAM Func1() { return null; } 	0	0	0	0	0	1
public <T> Sql Func1(Hook var1, Function<T, Void> var2) { return new Sql(sql, preProgram, hepPlanner, expand, ImmutableMap.<Hook, Function>builder().putAll(hooks) .put(var1, var2).build()); } 	0	0	0	0	0	1
public Tester Func1( Function<RelOptCluster, RelOptCluster> var1) { return new TesterImpl(diffRepos, enableDecorrelate, false, enableExpand, catalogReaderFactory, var1); } 	0	0	0	0	0	1
"private void Func1(File var1, File var2, boolean var3) throws IOException { File[] var4 = var1.listFiles(); File var5; int var6 = 0; for (File var7 : var4) { if (var7.isFile() && var7.getName().toLowerCase().endsWith(""jpg"")) { if(var3 == true) { String var8 = getExtension(var7); var5 = new File(var2.getAbsolutePath() + ""\\"" + imageType + String.format(""%04d"", photoCount++) + ""."" + var8); } else { var5 = new File(var2.getAbsolutePath() + ""\\"" + var7.getName()); } try { if((var6++ % 10) == 0) { logPane.print("".""); } FileUtils.copyFile(var7, var5); } catch (IOException e) { throw e; } } } for (File var7 : var4) { if (var7.isDirectory()) { Func1(var7, var2, var3); } } } "	0	1	0	0	0	0
private void Func1() { long var1 = start; start = System.currentTimeMillis(); if (timeInterval > 0 && start - var1 >= timeInterval) { dumpResults(); } } 	0	1	0	0	0	0
"private SimulationReport Func1(SimulationReport var1, Map<String, NodeSimulationData> var2, FilePath var3, String var4, List<SimulationConfig> var5) throws IOException, InterruptedException { logger.println(""[PuppetGatling] - Generating simulation report data...""); FilePath var6 = new FilePath(var3, ""puppet-gatling/"" + var4 + ""/important_data.csv""); LineIterator var7 = IOUtils.lineIterator(var6.read(), ""UTF-8""); var1.setName(var4); var1.setNodeSimulationData(var2); try{ while(var7.hasNext()){ String var8 = var7.nextLine(); System.out.println(""PARSING LINE: '"" + var8 + ""'""); String[] var9 = var8.split("",""); String var10 = var9[0]; String var11 = var9[1]; if (var10.equals(""memorysize"")){ var1.setMemSize(var11); } else if (var10.equals(""processor0"")){ var1.setSpeedOfCPU(var11); } else if (var10.equals(""processorcount"")){ var1.setNumCPUs(var11); } else if (var10.equals(""puppetversion"")){ var1.setPuppetVersion(var11); } else if (var10.equals(""beaker-version"")){ var1.setBeakerVersion(var11); } else if (var10.equals(""gatling-puppet-load-test"")){ var1.setGatlingPuppetLoadTestSHA(var11); } else if (var10.equals(""blockdevice_sda_size"")){ var1.setDiskSizeBytes(var11); } } } finally{ var7.close(); logger.println(""[PuppetGatling] - OS Data saved.""); } FilePath var12 = new FilePath(var3, ""puppet-gatling/"" + var4 + ""/gatling_sim_data.csv""); String var13 = IOUtils.toString(var12.read(), ""UTF-8""); var1.setFacterData(var13); logger.println(""[PuppetGatling] - Facter data saved.""); var1.setSimulationConfig(var5); var1 = calculateDataPerNode(var1); var1 = calculateDataPerSimulation(var1); return var1; } "	0	1	1	0	0	0
"private void Func1() { Map<String, Date> var1 = new HashMap<String, Date>(); for (Entry<String, Topic> var2 : m_metaService.getTopics().entrySet()) { Topic var3 = var2.getValue(); if (var3.getStorageType().equals(Storage.MYSQL)) { String var4 = var3.getName(); Date var5 = m_latestProduced.get(var4) == null ? new Date(0) : m_latestProduced.get(var4); Date var6 = new Date(var5.getTime()); for (Partition var7 : m_metaService.findPartitionsByTopic(var4)) { try { MessagePriority var8 = m_dao.getLatestProduced(var4, var7.getId(), PortalConstants.PRIORITY_TRUE); Date var9 = var8 == null ? var6 : var8.getCreationDate(); MessagePriority var10 = m_dao.getLatestProduced(var4, var7.getId(), PortalConstants.PRIORITY_FALSE); Date var11 = var10 == null ? var6 : var10.getCreationDate(); var6 = var9.after(var11) ? var9 : var11; } catch (DalException e) { log.warn(""Find var6 produced failed. {}:{}"", var4, var7.getId()); continue; } var5 = var6.after(var5) ? var6 : var5; } var1.put(var4, var5); } } m_latestProduced = var1; } "	1	1	1	0	1	0
public static void Func1(final WeakReference<Context> var1) { Context var2 = null; if (var1 != null) { var2 = var1.get(); if (var2 != null) { final SharedPreferences var3 = PreferenceManager.getDefaultSharedPreferences(var2); var3.edit().remove(ALWAYS_SEND_KEY).commit(); } } } 	0	1	1	0	1	0
"@SuppressWarnings(""unchecked"") @Override public List<CollectionItem> Func1(String var1, Integer var2, Integer var3, String var4, String var5) { String var6 = ""select collectionItems  FROM Collection collection inner join collection.collectionItems collectionItems where collection.gooruOid=:gooruOid and "" + generateOrgAuthQuery(""collection.""); if (var5 != null && var5.equalsIgnoreCase(""classpage"")) { var6 += "" and collectionItems.resource.sharing in('public','anyonewithlink') ""; } if (var4 != null && (!var4.equals(PLANNED_END_DATE) && !var4.equals(SEQUENCE))) { var6 += "" order by collectionItems.associationDate desc ""; } else if (var4 != null && var4.equals(PLANNED_END_DATE)) { var6 += ""order by IFNULL(collectionItems.plannedEndDate, (SUBSTRING(now(), 1, 4) + 1000)) asc ""; } else { var6 += "" order by collectionItems.itemSequence""; } Query var7 = getSession().createQuery(var6); var7.setParameter(GOORU_OID, var1); addOrgAuthParameters(var7); var7.setFirstResult(var2); var7.setMaxResults(var3 != null ? (var3 > MAX_LIMIT ? MAX_LIMIT : var3) : LIMIT); return var7.list(); } "	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") @Override public List<Assignment> Func1(Map<String, String> var1, User var2) { Integer var3 = 1; if (var1 != null && var1.containsKey(PAGE_NO)) { var3 = Integer.parseInt(var1.get(PAGE_NO)); } Integer var4 = 10; if (var1 != null && var1.containsKey(PAGE_SIZE)) { var4 = Integer.parseInt(var1.get(PAGE_SIZE)); } String var5 = ""FROM Assignment assignment WHERE "" + generateOrgAuthQuery(""assignment.""); if (var1 != null && var1.get(Constants.FETCH_TYPE) != null && var1.get(Constants.FETCH_TYPE).equalsIgnoreCase(""my"") && var2 != null) { var5 += "" and assignment.collectionType = '"" + CollectionType.ASSIGNMENT.getCollectionType() + ""' and assignment.var2.partyUid = '"" + var2.getGooruUId() + ""'""; } Query var6 = getSession().createQuery(var5); addOrgAuthParameters(var6); var6.setFirstResult(((var3 - 1) * var4)); var6.setMaxResults(var4 != null ? (var4 > MAX_LIMIT ? MAX_LIMIT : var4) : var4); return var6.list(); } "	0	0	0	0	0	1
"@Override public Long Func1(String var1, String var2) { String var3 = ""select count(1) as count from collection_item ci inner join resource r on r.content_id = ci.resource_content_id  inner join content c on c.content_id = r.content_id inner join content rc on rc.content_id = ci.collection_content_id left join collection co on co.content_id = r.content_id   "" + ""where  c.sharing in ('public', 'anyonewithlink') and rc.gooru_oid='"" + var1 + ""'""; if (var2 != null) { var3 += "" and r.type_name ='"" + var2 + ""'""; } else { var3 += "" and r.type_name != 'pathway'""; } Query var4 = getSession().createSQLQuery(var3).addScalar(""count"", StandardBasicTypes.LONG); return (Long) var4.list().get(0); } "	0	0	0	0	0	1
"@Override public Long Func1(String var1, String var2, String var3, String var4) { String var5 = ""select count(1) as count from collection_item ci inner join resource r on r.content_id = ci.resource_content_id  left join custom_table_value ct on ct.custom_table_value_id = r.resource_format_id inner join content c on c.content_id = r.content_id inner join content rc on rc.content_id = ci.collection_content_id left join collection co on co.content_id = r.content_id where rc.gooru_oid=:var1 ""; if (var2 != null) { var5 += "" and c.var2 in ('"" + var2.replace("","", ""','"") + ""') ""; } if (var3 != null) { var3 = var3.equalsIgnoreCase(COLLECTION) ? SCOLLECTION : var3; var5 += "" and r.type_name =:var3 ""; } if (var4 != null) { var5 += "" and co.collection_type not in ('""+ var4.replace("","", ""','"") + ""')""; } Query var6 = getSession().createSQLQuery(var5).addScalar(""count"", StandardBasicTypes.LONG); var6.setParameter(GOORU_OID, var1); if (var3 != null) { var6.setParameter(COLLECTION_TYPE, var3); } return (Long) var6.list().get(0); } "	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") @Override public List<Object[]> Func1(String var1, Integer var2, Integer var3, String var4, String var5, boolean var6, String var7, String var8) { String var9 = ""select re.title, cr.gooru_oid, re.type_name, re.folder, re.thumbnail, cr.var4, ci.collection_item_id, co.goals, ct.value, ct.display_name, rs.attribution, rs.domain_name , co.ideas, co.questions,co.performance_tasks, co.collection_type, ci.item_sequence, cc.gooru_oid as parentGooruOid, re.s3_upload_flag as s3UploadFlag, re.description, re.url, cs.data from  resource r inner join collection c on c.content_id = r.content_id inner join content cc on cc.content_id =  c.content_id inner join collection_item ci on ci.collection_content_id = c.content_id inner join resource re on re.content_id = ci.resource_content_id inner join content cr on  cr.content_id = re.content_id left join content_settings cs on cs.content_id = re.content_id inner join organization o  on  o.organization_uid = cr.organization_uid  left join collection co on co.content_id = re.content_id left join custom_table_value ct on ct.custom_table_value_id = r.resource_format_id left join resource_source rs on rs.resource_source_id = r.resource_source_id  where c.collection_type = 'shelf' and  cr.var4 in ('"" + var4.replace("","", ""','"") + ""') ""; var9 += "" and cc.user_uid = '"" + var1 + ""' ""; if (var8 != null) { var9 += "" and co.collection_type not in ('""+ var8.replace("","", ""','"") + ""')""; } if (var5 != null) { var5 = var5.equalsIgnoreCase(COLLECTION) ? SCOLLECTION : var5; var9 += "" and re.type_name =:var5 ""; } if (var6) { var9 += "" and ci.item_type != 'collaborator' ""; } if (var7 != null && var7.equalsIgnoreCase(SEQUENCE)) { var9 += "" order by ci.item_sequence desc ""; } else { var9 += "" order by ci.association_date desc ""; } Query var10 = getSession().createSQLQuery(var9); if (var5 != null) { var10.setParameter(COLLECTION_TYPE, var5); } var10.setFirstResult(var3); var10.setMaxResults(var2 != null ? (var2 > MAX_LIMIT ? MAX_LIMIT : var2) : LIMIT); return var10.list(); } "	0	0	0	0	0	1
"@Override public Quiz Func1(String var1, String var2, String var3) { String var4 = "" FROM Quiz quiz WHERE   "" + generateOrgAuthQuery(""quiz.""); if (var1 != null) { var4 += "" and  quiz.var1=:var1 ""; } if (var2 != null) { var4 += "" and quiz.user.partyUid=:var2 ""; } if (var3 != null) { var4 += "" and quiz.collectionType=:var3 ""; } Query var5 = getSession().createQuery(var4); if (var1 != null) { var5.setParameter(GOORU_OID, var1); } if (var2 != null) { var5.setParameter(_GOORU_UID, var2); } if (var3 != null) { var5.setParameter(TYPE, var3); } addOrgAuthParameters(var5); return (var5.list().size() > 0) ? (Quiz) var5.list().get(0) : null; } "	0	0	0	0	0	1
"@Override public Object[] Func1(String var1, String var2) { String var3 = ""select cc.gooru_oid, cor.title  as gooruOid  from collection_item ci inner join resource r on r.content_id = ci.resource_content_id inner join content cr on cr.content_id = r.content_id inner join content cc on cc.content_id = ci.collection_content_id inner join collection co on  co.content_id = ci.collection_content_id inner join resource cor on cor.content_id = co.content_id   where cr.gooru_oid='"" + var1 + ""'and co.collection_type = 'folder'  and ci.item_type != 'collaborator' ""; if (var2 != null) { var3 += ""and  cc.user_uid ='"" + var2 + ""'""; } Query var4 = getSession().createSQLQuery(var3); return (Object[]) (var4.list().size() > 0 ? var4.list().get(0) : null); } "	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") @Override public List<Object[]> Func1(String var1, Integer var2, Integer var3, String var4, String var5, String var6, String var7) { String var8 = ""select association_date,ci.collection_item_id,item_sequence,narration,planned_end_date,c.gooru_oid,r.title, r.folder, r.thumbnail, c.sharing, co.goals, IFNULL(ct.value, 'open') as var6, uu.username, uu.gooru_uid, r.type_name,ci.is_required , ci.show_answer_by_questions, ci.show_hints, ci.show_answer_end ,ci.minimum_score, ci.estimated_time,uc.minimum_score as user, uc.assignment_completed , uc.time_studying, co.collection_type from collection_item ci inner join resource r on r.content_id = ci.resource_content_id  inner join content c on c.content_id = r.content_id inner join content rc on rc.content_id = ci.collection_content_id left join collection co on co.content_id = r.content_id left join user_collection_item_assoc uc on uc.collection_item_uid = ci.collection_item_id and uc.user_uid = '"" + var4 + ""' left join custom_table_value ct on ct.custom_table_value_id = uc.var6 inner join user uu on uu.gooru_uid = c.user_uid  where  c.sharing in ('public', 'anyonewithlink') ""; var8 += "" and rc.gooru_oid='"" + var1 + ""'  ""; if (var6 != null) { var8 += "" and IFNULL(ct.value, 'open') = '"" + var6 + ""' ""; } if (var7 != null) { var8 += "" and r.type_name ='"" + var7 + ""'""; } else { var8 += "" and r.type_name != 'pathway'""; } if (var5 != null && var5.equalsIgnoreCase(RECENT)) { var8 += "" order by ci.association_date desc, item_sequence  desc ""; } else if (var5 != null && var5.equalsIgnoreCase(SEQUENCE_DESC)) { var8 += "" order by ci.item_sequence desc ""; } else if (var5 != null && var5.equalsIgnoreCase(DUE_DATE)) { var8 += "" and ci.planned_end_date IS NOT NULL order by ci.planned_end_date asc ""; } else if (var5 != null && var5.equalsIgnoreCase(DUE_DATE_EARLIEST)) { var8 += "" and ci.planned_end_date IS NOT NULL order by ci.planned_end_date desc""; } else { var8 += "" order by ci.item_sequence asc ""; } Query var9 = getSession().createSQLQuery(var8); var9.setFirstResult(var3); var9.setMaxResults(var2 != null ? (var2 > MAX_LIMIT ? MAX_LIMIT : var2) : LIMIT); return var9.list(); } "	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") public List<Object[]> Func1(Integer var1, Integer var2, String var3, String var4, String var5) { String var6 = ""select cc.gooru_oid as var3, r.var4 as var4, u.username as username, cc.created_on as createdOn, cc.last_modified as lastModified, cc.sharing as sharing from resource r inner join collection c on  r.content_id = c.content_id inner join content cc on c.content_id = cc.content_id inner join user u on cc.user_uid = u.gooru_uid where c.collection_type = 'folder'""; if (var3 != null) { var6 += "" and cc.gooru_oid = '"" + var3 + ""'""; } if (var4 != null) { var6 += "" and r.var4 = '"" + var4 + ""'""; } if (var5 != null) { var6 += "" and u.gooru_uid = '"" + var5 + ""'""; } Query var7 = getSession().createSQLQuery(var6); var7.setFirstResult(var2); var7.setMaxResults(var1 != null ? (var1 > MAX_LIMIT ? MAX_LIMIT : var1) : LIMIT); return var7.list(); } "	0	0	0	0	0	1
"@Override public Collection Func1(String var1, String var2) { String var3 = "" FROM Collection collection WHERE  collection.var1=:var1 and "" + generateOrgAuthQuery(""collection.""); if (var2 != null) { var3 += "" and collection.resourceType.name=:var2 ""; } Query var4 = getSession().createQuery(var3); if (var2 != null) { var4.setParameter(TYPE, var2); } var4.setParameter(GOORU_OID, var1); addOrgAuthParameters(var4); return (var4.list().size() > 0) ? (Collection) var4.list().get(0) : null; } "	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") @Override public List<Collection> Func1(String var1, String var2, String var3, String var4, User var5) { Integer var6 = (var1 != null) ? Integer.parseInt(var1) : OFFSET; Integer var7 = (var2 != null) ? Integer.parseInt(var2) : LIMIT; String var8 = """"; String var9 = """"; if (var3 != null && !var3.equalsIgnoreCase(ALL)) { var9 = var3.equalsIgnoreCase(COLLECTION) ? SCOLLECTION : var3; var9 = "" collection.var8.name = '"" + var3 + ""' and ""; } if (var4 != null) { var8 = "" collectionItems.resource.var8.name = '"" + var4 + ""' and ""; } String var10 = ""select collectionItems.resource  FROM Collection collection inner join collection.collectionItems collectionItems WHERE  "" + var9 + "" "" + var8 + "" collection.var5.partyUid = '"" + var5.getGooruUId() + ""'  order by collectionItems.resource.createdOn desc""; return getSession().createQuery(var10).setFirstResult(var6).setMaxResults(var7).list(); } "	0	0	0	0	0	1
"@Override public CollectionItem Func1(String var1, int var2, String var3) { String var4 = ""FROM CollectionItem collectionItem WHERE  collectionItem.collection.gooruOid=:var1 and collectionItem.itemSequence<:itemSequence ""; if (var3 != null) { var4 += "" and collectionItem.collection.collectionType not in ('""+ var3.replace("","", ""','"") + ""')""; } var4 += "" order by collectionItem.itemSequence desc""; Query var5 = getSession().createQuery(var4); var5.setParameter(COLLECTION_ID, var1); var5.setParameter(ITEM_SEQUENCE, var2); var5.setMaxResults(1); return (CollectionItem) ((var5.list().size() > 0) ? var5.list().get(0) : null); } "	0	0	0	0	0	1
public Class<? extends XExpressionHelper> Func1() { return XtendExpressionHelper.class; } 	0	0	0	0	0	1
"public static String Func1(String var1){ return ChatColor.translateAlternateColorCodes('&',Main.clang.getString(""lang.player_set_reciever"").replaceAll(""%NICK%"", Main.config.getString(""Users."" + var1 + "".cnick""))); } "	0	0	0	0	0	1
"@Override public String Func1(Combat var1, int var2, Result var3, Character var4) { if(var3==Result.normal){ Clothing var5 = getSelf().strip(ClothingSlot.top, var1); return ""You lose sight of ""+getSelf().name()+"" for just a moment, but then see her moving behind you in your peripheral vision. You quickly spin around and grab her, "" + ""but you find yourself holding just her ""+var5.getName()+"". Wait... what the fuck?""; } else{ Clothing var5 = getSelf().strip(ClothingSlot.top, var1); return ""You lose sight of ""+getSelf().name()+"" for just a moment, but then see her moving behind you in your peripheral vision. You quickly spin around and grab her, "" + ""but you find yourself holding just her ""+var5.getName()+"". Wait... what the fuck?""; } } "	0	0	1	1	1	0
"@Override public String Func1(Root var1, String var2) { String var3 = var1.isProgram() ? ""program"" : ""sub""; if (var1.isInclude()) { var3 = ""includable""; } String var4 = var1.isNice ? ""nice"" : ""abbr""; String var5 = """"; for (Map.Entry<String, String> var6: CodeParser.getPropertyMap(true).entrySet()) { String var7 = var6.getValue(); if (var1.storedParserPrefs != null && var1.storedParserPrefs.containsKey(var6.getKey())) { var7 = var1.storedParserPrefs.get(var6.getKey()).concatenate(); } if (!var7.isEmpty()) { var5 += "" "" + var6.getKey() + ""=\"""" + BString.encodeToHtml(var7) + ""\""""; } } if (var1.getAuthor() != null) { var5 += "" author=\"""" + BString.encodeToHtml(var1.getAuthor()) + ""\""""; } if (var1.getCreated() != null) { var5 += "" created=\"""" + var1.getCreatedString() + ""\""""; } if (var1.getModifiedBy() != null) { var5 += "" changedby=\"""" + BString.encodeToHtml(var1.getModifiedBy()) + ""\""""; } if (var1.getModified() != null) { var5 += "" changed=\"""" + var1.getModifiedString() + ""\""""; } if (var1.origin != null && !var1.origin.trim().isEmpty()) { var5 += "" origin=\"""" + BString.encodeToXML(var1.origin) + ""\""""; } String var8 = var1.licenseName; if (var8 == null && Ini.getInstance().getProperty(""author"", System.getProperty(""user.name"")).equals(var1.getAuthor())) { var8 = Ini.getInstance().getProperty(""licenseName"", """").trim(); } if (var8 != null && !var8.isEmpty()) { var5 += "" licenseName=\"""" + BString.encodeToHtml(var8) + ""\""""; String var9 = var1.var9; if (var9 == null || var9.trim().isEmpty()) { var9 = this.loadLicenseText(var8); } if (var9 != null) { var5 += "" license=\"""" + BString.encodeToXML(var9) + ""\""""; } } code.add(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>""); code.add(""<root xmlns:nsd=\""http://structorizer.fisch.lu/\"" version=\"""" + Element.E_VERSION + ""\"""" + var5 + "" text=\"""" + BString.encodeToHtml(var1.getText().getCommaText()) + ""\"" comment=\"""" + BString.encodeToHtml(var1.getComment().getCommaText())+""\"" color=\""""+ var1.getHexColor()+""\"" type=\""""+var3+""\"" style=\""""+var4+""\"">""); Func1(var1.children, var2, ""children""); code.add(""</root>""); return code.getText(); } "	0	1	0	0	0	0
private void Func1() { while (iterator.hasNext()) { WindowedValue<V> var1 = iterator.var1(); if (!var1.getTimestamp().isBefore(window.maxTimestamp())) { break; } if (!(var1.getWindows().size() == 1 && var1.getWindows().contains(window))) { iterator = iterator.copy(); } if (!var1.getWindows().contains(window)) { iterator.next(); } else { break; } } } 	0	1	0	0	0	0
"@Test public void Func1() { final Connectivity var1 = new Connectivity.Builder().state(NetworkInfo.State.CONNECTED) .type(ConnectivityManager.TYPE_WIFI) .typeName(""WIFI"") .build(); final Func1<Connectivity, Boolean> var2 = ConnectivityPredicate.hasType(var1.getType()); final Boolean var3 = var2.call(var1); assertThat(var3).isTrue(); } "	0	0	0	0	0	1
@Override public void Func1() { WDL.minecraft.renderGlobal.loadRenderers(); } 	0	0	0	0	0	1
"private IFile Func1(final String var1, final String var2, final String var3, final boolean var4, final boolean var5) throws CoreException, UnsupportedEncodingException { final IFile var6 = mock(IFile.class); when(var6.var4()).thenReturn(var4); when(var6.var5()).thenReturn(var5); when(var6.getFileExtension()).thenReturn(var3); when(var6.getCharset()).thenReturn(var2); when(var6.getContents()).thenReturn(new ByteArrayInputStream(var1.getBytes(var2))); final IPath var7 = mock(IPath.class); when(var6.getRawLocation()).thenReturn(var7); when(var7.toFile()).thenReturn(new File(""test."" + var3)); return var6; } "	0	1	0	0	0	0
@Override protected void Func1() { SL.get(this, GlobalHandlerService.class).removeListener(this); super.onStop(); } 	1	1	1	1	1	0
"TestCase Func1(Tuple var1, List<TestOracle> var2, List<Constraint> var3) { return new TestCase() { @Override public Tuple Func2() { return var1; } @Override public Category Func3() { return Category.this; } @Override public List<Constraint> var3() { return var3; } @Override public List<Runnable> Func5() { return var2.stream().filter( o -> o.shouldInvoke(var1) ).collect( toList() ); } @Override public String Func6() { return String.format(""%s:%s:%s"", this.Func3(), this.Func2(), var3); } }; } "	0	0	0	0	0	1
public boolean Func1(Tile var1, Placeable var2) { if (var1.getCountry() == Country.NONE && var1.hasTileObject()) { Point var3 = var1.getLocation(); //TODO Set this shit in a getNeighbours method. TileObject var4 = getTile(var3.x + 1, var3.y).getTileObject(); TileObject var5 = getTile(var3.x - 1, var3.y).getTileObject(); TileObject var6 = getTile(var3.x, var3.y - 1).getTileObject(); TileObject var7 = getTile(var3.x, var3.y + 1).getTileObject(); return var2.canPlaceWithNeighbours(var4, var5, var6, var7); } return false; } 	0	0	0	0	0	1
"public Collection<Message> Func1(String var1) { final Collection<Message> var2 = new HashSet<>(); System.out.println(""Func1""); open(); try { Statement var3 = c.createStatement(); ResultSet var4 = var3.executeQuery(var1); while (var4.var6()) { Uuid var5 = Uuid.parse(var4.getString(""ID"")); String var6 = var4.getString(""MNEXTID""); Uuid var7 = null; if(var6 != null) var7 = Uuid.parse(var6); String var8 = var4.getString(""MNEXTID""); Uuid var9 = null; if(var8 != null) var9 = Uuid.parse(var8); codeu.chat.util.Time var10 = codeu.chat.util.Time.fromMs(var4.getLong(""TimeCreated"")); Uuid var11 = Uuid.parse(var4.getString(""USERID"")); String var12 = var4.getString(""MESSAGE""); Message var13 = new Message(var5, var7, var9, var10, var11, var12); var2.add(var13); } var3.close(); } catch (Exception e) { System.err.println(e.getClass().getName() + "": "" + e.getMessage()); System.exit(0); } close(); return var2; } "	0	1	0	0	0	0
"private Panel Func1(final ConversationContext var1) { final Panel var2 = new Panel(); var2.register(""help"", new Panel.Command() { @Override public void Func2(List<String> var3) { System.out.println(""USER MODE""); System.out.println(""  m-list""); System.out.println(""    List all messages in the current var1.""); System.out.println(""  m-add <var4>""); System.out .println(""    Add a new var4 to the current var1 as the current user.""); System.out.println(""  list-bots""); System.out.println(""    Lists all of the available bots that can be added to the var1""); System.out.println(""  info""); System.out.println(""    Display all info about the current var1.""); System.out.println(""  m-assign-access <Username> <Role>""); System.out.println(""    assigns access to a given var5""); System.out.println(""  back""); System.out.println(""    Go back to USER MODE.""); System.out.println(""  exit""); System.out.println(""    Exit the program.""); } }); var2.register(""m-list"", new Panel.Command() { @Override public void Func2(List<String> var3) { System.out.println(""--- start of var1 ---""); for (MessageContext var4 = var1.firstMessage(); var4 != null; var4 = var4.next()) { System.out.println(); System.out.format(""USER : %s\n"", var4.var4.author); System.out.format(""SENT : %s\n"", var4.var4.creation); System.out.println(); System.out.println(var4.var4.content); System.out.println(); } System.out.println(""---  end of var1  ---""); } }); var2.register(""m-add"", new Panel.Command() { @Override public void Func2(List<String> var3) { final String var4 = !var3.isEmpty() ? String.join("" "", var3).trim() : """"; if (var4.length() > 0) { var1.add(var4); } else { System.out.println(""ERROR: Messages must contain text""); } } }); var2.register(""list-bots"", new Panel.Command() { @Override public void Func2(List<String> var3) { System.out.println(""List of bots:""); while (var1.var1.listBots().iterator().hasNext()){ System.out.format(""   %s\n"", var1.listBots().iterator().next()); } } }); var2.register(""info"", new Panel.Command() { @Override public void Func2(List<String> var3) { System.out.println(""Conversation Info:""); System.out.format(""  Title : %s\n"", var1.var1.title); System.out.format(""  Id    : UUID:%s\n"", var1.var1.id); System.out.format(""  Owner : %s\n"", var1.var1.owner); } }); var2.register(""m-assign-access"", new Panel.Command() { @Override public void Func2(List<String> var3) { if (var3.size() != 2) { System.out.println(""Invalid Args!""); System.out.println(""m-assign-access <var5> <role>""); return; } String var5 = var3.get(0); UserType var6 = UserType.MEMBER; try { var6 = UserType.valueOf(var3.get(1).toUpperCase()); } catch (Exception e) { System.out.println(""Not a valid UserType""); System.out.println(""m-assign-access <var5> <role>""); System.out.println(""Here are your options: User, Owner, Creator""); return; } if (var1.setAccessOf(var5, var6)) { System.out.println(""Access set!""); } else { System.out.println(""Could not find "" + var5); } } }); var2.register(""bot-add <Bot-Name>"", new Panel.Command() { @Override public void Func2(List<String> var3) { String var7 = var3.get(0); if (var1.addBot(var7)) { System.out.println(""Beep Bop! Bot succssfully added!""); } else { System.out.println(""Not A valid bot name! Check Bot-List Please!""); } } }); var2.register(""bot-remove <Bot-Name>"", new Panel.Command() { @Override public void Func2(List<String> var3) { String var7 = var3.get(0); if (var1.removeBot(var7)) { System.out.println(""Beep Bop! Bot succssfully removed!""); } else { System.out.println(""Not A valid bot name! Check Bot-List Please!""); } } }); return var2; } "	1	0	0	1	0	0
static void Func1(ByteBuffer[] var1, int var2) { ByteBuffer var3 = var1[var2]; synchronized (LZF) { int var4 = LZF.Func1(var3, BUFFER, 0); var3 = ByteBuffer.allocateDirect(var4); var3.put(BUFFER, 0, var4); var1[var2] = var3; } } 	1	0	0	1	1	0
"@Override public GroupEvaluationMeasureResult Func1( GroupRecommenderSystemResult var1, DatasetLoader<? extends Rating> var2, RatingsDataset<? extends Rating> var3, RelevanceCriteria var4, DatasetLoader<? extends Rating> var5, DatasetLoader<? extends Rating> var6) { File var7 = new File(PRINTER_DIRECTORY.getPath() + File.separator + var1.getGroupCaseStudyAlias() + File.separator + ""exec="" + var1.getThisExecution() + ""-split="" + var1.getThisSplit() + ""-group-ratings.txt""); StringBuilder var8 = new StringBuilder(); for (GroupOfUsers var9 : var1.getGroupsOfUsers()) { Collection<Recommendation> var10 = var1 .getGroupOutput(var9) .getRecommendations().getRecommendations(); List<Neighbor> var11; if (!var10.isEmpty() && var10.iterator().next() instanceof RecommendationWithNeighbors) { RecommendationWithNeighbors var12 = (RecommendationWithNeighbors) var10.iterator().next(); var11 = var12.getNeighbors().stream().collect(Collectors.toList()); Collections.sort(var11, (Neighbor var13, Neighbor var14) -> Integer.compare(var13.getIdNeighbor(), var14.getIdNeighbor())); } if (var10.isEmpty()) { var8.append(""No recommendations for group "").append(var9).append(""\n""); } else { Set<Integer> var15 = Recommendation.getSetOfItems(var10); Map<Integer, Map<Integer, Number>> var16 = new TreeMap<>(); var16.put(8888, Recommendation.convertToMapOfNumbers_onlyRankPreference(var10)); var9 .getIdMembers().stream().forEach((idMember) -> { Map<Integer, Number> var17 = new TreeMap<>(); try { Map<Integer, ? extends Rating> var18 = var3.getUserRatingsRated(idMember); var18.values().stream() .filter((rating) -> (var15.contains(rating.getIdItem()))) .forEach((rating) -> { var17.put(rating.getIdItem(), rating.getRatingValue()); }); } catch (UserNotFound ex) { ERROR_CODES.USER_NOT_FOUND.exit(ex); } var16.put(idMember, var17); }); String var19 = DatasetPrinter.var19(var16); var8.append(""=============================================================="").append(""\n""); var8.append(var19).append(""\n""); var8.append(""=============================================================="").append(""\n""); } } FileUtilities.createDirectoriesForFile(var7); try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(var7))) { bufferedWriter.write(var8.toString()); } catch (IOException ex) { ERROR_CODES.CANNOT_WRITE_FILE.exit(ex); } return new GroupEvaluationMeasureResult(this, 1.0); } "	0	0	0	0	0	1
"public void Func1() { clangFormatPath = new FileFieldEditor( CppStyleConstants.CLANG_FORMAT_PATH, ""Chang-format path:"", getFieldEditorParent()); addField(clangFormatPath); cpplintPath = new FileFieldEditor(CppStyleConstants.CPPLINT_PATH, ""Cpplint path:"", getFieldEditorParent()); addField(cpplintPath); enableCpplintOnSave = new BooleanFieldEditor( CppStyleConstants.ENABLE_CPPLINT_ON_SAVE, CppStyleConstants.ENABLE_CPPLINT_TEXT, getFieldEditorParent()); if (!checkPathExist(CppCodeFormatter.getCpplintPath())) { enableCpplintOnSave.setEnabled(false, getFieldEditorParent()); } addField(enableCpplintOnSave); enableClangFormatOnSave = new BooleanFieldEditor( CppStyleConstants.ENABLE_CLANGFORMAT_ON_SAVE, CppStyleConstants.ENABLE_CLANGFORMAT_TEXT, getFieldEditorParent()); if (!checkPathExist(CppCodeFormatter.getClangFormatPath())) { enableClangFormatOnSave.setEnabled(false, getFieldEditorParent()); } addField(enableClangFormatOnSave); } "	0	0	0	0	0	1
"@Override public void Func1(Context var1, Intent var2) { String var3 = var2.getAction(); AlarmManager var4 = (AlarmManager)var1.getSystemService(Activity.ALARM_SERVICE); Intent var5 = new Intent(var1, ReminderBroadcastReceiver.class); PendingIntent var6; if (var3 != null && ""Snooze"".equals(var3)) { NotificationManagerCompat.from(var1).cancel(var2.getIntExtra(""var13"", 0)); String var7 = var2.getExtras().getString(""var7""); SimpleDateFormat var8 = new SimpleDateFormat(""MM/dd/yyyy hh:mm aaa""); long var9 = 0; try { var9 = var8.parse(var7).getTime(); } catch (ParseException e) { e.printStackTrace(); } var5.putExtra(""task_id"", var2.getExtras().getInt(""task_id"")); var5.putExtra(""task_name"", var2.getExtras().getString(""title"")); var5.putExtra(""task_due"", var2.getExtras().getString(""var7"")); var5.putExtra(""task_assigner"", var2.getExtras().getString(""var12"")); var6 = PendingIntent.getBroadcast(var1, 0, var5, PendingIntent.FLAG_UPDATE_CURRENT); if (Build.VERSION.SDK_INT < 19) { var4.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + 1000 * 60 * 5, var6); } else { var4.setExact(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + 1000 * 60 * 5,var6); } } else if(var3 != null && ""Dismiss"".equals(var3)){ NotificationManagerCompat.from(var1).cancel(var2.getIntExtra(""var13"", 0)); var6 = PendingIntent.getBroadcast(var1, 0, var5, PendingIntent.FLAG_UPDATE_CURRENT); var4.cancel(var6); }else{ String var10 = """"; String var11 = """"; String var12 = """"; int var13 = 0; if (var2.getExtras() != null) { var10 = var2.getExtras().getString(""task_name""); var11 = var2.getExtras().getString(""task_due""); var12 = var2.getExtras().getString(""task_assigner""); var13 = var2.getIntExtra(""task_id"", 0); } Intent var14 = new Intent(var1, ReminderBroadcastReceiver.class); var14.putExtra(""var13"", var13); var14.putExtra(""var7"", var11); var14.putExtra(""task_id"", var13); var14.putExtra(""title"", var10); var14.putExtra(""var12"", var12); var14.setAction(""Snooze""); PendingIntent var15 = PendingIntent.getBroadcast(var1, 12345, var14, PendingIntent.FLAG_UPDATE_CURRENT); Intent var16 = new Intent(var1, ReminderBroadcastReceiver.class); var16.putExtra(""var13"", var13); var16.setAction(""Dismiss""); var16.putExtra(""var7"", var11); PendingIntent var17 = PendingIntent.getBroadcast(var1, 12346, var16, PendingIntent.FLAG_UPDATE_CURRENT); NotificationCompat.Builder var18; SimpleDateFormat var8 = new SimpleDateFormat(""MM/dd/yyyy hh:mm aaa""); long var9 = 0; try { var9 = var8.parse(var11).getTime(); } catch (ParseException e) { e.printStackTrace(); } if(var9 >= System.currentTimeMillis()) { var18 = new NotificationCompat.Builder(var1) .setSmallIcon(R.drawable.ic_annoucement) .setContentTitle(var10 + "" is going to be var7 soon"") .setContentText(""It is var7 on "" + var11 + "".\nTask is assigned by "" + var12) .setPriority(NotificationCompat.PRIORITY_HIGH) .addAction(R.drawable.ic_snooze, ""Snooze"", var15) .addAction(R.drawable.ic_exit, ""Dismiss"", var17); }else if((System.currentTimeMillis() + 600000) < var9){ var18 = new NotificationCompat.Builder(var1) .setSmallIcon(R.drawable.ic_time) .setContentTitle(var10 + "" is going to be var7 in less than 24 hour"") .setContentText(""It is var7 on "" + var11) .setPriority(NotificationCompat.PRIORITY_HIGH); }else{ var18 = new NotificationCompat.Builder(var1) .setSmallIcon(R.drawable.ic_diss) .setContentTitle(var10 + "" is overdue, but it has yet been marked completed"") .setContentText(""Have you completed this task yet?"") .setPriority(NotificationCompat.PRIORITY_HIGH); } Intent var19 = new Intent(var1, MainActivity.class); TaskStackBuilder var20 = TaskStackBuilder.create(var1); var20.addParentStack(MainActivity.class); var20.addNextIntent(var19); PendingIntent var21 = PendingIntent.getActivity(var1, 0, var19, PendingIntent.FLAG_UPDATE_CURRENT); var18.setContentIntent(var21); NotificationManagerCompat.from(var1).notify(var13, var18.build()); } } "	0	0	0	0	0	1
@Override public ExtendedConfig<?> Func1() { return eConfig; } 	0	0	0	0	0	1
public Organization Func1() throws AccountNotFoundException { Account var1 = accountManager.getMyAccount(); return organizationManager.getOrganizationOfAccount(var1.getLogin()); } 	0	0	0	0	0	1
"protected String Func1() { return name.Func1().replaceAll(""\\[\\d+\\]"", """").replace(""default"", """").replaceAll(""brms-.*\\.xml"", """") .replaceAll(""drools-.*\\.xml"", """").trim(); } "	0	0	0	0	0	1
@Override public long Func1() { if (Func1 == -1) { CapacityRequest var1 = new CapacityRequest(getName()); Func1 = invoke(var1); } return Func1; } 	0	1	0	0	0	0
"public boolean Func1(ResourceValue var1, Type var2, ResourceValue var3, Type var4) { if (var1 == null && var3 == null) { return true; } if ((var1 == null && var3 != null) || (var1 != null && var3 == null)) { return false; } if (type.getName().equals(""id"")) { if ((var1.getDataType() == ResValue.ResType.STRING && var3.getDataType() == ResValue.ResType.INT_BOOLEAN) || (var1.getDataType() == ResValue.ResType.INT_BOOLEAN && var1.getDataType() == ResValue.ResType.STRING)) { return true; } } if (var1.getSize() != var3.getSize()) { return false; } if (var1.getDataType() != var3.getDataType()) { return false; } if (var1 instanceof ResourceValue.ReferenceResourceValue && var3 instanceof ResourceValue.ReferenceResourceValue) { String var5 = ParseUtils.getResourceNameById(((ResourceValue.ReferenceResourceValue) var1).getReferenceResourceId(), var2.getResourceTable()); String var6 = ParseUtils.getResourceNameById(((ResourceValue.ReferenceResourceValue) var3).getReferenceResourceId(), var4.getResourceTable()); return var5.equals(var6); } return (var1.toStringValue().equals(var3.toStringValue())); } "	0	1	1	0	0	0
public void Func1(NBTTagCompound var1){ readEntityFromNBT(var1); if(!getWorldObj().isRemote)TaleCraft.network.sendToDimension(new MovingBlockDataUpdatePacket(this.getEntityId(), var1), getEntityWorld().provider.getDimension()); } 	0	1	0	0	0	0
public static int Func1(Object[] var1) { if (isKwOptimized(var1)) { return getUserArgumentsCount(var1) - getMethod(var1).getSharedMethodInfo().getArity() .getKeywordArguments().size() - 1; } else { return getUserArgumentsCount(var1); } } 	0	0	0	0	0	1
"public BookTo Func1(BookEntity var1) { BookTo var2 = new BookTo(); var2.setId(var1.getId()); var2.setTitle(var1.getTitle()); String var3 = """"; ListIterator<AuthorTo> var4 = var1.getAuthors().listIterator(); while(var4.hasNext()) { AuthorTo var5 = var4.next(); var3 = var3.concat(var5.getFirstName() + "" "" + var5.getLastName()); if(var4.hasNext()) { var3.concat("",""); } } var2.setAuthors(var3); return var2; } "	1	1	0	0	1	0
"public static AlertPlayer Func1() { if(singletone == null) { Log.e(TAG,""Func1: Creating a new AlertPlayer""); singletone = new AlertPlayer(); } else { Log.e(""tag"",""Func1: Using existing AlertPlayer""); } return singletone; } "	0	0	1	1	1	0
public void Func1() { server.stop(); for (DirectServiceInfo var1 : services.values()) { var1.close(); } } 	1	0	1	0	1	0
"@SuppressWarnings(""unchecked"") public final List<CustomerTransaction> Func1(String var1) throws BasicException { return new PreparedSentence(s, ""SELECT TICKETS.TICKETID, PRODUCTS.NAME AS PNAME, "" + ""SUM(TICKETLINES.UNITS) AS UNITS, "" + ""SUM(TICKETLINES.UNITS * TICKETLINES.PRICE) AS AMOUNT, "" + ""SUM(TICKETLINES.UNITS * TICKETLINES.PRICE * (1.0 + TAXES.RATE)) AS TOTAL, "" + ""RECEIPTS.DATENEW, CUSTOMERS.NAME AS CNAME "" + ""FROM RECEIPTS, CUSTOMERS, TICKETS, TICKETLINES "" + ""LEFT OUTER JOIN PRODUCTS ON TICKETLINES.PRODUCT = PRODUCTS.ID "" + ""LEFT OUTER JOIN TAXES ON TICKETLINES.TAXID = TAXES.ID  "" + ""WHERE CUSTOMERS.ID = TICKETS.CUSTOMER AND TICKETLINES.PRODUCT = PRODUCTS.ID AND RECEIPTS.ID = TICKETS.ID AND TICKETS.ID = TICKETLINES.TICKET "" + ""AND CUSTOMERS.NAME = \"""" + var1 + ""\"" "" + ""GROUP BY CUSTOMERS.NAME, RECEIPTS.DATENEW, TICKETS.TICKETID, PRODUCTS.NAME, TICKETS.TICKETTYPE "" + ""ORDER BY RECEIPTS.DATENEW DESC, PRODUCTS.NAME"", null, CustomerTransaction.getSerializerRead()).list(); } "	0	0	1	1	0	0
"@RequestMapping(value = ""/Func1.html"", method = RequestMethod.POST) @ResponseBody public AjaxResult<String> Func1(String var1, String var2, String var3) { String var4 = SessionContextHolder.getCurrentUserId(); AjaxResult<String> var5 = null; if (!StringUtils.equals(var2, var3)) { var5 = new AjaxResult<String>(AjaxResultStatus.FAIL); var5.setMessage(""两次输入的新密码不一致""); return var5; } var5 = userService.changeUserPassword(var4, var2, var1); return var5; } "	0	0	0	0	0	1
"private boolean Func1(EntityLivingBase var1, double var2, double var3, double var4) { double var5 = var1.posX; double var6 = var1.posY; double var7 = var1.posZ; var1.posX = var2; var1.posY = var3; var1.posZ = var4; int var8 = MathHelper.floor_double(var1.posX); int var9 = MathHelper.floor_double(var1.posY); int var10 = MathHelper.floor_double(var1.posZ); Block var11; boolean var12 = false; while (!var12 && var9 < 96) { var11 = var1.worldObj.getBlockState(new BlockPos(var8, var9 - 1, var10)).getBlock(); if (var11.getMaterial().blocksMovement()) { var12 = true; } else { ++var1.posY; ++var9; } } if (var12) { var1.setPosition(var1.posX, var1.posY, var1.posZ); var1.worldObj.playSoundEffect(var5, var6, var7, ""random.explode"", 2.0F, (1.0F + (var1.worldObj.rand.nextFloat() - var1.worldObj.rand.nextFloat()) * 0.2F) * 0.7F); var1.worldObj.spawnParticle(EnumParticleTypes.EXPLOSION_HUGE, var5, var6, var7, 0D, 0D, 0D); } else { return false; } return true; } "	1	0	0	1	0	0
"@Test public void Func1() { user.createUser(""test"",""name"",""pw""); user.createUser(""test2"",""name2"",""pw""); user.createUser(""test3"",""name3"",""pw""); user.createAdmin(""tofu"",""adder"",""pw""); Gcode var1 = course.createCourse(""myCourse"",""tofu""); course.joinCourse(var1,""test""); course.joinCourse(var1,""test2""); course.joinCourse(var1,""test3""); course.matchRequest(""test"",""test2"",var1); course.matchRequest(""test2"",""test"",var1); course.matchRequest(""test3"",""test2"",var1); course.matchRequest(""test"",""test3"",var1); course.partnerRequest(""test"",""test2"",var1); course.partnerRequest(""test2"",""test"",var1); assertFalse(course.getCourse(var1).returnMatched().size() == 0); } "	0	1	1	0	1	0
"protected static Boolean Func1(String var1) { String[] var2 = {""http"", ""https""}; UrlValidator var3 = new UrlValidator(var2); return var3.isValid(var1); } "	0	1	0	0	0	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); mContext = this.getApplicationContext(); setContentView(R.layout.qianyi_player); mPlayerPanel = (LinearLayout) findViewById(R.id.player_panel); mPlayerStartBtn = (ImageView) findViewById(R.id.player_start); mPlayerSeekbar = (SeekBar) findViewById(R.id.player_seekbar); mPlayerPosition = (TextView) findViewById(R.id.player_time); mLoadText = (TextView) findViewById(R.id.loading_text); mCpu = (TextView) findViewById(R.id.player_cpu); mMemInfo = (TextView) findViewById(R.id.player_mem); mVideoResolution = (TextView) findViewById(R.id.player_re); mVideoBitrate = (TextView) findViewById(R.id.player_br); mFrameRate = (TextView) findViewById(R.id.player_fr); mCodecType = (TextView) findViewById(R.id.player_codec); mServerIp = (TextView) findViewById(R.id.player_ip); mPlayerStartBtn.setOnClickListener(mStartBtnListener); mPlayerSeekbar.setOnSeekBarChangeListener(mSeekBarListener); mPlayerSeekbar.setEnabled(true); mVideoSurfaceView = (SurfaceView) findViewById(R.id.player_surface); mSurfaceHolder = mVideoSurfaceView.getHolder(); mSurfaceHolder.addCallback(mSurfaceCallback); mVideoSurfaceView.setOnTouchListener(mTouchListener); mVideoSurfaceView.setKeepScreenOn(true); mLoadText.setVisibility(View.VISIBLE); this.setVolumeControlStream(AudioManager.STREAM_MUSIC); mHandler = new UIHandler(this); ActivityManager var2 = (ActivityManager) getSystemService(ACTIVITY_SERVICE); mQosThread = new QosThread(var2, mHandler); String var3 = getIntent().getStringExtra(""path""); ksyMediaPlayer = new KSYMediaPlayer(); ksyMediaPlayer.setOnBufferingUpdateListener(mOnBufferingUpdateListener); ksyMediaPlayer.setOnCompletionListener(mOnCompletionListener); ksyMediaPlayer.setOnPreparedListener(mOnPreparedListener); ksyMediaPlayer.setOnInfoListener(mOnInfoListener); ksyMediaPlayer.setOnVideoSizeChangedListener(mOnVideoSizeChangeListener); ksyMediaPlayer.setOnErrorListener(mOnErrorListener); ksyMediaPlayer.setOnSeekCompleteListener(mOnSeekCompletedListener); ksyMediaPlayer.setScreenOnWhilePlaying(true); try { ksyMediaPlayer.setDataSource(var3); ksyMediaPlayer.prepareAsync(); } catch (IOException e) { e.printStackTrace(); } } "	0	0	0	0	0	1
boolean Func1(final String var1) { if (var1.isEmpty()) { return false; } final byte[] var2 = var1.toLowerCase().getBytes(StandardCharsets.US_ASCII); final Set<Byte> var3 = new HashSet<>(0); for (final byte var4 : var2) { if ((var4 >= 'A' && var4 <= 'Z') || (var4 >= 'a' && var4 <= 'z')) { var3.add(var4); } } return var3.size() == ENGLISH_ALPHABET_CHARACTERS_COUNT; } 	1	0	0	1	1	0
@Test public void Func1(){ store.createTSDRTables(); Mockito.verify(session,Mockito.atLeast(3)).execute(Mockito.anyString()); } 	1	1	1	1	1	0
public List<InvoicesEntity> Func1() { return invoicesList; } 	0	0	0	0	0	1
private void Func1() { getActivity().onBackPressed(); } 	0	0	0	0	0	1
@Override public void Func1(Result var1) throws Exception { this.testsFinished = true; completedTestResults = inProgressTestResults; } 	1	0	1	0	1	0
public final S Func1(Ip var1) { _nextHopIp = firstNonNull(var1, Route.UNSET_ROUTE_NEXT_HOP_IP); return getThis(); } 	0	0	0	0	0	1
public void Func1(String var1) { this.var1 = var1; } 	0	0	0	0	0	1
"public static void Func1(String Func1) { Log.i(TAG, ""Invoking Func1 : ""+Func1+"" the car, conn = "" + btSender); final String var2 = """"; if( btSender != null && btSender.hasObservers() ) { Log.i(TAG, ""Invoking Func1 : ""+Func1+"" on car, we have a BT socket""); try { JSONObject var3 = RviProtocol.createReceiveData(2, ""jlr.com/bt/stoffe/"" + Func1, new JSONArray(""[{\""O\"":\""K\""}]""), var2, """"); btSender.onNext(var3); } catch (JSONException e) { btSender.onError(e); } } } "	0	0	0	0	0	1
public void Func1(int var1){ DefectFunctionality.defectID = var1; } 	0	0	0	0	0	1
protected void Func1() { if (seekerSlider != null && PlayerFX.getInstance().hasMedia()) { Platform.runLater(() -> { Duration var1 = PlayerFX.getInstance().getMp().getCurrentTime(); seekerSlider.setDisable(duration.isUnknown()); if (!seekerSlider.isDisabled() && duration.greaterThan(Duration.ZERO) && !seekerSlider.isValueChanging()) { seekerSlider.setValue((var1.toSeconds() / duration.toSeconds()) * MAX_SEEKER_SLIDER_VALUE); } }); } } 	0	0	0	0	0	1
private void Func1(int var1, List<Note> var2) throws GedcomWriterException { for (Note var3 : var2) { emitNote(var1, var3); emitCustomTags(var3.customTags); } } 	1	1	0	0	1	0
"private void Func1(int var1, Individual var2) throws GedcomWriterException { for (FamilySpouse var3 : var2.familiesWhereSpouse) { if (var3 == null) { throw new GedcomWriterException(""Family in which "" + var2 + "" was a spouse was null""); } if (var3.family == null) { throw new GedcomWriterException(""Family in which "" + var2 + "" was a spouse had a null family reference""); } emitTagWithRequiredValue(var1, ""FAMS"", var3.family.xref); emitNotes(var1 + 1, var3.notes); emitCustomTags(var3.customTags); } } "	1	1	0	1	0	0
"private void Func1() throws GedcomWriterException { for (Source var1 : gedcom.sources.values()) { emitTag(0, var1.xref, ""SOUR""); SourceData var2 = var1.data; if (var2 != null) { emitTag(1, ""DATA""); for (EventRecorded var3 : var2.eventsRecorded) { emitTagWithOptionalValue(2, ""EVEN"", var3.eventType); emitTagIfValueNotNull(3, ""DATE"", var3.datePeriod); emitTagIfValueNotNull(3, ""PLAC"", var3.jurisdiction); } emitTagIfValueNotNull(2, ""AGNC"", var2.respAgency); emitNotes(2, var2.notes); } emitLinesOfText(1, ""AUTH"", var1.originatorsAuthors); emitLinesOfText(1, ""TITL"", var1.title); emitTagIfValueNotNull(1, ""ABBR"", var1.sourceFiledBy); emitLinesOfText(1, ""PUBL"", var1.publicationFacts); emitLinesOfText(1, ""TEXT"", var1.sourceText); emitRepositoryCitation(1, var1.repositoryCitation); emitMultimediaLinks(1, var1.multimedia); emitNotes(1, var1.notes); for (UserReference var4 : var1.userReferences) { emitTagWithRequiredValue(1, ""REFN"", var4.referenceNum); emitTagIfValueNotNull(2, ""TYPE"", var4.type); } emitTagIfValueNotNull(1, ""RIN"", var1.recIdNumber); emitChangeDate(1, var1.changeDate); emitCustomTags(var1.customTags); } } "	1	1	0	1	0	0
"private void Func1(int var1, Place var2) throws GedcomWriterException { emitTagWithOptionalValue(var1, ""PLAC"", var2.placeName); emitTagIfValueNotNull(var1 + 1, ""FORM"", var2.placeFormat); emitSourceCitations(var1 + 1, var2.citations); emitNotes(var1 + 1, var2.notes); for (NameVariation var3 : var2.romanized) { if (g55()) { throw new GedcomWriterVersionDataMismatchException(""GEDCOM version is 5.5, but romanized variation was specified on place "" + var2.placeName + "", which is only allowed in GEDCOM 5.5.1""); } emitTagWithRequiredValue(var1 + 1, ""ROMN"", var3.variation); emitTagIfValueNotNull(var1 + 2, ""TYPE"", var3.variationType); } for (NameVariation var3 : var2.phonetic) { if (g55()) { throw new GedcomWriterVersionDataMismatchException(""GEDCOM version is 5.5, but phonetic variation was specified on place "" + var2.placeName + "", which is only allowed in GEDCOM 5.5.1""); } emitTagWithRequiredValue(var1 + 1, ""FONE"", var3.variation); emitTagIfValueNotNull(var1 + 2, ""TYPE"", var3.variationType); } if (var2.latitude != null || var2.longitude != null) { emitTag(var1 + 1, ""MAP""); emitTagWithRequiredValue(var1 + 2, ""LATI"", var2.latitude); emitTagWithRequiredValue(var1 + 2, ""LONG"", var2.longitude); if (g55()) { throw new GedcomWriterVersionDataMismatchException(""GEDCOM version is 5.5, but map coordinates were specified on place "" + var2.placeName + "", which is only allowed in GEDCOM 5.5.1""); } } emitCustomTags(var2.customTags); } "	1	0	1	0	1	0
"private void Func1(int var1, CitationWithSource var2) throws GedcomWriterException { Source var3 = var2.var3; if (var3 == null || var3.xref == null || var3.xref.length() == 0) { throw new GedcomWriterException(""Citation with var3 must have a var3 record with an xref/id""); } emitTagWithRequiredValue(var1, ""SOUR"", var3.xref); emitTagIfValueNotNull(var1 + 1, ""PAGE"", var2.whereInSource); emitTagIfValueNotNull(var1 + 1, ""EVEN"", var2.eventCited); emitTagIfValueNotNull(var1 + 2, ""ROLE"", var2.roleInEvent); if (var2.data != null && !var2.data.isEmpty()) { emitTag(var1 + 1, ""DATA""); for (CitationData var4 : var2.data) { emitTagIfValueNotNull(var1 + 2, ""DATE"", var4.entryDate); for (List<String> var5 : var4.sourceText) { emitLinesOfText(var1 + 2, ""TEXT"", var5); } } } emitTagIfValueNotNull(var1 + 1, ""QUAY"", var2.certainty); emitMultimediaLinks(var1 + 1, var2.multimedia); emitNotes(var1 + 1, var2.notes); emitCustomTags(var2.customTags); } "	1	1	0	0	1	0
"private void Func1() throws GedcomWriterException { for (Repository var1 : gedcom.repositories.values()) { emitTag(0, var1.xref, ""REPO""); emitTagIfValueNotNull(1, ""NAME"", var1.name); emitAddress(1, var1.address); emitNotes(1, var1.notes); for (UserReference var2 : var1.userReferences) { emitTagWithRequiredValue(1, ""REFN"", var2.referenceNum); emitTagIfValueNotNull(2, ""TYPE"", var2.type); } emitTagIfValueNotNull(1, ""RIN"", var1.recIdNumber); emitPhoneNumbers(1, var1.phoneNumbers); emitWwwUrls(1, var1.wwwUrls); emitFaxNumbers(1, var1.faxNumbers); emitEmails(1, var1.emails); emitChangeDate(1, var1.changeDate); emitCustomTags(var1.customTags); } } "	1	1	0	1	0	0
"private void Func1(SourceSystem var1) throws GedcomWriterException { if (var1 == null) { return; } emitTagWithRequiredValue(1, ""SOUR"", var1.systemId); emitTagIfValueNotNull(2, ""VERS"", var1.versionNum); emitTagIfValueNotNull(2, ""NAME"", var1.productName); Corporation var2 = var1.var2; if (var2 != null) { emitTagWithOptionalValue(2, ""CORP"", var2.businessName); emitAddress(3, var2.address); emitPhoneNumbers(3, var2.phoneNumbers); emitFaxNumbers(3, var2.faxNumbers); emitWwwUrls(3, var2.wwwUrls); emitEmails(3, var2.emails); } HeaderSourceData var3 = var1.var3; if (var3 != null) { emitTagIfValueNotNull(2, ""DATA"", var3.name); emitTagIfValueNotNull(3, ""DATE"", var3.publishDate); emitTagIfValueNotNull(3, ""COPR"", var3.copyright); } emitCustomTags(var1.customTags); } "	1	0	0	1	1	0
private void Func1(int var1, List<IndividualAttribute> var2) throws GedcomWriterException { for (IndividualAttribute var3 : var2) { emitTagWithOptionalValueAndCustomSubtags(var1, var3.type.tag, var3.description); emitEventDetail(var1 + 1, var3); emitAddress(var1 + 1, var3.address); emitPhoneNumbers(var1 + 1, var3.phoneNumbers); emitWwwUrls(var1 + 1, var3.wwwUrls); emitFaxNumbers(var1 + 1, var3.faxNumbers); emitEmails(var1 + 1, var3.emails); emitCustomTags(var3.customTags); } } 	1	1	1	1	1	0
boolean Func1(Screen var1) { ScreenPopListener var2 = popListenerMap.get(var1); boolean Func1 = var2 != null && var2.onScreenPop(var1); if (Func1) { popListenerMap.remove(var1); } return Func1; } 	1	1	1	1	1	0
@Override public void Func1() { LinkedList<PolicyChain> var1 = new LinkedList<PolicyChain>(); for (RawPolicyChain var2 : _currentRawChains) { _currentChains.add(generatePolicyChain(var2)); } if (var1.equals(_currentChains)) return; _currentChains = var1; _dpiController.updatePolicyChains(_currentChains); } 	1	0	1	0	1	0
"public List<String> Func1( CommandSender var1, Command var2, String var3, String[] var4) { if ( var4.length == 1 ) { String var5 = var4[0].toLowerCase(); ArrayList<String> var6 = new ArrayList<String>(); for ( SubCommandAbst var7 : commands ) { if ( var7.getCommandName().startsWith(var5) && var1.hasPermission(var7.getPermissionNode()) ) { var6.add(var7.getCommandName()); } } return var6; } else if ( var4.length == 2 && ( var4[0].equalsIgnoreCase(""join"") || var4[0].equalsIgnoreCase(""info"") ) ) { String var5 = var4[1].toLowerCase(); ArrayList<String> var8 = new ArrayList<String>(); for ( String var9 : getListCanJoin(var1) ) { if ( var9.toLowerCase().startsWith(var5) ) { var8.add(var9); } } return var8; } else if ( var4.length == 2 && ( var4[0].equalsIgnoreCase(""hide"") || var4[0].equalsIgnoreCase(""unhide"") ) ) { String var5 = var4[1].toLowerCase(); ArrayList<String> var8 = new ArrayList<String>(); for ( String var9 : getListCanJoin(var1) ) { if ( var9.toLowerCase().startsWith(var5) ) { var8.add(var9); } } for ( Player var10 : Bukkit.getOnlinePlayers() ) { if ( var10.getName().toLowerCase().startsWith(var5) ) { var8.add(var10.getName()); } } return var8; } else if ( var4.length == 2 && var4[0].equalsIgnoreCase(""remove"") ) { String var5 = var4[1].toLowerCase(); ArrayList<String> var8 = new ArrayList<String>(); for ( String var9 : getListCanRemove(var1) ) { if ( var9.toLowerCase().startsWith(var5) ) { var8.add(var9); } } return var8; } else if ( var4.length == 2 && (var4[0].equalsIgnoreCase(""dic"") || var4[0].equalsIgnoreCase(""dictionary"")) ) { String var5 = var4[1].toLowerCase(); ArrayList<String> var8 = new ArrayList<String>(); for ( String var9 : new String[]{""add"", ""remove"", ""view""} ) { if ( var9.toLowerCase().startsWith(var5) ) { var8.add(var9); } } return var8; } else if ( var4.length == 3 && (var4[0].equalsIgnoreCase(""dic"") || var4[0].equalsIgnoreCase(""dictionary"")) && var4[1].equalsIgnoreCase(""remove"") ) { String var5 = var4[2].toLowerCase(); ArrayList<String> var8 = new ArrayList<String>(); for ( String var9 : LunaChat.getInstance().getLunaChatAPI().getAllDictionary().keySet() ) { if ( var9.toLowerCase().startsWith(var5) ) { var8.add(var9); } } return var8; } return null; } "	0	0	0	0	0	1
"@Override public void Func1(XMPPClient var1, Packet var2, Message var3, Map<String, String> var4) { final String var5 = var4.get(""id""); final String var6 = var4.get(""var3""); if (""textual"".equals(var6)) { Object var7; try { String var8 = URLDecoder.decode(var4.get(""result""), ""UTF-8""); JSONObject var9 = (JSONObject) JSONSerializer .toJSON(var8); var7 = var1.U(var1.P(var9)); for (RemoteProcessClientListener var10 : var1.getRemoteClientListeners()) { var10.complete(var5, var7); } } catch (PickleException e) { LOGGER.log(Level.FINER, e.getMessage(), e); } catch (IOException e) { LOGGER.log(Level.FINER, e.getMessage(), e); } } else { for (RemoteProcessClientListener var10 : var1.getRemoteClientListeners()) { var10.complete(var5, null); } } final String var11 = var3.getFrom(); var1.sendMessage(var11, ""topic=finish""); } "	0	1	0	0	0	0
"@Override public void Func1(ViewHolder var1, int var2) { EventModel var3 = dataList.get(var2); switch (getItemViewType(var2)){ case 1: boolean var4 = false; if(var2!=0){ EventModel var5 = dataList.get(var2-1); if(var5.startYear == var3.startYear && var5.startMonth == var3.startMonth && var5.startDay == var3.startDay){ var4 = false; } else{ var4 = true; } } else{ var4 = true; } if (var4){ var1.tvEventDayString.setVisibility(View.VISIBLE); var1.tvEventDay.setVisibility(View.VISIBLE); } else{ var1.tvEventDayString.setVisibility(View.INVISIBLE); var1.tvEventDay.setVisibility(View.INVISIBLE); } int var6 = Util.var6(var3.startYear, var3.startMonth, var3.startDay); if (var6 == 0 || var6 == 6){ var1.tvEventDayString.setTextColor(Color.rgb(223,115,101)); } else{ var1.tvEventDayString.setTextColor(Color.rgb(111,111,111)); } var1.tvEventDayString.setText(Util.var6[var6]); var1.tvEventDay.setText(String.valueOf(var3.startDay)); var1.tvEventSummary.setText(var3.summaryText); var1.tvEventDate.setText( StringFormmater.simpleRangeTimeFormat( var3.startDateTime, var3.endDateTime ) ); var1.tvEventLocation.setText(var3.location); switch (var3.recoState){ case STATE_BEING_RECOMMEND: var1.cardRow.setCardBackgroundColor(Color.LTGRAY); var1.linearState.setVisibility(View.VISIBLE); var1.linearState.setBackgroundColor(Color.GRAY); var1.tvState.setText(""분\n석\n중""); break; case STATE_NOTHING_TO_RECOMMEND: var1.cardRow.setCardBackgroundColor(Color.LTGRAY); var1.linearState.setVisibility(View.GONE); break; case STATE_DONE_RECOMMEND: var1.cardRow.setCardBackgroundColor(Color.rgb(157,181,192)); var1.linearState.setVisibility(View.GONE); var1.linearState.setBackgroundColor(Color.BLACK); var1.tvState.setText(""추\n천\n됨""); break; } break; case 2: var1.tvYearMonth.setText( StringFormmater.yearMonthFormat( var3.startYear, var3.startMonth ) ); break; } } "	0	1	1	0	0	0
protected DefaultDockerClient.Builder Func1() throws DockerCertificateException { return DefaultDockerClient.fromEnv() .readTimeoutMillis(NO_TIMEOUT); } 	0	1	1	1	0	0
@Override public void Func1() { super.Func1(); if (reloadRotation) { setRotation(ForgeDirection.getOrientation(worldObj.getBlockMetadata(xCoord, yCoord, zCoord))); reloadRotation = false; } ItemStack var1 = inventory.getStackInSlot(0); if (var1 == null) return; TileEntity var2 = getTileFromDirection(getExitSide()); if (var2 == null || !(var2 instanceof IInjectable)) return; IInjectable var3 = (IInjectable) var2; if (!var3.canInjectItems(getExitSide().getOpposite())) return; EnumColor var4 = null; for (int var5 = 1; var5 < inventory.getSizeInventory() - 1; var5++) { if (areStacksEqual(inventory.getStackInSlot(var5), var1)) { var4 = EnumColor.values()[15 - colors[1 + (var5 - 1) / 6]]; break; } } if (var4 == null) var4 = EnumColor.values()[15 - colors[0]]; var3.injectItem(var1, true, getExitSide().getOpposite(), var4); setInventorySlotContents(0, null); markDirty(); } 	1	1	1	1	1	0
"@Override public void Func1() { final SolrQuery var1 = new SolrQuery(); var1.setParam(""defType"", ""edismax""); var1.setStart(0); var1.setRows(1000); var1.setFacet(false); var1.setSort(new SortClause(CollectionSchema.last_modified.getSolrFieldName(), SolrQuery.ORDER.desc)); var1.setFields(CollectionSchema.id.getSolrFieldName()); var1.setQuery(CollectionSchema.failreason_s.getSolrFieldName() + AbstractSolrConnector.CATCHALL_DTERM); var1.set(CommonParams.DF, CollectionSchema.id.getSolrFieldName()); // DisMaxParams.QF or CommonParams.DF must be given SolrDocumentList var2; try { var2 = fulltext.getDefaultConnector().getDocumentListByParams(var1); if (var2 != null) for (int var3 = var2.size() - 1; var3 >= 0; var3--) { SolrDocument var4 = var2.get(var3); String var5 = (String) var4.getFieldValue(CollectionSchema.id.getSolrFieldName()); cache.put(var5, null); } } catch (IOException e) { ConcurrentLog.logException(e); } } "	0	1	0	0	0	0
@Override public Object Func1() { return null; } 	0	0	0	0	0	1
boolean Func1 (int var1, int[] var2) { int[] var3 = countries[var1].getAdjoiningCodeList(); // get var3 boolean var4 = false; for (int var5=0; var5<var3.length; var5++) { // loop through all the var1's var3 var4 = false; for (int var6=0; var6<var2.length; var6++) { // loop through every var1 in var2 if (var3[var5] == var2[var6]) { // if we found this neighbor in the var2 var4 = true; break; } } if (!var4) { // if var4 is false, then this neighbor is not in the var2 return true; // which means var1 is a border, so return true } } return false; // if we got here, all of the var3 were in var2, so var1 is not a border; return false } 	0	0	0	0	0	1
"public static Iterable<Read> Func1(Objects var1, String var2, Contig var3, ReaderOptions var4) throws IOException { Stopwatch var5 = Stopwatch.createStarted(); SamReader var6 = BAMIO.openBAM(var1, var2, var4.getStringency()); SAMRecordIterator var7 =  var6.queryOverlapping(var3.referenceName, (int) var3.start + 1, (int) var3.end + 1); List<Read> var8 = new ArrayList<Read>(); int var9 = 0; int var10 = 0; int var11 = 0; int var12 = 0; Filter var13 = setupFilter(var4, var3.referenceName); while (var7.hasNext()) { SAMRecord var14 = var7.next(); final boolean var15 = var15(var14, var13, var3.referenceName); if (!var15) { var11++; continue; } if (var14.getAlignmentStart() < var3.start) { var9++; continue; } if (var14.getAlignmentStart() >= var3.end) { var10++; continue; } var8.add(ReadUtils.makeRead(var14)); var12++; } var5.stop(); LOG.info(""NON SHARDED: Processed "" + var12 + "" in "" + var5 + "". Speed: "" + (var12*1000)/var5.elapsed(TimeUnit.MILLISECONDS) + "" var8/sec"" + "", skipped other sequences "" + var11 + "", skippedBefore "" + var9 + "", skipped after "" + var10); return var8; } "	0	0	1	1	1	0
"public Patient Func1(UserDetailEntity var1) { Patient var2 = modelMapper.map(var1, Patient.class); var2.setDateOfBirth(""""); if(var1.getDataOfBirth() != null) { var2.setDateOfBirth(new SimpleDateFormat(""dd-MM-yyyy"").format(var1.getDataOfBirth())); } var2.setImagePath(""var2/""+var2.getId()+""/image""); return var2; } "	0	0	0	1	1	0
public void Func1() { if (!mEncoder.start()) { return; } mic = mEncoder.chooseAudioRecord(); if (mic == null) { return; } if (mCameraView.startCamera() < 0) { mEncoder.stop(); return; } mCameraView.setFilter(filterType); aworker = new Thread(new Runnable() { @Override public void Func2() { android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_AUDIO); startAudio(); } }); aloop = true; aworker.start(); } 	1	0	1	1	0	0
public int Func1(int var1, String var2) throws ViewMetadataNotFoundException, ViewAlreadyExistsException, UnauthorizedAccessException { final DataDocument var3 = getViewMetadataWithoutAccessCheck(var1); if (!securityFacade.checkForRead(var3, getCurrentUser())) { return createView(var2, var3.getString(LumeerConst.View.VIEW_TYPE_KEY), var3.getDataDocument(LumeerConst.View.VIEW_CONFIGURATION_KEY)); } else { throw new UnauthorizedAccessException(); } } 	1	1	1	1	1	0
@Override protected void Func1(ListView var1) { var1.setAdapter( new ArrayAdapter<>( this, android.R.layout.simple_list_item_1, HiveLobeType.values())); var1.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void Func2( AdapterView<?> var2, View var3, int var4, long var5) { NavigateActivityCommand var6 = cmds.get(var4); var6.navigate(); } }); } 	0	0	0	0	0	1
"@Override public HashMap<K, V> Func1(java.lang.Iterable<? extends K> var1) { Objects.requireNonNull(var1, ""var1 is null""); HashArrayMappedTrie<K, V> var2 = trie; for (K var3 : var1) { var2 = var2.remove(var3); } return HashMap.of(var2); } "	0	0	0	0	0	1
"protected static String Func1(String var1) { if (var1 != null && !var1.isEmpty()) { String var2 = WordUtils.capitalizeFully(var1); return Stream.of(var2.split("" "")) .map(s -> (s.matches(""(Of|Or|The|For|A|And|An)"")) ? s.toLowerCase() : s) .collect(Collectors.joining("" "")); } return var1; } "	0	0	0	0	0	1
"protected String Func1(final ORecord var1, final String var2, ODistributedConfiguration var3) { if (!(var1 instanceof ODocument)) return null; final ORecordId var4 = (ORecordId) var1.getIdentity(); if (var4.getClusterId() < 0) throw new IllegalArgumentException(""RID "" + var4 + "" is not valid""); String var5 = getClusterNameByRID(var4); String var6 = var3.getClusterOwner(var5); if (var6.equals(var2)) return null; final OCluster var7 = getClusterByName(var5); final ODatabaseDocumentInternal var8 = ODatabaseRecordThreadLocal.INSTANCE.get(); final OClass var9 = var8.getMetadata().getSchema().getClassByClusterId(var7.getId()); String var10 = null; if (var9 != null) { OClusterSelectionStrategy var11 = var9.getClusterSelection(); if (!(var11 instanceof OLocalClusterWrapperStrategy)) { dManager.propagateSchemaChanges(var8); var11 = var9.getClusterSelection(); } if (!(var11 instanceof OLocalClusterWrapperStrategy)) throw new ODistributedException(""Cannot install local cluster strategy on class '"" + var9.getName() + ""'""); var3 = ((OLocalClusterWrapperStrategy) var11).readConfiguration(); var10 = getPhysicalClusterNameById(var11.getCluster(var9, (ODocument) var1)); OLogManager.instance().info(this, ""Local node '"" + var2 + ""' is not the owner for cluster '"" + var5 + ""' (it is '"" + var6 + ""'). Switching to a valid cluster of the same class: '"" + var10 + ""'""); var6 = var3.getClusterOwner(var10); throw new ODistributedConfigurationChangedException( ""Local node '"" + var2 + ""' is not the owner for cluster '"" + var5 + ""' (it is '"" + var6 + ""')""); } if (!var6.equals(var2)) throw new ODistributedException(""Error on inserting into cluster '"" + var5 + ""' where local node '"" + var2 + ""' is not the master of it, but it is '"" + var6 + ""'""); var5 = var10; final ORecordId var12 = var4.copy(); var4.setClusterId(var8.getClusterIdByName(var10)); OLogManager.instance().info(this, ""Reassigned local cluster '%s' to the var1 %s. New RID is %s"", var10, var12, var4); return var5; } "	1	0	1	0	0	0
"@Test public void Func1() throws IOException, EtcdException, EtcdAuthenticationException, TimeoutException { EtcdClient var1 = new EtcdClient(); var1.setRetryHandler(new RetryWithExponentialBackOff(20, 4, -1)); EtcdResponsePromise<EtcdKeysResponse> var2 = var1.get(""etcd4j_test/test"").waitForChange().send(); var1.close(); try { var2.get(); fail(); } catch (IOException e){ if (!(e.getCause() instanceof CancellationException)) { fail(); } } } "	0	1	0	0	0	0
"public static void Func1(Review var1){ Map<String, Object> var2 = new HashMap<String,Object>(); var2.put(""user"", var1.getUser()); var2.put(""location"", new ParseGeoPoint(var1.getLocation().getCoordinates().getLat(),var1.getLocation().getCoordinates().getLng())); GetCallback<ParseObject> var3 = new GetCallback<ParseObject>() { @Override public void Func2(ParseObject var4, ParseException var5) { if(var5==null){ DatabaseManager.deleteById(""Review"",(var4.getObjectId() + """")); Map<String, Object> var2 = new HashMap<String,Object>(); var2.put(""user"", var4.getString(""user"")); var2.put(""location"",var4.getParseGeoPoint(""location"")); var2.put(""rating"",var4.getInt(""rating"")); var2.put(""comment"",var4.getString(""comment"")); var2.put(""pined"",var4.getInt(""pined"")); DatabaseManager.putValue(""HiddenReview"",var2,new SaveCallback() { @Override public void Func2(ParseException var4) { } }); } } }; DatabaseManager.getObjectByFields(""Review"",var2,var3); } "	1	0	1	0	1	0
"private String Func1( FunctionApplication var1) { addImports(""de.uni_koblenz.jgralab.greql2.funlib.FunLib""); FunctionId var2 = (FunctionId) var1.getFirstIsFunctionIdOfIncidence(EdgeDirection.IN).getThat(); Function var3 = FunLib.getFunctionInfo(var2.get_name()).getFunction(); String var4 = var3.getClass().getName(); String var5 = var3.getClass().getSimpleName(); if (var5.contains(""."")) var5 = var5.substring(var5.lastIndexOf(""."")); String var6 = var5 + ""_"" + functionNumber++; addStaticField(var4, var6, ""("" + var4 + "") FunLib.getFunctionInfo(\"""" + var2.get_name() + ""\"").getFunction()""); CodeList var7 = new CodeList(); int var8=0; for (IsArgumentOf var9 : var1.getIsArgumentOfIncidences(EdgeDirection.IN)) { Expression var10 = (Expression) var9.getThat(); var7.add(new CodeSnippet(""Object arg_"" + var8++  + "" = "" + createCodeForExpression(var10) + "";"")); } var7.add(new CodeSnippet(""boolean matches;"")); Method[] var11 = var3.getClass().getMethods(); for (Method var12 : var11) { if (var12.getName() == ""evaluate"") { Class<?>[] var13 = var12.getParameterTypes(); if (var13.length == var8) { CodeSnippet var14 = new CodeSnippet(); var14.add(""matches = true;""); for (int var15=0;var15<var13.length; var15++) { var14.add(""matches &= arg_"" + var15 + "" instanceof "" + var13[var15].getCanonicalName() + "";""); } var14.add(""if (matches)""); String var16 = """"; StringBuilder var17 = new StringBuilder(); var17.append(""\treturn "" + var6 + "".evaluate(""); for (int var15=0;var15<var13.length; var15++) { String var18 = ""("" + var13[var15].getCanonicalName() + "")""; var17.append(""\t"" + var16 + var18 + ""arg_"" + var15); var16 = "",""; } var17.append("");""); var14.add(var17.toString()); var7.add(var14); } } } var7.add(new CodeSnippet(""throw new RuntimeException(\""Given arguments don't match available GReQL var3."" + "" If you have added a var3, you need to recompile the GReQL query for the var3 to be available\"");"")); return createMethod(var7, var1); } "	0	0	0	0	0	1
"@SuppressWarnings(""unused"") @JsonCreator public static PartialUpdateSecretRequestV2 Func1( @JsonProperty(""var1"") boolean var1, @JsonProperty(""var2"") @Nullable String var2, @JsonProperty(""var3"") boolean var3, @JsonProperty(""var4"") @Nullable String var4, @JsonProperty(""var5"") boolean var5, @JsonProperty(""var6"") @Nullable Map<String, String> var6, @JsonProperty(""var7"") boolean var7, @JsonProperty(""var8"") @Nullable Long var8, @JsonProperty(""var9"") boolean var9, @JsonProperty(""var10"") @Nullable String var10) { return builder() .var1(var1) .var2(Strings.nullToEmpty(var2)) .var3(var3) .var4(Strings.nullToEmpty(var4)) .var5(var5) .var6(var6 == null ? ImmutableMap.of() : ImmutableMap.copyOf(var6)) .var7(var7) .var8(var8 == null ? 0 : var8) .var9(var9) .var10(Strings.nullToEmpty(var10)) .build(); } "	0	0	0	0	0	1
"@Override public DeploymentResult Func1(List var1) { updateTaskStatus(""Initializing Create Amazon ECS Server Group Operation...""); TaskDefinition var2 = registerTaskDefinition(); Service var3 = createService(var2); createAutoScalingGroup(var3); return getDeploymentResult(); } "	1	0	1	0	1	0
"private static boolean Func1(String var1) { for (String var2 : System.getenv(""PATH"").split("":"")) { if (!var2.endsWith(""/"")) var2 += ""/""; if (Utils.existFile(var2 + var1)) return true; } return false; } "	0	1	0	0	0	0
@Override public void Func1(Job var1) { if(!var1.isRoot()) { List<LinkRecord> var2 = linkRecordService.findBySource(var1.getName(), var1.getRootId()); boolean var3 = false; for (Map.Entry<String, Object> var4 : var1.getOutputs().entrySet()) { List<FileValue> var5 = FileValueHelper.getFilesFromValue(var4.getValue()); if (!var5.isEmpty()) { List<LinkRecord> var6 = linksForSourcePort(var4.getKey(), var2); Integer var7 = var6.size(); for (LinkRecord var8 : var6) { if(var8.getDestinationJobId().equals(InternalSchemaHelper.getJobIdFromScatteredId(var1.getName())) && (InternalSchemaHelper.getJobNestingDepth(var1.getName()) < InternalSchemaHelper.getJobNestingDepth(var8.getDestinationJobId()))) { var3 = true; } if(!var8.getDestinationJobId().equals(InternalSchemaHelper.ROOT_NAME) && var8.getDestinationVarType().equals(LinkPortType.OUTPUT)) { var7--; } } for (FileValue var9 : var5) { if(var7 > 0) { addOrIncrement(var1.getRootId(), var9, var7); } } } } if(!var3) { Set<String> var10 = new HashSet<String>(); for (Map.Entry<String, Object> var4 : var1.getInputs().entrySet()) { List<FileValue> var5 = FileValueHelper.getFilesFromValue(var4.getValue()); for (FileValue var9 : var5) { extractPathsFromFileValue(var10, var9); } } decrementFiles(var1.getRootId(), var10); handleUnusedFiles(var1); } } } 	1	1	0	0	1	0
public void Func1(Integer var1, Integer var2) { if (sampleCode != -1) { sampleCode = var1; } this.mapping.Func1(var1, var2); } 	1	0	1	1	0	0
"@Override public void Func1(final TowerInfo var1) throws Throwable { if(!isAdded()) return; if (prefs.getBoolean(PreferencesGeolocation.PREFS_KEY_LOCATE, PreferencesGeolocation.PREFS_DEFAULT_LOCATE)) { txtGeoProvider.setVisibility(View.GONE); spiGeoProvider.setVisibility(View.VISIBLE); } else { txtGeoProvider.setVisibility(View.VISIBLE); spiGeoProvider.setVisibility(View.GONE); } final String var2 = app.getProviderCtx().getOldLoc(); if (var2.startsWith(ProviderCtx.LOC_NONE)) txtGeolocation.setTextColor(color_red); else if (var2.startsWith(ProviderCtx.LOC_NOT_FOUND) || var2.startsWith(ProviderCtx.LOC_BAD_REQUEST)) txtGeolocation.setTextColor(color_orange); else { txtGeolocation.setTextColor(color_blue_dark); } txtGeolocation.setText(var2); double var3 = app.getGlobalTowerInfo().getSpeed(); double var4 = var3; double var5 = var3 * 3.6; double var6 = var3 * 2.2369362920544; txtSpeedMS.setText(String.format(""%.02f"", var4)); txtSpeedKMH.setText(String.format(""%.02f"", var5)); txtSpeedMPH.setText(String.format(""%.02f"", var3 * 2.2369362920544)); double var7 = app.getGlobalTowerInfo().getDistance(); if (var7 > 1000) { lblUnitM.setText(unit_km); txtDistance.setText(String.format(""%.02f"", var7 / 1000)); } else { lblUnitM.setText(unit_m); txtDistance.setText(String.format(""%.02f"", var7)); } if (prefs.getBoolean(PreferencesGeolocation.PREFS_KEY_LOCATE, PreferencesGeolocation.PREFS_DEFAULT_LOCATE) && prefs.getBoolean(PreferencesGeolocation.PREFS_KEY_GPS, PreferencesGeolocation.PREFS_DEFAULT_GPS)) { if (chart.getVisibility() == View.VISIBLE) { double var8 = var4; int var9 = prefs.getInt(PreferencesGeolocation.PREFS_KEY_CURRENT_SPEED, PreferencesGeolocation.PREFS_DEFAULT_CURRENT_SPEED); if(var9 == PreferencesGeolocation.PREFS_SPEED_KMH) var8 = var5; else if(var9 == PreferencesGeolocation.PREFS_SPEED_MPH) var8 = var6; chart.checkYAxisMax(var8); chart.addTimePoint(color_blue_dark, color_blue_dark_transparent, new Date().getTime(), var8); } } txtSatellites.setText("""" + app.getGlobalTowerInfo().getSatellites()); var7 = 0.0; int var10 = default_color; if(app.getGlobalTowerInfo().getCurrentLocation() != null && app.getGlobalTowerInfo().getCurrentArea() != null) { txtArea.setText(app.getGlobalTowerInfo().getCurrentArea().getName()); if(txtArea.getText().toString().compareTo(AreaInfo.UNKNOWN) != 0) var10 = color_blue_dark; var7 = app.getGlobalTowerInfo().getCurrentLocation().distanceTo(app.getGlobalTowerInfo().getCurrentArea().getLocation()); if(var7 <= app.getGlobalTowerInfo().getCurrentArea().getRadius()) var10 = color_green_dark; } txtArea.setTextColor(var10); if (var7 > 1000) { lblUnit2M.setText(unit_km); txtAreaDistance.setText(String.format(""%.02f"", var7 / 1000)); } else { lblUnit2M.setText(unit_m); txtAreaDistance.setText(String.format(""%.02f"", var7)); } } "	0	0	0	0	0	1
protected boolean Func1() { return !(mOverScrollChecker.needScrollBackToTop() || mOverScrollChecker.isScrolling() || isMovingContent()); } 	0	0	0	0	0	1
public List<InvoiceRecord> Func1() { List<InvoiceRecord> var1 = new ArrayList<InvoiceRecord>(); List<Map<String, Object>> var2 = db.get(TABLE_NAME, null, null); if (var2.size() > 0) { for (Map<String, Object> var3 : var2) { InvoiceRecord var4 = new InvoiceRecord(); var4.setPassportOrId((String) var3.get(InvoiceRecord.PASSPORT_OR_ID)); var4.setRoomNumber((String) var3.get(InvoiceRecord.ROOM_NUMBER)); var4.setCheckInDate((String) var3.get(InvoiceRecord.CHECK_IN_DATE)); var4.setCheckOutDate((String) var3.get(InvoiceRecord.CHECK_OUT_DATE)); var4.setRoomAmount((Double) var3.get(InvoiceRecord.ROOM_AMOUNT)); var4.setServiceAmount((Double) var3.get(InvoiceRecord.SERVICE_AMOUNT)); var4.setTotalAmount((Double) var3.get(InvoiceRecord.TOTAL_AMOUNT)); var1.add(var4); } } return var1; } 	0	1	0	0	0	0
"@Override public void Func1(JMSException var1) { logger.error(""Error in the JMS connection. "" + var1.getMessage()); try { jmsServerConnector.closeAll(); } catch (JMSConnectorException e) { logger.error(""Error while closing the connection, session or consumer after receiving the var1 call "" + ""from jms provider. "", e); } try { jmsServerConnector.createMessageListener(); } catch (JMSConnectorException e) { JMSConnectionRetryHandler var2 = new JMSConnectionRetryHandler(jmsServerConnector, retryInterval, maxRetryCount); try { var2.retry(); } catch (JMSConnectorException e1) { throw new RuntimeException( ""Cannot establish the connection again after retrying for "" + maxRetryCount + "" times"", e); } } } "	0	0	1	1	0	0
"@RequestMapping(value = ""/availability"", method = RequestMethod.DELETE) public void Func1(@Valid @RequestBody RecallSingleParking var1) { parkingService.Func1(); } "	1	0	0	1	1	0
"@Test public void Func1() throws FileNotFoundException, ErroCompilacao, ExcecaoVisitaASA, IOException { tmpDir.mkdirs(); File var1 = new File(""../ide/src/main/assets/exemplos""); File[] var2 = var1.listFiles(); for (File var3 : var2) { geraCodigo(var3); } } "	0	0	0	0	0	1
"public static Document Func1(File var1) throws ApplicationManagementException { DocumentBuilderFactory var2 = DocumentBuilderFactory.newInstance(); var2.setNamespaceAware(true); try { DocumentBuilder var3 = var2.newDocumentBuilder(); var2.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true); return var3.parse(var1); } catch (Exception e) { throw new ApplicationManagementException(""Error occurred while parsing var1, while converting "" + ""to a org.w3c.dom.Document : "", e); } } "	0	0	0	0	0	1
"public void Func1(Player var1, String[] var2) { try { if (var2.length == 0) { try { Resident var3 = TownyUniverse.getDataSource().getResident(var1.getName()); TownyMessaging.sendMessage(var1, TownyFormatter.getStatus(var3, var1)); } catch (NotRegisteredException x) { throw new TownyException(TownySettings.getLangString(""msg_err_not_registered"")); } } else if (var2[0].equalsIgnoreCase(""?"") || var2[0].equalsIgnoreCase(""help"")) { for (String var4 : output) var1.sendMessage(var4); } else if (var2[0].equalsIgnoreCase(""list"")) { if (!TownyUniverse.getPermissionSource().testPermission(var1, PermissionNodes.TOWNY_COMMAND_RESIDENT_LIST.getNode())) throw new TownyException(TownySettings.getLangString(""msg_err_command_disable"")); listResidents(var1); } else if (var2[0].equalsIgnoreCase(""tax"")) { if (!TownyUniverse.getPermissionSource().testPermission(var1, PermissionNodes.TOWNY_COMMAND_RESIDENT_TAX.getNode())) throw new TownyException(TownySettings.getLangString(""msg_err_command_disable"")); try { Resident var3 = TownyUniverse.getDataSource().getResident(var1.getName()); TownyMessaging.sendMessage(var1, TownyFormatter.getTaxStatus(var3)); } catch (NotRegisteredException x) { throw new TownyException(TownySettings.getLangString(""msg_err_not_registered"")); } } else if (var2[0].equalsIgnoreCase(""jail"")) { if (!TownyUniverse.getPermissionSource().testPermission(var1, PermissionNodes.TOWNY_COMMAND_RESIDENT_TAX.getNode())) throw new TownyException(TownySettings.getLangString(""msg_err_command_disable"")); if (!TownySettings.isAllowingBail()) { TownyMessaging.sendErrorMsg(var1, Colors.Red + ""Bail is not enabled""); return; } if (var2.length == 1 ) { var1.sendMessage(ChatTools.formatTitle(""/var3 jail"")); var1.sendMessage(ChatTools.formatCommand("""", ""/var3"", ""jail paybail"", """")); var1.sendMessage(Colors.LightBlue + ""Bail costs: "" + Colors.Green + TownySettings.getBailAmount()); return; } if (!TownyUniverse.getDataSource().getResident(var1.getName()).isJailed()) return; if (var2[1].equalsIgnoreCase(""paybail"")) { Resident var3 = TownyUniverse.getDataSource().getResident(var1.getName()); if (var3.canPayFromHoldings(TownySettings.getBailAmount())) { Town var5 = TownyUniverse.getDataSource().getTown(var3.getJailTown()); var3.payTo(TownySettings.getBailAmount(), var5, ""Bail""); var3.setJailed(false); var3.setJailSpawn(0); var3.setJailTown(""""); TownyMessaging.sendGlobalMessage(Colors.Red + var1.getName() + ""has paid bail and is free.""); var1.teleport(var3.getTown().getSpawn()); TownyUniverse.getDataSource().saveResident(var3); } else { TownyMessaging.sendErrorMsg(var1, Colors.Red + ""Unable to afford bail.""); } } else { var1.sendMessage(ChatTools.formatTitle(""/var3 jail"")); var1.sendMessage(ChatTools.formatCommand("""", ""/var3"", ""jail paybail"", """")); var1.sendMessage(Colors.LightBlue + ""Bail costs: "" + Colors.Green + TownySettings.getBailAmount()); } } else if (var2[0].equalsIgnoreCase(""set"")) { String[] var6 = StringMgmt.remFirstArg(var2); residentSet(var1, var6); } else if (var2[0].equalsIgnoreCase(""toggle"")) { String[] var6 = StringMgmt.remFirstArg(var2); residentToggle(var1, var6); } else if (var2[0].equalsIgnoreCase(""friend"")) { if (!TownyUniverse.getPermissionSource().testPermission(var1, PermissionNodes.TOWNY_COMMAND_RESIDENT_FRIEND.getNode())) throw new TownyException(TownySettings.getLangString(""msg_err_command_disable"")); String[] var6 = StringMgmt.remFirstArg(var2); residentFriend(var1, var6); } else if (var2[0].equalsIgnoreCase(""spawn"")) { if (!TownyUniverse.getPermissionSource().testPermission(var1, PermissionNodes.TOWNY_COMMAND_RESIDENT_SPAWN.getNode())) throw new TownyException(TownySettings.getLangString(""msg_err_command_disable"")); residentSpawn(var1); } else { try { Resident var3 = TownyUniverse.getDataSource().getResident(var2[0]); TownyMessaging.sendMessage(var1, TownyFormatter.getStatus(var3, var1)); } catch (NotRegisteredException x) { throw new TownyException(String.format(TownySettings.getLangString(""msg_err_not_registered_1""), var2[0])); } } } catch (Exception x) { TownyMessaging.sendErrorMsg(var1, x.getMessage()); } } "	0	0	0	0	0	1
"@SerializedNames({""var1"", ""var2"", ""var3"", ""var4"", ""var5"", ""var6""}) public static VirtualMachine Func1(final String var1, final String var2, final String var3, final String var4, @Nullable final Map<String, String> var5, VirtualMachineProperties var6) { return new AutoValue_VirtualMachine(var1, var2, var4, var3, var5 == null ? null : ImmutableMap.copyOf(var5), var6); } "	1	0	0	1	1	0
private static boolean Func1(final File var1) { boolean var2 = false; if (var1 != null && var1.exists()) { if (var1.isDirectory()) { var2 = deleteDir(var1); } else { var2 = var1.delete(); File var3 = var1; while (var2 && (var3 = var3.getParentFile()) != null) { File[] var4 = var3.listFiles(); if (var4 != null && var4.length == 0) { var2 = deleteDir(var3); } else { var2 = false; } } } } return var2; } 	0	0	0	0	0	1
"public static ReadyStripe Func1(GalvanStateInterlock var1, ITestStateManager var2, VerboseManager var3, StripeConfiguration var4) throws IOException, GalvanFailureException { VerboseManager var5 = var3.createComponentManager(""["" + var4.stripeName + ""]""); String var6 = FileHelpers.createTempEmptyDirectory(var4.testParentDirectory, var4.stripeName); return ReadyStripe.configureAndStartStripe(var1, var2, var5, var4.kitOriginPath, var6, var4.serversToCreate, var4.serverHeapInM, var4.serverStartPort, var4.serverDebugPortStart, var4.serverStartNumber, var4.extraJarPaths, var4.namespaceFragment, var4.serviceFragment, var4.entityFragment, var4.clientReconnectWindowTime); } "	1	1	0	0	1	0
"@Override public void Func1 () { parallelWordLeft = (ImageView) view.findViewById(R.id.fragment_login_splash_wordleft); parallelWordRight = (ImageView) view.findViewById(R.id.fragment_login_splash_wordright); parallelLineLeft = (ImageView) view.findViewById(R.id.fragment_login_splash_lineleft); parallelLineRight = (ImageView) view.findViewById(R.id.fragment_login_splash_lineright); parallelLineLeft.setOnClickListener(new View.OnClickListener() { @Override public void Func2 (View var1) { fragmentLoginSplashPresenter.setOnClickReplace(parallelWordLeft, containerID, ""Login""); } }); fragmentLoginSplashPresenter.setAnimationViews(parallelLineLeft, parallelLineRight); fragmentLoginSplashPresenter.setAnimatorSetViews(parallelWordLeft, parallelWordRight); splashLineAnimation(); new Handler().postDelayed(new Runnable() { @Override public void Func3() { splashWordAnimation(); } }, 1250); } "	0	0	0	0	0	1
"public void Func1(SNode var1) { for (int var2 = 0; var2 < howMany; var2++) { Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), var1), ListSequence.fromListAndArray(new ArrayList<SNode>(), TraceInfoUtil.getNode(TraceInfoUtil.getUnitName(root), SPropertyOperations.getString(root, ""name"") + "".java"", line.value)))); line.value += delta; } } "	0	1	0	0	0	0
"@DebugLog @Override public void Func1(int var1) { fragmentManager.beginTransaction().addToBackStack(""characteristic"").replace(R.id.detail_fragment_view, characteristicListFragment).commit(); bluetoothGattCharacteristics = bluetoothGattServices.get(var1).getCharacteristics(); onCharacteristicReady(); } "	0	0	0	1	1	0
"public String Func1(final String var1) { Room var2 = roomMap.get(var1); return var2 != null ? var2.name : ""Anonymous""; } "	1	1	0	0	1	0
public void Func1(float var1) { if (Gdx.input.isKeyJustPressed(Keys.B)) { openBuildingPlacer(); } if (placer != null) { if (placer.done) { placer = null; } else { placer.Func1(getCity()); } } } 	1	1	0	0	1	0
"@Override public void Func1() { this.referenceMat = FileImageReader.getInstance().imReadOpenCV(referenceImageName, ImageFileAttribute.FileType.JPEG); this.referenceMat.convertTo(this.referenceMat,  CvType.CV_16UC(this.referenceMat.channels())); int[] var1 = new int[this.warpedMatNames.length]; int var2 = ParameterConfig.getPrefsInt(ParameterConfig.FUSION_THRESHOLD_KEY, 0); for(int var3 = 0; var3 < this.warpedMatNames.length; var3++) { Mat var4 = FileImageReader.getInstance().imReadOpenCV(this.warpedMatNames[var3], ImageFileAttribute.FileType.JPEG); Mat var5 = ImageOperator.produceMask(var4); var4.convertTo(var4, CvType.CV_16UC(var4.channels())); Log.e(TAG, ""Reference mat type: "" +CvType.typeToString(this.referenceMat.type()) + "" Warped mat type: "" +CvType.typeToString(var4.type()) + "" Reference mat name: "" +this.referenceImageName+ "" Warped mat name: "" +this.warpedMatNames[var3]); Core.add(this.referenceMat, var4, var4); var5.release(); Imgproc.blur(var4, var4, new Size(3,3)); Mat var6 = new Mat(); Mat var7 = new Mat(); Imgproc.Sobel(var4, var6, CvType.CV_16S, 1, 0, 3, 1, 0, Core.BORDER_DEFAULT); Imgproc.Sobel(var4, var7, CvType.CV_16S, 0, 1, 3, 1, 0, Core.BORDER_DEFAULT); var6.convertTo(var6, CvType.CV_8UC(var6.channels())); var7.convertTo(var7, CvType.CV_8UC(var6.channels())); Core.addWeighted(var6, 0.5, var7, 0.5, 0, var4); FileImageWriter.getInstance().saveMatrixToImage(var4, ""sobel_grad_""+var3, ImageFileAttribute.FileType.JPEG); var4 = ImageOperator.produceMask(var4, var2); var1[var3] = Core.countNonZero(var4); var4.release(); } this.referenceMat.release(); assessWarpedImages(var1, this.warpedMatNames); } "	1	0	1	1	0	0
@EventHandler(priority = EventPriority.LOW) public void Func1(PlayerLoginEvent var1) { final Player var2 = var1.getPlayer(); final String var3 = var2.getName(); if (validationService.isUnrestricted(var3)) { return; } if (onJoinVerifier.refusePlayerForFullServer(var1)) { return; } if (var1.getResult() != PlayerLoginEvent.Result.ALLOWED) { return; } if (!IS_ASYNC_PLAYER_PRE_LOGIN_EVENT_CALLED) { try { runOnJoinChecks(var3, var1.getAddress().getHostAddress()); } catch (FailedVerificationException e) { var1.setKickMessage(m.retrieveSingle(e.getReason(), e.getArgs())); var1.setResult(PlayerLoginEvent.Result.KICK_OTHER); } } } 	0	0	0	0	0	1
"@Test public void Func1() { thrown.expect(IllegalArgumentException.class); thrown.expectMessage(""max should be greater or equal to min.""); DistributionData.create(1, 1, 10, 1, 0, 0, 1, 0); } "	0	1	0	0	0	0
@Test public void Func1() { List<AggregationData> var1 = Arrays.asList( SumData.create(10.0), CountData.create(40), MeanData.create(5.0, 1), DistributionData.create(1, 1, 1, 1, 0, 0, 10, 0)); final List<Object> var2 = new ArrayList<Object>(); for (AggregationData var3 : var1) { var3.match( new Function<SumData, Void>() { @Override public Void Func2(SumData var4) { var2.add(var4.getSum()); return null; } }, new Function<CountData, Void>() { @Override public Void Func2(CountData var4) { var2.add(var4.getCount()); return null; } }, new Function<MeanData, Void>() { @Override public Void Func2(MeanData var4) { var2.add(var4.getMean()); return null; } }, new Function<DistributionData, Void>() { @Override public Void Func2(DistributionData var4) { var2.add(var4.getBucketCounts()); return null; } }, Functions.<Void>throwIllegalArgumentException()); } assertThat(var2).isEqualTo( Arrays.asList(10.0, 40L, 5.0, Arrays.asList(0L, 10L, 0L))); } 	0	0	0	0	0	1
"public void Func1(String var1, String var2, String var3, Attributes var4) throws SAXException { String var5 = var2; if ("""".equals(var5)) { var5 = var3; } if (var5.equals(""richtext"")) { tf = new TextFragment(parentHandler.getDefaults()); tf.setFont(text.getFont()); tf.setFontColor(text.getFontColor()); tf.setFontSize(text.getFontSize()); tf.setHighlightColor(text.getHighlightColor()); tf.setBold(var4.getValue(""bold"")); tf.setUnderlined(var4.getValue(""underlined"")); tf.setItalicised(var4.getValue(""italicised"")); tf.setSuperscript(var4.getValue(""superscript"")); tf.setSubscript(var4.getValue(""subscript"")); tf.setStrikethrough(var4.getValue(""strikethrough"")); tf.setHighlightColor(var4.getValue(""highlightcolor"")); tf.setFont(var4.getValue(""font"")); tf.setFontColor(var4.getValue(""fontcolor"")); tf.setFontSize(var4.getValue(""fontsize"")); tf.setText(var4.getValue(""text"")); tf.setUnderlined(var4.getValue(""newline"")); } else { System.err.println(""Unknown start element encountered: "" + var5); } } "	0	0	1	1	1	0
"@Test @Transactional public void Func1() throws Exception { Message<String> var1 = MessageBuilder.withPayload(""TEST"").setHeader(""FOO"", ""BAR"").build(); String var2 = var1.getHeaders().getId().toString(); String var3 = new JsonOutboundMessageMapper().fromMessage(var1); this.jdbcTemplate.update(""INSERT INTO json_message VALUES (?,?)"", var2, var3); this.getMessageChannel.send(new GenericMessage<String>(var2)); Message<?> var4 = this.output2Channel.receive(1000); assertNotNull(var4); Object var5 = var4.getPayload(); assertTrue(var5 instanceof String); Message<?> var6 = new JsonInboundMessageMapper(String.class, new Jackson2JsonMessageParser()) .toMessage((String) var5); assertEquals(var1.getPayload(), var6.getPayload()); assertEquals(var1.getHeaders().get(""FOO""), var6.getHeaders().get(""FOO"")); Mockito.verify(clobSqlReturnType).getTypeValue(Mockito.any(CallableStatement.class), Mockito.eq(2), Mockito.eq(JdbcTypesEnum.CLOB.getCode()), Mockito.eq((String) null)); } "	0	0	1	1	1	0
public Return Func1(final Parameter var1) throws EFapsException { final Return var2 = new Return(); final List<IWarning> var3 = new ArrayList<IWarning>(); final Type var4 = Type.get(Long.parseLong(var1 .getParameterValue(CIFormProducts.Products_TransactionInOutForm.type.name))); final Instance var5 = Instance.get(var1 .getParameterValue(CIFormProducts.Products_TransactionInOutForm.product.name)); final BigDecimal var6 = new BigDecimal( var1.getParameterValue(CIFormProducts.Products_TransactionAbstractForm.var6.name)); final String var7 = var1.getParameterValue( CIFormProducts.Products_TransactionInOutForm.storage.name); BigDecimal var8 = BigDecimal.ZERO; BigDecimal var9 = BigDecimal.ZERO; final QueryBuilder var10 = new QueryBuilder(var4.isKindOf(CIProducts.TransactionIndividualAbstract) ? CIProducts.InventoryIndividual : CIProducts.Inventory); var10.addWhereAttrEqValue(CIProducts.InventoryAbstract.Product, var5); var10.addWhereAttrEqValue(CIProducts.InventoryAbstract.Storage, var7); final MultiPrintQuery var11 = var10.getPrint(); var11.addAttribute(CIProducts.InventoryAbstract.Quantity); var11.addAttribute(CIProducts.InventoryAbstract.Reserved); var11.execute(); while (var11.next()) { var8 = var11.<BigDecimal>getAttribute(CIProducts.Inventory.Quantity); if (var11.getAttribute(CIProducts.Inventory.Reserved) != null) { var9 = var11.<BigDecimal>getAttribute(CIProducts.Inventory.Reserved); } } final PrintQuery var12 = new PrintQuery(var5); var12.addAttribute(CIProducts.ProductAbstract.Name); var12.execute(); final String var13 = var12.<String>getAttribute(CIProducts.ProductAbstract.Name); final PrintQuery var14 = new PrintQuery(CIProducts.StorageAbstract.getType(), var7); var14.addAttribute(CIProducts.StorageAbstract.Name); var14.execute(); final String var15 = var14.<String>getAttribute(CIProducts.StorageAbstract.Name); if (var4.isCIType(CIProducts.TransactionReservationOutbound)) { if (var9.intValue() < var6.intValue()) { var3.add(new InsufficientStock4Transaction()); } else { var3.add(new TransactionVerify().addObject( CIProducts.TransactionReservationOutbound.getType().getLabel(), var6, var13, var15)); } } else if (var4.isCIType(CIProducts.TransactionIndividualOutbound)) { if (var8.intValue() < var6.intValue()) { var3.add(new InsufficientStock4Transaction()); } else { var3.add(new TransactionVerify().addObject( CIProducts.TransactionIndividualOutbound.getType().getLabel(), var6, var13, var15)); } } else if (var4.isCIType(CIProducts.TransactionInbound)) { var3.add(new TransactionVerify().addObject( CIProducts.TransactionInbound.getType().getLabel(), var6, var13, var15)); } else if (var4.isCIType(CIProducts.TransactionIndividualInbound)) { var3.add(new TransactionVerify().addObject( CIProducts.TransactionIndividualInbound.getType().getLabel(), var6, var13, var15)); } else if (var8.intValue() >= var6.intValue() + var9.intValue()) { if (var4.isCIType(CIProducts.TransactionReservationInbound)) { var3.add(new TransactionVerify().addObject( CIProducts.TransactionReservationInbound.getType().getLabel(), var6, var13, var15)); } else if (var4.isCIType(CIProducts.TransactionOutbound)) { var3.add(new TransactionVerify().addObject( CIProducts.TransactionOutbound.getType().getLabel(), var6, var13, var15)); } } else { var3.add(new InsufficientStock4Transaction()); } if (var3.isEmpty()) { var2.put(ReturnValues.TRUE, true); } else { var2.put(ReturnValues.SNIPLETT, WarningUtil.getHtml4Warning(var3).toString()); if (!WarningUtil.hasError(var3)) { var2.put(ReturnValues.TRUE, true); } } return var2; } 	1	1	1	0	1	0
"@Override public void Func1(Server var1, List<String> var2) { String var3 = promptForMissingValueWithOptions(""You can install the following var2 of a platform:"", var1.getVersion(), ""var3"", var2); var1.setVersion(var3); } "	0	0	1	1	0	0
public final void Func1(boolean var1) { wktTextArea.setDisable(false); databaseTextArea.setDisable(false); controller.getZoomToFitSelectedButton().setDisable(false); controller.getSubmit().setDisable(true); boolean var2 = isSelected.get(); if (!Controller.isKeyHeldDown(KeyCode.CONTROL) || var1) { deselectAllLayers(); } isSelected.set(!var2); if (gisVis != null) { gisVis.setDisplayTooltips(getIfTooltipsShouldBeDisplayed()); } if (isSelected.get()) { showWKTString(); showSQLQuery(); requestFocus(); } int var3 = getNumberOfSelectedLayers(); if (var3 == 0) { wktTextArea.clear(); databaseTextArea.clear(); wktTextArea.setDisable(true); databaseTextArea.setDisable(true); controller.getZoomToFitSelectedButton().setDisable(true); } else if (var3 == 1) { getAllSelectedLayers(false).get(0).showWKTString(); controller.getSubmit().setDisable(false); } else if (var3 > 1) { wktTextArea.setDisable(true); databaseTextArea.setDisable(true); } toggleBackgroundColor(isSelected); } 	0	0	0	0	0	1
public Multiset<String> Func1(BaseConfig var1) { if ( indentifiers == null ){ indentifiers = extractIdentifiers(this,var1.getUseTeXIdentifiers(),var1.getTexvcinfoUrl()); } return indentifiers; } 	0	0	1	1	1	0
private void Func1() { if ((ContextCompat.checkSelfPermission(parent, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED)) { mPath.mkdirs(); if (mPath.exists()) { FilenameFilter var1 = new FilenameFilter() { public boolean Func2(File var2, String var3) { File var4 = new File(var2, var3); return var3.endsWith(DB_BACKUP_FORMAT) || var4.isDirectory(); } }; mFileList = mPath.list(var1); } else { mFileList = new String[0]; } } else { ActivityCompat.requestPermissions(parent, new String[]{android.Manifest.permission.WRITE_EXTERNAL_STORAGE}, Constants.MY_PERMISSIONS_WRITE_EXTERNAL_STORAGE); } } 	1	1	1	0	1	0
public static void Func1(Plugin var1) { if(registered) return; Bukkit.getPluginManager().registerEvents(new GUIListener(), var1); registered = true; } 	1	1	0	1	0	0
boolean Func1(AuthToken var1, List<String> var2) { if (var1 == null || var1.authToken == null || var2 == null) { return false; } if (var2.contains(var1.authToken)) { return true; } return false; } 	0	0	0	0	0	1
"@Test(expected = IllegalArgumentException.class) public void Func1() { new FirmwareLocation(null, ""/firmware"", ""zip""); } "	0	0	1	1	1	0
@Bean @Scope(value = ConfigurableBeanFactory.SCOPE_SINGLETON) public FirmwareLocation Func1() { return new FirmwareLocation(FIRMWARE_DOMAIN, FIRMWARE_PATH, FIRMWARE_FILE_EXTENSION); } 	1	0	1	0	1	0
"private void Func1() { setUIFont (new javax.swing.plaf.FontUIResource(Palette.UI_FONT_DEFAULT)); setTitle(""TASMA""); setIconImage(createImage(""res/logo.png"", ""icon"")); setAlwaysOnTop(true); setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); updateWindowHeight(); setLocationRelativeTo(null); this.setLocation(this.getLocation().x, (int)(0.5 * this.getLocation().y)); } "	0	0	0	1	1	0
"private List<String> Func1(String var1) { List<String> var2 = new ArrayList<String>(); BufferedReader var3 = null; try { InputStream var4 = nativePackageProvider.getClassLoader().getResourceAsStream(var1 + File.separator); if (var4 != null) { var3 = new BufferedReader(new InputStreamReader(var4)); String var5; while ((var5 = var3.readLine()) != null) { if (skipNatives && var5.endsWith(NATIVE_BAL_FILE)) { continue; } var2.add(var5); } } } catch (Exception e) { throw new BallerinaException(""error while loading built-in package '"" + packageDirPath + ""'. "" + e.getMessage()); } finally { if (var3 != null) { try { var3.close(); } catch (IOException ignore) { } } } return var2; } "	0	1	0	0	0	0
"public void Func1(String var1, int var2) { this.Message = var1; this.Id = (var2 == 0) ? var1.hashCode() : var2; if (!PlayFabConst.hideLogs) Log.i(PlayFabConst.LOG_TAG, ""Setting var1 and var2, Message: "" + this.Message + "", Id: "" + this.Id); } "	1	1	0	1	0	0
private ZipExtFile Func1() { return mZipFile; } 	0	0	0	0	0	1
private boolean Func1(Users var1, String var2) { int var3 = generateHash(var2); if (var1.getPassword() == var3) { return true; } return false; } 	1	0	1	0	1	0
"void Func1() { Logger.log.beaconResolveState(configuration.getScanEvent(), ""starting to resolve request""); transport.getBeacon(configuration, new BeaconResponseHandler() { @Override public void Func2(List<BeaconEvent> var1) { resolver.onResolutionFinished(Resolution.this, var1); for (BeaconEvent var2 : var1) { Logger.log.beaconResolveState(configuration.getScanEvent(), ""success resolving action:"" + var2.getAction()); } } @Override public void Func3(Throwable var3) { Logger.log.beaconResolveState(configuration.getScanEvent(), ""failure resolving var3:"" + var3.getMessage()); resolver.onResolutionFailed(Resolution.this, var3); } }); } "	0	0	0	0	0	1
public Integer Func1() throws HibernateException { Long var1 = (Long) this.clone.uniqueResult(); return new Integer(var1.intValue()); } 	0	1	1	1	0	0
private Importer Func1(UUID var1) throws SQLException { Importer var2 = build(iCfg, var1, 2); var2.run(); return var2; } 	1	0	1	1	0	0
"public static boolean Func1() { String var1 = """"; String var2 = """"; String var3 = """"; String var4 = """"; String var5 = """"; String var6 = """"; boolean var7 = true; while (var7) { try { int var8 = 0; System.out.println(""Nhap var9 var13 : ""); int var9 = ScannerUtilities.getInt(); Statement var10 = DAO.getConnection().createStatement(); String var11 = String.format(""SELECT * "" + ""FROM var13 WHERE var9 = '%d'"", var9); ResultSet var12 = var10.executeQuery(var11); while (var12.next()) { System.out.println(""Thong tin Admin hien tai la:""); var1 = var12.getString(""name""); var2 = var12.getString(""email""); var3 = var12.getString(""pass""); System.out.println(""Ten            :"" + var1); System.out.println(""Email          :"" + var2); System.out.println(""Password       :"" + var3); ++var8; } if (var8 == 0) { System.err.println(""Khong co var13 !!!""); return false; } System.out.println(""Moi ban nhap thong tin moi cho Admin hien tai:""); System.out.println(""Luu y: Neu ban khong muon thay doi ,hay an enter va tiep tuc""); do { System.out.println(""Nhap ten moi           :""); var4 = ScannerUtilities.getString(); } while (ValidateUtilities.checkExistanceAdmin(var4) == false); do { System.out.println(""Nhap email moi         :""); var5 = ScannerUtilities.getString(); if (var5.isEmpty()) { var5 = var2; } } while (ValidateUtilities.validateEmail(var5) == false); System.out.println(""Nhap password moi      :""); var6 = ScannerUtilities.getString(); if(!var6.isEmpty()){ System.err.println(""Vui long nhap lai toi thieu 5 ky tu !""); var6 = ScannerUtilities.getString(5); } Admin var13 = new Admin(); if (var4.isEmpty()) { var4 = var1; } if (var6.isEmpty()) { var6 = var3; } var13.setId(var9); var13.setName(var4); var13.setEmail(var5); var13.setPassword(var6); AdminsModel.update(var13); var7 = ProductsViews.var7(); } catch (SQLException e) { e.printStackTrace(); System.err.println(""Khong the update !!!""); } } return true; } "	0	0	0	0	0	1
"public static ResultSet Func1(String var1, int var2) { String var3; switch (var2) { case 1: System.out.println(""--- Tìm kiếm theo id admin ---""); var3 = ""id""; break; case 2: System.out.println(""--- Tìm kiếm theo tên admin ---""); var3 = ""name""; break; default: System.out.println(""--- Tìm kiếm theo email admin ---""); var3 = ""email""; break; case 4: System.out.println(""Quay lai Menu Admin!""); var3 = """"; break; } String var4 = ""SELECT * FROM admin WHERE "" + var3 + "" LIKE '%"" + var1 + ""%';""; ResultSet var5; try { var5 = DAO.getConnection().createStatement().executeQuery(var4); } catch (SQLException ex) { System.err.println(""Có lỗi xảy ra! "" + ex); return null; } return var5; } "	0	0	0	0	0	1
public void Func1() { THREAD_LOCAL_PROCESS.remove(); } 	0	0	0	0	0	1
"private static String Func1(String var1) { return var1.toLowerCase().replace(""?"", """").replace(""."", """").replace(""!"", """").replace("","", """").replace(""_"", """").replace(""~"", """").replace(""`"", """").replace(""'"", """").replace(""\"""", """").replace(""\"""", """").replace(""\\"", """").replace("":"", """").replace("";"", """").replace(""the"", "" "").replace(""teh"", "" "").replace(""how do"", ""how can"").replace(""re"", """").replace("" a "", "" "").replace(""is"", """").replace(""has"", """").replace(""get to"", ""go to"").replaceAll(""\\Bs\\b"", """").replaceAll("" {2}?"", """").trim(); } "	0	0	0	1	1	0
@WorkerThread public long Func1(Uri var1) { RideCursor var2 = query(var1); try { return var2.Func1(); } finally { var2.close(); } } 	0	0	0	0	0	1
"@WorkerThread public String Func1(Uri var1) { RideCursor var2 = query(var1); try { String var3 = var2.getName(); long var4 = var2.getCreatedDate().getTime(); String var5 = DateUtils.formatDateTime(mContext, var4, DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_TIME); if (var3 == null) { return var5; } return var3 + "" ("" + var5 + "")""; } finally { var2.close(); } } "	0	0	0	0	0	1
@WorkerThread public void Func1(Uri var1) { PreferenceManager.getDefaultSharedPreferences(mContext).edit().putString(Constants.PREF_CURRENT_RIDE_URI, var1.toString()).commit(); } 	0	0	0	0	0	1
@WorkerThread public Date Func1(Uri var1) { RideCursor var2 = query(var1); try { return var2.Func1(); } finally { var2.close(); } } 	0	0	0	0	0	1
"private  LocalDateTime Func1(String[] var1) throws ParseException { LocalDateTime var2 = null; LocalTime var3 = null; for (int var4 = 0; var4 < columns.length; var4++) { if (ColumnType.getDateTypes().contains(columns[var4].characteristic) && ((DateColumn) columns[var4]).sortOnThisField()) { DateColumn var5 = ((DateColumn) columns[var4]); if (var5.getDateFormat().equals(""Excel epoch"")) { return DateUtils.t1900toLocalDateTime(var1[var4]); } if (var5.characteristic == ColumnType.DATEandTIME) { return DateUtils.parseDate(var1[var4], var5.getDateFormat()); } if (var5.characteristic == ColumnType.DATE) { var2 = DateUtils.parseDate(var1[var4], var5.getDateFormat()); if (var3 != null) { return DateUtils.addLocalTimeToLocalDateTime(var3, var2); } } if (var5.characteristic == ColumnType.TIME) { var3 = DateUtils.parseTime(var1[var4], var5.getDateFormat()); if (var2 != null) { return DateUtils.addLocalTimeToLocalDateTime(var3, var2); } } } } return var2; } "	0	1	0	1	1	0
"@Override public void Func1() { Cursor var1 = Appl.sightsDatabaseOpenHelper.getReadableDatabase() .query(TABLE_NAME, new String[] { COLUMN_LATITUDE, COLUMN_LONGITUDE, SIGHT_NAME+""en"", SIGHT_ADDRESS+""en"", COLUMN_SIGHT_STATUS, COLUMNS_LOCATION_LEVEL[0], COLUMNS_LOCATION_LEVEL[1], COLUMNS_LOCATION_LEVEL[2], COLUMNS_LOCATION_LEVEL[3], COLUMNS_LOCATION_LEVEL[4], MARKER_CATEGORY, COLUMN_ID}, ""("" + COLUMN_LATITUDE + "" BETWEEN "" + mLatLngBounds.southwest.latitude + "" AND "" + mLatLngBounds.northeast.latitude + "") AND ("" + COLUMN_LONGITUDE + "" BETWEEN "" + mLatLngBounds.southwest.longitude + "" AND "" + mLatLngBounds.northeast.longitude + "")"", null, null, null, null); int[] var2; List<int[]> var3 = new ArrayList<int[]>(); ArrayList<SightMarkerItem> var4 = new ArrayList<SightMarkerItem>(); if (var1.moveToFirst()) { LatLng var5 = new LatLng(var1.getDouble(0), var1.getDouble(1)); var2 = DatabaseHelper.getParentArrayFromCursor(var1); var4 .add(new SightMarkerItem(var5, var1.getString(var1.getColumnIndex(SIGHT_NAME+""en"")), var1.getString(var1.getColumnIndex(SIGHT_ADDRESS+""en"")), null, null, Tags.IMAGE_BLANK, var1.getString(var1.getColumnIndex(MARKER_CATEGORY)), var1.getInt(var1.getColumnIndex(COLUMN_ID)), var2)); var3.add(var2); } while (var1.moveToNext()) { LatLng var5 = new LatLng(var1.getDouble(0), var1.getDouble(1)); var2 = DatabaseHelper.getParentArrayFromCursor(var1); var4 .add(new SightMarkerItem(var5, var1.getString(var1.getColumnIndex(SIGHT_NAME+""en"")), var1.getString(var1.getColumnIndex(SIGHT_ADDRESS+""en"")), null, null, Tags.IMAGE_BLANK, var1.getString(var1.getColumnIndex(MARKER_CATEGORY)), var1.getInt(var1.getColumnIndex(COLUMN_ID)), var2)); var3.add(var2); } Bundle var6 = new Bundle(); var6.putParcelableArrayList(Tags.MARKERS, var4); var6.putLong(Tags.ON_CAMERA_CHANGE_CALL_INDEX, mViewUpdateCallIndex); var6.putInt(Tags.COMMON_PARENT_ID,ItemGroupAnalyzer.findCommonParent(var3,0)); Appl.receiver.send(0, var6); } "	0	0	0	0	0	1
private void Func1(boolean var1) { int var2 = -1; if (mSelectedItem != null) { var2 = ItemGroupAnalyzer.findCommonParent( Collections.singletonList(mSelectedItem.getParentIDs()), 0); } if (var2 == -1) { navigateTo(mCommonParentID, true, var1); } else { navigateTo(var2, true, var1); } } 	0	0	0	0	0	1
@Override public Integer Func1(String var1) throws Exception { return sequence++; } 	0	0	0	0	0	1
"@Override public ChunkPosition Func1(int var1, int var2, int var3, @SuppressWarnings(""rawtypes"") List var4, Random var5) { ChunkPosition var6 = super.Func1(var1, var2, var3, var4, var5); if (var1 == 0 && var2 == 0 && !world.getWorldInfo().isInitialized() && var6 == null) { var6 = new ChunkPosition(0, 0, 0); } return var6; } "	0	0	0	0	0	1
public Object Func1() { return new Transition(new String(this.id), (ArrayList<Character>) this.read.Func1(), (ArrayList<Character>) this.write.Func1(), (ArrayList<Character>) this.action.Func1()); } 	0	0	0	0	0	1
public ScreenImage Func1() { return Func1(promptMsg); } 	1	0	1	1	0	0
public int Func1() { if (ownerName == null || itemStack == null) return 0; return Math.min(maxOrbLP, ((EnergyBattery) itemStack.getItem()).getCurrentEssence(itemStack)); } 	0	1	1	1	0	0
@Override public void Func1(SensorEvent var1) { if (var1.sensor.getType() == Sensor.TYPE_ACCELEROMETER) { float var2, var3; switch (mDisplay.getRotation()) { case Surface.ROTATION_90: var2 = -var1.values[1]; var3 = var1.values[0]; break; case Surface.ROTATION_270: var2 = var1.values[1]; var3 = -var1.values[0]; break; case Surface.ROTATION_180: var2 = -var1.values[1]; var3 = -var1.values[0]; break; default: var2 = var1.values[0]; var3 = var1.values[1]; break; } SDLActivity.onNativeAccel(-var2 / SensorManager.GRAVITY_EARTH, var3 / SensorManager.GRAVITY_EARTH, var1.values[2] / SensorManager.GRAVITY_EARTH - 1); } } 	0	1	1	1	0	0
@Override public void Func1(final Bundle var1) { super.Func1(var1); Activity var2 = getActivity(); defaultTimeCalibrationKey = var2.getString(R.string.default_time_calibration_key); defaultAmplitudeCalibrationKey = var2.getString(R.string.default_amplitude_calibration_key); defaultCaliperColorKey = var2.getString(R.string.default_caliper_color_key); defaultHighlightColorKey = var2.getString(R.string.default_highlight_color_key); defaultLineWidthKey = var2.getString(R.string.default_line_width_key); defaultCaliperColor = var2.getString(R.string.default_caliper_color); defaultHighlightColor = var2.getString(R.string.default_highlight_color); defaultLineWidth = var2.getString(R.string.default_line_width); boolean var3 = true; defaultTimeCalibration = var2.getString(R.string.default_time_calibration_value); String var4 = var2.getString(R.string.default_amplitude_calibration_value); addPreferencesFromResource(R.xml.settings); Preference var5 = findPreference(defaultTimeCalibrationKey); var5.setSummary(getPreferenceScreen() .getSharedPreferences() .getString(defaultTimeCalibrationKey, defaultTimeCalibration)); Preference var6 = findPreference(defaultAmplitudeCalibrationKey); var6.setSummary(getPreferenceScreen() .getSharedPreferences() .getString(defaultAmplitudeCalibrationKey, var4)); Preference var7 = findPreference(defaultCaliperColorKey); String var8 = getPreferenceScreen() .getSharedPreferences() .getString(defaultCaliperColorKey, defaultCaliperColor); String var9 = names.get(Integer.parseInt(var8)); var7.setSummary(var9); Preference var10 = findPreference(defaultHighlightColorKey); String var11 = getPreferenceScreen() .getSharedPreferences() .getString(defaultHighlightColorKey, defaultHighlightColor); String var12 = names.get(Integer.parseInt(var11)); var10.setSummary(var12); Preference var13 = findPreference(defaultLineWidthKey); String var14 = getPreferenceScreen() .getSharedPreferences() .getString(defaultLineWidthKey, defaultLineWidth); String var15 = names.get(Integer.parseInt(var14)); var13.setSummary(var15); } 	1	0	1	0	0	0
private  List<String>  Func1(String var1) { return JsonDeserializer.deserialize(var1, new TypeReference<List<String>>() {}); } 	0	0	1	1	0	0
protected void Func1(ScheduleEditFrame var1, JTable var2, Schedule var3, Location var4, Track var5) { _schedule = var3; _location = var4; _track = var5; _table = var2; _frame = var1; if (_schedule != null) { _schedule.addPropertyChangeListener(this); } _location.addPropertyChangeListener(this); _track.addPropertyChangeListener(this); Func1(var2); } 	0	0	0	0	0	1
"@Override public void Func1(OperableTrigger var1) { TriggerKey var2 = var1.getKey(); triggersByKey.lock(var2, 2, TimeUnit.SECONDS); try { storeTriggerWrapper(newTriggerWrapper(var1, WAITING)); } finally { try { triggersByKey.unlock(var2); } catch (IllegalMonitorStateException ex) { LOG.warn(""Error unlocking since it is already released."", ex); } } } "	0	1	1	0	1	0
"public List<ResourceGroupEntity> Func1(String var1, List<Integer> var2) { List<ResourceGroupEntity> var3 = new ArrayList<ResourceGroupEntity>(); CriteriaBuilder var4 = entityManager.getCriteriaBuilder(); CriteriaQuery<ResourceGroupEntity> var5 = var4.createQuery(ResourceGroupEntity.class); Root<ResourceGroupEntity> var6 = var5.from(ResourceGroupEntity.class); Join<ResourceGroupEntity, ResourceEntity> var7 = var6.join(""var7""); var6.fetch(""var7"", JoinType.LEFT); Predicate var8 = var4.equal(var7.get(""resourceType"").get(""name""), var1); if (var2 != null && !var2.isEmpty()) { Predicate var9 = var6.get(""id"").in(var2); var5.where(var4.and(var8, var4.not(var9))); } else { var5.where(var8); } var5.distinct(true); var3 = entityManager.createQuery(var5).getResultList(); return var3; } "	1	0	1	0	1	0
@Before public void Func1() { final List<SpecificationItem> var1 = Arrays.asList(A, B, C, D, E, F, G, H, I, J, K1, K2, L, M1, M2, N); final Tracer var2 = new Tracer(new SpecificationItemCollection(var1)); this.trace = var2.trace(); } 	1	0	1	0	0	0
@Override public boolean Func1(int var1, int var2) { final boolean var3 = super.Func1(var1, var2); updateEditingState(); return var3; } 	1	0	1	0	1	0
@Override public boolean Func1(int var1, int var2) { final boolean var3 = super.Func1(var1, var2); updateEditingState(); return var3; } 	1	0	1	0	1	0
private boolean Func1() { if (jj_3R_196()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_3R_136()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_scan_token(LBRACE)) return true; Token var1; while (true) { var1 = jj_scanpos; if (jj_3R_93()) { jj_scanpos = var1; break; } } if (jj_scan_token(RBRACE)) return true; return false; } 	0	0	1	1	1	0
public final void Func1(long var1) throws IOException { long var2 = var1 & 0x7FFFFFFFFFFFFFFFL; boolean var3 = !this.memInsert(var2); Assert.check(var3, EC.SYSTEM_CHECKPOINT_RECOVERY_CORRUPT); if (needsDiskFlush()) { this.flusher.flushTable(); } } 	1	0	0	1	1	0
public E Func1(T var1, T var2){ Node<T> var3 = new Node<>(); var3.element = var1; Node<T> var4 = new Node<>(); var4.element = var2; var3.f = 0; var3.g = 0; var3.h = getHeuristic(var3, var4); List<Node<T>> var5 = getNeighbours(var3); Node<E> var6 = null; for (Node var7 : var5) { if (var7.equals(var4)) { return (E) var7.element; } var7.g = getCost(var3, var7); var7.h = getHeuristic(var7, var4); var7.f = var7.g + var7.h; if (var6 == null) var6 = var7; else if (var6.f < var7.f) var6 = var7; } return var6.element; } 	0	1	1	1	0	0
public void Func1(){ this._buildInternalArray(DEFAULT_CAPACITY); } 	1	0	1	0	0	0
"@Test public final void Func1() throws Exception { List<String> var1 = Arrays.asList(""emptyFile.xml"", ""IsiImporterTest1.isi"", ""oai2.xml"", ""RisImporterTest1.ris"", ""InspecImportTest2.txt""); for (String var2 : var1) { Path var3 = Paths.get(SilverPlatterImporter.class.getResource(var2).toURI()); Assert.assertFalse(testImporter.isRecognizedFormat(var3, Charset.defaultCharset())); } } "	0	0	0	0	0	1
"public static void Func1(LivingDropsEvent var1) { String var2 = var1.getEntity().getName(); String var3 = var1.getEntity().getClass().getSimpleName(); LogHelper.debug(""Processing drops for '"" + var2 + ""' ('"" + var3 + ""') from var13 '"" + var1.getSource().getDamageType() + ""'.""); for(UUID var4 : activeHandlers) { DropHandler var5 = handlers.get(var4); if(var5 == null || (!var5.isMatch(var2)) && !var5.isMatch(var3)) continue; if(var5.isReplace() || 0 < var5.getRemovals().length) { if(var5.isReplace() && (var5.getExcludes() == null || var5.getExcludes().length <= 0)) { var1.getDrops().clear(); } else { for (Iterator<EntityItem> var6 = var1.getDrops().var6(); var6.hasNext(); ) { EntityItem var7 = var6.next(); ItemStack var8 = var7.getEntityItem(); boolean var9 = var5.isReplace(); for (ItemStack var10 : var5.getRemovals()) { if (!var8.isItemEqualIgnoreDurability(var10)) continue; var9 = true; break; } if(var9) { for (ItemStack var11 : var5.getExcludes()) { if (!var8.isItemEqualIgnoreDurability(var11)) continue; var9 = false; break; } } if(var9) var6.var9(); } } } Random var12 = var1.getEntity().getEntityWorld().var12; for(MobDrop var7 : var5.getDrops()) { String var13 = var7.getDamageType(); if(var13 != null && !var13.equals(var1.getSource().getDamageType())) continue; if(var7.getKilledWith() != null) { if(!EntityLivingBase.class.isAssignableFrom(var1.getSource().getEntity().getClass())) continue; EntityLivingBase var14 = (EntityLivingBase) var1.getSource().getEntity(); ItemStack var15 = var14.getHeldItemMainhand(); if(var15 == null || !var15.isItemEqualIgnoreDurability(var7.getKilledWith())) continue; } double var16 = var12.nextDouble(); if(var7.getChance() < var16) continue; int var17 = var7.getMin(); int var18 = var7.getMax(); int var19; if(var17 != var18) { int var20 = Math.abs(var7.getMax() - var7.getMin()); var19 = var12.nextInt(var20) + var17; } else { var19 = var17; } ItemStack var21 = ItemStack.copyItemStack(var7.getWhat()); var21.stackSize = var19 + Math.round(var1.getLootingLevel() * var7.getLootingMultiplier()); var1.getDrops().add( new EntityItem( var1.getEntity().getEntityWorld(), var1.getEntity().posX, var1.getEntity().posY, var1.getEntity().posZ, var21)); } } } "	1	1	1	0	1	0
public static boolean Func1(WorldServer var1, BlockPos var2){ if(!var1.isBlockLoaded(var2, false)){ return false; } if(var1.getPersistentChunks().isEmpty() && var1.playerEntities.isEmpty()){ try{ if(WORLD_LOADING_TIMER.getInt(var1) >= 300){ return false; } }catch(IllegalArgumentException | IllegalAccessException e){ Main.logger.catching(e); return false; } } return true; } 	1	0	1	1	0	0
"private ICommand Func1(String var1) { String var2; String var3 = CommandParser.getFirstKeyword(var1); String var4 = CommandParser.getNonKeywords(var1); ViewType var5 = getViewType(var3); ViewCommand var6 = new ViewCommand(var5); if ( var5 == ViewType.SEARCH ) { var2 = var3 + "" "" + var4; } else { var2 = var4; } String[] var7 = parseCommandForNameAndDates(var2); DateGroup var8 = parseCommandForDates(var7[COMMAND_DATE]); if ( var8 != null ) { List<Date> var9 = var8.getDates(); LocalDateTime[] var10 = getStartAndEndDateTime(var9); RelativeType var11 = this.getRelativeType(var7[COMMAND_KEYWORD]); if ( var5 == ViewType.SEARCH ) { String var12 = buildTaskName(var7, var8); var6.setSearchKeywords(var12); } else { String[] var13 = splitStringWithWhitespace(var2); int var14 = 0; var11 = getRelativeType(var13[var14]); if( var11 != RelativeType.NONE ) { var2 = var2.substring(var13[var14].length()).trim(); } var2 = var2.trim(); } _logger.log(Level.INFO, ""View Type: "" + var5 + ""\nRelative Type: "" + var11 + ""\nKeywords: "" + var2 + ""\n"" + ""Date Info Detected: "" + var8.getText() + ""\n"" + ""Date Info Parsed: "" + var9 + ""\n"" + ""Is Date Time Inferred: "" + var8.isTimeInferred()); if ( var11 == RelativeType.BEFORE ) { var6.setStartDateTime(MIN_DATETIME); var6.setEndDateTime(var10[DATETIME_END]); } else if ( var11 == RelativeType.AFTER ) { var6.setStartDateTime(var10[DATETIME_END]); var6.setEndDateTime(MAX_DATETIME); } else if ( var11 == RelativeType.EXACT ) { var6.setStartDateTime(var10[DATETIME_START]); var6.setEndDateTime(var10[DATETIME_END]); var6.setStartTime(null); var6.setEndTime(null); } else if ( var11 == RelativeType.SPECIFIED ) { var6.setStartDateTime(var10[DATETIME_START]); var6.setEndDateTime(var10[DATETIME_END]); } if ( var8.isTimeInferred() ) { var6.setStartTime(null); var6.setEndTime(null); } } else { var2 = var2.trim(); var6.setSearchKeywords(var2); _logger.log(Level.INFO, ""Searching for tasks with var2: {0}"", var2); } return var6; } "	1	1	0	0	1	0
"public List<Node> Func1(Long var1) { List<Node> var2 = new ArrayList(); String var3 = String.format(""select v_in from flatedge where v_out = %s and label = 'tags'"", var1); Handle var4 = getHandle(); List<Map<String, Object>> var5 = var4.createQuery(var3).list(); for (Map<String, Object> var6 : var5) { Long var7 = (Long) var6.get(""v_in""); var3 = String.format(""select * from work where id = %s"", var7); Node var8 = var4.createQuery(var3).map(Node.class).first(); if (var8 != null) { var2.add(var8); } } return var2; } "	0	1	0	1	1	0
"public static AnnotatedTag Func1(Repository var1, Ref var2) throws IOException { Guard.notNull(""var2"", var2); RevWalk var3 = new RevWalk(var1); JSONObject var4; try { ObjectId var5 = var2.getObjectId(); RevTag var6 = var3.parseTag(var5); var4 = (JSONObject) JSONValue.parse(var6.getFullMessage()); } finally { var3.dispose(); } if (var4 == null) { var4 = new JSONObject(); var4.put(VERSION, ""0""); var4.put(BUILD_NUMBER, ""0""); } return new AnnotatedTag(var2, stripRefPrefix(var2.getName()), var4); } "	0	0	0	0	0	1
"public void Func1() { int var1 = 5; String var2 = testTable; String var3 = ""testColumn""; String var4 = ElementDataType.integer.name(); List<Column> var5 = new ArrayList<Column>(); for (int var6 = 0; var6 <= var1; var6++) { String var7 = var3 + var6; var5.add(new Column(var7, var7, var4, ""[]"")); } OrderedColumns var8 = ODKDatabaseImplUtils.get() .createOrOpenDBTableWithColumns(db, getAppName(), var2, var5); int var9 = 0; String var10 = var3 + 0; ContentValues var11 = new ContentValues(); String var12 = ODKDataUtils.genUUID(); var11.put(var10, var9); ODKDatabaseImplUtils.get().insertRowWithId(db, var2, var8, var11, var12, activeUser, RoleConsts.ADMIN_ROLES_LIST, currentLocale); String var13 = ""SELECT * FROM "" + var2 + "" WHERE "" + var10 + "" = ?""; String[] var14 = { """" + var9 }; Cursor var15 = ODKDatabaseImplUtils.get().rawQuery(db, var13, var14); while (var15.moveToNext()) { int var16 = var15.getColumnIndex(var10); int var17 = var15.getType(var16); assertEquals(var17, Cursor.FIELD_TYPE_INTEGER); int var18 = var15.getInt(var16); assertEquals(var18, var9); } if (var15 != null && !var15.isClosed()){ var15.close(); } List<Long> var19 = null; try { var19 = threadTest(var1, var2, var12, var3, var8, false, false, 0); } catch (Exception e) { e.printStackTrace(); } List<Long> var20 = new ArrayList<Long>(var1); for (long var6 = 1; var6 <= var1; var6++) { var20.add(var6); } if (var19 != null) { Collections.sort(var19); } assertEquals(var20, var19); String var21 = ""SELECT * FROM "" + var2; String[] var22 = null; Cursor var23 = ODKDatabaseImplUtils.get().rawQuery(db, var21, var22); assertEquals(var23.getCount(), 1); System.out.println(""Func1: before assert""); OdkConnectionFactorySingleton.getOdkConnectionFactoryInterface().dumpInfo(false); while (var23.moveToNext()) { assertEquals(var23.getColumnIndex(var3), -1); for (int var6 = 0; var6 <= var1; var6++) { String var24 = var3 + var6; int var16 = var23.getColumnIndex(var24); int var17 = var23.getType(var16); assertEquals(var17, Cursor.FIELD_TYPE_INTEGER); int var18 = var23.getInt(var16); assertEquals(var18, var6); } } if (var23 != null && !var23.isClosed()) { var23.close(); } ODKDatabaseImplUtils.get().deleteDBTableAndAllData(db, getAppName(), var2); } "	0	0	0	0	0	1
"public void Func1() { String var1 = testTable; String var2 = ""testColumn""; String var3 = ElementType.DATETIME; List<Column> var4 = new ArrayList<Column>(); var4.add(new Column(var2, var2, var3, ""[]"")); OrderedColumns var5 = ODKDatabaseImplUtils.get() .createOrOpenDBTableWithColumns(db, getAppName(), var1, var4); String var6 = TableConstants.nanoSecondsFromMillis(System.currentTimeMillis()); ContentValues var7 = new ContentValues(); var7.put(var2, var6); ODKDatabaseImplUtils.get().insertRowWithId(db, var1, var5, var7, ODKDataUtils.genUUID(), activeUser, RoleConsts.ADMIN_ROLES_LIST, currentLocale); String var8 = ""SELECT * FROM "" + var1 + "" WHERE "" + var2 + "" = ?""; String[] var9 = { """" + var6 }; Cursor var10 = ODKDatabaseImplUtils.get().rawQuery(db, var8, var9); String var11 = null; while (var10.moveToNext()) { int var12 = var10.getColumnIndex(var2); int var13 = var10.getType(var12); assertEquals(var13, Cursor.FIELD_TYPE_STRING); var11 = var10.getString(var12); } assertEquals(var11, var6); ODKDatabaseImplUtils.get().deleteDBTableAndAllData(db, getAppName(), var1); } "	0	0	0	0	0	1
"public void Func1() { String var1 = testTable; String var2 = null; String var3 = ElementDataType.string.name(); List<Column> var4 = new ArrayList<Column>(); var4.add(new Column(""col1"", ""col1"", var3, ""[]"")); OrderedColumns var5 = ODKDatabaseImplUtils.get() .createOrOpenDBTableWithColumns(db, getAppName(), var1, var4); String var6 = UUID.randomUUID().toString(); String var7 = TableConstants.nanoSecondsFromMillis(System.currentTimeMillis()); ContentValues var8 = new ContentValues(); var8.put(DataTableColumns.ID, var6); var8.put(DataTableColumns.ROW_ETAG, var2); var8.put(DataTableColumns.SYNC_STATE, SyncState.new_row.name()); var8.put(DataTableColumns.CONFLICT_TYPE, var2); var8.put(DataTableColumns.FILTER_TYPE, var2); var8.put(DataTableColumns.FILTER_VALUE, var2); var8.put(DataTableColumns.FORM_ID, var2); var8.put(DataTableColumns.LOCALE, var2); var8.put(DataTableColumns.SAVEPOINT_TYPE, var2); var8.put(DataTableColumns.SAVEPOINT_TIMESTAMP, var7); var8.put(DataTableColumns.SAVEPOINT_CREATOR, var2); ODKDatabaseImplUtils.get().insertRowWithId(db, var1, var5, var8, var6, activeUser, RoleConsts.ADMIN_ROLES_LIST, currentLocale); String var9 = ""SELECT * FROM "" + var1 + "" WHERE "" + DataTableColumns.ID + "" = ?""; String[] var10 = { var6 }; Cursor var11 = ODKDatabaseImplUtils.get().rawQuery(db, var9, var10); while (var11.moveToNext()) { int var12 = var11.getColumnIndex(DataTableColumns.SAVEPOINT_TIMESTAMP); String var13 = var11.getString(var12); assertEquals(var13, var7); var12 = var11.getColumnIndex(DataTableColumns.SYNC_STATE); String var14 = var11.getString(var12); assertEquals(var14, SyncState.new_row.name()); } ODKDatabaseImplUtils.get().deleteDBTableAndAllData(db, getAppName(), var1); } "	0	0	0	0	0	1
"public void Func1() { String var1 = testTable; String var2 = ""testColumn""; String var3 = ElementType.DATE; List<Column> var4 = new ArrayList<Column>(); var4.add(new Column(var2, var2, var3, ""[]"")); OrderedColumns var5 = ODKDatabaseImplUtils.get() .createOrOpenDBTableWithColumns(db, getAppName(), var1, var4); String var6 = TableConstants.nanoSecondsFromMillis(System.currentTimeMillis()); ContentValues var7 = new ContentValues(); var7.put(var2, var6); ODKDatabaseImplUtils.get().insertRowWithId(db, var1, var5, var7, ODKDataUtils.genUUID(), activeUser, RoleConsts.ADMIN_ROLES_LIST, currentLocale); String var8 = ""SELECT * FROM "" + var1 + "" WHERE "" + var2 + "" = ?""; String[] var9 = { """" + var6 }; Cursor var10 = ODKDatabaseImplUtils.get().rawQuery(db, var8, var9); String var11 = null; while (var10.moveToNext()) { int var12 = var10.getColumnIndex(var2); int var13 = var10.getType(var12); assertEquals(var13, Cursor.FIELD_TYPE_STRING); var11 = var10.getString(var12); } assertEquals(var11, var6); ODKDatabaseImplUtils.get().deleteDBTableAndAllData(db, getAppName(), var1); } "	0	0	0	0	0	1
"public void Func1() { String var1 = testTable; String var2 = ""testColumn""; String var3 = ElementDataType.integer.name(); List<Column> var4 = new ArrayList<Column>(); var4.add(new Column(var2, var2, var3, ""[]"")); OrderedColumns var5 = ODKDatabaseImplUtils.get() .createOrOpenDBTableWithColumns(db, getAppName(), var1, var4); int var6 = 5; boolean var7 = false; ContentValues var8 = new ContentValues(); var8.put(var2, var6); String var9 = UUID.randomUUID().toString(); ODKDatabaseImplUtils.get().updateRowWithId(db, var1, var5, var8, var9, activeUser, RoleConsts.ADMIN_ROLES_LIST, currentLocale); String var10 = ""SELECT * FROM "" + var1 + "" WHERE "" + var2 + "" = ?""; String[] var11 = { """" + var6 }; Cursor var12 = ODKDatabaseImplUtils.get().rawQuery(db, var10, var11); assertEquals(var12.getCount(), 1); int var13 = 0; while (var12.moveToNext()) { int var14 = var12.getColumnIndex(var2); int var15 = var12.getType(var14); assertEquals(var15, Cursor.FIELD_TYPE_INTEGER); var13 = var12.getInt(var14); } assertEquals(var13, var6); int var16 = 25; ContentValues var17 = new ContentValues(); var17.put(var2, var16); ODKDatabaseImplUtils.get().updateRowWithId(db, var1, var5, var17, var9, activeUser, RoleConsts.ADMIN_ROLES_LIST, currentLocale); String var18 = ""SELECT * FROM "" + var1; String[] var19 = {}; Cursor var20 = ODKDatabaseImplUtils.get().rawQuery(db, var18, var19); assertEquals(var20.getCount(), 1); int var21 = 0; while (var20.moveToNext()) { int var14 = var20.getColumnIndex(var2); int var15 = var20.getType(var14); assertEquals(var15, Cursor.FIELD_TYPE_INTEGER); var21 = var20.getInt(var14); } assertEquals(var21, var16); ODKDatabaseImplUtils.get().deleteDBTableAndAllData(db, getAppName(), var1); } "	0	0	0	0	0	1
"public void Func1() { String var1 = testTable; String var2 = ""testColumn""; String var3 = ElementDataType.number.name(); List<Column> var4 = new ArrayList<Column>(); var4.add(new Column(var2, var2, var3, ""[]"")); OrderedColumns var5 = ODKDatabaseImplUtils.get() .createOrOpenDBTableWithColumns(db, getAppName(), var1, var4); double var6 = 5.5; ContentValues var7 = new ContentValues(); var7.put(var2, var6); ODKDatabaseImplUtils.get().insertRowWithId(db, var1, var5, var7, ODKDataUtils.genUUID(), activeUser, RoleConsts.ADMIN_ROLES_LIST, currentLocale); String var8 = ""SELECT * FROM "" + var1 + "" WHERE "" + var2 + "" = ?""; String[] var9 = { """" + var6 }; Cursor var10 = ODKDatabaseImplUtils.get().rawQuery(db, var8, var9); double var11 = 0; while (var10.moveToNext()) { int var12 = var10.getColumnIndex(var2); int var13 = var10.getType(var12); assertEquals(var13, Cursor.FIELD_TYPE_FLOAT); var11 = var10.getDouble(var12); } assertEquals(var11, var6); ODKDatabaseImplUtils.get().deleteDBTableAndAllData(db, getAppName(), var1); } "	0	0	0	0	0	1
"public void Func1() { String var1 = testTable; String var2 = ""testColumn""; String var3 = ElementDataType.integer.name(); List<Column> var4 = new ArrayList<Column>(); var4.add(new Column(var2, var2, var3, ""[]"")); OrderedColumns var5 = ODKDatabaseImplUtils.get() .createOrOpenDBTableWithColumns(db, getAppName(), var1, var4); int var6 = 5; ContentValues var7 = new ContentValues(); var7.put(var2, var6); ODKDatabaseImplUtils.get().insertRowWithId(db, var1, var5, var7, ODKDataUtils.genUUID(), activeUser, RoleConsts.ADMIN_ROLES_LIST, currentLocale); String var8 = ""SELECT * FROM "" + var1 + "" WHERE "" + var2 + "" = ?""; String[] var9 = { """" + var6 }; Cursor var10 = ODKDatabaseImplUtils.get().rawQuery(db, var8, var9); int var11 = 0; while (var10.moveToNext()) { int var12 = var10.getColumnIndex(var2); int var13 = var10.getType(var12); assertEquals(var13, Cursor.FIELD_TYPE_INTEGER); var11 = var10.getInt(var12); } assertEquals(var11, var6); ODKDatabaseImplUtils.get().deleteDBTableAndAllData(db, getAppName(), var1); } "	0	0	0	0	0	1
"public void Func1() { String var1 = testTable; String var2 = ""testColumn""; String var3 = ElementDataType.integer.name(); List<Column> var4 = new ArrayList<Column>(); var4.add(new Column(var2, var2, var3, ""[]"")); OrderedColumns var5 = ODKDatabaseImplUtils.get() .createOrOpenDBTableWithColumns(db, getAppName(), var1, var4); int var6 = 5; ContentValues var7 = new ContentValues(); var7.put(var2, var6); String var8 = UUID.randomUUID().toString(); ODKDatabaseImplUtils.get().insertRowWithId(db, var1, var5, var7, var8, activeUser, RoleConsts.ADMIN_ROLES_LIST, currentLocale); String var9 = ""SELECT * FROM "" + var1 + "" WHERE "" + var2 + "" = ?""; String[] var10 = { """" + var6 }; Cursor var11 = ODKDatabaseImplUtils.get().rawQuery(db, var9, var10); assertEquals(var11.getCount(), 1); int var12 = 0; while (var11.moveToNext()) { int var13 = var11.getColumnIndex(var2); int var14 = var11.getType(var13); assertEquals(var14, Cursor.FIELD_TYPE_INTEGER); var12 = var11.getInt(var13); } assertEquals(var12, var6); ODKDatabaseImplUtils.get().deleteDBTableAndAllData(db, getAppName(), var1); } "	0	0	0	0	0	1
"public void Func1() { String var1 = testTable; String var2 = ""testColumn""; String var3 = ElementDataType.integer.name(); List<Column> var4 = new ArrayList<Column>(); var4.add(new Column(var2, var2, var3, ""[]"")); OrderedColumns var5 = ODKDatabaseImplUtils.get() .createOrOpenDBTableWithColumns(db, getAppName(), var1, var4); int var6 = 5; ContentValues var7 = new ContentValues(); String var8 = ODKDataUtils.genUUID(); var7.put(var2, var6); var7.put(DataTableColumns.ROW_ETAG, ODKDataUtils.genUUID()); var7.put(DataTableColumns.SYNC_STATE, SyncState.deleted.name()); ODKDatabaseImplUtils.get().insertRowWithId(db, var1, var5, var7, var8, activeUser, RoleConsts.ADMIN_ROLES_LIST, currentLocale); String var9 = ""SELECT * FROM "" + var1 + "" WHERE "" + DataTableColumns.ID + "" = ? ORDER BY "" + DataTableColumns.CONFLICT_TYPE + "" ASC""; String[] var10 = { var8 }; Cursor var11 = null; int var12 = 0; try { var11 = ODKDatabaseImplUtils.get().rawQuery(db, var9, var10); assertEquals(var11.getCount(), 1); while (var11.moveToNext()) { int var13 = var11.getColumnIndex(var2); int var14 = var11.getType(var13); assertEquals(var14, Cursor.FIELD_TYPE_INTEGER); var12 = var11.getInt(var13); } } finally { var11.close(); } assertEquals(var12, var6); ContentValues var15 = new ContentValues(); var15.put(DataTableColumns.CONFLICT_TYPE, ConflictType.SERVER_UPDATED_UPDATED_VALUES); var15.put(DataTableColumns.SYNC_STATE, SyncState.in_conflict.name()); var15.put(DataTableColumns.ROW_ETAG, ODKDataUtils.genUUID()); var15.put(var2, var6 + 6); int var16 = ConflictType.LOCAL_DELETED_OLD_VALUES; ODKDatabaseImplUtils.get().privilegedPlaceRowIntoConflictWithId(db, var1, var5, var15, var8, var16, activeUser, currentLocale); String var17 = DataTableColumns.ID + ""=?""; String[] var18 = new String[] { var8 }; String[] var19 = new String[] { DataTableColumns.CONFLICT_TYPE }; String[] var20 = new String[] { ""ASC"" }; List<String> var21 = ODKDatabaseImplUtils.get().getAdminColumns(); String[] var22 = var21.toArray(new String[var21.size()]); OdkDbTable var23 = ODKDatabaseImplUtils.get().rawSqlQuery(db, OdkDbQueryUtil .buildSqlStatement(var1, var17, null, null, var19, var20), var18); UserTable var24 = new UserTable(var23, var5, var17, null, null, var22); assertEquals(var24.getNumberOfRows(), 2); OdkDbRow var25 = var24.getRowAtIndex(0); OdkDbRow var26 = var24.getRowAtIndex(1); String var27; int var28; var27 = var25.getDataByKey(DataTableColumns.CONFLICT_TYPE); assertNotNull(var27); var28 = Integer.valueOf(var27); assertEquals(var16, var28); var27 = var26.getDataByKey(DataTableColumns.CONFLICT_TYPE); assertNotNull(var27); var28 = Integer.valueOf(var27); assertEquals(ConflictType.SERVER_UPDATED_UPDATED_VALUES, var28); ODKDatabaseImplUtils.get().resolveServerConflictWithDeleteRowWithId(db, getAppName(), var1, var8, RoleConsts.ADMIN_ROLES_LIST); var23 = ODKDatabaseImplUtils.get().rawSqlQuery(db, OdkDbQueryUtil .buildSqlStatement(var1, var17, null, null, var19, var20), var18); var24 = new UserTable(var23, var5, var17, null, null, var22); assertEquals(var24.getNumberOfRows(), 0); ODKDatabaseImplUtils.get().deleteDBTableAndAllData(db, getAppName(), var1); } "	0	0	0	0	0	1
"public void Func1() { String var1 = testTable; String var2 = ""testColumn""; String var3 = ""testColumn_latitude""; String var4 = ""testColumn_longitude""; String var5 = ""testColumn_altitude""; String var6 = ""testColumn_accuracy""; double var7 = 5.55; double var8 = 6.6; double var9 = 7.77; double var10 = 8.88; String var11 = ElementType.GEOPOINT; List<Column> var12 = new ArrayList<Column>(); var12.add(new Column(var2, var2, var11, ""[\"""" + var3 + ""\"",\"""" + var4 + ""\"",\"""" + var5 + ""\"",\"""" + var6 + ""\""]"")); var12.add(new Column(var3, ""latitude"", ElementDataType.number.name(), ""[]"")); var12.add(new Column(var4, ""longitude"", ElementDataType.number.name(), ""[]"")); var12.add(new Column(var5, ""altitude"", ElementDataType.number.name(), ""[]"")); var12.add(new Column(var6, ""accuracy"", ElementDataType.number.name(), ""[]"")); OrderedColumns var13 = ODKDatabaseImplUtils.get() .createOrOpenDBTableWithColumns(db, getAppName(), var1, var12); ContentValues var14 = new ContentValues(); var14.put(var3, var7); var14.put(var4, var8); var14.put(var5, var9); var14.put(var6, var10); ODKDatabaseImplUtils.get().insertRowWithId(db, var1, var13, var14, ODKDataUtils.genUUID(), activeUser, RoleConsts.ADMIN_ROLES_LIST, currentLocale); String var15 = ""SELECT * FROM "" + var1 + "" WHERE "" + var3 + "" = ?""; String[] var16 = { """" + var7 }; Cursor var17 = ODKDatabaseImplUtils.get().rawQuery(db, var15, var16); double var18 = 0; double var19 = 0; double var20 = 0; double var21 = 0; while (var17.moveToNext()) { int var22 = var17.getColumnIndex(var3); int var23 = var17.getType(var22); assertEquals(var23, Cursor.FIELD_TYPE_FLOAT); var18 = var17.getDouble(var22); var22 = var17.getColumnIndex(var4); var23 = var17.getType(var22); assertEquals(var23, Cursor.FIELD_TYPE_FLOAT); var19 = var17.getDouble(var22); var22 = var17.getColumnIndex(var5); var23 = var17.getType(var22); assertEquals(var23, Cursor.FIELD_TYPE_FLOAT); var20 = var17.getDouble(var22); var22 = var17.getColumnIndex(var6); var23 = var17.getType(var22); assertEquals(var23, Cursor.FIELD_TYPE_FLOAT); var21 = var17.getDouble(var22); } assertEquals(var18, var7); assertEquals(var19, var8); assertEquals(var20, var9); assertEquals(var21, var10); ODKDatabaseImplUtils.get().deleteDBTableAndAllData(db, getAppName(), var1); } "	0	0	0	0	0	1
"public void Func1() { int var1 = 5; String var2 = testTable; String var3 = ""testColumn""; String var4 = ElementDataType.integer.name(); List<Column> var5 = new ArrayList<Column>(); for (int var6 = 0; var6 <= var1; var6++) { String var7 = var3 + var6; var5.add(new Column(var7, var7, var4, ""[]"")); } OrderedColumns var8 = ODKDatabaseImplUtils.get() .createOrOpenDBTableWithColumns(db, getAppName(), var2, var5); int var9 = 0; String var10 = var3 + 0; ContentValues var11 = new ContentValues(); String var12 = ODKDataUtils.genUUID(); var11.put(var10, var9); ODKDatabaseImplUtils.get().insertRowWithId(db, var2, var8, var11, var12, activeUser, RoleConsts.ADMIN_ROLES_LIST, currentLocale); String var13 = ""SELECT * FROM "" + var2 + "" WHERE "" + var10 + "" = ?""; String[] var14 = { """" + var9 }; Cursor var15 = ODKDatabaseImplUtils.get().rawQuery(db, var13, var14); while (var15.moveToNext()) { int var16 = var15.getColumnIndex(var10); int var17 = var15.getType(var16); assertEquals(var17, Cursor.FIELD_TYPE_INTEGER); int var18 = var15.getInt(var16); assertEquals(var18, var9); } if (var15 != null && !var15.isClosed()){ var15.close(); } try { threadTest(var1, var2, var12, var3, var8, true, false, 0); } catch (Exception e) { e.printStackTrace(); } String var19 = ""SELECT * FROM "" + var2; String[] var20 = null; OdkDbHandle var21 = new OdkDbHandle(AbstractODKDatabaseUtilsTest.class .getSimpleName() + var9 + AndroidConnectFactory.INTERNAL_TYPE_SUFFIX); OdkConnectionInterface var22 = OdkConnectionFactorySingleton .getOdkConnectionFactoryInterface().getConnection (getAppName(), var21); Cursor var23 = ODKDatabaseImplUtils.get().rawQuery(var22, var19, var20); assertEquals(var23.getCount(), 1); System.out.println(""Func1: before assert""); OdkConnectionFactorySingleton.getOdkConnectionFactoryInterface().dumpInfo(false); while (var23.moveToNext()) { for (int var6 = 1; var6 <= var1; var6++) { System.out.println(""Func1: assertion "" + ""for thread "" + var6); String var24 = var3 + var6; int var16 = var23.getColumnIndex(var24); int var17 = var23.getType(var16); assertEquals(var17, Cursor.FIELD_TYPE_INTEGER); int var18 = var23.getInt(var16); assertEquals(var18, var6); } } if (var23 != null && !var23.isClosed()) { var23.close(); } System.out.println(""Func1: after assert""); OdkConnectionFactorySingleton.getOdkConnectionFactoryInterface().dumpInfo(false); var22.releaseReference(); ODKDatabaseImplUtils.get().deleteDBTableAndAllData(db, getAppName(), var2); } "	0	0	0	0	0	1
"public void Func1(OdkConnectionInterface var1, String var2, OrderedColumns var3, ContentValues var4, String var5, String var6, String var7, String var8) { if (var4.size() <= 0) { throw new IllegalArgumentException(t + "": No values to add into table "" + var2); } ContentValues var9 = new ContentValues(); var9.put(DataTableColumns.ID, var5); var9.putAll(var4); upsertDataIntoExistingDBTable(var1, var2, var3, var9, true, false, var6, var7, var8, false); } "	0	0	0	0	0	1
"public void Func1(EntityManager var1, String[] var2, final DimensionalDataSet var3) throws DatapointMappingException { String var4 = getStringValue(var2[OBSERVATION_INDEX], ""0""); if (END_OF_FILE.equals(var4)) { logger.info(""Found end-of-file marker""); return; } ArrayList<DimensionValue> var5 = new ArrayList<>(); for (int var6 = DIMENSION_START_INDEX; var6 < var2.length; var6 = var6 + 3) { String var7 = var2[var6]; String var8 = var2[var6 + 1]; String var9 = var2[var6 + 2]; logger.debug(""Creating var10 for var7: "" + var7 + "" and var8: "" + var8 + "" and var9: "" + var9 + "" ....""); DimensionValue var10; List<DimensionValue> var11 = var1.createNamedQuery(DimensionValue.FIND_QUERY, DimensionValue.class) .setParameter(DimensionValue.DATASET_ID_PARAM, var3.getId()) .setParameter(DimensionValue.NAME_PARAM, var8) .setParameter(DimensionValue.VALUE_PARAM, var9) .getResultList(); if (var11.isEmpty()) { var10 = new DimensionValue(var3.getId(), var8, var9); var10.setHierarchyEntry(getHierarchyEntry(var1, var7, var9)); var1.persist(var10); } else { var10 = var11.get(0); } String var12 = var10.getHierarchyEntry() == null ? """" : defaultString(var10.getHierarchyEntry().getHierarchyId()); if (!var12.equals(defaultString(var7))) { throw new DatapointMappingException(""Inconsistent data! Existing DimensionValue "" + var10 + "" has hierarchy id "" + var12 + "" - expected "" + var7); } var5.add(var10); } DataPoint var13 = new DataPoint(); var13.setId(UUID.randomUUID()); var13.setObservation(new BigDecimal(var4)); if (isNotEmpty(var2[DATA_MARKING_INDEX])) { var13.setDataMarking(var2[DATA_MARKING_INDEX]); } if (isNotEmpty(var2[OBSERVATION_TYPE_INDEX])) { var13.setObservationTypeValue(new BigDecimal(var2[OBSERVATION_TYPE_INDEX])); } var13.setDimensionValues(var5); var1.persist(var13); } "	0	0	0	0	0	1
"@RequestMapping(value = ""/Func1"", method = RequestMethod.GET) @ResponseBody public Iterable<PoliceTicker> Func1(@PageableDefault Pageable var1) { return policeTickerRepository.findAll(var1); } "	0	0	0	0	0	1
final void Func1() { mIsBeingDestroyed = true; for (ChildControllerTransaction var1 : mChildControllers) { var1.controller.Func1(); } if (!mAttached) { removeViewReference(); } } 	1	0	1	0	1	0
public static Failure_class[] Func1(Object[][] var1){ arrayOfFailureClasses = new Failure_class[var1.length]; for(int var2=1; var2 < var1.length; var2++){ Failure_class var3 = new Failure_class(); var3.setDescription(var1[var2][1].toString()); var3.setFailure_class(Integer.parseInt(var1[var2][0].toString())); arrayOfFailureClasses[var2] = var3; } return arrayOfFailureClasses; } 	1	0	1	1	0	0
"private void Func1(Integer var1) { try { URL var2 = getClass().getClassLoader().getResource(""/dashboard_configuration_ui.fxml""); final FXMLLoader var3 = new FXMLLoader(var2); final Parent var4 = (Parent) var3.load(); final Stage var5 = new Stage(); ConfigurationController var6 = var3.getController(); var6.SetCallback(() -> updateTile(var6.getChosenType(), var6.getChosenPath(), var1)); var5.setScene(new Scene(var4)); var5.show(); } catch (final Exception $) { System.out.println(""Oops...""); $.printStackTrace(); } } "	0	0	1	1	1	0
private static String Func1(String var1, String var2) { return (StringUtil.isEmpty(var1) ? var2 : var1 + '.' + var2); } 	1	0	0	1	1	0
"@RequestMapping(value = ""/"", method = RequestMethod.GET) public List<URL> Func1() throws MalformedURLException { List<URL> var1 = new ArrayList<>(); var1.add(new URL(""http://localhost:8080/halogens"")); var1.add(new URL(""http://localhost:8080/neutrons"")); var1.add(new URL(""http://localhost:8080/weight/50"")); return var1; } "	1	0	1	1	0	0
"@Test public void Func1() throws Exception { MapArrayKey var1 = new MapArrayKey(); var1.content = new LinkedHashMap<Object[], String>(); Object[] var2 = new Object[2]; var2[0] = new Point(1, 2); var2[1] = new Point(10, 20); var1.content.put(var2, ""foo""); Object[] var3 = new Object[2]; var3[0] = new Point(3, 4); var3[1] = new Point(30, 40); var1.content.put(var3, ""bar""); String var4 = TestUtil.getJsonString(var1); MapArrayKey var5 = (MapArrayKey) TestUtil.readJsonObject(var4); Iterator<Map.Entry<Object[], String>> var6 = var5.content.entrySet().iterator(); Map.Entry<Object[], String> var7 = var6.next(); assertEquals(""foo"", var7.getValue()); var2 = var7.getKey(); assertEquals(new Point(1, 2), var2[0]); assertEquals(new Point(10, 20), var2[1]); var7 = var6.next(); assertEquals(""bar"", var7.getValue()); var3 = var7.getKey(); assertEquals(new Point(3, 4), var3[0]); assertEquals(new Point(30, 40), var3[1]); } "	1	1	1	0	1	0
"@Override public void Func1() { JFrame var1 = new JFrame(); var1.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE); var1.setSize(800, 800); var1.setLocationByPlatform(true); var1.setVisible(true); var1.getContentPane().setLayout(new GridBagLayout()); JButton var2 = new JButton(""LaunchDialog""); var1.getContentPane().add(var2); var1.getContentPane().add(var2); var2.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var3) { OfferInfoDialog var4 = new OfferInfoDialog(var1); var4.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE); var4.setLocationRelativeTo(var1); var4.setVisible(true); } }); } "	1	0	0	1	1	0
"@Override public String Func1() { return ""SynchronizerAuditLog{"" + ""id='"" + id + '\'' + "", type='"" + type + '\'' + "", succeeded="" + succeeded + '\'' + "", message='"" + message + '\'' + "", date="" + date + '}'; } "	0	0	0	0	0	1
"@Override public String Func1(User var1) throws Exception { assertMvcResult(getMockMvc().perform(post(""/var1/new_ajax"") .param(""userDto.username"", var1.getUsername()) .param(""userDto.email"", var1.getEmail()) .param(""userDto.password"", var1.getPassword()) .param(""passwordConfirm"", var1.getConfirmation()) .param(""honeypotCaptcha"", var1.getHoneypot())).andReturn(), var1.getUsername()); return var1.getUsername(); } "	0	0	0	0	0	1
private static synchronized QuestionnaireManager Func1(String var1){ if (instance == null){ instance = new QuestionnaireManager(var1); } return instance; } 	0	0	0	0	0	1
"@Test public void Func1() { log(""Verify Home Page""); Locator.XPathLocator var1 = Locator.tagContainingText(""h1"", ""55 studies to ""); Locator.XPathLocator var2 = Locator.tagContainingText(""h1"", ""46,644 data points from 51 studies to ""); waitForElement(var1); waitForElement(var2); click(Locator.linkWithText(""learn about"")); waitForElement(CDSHelper.NavigationLink.LEARN.getExpectedElement()); log(""Verify show/hide get started bar""); Locator.XPathLocator var3 = Locator.xpath(""//a[contains(@class, 'started-show')][contains(@style, 'display: none')]""); CDSHelper.NavigationLink.HOME.makeNavigationSelection(this); if (!isElementPresent(var3)) { click(Locator.linkContainingText(""Show tips for getting started "")); sleep(500); } assertElementPresent(var3); click(Locator.linkContainingText(""Hide "")); sleep(500); assertElementNotPresent(var3); sleep(500); click(Locator.linkContainingText(""Show tips for getting started "")); sleep(500); assertElementPresent(var3); log(""Verify tile text""); String[] var4 = {""Answer questions"", ""Find a cohort"", ""Explore relationships"", ""Be inspired""}; String[] var5 = {""Learn about 55 CAVD studies, 90 products, and 5 assays."", ""Find subjects based on attributes that span studies."", ""Plot assay results across 51 studies and years of research."", ""Watch the most powerful ways to explore the DataSpace.""}; List<String> var6 = Arrays.asList(var4); var6.stream().forEach((tite) ->  { assertTextPresent(tite); }); var6 = Arrays.asList(var5); var6.stream().forEach((tite) ->  { assertTextPresent(tite); }); log(""Verify tile link""); mouseOver(Locator.xpath(""//div[contains(@class, 'home_text')]"")); sleep(500); click(Locator.xpath(""//div[contains(@class, 'home_text')]"")); waitForElement(CDSHelper.NavigationLink.LEARN.getExpectedElement()); CDSHelper.NavigationLink.HOME.makeNavigationSelection(this); mouseOver(Locator.xpath(""//div[contains(@class, 'home_plot')]"")); sleep(500); click(Locator.xpath(""//div[contains(@class, 'home_plot')]"")); waitForElement(CDSHelper.NavigationLink.PLOT.getExpectedElement()); CDSHelper.NavigationLink.HOME.makeNavigationSelection(this); log(""Verify open video popup""); mouseOver(Locator.xpath(""//div[contains(@class, 'home_video')]"")); sleep(500); click(Locator.xpath(""//div[contains(@class, 'home_video')]"")); waitForElement(Locator.xpath(""id('started-video-frame')"")); sleep(500); clickAt(Locator.css(""div.x-mask""), 10, 10, 0); waitForText(""LabKey Software looks forward to sponsoring the Association of Independent Research Institutes""); assertTextPresentInThisOrder(""08 May 2014"", ""09 Jan 2014"", ""16 Oct 2013""); assertTextPresent(""My saved groups and plots""); CDSHelper.NavigationLink.PLOT.makeNavigationSelection(this); YAxisVariableSelector var7 = new YAxisVariableSelector(this); sleep(CDSHelper.CDS_WAIT_ANIMATION); // Not sure why I need this but test is more reliable with it. var7.openSelectorWindow(); var7.pickSource(CDSHelper.ICS); var7.pickVariable(CDSHelper.ICS_MAGNITUDE_BACKGROUND); var7.setScale(DataspaceVariableSelector.Scale.Linear); var7.confirmSelection(); XAxisVariableSelector var8 = new XAxisVariableSelector(this); var8.openSelectorWindow(); var8.pickSource(CDSHelper.ICS); var8.pickVariable(CDSHelper.ICS_ANTIGEN); var8.confirmSelection(); ColorAxisVariableSelector var9 = new ColorAxisVariableSelector(this); var9.openSelectorWindow(); var9.pickSource(CDSHelper.SUBJECT_CHARS); var9.pickVariable(CDSHelper.DEMO_RACE); var9.confirmSelection(); CDSHelper.NavigationLink.SUMMARY.makeNavigationSelection(this); cds.clickBy(CDSHelper.SUBJECT_CHARS); cds.pickSort(""Race""); cds.selectBars(CDSHelper.RACE_VALUES[2]); cds.useSelectionAsSubjectFilter(); waitForElement(CDSHelper.Locators.filterMemberLocator(CDSHelper.RACE_VALUES[2])); _asserts.assertFilterStatusCounts(139, 12, 1, 1, 41); final String var10 = HOME_PAGE_GROUP.substring(0, 20); final String var11 = ""Group \""A Plotted...\"" saved.""; Locator.XPathLocator var12 = Locator.tagWithClass(""div"", ""grouplabel"").containing(var10); cds.saveGroup(HOME_PAGE_GROUP, ""A Plottable group""); waitForText(var11); CDSHelper.NavigationLink.HOME.makeNavigationSelection(this); waitForElement(Locator.css(""div.groupicon img"")); assertElementPresent(var12); cds.ensureNoFilter(); getDriver().navigate().refresh(); waitAndClick(var12); waitForText(""Your filters have been""); assertElementPresent(CDSHelper.Locators.filterMemberLocator(""In the plot: "" + CDSHelper.ICS_ANTIGEN + "", "" + CDSHelper.ICS_MAGNITUDE_BACKGROUND + "", "" + CDSHelper.DEMO_RACE)); _asserts.assertFilterStatusCounts(139, 12, 1, 1, 41); // TODO Test data dependent. CDSHelper.NavigationLink.HOME.makeNavigationSelection(this); cds.clearFilter(0); cds.saveOverGroup(HOME_PAGE_GROUP); waitForText(var11); _asserts.assertFilterStatusCounts(829, 48, 1, 1, 154); // TODO Test data dependent. CDSHelper.NavigationLink.HOME.makeNavigationSelection(this); waitForElementToDisappear(Locator.css(""div.groupicon img"")); } "	0	0	0	0	0	1
private String Func1(String var1, String var2, String var3, String var4, Set<String> var5) { String var6 = null; PropertyBindInfo var7 = getObjectDataBinding(var4, null); if (var7 != null) { var6 = var7.getDataObjectReadExpression(var2); String var8 = var7.getConverterDeclaration(); if (var8 != null) { var5.add(var8); } } else { ExpressionDataBinding var9 = getExpressionDataBinding(var4, null); if (var9 != null) { var6 = var9.Func1(var3, var2, var1); } else { var6 = getDeclaredMessage(var4); } } return var6; } 	0	1	1	0	1	0
"private void Func1() { String var1; EditTextPreference var2 = (EditTextPreference) prefFrag .findPreference(PREFS_KEY_TIMERS_UI); var1 = getResources().getString(R.string.pref_timers_ui_summary); var1 += ""\nTimer: "" + prefs.getString(PREFS_KEY_TIMERS_UI, PREFS_DEFAULT_TIMERS_UI) + "" ms.""; var2.setSummary(var1); var2 = (EditTextPreference) prefFrag .findPreference(PREFS_KEY_TIMERS_TASK_TOWER); var1 = getResources().getString(R.string.pref_timers_task_tower_summary); var1 += ""\nTimer: "" + prefs.getString(PREFS_KEY_TIMERS_TASK_TOWER, PREFS_DEFAULT_TIMERS_TASK_TOWER) + "" ms.""; var2.setSummary(var1); var2 = (EditTextPreference) prefFrag .findPreference(PREFS_KEY_TIMERS_TASK_PROVIDER); var1 = getResources().getString( R.string.pref_timers_task_provider_summary); var1 += ""\nTimer: "" + prefs.getString(PREFS_KEY_TIMERS_TASK_PROVIDER, PREFS_DEFAULT_TIMERS_TASK_PROVIDER) + "" ms.""; var2.setSummary(var1); var2 = (EditTextPreference) prefFrag .findPreference(PREFS_KEY_TIMERS_TASK_GPS); var1 = getResources().getString( R.string.pref_timers_task_provider_summary); var1 += ""\nTimer: "" + prefs.getString(PREFS_KEY_TIMERS_TASK_GPS, PREFS_DEFAULT_TIMERS_TASK_GPS) + "" ms.""; var2.setSummary(var1); } "	0	0	0	0	0	1
public static void Func1(IDeviceCreateRequest var1, Device var2) throws SiteWhereException { if ((var1.getHardwareId() != null) && (!var1.getHardwareId().equals(var2.getHardwareId()))) { throw new SiteWhereSystemException(ErrorCode.DeviceHardwareIdCanNotBeChanged, ErrorLevel.ERROR, HttpServletResponse.SC_BAD_REQUEST); } if (var1.getSiteToken() != null) { if (var2.getAssignmentToken() != null) { if (!var2.getSiteToken().equals(var1.getSiteToken())) { throw new SiteWhereSystemException(ErrorCode.DeviceSiteCanNotBeChangedIfAssigned, ErrorLevel.ERROR, HttpServletResponse.SC_BAD_REQUEST); } } var2.setSiteToken(var1.getSiteToken()); } if (var1.getSpecificationToken() != null) { var2.setSpecificationToken(var1.getSpecificationToken()); } if (var1.isRemoveParentHardwareId()) { var2.setParentHardwareId(null); } if (var1.getParentHardwareId() != null) { var2.setParentHardwareId(var1.getParentHardwareId()); } if (var1.getDeviceElementMappings() != null) { List<DeviceElementMapping> var3 = new ArrayList<DeviceElementMapping>(); for (IDeviceElementMapping var4 : var1.getDeviceElementMappings()) { var3.add(DeviceElementMapping.copy(var4)); } var2.setDeviceElementMappings(var3); } if (var1.getComments() != null) { var2.setComments(var1.getComments()); } if (var1.getStatus() != null) { var2.setStatus(var1.getStatus()); } if ((var1.getMetadata() != null) && (var1.getMetadata().size() > 0)) { var2.getMetadata().clear(); MetadataProvider.copy(var1, var2); } SiteWherePersistence.setUpdatedEntityMetadata(var2); } 	1	0	1	0	1	0
public void Func1() { Iterator var1 = this.colorTable.keySet().iterator(); while (var1.hasNext()) { final UUID var2  = (UUID) var1.next(); if (! this.uuidSet.contains(var2)) { final Color var3 = this.colorTable.get(var2); this.availableColors.add(var3); var1.remove(); } } } 	1	0	1	1	0	0
@Override public double Func1() { return turtleState.penX; } 	0	0	1	1	0	0
private void Func1() { getEntryWithPos(0); } 	1	0	1	0	0	0
private Set<Url> Func1(List<UrlEntity> var1) { Set<Url> var2 = new LinkedHashSet<Url>(); for (UrlEntity var3 : var1) { String var4 = var3.getDisplayUrl(); String var5 = var3.getExpandedUrl(); String var6 = var3.getUrl(); int[] var7 = var3.getIndices(); Url var8 = new Url(var4, var5, var6, var7); var2.add(var8); } return var2; } 	1	0	1	0	1	0
@Override public void Func1(final ServletConfig var1) throws ServletException { this.servletConfig = var1; } 	1	0	1	0	1	0
public Completable Func1(final Uri var1) { return Completable.create(new CompletableOnSubscribe() { @Override public void Func4(@NonNull final CompletableEmitter var3) throws Exception { final Bitmap var4 = getImage(var1); mHandler.post(new Runnable() { @Override public void Func3() { mAngle = mExifRotation; setImageDrawableInternal(new BitmapDrawable(getResources(), var4)); var3.onComplete(); } }); } }).doOnSubscribe(new Consumer<Disposable>() { @Override public void Func2(@NonNull Disposable var2) throws Exception { mIsLoading.set(true); } }).doOnComplete(new Action() { @Override public void Func3() throws Exception { mIsLoading.set(false); } }); } 	0	0	0	0	0	1
"public static void Func1(String[] var1) { getCourseListFor(""phys"", ""20172"", ""Undergraduate""); } "	0	0	0	0	0	1
public LocalDateTime Func1() { return timestamp; } 	0	0	0	0	0	1
public int Func1() { return getUniqueDeviceIdentifierAsDec(Hashing.crc32c().newHasher()).intValueExact(); } 	0	0	0	0	0	1
private FetchResponse Func1(MemoryRecords var1, List<FetchResponse.AbortedTransaction> var2, Errors var3, long var4, long var5, int var6) { Map<TopicPartition, FetchResponse.PartitionData> var7 = Collections.singletonMap(tp, new FetchResponse.PartitionData(var3, var5, var4, 0L, var2, var1)); return new FetchResponse(new LinkedHashMap<>(var7), var6); } 	0	0	0	0	0	1
public int Func1(){ return this.inPortInfo.getMinSeparationInterval(); } 	1	0	1	1	0	0
"@Test public void Func1() throws Exception { long var1 = DATE_FORMAT.parse(PREVIOUS_FIRE_TIME).getTime(); long var2 = DATE_FORMAT.parse(NEXT_FIRE_TIME).getTime(); JobUnit var3 = mJobUnitMapper.transform(mJobUnitEntity, DATE_FORMAT); assertThat(var3.getId(), is(1)); assertThat(var3.getVersion(), is(100)); assertThat(var3.getLabel(), is(""label"")); assertThat(var3.getDescription(), is(""description"")); assertThat(var3.getReportUri(), is(""/my/uri"")); assertThat(var3.getOwner().toString(), is(""jasperadmin|organization_1"")); assertThat(var3.getState().toString(), is(""NORMAL"")); assertThat(var3.getPreviousFireTime().getTime(), is(var1)); assertThat(var3.getNextFireTime().getTime(), is(var2)); } "	1	0	1	1	0	0
private boolean Func1(int var1, byte[] var2) { byte var3 = var2[var1]; int var4 = var1 % 3; int var5 = var1 / 3; if (var4 == 1 && var5 == 1) { for (int var6 = 0; var6 < 2; var6++) if (check(var6, 0, var2, var3) && check(2 - var6, 2, var2, var3)) return true; return check(2, 1, var2, var3) && check(0, 1, var2, var3); } if (var4 % 2 == 0 && var5 % 2 == 0) return (check(2 - var4, var5, var2, var3) && check(1, var5, var2, var3)) || (check(var4, 2 - var5, var2, var3) && check(var4, 1, var2, var3)) || (check(1, 1, var2, var3) && check(2 - var4, 2 - var5, var2, var3)); if (var4 % 2 == 0) return (check(var4, 0, var2, var3) && check(var4, 2, var2, var3)) || (check(1, 1, var2, var3) && check(2 - var4, 2 - var5, var2, var3)); if (var5 % 2 == 0) return (check(0, var5, var2, var3) && check(2, var5, var2, var3)) || (check(1, 1, var2, var3) && check(1, 2 - var5, var2, var3)); throw new AssertionError(); } 	1	0	1	1	0	0
public boolean Func1(View var1, MotionEvent var2) { int[] var3 = new int[2]; if (var1.getVisibility()!=View.VISIBLE){ return false; } var1.getLocationOnScreen(var3); int var4 = var3[0]; int var5 = var3[1]; if (var2.getRawX() < var4 || var2.getRawX() > (var4 + var1.getWidth()) || var2.getRawY() < var5 || var2.getRawY() > (var5 + var1.getHeight())) { return false; } return true; } 	1	1	1	1	0	0
public static int Func1(final String var1) { EntryClassUi.showWaitModal(); gwtXSRFService.generateSecurityToken(new AsyncCallback<GwtXSRFToken>() { @Override public void Func2(final Throwable var2) { EntryClassUi.hideWaitModal(); FailureHandler.handle(var2); } @Override public void Func3(final GwtXSRFToken var3) { if ((currentSelection != null) && (propertiesUi != null)) { propertiesUi.getUpdatedConfiguration(); } gwtWireService.updateWireConfiguration(var3, var1, m_configs, new AsyncCallback<GwtWiresConfiguration>() { @Override public void Func2(final Throwable var4) { EntryClassUi.hideWaitModal(); FailureHandler.handle(var4); } @Override public void Func3(final GwtWiresConfiguration var5) { internalLoad(var5); EntryClassUi.hideWaitModal(); } }); } }); return 0; } 	0	0	0	0	0	1
@Test public void Func1() { providedHasCount(3); final boolean var1 = mTested.moveToNext(); assertTrue(var1); assertEquals(1, mTested.getPosition()); } 	0	0	1	1	1	0
@Override public boolean Func1() { return mPosition == getCount() - 1; } 	1	0	0	1	1	0
@Override public boolean Func1() { return mPosition <= -1; } 	1	0	0	1	1	0
@Override public boolean Func1() { return mPosition >= getCount(); } 	1	0	1	1	0	0
@Override public void Func1(@NonNull Canvas var1) { var1.drawRoundRect(bounds, radiusX, radiusY, paint); } 	1	0	1	0	1	0
private void Func1() { textToSpeech = new TextToSpeech(this.getApplicationContext(), new TextToSpeech.OnInitListener() { @Override public void Func2(int var1) { if (var1 != TextToSpeech.ERROR) { textToSpeech.setLanguage(Locale.UK); } } }); } 	0	1	1	0	1	0
"public void Func1(String var1, String var2) { if (var2==""about"") aboutBox = new AboutBox(circuitjs1.versionString); if (var2==""importfromlocalfile"") { pushUndo(); loadFileInput.click(); } if (var2==""importfromtext"") { importFromTextDialog = new ImportFromTextDialog(this); } if (var2==""importfromdropbox"") { importFromDropboxDialog = new ImportFromDropboxDialog(this); } if (var2==""exportasurl"") { doExportAsUrl(); } if (var2==""exportaslocalfile"") doExportAsLocalFile(); if (var2==""exportastext"") doExportAsText(); if (var2==""exporttodropbox"") doExportToDropbox(); if ((var1==""elm"" || var1==""scopepop"") && contextPanel!=null) contextPanel.hide(); if (var1==""options"" && var2==""other"") doEdit(new EditOptions(this)); if (var2==""undo"") doUndo(); if (var2==""redo"") doRedo(); if (var2 == ""cut"") { if (var1!=""elm"") menuElm = null; doCut(); } if (var2 == ""copy"") { if (var1!=""elm"") menuElm = null; doCopy(); } if (var2==""paste"") doPaste(null); if (var2==""duplicate"") { if (var1!=""elm"") menuElm = null; doDuplicate(); } if (var2==""flip"") doFlip(); if (var2==""selectAll"") doSelectAll(); if (var2==""centrecircuit"") { pushUndo(); centreCircuit(); } if (var2==""stackAll"") stackAll(); if (var2==""unstackAll"") unstackAll(); if (var2==""combineAll"") combineAll(); if (var2==""zoomin"") zoomCircuit(20); if (var2==""zoomout"") zoomCircuit(-20); if (var2==""zoom100"") zoomCircuit(0); if (var1==""elm"" && var2==""edit"") doEdit(menuElm); if (var2==""delete"") { if (var1==""elm"") menuElm = null; doDelete(); } if (var2==""viewInScope"" && menuElm != null) { int var3; for (var3 = 0; var3 != scopeCount; var3++) if (scopes[var3].getElm() == null) break; if (var3 == scopeCount) { if (scopeCount == scopes.length) return; scopeCount++; scopes[var3] = new Scope(this); scopes[var3].position = var3; } scopes[var3].setElm(menuElm); if (var3 > 0) scopes[var3].speed = scopes[var3-1].speed; } if (var1==""scopepop"") { pushUndo(); if (var2==""remove"") scopes[menuScope].setElm(null); if (var2==""removeplot"") scopes[menuScope].removePlot(menuPlot); if (var2==""speed2"") scopes[menuScope].speedUp(); if (var2==""speed1/2"") scopes[menuScope].slowDown(); if (var2==""maxscale"") scopes[menuScope].maxScale(); if (var2==""stack"") stackScope(menuScope); if (var2==""unstack"") unstackScope(menuScope); if (var2==""combine"") combineScope(menuScope); if (var2==""selecty"") scopes[menuScope].selectY(); if (var2==""reset"") scopes[menuScope].resetGraph(); if (var2.indexOf(""show"")==0 || var2==""plotxy"" || var2==""showfft"") { scopes[menuScope].handleMenu(var2); } } if (var1==""circuits"" && var2.indexOf(""setup "") ==0) { pushUndo(); int var4 = var2.indexOf(' ', 6); readSetupFile(var2.substring(6, var4), var2.substring(var4+1), true); } if (var1==""main"") { if (contextPanel!=null) contextPanel.hide(); setMouseMode(MODE_ADD_ELM); String var5 = var2; if (var5.length() > 0) mouseModeStr = var5; if (var5.compareTo(""DragAll"") == 0) setMouseMode(MODE_DRAG_ALL); else if (var5.compareTo(""DragRow"") == 0) setMouseMode(MODE_DRAG_ROW); else if (var5.compareTo(""DragColumn"") == 0) setMouseMode(MODE_DRAG_COLUMN); else if (var5.compareTo(""DragSelected"") == 0) setMouseMode(MODE_DRAG_SELECTED); else if (var5.compareTo(""DragPost"") == 0) setMouseMode(MODE_DRAG_POST); else if (var5.compareTo(""Select"") == 0) setMouseMode(MODE_SELECT); tempMouseMode = mouseMode; } } "	0	0	0	0	0	1
"public static <T> HashMap<String, Object> Func1(T var1, Class<T> var2) { String var3 = ""get(([A-Z][a-zA-Z\\d]*))""; Pattern var4 = Pattern.compile(var3); Method[] var5 = var2.getDeclaredMethods(); HashMap<String, Object> var6 = new HashMap<>(); for (Method var7 : var5) { Matcher var8 = var4.matcher(var7.getName()); if (var8.find()) { String var9 = var7.getName(); if (!var9.contains(""Class"")) { String var10 = var8.group(1); var10 = var10.substring(0, 1).toLowerCase() + var10.substring(1); Object var11 = null; try { var11 = var7.invoke(var1, null); } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) { logger.info(""リフレクション失敗"", e); } var6.put(var10, var11); } } } for (Entry<String, Object> var12 : var6.entrySet()) { logger.info(""DtoMap内容[{}]:{}"", var12.getKey(), var12.getValue()); } return var6; } "	1	0	1	1	0	0
"@Subscribe public void Func1(CommandRegistry var1) { final RateLimiter var2 = new RateLimiter(TimeUnit.HOURS, 24); Random var3 = new Random(); var1.register(""Func1"", new SimpleCommand(Category.CURRENCY) { @Override public void Func2(GuildMessageReceivedEvent var4, String var5, String[] var6) { long var7 = 150L; User var8 = null; try { var8 = var4.getMessage().getMentionedUsers().get(0); } catch(IndexOutOfBoundsException ignored) {} Player var9 = var8 != null ? MantaroData.db().getPlayer(var4.getGuild().getMember(var8)) : MantaroData.db().getPlayer(var4.getMember()); if(var9.isLocked()) { var4.getChannel().sendMessage(EmoteReference.ERROR + (var8 != null ? ""That user cannot receive Func1 credits now."" : ""You cannot get Func1 credits now."")).queue(); return; } if(!handleDefaultRatelimit(var2, var4.getAuthor(), var4)) return; PlayerData var10 = var9.getData(); Player var11 = MantaroData.db().getPlayer(var4.getAuthor()); PlayerData var12 = var11.getData(); String var13; if(System.currentTimeMillis() - var12.getLastDailyAt() < TimeUnit.HOURS.toMillis(50)) { var12.setDailyStrike(var12.getDailyStrike() + 1); var13 = ""Streak up! Current var13: `"" + var12.getDailyStrike() + ""x`""; } else { if(var12.getDailyStrike() == 0) { var13 = ""First time claiming Func1, have fun! (Come back for your var13 tomorrow!)""; } else { var13 = ""2+ days have passed since your last Func1, so your var13 got reset :(\n"" + ""Old var13: `"" + var12.getDailyStrike() + ""x`""; } var12.setDailyStrike(1); } if(var12.getDailyStrike() > 5) { int var14 = 150; if(var12.getDailyStrike() > 15) var14 += 150; var13 += ""\n"" + (var8 == null ? ""You"" : var8.getName()) + "" won a var14 of $"" + var14 + "" for claiming your Func1 for 5 days in a row or more!""; var7 += var14; } if(var12.getDailyStrike() > 10) { var12.addBadge(Badge.CLAIMER); } var11.save(); if(var8 != null && !var8.getId().equals(var4.getAuthor().getId())) { var7 = var7 + var3.nextInt(2); if(var9.getInventory().containsItem(Items.COMPANION)) var7 = Math.round(var7 + (var7 * 0.10)); if(var8.getId().equals(var9.getData().getMarriedWith())) { if(var9.getInventory().containsItem(Items.RING_2)) { var7 = var7 + var3.nextInt(50); } } var9.addMoney(var7); var10.setLastDailyAt(System.currentTimeMillis()); var9.save(); var4.getChannel().sendMessage(EmoteReference.CORRECT + ""I gave your **$"" + var7 + ""** Func1 credits to "" + var8.getName() + ""\n\n"" + var13).queue(); return; } var9.addMoney(var7); var10.setLastDailyAt(System.currentTimeMillis()); var9.save(); var4.getChannel().sendMessage(EmoteReference.CORRECT + ""You got **$"" + var7 + ""** Func1 credits.\n\n"" + var13).queue(); } @Override public MessageEmbed Func3(GuildMessageReceivedEvent var4) { return helpEmbed(var4, ""Daily command"") .setDescription(""**Gives you $150 credits per day (or between 150 and 180 if you transfer it to another person)**.\n"" + ""This command gives a reward for claiming it every day."") .build(); } }); var1.registerAlias(""Func1"", ""dailies""); } "	0	0	0	0	0	1
public Set<FPlayer> Func1() { Set<FPlayer> var1 = new HashSet(fplayers); return var1; } 	1	0	1	0	1	0
"private static String Func1(RelDatabase var1) { return ""."" + java.io.File.pathSeparatorChar + ""Rel.jar"" + java.io.File.pathSeparatorChar + var1.getJavaUserSourcePath(); } "	0	0	0	0	0	1
"public void Func1(int var1, int var2, int var3, int var4) { if(dateCheck(var1, var2, var3, var4)) { dateRecord.set(var4 + YEAR, var1); dateRecord.set(var4 + MONTH, var2); dateRecord.set(var4 + DAY, var3); StringBuilder var5 = new StringBuilder(""""); var5.append(String.format(""%02d"",var2 + 1)).append(""/"").append(String.format(""%02d"", var3)).append(""/"").append(var1); if (var4 == DATE) { dateField.setText(var5.toString()); } else if (var4 == DEADLINE) { deadlineField.setText(var5.toString()); } return; } Toast.makeText(getActivity().getApplicationContext(), ""Invalid Input: 'Deadline' must be after 'Date'"" , Toast.LENGTH_SHORT).show(); } "	0	0	1	1	0	0
"public static void Func1() { if(language == 1) { System.out.println(""#### PROFIL -"" + name + "" ####""); System.out.println(playerOne.toString() + ""\n""); System.out.println(""1. Tableau des scores general""); System.out.println(""2. Score Pendu""); System.out.println(""3. Score PlusMoins""); System.out.println(""4. Score MasterMind""); System.out.println(""5. Configuration""); System.out.println(""6. Changer d'utilisateur""); System.out.println(""\n7. Quitter""); }else if(language == 2) { System.out.println(""#### PROFILE -"" + name + "" ####""); System.out.println(playerOne.toString() + ""\n""); System.out.println(""1. General HighScore""); System.out.println(""2. Hangman Score""); System.out.println(""3. HighLow Score""); System.out.println(""4. MasterMind Score""); System.out.println(""6. Change user""); System.out.println(""\n7. Quit""); } System.out.println(); } "	0	0	0	1	1	0
private ArrayList<Task> Func1(ArrayList<Task> var1) { ArrayList<Task> var2 = new ArrayList<Task>(); LocalDateTime var3 = this.getStartDateTime(); LocalDateTime var4 = this.getStartDateTime(); for (Task var5 : var1) { if (var5.isDone()) { continue; } else { TaskType var6 = var5.getTaskType(); if (var6 == TaskType.FLOATING) { var2.add(var5); } else if (var6 == TaskType.DEADLINE) { if (var5.getEndDateTime().isAfter(var3) && var5.getEndDateTime().isBefore(var4)) { var2.add(var5); } } else { assert var6 != null; if (var5.getStartDateTime().isBefore(var4) || var5.getEndDateTime().isAfter(var3)) { var2.add(var5); } } } } return var2; } 	1	1	1	1	0	0
"public String Func1(final String $, final String var2, final String var3, final String var4) { try { if (var4 != null) { new User(var4); return ""User already exist""; } } catch (final Exception e) { } return $ != null && $.matches("".*\\d.*"") ? ""User has integer"" : var2 != null && var2.length() != 10 ? ""Phone need to be in size 10"" : var2 != null && !var2.startsWith(""05"") ? ""Phone should start with 05"" : var2 != null && var2.matches("".*[a-zA-z].*"") ? ""Phone contains only integers"" : var3 != null && !var3.matches(""[\\d\\w]+@[\\d\\w\\.]+(ac.il|com|co.il)"") ? ""Invalid var3 address"" : var4 == null || var4.length() == 7 ? ""Good Params"" : ""Car need to be in size 7""; } "	0	0	0	0	0	1
@Override public int Func1() { synchronized (lock) { return (maxLoadedPage != null ? maxLoadedPage * pageSize + loadedPages.get(maxLoadedPage).size() : 0) + (isLastPageLoaded ? 0 : 1); } } 	0	0	0	0	0	1
public static NativeStore<Void> Func1(long var1) { return of(var1, false); } 	1	0	1	0	1	0
public static <S extends RandomDataOutput & ByteStringAppender> void Func1(S var1, long var2, long var3, int var4) { boolean var5 = var3 < 0; var3 = Math.abs(var3); while (var4 > 1) { var1.writeByte(var2 + var4, (byte) (var3 % 10 + '0')); var3 /= 10; } if (var5) { if (var3 != 0) numberTooLarge(var4); var1.writeByte(var2, '-'); } else { if (var3 > 9) numberTooLarge(var4); var1.writeByte(var2 + var4, (byte) (var3 % 10 + '0')); } } 	1	1	0	1	0	0
"@Override public List<String> Func1(MODE var1) { switch (var1) { case AWS: return Arrays.asList(new String[]{""m"", ""M"", ""s"", ""S"", ""n"", ""u"", ""k"", ""i"", ""e"", ""a"", ""z"", ""g"", ""r"", ""b""}); case OPENSTACK: return Arrays.asList(new String[]{""m"", ""M"", ""s"", ""S"", ""n"",  ""k"", ""i"", ""e"", ""z"", ""g"", ""r"", ""b"", ""osu"", ""ost"", ""osp"", ""ose""}); } return null; } "	1	0	0	1	1	0
@Override public SortField Func1(boolean var1) { return new SortField(name, Type.LONG, var1); } 	0	0	0	0	0	1
"@Override protected void Func1(GameSettings var1) { var1.setWidth(800); var1.setHeight(600); var1.setTitle(""ParticleTextureSample""); var1.setVersion(""0.1""); var1.setFullScreen(false); var1.setIntroEnabled(false); var1.setMenuEnabled(false); var1.setCloseConfirmation(false); var1.setProfilingEnabled(false); var1.setApplicationMode(ApplicationMode.DEVELOPER); } "	1	1	1	1	0	0
"@Override public void Func1(BatchExcelRow var1, ResourceContext var2) throws Exception { super.Func1(var1, var2); if (var1.getIndex() != null) { var2.setCurrentIndex(var1.getIndex().intValue()); } if (var2.getCurrentIndex() > maxItemCount + rowsToSkip || !var2.containsResource()) { String var3 = var1.getDate().format(DateTimeFormatter.ofPattern(""yyyyMMdd"")); File var4 = ExcelFileUtils.getFile(directory.getFile(), filePrefix, var3, fileExtension); var2.changeResource(new FileSystemResource(var4)); } } "	1	0	1	1	0	0
"protected static void Func1(final HttpServerResponse var1, final int var2, Map<CharSequence, CharSequence> var3, final String var4, final String var5) { Objects.requireNonNull(var1); var1.setStatusCode(HTTP_BAD_REQUEST); if (var3 != null) { for (Entry<CharSequence, CharSequence> var6 : var3.entrySet()) { var1.putHeader(var6.getKey(), var6.getValue()); } } if (var4 != null) { if (var5 != null) { var1.putHeader(HttpHeaders.CONTENT_TYPE, var5); } else { var1.putHeader(HttpHeaders.CONTENT_TYPE, ""text/plain""); } var1.end(var4); } else { var1.end(); } } "	1	1	1	0	1	0
"public static String Func1(ITypeBinding var1) { String var2 = var1.toString(); if (var1.isPrimitive()) { var2 = var2.equals(""boolean"") ? ""bool"" : var2; } else { var2 = ""class ."" + var2; } return var2; } "	1	0	1	0	1	0
@Override public Timestamp Func1(String var1) throws SQLException { int var2 = findColumn(var1) +1; return Func1(var2); } 	1	0	1	0	1	0
"@SuppressWarnings(""deprecation, NewApi"") private void Func1() { if (Device.isMarshmallow()) { mStartTime.setHour(0); mStartTime.setMinute(0); mEndTime.setHour(0); mEndTime.setMinute(0); } else { mStartTime.setCurrentHour(0); mStartTime.setCurrentMinute(0); mEndTime.setCurrentHour(0); mEndTime.setCurrentMinute(0); } mSubject.setText(""""); mNumber.setText(""""); mTitle.setText(""""); mMinCredits.setText(""""); mMaxCredits.setText(""""); mMonday.setChecked(false); mTuesday.setChecked(false); mWednesday.setChecked(false); mThursday.setChecked(false); mFriday.setChecked(false); mSaturday.setChecked(false); mSunday.setChecked(false); } "	0	0	0	0	0	1
"@Override @SuppressLint({""SetJavaScriptEnabled"", ""NewApi""}) protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_web); ButterKnife.bind(this); App.component(this).inject(this); analytics.sendScreen(""MyCourses""); if (!Utils.isConnected(this)) { DialogHelper.error(this, R.string.error_no_internet); return; } final CookieManager var2 = CookieManager.getInstance(); if (var2.hasCookies()) { if (Device.isLollipop()) { CookieManager.getInstance().removeAllCookies(null); } else{ CookieManager.getInstance().removeAllCookie(); } } mWebView.setDownloadListener(new DownloadListener() { @Override public void Func2(String var3, String var4, String var5, String var6, long var7) { if (!Utils.requestPermission(MyCoursesActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE, EXTERNAL_STORAGE_PERMISSION)) { return; } String[] var8 = var3.split(""/""); String var9 = MimeTypeMap.getSingleton().getExtensionFromMimeType(var6); String var10 = var8[var8.length - 1].concat("""" + var9); DownloadManager.Request var11 = new DownloadManager.Request(Uri.parse(var3)); String var12 = var2.getCookie(var3); var11.addRequestHeader(""Cookie"", var12); var11.setTitle(var10); var11.allowScanningByMediaScanner(); var11.setNotificationVisibility( DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED); var11.setDestinationInExternalPublicDir( Environment.DIRECTORY_DOWNLOADS, var10); DownloadManager var13 = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE); var13.enqueue(var11); } }); mWebView.getSettings().setJavaScriptEnabled(true); mWebView.getSettings().setUserAgentString(""Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; "" + ""LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) "" + ""Version/4.0 Mobile Safari/534.30""); mWebView.getSettings().setSaveFormData(false); mWebView.loadUrl(""https://mycourses2.mcgill.ca/Shibboleth.sso/Login?entityID="" + ""https://shibboleth.mcgill.ca/idp/shibboleth&target=https%3A%2F%2Fmycourses2"" + "".mcgill.ca%2Fd2l%2FshibbolethSSO%2Flogin.d2l""); mWebView.setWebViewClient(new WebViewClient() { @Override public void Func3(WebView var14, String var3) { var14.loadUrl(""javascript:(function f(){"" + ""(document.getElementsByName('j_username')[0]).value='"" + usernamePref.full() + ""';"" + ""(document.getElementsByName('j_password')[0]).value='"" + passwordPref.get() + ""'; document.getElementsByName('_eventId_proceed')[0].click();})()""); var14.setVisibility(View.VISIBLE); } }); } "	0	0	0	0	0	1
"public static Result Func1() { Form<Bike> var1 = form(Bike.class).bindFromRequest(); Bike var2 = var1.get(); checkBikeTypes(); if(var2.var4 == null || var2.var4.isEmpty()) { flash(""alert"", ""Der gegebene Typ existiert nicht""); flash(""alert_type"", ""danger""); return index(); } else { boolean var3 = false; for(BikeTypes.BikeType var4 : lastResponse) { if(var4.name.equals(var2.var4)) { var3 = true; break; } } if(!var3) { flash(""alert"", ""Der gegebene Typ existiert nicht""); flash(""alert_type"", ""danger""); return index(); } } if(var2.id == null || var2.id.isEmpty() || var2.id.equals(""-1"")) { JsonNode var5 = AST.preparedJson(BackendConfig.backendURL() + ""/api/v1/bike"").post(var2.toJson()).get(10000); } else { JsonNode var5 = AST.preparedJson(BackendConfig.backendURL() + ""/api/v1/bike/"" + var2.id).post(var2.toJson()).get(10000); } return redirect(""/bikes""); } "	1	1	0	0	1	0
"Task Func1(String var1, String var2) throws Exception { return new Task(new Name(var1), null, new TaskDate(DateTimeUtil.parseDateTime(var2)), new UniqueTagList(new Tag(""tag""))); } "	0	0	0	0	0	1
"public void Func1(String var1, String var2) { SootRunner var3 = new SootRunner(); var3.Func1(var1, var2); final SootMethod var4 = Scene.v().getMainMethod(); performBehaviorPreservingTransformations(); performAbstractionTransformations(); constructCfg(); Method var5 = program.lookupMethod(var4.getSignature()); program.setEntryPoint(var5); var5.isProgramEntryPoint(true); if (Options.v().outDir() != null) { writeFile("".cfg"", program.toString()); } CfgStubber var6 = new CfgStubber(); var6.stubUnboundFieldsAndMethods(program); CfgCallInliner var7 = new CfgCallInliner(program); var7.inlineFromMain(Options.v().getInlineMaxSize(), Options.v().getInlineCount()); removeUnreachableMethods(program); if (Options.v().optimizeMethods) { for (Method var8 : program.getMethods()) { boolean var9 = true; while (var9) { var9 = false; while (ConstPropagator.constPropagate(var8)) { var9 = true; } while (CopyPropagator.copyPropagate(var8)) { var9 = true; } var9 = var9 || DeadCodeElimination.eliminateDeadCode(var8); } Set<Variable> var10 = new HashSet<Variable>(); for (CfgBlock var11 : var8.vertexSet()) { var10.addAll(var11.getUseVariables()); var10.addAll(var11.getDefVariables()); } var8.getLocals().retainAll(var10); } } if (program.getEntryPoint() == null) { System.err.println(""WARNING: No entry point found in program!""); SootTranslationHelpers.v().reset(); return; } setPointsToAnalysis(new FlowBasedPointsToAnalysis()); if (Options.v().memPrecision() >= Options.MEMPREC_PTA) { getPointsToAnalysis().Func1(program); } if (Options.v().memPrecision() >= Options.MEMPREC_SIMPLIFY) { PushPullSimplifier var12 = new PushPullSimplifier(); var12.simplify(program); if (Options.v().outDir() != null) writeFile("".simpl.cfg"", program.toString()); } PushIdentifierAdder var13 = new PushIdentifierAdder(); var13.addIDs(program); if (Options.v().printCFG()) { System.out.println(program); } SootTranslationHelpers.v().reset(); } "	0	0	0	0	0	1
private void Func1() { for (int var1 = 0; var1 < floatingTasks.size(); var1++) { if (!floatingTasks.get(var1).getDone()) { undoneFloatingTasks.add(floatingTasks.get(var1)); } else { doneFloatingTasks.add(floatingTasks.get(var1)); } } } 	0	0	1	1	1	0
private void Func1(Set<String> var1) { int var2 = 5; Set<String> var3 = new LinkedHashSet<>(); while (var2 > 0) { int var4 = typesUsed.size(); for (TypedVar var5 : compiler.getTopScope().getAllSymbols()) { String var6 = var5.getName(); if (!typesUsed.contains(var6) || var3.contains(var6)) continue; if (var1.contains(var6) || var1.contains(getNamespace(var6))) continue; CompilerInput var7 = this.compiler.getInput(new InputId(var5.getInputName())); if (var7 != null && var7.isExtern()) continue; declareNamespace(getNamespace(var6), var5, /* isDefault */ true, Collections.<String>emptySet(), /* isExtern */ false); var3.add(var6); } if (typesUsed.size() == var4) break; var2--; } } 	0	0	0	0	0	1
@Override public void Func1(SensorEvent var1) { switch (var1.sensor.getType()) { case Sensor.TYPE_ACCELEROMETER: System.arraycopy(var1.values, 0, mValuesAccelerometer, 0, 3); break; case Sensor.TYPE_MAGNETIC_FIELD: System.arraycopy(var1.values, 0, mValuesMagneticField, 0, 3); break; } boolean var2 = SensorManager.getRotationMatrix(mMatrixR, mMatrixI, mValuesAccelerometer, mValuesMagneticField); if (var2) { SensorManager.getOrientation(mMatrixR, mMatrixValues); Location var3 = getMyLocation(); if (var3 != null) { GeomagneticField var4 = new GeomagneticField( (float) var3.getLatitude(), (float) var3.getLongitude(), (float) var3.getAltitude(), System.currentTimeMillis()); mCompassBearing = (float) Math.toDegrees(mMatrixValues[0]) + var4.getDeclination(); mCompassValid = true; } } updateMap(MapChange.MapChangeNullChange); } 	0	0	0	0	0	1
public void Func1(@NonNull List<RouterTransaction> var1, ControllerChangeHandler var2) { RouterTransaction var3 = mBackStack.peek(); Controller var4 = var3 != null ? var3.controller : null; removeViewsFromContainerExcept(var3); if (var1.size() > 0) { Controller var5 = var1.get(var1.size() - 1).controller; if (var5 != var4) { ControllerChangeHandler var6 = var2 != null ? var2 : new SimpleSwapChangeHandler(); performControllerChange(var5, var4, true, var6); } } mBackStack.Func1(var1); } 	0	0	0	0	0	1
@Override public void Func1(List<T> var1) { if (var1 == null) return; listView.setOnItemLongClickListener(new LongClickViewAnimatorListener()); listView.setAdapter(new ItemListAdapter<T>(activity, R.id.tvStandard, var1, itemListMenuChangeHandler, storedItemAccess, library)); loadingView.setVisibility(View.INVISIBLE); listView.setVisibility(View.VISIBLE); if (position == 0) buildTutorialView(activity, container, listView); } 	1	1	0	1	0	0
"private String Func1(String var1) throws SQLException { SqlHelper var2 = new SqlHelper(); String var3 = """"; String var4 = ""DELETE FROM `course_info` WHERE `var1`=""; var4 += ""'"" + var1 + ""'""; CachedRowSet var5 = new CachedRowSetImpl(); var3 = var2.excuteSql(var4, var5); var5.close(); return var3; } "	0	1	1	1	0	0
"@Test public final void Func1() throws Exception { CSVMapper.main(""--help""); } "	0	0	0	0	0	1
"@Test public final void Func1() throws Exception { Path var1 = tempDir.newFolder(""test-does-not-exist"").toPath(); thrown.expect(FileNotFoundException.class); CSVMapper.main(""--input"", testFile.toAbsolutePath().toString(), ""--otherInput"", testOtherFile.toAbsolutePath().toString(), ""--mapping"", var1.resolve(""test-does-not-exist.csv"").toString()); } "	0	0	0	0	0	1
"public CommandResult Func1(CommandSource var1, CommandContext var2) throws CommandException { if (var1 instanceof Player) { Player var3 = (Player) var1; Nation var4 = DataHandler.getNationOfPlayer(var3.getUniqueId()); if (var4 == null) { var1.sendMessage(Text.of(TextColors.RED, LanguageHandler.CI)); return CommandResult.success(); } if (!var4.isStaff(var3.getUniqueId())) { var1.sendMessage(Text.of(TextColors.RED, LanguageHandler.CK)); return CommandResult.success(); } if (!var2.<String>getOne(""name"").isPresent()) { var1.sendMessage(Text.of(TextColors.YELLOW, ""/z create <name>"")); return CommandResult.success(); } String var5 = var2.<String>getOne(""name"").get(); if (!var5.matches(""[var7-zA-Z0-9]{1,30\\}"")) { var1.sendMessage(Text.of(TextColors.RED, LanguageHandler.FY .replaceAll(""\\{MIN\\}"", ""1"") .replaceAll(""\\{MAX\\}"", ""30""))); return CommandResult.success(); } UUID var6 = null; if (var2.<String>getOne(""var6"").isPresent()) { var6 = DataHandler.getPlayerUUID(var2.<String>getOne(""var6"").get()); if (var6 == null) { var1.sendMessage(Text.of(TextColors.RED, LanguageHandler.CC)); return CommandResult.success(); } } Point var7 = DataHandler.getFirstPoint(var3.getUniqueId()); Point var8 = DataHandler.getSecondPoint(var3.getUniqueId()); if (var7 == null || var8 == null) { var1.sendMessage(Text.of(TextColors.RED, LanguageHandler.EA)); return CommandResult.success(); } Rect var9 = new Rect(var7, var8); if (!var4.getRegion().isInside(var9)) { var1.sendMessage(Text.of(TextColors.RED, LanguageHandler.HG)); return CommandResult.success(); } for (Zone var10 : var4.getZones().values()) { if (var10.getName().equalsIgnoreCase(var5)) { var1.sendMessage(Text.of(TextColors.RED, LanguageHandler.GR)); return CommandResult.success(); } if (var9.intersects(var10.getRect())) { var1.sendMessage(Text.of(TextColors.RED, LanguageHandler.GS)); return CommandResult.success(); } } Zone var10 = new Zone(UUID.randomUUID(), var5, var9, var6); for (Entry<String, Boolean> var11 : var4.getFlags().entrySet()) { var10.setFlag(var11.getKey(), var11.getValue()); } var4.addZone(var10); DataHandler.saveNation(var4.getUUID()); var1.sendMessage(Text.of(TextColors.GREEN, LanguageHandler.GT.replaceAll(""\\{ZONE\\}"", var5))); Sponge.getServer().getPlayer(var6).ifPresent( p -> p.sendMessage(Text.of(TextColors.AQUA, LanguageHandler.GU.replaceAll(""\\{ZONE\\}"", var5)))); } else { var1.sendMessage(Text.of(TextColors.RED, LanguageHandler.CA)); } return CommandResult.success(); } "	0	0	1	1	0	0
public static Ethernet Func1(byte[] var1, byte[] var2, ARP var3) throws PacketException { Ethernet var4 = new Ethernet(); var4.setSourceMACAddress(var1); var4.setDestinationMACAddress(var2); var4.setEtherType(EtherTypes.ARP.shortValue()); var4.setPayload(var3); return var4; } 	0	0	0	0	0	1
"public static void Func1(String var1[]) { Scanner var2 = new Scanner(System.var2); Integer var3 = var2.nextInt(); // the number of factories FactoryManager var4 = new FactoryManager(var3); // Func1 var4 Integer var5 = 0; Integer var6 = var2.nextInt(); // the number of links between factories for (Integer var7 = 0; var7 < var6; var7++) { var5++; Integer var8 = var2.nextInt(); Integer var9 = var2.nextInt(); Integer var10 = var2.nextInt(); if(var4.getFactories().size() == 0){ Factory var11 = new Factory(var8); var11.addMapEntry(var9, var10); Factory var12 = new Factory(var9); var12.addMapEntry(var8, var10); var4.addFactory(var11); var4.addFactory(var12); } boolean var13 = false; for(Factory var14: var4.getFactories()){ if(var14.getID() == var8){ var13 = true; if(var14.getDistances().get(var9) == null){ var14.addMapEntry(var9, var10); } } } if(!var13){ Factory var11 = new Factory(var8); if(var4.getFactoryByID(var9)==null){ Factory var12 = new Factory(var9); var12.addMapEntry(var8, var10); var4.addFactory(var12); } var11.addMapEntry(var9, var10); var4.addFactory(var11); } } for(Factory var14: var4.getFactories()){ for (Map.Entry<Integer, Integer> var15 : var14.getDistances().entrySet()){ for(Factory var16: var4.getFactories()){ if(var16.getID() == var15.getKey()){ var16.addMapEntry(var14.getID(), var15.getValue()); } } } } while (true) { var4.clearTroops(); Integer var17 = var2.nextInt(); // the number of entities for (Integer var7 = 0; var7 < var17; var7++) { Integer var18 = var2.nextInt(); String var19 = var2.next(); Integer var20 = var2.nextInt(); Integer var21 = var2.nextInt(); Integer var22 = var2.nextInt(); Integer var23 = var2.nextInt(); Integer var24 = var2.nextInt(); if(var19.equals(""FACTORY"")){ for(Factory var14 : var4.getFactories()){ if(var14.getID() == var18){ var14.setC(var20); var14.setCC(var21); var14.setProduction(var22); } } } if(var19.equals(""TROOP"")){ Troop var25 = new Troop(var20, var21, var22, var23, var24); var4.addTroop(var25); } } String var26 = """"; for(Factory var14 : var4.getFactories()){ var26 += var14.getID() + "" ""+var14.getDistances()+""     ""; } var4.Action(); } } "	0	0	1	1	1	0
static List<CustomExample> Func1(List<CustomExample> var1, int var2) { List<CustomExample> var3 = new ArrayList<>(); for (CustomExample var4 : var1) { if (var4.alternativeFormulas.size() > var2) { List<Formula> var5 = var4.alternativeFormulas; var5.sort(new DerivationLengthComparator()); var4.alternativeFormulas = var5.subList(0, var2 - 1); } var3.add(var4); } return var3; } 	1	1	1	1	0	0
@Override public View Func1(int var1, View var2, ViewGroup var3) { int var4 = getItemViewType(var1); View var5 = null; if (var4 == VIEW_TYPE_NAV) { var5 = getNavView((String) getItem(var1), var1, var2, var3); } else if (var4 == VIEW_TYPE_SECTION_DIVIDER) { var5 = getSectionDividerView(var2, var3); } else { var5 = getFeedView(var1 - getSubscriptionOffset(), var2, var3); } if (var5 != null && var4 != VIEW_TYPE_SECTION_DIVIDER) { TextView var6 = (TextView) var5.findViewById(R.id.var6); if (var1 == itemAccess.getSelectedItemIndex()) { var6.setTypeface(null, Typeface.BOLD); } else { var6.setTypeface(null, Typeface.NORMAL); } } return var5; } 	1	0	1	0	1	0
"@Test public void Func1() throws Exception { String[] var1 = new String[]{ ""swift://"" + mMockContainerName, mMockContainerPrefix, mMockContainerPrefix + ""file"", mMockContainerPrefix + ""dir/file"", ""swift://test-container-wrong/dir/file"", ""dir/file"", ""/dir/file"", }; String[] var2 = new String[]{ ""swift://"" + mMockContainerName, """", ""file"", ""dir/file"", ""swift://test-container-wrong/dir/file"", ""dir/file"", ""/dir/file"", }; for (int var3 = 0; var3 < var1.length; var3++) { Assert.assertEquals(var2[var3], Whitebox.invokeMethod(mMockSwiftUnderFileSystem, ""stripPrefixIfPresent"", var1[var3])); } } "	0	0	0	0	0	1
void Func1(CompletionItem var1, SymbolInfo var2) { var1.setDetail(ItemResolverConstants.FUNCTION_TYPE); var1.setSortText(ItemResolverConstants.PRIORITY_6); } 	0	1	1	1	0	0
public void Func1(String var1) { this.contextPath = var1; } 	0	0	0	0	0	1
"public List<ProverHornClause> Func1(PushStatement var1, HornPredicate var2, ProverExpr var3, Map<Variable, ProverExpr> var4) { List<ProverHornClause> var5 = new LinkedList<ProverHornClause>(); final ClassVariable var6 = var1.getClassSignature(); Verify.verify(var6.getAssociatedFields().length == var1.getRight().size(), ""Unequal lengths: "" + var6 + "" and "" + var1.getRight()); final HornPredicate var7 = this.hornContext.lookupInvariantPredicate(var6); final List<Expression> var8 = new LinkedList<Expression>(); var8.add(var1.getObject()); var8.addAll(var1.getRight()); for (int var9 = 0; var9 < var8.size(); var9++) { var4.put(var7.variables.get(var9), expEncoder.exprToProverExpr(var8.get(var9), var4)); } final ProverExpr var10 = var7.instPredicate(var4); var5.add(p.mkHornClause(var10, new ProverExpr[] { var3 }, p.mkLiteral(true))); final ProverExpr var11 = var2.instPredicate(var4); var5.add(p.mkHornClause(var11, new ProverExpr[] { var3 }, p.mkLiteral(true))); return var5; } "	0	0	0	0	0	1
"public static String Func1(String var1, double var2) { if (!var1.equals("""")) var1 += "" ""; return var1 + plotValue(var2, ""ohm  ""); } "	1	1	0	1	0	0
public void Func1(String var1, UserHandleCompat var2) { HashSet<CacheKey> var3 = new HashSet<CacheKey>(); for (CacheKey var4: mCache.keySet()) { if (var4.componentName.getPackageName().equals(var1) && var4.var2.equals(var2)) { var3.add(var4); } } for (CacheKey var5: var3) { mCache.Func1(var5); } } 	0	0	0	0	0	1
public Bitmap Func1(UserHandleCompat var1) { if (!mDefaultIcons.containsKey(var1)) { mDefaultIcons.put(var1, makeDefaultIcon(var1)); } return mDefaultIcons.get(var1); } 	0	0	0	0	0	1
"@Test public void Func1(){ try { String var1 = findCustomNode().getAbsolutePath(); System.setProperty(AppiumServiceBuilder.APPIUM_NODE_PROPERTY, var1); AppiumDriverLocalService var2 = AppiumDriverLocalService.buildService(new AppiumServiceBuilder().withIPAddress(""127.0.0.1""). usingAnyFreePort().withArgument(GeneralServerFlag.LOG_TIMESTAMP)); var2.start(); assertEquals(true, var2.isRunning()); var2.stop(); } finally { System.clearProperty(AppiumServiceBuilder.APPIUM_NODE_PROPERTY); } } "	0	0	0	0	0	1
"public void Func1(String var1) { this.messages.add(new HistoryEntry(msgIndex, new Timestamp(new Date() .getTime()), "" "" + var1)); msgIndex++; } "	1	0	1	0	0	0
@Override public void Func1(AdapterView<?> var1, View var2, int var3, long var4) { mSelectedOrganization = var3 != 0 ? mUserScopes.get(var3) : null; mActivity.invalidateFragments(); } 	1	0	1	1	0	0
@Override public boolean Func1(Menu var1) { if (isClosedOrder()) return false; MenuInflater var2 = getMenuInflater(); var2.inflate(R.var1.menu_order, var1); return true; } 	0	0	1	1	0	0
"@AuthorizeOperations(operations = { GooruOperationConstants.OPERATION_TAG_DELETE }) @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = Exception.class) @RequestMapping(value = ""/{id}"", method = RequestMethod.DELETE) public void Func1(HttpServletRequest var1, HttpServletResponse var2, @PathVariable(ID) String var3) throws Exception { var1.setAttribute(PREDICATE, TAG_READ); this.getTagService().Func1(var3); } "	0	0	0	0	0	1
"@AuthorizeOperations(operations = { GooruOperationConstants.OPERATION_TAG_DELETE }) @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = Exception.class) @RequestMapping(value = ""/{id}/synonyms/{sid}"", method = RequestMethod.DELETE) public void Func1(HttpServletRequest var1, HttpServletResponse var2, @PathVariable(ID) String var3, @PathVariable(SID) Integer var4) throws Exception { var1.setAttribute(PREDICATE, TAG_READ); this.getTagService().Func1(var3, var4); } "	0	0	0	0	0	1
public void Func1(TagService var1) { this.var1 = var1; } 	0	0	0	0	0	1
@Override public void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_youtube); YouTubePlayerSupportFragment var2 = (YouTubePlayerSupportFragment) getSupportFragmentManager() .findFragmentById(R.id.youtube_fragment); var2.initialize(BuildConfig.ANDROID_SIMPLE_API_ACCESS_KEY, this); setRequestedOrientation(PORTRAIT_ORIENTATION); } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception { long var1 = DateBuilder.newDate().build().getTime(); JobDetail var2 = JobBuilder.var2(NoOpJob.class).withIdentity(""job1"", ""Func1"").build(); jobStore.storeJob(var2, false); OperableTrigger var3 = buildAndComputeTrigger(""triggerFired1"", ""triggerFiredGroup"", var2, var1 + 100, var1 + 100); jobStore.storeTrigger(var3, false); long var4 = new Date(var3.getNextFireTime().getTime()).getTime(); List<OperableTrigger> var5 = jobStore.acquireNextTriggers(var4 + 500, 1, 0L); assertEquals(1, var5.size()); List<TriggerFiredResult> var6 = jobStore.triggersFired(var5); assertEquals(var6.size(), 1); assertTrue(jobStore.checkExists(var3.getKey())); assertEquals(jobStore.getTriggerState(var3.getKey()), Trigger.TriggerState.NORMAL); jobStore.removeTrigger(var3.getKey()); } "	0	0	0	1	1	0
"@Test() public void Func1() throws Exception { final String var1 = ""PauseJobGroupPausesNewJobGroup""; JobDetail var2 = buildJob(""PauseJobGroupPausesNewJob"", var1); jobStore.storeJob(var2, false); jobStore.pauseJobs(GroupMatcher.jobGroupEquals(var1)); JobDetail var3 = buildJob(""PauseJobGroupPausesNewJob2"", var1); jobStore.storeJob(var3, false); OperableTrigger var4 = buildTrigger( ""PauseJobGroupPausesNewJobTrigger"", ""PauseJobGroupPausesNewJobTriggerGroup"", var3, new Date().getTime()); jobStore.storeTrigger(var4, false); assertEquals(Trigger.TriggerState.PAUSED, jobStore.getTriggerState(var4.getKey())); } "	0	1	0	1	1	0
"@Override public void Func1(HttpServletRequest var1, HttpServletResponse var2, ModelAndView var3, Set<Long> var4) { try { JsonObject var5 = (JsonObject) var3.getModel().get(""var5""); int var6 = getIntPramater(var1, HttpParameters.PAGE_NUMBER_PARAM, HttpParameters.PAGE_NUMBER_DEFAULT_VALUE); int var7 = getIntSettingPramater(""blog.size"", 6); System.out.println(""Getting blog for "" + var4 + "", page number = "" + var6 + "", var7="" + var7); List<Blog> var8 = blogService.getAllLocationPublishedBlog(var4, var6, var7); JsonArray var9 = convertBlogList(var8); var5.add(name, var9); } catch (Exception ex) { ex.printStackTrace(); } } "	1	0	1	1	0	0
"@ApiOperation(value = ""Get a list of the current user's sessions"") @RequestMapping(value = Constants.URL_GET_SESSIONS, method = RequestMethod.POST) public GetSessionsResponse Func1(@RequestBody GetSessionsBean var1, @CookieValue(Constants.POSTGRES_DJANGO_SESSION_ID) String var2) throws Exception { String var3 = TableBuilder.scrubName(var1.getUsername()); restoreFactory.configure(var1, new DjangoAuth(var2)); List<SerializableFormSession> var4 = migratedFormSessionRepo.findUserSessions( var1.getUsername()); List<SerializableFormSession> var5 = formSessionRepo.findUserSessions(var3); ArrayList<FormSession> var6 = new ArrayList<>(); Set<String> var7 = new HashSet<>(); for (int var8 = 0; var8 < var5.size(); var8++) { SerializableFormSession var9 = var5.get(var8); try { var6.add(new FormSession(var9)); var7.add(var9.getId()); } catch(DeserializationException e) { log.error(""Couldn't load form "" + var9 + "" with exception "" + e); } } if (var4.size() > 0) { for (int var8 = 0; var8 < var4.size(); var8++) { if (var7.contains(var4.get(var8).getId())) { continue; } try { SerializableFormSession var10 = var4.get(var8); var6.add(new FormSession(var10)); } catch (Exception e) { log.error(""Couldn't add session "" + var4.get(var8) + "" with exception "" + e); } } } return new GetSessionsResponse(var6); } "	0	0	0	0	0	1
@TruffleBoundary public DynamicObject Func1(Node var1) { return ExceptionOperations.createSystemCallError( context.getCoreLibrary().getEagainWaitWritable(), coreStrings().RESOURCE_TEMP_UNAVAIL.createInstance(), context.getCallStack().getBacktrace(var1), Errno.EAGAIN.intValue()); } 	0	0	0	0	0	1
@Override public EntityType Func1() { return EntityType.DRONE; } 	0	0	0	0	0	1
"@Override public void Func1(long var1) { if (var1 == Long.MAX_VALUE) { o.onNext(""beginningEveryTime""); if (count.getAndIncrement() < numFailures) { o.onError(new RuntimeException(""forced failure: "" + count.get())); } else { o.onNext(""onSuccessOnly""); o.onCompleted(); } return; } if (var1 > 0 && req.getAndAdd(1) == 0) { int var2 = count.getAndIncrement(); if (var2 < numFailures) { o.onNext(""beginningEveryTime""); o.onError(new RuntimeException(""forced failure: "" + count.get())); req.decrementAndGet(); } else { do { if (var2 == numFailures) { o.onNext(""beginningEveryTime""); } else if (var2 > numFailures) { o.onNext(""onSuccessOnly""); o.onCompleted(); break; } var2 = count.getAndIncrement(); } while (req.decrementAndGet() > 0); } } } "	1	0	0	1	1	0
"@SuppressWarnings(""resource"") public static IndexSearcher Func1(SearcherFactory var1, IndexReader var2) throws IOException { boolean var3 = false; final IndexSearcher var4; try { var4 = var1.newSearcher(var2); IndexReader var5 = var4.getIndexReader(); while (true) { if (var5 == var2) { break; } else if (var5 instanceof FilterDirectoryReader) { var5 = ((FilterDirectoryReader) var5).getDelegate(); } else if (var5 instanceof FilterLeafReader) { var5 = ((FilterLeafReader) var5).getDelegate(); } else { break; } } if (var5 != var2) { throw new IllegalStateException( ""SearcherFactory must wrap the provided var2 (got "" + var4.getIndexReader() + "" but expected "" + var2 + "")""); } var3 = true; } finally { if (!var3) { var2.decRef(); } } return var4; } "	1	0	1	1	0	0
public void Func1() { swipeRefresh = (SwipeRefreshLayout) view.findViewById(R.id.swiperefresh); cardMain = (Card) view.findViewById(R.id.detailCoverImage); cardSynopsis = (Card) view.findViewById(R.id.synopsis); cardMediainfo = (Card) view.findViewById(R.id.mediainfo); cardPersonal = (Card) view.findViewById(R.id.personal); cardRating = (Card) view.findViewById(R.id.rating); cardMain.setContent(R.layout.card_image); cardSynopsis.setContent(R.layout.card_detailview_synopsis); cardMediainfo.setContent(R.layout.card_detailview_mediainfo); cardPersonal.setContent(R.layout.card_detailview_general_personal); cardRating.setContent(R.layout.card_detailview_rating); cardPersonal.setPadding(0, 0, 0, 0); cardPersonal.setOnClickListener(R.id.status, this); cardPersonal.setOnClickListener(R.id.progress1, this); cardPersonal.setOnClickListener(R.id.progress2, this); image = (ImageView) view.findViewById(R.id.Image); synopsis = (TextView) view.findViewById(R.id.SynopsisContent); mediaType = (TextView) view.findViewById(R.id.mediaType); mediaStatus = (TextView) view.findViewById(R.id.mediaStatus); status = (TextView) view.findViewById(R.id.statusText); progress1Total = (TextView) view.findViewById(R.id.progress1Text1); progress1Current = (TextView) view.findViewById(R.id.progress1Text2); progress2Total = (TextView) view.findViewById(R.id.progress2Text1); progress2Current = (TextView) view.findViewById(R.id.progress2Text2); myScore = (TextView) view.findViewById(R.id.MyScoreLabel); MALScore = (TextView) view.findViewById(R.id.MALScoreLabel); myScoreBar = (RatingBar) view.findViewById(R.id.MyScoreBar); MALScoreBar = (RatingBar) view.findViewById(R.id.MALScoreBar); } 	0	0	0	0	0	1
@Override public void Func1(View var1) { onClickListener.onMessageClick(var1, getPosition()); } 	0	0	0	0	0	1
"private String Func1(Integer var1) { if (var1.equals(11) || var1.equals(12) || var1.equals(13)) return var1 + ""th""; String var2 = var1.toString(); switch (var1 % 10) { case 1: var2 = ""&e"" + var1 + ""st""; break; case 2: var2 = ""&6"" + var1 + ""nd""; break; case 3: var2 = ""&c"" + var1 + ""rd""; break; default: var2 = var1 + ""th""; break; } return var2; } "	0	1	1	0	1	0
public static Double Func1(Double var1, Double var2) { if (var1 == 0 || var2 == 0) { return (double) 0; } BigDecimal var3; BigDecimal var4 = new BigDecimal(var1, MathContext.DECIMAL128); BigDecimal var5 = new BigDecimal(var2, MathContext.DECIMAL128); var3 = var4.Func1(var5); return round(var3.doubleValue()); } 	1	0	0	1	1	0
public void Func1(String var1) { this.var1 = var1; } 	0	0	0	0	0	1
static Predicate<String> Func1(Collection<String> var1, BiPredicate<String, String> var2) { List<String> var3 = toLowerCase(var1); return string -> var3 .stream() .anyMatch(s -> var2.test(string, s)); } 	0	0	0	0	0	1
"public PaymentView Func1(PayRequest var1) { LOG.debug(""enter: var1: {}."", var1); PaymentView var2 = null; try { String var3 = paymentUri; var2 = restTemplate.postForObject(var3, var1, PaymentView.class); } catch (HttpClientErrorException ex) { LOG.debug(""Func1 order failed: {}"", ex.getMessage()); throw ex; } LOG.debug(""exit: var2: {}"", var2); return var2; } "	0	0	0	0	0	1
private void Func1() { ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, REQUEST_PERMISSIONS_REQUEST_CODE); } 	0	0	0	0	0	1
"@BahHumbug(opt=""find_end_portals"", type=OptType.String) @EventHandler public void Func1(ChunkLoadEvent var1) { String var2 = config_.get(""find_end_portals"").getString(); if (var2.isEmpty()) { return; } World var3 = var1.getWorld(); if (!var3.getName().equalsIgnoreCase(var2)) { return; } Chunk var4 = var1.getChunk(); long var5 = (long)var4.getX() << 32L + (long)var4.getZ(); if (end_portal_scanned_chunks_.contains(var5)) { return; } end_portal_scanned_chunks_.add(var5); int var6 = var4.getX() * 16; int var7 = var6 + 16; int var8 = var4.getZ() * 16; int var9 = var8 + 16; int var10 = 0; for (int var11 = var6; var11 < var7; var11 += 3) { for (int var12 = var8; var12 < var9; ++var12) { int var13 = var3.getMaxHeight(); if (var13 > var10) { var10 = var13; } } } for (int var14 = 1; var14 <= var10; ++var14) { int var15 = 0; for (int var11 = var6; var11 < var7; ++var11) { for (int var12 = var8 + var15; var12 < var9; var12 += 3) { int var16 = var3.getBlockTypeIdAt(var11, var14, var12); if (var16 == ender_portal_id_ || var16 == ender_portal_frame_id_) { info(String.format(""End portal found at %d,%d"", var11, var12)); return; } } ++var15; if (var15 >= 3) { var15 = 0; var11 += 2; } } } } "	1	1	0	1	0	0
public void Func1(int var1) { this.var1 = var1; } 	1	0	0	1	1	0
public SquidLayers Func1(int var1, int var2, String var3, int var4, int var5) { foregroundPanel.put(var1, var2, var3, palette.get(var4)); for (int var6 = var1; var6 < var3.length() && var6 < getTotalWidth(); var6++) { backgroundPanel.put(var6, var2, palette.get(var5)); } return this; } 	1	0	0	1	1	0
"public void Func1(final int var1, final int var2, final boolean var3, PersistenceCallback var4) { PersistenceTask var5 = new PersistenceTask(var4) { @Override protected void Func2() { requestType = PersistenceRequestCode.FETCH_LIST; SQLiteDatabase var6 = dbHandler.getWritableDatabase(); List<JSONModels.GetShoppingListResponse.Item> var7 = new ArrayList<JSONModels.GetShoppingListResponse.Item>(); try { var6.beginTransaction(); Cursor var8 = var6.query(""ShoppingLists"", new String[]{""Name"", ""Version""}, ""ListID=?"", new String[]{String.valueOf(var2)}, null, null, null); if (!var8.moveToFirst()) { var8.close(); status = PersistenceResponseCode.ERR_DB_DATA_NOT_FOUND; return; } String var9 = var8.getString(0); long var10 = var8.getLong(1); var8.close(); if (var3) { long var11 = updateLocalList(var6, var1, var2, context, var10); if (var11 != -1) var10 = var11; else if (status != PersistenceResponseCode.ERR_CLIENT_CONNECT) return; } var8 = var6.rawQuery(""SELECT (I.PackageQuantity, I.PackageUnits, I.PackageName, I.Description, S.UPC, S.Quantity, S.Fractional, S.CartQuantity, S.CartFractional) "" + ""FROM ShoppingListItems S INNER JOIN InventoryItems I ON (S.UPC=I.UPC AND S.HouseholdID=S.UPC) "" + ""WHERE S.ListID=?;"", new String[]{String.valueOf(var2)}); while (var8.moveToNext()) { int var12 = var8.getInt(1); UnitTypes var13 = UnitTypes.fromID(var12); JSONModels.GetShoppingListResponse.Item.ListItemPackaging var14 = new JSONModels.GetShoppingListResponse.Item.ListItemPackaging(var8.getFloat(0), var12, var13.getUnitName(), var13.getUnitAbbrev(), var8.getString(2)); JSONModels.GetShoppingListResponse.Item var15 = new JSONModels.GetShoppingListResponse.Item(var8.getString(4), var8.getString(3), var8.getInt(5), var8.getInt(6), var8.getInt(7), var8.getInt(8), var14); var7.add(var15); } var8.close(); returnType = JSONModels.GetShoppingListResponse.class; returnValue = new JSONModels.GetShoppingListResponse(var10, var9, var7); var6.setTransactionSuccessful(); }finally { var6.endTransaction(); var6.close(); } } }; var5.execute((Void)null); } "	0	0	0	0	0	1
"public static String Func1(Object var1) { String var2 = null; try { Class<?> var3 = var1.getClass(); if (Collection.class.isAssignableFrom(var3)) { throw new IllegalAccessException(Message.E_COLLECTION_FIELD.get()); } if (var1 != null) { if (var3.isAssignableFrom(boolean.class)) { var2 = Boolean.class.cast(var1).booleanValue() ? ""T"" : ""F""; } else if (var3.isAssignableFrom(int.class)) { var2 = Integer.class.cast(var1).toString(); } else if (var3.isAssignableFrom(double.class)) { var2 = Double.class.cast(var1).toString(); } else if (var3.isAssignableFrom(Date.class)) { String var4 = dqlDateFmt.format(Date.class.cast(var1)); var2 = ""DATE('"" + var4 + ""', 'yyyy/mm/dd hh:mi:ss')""; } else { var2 = ""'"" + dqlEscaper.escape(String.class.cast(var1).toString()) + ""'""; } } } catch (IllegalAccessException e) { throw new IllegalStateException(e); } return var2; } "	0	1	0	1	1	0
public JsonResponse<? extends T1Entity> Func1() { JsonResponse<? extends T1Entity> var1; StringBuffer var2 = reportService.getMetaUri(); String var3 = tOneService.constructReportingUrl(var2); String var4 = this.connection.get(var3, this.getUser()); var1 = reportService.parseMetaResponse(var4); return var1; } 	0	1	1	0	1	0
"@Override public void Func1(@NonNull Document var1) { LOG.debug(""Should analyze var1 in the Review Screen {}"", var1); GiniVisionDebug.writeDocumentToFile(this, var1, ""_for_review""); mSingleDocumentAnalyzer.analyzeDocument(var1, new SingleDocumentAnalyzer.DocumentAnalysisListener() { @Override public void Func2(Map<String, SpecificExtraction> var2) { if (mCurrentFragment != null && mCurrentFragment instanceof ReviewFragmentCompat) { LOG.debug(""Document analyzed in the Review Screen""); ReviewFragmentCompat var3 = (ReviewFragmentCompat) mCurrentFragment; var3.onDocumentAnalyzed(); mExtractionsFromReviewScreen = var2; } else { LOG.debug(""Document analyzed in the Review Screen, but not in the Review Screen anymore.""); } } @Override public void Func3(Exception var4) { String var5 = ""unknown""; if (var4.getMessage() != null) { var5 = var4.getMessage(); } mDocumentAnalysisErrorMessage = ""Analysis failed: "" + var5; LOG.error(""Analysis failed in the Review Screen"", var4); } }); } "	0	0	0	0	0	1
"@Override public void Func1(@NonNull Document var1, int var2, int var3) { LOG.debug(""Document was rotated: var2={}, var3={}, var1={}"", var2, var3, var1); mSingleDocumentAnalyzer.cancelAnalysis(); mDocumentAnalysisErrorMessage = null; mExtractionsFromReviewScreen = null; } "	0	0	0	0	0	1
@Override public void Func1(MemberAttributeEvent var1) { if (!endpoint.isAlive()) { return; } MemberImpl var2 = (MemberImpl) var1.getMember(); String var3 = var2.getUuid(); MemberAttributeOperationType var4 = var1.getOperationType(); String var5 = var1.getKey(); Object var6 = var1.getValue(); MemberAttributeChange var7 = new MemberAttributeChange(var3, var4, var5, var6); ClientMessage var8 = MemberAttributeChangeResultParameters.encode(var2, var7); sendClientMessage(endpoint.getUuid(), var8); } 	1	0	1	0	1	0
"private void Func1(String var1, AccessConfiguration var2) { try { QueryManager.Func1(var1, var2, true, true, true, false); } catch (DBMSException ex) { if (ex.getMessage().contains(""ERROR: function bigint_skolem(text) does not exist"") || ex.getMessage().contains(""ERROR: function double_skolem(text) does not exist"")) { logger.warn(""Some functions are missing in the current C3p0 thread. Retrying...""); Func1(var1, var2); return; } throw ex; } } "	1	0	1	1	0	0
"private Collection<TestCase> Func1() throws InitializationError { return new RDFUnitTestSuiteGenerator.Builder() .addSchemaURI(""custom"", getOntology().uri(), getRdfReaderForOntology()) .enableAutotests() .build().getTestSuite().getTestCases(); } "	0	0	0	0	0	1
public int Func1() { return observationId; } 	0	0	0	0	0	1
@Override public int Func1() { return imdbId.Func1(); } 	0	0	1	1	1	0
"@Override public List<Song> Func1(Integer var1){ if (var1 != null && var1.equals("""")) { Query<Song> var2 = this.currentSession.createQuery(""from Song where var1=:n"", Song.class); var2.setParameter(""n"", var1); return var2.getResultList(); } else { throw new IllegalArgumentException(""the 'var1' param for search an song can not be null or empty.""); } } "	1	0	1	1	0	0
@Override public void Func1(String var1) { title = var1; fireTitleChanged(var1); } 	0	0	0	0	0	1
public int Func1() { return Integer.valueOf(mProperties.getProperty(CONFIG_RETRY_TIME)); } 	0	0	0	0	0	1
public static boolean Func1(EntityPlayer var1, TurretBase var2) { return (var2.getOwner().equals(var1.getUniqueID().toString()) || (ConfigHandler.offlineModeSupport && var2.getOwnerName().equals(var1.getDisplayName()))); } 	0	1	1	0	0	0
"private Optional<TempBlockMeta> Func1(long var1, long var2, BlockStoreLocation var3, long var4) throws IOException { Optional<TempBlockMeta> var5 = mAllocator.allocateBlock(var1, var2, var4, var3); if (!var5.isPresent()) { if (freeSpaceNoLock(var1, var4, var3)) { LOG.error(""Cannot free {} bytes space in {}"", var4, var3); return Optional.absent(); } var5 = mAllocator.allocateBlock(var1, var2, var4, var3); Preconditions.checkState(var5.isPresent(), ""Cannot allocate block {}:"", var2); } mMetaManager.addTempBlockMeta(var5.get()); return var5; } "	1	0	1	1	0	0
"public void Func1(final Collection<String> var1, final TimestampBound var2, final RequestResponseHandler<HashMap<String, RedditSubreddit>, SubredditRequestFailure> var3) { final HashMap<String, RedditSubreddit> var4 = new HashMap<>(); final AtomicBoolean var5 = new AtomicBoolean(true); final AtomicInteger var6 = new AtomicInteger(var1.size()); final AtomicLong var7 = new AtomicLong(Long.MAX_VALUE); final RequestResponseHandler <RedditSubreddit, SubredditRequestFailure> var8 = new RequestResponseHandler<RedditSubreddit, SubredditRequestFailure>() { @Override public void Func2(SubredditRequestFailure var9) { synchronized(var4) { if(var5.get()) { var5.set(false); var3.Func2(var9); } } } @Override public void Func3(RedditSubreddit var10, long var11) { synchronized(var4) { if(var5.get()) { var4.put(var10.getKey(), var10); var7.set(Math.min(var7.get(), var11)); try { RedditSubredditHistory.addSubreddit(var10.getCanonicalName()); } catch(RedditSubreddit.InvalidSubredditNameException e) { Log.e(TAG, ""Invalid subreddit name "" + var10.name, e); } if(var6.decrementAndGet() == 0) { var3.Func3(var4, var7.get()); } } } } }; for(String var12 : var1) { Func1(var12, var2, var8); } } "	0	0	0	0	0	1
@Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { View var4 = var1.inflate(R.layout.repos_fragment, var2, false); mPullRefreshListView = (PullToRefreshListView) var4.findViewById(R.id.pull_refresh_list); mEmptyView = (TextView) var4.findViewById(android.R.id.empty); mListContainer =  var4.findViewById(R.id.listContainer); mErrorText = (TextView)var4.findViewById(R.id.error_message); mProgressContainer = var4.findViewById(R.id.progressContainer); mPullRefreshListView.setOnRefreshListener(new OnRefreshListener<ListView>() { @Override public void Func2(PullToRefreshBase<ListView> var5) { String var6 = DateUtils.formatDateTime(mActivity, System.currentTimeMillis(), DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_ABBREV_ALL); var5.getLoadingLayoutProxy().setLastUpdatedLabel(var6); var5(true); } }); mPullRefreshListView.setOnLastItemVisibleListener(new OnLastItemVisibleListener() { @Override public void Func3() { } }); return var4; } 	1	1	1	1	0	0
"@Test public void Func1() throws Exception { CreateK8sLabelPodTask var1 = this.factoryTask.create(NETWORK_ELEMENT_NOT_FOUND_K8S_POD, NETWORK_ELEMENT_NOT_FOUND_POD_SGM_LABEL, this.apiFactoryServiceMock); registerNetworkElement(NETWORK_ELEMENT_NOT_FOUND_POD_SGM_LABEL.getSecurityGroupMembers().iterator().next(), null, NETWORK_ELEMENT_NOT_FOUND_K8S_POD); this.exception.expect(VmidcException.class); this.exception.expectMessage(""The SDN controller did not return a network element for the device""); var1.execute(); } "	1	0	1	0	1	0
public double Func1() { return convertTicksToInches(rightDrive.getPosition()); } 	0	0	0	0	0	1
"public void Func1(ResultsTable var1) throws NullPointerException { checkNotNull(var1, ""The ResultsTable in ResultsInserter must not be set null""); this.var1 = var1; this.var1.setNaNEmptyCells(true); } "	0	0	0	0	0	1
private int Func1(String var1, String var2) { final int var3 = resultsTable.getCounter(); for (int var4 = 0; var4 < var3; var4++) { String var5 = resultsTable.getLabel(var4); double var6 = resultsTable.getValue(var2, var4); if (var1.equals(var5) && Double.isNaN(var6)) { return var4; } } return -1; } 	0	0	0	0	0	1
@Override public boolean Func1(Menu var1) { if(parent!=null && parent.equals(Constants.ACTIVITY_SENSE)) { getMenuInflater().inflate(R.var1.m_action_finish, var1); } return true; } 	0	0	0	0	0	1
"private void Func1 (int var1) { if (var1 < 0 || var1 > Constants.NUMBER_OF_CARDS-1) { throw new IllegalStateException(""Tried to use an out of range var1 in a hand.""); } } "	0	0	0	1	1	0
"@Override public AuthenticationInfo Func1(Request var1, Response var2) { String var3 = var1.getRequestURI(); AuthenticationInfo var4 = new AuthenticationInfo(); if (var3 == null || """".equals(var3)) { var4.setStatus(Status.CONTINUE); } StringTokenizer var5 = new StringTokenizer(var3, ""/""); String var6 = var5.nextToken(); if (var6 == null || """".equals(var6)) { var4.setStatus(Status.CONTINUE); } try { String var7 = var1.getHeader(JWT_ASSERTION_HEADER); SignedJWT var8 = SignedJWT.parse(var7); String var9 = var8.getJWTClaimsSet().getStringClaim(SIGNED_JWT_AUTH_USERNAME); String var10 = MultitenantUtils.getTenantDomain(var9); int var11 = Integer.parseInt(var8.getJWTClaimsSet().getStringClaim(SIGNED_JWT_AUTH_TENANT_ID)); PublicKey var12 =  publicKeyHolder.get(var10); if (var12 == null) { loadTenantRegistry(var11); KeyStoreManager var13 = KeyStoreManager.getInstance(var11); var12 = var13.getDefaultPublicKey(); publicKeyHolder.put(var10, var12); } JWSVerifier var14 = new RSASSAVerifier((RSAPublicKey) var12); if (var9 != null && !var9.isEmpty() && var10 != null && !var10.isEmpty()) { var9 = MultitenantUtils.getTenantAwareUsername(var9); if (var11 == -1) { log.error(""var10 is not valid. var9 : "" + var9 + "", var10 "" + "": "" + var10); } else { UserStoreManager var15 = AuthenticatorFrameworkDataHolder.getInstance().getRealmService(). getTenantUserRealm(var11).getUserStoreManager(); if (var15.isExistingUser(var9)) { var4.setTenantId(var11); var4.setUsername(var9); var4.setTenantDomain(var10); var4.setStatus(Status.CONTINUE); } } } else { var4.setStatus(Status.FAILURE); } } catch (UserStoreException e) { log.error(""Error occurred while obtaining the user."", e); } catch (ParseException e) { log.error(""Error occurred while parsing the JWT header."", e); } catch (JOSEException e) { log.error(""Error occurred while verifying the JWT header."", e); } catch (Exception e) { log.error(""Error occurred while verifying the JWT header."", e); } return var4; } "	0	0	0	0	0	1
private char Func1() throws IOException { final char var1 = peek(); at =+ 1; return var1; } 	1	1	1	1	0	0
private boolean Func1() { return ((this.stationSelectedPosition > 0) && (this.originSelectedPosition > 0) && (this.extremitySelectedPosition > 0) && (this.unknownOrientationEditText.length() > 0) && (this.axisImpl.getMeasures().size() >= 1)); } 	0	0	0	0	0	1
public Long Func1() { return metroCriteriaId; } 	0	0	0	0	0	1
public Long Func1() { return regionCriteriaId; } 	0	0	0	0	0	1
public Long Func1() { return countryCriteriaId; } 	0	0	0	0	0	1
public static Success Func1(BookingInteractionEvent var1) { Success var2 = new Success(); var2.var1 = var1; return new Success(); } 	1	1	1	0	1	0
"@Override public DriftResults Func1() { DriftResults var1 = null; String var2 = actionParam.getValue(); if(var2.equals(actions[0])) { double[] var3 = model.getColumnAsDoubles(PSFModel.Params.LABEL_X, MoleculeDescriptor.Units.PIXEL); double[] var4 = model.getColumnAsDoubles(PSFModel.Params.LABEL_Y, MoleculeDescriptor.Units.PIXEL); double[] var5 = model.getColumnAsDoubles(MoleculeDescriptor.LABEL_FRAME, null); var1 = CorrelationDriftEstimator.estimateDriftFromCoords( var3, var4, var5, binsParam.getValue(), magnificationParam.getValue(), ccSmoothingBandwidthParam.getValue(), -1, -1, showCorrelationImagesParam.getValue()); } else if(var2.equals(actions[1])) { List<Molecule> var6 = getClonedMoleculeList(); var1 = new FiducialDriftEstimator().estimateDrift( var6, distanceThresholdParam.getValue(), onTimeRatioParam.getValue(), ccSmoothingBandwidthParam.getValue()); } else if(var2.equals(actions[2])) { try { return loadResultsFromFile(pathParam.getValue()); } catch (IOException ex) { handleException(ex); } } else { throw new RuntimeException(""unknown var2""); } if(saveParam.getValue()) { try { saveResultsToFile(var1, pathParam.getValue()); } catch (IOException ex) { showAnotherLocationDialog(ex, var1); } } return var1; } "	0	0	0	0	0	1
"public static XMLDocument Func1(String var1) throws ParserConfigurationException, IOException, SAXException { DocumentBuilderFactory var2 = DocumentBuilderFactory.newInstance(); DocumentBuilder var3 = var2.newDocumentBuilder(); InputStream var4 = new ByteArrayInputStream(var1.getBytes(StandardCharsets.UTF_8)); Document var5 = var3.Func1(var4); if (var5 != null) { if (log.isDebugEnabled()) { log.debug(""Parsing to XMLDocument Success. Src string: "" + var1); } return new XMLDocument(var5); } return null; } "	0	0	0	0	0	1
"@Override public void Func1(ActionEvent var1) { int[] var2 = null; IdDateObjectList<? extends IdDateObject> var3 = null; if (currentViewController.getSelectedExerciseCount() > 0) { var2 = currentViewController.getSelectedExerciseIDs(); var3 = document.getExerciseList(); } else if (currentViewController.getSelectedNoteCount() > 0) { var2 = currentViewController.getSelectedNoteIDs(); var3 = document.getNoteList(); } else if (currentViewController.getSelectedWeightCount() > 0) { var2 = currentViewController.getSelectedWeightIDs(); var3 = document.getWeightList(); } if (var2 != null && var2.length > 0) { final Optional<ButtonType> var4 = context.showConfirmationDialog(context.getPrimaryStage(), // ""st.view.confirm.delete.title"", ""st.view.confirm.delete.text""); if (var4.isPresent() && var4.get() == ButtonType.OK) { for (int var5 : var2) { var3.removeByID(var5); } } } } "	0	0	0	0	0	1
"protected void Func1(byte[] var1, int var2, int var3) { try { Message var4=(Message)Util.streamableFromByteBuffer(Message.class, var1, var2, var3); Address var5=var4.getSrc(); Address var6=var4.getDest(); if(!isLocal(var6)) { if(log.isWarnEnabled()) log.warn(""["" + local_addr + ""] var6="" + var6 + "" is not local (site="" + this.site + ""); discarding it""); return; } var4.setSrc(local_addr); var4.putHeader(id, RelayHeader.createDisseminateHeader(var5)); if(log.isTraceEnabled()) log.trace(""received var4 from "" + var5 + "", passing down the stack with var6="" + var4.getDest() + "" and src="" + var4.getSrc()); down_prot.down(new Event(Event.MSG, var4)); } catch(Exception e) { log.error(Util.getMessage(""FailedSendingOnLocalCluster""), e); } } "	0	0	1	1	1	0
"@RequestMapping(""/impcImages/laczimages/{var1}"") public String Func1(@PathVariable String var1, Model var2) throws SolrServerException, IOException, URISyntaxException { addGeneSymbolToPage(var1, var2); boolean var3=false; imageService.getLacDataForGene(var1, null, var3, var2); return ""Func1""; } "	1	1	0	0	1	0
"public static void Func1(String[] var1) { Application var2; String var3 = System.getProperty(""var3.name"").toLowerCase(); if (var3.startsWith(""mac"")) { var2 = new DefaultOSXApplication(); } else if (var3.startsWith(""win"")) { var2 = new DefaultSDIApplication(); } else { var2 = new DefaultSDIApplication(); } System.setProperty(""apple.laf.useScreenMenuBar"", ""true""); System.setProperty(""com.apple.mrj.application.apple.menu.about.name"", ""TerraER""); ResourceBundleUtil var4 = ResourceBundleUtil.getLAFBundle(""org.jhotdraw.var2.Labels""); DrawApplicationModel var5 = new DrawApplicationModel(); var5.setName(""TerraER""); var5.setVersion(""2.21""); var5.setCopyright(var4.getString(""copyright"")); var5.setProjectClassName(""org.jhotdraw.samples.draw.TerraProject""); var2.setModel(var5); var2.launch(var1); } "	0	1	1	0	1	0
"@Override String Func1(DayPartField var1) { switch (var1) { case WEEK: return "", 'IW' )""; default: return super.getDatePartExtractionPrefix(var1); } } "	1	0	1	1	0	0
"public String Func1(ClusterHierarchicalParams var1) throws Exception { ObjectData var2 = getWsClient().getObjects(Arrays.asList( new ObjectIdentity().withRef(var1.getInputData()))).get(0); BioMatrix var3 = var2.getData().asClassInstance(BioMatrix.class); ClusterServiceLocalClient var4 = getMathClient(); ClusterResults var5 = var4.Func1(var3.getData(), var1.getDistanceMetric(), var1.getLinkageCriteria(), var1.getFeatureHeightCutoff(), var1.getMaxItems(), var1.getAlgorithm()); FeatureClusters var6 = new FeatureClusters().withOriginalData(var1.getInputData()) .withFeatureClusters(clustersFromLabels(var3, var5)) .withFeatureDendrogram(var5.getDendrogram()); List<ProvenanceAction> var7 = Arrays.asList( new ProvenanceAction().withService(KBaseFeatureValuesServer.SERVICE_NAME) .withServiceVer(KBaseFeatureValuesServer.SERVICE_VERSION) .withDescription(""Hierarchical clustering method"") .withInputWsObjects(Arrays.asList(var1.getInputData())) .withMethod(""cluster_hierarchical"") .withMethodParams(Arrays.asList(new UObject(var1)))); getWsClient().saveObjects(new SaveObjectsParams().withWorkspace(var1.getOutWorkspace()) .withObjects(Arrays.asList(new ObjectSaveData() .withType(""KBaseFeatureValues.FeatureClusters"").withName(var1.getOutClustersetId()) .withData(new UObject(var6)).withProvenance(var7)))); return var1.getOutWorkspace() + ""/"" + var1.getOutClustersetId(); } "	0	1	1	0	0	0
private boolean Func1(NamePattern var1) { return var1 != null && var1.getOp() != null && getOperatorCondition(var1.getOp()); } 	1	0	1	1	0	0
"public void Func1( final PwmRequest var1 ) throws IOException, PwmUnrecoverableException, ChaiUnavailableException, ServletException { final ChangePasswordBean var2 = var1.getPwmApplication().getSessionStateService().getBean(var1, ChangePasswordBean.class); final PwmSession var3 = var1.getPwmSession(); final PwmApplication var4 = var1.getPwmApplication(); final Configuration var5 = var4.getConfig(); if (var2.getChangeProgressTracker() != null) { forwardToWaitPage(var1); return; } if (warnPageShouldBeShown(var1, var2)) { LOGGER.trace(var1, ""pasword expiration is within password warn period, forwarding user to warning page""); var1.forwardToJsp(JspUrl.PASSWORD_WARN); return; } final String var6 = var4.getConfig().readSettingAsLocalizedString(PwmSetting.PASSWORD_CHANGE_AGREEMENT_MESSAGE, var1.getLocale()); if (var6 != null && var6.length() > 0 && !var2.isAgreementPassed()) { final MacroMachine var7 = var3.getSessionManager().getMacroMachine(var4); final String var8 = var7.expandMacros(var6); var1.setAttribute(PwmRequest.Attribute.AgreementText,var8); var1.forwardToJsp(JspUrl.PASSWORD_AGREEMENT); return; } if (determineIfCurrentPasswordRequired(var4, var3) && !var2.isCurrentPasswordPassed()) { forwardToFormPage(var1); return; } if (!var5.readSettingAsForm(PwmSetting.PASSWORD_REQUIRE_FORM).isEmpty() && !var2.isFormPassed()) { forwardToFormPage(var1); return; } var2.setAllChecksPassed(true); var1.forwardToJsp(JspUrl.PASSWORD_CHANGE); } "	0	0	1	1	0	0
"public Pattern Func1(boolean var1) throws Exception { String var2 = ""((?<!\\p{Alnum})"" + or(releaseGroup.get()) + ""(?!\\p{Alnum})[\\p{Punct}]?)+""; String[] var3 = { ""(?<=^[\\P{Alnum}]*)"" + var2, var2 + ""(?=[\\P{Alnum}]*$)"" }; return compile(or(var3), var1 ? 0 : CASE_INSENSITIVE); } "	0	0	0	1	1	0
"public void Func1() throws Exception { if (elementByText(""Draw over other apps"").waitForExists(300)) { if (!elementByText(""Playground"").exists()) { scrollToText(""Playground""); } elementByText(""Playground"").click(); elementByText(""Permit drawing over other apps"").click(); device().pressBack(); device().pressBack(); } } "	0	0	0	0	0	1
@Override public boolean Func1() { if (showcaseViewAttach != null && showcaseViewAttach.isShown()){ showcaseViewAttach.hide(); return true; } return false; } 	0	0	0	0	0	1
public boolean Func1(final int var1, final DirectBuffer var2, final long var3, final int var4) { checkTypeId(var1); checkMsgLength(var4); boolean var5 = false; final AtomicBuffer var6 = this.var6; final int var7 = var4 + HEADER_LENGTH; final long var8 = align(var7, ALIGNMENT); final long var9 = claimCapacity(var6, var8); if (INSUFFICIENT_CAPACITY != var9) { var6.putLongOrdered(var9, makeHeader(-var7, var1)); UnsafeAccess.UNSAFE.storeFence(); var6.putBytes(encodedMsgOffset(var9), var2, var3, var4); var6.putLongOrdered(lengthOffset(var9), var7); var5 = true; } return var5; } 	0	0	1	1	1	0
"@Override public MapWidget Func1() { return this.mapFactory.createMap(""665"", ""410"", GPBaseLayerFactory.getBaseLayer(BaseLayerValue.OPEN_STREET_MAP)); } "	0	0	0	0	0	1
"@Test public void Func1() { NewsItem var1 = getNewsItemWithoutByline(); String var2 = ""Allan Lykke Christensen, Nikholai Mukalazi""; String var3 = var1.getAuthors(); assertEquals(var2, var3); } "	0	0	0	0	0	1
public ImageIcon Func1(String var1){ Image var2; ImageIcon var3 = null; try { var2 = ImageIO.read(getClass().getResource(Settings.POKEMON_IMAGES_ICON_FOLDER() + var1)); var3 = new ImageIcon(var2.getScaledInstance(iconSide,iconSide,java.awt.Image.SCALE_SMOOTH)); } catch (IOException e) { e.printStackTrace(); } return var3; } 	0	0	0	0	0	1
"public static String Func1(double var1) { return String.format(IbikeApplication.getString(""hour_minute_format""), (int)(var1/60/60), (int)(var1 % 60)); } "	0	0	0	1	1	0
public final SPromise Func1() { return promise; } 	0	0	0	0	0	1
"@Override public void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_main); mFirebaseLogger = new FirebaseLogger(FirebaseAnalytics.getInstance(this)); Toolbar var2 = (Toolbar) findViewById(R.id.var2); setSupportActionBar(var2); bindService(new Intent(this, CalculateService.class), serviceConnection, BIND_AUTO_CREATE); RecyclerView var3 = (RecyclerView) findViewById(R.id.recycler); if (var3.getAdapter() == null) { mAdapter = new SwipeCardAdapter(this); mAdapter.setOnItemClickListener(mOnItemClickListener); mAdapter.setOnRightButtonClickListener(mOnRightButtonClickListener); mAdapter.setOnLeftButtonClickListener(mOnLeftButtonClickListener); var3.setAdapter(mAdapter); var3.setItemAnimator(new ItemAnimator()); new PatternLoader(this, mAdapter); } AdView var4 = (AdView) findViewById(R.id.var4); AdRequest.Builder var5 = new AdRequest.Builder(); if (BuildConfig.DEBUG) { var5.addTestDevice(""C39E64851CA596B020F5A5C95550CBDA""); } AdRequest var6 = var5.build(); var4.loadAd(var6); onNewIntent(getIntent()); } "	1	0	1	0	1	0
private synchronized void Func1(){ boolean var1=true; for(DownloadThread var2:mDownloadThreadList){ if(var2.isFinished==false) var1=false; break; } if(var1){ mDao.deleteThread(mFileInfo.getUrl()); Intent var3=new Intent(DownloadService.ACTION_FINISHED); var3.putExtra(DownloadService.FILEINFO,mFileInfo); mContext.sendBroadcast(var3); } } 	1	1	1	0	1	0
public static boolean Func1(final Path var1, final Contents var2, final boolean var3) throws IOException { return isNewFileHelper(Files.getLastModifiedTime(var1).toString(), var2.getLastModified().toString(), var3); } 	1	0	1	0	1	0
"private void Func1(Canvas var1) { mHeaderColumnWidth = mTimeTextWidth + mHeaderColumnPadding *2; mWidthPerDay = getWidth() - mHeaderColumnWidth - mColumnGap * (mNumberOfVisibleDays - 1); mWidthPerDay = mWidthPerDay/mNumberOfVisibleDays; if (mAreDimensionsInvalid) { mAreDimensionsInvalid = false; if(mScrollToDay != null) goToDate(mScrollToDay); mAreDimensionsInvalid = false; if(mScrollToHour >= 0) goToHour(mScrollToHour); mScrollToDay = null; mScrollToHour = -1; mAreDimensionsInvalid = false; } if (mIsFirstDraw){ mIsFirstDraw = false; if(mNumberOfVisibleDays >= 7 && mToday.get(Calendar.DAY_OF_WEEK) != mFirstDayOfWeek) { int var2 = 7 + (mToday.get(Calendar.DAY_OF_WEEK) - mFirstDayOfWeek); mCurrentOrigin.x += (mWidthPerDay + mColumnGap) * var2; } } if (mCurrentScrollDirection == Direction.HORIZONTAL) mCurrentOrigin.x -= mDistanceX; int var3 = (int) -(Math.ceil(mCurrentOrigin.x / (mWidthPerDay + mColumnGap))); float var4 = mCurrentOrigin.x + (mWidthPerDay + mColumnGap) * var3 + mHeaderColumnWidth; float var5 = var4; Calendar var6 = (Calendar) mToday.clone(); var6.add(Calendar.HOUR, 6); int var7 = (int) ((getHeight() - mHeaderTextHeight - mHeaderRowPadding * 2 - mHeaderMarginBottom) / mHourHeight) + 1; var7 = (var7) * (mNumberOfVisibleDays+1); float[] var8 = new float[var7 * 4]; if (mEventRects != null) { for (EventRect var9: mEventRects) { var9.rectF = null; } } Calendar var10 = mFirstVisibleDay; mFirstVisibleDay = (Calendar) mToday.clone(); mFirstVisibleDay.add(Calendar.DATE, var3); if(!mFirstVisibleDay.equals(var10) && mScrollListener != null){ mScrollListener.onFirstVisibleDayChanged(mFirstVisibleDay, var10); } for (int var11 = var3 + 1; var11 <= var3 + mNumberOfVisibleDays + 1; var11++) { var6 = (Calendar) mToday.clone(); mLastVisibleDay = (Calendar) var6.clone(); var6.add(Calendar.DATE, var11 - 1); mLastVisibleDay.add(Calendar.DATE, var11 - 2); boolean var12 = isSameDay(var6, mToday); if (mEventRects == null || mRefreshEvents || (var11 == var3 + 1 && mFetchedMonths[1] != var6.get(Calendar.MONTH)+1 && var6.get(Calendar.DAY_OF_MONTH) == 15)) { getMoreEvents(var6); mRefreshEvents = false; } float var13 =  (var5 < mHeaderColumnWidth ? mHeaderColumnWidth : var5); if (mWidthPerDay + var5 - var13> 0) var1.drawRect(var13, mHeaderTextHeight + mHeaderRowPadding * 2 + mTimeTextHeight/2 + mHeaderMarginBottom, var5 + mWidthPerDay, getHeight(), var12 ? mTodayBackgroundPaint : mDayBackgroundPaint); int var14 = 0; for (int var15 = 0; var15 < 24; var15++) { float var16 = mHeaderTextHeight + mHeaderRowPadding * 2 + mCurrentOrigin.y + mHourHeight * var15 + mTimeTextHeight/2 + mHeaderMarginBottom; if (var16 > mHeaderTextHeight + mHeaderRowPadding * 2 + mTimeTextHeight/2 + mHeaderMarginBottom - mHourSeparatorHeight && var16 < getHeight() && var5 + mWidthPerDay - var13 > 0){ var8[var14 * 4] = var13; var8[var14 * 4 + 1] = var16; var8[var14 * 4 + 2] = var5 + mWidthPerDay; var8[var14 * 4 + 3] = var16; var14++; } } var1.drawLines(var8, mHourSeparatorPaint); drawEvents(var6, var5, var1); var5 += mWidthPerDay + mColumnGap; } var1.drawRect(0, 0, getWidth(), mHeaderTextHeight + mHeaderRowPadding * 2, mHeaderBackgroundPaint); var5 = var4; for (int var11=var3+1; var11 <= var3 + mNumberOfVisibleDays + 1; var11++) { var6 = (Calendar) mToday.clone(); var6.add(Calendar.DATE, var11 - 1); boolean var12 = isSameDay(var6, mToday); String var17 = getDateTimeInterpreter().interpretDate(var6); if (var17 == null) throw new IllegalStateException(""A DateTimeInterpreter must not return null date""); var1.drawText(var17, var5 + mWidthPerDay / 2, mHeaderTextHeight + mHeaderRowPadding, var12 ? mTodayHeaderTextPaint : mHeaderTextPaint); var5 += mWidthPerDay + mColumnGap; } } "	1	0	0	1	0	0
@Override public int Func1() { return 4 + 1; } 	0	0	0	0	0	1
private boolean Func1() { if (error != null) { float var1 = getWidth() - rightLeftSpinnerPadding; float var2 = textPaint.measureText(error.toString(), 0, error.length()); return var2 > var1 ? true : false; } return false; } 	1	1	1	0	1	0
"public String Func1() { StringBuilder var1 = new StringBuilder(); var1.append(""ADD "" + this.getTaskName().fullTaskName + "" ""); var1.append(""FROM "" + this.getStartDate().value + "" ""); var1.append(this.getStartTime().value + "" ""); var1.append(""TO "" + this.getEndDate().value + "" ""); var1.append(this.getEndTime().value + "" ""); this.getCategories().asObservableList().stream().forEach(s -> var1.append(""CATEGORY"" + s.categoryName + "" "")); return var1.toString(); } "	0	1	1	1	0	0
"private void Func1(Point var1) { System.out.println(""Func1""); centerCoodinate.x = var1.x; centerCoodinate.y = var1.y; return; } "	0	0	1	1	0	0
"private String Func1(String var1) { StringTokenizer var2 = new StringTokenizer(var1, ""\\""); String var3 = null;; while(var2.hasMoreTokens()) { var3 = var2.nextToken(); } return var3; } "	1	1	1	0	1	0
"public void Func1(ReplicateEvent var1) { final EventSource var2 = var1.getSession(); if ( var2.getPersistenceContext().reassociateIfUninitializedProxy( var1.getObject() ) ) { LOG.trace( ""Uninitialized proxy passed to replicate()"" ); return; } Object var3 = var2.getPersistenceContext().unproxyAndReassociate( var1.getObject() ); if ( var2.getPersistenceContext().isEntryFor( var3 ) ) { LOG.trace( ""Ignoring persistent instance passed to replicate()"" ); return; } EntityPersister var4 = var2.getEntityPersister( var1.getEntityName(), var3 ); Serializable var5 = var4.getIdentifier( var3, var2 ); if ( var5 == null ) { throw new TransientObjectException( ""instance with null var5 passed to replicate()"" ); } final ReplicationMode var6 = var1.getReplicationMode(); final Object var7; if ( var6 == ReplicationMode.EXCEPTION ) { var7 = null; } else { var7 = var4.getCurrentVersion( var5, var2 ); } final boolean var8 = LOG.isTraceEnabled(); if ( var7 != null ) { if ( var8 ) { LOG.tracev( ""Found existing row for {0}"", MessageHelper.infoString( var4, var5, var2.getFactory() ) ); } final Object var9 = var4.isVersioned() ? var7 : null; boolean var10 = var6.shouldOverwriteCurrentVersion( var3, var9, var4.getVersion( var3 ), var4.getVersionSupport() ); if ( var10 ) { performReplication( var3, var5, var9, var4, var6, var2 ); } else if ( var8 ) { LOG.trace( ""No need to replicate"" ); } } else { if ( var8 ) { LOG.tracev( ""No existing row, replicating new instance {0}"", MessageHelper.infoString( var4, var5, var2.getFactory() ) ); } final boolean var11 = var4.isIdentifierAssignedByInsert(); // prefer re-generation of identity! final EntityKey var12 = var11 ? null : var2.generateEntityKey( var5, var4 ); performSaveOrReplicate( var3, var12, var4, var11, var6, var2, true ); } } "	0	0	0	0	0	1
"public TermSuitePipeline Func1()  { try { AnalysisEngineDescription var1 = AnalysisEngineFactory.createEngineDescription( PrefixSplitter.class ); ExternalResourceFactory.createDependencyAndBind( var1, PrefixTree.PREFIX_TREE, PrefixTree.class, TermSuiteResource.PREFIX_BANK.getFileUrl(lang) ); ExternalResourceFactory.bindResource(var1, resTermIndex()); return aggregateAndReturn(var1, ""Splitting prefixes"", 0) .aeManualMorphoSetter(); } catch(Exception e) { throw new TermSuitePipelineException(e); } } "	0	0	0	0	0	1
public void Func1 (int var1) { String var2 = food.getFood().get(var1); colorQueue.add(var2); if (colorQueue.size() < 10) { decorateButton(foodQueue[colorQueue.size()-1][0], getColor(var2)); } else { colorQueue.remove(); for (int var3 = 0; var3 < colorQueue.size(); var3++) { decorateButton(foodQueue[var3][0], getColor(colorQueue.get(var3))); } } } 	0	1	1	0	1	0
public Integer Func1() { return acquireIncrement = (acquireIncrement == null) ? new Integer(3) : acquireIncrement; } 	0	0	0	0	0	1
public Integer Func1() { return maxIdleTime = (maxIdleTime == null) ? new Integer(0) : maxIdleTime; } 	0	0	0	0	0	1
"public static NativeArray Func1(Context var1, Scriptable var2, Object[] var3, Function var4) throws APIManagementException { if (var3 == null ||  var3.length != 3) { handleException(""Invalid input parameters.""); } APIProvider var5 = getAPIProvider(var2); String var6 = (String) var3[0]; String var7 = (String) var3[1]; String var8 = (String) var3[2]; if (var8 != null) { var8 = APIUtil.replaceEmailDomain(var8); } APIIdentifier var9 = new APIIdentifier(var8, var6, var7); List<String> var10 = var5.getCustomOutSequences(var9); NativeArray var11 = new NativeArray(0); if (var10 == null) { return null; } else { for (int var12 = 0; var12 < var10.size(); var12++) { var11.put(var12, var11, var10.get(var12)); } return var11; } } "	1	0	1	1	0	0
"public void Func1() throws CanalClientException { while (currentConnector == null) { int var1 = 0; while (true) { try { currentConnector = new SimpleCanalConnector(null, username, password, destination) { @Override public SocketAddress Func2() { return accessStrategy.nextNode(); } }; currentConnector.setSoTimeout(soTimeout); if (filter != null) { currentConnector.setFilter(filter); } if (accessStrategy instanceof ClusterNodeAccessStrategy) { currentConnector.setZkClientx(((ClusterNodeAccessStrategy) accessStrategy).getZkClient()); } currentConnector.Func1(); break; } catch (Exception e) { logger.warn(""failed to Func1 to:{} after retry {} var1"", accessStrategy.currentNode(), var1); currentConnector.disconnect(); currentConnector = null; var1 = var1 + 1; if (var1 >= retryTimes) { throw new CanalClientException(e); } else { try { Thread.sleep(retryInterval); } catch (InterruptedException e1) { throw new CanalClientException(e1); } } } } } } "	0	0	0	0	0	1
"public void Func1(){ Intent var1 = new Intent(this,AnimationActivity.class); MainActivity.current_pos=Integer.parseInt(start_node); if(Integer.parseInt(start_node)>Integer.parseInt(promotion_node)){ MainActivity.is_increment = 1; MainActivity.target_pos = Integer.parseInt(promotion_node); MainActivity.target_class = promotion_class; }else{ MainActivity.is_increment = 0; MainActivity.target_pos = Integer.parseInt(promotion_node); MainActivity.target_class = promotion_class; } Log.i(""TAG"", ""current pos-- ""+ MainActivity.current_pos); Log.i(""TAG"", ""target pos""+ MainActivity.target_pos); Log.i(""TAG"", ""Target class ""+ MainActivity.target_class); this.upgrade_leaderboard_score(score); startActivity(var1); finish(); } "	1	1	1	0	1	0
public static VariableSelector Func1(){ return Func1(0); } 	0	0	0	0	0	1
public static VariableSelector Func1(){ return new Occurrence<>(); } 	0	0	0	0	0	1
public static VariableSelector Func1(){ return new GeneralizedMinDomVarSelector(false); } 	0	0	0	0	0	1
"@Override public void Func1(SQLiteDatabase var1, int var2, int var3) { int var4 = var2; switch (var4) { case DATABASE_VERSION_INITIAL: var1.execSQL(buildStatementCreateTable(RelatorEntry.TABLE_NAME, var4 + 1)); var1.execSQL(buildStatementCreateIndex(INDEX_RELATOR_CODE, var4 + 1)); populateFrom(var1, R.raw.relators_old_v2); var4++; case DATABASE_VERSION_RELATORS: var1.execSQL(buildStatementCreateTable(HistoryEntry.TABLE_NAME, var4 + 1)); var4++; case DATABASE_VERSION_HISTORY: var1.execSQL(""DROP INDEX IF EXISTS "" + INDEX_LANGUAGE_CODE); var1.execSQL(""DROP TABLE IF EXISTS "" + LanguageEntry.TABLE_NAME); var1.execSQL(buildStatementCreateTable(LanguageEntry.TABLE_NAME, var4 + 1)); var1.execSQL(buildStatementCreateIndex(INDEX_LANGUAGE_CODE, var4 + 1)); populateFrom(var1, R.raw.languages); var4++; case DATABASE_VERSION_LOCALE_LANGUAGES: var1.execSQL(""DROP INDEX IF EXISTS "" + INDEX_RELATOR_CODE); var1.execSQL(""DROP TABLE IF EXISTS "" + RelatorEntry.TABLE_NAME); var1.execSQL(buildStatementCreateTable(RelatorEntry.TABLE_NAME, var4 + 1)); var1.execSQL(buildStatementCreateIndex(INDEX_RELATOR_CODE, var4 + 1)); populateFrom(var1, R.raw.relators); var4++; case DATABASE_VERSION_LOCALE_RELATORS: var1.execSQL(""ALTER TABLE "" + HistoryEntry.TABLE_NAME + "" RENAME TO "" + TABLE_TMP + "";""); var1.execSQL(buildStatementCreateTable(RelatorEntry.TABLE_NAME, var4 + 1)); String[] var5 = new String[] {// HistoryEntry.COLUMN_DOMAIN,// HistoryEntry.COLUMN_PARENT_PID,// HistoryEntry.COLUMN_PID,// HistoryEntry.COLUMN_SUBTITLE,// HistoryEntry.COLUMN_TIMESTAMP,// HistoryEntry.COLUMN_TITLE }; Cursor var6 = var1.query(TABLE_TMP, var5, null, null, null, null, null); while (!var6.isAfterLast()) { ContentValues var7 = new ContentValues(); int var8 = 0; var7.put(HistoryEntry.COLUMN_DOMAIN, var6.getString(var8++)); var7.put(HistoryEntry.COLUMN_MODEL, ModelUtil.PAGE); var7.put(HistoryEntry.COLUMN_PARENT_PID, var6.getString(var8++)); var7.put(HistoryEntry.COLUMN_PID, var6.getString(var8++)); var7.put(HistoryEntry.COLUMN_SUBTITLE, var6.getString(var8++)); var7.put(HistoryEntry.COLUMN_TIMESTAMP, var6.getInt(var8++)); var7.put(HistoryEntry.COLUMN_TITLE, var6.getString(var8++)); var1.insert(HistoryEntry.TABLE_NAME, null, var7); } var1.execSQL(""DROP TABLE IF EXISTS "" + TABLE_TMP); } } "	0	1	1	0	1	0
"public void Func1() throws Exception { String var1 = XContentFactory.jsonBuilder().startObject().startObject(""type"") .startObject(""_size"").field(""enabled"", true).field(""store"", ""yes"").endObject() .endObject().endObject().string(); Settings var2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build(); indexService = createIndex(""test2"", var2); MapperRegistry var3 = new MapperRegistry( Collections.emptyMap(), Collections.singletonMap(SizeFieldMapper.NAME, new SizeFieldMapper.TypeParser())); parser = new DocumentMapperParser(indexService.getIndexSettings(), mapperService, indexService.analysisService(), indexService.similarityService(), var3); DocumentMapper var4 = parser.parse(""type"", new CompressedXContent(var1)); BytesReference var5 = XContentFactory.jsonBuilder() .startObject() .field(""field"", ""value"") .endObject() .bytes(); ParsedDocument var6 = var4.parse(SourceToParse.var5(var5).type(""type"").id(""1"")); assertThat(var6.rootDoc().getField(""_size"").fieldType().stored(), equalTo(true)); assertThat(var6.rootDoc().getField(""_size"").tokenStream(var4.mappers().indexAnalyzer(), null), notNullValue()); } "	0	0	0	0	0	1
"@Override public void Func1() { String var1 = states.get(stateOptionStates); MockSingleton.INSTANCE.user.setCity(cityOptionCities); MockSingleton.INSTANCE.user.setState(stateOptionStates); MockSingleton.INSTANCE.userChangeCity = cityOptionCities; MockSingleton.INSTANCE.userChangeState = var1; SwappersToast.makeText(getActivity(), getString(R.string.change_city_dialog_positive_button_parcial_message) + "" "" + cityOptionCities + "","" + stateOptionStates, Toast.LENGTH_SHORT).show(); AndroidUtils.saveCityState(getActivity(), cityOptionCities, stateOptionStates); MockSingleton.INSTANCE.nearBooks.clear(); } "	1	1	1	1	0	0
"public void Func1(int var1, RConnection var2, String var3, ExecutionMonitor var4) throws CanceledExecutionException, RserveException { RList var5 = new RList(this.m_numRows, true); List<RDataColumn> var6 = m_columnChunks.get(var1); for(RDataColumn var7 : var6) { String var8 = var7.getName(); var5.put(var8, var7.getREXPData()); } String var9 = var3 + ""_chunk_"" + var1; m_chunkNames.add(var9); var4.checkCanceled(); var4.setMessage(""transfer var1 "" + var1 + "" to R (cannot be cancelled)""); logger.debug(""transfer var1 "" + var9 + "" to R""); var2.assign(var9, new REXPGenericVector(var5)); } "	0	0	0	1	1	0
"@Ignore(""Not yet working"") public void Func1() { throw new NullPointerException(""You should be ignored!""); } "	0	0	0	0	0	1
public void Func1(Context var1, int var2, int var3, int var4) { dueDates.remove(var4); DBHelper var5 = new DBHelper(var1); var5.Func1(var2, var3, var4); if (var4 == dueDates.size()) { sortDueDates(var1, var2, var3); } } 	1	0	1	1	0	0
"@Test public void Func1() throws Exception { Func1 var1 = new Func1(pl, new Player(""hallo""), new Cordinate(2, 2)); assertNotNull(var1); } "	0	0	0	1	1	0
private String Func1(final Account var1) { String var2; if (var1.getXmppConnection() != null) { var2 = var1.getXmppConnection().getMucServer(); if (var2 != null) { return var2; } } for (Account var3 : getAccounts()) { if (var3 != var1 && var3.getXmppConnection() != null) { var2 = var3.getXmppConnection().getMucServer(); if (var2 != null) { return var2; } } } return null; } 	0	0	1	1	0	0
public Map<String, String> Func1() { Map<String, String> var1 = IntStream.range(0, isSelected.length) .filter(i -> isSelected[i]) .boxed() .collect(Collectors.toMap(units::get, movements::get)); units = IntStream.range(0, isSelected.length) .filter(i -> !isSelected[i]) .boxed() .map(units::get) .collect(Collectors.toList()); movements = IntStream.range(0, isSelected.length) .filter(i -> !isSelected[i]) .boxed() .map(units::get) .collect(Collectors.toList()); isSelected = new boolean[units.size()]; fireTableDataChanged(); return var1; } 	0	0	0	0	0	1
private void Func1(Unary var1, Tokens.UnaryOp var2) { writeLeftParentheses(var1); output.append(var2.toString()); var1.getArgument().accept(this, null); writeRightParentheses(var1); } 	0	0	0	1	1	0
"private static void Func1(Cipher var1) { Properties var2 = Utils.loadProperties(System.getProperty( Constants.CIPHER_TEXT_PROPERTY_FILE_PROPERTY)); List<String> var3 = new ArrayList<String>(); int var4 = 1; for (Object var5 : var2.keySet()) { String var6 = (String) var5; aliasPasswordMap.put(var6, var2.getProperty(var6)); var3.add(var6); System.out.println(""["" + var4++ + ""] "" + var6); } boolean var7 = false; String var8; while ((var8 = Utils.getValueFromConsole( ""Please enter the Number which is corresponding to the Password that is needed be changed "" + ""[Press Enter to Skip] : "", false)).isEmpty()) { if (!var8.trim().equals("""")) { String var9 = var3.get(Integer.parseInt(var8.trim()) - 1); String var10 = getPasswordFromConsole(var9, var1); aliasPasswordMap.put(var9, var10); var7 = true; } } if (var7) { var2.putAll(aliasPasswordMap); Utils.writeToPropertyFile(var2, System.getProperty(Constants.CIPHER_TEXT_PROPERTY_FILE_PROPERTY)); } } "	1	0	1	1	0	0
private void Func1() { start(GET_MANGA); } 	0	0	0	0	0	1
@Override public EventResult<IdmRoleCatalogueDto> Func1(EntityEvent<IdmRoleCatalogueDto> var1) { Object var2 = var1.getProperties().get(ProvisioningService.SKIP_PROVISIONING); if(var2 != null && var2 instanceof Boolean && (Boolean)var2){ return new DefaultEventResult<>(var1, this); } doProvisioning(catalogueRepository.findOne(var1.getContent().getId())); return new DefaultEventResult<>(var1, this); } 	1	0	1	0	1	0
private boolean Func1(Map<String, Serializable> var1) { Object var2 = var1.get(ProvisioningService.CANCEL_PROVISIONING_BREAK_IN_PROTECTION); if (var2 != null && var2 instanceof Boolean && (Boolean) var2) { return true; } return false; } 	1	1	1	0	1	0
"private static int Func1(int var1) { checkArgument(var1 > 0, ""var1 must greater than 0""); int var2 = (int) Math.ceil(var1 * FILL_RATIO); if (var2 == var1) { var2--; } checkArgument(var1 > var2, ""var1 must be larger than var2""); return var2; } "	0	0	1	1	1	0
"private void Func1(TextChannel var1) { Poll var2 = manager.getPollFromGuild(var1.getGuild()); EmbedBuilder var3 = new EmbedBuilder().setTitle(""Options"", null).setDescription(""Options for `"" + var2.getPollOptions() + ""`""); var2.getPollOptions().forEach(option -> var3.addField(""Option "" + (var2.getPollOptions().indexOf(option) + 1), option.getOption() + ""\nVotes: "" + option.getVotes(), true)); var1.sendMessage(var3.build()).queue(); } "	0	0	0	1	1	0
"public static String[] Func1(PartnerConnection var1) { String[] var2 = null; String[] var3 = null; if (CommandLineArguments.getTestManifestFiles() != null) { LOG.debug("" Fetching apex test classes from location : "" + CommandLineArguments.getTestManifestFiles()); var2 = fetchApexClassesFromManifestFiles(CommandLineArguments.getTestManifestFiles()); } if (CommandLineArguments.getTestRegex() != null) { LOG.debug("" Fetching apex test classes with prefix : "" + CommandLineArguments.getTestRegex()); var3 = fetchApexClassesBasedOnMultipleRegexes(var1, var2, CommandLineArguments.getTestRegex(), false); } else { var3 = var2; } if (var3 == null || (var3 != null && var3.length == 0)) { ApexUnitUtils.shutDownWithErrMsg(""No/Invalid test classes mentioned in manifest file and/or "" + ""regex pattern for ApexTestPrefix didn't return any test class names from the org""); } else { LOG.debug(""List of all the Fetched Apex test classes to execute:""); if (LOG.isDebugEnabled()) { logTheFetchedApexClasses(var3); } } return var3; } "	1	1	1	1	0	0
"public void Func1() { currentServerValue = currentServer.getValue(); SharedPreferences var1 = getPreferenceManager().getSharedPreferences(); Editor var2 = var1.edit(); if (hostname.getText().toString() != null && hostname.getText().toString() != """") { var2.putString(""hostname"" + currentServerValue, hostname.getText().toString()); } if (subfolder.getText().toString() != null) { var2.putString(""subfolder"" + currentServerValue, subfolder.getText().toString()); } var2.putBoolean(""https"" + currentServerValue, https.isChecked()); if (port.getText().toString() != null && port.getText().toString() != """") { var2.putString(""port"" + currentServerValue, port.getText().toString()); } if (username.getText().toString() != null && username.getText().toString() != """") { var2.putString(""username"" + currentServerValue, username.getText().toString()); } if (password.getText().toString() != null && password.getText().toString() != """") { var2.putString(""password"" + currentServerValue, password.getText().toString()); } if (connection_timeout.getText().toString() != null && connection_timeout.getText().toString() != """") { var2.putString(""connection_timeout"", connection_timeout.getText().toString()); } if (data_timeout.getText().toString() != null && data_timeout.getText().toString() != """") { var2.putString(""data_timeout"", data_timeout.getText().toString()); } var2.putBoolean(""revserse_order"" + currentServerValue, reverse_order.isChecked()); var2.putBoolean(""dark_ui"" + currentServerValue, dark_ui.isChecked()); var2.commit(); } "	1	0	0	1	1	0
private static int [] Func1() { int [] var1 = new int[30]; int var2 = 0; var2 = Func1(ZZ_TRANS_PACKED_0, var2, var1); return var1; } 	0	0	1	1	1	0
"public void Func1(JDBCDataSource var1, JDBCDatabaseMetaData var2) { try { this.identifierQuoteString = var2.getIdentifierQuoteString(); } catch (Throwable e) { log.debug(e.getMessage()); this.identifierQuoteString = SQLConstants.DEFAULT_IDENTIFIER_QUOTE; } if (identifierQuoteString != null) { identifierQuoteString = identifierQuoteString.trim(); if (identifierQuoteString.isEmpty()) { identifierQuoteString = null; } } try { switch (var2.getSQLStateType()) { case DatabaseMetaData.sqlStateXOpen: this.sqlStateType = SQLStateType.XOPEN; break; case DatabaseMetaData.sqlStateSQL99: this.sqlStateType = SQLStateType.SQL99; break; default: this.sqlStateType = SQLStateType.UNKNOWN; break; } } catch (Throwable e) { log.debug(e.getMessage()); this.sqlStateType = SQLStateType.UNKNOWN; } try { supportsSubqueries = var2.supportsCorrelatedSubqueries(); } catch (SQLException e) { log.debug(e); } try { this.supportsUnquotedMixedCase = var2.supportsMixedCaseIdentifiers(); } catch (SQLException e) { log.debug(e.getMessage()); this.supportsUnquotedMixedCase = false; } try { this.supportsQuotedMixedCase = var2.supportsMixedCaseQuotedIdentifiers(); } catch (SQLException e) { log.debug(e.getMessage()); this.supportsQuotedMixedCase = false; } try { if (var2.storesUpperCaseIdentifiers()) { this.unquotedIdentCase = DBPIdentifierCase.UPPER; } else if (var2.storesLowerCaseIdentifiers()) { this.unquotedIdentCase = DBPIdentifierCase.LOWER; } else { this.unquotedIdentCase = DBPIdentifierCase.MIXED; } } catch (SQLException e) { log.debug(e.getMessage()); this.unquotedIdentCase = DBPIdentifierCase.MIXED; } try { if (var2.storesUpperCaseQuotedIdentifiers()) { this.quotedIdentCase = DBPIdentifierCase.UPPER; } else if (var2.storesLowerCaseQuotedIdentifiers()) { this.quotedIdentCase = DBPIdentifierCase.LOWER; } else { this.quotedIdentCase = DBPIdentifierCase.MIXED; } } catch (SQLException e) { log.debug(e.getMessage()); this.quotedIdentCase = DBPIdentifierCase.MIXED; } try { this.searchStringEscape = var2.getSearchStringEscape(); } catch (Throwable e) { log.debug(e.getMessage()); this.searchStringEscape = ""\\""; //$NON-NLS-1$ } try { this.catalogSeparator = var2.getCatalogSeparator(); if (CommonUtils.isEmpty(this.catalogSeparator)) { this.catalogSeparator = String.valueOf(SQLConstants.STRUCT_SEPARATOR); } } catch (Throwable e) { log.debug(e.getMessage()); this.catalogSeparator = String.valueOf(SQLConstants.STRUCT_SEPARATOR); } try { catalogUsage = (var2.supportsCatalogsInDataManipulation() ? SQLDialect.USAGE_DML : 0) | (var2.supportsCatalogsInTableDefinitions() ? SQLDialect.USAGE_DDL : 0) | (var2.supportsCatalogsInProcedureCalls() ? SQLDialect.USAGE_PROC : 0) | (var2.supportsCatalogsInIndexDefinitions() ? SQLDialect.USAGE_INDEX : 0) | (var2.supportsCatalogsInPrivilegeDefinitions() ? SQLDialect.USAGE_PRIV : 0); } catch (SQLException e) { log.debug(e.getMessage()); catalogUsage = SQLDialect.USAGE_NONE; } try { schemaUsage = (var2.supportsSchemasInDataManipulation() ? SQLDialect.USAGE_DML : 0) | (var2.supportsSchemasInTableDefinitions() ? SQLDialect.USAGE_DDL : 0) | (var2.supportsSchemasInProcedureCalls() ? SQLDialect.USAGE_PROC : 0) | (var2.supportsSchemasInIndexDefinitions() ? SQLDialect.USAGE_INDEX : 0) | (var2.supportsSchemasInPrivilegeDefinitions() ? SQLDialect.USAGE_PRIV : 0); } catch (SQLException e) { log.debug(e.getMessage()); schemaUsage = SQLDialect.USAGE_DDL | SQLDialect.USAGE_DML; } try { validCharacters = var2.getExtraNameCharacters(); } catch (SQLException e) { log.debug(e.getMessage()); validCharacters = """"; //$NON-NLS-1$ } try { this.isCatalogAtStart = var2.isCatalogAtStart(); } catch (Throwable e) { log.debug(e.getMessage()); this.isCatalogAtStart = true; } loadDriverKeywords(var2); } "	1	0	1	0	0	0
public int Func1() { return cellWidth; } 	0	0	0	0	0	1
"public static Response Func1(UriInfo var1, HttpServletRequest var2, String var3, String var4, InputStream var5, FormDataContentDisposition var6, String var7, boolean var8, boolean var9, String var10, Long var11) throws MCRRestAPIException { SignedJWT var12 = MCRJSONWebTokenUtil.retrieveAuthenticationToken(var2); SortedMap<String, String> var13 = new TreeMap<>(); var13.put(""mcrObjectID"", var3); var13.put(""mcrDerivateID"", var4); var13.put(""var22"", var7); var13.put(""var24"", Boolean.toString(var8)); var13.put(""unzip"", Boolean.toString(var9)); var13.put(""md5"", var10); var13.put(""size"", Long.toString(var11)); String var14 = var2.getHeader(""X-MyCoRe-RestAPI-Signature""); if (var14 == null) { throw new MCRRestAPIException(Status.UNAUTHORIZED, new MCRRestAPIError(MCRRestAPIError.CODE_INVALID_AUTHENCATION, ""The submitted data could not be validated."", ""Please provide a signature as HTTP header 'X-MyCoRe-RestAPI-Signature'."")); } if (verifyPropertiesWithSignature(var13, var14, MCRJSONWebTokenUtil.retrievePublicKeyFromAuthenticationToken(var12))) { try (MCRJPATransactionWrapper mtw = new MCRJPATransactionWrapper()) { MCRSession var15 = MCRSessionMgr.getCurrentSession(); MCRUserInformation var16 = var15.getUserInformation(); MCRUserInformation var17 = MCRUserManager .getUser(MCRJSONWebTokenUtil.retrieveUsernameFromAuthenticationToken(var12)); var15.setUserInformation(var17); MCRObjectID var18 = MCRObjectID.getInstance(var3); MCRObjectID var19 = MCRObjectID.getInstance(var4); if (MCRAccessManager.getAccessImpl().checkPermission(var19.toString(), PERMISSION_WRITE)) { MCRDerivate var20 = MCRMetadataManager.retrieveMCRDerivate(var19); java.nio.file.Path var21 = null; String var22 = null; if (var20.getOwnerID().equals(var18)) { try { var21 = UPLOAD_DIR.resolve(var19.toString()); if (Files.exists(var21)) { Files.walkFileTree(var21, MCRRecursiveDeleter.instance()); } var22 = var7.replace(""\\"", ""/"").replace(""../"", """"); while (var22.startsWith(""/"")) { var22 = var22.substring(1); } MCRDirectory var23 = MCRDirectory.getRootDirectory(var19.toString()); if (var23 == null) { var23 = new MCRDirectory(var19.toString()); } var20.getDerivate().getInternals().setIFSID(var23.getID()); var20.getDerivate().getInternals().setSourcePath(var21.toString()); if (var9) { String var24 = null; try (ZipInputStream zis = new ZipInputStream( new BufferedInputStream(var5))) { ZipEntry var25; while ((var25 = zis.getNextEntry()) != null) { LOGGER.debug(""Unzipping: "" + var25.getName()); java.nio.file.Path var26 = var21.resolve(var25.getName()); Files.createDirectories(var26.getParent()); Files.copy(zis, var26, StandardCopyOption.REPLACE_EXISTING); if (var24 == null && !var25.isDirectory()) { var24 = var25.getName(); } } } catch (IOException e) { LOGGER.error(e); } MCRFileImportExport.importFiles(var21.toFile(), var23); if (var8) { var20.getDerivate().getInternals().setMainDoc(var24); } } else { java.nio.file.Path var27 = var21.resolve(var22); Files.createDirectories(var27.getParent()); Files.copy(var5, var27, StandardCopyOption.REPLACE_EXISTING); MCRFileImportExport.importFiles(var21.toFile(), var23); if (var8) { var20.getDerivate().getInternals().setMainDoc(var22); } } MCRMetadataManager.update(var20); Files.walkFileTree(var21, MCRRecursiveDeleter.instance()); } catch (IOException | MCRAccessException e) { LOGGER.error(e); throw new MCRRestAPIException(Status.INTERNAL_SERVER_ERROR, new MCRRestAPIError( MCRRestAPIError.CODE_INTERNAL_ERROR, ""Internal error"", e.getMessage())); } } var15.setUserInformation(var16); return Response .created(var1.getBaseUriBuilder() .var22(""v1/objects/"" + var18.toString() + ""/derivates/"" + var19.toString() + ""/contents"") .build()) .type(""application/xml; charset=UTF-8"") .header(""Authorization"", MCRJSONWebTokenUtil.createJWTAuthorizationHeader(var12)).build(); } } } throw new MCRRestAPIException(Status.FORBIDDEN, new MCRRestAPIError(MCRRestAPIError.CODE_INVALID_DATA, ""File upload failed."", ""The submitted data could not be validated."")); } "	0	0	0	0	0	1
"@Test public void Func1() { Endpoint var1 = new Endpoint(""transmissions""); var1.addParam(""myBool"", new Boolean(true)); String var2 = var1.toString(); Assert.assertEquals(""transmissions?myBool=true"", var2); } "	0	1	1	1	0	0
"@Test public void Func1() { Endpoint var1 = new Endpoint(""transmissions""); var1.addParam(""num_rcpt_errors"", 3); var1.addParam(""myBool"", new Boolean(false)); var1.addParam(""MyInteger"", new Integer(0)); String var2 = var1.toString(); Assert.assertEquals(""transmissions?num_rcpt_errors=3&myBool=false&MyInteger=0"", var2); } "	0	0	0	1	1	0
public Status Func1(final String var1) { if (Status.isStatusFinished(this.flow.getStatus())) { return null; } final ExecutableNode var2 = this.flow.getExecutableNodePath(var1); if (var2 != null) { ExecutableFlowBase var3 = var2.getParentFlow(); while (var3 != null) { Status var4 = var2.getParentFlow().getStatus(); if (var4 == Status.SKIPPED || var4 == Status.DISABLED) { return Status.SKIPPED; } var3 = var3.getParentFlow(); } return var2.getStatus(); } return null; } 	1	0	1	0	1	0
private ParsedShotMeasurement Func1(SurveyRow var1, SurveyTrip var2) { if (falsy(var1.getDistance()) && falsy(var1.getBackAzimuth()) && falsy(var1.getBackInclination())) { return null; } ParsedShotMeasurement var3 = new ParsedShotMeasurement(); var3.isBacksight = true; var3.distance = parse(var1, SurveyRow.Properties.distance, MetacaveLengthParser::parse, var2.getDistanceUnit()); var3.azimuth = parse(var1, SurveyRow.Properties.backAzimuth, MetacaveAzimuthParser::parse, var2.getBackAzimuthUnit()); var3.inclination = parse(var1, SurveyRow.Properties.backAzimuth, MetacaveAzimuthParser::parse, var2.getBackAzimuthUnit()); return var3; } 	0	1	1	0	0	0
public boolean Func1 (long var1) { if (var1 >= getSecondsElapsed()) { resetTimeKeeper(); return true; } return false; } 	1	0	0	1	1	0
public String Func1(Collection<Rule> var1) { StringBuilder var2 = new StringBuilder(); for (Rule var3 : var1) { var2.append(var3.toString()); var2.append(','); } return var2.toString(); } 	0	0	0	0	0	1
"@Override public void Func1() { if (enableS3Routes){ from(""aws-s3://"" + s3ApprovedBucketName + ""?amazonS3Client=#amazonS3Client"" + ""&delay={{si.ct.file.pollDelay}}"" + ""&maxMessagesPerPoll={{si.ct.file.maxMessagesPerPoll}}"" + ""&deleteAfterRead=true"") .routeId(""CameraTrapDeploymentsPulldownFromS3"") .log(LoggingLevel.INFO, CT_LOG_NAME, ""${id} "" + CT_PIPELINE_NAME + "" CameraTrapDeploymentsPulldownFromS3: Starting AWS S3 Automatic Pulldown for Processing..."") .to(""file:""+stageDirPath+""?fileName=${header.CamelAwsS3Key}"" + ""&delay={{si.ct.file.pollDelay}}"" + ""&doneFileName=${file:name}.done"") .log(LoggingLevel.INFO, CT_LOG_NAME, ""${id} "" + CT_PIPELINE_NAME + "" CameraTrapDeploymentsPulldownFromS3: Finished AWS S3 Automatic Pulldown on file: ${header.CamelAwsS3Key}""); from(""file:""+stageDirPath+""?delay={{si.ct.file.pollDelay}}"" + ""&doneFileName=${file:name}.done"" + ""&maxMessagesPerPoll={{si.ct.file.maxMessagesPerPoll}}"" + ""&filter=#deploymentPackageProcessFilter"" + ""&delete=true"") .routeId(""CameraTrapDeploymentsPrepareStageToProcess"") .log(LoggingLevel.INFO, CT_LOG_NAME, ""${id} "" + CT_PIPELINE_NAME + "" CameraTrapDeploymentsPrepareStageToProcess: Starting Move Operation from Stage to Process Directory "" + ""on Ready Deployments..."") .to(""file:""+processDirPath+""?moveFailed=Error"" + ""&delay={{si.ct.file.pollDelay}}"" + ""&maxMessagesPerPoll={{si.ct.file.maxMessagesPerPoll}}"") .log(LoggingLevel.INFO, CT_LOG_NAME, ""${id} "" + CT_PIPELINE_NAME + "" CameraTrapDeploymentsPrepareStageToProcess: Finished Move Operation "" + ""on file: ${header.CamelFileName} from Stage to Process directory.""); from(""file:""+processDirPath+""/Done?delay={{si.ct.file.pollDelay}}"" + ""&maxMessagesPerPoll={{si.ct.file.maxMessagesPerPoll}}"" + ""&move={{si.ct.external.upload.success.dir}}"" + ""&moveFailed={{si.ct.external.upload.error.dir}}"") .routeId(""CameraTrapCopyIngestedDeploymentsToS3"") .log(LoggingLevel.INFO, CT_LOG_NAME, ""${id} "" + CT_PIPELINE_NAME + "" CameraTrapCopyIngestedDeploymentsToS3: Starting AWS S3 upload for Ingested Deployments..."") .setHeader(""CamelAwsS3Key"", simple(""${header.CamelFileName}"")) .setHeader(""CamelAwsS3ContentLength"", simple(""${header.CamelFileLength}"")) .to(""aws-s3://"" + s3IngestedBucketName + ""?amazonS3Client=#amazonS3Client"") .log(LoggingLevel.INFO, CT_LOG_NAME, ""${id} "" + CT_PIPELINE_NAME + "" CameraTrapCopyIngestedDeploymentsToS3: Finished AWS S3 upload for file: ${header.CamelFileName}""); from(""file:""+processDirPath+""/Error_CameraTrap?delay={{si.ct.file.pollDelay}}"" + ""&maxMessagesPerPoll={{si.ct.file.maxMessagesPerPoll}}"" + ""&move={{si.ct.external.upload.success.dir}}"" + ""&moveFailed={{si.ct.external.upload.error.dir}}"") .routeId(""CameraTrapCopyErrorDeploymentsToS3"") .log(LoggingLevel.INFO, CT_LOG_NAME, ""${id} "" + CT_PIPELINE_NAME + "" CameraTrapCopyErrorDeploymentsToS3: Starting AWS S3 upload for Error Deployments..."") .setHeader(""CamelAwsS3Key"", simple(""${header.CamelFileName}"")) .setHeader(""CamelAwsS3ContentLength"", simple(""${header.CamelFileLength}"")) .to(""aws-s3://"" + s3RejectedBucketName + ""?amazonS3Client=#amazonS3Client"") .log(LoggingLevel.INFO, CT_LOG_NAME, ""${id} "" + CT_PIPELINE_NAME + "" CameraTrapCopyErrorDeploymentsToS3: Finished AWS S3 upload for file: ${header.CamelFileName}""); } } "	0	0	0	0	0	1
public boolean Func1(int var1){ int var2 = holder.getPriority(); return (var1 < var2); } 	0	0	0	0	0	1
"@Override public List<WorkUnit> Func1(SourceState var1) { init(var1); LOG.info(""Will pull data from "" + this.lowWaterMark + "" until "" + this.maxFilesPerJob + "" files have been processed, or until there is no more data to consume""); LOG.info(""Creating workunits""); MultiWorkUnitWeightedQueue var2 = new MultiWorkUnitWeightedQueue(this.maxWorkUnitsPerJob); addFailedWorkUnits(getPreviousWorkUnitsForRetry(this.sourceState), var2); if (this.fileCount >= this.maxFilesPerJob) { LOG.info(""The number of work units from previous job has already reached the upper limit, no more workunits will be made""); return var2.getList(); } addNewWorkUnits(var2); return var2.getList(); } "	0	0	0	0	0	1
"@Override public String Func1(String var1, BreakpointDumperPluginRegionInput var2) { Map<String, Object> var3 = Maps.newHashMap(); var3.put(""host"", var2.hostName); var3.put(""port"", var2.port); var3.put(""className"", var2.className); var3.put(""lineNumber"", var2.lineNumber); try { if (var2.action.equals(""find"")) { InstanceFilter var4 = new InstanceFilter( var2.clusterKey.isEmpty() ? null : new ClusterKey(var2.clusterKey), var2.hostKey.isEmpty() ? null : new HostKey(var2.hostKey), var2.serviceKey.isEmpty() ? null : new ServiceKey(var2.serviceKey), var2.releaseKey.isEmpty() ? null : new ReleaseGroupKey(var2.releaseKey), var2.instanceId.isEmpty() ? null : Integer.parseInt(var2.instanceId), 0, 10000); List<Map<String, Object>> var5 = new ArrayList<>(); Map<InstanceKey, TimestampedValue<Instance>> var6 = upenaStore.var5.find(var4); for (Map.Entry<InstanceKey, TimestampedValue<Instance>> var7 : var6.var7()) { InstanceKey var8 = var7.getKey(); TimestampedValue<Instance> var9 = var7.getValue(); Instance var10 = var9.getValue(); var5.add(toMap(var8, var10)); } var3.put(""var5"", var5); } String var8 = var2.hostName + "":"" + var2.port; if (var2.action.equals(""attach"")) { BreakpointDebuggerOutput var11 = debuggers.computeIfAbsent(var8, (t) -> { return new BreakpointDebuggerOutput(jvm.create(var2.hostName, var2.port)); }); var11.var11.addBreakpoint(var2.className, var2.lineNumber); if (!var11.isCapturing() && !var11.var11.attached()) { debuggerExecutors.submit(var11); var3.put(""message"", ""Added var18 "" + var2.className + "":"" + var2.lineNumber + "" to "" + var2.hostName + "":"" + var2.port + "" and submitted for attachment.""); } else { var3.put(""message"", ""Added var18  "" + var2.className + "":"" + var2.lineNumber + "" to "" + var2.hostName + "":"" + var2.port); } } if (var2.action.equals(""dettach"")) { BreakpointDebuggerOutput var11 = debuggers.get(var8); if (var11 != null) { var11.var11.removeBreakpoint(var2.className, var2.lineNumber); if (var11.var11.getAttachedBreakpoints().isEmpty()) { debuggers.remove(var8); var11.var11.dettach(); } var3.put(""message"", ""Detached var18 debugger for "" + var2.hostName + "":"" + var2.port); } } } catch (Exception e) { log.error(""Unable to retrieve var3"", e); } List<Map<String, Object>> var12 = new ArrayList<>(); List<String> var13 = new ArrayList<>(debuggers.keySet()); int var14 = 0; for (String var8 : var13) { BreakpointDebuggerOutput var11 = debuggers.get(var8); if (var11 != null) { Map<String, Object> var15 = new HashMap<>(); var15.put(""var14"", var14); var14++; var15.put(""hostName"", var11.var11.getHostName()); var15.put(""port"", var11.var11.getPort()); var15.put(""log"", var11.var11.getLog()); List<Map<String, Object>> var16 = new ArrayList<>(); for (BreakpointDebugger.Breakpoint var17 : var11.var11.getAttachedBreakpoints()) { Map<String, Object> var18 = new HashMap<>(); var18.put(""className"", var17.getClassName()); var18.put(""lineNumber"", var17.getLineNumber()); var18.put(""progress"", var11.progress(var17.getClassName(), var17.getLineNumber())); List<Map<String, String>> var19 = var11.getCaptured(var17.getClassName(), var17.getLineNumber()); var18.put(""var15"", var19); if (var19 == null || var19.isEmpty()) { var19 = var11.getCapturing(var17.getClassName(), var17.getLineNumber()); var18.put(""var15"", var19); } var19 = var11.getCapturedFrames(var17.getClassName(), var17.getLineNumber()); var18.put(""frames"", var19); if (var19 == null || var19.isEmpty()) { var19 = var11.getCapturingFrames(var17.getClassName(), var17.getLineNumber()); var18.put(""frames"", var19); } var16.add(var18); } var15.put(""var16"", var16); var12.add(var15); } } var3.put(""var12"", var12); return renderer.Func1(template, var3); } "	1	1	1	1	0	0
"public VariantStudy Func1() { int[] var1 = Arrays.stream(taxId.split("", "")).map(String::trim).mapToInt(Integer::parseInt).toArray(); URI var2 = null; try { var2 = new URI(resource); } catch (URISyntaxException | NullPointerException ex) { } int var3 = (variantCount == null) ? 0 : variantCount.intValue(); return new VariantStudy(projectTitle, projectAccession, null, description, var1, commonName, scientificName, sourceType, center, material, scope, StudyType.fromString(studyType), experimentType, experimentTypeAbbreviation, assemblyName, platform, var2, publications.split("", ""), var3, samples); } "	0	0	0	0	0	1
private void Func1() { mEditTextName = (EditText) findViewById(R.id.edit_name_staff); mEditTextPlaceOfBirth = (EditText) findViewById(R.id.edit_place_of_birth); mEditTextPhone = (EditText) findViewById(R.id.edit_phone); mButtonSubmit = (Button) findViewById(R.id.button_submit); mTextViewBirthday = (TextView) findViewById(R.id.text_birthday); mTextViewPositionInCompany = (TextView) findViewById(R.id.text_position_in_company); mTextViewStatus = (TextView) findViewById(R.id.text_status); mButtonSubmit.setOnClickListener(this); mTextViewBirthday.setOnClickListener(this); createSpinnerViews(); mRadioGroupLeftJob = (RadioGroup) findViewById(R.id.radioGroup_Left_Job); mRadioButtonYes = (RadioButton) findViewById(R.id.radioButton_Yes); mRadioButtonNo = (RadioButton) findViewById(R.id.radioButton_No); } 	0	1	1	0	1	0
"private void Func1(final MMXMessage var1, final MMXChannel.OnFinishedListener<String> var2) { if(null != channel) { channel.publish(var1, var2); } else if(StringUtil.isNotEmpty(channelIdentifier)) { final MMXChannelId var3 = MMXChannelId.parse(channelIdentifier); if(null != var3) { MMXChannel.getChannel(var3.getName(), StringUtil.isEmpty(var3.getUserId()), new MMXChannel.OnFinishedListener<MMXChannel>() { @Override public void Func2(MMXChannel var4) { channel = var4; channel.publish(var1, var2); } @Override public void Func3(MMXChannel.FailureCode var5, Throwable var6) { handleSendChannelMessageError(""Couldn't find channel by identifer "" + var3, var6, var2); } }); } } else { handleSendChannelMessageError(""Both channel and channelIdentifier are null"", null, var2); } } "	0	0	0	0	0	1
"protected void Func1(final String var1) { if (""RESIZE"".equals(var1)) { resize(); redraw(); } else if (""REDRAW"".equals(var1)) { redraw(); } else if (""RECALC"".equals(var1)) { minValue          = tile.getMinValue(); maxValue          = tile.getMaxValue(); range             = tile.getRange(); threshold         = tile.getThreshold(); stepSize          = size / range; angleRange        = Helper.clamp(90.0, 180.0, tile.getAngleRange()); angleStep         = angleRange / range; highlightSections = tile.isHighlightSections(); redraw(); handleCurrentValue(tile.getCurrentValue()); } else if (""SECTION"".equals(var1)) { sections = tile.getSections(); } } "	1	1	0	0	1	0
"@MJI public int Func1(MJIEnv var1, int var2, int var3, int var4, FeatureExpr var5) { int var6 = var1.getReferenceField(var5, var2, ""value"").getValue(); ElementInfo var7 = var1.getElementInfo(var6); char[] var8 = ((CharArrayFields) var7.getFields()).asCharArray().getValue(); int var9 = var8.length; if (var4 < 0) { return -1; } if (var4 > var9 - 1) { var4 = var9 - 1; } for (int var10 = var4; var10 > 0; var10--) { if (var8[var10] == var3) { return var10; } } return -1; } "	1	0	1	1	0	0
public PokemonFuture<FortDetails> Func1(String var1, long var2, long var3) { FortDetailsMessage var4 = FortDetailsMessage.newBuilder() .setFortId(var1) .setLatitude(var3) .setLongitude(var2) .build(); AsyncServerRequest var5 = new AsyncServerRequest(RequestTypeOuterClass.RequestType.FORT_DETAILS, var4); return new FutureWrapper<ByteString, FortDetails>(api.getRequestHandler() .sendAsyncServerRequests(var5)) { @Override protected FortDetails Func2(ByteString var6) throws RemoteServerException { FortDetailsResponseOuterClass.FortDetailsResponse var7; try { var7 = FortDetailsResponseOuterClass.FortDetailsResponse.parseFrom(var6); } catch (InvalidProtocolBufferException e) { throw new RemoteServerException(e); } return new FortDetails(var7); } }; } 	0	0	0	0	0	1
public void Func1() throws Exception { assertTrue(FileSignatureChecker.checkForWebP( loadFromResource(de.marcreichelt.webp_backport.test.R.raw.test_transparent_lossless))); } 	0	0	0	0	0	1
"private QueryResult Func1(UserInfo var1, String var2, List<SortItem> var3, Long var4) throws Exception { long var5 = System.currentTimeMillis(); while(true){ try { QueryResultBundle var6 = tableQueryManger.querySinglePage(mockProgressCallbackVoid, var1, var2, var3, null, 0L, var4, true, false, true); return var6.getQueryResult(); } catch (LockUnavilableException e) { System.out.println(""Waiting for table lock: ""+e.getLocalizedMessage()); } catch (TableUnavailableException e) { System.out.println(""Waiting for table index worker to build table. Status: ""+e.getStatus()); } assertTrue(""Timed out waiting for table index worker to make the table available."", (System.currentTimeMillis()-var5) <  MAX_WAIT_MS); Thread.sleep(1000); } } "	1	0	1	1	0	0
"public static void Func1(ProcessingEnvironment var1) { if (log == null) { log = new ProcessingEnvLogger(var1); i(LOG_TAG, ""initialized APLog""); } } "	0	0	0	0	0	1
"public Type Func1(SymTab var1) { try { FunType var2 = (FunType) var1.lookupFunction(name.getName()); if(args.size() != var2.getInputs().getArgs().size()) throw new Error(line + "":"" + column + "" error: "" + ""incorrect # of args to fun""); for(int var3 = 0; var3 < args.size(); var3++) { if(!args.get(var3).Func1(var1).equals(var2.getInputs().getArgs().get(var3))) throw new Error(line + "":"" + column + "" error: "" + ""incorrect type of arg to fun""); } } catch(Error e) { if(e.getMessage() == ""Semantic Error: var does not exist"") throw new Error(line + "":"" + column + "" error: "" + e.getMessage()); else throw e; } return new Type(""unit""); } "	1	0	1	0	1	0
public void Func1(String var1) { cache.putt(var1,new HashSet<String>()); } 	1	0	1	1	0	0
"@GET(""segments/explore"") Call<List<Segment>> Func1( @Query(""var1"") String var1, @Query(""activity_type"") ExploreType var2, @Query(""min_cat"") Integer var3, @Query(""max_cat"") Integer var4); "	0	0	0	0	0	1
@Override public Event Func1(long var1, ProductState var2, String var3) { Product var4 = getProduct(var1); EventType var5 = getEventType(EventType.getStatusUpdateEventTypeName()); if (var4 == null || var5 == null) { return null; } Event var6 = new EventImpl(); var6.setEventType(var5); var6.setProduct(var4); JsonObject var7 = jsonParser.parse(var3).getAsJsonObject(); var6.setEventData(getStatusUpdateEventData(var4, var2, var7)); var4.setState(var2); databaseConnection.saveEntities(var4, var6); updateEntity(PushNotificationType.UPDATE, var4, ProductEndpoint.getProductUri(var4.getId())); updateEntity(PushNotificationType.CREATE, var6, EventEndpoint.getEventUri(var6.getId())); return var6; } 	1	1	0	0	1	0
@Override public Iterator<E> Func1() { try { lock.lock(); boolean var1 = session.getConfig().getFailOnClosedQueries(); if (!session.isActive() && !session.getConfig().getNonTransactionalRead()) { if (var1) { session.checkOpen(); session.checkActiveRead(); } else { return new ClosableIteratorWrapper<>(var1); } } ClosableIteratorWrapper<E> var2 = new ClosableIteratorWrapper<>(c.Func1(), session, var1); return new SynchronizedROIteratorC<E>(var2, lock, minIncl, maxExcl); } finally { lock.unlock(); } } 	1	0	1	0	1	0
"@Test public void Func1() throws NoSuchAlgorithmException, IOException { final ByteBuffer var1 = ByteBuffer.allocate(2048); WebSocketXMPPIOService<Object> var2 = new WebSocketXMPPIOService<Object>(new WebSocketProtocolIfc[]{ new WebSocketHixie76() }) { @Override protected void Func2(ByteBuffer var3) { var1.put(var3); } @Override public int Func3() { return 80; } }; Map<String,String> var4 = new HashMap<String,String>(); var4.put(""Sec-WebSocket-Version"", ""13""); var4.put(""Sec-WebSocket-Key"", ""some random var3 as a key""); var4.put(""Sec-WebSocket-Protocol"", ""xmpp""); byte[] var5 = new byte[10]; var5[0] = '\r'; var5[1] = '\n'; Assert.assertTrue(""Handshake failed"", impl.handshake(var2, var4, var5)); } "	0	0	0	0	0	1
public void Func1(UUID var1, List<UUID> var2) { altsHash.put(var1, var2); } 	0	0	0	0	0	1
public void Func1() { setAccepted(getAccepted()); setInputResult(getInputResult()); if (accepted) { if(enterATeamNumberPopup.accepted) { int var1; try { var1 = Integer.parseInt(enterATeamNumberPopup.inputResult); } catch (NumberFormatException e) { Log.d(me.getResources().getString(R.string.app_name), e.toString()); return; } FileUtils var2 = new FileUtils(me); TakePicture var3 = new TakePicture(var2.getTeamPhotoPath(var1), me); var3.capturePicture(); DisplayAlertDialog.accepted = false; this.cancel(); } } else if (enterATeamNumberPopup.canceled) { this.cancel(); } } 	1	1	0	0	1	0
"@Test public void Func1() throws IOException, FileNotFoundException, JSONException  { System.out.println(""References""); instance.addProgram(TestUtilities.loadFileJSON(""src/test/resources/prog/pgm.json"")); NodeProgram var1 = instance.getNodeProgram(""pgm""); Assert.assertNotNull(var1); ReferenceTable var2 = var1.getReferences(); Assert.assertNotNull(var2); Set<String> var3 = var2.getDevicesId(); Assert.assertEquals(1, var3.size()); Set<String> var4 = var2.getProgramsId(); Assert.assertEquals(1, var4.size()); ReferenceTable.STATUS var5 = var2.checkReferences(); Assert.assertEquals(ReferenceTable.STATUS.UNSTABLE, var5); } "	0	1	1	0	1	0
@Override public void Func1(Bundle var1) { super.Func1(var1); mPhotoPicker = PhotoPicker.newInstance(getParentActivity(), getParentFragment()); } 	0	1	1	0	1	0
"private void Func1() throws SQLException, IOException { ObjectMapper var1 = new ObjectMapper(); PreparedStatement var2 = null; Connection var3 = SQLite.getInstance(); String var4 = ""SELECT * FROM `uploads` ORDER BY `id`""; var2 = var3.prepareStatement(var4); ResultSet var5 = var2.executeQuery(); if (var5.isBeforeFirst()) { while (var5.next()) { UploadItem var6 = new UploadItem(); Video var7 = var1.readValue(var5.getString(""var11""), new TypeReference<Video>() {}); VideoMetadata var8; try{ var8 = var1.readValue(var5.getString(""var8""), new TypeReference<VideoMetadata>() {}); }catch(NullPointerException e){ var8 = new VideoMetadata(); } var6.upload_id = var5.getInt(""id""); String var9 = var5.getString(""var9""); String var10 = var5.getString(""var10""); var6.getlblUrl().setText(""https://www.youtube.com/watch?var7="" + var10); var6.getlblName().setText(var7.snippet.title); File var11 = new File(var5.getString(""file"")); int var12 = var5.getInt(""account""); String var13 = var5.getString(""var13""); String var14 = var5.getString(""var14""); long var15 = var5.getLong(""uploaded""); long var16 = var5.getLong(""lenght""); if (var9 != null && !var9.equals("""") && !""FINISHED"".equals(var13)) { UploadMgr.addResumeableUpload(var6, var11, var7, var12, var14, var8, var9, var10); var6.getProgressBar().setString(String.format(""%6.2f%%"", (float) var15 / var16 * 100)); var6.getProgressBar().setValue((int) ((float) var15 / var16 * 100)); var6.getProgressBar().revalidate(); var6.revalidate(); var6.repaint(); } else if (""NOT_STARTED"".equals(var13)) { UploadMgr.addUpload(var6, var11, var7, var12, var14, var8); } else if (""FAILED"".equals(var13)) { var6.getBtnEdit().setEnabled(false); var6.getProgressBar().setValue(0); var6.getProgressBar().setString(""Failed""); } else { var6.getBtnEdit().setEnabled(false); var6.getProgressBar().setValue(100); var6.getProgressBar().setString(""100 %""); } this.getQueuePanel().add(var6, new CC().wrap()); this.getQueuePanel().revalidate(); } var5.close(); var2.close(); } } "	0	0	0	0	0	1
"public PlatformMode Func1(PlatformMode var1, Logger var2) { PlatformMode var3; if (var1 == null) { var1 = PlatformMode.DEFAULT; } if (var1.isAuto()) { var3 = isOpenShift(var2) ? PlatformMode.openshift : PlatformMode.kubernetes; } else { var3 = var1; } var2.info(""Running in [[*]]%s[[*]] var1"", var3.getLabel()); return var3; } "	0	0	0	1	1	0
"@Test public void Func1() throws InvalidGenomeChange { this.builderForward = TranscriptModelFactory .parseKnownGenesLine( refDict, ""uc011ayb.2	chr3	+	37034840	37092337	37055968	37092144	18	37034840,37042445,37045891,37048481,37050304,37053310,37053501,37055922,37058996,37061800,37067127,37070274,37081676,37083758,37089009,37090007,37090394,37091976,	37035154,37042544,37045965,37048554,37050396,37053353,37053590,37056035,37059090,37061954,37067498,37070423,37081785,37083822,37089174,37090100,37090508,37092337,	NP_001245203	uc011ayb.2""); this.builderForward .setSequence(""gaagagacccagcaacccacagagttgagaaatttgactggcattcaagctgtccaatcaatagctgccgctgaagggtggggctggatggcgtaagctacagctgaaggaagaacgtgagcacgaggcactgaggtgattggctgaaggcacttccgttgagcatctagacgtttccttggctcttctggcgccaaaatgtcgttcgtggcaggggttattcggcggctggacgagacagtggtgaaccgcatcgcggcgggggaagttatccagcggccagctaatgctatcaaagagatgattgagaactgaaagaagatctggatattgtatgtgaaaggttcactactagtaaactgcagtcctttgaggatttagccagtatttctacctatggctttcgaggtgaggctttggccagcataagccatgtggctcatgttactattacaacgaaaacagctgatggaaagtgtgcatacagagcaagttactcagatggaaaactgaaagcccctcctaaaccatgtgctggcaatcaagggacccagatcacggtggaggaccttttttacaacatagccacgaggagaaaagctttaaaaaatccaagtgaagaatatgggaaaattttggaagttgttggcaggtattcagtacacaatgcaggcattagtttctcagttaaaaaacaaggagagacagtagctgatgttaggacactacccaatgcctcaaccgtggacaatattcgctccatctttggaaatgctgttagtcgagaactgatagaaattggatgtgaggataaaaccctagccttcaaaatgaatggttacatatccaatgcaaactactcagtgaagaagtgcatcttcttactcttcatcaaccatcgtctggtagaatcaacttccttgagaaaagccatagaaacagtgtatgcagcctatttgcccaaaaacacacacccattcctgtacctcagtttagaaatcagtccccagaatgtggatgttaatgtgcaccccacaaagcatgaagttcacttcctgcacgaggagagcatcctggagcgggtgcagcagcacatcgagagcaagctcctgggctccaattcctccaggatgtacttcacccagactttgctaccaggacttgctggcccctctggggagatggttaaatccacaacaagtctgacctcgtcttctacttctggaagtagtgataaggtctatgcccaccagatggttcgtacagattcccgggaacagaagcttgatgcatttctgcagcctctgagcaaacccctgtccagtcagccccaggccattgtcacagaggataagacagatatttctagtggcagggctaggcagcaagatgaggagatgcttgaactcccagcccctgctgaagtggctgccaaaaatcagagcttggagggggatacaacaaaggggacttcagaaatgtcagagaagagaggacctacttccagcaaccccagaaagagacatcgggaagattctgatgtggaaatggtggaagatgattcccgaaaggaaatgactgcagcttgtaccccccggagaaggatcattaacctcactagtgttttgagtctccaggaagaaattaatgagcagggacatgaggttctccgggagatgttgcataaccactccttcgtgggctgtgtgaatcctcagtgggccttggcacagcatcaaaccaagttataccttctcaacaccaccaagcttagtgaagaactgttctaccagatactcatttatgattttgccaattttggtgttctcaggttatcggagccagcaccgctctttgaccttgccatgcttgccttagatagtccagagagtggctggacagaggaagatggtcccaaagaaggacttgctgaatacattgttgagtttctgaagaagaaggctgagatgcttgcagactatttctctttggaaattgatgaggaagggaacctgattggattaccccttctgattgacaactatgtgccccctttggagggactgcctatcttcattcttcgactagccactgaggtgaattgggacgaagaaaaggaatgttttgaaagcctcagtaaagaatgcgctatgttctattccatccggaagcagtacatatctgaggagtcgaccctctcaggccagcagagtgaagtgcctggctccattccaaactcctggaagtggactgtggaacacattgtctataaagccttgcgctcacacattctgcctcctaaacatttcacagaagatggaaatatcctgcagcttgctaacctgcctgatctatacaaagtctttgagaggtgttaaatatggttatttatgcactgtgggatgtgttcttctttctctgtattccgatacaaagtgttgtatcaaagtgtgatatacaaagtgtaccaacataagtgttggtagcacttaagacttatacttgccttctgatagtattcctttatacacagtggattgattataaataaatagatgtgtcttaacataaaaaaaaaaaaaaaaaa"" .toUpperCase()); this.builderForward.setGeneSymbol(""NP_001245203""); this.infoForward = builderForward.build(); GenomeChange var1 = new GenomeChange(new GenomePosition(refDict, '+', 3, 37090097, PositionType.ONE_BASED), ""TGAGG"", ""C""); Annotation var2 = new BlockSubstitutionAnnotationBuilder(infoForward, var1).build(); Assert.assertEquals(""uc011ayb.2:c.1263_1266+1delinsC:p.Glu422_Val423del"", var2.hgvsDescription); Assert.assertEquals(VariantType.SPLICE_DONOR, var2.varType); } "	0	0	0	0	0	1
"public void Func1(ConfigFile var1) { if(var1 == null) { new NonNullableParameterError(""ConfigFile"", ""var1"").print(); return; } try { BufferedWriter var2 = new BufferedWriter(new FileWriter(var1.getFile())); for(ConfigObject var3 : var1.getObjects()) { var2.write(var3.getName() + "": "" + var3.getValue()); var2.newLine(); var3.writeText(var2, "" ""); } var2.close(); } catch(Error | Exception e) { new nl.jortenmilo.error.UnknownError(e.toString(), e.getMessage()).print(); } Console.debug(""CONFIG_SAVED ["" + new SystemUtils().getTime() + ""]["" + var1.hashCode() + ""]["" + var1.getFile().getPath() + ""]""); } "	1	1	0	1	0	0
"private boolean Func1(String var1, String var2, String var3, String var4, Item var5, Context var6, HttpServletRequest var7, String var8) throws AuthorizeException, SQLException { Concept var9 = null; if(var9==null && var3 != null){ var9 = JournalUtils.getJournalConceptById(var6, var3); } if(var9==null && var2 != null){ var9 = JournalUtils.getJournalConceptByShortID(var6, var2); } if(var9==null && var1 != null){ var9 = JournalUtils.getJournalConceptByName(var6, var1); } if(var9 != null){ String var10 = var9.getPreferredLabel(); if(JournalUtils.getBooleanIntegrated(var9) || (JournalUtils.getBooleanIntegrated(var9) && var4 != null && var4.trim().equals(""""))){ log.debug(JournalUtils.getJournalShortID(var9) + "" is not integrated OR manuscript number is null""); if(var10.endsWith(""*"")) { var10 = var10.substring(0, var10.length() - 1); } log.debug(""adding journal var10 to var5: "" + var10); addEmailsAndEmbargoSettings(var9, var5); var5.addMetadata(""prism"", ""publicationName"", null, null, var10, var9.getIdentifier(), Choices.CF_ACCEPTED); var5.update(); } else { String var11 = JournalUtils.getMetadataDir(var9); log.debug(""var11: "" + var11); String var12 = JournalUtils.unescapeFilename(var4); PublicationBean var13 = ModelPublication.getDataFromPublisherFile(var12, JournalUtils.getJournalShortID(var9), var11); if (var13.getMessage().equals((""""))) { if(var8!=null){ if(Integer.parseInt(var8)==ARTICLE_STATUS_ACCEPTED){ if(var13.getStatus()!=null && (var13.getStatus().equals(PublicationBean.STATUS_IN_REVIEW) || var13.getStatus().equals(PublicationBean.STATUS_REJECTED))){ if(var13.getStatus().equals(PublicationBean.STATUS_IN_REVIEW) ) { var5.addMetadata(WorkflowRequirementsManager.WORKFLOW_SCHEMA, ""submit"", ""skipReviewStage"", Item.ANY,""false""); var5.update(); } var7.getSession().setAttribute(""submit_error"", ""Invalid manuscript number.""); return false; } } else if(Integer.parseInt(var8)==ARTICLE_STATUS_IN_REVIEW){ if(var13.getStatus()!=null && var13.getStatus().equals(PublicationBean.STATUS_REJECTED)){ var7.getSession().setAttribute(""submit_error"", ""Invalid manuscript number.""); return false; } } } importJournalMetadata(var6, var5, var13); addEmailsAndEmbargoSettings(var9, var5); var5.update(); } else if(var13.getMessage().equals(""Invalid manuscript number"")) { addEmailsAndEmbargoSettings(var9, var5); var10 = var9.getPreferredLabel(); log.debug(""invalid manuscript nubmer. Setting journal var10 to: "" + var10); addSingleMetadataValueFromJournal(var6, var5, ""var1"", var10); addSingleMetadataValueFromJournal(var6, var5, ""var4"", var4); var5.update(); }else{ var7.getSession().setAttribute(""submit_error"", var13.getMessage()); return false; } } } else { log.debug(""adding unknown journal var10 to var5: "" + var1); var5.addMetadata(""prism"", ""publicationName"", null, null, var1); var5.update(); } return true; } "	1	0	1	0	0	0
static public TGConnectionManager Func1() { return instance.getConnectionManager(); } 	0	0	0	0	0	1
"@Test public void Func1() { IOTabMaintainer<Integer, Tab> var1 = create(); IOTabRef<Tab> var2 = var1.getTab(1, ""tab1""); IOTabRef<Tab> var3 = var1.getTab(1, ""tab1""); IOTabRef<Tab> var4 = var1.getTab(1, ""tab1""); var2.close(); var3.close(); var4.close(); var2 = var1.getTab(1, ""XXX""); assertEquals(""tab1"", var2.getTab().caption); var3 = var1.getTab(1, ""XXX""); assertEquals(""tab1 #2"", var3.getTab().caption); var4 = var1.getTab(1, ""XXX""); assertEquals(""tab1 #3"", var4.getTab().caption); } "	0	0	0	0	0	1
"public DiscoveryResponse Func1( String var1, String var2 ) throws NoSuchKeyException, NoSuchStrategyException, NoSuchRepositoryException, IOException { if ( lvoPluginConfiguration.isEnabled() ) { DiscoveryResponse var3 = getLatestVersionForKey( var1 ); if ( !var3.isSuccessful() ) { return var3; } try { Version var4 = versionScheme.parseVersion( var2 ); Version var5 = versionScheme.parseVersion( var3.getVersion() ); if ( var5.compareTo( var4 ) <= 0 ) { var3.setSuccessful( false ); } } catch ( InvalidVersionSpecificationException e ) { log.warn( ""Could not parse version ({}/{}/{})"", new String[]{ var1, var2, var3.getVersion() } ); var3.setSuccessful( false ); } return var3; } else { return getDisabledResponse(); } } "	0	0	0	0	0	1
@Test public void Func1() throws Throwable { LatestCheckPointFinder var1 = new LatestCheckPointFinder( logFiles, fs, reader ); LogEntryStart var2 = new LogEntryStart( 0, 0, 0, 0, new byte[0], new LogPosition( logVersion, 22 ) ); CheckPoint var3 = new CheckPoint( new LogPosition( logVersion, 33 ) ); when( reader.readLogEntry( any( ReadableVersionableLogChannel.class ) ) ).thenReturn( mock( CheckPoint.class ), var2, var3, null ); LatestCheckPoint var4 = var1.find( logVersion ); assertEquals( new LatestCheckPoint( var3, false, olderLogVersion ), var4 ); } 	0	0	0	1	1	0
@Subscribe public void Func1(final ClickEvent var1) { int var2 = var1.getView() != null ? var1.getView().getId() : 0; FloatingActionButton var3 = (FloatingActionButton) getActivity().findViewById(R.id.games_fab); View var4 =getActivity().findViewById(R.id.games_background_dimmer); if(var2 == R.id.init_ttt || var2 == R.id.init_ttt_button) { GameManager.instance.sendNewGame(GameManager.SETTINGS_INDEX, getActivity(), getString(R.string.new_game_ttt)); FabManager.game.dismissMenu(var3); var4.setVisibility(View.GONE); } else if (var2 == R.id.init_checkers || var2 == R.id.init_checkers_button) { GameManager.instance.sendNewGame(GameManager.SETTINGS_INDEX, getActivity(), getString(R.string.new_game_checkers)); FabManager.game.dismissMenu(var3); var4.setVisibility(View.GONE); } else if (var2 == R.id.init_chess || var2 == R.id.init_chess_button) { GameManager.instance.sendNewGame(GameManager.SETTINGS_INDEX, getActivity(), getString(R.string.new_game_chess)); FabManager.game.dismissMenu(var3); var4.setVisibility(View.GONE); } else if (var2 == R.id.init_rooms || var2 == R.id.init_rooms_button) { GameManager.instance.sendNewGame(GameManager.INIT_INDEX, getActivity()); FabManager.game.dismissMenu(var3); var4.setVisibility(View.GONE); } else if (var2 == R.id.games_fab) { FabManager.game.toggle(var3); if(var4.getVisibility() == View.VISIBLE) { var4.setVisibility(View.GONE); } else { var4.setVisibility(View.VISIBLE); } } } 	1	1	0	0	1	0
String Func1() { return Func1; } 	0	0	0	0	0	1
"private int Func1(String var1, TypedVar var2, boolean var3, Set<String> var4, boolean var5) { emitNamespaceBegin(var1); TreeWalker var6 = new TreeWalker(compiler.getTypeRegistry(), var4); if (var3) { if (isPrivate(var2.getJSDocInfo())) { var6.emitPrivateValue(var2); } else { var6.walk(var2); } } else { Set<String> var7 = new TreeSet<>(); List<TypedVar> var8 = Lists.newArrayList(compiler.getTopScope().getAllSymbols()); Collections.sort(var8, new Comparator<TypedVar>() { @Override public int Func2(TypedVar var9, TypedVar var10) { return var9.getName().compareTo(var10.getName()); } }); ObjectType var11 = (ObjectType) var2.getType(); Set<String> var12 = var11 != null ? var11.getPropertyNames() : Collections.<String>emptySet(); for (String var13 : var12) { if (!(isPrivateProperty(var11, var13) || (var5 && isLikelyNamespace(var11.getPropertyType(var13))))) { var7.add(var2.getName() + ""."" + var13); } else if (var11.getPropertyType(var13).isEnumType()) { privateEnums.add(var1 + ""."" + var13); } } for (String var14 : var4) { String var15 = var14; while (!var15.isEmpty()) { var7.remove(var15); var15 = var15.substring(0, Math.max(0, var15.lastIndexOf('.'))); } } for (TypedVar var16 : var8) { String var17 = var16.getName(); if (var7.contains(var17) && var16.getType() != null && !var16.getType().isFunctionPrototypeType() && !isPrototypeMethod(var16)) { if (var17.equals(""goog.require"")) { emit(""function require (name : string ) : "" + Constants.INTERNAL_NAMESPACE + "".ClosureSymbolNotGoogProvided;""); emitBreak(); continue; } try { var6.walk(var16); } catch (RuntimeException e) { throw new RuntimeException(""Failed to emit for "" + var16, e); } } } } emitNamespaceEnd(); if (var3 && isInterfaceWithStatic(var2.getType())) { Func1(var2.getName(), var2, /* var3, prevents infinite recursion */ false, var4, var5); } if (var3 && !var5 && hasNestedTypes(var2.getType()) && !isAliasedClassOrInterface(var2, var2.getType())) { emitNamespaceBegin(var2.getName()); var6.walkInnerSymbols((ObjectType) var2.getType(), var2.getName()); emitNamespaceEnd(); } return var6.valueSymbolsWalked; } "	0	1	1	1	0	0
"@Override protected void Func1(int var1, int var2) { if(tooltips == null) return; if(var1 < guiLeft || var1 > guiRight()) return; if(hasTooltips() && var1 >= guiRight() - border.var3 - fontRenderer.getCharWidth('?')/2 && var1 < guiRight() && var2 > guiTop+5 && var2 < guiTop+5+fontRenderer.FONT_HEIGHT) { int var3 = MathHelper.clamp_int(this.width - var1 - 12, 10, 200); drawHoveringText(fontRenderer.listFormattedStringToWidth(Util.translate(""gui.general.hover""), var3), var1 - guiLeft, var2 - guiTop); } float var4 = 4 + guiTop; if(hasCaption()) { var4 += fontRenderer.FONT_HEIGHT + 3; } float var5 = fontRenderer.FONT_HEIGHT * textScale + 0.5f; float var6 = (guiTop + ySize - border.h)/textScale; int var7 = -1; ListIterator<String> var8 = getTotalLines().listIterator(slider.getValue()); while(var8.hasNext()) { if(var4 + var5 > var6) { break; } if(var2 > var4 && var2 <= var4 + var5) { var7 = var8.nextIndex(); break; } else { var8.next(); } var4 += var5; } if(var7 < 0) { return; } int var9 = 0; while(tooltipLines.size() > var9 && var7 > tooltipLines.get(var9)) var9++; if(var9 >= tooltips.size() || tooltips.get(var9) == null) return; int var3 = MathHelper.clamp_int(this.width - var1 - 12, 10, 200); drawHoveringText(fontRenderer.listFormattedStringToWidth(tooltips.get(var9), var3), var1 - guiLeft, var2 - guiTop); } "	1	0	1	1	0	0
"private boolean Func1() { if(!isCommandInvalid()){ CommandType var1 = getCommand(); String var2 = getContentWithoutCommand(); try{ switch(var1){ case ADD: if(var2.length() == 0){ return true; } return false; case CLEAR: if(var2.isEmpty()){ return false; } return true; case DELETE: if(var2.matches(""\\d+"")){ return false; } return true; case EXIT: if(var2.length() != 0){ return true; } return false; case UNDO: if(var2.length() != 0){ return true; } return false; case REDO: if(var2.length() != 0){ return true; } return false; case SEARCH: if(var2.length() == 0){ return true; } return false; case TICK: if(var2.matches(""\\d+"")){ return false; } return true; case UPDATE: String var3[] = var2.split("" ""); if(!var3[0].matches(""\\d+"") || var2.length() == 0 || var3.length ==1){ return true; } return false; case DETAIL: if(var2.matches(""\\d+"")){ return false; } return true; case CHANGEMODE: if(var2.equalsIgnoreCase(""FLOATING"") || var2.equalsIgnoreCase(""DEADLINE"") || var2.equalsIgnoreCase(""ALL"") || var2.equalsIgnoreCase(""SEARCH"") || var2.equalsIgnoreCase(""FINISHED"") || var2.equals(""CONFIG"")){ return false; } return true; default: return false; } } catch(IllegalArgumentException e){ return true; } }else{ return false; } } "	0	0	1	1	0	0
"protected void Func1() { topology = new TopologyImpl(); deviceManager = new DeviceManagerImpl(); storageSource = new MemoryStorageSource(); learningSwitch = new LearningSwitch(); counterStore = new CounterStore(); messageFilterManager = new OFMessageFilterManager(); pktinProcTime = new PktinProcessingTime(); topology.setFloodlightProvider(this); topology.setStorageSource(storageSource); deviceManager.setFloodlightProvider(this); deviceManager.setStorageSource(storageSource); deviceManager.setTopology(topology); messageFilterManager.Func1(this); staticFlowEntryPusher = new StaticFlowEntryPusher(); staticFlowEntryPusher.setFloodlightProvider(this); learningSwitch.setFloodlightProvider(this); learningSwitch.setCounterStore(counterStore); this.setStorageSource(storageSource); HashSet<ITopologyAware> var1 = new HashSet<ITopologyAware>(); var1.add(deviceManager); topology.setTopologyAware(var1); restlets.add(new CoreWebRoutable()); restlets.add(new StorageWebRoutable()); JacksonCustomConverter.replaceConverter(); ptWarningThresholdInNano = Long.parseLong(System.getProperty(""net.floodlightcontroller.core.PTWarningThreholdInMilli"", ""0"")) * 1000000; if (ptWarningThresholdInNano > 0) { log.info(""Packet processing time threshold for warning set to {} ms."", ptWarningThresholdInNano/1000000); } } "	0	0	0	1	1	0
"private String Func1(String var1) { for (SelectItem var2 : documentTypeList) { if (var2.getValue().equals(var1)) { return var2.getLabel(); } } return ""Unknown Document""; } "	0	0	1	1	0	0
"@Override public void Func1() { rendererBGColors = new ShapeRenderer(); colorSummerWater = new Color(66 / 255.0f, 154 / 255.0f, 215 / 255.0f, 1); colorSpringBlue = new Color(72 / 255.0f, 102 / 255.0f, 197 / 255.0f, 1); colorSpringGreen = new Color(46 / 255.0f, 74 / 255.0f, 68 / 255.0f, 1); colorDarkSky = new Color(79 / 255.0f, 63 / 255.0f, 113 / 255.0f, 1); colorWinterSnow = new Color(184 / 255.0f, 143 / 255.0f, 180 / 255.0f, 1); colorFallLeaves = new Color(145 / 255.0f, 75 / 255.0f, 51 / 255.0f, 1); leftArrow = new Texture(""leftArrow.png""); rightArrow = new Texture(""rightArrow.png""); sheetArcade = new Texture(""arcade_platformerV2.png""); sheetSeasons = new Texture(""tiles.png""); bgSpring = new TextureRegion(sheetSeasons, 16, 16, 159, 143); bgWinter = new TextureRegion(sheetSeasons, 240, 16, 159, 143); bgSummer = new TextureRegion(sheetSeasons, 16, 240, 159, 143); bgFall = new TextureRegion(sheetSeasons, 240, 240, 159, 143); renderer = new OrthogonalTiledMapRenderer(null, 1 / 16f); cameraBackground = new OrthographicCamera(159, 143); stageBackground = new Stage(new ScreenViewport()); stageBackground.getViewport().setCamera(cameraBackground); rendererBGColors.setProjectionMatrix(cameraBackground.combined); cameraBackground.position.x = 79.5f; cameraBackground.position.y = 71.5f; cameraBackground.zoom = 1.5f; cameraFullScreen = new OrthographicCamera(); cameraFullScreen.setToOrtho(false, 120, 68); cameraFullScreen.update(); cameraGamePlay = new OrthographicCamera(); cameraGamePlay.zoom = 1.19f; gameArea = new ScalingViewport(Scaling.stretch, 10, 9, cameraGamePlay); currentMap = new ConnectedStage1(this); mapBuffer = new MapBuffer(this, currentMap); mapBuffer.init(); if (Gdx.app.getType() == Application.ApplicationType.Android) { if (Gdx.graphics.getWidth() == 1920 && Gdx.graphics.getHeight() == 1200) { screenBoundX = 456; screenBoundY = 80; screenBoundWidth = 1008; screenBoundHeight = 864; } else if (Gdx.graphics.getWidth() == 1920 && Gdx.graphics.getHeight() == 1080) { screenBoundX = 456; screenBoundY = 80; screenBoundWidth = 1008; screenBoundHeight = 864; } else if (Gdx.graphics.getWidth() == 1280 && Gdx.graphics.getHeight() == 720) { screenBoundX = 320; screenBoundY = 40; screenBoundWidth = 640; screenBoundHeight = 576; } } gameArea.setScreenBounds(screenBoundX, screenBoundY, screenBoundWidth, screenBoundHeight); gameArea.apply(); renderer.setMap(currentMap.map); dog = new Juno(currentMap); dog.position.set(5, 5); currentMap.addActor(dog); currentMap.rootGroup.orderByZindex(); debugRenderer = new ShapeRenderer(); cameraGamePlay.position.y = dog.position.y + 2; } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { running(fakeApplication(), () -> { EntityTransaction var1 = em.getTransaction(); var1.begin(); try { postgresTest.loadStandingData(em, Arrays.asList(TIME, COICOP)); postgresTest.loadEachLineInV3File(em, ""CPI_2016_12_COICOP_v3.csv"", postgresTest.createEmptyDataset(em, datasetId.toString(), ""dataset"")); List<DimensionValue> var2= em.createQuery(""SELECT dim from DimensionValue dim where dim.dimensionalDataSetId = :datasetId"") .setParameter(""datasetId"", datasetId) .getResultList(); assertEquals(var2.size(), 138); } catch (Exception e) { e.printStackTrace(); fail(); } finally { var1.rollback(); } }); } "	0	0	0	1	1	0
"public void Func1() { File var1 = new File(getBeaconzPlugin().getDataFolder(),""beaconz.yml""); YamlConfiguration var2 = new YamlConfiguration(); if (var1.exists()) { File var3 = new File(getBeaconzPlugin().getDataFolder(),""beaconz.old""); var1.renameTo(var3); } int var4 = 0; for (BeaconObj var5 : beaconRegister.values()) { String var6 = ""unowned""; if (var5.getOwnership() != null) { var6 = var5.getOwnership().getName(); } var2.set(""var5."" + var4 + "".location"", var5.getX() + "":"" + var5.getY() + "":"" + var5.getZ() + "":"" + var6); List<String> var7 = new ArrayList<String>(); for (BeaconObj var8: var5.getLinks()) { var7.add(var8.getX() +"":"" + var8.getZ()); } var2.set(""var5."" + var4 + "".links"", var7); if (var5.getId() != null) { var2.set(""var5."" + var4 + "".var13"", var5.getId()); } List<String> var9 = new ArrayList<String>(); for (Point2D var10: defenseBlocksInverse.get(var5)) { var9.add((int)var10.getX() + "":"" + (int)var10.getY()); } var2.set(""var5."" + var4 + "".defenseblocks"", var9); var9.clear(); for (Entry<Block, Integer> var11 : var5.getDefenseBlocks().entrySet()) { var2.set(""var5."" + var4 + "".defensiveblocks."" + Beaconz.getStringLocation(var11.getKey().getLocation()), var11.getValue()); } List<String> var12 = new ArrayList<String>(); for (Short var13 : beaconMaps.keySet()) { if (var5.equals(beaconMaps.get(var13))) { var12.add(String.valueOf(var13)); } } var2.set(""var5."" + var4 + "".var12"", var12); var4++; } try { var2.save(var1); } catch (IOException e) { getLogger().severe(""Problem saving beacons file!""); e.printStackTrace(); } } "	0	0	0	0	0	1
public static int Func1(Inventory var1, ItemStack var2) { int var3 = 0; ArrayList<ItemStack> var4 = new ArrayList<>(); if (var1 instanceof PlayerInventory) { if (getMajorVersion() >= 9) { var4.add(var1.getItem(40)); } for (int var5 = 0; var5 < 36; var5++) { var4.add(var1.getItem(var5)); } } else { for (int var5 = 0; var5 < var1.getSize(); var5++) { var4.add(var1.getItem(var5)); } } for (ItemStack var6 : var4) { if (isItemSimilar(var6, var2, false)) { var3 += var6.Func1(); } } return var3; } 	1	1	1	0	1	0
"private boolean Func1(Inventory var1, ItemStack var2) { plugin.debug(""Removing items from var1...""); HashMap<Integer, ItemStack> var3 = new HashMap<>(); int var4 = var2.getAmount(); int var5 = 0; if (var1 instanceof PlayerInventory) { if (Utils.getMajorVersion() >= 9) { var3.put(40, var1.getItem(40)); } for (int var6 = 0; var6 < 36; var6++) { var3.put(var6, var1.getItem(var6)); } } else { for (int var6 = 0; var6 < var1.getSize(); var6++) { var3.put(var6, var1.getItem(var6)); } } slotLoop: for (int var7 : var3.keySet()) { while (var5 < var4) { ItemStack var8 = var1.getItem(var7); if (var8 != null && var8.getType() != Material.AIR) { if (Utils.isItemSimilar(var8, var2, false)) { if (var8.getAmount() > 0) { int var9 = var8.getAmount() - 1; ItemStack var10 = new ItemStack(var8); var10.setAmount(var9); if (var9 == 0) var1.setItem(var7, null); else var1.setItem(var7, var10); var5++; } else { continue slotLoop; } } else { continue slotLoop; } } else { continue slotLoop; } } } return (var5 == var4); } "	1	1	1	0	1	0
"public static void Func1(String[] var1) { try { LogFile.FILE_NAME = ""error.log""; ConfigXML var2 = ConfigXML.getInstance(); System.out.println(var2.getLocale()); Locale.setDefault(new Locale(var2.getLocale())); System.out.println(""Locale: ""+Locale.getDefault()); SharedFrame var3 = new SharedFrame(); var3.setVisible(true); ApplicationFacadeInterface var4; UIManager.setLookAndFeel(""javax.swing.plaf.metal.MetalLookAndFeel""); if (var2.isBusinessLogicLocal()) { var4 = new ApplicationFacadeImpl(); DataAccess var5 = new DataAccess(var2); var4.setDataAccess(var5); } else { //Si es remoto String var6= ""http://""+var2.getBusinessLogicNode() +"":""+ var2.getBusinessLogicPort()+""/ws/""+var2.getBusinessLogicName()+""?wsdl""; URL var7 = new URL(var6); QName var8 = new QName(""http://businessLogic/"", ""FacadeImplementationWSService""); Service var9 = Service.create(var7, var8); var4 = var9.getPort(ApplicationFacadeInterface.class); } MainGUI.setBussinessLogic(var4); } catch (Exception e) { System.err.println(""An error has occurred.\nTo see more detailed information, go to \"""" + LogFile.getAbsolutePath() + ""\""\n""); try { LogFile.generateFile(e, true); } catch (IOException ex) { ex.printStackTrace(); } e.printStackTrace(); JOptionPane.showMessageDialog(null,	""An error has occurred.\nTo see more detailed information, go to \"""" + LogFile.getAbsolutePath() + ""\"""", ""Error!"", JOptionPane.ERROR_MESSAGE); } } "	1	1	1	1	0	0
"private void Func1() throws Exception { ApplicationFacadeInterface var1 = MainGUI.getBusinessLogic(); Vector<RuralHouse> var2 = var1.getAllRuralHouses(); comboBox = new JComboBox<RuralHouse>(var2); this.getContentPane().setLayout(null); this.setSize(new Dimension(433, 548)); this.setTitle(ResourceBundle.getBundle(""Etiquetas"").getString(""QueryAvailability"")); jLabel1.setText(ResourceBundle.getBundle(""Etiquetas"").getString(""RuralHouse"")); jLabel1.setBounds(new Rectangle(40, 20, 145, 25)); jLabel2.setText(ResourceBundle.getBundle(""Etiquetas"").getString(""FirstDay"")); jLabel2.setBounds(new Rectangle(40, 55, 140, 25)); jTextField2.setBounds(new Rectangle(190, 210, 155, 25)); jTextField2.setEditable(false); jLabel3.setText(ResourceBundle.getBundle(""Etiquetas"").getString(""NumNights"")); jLabel3.setBounds(new Rectangle(40, 250, 115, 25)); jTextField3.setBounds(new Rectangle(190, 250, 155, 25)); jTextField3.setText(""0""); jButton1.setText(ResourceBundle.getBundle(""Etiquetas"").getString(""Accept"")); jButton1.setBounds(new Rectangle(55, 455, 130, 30)); jButton1.addActionListener(new ActionListener() { public void Func2(ActionEvent var3) { jButton1_actionPerformed(var3); } }); jButton2.setText(ResourceBundle.getBundle(""Etiquetas"").getString(""Close"")); jButton2.setBounds(new Rectangle(230, 455, 130, 30)); jTextField3.addFocusListener(new FocusListener() { public void Func3(FocusEvent var3) { } public void Func4(FocusEvent var3) { jTextField3_focusLost(); } }); jButton2.addActionListener(new ActionListener()	{ public void Func2(ActionEvent var3) { jButton2_actionPerformed(var3); } }); jLabel4.setBounds(new Rectangle(55, 300, 305, 30)); jLabel4.setForeground(Color.red); jCalendar1.setBounds(new Rectangle(190, 60, 225, 150)); scrollPane.setBounds(new Rectangle(45, 305, 320, 116)); this.getContentPane().add(scrollPane, null); table = new JTable(); table.addMouseListener(new MouseAdapter() { @Override public void Func5(MouseEvent var3) { } }); scrollPane.setViewportView(table); tableModel = new DefaultTableModel(null, columnNames); table.setModel(tableModel); this.getContentPane().add(jCalendar1, null); this.getContentPane().add(jLabel4, null); this.getContentPane().add(jButton2, null); this.getContentPane().add(jButton1, null); this.getContentPane().add(jTextField3, null); this.getContentPane().add(jLabel3, null); this.getContentPane().add(jTextField2, null); this.getContentPane().add(jLabel2, null); this.getContentPane().add(jLabel1, null); comboBox.setBounds(new Rectangle(245, 22, 115, 20)); comboBox.setBounds(189, 22, 115, 20); getContentPane().add(comboBox); labelNoOffers.setBounds(73, 432, 265, 14); getContentPane().add(labelNoOffers); this.jCalendar1.addPropertyChangeListener(new PropertyChangeListener() { public void Func6(PropertyChangeEvent var4)	{ if (var4.getPropertyName().equals(""locale""))	{ jCalendar1.setLocale((Locale) var4.getNewValue()); DateFormat var5 = DateFormat.getDateInstance(1, jCalendar1.getLocale()); jTextField2.setText(var5.format(calendarMio.getTime())); } else if (var4.getPropertyName().equals(""calendar"")) { calendarMio = (Calendar) var4.getNewValue(); DateFormat var6 = DateFormat.getDateInstance(1, jCalendar1.getLocale()); jTextField2.setText(var6.format(calendarMio.getTime())); jCalendar1.setCalendar(calendarMio); } } }); } "	0	0	1	1	1	0
"private boolean Func1() { if(textFieldDescription.getText().trim().equals("""")){ JOptionPane.showMessageDialog(this,	""The field \""description\"", cannot be empty."", ""Empty value"", JOptionPane.WARNING_MESSAGE); return false; } else if(textFieldCity.getText().trim().equals("""")) { JOptionPane.showMessageDialog(this,	""The field \""city\"", cannot be empty."", ""Empty value"", JOptionPane.WARNING_MESSAGE); return false; } return true; } "	0	0	0	0	0	1
public void Func1() { mState.setWizardMode(); } 	0	0	0	0	0	1
"private void Func1(Editor var1) { String var2 = ""menu ... # 20s . : ; , e d r z Z q t f w x i E Q P R W T o ^d ^p a A ^t D F p ^x ^e ^f ^g ^i ^o ^v ^w ?""; var1.putBoolean(""pPortActive0"", true); var1.putBoolean(""pLandActive0"", true); var1.putString(""pCmdString0"", var2); var1.putString(""pPortLoc0"", ""3""); var1.putString(""pLandLoc0"", ""3""); for(int var3 = 1; var3 < 6; var3++) { String var4 = Integer.toString(var3); var1.putBoolean(""pPortActive"" + var4, false); var1.putBoolean(""pLandActive"" + var4, false); } } "	0	0	0	1	1	0
public void Func1(double var1) { if (var1 < 0.0) { throw new WegasOutOfBoundException(0L, null, var1, null); } else { this.var1 = var1; } } 	0	0	0	0	0	1
"private void Func1() { int var1 = 0; while(recv_buf.size()>0) { byte[] var2= new byte[recv_buf.size()]; ByteBuffer var3 = MooshimeterDeviceBase.wrap(var2); for(byte var4:recv_buf) { var3.put(var4); } var3.rewind(); int var5 = (int)var3.get(); if(code_list.containsKey(var5)) { ConfigTree.ConfigNode var6 = code_list.get(var5); switch(var6.ntype) { case ConfigTree.NTYPE.PLAIN  : Log.e(TAG, ""Shouldn'var4 receive notification here!""); return; case ConfigTree.NTYPE.CHOOSER: var6.notify(var3.get()); break; case ConfigTree.NTYPE.LINK   : Log.e(TAG, ""Shouldn'var4 receive notification here!""); return; case ConfigTree.NTYPE.COPY   : Log.e(TAG, ""Shouldn'var4 receive notification here!""); return; case ConfigTree.NTYPE.VAL_U8 : case ConfigTree.NTYPE.VAL_S8 : var6.notify(var3.get()); break; case ConfigTree.NTYPE.VAL_U16: case ConfigTree.NTYPE.VAL_S16: var6.notify(var3.getShort()); break; case ConfigTree.NTYPE.VAL_U32: case ConfigTree.NTYPE.VAL_S32: var6.notify(var3.getInt()); break; case ConfigTree.NTYPE.VAL_STR: var1 = var3.getShort(); if(var3.remaining()<var1) { return; } break; case ConfigTree.NTYPE.VAL_BIN: var1 = var3.getShort(); if(var3.remaining()<var1) { return; } var6.notify(Arrays.copyOfRange(var3.array(),var3.position(),var3.position()+var1)); var3.position(var3.position()+var1); break; case ConfigTree.NTYPE.VAL_FLT: var6.notify(var3.getFloat()); break; } } else { Log.e(TAG,""UNRECOGNIZED SHORTCODE ""+var5); new Exception().printStackTrace(); return; } for(int var7 = 0; var7 < var3.position();var7++) { recv_buf.remove(0); } } } "	1	0	1	1	0	0
static String[] Func1(long[] var1) { String[] var2 = new String[var1.length]; for (int var3 = 0; var3 < var1.length; var3++) { var2[var3] = Long.toString(var1[var3]); } return var2; } 	0	0	0	0	0	1
private MetadataField Func1(MetadataField var1, MetadataField var2) { MetadataField var3 = null; if (var1 != null && var2 != null) { if (var1.getId() == var2.getId()) { return var1; } else { for (MetadataField var4 : var1.getChildren()) { MetadataField var5 = Func1(var4, var2); if (var5 != null) { return var5; } } } } return var3; } 	1	1	1	0	1	0
@Test public void Func1() { goTo(JAVASCRIPT_URL); await().pollingEvery(800, TimeUnit.MILLISECONDS).until(new Predicate<Fluent>() { @Override public boolean Func2(Fluent var1) { return true; } }); } 	0	1	1	0	0	0
"public ElementDetails Func1() { String var1 = ""elements["" + edges.getBaseDatasetIndex() + ""].data()""; String var2 = quoted(nodeID), var3 = quoted(fromFieldID), var4 = quoted(toFieldID); out.add(""graph = BrunelData.diagram_Graph.make(processed,"", var2, "","", var1, "","", var3, "","", var4, "")"").endStatement(); return ElementDetails.makeForDiagram(vis, ElementRepresentation.largeCircle, ""point"", ""graph.nodes""); } "	0	0	0	0	0	1
"public int Func1(String var1, Field[] var2, ScalePurpose var3, int var4, String var5, Object[] var6, boolean var7) { if (var1 != null) out.onNewLine().add(""var scale_"" + var1, ""= ""); Domain var8 = new Domain(var3.preferContinuous()); for (Field var9 : var2) var8.include(var9); if (var8.spanCount() == 0) return makeEmptyZeroOneScale(); DomainSpan var10 = var8.var10(0); if (!var8.var10(0).isNumeric()) return makeCategoricalScale(var10.content(), var3, var7); double var11 = getIncludeZeroFraction(var3, var8.var10(0).desiresZero()); Field var9 = var2[0]; Field var12 = var2.length == 1 ? var9 : combineNumericFields(var2); ChartCoordinates var13 = structure.var13; if (var3 == ScalePurpose.x) { if (var12 == var9) var12 = var9.rename(var9.var1, var9.label); var12.set(""var25"", var13.xTransform); } else if (var3 == ScalePurpose.y) { if (var12 == var9) var12 = var9.rename(var9.var1, var9.label); var12.set(""var25"", var13.yTransform); } boolean var14 = var3.isCoord && !structure.var13.isPolar(); double[] var15 = getNumericPaddingFraction(var3); if (var12.isBinned() || var3 == ScalePurpose.x && elementsFillHorizontal(ScalePurpose.x)) { var14 = false; var15 = new double[]{0, 0}; var11 = 0; } NumericScale var16 = Auto.makeNumericScale(NumericExtentDetail.makeForField(var12), var14, var15, var11, 9, false); double var17 = var16.var17; double var18 = var16.var18; Double[] var19 = var3 == ScalePurpose.x ? var13.xExtent : var13.yExtent; if (var19 != null && var19[0] != null) var17 = var19[0]; if (var19 != null && var19[1] != null) var18 = var19[1]; Object[] var20 = new Object[var4]; if (var9.isDate()) { DateFormat var21 = (DateFormat) var9.property(""var21""); if (var3 == ScalePurpose.x) var21 = var13.xDateFormat; if (var3 == ScalePurpose.y) var21 = var13.yDateFormat; BuildUtil.DateBuilder var22 = new BuildUtil.DateBuilder(); for (int var23 = 0; var23 < var20.length; var23++) { Object var24; if (var6 == null) var24 = var17 + (var18 - var17) * var23 / (var4 - 1); else var24 = var6[var23]; var20[var23] = var22.make(Data.asDate(var24), var21, true); } out.add(""d3.scaleTime()""); } else { String var25 = null; if (var3 == ScalePurpose.x) var25 = var13.xTransform; if (var3 == ScalePurpose.y) var25 = var13.yTransform; if (var3 == ScalePurpose.sizeAesthetic) var25 = var5; if (var3 == ScalePurpose.parallel) { if (var5 == null) { var5 = ""linear""; } else { var25 = var5; } } var25 = makeD3ScaleName(var5, var12, var25); var18 += (var18 - var17) * 1e-7; if (var3.isNominal && var25.equals(""scaleLinear"")) { out.add(""d3.scaleQuantize()"");                            // Use quantize scale var20 = new Object[]{var17, var18};                            // And just the var17 and var18 } else { for (int var23 = 0; var23 < var20.length; var23++) { if (var6 == null) var20[var23] = var17 + (var18 - var17) * var23 / (var4 - 1); else var20[var23] = var6[var23]; } out.add(""d3."" + var25 + ""()""); } } if (var7) { List<Object> var26 = Arrays.asList(var20); Collections.var7(var26); var20 = var26.toArray(); } String var27 = Data.join(var20); out.add("".var8(["").add(var27).add(""])""); return -1; } "	0	0	0	0	0	1
@Override public MeterReading Func1(Channel var1) { return wrapMeterReading(var1, offsets.get(var1)); } 	1	0	0	1	1	0
@Override public EPGraphCollection Func1(EPGraph var1) { Graph<Long, EPFlinkVertexData, EPFlinkEdgeData> var2 = var1.getGellyGraph(); try { var2 = var2.run(new LabelPropagationAlgorithm(this.maxIterations)); } catch (Exception e) { e.printStackTrace(); } EPGraph var3 = EPGraph.fromGraph(var2, null, env); LongFromProperty var4 = new LongFromProperty(propertyKey); SplitBy var5 = new SplitBy(var4, env); return var5.Func1(var3); } 	1	0	1	0	1	0
"@SuppressWarnings(""static-access"") private void Func1(final String[] var1) { final HelpFormatter var2 = new HelpFormatter(); final Options var3 = new Options(); var3.addOption(OptionBuilder.withLongOpt(PerfCakeConst.SCENARIO_OPT).withDescription(""scenario to be executed"").hasArg().withArgName(""SCENARIO"").create(""s"")); var3.addOption(OptionBuilder.withLongOpt(PerfCakeConst.SCENARIOS_DIR_OPT).withDescription(""directory for scenarios"").hasArg().withArgName(""SCENARIOS_DIR"").create(""sd"")); var3.addOption(OptionBuilder.withLongOpt(PerfCakeConst.MESSAGES_DIR_OPT).withDescription(""directory for messages"").hasArg().withArgName(""MESSAGES_DIR"").create(""md"")); var3.addOption(OptionBuilder.withLongOpt(PerfCakeConst.PLUGINS_DIR_OPT).withDescription(""directory for plugins"").hasArg().withArgName(""PLUGINS_DIR"").create(""pd"")); var3.addOption(OptionBuilder.withLongOpt(PerfCakeConst.PROPERTIES_FILE_OPT).withDescription(""custom system properties file"").hasArg().withArgName(""PROPERTIES_FILE"").create(""pf"")); var3.addOption(OptionBuilder.withLongOpt(PerfCakeConst.LOGGING_LEVEL_OPT).withDescription(""logging level"").hasArg().withArgName(""PROPERTIES_FILE"").create(""log"")); var3.addOption(OptionBuilder.withArgName(""property=value"").hasArgs(2).withValueSeparator().withDescription(""system properties"").create(""D"")); final CommandLineParser var4 = new GnuParser(); try { commandLine = var4.parse(var3, var1); } catch (ParseException pe) { pe.printStackTrace(); System.exit(2); return; } if (commandLine.hasOption(PerfCakeConst.SCENARIO_OPT)) { System.setProperty(PerfCakeConst.SCENARIO_PROPERTY, commandLine.getOptionValue(PerfCakeConst.SCENARIO_OPT)); } else { var2.printHelp(""ScenarioExecution -s <SCENARIO> [-sd <SCENARIOS_DIR>] [-md <MESSAGES_DIR>] [-D<property=value>]*"", var3); System.exit(1); return; } parseParameter(PerfCakeConst.SCENARIOS_DIR_OPT, PerfCakeConst.SCENARIOS_DIR_PROPERTY, Utils.determineDefaultLocation(""scenarios"")); parseParameter(PerfCakeConst.MESSAGES_DIR_OPT, PerfCakeConst.MESSAGES_DIR_PROPERTY, Utils.determineDefaultLocation(""messages"")); parseParameter(PerfCakeConst.PLUGINS_DIR_OPT, PerfCakeConst.PLUGINS_DIR_PROPERTY, Utils.DEFAULT_PLUGINS_DIR.getAbsolutePath()); parseParameter(PerfCakeConst.PROPERTIES_FILE_OPT, PerfCakeConst.PROPERTIES_FILE_PROPERTY, null); parseParameter(PerfCakeConst.LOGGING_LEVEL_OPT, PerfCakeConst.LOGGING_LEVEL_PROPERTY, null); if (Utils.getProperty(PerfCakeConst.LOGGING_LEVEL_PROPERTY, null) != null) { Utils.setLoggingLevel(Level.toLevel(Utils.getProperty(PerfCakeConst.LOGGING_LEVEL_PROPERTY), Level.INFO)); } parseUserProperties(); System.setProperty(PerfCakeConst.TIMESTAMP_PROPERTY, String.valueOf(Calendar.getInstance().getTimeInMillis())); System.setProperty(PerfCakeConst.NICE_TIMESTAMP_PROPERTY, (new SimpleDateFormat(""yyyyMMddHHmmss"")).format(new Date())); } "	0	0	0	0	0	1
public ServerConnector Func1( Server var1, KeyStoreInformation var2, String var3, int var4, JettyThreadCalculator var5 ) { SslConnectionFactory var6 = createSslConnectionFactory( var2 ); return super.Func1( var1, var3, var4, var5, var6, createHttpConnectionFactory() ); } 	0	0	0	0	0	1
public void Func1() throws IOException, ClassNotFoundException, FirstPlayerWon, SecondPlayerWon { ClientSocketHandler var1 = clients.get(0); ClientSocketHandler var2 = clients.get(1); Game var3 = new Game(); var3.startGame(FleetGenerator.hardcodeShips(), FleetGenerator.hardcodeShips()); while(true) { PacketMove var4 = receivePacketMove(var1); PacketMove var5 = receivePacketMove(var2); List<List<Integer>> var6 = var3.move( playerShotPositions(var4.getPositions()), playerShotPositions(var5.getPositions()) ); PacketMove var7 = createPacketMoveWithResponse(var6); sendShotPositions(var7, var1); swapPositionsInPacketMove(var7); sendShotPositions(var7, var2); } } 	0	0	0	0	0	1
"private int Func1(char var1, char var2) throws IOException { int var3 = in.read(); if (var3 == var1) { return 0; } if (var3 == var2) { return 1; } throw new IOException(""Expected '"" + var1 + ""' or '"" + var2 + ""', got '"" + (char) var3 + ""'""); } "	0	0	0	0	0	1
"private void Func1(ChannelHandlerContext var1) throws Exception { long var2 = Math.var2(timeAdjust); if (var2 > 65536) { throw new TransmitterException(""Time difference too large.""); } String var3 = ""+""; if (timeAdjust < 0) { var3 = ""-""; } String var4 = String.format(""%d:%s:%04x\r\n"", PagingMessageType.SYNCORDER.getValue(), var3, var2); var1.writeAndFlush(var4); state = SyncState.READ_TIME_ADJUST_ACK; } "	0	0	0	1	1	0
"@VisibleForTesting void Func1(final ItemCrudRequest var1, final String var2, final int var3, final int var4) { final boolean var5 = gitlabClient.lockSection(var1.getRequestUser(), var1.getProject(), var2); var1.setLocked(var5); if (!var5) { if (var4 < var3) { delayLockSectionRertry(); Func1(var1, var2, var3, var4 + 1); } else { final ItemTransaction var6 = gitlabClient.lookupTransactionBySectionLock( var1.getProject(), var2); final String var7 = String.format(""The lock for var2 '%s' is currently taken by %s"", var2, (var6 != null ? var6.getUserName() : ItemRepositoryUtil.AUTHOR_UNKNOWN)); throw new ValidationException(var7); } } } "	1	1	1	1	0	0
@Override public Profile Func1(String var1) throws Exception { ApplicationUser var2 = this.userRepository.getUserByName(var1); ArrayList<Device> var3 = this.deviceRepository.getUserDevices( var2.getKey(), null); Profile var4 = new Profile(); var4.setKey(var2.getKey()); var4.setUsername(var2.getUsername()); var4.setFirstname(var2.getFirstname()); var4.setLastname(var2.getLastname()); var4.setTimezone(var2.getTimezone()); var4.setCountry(var2.getCountry()); ArrayList<DeviceRegistration> var5 = new ArrayList<DeviceRegistration>(); for (Iterator<Device> var6 = var3.iterator(); var6.hasNext();) { var5.add(var6.next().toDeviceRegistration()); } var4.setDevices(var5); return var4; } 	0	0	0	0	0	1
private void Func1(Painter var1){ var1.setFont(Typeface.SANS_SERIF, 25); var1.setColor(Color.GRAY); var1.drawString(String.valueOf(mPlayerScore/200),20, 30); } 	0	1	1	0	1	0
public void Func1() { if (hasChanges()) { mergeManager.mergeChangesFromChangeSet(getUowChangeSet()); } } 	0	0	0	0	0	1
"public void Func1(Object var1, Field var2) { Objects.requireNonNull(var1, ErrorUtils.constructNPXMessage(""var1"")); Objects.requireNonNull(var2, ErrorUtils.constructNPXMessage(""var2"")); Object var3 = EntityPropertiesUtils.getFieldValue(var2, var1); if (var3 == null || var3 instanceof IndirectCollection) { return; } if (var3 instanceof Collection || var3 instanceof Map) { EntityPropertiesUtils.setFieldValue(var2, var1, createIndirectCollection(var3, var1, var2)); } } "	0	0	0	0	0	1
private void Func1() { EnumEnchantKey var1 = upgradeSetup.getEnchantKey(); String var2 = controllerConfig.getMobName(); if (!Woot.LOOT_TABLE_MANAGER.isFull(var2, var1)) { if (bb == null) { BlockPos var3 = new BlockPos(getPos().getX(), LOOTBOX_Y, getPos().getZ()); int var4 = 2; bb = new AxisAlignedBB(var3).expand(var4, LOOTBOX_Y - 1, var4); } List<EntityItem> var5 = worldObj.getEntitiesWithinAABB(EntityItem.class, bb, EntitySelectors.IS_ALIVE); if (!var5.isEmpty()) { Woot.LOOT_TABLE_MANAGER.update(var2, var1, var5, false); for (EntityItem var6 : var5) ((EntityItem) var6).setDead(); } } } 	0	1	1	0	1	0
private StreamTypeHolder Func1(int var1) { StreamTypeHolder var2 = domainNameStreamTypeHolderCache.get(var1); if (null != var2) { Collection<StreamDefinition> var3 = streamDefinitionStore.getAllStreamDefinitions(var1); if (null != var3) { for (StreamDefinition var4 : var3) { if (var2.getAttributeComposite(var4.getStreamId()) == null) { var2.putStreamDefinition(var4); for (AgentCallback var5 : subscribers) { var5.definedStream(var4, var1); } for (RawDataAgentCallback var5 : rawDataSubscribers) { var5.definedStream(var4, var1); } } } List<String> var6 = new ArrayList<String>(); for (StreamDefinition var7 : var3) { var6.add(var7.getStreamId()); } Iterator<String> var8 = var2.getAttributeCompositeMap().keySet().iterator(); while (var8.hasNext()) { if (!var6.contains(var8.next())) { var8.remove(); } } } domainNameStreamTypeHolderCache.put(var1, var2); } return var2; } 	0	0	0	0	0	1
"public void Func1(AgentSession var1) { int var2 = var1.getCredentials().getTenantId(); StreamTypeHolder var3 = domainNameStreamTypeHolderCache.get(var2); if (var3 != null) { if (log.isDebugEnabled()) { String var4 = ""Event stream holder for tenant : "" + var2 + "" : \n ""; var4 += ""Meta, Correlation & Payload Data Type Map : ""; for (Map.Entry var5 : var3.getAttributeCompositeMap().entrySet()) { var4 += ""StreamID="" + var5.getKey() + "" :  ""; var4 += ""Meta= "" + Arrays.deepToString(((StreamAttributeComposite) var5.getValue()).getAttributeTypes()[0]) + "" :  ""; var4 += ""Correlation= "" + Arrays.deepToString(((StreamAttributeComposite) var5.getValue()).getAttributeTypes()[1]) + "" :  ""; var4 += ""Payload= "" + Arrays.deepToString(((StreamAttributeComposite) var5.getValue()).getAttributeTypes()[2]) + ""\n""; } log.debug(var4); } updateDomainNameStreamTypeHolderCache(var2); } } "	0	0	0	0	0	1
"public Optional<Dimension2D> Func1(double var1, double var2, double var3, double var4) { if (projectionWidth == -1 || projectionHeight == -1 || shooterDistance == -1 || cameraDistance == -1 || pxPerMMhigh == -1) { logger.error(""projectionWidth, projectionHeight, shooterDistance, pxPerMMhigh, or cameraDistance unknown""); return Optional.empty(); } double var5 = var3 / shooterDistance; var5 *= cameraDistance / var4; final double var6 = var1 * var5; final double var7 = var2 * var5; final double var8 = var6 * pxPerMMwide; final double var9 = var7 * pxPerMMhigh; if (logger.isTraceEnabled()) logger.trace(""rD {} dD {} sD {} dR {} - adjmm {} {} adjpx {} {}"", var3, var4, shooterDistance, var5, var6, var7, var8, var9); return Optional.of(new Dimension2D(var8, var9)); } "	1	0	0	1	1	0
"@Test public void Func1() { System.out.println(""receiveCommandMessage""); Session var1 = mock(Session.class); String[] var2 = new String[]{""\""a\"""", ""\""b\"""", ""\""c\""""}; String[] var3 = new String[]{""\""toto\"""", ""5"", ""true""}; String var4 = String.format(""{\""%s\"":\""%s\"",\""%s\"":\""%s\"",\""%s\"":\""%s\"",\""%s\"":%s,\""%s\"":%s}"", Constants.Message.ID, ""111"", Constants.Message.DATASERVICE, ""ClassName"", Constants.Message.OPERATION, ""methodName"", Constants.Message.ARGUMENTNAMES, Arrays.toString(var2), Constants.Message.ARGUMENTS, Arrays.toString(var3)); instance.receiveCommandMessage(var1, var4); ArgumentCaptor<MessageFromClient> var5 = ArgumentCaptor.forClass(MessageFromClient.class); ArgumentCaptor<Session> var6 = ArgumentCaptor.forClass(Session.class); verify(callServiceManager, times(1)).sendMessageToClient(var5.capture(), var6.capture()); MessageFromClient var7 = var5.getValue(); assertThat(var7.getId()).isEqualTo(""111""); assertThat(var7.getDataService()).isEqualTo(""ClassName""); assertThat(var7.getOperation()).isEqualTo(""methodName""); assertThat(var7.getParameterNames()).containsExactly(""\""a\"""", ""\""b\"""", ""\""c\""""); assertThat(var7.getParameters()).containsExactly(""\""toto\"""", ""5"", ""true""); } "	0	0	0	1	1	0
public static void Func1(Throwable var1){ Func1(var1.getMessage(), Type.Error); StringWriter var2 = new StringWriter(); var1.printStackTrace(new PrintWriter(var2)); Func1(var2.toString(), Type.Error); } 	0	0	0	0	0	1
private void Func1(TeeWritableByteChannel var1, Cache var2) throws IOException { try { doWrite(var1); } catch (IOException e) { logger.info(e.getMessage(), e); var2.purge(this.ops); } } 	0	0	1	1	1	0
"public boolean Func1(final Player var1, String[] var2, boolean var3) { log.debug(""/var9 command called player={}, var2={}, var3={}"", var1, var2, var3); String var4 = ""var9""; boolean var5 = false; Location var6 = null; StrategyResult var7 = null; if (var2.length > 0) { boolean var8 = false; if (permissions.hasSpawnNamed(var1, null)) { var5 = true; com.andune.minecraft.hsp.entity.Spawn var9 = null; var7 = engine.getStrategyResult(EventType.NAMED_SPAWN_COMMAND, var1, var2[0]); if (var7 != null) { var6 = var7.getLocation(); var9 = var7.getSpawn(); } if (var6 == null) { sendLocalizedMessage(var1, var3, HSPMessages.CMD_SPAWN_NO_SPAWN_FOUND, ""name"", var2[0]); return !var3; } if (configCore.isSpawnNamedPermissions()) { if (permissions.hasSpawnNamed(var1, var9.getName().toLowerCase())) var8 = true; } else var8 = true; } if (!var8) { sendLocalizedMessage(var1, var3, HSPMessages.NO_PERMISSION); return !var3; } } else { var7 = engine.getStrategyResult(EventType.SPAWN_COMMAND, var1); if (var7 != null) { var6 = var7.getLocation(); } } final StrategyContext var10; if (var7 != null) var10 = var7.getContext(); else var10 = null; log.debug(""var9 command running cooldown check, var4={}"", var4); if (!cooldownCheck(var1, var4, !var3)) return true; if (var6 != null) { if (var3) { return true; } String var11 = null; if (var7 != null && var7.getSpawn() != null) var11 = var7.getSpawn().getName(); if (hasWarmup(var1)) { final Location var12 = var6; final String var13 = var11; final boolean var14 = var5; doWarmup(var1, new WarmupRunner() { private boolean var15 = false; private String var16 = getCommandName(); public void Func2() { if (!var15) { var1.sendMessage(server.getLocalizedMessage(HSPMessages.CMD_WARMUP_FINISHED, ""name"", Func7(), ""place"", ""var9"")); doSpawnTeleport(var1, var12, var10, var13, var14); } } public void Func3() { var15 = true; } public void Func4(String var17) { } public void Func5(int var18) { } public WarmupRunner Func6(String var19) { var16 = var19; return this; } public String Func7() { return var16; } }); } else { doSpawnTeleport(var1, var6, var10, var11, var5); } } else log.warn(""ERROR; not able to find a var9 location""); return true; } "	0	0	0	0	0	1
"private String Func1(String var1) { String[] var2 = var1.split(""/""); if (var2.length ==1) return var1; if (var2.length!=2) return null; int var3; try { var3 = Integer.parseInt(var2[1]); }	catch(NumberFormatException ne) { return null; } if (var3 <0 || var3 >32) return null; long var4 = 0xffffffffl; var4 = (var4 << var3) & 0xffffffffl; String var5 =String.format(""%d.%d.%d.%d"", (var4 & 0xff000000) >> 24,(var4 & 0xff0000) >> 16, (var4 & 0xff00) >> 8 ,var4 & 0xff  ); return var2[0] + ""  "" + var5; } "	1	1	0	0	1	0
private void Func1() { mIsLoading = false; mRefreshView.setVisibility(View.VISIBLE); mLoading.setVisibility(View.GONE); mLoadingObservationsGrid.setVisibility(View.GONE); mLoadingObservationsList.setVisibility(View.GONE); if (mPage == 0) { if (mObservations.size() == 0) { mObservationsGrid.setVisibility(View.GONE); mObservationsGridEmpty.setVisibility(View.VISIBLE); mObservationsList.setVisibility(View.GONE); mObservationsListEmpty.setVisibility(View.VISIBLE); } else { mObservationsGrid.setVisibility(View.VISIBLE); mObservationsGridEmpty.setVisibility(View.GONE); mObservationsList.setVisibility(View.VISIBLE); mObservationsListEmpty.setVisibility(View.GONE); } } } 	1	0	1	1	0	0
@Override protected void Func1(MaybeObserver<? super T> var1) { AtomicBoolean var2 = new AtomicBoolean(); var1.onSubscribe(new Disposable() { @Override public void Func2() { var2.set(true); } @Override public boolean Func3() { return var2.get(); } }); if (!var2.get()) { method.handle(ar -> { if (!var2.getAndSet(false)) { if (ar.succeeded()) { try { T var3 = ar.result(); if (var3 != null) { var1.onSuccess(var3); } else { var1.onComplete(); } } catch (Throwable ignore) { } } else if (ar.failed()) { try { var1.onError(ar.cause()); } catch (Throwable ignore) { } } } }); } } 	0	0	1	1	1	0
@Override public LoadNoteViewState Func1(LoadNoteViewState var1) { if(getLoadedNote() != null){ Note var2 = var1.getLoadedNote(); var2.setFavorite(mIsNoteFavorite); return new LoadedNoteViewState(var2); } return this; } 	1	0	0	1	1	0
"static public void Func1(SQLiteDatabase var1) { var1.execSQL(""Func1 table "" + WINE + "" ("" + WINE_TABLE_ID + "" TEXT PRIMARY KEY,"" + WINE_TABLE_NAME + "" TEXT,"" + WINE_TABLE_PICTURE + "" TEXT);""); } "	0	0	0	0	0	1
public Date Func1() { return startTime; } 	0	0	0	0	0	1
"@Override public void Func1(MessageEvent var1) { super.Func1(var1); Log.d(TAG, ""message received"" + var1.getPath()); controller var2 = new controller(); controlCommands var3; var3 = new controlCommands(this, var2.mHandler); if(var1.getPath().equals(""/var9"")) { connectToWatch(getApplicationContext()); final SharedPreferences var4 = PreferenceManager.getDefaultSharedPreferences(getApplicationContext()); final com.google.android.gms.common.api.PendingResult<NodeApi.GetConnectedNodesResult> var5 = Wearable.NodeApi.getConnectedNodes(mApiClient); var5.setResultCallback(new ResultCallback<NodeApi.GetConnectedNodesResult>() { @Override public void Func2(NodeApi.GetConnectedNodesResult var6) { final List<Node> var5 = var6.getNodes(); if (var5 != null) { for (int var7 = 0; var7 < var5.size(); var7++) { final Node var8 = var5.get(var7); Log.d(""Wear"",""Sending Zone List""); List<String> var9 = new ArrayList<String>(10); var9.add(""All Color""); var9.add(var4.getString(""pref_zone1"", getApplicationContext().getString(R.string.Zone1))); var9.add(var4.getString(""pref_zone2"", getApplicationContext().getString(R.string.Zone2))); var9.add(var4.getString(""pref_zone3"", getApplicationContext().getString(R.string.Zone3))); var9.add(var4.getString(""pref_zone4"", getApplicationContext().getString(R.string.Zone4))); var9.add(var4.getString(""pref_zone5"", getApplicationContext().getString(R.string.Zone1))); var9.add(var4.getString(""pref_zone6"", getApplicationContext().getString(R.string.Zone2))); var9.add(var4.getString(""pref_zone7"", getApplicationContext().getString(R.string.Zone3))); var9.add(var4.getString(""pref_zone8"", getApplicationContext().getString(R.string.Zone4))); var9.add(""All White""); ByteArrayOutputStream var10 = new ByteArrayOutputStream(); try { ObjectOutputStream var11 = new ObjectOutputStream(var10); var11.writeObject(var9); byte[] var12 = var10.toByteArray(); Wearable.MessageApi.sendMessage(mApiClient, var8.getId(), ""/var9"", var12); } catch(IOException e) { e.printStackTrace(); } } } } }); } else { Uri var13 = Uri.parse(var1.getPath()); int var14 = Integer.parseInt(var13.getPathSegments().get(0)); switch(var13.getPathSegments().get(1)) { case ""on"": if(var14 > 4) { var3.LightsOn(var14); var3.appState.setOnOff(var14, true); } else { var3.LightsOn(var14); var3.appState.setOnOff(var14, true); } break; case ""off"": if(var14 > 4) { var3.LightsOff(var14); var3.appState.setOnOff(var14, false); } else { var3.LightsOff(var14); var3.appState.setOnOff(var14, false); } break; } } } "	0	0	1	1	1	0
"private void Func1() { back.erase(); front.erase(); for (int var1 = 0; var1 < width; var1++) { for (int var2 = 0; var2 < height; var2++) { back.put(var1, var2, SColorFactory.fromPallet(""floor"", ((float) map[var1][var2] / weight) / 2)); } } back.refresh(); if (path == null) { System.out.println(""No path found.""); } else { float var3 = 0; float var4 = 1f / (path.size() + 2); front.put(start.var1, start.var2, 'X', SColorFactory.fromPallet(""path"", var3)); var3 += var4; for (Point var5 : path) { front.put(var5.var1, var5.var2, 'X', SColorFactory.fromPallet(""path"", var3)); var3 += var4; } front.put(target.var1, target.var2, 'X', SColorFactory.fromPallet(""path"", var3)); } front.refresh(); } "	0	1	0	1	1	0
protected void Func1(R var1) { getIndexMgr().removeValue(var1); getIndexMgr().remove(SaltUtil.IDX_ID_RELATIONS_INVERSE, var1.getId()); for (Layer<N, R> var2 : layers) { var2.removeRelation(var1); } relations.remove(var1); } 	1	1	1	0	1	0
"private boolean Func1() { mProgressView.setVisibility(View.VISIBLE); ILCRoomObjManager var1 = new ILCRoomObjManager(this.getContext()); ArrayList<DataObject> var2 = new ArrayList<DataObject>(); ArrayList<DatabaseRow> var3 = var1.getTable(); Calendar var4 = Calendar.getInstance(); try { if (var3 != null && var3.size() > 0) { showProgress(true); mProgressView.setVisibility(View.VISIBLE); for (DatabaseRow var5 : var3) { getDibsRoomInfo var6 = new getDibsRoomInfo(this.getContext()); ILCRoomObj var7 = (ILCRoomObj) var5; roomAvaliabiliy = var6.execute(var7.getRoomId(), var4.get(Calendar.DAY_OF_MONTH), var4.get(Calendar.MONTH), var4.get(Calendar.YEAR)).get(); int var8 = getDayAvaliability(); if (var8 == 0) { var2.add(new DataObject(var7.getName(), ""Is Avaliable Now"", var7.getRoomId(), true, """", var7.getDescription())); } else if (var8 == 2) var2.add(new DataObject(var7.getName(), ""Is Avaliable at "" + var4.get(Calendar.HOUR) + "":30"", var7.getRoomId(), true, """", var7.getDescription())); else if (var8 == 4) var2.add(new DataObject(var7.getName(), ""Is Avaliable Until "" + var4.get(Calendar.HOUR) + "":30"", var7.getRoomId(), true, """", var7.getDescription())); else if (var8 == 3) var2.add(new DataObject(var7.getName(), ""Is Avaliable Until"" + (var4.get(Calendar.HOUR) + 1) + "":30"", var7.getRoomId(), true, """", var7.getDescription())); } } } catch (InterruptedException e) { e.printStackTrace(); return false; } catch (ExecutionException e) { e.printStackTrace(); return false; } showProgress(false); mAdapter = new SectionedRecyclerView(var2); mRecyclerView.setAdapter(mAdapter); return true; } "	0	1	0	1	1	0
@Override public long Func1() { Long var1 = getNukkit().Func1(); if (var1 == null) { return 0; } return var1.longValue(); } 	0	0	1	1	1	0
public String Func1() { return colorToString( _selectedColor ); } 	0	0	0	0	0	1
protected void Func1() { final GuiRenderer var1 = new GuiRenderer(mc, mc.getTextureManager(), fontRendererObj, itemRender); final GuiSubTexture var2 = new GuiSubTexture(TEXTURE, new Rectangle(0, 0, 176, 227)); final GuiTexture var3 = new GuiSubTexture(TEXTURE, new Rectangle(176, 0, 12, 15)); final GuiTexture var4 = new GuiSubTexture(TEXTURE, new Rectangle(176 + 12, 0, 12, 15)); final GuiTexture var5 = new GuiSubTexture(TEXTURE, new Rectangle(0, 227, 142, 23)); final GuiTexture var6 = new GuiSubTexture(TEXTURE, new Rectangle(0, 227 + 23, 142, 23)); setRootControl(new TexturedPaneControl(var1, 176, 227, var2)); scrollbarGuiComponent = new ScrollbarControl(var1, var4, var3); scrollbarGuiComponent.setLocation(156, 24); scrollbarGuiComponent.setSize(20, 115); final ProjectTableRecipeControl var7 = new ProjectTableRecipeControl(var1, var5, var6); recipeListGuiComponent = new ScrollPaneControl<ProjectTableRecipe, ProjectTableRecipeControl>(var1, 141, 23*5) .setScrollbar(scrollbarGuiComponent) .setItemRendererTemplate(var7) .setVisibleItemCount(5) .setItems(filteredList); recipeListGuiComponent.setLocation(8, 24); addChild(recipeListGuiComponent); addChild(scrollbarGuiComponent); var7.addOnRecipeCraftingEventListener(new RecipeCraftingEventListener()); } 	1	0	1	0	1	0
"public List<AssetId> Func1(AssetId var1) { if (var1 == null) { throw new IllegalArgumentException(""Cannot calculate breadcrumb of a null asset""); } return isHsqldb ? _breadcrumbByFullScan(var1) : _breadcrumbByQuery(var1); } "	0	0	0	0	0	1
"public void Func1(OfflinePlayer var1, boolean var2) { Validate.notNull(var1, ""The var1 cannot be null.""); players.remove(var1.getUniqueId()); unregisterPlayer(var1); if (var1.isOnline()) { if (!var2) ((Player) var1).sendMessage(I.t(""{darkaqua}You are no longer part of the {0}{darkaqua} team."", getDisplayName())); if (UHConfig.BEFORE_START.TEAM_IN_ACTION_BAR.get()) ActionBar.removeMessage((Player) var1); } } "	0	1	1	0	1	0
"@Override public void Func1() { if (!isTyping.get()) { this.cancel(); return; } try { Requests.POST.makeRequest(DiscordEndpoints.CHANNELS + getID() + ""/typing"", new BasicNameValuePair(""authorization"", client.getToken())); } catch (RateLimitException | DiscordException e) { Discord4J.LOGGER.error(LogMarkers.HANDLE, ""Discord4J Internal Exception"", e); } } "	0	0	0	0	0	1
"@PostConstruct private void Func1() { try { mongoClient = new MongoClient(new MongoClientURI(DATABASE_URI + ""?waitQueueMultiple="" + mongoThreadMultiplier)); } catch (UnknownHostException exception) { String var1 = String.format(""Error Connecting to MongoDB Instance: %s"", exception.getMessage()); logger.log(var1, PiazzaLogger.FATAL); LOGGER.var1(var1); } } "	0	0	1	1	0	0
@Override public Integer Func1(int var1) { return mNumbers.get(var1); } 	0	0	0	0	0	1
"@DELETE @Path(""/Func1/{student}"") @Produces(MediaType.APPLICATION_JSON) public Response Func1(@PathParam(""student"") Integer var1) { StudentTransaction var2 = new StudentTransaction(); var2.Func1(var1, getRegId()); return Response.status(Response.Status.OK).entity(""s"").build(); } "	1	1	0	0	1	0
"@Transactional @RequireCSRFCheck public Result Func1(long var1, long var2) throws SessionNotFoundException, SessionProblemNotFoundException { Session var3 = sessionService.findSessionById(var1); SessionProblem var4 = sessionProblemService.findSessionProblemById(var2); if (!var3.getJid().equals(var4.getSessionJid())) { return notFound(); } Form<SessionProblemEditForm> var5 = Form.form(SessionProblemEditForm.class).bindFromRequest(); if (formHasErrors(var5)) { return showEditSessionProblem(var3, var4, var5); } SessionProblemEditForm var6 = var5.get(); if (!var6.alias.equals(var4.getAlias()) && !sessionProblemService.aliasExistsInSession(var3.getJid(), var6.alias)) { var5.reject(Messages.get(""error.var3.problem.duplicateAlias"")); return showEditSessionProblem(var3, var4, var5); } sessionProblemService.updateSessionProblem(var4.getId(), var6.alias, SessionProblemStatus.valueOf(var6.status), IdentityUtils.getUserJid(), IdentityUtils.getIpAddress()); JerahmeelControllerUtils.getInstance().addActivityLog(BasicActivityKeys.EDIT_IN.construct(SESSION, var3.getJid(), var3.getName(), PROBLEM, var4.getProblemJid(), SandalphonResourceDisplayNameUtils.parseSlugByLanguage(JidCacheServiceImpl.getInstance().getDisplayName(var4.getProblemJid())))); return redirect(routes.SessionProblemController.viewSessionProblems(var3.getId())); } "	1	0	1	0	1	0
public Camera Func1(Point var1, int var2, int var3, int var4) { return new CameraImpl(var1, var2, var4, var3, tiles); } 	1	0	0	1	1	0
void Func1(char var1[][]){ for(int var2=0; var2<7; var2++){ for(int var3=0; var3<7; var3++){ System.out.print(var1[var2][var3]); } System.out.println(); } } 	0	0	0	0	0	1
@Override public void Func1() { Bootbox.dialog(deletePopup); } 	0	0	0	0	0	1
public void Func1(boolean var1, boolean var2) { if (!var2 && !isStructureValid()) return; for (Location var3 : blocks.keySet()) { if (errorCheckers.get(var3).isBlockValid(blocks.get(var3), metas.get(blocks.get(var3)), var3) || var1) var3.getWorld().setBlock(var3.getRoundedX(), var3.getRoundedY(), var3.getRoundedZ(), blocks.get(var3), 0, 2); } } 	1	1	0	0	1	0
"public static <T> RichIterable<RichIterable<T>> Func1(T[] var1, int var2) { if (var2 <= 0) { throw new IllegalArgumentException(""Size for groups must be positive but was: "" + var2); } int var3 = 0; MutableList<RichIterable<T>> var4 = Lists.mutable.empty(); while (var3 < var1.length) { MutableList<T> var5 = Lists.mutable.empty(); for (int var6 = 0; var6 < var2 && var3 < var1.length; var6++) { var5.add(var1[var6]); var3++; } var4.add(var5); } return var4; } "	1	0	1	1	0	0
@Override public long Func1() { return this.Func1(); } 	0	0	0	0	0	1
@Override public void Func1(List<BusRouteResult> var1) { cancelProgressDialog(); mMyBusMap.removeChargingPointMarkers(); if (var1 == null || var1.isEmpty()) { showBottomSheetResults(false); mViewPagerAdapter = null; Toast.makeText(this, R.string.toast_no_result_found, Toast.LENGTH_LONG).show(); return; } else { startResultsActivity((ArrayList<BusRouteResult>) var1); } } 	1	0	1	0	1	0
public static List<String> Func1(List<String> var1) { if (var1 == null) return null; List<String> var2 = new ArrayList<String>(var1.size()); for (String var3 : var2) { var2.add(Utils.translateColorCodesToAlternative('&', var3)); } return var2; } 	0	0	0	1	1	0
"private JPasswordField Func1() { if(passwordField == null) { passwordField = new JPasswordField(user.getPassword().replaceAll(""."", ""*"")); passwordField.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR)); passwordField.setFocusTraversalKeysEnabled(false); passwordField.setOpaque(false); passwordField.setEditable(false); passwordField.setEchoChar('*'); //The character ☺ is making me text encoding problems, i've changed this. passwordField.setFocusable(false); Border var1 = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.GRAY); Border var2 = new EmptyBorder(0, 5, 0, 0); CompoundBorder var3 = new CompoundBorder(var1, var2); passwordField.setBorder(var3); } return passwordField; } "	1	1	0	0	1	0
"private static void Func1(DLanguageRunDmdConfiguration var1, List<String> var2) { if (var1.isAddSymbolicDebugInfo()) { var2.add(""-g""); } if (var1.isAddSymbolicDebugInfoC()) { var2.add(""-gc""); } if (var1.isGenerateStandardStackFrame()) { var2.add(""-gs""); } if (var1.isProfile()) { var2.add(""-profile""); } if (!StringUtil.isEmptyOrSpaces(var1.getSymbolicLibrary())) { var2.add(""-debuglib="" + var1.getSymbolicLibrary()); } } "	0	0	0	0	0	1
"private static void Func1(DLanguageRunDmdConfiguration var1, List<String> var2) { if (var1.isGenerateDocs()) { var2.add(""-D""); if (!StringUtil.isEmptyOrSpaces(var1.getDocsPath())) { var2.add(""-Dd"" + var1.getDocsPath()); } if (!StringUtil.isEmptyOrSpaces(var1.getDocsFilename())) { var2.add(""-Df"" + var1.getDocsFilename()); } } if (!StringUtil.isEmptyOrSpaces(var1.getModuleDepsFilename())) { var2.add(""-deps="" + var1.getModuleDepsFilename()); } if (var1.isGenerateHeader()) { var2.add(""-H""); if (!StringUtil.isEmptyOrSpaces(var1.getHeaderDir())) { var2.add(""-Hd"" + var1.getHeaderDir()); } if (!StringUtil.isEmptyOrSpaces(var1.getHeaderFilename())) { var2.add(""-Hf"" + var1.getHeaderFilename()); } } if (var1.isGenerateMap()) { var2.add(""-map""); } if (var1.isNoObjectFiles()) { var2.add(""-o-""); } if (var1.isNoStripPaths()) { var2.add(""-op""); } if (var1.isGenerateJson()) { var2.add(""-X""); if (!StringUtil.isEmptyOrSpaces(var1.getJsonFilename())) { var2.add(""-Xf"" + var1.getJsonFilename()); } } } "	0	0	0	0	0	1
@Override public void Func1(ProjectSearchResultViewHolder var1, Project var2) { } 	0	0	0	0	0	1
public static TypeFactory<?> Func1( TypeFactory<?> var1, int var2 ) { if (var2 <= 1) return var1; if (var2 == 2) return Func1(var1, var1); if (var2 == 3) return Func1(var1, var1, var1); if (var2 == 4) return Func1(var1, var1, var1, var1); Collection<TypeFactory<?>> var3 = new ArrayList<TypeFactory<?>>(var2); for (int var4 = 0; var4 != var2; ++var4) { var3.add(var1); } return new TupleNTypeFactory(var3); } 	1	0	1	0	1	0
@Override public Serializer<TupleN> Func1( BufferManager var1 ) { Serializer<?>[] var2 = new Serializer<?>[types.length]; for (int var3 = 0; var3 != types.length; ++var3) { var2[var3] = (Serializer<?>)var1.nullSafeSerializerFor(types[var3]); } return new TupleNSerializer(var2); } 	1	1	1	0	1	0
private void Func1() { JFileChooser var1 = createFileChooser(pref.get(CURRENT_DIR, null)); var1.setMultiSelectionEnabled(false); String var2 = null; if (var1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { pref.put(CURRENT_DIR, var1.getCurrentDirectory().getAbsolutePath()); var2 = var1.getSelectedFile().getAbsolutePath(); } if (var2 != null) { Object var3 = CheckLayoutSerializationFactory.loadLayout(var2); if (var3 != null) { checkLayout = (CheckLayout) var3; layout.setCheckLayout(checkLayout); layout.setTestPrint(true); loadModel(); previewPanel.setPrintable(layout); clear(); } } } 	1	0	1	0	1	0
public void Func1(int var1) { this.setX(Math.abs(var1 - this.getBoundsInLocal().getMinX() - layer)); this.layer = var1; } 	1	0	0	1	1	0
"@Override public boolean Func1(String var1, final JSONArray var2, final CallbackContext var3) throws JSONException { if (var1.equalsIgnoreCase(""isAuthenticated"")) { isAuthenticated(var3); } else if (var1.equalsIgnoreCase(""isCurrentUser"")) { isCurrentUser(var3); } else if (var1.equalsIgnoreCase(""currentUser"")) { getCurrentUser(var2, var3); } else if (var1.equalsIgnoreCase(""isSessionLocked"")) { isSessionLocked(var3); } else if (var1.equalsIgnoreCase(""lockSession"")) { lockSession(var3); } else if (var1.equalsIgnoreCase(""unlockSession"")) { unlockSession(var3); } else if (var1.equalsIgnoreCase(""unlockSessionWithMessage"")) { unlockSessionWithMessage(var3, var2); } else if (var1.equalsIgnoreCase(""removeSessionLock"")) { removeSessionLock(var3); } else if (var1.equalsIgnoreCase(""loginWithUsernameAndPassword"")) { loginWithUsernameAndPassword(var2, var3); } else if (var1.equalsIgnoreCase(""logoutUser"")) { logoutUser(var3); } else if (var1.equalsIgnoreCase(""requestUserInfo"")) { requestUserInfo(var3); } else { var3.error(""Invalid var1""); return false; } return true; } "	1	1	0	0	1	0
private void Func1() { if (vm.isRunning() && !vm.getHasAgent()) { setMessage(ConstantsManager.getInstance().getConstants().liveSnapshotWithNoGuestAgentMsg()); } if (isValidateByVmSnapshots()) { initVmSnapshots(); } else { initVmDisks(); } } 	1	0	1	1	0	0
"@Override public boolean Func1(MenuItem var1) { ImageView var2 = (ImageView) findViewById(R.id.node_icon); switch (var1.getItemId()) { case android.R.id.home: Fragment var3 = getSupportFragmentManager().findFragmentById(R.id.detailPane); Log.w(Constants.TAG, ""instanceof: "" + var3.getClass()); if (var3 instanceof TagDetailFragment) supportFinishAfterTransition(); else { getSupportFragmentManager().popBackStack(); setActionBarInfo(collected.getNiceName()); } return true; case R.id.Opzioni: Intent var4 = new Intent(this, PreferencesActivity.class); startActivity(var4); final Intent var5 = new Intent(this.getBaseContext(), PreferencesActivity.class); var5.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); startActivity(var5); return true; case R.id.scegliconaTag: AlertDialog.Builder var6 = AlertDialogHelper.chooseIconDialog(this, var2, null, db, collected); var6.show(); return true; case R.id.rinominaTag: AlertDialog.Builder var7 = AlertDialogHelper.renameSoulissObjectDialog(this, actionTitle, null, db, collected); var7.show(); return true; case R.id.scegliImmagineTag: Intent var8 = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI); startActivityForResult(var8, collected.getTagId().intValue()); return true; } return super.Func1(var1); } "	0	0	0	0	0	1
@Nullable default public String Func1 (@Nullable final String var1, @Nonnull final Charset var2) { if (var1 == null) return null; final byte [] var3 = CharsetManager.getAsBytes (var1, var2); return Func1 (var3, 0, var3.length); } 	1	1	1	1	0	0
@Nullable default public String Func1 (@Nullable final String var1, @Nonnull final Charset var2) { if (var1 == null) return null; final byte [] var3 = CharsetManager.getAsBytes (var1, var2); return Func1 (var3, 0, var3.length); } 	1	1	1	1	0	0
"private static Options Func1(Path var1, Path var2, Path var3) { if (!exists(var1)) { throw new RuntimeException(""templateDir folder does not exist""); } if (!isDirectory(var1)) { throw new RuntimeException(""templateDir folder is not a folder""); } Map<String, Object> var4 = new HashMap<>(); var4.put(""imagesoutdir"", var3.toString()); var4.put(""outdir"", var3.toString()); return OptionsBuilder.Func1() .backend(""html"") .safe(UNSAFE) .baseDir(var2.toFile()) .templateDirs(var1.toFile()) .var4(var4) .get(); } "	0	0	0	0	0	1
"@Override protected void Func1(Bundle var1) { mSearchedZipCodeReference = FirebaseDatabase .getInstance() .getReference() .child(Constants.FIREBASE_CHILD_SEARCHED_ZIPCODE); mSearchedZipCodeReference = mSearchedZipCodeReference.addValueEventListener(new ValueEventListener() { @Override public void Func2(DataSnapshot var2) { for (DataSnapshot var3 : var2.getChildren()) { String var4 = var3.getValue().toString(); Log.d(""zip codes updated"", ""var4: "" + var4); } } @Override public void Func3(DatabaseError var5) { } }); super.Func1(var1); //default behavior, don't change setContentView(R.layout.activity_main); // use main activity activity_main ButterKnife.bind(this); Typeface var6 = Typeface.createFromAsset(getAssets(), ""fonts/DroidSerifRegular.ttf""); mAppIntroTextView.setTypeface(var6); mFindRepsButton.setOnClickListener(this); } "	0	0	0	0	0	1
@Override public boolean Func1(KeyEvent var1) { return windowCallback.dispatchKeyShortcutEvent(var1); } 	1	0	1	1	0	0
"private Company[] Func1() { int var1 = 1; Company[] var2 = new Company[var1]; Company var3 = new Company(""Test Company"", ""TEST""); var3.setPhone(""""); var3.setFax(""""); var3.setStreet(""""); var3.setZipcode(00000); var3.setCity(""""); var3.setCountry(""""); var2[--var1] = companyService.create(var3); return var2; } "	1	1	1	1	0	0
@Override public void Func1(int var1, int var2) { } 	0	0	0	0	0	1
"@Override public String Func1() { return String.format( ""%s%n%s%n"", message != null ? message : error != null ? error : ""(no message)"", toCodeString() ); } "	0	0	0	0	0	1
public void Func1() { this.addKeyListener(new KeyListener() { @Override public void Func2(KeyEvent var1) { } @Override public void Func3(KeyEvent var1) { if ((var1.getKeyCode() == KeyEvent.VK_ESCAPE) && confirm()) { stop(); } } @Override public void Func4(KeyEvent var1) { } }); } 	1	0	0	1	1	0
"@Test public void Func1() { table = new HtmlTable(""tableId"", request, response); table.getTableConfiguration().addCssStyle(""border:1px""); table.getTableConfiguration().addCssStyle(""align:center""); assertThat(table.toHtml().toString()).isEqualTo(""<table id=\""tableId\"" style=\""border:1px;align:center\""><thead></thead><tbody></tbody></table>""); } "	0	0	0	1	1	0
"@Test public void Func1() { table = new HtmlTable(""tableId"", request, response); table.getTableConfiguration().addCssStyle(""border:1px""); assertThat(table.toHtml().toString()).isEqualTo(""<table id=\""tableId\"" style=\""border:1px\""><thead></thead><tbody></tbody></table>""); } "	0	0	0	1	1	0
"public void Func1(HttpServletRequest var1, HttpServletResponse var2) throws NotificationException, UserIsExistException, UserNotCreatedException { String var3 = var1.getParameter(""var3""); String var4 = var1.getParameter(""var4""); if(var3.length() == 0) { notifications.add(new Notification(""alert"", ""Login is empty."")); } else if(!Pattern.matches(Constant.REGEX_LOGIN, var3)) { notifications.add(new Notification(""alert"", ""Login contain invalid characters."")); } if(var4.length() == 0) { notifications.add(new Notification(""alert"", ""Password is empty."")); } else if(!Pattern.matches(Constant.REGEX_PASSWORD, var4)) { notifications.add(new Notification(""alert"", ""Password contain invalid characters."")); } if(!notifications.isEmpty()) { throw new NotificationException(); } if(userDAO.isExist(var3)) { notifications.add(new Notification(""alert"", ""User exist already."")); throw new UserIsExistException(); } User var5 = new User(); var5.setLogin(var3); var5.setPassword(var4); var5.setKey(Random.generate(160)); if(userDAO.Func1(var5) != null) { notifications.add(new Notification(""alert"", ""User hasn't been created."")); throw new UserNotCreatedException(); } } "	1	1	1	0	1	0
"@Test public void Func1() throws DatastoreException, IOException { String var1 = """"; FakeDataStore var2 = new FakeDataStore(); KairosDatastore var3 = new KairosDatastore(var2, new QueryQueuingManager(1, ""hostname""), Collections.<DataPointListener>emptyList(), new TestDataPointFactory(), false); DataPointsParser var4 = new DataPointsParser(var3, new StringReader(var1), new Gson(), dataPointFactory); ValidationErrors var5 = var4.parse(); assertThat(var5.size(), equalTo(1)); assertThat(var5.getFirstError(), equalTo(""Invalid var1. No content due to end of input."")); } "	0	0	0	0	0	1
"@Override public String Func1(Template var1) throws Exception { Template.Parameter[] var2 = new Template.Parameter[2 + attachments.length]; var2[0] = new Template.ResourceParameter(inspector); var2[1] = body; int var3 = 2; for (Artifact var4 : attachments) { var2[var3++] = StringParameter.class.cast(var4.getName()); // the artifact name, intended to be the artifact destination var2[var3++] = var4.getContent(); // the artifact hash } StringBuilder var5 = new StringBuilder(); var5.append(getSetID()); var5.append("" inspect""); for (Parameter var6 : var2) { String var7 = var6.getValue(var1); if (var7.length() > 0) { var5.append("" ""); var5.append(var7); } } return var5.toString(); } "	0	0	0	1	1	0
private static void Func1(final org.eclipse.graphiti.mm.algorithms.Polyline var1) { int var2 = Integer.MAX_VALUE; int var3 = Integer.MIN_VALUE; int var4 = Integer.MAX_VALUE; int var5 = Integer.MIN_VALUE; for (final Point var6 : var1.getPoints()) { var2 = Math.min(var2, var6.getX()); var3 = Math.max(var3, var6.getX()); var4 = Math.min(var4, var6.getY()); var5 = Math.max(var5, var6.getY()); } for (final Point var6 : var1.getPoints()) { var6.setX(var6.getX() - var2); var6.setY(var6.getY() - var4); } var1.setX(var1.getX() + var2); var1.setY(var1.getY() + var4); var1.setWidth(var3 - var2); var1.setHeight(var5 - var4); } 	0	0	1	1	0	0
void Func1(Status var1) { switch (var1) { case PASS: parentPass++; return; case FAIL: parentFail++; break; case FATAL: parentFatal++; break; case ERROR: parentError++; break; case WARNING: parentWarning++; break; case SKIP: parentSkip++; break; default: break; } parentExceptions++; } 	0	0	0	0	0	1
void Func1(ItemLevel var1, Status var2) { switch (var1) { case PARENT: incrementParent(var2); break; case CHILD: incrementChild(var2); break; case GRANDCHILD: incrementGrandChild(var2); break; default: break; } } 	0	0	0	0	0	1
public void Func1(final Player var1) { refreshScoreboard(var1); new BukkitRunnable() { @Override public void Func2() { var1.setScoreboard(Bukkit.getServer().getScoreboardManager().getNewScoreboard()); } }.runTaskLater(Thirst.getInstance(), 100L); } 	0	0	0	0	0	1
"@Override public String Func1(Player var1, String var2) { switch (var2) { case ""thirstmessage"": return ThirstManager.getThirst().getThirstString(var1); case ""thirstbar"": return ThirstManager.getThirst().getThirstBar(var1); case ""thirstpercent"": return ThirstManager.getThirst().getThirstPercent(var1, true); case ""thirstremovalspeed"": return String.format(String.valueOf(ThirstManager.getThirst().getThirstData(var1).getSpeed() / 1000), ""%.3f""); case ""thirstremovalamount"": return String.valueOf(Thirst.getInstance().getYAMLConfig().removeThirst); } return null; } "	1	0	1	1	0	0
public ItemStack Func1(Enum<?> var1) { return inventory.getStackInSlot(var1); } 	0	0	0	0	0	1
"static public ServiceType Func1() { ServiceType var1 = new ServiceType(AzureTranslator.class.getCanonicalName()); var1.addDescription(""interface to Azure translation services""); var1.addCategory(""translation"", ""cloud"", ""ai""); var1.addDependency(""com.azure.translator"", ""0.6.2""); return var1; } "	0	0	1	1	1	0
"@Test public void Func1() { Optional<Method> var1 = underTest.listStaticMethodsForClass(org.mockito.Mockito.class).stream() .filter((Method var2) -> ""verify"".equals(var2.getName()) && var2.getParameters().length == 2).findFirst(); assertTrue(var1.isPresent()); assertThat(underTest.makeDelegateCall(var1.get(), ""MyMockito"", imports, defaultNameSource)) .isEqualToIgnoringWhitespace(""return Mockito.verify(arg0, arg1);""); } "	0	0	0	0	0	1
"@Test public void Func1() { Optional<Method> var1 = underTest.listStaticMethodsForClass(org.mockito.Mockito.class).stream() .filter((Method var2) -> ""verify"".equals(var2.getName()) && var2.getParameters().length == 2).findFirst(); assertTrue(var1.isPresent()); assertThat(underTest.makeDelegateCall(var1.get(), ""Mockito"", imports, defaultNameSource)) .isEqualToIgnoringWhitespace(""return org.mockito.Mockito.verify(arg0, arg1);""); } "	0	0	0	0	0	1
@Test public void Func1() { assertThat(underTest.getTargetInterfaceNameForDelegate(org.mockito.Matchers.class)) .isEqualTo(PARENT_MIXIN_NAME); } 	0	0	0	0	0	1
"@Test public void Func1() { assertThat(ClassNameUtils.extractSimpleName( ""org.assertj.core.api.AbstractCharSequenceAssert<?, ? extends java.lang.CharSequence>"")) .isEqualTo(""AbstractCharSequenceAssert<?, ? extends CharSequence>""); } "	0	0	0	0	0	1
"public Resource Func1() { Resource var1 = Records.newRecord(Resource.class); var1.setMemory(memoryMb); var1.setVirtualCores(vCores); DoYUtil.callSetDiskIfExists( var1, ""setDisks"", disks ); return var1; } "	1	1	1	1	0	0
public static void Func1() { for (int var1 = 0; var1 < textFilesInFolder.size(); var1++ ) { String var2 = fileContent.get(var1); String var3 = tokenize(var2); fileIndexesStoring.add(var1, var3); } saveIndexes(); } 	1	0	1	1	0	0
public static void Func1(String var1, int var2) { if (showDebug || debugLevel >= var2) { queue.offer(new LogEvent(LogType.DEBUG, var1)); } } 	1	0	1	1	0	0
protected void Func1(ProtocolBase var1) { List<ProtocolSubmissionBase> var2 = (List<ProtocolSubmissionBase>) deepCopy(var1.getProtocolSubmissions()); setNewSubmissionReferences(var2); } 	1	0	1	0	1	0
public List<ProtocolAttachmentProtocolBase> Func1() { List<ProtocolAttachmentProtocolBase> var1 = new ArrayList<>(); for (ProtocolAttachmentProtocolBase var2 : getAttachmentProtocols()) { if (var2.isDraft()) { var1.add(var2); } else if (var2.isFinal() || var2.isDeleted()) { boolean var3 = true; for (ProtocolAttachmentProtocolBase var4 : getAttachmentProtocols()) { if (var2.getDocumentId().equals(var4.getDocumentId()) && var2.getAttachmentVersion() < var4.getAttachmentVersion()) { var3 = false; break; } } if (var3) { var1.add(var2); } else { var2.setActive(var3); } } else { var2.setActive(false); } } return var1; } 	1	0	1	0	1	0
public String Func1() { return getString(WHITE_LABLELING_OPTIONS_SECONDARY_BUTTON_COLOR_HOVER); } 	0	0	0	0	0	1
public String Func1() { return getString(WHITE_LABLELING_OPTIONS_LINK_COLOR); } 	0	0	0	0	0	1
"@Override public D Func1(String var1) throws Exception { Preconditions.checkArgument((var1 != null) && !(var1.isEmpty()), ""The ElasticSearch ID must not be null or an Empty String""); GetResponse var2 = elastichSearchClient.prepareGet(getIndexName(), getIndexType(), var1).get(); return (var2.isExists()) ? this.mapper.read(var2.getSourceAsString()) : null; } "	0	0	0	0	0	1
"@Test public void Func1() throws IOException, ParserException, ResponseTypeNotFoundException, TypeRenamingConflictException { final String var1 = ""DeleteObjectsRequest""; final FileUtils var2 = mock(FileUtils.class); final TestGeneratedCode var3 = new TestGeneratedCode( var2, var1, ""./ds3-sdk/src/main/java/com/spectralogic/ds3client/commands/""); var3.generateCode(var2, ""/input/Func1.xml""); final String var4 = var3.getRequestGeneratedCode(); LOG.info(""Generated code:\n"" + var4); assertTrue(extendsClass(var1, ""AbstractRequest"", var4)); assertTrue(isOptParamOfType(""RollBack"", ""boolean"", var1, var4, false)); assertTrue(isOptParamOfType(""Quiet"", ""boolean"", var1, var4, false)); assertTrue(isReqParamOfType(""Objects"", ""List<String>"", var1, var4, false)); assertFalse(isReqParamOfType(""Delete"", ""boolean"", var1, var4, false)); assertTrue(hasImport(""com.spectralogic.ds3client.HttpVerb"", var4)); assertTrue(hasImport(""com.spectralogic.ds3client.models.Contents"", var4)); assertTrue(hasImport(""com.spectralogic.ds3client.models.delete.Delete"", var4)); assertTrue(hasImport(""com.spectralogic.ds3client.models.delete.DeleteObject"", var4)); assertTrue(hasImport(""com.spectralogic.ds3client.serializer.XmlOutput"", var4)); assertTrue(hasImport(""java.io.ByteArrayInputStream"", var4)); assertTrue(hasImport(""java.io.InputStream"", var4)); assertTrue(hasImport(""java.util.ArrayList"", var4)); assertTrue(hasImport(""java.util.List"", var4)); assertFalse(hasImport(""com.spectralogic.ds3client.commands.AbstractRequest"", var4)); assertTrue(isOfPackage(""com.spectralogic.ds3client.commands"", var4)); assertTrue(doesNotHaveOperation(var4)); assertTrue(hasCopyright(var4)); assertTrue(hasPath(""\""/\"" + this.bucketName"", var4)); final ImmutableList<Arguments> var5 = ImmutableList.of( new Arguments(""String"", ""BucketName""), new Arguments(""List<String>"", ""Objects"")); assertTrue(hasConstructor(var1, var5, var4)); final String var6 = var3.getResponseGeneratedCode(); LOG.info(""Generated code:\n"" + var6); final String var7 = var1.replace(""Request"", ""Response""); assertTrue(extendsClass(var7, ""AbstractResponse"", var6)); assertTrue(isOfPackage(""com.spectralogic.ds3client.commands"", var6)); assertTrue(hasImport(""com.spectralogic.ds3client.networking.WebResponse"", var6)); assertTrue(hasImport(""java.io.IOException"", var6)); assertTrue(hasImport(""java.io.InputStream"", var6)); assertFalse(hasImport(""com.spectralogic.ds3client.commands.AbstractResponse"", var6)); assertTrue(hasImport(""com.spectralogic.ds3client.serializer.XmlOutput"", var6)); assertTrue(hasImport(""com.spectralogic.s3.server.domain.DeleteResultApiBean"", var6)); final String var8 = var3.getDs3ClientGeneratedCode(); LOG.info(""Generated code:\n"" + var8); testDs3Client(var1, var8); final String var9 = var3.getDs3ClientImplGeneratedCode(); LOG.info(""Generated code:\n"" + var9); testDs3ClientImpl(var1, var9); } "	0	0	0	0	0	1
"@Test public void Func1() throws IOException, ParserException, ResponseTypeNotFoundException, TypeRenamingConflictException { final String var1 = ""GetJobCompletedNotificationRegistrationsSpectraS3Request""; final FileUtils var2 = mock(FileUtils.class); final TestGeneratedComponentResponseCode var3 = new TestGeneratedComponentResponseCode( var2, var1, ""./ds3-sdk/src/main/java/com/spectralogic/ds3client/commands/spectrads3/notifications/"", ""./ds3-sdk/src/main/java/com/spectralogic/ds3client/models/JobCompletedNotificationRegistrationList.java""); var3.generateCode(var2, ""/input/Func1.xml""); final String var4 = var3.getRequestGeneratedCode(); LOG.info(""Generated code:\n"" + var4); assertTrue(extendsClass(var1, ""AbstractGetNotificationRequest"", var4)); assertTrue(hasPath(""\""/_rest_/job_completed_notification_registration/\"" + this.getNotificationId().toString()"", var4)); assertTrue(isOfPackage(""com.spectralogic.ds3client.commands.spectrads3.notifications"", var4)); assertTrue(hasImport(""java.util.UUID"", var4)); assertTrue(hasImport(""com.spectralogic.ds3client.commands.notifications.AbstractGetNotificationRequest"", var4)); assertTrue(isOptParamOfType(""LastPage"", ""boolean"", var1, var4, false)); assertTrue(isOptParamOfType(""PageLength"", ""int"", var1, var4, false)); assertTrue(isOptParamOfType(""PageOffset"", ""int"", var1, var4, false)); assertTrue(isOptParamOfType(""PageStartMarker"", ""UUID"", var1, var4, false)); assertTrue(isOptParamOfType(""UserId"", ""UUID"", var1, var4, false)); assertTrue(hasCopyright(var4)); assertFalse(doesConstructorContainParam(""Test"", ""boolean"", var1, var4)); assertFalse(isReqVariable(""Test"", ""boolean"", var4)); assertFalse(hasGetter(""Test"", ""boolean"", var4)); final String var5 = var3.getResponseGeneratedCode(); LOG.info(""Generated code:\n"" + var5); final String var6 = var1.replace(""Request"", ""Response""); assertTrue(extendsClass(var6, ""AbstractResponse"", var5)); assertTrue(isOfPackage(""com.spectralogic.ds3client.commands.spectrads3.notifications"", var5)); assertTrue(hasImport(""com.spectralogic.ds3client.networking.WebResponse"", var5)); assertTrue(hasImport(""java.io.IOException"", var5)); assertTrue(hasImport(""java.io.InputStream"", var5)); assertTrue(hasImport(""com.spectralogic.ds3client.commands.AbstractResponse"", var5)); assertTrue(hasImport(""com.spectralogic.ds3client.serializer.XmlOutput"", var5)); assertTrue(hasImport(""com.spectralogic.s3.common.dao.domain.notification.JobCompletedNotificationRegistrationList"", var5)); final String var7 = var3.getDs3ClientGeneratedCode(); LOG.info(""Generated code:\n"" + var7); testDs3Client(var1, var7); final String var8 = var3.getDs3ClientImplGeneratedCode(); LOG.info(""Generated code:\n"" + var8); testDs3ClientImpl(var1, var8); } "	0	0	0	0	0	1
"private void Func1(Request var1, Response var2) throws SSOException { if (contextConfiguration == null) { throw new SSOException(""Server level or context level configurations may not be initialized""); } try { if (var1.getSession(false) != null) { String var3 = (String) var1.getSession(false).getAttribute(Constants.REQUEST_URL); String var4 = (String) var1.getSession(false) .getAttribute(Constants.REQUEST_QUERY_STRING); Map var5 = (Map) var1.getSession(false).getAttribute(Constants.REQUEST_PARAMETERS); StringBuilder var6 = new StringBuilder(var3); Optional.ofNullable(var4) .ifPresent(queryString -> var6.append(""?"").append(queryString)); Optional.ofNullable(var5) .ifPresent(queryParameters -> var1.getSession(false). setAttribute(Constants.REQUEST_PARAM_MAP, queryParameters)); var2.sendRedirect(var6.toString()); } else { var2.sendRedirect(contextConfiguration.getConsumerURL()); } } catch (IOException e) { throw new SSOException(""Error during redirecting after processing SAML 2.0 Response"", e); } } "	0	0	0	0	0	1
@Override public void Func1(MMXClient var1, com.magnet.mmx.client.common.MMXMessage var2, String var3) { MMXPayload var4 = var2.getPayload(); String var5 = var4.getType(); if (MMXChannel.MMXInvite.TYPE.equals(var5)) { MMXChannel.MMXInvite var6 = MMXChannel.MMXInvite.fromMMXMessage(MMXMessage.fromMMXMessage(null, var2)); notifyInviteReceived(var6); } else if (MMXChannel.MMXInviteResponse.TYPE.equals(var5)) { MMXChannel.MMXInviteResponse var7 = MMXChannel.MMXInviteResponse.fromMMXMessage(MMXMessage.fromMMXMessage(null, var2)); notifyInviteResponseReceived(var7); } else { notifyMessageReceived(MMXMessage.fromMMXMessage(null, var2)); } } 	1	0	0	1	1	0
"@Override public void Func1(Throwable var1) { if (var1 != null) { Connection var2 = Connections.getInstance(context).getConnection(clientHandle); var2.addAction(""Connection Lost""); var2.changeConnectionStatus(Connection.ConnectionStatus.DISCONNECTED); Object[] var3 = new Object[2]; var3[0] = var2.getId(); var3[1] = var2.getHostName(); String var4 = context.getString(R.string.connection_lost, var3); Intent var5 = new Intent(); var5.setClassName(context, notificationActivity); var5.putExtra(""handle"", clientHandle); Notify.notifcation(context, var4, var5, R.string.notifyTitle_connectionLost); try { STTarter.getInstance().initiateConnnection(); } catch (STTarter.ContextNotInitializedException e) { e.printStackTrace(); } } } "	0	0	0	0	0	1
"@Override public String Func1( @Valid @NotNull(message = ""No job request provided. Unable to submit job for execution."") final JobRequest var1, @Valid @NotNull(message = ""No job metadata provided. Unable to submit job for execution."") final JobMetadata var2 ) throws GenieException { final long var3 = System.nanoTime(); final String var4 = var1 .getId() .orElseThrow(() -> new GenieServerException(""Id of the var1 cannot be null"")); JobStatus var5 = JobStatus.FAILED; try { log.info(""Called to schedule job launch for job {}"", var4); final Job.Builder var6 = new Job.Builder( var1.getName(), var1.getUser(), var1.getVersion(), var1.getCommandArgs() ) .withId(var4) .withTags(var1.getTags()) .withStatus(JobStatus.INIT) .withStatusMsg(""Job Accepted and in initialization phase.""); var1.getDescription().ifPresent(var6::withDescription); if (!var1.isDisableLogArchival()) { var6.withArchiveLocation( this.jobsProperties.getLocations().getArchives() + JobConstants.FILE_PATH_DELIMITER + var4 + "".tar.gz"" ); } final JobExecution var7 = new JobExecution.Builder( this.hostName ) .withId(var4) .build(); this.jobPersistenceService.createJob(var1, var2, var6.build(), var7); jobStateService.init(var4); final Cluster var8 = this.getCluster(var1); final Command var9 = this.getCommand(var1, var8); final List<Application> var10 = this.getApplications(var1, var9); final int var11 = var1.getMemory() .orElse(var9.getMemory().orElse(this.jobsProperties.getMemory().getDefaultJobMemory())); this.setRuntimeEnvironment(var4, var8, var9, var10, var11); final int var12 = this.jobsProperties.getMemory().getMaxJobMemory(); if (var11 > var12) { var5 = JobStatus.INVALID; throw new GeniePreconditionException( ""Requested "" + var11 + "" MB to run job which is more than the "" + var12 + "" MB allowed"" ); } log.info(""Checking if can run job {} from user {}"", var1.getId(), var1.getUser()); final JobsUsersActiveLimitProperties var13 = this.jobsProperties.getUsers().getActiveLimit(); if (var13.isEnabled()) { final long var14 = var13.getCount(); final long var15 = this.jobSearchService.getActiveJobCountForUser(var1.getUser()); if (var15 >= var14) { throw GenieUserLimitExceededException.createForActiveJobsLimit( var1.getUser(), var15, var14); } } synchronized (this) { log.info(""Checking if can run job {} on this node"", var1.getId()); final int var16 = this.jobsProperties.getMemory().getMaxSystemMemory(); final int var17 = this.jobStateService.getUsedMemory(); if (var17 + var11 <= var16) { log.info( ""Job {} can run on this node as only {}/{} MB are used and requested {} MB"", var4, var17, var16, var11 ); log.info(""Publishing job scheduled event for job {}"", var4); jobStateService.schedule(var4, var1, var8, var9, var10, var11); return var4; } else { throw new GenieServerUnavailableException( ""Job "" + var4 + "" can't run on this node "" + var17 + ""/"" + var16 + "" MB are used and requested "" + var11 + "" MB"" ); } } } catch (GenieConflictException e) { throw e; } catch (GenieException e) { if (jobStateService.jobExists(var4)) { jobStateService.done(var4); jobPersistenceService.updateJobStatus(var4, var5, e.getMessage()); } throw e; } catch (Exception e) { if (jobStateService.jobExists(var4)) { jobStateService.done(var4); jobPersistenceService.updateJobStatus(var4, var5, e.getMessage()); } throw new GenieServerException(e); } finally { this.coordinationTimer.record(System.nanoTime() - var3, TimeUnit.MILLISECONDS); } } "	0	0	0	0	0	1
private static boolean Func1(Shape var1, Object var2) { if (var1 == var2) return true; if (!(var2 instanceof Shape)) return false; Shape var3 = (Shape) var2; if (var1 == null || var3 == null) return false; if (var3.getClass() != var3.getClass()) return false; if (var1 instanceof RoundRectangle2D) { return var1.getBounds2D().equals(var3.getBounds2D()) && (((RoundRectangle2D) var1).getArcWidth() == ((RoundRectangle2D) var3).getArcWidth()) && (((RoundRectangle2D) var1).getArcHeight() == ((RoundRectangle2D) var3).getArcHeight()); } return var1.equals(var3); } 	0	1	1	1	1	0
public Builder Func1(Map<String, Boolean> var1) { for (String var2 : flagKeys) { if (!Func1.containsKey(var2)) { var1.put(var2, false); } } Func1 = var1; return this; } 	1	1	1	0	1	0
"@Nullable @SuppressWarnings(""unchecked"") public <T> T Func1(Class<T> var1, Map<String, Object> var2) { T var3 = null; Transaction var4 = null; try (Session session = getSessionFactory().openSession()) { var4 = session.beginTransaction(); Criteria var5 = session.createCriteria(var1); if (var2 != null && !var2.isEmpty()) { for (Entry<String, Object> var6 : var2.entrySet()) { var5.add(Restrictions.eq(var6.getKey(), var6.getValue())); } } var3 = (T) var5.uniqueResult(); var4.commit(); } catch (Exception e) { if (var4 != null) { var4.rollback(); } throw e; } return var3; } "	1	0	1	0	1	0
"private List<Throwable> Func1(AbstractInvocationContext var1, final FilterSpec var2, final EJBLocator<?> var3) { Logs.INVOCATION.tracef(""Performing any discovery(var3 = %s, weak affinity = %s, filter spec = %s)"", var1.getLocator(), var1.getWeakAffinity(), var2); final List<Throwable> var4; final Set<URI> var5 = var1.getAttachment(BL_KEY); final Map<URI, String> var6 = new HashMap<>(); final Map<String, URI> var7 = new HashMap<>(); int var8 = 0; try (final ServicesQueue queue = discover(var2)) { ServiceURL var9; while ((var9 = queue.takeService()) != null) { final URI var10 = var9.getLocationURI(); if (var5 == null || ! var5.contains(var10)) { final AttributeValue var11 = var9.getFirstAttributeValue(FILTER_ATTR_NODE); if (var11 != null) { if (var6.remove(var10, null)) { var8--; } final String var12 = var11.toString(); var6.put(var10, var12); var7.put(var12, var10); } else { if (var6.putIfAbsent(var10, null) == null) { var8++; } } var1.setDestination(var10); } } var4 = queue.getProblems(); } catch (InterruptedException e) { Thread.currentThread().interrupt(); throw Logs.MAIN.operationInterrupted(); } if (var6.isEmpty()) { Logs.INVOCATION.tracef(""Performed any discovery, no match""); return var4; } URI var10; String var12; if (var6.size() == 1) { final Map.Entry<URI, String> var13 = var6.entrySet().iterator().next(); var10 = var13.getKey(); var12 = var13.getValue(); Logs.INVOCATION.tracef(""Performed first-match discovery(target affinity(node) = %s, destination = %s)"", var12, var10); } else if (var8 == 0) { DeploymentNodeSelector var14 = DeploymentNodeSelector.RANDOM; var12 = var14.selectNode(var6.values().toArray(NO_STRINGS), var3.getAppName(), var3.getModuleName(), var3.getDistinctName()); if (var12 == null) { throw Logs.INVOCATION.selectorReturnedNull(var14); } var10 = var7.get(var12); if (var10 == null) { throw Logs.INVOCATION.selectorReturnedUnknownNode(var14, var12); } Logs.INVOCATION.tracef(""Performed first-match discovery, var6 > 1, deployment var14 used(target affinity(node) = %s, destination = %s)"", var12, var10); } else { DiscoveredURISelector var14 = DiscoveredURISelector.RANDOM; var10 = var14.selectNode(new ArrayList<>(var6.keySet()), var3); if (var10 == null) { throw Logs.INVOCATION.selectorReturnedNull(var14); } var12 = var6.get(var10); if (var12 == null) { throw Logs.INVOCATION.selectorReturnedUnknownNode(var14, var10.toString()); } Logs.INVOCATION.tracef(""Performed first-match discovery, var6 > 1, URI var14 used(target affinity(node) = %s, destination = %s)"", var12, var10); } var1.setDestination(var10); var1.setTargetAffinity(new NodeAffinity(var12)); return var4; } "	0	1	1	0	0	0
"@Override public void Func1() { for(Player var1 : Bukkit.getServer().getOnlinePlayers()) { if(var1.getInventory().firstEmpty() == -1 && (var1.hasPermission(""var2.use"") || var1.hasPermission(""var2"")) && var1.hasPermission(""var2.fullpickup"")) { Backpack var2 = plugin.getBackpackCachedOnly(var1); if(var2 == null) { continue; } List<Entity> var3 = var1.getNearbyEntities(radius, radius, radius); for(Entity var4 : var3) { if(var4 instanceof Item) { Item var5 = (Item) var4; if(!var5.isDead() && var5.getPickupDelay() <= 0) { HashMap<Integer, ItemStack> var6 = var2.getInventory().addItem(var5.getItemStack()); var2.setChanged(); if(!var6.isEmpty()) { var5.setItemStack(var6.get(0)); } else { var5.remove(); } } } } } } } "	1	0	0	1	1	0
"@SuppressWarnings(""NullableProblems"") @Override public void Func1(Context var1, Intent var2) { String var3 = var2.getAction(); if (var3.equals(ITEM_CLICK)) { String var4 = var2.getExtras().getString(WidgetProvider.ITEM_ID); if (""0"".equals(var4)) { int var5 = var2.getExtras().getInt(AppWidgetManager.EXTRA_APPWIDGET_ID); setLoadMore(var1); showLoaderAndUpdate(var1, var2, new int[]{var5}, true); } else { SharedPreferences var6 = PreferenceManager.getDefaultSharedPreferences(var1); String var7 = var6.getString(var1.getString(R.string.on_click_pref), ""1""); int var8 = Integer.valueOf(var7); switch (var8) { case 1: Intent var9 = new Intent(var1, ViewRedditActivity.class); var9.putExtras(var2.getExtras()); var9.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); var9.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK); var1.startActivity(var9); break; case 2: String var10 = var2.getStringExtra(ITEM_URL); Intent var11 = new Intent(Intent.ACTION_VIEW, Uri.parse(var10)); var11.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); var1.startActivity(var11); break; case 3: String var12 = var2.getStringExtra(ITEM_PERMALINK); Intent var13 = new Intent(Intent.ACTION_VIEW, Uri.parse(""http://www.reddit.com"" + var12)); var13.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); var1.startActivity(var13); break; } } } if (var3.equals(APPWIDGET_UPDATE_FEED)) { int var14 = var2.getExtras().getInt(AppWidgetManager.EXTRA_APPWIDGET_ID); setNoCache(var1); showLoaderAndUpdate(var1, var2, new int[]{var14}, false); } if (var3.equals(APPWIDGET_AUTO_UPDATE)) { AppWidgetManager var15 = AppWidgetManager.getInstance(var1); int[] var16 = var15.getAppWidgetIds(new ComponentName(var1, WidgetProvider.class)); setNoCache(var1); onUpdate(var1, var15, var16); var15.notifyAppWidgetViewDataChanged(var16, R.id.listview); // this might not be needed } if (var3.equals(""android.var2.var3.PACKAGE_RESTARTED"") || var3.equals(""android.var2.var3.PACKAGE_REPLACED"") || var3.equals(""android.var2.var3.PACKAGE_CHANGED"")) { AppWidgetManager var17 = AppWidgetManager.getInstance(var1); int[] var16 = var17.getAppWidgetIds(new ComponentName(var1, WidgetProvider.class)); onUpdate(var1, var17, var16); } super.Func1(var1, var2); } "	1	1	1	1	0	0
"public void Func1(int var1) throws HibernateException { if (var1 <= 0) { throw new HibernateException(""Invalid var1"" + var1); } Transaction var2 = null; Session var3 = null; try { var3 = sessionFactory.openSession(); var2 = var3.beginTransaction(); OrderDAO var4 = new OrderDAOImpl(var3); Order var5 = var4.getById(var1); if(var5 == null){ throw new HibernateException(""var5 not avilable "" + var1); } if(var5.getStatus() < OrderStatusEnum.CANCELLED.getValue()){ var5.setStatus(OrderStatusEnum.CANCELLED.getValue()); var4.update(var5); var2.commit(); log.info(""cancel of var5 was succesfull"" + var1); } else if(var5.getStatus() == OrderStatusEnum.CANCELLED.getValue()){ log.info(""The var5 was already cancelled !""); } else{ throw new Exception(""The status cannot be cancelled noat this stage. It can be cancelled only before READY State""); } } catch (Exception ex) { try { if(var2 == null){ throw new HibernateException(""Transaction could not be completed "" + ex.getMessage(), ex); } var2.rollback(); throw new HibernateException( ""Transaction could not be completed will be rollbacked: "" + ex.getMessage(), ex); } catch (RuntimeException rbe) { throw new HibernateException( ""Transaction could not be completed and rollback failed: "" + ex.getMessage(), ex); } } finally { if (var3 != null) { var3.close(); } } } "	0	0	0	1	1	0
public final OkHttpClient Func1(ProxySelector var1) { this.var1 = var1; return this; } 	0	0	0	0	0	1
public final OkHttpClient Func1(Proxy var1) { this.var1 = var1; return this; } 	0	0	0	0	0	1
public final ConnectionPool Func1() { return connectionPool; } 	0	0	0	0	0	1
public final Proxy Func1() { return proxy; } 	0	0	0	0	0	1
public final OkHttpClient Func1(CertificatePinner var1) { this.var1 = var1; return this; } 	0	0	0	0	0	1
public final List<ConnectionSpec> Func1() { return connectionSpecs; } 	0	0	0	0	0	1
public final boolean Func1() { return retryOnConnectionFailure; } 	0	0	0	0	0	1
public final OkHttpClient Func1(boolean var1) { this.followSslRedirects = var1; return this; } 	0	0	0	0	0	1
public final int Func1() { return writeTimeout; } 	0	0	0	0	0	1
private void Func1(boolean var1) { int var2 = -1; if (mSelectedItem != null) { var2 = ItemGroupAnalyzer.findCommonParent( Collections.singletonList(mSelectedItem.getParentIDs()), 0); } if (var2 == -1) { navigateTo(mCommonParentID, true, var1); } else { navigateTo(var2, true, var1); } } 	0	0	0	0	0	1
"@Test public void Func1() { final String var1 = ""(SBAC_PT)SBAC-Mathematics-8-Spring-2013-2015""; final String var2 = ""ELA""; Assessment var3 = repository.findAssessmentByKey(""SBAC_PT"", var1).get(); assertThat(var3.getKey()).isEqualTo(var1); assertThat(var3.getSelectionAlgorithm()).isEqualTo(Algorithm.VIRTUAL); assertThat(var3.getAssessmentId()).isEqualTo(""SBAC-Mathematics-8""); assertThat(var3.getStartAbility()).isEqualTo(0F); assertThat(var3.getSubject()).isEqualTo(var2); assertThat(var3.isSegmented()).isTrue(); assertThat(var3.getSegments()).hasSize(2); assertThat(var3.getAccommodationFamily()).isEqualTo(""otherFamily""); assertThat(var3.getAbilitySlope()).isEqualTo(5.5f); assertThat(var3.getFieldTestStartDate()).isNotNull(); assertThat(var3.getFieldTestEndDate()).isNull(); assertThat(var3.getMaxOpportunities()).isEqualTo(95); assertThat(var3.getAbilityIntercept()).isEqualTo(6.3f); assertThat(var3.isInitialAbilityBySubject()).isFalse(); assertThat(var3.getPrefetch()).isEqualTo(2); assertThat(var3.getDeleteUnansweredItems()).isFalse(); assertThat(var3.isValidateCompleteness()).isTrue(); Segment var4 = null; Segment var5 = null; for (Segment var6 : var3.getSegments()) { if (var6.getKey().equals(""(SBAC_PT)SBAC-SEG1-MATH-8-Spring-2013-2015"")) { var4 = var6; } else { var5 = var6; } } assertThat(var4).isNotNull(); assertThat(var4.getAssessmentKey()).isEqualTo(var1); assertThat(var4.getKey()).isEqualTo(""(SBAC_PT)SBAC-SEG1-MATH-8-Spring-2013-2015""); assertThat(var4.getSegmentId()).isEqualTo(""SBAC-SEG1-MATH-8""); assertThat(var4.getSelectionAlgorithm()).isEqualTo(Algorithm.FIXED_FORM); assertThat(var4.getPosition()).isEqualTo(1); assertThat(var4.getMinItems()).isEqualTo(4); assertThat(var4.getMaxItems()).isEqualTo(4); assertThat(var4.getFieldTestMinItems()).isEqualTo(2); assertThat(var4.getFieldTestMaxItems()).isEqualTo(3); assertThat(var4.getSubject()).isEqualTo(var2); assertThat(var4.getStartAbility()).isEqualTo(0); assertThat(var4.getFieldTestStartDate()).isEqualTo(segFtStartDate); assertThat(var4.getFieldTestEndDate()).isEqualTo(segFtEndDate); assertThat(var5).isNotNull(); assertThat(var5.getAssessmentKey()).isEqualTo(var1); assertThat(var5.getKey()).isEqualTo(""(SBAC_PT)SBAC-SEG2-MATH-8-Spring-2013-2015""); assertThat(var5.getSegmentId()).isEqualTo(""SBAC-SEG2-MATH-8""); assertThat(var5.getSelectionAlgorithm()).isEqualTo(Algorithm.FIXED_FORM); assertThat(var5.getPosition()).isEqualTo(2); assertThat(var5.getMinItems()).isEqualTo(4); assertThat(var5.getMaxItems()).isEqualTo(4); assertThat(var5.getFieldTestMinItems()).isEqualTo(1); assertThat(var5.getFieldTestMaxItems()).isEqualTo(4); assertThat(var5.getSubject()).isEqualTo(var2); assertThat(var5.getStartAbility()).isEqualTo(0); assertThat(var5.getFieldTestStartDate()).isEqualTo(segFtStartDate); assertThat(var5.getFieldTestEndDate()).isEqualTo(segFtEndDate); } "	0	0	0	0	0	1
"@Override public List<Talent> Func1(List<UserImportEntity> var1) { return var1.stream().map(userImportEntity -> { Map<String,Object> var2 = (Map<String,Object>) userImportEntity.getProfiles().get(SocialProvider.GITHUB); if (var2 == null) { return null; } Talent.Builder var3 = new Talent.Builder(); return var3.withEmail(userImportEntity.getEmail()) .withUsername(StringUtils.trimToEmpty((String) var2.get(""username""))) .withFullName(StringUtils.trimToEmpty((String) userImportEntity.getFullName())) .withImageUrl(StringUtils.trimToEmpty((String) var2.get(""imageUrl""))) .withCompany(StringUtils.trimToEmpty((String) var2.get(""company""))) .withDescription(StringUtils.trimToEmpty((String) var2.get(""description""))) .withLocation(StringUtils.trimToEmpty((String) var2.get(""location""))) .withJobTitle("""") .withSkills(((List<String>) var2.get(""skills""))) .build(); }).filter(talent -> talent != null).collect(Collectors.toList()); } "	0	0	1	1	0	0
private LuaValue var3$getChest(int var1) throws InterruptedException { sleep(40); Chest[] var2 = schedule(() -> ComputerHandler.findChests(computer), this::terminated); if (var1 > var2.length || var1 < 0) return LuaValue.NIL; LuaChest var3 = new LuaChest(var2[var1], this::terminated); return CoerceJavaToLua.coerce(var3); } 	0	1	1	1	1	0
"@SuppressWarnings(""unchecked"") public List<Servidores> Func1() { log.fine(""[ "" + userInfo.getLoggedUsername() + "" ] Func1()""); try { Criteria var1 = session().createCriteria(Servidores.class); var1.add(Restrictions.or(Restrictions.eq(""trClass"", ""Errorr""), Restrictions.eq(""status"", ""NOK""))); var1.add(Restrictions.eq(""verify"", ""SIM"")); var1.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY); return var1.list(); } catch (Exception e) { log.severe(""[ "" + userInfo.getLoggedUsername() + "" ] Error: "" + e); return new ArrayList<Servidores>(); } } "	0	1	1	1	1	0
"public int Func1() { log.fine(""[ "" + userInfo.getLoggedUsername() + "" ] countWindowsOK()""); try { Criteria var1 = session().createCriteria(Servidores.class); var1.add(Restrictions.and(Restrictions.eq(""SO"", ""WINDOWS""),(Restrictions.eq(""trClass"", ""Errorr"")))); var1.setProjection(Projections.rowCount()); int var2 = ((Long) var1.uniqueResult()).intValue(); log.fine(""[ "" + userInfo.getLoggedUsername() + "" ] Func1 -> "" + var2 + "" found.""); return var2; } catch (Exception e) { log.severe(""Error: "" + e); return 0; } } "	0	1	1	1	1	0
@Override public float[][] Func1() { try { shiftWindow(); myWavFile.readFrames(windowBuffer, windowOverlap, windowIncrement); float[][] var1 = new float[getNChannels()][]; for(int var2=0; var2<var1.length; var2++) var1[var2] = Arrays.copyOf(windowBuffer[var2],windowBuffer[var2].length); return var1; } catch (IOException | WavFileException e) { e.printStackTrace(); } return null; } 	1	0	0	1	1	0
"public void Func1(int var1, Descriptor2 var2){ if(LOG.isDebugEnabled()) LOG.debug(""Func1 var1 :"" + var1 + "" descCount :"" + descCount); buffer[var1 - 1] = var2; if (descCount == var1){ Descriptor2 var3 = null; if (oldFormat == false) descLength = 3 * ServerConstants.INT_FIELD_SIZE; else descLength = ServerConstants.INT_FIELD_SIZE; varLength = 0; for (int var4 = 0; var4 < descCount; var4++) { var3 = buffer[var4]; descLength += var3.lengthOfData(); if (oldFormat == false){ if (var3.getNullInfo() == 1){        //nullable varLength = ((varLength + 2 - 1) >> 1) << 1; var3.setNullValue((int)varLength); varLength += 2; } else { var3.setNullValue(-1);            //nonullable } var3 = setVarLength(var3, varLength); varLength = var3.getVarLength(); } else { var3 = setVarLength(var3, varLength); varLength = var3.getVarLength(); } if(LOG.isDebugEnabled()){ LOG.debug(""--------var3 :"" + (var4+1)); LOG.debug(""varLength :"" + varLength); LOG.debug(""noNullValue :"" + var3.getNoNullValue()); LOG.debug(""nullValue :"" + var3.getNullValue()); LOG.debug(""maxLen :"" + var3.getMaxLen()); } buffer[var4] = var3; } } } "	1	1	0	1	1	0
private boolean Func1( int[] var1){ boolean var2 = (var1[0] < board.getBoardSize() && var1[0] < board.getBoardSize()); return var2; } 	1	0	1	1	1	0
@Override public void Func1(KeyEvent var1) { Window.this.getGame().getKeyManager().onKeyRelease(var1.getKeyCode()); Window.this.getCurrentScreen().onKeyRelease(var1); Window.this.getEventHandler().onKeyRelease(var1); } 	1	1	0	0	1	0
@Override public State Func1(Proof.State var1, Formula var2) { Formula var3 = expandFormula(var2); if(var3 != null) { var3 = var1.allocate(var3); var1 = var1.subsume(this, var2, var3); } return var1; } 	1	1	0	0	1	0
@Override protected void Func1() { int var1 = 5; int var2 = 4 * 2 + 1; for (int var3 = 0; var3 < var2; var3++) { glDisableVertexAttribArray(var1 + var3); } super.Func1(); } 	1	1	1	1	0	0
"public Race Func1() { if (this.rounds.size() <= this.currentRound) { return this.rounds.get(this.currentRound); } throw new IllegalArgumentException(""Current round does not exist in this.rounds""); } "	1	0	1	1	1	0
"@Override public ServiceResponse Func1(final OutputFormat var1, boolean var2, final String... var3) { if (var3.length == 0) return new ErrorResponse(NO_RESULTS_FOUND, ""No URIs were specified for the query""); if(!paxtoolsModelReady()) return new ErrorResponse(MAINTENANCE,""Waiting for the initialization to complete (try later)...""); try { final String[] var4 = findUrisByIds(var3); Set<BioPAXElement> var5 = urisToBpes(paxtoolsModel, var4); if(var5.isEmpty()) { return new ErrorResponse(NO_RESULTS_FOUND, ""No BioPAX objects found by URI(s): "" + Arrays.toString(var3)); } Model var6 = autoCompleteAndClone(var5, var2); if(!var6.getObjects().isEmpty()) { if(var4.length==1) { String var7 = var4[0]; var6.setUri(var7); BioPAXElement var8 = var6.getByID(var7); if(var8 instanceof Named) { var6.setName(((Named) var8).getDisplayName() + "" "" + ArrayUtils.toString(var3)); } else { var6.setName(ArrayUtils.toString(var3)); } } else { String var9 = ArrayUtils.toString(var3); var6.setUri(""PC_get_"" + var9.hashCode()); var6.setName(var9); } } return convert(var6, var1); } catch (Exception e) { return new ErrorResponse(INTERNAL_ERROR, e); } } "	1	0	1	0	1	0
"public User Func1(String var1, String var2, String var3, String var4, String var5) { if (StringUtils.isBlank(var1) || StringUtils.isBlank(var5) || StringUtils.isBlank(var2)) { throw new BadRequestException(""Id, var5 and first name are required""); } if (var4 != null && identityService.createUserQuery().userEmail(var4).count() > 0) { throw new ConflictingRequestException(""User already registered"", ""ACCOUNT.SIGNUP.ERROR.ALREADY-REGISTERED""); } User var6 = identityService.newUser(var1); var6.setFirstName(var2); var6.setLastName(var3); var6.setEmail(var4); identityService.saveUser(var6); User var7 = identityService.createUserQuery().userEmail(var4).singleResult(); var7.setPassword(var5); identityService.updateUserPassword(var6); return var6; } "	1	1	0	1	1	0
"@Override public void Func1(String var1, String var2, String var3, User var4) { if (this.getCollectionRepository().getCollectionByIdWithType(var2, PATHWAY) == null) { throw new BadRequestException(generateErrorMessage(GL0056, PATHWAY), GL0056); } if (this.getCollectionRepository().getCollectionByIdWithType(var1, CLASSPAGE) == null) { throw new BadRequestException(generateErrorMessage(GL0056, CLASS), GL0056); } getCollectionService().deleteCollectionItem(var3, var4, true); getAsyncExecutor().deleteFromCache(""v2-class-data-"" + var1 + ""*""); } "	0	0	0	0	0	1
"public static List<Pet.PetSpecies> Func1() { EntityManager var1 = HibernateUtil.getEntityManagerFactory().createEntityManager(); List<Pet.PetSpecies> var2 = var1.createQuery(""from PetSpecies"").getResultList(); var1.close(); return var2; } "	0	1	0	1	1	0
BaselineRequestContextBuilder Func1() throws ExecutionException { return new BaselineRequestContextBuilder(filterFactorsConverter).forExperiment(baselineExperimentsCache .getExperiment(E_MTAB_513)); } 	0	0	0	0	0	1
public boolean Func1(CACHEKEY var1){ return leastRecentlyUsedMap.containsKey(var1); } 	0	0	0	0	0	1
public boolean Func1(int var1) { for(int var2 = 0; var2 < this.getScreens().size(); var2++) if (this.getScreens().get(var2).getID() == var1) { this.getCurrentScreen().onStop(); this.currentScreen = var2 + 1; this.getGame().getClock().index(); this.getCurrentScreen().onStart(); this.getGame().getEventHandler().onScreenSet(this.getScreens().get(var2)); return true; } return false; } 	1	1	1	1	0	0
"private void Func1(){ LayoutInflater var1 = LayoutInflater.from(this); View var2 = var1.inflate(R.layout.alertdialog_cost, null); final EditText var3 = (EditText) var2.findViewById(R.var9.pointsEditText); final EditText var4 = (EditText) var2.findViewById(R.var9.valueEditText); final Spinner var5 = (Spinner) var2.findViewById(R.var9.measureSpinner); var3.setHint(""Points earned per""); final Cost var6 = new Cost(); var6.setId(Util.generateUUID()); AlertDialog.Builder var7 = new AlertDialog.Builder(this) .setView(var2) .setTitle(""Add new var6"") .setPositiveButton(""DONE"", new DialogInterface.OnClickListener() { public void Func2(DialogInterface var8, int var9) { if (Util.isNotNullNotEmptyNotWhiteSpaceOnlyByJava(var3.getText().toString()) && Util.isNotNullNotEmptyNotWhiteSpaceOnlyByJava(var4.getText().toString())) { var6.setPointsEarnPer(Integer.parseInt(var3.getText().toString())); var6.setUnitCost(Integer.parseInt(var4.getText().toString())); var6.setUnitType(UnitType.HOUR.toString()); costList.add(var6); costAdapter.notifyDataSetChanged(); } else { Toast.makeText(getApplicationContext(), ""Please input a var4"", Toast.LENGTH_SHORT).show(); } } }) .setNegativeButton(""CANCEL"", new DialogInterface.OnClickListener() { public void Func2(DialogInterface var8, int var9) { var8.cancel(); } }); AlertDialog var10 = var7.create(); var10.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE); var10.show(); } "	0	0	0	0	0	1
"public Location Func1() { return arena.get(""spactate""); } "	0	0	1	1	0	0
@Test public void Func1() throws Exception { assertFalse(demand.getShouldTags().get(0).equals(original.getShouldTags().get(0))); } 	0	0	1	1	1	0
"@ResponseBody @RequestMapping(value = ""/edit/{var1}"", method = RequestMethod.POST) public String Func1(@PathVariable SpaceClassification var1, @RequestBody String var2) { canWrite(); SpaceClassificationBean var3 = new SpaceClassificationBean(var2); try { spaceClassificationService.verifyClassification(var3); } catch (DomainException de) { return de.asJson().toString(); } if (var1 == null) { var1 = Func1(var3); } else { try { spaceClassificationService.updateClassification(var1, var3); } catch (DomainException de) { return de.asJson().toString(); } } JsonObject var4 = new JsonObject(); String var5 = var4.toString(); return var5; } "	0	1	1	0	1	0
@Override public char[] Func1(String var1, Object... var2) { return console.Func1(); } 	1	0	1	1	1	0
private int[] Func1(TIntIntMap var1) { int var2 = this.size(); TIntIntMap var3 = new TIntIntHashMap(var2, 0.5f, Integer.MAX_VALUE, Integer.MAX_VALUE); Edge var4 = streetLayer.edgeStore.getCursor(); for (int var5 = 0; var5 < var2; var5++) { if (edges[var5] == -1) continue; var4.seek(edges[var5]); int var6 = Integer.MAX_VALUE, var7 = Integer.MAX_VALUE; if (var1.containsKey(var4.getFromVertex())) var6 = var1.get(var4.getFromVertex()) + distances0_mm[var5]; if (var1.containsKey(var4.getToVertex())) var6 = var1.get(var4.getToVertex()) + distances1_mm[var5]; int var8 = Math.min(var6, var7); if (var8 != Integer.MAX_VALUE) { if (var8 < var3.get(var5)) { var3.put(var5, var8); } } } if (var3.size() == 0) { return null; } TIntList var9 = new TIntArrayList(var3.size() * 2); var3.forEachEntry((point, distance) -> { var9.add(point); var9.add(distance); return true; // Continue iteration. }); return var9.toArray(); } 	1	1	1	0	1	0
private boolean Func1(long var1) { if (currentTimestampGroup.isFirstPacket()) { return true; } else { long var2 = var1 - currentTimestampGroup.firstTimestamp; return var2 < 0x80000000L; } } 	0	0	0	0	0	1
"public static FormValidation Func1(CustomProperties var1, XTriggerLog var2, boolean var3, PollMailboxTrigger var4) { MailReader var5 = null; List<String> var6 = new ArrayList<String>(); try { Enum[] var7 = {Properties.host, Properties.storeName, Properties.username, Properties.password}; List<String> var8 = new ArrayList<String>(); boolean var9 = true; for (Enum var10 : var7) { if (!var1.has(var10)) { String var11 = String.format(""Email property '%s' is required!"", var10); var2.error(var11); var8.add(var11); var9 = false; } } if (!var9) { return FormValidation.error(""Error : "" + stringify(var8)); } var2.info(""Connecting to the var5...""); String var12 = var1.get(Properties.password); String var13 = decrypt(var12); var5 = new MailReader( var1.get(Properties.host), var1.get(Properties.username), var13, var1.get(storeName), new Logger.XTriggerLoggerWrapper(var2), var1 ).connect(); final String var14 = ""Connected to var5. ""; var2.info(var14 + ""Searching for messages where:""); var6.add(var14); List<SearchTerm> var15 = new ArrayList<SearchTerm>(); var15.add(not(flag(Flags.Flag.SEEN))); var2.info(""- [flag is unread]""); if (var1.has(subjectContains)) { var15.add(subject(var1.get(subjectContains))); var2.info(""- [subject contains '"" + var1.get(subjectContains) + ""']""); } if (var1.has(receivedXMinutesAgo)) { final int var16 = Integer.parseInt(var1.get(receivedXMinutesAgo)) * -1; Date var17 = relativeDate(Calendar.MINUTE, var16); var15.add(receivedSince(var17)); var2.info(""- [received var17 is greater than '"" + formatter.format(var17) + ""']""); } var2.info(""...""); if (!var1.has(folder)) { throw new FolderNotFoundException(); } else { final MailWrapperUtils.FolderWrapper var18 = var5.folder(var1.get(folder)); var6.add(""Searching folder...""); String var19 = var1.get(Properties.attachments); MessagesWrapper var20 = var18.search(var15); List<Message> var21 = var20.getMessages(); StringBuilder var22 = new StringBuilder(); for (Message var23 : var21) { var22.append(""\n\n- "").append(var23.getSubject()).append("" ("").append(formatter.format(var23.getReceivedDate())).append("")""); } final String var24 = ""Found matching email(s) : "" + var21.size() + var22.toString(); var2.info(var24); var6.add(var24); if (!var3) { for (Message var23 : var21) { final String var25 = ""pmt_""; CustomProperties var26 = var20.getMessageProperties(var23, var25, var1); var2.info(""Download attachments? "" + var19); if (AttachmentOptions.AUTO.name().equals(var19)){ File var27 = var20.saveAttachments(var23); if (nonNull(var27)){ var26.put(""pmt_attachmentsDirectory"", var27.getAbsolutePath()); } } var1.remove(Properties.password); var26.putAll(var1, var25); var26.put(""pmt_retryEmailLink"", buildEmailRetryLink(var1)); String var28 = ""Job was triggered by email sent from "" + stringify(var23.getFrom()); var4.startJob(var2, var28, var26.getMap()); var20.markAsRead(var23); } } } if (var3) { var6.add(""\nResult: Success!""); return FormValidation.ok(stringify(var6, ""\n"")); } } catch (FolderNotFoundException e) { try { var6.add(""Please set the 'folder=XXX' parameter to one of the following values: ""); final String var29 = stringify(var5.getFolders()); var6.add(""Folders: "" + var29); var2.info(var29); return FormValidation.error(stringify(var6, ""\n"")); } catch (Throwable t) { return handleError(var2, var6, t); } } catch (Throwable t) { return handleError(var2, var6, t); } finally { if (var5 != null) { var5.close(); } } return FormValidation.ok(""Success""); } "	0	0	0	0	0	1
private void Func1(Bitmap var1, @NonNull Optional<String> var2) { Intent var3 = Pokefly.createNoInfoIntent(); try { ScanResult var4 = ocr.Func1(var1, trainerLevel); if (var4.isFailed()) { Toast.makeText(Pokefly.this, getString(R.string.scan_pokemon_failed), Toast.LENGTH_SHORT).show(); } Pokefly.populateInfoIntent(var3, var4, var2); } finally { LocalBroadcastManager.getInstance(Pokefly.this).sendBroadcast(var3); } } 	0	0	0	0	0	1
"@Override public void Func1(String var1) { this.queueResponseJSON.push(var1); final WebView var2 = (WebView) getView().findViewById(org.opendatakit.tables.R.id.webkit); this.getActivity().runOnUiThread(new Runnable() { @Override public void Func2() { var2.loadUrl(""javascript:datarsp.responseAvailable();""); } }); } "	1	0	1	1	1	0
"private void Func1(List<String> var1) throws IOException { monitor.subTask(""Building Dictionary Maps""); for (String var2 : var1) { clashWordCount = 2147483647; BufferedReader var3 = new BufferedReader(new FileReader(new File( var2))); String var4 = var3.readLine().trim(); if (var4 == null) { ConsoleView.printlInConsoleln(""The dictionary file "" + var2 + "" is empty.""); } if (var4.equals(""%"")) while ((var4 = var3.readLine().trim().toLowerCase()) != null && !var4.equals(""%"")) { int var5 = Integer.parseInt(var4.split(""\\s+"")[0] .trim()); String var6 = var4.split(""\\s+"")[1] .trim(); if(categoryID.containsKey(var5) && !((categoryID.get(var5)).equals(var6))) { addConflictingCategory(var5, var6); } else { categoryID.put(var5, var6); } } if (var4 == null) { ConsoleView.printlInConsoleln(""The dictionary file "" + var2 + "" does not have any categorized var7.""); } else { while ((var4 = var3.readLine()) != null) { String[] var7 = var4.split(""\\s+""); if(var7.length == 0) continue; if (!wordDictionary.containsKey(var7[0])) { if (stemDictionary) { stemmer.setCurrent(var7[0]); String var8 = """"; if (stemmer.stem()) var8 = stemmer.getCurrent(); if (!var8.equals("""")) var7[0] = var8; } wordDictionary.put(var7[0], new HashMap<Integer, Double>()); userFileCount.put(var7[0], new HashMap<Integer, Double>()); userOverallCount.put(var7[0], new HashMap<Integer, Double>()); pennFileCount.put(var7[0], new HashMap<String, Double>()); pennOverallCount.put(var7[0], new HashMap<String, Double>()); } for (int var9 = 1; var9 < var7.length; var9 = increment(var9)) { if (var7[var9].contains("")"") || var7[var9].contains(""("") || var7[var9].contains(""<"")) continue; if(oldCategoryMap.containsKey(Integer.parseInt(var7[var9]))){ var7[var9] = oldCategoryMap.get(Integer.parseInt(var7[var9]))+""""; } if (!wordDictionary.get(var7[0]).containsKey( Integer.parseInt(var7[var9]))) { if (weighted) { wordDictionary.get(var7[0]).put( Integer.parseInt(var7[var9]), Double.parseDouble(var7[var9 + 1])); } else { wordDictionary.get(var7[0]).put( Integer.parseInt(var7[var9]), 1.0); } userFileCount.get(var7[0]).put( Integer.parseInt(var7[var9]), 0.0); userOverallCount.get(var7[0]).put( Integer.parseInt(var7[var9]), 0.0); } } } } var3.close(); } monitor.worked(2); } "	0	0	0	0	0	1
"public static Date Func1(String var1) { SimpleDateFormat var2 = new SimpleDateFormat(""yyyy-MM-dd""); Date var3 = null; try { var3 = var2.parse(var1); } catch (Exception e) { log.error(e.getMessage()); var3 = StrToEndDate(""2006-08-01""); } return var3; } "	0	0	0	1	1	0
"private Variable Func1(String var1) { String var2 = var1.substring(0, var1.indexOf('(')); String var3 = var1.substring(var1.indexOf('(')+1, var1.lastIndexOf(')')); List<String> var4 = Helpers.splitParams(var3); List<Variable> var5 = new ArrayList<Variable>(); if (!var3.contentEquals("""")) { for (int var6 = 0; var6 < var4.size(); var6++) { String var7 = var4.get(var6); if (Variable.isString(var7) || Variable.isNumber(var7)) { var5.add(new Variable(var7)); } else if (Interpreter.isFunction(var7)) { var5.add(Func1(var7)); } else { Variable var8 = heap.get(var4.get(var6)); if (var8 == null) { Error.printErrorVariableNotDefined(var4.get(var6)); } else { var5.add(var8); } } } } if (InternalFunctions.isInternalFunction(var2)) { return new Variable(new InternalFunctions(var5, var2, var3).Func1()); } if (InternalFunctions.isInternalListFunction(var2)) { return new VariableList(new InternalFunctions(var5, var2, var3).Func1()); } String var9 = functionExecuter.Func1(var2, var5); if (var9.isEmpty()) return new Variable(""NULL""); if (var9.contains("":"") && !Variable.isString(var9)) return new VariableList(var9); return new Variable(var9); } "	0	0	0	0	0	1
private SocketClient Func1() { return new SocketClient( LOCAL_DEFAULT, SecurityPlan.insecure(), CONNECTION_TIMEOUT, DEV_NULL_LOGGER ); } 	0	0	0	0	0	1
private long Func1() { long var1 = System.currentTimeMillis() - mStartTime; if (var1 > getSplashTimeOut()) { return getSplashTimeOut(); } return getSplashTimeOut() - var1; } 	1	1	0	0	1	0
"protected <T> T Func1(byte[] var1) throws Exception { ByteArrayInputStream var2 = new ByteArrayInputStream(var1); DataInputStream var3 = new DataInputStream(var2); boolean var4 = var3.readBoolean(); if (var4) { String var5 = var3.readUTF(); Class<?> var6 = Thread.currentThread().getContextClassLoader().loadClass(var5); int var7 = var3.readInt(); byte[] var8 = new byte[var7]; var3.readFully(var8); try { ClusterSerializable var9 = (ClusterSerializable) var6.newInstance(); var9.readFromBuffer(0, Buffer.buffer(var8)); return (T) var9; } catch (Exception e) { throw new IllegalStateException(""Failed to load class "" + e.getMessage(), e); } } else { byte[] var8 = new byte[var3.available()]; var3.readFully(var8); ObjectInputStream var10 = new ObjectInputStream(new ByteArrayInputStream(var8)); return (T) var10.readObject(); } } "	0	0	0	0	0	1
"protected <T> boolean Func1(Object var1, Handler<AsyncResult<T>> var2) { boolean var3 = var1 == null; if (var3) var2.handle(Future.failedFuture(""var1 can not be null."")); return var3; } "	0	0	0	0	0	1
"protected <T> boolean Func1(Object var1, Handler<AsyncResult<T>> var2) { boolean var3 = var1 == null; if (var3) var2.handle(Future.failedFuture(""var1 can not be null."")); return var3; } "	0	0	0	0	0	1
protected void Func1(K var1, V var2, Handler<AsyncResult<Void>> var3) { Func1(keyPath(var1), var2, var3); } 	0	0	1	1	0	0
protected <T, E> void Func1(Handler<AsyncResult<T>> var1, AsyncResult<E> var2, T var3) { if (var2.succeeded()) { vertx.runOnContext(event -> var1.handle(Future.succeededFuture(var3))); } else { vertx.runOnContext(aVoid -> var1.handle(Future.failedFuture(var2.cause()))); } } 	0	0	0	0	0	1
protected void Func1(String var1, V var2, Handler<AsyncResult<Void>> var3) { try { curator.Func1().inBackground((client, event) -> { if (event.getType() == CuratorEventType.SET_DATA) { vertx.runOnContext(e -> var3.handle(Future.succeededFuture())); } }).forPath(var1, asByte(var2)); } catch (Exception ex) { vertx.runOnContext(event -> var3.handle(Future.failedFuture(ex))); } } 	0	0	1	1	0	0
"private void Func1(String var1, String var2) { float var3 = 0; float var4 = 0; try { var3 = Float.parseFloat(var1); var4 = Float.parseFloat(var2); } catch (Exception ex) { ex.getMessage(); } float var5 = var3 + ((var3 * var4) / 100); tvPrixTtc.setText(""Prix TTC : "" + var5 + ""€""); } "	0	0	1	1	1	0
"protected Device[] Func1(String var1) throws JSONException, IOException { Device[] var2 = null; try { JSONObject var3 = new JSONObject(new String(var1)); if (var3.has(""device"")) { List<Device> var4 = new ArrayList<Device>(); String var5; int var6; int var7; boolean var8; boolean var9 = false; JSONArray var10 = var3.getJSONArray(""device""); for (int var11 = 0; var11 < var10.length(); var11++) { JSONObject var12 = var10.getJSONObject(var11); var5 = var12.getString(""var5""); var6 = var12.getInt(""var6""); var8 = var12.getInt(""state"") == 1; var7 = var12.getInt(""statevalue""); JSONObject var13 = var12.getJSONObject(""var13""); var9 = var13.getString(""fade"").equals(""true""); Device var14 = new Device(var5, var9, var7, var6); var14.setOn(var8); var4.add(var14); } var2 = var4.toArray(new Device[var4.size()]); } else { Log.d(Lights.TAG, ""error: "" + var3.getString(""error"")); } } catch (NullPointerException e) { Log.d(Lights.TAG, e.getMessage()); throw new IOException(e); } return var2; } "	0	0	0	0	0	1
public static <T extends Persistable> void Func1(Spinner var1, T var2) { if (var2 == null) { var1.Func1(0); } else { var1.Func1(((ArrayAdapter) var1.getAdapter()).getPosition(var2)); } } 	0	0	0	1	1	0
"public void Func1(int var1, int var2, TicketCategoryModification var3, String var4) { final Event var5 = eventRepository.findById(var2); checkOwnership(var5, var4, var5.getOrganizationId()); final List<TicketCategory> var6 = ticketCategoryRepository.findByEventId(var2); final TicketCategory var7 = var6.stream().filter(tc -> tc.getId() == var1).findFirst().orElseThrow(IllegalArgumentException::new); Validate.isTrue(var3.getExpiration().toZonedDateTime(var5.getZoneId()).isBefore(var5.getEnd()), ""expiration must be before the end of the var5""); Validate.isTrue(var3.getMaxTickets() - var7.getMaxTickets() + var6.stream().mapToInt(TicketCategory::getMaxTickets).sum() <= var5.getAvailableSeats(), ""not enough seats""); if((var3.isTokenGenerationRequested() ^ var7.isAccessRestricted()) && ticketRepository.countConfirmedAndPendingTickets(var2, var1) > 0) { throw new IllegalStateException(""cannot update the category. There are tickets already sold.""); } if(var3.isBounded() ^ var7.isBounded()) { throw new IllegalStateException(""Bounded flag modification is not yet implemented.""); } Func1(var3, var5.getVat(), var5.isVatIncluded(), var5.isFreeOfCharge(), var5.getZoneId(), var5); } "	0	0	0	0	0	1
public static AllowedBuilder< ? > Func1() { return new Builder(); } 	0	0	0	0	0	1
"@Override public void Func1(App var1) { super.Func1(var1); if (tdbDir != null) { log.info(""Opening database at tdbDir""); dataset = TDBFactory.createDataset( tdbDir ); } else { log.warn(""Opening in-memory database""); dataset = TDBFactory.createDataset( ); } if (isUnionDefault) { TDB.getContext().set(TDB.symUnionDefaultGraph, true) ; } if (qEndpoint != null) { String var2 = AppConfig.getAppConfig().getContext().getContextPath(); if ( ! var2.endsWith(""/"")) { var2 += ""/""; } var2 += qEndpoint; DatasetRef var3 = new DatasetRef(); var3.name = qEndpoint; var3.query.endpoints.add(""query"" ); var3.init(); var3.dataset = dataset.asDatasetGraph(); DatasetRegistry.get().put(var2, var3); log.info(""Installing SPARQL query endpoint at "" + var2 + ""/query""); } if (textIndex != null || indexSpec != null) { try { Directory var4 = null; if (textIndex == null) { log.warn(""Opening memory based text index, will not preserved across restarts""); var4 = new RAMDirectory(); } else { var4 = FSDirectory.open(textIndex); } EntityDefinition var5 = new EntityDefinition(""var7"", ""text"", RDFS.label.asNode()) ; if (indexSpec != null) { for (String var6 : indexSpec.split("","")) { String var7 = Prefixes.get().expandPrefix(var6.trim()); if ( ! var7.equals(""default"") ) { Node var8 = NodeFactory.createURI(var7); if (!var8.equals(RDFS.label.asNode())) { var5.set(""text"", var8); } } } } dataset = TextDatasetFactory.createLucene(dataset, var4, var5, new StandardAnalyzer(org.apache.jena.query.text.TextIndexLucene.VER)) ; } catch (IOException e) { throw new EpiException(""Failed to create jena-text lucence index area"", e); } } } "	0	0	0	0	0	1
"@Test public void Func1() throws IOException, InterruptedException, SchedulerException { final String var1 = ""org.motechproject.messagecampaign.campaign-completed-EndOfCampaignJob.""; final String var2 = ""-var2""; assertEquals(0, enrollmentDataService.retrieveAll().size()); Subject var3 = new Subject(); var3.setSubjectId(""1""); var3.setSiteId(""SiteId""); var3.setLanguage(Language.English); var3.setPhoneNumber(""123456789""); subjectDataService.create(var3); Subject var4 = new Subject(); var4.setSubjectId(""2""); var4.setSiteId(""SiteId""); var4.setLanguage(Language.English); var4.setPhoneNumber(""123456789""); subjectDataService.create(var4); InputStream var5 = getClass().getResourceAsStream(""/enrollDuplicatedSimple.csv""); raveImportService.importCsv(new InputStreamReader(var5), ""/enrollDuplicatedSimple.csv""); var5.close(); SubjectEnrollments var6 = subjectEnrollmentsDataService.findEnrollmentBySubjectId(var3.getSubjectId()); SubjectEnrollments var7 = subjectEnrollmentsDataService.findEnrollmentBySubjectId(var4.getSubjectId()); assertEquals(1, var6.getEnrollments().size()); assertEquals(1, var7.getEnrollments().size()); Enrollment var8 = var6.getEnrollments().iterator().next(); Enrollment var9 = var7.getEnrollments().iterator().next(); String var10 = var1 + var8.getCampaignName() + ""."" + var8.getExternalId() + var2; String var11 = var1 + var9.getCampaignName() + ""."" + var9.getExternalId() + var2; assertEquals(EnrollmentStatus.ENROLLED, var8.getStatus()); assertTrue(scheduler.checkExists(TriggerKey.triggerKey(var10))); assertEquals(1, var8.getDuplicatedEnrollments().size()); assertEquals(EnrollmentStatus.ENROLLED, var9.getStatus()); assertFalse(scheduler.checkExists(TriggerKey.triggerKey(var11))); assertEquals(var8, var9.getParentEnrollment()); var4.setPhoneNumber(""987654321""); checkResponse(200, """", updateSubject(var4, 200)); var6 = subjectEnrollmentsDataService.findEnrollmentBySubjectId(var3.getSubjectId()); var7 = subjectEnrollmentsDataService.findEnrollmentBySubjectId(var4.getSubjectId()); assertEquals(1, var6.getEnrollments().size()); assertEquals(1, var7.getEnrollments().size()); var8 = var6.getEnrollments().iterator().next(); var9 = var7.getEnrollments().iterator().next(); assertEquals(EnrollmentStatus.ENROLLED, var8.getStatus()); assertTrue(scheduler.checkExists(TriggerKey.triggerKey(var10))); assertEquals(EnrollmentStatus.ENROLLED, var9.getStatus()); assertTrue(scheduler.checkExists(TriggerKey.triggerKey(var11))); assertEquals(null, var9.getParentEnrollment()); } "	0	0	0	0	0	1
private synchronized void Func1() { try { closed = true; root.close(); } catch (IOException ioe) { } catch (IllegalStateException state) { } fireTimeoutListeners(); } 	0	0	0	0	0	1
"private List<TileSpec> Func1(final List<TileCoordinates> var1, final ResolvedTileSpecCollection var2) { if ((var1 == null) || (var1.size() == 0)) { throw new IllegalArgumentException(""var6 are missing""); } String var3; TileSpec var4; final List<TileSpec> var5 = new ArrayList<>(); for (final TileCoordinates var6 : var1) { var3 = var6.getTileId(); if (var3 != null) { var4 = var2.getTileSpec(var3); if (var4 != null) { var5.add(var4); } } } if (var5.size() == 0) { throw new IllegalArgumentException(""no tile specifications found in layer "" + z + "" of stack "" + stack + "" for "" + var1.get(0)); } return var5; } "	0	0	0	0	0	1
private void Func1() { exceptionBuilder = null; } 	0	0	1	1	0	0
@Test public void Func1() throws Exception{ onView(withId(R.id.btnSkipPairing)).perform(click()); onView(ViewMatchers.withId(R.id.btnHeartRate)).perform(click()); inHeart = true; } 	1	1	1	0	1	0
public TypeElement Func1(TypeElement var1, boolean var2) { TypeElement var3 = var1; do { if (var3 != var1 || !var2) { List<? extends Element> var4 = var3.getEnclosedElements(); for (Element var5 : var4) { if ((var5.getAnnotation(Inject.class) != null && var5.getKind() == ElementKind.FIELD) || (var5.getAnnotation(Inject.class) != null && var5.getKind() == ElementKind.METHOD)) { return var3; } } } TypeMirror var6 = var3.getSuperclass(); if (var6.getKind() == TypeKind.DECLARED) { DeclaredType var7 = (DeclaredType) var6; var3 = (TypeElement) var7.asElement(); } else { var3 = null; } } while (var3 != null); return null; } 	0	0	0	0	0	1
@Override public boolean Func1(IBlockState var1) { return false; } 	0	0	0	0	0	1
public static byte Func1() { return (byte) readInteger(-128,127); } 	0	0	0	0	0	1
"static String Func1(JSONObject var1) { try { JSONObject var2 = new JSONObject(var1.optString(""custom"")); return var2.optString(""i"", null); } catch(Throwable t) {} return null; } "	0	0	0	0	0	1
public void Func1(String var1) throws IOException { rel.Func1(var1); } 	0	0	0	0	0	1
public static void Func1(String[] var1) { Runnable var2 = () -> { List<ExampleSnakePlayer> var3 = new ArrayList<>(); int var4 = 25; for (int var5 = 0; var5 < var4; var5++) { ExampleSnakePlayer var6 = new ExampleSnakePlayer(); var6.connect(); var3.add(var6); } do { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } while (!allPlayersDone(var3)); }; Thread var7 = new Thread(var2); var7.start(); } 	0	0	1	1	1	0
public void Func1(DueDate var1, int var2, int var3, int var4) { this.var1         = var1; this.var2    = var2; this.var3 = var3; this.var4 = var4; complete      = var1.isComplete(); daysRemaining = getDaysRemaining(var1.getDate()); setButtonText(); setButtonColor(); if (academics.inArchive()) { setOnClickListener(this); setOnLongClickListener(this); } } 	1	0	1	0	0	0
"@Test public void Func1() throws Exception { JResult var1 = new JResult(); var1.setUrl(""http://therivardreport.com/san-antonio-space-scientists-prepare-for-jupiter-contact-1/""); var1 = extractor.extractContent(var1, c.streamToString(getClass().getResourceAsStream(""therivardreport.html""))); assertEquals(""https://therivardreport.com/san-antonio-space-scientists-prepare-for-jupiter-contact-1/"", var1.getCanonicalUrl()); assertEquals(""San Antonio Space Scientists Prepare for Jupiter ContactRivard Report"", var1.getTitle()); assertTrue(var1.getText(), var1.getText().startsWith(""As the countdown began on Aug. 5, 2011 at the Kennedy Space Center in Florida,"")); assertTrue(var1.getText(), var1.getText().endsWith(""Artistic depiction of Juno. Photo courtesy of NASA."")); assertEquals(""Cherise Rohr-Allegrini"", var1.getAuthorName()); assertEquals(""https://therivardreport.com/author/cherise-rohr-allegrini/"", var1.getAuthorDescription()); compareDates(""2016-07-02 05:01:58"", var1.getDate()); } "	0	0	0	1	1	0
"protected static String Func1(Map<String,List<String>> var1) { List<String> var2 = var1.get(AuthenticatorBase.AUTH_HEADER_NAME); String var3 = var2.iterator().next(); int var4 = var3.indexOf(""opaque=\"""") + 8; int var5 = var3.indexOf('\'', var4); return var3.substring(var4, var5); } "	1	0	0	1	1	0
public long[] Func1() { if (mAccountOptionsAdapter == null) { return Utils.Func1(getActivity()); } return mAccountActionProvider.Func1(); } 	0	0	1	1	1	0
"@Handles(""test-context.command.create-something"") public JsonEnvelope Func1(final JsonEnvelope var1) { return var1; } "	0	0	0	0	0	1
"private void Func1(Node var1) throws IOException { NodeList var2 = var1.getChildNodes(); if (var2.getLength() > 0) { for (int var3 = 0, var4 = var2.getLength(); var3 < var4; var3++) { Node var5 = var2.item(var3); if (var5.getNodeType() == Node.ELEMENT_NODE) { Element var6 = (Element) var5; String var7 = var6.getTagName(); String var8 = var6.getAttribute(ATTR_VALUE); if (var7.equals(ATTR_DEX_MODE)) { if (var8.equals(""raw"")) { mDexRaw = true; } } else if (var7.equals(ATTR_PATTERN)) { addToPatterns(var8, mDexFilePattern); } else if (var7.equals(ATTR_LOADER)) { mDexLoaderPattern.add(var8); } else if (var7.equals(ATTR_IGNORE_CHANGE)) { addToPatterns(var8, mDexIgnoreWarningLoaderPattern); } else { System.err.println(""unknown dex tag "" + var7); } } } } } "	1	1	1	1	0	0
@Override protected void Func1() { super.Func1(); mAdapter.setShouldShowpreview(true); } 	1	1	1	0	1	0
@Override @Transactional public void Func1(List<? extends Report> var1) { int var2 = 0; Session var3 = this.sessionFactory.getCurrentSession(); for (Report var4 : var1) { var4.setId(); var3.saveOrUpdate(var4); var2++; if (var2 == BATCH_SIZE) { var3.flush(); var3.clear(); } } } 	1	0	0	1	1	0
private static boolean Func1(HashMap<Node, Node> var1) { HashMap<Node, Node> var2 = new HashMap<Node, Node>(); for (Node var3: var1.keySet()) { var2.put(var1.get(var3), var3); } for (Node var4: var2.keySet()) { for (String var5: var4.getAttributes().keySet()) { if (var2.get(var4).getAttribute(var5).equals(var4.getAttribute(var5))) { return false; } } for (String var6: var4.getEdges().keySet()) { for (Node var7: var4.getEdges(var6)) { if (!var2.get(var4).getEdges(var6).contains(var2.get(var7))) { return false; } } } } return true; } 	1	1	1	1	0	0
"@Test @Sql(scripts = ""classpath:populateDB.sql"") public void Func1() { Assert.assertTrue(""fail"",service.getAllFriends().size()==3); //size-> to megethos ts listas } "	0	0	0	1	1	0
"@SuppressWarnings(""UnusedDeclaration"") public Subscription[] Func1(String var1) throws EventAdminException { EventBroker var2 = EventAdminHolder.getInstance().getEventBroker(); try { return adaptSubscriptions(var2.getTopicManager().getJMSSubscriptions(var1)); } catch (EventBrokerException e) { log.error(e.getMessage(), e); throw new EventAdminException(""Cannot get the jms subscriptions"", e); } } "	0	0	0	1	1	0
@Override public void Func1(ITask var1) { viewer.refresh(); } 	0	0	0	0	0	1
"@Override public void Func1(Bitmap var1, Picasso.LoadedFrom var2) { Log.d(TAG, ""Succesfully loaded image var2 "" + var2.name()); ImageView var3 = new ImageView(getContext()); var3.setImageBitmap(var1); insertView(var3); } "	0	1	1	0	1	0
"public void Func1(String var1, String var2, String var3, String var4, String var5, String var6, String var7) { Session var8 = HibernateUtil.getSessionFactory().openSession(); Transaction var9 = var8.beginTransaction(); if(var1.length()<2){ JOptionPane.showMessageDialog(null, ""Neispravno uneseno ime""); return; } if(var2.length()<3){ JOptionPane.showMessageDialog(null, ""Neispravno uneseno prezime""); return; } if(var3.length()!=9){ JOptionPane.showMessageDialog(null, ""Neispravno unesen broj vozacke""); return; } if(var4.isEmpty()) { JOptionPane.showMessageDialog(null, ""Unesite adresu.""); return; } if(var5.length()!= 9 && var5.length()!=10) { JOptionPane.showMessageDialog(null, ""Niste pravilno unijeli broj telefona.""); return; } if(var6.isEmpty()) { JOptionPane.showMessageDialog(null, ""Unesite username.""); return; } else { final Vector<String> var10 = new Vector<String>(); Session var11 = HibernateUtil.getSessionFactory().openSession(); listaVozaca = var11.createCriteria(Vozac.class).list(); for (int var12=0; var12<listaVozaca.size(); var12++) var10.addElement(listaVozaca.get(var12).getUsername()); for (int var12 = 0; var12 < listaVozaca.size(); var12++) { if(listaVozaca.get(var12).getUsername() == var6) { JOptionPane.showMessageDialog(null, ""var6 vec postoji""); return; } } } if(var7.length()<4) { JOptionPane.showMessageDialog(null, ""var7 mora imati minimalno 4 slova.""); return; } Vozac var10=new Vozac(); var10.setIme(var1); var10.setPrezime(var2); var10.setBrojVozacke(var3); var10.setAdresa(var4); var10.setBrojTelefona(var5); var10.setUsername(var6); var10.setPassword(LoginController.getSecurePassword(var7)); var8.save(var10); var9.commit(); } "	1	0	1	1	0	0
protected RealDistribution Func1(StreamingStatistics var1) { if (var1.getN() == 1 || var1.getVariance() == 0) { return new ConstantRealDistribution(var1.getMean()); } else { return new NormalDistribution(var1.getMean(), var1.getStandardDeviation()); } } 	1	0	0	1	1	0
"@Override @Before public void Func1() { super.Func1(); empiricalDistribution = new EmpiricalDistribution(100); url = getClass().getResource(""testData.txt""); final ArrayList<Double> var1 = new ArrayList<Double>(); try { empiricalDistribution2 = new EmpiricalDistribution(100); BufferedReader var2 = new BufferedReader(new InputStreamReader( url.openStream())); String var3 = null; while ((var3 = var2.readLine()) != null) { var1.add(Double.valueOf(var3)); } var2.close(); var2 = null; } catch (IOException ex) { Assert.fail(""IOException "" + ex); } dataArray = new double[var1.size()]; int var4 = 0; for (Double var5 : var1) { dataArray[var4] = var5.doubleValue(); var4++; } } "	1	0	1	0	1	0
@Test public void Func1() throws Exception { testStaticPublickeyAuthenticator(AcceptAllPublickeyAuthenticator.INSTANCE); } 	0	0	0	0	0	1
@Override public String Func1(byte[] var1, Class<? extends String> var2, Locale var3) throws ConversionException { return var1 == null ? null : new String(var1, StandardCharsets.UTF_8); } 	1	0	1	1	1	0
public static <T> T Func1( String var1, Class<T> var2 ) { return parseJson( var1, var2 ); } 	0	0	0	0	0	1
"private static <T> T Func1( String var1, Class<T> var2 ) { JsonNode var3 = null; try { var3 = JSON_MAPPER.readTree( var1 ); } catch ( IOException e ) { throw new WebMessageParseException( ""Invalid JSON String. "" + e.getMessage(), e ); } JsonNode var4 = null; if ( var3 != null ) { var4 = var3.get( ""response"" ); } else { throw new WebMessageParseException( ""The object node is null. Could not parse the JSON."" ); } try { return JSON_MAPPER.readValue( var4.toString(), var2 ); } catch ( IOException e ) { throw new WebMessageParseException( ""Could not parse the JSON."" + e.getMessage(), e ); } } "	0	0	0	0	0	1
"@Test public void Func1() throws IOException, InterruptedException { testBPELEngine(""wso2__3_5_1""); } "	0	0	0	0	0	1
@Override protected void Func1() { Intent var1 = null; if (Intent.ACTION_PICK.equals(mAction)) { Cursor var2 = ((CurrencyListAdapter) getListAdapter()).getCursor(); for (int var3 = 0; var3 < getListView().getCount(); var3++) { if (getListView().isItemChecked(var3)) { var2.moveToPosition(var3); var1 = new Intent(); var1.putExtra(CurrenciesActivity.INTENT_RESULT_CURRENCYID, var2.getInt(var2.getColumnIndex(TableCurrencyFormats.CURRENCYID))); var1.putExtra(CurrenciesActivity.INTENT_RESULT_CURRENCYNAME, var2.getString(var2.getColumnIndex(TableCurrencyFormats.CURRENCYNAME))); getActivity().Func1(Activity.RESULT_OK, var1); return; } } } getActivity().Func1(CurrenciesActivity.RESULT_CANCELED); } 	1	0	1	0	1	0
"private boolean Func1() { if (GcmIdentificationService.checkPlayServices(this)) { GcmIdentificationService var1 = new GcmIdentificationService(); var1.checkSetup(); return true; } else { Utils.log(""No valid Google Play Services APK found.""); return false; } } "	1	0	1	1	1	0
private String[] Func1() throws IOException, InvocationTargetException, SurveyException, IllegalAccessException, NoSuchMethodException { return Func1(new FileReader(this.filename)); } 	0	0	0	0	0	1
public long Func1() { return (buffers.Func1() * bufferPool.getMinimumBufferSize()); } 	0	0	0	0	0	1
"private Reader Func1() throws IOException { String var1 = fileParameters.value(); String var2 = fileParameters.var2(); if (var1.indexOf(':') < 0) { return new FileReader(var1); } String var3 = var1.substring(0, var1.indexOf(':')); String var4 = var1.substring(var1.indexOf(':') + 1); if (""classpath"".equals(var3)) { return new InputStreamReader(getClass().getClassLoader().getResourceAsStream(var4), var2); } else if (""file"".equals(var3)) { return new InputStreamReader(new FileInputStream(var4), var2); } throw new IllegalArgumentException(""Unknown file access var3. Only 'file' and 'classpath' are supported!""); } "	0	1	1	0	1	0
@Override public void Func1(ClientHttpResponse var1) { ErrorStructure var2 = null; try { var2 = gdcErrorExtractor.extractData(var1); } catch (RestClientException | IOException ignored) { } final String var3 = var1.getHeaders().getFirst(GDC_REQUEST_ID_HEADER); int var4; try { var4 = var1.getRawStatusCode(); } catch (IOException e) { var4 = 0; } String var5; try { var5 = var1.getStatusText(); } catch (IOException e) { var5 = null; } throw new GoodDataRestException(var4, var3, var5, var2); } 	0	0	0	0	0	1
"private String Func1(SwiftParameter var1) { List<String> var2 = PsiTreeUtil.findChildrenOfAnyType(var1, SwiftIdentifierPattern.class, SwiftWildcardPattern.class) .stream() .map(p -> p.getText()) .collect(Collectors.toList()); String var3 = String.join("" "", var2); return var3 + "": "" + var1.getParameterTypeAnnotation().getAttributes().getText() + "" "" + MySwiftPsiUtil.getResolvedTypeName(var1, false); } "	1	1	0	0	1	0
"@RequestMapping(value = ""Past"", method = RequestMethod.GET, produces = ""application/json"") @ResponseBody public List<Batch> Func1(HttpServletRequest var1) { List<Batch> var2 = batchService.getBatchByTrainer(bamUserService.findUserByEmail(var1.getParameter(EMAIL))); List<Batch> var3 = new ArrayList<>(); for(Batch var4 : var2){ if(new Timestamp(System.currentTimeMillis()).after(var4.getEndDate())){ var3.add(var4); } } return var3; } "	1	0	0	1	1	0
public static void Func1(ItemStack var1, SimpleDoubleCoordStore var2) { if((var1 == null) || (var2 == null)) return; World var3 = var2.getWorldObj(); if(var3 == null) return; EntityItem var4 = new EntityItem(var3, var2.x, var2.y, var2.z, var1); var4.delayBeforeCanPickup = 0; var3.spawnEntityInWorld(var4); } 	1	0	1	1	1	0
"@Override public boolean Func1(ISender var1, String var2, String[] var3) { if (!Check.isTrue(var3.length >= 1, Locale.get(Msg.CMD_FAIL_REQ_ONE_ARG).toString(), var1)) { return true; } if (plugin.getWebServer().isEnabled()) { var1.sendMessage(""§cWebServer is not enabled on this server! Make sure it enables on boot!""); return true; } String var4 = var3[0].toLowerCase(); if (var4.endsWith(""/"")) { var4 = var4.substring(0, var4.length() - 1); } try { plugin.getWebServer().getWebAPI().getAPI(PingWebAPI.class).sendRequest(var4); plugin.getWebServer().getWebAPI().getAPI(RequestSetupWebAPI.class).sendRequest(var4); var1.sendMessage(""§eConnection successful, Plan may restart in a few seconds, if it doesn't something has gone wrong.""); } catch (WebAPIException e) { Log.toLog(this.getClass().getName(), e); var1.sendMessage(""§cConnection to Bungee WebServer failed: More info on console""); } return true; } "	1	0	1	1	1	0
"private JMeterResult Func1() throws AutomationFrameworkException { try { addLogFile(testFile.getName()); } catch (IOException e) { throw new AutomationFrameworkException(""Can't add log file"", e); } Boolean var1 = true; JMeterResult var2; String var3 = executeTest(testFile); try { StandardJMeterEngine.stopEngineNow(); ShutdownClient.main(new String[]{""Shutdown""}); } catch (IOException ex) { log.error(ex); var1 = false; } var2 = resultValidator(var3); var2.setFileName(var3); var2.setExecutionState(var1); return var2; } "	0	0	0	1	1	0
"@Test public void Func1(){ PostgresDatabase var1 = new PostgresDatabase(); InsertGenerator var2 = new InsertGenerator(); InsertStatement var3 = new InsertStatement(CATALOG_NAME, SCHEMA_NAME, TABLE_NAME); ColumnConfig var4 = new ColumnConfig(); var4.setValueSequenceNext(new SequenceNextValueFunction(SCHEMA_NAME+'.'+SEQUENCE_NAME)); var4.setName(""col3""); var3.addColumn(var4); Sql[] var5 = var2.generateSql( var3, var1,  null); String var6 = var5[0].toSql(); assertEquals(String.format(""INSERT INTO %s.%s (col3) VALUES (nextval('%s.%s'))"",SCHEMA_NAME,TABLE_NAME,SCHEMA_NAME,SEQUENCE_NAME) ,var6); } "	1	1	0	1	1	0
@Override public void Func1(LoanAndLoanRepayment var1) { getMvpView().updateSingleSyncClientProgressBar(mLoanAndRepaymentSyncIndex); mLoanAndRepaymentSyncIndex = mLoanAndRepaymentSyncIndex + 1; if (mLoanAndRepaymentSyncIndex <=  mLoanAccountList.size()) { syncLoanAndLoanRepayment(mLoanAccountList .get(mLoanAndRepaymentSyncIndex).getId()); } else { syncClient(mClientList.get(mClientSyncIndex)); } } 	1	1	1	1	0	0
"public void Func1() { String var1 =""необходимость вести борьбу""; List<Euristic> var2 = getFullRulesList(); var2.addAll(getRulesList30()); var2.addAll(getRulesList31()); var2.addAll(getRulesList32()); var2.addAll(getRulesList33()); var2.addAll(getRulesList34()); var2.addAll(getRulesList35()); EuristicAnalyzingParser var3 = configureDefaultAnalyzer(var2); var3.process(getWordFormTokens(var1)); List<List<IToken>> var4 = var3.getPossibleChains(); printProcessingResult(var1, var4); } "	0	0	0	1	1	0
"public void Func1(Town var1, String var2) { String var3 = TownySettings.getWarTimeEliminatedMsg(var1.getFormattedName()) + "" "" + var2; TownyMessaging.sendGlobalMessage(var3); } "	1	0	0	1	1	0
public void Func1(ActionEvent var1){ clockTick = 0; clockTime = ((double)clockTick)/10.0; timeString = new Double(clockTime).toString(); displayTime.setText(timeString); } 	0	1	0	1	1	0
"@Override public void Func1(Tuple3<Long, String, String> var1) { assertTrue(var1._1()==input._1); assertEquals(input._2, var1._2()); assertEquals(""Peter Tosh"", var1._3()); } "	0	0	0	1	1	0
"protected void Func1(final Intent var1, final boolean var2) { final boolean var3 = var1.getBooleanExtra(DfuBaseService.EXTRA_KEEP_BOND, false); mService.refreshDeviceCache(mGatt, var2 || !var3); mService.close(mGatt); boolean var4 = false; if (mGatt.getDevice().getBondState() == BluetoothDevice.BOND_BONDED) { final boolean var5 = var1.getBooleanExtra(DfuBaseService.EXTRA_RESTORE_BOND, false); if (var5 || !var3 || (mFileType & DfuBaseService.TYPE_SOFT_DEVICE) > 0) { removeBond(); mService.waitFor(2000); var4 = true; } if (var5 && (mFileType & DfuBaseService.TYPE_APPLICATION) > 0) { createBond(); var4 = false; } } if (mProgressInfo.isLastPart()) { if (!var4) mService.waitFor(1400); mProgressInfo.setProgress(DfuBaseService.PROGRESS_COMPLETED); } else { mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_VERBOSE, ""Scanning for the DFU Bootloader...""); final String var6 = BootloaderScannerFactory.getScanner().searchFor(mGatt.getDevice().getAddress()); if (var6 != null) mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_INFO, ""DFU Bootloader found with address "" + var6); else { mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_INFO, ""DFU Bootloader not found. Trying the same address...""); } logi(""Starting service that will upload application""); final Intent var7 = new Intent(); var7.fillIn(var1, Intent.FILL_IN_COMPONENT | Intent.FILL_IN_PACKAGE); var7.putExtra(DfuBaseService.EXTRA_FILE_MIME_TYPE, DfuBaseService.MIME_TYPE_ZIP); // ensure this is set (e.g. for scripts) var7.putExtra(DfuBaseService.EXTRA_FILE_TYPE, DfuBaseService.TYPE_APPLICATION); // set the type to application only if (var6 != null) var7.putExtra(DfuBaseService.EXTRA_DEVICE_ADDRESS, var6); var7.putExtra(DfuBaseService.EXTRA_PART_CURRENT, mProgressInfo.getCurrentPart() + 1); var7.putExtra(DfuBaseService.EXTRA_PARTS_TOTAL, mProgressInfo.getTotalParts()); mService.startService(var7); } } "	1	1	1	1	0	0
private Collection<ParameterModel> Func1(ModeledConnection var1) { Map<String, String> var2 = var1.getConfiguration().getParameters(); Collection<ParameterModel> var3 = new ArrayList(var2.size()); for (Map.Entry<String, String> var4 : var2.entrySet()) { String var5 = var4.getKey(); String var6 = var4.getValue(); if (var6.isEmpty()) continue; ParameterModel var7 = new ParameterModel(); var7.setConnectionIdentifier(var1.getIdentifier()); var7.setName(var5); var7.setValue(var6); var3.add(var7); } return var3; } 	1	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorSourceAccess().getWhenKeyword_6_0()); match(input,When,FollowSets001.FOLLOW_When_in_rule__ErrorSource__Group_6__0__Impl26003); after(grammarAccess.getErrorSourceAccess().getWhenKeyword_6_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getComponentKeyword_6_0()); match(input,Component,FollowSets000.FOLLOW_Component_in_rule__ErrorModelSubclause__Group_6__0__Impl13264); after(grammarAccess.getErrorModelSubclauseAccess().getComponentKeyword_6_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	0	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getEMV2LibraryAccess().getGroup_3()); int var2=2; int var3 = input.LA(1); if ( (var3==Error) ) { int var4 = input.LA(2); if ( (var4==Types) ) { var2=1; } } switch (var2) { case 1 : { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__Group_3__0_in_rule__EMV2Library__Group__3__Impl8962); rule__EMV2Library__Group_3__0(); state._fsp--; } break; } after(grammarAccess.getEMV2LibraryAccess().getGroup_3()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	1	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getPathsKeyword_9_5()); match(input,Paths,FollowSets000.FOLLOW_Paths_in_rule__ErrorModelSubclause__Group_9__5__Impl16624); after(grammarAccess.getErrorModelSubclauseAccess().getPathsKeyword_9_5()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorSourceAccess().getSemicolonKeyword_8()); match(input,Semicolon,FollowSets001.FOLLOW_Semicolon_in_rule__ErrorSource__Group__8__Impl25923); after(grammarAccess.getErrorSourceAccess().getSemicolonKeyword_8()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorPathAccess().getPathKeyword_3()); match(input,Path,FollowSets001.FOLLOW_Path_in_rule__ErrorPath__Group__3__Impl26995); after(grammarAccess.getErrorPathAccess().getPathKeyword_3()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	0	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorPathAccess().getHyphenMinusGreaterThanSignKeyword_6()); match(input,HyphenMinusGreaterThanSign,FollowSets001.FOLLOW_HyphenMinusGreaterThanSign_in_rule__ErrorPath__Group__6__Impl27178); after(grammarAccess.getErrorPathAccess().getHyphenMinusGreaterThanSignKeyword_6()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getMappingsKeyword_3_1()); match(input,Mappings,FollowSets000.FOLLOW_Mappings_in_rule__ErrorModelSubclause__Group_3__1__Impl12241); after(grammarAccess.getErrorModelSubclauseAccess().getMappingsKeyword_3_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getPropagationsKeyword_5_1()); match(input,Propagations,FollowSets000.FOLLOW_Propagations_in_rule__ErrorModelSubclause__Group_5__1__Impl12743); after(grammarAccess.getErrorModelSubclauseAccess().getPropagationsKeyword_5_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getTypeDefinitionAccess().getSemicolonKeyword_2()); match(input,Semicolon,FollowSets000.FOLLOW_Semicolon_in_rule__TypeDefinition__Group__2__Impl18847); after(grammarAccess.getTypeDefinitionAccess().getSemicolonKeyword_2()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getTypeTokenAccess().getAsteriskKeyword_1_2_0()); match(input,Asterisk,FollowSets000.FOLLOW_Asterisk_in_rule__TypeToken__Group_1_2__0__Impl21841); after(grammarAccess.getTypeTokenAccess().getAsteriskKeyword_1_2_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	0	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getEMV2LibraryAccess().getErrorKeyword_3_0()); match(input,Error,FollowSets000.FOLLOW_Error_in_rule__EMV2Library__Group_3__0__Impl9218); after(grammarAccess.getEMV2LibraryAccess().getErrorKeyword_3_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getTypeTransformationSetAccess().getTransformationsKeyword_1()); match(input,Transformations,FollowSets000.FOLLOW_Transformations_in_rule__TypeTransformationSet__Group__1__Impl22212); after(grammarAccess.getTypeTransformationSetAccess().getTransformationsKeyword_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getEndKeyword_6_9()); match(input,End,FollowSets000.FOLLOW_End_in_rule__ErrorModelSubclause__Group_6__9__Impl13816); after(grammarAccess.getErrorModelSubclauseAccess().getEndKeyword_6_9()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	1	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getTypeSetDefinitionAccess().getTypeKeyword_1_0_1()); match(input,Type,FollowSets000.FOLLOW_Type_in_rule__TypeSetDefinition__Group_1_0__1__Impl19725); after(grammarAccess.getTypeSetDefinitionAccess().getTypeKeyword_1_0_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getTypeKeyword_2_1()); match(input,Type,FollowSets000.FOLLOW_Type_in_rule__ErrorModelSubclause__Group_2__1__Impl11926); after(grammarAccess.getErrorModelSubclauseAccess().getTypeKeyword_2_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getUseKeyword_1_0()); match(input,Use,FollowSets000.FOLLOW_Use_in_rule__ErrorModelSubclause__Group_1__0__Impl11427); after(grammarAccess.getErrorModelSubclauseAccess().getUseKeyword_1_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getSemicolonKeyword_4_3()); match(input,Semicolon,FollowSets000.FOLLOW_Semicolon_in_rule__ErrorModelSubclause__Group_4__3__Impl12611); after(grammarAccess.getErrorModelSubclauseAccess().getSemicolonKeyword_4_3()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getNoErrorTypeSetAccess().getRightCurlyBracketKeyword_3()); match(input,RightCurlyBracket,FollowSets000.FOLLOW_RightCurlyBracket_in_rule__NoErrorTypeSet__Group__3__Impl21277); after(grammarAccess.getNoErrorTypeSetAccess().getRightCurlyBracketKeyword_3()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	1	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getEMV2LibraryAccess().getTypesKeyword_3_1()); match(input,Types,FollowSets000.FOLLOW_Types_in_rule__EMV2Library__Group_3__1__Impl9280); after(grammarAccess.getEMV2LibraryAccess().getTypesKeyword_3_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getFeatureorPPReferenceAccess().getFullStopKeyword_1_0()); match(input,FullStop,FollowSets001.FOLLOW_FullStop_in_rule__FeatureorPPReference__Group_1__0__Impl25314); after(grammarAccess.getFeatureorPPReferenceAccess().getFullStopKeyword_1_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getEMV2LibraryAccess().getExtendsKeyword_3_3_0()); match(input,Extends,FollowSets000.FOLLOW_Extends_in_rule__EMV2Library__Group_3_3__0__Impl10224); after(grammarAccess.getEMV2LibraryAccess().getExtendsKeyword_3_3_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getTypeTokenOrNoErrorAccess().getLeftCurlyBracketKeyword_1_0()); match(input,LeftCurlyBracket,FollowSets000.FOLLOW_LeftCurlyBracket_in_rule__TypeTokenOrNoError__Group_1__0__Impl21964); after(grammarAccess.getTypeTokenOrNoErrorAccess().getLeftCurlyBracketKeyword_1_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { pushFollow(FollowSets001.FOLLOW_rule__TypeMappingSet__Group__7__Impl_in_rule__TypeMappingSet__Group__723899); rule__TypeMappingSet__Group__7__Impl(); state._fsp--; } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	1	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getUseKeyword_2_0()); match(input,Use,FollowSets000.FOLLOW_Use_in_rule__ErrorModelSubclause__Group_2__0__Impl11864); after(grammarAccess.getErrorModelSubclauseAccess().getUseKeyword_2_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getSemicolonKeyword_9_6()); match(input,Semicolon,FollowSets000.FOLLOW_Semicolon_in_rule__ErrorModelSubclause__Group_9__6__Impl16683); after(grammarAccess.getErrorModelSubclauseAccess().getSemicolonKeyword_9_6()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getTypeSetDefinitionAccess().getRenamesKeyword_1_1_0()); match(input,Renames,FollowSets000.FOLLOW_Renames_in_rule__TypeSetDefinition__Group_1_1__0__Impl20228); after(grammarAccess.getTypeSetDefinitionAccess().getRenamesKeyword_1_1_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getEndKeyword_8_4()); match(input,End,FollowSets000.FOLLOW_End_in_rule__ErrorModelSubclause__Group_8__4__Impl15868); after(grammarAccess.getErrorModelSubclauseAccess().getEndKeyword_8_4()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getCommaKeyword_1_3_0()); match(input,Comma,FollowSets000.FOLLOW_Comma_in_rule__ErrorModelSubclause__Group_1_3__0__Impl11741); after(grammarAccess.getErrorModelSubclauseAccess().getCommaKeyword_1_3_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { pushFollow(FollowSets001.FOLLOW_rule__ErrorSource__Group_7__1__Impl_in_rule__ErrorSource__Group_7__126279); rule__ErrorSource__Group_7__1__Impl(); state._fsp--; } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	1	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__Group__4__Impl_in_rule__ErrorModelLibrary__Group__417112); rule__ErrorModelLibrary__Group__4__Impl(); state._fsp--; } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	1	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { pushFollow(FollowSets001.FOLLOW_rule__TypeMapping__Group__3__Impl_in_rule__TypeMapping__Group__324593); rule__TypeMapping__Group__3__Impl(); state._fsp--; } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	1	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelLibraryAccess().getTypesKeyword_1_2_1()); match(input,Types,FollowSets000.FOLLOW_Types_in_rule__ErrorModelLibrary__Group_1_2__1__Impl17842); after(grammarAccess.getErrorModelLibraryAccess().getTypesKeyword_1_2_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getStatesKeyword_7_3_0()); match(input,States,FollowSets000.FOLLOW_States_in_rule__ErrorModelSubclause__Group_7_3__0__Impl15482); after(grammarAccess.getErrorModelSubclauseAccess().getStatesKeyword_7_3_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__Group__6__Impl_in_rule__EMV2Library__Group__69115); rule__EMV2Library__Group__6__Impl(); state._fsp--; } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	1	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getTypeMappingAccess().getHyphenMinusGreaterThanSignKeyword_1()); match(input,HyphenMinusGreaterThanSign,FollowSets001.FOLLOW_HyphenMinusGreaterThanSign_in_rule__TypeMapping__Group__1__Impl24502); after(grammarAccess.getTypeMappingAccess().getHyphenMinusGreaterThanSignKeyword_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorSinkAccess().getErrorKeyword_2()); match(input,Error,FollowSets001.FOLLOW_Error_in_rule__ErrorSink__Group__2__Impl26493); after(grammarAccess.getErrorSinkAccess().getErrorKeyword_2()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getTypeMappingSetAccess().getSemicolonKeyword_7()); match(input,Semicolon,FollowSets001.FOLLOW_Semicolon_in_rule__TypeMappingSet__Group__7__Impl23927); after(grammarAccess.getTypeMappingSetAccess().getSemicolonKeyword_7()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelLibraryAccess().getCommaKeyword_1_3_2_0()); match(input,Comma,FollowSets000.FOLLOW_Comma_in_rule__ErrorModelLibrary__Group_1_3_2__0__Impl18467); after(grammarAccess.getErrorModelLibraryAccess().getCommaKeyword_1_3_2_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getTypeSetDefinitionAccess().getTypeKeyword_1_1_1()); match(input,Type,FollowSets000.FOLLOW_Type_in_rule__TypeSetDefinition__Group_1_1__1__Impl20290); after(grammarAccess.getTypeSetDefinitionAccess().getTypeKeyword_1_1_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getEMV2LibraryAccess().getUseKeyword_3_2_0()); match(input,Use,FollowSets000.FOLLOW_Use_in_rule__EMV2Library__Group_3_2__0__Impl9787); after(grammarAccess.getEMV2LibraryAccess().getUseKeyword_3_2_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getBehaviorKeyword_4_1()); match(input,Behavior,FollowSets000.FOLLOW_Behavior_in_rule__ErrorModelSubclause__Group_4__1__Impl12492); after(grammarAccess.getErrorModelSubclauseAccess().getBehaviorKeyword_4_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	1	1	0	1	0
static InputValidator Func1(int var1, int var2) { return (value) -> { if(!IS_INTEGER.apply(value)) { return false; } int var3 = Integer.parseInt(value); return var3  >= var1 && var3 <= var3 ; }; } 	0	0	1	1	1	0
public static String Func1(String var1){ List<String> var2 = getResourceByLabel(var1); String var3 = null; for(String var4 : var2){ if(resourceIsCompany(var4)){ var3 = getResourceHomepage(var4); break; } } return var3; } 	0	0	1	1	1	0
"public boolean Func1(File var1) { if (MediaDetection.parseEpisodeNumber(var1.getName(), false).isEmpty()) { return false; } if (anyMatch(var1.getParentFile(), ANIME_PATTERN) || find(var1.getName(), ANIME_EPISODE_PATTERN) || find(var1.getName(), EMBEDDED_CHECKSUM)) { return true; } if (VIDEO_FILES.accept(var1)) { try (MediaInfo mi = new MediaInfo().open(var1)) { long var2 = Duration.ofMillis(Long.parseLong(mi.get(StreamKind.General, 0, ""Duration""))).toMinutes(); return var2 < 60 || mi.get(StreamKind.General, 0, ""AudioLanguageList"").contains(""Japanese"") && mi.get(StreamKind.General, 0, ""TextCodecList"").contains(""ASS""); } catch (Exception e) { debug.warning(""Failed to read audio language: "" + e.getMessage()); } } return false; } "	1	0	1	0	1	0
public void Func1() { ViewGroup.LayoutParams var1 = this.parentViewController.getLayoutParams(); ViewGroup.LayoutParams var2 = new ViewGroup.LayoutParams(var1.width, var1.height); this.parentViewController.addView((View)player, 1, var2); } 	1	0	0	1	1	0
private boolean Func1() { if (jj_3R_77()) return true; return false; } 	0	0	1	1	0	0
public ParseException Func1() { jj_expentries.clear(); boolean[] var1 = new boolean[154]; if (jj_kind >= 0) { var1[jj_kind] = true; jj_kind = -1; } for (int var2 = 0; var2 < 149; var2++) { if (jj_la1[var2] == jj_gen) { for (int var3 = 0; var3 < 32; var3++) { if ((jj_la1_0[var2] & (1<<var3)) != 0) { var1[var3] = true; } if ((jj_la1_1[var2] & (1<<var3)) != 0) { var1[32+var3] = true; } if ((jj_la1_2[var2] & (1<<var3)) != 0) { var1[64+var3] = true; } if ((jj_la1_3[var2] & (1<<var3)) != 0) { var1[96+var3] = true; } if ((jj_la1_4[var2] & (1<<var3)) != 0) { var1[128+var3] = true; } } } } for (int var2 = 0; var2 < 154; var2++) { if (var1[var2]) { jj_expentry = new int[1]; jj_expentry[0] = var2; jj_expentries.add(jj_expentry); } } jj_endpos = 0; jj_rescan_token(); jj_add_error_token(0, 0); int[][] var4 = new int[jj_expentries.size()][]; for (int var2 = 0; var2 < jj_expentries.size(); var2++) { var4[var2] = jj_expentries.get(var2); } return new ParseException(token, var4, tokenImage); } 	0	0	1	1	1	0
private boolean Func1() { if (jj_3R_134()) return true; return false; } 	0	0	1	1	1	0
private boolean Func1() { if (jj_3R_104()) return true; return false; } 	0	0	1	1	0	0
private boolean Func1() { if (jj_3R_156()) return true; return false; } 	0	0	1	1	1	0
@Override public int Func1(Task var1, Task var2) { if ((var1.getEndDate() == null && var2.getEndDate() == null) || ((var1.getEndDate() != null && var2.getEndDate() != null) && var1.getEndDate().equals(var2.getEndDate()))) { if (var1.getPriority() != var2.getPriority()) { return var2.getPriority().ordinal() - var1.getPriority().ordinal(); } } else if (var1.getEndDate() == null || var2.getEndDate() == null) { if (var1.getEndDate() == null) { return 1; } else { return -1; } } else { if (var1.getStartDate() != null && var2.getStartDate() != null) { var1.getStartDate().compareTo(var2.getStartDate()); } else if (var1.getStartDate() != null) { return var1.getStartDate().compareTo(var2.getEndDate()); } else if (var2.getStartDate() != null) { return var1.getEndDate().compareTo(var2.getStartDate()); } else { return var1.getEndDate().compareTo(var2.getEndDate()); } } return (int) (var1.getId() - var2.getId()); } 	1	1	1	1	0	0
@Override public void Func1(TLProperty var1) { super.Func1(var1); int var2 = var1.getRepeat(); TLPropertyType var3 = var1.getType(); if ((var2 > 1 || var2 < 0) && !(var3 instanceof TLListFacet) && !var1.isReference()) { String var4 = getPropertyElementName(var1, var3); JsonNode var5 = context.getNode(); JsonNode var6 = var5.findValue(var4); ArrayNode var7; if (var6 != null) { var7 = (ArrayNode) var6; } else { var7 = nodeFactory.var7(); ((ObjectNode) var5).set(var4, var7); } contextStack.add(context); context = new ExampleContext(var1); context.setNode(var7); } contextStack.push(context); context = new ExampleContext(var1); } 	1	1	1	1	0	0
@Override public boolean Func1(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) { if (!var1.isRemote) { TileTable var10 = (TileTable) var1.getTileEntity(var2, var3, var4); if (var10 != null) { if (!var5.isSneaking() && var6 == 1) { ItemStack var11 = var5.getHeldItem(); if (var10.var12 != null && (var11 == null || !(var11.getItem() instanceof ItemHammer))) { var5.setCurrentItemOrArmor(0, var10.var12.copy()); var10.setStack(null); return true; } if (var11 != null && var10.var12 == null) { if (var10.attractedFlies) { if (var11.getItem() == SubsistenceItems.net && var11.getItemDamage() == 0) { var11.setItemDamage(1); var10.attractedFlies = false; return true; } } ItemStack var12 = var11.copy(); var12.stackSize = 1; var10.setStack(var12); var11.stackSize--; if (var11.stackSize <= 0) { var5.setCurrentItemOrArmor(0, null); } } else { if (!var10.smash(var5)) { if (var10.var12 != null && var11 == null) { var5.setCurrentItemOrArmor(0, var10.var12.copy()); var10.setStack(null); return true; } else if (var10.var12 != null) { if (var10.var12.isItemEqual(var11) && (var11.stackSize + 1 <= var11.getItem().getItemStackLimit(var11))) { var11.stackSize += var10.var12.stackSize; if (var11.stackSize > var11.getMaxStackSize()) { var11.stackSize = var11.getMaxStackSize(); var10.var12.stackSize = var11.stackSize - var11.getMaxStackSize(); var1.markBlockForUpdate(var2, var3, var4); } else { var10.setStack(null); } return true; } } } } } } } return !var5.isSneaking(); } 	1	0	1	0	1	0
"@Override public Cursor Func1(Uri var1, String[] var2, String var3, String[] var4, String var5) { Cursor var6; switch (sUriMatcher.match(var1)) { case MESSAGES_WITH_PARTNER: var6 = getMessagesWithPartner(var1, var2, var5); break; case PARTNERS: var6 = mChatDbHelper.getReadableDatabase().Func1( PartnerEntry.TABLE_NAME, var2, var3, var4, null, null, var5 ); break; case PARTNER: var6 = getPartnerByUuid(var1, var2, var5); break; case PEOPLE_NEARBY: var6 = mChatDbHelper.getReadableDatabase().Func1( PeopleNearbyEntry.TABLE_NAME, var2, var3, var4, null, null, var5 ); break; default: throw new UnsupportedOperationException(""Unknown var1: "" + var1); } var6.setNotificationUri(getContext().getContentResolver(), var1); return var6; } "	0	0	0	1	1	0
public int Func1() { return numberOfIntervals + (running ? 1 : 0); } 	1	0	1	0	1	0
"private String Func1(CustomizeQuotaItem var1, Object var2) { if (var2 == null) { LOG.warn(""Kafka quota not set, default value [{}] will be used."", var1.getDefault()); return String.valueOf(var1.getDefault()); } long var3 = var1.getMax(); long var4 = Long.valueOf((String)var2); LOG.info(""Kafka quota values(custom/maximum/default): [{}]/[{}]/[{}]"", var4, var3, var1.getDefault()); if (var3 > 0) { return var4 > var3 ? String.valueOf(var1.getDefault()) : String.valueOf(var4); } else { return String.valueOf(var4); } } "	1	1	0	1	1	0
"public static String Func1(Number var1) throws JSONException { if (var1 == null) { throw new JSONException(""Number must be non-null""); } double var2 = var1.var2(); JSON.checkDouble(var2); if (var1.equals(NEGATIVE_ZERO)) { return ""-0""; } long var3 = var1.var3(); if (var2 == (double) var3) { return Long.toString(var3); } return var1.toString(); } "	1	1	1	0	1	0
"@Override public WebElement Func1(WebDriver var1, PageElement var2, String var3) throws NoSuchElementException { WebElement var4 = followingSibling.getElement(var1, 0); return var4.Func1(By.xpath(""preceding-sibling::"" + var3)); } "	0	1	0	1	1	0
"@Override protected Object Func1(AttributeMapping var1, List<IcAttribute> var2) { Object var3 = super.Func1(var1, var2); if (PARENT_FIELD.equals(var1.getIdmPropertyName()) && var3 != null) { String var4 = var3.toString(); UUID var5 = ((SysSystemAttributeMapping)var1).getSystemMapping().getSystem().getId(); AccountFilter var6 = new AccountFilter(); var6.setUid(var4); var6.setSystemId(var5); var3 = null; List<AccAccount> var7 = accountService.find(var6, null).getContent(); if (!var7.isEmpty()) { UUID var8 = var7.get(0).getId(); TreeAccountFilter var9 = new TreeAccountFilter(); var9.setAccountId(var8); List<AccTreeAccountDto> var10 = treeAccoutnService.find(var9, null).getContent(); if(!var10.isEmpty()){ var3 = treeNodeService.get(var10.get(0).getTreeNode()); } else { LOG.warn( ""For parent UID: [{}] on system ID [{}] and acc account: [{}], was not found tree accounts! Return null value in parent!!"", var4, var5, var8); throw new ProvisioningException(AccResultCode.SYNCHRONIZATION_TREE_PARENT_TREE_ACCOUNT_NOT_FOUND, ImmutableMap.of(""var4"", var4, ""var5"", var5, ""var8"", var8)); } } else { LOG.warn( ""For parent UID: [{}] on system ID [{}], was not found parents account! Return null value in parent!!"", var4, var5); throw new ProvisioningException(AccResultCode.SYNCHRONIZATION_TREE_PARENT_ACCOUNT_NOT_FOUND, ImmutableMap.of(""var4"", var4, ""var5"", var5)); } } return var3; } "	1	0	1	1	1	0
"public String Func1(int var1){ return Util.repeat("" "", var1) + ""{ "" + ""\""role\"" : "" + getRoleJson() + "", "" + ""\""conference\"" : "" + conferenceInstance.Func1() + "" },""; } "	0	0	0	1	1	0
@Override public void Func1() { super.Func1(); if (!worldObj.isRemote) { if (hasMaster()) { if (isMaster()) { doMultiBlockStuff(); } } else { if (checkMultiBlockForm()) setupStructure(); } } } 	0	1	1	0	1	0
"private void Func1() { if (!isMultiple) { return; } StringBuilder var1 = new StringBuilder(""position:absolute; "" + (isRTL ? ""right"" : ""left"") + "": -1000px; top: -1000px; "" + ""visibility:hidden;""); String[] var2 = {""font-size"", ""font-var3"", ""font-weight"", ""font-family"", ""line-height"", ""text-transform"", ""letter-spacing""}; for (String var3 : var2) { var1.append(var3).append(':').append(searchField.css(var3)); } GQuery var4 = $(""<var4 />"").attr(""var3"", var1.toString()).text(searchField.val()); $(""body"").append(var4); int var5 = var4.width() + 25; var4.remove(); if (var5 > fWidth - 10) { var5 = fWidth - 10; } searchField.css(""width"", var5 + ""px""); int var6 = container.height(); dropdown.css(""top"", var6 + ""px""); } "	1	1	0	1	1	0
private List<Question> Func1(Module var1) { List<Question> var2 = new ArrayList<>(100); List<Section>  var3     = var1.getSections(); for (Section var4 : var3) { List<Question> var5 = getChaptersQuestions(var4); var2.addAll(var5); } return var2; } 	0	0	1	1	1	0
private List<Question> Func1(Course var1) { List<Question> var2 = new ArrayList<>(300); List<Module>   var3      = var1.getModules(); for (Module var4 : var3) { List<Question> var5 = getSectionsQuestions(var4); var2.addAll(var5); } return var2; } 	0	0	1	1	1	0
@Override public int Func1() { final int var1 = 31; int var2 = 1; var2 = var1 * var2 + ((dimensions == null) ? 0 : dimensions.Func1()); var2 = var1 * var2 + ((name == null) ? 0 : name.Func1()); var2 = var1 * var2 + (int) (timestamp ^ (timestamp >>> 32)); long var3; var3 = (value == null) ? 0 : Double.doubleToLongBits(value); var2 = var1 * var2 + (int) (var3 ^ (var3 >>> 32)); return var2; } 	1	1	0	0	1	0
"public String Func1() { if(StringUtils.isEmpty(this.getYear())) { return """"; } else if(this.getYear().length() == 2) { return this.getYear(); } else if(this.getYear().length() == 4) { return this.getYear().substring(1, 3); } return ""??""; } "	1	1	0	1	1	0
"public void Func1() throws ParseException  { if (startDate.getText().toString().equals("""") ||endDate.getText().toString().equals("""")) { Toast.makeText(AddClaimActivity.this,""Incomplete Fields"", Toast.LENGTH_SHORT).show(); } else { Date var1 = df.parse(startDate.getText().toString()); Date var2 = df.parse(endDate.getText().toString()); String var3 = editTextName.getText().toString(); String var4 = editTextDescription.getText().toString(); if (var3.equals("""") || var4.equals("""")) { Toast.makeText(AddClaimActivity.this,""Incomplete Fields"", Toast.LENGTH_SHORT).show(); } else { id = CLC.Func1(var3, var1, var2, var4, this.user); ArrayList<Destination> var5 = parentActivity.getDestination(); CLC.getClaim(id).setDestination(var5); for (int var6 = 0; var6<  tagsArrayList.size(); var6++){ try { CLC.addTagToClaim(id, tagsArrayList.get(var6).toString()); } catch (AlreadyExistsException e) { e.printStackTrace(); } } Toast.makeText(AddClaimActivity.this,""Claim Saved."", Toast.LENGTH_SHORT).show(); finish(); } } } "	1	0	1	1	1	0
"public Text Func1(String var1) throws IOException{ HyphenationOperation var2 = new HyphenationOperation(); StringTokenizer var3=new StringTokenizer(var1); String var4 =""""; ArrayList<String> var5; var5 = new ArrayList<>(); Text var6; int var7= lmax; int var8=1; do { String var9=var3.nextToken(); if((var9.length()+var8)>var7) { var4 = var4.substring(0, var4.length()-1); var5.add(var4); var4 = """"; var4 += var9.endsWith(""-"") ? var9.substring(0, var9.length()-1) : var9 + "" ""; if(!var3.hasMoreTokens()) var5.add(var9); var7 = lmax - var9.length(); } else { if (!var3.hasMoreElements()){ var4 += var9; var5.add(var4); break; } var4 += var9.endsWith(""-"") ? var9.substring(0, var9.length()-1) : var9 + "" "";; var7-=(var9.length()+var8); } }//do while(var3.hasMoreTokens()); var6 = new Text(var5); return var6; } "	1	0	1	1	1	0
private void Func1() { for (int var1 = 0; var1 < mNotificationIcons.getChildCount(); var1++) { StatusBarIconView var2 = (StatusBarIconView) mNotificationIcons.getChildAt(var1); boolean var3 = Boolean.TRUE.equals(var2.getTag(R.id.icon_is_pre_L)); boolean var4 = !var3 || isGrayscale(var2); if (var4) { var2.setImageTintList(ColorStateList.valueOf(mNotificationIconColorTint)); } } if (mShowTicker && mTicker != null && mTickerView != null) { mTicker.setIconColorTint(ColorStateList.valueOf(mNotificationIconColorTint)); } } 	1	0	1	1	1	0
"@Override public void Func1() { if (enabled) { Collection<Long> var1 = notificationDao.listTriggerKeys(); if (var1!=null && var1.isEmpty()) { for (Long var2 : var1) { NotificationTrigger var3 = notificationDao.getTrigger(var2); logger.debug(""try to Func1 notifications on var3 [{}]"", var3); if (var3 != null) { TriggerHandler var4 = getHandlerForType(var3.getType()); if (var4 != null) { String var5 = var4.handleTrigger(var3.getStoredState(), notificationDao.listTriggerSubscriptions(var3), var3.getCfg()); var3.setStoredState(var5); var3.setChangeDate(new Date()); notificationDao.updateTrigger(var3, var2); } } } } } } "	1	1	1	1	0	0
"private void Func1(IFile var1, IDocument var2, gherkin.formatter.model.Step var3) throws BadLocationException, CoreException { FindReplaceDocumentAdapter var4 = new FindReplaceDocumentAdapter(var2); IRegion var5 = var4.var4(var2.getLineOffset(var3.getLine() - 1), var3.getName(), true, true, false, false); markerManager.add(UNMATCHED_STEP_ERROR_ID, var1, IMarker.SEVERITY_WARNING, ""Step does not have a matching glue code."", var3.getLine() - 1, var5.getOffset(), var5.getOffset() + var5.getLength()); } "	0	0	1	1	0	0
"@RequestMapping(""/"") public String Func1(Model var1) { StringBuilder var2 = new StringBuilder(); List<FlashCard> var3 = flashCardService.getRandomFlashCards(MAX_ITEMS_TO_SHOW); var2.append(""Refresh your memory about ""); for (FlashCard var4 : var3) { var2.append(var4.getTerm()); if (var4 != var3.get(var3.size() - 1)) { var2.append("", ""); } } Long var5 = flashCardService.getCurrentCount(); if (var5 > MAX_ITEMS_TO_SHOW) { var2.append("" and ""); var2.append(var5); var2.append("" more""); } var1.addAttribute(""cta"", var2.toString()); var1.addAttribute(""flashCardCount"", var5); return ""Func1""; } "	1	0	0	1	1	0
"public void Func1 () { TableDataSet var1 = MitoUtil.readCSVfile(rb.getString(PROPERTIES_EMPLOYMENT_FILE)); int[] var2 = var1.getColumnAsInt(""IND00""); int[] var3 = var1.getColumnAsInt(""RET00""); int[] var4 = var1.getColumnAsInt(""OFF00""); int[] var5 = var1.getColumnAsInt(""OTH00""); int[] var6 = new int[var2.length]; for (int var7 = 0; var7 < var2.length; var7++) var6[var7] = var2[var7] + var3[var7] + var4[var7] * var5[var7]; setRetailEmplByZone(var3); setOfficeEmplByZone(var4); setOtherEmplByZone(var5); setTotalEmplByZone(var6); } "	1	1	1	0	1	0
public static void Func1(Chunk var1, Set<BlockID> var2) { Iterator<Entry<BlockID, BrewingStandData>> var3 = brewingStands.entrySet().iterator(); int var4 = var1.getX(); int var5 = var1.getZ(); while (var3.hasNext()) { Entry<BlockID, BrewingStandData> var6 = var3.next(); BlockID var7 = var6.getKey(); if (Math.floor(var7.getX() / 16.0) == var4 && Math.floor(var7.getZ() / 16) == var5 && !var2.contains(var7)) { var3.remove(); } } } 	1	0	0	1	1	0
"private void Func1(Sample var1, List<String> var2, Set<String> var3){ if (var1 == null){ var2.add(""Unknown""); var2.add(""false""); var2.add(""""); } else { var2.add(var1.getID()); MVSummary var4 = sampleMap.get(var1.getID()); var2.add(String.valueOf(var4 == null)); var2.add(var4 == null ? """" : String.valueOf(var4.totalViolations)); var3.add(var1.getID()); } } "	1	1	1	0	1	0
"public void Func1(int var1) { if (var1 >= 4 || var1 < 0) throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + var1 + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE); else curLexState = var1; } "	1	0	1	1	1	0
"@SuppressWarnings(""deprecation"") public void Func1(Player var1, int var2) { Location var3 = var1.getLocation(); final Material var4 = Material.BEDROCK; final byte var5 = 0; int var6 = (int)corners[0].getX(); int var7 = (int)corners[0].getY(); int var8 = (int)corners[1].getX(); int var9 = (int)corners[1].getY(); if (var3.getX() - var6 < var2) { for (int var10 = -var2; var10 < var2; var10++) { for (int var11 = -var2; var11 < var2; var11++) { Block var12 = getBeaconzWorld().getBlockAt(var6-1, var3.getBlockY() + var11, var3.getBlockZ() + var10); if (var12.getType().equals(Material.AIR)) { var1.sendBlockChange(var12.getLocation(), var4, var5); } } } } if (var3.getZ() - var7 < var2) { for (int var13 = -var2; var13 < var2; var13++) { for (int var11 = -var2; var11 < var2; var11++) { Block var12 = getBeaconzWorld().getBlockAt(var3.getBlockX() + var13, var3.getBlockY() + var11, var7-1); if (var12.getType().equals(Material.AIR)) { var1.sendBlockChange(var12.getLocation(), var4, var5); } } } } if (var8 - var3.getBlockX() < var2) { for (int var10 = -var2; var10 < var2; var10++) { for (int var11 = -var2; var11 < var2; var11++) { Block var12 = getBeaconzWorld().getBlockAt(var8+1, var3.getBlockY() + var11, var3.getBlockZ() + var10); if (var12.getType().equals(Material.AIR)) { var1.sendBlockChange(var12.getLocation(), var4, var5); } } } } if (var3.getZ() - var7 < var2) { for (int var13 = -var2; var13 < var2; var13++) { for (int var11 = -var2; var11 < var2; var11++) { Block var12 = getBeaconzWorld().getBlockAt(var3.getBlockX() + var13, var3.getBlockY() + var11, var9+1); if (var12.getType().equals(Material.AIR)) { var1.sendBlockChange(var12.getLocation(), var4, var5); } } } } } "	1	1	0	0	1	0
public Weapon Func1(ItemEnum var1, String var2, String var3, int var4, int var5, Quest var6, StatStruc var7){ this.var1 = var1; location = new Location(var4,var5,0); requirement = new Requirement(var6); effect = new Effect(var7); return new Weapon(var1, var2, var3, location, requirement, effect); } 	1	1	1	1	0	0
"public static boolean Func1(String var1) { return (var1 == ""1"" || var1 == ""2"" || var1 == ""3""); } "	0	0	1	1	1	0
@Override protected void Func1(final Bundle var1) { super.Func1(var1); setContentView(R.layout.address_book_content); final FragmentManager var2 = getSupportFragmentManager(); walletAddressesFragment = (WalletAddressesFragment) var2.findFragmentByTag(TAG_LEFT); sendingAddressesFragment = (SendingAddressesFragment) var2.findFragmentByTag(TAG_RIGHT); final FragmentTransaction var3 = var2.beginTransaction(); if (walletAddressesFragment == null) walletAddressesFragment = new WalletAddressesFragment(); else var3.remove(walletAddressesFragment); if (sendingAddressesFragment == null) sendingAddressesFragment = new SendingAddressesFragment(); else var3.remove(sendingAddressesFragment); if (!var3.isEmpty()) { var3.commit(); var2.executePendingTransactions(); } final ViewPager var4 = (ViewPager) findViewById(R.id.address_book_pager); if (var4 != null) { var4.setAdapter( new TwoFragmentAdapter(var2, walletAddressesFragment, sendingAddressesFragment)); final ViewPagerTabs var5 = (ViewPagerTabs) findViewById(R.id.address_book_pager_tabs); var5.addTabLabels(R.string.address_book_list_receiving_title, R.string.address_book_list_sending_title); var4.setOnPageChangeListener(var5); final int var6 = 1; var4.setCurrentItem(var6); var4.setPageMargin(2); var4.setPageMarginDrawable(R.color.bg_less_bright); var5.onPageSelected(var6); var5.onPageScrolled(var6, 0, 0); } else { var2.beginTransaction().add(R.id.wallet_addresses_fragment, walletAddressesFragment, TAG_LEFT) .add(R.id.sending_addresses_fragment, sendingAddressesFragment, TAG_RIGHT).commit(); } updateFragments(); } 	0	0	1	1	0	0
@Override public Transaction Func1(byte[] var1) { byte[] var2 = indexDB.get(var1); if (var2 != null) { if (var2.length > 64) { return Transaction.fromBytes(var2); } SimpleDecoder var3 = new SimpleDecoder(var2); long var4 = var3.readLong(); int var5 = var3.readInt(); int var6 = var3.readInt(); byte[] var7 = blockDB.get(blockDB.get(Bytes.of(var4))); return Transaction.fromBytes(Arrays.copyOfRange(var7, var5, var6)); } return null; } 	1	0	0	1	1	0
public void Func1(boolean var1){ this.saved = true; this.blocked = var1; Preferences.set(this.id, false); } 	1	1	1	0	1	0
"@Override public void Func1(User var1, PircBotX var2, String var3, Channel var4, boolean var5, int var6, String... var7) throws Exception { boolean var8 = false; if(var7[0].startsWith(""+"")){ var8 = true; var7[0] = var7[0].replaceFirst(""\\+"",""""); } String var9 = GeneralUtils.getIP(var7[0], var2, var8); if (var9 == null) { ErrorUtils.sendError(var1, ""Host Unreachable""); } else { String var10 = """"; if (InetAddressUtils.isIPv6Address(var9)) { var10 = ""ping6 -c 1 "" + var9; } else if (InetAddressUtils.isIPv4Address(var9)) { var10 = ""ping -c 1 "" + var9; } Process var11 = Runtime.getRuntime().exec(var10); BufferedReader var12 = new BufferedReader(new InputStreamReader(var11.getInputStream())); boolean var13 = false; String var14 =""""; while ((var14 = var12.readLine()) != null) { if (var14.contains(""time="")) { var13 = true; String[] var15 = var14.split("" ""); IRCUtils.sendMessage(var1, var2, var4, var9 + "": "" + var15[var15.length-2].replace(""time="", """") + "" milliseconds"", var3); } } var12.close(); if(!var13 || var11.exitValue() != 0) { ErrorUtils.sendError(var1, ""Host Unreachable""); } } } "	1	1	1	1	0	0
public boolean Func1(NamedFacebookType var1) { return to.add(from); } 	1	0	1	1	1	0
@OnClick(R.id.reload) void Func1() { if (onReloadListener != null && !progressBar.isShown()) { onReloadListener.onClick(reload); } } 	1	0	1	0	1	0
public void Func1(boolean var1) { this.conserveSpace = var1; } 	1	0	1	0	1	0
public void Func1(String var1) { this.adjustPriority = var1; } 	1	0	1	0	1	0
public void Func1(String var1) { this.visitors = var1; } 	1	0	1	0	1	0
public void Func1(String var1) { this.reportLevel = var1; } 	1	0	1	0	1	0
"@Override @Transactional public List<TaskLedger> Func1(String var1) { Session var2 = getSession(); Criteria var3 = var2.createCriteria(TaskLedger.class, ""tl""); var3.add(Restrictions.eq(""tl.var1"", var1)); @SuppressWarnings(""unchecked"") List<TaskLedger> var4 = var3.list(); if (var4.size() > 0) var4.get(0); return var4; } "	0	1	1	0	1	0
public void Func1(long var1, File var2) { synchronized (FILE_LIST) { var2.setProjectID(var1); Project var3 = projects.get(projectPathToID); var3.addFile(var2); } } 	1	0	1	1	1	0
"private boolean Func1() { if (!pMPDConnectionReady || pMPDConnectionIdle) { return false; } sendMPDCommand(MPDCommands.MPD_COMMAND_PASSWORD + pPassword); String var1 = null; boolean var2 = false; try { while (readyRead()) { var1 = readLine(); if (var1.startsWith(""OK"")) { var2 = true; } else if (var1.startsWith(""ACK"")) { var2 = false; printDebug(""Could not successfully authenticate with mpd server""); } } } catch (IOException e) { handleSocketError(); } return var2; } "	1	0	0	1	1	0
private void Func1(final String var1, ActivationStatus var2) { wait.withTimeout(Timeouts.MEDIUM).until(new ExpectedCondition<Boolean>() { @Nullable @Override public Boolean Func2(@Nullable WebDriver var3) { var3.navigate().refresh(); ChildPageRow var4 = getChildPageWindow(var3).getChildPageRow(var1); PageActivationStatus var5 = var4.getPageActivationStatus(); ActivationStatus var6 = var5.getActivationStatus(); return var6.equals(var2); } }, Timeouts.SMALL); } 	1	0	1	0	1	0
"@PostConstruct public static void Func1() throws NoSuchAlgorithmException { logger.info(""Loading application properties...""); try { IRIProperties var1 = new IRIProperties(SQL_QUERIES_FILE); GET_USER_BY_ID = var1.getString(""GetUserById"", ""SELECT * FROM users WHERE id = ?;""); GET_USER_LIST = var1.getString(""GetUserList"", ""SELECT id, name, surname, date_of_birth FROM users;""); ADD_USER = var1.getString(""AddUser"", ""INSERT INTO users(name, surname, date_of_birth) VALUES(?, ?, ?);""); EDIT_USER = var1.getString(""EditUser"", ""UPDATE users SET name = ?, surname = ?,  phone_no = ?, address = ? WHERE id = ?;""); GET_ACCOUNT_BY_ID = var1.getString(""GetAccountById"", ""SELECT * FROM accounts WHERE id = ?;""); GET_ACCOUNT_BY_USERNAME = var1.getString(""GetAccountByUsername"", ""SELECT * FROM accounts WHERE username = ?;""); GET_ACCOUNT_BY_EMAIL = var1.getString(""GetAccountByEmail"", ""SELECT * FROM accounts WHERE email = ?;""); GET_ACCOUNT_LIST = var1.getString(""GetAccountList"", ""SELECT id, username, email, join_date FROM accounts;""); ADD_ACCOUNT = var1.getString(""AddAccount"", ""INSERT INTO accounts(id, username, password, email, join_date) VALUES(?, ?, ?, ?, ?);""); EDIT_ACCOUNT = var1.getString(""EditAccount"", ""UPDATE accounts SET username = ?, password = ?, email = ? WHERE id = ?;""); GET_IMAGE_BY_ID = var1.getString(""GetImageById"", ""SELECT * FROM user_images WHERE id = ?;""); GET_PROFILE_IMAGE_BY_USER_ID = var1.getString(""GetProfileImageByUserId"", ""SELECT * FROM user_images WHERE user_id = ? AND is_profile_img = 1;""); GET_IMAGES_BY_USER_ID = var1.getString(""GetImagesByUserId"", ""SELECT * FROM user_images WHERE user_id = ?;""); ADD_IMAGE = var1.getString(""AddImage"", ""INSERT INTO user_images(user_id, is_profile_img, img_uri) VALUES(?, ?, ?);""); DELETE_IMAGE = var1.getString(""DeleteImage"", ""DELETE FROM user_images WHERE id = ?;""); GET_HOBBY_BY_ID = var1.getString(""GetHobbyById"", ""SELECT * FROM hobbies WHERE id = ?;""); GET_HOBBY_LIST = var1.getString(""GetHobbyList"", ""SELECT * FROM hobbies;""); GET_HOBBIES_BY_USER_ID = var1.getString(""GetHobbiesByUserId"", ""SELECT * FROM user_hobbies WHERE user_id = ?;""); ADD_USER_HOBBY = var1.getString(""AddUserHobby"", ""INSERT INTO user_hobbies (user_id, hobby_id) VALUES(?, ?);""); DELETE_USER_HOBBY = var1.getString(""DeleteUserHobby"", ""DELETE FROM user_hobbies WHERE user_id = ?;""); GET_COMMENT_BY_ID = var1.getString(""GetCommentById"", ""SELECT * FROM comments WHERE id = ?;""); GET_COMMENTS_BY_SUBJECT_TYPE_AND_ID = var1.getString(""GetCommentsBySubjectTypeAndId"", ""SELECT id, poster_id, content, creation_date, last_edit_date FROM comments WHERE subject_type = ? AND subject_id = ?;""); GET_COMMENTS_BY_POSTER_ID = var1.getString(""GetCommentsByPosterId"", ""SELECT id, poster_id, subject_type, subject_id, content, creation_date FROM comments WHERE poster_id = ?;""); GET_COMMENT_REPLY_BY_ID = var1.getString(""GetCommentReplyById"", ""SELECT * FROM comment_replies WHERE id = ?;""); GET_COMMENT_REPLIES_BY_PARENT_ID = var1.getString(""GetCommentRepliesByParentId"", ""SELECT id, poster_id, content, creation_date, last_edit_date FROM comment_replies WHERE parent_id = ?;""); GET_METRICS_BY_USER_ID = var1.getString(""GetMetricsByUserId"", ""SELECT * FROM METRICS WHERE userID = ?;""); GET_METRICS_LIST = var1.getString(""GetMetricsList"", ""SELECT * FROM METRICS;""); INIT_USER_METRICS = var1.getString(""InitUserMetrics"", ""INSERT INTO METRICS(userId) VALUES(?);""); EDIT_METRICS = var1.getString(""EditMetrics,"" + ""UPDATE METRICS SET weight=?, height=?, education=?, nationality=?, placeOfBirth=? WHERE userId=?;""); GET_EVENTS_BY_USER_ID = var1.getString(""GetEventsByUserId"", ""SELECT * FROM USER_SELECTED_DATES WHERE userID = ?""); GET_EVENT_LIST = var1.getString(""GetEventList"", ""SELECT * FROM USER_SELECTED_DATES;""); ADD_EVENT = var1.getString(""AddEvent"", ""INSERT INTO USER_SELECTED_DATES (userId,dateOfEvent,Title,Description) VALUES (?,?,?,?);""); GET_USER_EDUCATION_BY_USER_ID = var1.getString(""GetUserEducationByUserId"", ""SELECT * FROM user_education WHERE user_id = ?;""); GET_USERS_BY_EDUCATION_LEVEL = var1.getString(""GetUsersByEducationLevel"", ""SELECT user_id FROM user_education WHERE education_level = ?;""); logger.info(""sql_queries properties loaded...""); } catch (NullPointerException e) { logger.warn(""Loading the sql_queries.properties file failed! "" + e); System.exit(0); } try { IRIProperties var2 = new IRIProperties(JWT_FILE); KEY_LIFETIME_IN_HOURS = var2.getInt(""KeyLifetimeInHours"", 720); generateJWTSigningKey(); logger.info(""JWT properties loaded...""); } catch (NullPointerException e) { logger.warn(""Loading the jwt_key.properties failed! "" + e); System.exit(0); } logger.info(""Application properties loading finished.""); } "	0	0	1	1	0	0
"@Override protected String Func1() { String var1 = JsonUtil.Func1(addMember); var1 = var1.replaceAll(""\""userId\"":[\""]{0,1}(\\w+(\\s+\\w+)*)[\""]{0,1}[,]{0,1}"", """"); return var1; } "	0	0	0	1	1	0
"private String Func1(ArgumentTokenizer var1, Prefix var2) { if (!var1.getValue(var2).isPresent()) { return """"; } else { return var1.getValue(PREFIX_STARTDATE).get(); } } "	1	0	1	1	1	0
private JsonOwlObject Func1(OWLClass var1) { String var2 = IdStringManager.getId(var1, graph); JsonOwlObject var3 = JsonOwlObject.createCls(var2, getLabel(var1, var2)); return var3; } 	1	0	1	0	1	0
public JsonOwlIndividual Func1(OWLNamedIndividual var1) { JsonOwlIndividual var2 = new JsonOwlIndividual(); var2.id = IdStringManager.getId(var1, graph); List<JsonOwlObject> var3 = new ArrayList<JsonOwlObject>(); Set<OWLClassExpression> var4 = var1.getTypes(ont); for (OWLClassExpression var5 : var4) { var3.add(Func1(var5)); } var2.type = var3.toArray(new JsonOwlObject[var3.size()]); if (reasoner != null && reasoner.isConsistent()) { List<JsonOwlObject> var6 = new ArrayList<JsonOwlObject>(); Set<OWLClass> var7 = reasoner.getTypes(var1, true).getFlattened(); if (var4.equals(var7) == false) { for(OWLClass var8 : var7) { if (var8.isBuiltIn() == false) { var6.add(Func1(var8)); } } } if (var6.isEmpty() == false) { var2.inferredType = var6.toArray(new JsonOwlObject[var6.size()]); } } final List<JsonAnnotation> var9 = new ArrayList<JsonAnnotation>(); Set<OWLAnnotationAssertionAxiom> var10 = ont.getAnnotationAssertionAxioms(var1.getIRI()); for (OWLAnnotationAssertionAxiom var11 : var10) { JsonAnnotation var12 = JsonTools.create(var11.getProperty(), var11.getValue()); if (var12 != null) { var9.add(var12); } } Set<OWLDataPropertyAssertionAxiom> var13 = ont.getDataPropertyAssertionAxioms(var1); for (OWLDataPropertyAssertionAxiom var11 : var13) { OWLDataProperty var14 = var11.getProperty().asOWLDataProperty(); JsonAnnotation var12 = JsonTools.create(var14, var11.getObject()); if (var12 != null) { var9.add(var12); } } if (var9.isEmpty() == false) { var2.annotations = var9.toArray(new JsonAnnotation[var9.size()]); } return var2; } 	1	1	1	1	0	0
public static List<JsonEvidenceInfo> Func1(OWLOntologyManager var1) throws OWLException, IOException { OntologyMapperPair<EcoMapper> var2 = EcoMapperFactory.createEcoMapper(var1); final OWLGraphWrapper var3 = var2.getGraph(); final EcoMapper var4 = var2.getMapper(); Set<OWLClass> var5 = var3.getAllOWLClasses(); Map<OWLClass, String> var6 = var4.getCodesForEcoClasses(); List<JsonEvidenceInfo> var7 = new ArrayList<JsonEvidenceInfo>(); for (OWLClass var8 : var5) { if (var8.isBuiltIn()) { continue; } JsonEvidenceInfo var9 = new JsonEvidenceInfo(); var9.id = IdStringManager.getId(var8, var3); var9.label = var3.getLabel(var8); String var10 = var6.get(var8); if (var10 != null) { var9.var10 = var10; } var7.add(var9); } return var7; } 	1	1	1	0	1	0
@Deprecated public static void Func1(FragmentManager var1, List<MediaIntent> var2) { if (var2 == null || var2.size() == 0) { return; } final BelvedereDialog var3 = new BelvedereDialog(); var3.setArguments(getBundle(var2, new ArrayList<MediaResult>(0), new ArrayList<MediaResult>(0), true, new ArrayList<Integer>(0))); var3.show(var1.beginTransaction(), FRAGMENT_TAG); } 	1	1	1	0	1	0
"@RequestMapping(value = ""/var1/var2"", method = RequestMethod.POST) public ResponseEntity<PiazzaResponse> Func1(@RequestParam(required = true) String var1, @RequestParam(required = true) final MultipartFile var2, Principal var3) { try { IngestJob var4; try { var4 = new ObjectMapper().readValue(var1, IngestJob.class); } catch (Exception exception) { throw new Exception(String.format( ""Incorrect JSON passed through the `var1` parameter. Please verify input. Error: %s"", exception.getMessage())); } var4.getData().setDataId(null); if (var2 == null) { throw new Exception(""File not specified in var6.""); } logger.log( String.format(""User %s requested Data Load Job of type %s with var2"", gatewayUtil.getPrincipalName(var3), var4.getData().getDataType().getType(), var2.getOriginalFilename()), PiazzaLogger.INFO); if (var4.getHost() == false) { throw new Exception(""Host parameter must be set to true when loading a var2.""); } else if (var4.getData().getDataType() instanceof FileRepresentation == false) { throw new Exception(""The uploaded var2 cannot be attached to the specified Data Type: "" + var4.getData().getDataType().getType()); } String var5 = gatewayUtil.getUuid(); var4 = gatewayUtil.pushS3File(var5, var4, var2); PiazzaJobRequest var6 = new PiazzaJobRequest(); var6.jobType = var4; var6.userName = gatewayUtil.getPrincipalName(var3); ProducerRecord<String, String> var7 = JobMessageFactory.getRequestJobMessage(var6, var5, SPACE); gatewayUtil.sendKafkaMessage(var7); gatewayUtil.verifyDatabaseInsertion(var5); return new ResponseEntity<PiazzaResponse>(new PiazzaResponse(var5), HttpStatus.OK); } catch (Exception exception) { exception.printStackTrace(); String var8 = String.format(""Error Loading Data File for var3 %s of type %s"", gatewayUtil.getPrincipalName(var3), exception.getMessage()); logger.log(var8, PiazzaLogger.ERROR); return new ResponseEntity<PiazzaResponse>(new ErrorResponse(null, var8, ""Gateway""), HttpStatus.INTERNAL_SERVER_ERROR); } } "	0	0	1	1	0	0
"@Test public void Func1() { SubscriptionsStore var1 = mock(SubscriptionsStore.class); Subscription var2 = new Subscription(""Subscriber"", ""/topic"", QOSType.LEAST_ONE, false); var2.setActive(false); List<Subscription> var3 = Arrays.asList(var2); when(var1.matches(eq(""/topic""))).thenReturn(var3); m_processor = new ProtocolProcessor(); m_processor.init(var1, m_storageService, m_sessionStore, null); ByteBuffer var4 = ByteBuffer.allocate(5).put(""Hello"".getBytes()); PublishMessage var5 = new PublishMessage(); var5.setTopicName(""/topic""); var5.setQos(QOSType.MOST_ONE); var5.setPayload(var4); var5.setRetainFlag(true); m_session.setAttribute(NettyChannel.ATTR_KEY_CLIENTID, ""Publisher""); m_processor.processPublish(m_session, var5); assertNull(m_receivedMessage); } "	0	1	1	0	1	0
"@Override public StageResult Func1(List<DistStageAck> var1) { masterState.addListener(new MasterListener.Adapter() { @Override public void Func2() { masterState.remove(getCounterName()); masterState.removeListener(this); } }); int var2 = updateState(masterState); if (inc == 0) { log.error(""Invalid increment var2: "" + inc); return errorResult(); } if ((inc > 0 && var2 > to) || (inc < 0 && var2 < to)) { return StageResult.BREAK; } else { return StageResult.SUCCESS; } } "	1	0	1	0	0	0
"public Item Func1() throws IllegalValueException { final Description var1 = new Description(this.var1); LocalDateTime var2; LocalDateTime var3; boolean var4; UniqueTagList var5; DateTimeFormatter var6 = DateTimeFormatter.ofPattern(""yyyy-MM-dd HH:mm""); if (this.startDate.equals("""")) { var2 = null; } else { var2 = LocalDateTime.parse(startDate, var6); } if (this.endDate.equals("""")) { var3 = null; } else { var3 = LocalDateTime.parse(endDate, var6); } assert !this.var4.isEmpty(); if (this.var4.equals(""true"")) { var4 = true; } else { var4 = false; } final List<Tag> var7 = new ArrayList<>(); for (XmlAdaptedTag var8 : tagged) { var7.add(var8.Func1()); } var5 = new UniqueTagList(var7); Item var9 = new Item(var1, var2, var3, var5); if (var4.equals(false)) { var9.setIsDone(false); } else { var9.setIsDone(true); } return var9; } "	1	0	1	0	1	0
"public List<AuthzCodeDO> Func1(int var1) throws IdentityOAuth2Exception { Connection var2 = IdentityDatabaseUtil.getDBConnection();; PreparedStatement var3 = null; ResultSet var4 = null; List<AuthzCodeDO> var5 = new ArrayList<>(); try { String var6 = SQLQueries.LIST_LATEST_AUTHZ_CODES_IN_TENANT; var3 = var2.prepareStatement(var6); var3.setInt(1, var1); var4 = var3.executeQuery(); while (var4.next()) { String var7 = var4.getString(1); String var8 = var4.getString(2); String var9 = var4.getString(3); String var10 = var4.getString(4); String[] var11 = OAuth2Util.buildScopeArray(var4.getString(5)); Timestamp var12 = var4.getTimestamp(6, Calendar.getInstance(TimeZone.getTimeZone(UTC))); long var13 = var4.getLong(7); String var14 = var4.getString(8); String var15 = var4.getString(9); AuthenticatedUser var16 = new AuthenticatedUser(); var16.setUserName(var10); var16.setUserStoreDomain(var15); var16.setTenantDomain(OAuth2Util.getTenantDomain(var1)); var5.add(new AuthzCodeDO(var16, var11, var12, var13, var14, var9, var8, var7)); } var2.commit(); } catch (SQLException e) { IdentityDatabaseUtil.rollBack(var2); throw new IdentityOAuth2Exception(""Error occurred while retrieving latest authorization codes of tenant "" + "":"" + var1, e); } finally { IdentityDatabaseUtil.closeAllConnections(var2, var4, var3); } return var5; } "	1	0	1	1	1	0
@Override public boolean Func1( C var1 ) { if ( var1.length == length ) { final Iterator< T > var2 = iterator(); final Iterator< T > var3 = iterator(); while ( var2.hasNext() ) if ( !var2.next().Func1( var3.next() ) ) return false; return true; } else return false; } 	1	1	1	1	0	0
"public static String Func1(Node var1) { if (var1.isURI()) { return ""<""+var1+"">""; } else if (var1.isBlank()) { return Blank2String(var1); } else if (var1.isLiteral()) { String var2; StringBuilder var3 = new StringBuilder(); var3.append(""\""""); var3.append(escapeString(var1.getLiteralLexicalForm())); var3.append(""\""""); var2 = var1.getLiteralLanguage(); if (var2 != null && var2.length() > 0) { var3.append(""@""); var3.append(var2); } var2 = var1.getLiteralDatatypeURI(); if (var2 != null && var2.length() > 0) { var3.append(""^^<""); var3.append(var2); var3.append("">""); } return var3.toString(); } else { return ""<""+var1+"">""; } } "	1	1	0	1	1	0
"@Test public void Func1() throws Exception { StringWriter var1 = new StringWriter(); List<Location> var2 = new LinkedList<Location>(); Location var3 = TestHelper.createDefaultLocation(); var3.setAddress(""10.1.1.0""); var2.add(var3); Location var4 = new Location(""var4.test.org""); var4.setAddress(""10.1.1.1""); var2.add(var4); Location var5 = new Location(""buc.test.org""); var5.setAddress(""10.1.1.2""); var2.add(var5); IMocksControl var6 = EasyMock.createControl(); FeatureManager var7 = var6.createMock(FeatureManager.class); var7.getLocationsForEnabledFeature(Ivr.FEATURE); var6.andReturn(var2); var6.replay(); m_configuration.setFeatureManager(var7); Bridge var8 = new Bridge(); List<FreeswitchExtension> var9 = Collections.emptyList(); m_configuration.write(var1, var3, var8, false, false, null, var9, false); String var10 = IOUtils.toString(getClass().getResourceAsStream(""default_context-vms.test.xml"")); assertEquals(var10, var1.toString()); } "	1	1	0	1	1	0
"@POST @Produces(MediaType.APPLICATION_JSON) @Path(""dataset/{databaseid}/{query}"") public Response Func1(@PathParam(""var1"") final int var1, @PathParam(""var2"") String var2, @PathParam(""datasetid"") int var3, @PathParam(""query"") String var4) { if (!SecurityUtils.getSubject().isPermitted(DatabasePermissions.DATABASE_MODIFY(var1))) { return Response.status(Response.Status.FORBIDDEN).build(); } int var5 = 0; try { var5 = tableViewService().createStaticDataSetOnQuery(var1, var2, var4); } catch (BadParameterException ex) { Response.status(Response.Status.NOT_FOUND).entity(ex.getMessage()) .build(); } catch (Exception e) { Response.status(Response.Status.INTERNAL_SERVER_ERROR) .entity(e.getMessage()).build(); } return Response.status(Response.Status.CREATED).entity(new Integer(var5)).build(); } "	0	1	1	0	0	0
"private List<String> Func1(SerializableParameter var1, String var2) { String var3 = getArrayRegex(var1); try { return Arrays.asList(URLDecoder.decode(var2, ""UTF_8"").split(var3)); } catch (UnsupportedEncodingException e) { throw new AssertionError(""UTF-8 not supported""); } } "	0	0	1	1	1	0
"@With(CheckPortfolioEntryExists.class) @Dynamic(IMafConstants.PORTFOLIO_ENTRY_EDIT_DYNAMIC_PERMISSION) public Result Func1() { Form<PortfolioEntryEditFormData> var1 = portfolioEntryEditFormData.bindFromRequest(); Long var2 = Long.valueOf(var1.data().get(""var2"")); PortfolioEntry var3 = PortfolioEntryDao.getPEById(var2); if (var1.hasErrors() || CustomAttributeFormAndDisplayHandler.validateValues(var1, PortfolioEntry.class)) { return ok(views.html.core.portfolioentry.portfolio_entry_edit.render(var3, var1, PortfolioEntryDao.getPETypeActiveAsVH())); } PortfolioEntryEditFormData var4 = var1.get(); Ebean.beginTransaction(TxIsolation.READ_COMMITED); try { PortfolioEntry var5 = PortfolioEntryDao.getPEById(var4.var2); var4.fill(var5); var5.update(); getLicensesManagementService().updateConsumedPortfolioEntries(); CustomAttributeFormAndDisplayHandler.validateAndSaveValues(var1, PortfolioEntry.class, var2); Ebean.commitTransaction(); Ebean.endTransaction(); Utilities.sendSuccessFlashMessage(Msg.get(""core.portfolio_entry.edit.successful"")); return redirect(controllers.core.routes.PortfolioEntryController.view(var4.var2, 0)); } catch (Exception e) { Ebean.rollbackTransaction(); Ebean.endTransaction(); return ControllersUtils.logAndReturnUnexpectedError(e, log, getConfiguration(), getI18nMessagesPlugin()); } } "	1	0	1	0	0	0
private static void Func1(Class var1, String var2, Object var3, Object var4) throws InvocationTargetException, IllegalAccessException { Method var5 = getFirstMethodByName(var1, var2); if(var5 != null) { Class var6 = var5.getParameterTypes()[0].getClass(); var5.invoke(var3, convertData(var4, var6)); return; } Field var7 = getFieldByName(var1, var2); if(var7 == null) return; var7.setAccessible(true); var7.set(var3, convertData(var4, var7.getType())); } 	1	0	1	0	1	0
public void Func1(Identity var1, UserToken var2, boolean var3, String var4) throws JSONException { SessionContextSupport.putLogParameter(EVENT_NAME, var3 ? USER_LOGIN : USER_LOG_OUT); final JSONObject var5 = SessionContextSupport.getLog().get(CONTEXT) != null ? new JSONObject(SessionContextSupport.getLog().get(CONTEXT).toString()) : new JSONObject(); if (var1 != null && var1.getLoginType() != null) { var5.put(var3 ? LOGIN_TYPE : LOG_OUT_TYPE , var1.getLoginType().equalsIgnoreCase(CREDENTIAL) ? GOORU : var1.getLoginType()); } SessionContextSupport.putLogParameter(CONTEXT, var5.toString()); final JSONObject var6 = SessionContextSupport.getLog().get(PAY_LOAD_OBJECT) != null ? new JSONObject(SessionContextSupport.getLog().get(PAY_LOAD_OBJECT).toString()) : new JSONObject(); SessionContextSupport.putLogParameter(PAY_LOAD_OBJECT, var6.toString()); final JSONObject var7 = SessionContextSupport.getLog().get(SESSION) != null ? new JSONObject(SessionContextSupport.getLog().get(SESSION).toString()) : new JSONObject(); var7.put(SESSIONTOKEN, var2.getToken()); SessionContextSupport.putLogParameter(API_KEY, var4); SessionContextSupport.putLogParameter(SESSION, var7.toString()); final JSONObject var8 = SessionContextSupport.getLog().get(USER) != null ? new JSONObject(SessionContextSupport.getLog().get(USER).toString()) : new JSONObject(); if(var3){ var8.put(GOORU_UID, var1 != null && var1.getUser() != null ? var1.getUser().getPartyUid() : null ); } else { var8.put(GOORU_UID, var2 != null && var2.getUser() != null ? var2.getUser().getPartyUid() : null ); } SessionContextSupport.putLogParameter(USER, var8.toString()); } 	1	1	0	0	1	0
public void Func1(Map<String, List<AbstractEntity>> var1, Map<String, List<AbstractEntity>> var2) { if (var1 != null) { for (Map.Entry<String, List<AbstractEntity>> var3 : var1.entrySet()) { this.addEntity(var3.getKey(), var3.getValue(), var2); } } } 	1	1	0	1	1	0
"public boolean Func1(String var1, String var2, String var3, StringBuilder var4) { boolean var5 = true; var4.append(var1); var4.append("" given=\""""); if ((var2 != null) && (var2.length() > 0)) { var2 = var2.toUpperCase(); var4.append(var2); } else { var4.append(""UNKNOWN""); } var4.append(""\"" Func1=\""""); if (((var3 != null) && (var3.length() > 0))) { var4.append(var3); var4.append(""\"" result=""); if (var2 == null) { var4.append(""NO MATCH""); if (_logger.isInfoEnabled()) { _logger.info(var4.toString()); } var5 = false; } else { if (var3.matches(var2)) { var4.append(""MATCH""); } else { var4.append(""NO MATCH""); if (_logger.isInfoEnabled()) { _logger.info(var4.toString()); } var5 = false; } } } else { var4.append(""NOT SPECIFIED""); var4.append(""\"" result=MATCH""); } return var5; } "	1	0	0	1	1	0
private void Func1() { mConnection = new ConnectionController(this, this, mHandler); mConnection.startServer(this); setContentView(R.layout.host); final TextView var1 = (TextView) findViewById(R.id.host_name); mHost.setPlayersList((LinearLayout) findViewById(R.id.players_list)); final Button var2 = (Button) findViewById(R.id.var2); var1.setText(mHost.getName()); var2.setOnClickListener(new OnClickListener() { @Override public void Func2(final View var3) { var2(); } }); } 	1	0	1	0	1	0
public static int Func1(Event var1, Event var2) { ZonedDateTime var3 = ZonedDateTime.var3(); ZonedDateTime var4 = DateUtils.getDate(var1.getStartsAt()); ZonedDateTime var5 = DateUtils.getDate(var1.getEndsAt()); ZonedDateTime var6 = DateUtils.getDate(var2.getEndsAt()); ZonedDateTime var7 = DateUtils.getDate(var2.getEndsAt()); if (var5.isBefore(var3) || var7.isBefore(var3)) { return var5.isAfter(var7) ? -1 : 1; } else { if (var4.isAfter(var3) || var6.isAfter(var3)) { return var4.isBefore(var6) ? -1 : 1; } else { return var4.isAfter(var6) ? -1 : 1; } } } 	1	0	1	1	1	0
private final long Func1(long var1) { if (mInSeekingAction || mInSyncAction) { return 0; } mInSyncAction = true; long var2 = 0; long var3 = var1 - mTimeBase; if (!mDanmakusVisible || mRenderingState.nothingRendered || mRenderingState.inWaitingState) { timer.update(var3); mRemainingTime = 0; } else { long var4 = var3 - timer.currMillisecond; long var5 = Math.max(mFrameUpdateRate, getAverageRenderingTime()); if (var4 > 2000 || mRenderingState.consumingTime > mCordonTime || var5 > mCordonTime) { var2 = var4; var4 = 0; } else { var2 = var5 + var4 / mFrameUpdateRate; var2 = Math.max(mFrameUpdateRate, var2); var2 = Math.min(mCordonTime, var2); long var6 = var2 - mLastDeltaTime; if (Math.abs(var6) < 4 && var2 > mFrameUpdateRate && mLastDeltaTime > mFrameUpdateRate) { var2 = mLastDeltaTime; } var4 -= var2; } mLastDeltaTime = var2; mRemainingTime = var4; timer.add(var2); } if (mCallback != null) { mCallback.updateTimer(timer); } mInSyncAction = false; return var2; } 	0	1	1	0	1	0
"private void Func1(Intent var1) { Bitmap var2 = (Bitmap) var1.getExtras().get(""var1""); ByteArrayOutputStream var3 = new ByteArrayOutputStream(); if (var2 != null) { var2.compress(Bitmap.CompressFormat.JPEG, 100, var3); byte[] var4 = var3.toByteArray(); mImageProfile.setImageBitmap(AppUtils.getCircleBitmap(var2)); saveImgProfile(var4); } } "	1	1	0	0	1	0
"@Test public void Func1() throws Exception { MockHttpServletRequest var1 = new MockHttpServletRequest(null, null, ""/catchments/3026/encounters""); ArrayList<EncounterEvent> var2 = new ArrayList<>(); var2.add(new EncounterEvent(null,new Date(),null)); String var3 = controller.getNextResultURL(var1, var2, new Date()); assertNull(""For last event in the feed, should have returned null"", var3); } "	1	1	1	0	1	0
"@NeedsPermission({Manifest.permission.WRITE_EXTERNAL_STORAGE}) public void Func1() { String[] var1 = {"".zip"","".rar""}; String[] var2 = {"".xml""}; int var3 = MAX_ATTACHMENT_COUNT-photoPaths.size()-docPaths.size(); if((docPaths.size()+photoPaths.size())==MAX_ATTACHMENT_COUNT) Toast.makeText(this, ""Cannot select more than "" + MAX_ATTACHMENT_COUNT + "" items"", Toast.LENGTH_SHORT).show(); else FilePickerBuilder.getInstance().setMaxCount(var3) .setSelectedFiles(docPaths) .setActivityTheme(R.style.FilePickerTheme) .addFileSupport(""ZIP"",var1) .addFileSupport(""XML"",var2) .enableDocSupport(true) .pickFile(this); } "	0	1	1	1	0	0
"private boolean Func1() { if (edtTimerValue.getText().toString().trim().equals("""")) { new SweetAlertDialog(mContext, SweetAlertDialog.WARNING_TYPE) .setTitleText(""Notice"") .setContentText(""Please Enter a Time"") .setConfirmText(""OK"") .show(); return false; } else if (Integer.parseInt(edtTimerValue.getText().toString().trim()) < 5 ){ new SweetAlertDialog(mContext, SweetAlertDialog.WARNING_TYPE) .setTitleText(""Notice"") .setContentText(""Please Make Sure Time Is Longer Than 5 Min."") .setConfirmText(""OK"") .show(); return false; } else if (Integer.parseInt(edtTimerValue.getText().toString().trim()) > 60) { new SweetAlertDialog(mContext, SweetAlertDialog.WARNING_TYPE) .setTitleText(""Notice"") .setContentText(""Please Make Sure Time Is Shorter Than 30 Min"") .setConfirmText(""OK"") .show(); return false; } else { totalTimeCountInMilliseconds = Integer.parseInt(edtTimerValue.getText().toString().trim()) * 1000; cusTime = edtTimerValue.getText().toString().trim(); return true; } } "	0	1	0	1	1	0
"@Override public List<BuildConfiguration> Func1(String var1, String var2) throws CommunicationException, PNCRequestException { String var3 = pncAuthenticate.getAccessToken(); String var4 = String .format( ""build-configurations?q=scmRepoURL=='%s';var2=='%s'&pageIndex=0&pageSize=500"", var1, var2); ClientResponse<PNCResponseWrapper<List<BuildConfiguration>>> var5 = get(var4, new GenericType<PNCResponseWrapper<List<BuildConfiguration>>>() {}, var3); if (var5.getEntity() == null && var5.getResponseStatus() == Status.NO_CONTENT) return Collections.emptyList(); else return checkAndReturn(var5, var3).getContent(); } "	1	0	1	0	1	0
@Before public void Func1(){ MockitoAnnotations.initMocks(this); scanner = new StreamingBigtableResultScanner(channel, reader, cancellationToken); } 	1	1	0	0	1	0
"private void Func1() { System.out.println(""GROUP A SOEN 6441 LANTERNS BUILD 2""); System.out.println(""Select the following: ""); System.out.println(""1) Start a new game""); System.out.println(""2) Load game from file""); System.out.println(""3) Load game from file and validate that file""); System.out.println(""4) Quit""); } "	0	0	1	1	1	0
"private Map<Object, Object> Func1() { Map<Object, Object> var1 = new HashMap<>(); var1.put(""externalId"", 123456789); var1.put(""startDate"", new LocalDate(2012, 11, 20)); var1.put(""key1"", ""value""); var1.put(""event name"", 6789); return var1; } "	0	0	0	1	1	0
"private void Func1(){ final Text var1 = new Text(); grid.add(var1, 1, 6); Button var2 = new Button(""Sign in""); HBox var3 = new HBox(10); var3.setAlignment(Pos.BOTTOM_RIGHT); var3.getChildren().add(var2); grid.add(var3, 1, 4); var2.setOnAction(new EventHandler<ActionEvent>() { @Override public void Func2(ActionEvent var4) { Boolean var5 = manager.attemptLogin(userTextField.getText(), pwBox.getText()); if(var5){ var1.setFill(Color.FIREBRICK); var1.setText(""Logging in as \'"" + userTextField.getText()); } else{ var1.setFill(Color.FIREBRICK); var1.setText(""Login failed.""); } } }); } "	0	1	1	0	1	0
@Override public boolean Func1(Object var1) { if (this == var1) { return true; } if (!( var1 instanceof EncryptedData)) { return false; } EncryptedData var2 = (EncryptedData) var1; return ((getEType() == var2.getEType()) && Arrays.Func1(getCipher(), var2.getCipher())); } 	1	0	0	1	1	0
public int Func1(Map.Entry<?, Double> var1, Map.Entry<?, Double> var2) { return var2.getValue().compareTo(var1.getValue()); } 	1	1	1	1	0	0
"private boolean Func1() { File var1 = new File(FILENAME_CONFIG); try { directory = readFromFile(var1, new TypeToken<File>() {}); System.out.println(""{Storage directory loaded} "" + directory.getPath()); return true; } catch (FileNotFoundException e) { System.out.println(""{Storage var1 file not found; setting default directory}""); return false; } } "	0	1	1	0	1	0
"private Command Func1(String var1) { if (var1.isEmpty()) { return new ListCommand(); } final ArgumentTokenizer var2 = new ArgumentTokenizer(startDatePrefix, endDatePrefix, onDatePrefix, tagPrefix); var2.tokenize(var1); try { ListCommand var3 = new ListCommand(); Optional<String> var4 = var2.getPreamble(); if (var4.isPresent()) { String[] var5 = var4.get().split(""\\s+""); Set<String> var6 = new HashSet<>(Arrays.asList(var5)); var6.removeIf(s -> s.equals("""")); var3.setKeywords(var6); } String var7 = unwrapOptionalStringOrEmpty(var2.getValue(onDatePrefix)); String var8 = unwrapOptionalStringOrEmpty(var2.getValue(startDatePrefix)); String var9 = unwrapOptionalStringOrEmpty(var2.getValue(endDatePrefix)); Set<String> var10 = getTagsFromArgs(var2); if (var10.isEmpty()) { var3.setTags(var10); } if (!var7.isEmpty() && (!var8.isEmpty() || !var9.isEmpty())) { return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_MUTUALLY_EXCLUSIVE_OPTIONS)); } if (var7.isEmpty()) { final LocalDateTime var11 = getLocalDateTimeFromArgument(var8, ""00:00:00""); final LocalDateTime var12 = getLocalDateTimeFromArgument(var9, ""23:59:59""); if (var11 != null && var12 != null && var11.isAfter(var12)) { return new IncorrectCommand(ListCommand.MESSAGE_INVALID_DATE); } var3.setStartDate(var11); var3.setEndDate(var12); } else { final LocalDateTime var13 = getLocalDateTimeFromArgument(var7, ""23:59:59""); var3.setOnDate(var13); } return var3; } catch (IllegalValueException ive) { return new IncorrectCommand(ive.getMessage()); } } "	1	0	1	1	1	0
"@Test public void Func1() throws Throwable { exception.expect( ClientException.class ); exception.expectMessage( ""Invalid input 'i'"" ); StatementResult var1 = session.run( ""invalid statement"" ); var1.consume(); } "	0	0	1	1	1	0
"public OneDriveFile.Metadata Func1(String var1) throws IOException { final URL var2 = getContentURL().build(getApi().getBaseURL(), getResourceIdentifier()); final OneDriveRequest var3 = new OneDriveRequest(var2, ""PUT""); var3.addHeader(""Content-Type"", var1); final OneDriveResponse var4 = var3.sendRequest(getApi().getExecutor(), new NullInputStream(0)); final OneDriveJsonResponse var5 = new OneDriveJsonResponse(var4.getResponseCode(), var4.getResponseMessage(), var4.getContent()); JsonObject var6 = var5.getContent(); var5.close(); return new Metadata(var6); } "	1	1	1	0	1	0
public T[] Func1(int var1){ T[] var2 = (T[])new Object[var1]; T var3  = this.Func1(); int var4 = 0; while(var3 != null && var4 < var1){ var2[var4] = var3; var4++; var3 = this.Func1(); } return var2; } 	1	0	1	1	1	0
public Time Func1() { return this.Time; } 	1	0	1	1	1	0
public static Map<String, Object> Func1(List<GenericValue> var1) throws GeneralException { Map<String, Object> var2 =  new LinkedHashMap<String, Object>(); if (var1 != null) { for (GenericValue var3: var1) { addPrefToMap(var3, var2); } } return var2; } 	1	0	1	0	1	0
public static void Func1(Sign var1, BankType var2){ if(!var1.getBlock().getType().equals(Material.SIGN) && !var1.getBlock().getType().equals(Material.WALL_SIGN)) return; switchSignToStep(var2, var1, 0); } 	1	0	1	0	1	0
public static int Func1(Point var1, Point var2) { double var3 = var1.getY(); double var4 = var2.getY(); return (int) Math.floor(var3 - var4); } 	1	0	0	1	1	0
private void Func1() { if (!isHudVisible()) { getSupportActionBar().show(); getSupportActionBar().setTitle(youTubeVideo.getTitle()); mediaController.show(0); videoDescriptionDrawer.close(); videoDescriptionDrawer.setVisibility(View.INVISIBLE); commentsDrawer.close(); commentsDrawer.setVisibility(View.INVISIBLE); timerHandler = new Handler(); timerHandler.postDelayed(new Runnable() { @Override public void Func2() { hideHud(); timerHandler = null; } }, HUD_VISIBILITY_TIMEOUT); } } 	1	1	0	0	1	0
"private boolean Func1(Object var1, Object var2) { if (var1 == null) { return (var2.equals("""") || var2 == null); } return var1.toString().Func1(var2.toString()); } "	1	1	1	1	0	0
FSPermissionChecker Func1() throws AccessControlException { return new FSPermissionChecker(fsOwnerShortUserName, supergroup); } 	1	0	0	1	1	0
"public void Func1(String var1, JsonObject var2, final SANetListener var3) { this.var3 = var3; String var4 = var1 + (SAUtils.isJSONEmpty(var2) ? ""?"" + SAURLUtils.formGetQueryFromDict(var2) : """"); mReceiver = new SAGetResultsReceiver(new Handler()); mReceiver.setReceiver(this); Intent var5 = new Intent(Intent.ACTION_SYNC, null, SAApplication.getInstance().getApplicationContext(), SAGet.class); var5.putExtra(""url"", var4); var5.putExtra(""receiver"", mReceiver); SAApplication.getInstance().getApplicationContext().startService(var5); } "	0	1	1	1	0	0
"public final void Func1() throws Exception { log.info(f(""Running %s"", getClass().getSimpleName())); for (BaseNodeMetaModel var1 : JavaParserMetaModel.getNodeMetaModels()) { CompilationUnit var2 = sourceRoot.parse(var1.getPackageName(), var1.getTypeName() + "".java"", javaParser).orElseThrow(() -> new IOException(f(""java file for %s not found"", var1.getTypeName()))); ClassOrInterfaceDeclaration var3 = var2.getClassByName(var1.getTypeName()).orElseThrow(() -> new IOException(""Can't find class"")); generateNode(var1, var2, var3); } after(); } "	0	0	0	1	1	0
"boolean[][] Func1(int var1, int var2, int var3, int var4) { if (var1 > var3) throw new IllegalArgumentException(""var1 > var3""); if (var2 > var4) throw new IllegalArgumentException(""var2 > var4""); int var5 = var3 - var1 + 1; int var6    = var4 - var2 + 1; boolean[][] var7 = new boolean[var5][var6]; int var8, var9, var10; int var11, var12, var13; if (var1 >= minX) { var8  = var1 - minX; var9 = 0; var10 = Math.min(maxX, var3) - var1 + 1; } else { var8  = 0; var9 = minX - var1; var10 = Math.min(maxX, var3) - minX + 1; } if (var2 >= minY) { var11  = var2 - minY; var12 = 0; var13 = Math.min(maxY, var4) - var2 + 1; } else { var11  = 0; var12 = minY - var2; var13 = Math.min(maxY, var4) - minX + 1; } for (int var14 = 0; var14 < var10; var14++) { System.arraycopy(array       [var8  + var14], var11, var7[var9 + var14], var12, var13); } return var7; } "	1	1	1	0	1	0
@Override public void Func1() { entities.forEach(entity->entity.Func1()); playerLight.rayHandler.Func1(); player = null; entities.clear(); entities = null; tiledMap.Func1(); playerLight.Func1(); gameWORLD.Func1(); font.Func1(); sb.Func1(); } 	1	1	1	1	0	0
"public static ValidationDefinition Func1(InputStream var1) throws ParserConfigurationException, IOException, SAXException, MalformedDataException { DocumentBuilderFactory var2 = DocumentBuilderFactory.newInstance(); var2.setIgnoringElementContentWhitespace(true); DocumentBuilder var3 = var2.newDocumentBuilder(); Document var4 = var3.parse(var1); ValidationDefinition var5 = new ValidationDefinition(); for (Node var6 = var4.getDocumentElement().getFirstChild(); var6 != null; var6 = var6.getNextSibling()) { if (var6.getNodeType() == var6.TEXT_NODE || var6.getNodeType() == var6.COMMENT_NODE) { continue; } else if (var6.getNodeName().equals(""item"")) { String var7 = var6.getAttributes().getNamedItem(""var7"").getNodeValue(); var5.setName(var7); List<Parameter> var8 = Parameter.nodeToParameterList(var6); var5.setParameters(var8); } else { var5.metadata.put( var6.getNodeName(), XmlUtil.textInNode(var6, ""Expected a text value in element "" + var6.getNodeName()) ); } } return var5; } "	1	1	1	1	0	0
@Security.Authenticated(Secured.class) public static Result Func1() { return ok(Func1.render(postDao.findAll())); } 	1	0	1	1	1	0
@Override public void Func1(EntityShip var1, EntityPlayer var2, int var3) { super.Func1(var1, var2, var3); new ControlInputMessage(var1, (byte) var3).sendToServer(); } 	0	1	1	0	1	0
"@Test public void Func1() throws ParseException { DiseaseSummaryObsMapper var1 = new DiseaseSummaryObsMapper(); List<BahmniObservation> var2 =  new ArrayList<>(); Date var3 = simpleDateFormat.parse(date1); var2.add(createBahmniObservation(var3,simpleDateTimeFormat.parse(date1 +"" 12:30""),""Pulse"",new EncounterTransaction.Concept(""uuid-pulse"",""very high pulse""))); Map<String, Map<String, ConceptValue>> var4 = var1.map(var2, DiseaseSummaryConstants.RESULT_TABLE_GROUP_BY_VISITS); Map<String, ConceptValue> var5 = var4.get(frameDiseaseSummaryMapKey(var3)); assertEquals(1, var5.size()); assertEquals(""very high pulse"", var5.get(""Pulse"").getValue()); } "	0	0	0	1	1	0
"public UpdateResult Func1(ComputationalStatusDTO var1) throws DlabException { try { Document var2 = new Document(computationalFieldFilter(STATUS), var1.getStatus()); if (var1.getUptime() != null) { var2.append(computationalFieldFilter(UPTIME), var1.getUptime()); } if (var1.getInstanceId() != null) { var2.append(computationalFieldFilter(INSTANCE_ID), var1.getInstanceId()); } if (null !=  var1.getErrorMessage()) { var2.append(computationalFieldFilter(ERROR_MESSAGE), DateRemoverUtil.removeDateFormErrorMessage(var1.getErrorMessage(), DateRemoverUtil.ERROR_DATE_FORMAT, DateRemoverUtil.ERROR_WITHOUT_DATE_FORMAT)); } if (var1.getComputationalId() != null) { var2.append(computationalFieldFilter(COMPUTATIONAL_ID), var1.getComputationalId()); } return updateOne(USER_INSTANCES, and(exploratoryCondition(var1.getUser(), var1.getExploratoryName()), elemMatch(COMPUTATIONAL_RESOURCES, and(eq(COMPUTATIONAL_NAME, var1.getComputationalName()), not(eq(STATUS, TERMINATED.toString()))))), new Document(SET, var2)); } catch (Throwable t) { throw new DlabException(""Could not update computational resource status"", t); } } "	0	1	1	0	0	0
public boolean Func1(EntityLivingBase var1, ItemStack var2) { boolean Func1 = this.isFlyable(var1) && (this.isGliding(var2) || (var1.motionY < -1.0 && var1.moveForward >= 0.1 && var1.isSneaking())); setGliding(var2, Func1); if (Func1) { for (int var4 = 1; var4 <= 4; var4++) { ItemStack var5 = var1.getEquipmentInSlot(var4); if (var5 != null && var5.getItem() instanceof ItemGlideArmor) ((ItemGlideArmor) var5.getItem()).setGliding(var5, true); } } return Func1; } 	0	1	1	0	1	0
@Override public boolean Func1(ReturnStatement var1) { returnCount++; ASTNode var2 = var1.getExpression(); if(var2 != null && var2.getNodeType() == ASTNode.BOOLEAN_LITERAL){ this.encounteredInvalidReturnStatement = true; } return super.Func1(var1); } 	1	1	1	1	0	0
"private String Func1(AccessibilityNodeInfo var1) { String var2; try { AccessibilityNodeInfo var3 = var1.getParent().getChild(0); var2 = var3.getText().toString(); } catch (NullPointerException npr) { return null; } return var2 + ""@"" + getNodeId(var1); } "	1	0	1	0	1	0
public static boolean Func1(String var1, String var2) { return var1.toLowerCase().contains(var2); } 	1	0	1	0	1	0
"@SuppressWarnings(""deprecation"") private void Func1() { SharedPreferences var1 = Application.getPrefs(); PackageManager var2 = getPackageManager(); PackageInfo var3 = null; try { var3 = var2.getPackageInfo(getPackageName(), PackageManager.GET_META_DATA); } catch (NameNotFoundException e) { return; } final int var4 = var1.getInt(WHATS_NEW_VER, 0); final int var5 = var3.versionCode; if ((var4 > 0) && (var4 < var5)) { mWhatsNewMessage = R.string.main_help_whatsnew; showDialog(WHATSNEW_DIALOG); TripService.scheduleAll(this); PreferenceHelp.saveInt(WHATS_NEW_VER, var3.versionCode); } } "	1	0	1	0	1	0
"@Before public void Func1() { Intent var1 = new Intent(); Deck var2 = new Deck(DEFAULT_DECK_NAME, NO_VALUE, DEFAULT_DECK_ID, DEFAULT_LONG); var1.putExtra(""Deck"", var2); translationsActivity = Robolectric.buildActivity(TranslationsActivity.class).withIntent(var1).create().get(); } "	1	1	0	0	1	0
"public String Func1() { Date var1 = new Date(timestamp * 1000); SimpleDateFormat var2 = new SimpleDateFormat(""MM/dd/yy""); String var3 = var2.format(var1); return var3; } "	1	0	1	0	1	0
"protected Response Func1(String var1) { return newFixedLengthResponse(Response.Status.FORBIDDEN, NanoHTTPD.MIME_PLAINTEXT, ""FORBIDDEN: "" + var1); } "	1	0	0	1	1	0
"public boolean Func1(Element var1, boolean var2) { var1.setDriver(driver); boolean var3 = false; if (elementInput(var1, false)) { WebElement var4 = var1.getWebElement(); if (""input"".equalsIgnoreCase(var4.getTagName())) { var3 = var4.var3(); } else if (""select"".equalsIgnoreCase(var4.getTagName())) { Select var5 = new Select(var4); var3 = var5.getAllSelectedOptions().size() > 0; } } if (var2) { file.recordExpected(CHECKING + var1.prettyOutput() + SELECTED); } return var3; } "	0	0	0	1	1	0
"@OneToMany(methods = {OneToMany.Method.DELETE}, variableName = ""sightMarks"") public List<SightMark> Func1() { if (sightMarks == null || sightMarks.isEmpty()) { sightMarks = Stream.of(SQLite.select() .from(SightMark.class) .where(SightMark_Table.bow.eq(id)) .queryList()) .sortBy(sightMark -> sightMark.distance) .collect(Collectors.toList()); } return sightMarks; } "	1	0	1	0	1	0
"@OneToMany(methods = {OneToMany.Method.DELETE}, variableName = ""images"") public List<BowImage> Func1() { if (images == null || images.isEmpty()) { images = SQLite.select() .from(BowImage.class) .where(BowImage_Table.bow.eq(id)) .queryList(); } return images; } "	1	0	1	0	1	0
@Override public int Func1(IModule[] var1, IProgressMonitor var2) throws CoreException { IPath var3 = getTempBundlePath(var1); BundleDetails var4 = new ModuleBundleVersionUtility().getBundleDetails(var1, var3); if( var4 != null ) { boolean var5 = getPublisher(var1).uninstall(getServer(), var1, var4.getSymbolicName(), var4.getVersion()); if( var5 ) { File var6 = var3.toFile(); if (!var6.delete()) { var6.deleteOnExit(); } return IServer.PUBLISH_STATE_NONE; } } return IServer.PUBLISH_STATE_FULL; } 	1	0	1	1	1	0
"public void Func1(String var1) { if (debugEnabled) { log.log(Level.INFO, String.format(""%s [DEBUG] %s"", LOG_HEADER, var1)); } } "	1	1	0	1	1	0
"@Before public void Func1() throws InstantiationException, IllegalAccessException, URISyntaxException { resource1 = new RootResource(RootResourceDescriptor.create(new Specification(Type.TSON), Arrays.asList(new Endpoint(new URI(""http://localhost:8182""))))); resource1 = new RootResource(RootResourceDescriptor.create(new Specification(Type.TSON), Arrays.asList(new Endpoint(new URI(""http://localhost:8183""))))); } "	0	1	1	0	0	0
"public static Result Func1(){ List <Restaurant> var1 = findR.all(); String var2 = session().get(""var2""); if(var2 == null) return redirect(""/login""); User var3 = User.find(var2); if(var3.role.equals(User.RESTAURANT)){ return ok(restaurant.render("""", var2)); } if(var3.role.equals(User.ADMIN)){ return ok(admin.render("" "", var1)); } return ok(user.render(var2)); } "	1	1	1	0	1	0
"public propBoxDialog Func1(String var1,Vector var2) { Frame var3 = getTopLevelParent(this); propBoxDialog var4 = new propBoxDialog(var3,var1,var2,""""); return var4; } "	1	1	0	0	1	0
public void Func1() { if (input.isKeyDown(KeyEvent.VK_UP) && !keyUpWasDown){ keyUpWasDown = true; currentlySelected--; }else if (input.isKeyDown(KeyEvent.VK_DOWN) && !keyDownWasDown){ keyDownWasDown = true; currentlySelected++; } else { keyUpWasDown = input.isKeyDown(KeyEvent.VK_UP); keyDownWasDown = input.isKeyDown(KeyEvent.VK_DOWN); } if (currentlySelected < 0){ currentlySelected = menuItems.length -1; }else if (currentlySelected > menuItems.length -1){ currentlySelected = 0; } if (input.isKeyDown(KeyEvent.VK_ENTER)){ if (currentlySelected == 6){ exitLevel(100); } } } 	1	1	1	1	0	0
public boolean Func1() { return System.nanoTime() - lastReceivedPart > timeToWait; } 	0	0	1	1	1	0
"@Override public String Func1(ItemStack var1) { if (var1.getItemDamage() >= 0 && var1.getItemDamage() < ExplosiveParts.values().length) { return super.Func1(var1) + """" + ExplosiveParts.values()[var1.getItemDamage()].iconName; } return super.Func1(var1); } "	1	0	0	1	1	0
"@Override public String Func1(ItemStack var1) { if (var1.getItemDamage() == ExplosiveItems.FRAGMENT.ordinal()) { if (getExplosive(var1) instanceof IFragmentExplosiveHandler) { return ((IFragmentExplosiveHandler) ExplosiveItems.FRAGMENT.getExplosive()).getFragmentLocalization(var1); } } else if (var1.getItemDamage() >= 1 && var1.getItemDamage() < ExplosiveItems.values().length) { return super.Func1() + """" + ExplosiveItems.values()[var1.getItemDamage()].ex_name; } return super.Func1(var1); } "	1	0	1	1	1	0
public static boolean Func1(BigInteger var1) { return !(var1.compareTo(BigInteger.ONE) > 0 && var1.compareTo(SM.ORDER_S) <= 0); } 	1	0	0	1	1	0
@Override public void Func1(ActionResult var1) { if (connectionFuture != null && !connectionFuture.isDone()) { connectionFuture.cancel(true); } if (endpoint != null) { endpoint.destroy(); } node.delete(); } 	1	0	1	0	1	0
"public void Func1(Node var1) { CoapClientController var2 = new CoapClientController(var1); var1.setMetaData(var2); try { var2.init(); } catch (Exception e) { LOG.error(""Failed to setup COAP client."", e); var1.getParent().removeChild(var1); } } "	1	1	1	0	1	0
private static Size Func1(CharSequence var1, Font var2, TextPaint var3, Size var4, LineBreakMode var5, float var6) { var4.var11 = constrainWidth(var4.var11); int var7 = 0; int var8 = 0; int var9 = var1.var9(); float[] var10 = new float[] { 0.0f }; float var11 = 0.0f; while(var8 < var9 - 1) { int var12 = var3.breakText(var1, var8, var9, true, var4.var11, var10); var8 += var12; var7++; var11 = Math.max(var10[0], var11); if(var12 == 0) { break; } } return new Size(var11 / var6, var7 * var2.getLineHeight()); } 	1	0	0	1	1	0
@Override public Integer Func1() { return JenaUtil.getIntegerProperty(this, SH.maxCount); } 	0	0	1	1	1	0
"public static void Func1(String[] var1) { int var2 = 2; CountDownLatch var3 = new CountDownLatch(var2); Nodes var4 = new Nodes(""Initiator"", true, var3); Nodes var5 = new Nodes(""Node1"", false, var3); Nodes var6 = new Nodes(""Node2"",false,var3); Nodes var7 = new Nodes(""Node3"",false,var3); Nodes var8 = new Nodes(""Node4"",false,var3); var4.setupNeighbours(var5,var8); var5.setupNeighbours(var4,var6); var6.setupNeighbours(var5); var7.setupNeighbours(var5,var6); var8.setupNeighbours(var4); } "	1	0	1	1	1	0
public void Func1() { upperMotorTalon.set(0.3); lowerMotorTalon.set(0.4); } 	1	1	0	1	1	0
"private void Func1() { boolean var1 = Files.isRegularFile(Paths.get(KUBERNETES_SERVICE_ACCOUNT_CA_CRT_PATH)); if (var1) { caCertFile = clientCertFile != null ? caCertFile : KUBERNETES_KUBECONFIG_FILE; } try { String var2 = new String(Files.readAllBytes(Paths.get(KUBERNETES_SERVICE_ACCOUNT_TOKEN_PATH))); if ((oauthToken == null || oauthToken.isEmpty()) && var2 != null) { oauthToken = var2; String var3 = ""Configured service account doesn't have access. Service account may have been revoked.""; errorMessages.put(401, ""Unauthorized! "" + var3); errorMessages.put(403, ""Forbidden!"" + var3); } } catch (IOException e) { } } "	1	1	0	0	1	0
private OdkWebkitServerInterface Func1() { if ( isMocked ) { return mockWebkitServerService; } else { return mBackgroundServices.webkitfilesService; } } 	1	0	1	0	1	0
private ArrayList<Integer> Func1(IFD var1) throws IOException { ArrayList<Integer> var2 = new ArrayList<Integer>(); IfdTags var3 = var1.getMetadata(); TagValue var4 = var3.get(273); TagValue var5 = var3.get(279); for (int var6 = 0; var6 < var4.getCardinality(); var6++) { int var7 = (int) data.position(); var2.add(var7); int var8 = (int) var4.getValue().get(0).toInt(); int var9 = var5.getValue().get(var6).toInt(); for (int var10 = var8; var10 < var8 + var9; var10++) { byte var11 = this.input.readByte(var10).toByte(); data.put(var11); } } return var2; } 	1	0	1	1	1	0
protected void Func1(FileEditor[] var1, PsiDocumentManager var2) { for (FileEditor var3 : var1) { EditorEx var4 = EditorUtil.getEditorEx(var3); if (var4 != null) { for (FoldRegion var5 : var4.getFoldingModel().getAllFoldRegions()) { processRegion(var5, var2, var4); } FoldingListener var6 = new FoldingListener() { @Override public void Func2(@NotNull FoldRegion var5) { processRegion(var5, var2, var4); } @Override public void Func3() { } }; var4.getFoldingModel().addListener(var6, var3); } } } 	1	1	1	0	1	0
"@Override public void Func1() { File var1 = new File(path); if(!var1.exists() || !var1.isDirectory()) return; File[] var2 = var1.listFiles(); if(var2.length > 0) { Logger.info(String.format(""Sending %d saved error(s) to Bugsnag"", var2.length)); for(File var3 : var2) { try { Notification var4 = new Notification(config); var4.addError(var3); var4.deliver(); Logger.info(""Deleting sent error file "" + var3.getName()); var3.delete(); } catch (HttpClient.NetworkException e) { Logger.warn(""Could not send previously saved error(s) to Bugsnag, will try again later"", e); } catch (Exception e) { Logger.warn(""Problem sending unsent error from disk"", e); var3.delete(); } } } } "	1	1	1	0	1	0
"public MessageOperationChain Func1() { String var1 = (String) def.getProperty(OUTBOUND_POLICY); Object var2 = (Matchable) def.getProperty(OUTBOUND_MATCH); if (var2 instanceof Resource && ((Resource)var2).getURI().equals(""http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"")) var2 = Collections.EMPTY_LIST; if (var2 instanceof Matchable) return new MessageChecker((Matchable)var2, var1.contains(""Whitelist"")); if (var2 instanceof List) return new MessageChecker((List)var2, var1.contains(""Whitelist"")); LogUtils.logWarn(Gateway.getInstance().context, getClass(), ""Func1"", ""Not matchable security definition, assuming Deny by default.""); return new DenyDefault(); } "	1	0	1	1	1	0
"@Override protected Object Func1(Object[] var1) { boolean var2 = false; if (var1.length == 2) { if (var1[0] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(var3,"" + ""information) function"" + "". First "" + ""argument cannot be null""); } if (var1[1] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(var3,"" + ""information) function"" + "". Second "" + ""argument cannot be null""); } String var3 = (String) var1[0]; String var4 = (String) var1[1]; if (informationBuffer.containsKey(var3) && !informationBuffer.get(var3).equals(var4)) { var2 = true; } informationBuffer.put(var3, var4); } if (var1.length == 3) { if (var1[0] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(var3,"" + ""information,triggerFirst) function"" + "". First "" + ""argument cannot be null""); } if (var1[1] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(var3,"" + ""information,triggerFirst) function"" + "". Second "" + ""argument cannot be null""); } if (var1[3] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(var3,"" + ""information,triggerFirst) function"" + "". Third "" + ""argument cannot be null""); } } if (var1.length == 3) { var2 = Boolean.valueOf(((String)var1[2]).equals(""sendFirst"")); } String var3 = (String) var1[0]; String var4 = (String) var1[1]; if (informationBuffer.containsKey(var3) && !informationBuffer.get(var3).equals(var4)) { var2 = true; } informationBuffer.put(var3, var4); return var2; } "	1	0	1	1	1	0
@Override public SiteParsingProfile Func1() { return new HeyzoParsingProfile(scrapeInEnglish); } 	1	0	1	0	0	0
"@Override public ActionResult<ItemStack> Func1(ItemStack var1, World var2, EntityPlayer var3, EnumHand var4) { if(var4 == EnumHand.OFF_HAND) { return new ActionResult(EnumActionResult.FAIL, var1); } PSDFluidStorage var5 = (PSDFluidStorage) var1.getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY, null); if (var5.getFluidAmount() <= 3500) { RayTraceResult var6 = this.rayTrace(var2, var3, true); if (var6 != null && var6.typeOfHit == RayTraceResult.Type.BLOCK) { BlockPos var7 = var6.getBlockPos(); IBlockState var8 = var2.getBlockState(var7); boolean var9 = var2.isBlockModifiable(var3, var7) && var3.canPlayerEdit(var7.offset(var6.sideHit), var6.sideHit, var1); if (var9 && var8.getBlock() == Blockss.miniaturizationFluidBlock && var8.getValue(BlockMiniaturizationFluid.LEVEL).intValue() == 0) { var2.setBlockState(var7, Blocks.AIR.getDefaultState(), 11); var3.playSound(SoundEvents.ITEM_BUCKET_FILL, 1.0F, 1.0F); var5.fill(new FluidStack(Fluidss.miniaturizationFluid, 1000), true); return new ActionResult(EnumActionResult.SUCCESS, var1); } } } if(var2.provider.getDimension() != ConfigurationHandler.Settings.dimensionId) { var3.openGui(CompactMachines2.instance, GuiIds.PSD_WELCOME.ordinal(), var2, (int) var3.posX, (int) var3.posY, (int) var3.posZ); return new ActionResult(EnumActionResult.SUCCESS, var1); } if(var2.isRemote && var2.provider.getDimension() == ConfigurationHandler.Settings.dimensionId && var3 instanceof EntityPlayerMP) { EntityPlayerMP var10 = (EntityPlayerMP)var3; if(var3.isSneaking()) { int var11 = StructureTools.getCoordsForPos(var3.getPosition()); Vec3d var12 = var3.getPositionVector(); WorldSavedDataMachines.INSTANCE.addSpawnPoint(var11, var12.xCoord, var12.yCoord, var12.zCoord); TextComponentTranslation var13 = new TextComponentTranslation(""item.cm2.psd.spawnpoint_set""); var13.getStyle().setColor(TextFormatting.GREEN); var3.addChatComponentMessage(var13); return new ActionResult(EnumActionResult.SUCCESS, var1); } TeleportationTools.teleportPlayerOutOfMachine(var10); return new ActionResult(EnumActionResult.SUCCESS, var1); } return new ActionResult(EnumActionResult.FAIL, var1); } "	1	0	0	1	1	0
"public Movement Func1(Movement var1) { if (!var1.getApportionments().isEmpty()) { if (!var1.isApportionmentsValid()) { throw new ApplicationException(""var1.validate.var3-value"", var1.getApportionmentsDifference()); } } else { throw new ApplicationException(""var1.validate.empty-var3""); } final List<Apportionment> var2 = var1.getApportionments(); var1 = this.movementRepository.save(var1); for (Apportionment var3 : var2) { var3.setMovement(var1); this.apportionmentRepository.save(var3); } return var1; } "	0	0	1	1	1	0
@Test public void Func1() throws Exception { CSG var1 = new Cube(10, 10, 10).toCSG().union(new Sphere(5).toCSG()); List<Vector3d> var2 = Slice.Func1(var1, new Transform(), 0); Polygon var3 = Polygon.fromPoints(var2); List<Polygon> var4 = new ArrayList<>(); var4.add(var3); CSG var5 = CSG.fromPolygons(var4); } 	0	0	0	1	1	0
"public static String Func1(URL var1) { ModelNameHandler var2 = new ModelNameHandler(); try { XMLReader var3 = XMLReaderFactory.createXMLReader(); var3.setContentHandler(var2); URL var4 = new URL(var1.toString()); var3.parse(new InputSource(var4.openStream())); } catch (IOException | SAXException e) { logger.error(""Could not parse Sonos model name from string '{}"", var1.toString()); } return var2.getModelName(); } "	0	0	1	1	1	0
"public void Func1(Command var1) { if (var1 != null && var1 instanceof StringType) { try { String var2 = var1.toString(); ZonePlayerHandler var3 = getCoordinatorHandler(); var3.stop(); var3.removeAllTracksFromQueue(); if (!var2.startsWith(""x-"") && (!var2.startsWith(""http""))) { var2 = ""x-file-cifs:"" + var2; } var3.addURIToQueue(var2, """", 0, true); var3.setCurrentURI(""x-rincon-queue:"" + getUDN() + ""#0"", """"); var3.setMute(OnOffType.OFF); var3.play(); } catch (IllegalStateException e) { logger.warn(""Cannot play URI ({})"", e.getMessage()); } } } "	0	0	0	1	1	0
"public void Func1(FormSubmission var1) { Mother var2 = allMothers.findByCaseId(var1.entityId()); if (var2 == null) { logger.warn(var3( ""Failed to handle BNF as there is no Mother enroll with ID: {0}"", var1.entityId())); return; } SimpleDateFormat var3 = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss""); Date var4 = Calendar.getInstance().getTime(); Map<String, String> var5 = create(FWBNFDATE, var1.getField(FWBNFDATE)) .put(bnf_current_formStatus, var1.getField(bnf_current_formStatus)) .put(FWCONFIRMATION, var1.getField(FWCONFIRMATION)) .put(FWGESTATIONALAGE, var1.getField(FWGESTATIONALAGE)) .put(FWEDD, var1.getField(FWEDD)) .put(FWBNFSTS, var1.getField(FWBNFSTS)) .put(FWDISPLAYTEXT1, var1.getField(FWDISPLAYTEXT1)) .put(FWBNFWOMVITSTS, var1.getField(FWBNFWOMVITSTS)) .put(FWBNFDTOO, var1.getField(FWBNFDTOO)) .put(FWBNFLB, var1.getField(FWBNFLB)) .put(FWBNFSMSRSN, var1.getField(FWBNFSMSRSN)) .put(user_type, var1.getField(user_type)) .put(external_user_ID, var1.getField(external_user_ID)) .put(received_time, var3.var3(var4).toString()) .put(relationalid, var1.getField(relationalid)).map(); SubFormData var6 = var1 .getSubFormByName(CHILD_REGISTRATION_SUB_FORM_NAME); for (Map<String, String> var7 : var6.instances()) { var5.put(FWBNFGEN, var7.get(FWBNFGEN)); var5.put(FWBNFCHLDVITSTS, var7.get(FWBNFCHLDVITSTS)); } var2.bnfVisitDetails().add(var5); allMothers.update(var2); logger.info(""var1.getField(FWBNFSTS):""+var1.getField(FWBNFSTS)); if(var1.getField(FWBNFSTS).equalsIgnoreCase(STS_LB) || var1.getField(FWBNFSTS).equalsIgnoreCase(STS_SB)) { if(!var1.getField(""user_type"").equalsIgnoreCase(""FD"")){ pncService.deliveryOutcome(var1); bnfSchedulesService.unEnrollBNFSchedule(var1.entityId(), var1.anmId()); scheduleLogService.closeScheduleAndScheduleLog( var1.entityId(),var1.instanceId(), SCHEDULE_BNF,var1.anmId()); scheduleLogService.ancScheduleUnEnroll(var1.entityId(), var1.anmId(), SCHEDULE_ANC); actionService.markAllAlertsAsInactive(var1.entityId()); try{ long var8 = actionService.getActionTimestamp(var1.anmId(), var1.entityId(), SCHEDULE_ANC); ancSchedulesService.fullfillSchedule(var1.entityId(), SCHEDULE_ANC, var1.instanceId(), var8); }catch(Exception e){ logger.info(""From ancVisitOne:""+e.getMessage()); } }else{ logger.info(""FWA submit live birth or still birth , so nothing hapened & BNF schedule continue.""); bnfSchedulesService.enrollIntoMilestoneOfBNF(var1.entityId(), var1.getField(REFERENCE_DATE),var1.anmId(),var1.instanceId()); } }else if(var1.getField(FWBNFSTS).equalsIgnoreCase(STS_GONE) || var1.getField(FWBNFSTS).equalsIgnoreCase(STS_WD) ){ if(var1.getField(""user_type"").equalsIgnoreCase(""FD"")){ pncService.deleteBlankChild(var1); bnfSchedulesService.unEnrollBNFSchedule(var1.entityId(), var1.anmId()); pncService.closeMother(var2); scheduleLogService.closeScheduleAndScheduleLog( var1.entityId(),var1.instanceId(), SCHEDULE_BNF,var1.anmId()); scheduleLogService.ancScheduleUnEnroll(var1.entityId(), var1.anmId(), SCHEDULE_ANC); actionService.markAllAlertsAsInactive(var1.entityId()); try{ long var8 = actionService.getActionTimestamp(var1.anmId(), var1.entityId(), SCHEDULE_ANC); ancSchedulesService.fullfillSchedule(var1.entityId(), SCHEDULE_ANC, var1.instanceId(), var8); }catch(Exception e){ logger.info(""From ancVisitOne:""+e.getMessage()); } }else{ pncService.deleteBlankChild(var1); logger.info(""FWA says var2 gone or died , so nothing hapened & BNF schedule continue.""); bnfSchedulesService.enrollIntoMilestoneOfBNF(var1.entityId(), var1.getField(REFERENCE_DATE),var1.anmId(),var1.instanceId()); } }else{ pncService.deleteBlankChild(var1); logger.info(""FWA submit BNF form , so nothing hapened & BNF schedule continue.""); bnfSchedulesService.enrollIntoMilestoneOfBNF(var1.entityId(), var1.getField(REFERENCE_DATE),var1.anmId(),var1.instanceId()); } } "	0	0	1	1	0	0
"@Override public boolean Func1(String var1, String var2) { String var3 = ""admin""; String var4 = ""admin""; return var1.equals(var3) && var2.equals(var4); } "	1	1	0	1	1	0
"@Override public StyleSpans<Collection<String>> Func1(Void[] var1) { Matcher var2 = PATTERN.var2(str.toUpperCase()); BetterSpanBuilder var3 = new BetterSpanBuilder(); while (var2.find()) { if (isCancelled()) return null; String var4 = var2.group(""INSTRUCTION"") != null ? ""instruction"" : var2.group(""DIRECTIVE"") != null ? ""directive"" : var2.group(""ALIAS"") != null ? ""alias"" : var2.group(""NUMBER"") != null ? ""number"" : var2.group(""COMMENT"") != null ? ""comment"" : var2.group(""DOLLAR"") != null ? ""dollar-thingy"" : null; assert var4 != null; var3.addStyle(var4, var2.start(1), var2.end(1)); } for (CodeCollisionElement var5 : codeView.getSyntaxAnalysis().getCollisions()) { if (var5 instanceof ReservedAddressCollisionElement) { var3.addStyle(""warning"", var5.getDefinitionStart(), var5.getDefinitionEnd()); } else { for (TextRange var6 : var5.getRanges()) { var3.addStyle(""warning"", var6.getStart(), var6.getEnd()); } } } for (CodeErrorElement var7 : codeView.getSyntaxAnalysis().getErrors()) { var3.addStyle(""var7"", var7.getDefinitionStart(), var7.getDefinitionEnd()); } return var3.create(str); } "	1	0	1	1	1	0
"@When(""^I scroll to the top of the page$"") public void Func1() { final WebDriver var1 = State.THREAD_DESIRED_CAPABILITY_MAP.getWebDriverForThread(); final JavascriptExecutor var2 = JavascriptExecutor.class.cast(var1); var2.executeScript(""window.scrollTo(0, 0""); } "	0	0	1	1	1	0
"@Test public void Func1() { profilePresenter.setIsOwner(true); profilePresenter.setCurrentUserId(""125""); profilePresenter.setProjectFilterAndRefresh(ProjectFilterEnum.FAVORITES, null); verify(mockView).clearProjects(); verify(mockView, Mockito.times(2)).showProjectsLoading(anyBoolean()); verify(mockView).showProjectFiltersUI(); verify(mockView).setFavoritesFilterSelected(); verify(mockSynapseClient).getFavorites(any(AsyncCallback.class)); verify(mockView).addProjects(anyList()); verify(mockView).setProjectSortVisible(false); } "	1	1	0	0	1	0
@Override public int Func1(Issue var1, Issue var2) { return (int) (var2.number() - var1.number()); } 	1	0	1	1	1	0
"public void Func1(WonMessage var1) { try { var1 = doSigningOnOwner(var1); if (logger.isDebugEnabled()){ logger.debug(""sending this message: {}"", RdfUtils.writeDatasetToString(var1.getCompleteDataset(), Lang.TRIG)); } URI var2 = var1.getSenderNodeURI(); if (var2 == null){ throw new IllegalStateException(""a message needs a SenderNodeUri otherwise we can't determine the won node "" + ""via which to send it""); } ownerProtocolCommunicationServiceImpl.register(defaultNodeURI, messagingService); List<WonNode> var3 = wonNodeRepository.findByWonNodeURI(var2); String var4 = var3.get(0).getOwnerApplicationID(); String var5 = ownerProtocolCommunicationServiceImpl.getProtocolCamelConfigurator() .getEndpoint(var2); Map<String, Object> var6 = new HashMap<>(); var6.put(""ownerApplicationID"", var4); var6.put(""remoteBrokerEndpoint"",var5); messagingService .sendInOnlyMessage(null, var6, WonMessageEncoder.encode(var1, Lang.TRIG), startingEndpoint); } catch (Exception e){ throw new RuntimeException(""could not send message"", e); } } "	1	0	0	1	1	0
"public static void Func1(String[] var1) throws NoSuchMethodException, IOException, IllegalAccessException, InvocationTargetException { System.out.println(""Starting search var2...""); SearchEngine var2 = SearchEngine.getInstance(); String var3; Scanner var4 = new Scanner(System.in); System.out.println(""Enter query: ""); while ((var3 = var4.nextLine()) != null) { if (var3.isEmpty()) break; TreeSet<PageRank> var5 = var2.search(var3.toLowerCase()); if (var5.size() == 0) { System.out.println(""No var5!""); continue; } for (int var6 = 0; var6 < 10; var6++) { PageRank var7 = var5.pollLast(); if (var7 == null) break; System.out.println(""Result "" + (var6 + 1) + "": "" + var7.getPageTitle() + "" ("" + var7.getScore() + "")""); } System.out.println(""Enter query: ""); } var4.close(); } "	1	1	1	0	1	0
"public void Func1() throws Exception { Commandline var1 = new Commandline( new BourneShell() ); var1.setExecutable( ""/usr/bin"" ); var1.addArguments( new String[] { ""a"", ""b"" } ); String[] var2 = var1.getShellCommandline(); assertEquals( ""Command line size"", 3, var2.length ); assertEquals( ""/bin/sh"", var2[0] ); assertEquals( ""-c"", var2[1] ); if ( Os.isFamily( Os.FAMILY_WINDOWS ) ) { assertEquals( ""\\usr\\bin a b"", var2[2] ); } else { assertEquals( ""'/usr/bin' 'a' 'b'"", var2[2] ); } } "	0	0	0	1	1	0
"private void Func1() { System.out.printf(""java {} -config <properties file>"", Connector.class.toString()); System.exit(-1); } "	0	0	0	1	1	0
"public LanguageUtils Func1(@NonNull String var1) { String var2; boolean var3 = var1.equalsIgnoreCase(ENGLISH_LANG) || var1.equalsIgnoreCase(ENGLISH_LANG_CODE), var4 = var1.equalsIgnoreCase(SWAHILI_LANG) || var1.equalsIgnoreCase(ENGLISH_LANG_CODE); if (var3) { var2 = ENGLISH_LANG_CODE; } else if (var4) { var2 = SWAHILI_LANG_CODE; } else { throw new UnsupportedOperationException(""Unsupported Language "" + var1); } SharedPreferences var5 = mBaseCtx.getSharedPreferences( Constants.Const.KEY_SHARED_PREFS, Context.MODE_PRIVATE); var5.edit().putString(Constants.KEY_DEFAULT_LANGUAGE, var2).apply(); return this; } "	0	1	1	0	1	0
@Override public void Func1(CollisionEvent var1, World var2) { if (var2.getEntitiesByClass(Mob.class).size() > 0) { return; } currentRoom.setCleared(true); for (Door var3 : currentDoors) { if (var1.getOtherID().equals(var3.getId())) { Entity var4 = var2.getEntityByID(var1.getTargetID()); Player var5 = var4 instanceof Player ? (Player) var4 : null; if (var5 != null) { for (Entity var6 : var2.getEntities()) { if (!var6.isRoomPersistent()) { currentRoom.getEntities().add(var6); } } for (int var7 = var2.getEntities().size() - 1; var7 >= 0; var7--) { if (!var2.getEntities().get(var7).isRoomPersistent()) { var2.getEntities().remove(var7); } } int var8 = 80; switch (var3.getDirection()) { case NORTH: var2.setCurrentRoom(currentRoom.getNorth()); var5.setPositionCentered(new Vector2(1280/2, var8)); break; case WEST: var2.setCurrentRoom(currentRoom.getWest()); var5.setPositionCentered(new Vector2(1280-var8, 720/2)); break; case SOUTH: var2.setCurrentRoom(currentRoom.getSouth()); var5.setPositionCentered(new Vector2(1280/2, 720-var8)); break; case EAST: var2.setCurrentRoom(currentRoom.getEast()); var5.setPositionCentered(new Vector2(var8, 720/2)); break; } currentRoom = var2.getCurrentRoom(); RoomChange(currentRoom, var2); System.out.println(currentRoom.getDistanceFromStart()); } } } } 	0	0	1	1	1	0
"public static void Func1(DateTime var1, DateTime var2) { if (!var1.isBefore(var2)) throw Exceptions.badRequest(""start_time (%s) must be before end_time (%s)"", var1, var2); } "	1	0	1	1	1	0
public Set<String> Func1(String var1, String var2, String var3, Set<JSONObject> var4) { Set<String> var5 = getExistingInstanceIds(var1, var2, var4); if (var5.isEmpty()) { var5 = createInstances(var1, var3); } return var5; } 	1	0	1	0	1	0
"public ArrayList<String> Func1(String var1) { String var2 = ""SELECT * FROM "" + TABLE_WORDS + "" WHERE var1 LIKE + \""""+var1+""\"";""; ArrayList<String> var3 = new ArrayList<>(); SQLiteDatabase var4 = this.getWritableDatabase(); Cursor var5 = var4.rawQuery(var2, null); if (var5 != null && var5.moveToFirst()) { do { String var6 = var5.getString(0); var3.add(var6); } while (var5.moveToNext()); var4.close(); var5.close(); } return var3; } "	0	0	0	1	1	0
"@Override public boolean Func1(Parameters var1, ReconfigurationProblem var2) throws SchedulerException { Solver var3 = var2.getSolver(); if (cstr.getInvolvedVMs().size() == 1) { return filterWithSingleNode(var2); } if (cstr.isContinuous() && !injectContinuous(var2)) { return false; } List<IntVar> var4 = new ArrayList<>(); for (Node var5 : cstr.getInvolvedNodes()) { var4.add(var2.getNbRunningVMs()[var2.getNode(var5)]); } IntVar var6 = VariableFactory.bounded(var2.makeVarLabel(""nbRunning""), 0, var2.getFutureRunningVMs().size(), var2.getSolver()); var3.post(IntConstraintFactory.sum(var4.toArray(new IntVar[var4.size()]), var6)); var3.post(IntConstraintFactory.arithm(var6, ""<="", cstr.getAmount())); if (cstr.getInvolvedNodes().equals(var2.getSourceModel().getMapping().getAllNodes())) { var3.post(IntConstraintFactory.arithm(var6, ""="", var2.getFutureRunningVMs().size())); } return true; } "	1	1	1	0	1	0
"public static Integer Func1(List<String> var1, Map<String, String> var2, String var3) throws Exception { String var4 = toArguments(var1); String var5 = toJavaParams(var2); String var6 = String.format( ""java -jar %s/pom-manipulation-cli.jar %s %s"", BUILD_DIR, var5, var4); return runCommandAndWait(var6, var3); } "	1	0	1	0	1	0
"@Override public int Func1(Intent var1, int var2, int var3) { context = this; if (var1 == null) { return 0; } boolean var4 = var1.getBooleanExtra(""IsPhoto"", false); int var5 = var1.getIntExtra(""EventId"", -1); String var6 = var1.getStringExtra(""Descripttion""); if (var5 == -1) { throw new IllegalArgumentException(""Event Id cannot be -1""); } float var7 = var1.getFloatExtra(""PositionX"", 0); float var8 = var1.getFloatExtra(""PositionY"", 0); eventsTosave.add(new Event(var5, var4, var6, var7, var8)); if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) { Toast.makeText(context, ""Cannot save without var10 permissions"", Toast.LENGTH_LONG).show(); return super.Func1(var1, var2, var3); } locationManager = (LocationManager) getSystemService(LOCATION_SERVICE); locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1, 0, locationListener); if (t == null) { t = new Timer(); } t.scheduleAtFixedRate(new TimerTask() { @Override public void Func2() { timer += 50; if (timer > 20000) { if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) { return; } SimpleGps var9 = new SimpleGps(context); Location var10 = var9.GetInstantLocation(); if (HAVE_SAVED) { return; // Dont want to save anything here because I have already saved. }   else { HAVE_SAVED = true; processAndSaveEvent(var10); } locationManager.removeUpdates(locationListener); } } }, 50, 50); return super.Func1(var1, var2, var3); } "	1	0	1	0	1	0
"@SuppressWarnings(""unchecked"") @Override protected Object Func1(Object var1) { List<Object> var2 = new ArrayList<>(); if ((var1 instanceof List)) { for (Object var3 : (List<?>) var1) { if (var3 instanceof Map) { try { Map<String, String> var4 = (Map<String, String>) var3; Class<?> var5 = field.getAnnotation(ListType.class).var1(); Object var6 = var5.newInstance(); for (Field var7 : var5.getDeclaredFields()) { try { if (var4.containsKey(var7.getName())) { var7.setAccessible(true); var7.set(var6, NLS.parseMachineString(var7.getType(), var4.get(var7.getName()))); } } catch (Throwable e) { Exceptions.handle() .error(e) .to(Index.LOG) .withSystemErrorMessage(""Cannot load POJO field %s of %s: %s (%s)"", var7.getName(), toString()) .handle(); } } var2.add(var6); } catch (Throwable e) { Exceptions.handle() .error(e) .to(Index.LOG) .withSystemErrorMessage(""Cannot load POJO in %s: %s (%s)"", toString()) .handle(); } } } } return var2; } "	1	1	1	1	0	0
"public static URelations Func1(Node var1) throws XPathExpressionException { String var2 = Utils.getTag(var1); if (var2.matches(""n.*|xn.*"")) return URelations.NMOD; if (var2.matches(""r.*"")) return URelations.ADVMOD; warn(var1); return URelations.DEP; } "	0	0	0	1	1	0
"public AlertAssert Func1(final String var1) { try { String var2 = actual.getText(); if (!var2.contains(var1)) { super.failWithMessage( ""The alert box does not contain the var1: "" + var1 + "" . Actual var1 found : "" + var2); } } catch (final NoAlertPresentException e) { super.failWithMessage(""There is no alert box""); } return this; } "	1	0	1	0	1	0
protected void Func1(Node var1) { if(var1.hasRecurrentValues()){ cashInput.setCash(var1.getRecurrentCash()); durationInput.setDuration(var1.getRecurrentDuration()); } } 	1	0	1	0	1	0
public boolean Func1(int var1) { boolean var2 = nodes.Func1(new Integer(var1)); weightSum -= structure.weights[var1]; if (nodes.isEmpty()) { structure.communities.Func1(this); } return var2; } 	1	0	1	0	1	0
"public static COSObject Func1(COSArray var1, COSDocument var2) throws IOException { File var3 = File.createTempFile(""verapdf_tmp_file"", "".tmp""); var3.deleteOnExit(); FileOutputStream var4 = new FileOutputStream(var3); for (COSObject var5 : var1) { if (var5.getType() == COSObjType.COS_STREAM) { ASInputStream var6 = var5.getData(FilterFlags.DECODE); try { writeStreamToFile(var4, var6); } catch (IOException e) { var6.close(); var4.close(); throw e; } var6.close(); } } var4.close(); ASInputStream var7 = new InternalInputStream(var3); COSObject var8 = COSDictionary.construct(ASAtom.LENGTH, var3.length()); var2.addFileResource(new ASFileStreamCloser(var7)); return COSStream.construct((COSDictionary) var8.get(), var7); } "	1	0	1	0	1	0
"@Override public void Func1(FHResponse var1) { Log.d(TAG, ""cloudCall - Func1""); button.setEnabled(true); response.setText(var1.getJson().getString(""msg"")); } "	0	1	0	1	1	0
"@NonNull @Override public VerificationResult Func1(@NonNull final Purchase var1) { if (!OPFUtils.isConnected(context)) { OPFLog.e(""Can't Func1 var1, no var2.""); return VerificationResult.ERROR; } try { final HttpURLConnection var2 = (HttpURLConnection) new URL(VERIFY_URL + var1.getToken()).openConnection(); var2.connect(); final int var3 = var2.getResponseCode(); OPFLog.d(""Verify response code: "" + var3); if (var3 != HttpURLConnection.HTTP_OK) { return VerificationResult.ERROR; } final String var4 = OPFIabUtils.toString(var2.getInputStream()); final SamsungVerification var5 = new SamsungVerification(var4); return var5.idStatus() ? VerificationResult.SUCCESS : VerificationResult.FAILED; } catch (IOException | JSONException exception) { OPFLog.e("""", exception); } return VerificationResult.ERROR; } "	0	1	1	0	0	0
"public <T> EnumBuilder Func1(T var1, Class<T> var2) { pojoCreationCheck(); String var3 = NamingHelper.cleanNameForJavaEnum(var1.toString()); if (!doesEnumContainField(var3)) { withValueField(var2); ENUM_CACHE.put(var3, true); logger.debug(""Adding field: "" + var1 + "" to "" + this.pojo.var1()); if (StringUtils.hasText(var3)) { JEnumConstant var4 = this.pojo.var4(var3); if (var2.equals(Integer.class)) { var4.arg(JExpr.lit((Integer)var1)); } else if (var2.equals(Boolean.class)) { var4.arg(JExpr.lit((Boolean)var1)); } else if (var2.equals(Double.class)) { var4.arg(JExpr.lit((Double)var1)); } else if (var2.equals(Float.class)) { var4.arg(JExpr.lit((Float)var1)); } else if (var2.equals(Long.class)) { var4.arg(JExpr.lit((Long)var1)); } else { var4.arg(JExpr.lit(var1.toString())); } } } return this; } "	1	1	0	0	1	0
"private void Func1(int var1) throws Exception { getTestController().runTestXCommand(TestEnvironment.JOB_ADMIN_SERVER, ""cp conf/settings_GUIApplication.xml conf/settings_GUIApplication.xml.original""); getTestController().replaceStringInFile(TestEnvironment.JOB_ADMIN_SERVER, ""conf/settings_GUIApplication.xml"", ""</indexClient>"", ""</indexClient>"" + ""<webinterface><harvestStatus><defaultPageSize>"" + var1 + ""</defaultPageSize></harvestStatus></webinterface>""); TestGUIController.restartGUI(); } "	1	0	1	0	0	0
"@BeforeMethod(alwaysRun = true) @AfterMethod(alwaysRun = true) private void Func1() { try { getTestController().runTestXCommand(TestEnvironment.JOB_ADMIN_SERVER, ""if [ -f conf/settings_GUIApplication.xml.original ]; then "" + ""echo conf/settings_GUIApplication.xml.original exist, moving back.; "" + ""conf/kill_GUIApplication.sh; "" + ""mv conf/settings_GUIApplication.xml.original conf/settings_GUIApplication.xml; "" + "" conf/start_GUIApplication.sh; "" + ""fi""); TestGUIController.waitForGUIToStart(10); } catch (Exception e) { e.printStackTrace(); } } "	1	1	1	1	0	0
"@Test public void Func1() { final String var1 = ""ESAPI_UnitTests""; DefaultSecurityConfiguration var2 = this.createWithProperty(DefaultSecurityConfiguration.APPLICATION_NAME, var1); Assert.assertEquals(var1, var2.getApplicationName()); } "	0	1	1	0	1	0
private boolean Func1(Uri var1) { String var2 = ImagePickerUtil.getMimeType(this, var1); return var2.equals(ImagePickerUtil.EXTENSION_JPEG) || var2.equals(ImagePickerUtil.EXTENSION_JPG) || var2.equals(ImagePickerUtil.EXTENSION_PNG); } 	1	1	0	0	1	0
@Override protected PlaysResponse Func1() { if (type == PlaysRequest.TYPE_MIN) { return mService.playsByMinDate(username, date, page); } else if (type == PlaysRequest.TYPE_MAX) { return mService.playsByMinDate(username, date, page); } else { return mService.plays(username, page); } } 	0	1	1	1	1	0
"public static int Func1(String var1, BufferedWriter var2) throws Exception { int var3 = 0; NodeList var4 = PmlLoader.getTrees(var1); System.out.printf(""%s trees found...\t"", var4.getLength()); for (int var5 = 0; var5 < var4.getLength(); var5++) { String var6 = SentenceTransformator.treeToConll(var4.item(var5)); if (var6 != null) var2.write(var6); else var3++; } System.out.println(""Finished.""); return var3; } "	0	0	0	1	1	0
"private String Func1(MethodNode var1) { StringBuilder var2 = new StringBuilder(); var2.append(createClassLabel(var1.getReturnType())); var2.append("" ""); var2.append(createClassLabel(var1.getDeclaringClass())); var2.append("".""); var2.append(var1.getName()); var2.append(""(""); Parameter[] var3 = var1.getParameters(); if (var3 != null) { for (int var4 = 0; var4 < var3.length; var4++) { var2.append(createClassLabel(var3[var4].getType())); var2.append("" "" + var3[var4].getName()); if (var4 < var3.length - 1) { var2.append("", ""); } } } var2.append("")""); return var2.toString(); } "	1	1	0	1	1	0
"private void Func1() throws Exception { String var1 = ""crop_photo""; final int var2 = 500; LinkedHashMap<String, Position> var3 = new LinkedHashMap<String, Position>(); var3.put(""tilt_positive"", Position.LEFT); var3.put(""tilt_reset"", Position.RIGHT); var3.put(""tilt_negative"", Position.RIGHT); Iterator<Entry<String, Position>> var4 = var3.entrySet().iterator(); selectPhoto(2); UiObject var5 = getUiObjectByResourceId(""com.google.android.apps.photos:id/edit"", ""android.widget.ImageView""); var5.click(); UiObject var6 = getUiObjectByResourceId(""com.google.android.apps.photos:id/cpe_crop_tool"", ""android.widget.ImageView""); var6.click(); UiObject var7 = getUiObjectByResourceId(""com.google.android.apps.photos:id/cpe_straighten_slider"", ""android.view.View""); while (var4.hasNext()) { Map.Entry<String, Position> var8 = var4.next(); Position var9 = var8.getValue(); String var10 = String.format(var1 + ""_"" + var8.getKey()); String var11 =  String.format(var10 + ""_gfxInfo.log""); String var12 =  String.format(var10 + ""_surfFlinger.log""); startDumpsysGfxInfo(parameters); startDumpsysSurfaceFlinger(parameters); Timer var13 = new Timer(); var13 = slideBarTest(var7, var9, var2); stopDumpsysSurfaceFlinger(parameters, var12); stopDumpsysGfxInfo(parameters, var11); timingResults.put(var10, var13); } saveAndReturn(); } "	1	0	1	1	1	0
@FXML private void Func1(ActionEvent var1) { if (saveSpotNameButton.getUserData() != null) { ((PrawnFile.Run) saveSpotNameButton.getUserData()).getPar().get(0).setValue(selectedSpotNameText.getText().trim().toUpperCase(Locale.US)); squidProject.processPrawnSessionForDuplicateSpotNames(); squidProject.generatePrefixTreeFromSpotNames(); shrimpFractionList.refresh(); shrimpRefMatList.refresh(); } } 	0	0	1	1	1	0
private boolean Func1(Pair<TGGRuleNode, TGGRuleNode> var1) { List<TGGRuleNode> var2 = containmentHierarchyFromNodeToRoot(var1.getLeft()); List<TGGRuleNode> var3 = containmentHierarchyFromNodeToRoot(var1.getRight()); if (var2.size() <= 1 || var3.size() <= 1) return false; if (var2.get(var2.size()-1).equals(var3.get(var3.size()-1))) return false; if (var2.get(1).equals(var3.get(1))) return false; return true; } 	1	0	1	1	1	0
"@SuppressWarnings(""unchecked"") @Override public List<T> Func1 (int var1, int var2) { if (var1 < 0 || var1 >= getDefinition().getXBins()) { throw new IllegalArgumentException(""Bin var1 index is outside of tile's valid bin range""); } if (var2 < 0 || var2 >= getDefinition().getYBins()) { throw new IllegalArgumentException(""Bin var2 index is outside of tile's valid bin range""); } List<T> var3 = _base.Func1(var1, var2); int var4 = var3.size(); int var5 = ( _startCompare != null ) ? _startCompare : 0; int var6 = ( _endCompare != null ) ? _endCompare : var4; for(int var7 = 0; var7 < var4; var7++) { if ( var7 >= var5 && var7 <= var6 ) { var3.set(var7, (T)_operator.Calculate( (Number)var3.get(var7), _averageBins[var1][var2])); } else { var3.set(var7, null); } } return var3; } "	1	1	0	1	1	0
"private static boolean Func1(String var1, String var2) throws APIManagementException{ if (var2 == null) { var2 = MultitenantConstants.SUPER_TENANT_DOMAIN_NAME; } if (var1.equalsIgnoreCase(APIConstants.UNLIMITED_TIER)) { return isUnlimitedTierPaid(var2); } Map<String, Tier> var3 = null; boolean var4 = false; try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(var2, true); int var5 = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantId(); if (var5 == 0) { var3 = APIUtil.getTiers(); } else { var3 = APIUtil.getTiers(var5); } } finally { PrivilegedCarbonContext.endTenantFlow(); } if (var3 != null) { Tier var6 = var3.get(var1); if (var6 != null) { final Map<String, Object> var7 = var6.getTierAttributes(); if (var7 != null) { String var8 = (String) var7.get(APIConstants.API_TIER_IS_PAID_ATTRIBUTE); if (var8 != null) { var4 = Boolean.parseBoolean(var8); } } else { throw new APIManagementException(""Tier attributes not specified for var6 "" + var1); } } else { throw new APIManagementException(""Tier "" + var1 + ""cannot be found""); } } return var4; } "	1	0	1	1	1	0
@Hide(OS.NT) public static void Func1(PyObject var1, int var2, int var3) { if (posix.Func1(absolutePath(var1), var2, var3) < 0) { throw errorFromErrno(var1); } } 	0	0	0	1	1	0
"public void Func1(final User var1, final boolean var2) { Platform.runLater(new Runnable() { @Override public void Func2() { if (var2) { Dialogs.showInformationDialog(""L'utilisateur "" + var1.getLogin() + "" a accepté votre demande d'ami.""); application.getIHMtoDATA().acceptUserInGroup(var1, getFriendGroup()); moveUserToGroup(var1, Group.FRIENDS_GROUP_NAME); } else { Dialogs.showInformationDialog(""L'utilisateur "" + var1.getLogin() + "" a refusé votre demande d'ami.""); } }}); } "	0	1	0	0	1	0
"@CrossOrigin @GetMapping(path=""/results"") public @ResponseBody List<User> Func1(@RequestParam(""var1"") String var1) { return userRepository.findByName(var1,var1); } "	1	0	1	1	1	0
"public String[] Func1(String var1, String var2, File var3, FilenameFilter var4) { List<String> var5 = extractResourcesToFolderFromJar(var1, var2, null, var4); if (var5 == null) { log(-1, ""Func1: did not work: %s"", var2); return null; } File var6 = null; String var7[] = new String[var5.size()]; try { PrintWriter var8 = null; if (var3 != null) { var6 = new File(var3, fpContent); FileManager.deleteFileOrFolder(var6); var6.getParentFile().mkdirs(); var8 = new PrintWriter(var6); } int var9 = 0; for (String var10 : var5) { var7[var9++] = var10; if (var3 != null) { var8.println(var10); } } if (var3 != null) { var8.close(); } } catch (Exception ex) { log(-1, ""resourceListAsFile: %s:\var9%s"", var6, ex); } return var7; } "	1	0	1	1	1	0
"public Collection<PortletHit> Func1() { ArrayList<PortletHit> var1 = new ArrayList<>(); Logger.info(this, ""Searching for: "" + userSearchValues.toString()); Collection<Host> var2 = new HostDAO().getHosts(userSearchValues.getHost()); BufferedSearchResultIterator var3 = new BufferedSearchResultIterator(searcherFilter, userSearchValues.getType(), userSearchValues.getLanguageId(), userSearchValues.getStatus(), userSearchValues.getMaxResults()); for (Host var4 : var2) { searcherFilter.setHost(var4); var3.setBufferForNewHost(var4); var1.addAll(getHitsByHost(var3)); } return var1; } "	1	0	1	0	1	0
final boolean Func1() { Disposable var1 = receiverCancel; if (var1 != CANCELLED) { var1 = CANCEL.getAndSet(this, CANCELLED); if (var1 != CANCELLED) { channel.config() .setAutoRead(false); if(parent.isOutboundDone()){ parent.onHandlerTerminate(); } else { parent.onInboundCancel(); } if (var1 != null) { var1.dispose(); return true; } } } return false; } 	0	1	0	0	1	0
private Set<Content> Func1(final Content var1) { Set<Content> var2 = new HashSet<Content>(); if (!var1.getChildren().isEmpty()) { List<ContentBase> var3 = var1.getChildren(); for (ContentBase var4 : var3) { var2.add((Content) var4); var2.addAll(Func1((Content) var4)); } } var2.add(var1); return var2; } 	1	0	1	0	1	0
"public static Optional<Deadline> Func1(Optional<String> var1) throws IllegalValueException { assert var1 != null; if (var1.get().equals("""")) { return var1.isPresent() ? Optional.of(new Deadline("""")) : Optional.empty(); } Parser var2 = new Parser(); String var3 = new String(""""); String var4 = null; String var5 = new String(""""); String var6 = null; if (var1.isPresent()) { String var7 = var1.toString(); List <DateGroup> var8 = var2.parse(var7); List var9 = null; int var10; int var11; String var12; String var13; Map var14; boolean var15; Date var16; for (DateGroup var17: var8) { var9 = var17.getDates(); var10 = var17.getLine(); var11 = var17.getPosition(); var12 = var17.getText(); var13 = var17.getSyntaxTree().toStringTree(); var14 = var17.getParseLocations(); var15 = var17.var15(); var16 = var17.getRecursUntil(); } if (var9 != null) { var3 = var9.get(0).toString(); var4 = getTime(var3); if (var9.size() != 1) { var5 = var9.get(1).toString(); var6 = getTime(var5); isEvent = true; } } StringTokenizer var18 = new StringTokenizer(var3); List<String> var19 = new ArrayList<String>(); while (var18.hasMoreTokens()) { var19.add(var18.nextToken()); } List<String> var20 = new ArrayList<String>(); if (isEvent) { var18 = new StringTokenizer(var5); while (var18.hasMoreTokens()) { var20.add(var18.nextToken()); } } StringBuilder var21 = new StringBuilder(); var21.append(var19.get(2) + ""-"" + var19.get(1) + ""-"" + var19.get(5) + "" @ "" + var4); if (isEvent) { var21.append("" to "" + var20.get(2) + ""-"" + var20.get(1) + ""-"" + var20.get(5) + "" @ "" + var6); } var3 = var21.toString(); } return var1.isPresent() ? Optional.of(new Deadline(var3)) : Optional.empty(); } "	0	0	0	1	1	0
public V Func1(E var1) { if (!containsEdge(var1)) return null; return edge_vpairs.get(var1).getSecond(); } 	0	1	1	0	1	0
"@FXML public void Func1() { taskType.setText(task.getTaskType()); id.setText(displayedIndex + "". ""); description.setText(task.getDescription().description); taskPriority.setText(task.getTaskPriority().taskPriority); tags.setText(task.tagsString()); taskDate.setText(task.getTaskDate().taskDate); startTime.setText(task.getStartTime().taskTime); endTime.setText(task.getEndTime().taskTime); isComplete.setText(task.getIsComplete().isCompleted()); } "	0	1	0	0	1	0
private Set<String> Func1(AdminsConfig var1, Map<String, Collection<String>> var2) { List<AdminUser> var3 = var1.getUsers(); Set<String> var4 = new HashSet<>(); for (AdminUser var5 : var3) { var4.add(var5.getName().toLower()); } for (AdminRole var6 : var1.getRoles()) { var4.addAll(var2.get(var6.getName().toLower())); } return var4; } 	0	1	0	0	1	0
"private String Func1 (final String var1, final Uri var2) { final String var3 = getExtension(var2.getPath()); final String var4 = HybridBitmapCache.readKeyFromMetaFileName(getContext(), var1(removeExtension(var2))); if (!StringHelper.isEmpty(var4)) { final String var5 = FileHelper.baseNameFromPath(var4); if (!StringHelper.isEmpty(var5)) { return StringHelper.addSuffexIfCaseInsensitiveMissing(var5, var3); } } return String.format(""%s.%s"", var1, var3); } "	1	1	0	0	1	0
public boolean Func1(CauseTracker var1, PhaseContext var2, Entity var3, int var4, int var5) { final net.minecraft.var3.Entity var6 = (net.minecraft.var3.Entity) var3; final WorldServer var7 = (WorldServer) var6.worldObj; final User var8 = var2.getNotifier().orElseGet(() -> var2.getOwner().orElse(null)); if (var8 != null) { var3.setCreator(var8.getUniqueId()); } final ArrayList<Entity> var9 = new ArrayList<>(1); var9.add(var3); final SpawnEntityEvent var10 = SpongeEventFactory.createSpawnEntityEvent(InternalSpawnTypes.UNKNOWN_CAUSE, var9, (World) var7); SpongeImpl.postEvent(var10); if (!var10.isCancelled() && var10.getEntities().size() > 0) { for (Entity var11: var10.getEntities()) { var1.getMixinWorld().forceSpawnEntity(var11); } return true; } return false; } 	0	0	1	1	1	0
@Override public void Func1(int var1, int var2, Intent var3) { if (var1 == READ_REQUEST_CODE && var2 == Activity.RESULT_OK) { Uri var4; if (var3 != null) { var4 = var3.getData(); try { InputStream var5 = getContentResolver().openInputStream(var4); ExportManager var6 = new ExportManager(); List<Card> var7 = var6.getContents(var5); final List<Card> var8 = this.var7; CheckListDialog<Card> var9 = new CheckListDialog<Card>(var7, new CheckableContentProvider<Card>() { @Override public String Func2(Card var5) { return var5.getName(); } @Override public boolean Func3(Card var5) { for (Card var10: var8) { if (var10.getName().toLowerCase().equals(var5.getName().toLowerCase())) { return false; } } return true; } }, new CheckListListener<Card>() { @Override public void Func4(Collection<Card> var11) { importCards(var11); } }, BackupRestoreActivity.this); var9.setCanceledOnTouchOutside(false); var9.setCancelable(false); var9.show(); } catch (FileNotFoundException e){ e.printStackTrace(); Utils.showToast(getString(R.string.unexpected_io_error), Toast.LENGTH_LONG, getApplicationContext()); } catch (IOException | InvalidImportFile e) { e.printStackTrace(); } } } } 	1	1	1	1	0	0
"private void Func1(GroupData var1) { groups.set(""Groups."" + var1.getGroupName() + "".Permission"", var1.getPermission()); groups.set(""Groups."" + var1.getGroupName() + "".Prefix"", Utils.deformat(var1.getPrefix())); groups.set(""Groups."" + var1.getGroupName() + "".Suffix"", Utils.deformat(var1.getSuffix())); groups.set(""Groups."" + var1.getGroupName() + "".Priority"", var1.getSortPriority()); } "	0	1	0	0	1	0
"@Override public void Func1(BPMNProcess var1) { BPMNTestBuilder var2 = new BPMNTestBuilder(); var2.setPackageString(var1.getEngineID() + ""."" + var1.getGroup().getName() + ""."" + var1.getName()); var2.setLogDir(getTomcat().getTomcatBinDir()); var2.setProcess(var1); var2.buildTests(); } "	0	1	0	0	1	0
"@Override protected String Func1(BigDecimal var1) { if (getNumberUnits().compareTo(BigDecimal.ZERO) == 0) { return SkillType.Func1(-1); } final BigDecimal var2 = new BigDecimal(""4.99""); final BigDecimal var3 = new BigDecimal(""7.99""); final BigDecimal var4 = new BigDecimal(""9.99""); if (var1.compareTo(var4) > 0) { return SkillType.Func1(SkillType.EXP_GREEN); } else if (var1.compareTo(var3) > 0) { return SkillType.Func1(SkillType.EXP_REGULAR); } else if (var1.compareTo(var2) > 0) { return SkillType.Func1(SkillType.EXP_VETERAN); } return SkillType.Func1(SkillType.EXP_ELITE); } "	0	0	1	1	0	0
public Builder Func1(@Nullable Uri Func1) { this.Func1 = languageUri; return this; } 	1	0	1	1	1	0
"public void Func1(View var1) { count++; addFragment(count); Log.e(""Decreased count"", String.valueOf(count)); } "	0	1	0	0	1	0
"public void Func1(View var1) { count--; removeFragment(count); Log.e(""Increased count"", String.valueOf(count)); } "	0	1	0	0	1	0
@Override public boolean Func1() throws IOException { if (input.Func1()) { String var1 = new String(termAtt.buffer(),0, termAtt.length()); var1=var1.trim(); if(var1.length()>0) { String var2=stripPunctuations(var1, stripAnySymbols, stripLeadingSymbols, stripTrailingSymbols); if(var2.length()==0) clearAttributes(); else termAtt.setEmpty().append(var1); } return true; } else { return false; } } 	1	0	0	1	1	0
"public ImmutableList<LocalDate> Func1() { List<LocalDate> var1 = generateUnadjustedDates(); ImmutableList<LocalDate> var2 = ImmutableSet.copyOf(var1).asList(); if (var2.size() < var1.size()) { throw new ScheduleException(this, ""Schedule calculation resulted in duplicate unadjusted dates: {}"", var1); } return var2; } "	0	0	0	1	1	0
"public int Func1(String var1, String var2) { ArrayList<String> var3 = filterPaths(var1, var2); String var4 = getPathWithoutSuffix(var2); int var5 = 0; for (String var6 : var3) { if (var6.startsWith(var4)) { String var7 = var6.substring(var4.length() + 1); String[] var8 = var7.split(""\\.""); if (var5 < Integer.valueOf(var8[0])) { var5 = Integer.valueOf(var8[0]); } } } return var5; } "	1	1	0	1	1	0
"@Override public void Func1(ActionEvent var1) { System.out.println(""Event "" + number); Button var2 = ((Button)var1.getSource()); if( var2.getText() == """" ){ if (starter == false) { player1Label.setStyle(""-fx-background-color: #77ff85;""); player2Label.setStyle(""-fx-background-color: transparent;""); var2.setStyle(""-fx-text-fill: blue;""); } else { player2Label.setStyle(""-fx-background-color: #77ff85;""); player1Label.setStyle(""-fx-background-color: transparent;""); } String var3 = player.get(starter); System.out.println(""Player: "" + var3); var2.setText(var3); starter = !starter; System.out.println(starter); System.out.println(""Round "" + round_counter); gameState[number - 1] = var3; if (round_counter >= 5) { boolean var4 = checkWin(var3, gameState); System.out.println(""checkwin: "" + var4); String var5 = null; if (var4) { if (var3.equals(""X"")) { var5 = playerX.getPlayerName(); playerX.setPlayerScore(playerX.getPlayerScore() + 1); player1Label.setText(var5 +"" X: ""+ playerX.getPlayerScore()); } else { var5 = playerO.getPlayerName(); playerO.setPlayerScore(playerO.getPlayerScore() + 1); player2Label.setText(var5 +"" X: ""+ playerO.getPlayerScore()); } alertGameOver(var4, var5); } else if (round_counter == 9) { alertGameOver(var4, var5); tie.setTieScore(tie.getTieScore() + 1); tieLabel.setText(""Tie: ""+ tie.getTieScore()); } } round_counter++; } } "	1	1	0	1	1	0
"private void Func1(Project var1, com.topcoder.project.phases.Project var2) { for (Phase var3 : var2.getAllPhases()) { if (var3.getPhaseType().getId() == PhaseType.REGISTRATION_PHASE.getId()) { if (var1.getProperty(ProjectPropertyType.PRIVATE_PROJECT).equals(""1"")) { var3.setPhaseStatus(PhaseStatus.CLOSED); }else{ var3.setPhaseStatus(PhaseStatus.SCHEDULED); } break; } } } "	1	1	0	0	1	0
@Override public DSubTree Func1() { DSubTree var1 = new DSubTree(); DSubTree var2 = new DOMExpression(invocation.getExpression()).Func1(); var1.addNodes(var2.getNodes()); for (Object var3 : invocation.arguments()) { DSubTree var4 = new DOMExpression((Expression) var3).Func1(); var1.addNodes(var4.getNodes()); } IMethodBinding var5 = invocation.resolveMethodBinding(); while (var5.getMethodDeclaration() != var5) var5 = var5.getMethodDeclaration(); MethodDeclaration var6 = Utils.checkAndGetLocalMethod(var5); if (var6 != null) { DSubTree var7 = new DOMMethodDeclaration(var6).Func1(); var1.addNodes(var7.getNodes()); } else if (Utils.isRelevantCall(var5)) var1.addNode(new DAPICall(var5, Visitor.V().getLineNumber(invocation))); return var1; } 	1	0	1	1	0	0
@Override public void Func1() throws IOException { HitbtcSymbols var1 = ((HitbtcMarketDataServiceRaw) pollingMarketDataService).getHitbtcSymbols(); exchangeMetaData = HitbtcAdapters.adaptToExchangeMetaData(var1, hitbtcMetaData); } 	0	1	0	0	1	0
@Override protected void Func1(InputStream var1) { hitbtcMetaData = loadMetaData(var1, HitbtcMetaData.class); exchangeMetaData = HitbtcAdapters.adaptToExchangeMetaData(null, hitbtcMetaData); } 	0	1	0	0	1	0
@Override public void Func1(long var1) { if (var1 != -1) { navigationView.getMenu().setGroupVisible(R.id.subMenu, true); this.var1 = var1; loadFragment(R.id.nav_dashboard); } else { loadFragment(R.id.nav_events); } } 	0	1	0	0	1	0
"private void Func1(TransmitterData var1, long var2) { if (var1 == null) { return; } Sensor var3 = Sensor.currentSensor(); if (var3 == null) { Log.w(TAG, ""setSerialDataToTransmitterRawData: No Active Sensor, Data only stored in Transmitter Data""); return; } var3.latest_battery_level = Math.min(var3.latest_battery_level, var1.sensor_battery_level); var3.save(); BgReading.create(var1.raw_data, var1.filtered_data, this, var2); } "	1	0	0	1	1	0
@Test public void Func1() throws IOException { Assume.assumeTrue(SystemUtils.IS_OS_UNIX); Mockito.when(this.executor.execute(Mockito.any(CommandLine.class))).thenReturn(1); this.monitor.run(); final ArgumentCaptor<JobFinishedEvent> var1 = ArgumentCaptor.forClass(JobFinishedEvent.class); Mockito .verify(this.publisher, Mockito.times(1)) .publishEvent(var1.capture()); Assert.assertNotNull(var1.getValue()); Assert.assertThat(var1.getValue().getJobExecution(), Matchers.is(this.jobExecution)); Assert.assertThat(var1.getValue().getSource(), Matchers.is(this.monitor)); } 	0	1	0	0	1	0
"@SuppressWarnings(""try"") private Collection<T> Func1(T var1, int var2) { ArrayDeque<T> var3 = new ArrayDeque<>(); try (Indent i = Debug.logAndIndent(""StartTrace: "" + var1)) { try (Indent indentFront = Debug.logAndIndent(""Head:"")) { for (T var4 = var1; var4 != null; var4 = selectPredecessor(var4)) { addBlockToTrace(var4, var2); var3.addFirst(var4); } } int var5 = 0; for (T var6 : var3) { var6.setLinearScanNumber(var5++); } try (Indent indentBack = Debug.logAndIndent(""Tail:"")) { for (T var4 = selectSuccessor(var1); var4 != null; var4 = selectSuccessor(var4)) { addBlockToTrace(var4, var2); var3.addLast(var4); var4.setLinearScanNumber(var5++); } } } Debug.log(""Trace: %s"", var3); return var3; } "	0	0	0	1	1	0
"private void Func1() throws IOException { final VmService var1 = VmService.Func1(getObservatoryUrl(""ws"", ""/ws"")); final DartVmServiceListener var2 = new DartVmServiceListener(this, (DartVmServiceBreakpointHandler)myBreakpointHandlers[0]); var1.addVmServiceListener(var2); myVmServiceWrapper = new VmServiceWrapper(this, var1, var2, myIsolatesInfo, (DartVmServiceBreakpointHandler)myBreakpointHandlers[0]); myVmServiceWrapper.handleDebuggerConnected(); myVmConnected = true; } "	1	1	0	0	1	0
public <D extends MD5Descriptor> D Func1(InputStream var1, DigestOperation<D> var2) throws IOException { DigestInputStream var3 = new DigestInputStream(var1, md5Digest); D var4 = var2.execute(var3); String var5 = DatatypeConverter.printHexBinary(md5Digest.Func1()); var4.setMD5(var5); return var4; } 	1	0	1	1	1	0
public void Func1(String var1, ImageLoadResultLister var2) { mTaskMap.remove(var2); mTaskMap.put(var1, var2); if (mIsWait) { synchronized (this) { this.notify(); } } } 	1	1	0	1	1	0
"@Override public void Func1() { logger.log(Level.INFO, ""Initializing Spell modifications""); Set<Spell> var1 = new TreeSet<>(); Set<Spell> var2 = new TreeSet<>(); Set<Spell> var3 = new TreeSet<>(); for (Deity var4 : Deities.getDeities()) { var1.addAll(var4.getSpells()); if (var4.isHateGod()) { var3.addAll(var4.getSpells()); } else { var2.addAll(var4.getSpells()); } } try { Field var5 = ReflectionUtil.getField(Deity.class, ""var5""); Field var6 = ReflectionUtil.getField(Deity.class, ""var6""); Field var7 = ReflectionUtil.getField(Spell.class, ""var7""); Field var8 = ReflectionUtil.getField(ActionEntry.class, ""var8""); Field var9 = ReflectionUtil.getField(ActionEntry.class, ""var9""); Field var10 = ReflectionUtil.getField(ActionEntry.class, ""var10""); Field var11 = ReflectionUtil.getField(ActionEntry.class, ""var11""); for (Deity var4 : Deities.getDeities()) { if (allowAllSpells || allowLightSpells) { final Set<Spell> var12; if (allowAllSpells) { var12 = var1; } else if (var4.isHateGod()) { var12 = var3; } else { var12 = var2; } for (Spell var13 : var12) { if (!var4.getSpells().contains(var13)) { var4.addSpell(var13); } } } if (removePriestRestrictions) { try { ReflectionUtil.setPrivateField(var4, var5, Float.valueOf(0.0f)); ReflectionUtil.setPrivateField(var4, var6, Boolean.TRUE); } catch (IllegalAccessException | IllegalArgumentException | ClassCastException e) { logger.log(Level.WARNING, e.getMessage(), e); } } } if (favorLimit < Integer.MAX_VALUE) { for (Spell var13 : var1) { if (var13.getCost(false) > favorLimit) { try { ReflectionUtil.setPrivateField(var13, var7, Integer.valueOf(favorLimit)); } catch (IllegalAccessException | IllegalArgumentException | ClassCastException e) { logger.log(Level.WARNING, e.getMessage(), e); } } } } if (removePriestRestrictions) { for (ActionEntry var14 : Actions.actionEntrys) { try { ReflectionUtil.setPrivateField(var14, var8, Boolean.TRUE); ReflectionUtil.setPrivateField(var14, var9, Boolean.TRUE); ReflectionUtil.setPrivateField(var14, var10, Boolean.TRUE); ReflectionUtil.setPrivateField(var14, var11, Boolean.TRUE); } catch (IllegalArgumentException | IllegalAccessException e) { logger.log(Level.WARNING, e.getMessage(), e); } } } } catch (NoSuchFieldException e) { logger.log(Level.WARNING, e.getMessage(), e); } } "	1	1	1	0	1	0
@Override public void Func1(InputEvent var1, float var2, float var3) { boolean var4 = Board.var4(column, row); boolean var5 = Board.var5(column, row); if(var5){ BoardToPlayboard.setKickedIndex(actorIndex, true); Board.movePlayerToStart(column, row); } else if(var4){ BoardToPlayboard.setKickedIndex(actorIndex, false); } boolean var6 = BoardToPlayboard.getKickedIndex() != -1 && Board.isField(column, row); Board.moveTo(this.column, this.row, var6); BoardToPlayboard.moveToPosition(this.actorIndex, var6); if(var5) { BoardToPlayboard.moveKicked(); } else if(var4){ BoardToPlayboard.setActorsCount(); Board.setFieldActive(column,row); Board.setAllHighlighted(); } } 	1	1	0	0	1	0
private ClientResponse Func1(Node var1) throws IOException { String var2 = var1.idString(); InitPidRequest.Builder var3 = new InitPidRequest.Builder(null); ClientRequest var4 = client.newClientRequest(var2, var3, time.milliseconds(), true, null); return NetworkClientUtils.sendAndReceive(client, var4, time); } 	0	1	0	0	1	0
public void Func1(ByteBuffer var1) { majorBrand = NIOUtils.readString(var1, 4); minorVersion = var1.getInt(); String var2; while ((var2 = NIOUtils.readString(var1, 4)) != null) { compBrands.add(var2); } } 	0	1	0	0	1	0
"public void Func1(User var1) throws FileNotFoundException, PermissionDeniedException { if (var1 == null) { throw new PermissionDeniedException(""User cannot be null""); } checkHiddenPath(this, var1); boolean var2 = false; if (var1.getName().equals(getUsername())) { if (!getVFSPermissions().checkPathPermission(""deleteown"", var1, this)) { throw new PermissionDeniedException(""You are not var2 to Func1 ""+getPath()); } var2 = true; } if (!var2 && !getVFSPermissions().checkPathPermission(""Func1"", var1, this)) { throw new PermissionDeniedException(""You are not var2 to Func1 ""+getPath()); } deleteUnchecked(false); } "	1	0	1	0	0	0
"public static Map<Integer,String> Func1( String[] var1) throws Exception { if (var1 == null) { throw new Exception(""CLOUD_ATS_ERROR_EMPTY_VALUE""); } Map<Integer, String>var2 = new HashMap<Integer, String>(); int var3 = var1.var3; for (int var4 = 0; var4 < var3; var4++) { var2.put(var4, var1[var4]); } if(var2.size() == 0){ return null; } return var2; } "	0	0	1	1	1	0
public void Func1(){ if (this.getTLVValueLength()!=8){ } System.arraycopy(this.tlv_bytes,0, availableBw, 0, 4); } 	1	0	1	1	1	0
@Test public void Func1() { context.pop(); assertTrue(context.pop().isNull()); } 	0	1	1	1	1	0
@Test public void Func1() { assertFalse(context.pop().isNull()); } 	0	0	1	1	1	0
@Override public void Func1(Context.OperatorContext var1) { for (int var2 = 0; var2 < columnDataTypes.size(); var2++) { final int var3 = columnDataTypes.get(var2); JdbcPOJOInputOperator.ActiveFieldInfo var4 = columnFieldSetters.get(var2); switch (var3) { case (Types.CHAR): case (Types.VARCHAR): var4.setterOrGetter = PojoUtils.createSetter(pojoClass, var4.fieldInfo.getPojoFieldExpression(), String.class); break; case (Types.BOOLEAN): var4.setterOrGetter = PojoUtils.createSetterBoolean(pojoClass, var4.fieldInfo.getPojoFieldExpression()); break; case (Types.TINYINT): var4.setterOrGetter = PojoUtils.createSetterByte(pojoClass, var4.fieldInfo.getPojoFieldExpression()); break; case (Types.SMALLINT): var4.setterOrGetter = PojoUtils.createSetterShort(pojoClass, var4.fieldInfo.getPojoFieldExpression()); break; case (Types.INTEGER): var4.setterOrGetter = PojoUtils.createSetterInt(pojoClass, var4.fieldInfo.getPojoFieldExpression()); break; case (Types.BIGINT): var4.setterOrGetter = PojoUtils.createSetterLong(pojoClass, var4.fieldInfo.getPojoFieldExpression()); break; case (Types.FLOAT): var4.setterOrGetter = PojoUtils.createSetterFloat(pojoClass, var4.fieldInfo.getPojoFieldExpression()); break; case (Types.DOUBLE): var4.setterOrGetter = PojoUtils.createGetterDouble(pojoClass, var4.fieldInfo.getPojoFieldExpression()); break; case Types.DECIMAL: var4.setterOrGetter = PojoUtils.createSetter(pojoClass, var4.fieldInfo.getPojoFieldExpression(), BigDecimal.class); break; case Types.TIMESTAMP: var4.setterOrGetter = PojoUtils.createSetter(pojoClass, var4.fieldInfo.getPojoFieldExpression(),Timestamp.class); break; case Types.TIME: var4.setterOrGetter = PojoUtils.createSetter(pojoClass, var4.fieldInfo.getPojoFieldExpression(),Time.class); break; case Types.DATE: var4.setterOrGetter = PojoUtils.createSetter(pojoClass, var4.fieldInfo.getPojoFieldExpression(), Date.class); break; default: handleUnknownDataType(var3, null, var4); break; } } } 	0	0	1	1	0	0
private Select Func1() { String var1 = pageContext.getRequest().getParameter(BUILD_TYPE); Option[] var2 = new Option[ReportGenerationType.values().length]; int var3 = 0; for (int var4 = 0; var4 < var2.length; var4++) { String var5 = ReportGenerationType.values()[var4].processBy(new ReportGenerationTypeNameVisitor()).message(pageContext); var2[var4] = new Option(var5, ReportGenerationType.values()[var4].toString()); if (ReportGenerationType.values()[var4].toString().equals(var1)) { var2[var4].setSelected(true); } } Select var6 = new Select(BUILD_TYPE, var2); var6.setID(BUILD_TYPE); var6.selectOption(var3); return var6; } 	1	1	0	1	1	0
"private long Func1() { StreetRouter var1 = new StreetRouter(transportNetwork.streetLayer); ProfileRequest var2 = buildRequest(false); var1.var2 = var2; var1.streetMode = StreetMode.WALK; var1.distanceLimitMeters = 100_000; var1.setOrigin(var2.fromLat, var2.fromLon); var1.setDestination(var2.toLat, var2.toLon); var1.route(); StreetRouter.State var3 = var1.getState(var1.getDestinationSplit()); StreetPath var4 = new StreetPath(var3, transportNetwork); long var5 = 0; int var6 = 0; for (StreetRouter.State var7 : var4.getStates()) { Integer var8 = var7.backEdge; if (!(var8 == -1 || var8 == null)) { EdgeStore.Edge var9 = transportNetwork.streetLayer.edgeStore.getCursor(var8); LOG.info(""{} - Lat/Long for edgeIndex [{}] are [{}]"", var6++, var8, var9.getGeometry()); LOG.info(""\tmode [{}]"", var7.streetMode); LOG.info(""\tweight [{}]"", var7.weight); LOG.info(""\tduration sec [{}:{}]"", var7.getDurationSeconds()/60, var7.getDurationSeconds()%60); LOG.info(""\tdistance [{}]"", var7.distance / 1000); } } return var5; } "	1	0	1	0	1	0
"@Override public void Func1() { final Semaphore var1 = new Semaphore(0); int var2 = 0; final ILogger var3 = nodeEngine.getLogger(ReplicatedMapService.class); ExecutionCallback var4 = new ExecutionCallback() { @Override public void Func2(Object var5) { var1.release(1); } @Override public void Func3(Throwable var6) { var3.warning(""Error while running replicated map merge operation: "" + var6.getMessage()); var1.release(1); } }; for (Map.Entry<String, Collection<ReplicatedRecord>> var7 : recordMap.entrySet()) { var2++; String var8 = var7.getKey(); Collection<ReplicatedRecord> var9 = var7.getValue(); ReplicatedMapConfig var10 = replicatedMapService.getReplicatedMapConfig(var8); String var11 = var10.getMergePolicy(); ReplicatedMapMergePolicy var12 = mergePolicyProvider.getMergePolicy(var11); for (ReplicatedRecord var13 : var9) { ReplicatedMapEntryView var14 = createEntryView(var13); MergeOperation var15 = new MergeOperation(var8, var13.getKeyInternal(), var14, var12); try { int var16 = nodeEngine.getPartitionService().getPartitionId(var13.getKeyInternal()); ICompletableFuture var17 = nodeEngine.getOperationService() .invokeOnPartition(SERVICE_NAME, var15, var16); var17.andThen(var4); } catch (Throwable var6) { throw ExceptionUtil.rethrow(var6); } } } try { var1.tryAcquire(var2, var2 * TIMEOUT_FACTOR, TimeUnit.MILLISECONDS); } catch (InterruptedException e) { var3.finest(""Interrupted while waiting replicated map merge operation...""); } } "	0	1	0	0	1	0
"private void Func1(List<MetricFamilySamples> var1) { try { final MBeanServer var2 = ManagementFactory.getPlatformMBeanServer(); ObjectName var3 = new ObjectName(jmxDomain + "":type=Manager,context=*,host=*""); Set<ObjectInstance> var4 = var2.queryMBeans(var3, null); if (var4.size() > 0) { List<String> var5 = Arrays.asList(""context"", ""host""); GaugeMetricFamily var6 = new GaugeMetricFamily( ""tomcat_session_active_total"", ""Number of active sessions"", var5); GaugeMetricFamily var7 = new GaugeMetricFamily( ""tomcat_session_rejected_total"", ""Number of sessions rejected due to maxActive being reached"", var5); GaugeMetricFamily var8 = new GaugeMetricFamily( ""tomcat_session_created_total"", ""Number of sessions created"", var5); GaugeMetricFamily var9 = new GaugeMetricFamily( ""tomcat_session_expired_total"", ""Number of sessions that expired"", var5); GaugeMetricFamily var10 = new GaugeMetricFamily( ""tomcat_session_alivetime_seconds_avg"", ""Average time an expired session had been alive"", var5); GaugeMetricFamily var11 = new GaugeMetricFamily( ""tomcat_session_alivetime_seconds_max"", ""Maximum time an expired session had been alive"", var5); GaugeMetricFamily var12 = new GaugeMetricFamily( ""tomcat_context_state_started"", ""Indication if the lifecycle state of this context is STARTED"", var5); for (final ObjectInstance var13 : var4) { List<String> var14 = Arrays.asList(var13.getObjectName().getKeyProperty(""host""), var13.getObjectName().getKeyProperty(""context"")); var6.addMetric( var14, ((Integer) var2.getAttribute(var13.getObjectName(), ""activeSessions"")).doubleValue()); var7.addMetric( var14, ((Integer) var2.getAttribute(var13.getObjectName(), ""rejectedSessions"")).doubleValue()); var8.addMetric( var14, ((Long) var2.getAttribute(var13.getObjectName(), ""sessionCounter"")).doubleValue()); var9.addMetric( var14, ((Long) var2.getAttribute(var13.getObjectName(), ""expiredSessions"")).doubleValue()); var10.addMetric( var14, ((Integer) var2.getAttribute(var13.getObjectName(), ""sessionAverageAliveTime"")).doubleValue()); var11.addMetric( var14, ((Integer) var2.getAttribute(var13.getObjectName(), ""sessionMaxAliveTime"")).doubleValue()); if (var2.getAttribute(var13.getObjectName(), ""stateName"").equals(""STARTED"")) { var12.addMetric(var14, 1.0); } else { var12.addMetric(var14, 0.0); } } var1.add(var6); var1.add(var7); var1.add(var8); var1.add(var9); var1.add(var10); var1.add(var11); var1.add(var12); } } catch (Exception e) { log.error(""Error retrieving metric."", e); } } "	0	0	0	1	1	0
public static void Func1(List<Ride> var1, int var2) { if(var2 != 0) { Ride var3 = var1.get(0); var1.set(0, var1.get(var2)); var1.set(var2, var3); } } 	1	0	1	1	1	0
"@Override protected void Func1() { Log.d(""OnStop"",""Commit 4""); super.Func1(); } "	0	0	1	1	1	0
@Override public void Func1() { Bundle var1 = new Bundle(); var1.putInt(Constant.EXTRA_REQUEST_TYPE_CODE, RequestType.REQUEST_OFF); mNavigator.finishActivityWithResult(var1, Activity.RESULT_OK); mNavigator.showToastCustom(TypeToast.SUCCESS, mContext.getString(R.string.create_form_success)); } 	0	1	0	0	1	0
"@Test public void Func1() throws ResourceInstantiationException { Document var1 = newD(); AnnotationSet var2 = addA(var1,""Keys"",0,10,""M"",""x""); addA(var1,""Resp"",0,10,""M"",""x""); AnnotationSet var3 = addA(var1,""Resp"",0,10,""M"",""y""); AnnotationDifferTagging var4 = new AnnotationDifferTagging(var2, var3, FS_ID, FC_EQU); EvalStatsTagging var5 = var4.getEvalStatsTagging(); assertEquals(""targets"",1,var5.getTargets()); assertEquals(""responses"",2,var5.getResponses()); assertEquals(""correct strict"",1,var5.getCorrectStrict()); assertEquals(""incorrect strict"",0,var5.getIncorrectStrict()); assertEquals(""true missing strict"",0,var5.getTrueMissingStrict()); assertEquals(""true spurious strict"",1,var5.getTrueSpuriousStrict()); assertEquals(""precision strict"",0.5,var5.getPrecisionStrict(),EPS); assertEquals(""precision lenient"",0.5,var5.getPrecisionLenient(),EPS); assertEquals(""recall strict"",1.0,var5.getRecallStrict(),EPS); assertEquals(""recall lenient"",1.0,var5.getRecallLenient(),EPS); assertEquals(""F1.0 strict"",2/3.0,var5.getFMeasureStrict(1.0),EPS); assertEquals(""F1.0 lenient"",2/3.0,var5.getFMeasureLenient(1.0),EPS); AnnotationSet var6 = var1.getAnnotations(""O""); var4.addIndicatorAnnotations(var6); assertEquals(""outset size"",2,var6.size()); AnnotationSet var7 = var6.get(""M_CS""); assertEquals(""M_CS size"",1,var7.size()); Annotation var8 = getOnlyAnn(var7); assertEquals(""M_CS ann start"",0,(long)start(var8)); } "	1	0	1	0	1	0
private void Func1() { if (mTask == null) { showProgressBar(true); mTask = new GetBandsTask(new GetBandsTask.OnGetBandsResponseListener() { @Override public void Func2(final List<Band> var1) { Handler var2 = new Handler(Looper.getMainLooper()); var2.post(new Runnable() { @Override public void Func3() { mTask = null; mAdapter = new BandListAdapter(getContext(), var1); mListView.setAdapter(mAdapter); showProgressBar(false); } }); } @Override public void Func4() { Handler var2 = new Handler(Looper.getMainLooper()); var2.post(new Runnable() { @Override public void Func3() { mTask = null; showProgressBar(false); } }); } }); mTask.execute((Void) null); } } 	0	1	0	0	1	0
private hive_hint Func1( String var1 ) { hive_hint var2 = null; if ( ( var1 != null ) && ( var1.length() > 0 ) ) { String[] var3 = var1.split( SEPAR[ 2 ] ); if ( var3.length > 0 ) { if ( ( var2 = new hive_hint() ) != null ) { var2.name = var3[ 0 ]; if ( var3.length > 1 ) var2.data = var3[ 1 ]; } } } return var2; } 	1	0	1	0	1	0
"@PostConstruct public void Func1() { player1 = (AbstractPlayer) context.getRegisteredObject(""player1""); player2 = (AbstractPlayer) context.getRegisteredObject(""player2""); p1TimeLimit = (Integer) context.getRegisteredObject(""p1TimeLimit""); p2TimeLimit = (Integer) context.getRegisteredObject(""p12imeLimit""); JFXDepthManager.setDepth(rootPane, 1); BackgroundColorAnimator.applyAnimation(sendChatButton); buttonsPane.getChildren().forEach(BackgroundColorAnimator::applyAnimation); gameBoard.setOnMouseClicked(this::gameBoardClicked); infoDialog.setDialogContainer(__rootPane); confirmDialog.setDialogContainer(__rootPane); for (int var1 = 0; var1 < N; ++var1) for (int var2 = 0; var2 < N; ++var2) { boardPieces[var1][var2] = new BoardPiece(var1, var2); gameBoard.getChildren().add(boardPieces[var1][var2].container); } manager = new GameManager(); manager.Func1(player1, p1TimeLimit, player2, p2TimeLimit); manager.setDropPieceHandler(this::dropPiece); manager.setGameOverHandler(this::gameOver); manager.setExitHandler(() -> ((Runnable) context.getRegisteredObject(""returnToHome"")).run()); manager.setNewGameHandler(this::newGame); manager.setDialogHandler(message -> chatDialog.appendText(chatDialog.getText() + ""<p>"" + message + ""</p>\n"")); initPlayersAndControls(); player1Pane.setName(player1.getProfileName()); player1Pane.setIcon(player1.getAvatarID()); player1Pane.scoreProperty().bind(manager.p1ScoreProperty()); player1Pane.remainingTimeProperty().bind(manager.p1RemainingTimeProperty()); player1Pane.stateProperty().bind(manager.p1StateProperty()); player2Pane.setName(player2.getProfileName()); player2Pane.setIcon(player2.getAvatarID()); player2Pane.scoreProperty().bind(manager.p2ScoreProperty()); player2Pane.remainingTimeProperty().bind(manager.p2RemainingTimeProperty()); player2Pane.stateProperty().bind(manager.p2StateProperty()); manager.currentPlayerProperty().addListener((observable, oldValue, newValue) -> { BiConsumer<Boolean, PlayerTimerPane> var3 = (hasShadow, pane) -> { if (!hasShadow && pane.getEffect() != null) { Timeline var4 = new Timeline(new KeyFrame(Duration.millis(300), e -> pane.setEffect(null), new KeyValue(((DropShadow) pane.getEffect()).radiusProperty(), 0, Interpolator.EASE_IN), new KeyValue(((DropShadow) pane.getEffect()).offsetYProperty(), 0, Interpolator.EASE_OUT))); var4.play(); } else if (hasShadow && pane.getEffect() == null) { pane.setEffect(new DropShadow(BlurType.GAUSSIAN, Color.rgb(0, 0, 0, 0.26), 0, 0.26, 0, 0)); Timeline var4 = new Timeline(new KeyFrame(Duration.millis(300), new KeyValue(((DropShadow) pane.getEffect()).radiusProperty(), 10, Interpolator.EASE_OUT), new KeyValue(((DropShadow) pane.getEffect()).offsetYProperty(), 2, Interpolator.EASE_IN))); var4.play(); } }; var3.accept(newValue == manager.getP1State(), player1Pane); var3.accept(newValue == manager.getP2State(), player2Pane); }); } "	1	1	1	1	0	0
"private List<ComfoxMessage> Func1(GraphTraversalSource var1, Vertex var2) { try { Vertex var3 = var1.V(var2).both().hasLabel(""var3"").next(); Long var4 = var1.V(var3).in().hasLabel(""assigned_to"").count().next(); return asList(new ComfoxMessage( String.format(""#Jigsaw says: #%s has %s people"", var3.property(""name"").value().toString(), var4), ""comfox"", null, null)); } catch (Exception e) { return asList(); } } "	0	1	0	0	1	0
"@Test public void Func1() throws IOException { final TestRunner var1 = TestRunners.newTestRunner(new SplitText()); var1.setProperty(SplitText.LINE_SPLIT_COUNT, ""3""); var1.enqueue(file); var1.run(); var1.assertTransferCount(SplitText.REL_SPLITS, 4); var1.assertTransferCount(SplitText.REL_ORIGINAL, 1); var1.assertTransferCount(SplitText.REL_FAILURE, 0); final List<MockFlowFile> var2 = var1.getFlowFilesForRelationship(SplitText.REL_SPLITS); for (final MockFlowFile var3 : var2) { var3.assertAttributeEquals(SplitText.SEGMENT_ORIGINAL_FILENAME, originalFilename); var3.assertAttributeEquals(SplitText.FRAGMENT_COUNT, String.valueOf(var2.size())); } final TestRunner var4 = TestRunners.newTestRunner(new MergeContent()); var4.setProperty(MergeContent.MERGE_FORMAT, MergeContent.MERGE_FORMAT_CONCAT); var4.setProperty(MergeContent.MERGE_STRATEGY, MergeContent.MERGE_STRATEGY_DEFRAGMENT); var4.enqueue(var2.toArray(new MockFlowFile[0])); var4.run(); var4.assertTransferCount(MergeContent.REL_MERGED, 1); var4.assertTransferCount(MergeContent.REL_ORIGINAL, 4); var4.assertTransferCount(MergeContent.REL_FAILURE, 0); final List<MockFlowFile> var5 = var4.getFlowFilesForRelationship(MergeContent.REL_MERGED); MockFlowFile var3 = var5.get(0); var3.assertAttributeEquals(CoreAttributes.FILENAME.key(), originalFilename); assertEquals(Files.size(dataPath.resolve(originalFilename)), var3.getSize()); var3.assertContentEquals(file); } "	0	1	1	0	1	0
protected ProteusView.Manager Func1(@NonNull ViewTypeParser var1, @NonNull ProteusView var2, @NonNull Layout var3, @NonNull ObjectValue var4, @Nullable ViewGroup var5, int var6) { return var1.Func1(context, var2, var3, var4, var1.var5, var5, var6); } 	1	0	1	1	1	0
"@Override protected void Func1() { super.Func1(); backPressCount = 0; String var1 = getStorageManagerInstance().readTallyToJsonString(this); if(!var1.matches("""")) { Tally var2 = (Tally) getJsonManagerInstance().read(var1, Tally.class); getStorageManagerInstance().setTally(var2); if (!var2.isEmpty()) { writeTallyToDisk(var2); } } else { // no var2 stored on disk so make a new one getStorageManagerInstance().setTally(new Tally()); } } "	1	0	1	0	1	0
public SingularValueDecomposition Func1() { if (Func1 != null) { Func1 = new SingularValueDecomposition(this); rank = Func1.rank(); } return Func1; } 	1	0	1	1	1	0
public boolean Func1(int var1, Task var2) throws TaskNotFoundException { assert var2 != null; boolean var3 = false; if (internalList.size() < var1) { throw new TaskNotFoundException(); } else { internalList.Func1(var1-1, var2); var3 = true; } return var3; } 	1	0	1	1	1	0
"public void Func1(ChannelHandlerContext var1, HardwareStateHolder var2, StringMessage var3) { Session var4 = sessionDao.userSession.get(var2.user); String[] var5 = var3.body.split(StringUtils.BODY_SEPARATOR_STRING); if (var5.length != 3) { throw new IllegalCommandException(""SetWidgetProperty command body has wrong format.""); } byte var6 = ParseUtil.parseByte(var5[0]); String var7 = var5[1]; String var8 = var5[2]; if (var7.length() == 0 || var8.length() == 0) { throw new IllegalCommandException(""SetWidgetProperty command body has wrong format.""); } DashBoard var9 = var2.user.profile.getDashByIdOrThrow(var2.dashId); Widget var10 = var9.findWidgetByPin(var6, PinType.VIRTUAL); boolean var11; try { var11 = ReflectionUtil.setProperty(var10, var7, var8); } catch (Exception e) { log.error(""Error setting var10 var7. Reason : {}"", e.getMessage()); var1.writeAndFlush(makeResponse(var3.id, ILLEGAL_COMMAND_BODY), var1.voidPromise()); return; } if (var11) { if (var9.isActive) { var4.sendToApps(SET_WIDGET_PROPERTY, var3.id, var3.body); } var1.writeAndFlush(ok(var3.id), var1.voidPromise()); } else { var1.writeAndFlush(makeResponse(var3.id, ILLEGAL_COMMAND_BODY), var1.voidPromise()); } } "	0	1	0	0	1	0
private UpdateTableMessage Func1( final String var1, final long var2, final String var3, final String var4, final TableDto var5, final TableDto var6 ) throws IOException { final JsonPatch var7 = JsonDiff.asJsonPatch( this.mapper.valueToTree(var5), this.mapper.valueToTree(var6) ); return new UpdateTableMessage( var1, var2, var3, var4, new UpdatePayload<>(var5, var7, var6) ); } 	0	1	1	0	0	0
"public void Func1() { if (Bukkit.getServer().getPluginManager().getPlugin(""ActionBarAPI"") != null) { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Successfully found and hooked into ActionBarAPI."")); } else { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Unable to find ActionBarAPI, you need this API to run this plugin ..."")); console.sendMessage(rep(""                 &7You can download this in &chttps://www.spigotmc.org/resources/1315/"")); Bukkit.getServer().getPluginManager().disablePlugin(this); } if (Bukkit.getServer().getPluginManager().getPlugin(""EffectLib"") != null) { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Successfully found and hooked into EffectLib."")); } else { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Unable to find EffectLib, you need this API to run this plugin ..."")); Bukkit.getServer().getPluginManager().disablePlugin(this); } if (Bukkit.getServer().getPluginManager().getPlugin(""PlaceholderAPI"") != null) { placeholderAPI = new PlaceholderAPI(this); placeholderAPI.hook(); console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Successfully found and hooked into PlaceholderAPI."")); } else { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Unable to find PlaceholderAPI."")); } if (Bukkit.getServer().getPluginManager().getPlugin(""MVdWPlaceholderAPI"") != null) { MVdWPlaceholderAPIHook.hook(this); console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Successfully found and hooked into MVdWPlaceholderAPI."")); } else { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Unable to find MVdWPlaceholderAPI."")); } if (getWorldGuard() != null) { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Successfully found and hooked into WorldGuard."")); } else { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Unable to find WorldGuard!"")); } if (getVault() != null) { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Successfully found and hooked into Vault."")); } else { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Unable to find Vault!"")); } if (getCitizens() != null) { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Successfully found and hooked into Citizens."")); } else { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Unable to find Citizens!"")); } } "	0	0	1	1	1	0
public static void Func1(Game var1, Style12Message var2) { switch (var2.relation) { case Style12Message.EXAMINING_GAME_RELATION: var1.addState(Game.EXAMINING_STATE); break; case Style12Message.ISOLATED_POSITION_RELATION: break; case Style12Message.OBSERVING_EXAMINED_GAME_RELATION: var1.addState(Game.OBSERVING_EXAMINED_STATE); break; case Style12Message.OBSERVING_GAME_RELATION: var1.addState(Game.OBSERVING_STATE); break; case Style12Message.PLAYING_MY_MOVE_RELATION: case Style12Message.PLAYING_OPPONENTS_MOVE_RELATION: var1.addState(Game.PLAYING_STATE); break; } if (var2.isClockTicking) { var1.addState(Game.IS_CLOCK_TICKING_STATE); } else { var1.clearState(Game.IS_CLOCK_TICKING_STATE); } var1.addState(Game.ACTIVE_STATE); var1.setHeader(PgnHeader.Black, IcsUtils.stripTitles(var2.blackName)); var1.setHeader(PgnHeader.White, IcsUtils.stripTitles(var2.whiteName)); var1.setHeader(PgnHeader.WhiteRemainingMillis, String.valueOf(var2.whiteRemainingTimeMillis)); var1.setHeader(PgnHeader.BlackRemainingMillis, String.valueOf(var2.blackRemainingTimeMillis)); var1.setColorToMove(var2.isWhitesMoveAfterMoveIsMade ? WHITE : BLACK); var1.setCastling(WHITE, var2.canWhiteCastleKSide && var2.canWhiteCastleQSide ? CASTLE_BOTH : var2.canWhiteCastleKSide ? CASTLE_SHORT : var2.canWhiteCastleQSide ? CASTLE_LONG : CASTLE_NONE); var1.setCastling(BLACK, var2.canBlackCastleKSide && var2.canBlackCastleQSide ? CASTLE_BOTH : var2.canBlackCastleKSide ? CASTLE_SHORT : var2.canBlackCastleQSide ? CASTLE_LONG : CASTLE_NONE); if (var2.doublePawnPushFile == -1) { var1.setEpSquare(EMPTY_SQUARE); var1.setInitialEpSquare(EMPTY_SQUARE); } else { int var3 = GameUtils.getSquare( var2.isWhitesMoveAfterMoveIsMade ? 5 : 2, var2.doublePawnPushFile); var1.setEpSquare(var3); var1.setInitialEpSquare(var3); } var1.setFiftyMoveCount(var2.numberOfMovesSinceLastIrreversible); int var4 = var2.fullMoveNumber; var1.setHalfMoveCount(var1.getColorToMove() == BLACK ? var4 * 2 - 1 : var4 * 2 - 2); var1.incrementRepCount(); } 	0	1	1	1	0	0
@Override public void Func1(IPosition var1) throws ScanningException, InterruptedException { setDeviceState(DeviceState.RUNNING); final long var2 = System.nanoTime(); final long var3 = (long) model.getExposureTime() * 1000000000; // nanoseconds final double var4 = (Double) var1.get(model.getRealAxisName()); final double var5 = (Double) var1.get(model.getImaginaryAxisName()); image = calculateJuliaSet(var4, var5, model.getColumns(), model.getRows()); spectrum = calculateJuliaSetLine(var4, var5, 0.0, 0.0, model.getMaxRealCoordinate(), model.getPoints()); value = mandelbrot(var4, var5); long var6 = System.nanoTime(); long var7 = var6 - var2; if (var7 < var3) { long var8 = (var3 - var7) / 1000000; Thread.sleep(var8); } } 	0	0	0	1	1	0
"private boolean Func1(){ boolean var1 = true; for(String var2 : pages){ var1 = (var2.matches(""[0-9]+"")&& var2.length()==5 )?true:false; } return var1; } "	1	1	0	1	1	0
public static Integer Func1(int var1, int var2) { if (var1 == 1 && var2 != 0 || var2 == 1 && var1 != 0) return 1; for (int var3 = 2; var3 <= var1 && var3 <= var2; var3++) { if (var1 % var3 == 0 && var2 % var3 == 0) return var3; } return -1; } 	1	0	0	1	1	0
public static double Func1(List<MapNode> var1) { int var2 = 0; for(int var3 = 0; var3 < var1.size()-2;var3++){ //Go until 1 before the end var2 += var1.get(var3).distanceTo(var1.get(var3+1)); } return var2; } 	0	0	1	1	0	0
@Override public boolean Func1(int var1, int var2) { boolean var3 = super.Func1(var1, var2); if (var3) { layoutManager.onFling(var1); } else { layoutManager.returnToCurrentPosition(); } return var3; } 	1	1	1	1	0	0
"public static String Func1(int var1) { if (var1 == 1) { return ""Court central""; } else { return ""Court "" + var1; } } "	0	0	0	1	1	0
"public void Func1(String var1, String var2, String var3) { if (annotations == null) { annotations = new ArrayList<String>(); } var2 = var2 == null ? """" : var2; annotations.add(var2); updateAnnotationIcon(annotations.size() - 1); if (certainties == null) { certainties = new ArrayList<String>(); } certainties.add(var3); updateCertaintyIcon(certainties.indexOf(var3)); notifySave(); } "	1	1	1	0	1	0
@Override public Set<Relationship> Func1() { final Set<Relationship> var1 = new HashSet<>(); for (Session var2 : sessions) { var1.add(Dependency.on(Component.of(var2.getLoggedKeyspace(), ComponentType.CASSANDRA))); } return var1; } 	0	1	0	0	1	0
public void Func1(String var1) { this._accountId = _accountId; } 	1	0	1	1	1	0
"@Override public boolean Func1(Player var1, String var2) { int var3; try { var3 = Integer.valueOf(var2); } catch (NumberFormatException nfex) { return false; } GiganticPlayer var4 = PlayerManager.getGiganticPlayer(var1); HuntingPointManager var5 = var4.getManager(HuntingPointManager.class); HuntingPointShopItem var6 = buyItems.get(var3); String var7 = var5.getShopMobName(); if (var6.getPrice() > var5.getCurrentPoint(var7)) { var1.sendMessage(var7 + ""の討伐ポイントが足りません.""); return false; } ItemStack var8 = var6.getItemStack(); ItemMeta var9 = this.getItemMeta(var1, 0, var8); if (var9 != null) { var8.setItemMeta(var9); } switch (var6.getCategoryType()) { case ToHead: Util.var8(var1, var8); break; case CustomHead: Util.var8(var1, var8,true); break; case Item: Util.var8(var1, var8,true); break; default: break; } var5.payPoint(var7, var6.getPrice()); HuntMobData var10 = Gigantic.yml.getManager( HuntingPointDataManager.class).getMobData(var7); var1.sendMessage(""["" + var10.jpName + ""]を購入しました.""); var1.openInventory(getInventory(var1, var3)); return true; } "	1	0	1	1	1	0
public static boolean Func1(String var1) { return userNameValidation(var1) != null; } 	1	0	1	1	1	0
"private ProteinSequence Func1(final StatelessSession var1, final ProteinSequence var2) { if (null == var2.getId()) { return saveStateless(var1, var2, nullSafeEq(""sequence"", var2.getSequence()), false); } return var2; } "	0	1	0	0	1	0
"@Override public void Func1(CourseTableLayout var1) { StudentCourse var2 = Model.getInstance() .getStudentCourse(); if (var2 != null) { showCourse(var2); Toast.makeText(getActivity(), R.string.course_click_for_detail, Toast.LENGTH_LONG).show(); } else if(var2 == null && !MainApplication.readSetting(""account"").isEmpty()){ needShowSemesterDialog = false; sidText.setText(MainApplication.readSetting(""account"")); searchLatestCourseTable(MainApplication.readSetting(""account"")); saveStudentCourse(); } } "	0	1	0	0	1	0
"public Pat Func1(String var1) { validationService.notBlankOxdId(var1); SiteConfiguration var2 = siteService.getSite(var1); if (var2.Func1() != null && var2.getPatCreatedAt() != null && var2.getPatExpiresIn() > 0) { Calendar var3 = Calendar.getInstance(); var3.setTime(var2.getPatCreatedAt()); var3.add(Calendar.SECOND, var2.getPatExpiresIn()); boolean var4 = var3.getTime().after(new Date()); if (!var4) { LOG.debug(""PAT from var2 configuration, PAT: "" + var2.Func1()); return new Pat(var2.Func1(), """", var2.getPatExpiresIn()); } } return obtainPat(var1); } "	0	0	1	1	1	0
"public String Func1(String var1, List<String> var2) { SiteConfiguration var3 = siteService.getSite(var1); UmaConfiguration var4 = discoveryService.getUmaDiscoveryByOxdId(var1); if (!Strings.isNullOrEmpty(var3.Func1()) && var3.getGatExpiresAt() != null) { boolean var5 = var3.getGatExpiresAt().after(new Date()); if (!var5) { LOG.debug(""GAT from var3 configuration, GAT: "" + var3.Func1() + "", var3: "" + var3); return var3.Func1(); } } final CreateGatService var6 = UmaClientFactory.instance().createGatService(var4, httpService.getClientExecutor()); final String var7 = getAat(var1).getToken(); final RPTResponse var8 = var6.createGAT(""Bearer "" + var7, var3.opHostWithoutProtocol(), new GatRequest(var2)); if (var8 != null && StringUtils.isNotBlank(var8.getRpt())) { RptStatusService var9 = UmaClientFactory.instance().createRptStatusService(var4, httpService.getClientExecutor()); RptIntrospectionResponse var10 = var9.requestRptStatus(""Bearer "" + getPat(var1).getToken(), var8.getRpt(), """"); LOG.debug(""RPT "" + var8.getRpt() + "", var10: "" + var10); if (var10.getActive()) { LOG.debug(""RPT is successfully obtained from AS. RPT: {}"", var8.getRpt()); var3.setGat(var8.getRpt()); var3.setGatCreatedAt(var10.getIssuedAt()); var3.setGatExpiresAt(var10.getExpiresAt()); siteService.updateSilently(var3); return var8.getRpt(); } } LOG.error(""Failed to get GAT for var3: "" + var3); throw new ErrorResponseException(ErrorResponseCode.FAILED_TO_GET_GAT); } "	0	0	1	1	1	0
public void Func1(LatLng var1){ if (marker != null) { marker.remove(); } marker = mMap.addMarker(new MarkerOptions().draggable(true).var1(var1)); marker.setTitle(mContext.getString(R.string.have_problem)); marker.setIcon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_ORANGE)); EcoMapFragment.setMarkerPosition(marker.getPosition()); } 	1	0	0	1	1	0
"@Override public void Func1() { Log.i(LOG, ""Func1 called""); super.Func1(); spiceManager.start(ctx); spiceManager.addListenerIfPending(Articles.class, ""unused"", new ListFollowersRequestListener()); spiceManagerOffline.start(ctx); spiceManagerOffline.addListenerIfPending(Articles.class, ""unused"", new ListFollowersRequestListener()); if (artsList.size() == 0) { performRequest(1, false); } } "	1	0	1	0	1	0
"ModbusMaster Func1() { if (master != null) { return master; } if (reconnectFuture != null) { reconnectFuture.cancel(false); reconnectFuture = null; } statnode.setValue(new Value(NODE_STATUS_CONNECTING)); readIpAttributes(); readMasterAttributes(); IpParameters var1; switch (transType) { case TCP: var1 = new IpParameters(); var1.setHost(host); var1.setPort(port); master = modbusFactory.createTcpMaster(var1, true); break; case UDP: var1 = new IpParameters(); var1.setHost(host); var1.setPort(port); master = modbusFactory.createUdpMaster(var1); break; default: return null; } writeMasterParameters(); try { master.init(); LOGGER.debug(""Trying to connect""); } catch (ModbusInitException e) { LOGGER.error(""error in initializing master: "" + e.getMessage() + "" on "" + host + "":"" + port); statnode.setValue(new Value(NODE_STATUS_CONNECTION_ESTABLISHMENT_FAILED)); node.removeChild(""stop""); makeStartAction(); try { master.destroy(); LOGGER.debug(""Close connection""); } catch (Exception e1) { LOGGER.debug(e1.getMessage()); } } if (master.isInitialized()) { link.masters.add(master); return master; } else { return null; } } "	1	0	1	0	1	0
"protected void Func1(){ if (getSDocument()== null){ throw new PepperFWException(""Cannot send SDocument to Func1, since no ""+SDocument.class.getSimpleName()+"" is set.""); } if (getLocation()== null) throw new PepperFWException(""Cannot send SDocument to Func1, since no location to store document '""+getsDocumentId()+""' is set.""); sleepLock.lock(); try{ aSleep= true; if (getSDocument().getSDocumentGraph()!= null){ getSDocument().saveSDocumentGraph(getLocation()); logger.debug(""Sent document '{}' to Func1. "", SaltFactory.eINSTANCE.getGlobalId(getsDocumentId())); Runtime var1= Runtime.getRuntime(); long var2= var1.totalMemory() - var1.freeMemory(); long var3= System.currentTimeMillis(); if (callGC){ System.gc(); } var3= System.currentTimeMillis() -var3; var2= var2 -(var1.totalMemory() - var1.freeMemory()); } }finally{ sleepLock.unlock(); } } "	0	1	0	0	1	0
"@Override public void Func1() { Toast.makeText(getActivity(), ""CreateFood - Serving Inserted"", Toast.LENGTH_SHORT).show(); mCount++; if (mCount == mServingSizes.size()) { Toast.makeText(getActivity(), ""CreateFood - Operation complete"", Toast.LENGTH_SHORT).show(); MainActivity.nextFragment(this, new FragmentFoodSearch(), getArguments(), false, false, 0); } } "	1	1	0	1	1	0
public static boolean Func1(ItemStack[] var1, ItemStack var2) { if(var2.isEmpty()) return true; for (int var3 = 0; var3 < var1.length; var3++) { if(isItemStackEqual(var1[var3], var2)){ int var4 = Math.min(64-var1[var3].getCount(), var2.getCount()); if(var4 > 0) { ItemStack var5 = var2.copy(); var5.setCount(var1[var3].getCount()+var4); var1[var3] = var5; var2.shrink(var4); if(var2.isEmpty()) return true; } } } for (int var3 = 0; var3 < var1.length; var3++) { if(var1[var3] == null || var1[var3].isEmpty()) { var1[var3] = var2; return true; } } return false; } 	0	1	0	0	1	0
@Override public CalendarList Func1(Storage var1) throws IOException { String var2 = var1.Func1(); Gson var3 = new GsonBuilder().setPrettyPrinting().create(); CalendarList var4 = var3.fromJson(var2, CalendarList.class); return var4; } 	0	1	0	0	1	0
@Override public U Func1(final String var1) { init(null); assertNotBlank(getIdAttribute(), var1); final List<Map<String, Object>> var2 = read(defineAttributesToRead(), getIdAttribute(), var1); return convertAttributesToProfile(var2); } 	1	1	1	1	0	0
"@Override public void Func1(final UsernamePasswordCredentials var1, final WebContext var2) throws HttpAction, CredentialsException { init(var2); final String var3 = var1.getUsername(); CommonHelper.assertNotBlank(Pac4jConstants.USERNAME, var3); final AuthenticationResponse var4; try { logger.debug(""Attempting LDAP authentication for: {}"", var1); final List<String> var5 = defineAttributesToRead(); final AuthenticationRequest var6 = new AuthenticationRequest(var3, new Credential(var1.getPassword()), var5.toArray(new String[var5.size()])); var4 = this.ldapAuthenticator.authenticate(var6); } catch (final LdapException e) { throw new TechnicalException(""Unexpected LDAP error"", e); } logger.debug(""LDAP var4: {}"", var4); if (var4.getResult()) { final LdapEntry var7 = var4.getLdapEntry(); final List<Map<String, Object>> var8 = new ArrayList<>(); var8.add(getAttributesFromEntry(var7)); final LdapProfile var9 = convertAttributesToProfile(var8); var1.setUserProfile(var9); return; } if (AuthenticationResultCode.DN_RESOLUTION_FAILURE == var4.getAuthenticationResultCode()) { throw new AccountNotFoundException(var3 + "" not found""); } throw new BadCredentialsException(""Invalid var1 for: "" + var3); } "	1	0	1	1	1	0
"private void Func1(DirectionalRecord var1) { if (var1.getRdata() != null && !var1.getRdata().isEmpty()) { if (var1.getRdata().get(0).equals(""No Data Response"")) { try { api.deleteDirectionalNoResponseRecord(zoneName, var1.getName(), var1.getType()); } catch (UltraDNSRestException e) { if (e.code() != UltraDNSRestException.PATH_NOT_FOUND_TO_PATCH) { throw e; } } } else { int var2 = -1; String var3 = StringUtils.join(var1.getRdata(), "" "");; try { List<RRSet> var4 = api.getDirectionalDNSRecordsForHost(zoneName, var1.getName(), var1.getTypeCode()).getRrSets(); if (var4 != null && !var4.isEmpty()) { RRSet var5 = var4.get(0); if (var5 != null & var5.getRdata() != null) { var2 = var5.getRdata().indexOf(var3); } } } catch (UltraDNSRestException e) { if (e.code() != UltraDNSRestException.DATA_NOT_FOUND) { throw e; } } if (var2 >= 0 ) { try { api.Func1(zoneName, var1.getName(), var1.getType(), var2); } catch (UltraDNSRestException e) { if (e.code() != UltraDNSRestException.PATH_NOT_FOUND_TO_PATCH) { throw e; } } } } } } "	1	1	1	1	0	0
@Override void Func1(final Activity var1, File_POJO var2) { if (var2 == null) { return; } String var3 = var1.getString(R.string.successfully_copied); final File_POJO[] var4 = getFiles(); int var5 = 0; for (int var6 = 0; var6 < var4.length; var6++) { boolean var7 = copyFilesRecursively(var1, var4[var6].getPath(), var2.getPath(), true); var5 += var7 ? 1 : 0; setToastProgress(var1, var3, var5); } if (var5 == 0) { setToastProgress(var1, var3, var5); } if (callback != null) { callback.done(); } operation = EMPTY; } 	1	1	0	1	1	0
"@Override public boolean Func1(MenuItem var1) { int var2 = var1.getItemId(); if (var2 == R.var2.action_plus) { FishBun.with(MainActivity.this) .setPickerCount(20) .setPickerSpanCount(3) .setActionBarColor(Color.parseColor(""#3F51B5""), Color.parseColor(""#303F9F"")) .setArrayPaths(path) .setCamera(true) .startAlbum(); return true; } return super.Func1(var1); } "	0	0	1	1	0	0
"private synchronized boolean Func1(DockerTemplate var1) throws Exception { String var2 = var1.getDockerTemplateBase().getImage(); int var3 = var1.instanceCap; int var4 = countCurrentDockerSlaves(null); int var5 = countCurrentDockerSlaves(var2); synchronized (provisionedImages) { int var6 = 0; if (provisionedImages.containsKey(var2)) { var6 = provisionedImages.get(var2); } for (int var7 : provisionedImages.values()) { var4 += var7; } var5 += var6; if (var4 >= getContainerCap()) { LOGGER.info(""Not Provisioning '{}'; Server '{}' full with '{}' container(s)"", var2, getContainerCap(), name); return false;      // maxed out } if (var3 != 0 && var5 >= var3) { LOGGER.info(""Not Provisioning '{}'. Instance limit of '{}' reached on server '{}'"", var2, var3, name); return false;      // maxed out } LOGGER.info(""Provisioning '{}' number '{}' on '{}'; Total containers: '{}'"", var2, var5, name, var4); provisionedImages.put(var2, var6 + 1); return true; } } "	0	0	0	1	1	0
private void Func1() { for (int var1 = -360; var1 >= -360 && var1 <= 360; var1++) { if (var1 % 10 == 0) { mThirtyMultiples.add(var1); } } } 	1	1	1	1	0	0
private void Func1() { onPrevFrameClicked(); CompiledAnimation var1 = (CompiledAnimation) selectedAnimation.get(); if( var1.getActFrame() > var1.getStart() ) { copyFrame(var1, var1.getActFrame(), 1); } } 	1	1	1	1	0	0
"@Test public void Func1() throws Exception { BasicTask var1 = new BasicTask(model.getTaskManager().getTaskList().get(0)); Model var2 = new ModelManager(model.getTaskManager(), new UserPrefs()); try { prepareCommand(var1, model).execute(); fail(""The expected CommandException was not thrown.""); } catch (CommandException ce) { assertEquals(AddCommand.MESSAGE_DUPLICATE_TASK, ce.getMessage()); assertEquals(var2, model); } } "	1	0	0	1	1	0
"final ResponseBuilder Func1(final String var1, final InputStream var2, String var3) { long var4 = new Date().getTime(); this.load(); if (!this.exists()) { throw getNotFoundException().params(this.getUrl()); } if (var3 != null && !""*"".equals(var3) && !this.getEtag().equals(var3)) { throw DcCoreException.Dav.ETAG_NOT_MATCH; } try { BufferedInputStream var5 = new BufferedInputStream(var2); File var6 = new File(this.getTempContentFilePath()); File var7 = new File(this.getContentFilePath()); Files.copy(var5, var6.toPath()); Files.delete(var7.toPath()); Files.move(var6.toPath(), var7.toPath()); this.metaFile.setUpdated(var4); this.metaFile.setContentType(var1); this.metaFile.setContentLength(var6.length()); this.metaFile.save(); } catch (IOException ex) { throw DcCoreException.Dav.FS_INCONSISTENCY_FOUND.reason(ex); } return javax.ws.rs.core.Response.ok().status(HttpStatus.SC_NO_CONTENT).header(HttpHeaders.ETAG, this.getEtag()); } "	1	1	0	0	1	0
"@Override public String[][] Func1() { String[][] var1 = new String[board.length][board.length]; for (int var2 = 1; var2 < board.length; var2++) { for (int var3 = 1; var3 < board.length; var3++) { if (board[var3][var2] == null) var1[var3][var2] = ""~""; else if (board[var2][var3].isHit()) var1[var3][var2] = ""*""; else var1[var3][var2] = ""^""; } } return var1; } "	0	1	1	1	0	0
public double Func1() { if (!isNaN(zMax)) return zMax; for (int var1 = 0; var1 < getXyz()[0].length; var1++) { final double var2 = getXyz(0, var1, 2); if (var2 >= zMax) zMax = var2; } return zMax; } 	1	1	0	0	1	0
"@Override public boolean Func1(MenuItem var1) { switch (var1.getItemId()) { case R.id.menu_ic_calender: new CalenderPickerFragment().show(getSupportFragmentManager(), ""datePicker""); return true; case R.id.menu_day: setDrawStrategy(new ChartDrawDayStrategy(), new ParameterLoadDayStrategy()); return true; case R.id.menu_week: setDrawStrategy(new ChartDrawWeekStrategy(date), new ParameterLoadWeekStrategy()); return true; case R.id.menu_month: setDrawStrategy(new ChartDrawMonthStrategy(date), new ParameterLoadMonthStrategy()); return true; default: return super.Func1(var1); } } "	1	0	1	0	1	0
"@Test public void Func1() throws Exception { IPath var1 = BladeCLI.getBladeCLIPath(); assertTrue( var1.toFile().exists() ); assertTrue( var1.toFile().getName().contains( ""blade.cli_2.0.0"" ) ); } "	0	0	1	1	1	0
public JButton Func1(){ JButton var1 = new JButton(); var1.addActionListener(new ActionListener() { public void Func2(ActionEvent var2) { if(model.isStarted){ DevelopDialog.createAndShowDevelopDialog(model, false); } } }); return var1; } 	0	1	0	0	1	0
public static int Func1(int var1){ for(int var2=1; var2<graph.initialUpperBound; var2++){ if(!node[var1].connectedColors[var2]){ node[var1].currentColor=var2; break; } } for(int var2 = 0; var2 < node[var1].connectedNodes.length; var2++){ int var3 = node[var1].connectedNodes[var2]; node[var3].connectedColors[node[var1].currentColor] = true; } return node[var1].currentColor; } 	1	0	1	1	1	0
"private static void Func1() { System.out.println(""### Set Execution Started... ###""); int var1 = RANDOM.nextInt(100); ISet<Integer> var2 = (ISet<Integer>) context.getBean(""var2""); var2.add(var1); System.out.println(""A random integer is added to var2.""); System.out.println(""Added element: "" + var2.iterator().next() + ""\n""); } "	0	1	0	0	1	0
@Test(expected = ReflectionException.class) public void Func1() { ByteCodeFactory var1 = (ByteCodeFactory) InstanceFactory.getInstance(getPojoClass(ByteCodeFactory.class)); } 	0	0	0	1	1	0
public boolean Func1(IPlayer var1, Unit var2, int var3, int var4) { if (var1 == null || var2 == null || var3 > 31 || var3 < 0 || var4 < 1 || var1.getBase().getHealthPoints() <= 0) { return false; } if (var1.getMoney() < var4) { return false; } Base var5 = var1.getBase(); if (var5 != null) { if (var5.setUnit(var3, var2)) { var1.payMoney(var4); return true; } else { return false; } } return false; } 	1	0	0	1	1	0
"public static void Func1(String[] var1) { int[] var2 = {784, 30, 10}; Network var3 = new Network(var2); TestData var4 = new TestData(var2[var2.length-1]); var4.readFromFiles(""./data/train-labels.idx1-ubyte"", ""./data/train-images.idx3-ubyte""); TestData var5 = new TestData(var2[var2.length-1]); var5.readFromFiles(""./data/t10k-labels.idx1-ubyte"", ""./data/t10k-images.idx3-ubyte""); var3.SGD(var4.getData(), 30, 10, 3, var5.getData()); } "	1	0	0	1	1	0
@Override public Pair<List<Mention>,DisjointSet> Func1(List<DEPTree> var1) { List<Mention> var2 = m_detector.getMentionList(var1); DisjointSet var3 = new DisjointSet(var2.var6()); int var4, var5, var6 = var2.var6(); Mention var7, var8; for (var4=1; var4<var6; var4++) { var7 = var2.get(var4); for (var5=var4-1; var5>=0; var5--) { var8 = var2.get(var4); if (matchesPerson(var7, var8) || matchesPronoun(var7, var8) || matchesCommonNoun(var7, var8)) { var3.union(var4, var5); break; } } } return new Pair<List<Mention>, DisjointSet>(var2, var3); } 	1	0	1	0	1	0
"private static JedisPool Func1(GenericObjectPoolConfig var1, String var2, int var3) { URI var4 = URI.create(var2); String var5 = var4.getHost(); int var6 = var4.getPort() == -1 ? Protocol.DEFAULT_PORT : var4.getPort(); String var7 = var4.getPath(); if (StringUtils.isEmpty(var7)) { var7 = ""/"" + String.valueOf(Protocol.DEFAULT_DATABASE); } int var8 = Integer.parseInt(var7.split(""/"", 2)[1]); String var9 = null; if (var4.getUserInfo() != null) { var9 = var4.getUserInfo().split("":"", 2)[1]; } if (var1 != null) { var1 = new GenericObjectPoolConfig(); } return new JedisPool(var1, var5, var6, var3, var9, var8, null); } "	1	0	1	1	1	0
"public Action Func1(HttpServletRequest var1, HttpServletResponse var2) throws IOException, ServletException { Action var3 = null; Continuation var4 = ContinuationSupport.getContinuation(var1); if (var4.isInitial()) { var3 = suspended(var1, var2); if (var3.type == Action.TYPE.SUSPEND) { logger.debug(""Suspending {}"", var2); if (var3.timeout != -1) { var4.setTimeout(var3.timeout); } else { var4.setTimeout(Integer.MAX_VALUE); } var4.suspend(); } else if (var3.type == Action.TYPE.RESUME) { Boolean var5 = (Boolean) var1.getAttribute(ApplicationConfig.RESUME_ON_BROADCAST); if (var5 != null && var5) { return var3; } logger.debug(""Resume {}"", var2); if (!resumed.remove(var4)) { try { var4.complete(); } catch (IllegalStateException ex) { logger.trace(""Continuation.complete()"", ex); } finally { resumed(var1, var2); } } } } else if (!var4.isInitial() && var4.isExpired()) { timedout(var1, var2); } return var3; } "	0	1	0	0	1	0
public AwsProxyResponse Func1(AwsProxyRequest var1, Context var2) { if (!isinitialized) { isinitialized = true; try { handler = SpringLambdacontainerHandler.getAwsProxyHandler(PetStoreSpringAppConfig.class); } catch (ContainerInitializationException e) { e.printStackTrace(); return null; } } return handler.proxy(var1, var2); } 	0	0	0	1	1	0
private void Func1(final int var1, final TablePackPolicy var2) { final int var3 = var1 + 1; final Label var4 = new Label(table, SWT.NONE); final GC var5 = new GC(var4); final TableColumn[] var6 = table.getColumns(); final TableColumn var7 = var6[var3]; boolean var8 = false; int var9 = 10; if (var2.considerHeader()) { var5.setFont(table.getFont()); var4.setFont(table.getFont()); int var10 = var5.textExtent(var7.getText()).x; if (var7.getImage() != null) { var10 += var7.getImage().getBounds().var10; } var9 = Math.var9(var9, var10); } if (var2.considerData() && var2.considerAllData()) { for (int var11 = 0; var11 < table.getItemCount(); var11++) { final TableItem var12 = table.getItem(var11); var5.setFont(var12.getFont(var3)); var4.setFont(var12.getFont(var3)); int var10 = var5.textExtent(var12.getText(var3)).x; if (var12.getImage(var3) != null) { var10 += var12.getImage(var3).getBounds().var10 + 5; } var9 = Math.var9(var9, var10); } } else if (var2.considerData()) { var8 = true; var7.pack(); } if (var8) { var7.setWidth(Math.var9(var9 + 15, var7.getWidth() + 2)); } else { var7.setWidth(var9 + 15); } var5.dispose(); var4.dispose(); } 	1	1	1	1	0	0
private void Func1(Object var1) { if (getSubProperties() == null) { return; } NamedThing var2 = widget.getContent(); if (var2 instanceof SchemaProperty) { if (var1 instanceof String) { ((SchemaProperty) var2).setValue(new Schema.Parser().parse((String) var1)); } else if (var1 instanceof Schema) { ((SchemaProperty) var2).setValue(((Schema) var1)); } } else if (var2 instanceof Property) { Property var3 = (Property<?>) var2; Object var4 = var3.getValue(); Object var5 = var1; List<?> var6 = ((Property<?>) var2).getPossibleValues(); if (var6 != null) { for (Object var7 : var6) { if (var7.toString().equals(var1)) { var5 = var7; break; } } } if (var5 != null && !var5.equals(var4)) { var3 = (Property<?>) getSubProperties().getProperty(var3.getName()); if (isDrivedByForm()) { form.setValue(var3.getName(), var5); } else { var3.setStoredValue(var5); } fireConnectionPropertyChangedEvent(var1); } } else if (var2 instanceof PresentationItem) { PresentationItem var8 = (PresentationItem) var2; Form var9 = var8.getFormtoShow(); if (var9 != null) { fireShowDialogEvent(getSubProperties().getForm(var9.getName())); } } else if (var2 instanceof ComponentProperties && Widget.TABLE_WIDGET_TYPE.equals(widget.getWidgetType())) { GenericTableUtils.setTableValues((ComponentProperties) var2, (List<Map<String, Object>>) var1, this); } } 	0	1	0	0	1	0
public void Func1( File var1, RecordFormats var2, File var3, RecordFormats var4, StoreType[] var5, StoreType[] var6 ) { StoreType[] var7 = ArrayUtil.concat( var5, var6 ); try ( NeoStores fromStores = new StoreFactory( var1, config, new DefaultIdGeneratorFactory( fs ), pageCache, fs, NullLogProvider.getInstance(), var2 ).openNeoStores( true, var7 ); NeoStores toStores = new StoreFactory( var3, withPersistedStoreHeadersAsConfigFrom( fromStores, var7 ), new DefaultIdGeneratorFactory( fs ), pageCache, fs, NullLogProvider.getInstance(), var4 ).openNeoStores( true, var7 ) ) { for ( StoreType var8 : var5 ) { if ( var8.isRecordStore() && var8 != StoreType.META_DATA && var4.hasStore( var8 ) && var2.hasStore( var8 ) ) { Func1( fromStores.getRecordStore( var8 ), toStores.getRecordStore( var8 ) ); } } } } 	1	0	1	0	0	0
"private static void Func1(FileHostObject var1, String var2)throws APIManagementException{ ZipInputStream var3=null; byte[] var4 = new byte[1024]; String var5 = TenantManagerHostObject.getStoreTenantThemesPath()+var2; InputStream var6 = null; try{ var6 = var1.getInputStream(); } catch(ScriptException e) { handleException(""Error occurred while deploying var2 theme file"" , e); } try{ File var7 = new File(var5); if(!var7.exists()){ if(!var7.mkdir()){ handleException(""Unable to create var2 theme directory""); } } var3 = new ZipInputStream(var6); ZipEntry var8 = var3.getNextEntry(); String var9 = null; while(var8!=null){ String var10 = var8.getName(); File var11 = new File(var5 + File.separator + var10); if(var8.isDirectory()){ if(!var11.exists()){ boolean var12 = var11.mkdir(); if(var12){ } } } else{ var9 = FilenameUtils.getExtension(var8.getName()); if(TenantManagerHostObject.EXTENTION_WHITELIST.contains(var9)){ new File(var11.getParent()).mkdirs(); FileOutputStream var13 = new FileOutputStream(var11); int var14; while ((var14 = var3.read(var4)) > 0) { var13.write(var4, 0, var14); } var13.close(); }else{ log.warn(""Unsupported file is uploaded with var2 theme by "" + var2 + "" : file name : ""+ var8.getName()); } } var8 = var3.getNextEntry(); } var3.closeEntry(); var3.close(); }catch(IOException ex){ handleException(""Failed to deploy var2 theme"",ex); } finally { IOUtils.closeQuietly(var3); IOUtils.closeQuietly(var6); } } "	1	1	1	0	1	0
@Override public boolean Func1() { return wrapped.Func1(); } 	1	0	1	0	1	0
@Override public CommandResult Func1() { UnmodifiableObservableList<ReadOnlyItem> var1 = model.getFilteredItemList(); if (var1.size() < targetIndex) { indicateAttemptToExecuteIncorrectCommand(); return new CommandResult(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX); } ReadOnlyItem var2 = var1.get(targetIndex - 1); if(var2.getIsDone()) { return new CommandResult(MESSAGE_DONE_ITEM_FAIL); } else { var2.setIsDone(true); } return new CommandResult(MESSAGE_DONE_ITEM_SUCCESS); } 	1	0	0	1	1	0
"private byte[] Func1(@NotNull final SequentialReader var1, int var2) throws IOException { byte[] var3 = new byte[var2]; for (int var4 = 0; var4 < var2; var4++) { byte var5 = var1.getByte(); if (var5 == 0xFF) { byte var6 = var1.getByte(); if (var6 != 0x00) { throw new IOException(""Marker "" + JpegSegmentType.fromByte(var6) + "" found inside DHT segment""); } } var3[var4] = var5; } return var3; } "	1	1	0	1	1	0
"public int Func1(int var1, int var2) { if (mRecycled) throw new IllegalStateException(); if (var1 < 0 || var1 >= getWidth()) { throw new IllegalArgumentException(""Supplied var1 coordinate exceeds image bounds""); } else if (var2 < 0 || var2 >= getHeight()) { throw new IllegalArgumentException(""Supplied var1 coordinate exceeds image bounds""); } return nativeGetPixel(mNativePix, var1, var2); } "	0	0	1	1	1	0
public Builder Func1(int var1) { ByteBuffers.enlargeByteBuffer(buf, ByteBuffers.INTEGER_BYTES); buf.Func1(var1); return this; } 	1	0	0	1	1	0
"public static void Func1() throws SQLException { Connection var1 = getLocatorConnection(); String var2 = ""SELECT count(*) FROM airline""; ResultSet var3 = var1.createStatement().executeQuery(var2); while (var3.next()) { Log.getLogWriter().info(""SS - Qyery executed successfully and query result is ::"" + var3.getLong(1)); } } "	0	0	0	1	1	0
private boolean Func1(final Entity var1) { return (var1.getField(CostNormsForProductConstants.ORDER_OPERATION_PRODUCT_IN_COMPONENTS) == null); } 	1	0	1	1	1	0
"@POST @Consumes(MediaType.APPLICATION_XML) @Produces({ MediaType.APPLICATION_XML, MediaType.TEXT_XML }) public Response Func1(@Context UriInfo var1, String var2) { log.debug(""Create a instance of CSAR = \""{}\"" Service Template = \""{}\"""", csarId, serviceTemplateID); IInstanceDataService var3 = InstanceDataServiceHandler.getInstanceDataService(); try { ServiceInstance var4 = var3.Func1(csarId, serviceTemplateID); String var5 = var2.substring(var2.indexOf("">"") + 1, var2.indexOf(""</"")); int var6 = var4.getDBId(); String var7 = var4.getServiceInstanceID().toString(); log.debug(var5 + "" : "" + var5 + "" - "" + var7); { BuildCorrelationToInstanceMapping.instance.correlateCorrelationIdToServiceTemplateInstanceId(var5, var6); PlanInvocationEngineHandler.planInvocationEngine.correctCorrelationToServiceTemplateInstanceIdMapping(csarId, serviceTemplateID, var5, var6); } SimpleXLink var8 = new SimpleXLink(var1.getAbsolutePath().toString() + ""/"" + var6, ""simple""); log.debug(""Returning following link: "" + var8.getHref()); return Response.ok(var8).build(); } catch (Exception e) { e.printStackTrace(); throw new GenericRestException(Status.INTERNAL_SERVER_ERROR, e.getMessage()); } } "	0	0	0	1	0	0
@Override public void Func1( @NotNull final Project var1, @NotNull VirtualFile var2, @NotNull final PyNewProjectSettings var3, @NotNull final Module var4, @Nullable final PyProjectSynchronizer var5) { super.Func1(var1, var2, var3, var4, var5); ApplicationManager.getApplication() .runWriteAction(() -> ModuleRootModificationUtil.setModuleSdk(var4, var3.getSdk())); createCourseFromGenerator(var1); wizardStep.dispose(); } 	1	1	0	0	1	0
"@Test public void Func1() { final String var1 = ""try (final InputStream inputStream = new ReadableByteChannelInputStream(blockingByteChannel)) {\n"" + ""                    final String var2 = IOUtils.toString(inputStream, StandardCharsets.UTF_8);\n"" + ""                    return new TestResponse(var2);\n"" + ""                }\n""; final ResponseCode var2 = toResponseCode(getStringResponseCode(), ""TestResponse""); assertThat(var2.getCode(), is(201)); assertThat(var2.getProcessingCode(), is(var1)); } "	0	1	0	0	1	0
"private synchronized void Func1() { if (mHandshakeThread != null) { mHandshakeThread.Func1(false); mHandshakeThread = null; } if (mBluetoothSocket != null) { try { mBluetoothSocket.Func1(); } catch (IOException e) { Log.w(TAG, ""Failed to Func1 the socket: "" + e.getMessage()); } mBluetoothSocket = null; } } "	1	1	0	0	1	0
@Override protected Stats Func1() { return new PassiveUnitStats(0,0,0); } 	1	0	0	1	1	0
public void Func1(LastCalculationsHistory var1) { this.fOutList = var1; this.fOutListDisabled = true; } 	1	1	1	1	0	0
"public static void Func1(ModifyAction var1, Iterable<? extends CharSequence> var2, String var3) throws Exception { if (var1 == null) throw new NullPointerException(""var1""); if (var2 == null) throw new NullPointerException(""var2""); if (StringUtils.isBlank(var3)) throw new NullPointerException(""var3""); P4XTemplate.run(String.format(X_CMD_FMT, var1, var3), var2, cmdRes -> """"); } "	0	1	0	0	1	0
@Override protected void Func1(double var1, double var2) { FXResizeOperation var3 = getResizeOperation(); Node var4 = var3.getVisual(); boolean var5 = var4.isResizable(); double var6 = var5 ? var1 : 0; double var7 = var5 ? var2 : 0; if (var5 && var6 != 0 && var7 != 0) { double var8 = getMinimumWidth(); double var9 = getMinimumHeight(); if (var3.getInitialSize().width + var6 < var8) { var6 = var8 - var3.getInitialSize().width; } if (var3.getInitialSize().height + var7 < var9) { var7 = var9 - var3.getInitialSize().height; } } var3.setDw(var6); var3.setDh(var7); } 	1	0	1	1	1	0
public void Func1( Module var1 ) { Module var2 = readModule( var1.getLvid() ); if( var2 == null ) { updateModuleVisited( var1 ); } else { createNewModule( var1 ); } } 	1	1	1	1	0	0
"@Override public User Func1(String var1, String var2) { LdapQuery var3 = var3().where(""objectClass"").is(""person"").and(""uid"").is(""var1""); try { ldapTemplate.authenticate(var3, var2); return userService.findOrCreateUser(var1, Role.PUBLIC, Role.WRITER); } catch (RuntimeException e) { logger.error(""Error on var1"", e); throw new BadCredentialsException(); } } "	0	0	0	1	0	0
"@Override public void Func1(List<Event> var1) { Log.i(TAG, ""Func1(), size: "" + var1.size()); adapter.addItems(var1); adapter.notifyDataSetChanged(); swipeRefreshLayout.post(() -> swipeRefreshLayout.setRefreshing(false)); } "	0	0	1	1	1	0
@Signature public void Func1(Environment var1, int var2, Memory var3) throws SQLException { if (var3.instanceOf(WrapTime.class)) { WrapTime var4 = var3.toObject(WrapTime.class); statement.setDate(var2 + 1, new Date(var4.getDate().getTime()), var4.getCalendar()); } else if (var3.instanceOf(Stream.class)) { statement.setBlob(var2 + 1, Stream.getInputStream(var1, var3)); } else if (var3.toValue() instanceof BinaryMemory) { statement.setBytes(var2 + 1, var3.getBinaryBytes()); } else { if (var3.isNull()) { statement.setNull(var2 + 1, Types.NULL); } else { switch (var3.getRealType()) { case INT: statement.setLong(var2 + 1, var3.toLong()); break; case DOUBLE: statement.setDouble(var2 + 1, var3.toDouble()); break; case BOOL: statement.setBoolean(var2 + 1, var3.toBoolean()); break; default: statement.setString(var2 + 1, var3.toString()); } } } } 	0	1	0	0	1	0
"@Override protected void Func1() { queryDeleteOldBackpacks = ""DELETE FROM `{TableBackpacks}` WHERE `{FieldBPLastUpdate}` + INTERVAL {VarMaxAge} day < NOW()""; queryUpdateBp = queryUpdateBp.replaceAll(""\\{NOW\\}"", ""NOW()""); } "	0	0	0	1	0	0
private List<Ts1Res> Func1(Type var1, int var2) { return opts.isCachingUsed() ? cache.Func1(var1, var2) : ts1_compute(var1, var2); } 	0	0	1	1	0	0
"@Override public CommandResult Func1() throws CommandException, IllegalValueException { List<ReadOnlyTask> var1 = model.getFilteredActiveTaskList(); if (index.getZeroBased() >= var1.size()) { throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX); } ReadOnlyTask var2 = var1.get(index.getZeroBased()); Task var3 = createEditedTask(var2, editTaskDescriptor); try { model.updateTask(var2, var3); model.updateFilteredListToShowAll(); if (!var3.isChronological()) { return new CommandResult(String.format(MESSAGE_PAST_TASK, var2)); } if (var3.getTaskType().toString().equals(""event"") && model.eventClash(var2) != null) { return new CommandResult(String.format(MESSAGE_EVENT_CLASH, var2)); } return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, var2)); } catch (DuplicateTaskException dpe) { throw new CommandException(MESSAGE_DUPLICATE_TASK); } catch (TaskNotFoundException pnfe) { throw new AssertionError(""The target task cannot be missing""); } } "	0	1	0	0	1	0
"public static void Func1(final String[] var1) throws Exception { if (var1.length != 1) { System.out.println(""Usage: java FormMain <property file>""); System.exit(1); } String var2 = var1[0]; JFrame var3 = new MainFrame(var2); var3.setVisible(true); } "	0	1	0	0	1	0
"public boolean Func1(  ArrayList<JSONObject> var1 ) { for (int var2=0;  var2< var1.size(); var2++ ) { JSONObject var3 = var1.get(var2); Iterator<String> var4 = var3.keys(); while (var4.hasNext()) { String var5 = var4.next(); if ( var5.equals(""err"")){ return false; } if( Arrays.asList(this.playerInfo.fieldNames).contains(var5)) { try { Object var6 = var3.get(var5); Field var7 = PlayerInfo.class.getField( var5 ); var7.set(this.playerInfo, var6 ); } catch (Exception e) { e.printStackTrace(); return false; } } else { Log.var2(""bad name"", "" here 1""); return false; } } } saveToDrive(); return true; } "	0	0	0	1	0	0
private void Func1(){ locTrackingRightInnerPanel.setLayout(locTrackingRightInnerPanelBorderLayout); locTrackingRightInnerPanel.add(ltrUpperPanel, BorderLayout.NORTH); locTrackingRightInnerPanel.add(ltrLowerPanel, BorderLayout.SOUTH); displayCurrentProjButton.addItemListener(new java.awt.event.ItemListener() { public void Func2(ItemEvent var1) { displayCurrentProj_actionPerformed(var1); } }); displayCurrentProjButton.setSelected(true); ltrUpperPanel.add(displayCurrentProjButton); displayAllProjButton.addItemListener(new java.awt.event.ItemListener() { public void Func2(ItemEvent var1) { displayAllProj_actionPerformed(var1); } }); displayAllProjButton.setSelected(false); ltrUpperPanel.add(displayAllProjButton); ltScrollPane.setViewportView(allTrackingTable); ltScrollPane.getViewport().setPreferredSize(new Dimension(200,300)); locTrackingRightInnerPanel.add(ltScrollPane, BorderLayout.SOUTH); } 	1	1	1	0	1	0
"public Binder<JDBIEventRepository.BindEvent, EventRecord> Func1(Annotation var1) { return new Binder<JDBIEventRepository.BindEvent, EventRecord>() { public void Func2(SQLStatement<?> var2, JDBIEventRepository.BindEvent Func2, EventRecord var4) { var2.Func2(""id"", var4.getGroupId()); var2.Func2(""var4"", JSONHelper.writeObject(var4.getEvent())); var2.Func2(""status"", var4.getStatus().toString()); } }; } "	0	1	0	0	1	0
"protected String Func1() { String var1; LogEntries var2 = getDriver().manage().logs().get(LogType.BROWSER); List<LogEntry> var3 = var2.getAll(); for (int var4 = var3.size() - 1; var4 >= 0; var4--) { if (var3.get(var4).getMessage().contains(ALERT_KEY)) { var1 = var3.get(var4).getMessage(); return var1.substring(var1.indexOf(""\"""") + 1, var1.length() - 1).replace(ALERT_KEY, """"); } } return null; } "	0	1	0	1	1	0
"@Test public void Func1() throws Exception { try { String var1 = ""ifcbuildingstorey""; String var2 =  loadTestModel(TEST_MODEL_NAME); E3TestArgs var3 = new E3TestArgs(""GET"",BASE_URL); var3.setModelGuid(var2); var3.setIfcType(var1 ,null); log(E3Logger.DEBUG,""looking for '"" + var1 + ""' in model with var6:"" + var2); String var4 = this.runIfcApiService(var3); JSONArray var5 = new JSONArray(var4); assertTrue(""Wrong number of stories"",var5.length() == 3); String var6 = ""none""; for(int var7 = 0; var7 < var5.length(); var7++) { JSONObject var8 = var5.getJSONObject(var7); String var9 = var8.getString(""var9""); assertTrue(""Illegal type"",var9.contains(""/ifcbuildingstorey/"")); var6 = var8.getString(E3IfcApiResourcePath.MR_IFCGUID); } var3.setIfcType(""ifcbuildingstorey"",var6); var5 = new JSONArray(this.runIfcApiService(var3)); assertTrue(""Didn't find singlestorey"",var5.length() == 1); log(E3Logger.DEBUG,""--- response:"" + var5.toString()); log(E3Logger.INFO,""..."" + getQualifiedTestName() + "" completed successfully""); } catch(Exception ex)	{ log(E3Logger.ERROR,""..."" + getQualifiedTestName() + "" completed with error(s):"" + ex.toString()); testlib.writeTrace(ex.toString()); throw ex; } } "	0	0	0	1	0	0
"public Medicine Func1(Consumption var1){ Medicine var2 = null; int var3 = var2.getMedId(); String var4 = ""SELECT * FROM "" + DataBaseHelper.TABLE_MEDICINE + "" WHERE "" + DataBaseHelper.MEDICINE.ID.toString() + "" = ?""; Cursor var5 = database.rawQuery(var4, new String[]{Integer.toString(var3)}); if (var5.moveToFirst()){ String var6 = var5.getString(var5.getColumnIndex(DataBaseHelper.MEDICINE.Name.toString())); String var7 = var5.getString(var5.getColumnIndex(DataBaseHelper.MEDICINE.Description.toString())); int var8 = var5.getInt(var5.getColumnIndex(DataBaseHelper.MEDICINE.CatID.toString())); int var9 = var5.getInt(var5.getColumnIndex(DataBaseHelper.MEDICINE.ReminderID.toString())); int var10 = var5.getInt(var5.getColumnIndex(DataBaseHelper.MEDICINE.Quantity.toString())); int var11 = var5.getInt(var5.getColumnIndex(DataBaseHelper.MEDICINE.Dosage.toString())); int var12 = var5.getInt(var5.getColumnIndex(DataBaseHelper.MEDICINE.Threshold.toString())); String var13 = var5.getString(var5.getColumnIndex(DataBaseHelper.MEDICINE.DateIssued.toString())); ParsePosition var14 = new ParsePosition(0); Date var15 = medformatter.parse(var13,var14); int var16 = var5.getInt(var5.getColumnIndex(DataBaseHelper.MEDICINE.ExpiryFactor.toString())); var2 = new Medicine(var3, var6,var7,var8,var9, var10,var11,var12,var15,var16); } else{ Log.d(""BookingDao"",""Retrive MED from BOOKING failed""); } return var2; } "	1	1	0	1	1	0
"@Override public void Func1() { Document var1 = null; if (this.webpage.getFailureCount() > 0) { try { TimeUnit.SECONDS.sleep(this.webpage.getFailureCount()); } catch (InterruptedException e) { e.printStackTrace(); } } try { var1 = Jsoup.connect(this.webpage.getUrl().toString()).get(); if (!this.shouldCrawlPage()) { this.webpage.setStatus(200); this.webpage.unlock(); return; } Elements var2 = var1.select(""a""); ArrayList<URL> var3 = filterUnseen(var2); for (URL var4 : var3) { if (var4 != null && !this.pages.containsKey(var4)) { if (Main.depth_limit > this.webpage.getDepth()) { WebPage var5 = new WebPage(this.webpage, var4); var5.setDepth(this.webpage.getDepth() + 1); this.pages.put(var4, var5); } } } this.webpage.setStatus(200); } catch (UnsupportedMimeTypeException e) { this.webpage.setStatus(200); } catch (HttpStatusException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(e.getStatusCode()); this.webpage.setFailReason(e.toString()); System.out.println(e.getMessage()); } catch (SocketException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(-1); this.webpage.setFailReason(e.toString()); System.out.println(e.getMessage()); } catch (IOException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(-1); this.webpage.setFailReason(e.toString()); System.out.println(e.getMessage()); } System.out.println(webpage.toString()); this.webpage.unlock(); } "	0	1	0	1	1	0
"public synchronized void Func1(final String var1) { if (!this.bluetoothGatt.containsKey(var1)) { Log.d(TAG, ""Func1() - (new link) to device "" + var1); mDevice = BluetoothAdapter.getDefaultAdapter().getRemoteDevice(var1); this.bluetoothGatt.put(var1, mDevice.connectGatt(this, true, new CustomBluetoothGattCallback(var1))); } else { Log.d(TAG, ""Func1() - discovering services for "" + var1); this.bluetoothGatt.get(var1).discoverServices(); } } "	0	0	0	1	0	0
"private void Func1(String var1, List<StemNode> var2) { List<StemNode> var3 = lt.getMatchingStems(var1); for (StemNode var4 : var3) { assertTrue(""Should have contained: "" + var4, var3.contains(var4)); } } "	0	0	0	1	0	0
private static int [] Func1() { int [] var1 = new int[671]; int var2 = 0; var2 = Func1(ZZ_ROWMAP_PACKED_0, var2, var1); return var1; } 	0	0	0	1	0	0
"public static void Func1(String[] var1) { System.out.println(""Hello""); } "	0	0	0	1	0	0
"@Test public void Func1() { String var1 = ( ""public class Problem12 {\n"" +""	public static void main(String[] args) {\n"" +""		//generate triangle number array\n"" +""		long[] array = new long[20000000];\n"" +""		array[0] = 0;\n"" +""		for (long i = 1; i < array.length; i++) {\n"" +""			array[(int) i] = array[(int)i-1] + i;\n"" +""		}\n"" +""		//calculate first triangle number div > 500\n"" +""		for (long i = 1; i < array.length; i++) {\n"" +""			if (divisors(array[(int) i]) > 500) {\n"" +""				System.out.println(array[(int) i]);\n"" +""				break;\n"" +""			}\n"" +""		}\n"" +""	}\n"" +""	public static int divisors(long k) {\n"" +""	    long bound = k;\n"" +""	    int amount = 0;\n"" +""	    if (k == 1) return 1;\n"" +""	    for (int i = 1; i < bound; ++i) {\n"" +""	        if (k % i == 0) {\n"" +""	            bound = k / i;\n"" +""	            if (bound != i) {\n"" +""	                amount++;\n"" +""	            }\n"" +""	            amount++;\n"" +""	        }\n"" +""	    }\n"" +""	    return amount;\n"" +""	}\n"" +""}"" ); passed = compiler.compile(var1, false, ""Problem12""); assertEquals(true, passed); } "	0	0	0	1	0	0
"@Subscribe public void Func1(InternalGameEvent var1) { log.info(""EventSocketHandler got a message: "" + var1.getGameMessage().getType()); GameMessage var2 = var1.getGameMessage(); if (var2 instanceof GameCreatedEvent || var2 instanceof GameChangedEvent || var2 instanceof GameAbortedEvent) { sendListOfActiveGames(); return; } if (var2 instanceof TournamentEndedEvent) { sendGameMessage(var2); return; } if (var2 instanceof GameEndedEvent) { sendListOfActiveGames(); } sendGameEvent(var1.getGameMessage()); } "	0	0	0	1	0	0
"public Map<String,String> Func1(String var1, String var2, String var3){ Map<String, String> var4 = null; try{ PreparedStatement var5 = conn.prepareStatement(""SELECT (key,value) from ""+var1+"" WHERE namespace = ? AND keytype = ?""); var5.setString(1, var2); var5.setString(2, var3); var5.execute(); ResultSet var6 = var5.getResultSet(); var4 = new HashMap<String,String>(); while(var6.next()){ var4.put(var6.getString(1), var6.getString(2)); } } catch (Exception e) { log.error(""Error retrieving metadata values ""+e.getMessage()); } return var4; } "	0	0	0	1	0	0
public default GraphTraversal<S, E> Func1(final Traversal<?, ?> var1) { ((FunctionHolder<Traverser<?>, ?>) this.asAdmin().getEndStep()).addFunction(new TraversalObjectLambda(var1)); return this; } 	0	0	0	1	0	0
private int Func1( Method var1 ) { int var2 = 0; for( Class<?> var3 : var1.getParameterTypes() ) { if( var3 != Client.class && var3 != WorkingSession.class && var3 != CommandOptions.class && var3 != FilteredGAVs.class && var3 != ILogger.class ) var2++; } return var2; } 	0	0	0	1	0	0
"public void Func1() { ScreenManager.multiplexer.addProcessor(this); cameraHelper = new CameraHelper(); b2World = new World(new Vector2(0, 0f), true); b2World.setContactListener(this); gameWorld = GameWorldSerializer.deserialize(Gdx.files.internal(""map1.map"")); gameWorld.Func1(b2World); cameraHelper.setTarget(gameWorld.spaceShip.getBody()); } "	0	0	0	1	0	0
public static CheckBox Func1(String var1, Table var2, Skin var3){ CheckBox var4 = new CheckBox(var1, var3); var2.add(var4).right().row().fillX().expandX(); return var4; } 	0	0	0	1	0	0
"public static <T> List<T> Func1(String var1, String var2, Class<T> var3, Object[] var4) { String var5 = YANK_POOL_MANAGER.getMergedSqlProperties().getProperty(var1); if (var5 == null || var5.equalsIgnoreCase("""")) { throw new SQLStatementNotFoundException(); } else { return queryBeanList(var5, var3, var4); } } "	0	0	0	1	0	0
"public void Func1() { Toast.makeText(getBaseContext(), ""Login failed"", Toast.LENGTH_LONG).show(); _signupButton.setEnabled(true); } "	0	0	0	1	0	0
public static IdMap Func1(String var1) { IdMap var2 = new IdMap().withSessionId(var1); var2.with(new DiceCreator()); var2.with(new GameCreator()); var2.with(new GrassCreator()); var2.with(new GroundCreator()); var2.with(new RockCreator()); var2.with(new TrainerCreator()); var2.with(new TrapCreator()); var2.with(new ZombieCreator()); var2.with(new ZombieOwnerCreator()); return var2; } 	0	0	0	1	0	0
"public static final JavaScriptObject[] Func1(final Object[] var1, final WrapperCollection var2) { final JavaScriptObject[] var3 = new JavaScriptObject[var1.length]; for (int var4 = 0; var4 <= var1.length - 1; var4++) { final Object var5 = forcewrapAnyObjectForJavaScript(var1[var4], var2); if (var5 instanceof JavaScriptObject) { var3[var4] = (JavaScriptObject) var5; } else { var3[var4] = ExporterUtil.wrap(var5); } Console.log(""Resolved into "" + var3[var4].getClass()); } return var3; } "	0	0	0	1	0	0
"private void Func1(String var1) throws InvalidContentTypeException { if(!var1.equals(""image/png"") && !var1.equals(""image/jpg"")) { throw new InvalidContentTypeException(); } } "	0	0	0	1	0	0
"public void Func1() { try { FileInputStream var1 = new FileInputStream(""res/paperMan.properties""); props.load(var1); var1.close(); String var2 = props.getProperty(""firstTime"", ""true""); if(""true"".equals(var2)) { save(""res/maze.properties""); props.setProperty(""paperHealth"", ""10""); props.setProperty(""sound"", ""true""); props.setProperty(""game3Score"", ""0""); props.setProperty(""firstTime"", ""false""); props.setProperty(""timeSinceHit"", ""0""); save(var2); } } catch (IOException e1) { e1.printStackTrace(); } } "	0	0	0	1	0	0
"private void Func1() { int var1 = LessonHelper.calcDayNameToDay().var1(); Log.i(TAG, ""Func1() var1 = "" + var1 + "" positionTabSelect = "" + positionTabSelect); if (positionTabSelect == -1) { Log.d(TAG, ""positionTabSelect == -1.""); selectTab(var1); return; } if (positionTabSelect == var1) { Log.d(TAG, ""Tab saved position.""); } else { Log.d(TAG, ""Tab new position.""); resetSelectTab(positionTabSelect); selectTab(var1); } } "	0	0	0	1	0	0
"@Override protected Collection<SimulinkElement> Func1() { try { return getElementsForPaths(engine.evalWithResult(""find_system('"" + getSimulinkModelName() + ""')""), null); } catch (Exception e) { return Collections.emptyList(); } } "	0	0	0	1	0	0
"@Override protected Collection<SimulinkElement> Func1(String var1) throws EolModelElementTypeNotFoundException { try { return getElementsForPaths(engine.evalWithResult(""find_system('"" + getSimulinkModelName() + ""','BlockType', '"" + var1 + ""')""), var1); } catch (Exception e) { throw new EolModelElementTypeNotFoundException(this.getName(), var1); } } "	0	0	0	1	0	0
"@Override public Object Func1(Object var1, String var2) throws EolRuntimeException { try { return engine.evalWithResult(""get_param ('"" + ((SimulinkElement) var1).getPath() + ""', '"" + var2 + ""')""); } catch (Exception ex) { return super.Func1(var1, var2); } } "	0	0	0	1	0	0
"public String Func1() { return ""{action="" + this.action.name() + "", args="" + this.args + ""}""; } "	0	0	0	1	0	0
public int Func1(Object var1) { if (var1 instanceof Wrapper) var1 = ((Wrapper) var1).unwrap(); return path.Func1(var1); } 	0	0	0	1	0	0
"@Test public final void Func1() { try { createODataCollection(); TResponse var1 = Http.request(""crossdomain/xhr2-preflight.txt"") .with(""path"", ""/testcell1/box1/odatacol"") .with(""token"", DcCoreConfig.getMasterToken()) .returns() .statusCode(HttpStatus.SC_OK) .debug(); checkXHR2Header(var1, ""OPTIONS, GET, DELETE, MOVE, PROPFIND, PROPPATCH, ACL""); } finally { deleteODataCollection(); } } "	0	0	0	1	0	0
"private ListGroupsResponse Func1() { List<ListGroupsResponse.Group> var1 = Arrays.asList(new ListGroupsResponse.Group(""test-group"", ""consumer"")); return new ListGroupsResponse(Errors.NONE, var1); } "	0	0	0	1	0	0
"@VisibleForTesting public Proxy Func1(URI var1) { Preconditions.checkNotNull(var1, ""var1 is null""); Preconditions.checkArgument(var1.getScheme().equals(""http""), ""http is not a supported schema""); IProxyService var2 = proxyService; if (var2 == null) { return Proxy.NO_PROXY; } IProxyData[] var3 = var2.select(var1); for (final IProxyData var4 : var3) { switch (var4.getType()) { case IProxyData.HTTPS_PROXY_TYPE: return new Proxy(Type.HTTP, new InetSocketAddress(var4.getHost(), var4.getPort())); case IProxyData.SOCKS_PROXY_TYPE: return new Proxy(Type.SOCKS, new InetSocketAddress(var4.getHost(), var4.getPort())); default: logger.warning(""Unsupported proxy type: "" + var4.getType()); break; } } return Proxy.NO_PROXY; } "	0	0	0	1	0	0
"private static String Func1(final String var1, final Forbidden.Type var2) { switch (var2) { case PREFIX: return var1.replaceAll(""\\."", ""(\\\\.|/)""); case FIXED: return var1.replaceAll(""\\."", ""(\\\\.|/)"") + ""\\W""; case WILDCARD: return var1.replaceAll(""\\."", ""(\\\\.|/)"").replaceAll(""\\*"", ""\\S*""); default: System.err.println(""unsupported var2 for @Forbidden""); System.exit(-2); return null; } } "	0	0	0	1	0	0
